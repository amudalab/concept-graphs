in the last class we discussed hashing 
we saw few collision resolution techniques 
so we first saw chaining then last class we saw double hashing linear programming 

you also did little bit of analysis of these collision resolution techniques right 
in today we are going to talk about trees 

in after we are also going to look at binary trees some data structures for trees 




so what is the tree 
many of you come across tree before  except this tree is going to be different from once  across before right 
so here the root will be at the top 
most trees around you see you you don't see the root 
so the root is going to be at the top of the tree 
so in this tree A is the root 
there is a notion of parent and children 
so the node B is the parent of node D and E 
okay by the same argument A is the parent of B and C 
C is parent of F G and H 
A is a parent of B which in turn parent of D and E 
so A is ancestor of D and E 
A is also ancestor of F G and H 
A is also an ancestor of I 
right A is a grandparent sometimes we use the grandparent 
A is a grandparent of D E F G and H yeah
you understand what the difference between ancestor and grandparent 
D and E are descendents of A yeah 
in fact B C D E F G H I are all descendents of A 
C B are siblings because they have the same parent 
B is a sibling of C C is a sibling of B    
G and E are not siblings 
G and E are not siblings please note
F G H are siblings 
D and E are children of node B right
so A is a parent of B 
B is a parent of D and E 
D and E are children of B 
B and C are children of A 
All of these are descendents of A
as are all of these 
I has three ancestors 
H C and A 
H is the parent 
C is the grandparent 
and A is the great grand parent 
all the way don't use the term 
just call it an ancestor okay 
what we at the terms we defined till not now more in the nature of family tree  
so now will come to real trees right
and then D E F G H I are called the leaves of the trees 
so this is the root 
so if you just turn it upside down 
then it should be the leaves right 
the extremists 
so what is the leaf 
a leaf is a these are also called generic terms for these also nodes of a tree 
so leaf is a node which has no children right 
if a node has a no children it's a leaf 
so H is not a leaf 
H as a child 
but I F G E and D are nodes which don't have any children and so they are 
leaves 




more definitions A B C and H are called internal nodes right 
node which is not a leaf is called an internal node 
okay now we associate a notion of level with each node 
the root is at level zero 
children of the root are at level one 
the children of those nodes which are level one are at level two 
 right so D E F G H all at level two right its not that h is at level two 
its not all these are at level two 
this is the level at three 
sometimes we also use the term depth right 
so depth in level of the same thing 
so this is depth zero depth two depth three 
the height of the tree is the maximum level of any node in the tree 
so what's the maximum level of any node 
the height of this tree is three 
any questions till this point 
the degree of the node 
the number of children in it 
B has a degree two 
C has a degree three 
H has a degree one 
the leaves have degree zero yeah
so basically basic terminology quite intuitive also 
any questions 




no what are trees used for 

they can represent the hierarchy in an organization right
so for instance there is company lets called electronics are used which has some divisions R&d one divisions another purchasing another manufacturing fourth division sales there is 
lets say domestic sales is one 
sub division of this division an international so on 
so you could represent the organizational structure
through out tree 
you could also use a tree to represent the table of contents in a book right 
so you have 
lets say book called student guide which has chapters overview grading environment programming support code 
this then has be chapter has come sections called exams homework's programs whatever right
they could have some some subsections so on to that would build up tree 





your file system in if you use the unix environment in the windows environment is also organized as a tree yeah 
this is the lets say one root directory certain directory these are two sub directories in mat
okay
and then with in the sub directory have some other sub directory within then i have homework's assignment whatever yeah
your file system is also organized like a tree 



so more definitions much of a todays class would be about definitions and then we start using definitions in later in later classes 





but you should understand then if there is any doubt kind please ask 

an ordered tree is one which the children of the each node are ordered right 
so what is that mean 
that means that this is will call this is as the 
there is a notion we would like like to put this child to the left of the child right
suppose you want to draw family tree 
in a family tree may be you want to draw the eldest child in the left 




right and the younger child as you move from left to right right 
so there is a notion of ordered there and some time you want to reflect that order in your tree but there would be no notion of order 
lets say in your this example right 
will this is an directory 

there are two sub directory trees here 
now whether i have placed to the left of his or to the right 
it doesn't really make a sense as far as the picture concerned right 
and it doesn't convey  any additional information 
but sometimes you might have the notion of order in the children's right 




such an tree is called an ordered tree 
a binary tree is an ordered tree right 
there is a notion of  left child and a right child 
actually it's a ordered tree which every node has a at most two children right
so this is an example of binary tree 
this is has two children this has only one child 
this has only one child 
this has no children 
these are leaves 
we have one two three four five leaves which have no children 
this node also one children one child right 
and these are ordered 
so there is a notion of left and right 
if i were to change this 
i i were to draw this on the left and this on the right 
then i get different binary tree its not the impact 



 that would still be a binary tree but it would different from binary tree 
[student:once we have defined the notion of some order once we interchange the  top two nodes how it will stil remain ordered wont wont be ordered be started then 
no this is one binary tree 

all these are saying  this is one binary tree 
if i were to draw in a slightly in a different manner which means i put this i move this entire piece to the left and the entire piece to the right 
then i get a different binary tree right 
the two different binary trees that's all we seen




  [student : different example if we change the]  all of this dependent upon what application you have 
this is just a way of would representing an information right 
sometimes the order  is um has has meaning to it sometime no meaning to it 
when it has some meaning to it then you would use an ordered tree and when therefore if your were to change the order then your representing something in the front 
because when your change the order yeah we ill see more example of this and this thing would become clear 
i can also define a binary tree recursive format follows right 



a binary tree i could say binary tree is just read the single node a leaf or it is internal node which is the root to which i have attached two trees binary tree 
this part is called the left sub tree and this is called the right sub tree 
so i can construct any binary tree in this manner  yeah
i take a node i attached left sub tree and right sub tree 
how do i get left sub tree right sub tree recursive that itself obtained by taking a node and attaching to left and right sub trees





right i have said and or which means i might this left sub tree might be null 
i might not attached anything here 
or i might not attached anything to the right or i might attached both right
so remember this term we have introduce other terms left sub tree right sub tree 
this is called the left sub tree of this node yeah 
and this is called right sub tree of this node 
what is the left sub tree of this node 
it would be this piece this piece that would be the left sub tree of the um 





okay more examples of so examples of binary trees 
arithmetic expressions right 
i have an arithmetic expression which looks like this 
i can represent this as a binary tree 
what is that mean well  this is look at the parenthesization of this expression and suppose i have parenthesized this manner we have four plus six 
so the numbers here will be the leaves of my binary tree and the internal node would correspond to the operations right 
so in fact this is one way you could evaluate this expression also right
you would take this thing four plus six sum that right 
you would draw tree which has one internal node and its two children are four and six 
this internal node would have plus operator in it 
whatever is the resulting value we are adding to that one 
so i draw a tree whose root is a plus operator 
one child is one and the other child is sub tree that obtained from this operation and so on and on i could built this tree right
this is just a way of representing another way of representing yeah 





decision trees is an another example of another binary tree right 
so this is an example taken from book much of  it would not make much sense may be star bucks cafe paragon we would not come across them nevertheless 
suppose you know what is the decision tree
each node on the each node in the decision tree corresponds to some decision you have to make  so whether you want so you come to top root node and ask whether you want a fast meal 
the answer is yes 
then you come to this node 
whether you want coffee or not 
the answer is yes 
you go to star bucks the answer is no 
you may be go to some other place right and so on and on 
so decision trees are another example of binary trees why binary because typically its yes and no right 
you would follow the decision tree in a particular node



okay this was just  more of terminology and examples right 
so lets see more competes stuff 
lets define a complete binary tree 

right so this still are binary trees as you can see every node in this tree has less than or equal to two children right 
at most  two children but i will call such a complete binary tree why it is complete 
well so we call a tree a complete binary tree 
if at the ith level 
there are two to the i nodes right 
in some sense its full  and every node has to no no no 
that is that is not equivalent right every node has two children saying it evry node has two children doesn't give you a complete binary tree okay 




lets see if i can quickly show you why not 
lets see this 
every node has two children 
every internal node have two children in this tree  
oh every node has a two children then telling that a tree has to have leaves right 
so it cannot be the the case every node has two two children
some nodes have no children 
so yeah so just the requirement that every node has two children 
every node other than the leaf that means every internal node has two children doesn't implies it's a complete binary tree 



this is a counter example 
every internal node here is two children 

this is not complete binary tree right 
so here is an example of a complete binary tree 
so we want to say at level i there are two to the i node 
this was level zero one node level one two nodes level two four level three eight right 
okay 
now if h is the height of the tree 
this example what is the height of the tree 
we call height was the maximum level number 
so don't count this as four 
count it as one two yeah 
if h is the 
if h is the height of the tree that means all the leaves are at level h yeah 
if the leaves are all at level h 
then in the definition of the binary tree we said that level i has two to the i nodes 
that means there are two to the h 
so number of leaves complete binary tree of height h is just to the h right 
what is the number of internal nodes here 
well at level zero we have one node level one we have two nodes and so on
this is this is sum one plus two plus two squared 
all though have to two to the h minus one right 
because at level h all the nodes are leaf nodes 
so this sum which is two to the h minus one right okay 
this is the number of internal nodes 
the number of leaves is two to the h 
so the number of internal nodes is number of leaves minus the one yeah
this is for this complete binary tree um for a complete binary tree 
number of internal nodes is number of leaves minus the one 
so what is the total number of nodes in this tree its two to the h which is the number of leaves plus two to the h plus one  which is the number of internal nodes it becomes two to the h plus one minus one right 
lets call this number n 
so if i have a tree n node if i have a complete binary tree n nodes what is the height of this tree 
lets go one step at a time 
whats the number of leaves in this tree 
if this is n 
so number of leaves two to the h 
so two to the h equals n plus n by two right just from this expression 
so the number of leaves in a complete binary tree on n nodes is n plus one by two 
if i have a complete binary tree on n nodes half the nodes are leaves in the remaining half our internal nodes




and similarly i can say that the 

if i have a tree on n nodes then the height of the tree is log of the number of leaves why i can evaluate h from here 
h will be n plus one by n plus one log of n plus one by two and so its log of number of nodes right 
we can go directly from here number of leaves two to the h and so h is log of n
log of the number of leaves sorry 21.05




any questions on this 
you just some simple counting that your doing here yeah 
you should be able to say that if i give you a tree of height h 

what is the number of complete binary tree of  height h 
whats the number of leaves is going to have whats the number of internal nodes it have 
if i give you a complete binary tree on n nodes then whats it height so on and on 
if you have tree on n nodes then its height is log of n plus one by two right this is the height of the tree 




and the other thing your have to keep in mind is that in such a tree is number of leaves is very large 
its roughly the total number of nodes yeah
its very leafy kind of  a tree 
okay now whats the binary tree that was the complete binary tree right but a binary tree is said any tree which every node as at most two children 
so what you can do is 

you can take a complete binary tree 
or two get any binary tree 
you can start suitably large complete binary tree and just cut it off 
right for instance here if i were to cut off this piece and this piece then i would get such a binary tree 
and i can always do it 
no matter what tree i wanted right 
if i had any if there was you said take this binary tree of height three then i would start with this complete binary tree of  height three and just cut off some pieces to get this 
i can always do that right  
this picture is proof  everyone with me 





so lets use this fact you can obtain any binary tree by just pruning of a complete binary tree 
take a complete binary tree take off some pieces cut off some branches you ill get a binary tree 

so if i have a binary tree of  height h 
then in a complete binary tree at level i there were at most there were exactly two to the i 
so in a binary tree at level i there will be level at most two to the i nodes 
there cannot be more than two to the i nodes because the binary tree is obtained from complete binary tree by pruning 






this is the  important fact at most two to the i nodes at level  i and if the at most two to the i nodes level i this implies 

that the total number of nodes in your complete binary tree in your binary tree height h is at most this 
one plus two plus two square which is this yeah  
its height h the last level is h at level zero there will be one node 
at level one 




there is at most two nodes 
at level two there are at most four nodes so on 
this is the maximum number of nodes that binary tree i have 
lets rewrite this 
suppose i told you that tree has n nodes right 

 then n is less than or equal to this quantity 
n is less than or equal to this that the height of the tree 
i just rearranged  is greater than log off plus one by two right 
if i give you a binary tree with n nodes in it 	
its height is at least log of n plus one by two 
and there is a particular binary tree which achieves this equality and that's a complete binary tree 




right think of a complete binary tree has the tree which acquires the smallest  height
if i create a binary tree with certain number of nodes the one which has the shortest height will be a complete binary tree 
right because they do packing all the nodes close to the root as possible by filling up all the levels to the maximum  that's the minimum height of the binary tree 
i give you a binary tree on n nodes 

which is minimum possible height of log of n right 
whats the maximum height that binary tree n nodes  right and so binary trees on n nodes has height n minus one 
this is obtained when every node exactly one child um every node yeah
every node is exactly one child this could be zig zag in any manner height here is one one two three four five six seven eight there nine nodes here height is it eight yeah 





plus maximum height of the binary tree 
so binary tree  on n nodes minimum height is log of n log of n plus one by two whatever but say log of n 
maximum height is n minus one 
that's the mistake many people make 
they always assume that binary tree means height is log n no could be anywhere between log n and n  
how he leaves does the binary tree have right 
26.44
whats the minimum number leaves can have whats the maximum number of leaves it can have 
lets figure it out 
we ill prove the number of leaves in a tree it is less than or equal to one plus number of internal nodes  
any binary tree 




the number of leaves this is useful inequality 
number of leaves is less than one plus the number of internal nodes or at most the number of leaves in a tree can be one more than the number of internal nodes
how will we prove this 

will prove it by induction 
induction on the number of internal nodes okay 
so base case consider a tree with one node 
if a tree as only one node internal nodes it have





zero because one node doesn't have child 
so that's the leaf 
so base cases when number of internal nodes is zero really 

in which case left hand side the right hand side is one number of leaves is one so inequality suspect (satisfy)
so we ill assume the statement is true for all trees with less than or equal to k minus one internal nodes 
right this should actually read statement is true for trees with at most k minus one internal nodes not just k minus one only thing even less this statement is true 
so we will not prove it for a tree with k internal nodes suppose i have a tree with k internal nodes right 
lets say on the left sub tree i have k one k sub one internal node 
then how many internal nodes to have on the in the right sub tree 
if in the left sub tree i have k sub one internal nodes 
then how many nodes to internal nodes  in the right sub tree exactly k minus k one minus one right
not at most such thing because all the internal nodes either there in the left sub tree or they in the right sub tree or it's the root node right
so minus one because of the root node 
so this is the number of internal nodes in the right sub tree 
now lets apply the induction hypothesis k one is less than k less than or equal to k minus one and this quantity also less than or equal to k minus one right 
so we can use induction hypothesis the number of leaves in the left sub tree in the left sub tree which has k one internal nodes the number of leaves is less than or equal to k plus one 
this sub tree the number of leaves is less than or equal to k minus k one minus one plus one which is k minus k one 
the total number of leaves is just the sum as two 
all the leaves either in the left sub tree or in the right sub tree 
so total number of leaves is just as the sum which is k plus one which is what we want to prove right
since we started with a k internal node 
so you have to show that the number of leaves is less than one k yeah
this is proof create on the simple proof which shows the number of leaves is at most one plus the number of internal nodes 





there was a tree we saw were the number of leaves is equal to the number of internal nodes plus one  in a complete binary tree right 
what was the number of leaves there  the number of leaves is two to the power h 
if h was the height the tree 
the number of internal nodes was one plus two plus two squared all the way to two to the h minus one which is two to the h minus one 
so there was a exactly s difference of one number of leaves and number of internal nodes right 
so the complete binary tree once again h achieves the equality 
right for any other tree the number of leaves will only be less than or equal to this right 
how small it can be 
so lets look at that 

so for a binary tree n nodes the number of leaves plus the number of internal nodes is n yeah because the every node is either a leaf and also we just saw the number of leaves is less than or equal to number of internal nodes plus one right
ill just rearrange this this implies the number of leaves is less than or equal to n plus one by two tree 
what i have done just number of internal nodes is greater than or equal to number of leaves minus one 
so i replace that here and so i get the number of leaves is less than or equal to n plus one by two 
for any binary tree 
so that's the another thing to keep in mind 
binary tree the number of leaves will never be more half the number of nodes in the tree 
never right 
and again this equality was achieved for for our complete binary tree that's the most leafy term yeah 
all others are dryer trees and the minimum number that tree might have is just one right 
whats the example for that the same example i showed you before that um tree on nine nodes only one leaf in it 




so now lets look at an abstract type of data types 
so you would have the generic methods which you seen all for the abstract data types right 
so these care generic container methods of size how many nodes are there in tree whether the tree is empty or not 
an element is a method list out 
all the elements of the tree  you could have position based container methods kind we saw for the list or sequence data types right right 
so swap elements p and q i have been specified two positions p and q 
so think of the positions as references to the tree 
except that using the position data type i have not able to access anything else but the elements sitting in that position    yeah 
 the position the  the  method positions
will specify all the positions in the tree it will give you all the positions the tree has a sequence  just the position the the position objects 
this positions methods has no parameters right 
when you invoke on it  a certain tree it will just give you a sequence of all the positions in the tree 
references to all the nodes in the tree  
once you access you a particular position then you can using the element method on that positions access the element 
swap elements p comma q given two positions p and q swapping the elements at these two positions replace element p comma e which means that given a position p you replacing the element at that position with p 
query methods given a particular position is this root of the tree yeah 
given a particular position is this is an internal node given a particular position is this external or leafs sometimes you use the external or some times use the leafs 
yeah this position does it correspond to leaf 
access a methods root when i call root now it will return to me a position of the root 
an object of type position right 
so what you understand difference between this and this 
given a position is it a root and this returns the root [student: a position of a root] the position of a root  exactly the position of the root means reference to that particular node except that this is not a reference to the node but its is a reference of type position so that you cannot access anything else  but the element um 
this was the same as the type casting um yes parent p given a particular position return to me parent node children p given a particular position return to me the children of this node right 






okay now what it will return if children there could be many children of a certain nodes 
how it will return the various children  as the sequence 
it will return all the nodes 
it will return an sequence an object type sequence which will contain the position of all the children's  that that can be note on that position 
position as a element method which will let you to access the data 
the update methods are typically application specific this would be the generic method okay 

binary tree should really be treated as a sub class as a derived class  tree
all we need to do is to continue to have the same method will describe for the tree but have additional methods now right 
they would be notion of a left child 
given a position give me the left child give me your right child or give me a sibling right um 




will come to these update methods when we see example of this so ill skip that for 
now 

what is the node structure in a binary tree right what are the data your keeping in an object corresponding to a node of the binary tree 
you would have data you would have reference to the left child could have reference to the right child 
you would have reference to the parent  typically yeah 
and you would also have a reference to key or data associated with this node any element that sitting in this node you would have reference to it 
these we all sitting together  [student: it has to the reference to the parent and the child] yeah where is the the reference to this node will not will not stored in the node doesn't make any sense right
so for instance if i access to this node suppose this was the root node and i use the root method to get a position to this node then using that position i can now access the left child by invoking the left child method and in this manner i can get the position of any node right and once i have the position of a node i can then invoke element method whatever i need to do to get the datas associated with that  
a node in this case would definitely implement the position exactly 





right this is what the binary tree would look like look at the links so on 
this node its parent link could be null 
because it has no parent the root node right and then it would have left child 
the left child would be referring to this node 
right child would be referring to this node so on and on right 
this doesn't not have any right child 
so its right child um member would be referring to null 
any questions 
okay that was for a binary tree 
how do we take care of arbitrary trees 
lets say unbounded trees for now right
this node has 
lets say three children 
this node also three children 
so are we going to have three different data members here for point to refer to the three children right that's not clear how to do it 
because then if it has four children then how would you create space for another member so on and on right 
so so the way to do it is that you have a reference to  one of the child only right and then all the children are in a linked list okay 
and each children will have a reference to the parent 
so all of these children would be pointing to this 
this would be pointing to only one of them 
which would be the head of this linked list 
yeah so from this node if i have want to refer to this children i can just come here essentially return all the elements of this linked list 
how do i know i have reach the last element of the linked list when the next is empty 
why does the first field of this node empty because it does not have children right 
so every node still has only three members three members right 
parent or three references one for the parent one for left most child and one for the sibling for the right sibling right 
so this would referred to  left most child not to all the children because that we do not know how many they are 
and it will have one more refer to the right child to the right sibling because for this it has to refer to the right sibling yeah 
is there any questions some question 
you can do with only three references  this one this one this one yeah 
this had only one child right 
if it had only one child its just pointing to the one child  there is no sense in left and right here 
this is not a binary tree 
left and right only make sense binary tree um
right actually i should not have return left child here 
i should right first child such thing  
any one child its just point to the one child 




and that one child then lets you access its siblings through a linked list right 
if you from the right child go to next child and to from the next child and do from the next child and so on 
so you can step through all the various children throughout linked list 
any questions in this 
so with that we ill end our discussion on binary trees today 
in the next class we are going to look at reversals of trees and yeah that's all 

