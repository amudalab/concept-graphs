A stack is a collection of objects that are inserted and removed according to the last in first out(LIFO) principle. Objects can be inserted into a stack at any time, but only most recently inserted(that is, "last") object can be removed at any time. The name "stack" is derived from the metaphor of a stack of plates in a spring-loaded, cafeteria plate dispenser. In this case, the fundamental operations involve the "pushing" and "popping" of plates on the stack. When we need a new plate from the dispenser, we "pop" the top plate off the stack, and when we add a new plate, we"push" it down on the stack to become the new top plate. Perhaps an even more amusing metaphor would be a PEZ candy dispenser, which stores mint-candies in a spring-loaded container that "pops" the top-most candy in the stack when the top of the dispenser is lifted. Stacks are a fundamental data structure. They are used in many applications including the following. Stacks are the simplest of all data structures, yet they are also among the most important, as they are used in a host of different applications that include many more sophisticated data structures. Formally, a stack is an abstract data type(abstract data structure) that supports the following two methods:
push(e): Insert element e, to be the top of the stack.
pop(): remove from the stack and return the top element on the stack; an error occurs if the stack is empty
Additionally, let us also define the following methods
size(): return the number of elements in the stack
isEmpty(): Return a Boolean indicating if the stack is empty
top(): return the top element in the stack, without removing it; an error occurs if the stack is empty