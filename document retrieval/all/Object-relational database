
Object-relational database
 /firstHeading 
 bodyContent 

 tagline 
From Wikipedia, the free encyclopedia
 /tagline 
 subtitle 

 /subtitle 
 jumpto 

					Jump to:					navigation, 					search

 /jumpto 
 bodycontent 





This article needs additional citations for verification. Please help improve this article by adding citations to reliable sources. Unsourced material may be challenged and removed. (October 2008) 


An object-relational database (ORD), or object-relational database management system (ORDBMS), is a database management system (DBMS) similar to a relational database, but with an object-oriented database model: objects, classes and inheritance are directly supported in database schemas and in the query language. In addition, just as with proper relational systems, it supports extension of the data model with custom data-types and methods.




Example of an object-oriented database model.[1]


An object-relational database can be said to provide a middle ground between relational databases and object-oriented databases (OODBMS). In object-relational databases, the approach is essentially that of relational databases: the data resides in the database and is manipulated collectively with queries in a query language; at the other extreme are OODBMSes in which the database is essentially a persistent object store for software written in an object-oriented programming language, with a programming API for storing and retrieving objects, and little or no specific support for querying.




Contents


1 Overview
2 History
3 Comparison to RDBMS
4 See also
5 References
6 External links




[edit] Overview
The basic goal for the Object-relational database is to bridge the gap between relational databases and the object-oriented modeling techniques used in programming languages such as Java, C++, Visual Basic .NET or C#. However, a more popular alternative for achieving such a bridge is to use a standard relational database systems with some form of Object-relational mapping (ORM) software. Whereas traditional RDBMS or SQL-DBMS products focused on the efficient management of data drawn from a limited set of data-types (defined by the relevant language standards), an object-relational DBMS allows software developers to integrate their own types and the methods that apply to them into the DBMS.
The ORDBMS (like ODBMS or OODBMS) is integrated with an object-oriented programming language. The characteristic properties of ORDBMS are 1) complex data, 2) type inheritance, and 3) object behavior. Complex data creation in most SQL ORDBMSs is based on preliminary schema definition via the user-defined type (UDT). Hierarchy within structured complex data offers an additional property, type inheritance. That is, a structured type can have subtypes that reuse all of its attributes and contain additional attributes specific to the subtype. Another advantage, the object behavior, is related with access to the program objects. Such program objects have to be storable and transportable for database processing, therefore they usually are named as persistent objects. Inside a database, all the relations with a persistent program object are relations with its object identifier (OID). All of these points can be addressed in a proper relational system, although the SQL standard and its implementations impose arbitrary restrictions and additional complexity[2][pageneeded]
In object-oriented programming (OOP) object behavior is described through the methods (object functions). The methods denoted by one name are distinguished by the type of their parameters and type of objects for which they attached (method signature). The OOP languages call this the polymorphism principle, which briefly is defined as "one interface, many implementations". Other OOP principles, inheritance and encapsulation are related both, with methods and attributes. Method inheritance is included in type inheritance. Encapsulation in OOP is a visibility degree declared, for example, through the PUBLIC, PRIVATE and PROTECTED modifiers.
[edit] History
Object-relational database management systems grew out of research that occurred in the early 1990s. That research extended existing relational database concepts by adding object concepts. The researchers aimed to retain a declarative query-language based on predicate calculus as a central component of the architecture. Probably the most notable research project, Postgres (UC Berkeley), spawned two products tracing their lineage to that research: Illustra and PostgreSQL.
In the mid-1990s, early commercial products appeared. These included Illustra[3] (Illustra Information Systems, acquired by Informix Software which was in turn acquired by IBM), Omniscience (Omniscience Corporation, acquired by Oracle Corporation and became the original Oracle Lite), and UniSQL (UniSQL, Inc., acquired by KCOMS). Ukrainian developer Ruslan Zasukhin, founder of Paradigma Software, Inc., developed and shipped the first version of Valentina database in the mid-1990s as a C++ SDK. By the next decade, PostgreSQL had become a commercially viable database and is the basis for several products today which maintain its ORDBMS features.
Computer scientists came to refer to these products as "object-relational database management systems" or ORDBMSs.[4]
Many of the ideas of early object-relational database efforts have largely become incorporated into SQL:1999 via structured types. In fact, any product that adheres to the object-oriented aspects of SQL:1999 could be described as an object-relational database management product. For example, IBM's DB2, Oracle database, and Microsoft SQL Server, make claims to support this technology and do so with varying degrees of success.
[edit] Comparison to RDBMS
An RDBMS might commonly involve SQL statements such as these:



   CREATE TABLE Customers  (
       Id          CHAR(12)    NOT NULL PRIMARY KEY,
       Surname     VARCHAR(32) NOT NULL,
       FirstName   VARCHAR(32) NOT NULL,
       DOB         DATE        NOT NULL
    );
    SELECT InitCap(Surname) || ', ' || InitCap(FirstName)
      FROM Customers
     WHERE MONTH(DOB) = MONTH(getdate())
       AND DAY(DOB) = DAY(getdate())


Most current[update] SQL databases allow the crafting of custom functions, which would allow the query to appear as:



    SELECT Formal(Id)
      FROM Customers
     WHERE Birthday(Id) = Today()


In an object-relational database, one might see something like this, with user-defined data-types and expressions such as BirthDay():



    CREATE TABLE Customers (
      Id           Cust_Id     NOT NULL  PRIMARY KEY,
      Name         PersonName  NOT NULL,
      DOB          DATE        NOT NULL
    );
    SELECT Formal( C.Id )
      FROM Customers C
     WHERE BirthDay ( C.DOB ) = TODAY;


The object-relational model can offer another advantage in that the database can make use of the relationships between data to easily collect related records. In an address book application, an additional table would be added to the ones above to hold zero or more addresses for each user. Using a traditional RDBMS, collecting information for both the user and their address requires a "join":



     SELECT InitCap(C.Surname) || ', ' || InitCap(C.FirstName), A.city
       FROM Customers C JOIN Addresses A ON A.Cust_Id=C.Id -- the join
      WHERE A.city="New York"


The same query in an object-relational database appears more simply:



    SELECT Formal( C.Name )
      FROM Customers C
     WHERE C.address.city="New York" -- the linkage is 'understood' by the ORDB


[edit] See also

SQL
List of object-relational database management systems
Object database
Object-relational mapping
Relational model
LINQ
ADO.NET Entity Framework

[edit] References


^ Data Integration Glossary, US: Department of Transportation, August 2001, http://knowledge.fhwa.dot.gov/tam/aashto.nsf/All+Documents/4825476B2B5C687285256B1F00544258/$FILE/DIGloss.pdf[dead link]
^ Date, Christopher Chris J; Darwen, Hugh, The Third Manifesto
^ Stonebraker,. Michael with Moore, Dorothy. Object-Relational DBMSs: The Next Great Wave. Morgan Kaufmann Publishers, 1996. ISBN 1-55860-397-2.
^ There was, at the time, a dispute whether the term was coined by Michael Stonebraker of Illustra or Won Kim of UniSQL.


[edit] External links



Wikimedia Commons has media related to: Object-Oriented models



Savushkin, Sergey (2003), A Point of View on ORDBMS, http://savtechno.com/articles/ViewOfORDBMS.html, retrieved 2012-07-21.
JPA Performance Benchmark, http://www.jpab.org/  comparison of Java JPA ORM Products (Hibernate, EclipseLink, OpenJPA, DataNucleus).
PolePosition Benchmark, http://www.polepos.org/  shows the performance trade-offs for solutions in the object-relational impedance mismatch context.









v
t
e


Database models






Models



Flat
Hierarchical
Dimensional model
Network
Relational
Entity-relationship (and Enhanced notation)
Graph
Object-oriented
Entity-attribute-value model








Other models



Associative
Multidimensional
Semantic
Star schema
XML database








Implementations



Flat file
Deductive
Document-oriented
Object-relational
Temporal
XML data stores
Triplestores
















v
t
e


Database management systems









Database models
Database normalization
Database storage
Distributed DBMS
Federated database system
Referential integrity
Relational algebra
Relational calculus
Relational database
Relational DBMS
Relational model
Object-relational database
Transaction processing








Concepts



Database
ACID
CRUD
Null
Candidate key
Foreign key
Primary key
Superkey
Surrogate key
Armstrong's axioms
NoSQL








Objects



Relation

table
column
row


View
Transaction
Log
Trigger
Index
Stored procedure
Cursor
Partition








Components



Concurrency control
Data dictionary
JDBC
XQJ
ODBC
Query language
Query optimizer
Query plan








Functions



Administration and automation
Query optimization
Replication











Database products
Object-oriented

comparison


Relational

comparison


Document-oriented
NewSQL








 
NewPP limit report
Preprocessor visited node count: 4856/1000000
Preprocessor generated node count: 27789/1500000
Post-expand include size: 51405/2048000 bytes
Template argument size: 19313/2048000 bytes
Highest expansion depth: 23/40
Expensive parser function count: 4/500

 Saved in parser cache with key enwiki:pcache:idhash:68960-0!*!0!!en!4!* and timestamp 20121214085802 
  /bodycontent 
 printfooter 

				Retrieved from "http://en.wikipedia.org/w/index.php?title=Object-relational_database&oldid=527987339"				
 /printfooter 
 catlinks 
Categories: Database management systemsDatabase modelsHidden categories: All articles with dead external linksArticles with dead external links from July 2012Articles needing additional references from October 2008All articles needing additional referencesWikipedia articles needing page number citations from March 2012Articles containing potentially dated statements from 2007All articles containing potentially dated statements  /catlinks 

 debughtml 
 /debughtml 

 /bodyContent 

 