
Knapsack problem
 /firstHeading 
 bodyContent 

 tagline 
From Wikipedia, the free encyclopedia
 /tagline 
 subtitle 

 /subtitle 
 jumpto 

					Jump to:					navigation, 					search

 /jumpto 
 bodycontent 
"BKP" redirects here. For other uses, see BKP (disambiguation).




Example of a one-dimensional (constraint) knapsack problem: which boxes should be chosen to maximize the amount of money while still keeping the overall weight under or equal to 15kg? A multiple constrained problem could consider both the weight and volume of the boxes.
(Solution: if any number of each box is available, then three yellow boxes and three grey boxes; if only the shown boxes are available, then all but the green box.)


The knapsack problem or rucksack problem is a problem in combinatorial optimization: Given a set of items, each with a weight and a value, determine the number of each item to include in a collection so that the total weight is less than or equal to a given limit and the total value is as large as possible. It derives its name from the problem faced by someone who is constrained by a fixed-size knapsack and must fill it with the most valuable items.
The problem often arises in resource allocation where there are financial constraints and is studied in fields such as combinatorics, computer science, complexity theory, cryptography and applied mathematics.
The knapsack problem has been studied for more than a century, with early works dating as far back as 1897.[1] It is not known how the name "knapsack problem" originated, though the problem was referred to as such in the early works of mathematician Tobias Dantzig (18841956),[2] suggesting that the name could have existed in folklore before a mathematical problem had been fully defined.[3]




Contents


1 Applications
2 Definition
3 Computational complexity
4 Solving

4.1 Dynamic programming

4.1.1 Unbounded knapsack problem
4.1.2 0-1 knapsack problem


4.2 Meet-in-the-middle
4.3 Approximation algorithms

4.3.1 Greedy approximation algorithm
4.3.2 Fully polynomial time approximation scheme


4.4 Dominance relations


5 Variations

5.1 Multi-objective knapsack problem
5.2 Multiple knapsack problem
5.3 Quadratic knapsack problem
5.4 Subset-sum problem


6 See also
7 Notes
8 References
9 External links




[edit] Applications
A 1998 study of the Stony Brook University Algorithm Repository showed that, out of 75 algorithmic problems, the knapsack problem was the 18th most popular and the 4th most needed after kd-trees, suffix trees, and the bin packing problem.[4]
Knapsack problems appear in real-world decision-making processes in a wide variety of fields, such as finding the least wasteful way to cut raw materials,[5] selection of capital investments and financial portfolios,[6] selection of assets for asset-backed securitization,[7] and generating keys for the MerkleHellman knapsack cryptosystem.[8]
One early application of knapsack algorithms was in the construction and scoring of tests in which the test-takers have a choice as to which questions they answer. For small examples it is a fairly simple process to provide the test-takers with such a choice. For example, if an exam contains 12 questions each worth 10 points, the test-taker need only answer 10 questions to achieve a maximum possible score of 100 points. However, on tests with a heterogeneous distribution of point valuesi.e. different questions are worth different point values it is more difficult to provide choices. Feuerman and Weiss proposed a system in which students are given a heterogeneous test with a total of 125 possible points. The students are asked to answer all of the questions to the best of their abilities. Of the possible subsets of problems whose total point values add up to 100, a knapsack algorithm would determine which subset gives each student the highest possible score.[9]
[edit] Definition
The most common problem being solved is the 0-1 knapsack problem, which restricts the number xi of copies of each kind of item to zero or one. The picture above can be interpreted in this way.
Mathematically the 0-1-knapsack problem can be formulated as:
Let there be  items,  to  where  has a value  and weight . The maximum weight that we can carry in the bag is W. It is common to assume that all values and weights are nonnegative. To simplify the representation, we also assume that the items are listed in increasing order of weight.

Maximize  subject to 

Maximize the sum of the values of the items in the knapsack so that the sum of the weights must be less than the knapsack's capacity.
The bounded knapsack problem removes the restriction that there is only one of each item, but restricts the number  of copies of each kind of item to an integer value .
Mathematically the bounded knapsack problem can be formulated as:

maximize  subject to 

The unbounded knapsack problem (UKP) places no upper bound on the number of copies of each kind of item and can be formulated as above except for that the only restriction on  is that it is a non-negative integer. If the example with the colored bricks above is viewed as an unbounded knapsack problem, then the solution is to take three yellow boxes and three grey boxes.
[edit] Computational complexity
The knapsack problem is interesting from the perspective of computer science for many reasons:

The decision problem form of the knapsack problem (Can a value of at least V be achieved without exceeding the weight W?) is NP-complete, thus it is expected that no algorithm can be both correct and fast (polynomial-time) on all cases.
While the decision problem is NP-complete the optimization problem is NP-hard, its resolution is at least as difficult as the decision problem, and there is no known polynomial algorithm which can tell, given a solution, whether it is optimal (which would mean that there is no solution with a larger, thus solving the decision problem NP-complete).
There is a pseudo-polynomial time algorithm using dynamic programming.
There is a fully polynomial-time approximation scheme, which uses the pseudo-polynomial time algorithm as a subroutine, described below.
Many cases that arise in practice, and "random instances" from some distributions, can nonetheless be solved exactly.

There is a link between the "decision" and "optimization" problems in that if there exists a polynomial algorithm that solves the "decision" problem, then one can find the maximum value for the optimization problem in polynomial time by applying this algorithm iteratively while increasing the value of k . On the other hand, if an algorithm finds the optimal value of optimization problem in polynomial time, then the decision problem can be solved in polynomial time by comparing the value of the solution output by this algorithm with the value of k . Thus, both versions of the problem are of similar difficulty.
One theme in research literature is to identify what the "hard" instances of the knapsack problem look like,[10][11] or viewed another way, to identify what properties of instances in practice might make them more amenable than their worst-case NP-complete behaviour suggests.[12] The goal in finding these "hard" instances is for their use in public key cryptography systems, such as the Merkle-Hellman knapsack cryptosystem.
[edit] Solving
Several algorithms are freely available to solve knapsack problems, based on dynamic programming approach,[13] branch and bound approach[14] or hybridizations of both approaches.[12][15][16][17]
[edit] Dynamic programming
[edit] Unbounded knapsack problem
If all weights () are nonnegative integers, the knapsack problem can be solved in pseudo-polynomial time using dynamic programming. The following describes a dynamic programming solution for the unbounded knapsack problem.
To simplify things, assume all weights are strictly positive (wi > 0). We wish to maximize total value subject to the constraint that total weight is less than or equal to W. Then for each w  W, define m[w] to be the maximum value that can be attained with total weight less than or equal to w. m[W] then is the solution to the problem.
Observe that m[w] has the following properties:

 (the sum of zero items, i.e., the summation of the empty set)


where  is the value of the i-th kind of item.
Here the maximum of the empty set is taken to be zero. Tabulating the results from  up through  gives the solution. Since the calculation of each  involves examining  items, and there are  values of  to calculate, the running time of the dynamic programming solution is . Dividing  by their greatest common divisor is an obvious way to improve the running time.
The  complexity does not contradict the fact that the knapsack problem is NP-complete, since , unlike , is not polynomial in the length of the input to the problem. The length of the  input to the problem is proportional to the number of bits in , , not to  itself.
[edit] 0-1 knapsack problem
A similar dynamic programming solution for the 0-1 knapsack problem also runs in pseudo-polynomial time. As above, assume  are strictly positive integers. Define  to be the maximum value that can be attained with weight less than or equal to  using items up to .
We can define  recursively as follows:

 if  (the new item is more than the current weight limit)
 if .

The solution can then be found by calculating . To do this efficiently we can use a table to store previous computations.
The following is pseudo code for the dynamic program:
Input:
Values (stored in array v)
Weights (stored in array w)
Number of distinct items (n)
Knapsack capacity (W)

for w from 0 to W do
  m[0, w] := 0
end for

for i from 1 to n do
  for j from 0 to W do
    if j >= w[i] then
      m[i, j] := max(m[i-1, j], m[i-1, j-w[i]] + v[i]) [18]
    else
      m[i, j] := m[i-1, j]
    end if
  end for
end for

This solution will therefore run in  time and  space. Additionally, if we use only a 1-dimensional array  to store the current optimal values and pass over this array  times, rewriting from  to  every time, we get the same result for only  space.
[edit] Meet-in-the-middle
Another algorithm for 0-1 knapsack, discovered in 1974 [19] and sometimes called "meet-in-the-middle" due to parallels to a similarly named algorithm in cryptography, is exponential in the number of different items but may be preferable to the DP algorithm when  is large compared to n. In particular, if the  are nonnegative but not integers, we could still use the dynamic programming algorithm by scaling and rounding (i.e. using fixed-point arithmetic), but if the problem requires  fractional digits of precision to arrive at the correct answer,  will need to be scaled by , and the DP algorithm will require  space and  time.

Meet-in-the-middle algorithm


  input: 
    a set of items with weights and values
  output: 
    the greatest combined value of a subset
  partition the set {1...n} into two sets A and B of approximately equal size
  compute the weights and values of all subsets of each set
  for each subset of A
    find the subset of B of greatest value such that the combined weight is less than W
  keep track of the greatest combined value seen so far

The algorithm takes  space, and efficient implementations of step 3 (for instance, sorting the subsets of B by weight, discarding subsets of B which weigh more than other subsets of B of greater or equal value, and using binary search to find the best match) result in a runtime of . As with the meet in the middle attack in cryptography, this improves on the  runtime of a naive brute force approach (examining all subsets of {1...n}), at the cost of using exponential rather than constant space (see also baby-step giant-step).
[edit] Approximation algorithms
As for most NP-complete problems, it may be enough to find workable solutions even if they are not optimal. Preferably, however, the approximation comes with a guarantee on the difference between the value of the solution found and the value of the optimal solution.
As with many useful but computationally complex algorithms, there has been substantial research on creating and analyzing algorithms that approximate a solution. The knapsack problem, though NP-Hard, is one of a collection of algorithms that can still be approximated to any specified degree. This means that the problem has a polynomial time approximation scheme. To be exact, the knapsack problem has a fully polynomial time approximation scheme (FPTAS).[20]
[edit] Greedy approximation algorithm
George Dantzig proposed a greedy approximation algorithm to solve the unbounded knapsack problem.[21] His version sorts the items in decreasing order of value per unit of weight, . It then proceeds to insert them into the sack, starting with as many copies as possible of the first kind of item until there is no longer space in the sack for more. Provided that there is an unlimited supply of each kind of item, if  is the maximum value of items that fit into the sack, then the greedy algorithm is guaranteed to achieve at least a value of . However, for the bounded problem, where the supply of each kind of item is limited, the algorithm may be far from optimal.
[edit] Fully polynomial time approximation scheme
The fully polynomial time approximation scheme (FPTAS) for the knapsack problem takes advantage of the fact that the reason the problem has no polynomial time solutions is because the profits associated with the items are not restricted. If one rounds off some of the least significant digits of the profit values then they will be bounded by a polynomial and 1/ where  is a bound on the correctness of the solution. This restriction then means that an algorithm can find a solution in polynomial time that is correct within(1-) percent of the optimal solution.[20]

An Algorithm for FPTAS


 input: 
   [0,1], 
   a list, A, of n items their values, ,  and weights
 output: S' the FPTAS solution
 K := P/n where P=v_i where item i is the highest valued item
 for  from 1 to n
    profit'() = profit()/ K
 return the solution, S', using the profit' values in the dynamic program outlined above

Theorem: The set, S', output by the algorithm above satisfies:
profit(S')  (1-)* profit(S*)
Where S' is the solution produce by the algorithm and S* is the optimal solution.
[edit] Dominance relations
Solving the unbounded knapsack problem can be made easier by throwing away items which will never be needed. For a given item i, suppose we could find a set of items J such that their total weight is less than the weight of i, and their total value is greater than the value of i. Then i cannot appear in the optimal solution, because we could always improve any potential solution containing i by replacing i with the set J. Therefore we can disregard the i-th item altogether. In such cases, J is said to dominate i. (Note that this does not apply to bounded knapsack problems, since we may have already used up the items in J.)
Finding dominance relations allows us to significantly reduce the size of the search space. There are several different types of dominance relations,[12] which all satisfy an inequality of the form:
, and  for some 
where  and . The vector  denotes the number of copies of each member of J.

Collective dominance
The i-th item is collectively dominated by J, written as , if the total weight of some combination of items in J is less than wi and their total value is greater than vi. Formally,  and  for some , i.e. . Verifying this dominance is computationally hard, so it can only be used with a dynamic programming approach. In fact, this is equivalent to solving a smaller knapsack decision problem where2 V = vi, W = wi, and the items are restricted to J.
Threshold dominance
The i-th item is threshold dominated by J, written as , if some number of copies of i are dominated by J. Formally, , and  for some  and . This is a generalization of collective dominance, first introduced in[13] and used in the EDUK algorithm. The smallest such  defines the threshold of the item i, written . In this case, the optimal solution could contain at most  copies of i.
Multiple dominance
The i-th item is multiply dominated by a single item j, written as , if i is dominated by some number of copies of j. Formally, , and  for some  i.e. . This dominance could be efficiently used during preprocessing because it can be detected relatively easily.
Modular dominance
Let b be the best item, i.e.  for all i. This is the item with the greatest density of value. The i-th item is modularly dominated by a single item j, written as , if i is dominated by j plus several copies of b. Formally, , and  i.e. .

[edit] Variations
There are many variations of the knapsack problem that have arisen from the vast number of applications of the basic problem. The main variations occur by changing the number of some problem parameter such as the number of items, number of objectives, or even the number of knapsacks.
[edit] Multi-objective knapsack problem
This variation changes the goal of the individual filling the knapsack. Instead of one objective, such as maximizing the monetary profit, the objective could have several dimensions. For example there could be environmental or social concerns as well as economic goals. Problems frequently addressed include portfolio and transportation logistics optimizations [22][23]
There are many heuristics for solving this variant, including the Ant Colony Optimization algorithm.[24]
As a concrete example, suppose you ran a cruise ship. You have to decide how many famous comedians to hire. This boat can handle more than one ton of passengers and the entertainers must weigh less than 1000lbs. Each comedian has a weight, brings in business based on their popularity and asks for a specific salary. In this example you have multiple objectives. You want, of course, to maximize the popularity of your entertainers while minimizing their salaries. Also, you want to have as many entertainers as possible.
[edit] Multiple knapsack problem
This variation is similar to the Bin Packing Problem. It differs from the Bin Packing Problem that a subset of items can be selected, whereas, in the Bin Packing Problem, all items have to be packed to certain bins. The concept is that there are multiple knapsacks. This may seem a trivial change, but it is not equivalent to adding to the capacity of the initial knapsack. This variation is used in many loading and scheduling problems in Operations Research and has an FPTAS[25]
[edit] Quadratic knapsack problem
As described by Wu et al:

The quadratic knapsack problem (QKP) maximizes a quadratic objective function subject to a binary and linear capacity constraint.[26]

The quadratic knapsack problem was discussed under that title by Gallo, Hammer, and Simeone in 1980.[27] However, Gallo and Simeone[28] attribute the first treatment of the problem to Witzgall[29] in 1975.
[edit] Subset-sum problem
The subset sum problem, is a special case of the decision and 0-1 problems where each kind of item, the weight equals the value: . In the field of cryptography, the term knapsack problem is often used to refer specifically to the subset sum problem and is commonly known as one of Karp's 21 NP-complete problems.[30]
The generalization of subset-sum problem is called multiple subset-sum problem, in which multiple bins exist with the same capacity. It has been shown that the generalization does not have an FPTAS.[31]
[edit] See also

List of knapsack problems
Packing problem
Cutting stock problem
Continuous knapsack problem
Combinatorial optimization
Combinatorial auction

[edit] Notes


^ Mathews, G. B. (25 June 1897). "On the partition of numbers". Proceedings of the London Mathematical Society 28: 486490. http://plms.oxfordjournals.org