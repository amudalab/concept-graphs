
23 tree
 /firstHeading 
 bodyContent 

 tagline 
From Wikipedia, the free encyclopedia
 /tagline 
 subtitle 
(Redirected from 2-3 tree)
 /subtitle 
 jumpto 

					Jump to:					navigation, 					search

 /jumpto 
 bodycontent 
In computer science, a 23 tree is a type of data structure, a tree where every node with children (internal node) has either two children (2-node) and one data element or three children (3-nodes) and two data elements. Nodes on the outside of the tree (leaf nodes) have no children and one or two data elements.[1]







2 node









3 node




23 trees are an isometry of AA trees, meaning that they are equivalent data structures. In other words, for every 23 tree, there exists at least one AA tree with data elements in the same order. 23 trees are balanced, meaning that each right, center, and left subtree contains the same or close to the same amount of data.




Contents


1 Properties
2 Non-leaf nodes
3 References
4 See also
5 External links




[edit] Properties

Every non-leaf is a 2-node or a 3-node. A 2-node contains one data item and has two children. A 3-node contains two data items and has 3 children.
All leaves are at the same level (the bottom level)
All data are kept in sorted order
Every leaf node will contain 1 or 2 fields.

[edit] Non-leaf nodes
These contain one or two fields which indicate the range of values in its subtrees. If a node has two children, it will have one field; if the node has three children, it will have two fields. Each non-leaf node will contain a value in field 1 which is greater than the largest item in its left sub-tree, but less than or equal to the smallest item in its right sub-tree (or center sub-tree, if it has three children). If that node has three children, field 2 contains a value which is greater than the largest value in the center sub-tree, but less than or equal to the smallest item in its right sub-tree. The purpose of these values is to direct a search function to the correct sub-tree and eventually to the correct data node.
[edit] References


^ Gross, R. Hernndez, J. C. Lzaro, R. Dormido, S. Ros (2001). Estructura de Datos y Algoritmos. Prentice Hall. ISBN84-205-2980-X


[edit] See also




Computer programming  portal




234 tree
Finger tree


[edit] External links

23 Trees Complete Description
23 Tree Java Applet
23 Tree In-depth description
23 Tree in F#
23 Tree in Python









v
t
e


Trees in computer science






Binary trees



Binary search tree (BST)
Cartesian tree
MVP Tree
Top tree
T-tree








Self-balancing binary search trees



AA tree
AVL tree
LLRB tree
Redblack tree
Scapegoat tree
Splay tree
Treap








B-trees



B+ tree
B*-tree
Bx-tree
UB-tree
2-3 tree
2-3-4 tree
(a,b)-tree
Dancing tree
Htree








Tries



Suffix tree
Radix tree
Ternary search tree
X-fast trie
Y-fast trie








Binary space partitioning (BSP) trees



Quadtree
Octree
k-d tree
Implicit k-d tree
VP tree








Non-binary trees



Exponential tree
Fusion tree
Interval tree
PQ tree
Range tree
SPQR tree
Van Emde Boas tree








Spatial data partitioning trees



R-tree
R+ tree
R* tree
X-tree
M-tree
Segment tree
Hilbert R-tree
Priority R-tree








Other trees



Heap
Hash calendar
Hash tree
Finger tree
Order statistic tree
Metric tree
Cover tree
BK-tree
Doubly chained tree
iDistance
Link-cut tree
Fenwick tree
















v
t
e


Data structures






Types



Collection
Container








Abstract



List
Associative array
Multimap
Set
Multiset
Queue
Double-ended queue
Priority queue
Double-ended priority queue
Stack








Arrays



Dynamic array
Hashed array tree
Sparse array
Circular buffer
Bit array
Hash table








Linked



Linked list
Unrolled linked list
XOR linked list
Skip list
Association list








Trees



B-tree
Binary search tree

self-balancing
AA
AVL
red-black
splay


Heap

binary
binomial
Fibonacci


R-tree

R*
R+
Hilbert


Trie








Graphs



Directed acyclic word graph
Binary decision diagram











List of data structures












This computer programming-related article is a stub. You can help Wikipedia by expanding it.


v
t
e





 
NewPP limit report
Preprocessor visited node count: 1885/1000000
Preprocessor generated node count: 22176/1500000
Post-expand include size: 39530/2048000 bytes
Template argument size: 8915/2048000 bytes
Highest expansion depth: 13/40
Expensive parser function count: 1/500

 Saved in parser cache with key enwiki:pcache:idhash:647196-0!*!0!!en!4!* and timestamp 20130122200728 
  /bodycontent 
 printfooter 

				Retrieved from "http://en.wikipedia.org/w/index.php?title=23_tree&oldid=525164716"				
 /printfooter 
 catlinks 
Categories: B-treeComputer programming stubsHidden categories: WikiProject Computer science stubs  /catlinks 

 debughtml 
 /debughtml 

 /bodyContent 

 