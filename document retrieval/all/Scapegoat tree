
Scapegoat tree
 /firstHeading 
 bodyContent 

 tagline 
From Wikipedia, the free encyclopedia
 /tagline 
 subtitle 

 /subtitle 
 jumpto 

					Jump to:					navigation, 					search

 /jumpto 
 bodycontent 
In computer science, a scapegoat tree is a self-balancing binary search tree, discovered by Arne Anderson[1] and again by Igal Galperin and Ronald L. Rivest.[2] It provides worst-case O(log n) lookup time, and O(log n) amortized insertion and deletion time.
Unlike most other self-balancing binary search trees that provide worst case O(log n) lookup time, scapegoat trees have no additional per-node memory overhead compared to a regular binary search tree: a node stores only a key and two pointers to the child nodes. This makes scapegoat trees easier to implement and, due to data structure alignment, can reduce node overhead by up to one-third.




Contents


1 Theory
2 Operations

2.1 Insertion
2.2 Sketch of proof for cost of insertion
2.3 Deletion

2.3.1 Sketch of proof for cost of deletion


2.4 Lookup


3 See also
4 References
5 External links




[edit] Theory
A binary search tree is said to be weight balanced if half the nodes are on the left of the root, and half on the right. An -weight-balanced is therefore defined as meeting the following conditions:

size(left) <= *size(node)
size(right) <= *size(node)

Where size can be defined recursively as:

function size(node)
 if node = nil
  return 0
 else
  return size(node->left) + size(node->right) + 1
end

An  of 1 therefore would describe a linked list as balanced, whereas an  of 0.5 would only match almost complete binary trees.
A binary search tree that is -weight-balanced must also be -height-balanced, that is

height(tree) <= log1/(NodeCount)

Scapegoat trees are not guaranteed to keep -weight-balance at all times, but are always loosely -height-balance in that

height(scapegoat tree) <= log1/(NodeCount) + 1

This makes scapegoat trees similar to red-black trees in that they both have restrictions on their height. They differ greatly though in their implementations of determining where the rotations (or in the case of scapegoat trees, rebalances) take place. Whereas red-black trees store additional 'color' information in each node to determine the location, scapegoat trees find a scapegoat which isn't -weight-balanced to perform the rebalance operation on. This is loosely similar to AVL trees, in that the actual rotations depend on 'balances' of nodes, but the means of determining the balance differs greatly. Since AVL trees check the balance value on every insertion/deletion, it is typically stored in each node; scapegoat trees are able to calculate it only as needed, which is only when a scapegoat needs to be found.
Unlike most other self-balancing search trees, scapegoat trees are entirely flexible as to their balancing. They support any  such that 0.5 <  < 1. A high  value results in fewer balances, making insertion quicker but lookups and deletions slower, and vice versa for a low . Therefore in practical applications, an  can be chosen depending on how frequently these actions should be performed.
[edit] Operations
[edit] Insertion
Insertion is implemented with the same basic ideas as an unbalanced binary search tree, however with a few significant changes.
When finding the insertion point, the depth of the new node must also be recorded. This is implemented via a simple counter that gets incremented during each iteration of the lookup, effectively counting the number of edges between the root and the inserted node. If this node violates the -height-balance property (defined above), a rebalance is required.
To rebalance, an entire subtree rooted at a scapegoat undergoes a balancing operation. The scapegoat is defined as being an ancestor of the inserted node which isn't -weight-balanced. There will always be at least one such ancestor. Rebalancing any of them will restore the -height-balanced property.
One way of finding a scapegoat, is to climb from the new node back up to the root and select the first node that isn't -weight-balanced.
Climbing back up to the root requires O(log n) storage space, usually allocated on the stack, or parent pointers. This can actually be avoided by pointing each child at its parent as you go down, and repairing on the walk back up.
To determine whether a potential node is a viable scapegoat, we need to check its -weight-balanced property. To do this we can go back to the definition:

size(left) <= *size(node)
size(right) <= *size(node)

However a large optimisation can be made by realising that we already know two of the three sizes, leaving only the third having to be calculated.
Consider the following example to demonstrate this. Assuming that we're climbing back up to the root:

size(parent) = size(node) + size(sibling) + 1

But as:

size(inserted node) = 1.

The case is trivialized down to:

size[x+1] = size[x] + size(sibling) + 1

Where x = this node, x + 1 = parent and size(sibling) is the only function call actually required.
Once the scapegoat is found, the subtree rooted at the scapegoat is completely rebuilt to be perfectly balanced.[2] This can be done in O(n) time by traversing the nodes of the subtree to find their values in sorted order and recursively choosing the median as the root of the subtree.
As rebalance operations take O(n) time (dependent on the number of nodes of the subtree), insertion has a worst case performance of O(n) time. However, because these worst-case scenarios are spread out, insertion takes O(log n) amortized time.
[edit] Sketch of proof for cost of insertion
Define the Imbalance of a node v to be the absolute value of the difference in size between its left node and right node minus 1, or 0, whichever is greater. In other words:

Immediately after rebuilding a subtree rooted at v, I(v) = 0.
Lemma: Immediately before rebuilding the subtree rooted at v,

( is Big O Notation.)
Proof of lemma:
Let  be the root of a subtree immediately after rebuilding. . If there are  degenerate insertions (that is, where each inserted node increases the height by 1), then
,
 and
.
Since  before rebuilding, there were  insertions into the subtree rooted at  that did not result in rebuilding. Each of these insertions can be performed in  time. The final insertion that causes rebuilding costs . Using aggregate analysis it becomes clear that the amortized cost of an insertion is :

[edit] Deletion
Scapegoat trees are unusual in that deletion is easier than insertion. To enable deletion, scapegoat trees need to store an additional value with the tree data structure. This property, which we will call MaxNodeCount simply represents the highest achieved NodeCount. It is set to NodeCount whenever the entire tree is rebalanced, and after insertion is set to max(MaxNodeCount, NodeCount).
To perform a deletion, we simply remove the node as you would in a simple binary search tree, but if

NodeCount <= MaxNodeCount / 2

then we rebalance the entire tree about the root, remembering to set MaxNodeCount to NodeCount.
This gives deletion its worst case performance of O(n) time, however it is amortized to O(log n) average time.
[edit] Sketch of proof for cost of deletion
Suppose the scapegoat tree has  elements and has just been rebuilt (in other words, it is a complete binary tree). At most  deletions can be performed before the tree must be rebuilt. Each of these deletions take  time (the amount of time to search for the element and flag it as deleted). The  deletion causes the tree to be rebuilt and takes  (or just ) time. Using aggregate analysis it becomes clear that the amortized cost of a deletion is :

[edit] Lookup
Lookup is not modified from a standard binary search tree, and has a worst-case time of O(log n). This is in contrast to splay trees which have a worst-case time of O(n). The reduced node memory overhead compared to other self-balancing binary search trees can further improve locality of reference and caching.
[edit] See also

Splay tree
Trees
Tree rotation
AVL tree
B-tree
T-tree
List of data structures

[edit] References


^ Andersson, Arne (1989). "Improving partial rebuilding by using simple balance criteria". Proc. Workshop on Algorithms and Data Structures. Springer-Verlag. pp.393402. doi:10.1007/3-540-51542-9_33.
^ a b Galperin, Igal; Rivest, Ronald L. (1993). "Scapegoat trees". Proceedings of the fourth annual ACM-SIAM Symposium on Discrete algorithms: 165174. http://portal.acm.org/citation.cfm?id=313676


[edit] External links

Scapegoat Tree Applet by Kubo Kovac
Scapegoat Trees: Galperin and Rivest's paper describing scapegoat trees
On Consulting a Set of Experts and Searching (full version paper)
Open Data Structures - Chapter 8 - Scapegoat Trees









v
t
e


Trees in computer science






Binary trees



Binary search tree (BST)
Cartesian tree
MVP Tree
Top tree
T-tree








Self-balancing binary search trees



AA tree
AVL tree
LLRB tree
Redblack tree
Scapegoat tree
Splay tree
Treap








B-trees



B+ tree
B*-tree
Bx-tree
UB-tree
2-3 tree
2-3-4 tree
(a,b)-tree
Dancing tree
Htree








Tries



Suffix tree
Radix tree
Ternary search tree
X-fast trie
Y-fast trie








Binary space partitioning (BSP) trees



Quadtree
Octree
k-d tree
Implicit k-d tree
VP tree








Non-binary trees



Exponential tree
Fusion tree
Interval tree
PQ tree
Range tree
SPQR tree
Van Emde Boas tree








Spatial data partitioning trees



R-tree
R+ tree
R* tree
X-tree
M-tree
Segment tree
Hilbert R-tree
Priority R-tree








Other trees



Heap
Hash calendar
Hash tree
Finger tree
Order statistic tree
Metric tree
Cover tree
BK-tree
Doubly chained tree
iDistance
Link-cut tree
Fenwick tree








 
NewPP limit report
Preprocessor visited node count: 2013/1000000
Preprocessor generated node count: 24125/1500000
Post-expand include size: 22440/2048000 bytes
Template argument size: 5906/2048000 bytes
Highest expansion depth: 14/40
Expensive parser function count: 0/500

 Saved in parser cache with key enwiki:pcache:idhash:1377178-0!0!0!!en!*!* and timestamp 20130122175511 
  /bodycontent 
 printfooter 

				Retrieved from "http://en.wikipedia.org/w/index.php?title=Scapegoat_tree&oldid=530195212"				
 /printfooter 
 catlinks 
Categories: Binary treesHidden categories: Articles with inconsistent citation formats  /catlinks 

 debughtml 
 /debughtml 

 /bodyContent 

 