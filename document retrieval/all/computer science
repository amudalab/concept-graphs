
Computer science
 /firstHeading 
 bodyContent 

 tagline 
From Wikipedia, the free encyclopedia
 /tagline 
 subtitle 

 /subtitle 
 jumpto 

					Jump to:					navigation, 					search

 /jumpto 
 bodycontent 
Computer science or computing science (abbreviated CS or CompSci) is the scientific and practical approach to computation and its applications. A computer scientist specializes in the theory of computation and the design of computational systems.[1]
Its subfields can be divided into a variety of theoretical and practical disciplines. Some fields, such as computational complexity theory (which explores the fundamental properties of computational problems), are highly abstract, whilst fields such as computer graphics emphasise real-world applications. Still other fields focus on the challenges in implementing computation. For example, programming language theory considers various approaches to the description of computation, whilst the study of computer programming itself investigates various aspects of the use of programming language and complex systems. Human-computer interaction considers the challenges in making computers and computations useful, usable, and universally accessible to humans.












Computer science deals with the theoretical foundations of information and computation, together with practical techniques for the implementation and application of these foundations






Contents


1 History

1.1 Major achievements


2 Philosophy

2.1 Name of the field


3 Areas of computer science

3.1 Theoretical computer science

3.1.1 Theory of computation
3.1.2 Information and coding theory
3.1.3 Algorithms and data structures
3.1.4 Programming language theory
3.1.5 Formal methods
3.1.6 Concurrent, parallel and distributed systems
3.1.7 Databases and information retrieval


3.2 Applied computer science

3.2.1 Artificial intelligence
3.2.2 Computer architecture and engineering
3.2.3 Computer graphics and visualization
3.2.4 Computer security and cryptography
3.2.5 Computational science
3.2.6 Health Informatics
3.2.7 Information science
3.2.8 Software engineering




4 Academia

4.1 Conferences
4.2 Journals


5 Education
6 See also
7 Notes
8 References
9 Further reading
10 External links




[edit] History
Main article: History of computer science




Charles Babbage is credited with inventing the first mechanical computer.






Ada Lovelace is credited with writing the first algorithm intended for processing on a computer.


The earliest foundations of what would become computer science predate the invention of the modern digital computer. Machines for calculating fixed numerical tasks such as the abacus have existed since antiquity. Wilhelm Schickard designed the first mechanical calculator in 1623, but did not complete its construction.[2] Blaise Pascal designed and constructed the first working mechanical calculator, the Pascaline, in 1642. In 1694 Gottfried Wilhelm Leibniz completed the Step Reckoner, the first calculator that could perform all four arithmetic operations. Charles Babbage designed a difference engine and then a general-purpose Analytical Engine in Victorian times,[3] for which Ada Lovelace wrote a manual. Because of this work she is regarded today as the world's first programmer.[4] Around 1900, punched card machines were introduced.
During the 1940s, as new and more powerful computing machines were developed, the term computer came to refer to the machines rather than their human predecessors.[5] As it became clear that computers could be used for more than just mathematical calculations, the field of computer science broadened to study computation in general. Computer science began to be established as a distinct academic discipline in the 1950s and early 1960s.[6][7] The world's first computer science degree program, the Cambridge Diploma in Computer Science, began at the University of Cambridge Computer Laboratory in 1953. The first computer science degree program in the United States was formed at Purdue University in 1962.[8] Since practical computers became available, many applications of computing have become distinct areas of study in their own right.
Although many initially believed it was impossible that computers themselves could actually be a scientific field of study, in the late fifties it gradually became accepted among the greater academic population.[9] It is the now well-known IBM brand that formed part of the computer science revolution during this time. IBM (short for International Business Machines) released the IBM 704 and later the IBM 709 computers, which were widely used during the exploration period of such devices. "Still, working with the IBM [computer] was frustrating...if you had misplaced as much as one letter in one instruction, the program would crash, and you would have to start the whole process over again".[9] During the late 1950s, the computer science discipline was very much in its developmental stages, and such issues were commonplace.
Time has seen significant improvements in the usability and effectiveness of computing technology. Modern society has seen a significant shift in the users of computer technology, from usage only by experts and professionals, to a near-ubiquitous user base. Initially, computers were quite costly, and some degree of human aid was needed for efficient use - in part from professional computer operators. As computer adoption became more widespread and affordable, less human assistance was needed for common usage.
[edit] Major achievements




The German military used the Enigma machine (shown here) during World War II for communication they thought to be secret. The large-scale decryption of Enigma traffic at Bletchley Park was an important factor that contributed to Allied victory in WWII.[10]


Despite its short history as a formal academic discipline, computer science has made a number of fundamental contributions to science and society - in fact, along with electronics, it is a founding science of the current epoch of human history called the Information Age and a driver of the Information Revolution, seen as the third major leap in human technological progress after the Industrial Revolution (1750-1850 CE) and the Agricultural Revolution (8000-5000 BCE).
These contributions include:

The start of the "digital revolution," which includes the current Information Age and the Internet.[11]
A formal definition of computation and computability, and proof that there are computationally unsolvable and intractable problems.[12]
The concept of a programming language, a tool for the precise expression of methodological information at various levels of abstraction.[13]
In cryptography, breaking the Enigma code was an important factor contributing to the Allied victory in World War II.[10]
Scientific computing enabled practical evaluation of processes and situations of great complexity, as well as experimentation entirely by software. It also enabled advanced study of the mind, and mapping of the human genome became possible with the Human Genome Project.[11] Distributed computing projects such as Folding@home explore protein folding.
Algorithmic trading has increased the efficiency and liquidity of financial markets by using artificial intelligence, machine learning, and other statistical and numerical techniques on a large scale.[14] High frequency algorithmic trading can also exacerbate volatility.[15]
Computer graphics and computer-generated imagery have become almost ubiquitous in modern entertainment, particularly in television, cinema, advertising, animation and video games. Even films that feature no explicit CGI are usually "filmed" now on digital cameras, or edited or postprocessed using a digital video editor.[citation needed]
Simulation of various processes, including computational fluid dynamics, physical, electrical, and electronic systems and circuits, as well as societies and social situations (notably war games) along with their habitats, among many others. Modern computers enable optimization of such designs as complete aircraft. Notable in electrical and electronic circuit design are SPICE, as well as software for physical realization of new (or modified) designs. The latter includes essential design software for integrated circuits.[citation needed]

[edit] Philosophy
Main article: Philosophy of computer science
A number of computer scientists have argued for the distinction of three separate paradigms in computer science. Peter Wegner argued that those paradigms are science, technology, and mathematics.[16] Peter Denning's working group argued that they are theory, abstraction (modeling), and design.[17] Amnon H. Eden described them as the "rationalist paradigm" (which treats computer science as a branch of mathematics, which is prevalent in theoretical computer science, and mainly employs deductive reasoning), the "technocratic paradigm" (which might be found in engineering approaches, most prominently in software engineering), and the "scientific paradigm" (which approaches computer-related artifacts from the empirical perspective of natural sciences, identifiable in some branches of artificial intelligence).[18]
[edit] Name of the field
The term "computer science" appears in a 1959 article in Communications of the ACM,[19] in which Louis Fein argues for the creation of a Graduate School in Computer Sciences analogous to the creation of Harvard Business School in 1921, justifying the name by arguing that, like management science, it is applied and interdisciplinary in nature, yet at the same time, has all the characteristics of an academic discipline.[20] His efforts, and those of others such as numerical analyst George Forsythe, were rewarded: universities went on to create such programs, starting with Purdue in 1962.[21] Despite its name, a significant amount of computer science does not involve the study of computers themselves. Because of this, several alternative names have been proposed.[22] Certain departments of major universities prefer the term computing science, to emphasize precisely that difference. Danish scientist Peter Naur suggested the term datalogy, to reflect the fact that the scientific discipline revolves around data and data treatment, while not necessarily involving computers. The first scientific institution to use the term was the Department of Datalogy at the University of Copenhagen, founded in 1969, with Peter Naur being the first professor in datalogy. The term is used mainly in the Scandinavian countries. Also, in the early days of computing, a number of terms for the practitioners of the field of computing were suggested in the Communications of the ACM  turingineer, turologist, flow-charts-man, applied meta-mathematician, and applied epistemologist.[23] Three months later in the same journal, comptologist was suggested, followed next year by hypologist.[24] The term computics has also been suggested.[25] In Europe, terms derived from contracted translations of the expression "automatic information" (e.g. "informazione automatica" in Italian) or "information and mathematics" are often used, e.g. informatique (French), Informatik (German), informatica (Italy), informtica (Spain, Portugal) or informatika (Slavic languages) are also used and have also been adopted in the UK (as in the School of Informatics of the University of Edinburgh).[26]
A folkloric quotation, often attributed tobut almost certainly not first formulated byEdsger Dijkstra, states that "computer science is no more about computers than astronomy is about telescopes."[note 1] The design and deployment of computers and computer systems is generally considered the province of disciplines other than computer science. For example, the study of computer hardware is usually considered part of computer engineering, while the study of commercial computer systems and their deployment is often called information technology or information systems. However, there has been much cross-fertilization of ideas between the various computer-related disciplines. Computer science research also often intersects other disciplines, such as philosophy, cognitive science, linguistics, mathematics, physics, statistics, and logic.
Computer science is considered by some to have a much closer relationship with mathematics than many scientific disciplines, with some observers saying that computing is a mathematical science.[6] Early computer science was strongly influenced by the work of mathematicians such as Kurt Gdel and Alan Turing, and there continues to be a useful interchange of ideas between the two fields in areas such as mathematical logic, category theory, domain theory, and algebra.
The relationship between computer science and software engineering is a contentious issue, which is further muddied by disputes over what the term "software engineering" means, and how computer science is defined.[27] David Parnas, taking a cue from the relationship between other engineering and science disciplines, has claimed that the principal focus of computer science is studying the properties of computation in general, while the principal focus of software engineering is the design of specific computations to achieve practical goals, making the two separate but complementary disciplines.[28]
The academic, political, and funding aspects of computer science tend to depend on whether a department formed with a mathematical emphasis or with an engineering emphasis. Computer science departments with a mathematics emphasis and with a numerical orientation consider alignment with computational science. Both types of departments tend to make efforts to bridge the field educationally if not across all research.
[edit] Areas of computer science
As a discipline, computer science spans a range of topics from theoretical studies of algorithms and the limits of computation to the practical issues of implementing computing systems in hardware and software.[29][30] CSAB, formerly called Computing Sciences Accreditation Board  which is made up of representatives of the Association for Computing Machinery (ACM), and the IEEE Computer Society (IEEE-CS)[31]  identifies four areas that it considers crucial to the discipline of computer science: theory of computation, algorithms and data structures, programming methodology and languages, and computer elements and architecture. In addition to these four areas, CSAB also identifies fields such as software engineering, artificial intelligence, computer networking and communication, database systems, parallel computation, distributed computation, computer-human interaction, computer graphics, operating systems, and numerical and symbolic computation as being important areas of computer science.[29]
[edit] Theoretical computer science
Main article: Theoretical computer science
The broader field of theoretical computer science encompasses both the classical theory of computation and a wide range of other topics that focus on the more abstract, logical, and mathematical aspects of computing.
[edit] Theory of computation
Main article: Theory of computation
According to Peter J. Denning, the fundamental question underlying computer science is, "What can be (efficiently) automated?"[6] The study of the theory of computation is focused on answering fundamental questions about what can be computed and what amount of resources are required to perform those computations. In an effort to answer the first question, computability theory examines which computational problems are solvable on various theoretical models of computation. The second question is addressed by computational complexity theory, which studies the time and space costs associated with different approaches to solving a multitude of computational problems.
The famous "P=NP?" problem, one of the Millennium Prize Problems,[32] is an open problem in the theory of computation.




P = NP?
GNITIRW-TERCES



Automata theory
Computability theory
Computational complexity theory
Cryptography
Quantum computing theory


[edit] Information and coding theory
Main articles: Information theory and Coding theory
Information theory is related to the quantification of information. This was developed by Claude E. Shannon to find fundamental limits on signal processing operations such as compressing data and on reliably storing and communicating data. Coding theory is the study of the properties of codes (systems for converting information from one form to another) and their fitness for a specific application. Codes are used for data compression, cryptography, error detection and correction, and more recently also for network coding. Codes are studied for the purpose of designing efficient and reliable data transmission methods.
[edit] Algorithms and data structures








Analysis of algorithms
Algorithms
Data structures
Computational geometry


[edit] Programming language theory
Main article: Programming language theory
Programming language theory (PLT) is a branch of computer science that deals with the design, implementation, analysis, characterization, and classification of programming languages and their individual features. It falls within the discipline of computer science, both depending on and affecting mathematics, software engineering and linguistics. It is an active research area, with numerous dedicated academic journals.







Type theory
Compiler design
Programming languages


[edit] Formal methods
Main article: Formal methods
Formal methods are a particular kind of mathematically based technique for the specification, development and verification of software and hardware systems. The use of formal methods for software and hardware design is motivated by the expectation that, as in other engineering disciplines, performing appropriate mathematical analysis can contribute to the reliability and robustness of a design. However, the high cost of using formal methods means that they are usually only used in the development of high-integrity and life-critical systems, where safety or security is of utmost importance. Formal methods are best described as the application of a fairly broad variety of theoretical computer science fundamentals, in particular logic calculi, formal languages, automata theory, and program semantics, but also type systems and algebraic data types to problems in software and hardware specification and verification.
[edit] Concurrent, parallel and distributed systems
Main articles: Concurrency (computer science) and Distributed computing
Concurrency is a property of systems in which several computations are executing simultaneously, and potentially interacting with each other. A number of mathematical models have been developed for general concurrent computation including Petri nets, process calculi and the Parallel Random Access Machine model. A distributed system extends the idea of concurrency onto multiple computers connected through a network. Computers within the same distributed system have their own private memory, and information is often exchanged amongst themselves to achieve a common goal.
[edit] Databases and information retrieval
Main articles: Database and Database management systems
A database is intended to organize, store, and retrieve large amounts of data easily. Digital databases are managed using database management systems to store, create, maintain, and search data, through database models and query languages.
[edit] Applied computer science
[edit] Artificial intelligence
Main article: Artificial intelligence
This branch of computer science aims to or is required to synthesise goal-orientated processes such as problem-solving, decision-making, environmental adaptation, learning and communication which are found in humans and animals. From its origins in cybernetics and in the Dartmouth Conference (1956), artificial intelligence (AI) research has been necessarily cross-disciplinary, drawing on areas of expertise such as applied mathematics, symbolic logic, semiotics, electrical engineering, philosophy of mind, neurophysiology, and social intelligence. AI is associated in the popular mind with robotic development, but the main field of practical application has been as an embedded component in areas of software development which require computational understanding and modeling such as finance and economics, data mining and the physical sciences. The starting-point in the late 1940s was Alan Turing's question "Can computers think?", and the question remains effectively unanswered although the "Turing Test" is still used to assess computer output on the scale of human intelligence. But the automation of evaluative and predictive tasks has been increasingly successful as a substitute for human monitoring and intervention in domains of computer application involving complex real-world data.








Machine learning
Computer vision
Image processing
Pattern recognition








Cognitive science
Data mining
Evolutionary computation
Information retrieval








Knowledge representation
Natural language processing
Robotics
Medical Image Computing


[edit] Computer architecture and engineering
Main articles: Computer architecture and Computer engineering
Computer architecture, or digital computer organization, is the conceptual design and fundamental operational structure of a computer system. It focuses largely on the way by which the central processing unit performs internally and accesses addresses in memory. The field often involves disciplines of computer engineering and electrical engineering, selecting and interconnecting hardware components to create computers that meet functional, performance, and cost goals.







Digital logic
Microarchitecture
Multiprocessing








Operating systems
Computer networks
Databases
Computer security








Ubiquitous computing
Systems architecture
Compiler design
Programming languages


[edit] Computer graphics and visualization
Main article: Computer graphics (computer science)
Computer graphics is the study of digital visual contents, and involves syntheses and manipulations of image data. The study is connected to many other fields in computer science, including computer vision, image processing, and computational geometry, and is heavily applied in the fields of special effects and video games.
[edit] Computer security and cryptography
Main articles: Computer security and Cryptography
Computer security is a branch of computer technology, whose objective includes protection of information from unauthorized access, disruption, or modification while maintaining the accessibility and usability of the system for its intended users. Cryptography is the practice and study of hiding (encryption) and therefore deciphering (decryption) information. Modern cryptography is largely related to computer science, for many encryption and decryption algorithms are based on their computational complexity.
[edit] Computational science
Computational science (or scientific computing) is the field of study concerned with constructing mathematical models and quantitative analysis techniques and using computers to analyze and solve scientific problems. In practical use, it is typically the application of computer simulation and other forms of computation to problems in various scientific disciplines.








Numerical analysis
Computational physics
Computational chemistry
Bioinformatics


[edit] Health Informatics
Main article: Health Informatics
Health Informatics in computer science deals with computational techniques for solving problems in health care.
[edit] Information science
Main article: Information science








Information retrieval
Knowledge representation
Natural language processing
Humancomputer interaction


[edit] Software engineering
Main article: Software engineering
Software engineering is the study of designing, implementing, and modifying software in order to ensure it is of high quality, affordable, maintainable, and fast to build. It is a systematic approach to software design, involving the application of engineering practices to software. Software engineering deals with the organizing and analyzing of software it doesn't just deal with the creation or manufacture of new software, but its internal maintenance and arrangement.
[edit] Academia
[edit] Conferences
Conferences are strategic events of the Academic Research in computer science. During those conferences, researchers from the public and private sectors present their recent work and meet. Proceedings of these conferences are an important part of the computer science literature.
Further information: List of computer science conferences
[edit] Journals
Further information: Category:Computer science journals



This section requires expansion. (June 2011)


[edit] Education
Some universities teach computer science as a theoretical study of computation and algorithmic reasoning. These programs often feature the theory of computation, analysis of algorithms, formal methods, concurrency theory, databases, computer graphics, and systems analysis, among others. They typically also teach computer programming, but treat it as a vessel for the support of other fields of computer science rather than a central focus of high-level study. The ACM/IEEE-CS Joint Curriculum Task Force "Computing Curriculum 2005" (and 2008 update) [33] gives a guideline for university curriculum.
Other colleges and universities, as well as secondary schools and vocational programs that teach computer science, emphasize the practice of advanced programming rather than the theory of algorithms and computation in their computer science curricula. Such curricula tend to focus on those skills that are important to workers entering the software industry. The process aspects of computer programming are often referred to as software engineering.
While computer science professions increasingly drive the U.S. economy, computer science education is absent in most American K-12 curricula. A report entitled "Running on Empty: The Failure to Teach K-12 Computer Science in the Digital Age" was released in October 2010 by Association for Computing Machinery (ACM) and Computer Science Teachers Association (CSTA), and revealed that only 14 states have adopted significant education standards for high school computer science. The report also found that only nine states count high school computer science courses as a core academic subject in their graduation requirements. In tandem with "Running on Empty", a new non-partisan advocacy coalition - Computing in the Core (CinC) - was founded to influence federal and state policy, such as the Computer Science Education Act, which calls for grants to states to develop plans for improving computer science education and supporting computer science teachers.
Within the United States a gender gap in computer science education has been observed as well. Research conducted by the WGBH Educational Foundation and the Association for Computing Machinery (ACM) revealed that more than twice as many high school boys considered computer science to be a very good or good college major than high school girls.[34] In addition, the high school Advanced Placement (AP) exam for computer science has displayed a disparity in gender. Compared to other AP subjects it has the lowest number of female participants, with a composition of about 15 percent women.[35] This gender gap in computer science is further witnessed at the college level, where 31 percent of undergraduate computer science degrees are earned by women and only 8 percent of computer science faculty consists of women.[36] According to an article published by the Epistemic Games Group in August 2012, the number of women graduates in the computer science field has declined to 13 percent.
[edit] See also




Computer science  portal








Book: Computer science




Main article: Outline of computer science


Academic genealogy of computer scientists
Informatics (academic field)
List of academic computer science departments
List of computer science conferences
List of computer scientists
List of publications in computer science
List of pioneers in computer science
List of software engineering topics
List of unsolved problems in computer science
Women in computing


[edit] Notes


^ See the entry "Computer science" on Wikiquote for the history of this quotation.


[edit] References


^ "WordNet Search - 3.1". Wordnetweb.princeton.edu. http://wordnetweb.princeton.edu/perl/webwn?s=computer%20scientist. Retrieved 2012-05-14.
^ Nigel Tout (2006). "Calculator Timeline". Vintage Calculator Web Museum. http://www.vintagecalculators.com/html/calculator_time-line.html. Retrieved 2006-09-18.
^ "Science Museum - Introduction to Babbage". Archived from the original on 2006-09-08. http://web.archive.org/web/20060908054017/http://www.sciencemuseum.org.uk/on-line/babbage/index.asp. Retrieved 2006-09-24.
^ "A Selection and Adaptation From Ada's Notes found in "Ada, The Enchantress of Numbers," by Betty Alexandra Toole Ed.D. Strawberry Press, Mill Valley, CA". http://www.scottlan.edu/Lriddle/women/ada-love.htm. Retrieved 2006-05-04.
^ The Association for Computing Machinery (ACM) was founded in 1947.
^ a b c Denning, P.J. (2000). "Computer Science: The Discipline" (PDF). Encyclopedia of Computer Science. Archived from the original on 2006-05-25. http://web.archive.org/web/20060525195404/http://www.idi.ntnu.no/emner/dif8916/denning.pdf.
^ "Some EDSAC statistics". Cl.cam.ac.uk. http://www.cl.cam.ac.uk/conference/EDSAC99/statistics.html. Retrieved 2011-11-19.
^ Computer science pioneer Samuel D. Conte dies at 85 July 1, 2002
^ a b Levy, Steven (1984). Hackers: Heroes of the Computer Revolution. Doubleday. ISBN0-385-19195-2.
^ a b David Kahn, The Codebreakers, 1967, ISBN 0-684-83130-9.
^ a b http://www.cis.cornell.edu/Dean/Presentations/Slides/bgu.pdf
^ Constable, R.L. (March 2000) (PDF). Computer Science: Achievements and Challenges circa 2000. http://www.cs.cornell.edu/cis-dean/bgu.pdf.
^ Abelson, H.; G.J. Sussman with J. Sussman (1996). Structure and Interpretation of Computer Programs (2nd ed.). MIT Press. ISBN0-262-01153-0. "The computer revolution is a revolution in the way we think and in the way we express what we think. The essence of this change is the emergence of what might best be called procedural epistemology  the study of the structure of knowledge from an imperative point of view, as opposed to the more declarative point of view taken by classical mathematical subjects."
^ Black box traders are on the march The Telegraph, August 26, 2006
^ "The Impact of High Frequency Trading on an Electronic Market". Papers.ssrn.com. doi:10.2139/ssrn.1686004. http://papers.ssrn.com/sol3/papers.cfm?abstract_id=1686004. Retrieved 2012-05-14.
^ Wegner, P. (October 1315, 1976). "Research paradigms in computer science". Proceedings of the 2nd international Conference on Software Engineering. San Francisco, California, United States: IEEE Computer Society Press, Los Alamitos, CA.
^ Denning, P. J.; Comer, D. E.; Gries, D.; Mulder, M. C.; Tucker, A.; Turner, A. J.; Young, P. R. (Jan 1989). "Computing as a discipline". Communications of the ACM 32: 923. doi:10.1145/63238.63239. volume = 64 edit
^ Eden, A. H. (2007). "Three Paradigms of Computer Science". Minds and Machines 17 (2): 135167. doi:10.1007/s11023-007-9060-8. http://www.eden-study.org/articles/2007/three_paradigms_of_computer_science.pdf. edit
^ Louis Fine (1959). "The Role of the University in Computers, Data Processing, and Related Fields". Communications of the ACM 2 (9): 714. doi:10.1145/368424.368427.
^ id., p. 11
^ Donald Knuth (1972). "George Forsythe and the Development of Computer Science". Comms. ACM.
^ Matti Tedre (2006). The Development of Computer Science: A Sociocultural Perspective, p.260
^ Communications of the ACM 1(4):p.6
^ Communications of the ACM 2(1):p.4
^ IEEE Computer 28(12):p.136
^ P. Mounier-Kuhn, LInformatique en France, de la seconde guerre mondiale au Plan Calcul. Lmergence dune science, Paris, PUPS, 2010, ch. 3 & 4.
^ M. Tedre (2011) Computing as a Science: A Survey of Competing Viewpoints, Minds and Machines 21(3), 361-387
^ Parnas, D. L. (1998). Annals of Software Engineering 6: 1937. doi:10.1023/A:1018949113292. edit, p. 19: "Rather than treat software engineering as a subfield of computer science, I treat it as an element of the set, Civil Engineering, Mechanical Engineering, Chemical Engineering, Electrical Engineering, [...]"
^ a b Computing Sciences Accreditation Board (28 May 1997). "Computer Science as a Profession". Archived from the original on 2008-06-17. http://web.archive.org/web/20080617030847/http://www.csab.org/comp_sci_profession.html. Retrieved 2010-05-23.
^ Committee on the Fundamentals of Computer Science: Challenges and Opportunities, National Research Council (2004). Computer Science: Reflections on the Field, Reflections from the Field. National Academies Press. ISBN978-0-309-09301-9. http://www.nap.edu/catalog.php?record_id=11106#toc.
^ "Csab, Inc". Csab.org. 2011-08-03. http://www.csab.org/. Retrieved 2011-11-19.
^ Clay Mathematics Institute P=NP
^ "ACM Curricula Recommendations". http://www.acm.org/education/curricula-recommendations. Retrieved 2012-11-18.
^ http://www.acm.org/membership/NIC.pdf
^ Gilbert, Alorie. "Newsmaker: Computer science's gender gap". CNET News. http://news.cnet.com/2008-1082-833090.html.
^ Dovzan, Nicole. "Examining the Gender Gap in Technology". University of Michigan. http://sitemaker.umich.edu/356.dovzan/evidence_and_explanations_of_the_gender_gap.


[edit] Further reading


Overview


Tucker, Allen B. (2004). Computer Science Handbook (2nd ed.). Chapman and Hall/CRC. ISBN1-58488-360-X.

"Within more than 70 chapters, every one new or significantly revised, one can find any kind of information and references about computer science one can imagine. [...] all in all, there is absolute nothing about Computer Science that can not be found in the 2.5 kilogram-encyclopaedia with its 110 survey articles [...]." (Christoph Meinel, Zentralblatt MATH)


van Leeuwen, Jan (1994). Handbook of Theoretical Computer Science. The MIT Press. ISBN0-262-72020-5.

"[...] this set is the most unique and possibly the most useful to the [theoretical computer science] community, in support both of teaching and research [...]. The books can be used by anyone wanting simply to gain an understanding of one of these areas, or by someone desiring to be in research in a topic, or by instructors wishing to find timely information on a subject they are teaching outside their major areas of expertise." (Rocky Ross, SIGACT News)


Ralston, Anthony; Reilly, Edwin D.; Hemmendinger, David (2000). Encyclopedia of Computer Science (4th ed.). Grove's Dictionaries. ISBN1-56159-248-X. http://portal.acm.org/ralston.cfm.

"Since 1976, this has been the definitive reference work on computer, computing, and computer science. [...] Alphabetically arranged and classified into broad subject areas, the entries cover hardware, computer systems, information and data, software, the mathematics of computing, theory of computation, methodologies, applications, and computing milieu. The editors have done a commendable job of blending historical perspective and practical reference information. The encyclopedia remains essential for most public and academic library reference collections." (Joe Accardin, Northeastern Illinois Univ., Chicago)


Edwin D. Reilly (2003). Milestones in Computer Science and Information Technology. Greenwood Publishing Group. ISBN978-1-57356-521-9. http://books.google.com/books?id=JTYPKxug49IC&printsec=frontcover#v=onepage&q&f=false.


Selected papers


Knuth, Donald E. (1996). Selected Papers on Computer Science. CSLI Publications, Cambridge University Press.

"Covering a period from 1966 to 1993, its interest lies not only in the content of each of these papers  still timely today  but also in their being put together so that ideas expressed at different times complement each other nicely." (N. Bernard, Zentralblatt MATH)




Articles


Peter J. Denning. Is computer science science?, Communications of the ACM, April 2005.
Peter J. Denning, Great principles in computing curricula, Technical Symposium on Computer Science Education, 2004.
Research evaluation for computer science, Informatics Europe report. Shorter journal version: Bertrand Meyer, Christine Choppy, Jan van Leeuwen and Jorgen Staunstrup, Research evaluation for computer science, in Communications of the ACM, vol. 52, no. 4, pp.3134, April 2009.


Curriculum and classification


Association for Computing Machinery. 1998 ACM Computing Classification System. 1998.
Joint Task Force of Association for Computing Machinery (ACM), Association for Information Systems (AIS) and IEEE Computer Society (IEEE-CS). Computing Curricula 2005: The Overview Report. September 30, 2005.
Norman Gibbs, Allen Tucker. "A model curriculum for a liberal arts degree in computer science". Communications of the ACM, Volume 29 Issue 3, March 1986.


[edit] External links


Find more about Computer science at Wikipedia's sister projects



Definitions and translations from Wiktionary



Media from Commons



Learning resources from Wikiversity



News stories from Wikinews



Quotations from Wikiquote



Source texts from Wikisource



Textbooks from Wikibooks



Computer science at the Open Directory Project
Scholarly Societies in Computer Science
Best Papers Awards in Computer Science since 1996
Photographs of computer scientists by Bertrand Meyer
EECS.berkeley.edu


Bibliography and academic search engines


CiteSeerx (article): search engine, digital library and repository for scientific and academic papers with a focus on computer and information science.
DBLP Computer Science Bibliography (article): computer science bibliography website hosted at Universitt Trier, in Germany.
The Collection of Computer Science Bibliographies (article)


Professional organizations


Association for Computing Machinery
IEEE Computer Society
Informatics Europe


Misc


Computer Science - Stack Exchange a community run Question and Answer site for Computer Science









v
t
e


Major fields of computer science






Mathematical foundations



Mathematical logic
Set theory
Number theory
Graph theory
Type theory
Category theory
Numerical analysis
Information theory
Combinatorics
Boolean algebra








Theory of computation



Automata theory
Computability theory
Computational complexity theory
Quantum computing theory








Algorithms, data structures



Analysis of algorithms
Algorithm design
Computational geometry








Programming languages, compilers



Parsers
Interpreters
Procedural programming
Object-oriented programming
Functional programming
Logic programming
Programming paradigms








Concurrent, parallel, distributed systems



Multiprocessing
Grid computing
Concurrency control








Software engineering



Requirements analysis
Software design
Computer programming
Formal methods
Software testing
Software development process








System architecture



Computer architecture
Computer organization
Operating systems








Telecommunication, networking



Computer audio
Routing
Network topology
Cryptography








Databases



Database management systems
Relational databases
SQL
Transactions
Database indexes
Data mining








Artificial intelligence



Automated reasoning
Computational linguistics
Computer vision
Evolutionary computation
Expert systems
Machine learning
Natural language processing
Robotics








Computer graphics



Visualization
Computer animation
Image processing








Humancomputer interaction



Computer accessibility
User interfaces
Wearable computing
Ubiquitous computing
Virtual reality








Scientific computing



Artificial life
Bioinformatics
Cognitive science
Computational chemistry
Computational neuroscience
Computational physics
Numerical algorithms
Symbolic mathematics









Note: Computer science can also be divided into different topics or fields according to the ACM Computing Classification System.














v
t
e


Technology









Outline of technology
Outline of applied science








Fields




Agriculture



Agricultural engineering
Aquaculture
Fisheries science
Food chemistry
Food engineering
Food microbiology
Food technology
GURT
ICT in agriculture
Nutrition








Biomedical



Bioinformatics
Biological engineering
Biomechatronics
Biomedical engineering
Biotechnology
Cheminformatics
Genetic engineering
Healthcare science
Medical research
Medical technology
Nanomedicine
Neuroscience
Neurotechnology
Pharmacology
Reproductive technology
Tissue engineering








Buildings and
Construction



Acoustical engineering
Architectural engineering
Building services engineering
Civil engineering
Construction engineering
Domestic technology
Facade engineering
Fire protection engineering
Safety engineering
Sanitary engineering
Structural engineering








Educational



Educational software
Digital technologies in education
ICT in education
Impact
Multimedia learning
Virtual campus
Virtual education








Energy



Nuclear engineering
Nuclear technology
Petroleum engineering
Soft energy technology








Environmental



Clean technology
Clean coal technology
Ecological design
Ecological engineering
Ecotechnology
Environmental engineering
Environmental engineering science
Green building
Green nanotechnology
Landscape engineering
Renewable energy
Sustainable design
Sustainable engineering








Industrial



Automation
Business informatics
Engineering management
Enterprise engineering
Financial engineering
Industrial biotechnology
Industrial engineering
Metallurgy
Mining engineering
Productivity improving technologies
Research and development








IT and communications



Artificial intelligence
Broadcast engineering
Computer engineering
Computer science
Information technology
Music technology
Ontology engineering
RF engineering
Software engineering
Telecommunications engineering
Visual technology








Military



Army engineering maintenance
Electronic warfare
Military communications
Military engineering
Stealth technology








Transport



Aerospace engineering
Automotive engineering
Naval architecture
Space technology
Traffic engineering
Transport engineering








Other applied sciences



Cryogenics
Electro-optics
Electronics
Engineering geology
Engineering physics
Hydraulics
Materials science
Microtechnology
Nanotechnology








Other engineering fields



Audio
Biochemical
Ceramic
Chemical
Polymer
Control
Electrical
Electronic
Entertainment
Geotechnical
Hydraulic
Mechanical
Mechatronics
Optical
Protein
Quantum
Robotics
Systems











Components



Infrastructure
Invention

Timeline


Knowledge
Machine
Skill

Craft


Tool

Gadget










History



Prehistoric technology
Neolithic Revolution
Ancient technology
Medieval technology
Renaissance technology
Industrial Revolution

Second


Jet Age
Digital Revolution
Information Age








Theories and
concepts



Appropriate technology
Critique of technology
Diffusion of innovations
Disruptive innovation
Dual-use technology
Ephemeralization
Ethics of technology
High tech
Hype cycle
Inevitability thesis
Low-technology
Mature technology
Philosophy of technology
Strategy of Technology
Technicism
Techno-progressivism
Technocapitalism
Technocentrism
Technocracy
Technocriticism
Technoetic
Technological change
Technological convergence
Technological determinism
Technological escalation
Technological evolution
Technological fix
Technological innovation system
Technological momentum
Technological nationalism
Technological rationality
Technological revival
Technological singularity
Technological somnambulism
Technological utopianism
Technology lifecycle

Technology acceptance model
Technology adoption lifecycle


Technorealism
Transhumanism








Other



Emerging technologies

List


Fictional technology
High-technology business districts
Kardashev scale
List of technologies
Science and technology by country
Technology alignment
Technology assessment
Technology brokering
Technology companies
Technology demonstration
Technology education

Technical universities and colleges


Technology evangelist
Technology governance
Technology integration
Technology journalism
Technology management
Technology shock
Technology strategy
Technology and society
Technology transfer











 Book
 Category
 Commons
 Portal
 Wikiquotes








 
NewPP limit report
Preprocessor visited node count: 19385/1000000
Preprocessor generated node count: 46204/1500000
Post-expand include size: 188623/2048000 bytes
Template argument size: 89336/2048000 bytes
Highest expansion depth: 25/40
Expensive parser function count: 7/500

 Saved in parser cache with key enwiki:pcache:idhash:5323-0!0!0!!en!4!* and timestamp 20130117183425 
  /bodycontent 
 printfooter 

				Retrieved from "http://en.wikipedia.org/w/index.php?title=Computer_science&oldid=533458408"				
 /printfooter 
 catlinks 
Categories: Computer scienceHidden categories: All articles with unsourced statementsArticles with unsourced statements from October 2010Articles to be expanded from June 2011All articles to be expanded  /catlinks 

 debughtml 
 /debughtml 

 /bodyContent 

 