
Adjacency list
 /firstHeading 
 bodyContent 

 tagline 
From Wikipedia, the free encyclopedia
 /tagline 
 subtitle 

 /subtitle 
 jumpto 

					Jump to:					navigation, 					search

 /jumpto 
 bodycontent 




This undirected cyclic graph can be described by the list {a,b}, {a,c}, {b,c}.


In graph theory, an adjacency list is the representation of all edges or arcs in a graph as a list.
If the graph is undirected, every entry is a set (or multiset) of two nodes containing the two ends of the corresponding edge; if it is directed, every entry is a tuple of two nodes, one denoting the source node and the other denoting the destination node of the corresponding arc.
Typically, adjacency lists are unordered.




Contents


1 Application in computer science
2 Trade-offs
3 References
4 External links




[edit] Application in computer science


The graph pictured above has this adjacency list representation:


a
adjacent to
b,c


b
adjacent to
a,c


c
adjacent to
a,b


In computer science, an adjacency list is a data structure for representing graphs. In an adjacency list representation, we keep, for each vertex in the graph, a list of all other vertices which it has an edge to (that vertex's "adjacency list"). For instance, the representation suggested by Van Rossum, in which a hash table is used to associate each vertex with an array of adjacent vertices, can be seen as an example of this type of representation. Another example is the representation in Cormen et al. in which an array indexed by vertex numbers points to a singly linked list of the neighbors of each vertex.
One difficulty with the adjacency list structure is that it has no obvious place to store data associated with the edges of a graph, such as the lengths or costs of the edges. To remedy this, some texts, such as that of Goodrich and Tamassia, advocate a more object oriented variant of the adjacency list structure, sometimes called an incidence list, which stores for each vertex a list of objects representing the edges incident to that vertex. To complete the structure, each edge must point back to the two vertices forming its endpoints. The extra edge objects in this version of the adjacency list cause it to use more memory than the version in which adjacent vertices are listed directly, but these extra edges are also a convenient location to store additional information about each edge (e.g. their length).

[edit] Trade-offs
The main alternative to the adjacency list is the adjacency matrix. For a graph with a sparse adjacency matrix an adjacency list representation of the graph occupies less space, because it does not use any space to represent edges that are not present. Using a naive array implementation of adjacency lists on a 32-bit computer, an adjacency list for an undirected graph requires about 8e bytes of storage, where e is the number of edges: each edge gives rise to entries in the two adjacency lists and uses four bytes in each.
On the other hand, because each entry in an adjacency matrix requires only one bit, they can be represented in a very compact way, occupying only n2/8 bytes of contiguous space, where n is the number of vertices. Besides just avoiding wasted space, this compactness encourages locality of reference.
Noting that a graph can have at most n2 edges (allowing loops) we can let d=e/n2 denote the density of the graph. Then, if 8e>n2/8, the adjacency list representation occupies more space, which is true when d>1/64. Thus a graph must be sparse for an adjacency list representation to be more memory efficient than an adjacency matrix. However, this analysis is valid only when the representation is intended to store the connectivity structure of the graph without any numerical information about its edges.
Besides the space trade-off, the different data structures also facilitate different operations. It is easy to find all vertices adjacent to a given vertex in an adjacency list representation; you simply read its adjacency list. With an adjacency matrix you must instead scan over an entire row, taking O(n) time. If you, instead, want to perform a neighbor test on two vertices (i.e., determine if they have an edge between them), an adjacency matrix provides this at once. However, this neighbor test in an adjacency list requires time proportional to the number of edges associated with the two vertices.
[edit] References

Joe Celko (2004). Trees and Hierarchies in SQL for Smarties. Morgan Kaufmann. excerpt from Chapter 2: "Adjacency List Model". ISBN1-55860-920-2.
Thomas H. Cormen, Charles E. Leiserson, Ronald L. Rivest, and Clifford Stein (2001). Introduction to Algorithms, Second Edition. MIT Press and McGraw-Hill. pp.527529 of section 22.1: Representations of graphs. ISBN0-262-03293-7.
David Eppstein (1996). "ICS 161 Lecture Notes: Graph Algorithms". http://www.ics.uci.edu/~eppstein/161/960201.html.
Michael T. Goodrich and Roberto Tamassia (2002). Algorithm Design: Foundations, Analysis, and Internet Examples. John Wiley & Sons. ISBN0-471-38365-1.
Guido van Rossum (1998). "Python Patterns  Implementing Graphs". http://www.python.org/doc/essays/graphs/.

[edit] External links

The Boost Graph Library implements an efficient adjacency list
Open Data Structures - Section 12.2 - AdjacencyList: A Graph as a Collection of Lists

 
NewPP limit report
Preprocessor visited node count: 2495/1000000
Preprocessor generated node count: 15128/1500000
Post-expand include size: 9344/2048000 bytes
Template argument size: 4394/2048000 bytes
Highest expansion depth: 12/40
Expensive parser function count: 0/500

 Saved in parser cache with key enwiki:pcache:idhash:392431-0!*!0!!en!4!* and timestamp 20130122175512 
  /bodycontent 
 printfooter 

				Retrieved from "http://en.wikipedia.org/w/index.php?title=Adjacency_list&oldid=526331010"				
 /printfooter 
 catlinks 
Categories: Graph theory objectsGraph data structures  /catlinks 

 debughtml 
 /debughtml 

 /bodyContent 

 