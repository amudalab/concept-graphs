
Splay tree
 /firstHeading 
 bodyContent 

 tagline 
From Wikipedia, the free encyclopedia
 /tagline 
 subtitle 

 /subtitle 
 jumpto 

					Jump to:					navigation, 					search

 /jumpto 
 bodycontent 


Splay tree


Type
Tree


Invented
1985


Invented by
Daniel Dominic Sleator and Robert Endre Tarjan


Time complexity
in big O notation



Average
Worst case


Space
O(n)
O(n)


Search
O(log n)
amortized O(log n)


Insert
O(log n)
amortized O(log n)


Delete
O(log n)
amortized O(log n)


A splay tree is a self-adjusting binary search tree with the additional property that recently accessed elements are quick to access again. It performs basic operations such as insertion, look-up and removal in O(log n) amortized time. For many sequences of nonrandom operations, splay trees perform better than other search trees, even when the specific pattern of the sequence is unknown. The splay tree was invented by Daniel Dominic Sleator and Robert Endre Tarjan in 1985.[1]
All normal operations on a binary search tree are combined with one basic operation, called splaying. Splaying the tree for a certain element rearranges the tree so that the element is placed at the root of the tree. One way to do this is to first perform a standard binary tree search for the element in question, and then use tree rotations in a specific fashion to bring the element to the top. Alternatively, a top-down algorithm can combine the search and the tree reorganization into a single phase.




Contents


1 Advantages
2 Disadvantages
3 Operations

3.1 Splaying
3.2 Insertion
3.3 Deletion


4 Analysis
5 Performance theorems
6 Dynamic optimality conjecture
7 Further reading
8 See also
9 References
10 External links




[edit] Advantages
Good performance for a splay tree depends on the fact that it is self-optimizing, in that frequently accessed nodes will move nearer to the root where they can be accessed more quickly. The worst-case heightthough unlikelyis O(n), with the average being O(log n). Having frequently used nodes near the root is an advantage for nearly all practical applications (also see Locality of reference),[citation needed] and is particularly useful for implementing caches and garbage collection algorithms.
Advantages include:

Simple implementationsimpler than other self-balancing binary search trees, such as red-black trees or AVL trees.
Comparable performanceaverage-case performance is as efficient as other trees.[citation needed]
Small memory footprintsplay trees do not need to store any bookkeeping data.
Possibility of creating a persistent data structure version of splay treeswhich allows access to both the previous and new versions after an update. This can be useful in functional programming, and requires amortized O(log n) space per update.
Working well with nodes containing identical keyscontrary to other types of self-balancing trees. Even with identical keys, performance remains amortized O(log n). All tree operations preserve the order of the identical nodes within the tree, which is a property similar to stable sorting algorithms. A carefully designed find operation can return the leftmost or rightmost node of a given key.

[edit] Disadvantages
Perhaps the most significant disadvantage of splay trees is that the height of a splay tree can be linear. For example, this will be the case after accessing all n elements in non-decreasing order. Since the height of a tree corresponds to the worst-case access time, this means that the actual cost of an operation can be slow. However the amortized access cost of this worst case is logarithmic, O(log n). Also, the expected access cost can be reduced to O(log n) by using a randomized variant.[2]
A splay tree can be worse than a static tree by at most a constant factor.
Splay trees can change even when they are accessed in a 'read-only' manner (i.e. by find operations). This complicates the use of such splay trees in a multi-threaded environment. Specifically, extra management is needed if multiple threads are allowed to perform find operations concurrently.
[edit] Operations
[edit] Splaying
When a node x is accessed, a splay operation is performed on x to move it to the root. To perform a splay operation we carry out a sequence of splay steps, each of which moves x closer to the root. By performing a splay operation on the node of interest after every access, the recently accessed nodes are kept near the root and the tree remains roughly balanced, so that we achieve the desired amortized time bounds.
Each particular step depends on three factors:

Whether x is the left or right child of its parent node, p,
whether p is the root or not, and if not
whether p is the left or right child of its parent, g (the grandparent of x).

It is important to remember to set gg (the great-grandparent of x) to now point to x after any splay operation. If gg is null, then x obviously is now the root and must be updated as such.
The three types of splay steps are:
Zig Step: This step is done when p is the root. The tree is rotated on the edge between x and p. Zig steps exist to deal with the parity issue and will be done only as the last step in a splay operation and only when x has odd depth at the beginning of the operation.



Zig-zig Step: This step is done when p is not the root and x and p are either both right children or are both left children. The picture below shows the case where x and p are both left children. The tree is rotated on the edge joining p with its parent g, then rotated on the edge joining x with p. Note that zig-zig steps are the only thing that differentiate splay trees from the rotate to root method introduced by Allen and Munro[3] prior to the introduction of splay trees.



Zig-zag Step: This step is done when p is not the root and x is a right child and p is a left child or vice versa. The tree is rotated on the edge between x and p, then rotated on the edge between x and its new parent g.



[edit] Insertion
To insert a node x into a splay tree:

First insert the node as with a normal binary search tree.
Then splay the newly inserted node x to the top of the tree.

[edit] Deletion
To delete a node x, we use the same method as with a binary search tree: if x has two children, we swap its value with that of either the rightmost node of its left sub tree (its in-order predecessor) or the leftmost node of its right subtree (its in-order successor). Then we remove that node instead. In this way, deletion is reduced to the problem of removing a node with 0 or 1 children.
Unlike a binary search tree, in a splay tree after deletion, we splay the parent of the removed node to the top of the tree. OR The node to be deleted is first splayed, i.e. brought to the root of the tree and then deleted. This leaves the tree with two sub trees. The maximum element of the left sub tree (: METHOD 1), or minimum of the right sub tree (: METHOD 2) is then splayed to the root. The right sub tree is made the right child of the resultant left sub tree (for METHOD 1). The root of left sub tree is the root of melded tree.
[edit] Analysis
A simple amortized analysis of static splay trees can be carried out using the potential method. Suppose that size(r) is the number of nodes in the subtree rooted at r (including r) and rank(r) = log2(size(r)). Then the potential function P(t) for a splay tree t is the sum of the ranks of all the nodes in the tree. This will tend to be high for poorly balanced trees, and low for well-balanced trees. We can bound the amortized cost of any zig-zig or zig-zag operation by:

amortized cost = cost + P(tf) - P(ti)  3(rankf(x) - ranki(x)),

where x is the node being moved towards the root, and the subscripts "f" and "i" indicate after and before the operation, respectively. When summed over the entire splay operation, this telescopes to 3(rank(root)) which is O(log n). Since there's at most one zig operation, this only adds a constant.
[edit] Performance theorems
There are several theorems and conjectures regarding the worst-case runtime for performing a sequence S of m accesses in a splay tree containing n elements.

Balance Theorem[1]
The cost of performing the sequence S is . In other words, splay trees perform as well as static balanced binary search trees on sequences of at least n accesses.
Static Optimality Theorem[1]
Let  be the number of times element i is accessed in S. The cost of performing S is . In other words, splay trees perform as well as optimum static binary search trees on sequences of at least n accesses.
Static Finger Theorem[1]
Let  be the element accessed in the  access of S and let f be any fixed element (the finger). The cost of performing S is .
Working Set Theorem[1]
Let  be the number of distinct elements accessed between access j and the previous time element  was accessed. The cost of performing S is .
Dynamic Finger Theorem[4][5]
The cost of performing S is .
Scanning Theorem[6]
Also known as the Sequential Access Theorem. Accessing the n elements of a splay tree in symmetric order takes O(n) time, regardless of the initial structure of the splay tree. The tightest upper bound proven so far is .[7]

[edit] Dynamic optimality conjecture

List of unsolved problems in computer science

Do splay trees perform as well as any other binary search tree algorithm?


In addition to the proven performance guarantees for splay trees there is an unproven conjecture of great interest from the original Sleator and Tarjan paper. This conjecture is known as the dynamic optimality conjecture and it basically claims that splay trees perform as well as any other binary search tree algorithm up to a constant factor.

Dynamic Optimality Conjecture:[1] Let  be any binary search tree algorithm that accesses an element  by traversing the path from the root to  at a cost of , and that between accesses can make any rotations in the tree at a cost of 1 per rotation. Let  be the cost for  to perform the sequence  of accesses. Then the cost for a splay tree to perform the same accesses is .

There are several corollaries of the dynamic optimality conjecture that remain unproven:

Traversal Conjecture:[1] Let  and  be two splay trees containing the same elements. Let  be the sequence obtained by visiting the elements in  in preorder (i.e., depth first search order). The total cost of performing the sequence  of accesses on  is .


Deque Conjecture:[6][8][9] Let  be a sequence of  double-ended queue operations (push, pop, inject, eject). Then the cost of performing  on a splay tree is .


Split Conjecture:[10] Let  be any permutation of the elements of the splay tree. Then the cost of deleting the elements in the order  is .

[edit] Further reading

Knuth, Donald. The Art of Computer Programming, Volume 3: Sorting and Searching, Third Edition. Addison-Wesley, 1997. ISBN 0-201-89685-0. Page 478 of section 6.2.3.

[edit] See also

Finger tree
Link/cut tree
Scapegoat tree
Zipper (data structure)
Trees
Tree rotation
AVL tree
B-tree
T-tree
List of data structures

[edit] References

^ a b c d e f g Sleator, Daniel D.; Tarjan, Robert E. (1985), "Self-Adjusting Binary Search Trees", Journal of the ACM (Association for Computing Machinery) 32 (3): 652686, doi:10.1145/3828.3835, http://www.cs.cmu.edu/~sleator/papers/self-adjusting.pdf
^ "Randomized Splay Trees: Theoretical and Experimental Results". http://www2.informatik.hu-berlin.de/~albers/papers/ipl02.pdf. Retrieved 31 May 2011.
^ Allen, Brian; and Munro, Ian (1978), "Self-organizing search trees", Journal of the ACM 25 (4): 526535, doi:10.1145/322092.322094
^ Cole, Richard; Mishra, Bud; Schmidt, Jeanette; and Siegel, Alan (2000), "On the Dynamic Finger Conjecture for Splay Trees. Part I: Splay Sorting log n-Block Sequences", SIAM (Society for Industrial and Applied Mathematics) Journal on Computing 30: 143
^ Cole, Richard (2000), "On the Dynamic Finger Conjecture for Splay Trees. Part II: The Proof", SIAM Journal on Computing 30: 4485, doi:10.1137/S009753979732699X
^ a b Tarjan, Robert E. (1985), "Sequential access in splay trees takes linear time", Combinatorica 5 (4): 367378, doi:10.1007/BF02579253
^ Elmasry, Amr (2004), "On the sequential access theorem and Deque conjecture for splay trees", Theoretical Computer Science 314 (3): 459466, doi:10.1016/j.tcs.2004.01.019
^ Pettie, Seth (2008), "Splay Trees, Davenport-Schinzel Sequences, and the Deque Conjecture", Proceedings of the 19th ACM-SIAM Symposium on Discrete Algorithms 0707: 11151124, arXiv:0707.2160, Bibcode 2007arXiv0707.2160P
^ Sundar, Rajamani (1992), "On the Deque conjecture for the splay algorithm", Combinatorica 12 (1): 95124, doi:10.1007/BF01191208
^ Lucas, Joan M. (1991), "On the Competitiveness of Splay Trees: Relations to the Union-Find Problem", Online Algorithms, Center for Discrete Mathematics and Theoretical Computer Science (DIMACS) Series in Discrete Mathematics and Theoretical Computer Science Vol. 7: 95124

[edit] External links

NIST's Dictionary of Algorithms and Data Structures: Splay Tree
Implementations in C and Java (by Daniel Sleator)
Pointers to splay tree visualizations
Fast and efficient implentation of Splay trees
Top-Down Splay Tree Java implementation
Zipper Trees
splay tree video









v
t
e


Trees in computer science






Binary trees



Binary search tree (BST)
Cartesian tree
MVP Tree
Top tree
T-tree








Self-balancing binary search trees



AA tree
AVL tree
LLRB tree
Redblack tree
Scapegoat tree
Splay tree
Treap








B-trees



B+ tree
B*-tree
Bx-tree
UB-tree
2-3 tree
2-3-4 tree
(a,b)-tree
Dancing tree
Htree








Tries



Suffix tree
Radix tree
Ternary search tree
X-fast trie
Y-fast trie








Binary space partitioning (BSP) trees



Quadtree
Octree
k-d tree
Implicit k-d tree
VP tree








Non-binary trees



Exponential tree
Fusion tree
Interval tree
PQ tree
Range tree
SPQR tree
Van Emde Boas tree








Spatial data partitioning trees



R-tree
R+ tree
R* tree
X-tree
M-tree
Segment tree
Hilbert R-tree
Priority R-tree








Other trees



Heap
Hash calendar
Hash tree
Finger tree
Order statistic tree
Metric tree
Cover tree
BK-tree
Doubly chained tree
iDistance
Link-cut tree
Fenwick tree








 
NewPP limit report
Preprocessor visited node count: 7894/1000000
Preprocessor generated node count: 31162/1500000
Post-expand include size: 58016/2048000 bytes
Template argument size: 18341/2048000 bytes
Highest expansion depth: 21/40
Expensive parser function count: 3/500

 Saved in parser cache with key enwiki:pcache:idhash:28382-0!0!0!!en!4!* and timestamp 20130122202041 
  /bodycontent 
 printfooter 

				Retrieved from "http://en.wikipedia.org/w/index.php?title=Splay_tree&oldid=534375079"				
 /printfooter 
 catlinks 
Categories: Binary treesHidden categories: Use dmy dates from July 2012All articles with unsourced statementsArticles with unsourced statements from January 2010  /catlinks 

 debughtml 
 /debughtml 

 /bodyContent 

 