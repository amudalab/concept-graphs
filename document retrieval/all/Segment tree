
Segment tree
 /firstHeading 
 bodyContent 

 tagline 
From Wikipedia, the free encyclopedia
 /tagline 
 subtitle 

 /subtitle 
 jumpto 

					Jump to:					navigation, 					search

 /jumpto 
 bodycontent 





This article relies largely or entirely upon a single source. Relevant discussion may be found on the talk page. Please help improve this article by introducing citations to additional sources. (November 2007) 


In computer science, a segment tree is a tree data structure for storing intervals, or segments. It allows querying which of the stored segments contain a given point. It is, in principle, a static structure; that is, its content cannot be modified once the structure is built. A similar data structure is the interval tree.
A segment tree for a set I of n intervals uses O(n log n) storage and can be built in O(n log n) time. Segment trees support searching for all the intervals that contain a query point in O(log n + k), k being the number of retrieved intervals or segments.[1]
Applications of the segment tree are in the areas of computational geometry, and geographic information systems.
The segment tree can be generalized to higher dimension spaces as well.




Contents


1 Structure description
2 Storage requirements
3 Construction
4 Query
5 Generalization for higher dimensions
6 Notes
7 History
8 References




[edit] Structure description
This section describes the structure of a segment tree in a one-dimensional space.
Let S be a set of intervals, or segments. Let p1, p2, ..., pm be the list of distinct interval endpoints, sorted from left to right. Consider the partitioning of the real line induced by those points. The regions of this partitioning are called elementary intervals. Thus, the elementary intervals are, from left to right:



That is, the list of elementary intervals consists of open intervals between two consecutive endpoints pi and pi+1, alternated with closed intervals consisting of a single endpoint. Single points are treated themselves as intervals because the answer to a query is not necessarily the same at the interior of an elementary interval and its endpoints.[2]


Graphic example of the structure of the segment tree. This instance is built for the segments shown at the bottom.


Given a set I of intervals, or segments, a segment tree T for I is structured as follows:

T is a binary tree.
Its leaves correspond to the elementary intervals induced by the endpoints in I, in an ordered way: the leftmost leaf corresponds to the leftmost interval, and so on. The elementary interval corresponding to a leaf v is denoted Int(v).
The internal nodes of T correspond to intervals that are the union of elementary intervals: the interval Int(N) corresponding to node N is the union of the intervals corresponding to the leaves of the tree rooted at N. That implies that Int(N) is the union of the intervals of its two children.
Each node or leaf v in T stores the interval Int(v) and a set of intervals, in some data structure. This canonical subset of node v contains the intervals [x, x] from I such that [x, x] contains Int(v) and does not contain Int(parent(v)). That is, each segment in I stores the segments that span through its interval, but do not span through the interval of its parent.[3]

[edit] Storage requirements
This section analyzes the storage cost of a segment tree in a one-dimensional space.
A segment tree T on a set I of n intervals uses O(nlogn) storage.

Proof:


Lemma: Any interval [x, x] of I is stored in the canonical set for at most two nodes at the same depth.




Proof: Let v1, v2, v3 be the three nodes at the same depth, numbered from left to right; and let w be the parent node of v2. Suppose [x, x] is stored at v1 and v3. This means that [x, x] spans the whole interval from the left endpoint of Int(v1) to the right endpoint of Int(v3). Because v2 lies between v1 and v3, Int(w) must be contained in [x, x]. Hence, [x, x] will not be stored at v2.




The set I has at most 4n + 1 elementary intervals. Because T is a binary balanced tree with at most 4n + 1 leaves, its height is O(logn). Since any interval is stored at most twice at a given depth of the tree, that the total amount of storage is O(nlogn).[4]

[edit] Construction
This section describes the construction of a segment tree in a one-dimensional space.
A segment tree from the set of segments I, can be built as follows. First, the endpoints of the intervals in I are sorted. The elementary intervals are obtained from that. Then, a balanced binary tree is built on the elementary intervals, and for each node v it is determined the interval Int(v) it represents. It remains to compute the canonical subsets for the nodes. To achieve this, the intervals in I are inserted one by one into the segment tree. An interval X = [x, x] can be inserted in a subtree rooted at T, using the following procedure [5]:

If Int(T) is contained in X then store X at T, and finish.
Else:
If X intersects the canonical subset of the left child of T, then insert X in that child, recursively.
If X intersects the canonical subset of the right child of T, then insert X in that child, recursively.

The complete construction operation takes O(nlogn) time, n being the number of segments in I.

Proof


Sorting the endpoints takes O(nlogn). Building a balanced binary tree from the sorted endpoints, takes linear time on n.
The insertion of an interval X = [x, x] into the tree, costs O(logn).

Proof: Visiting every node takes constant time (assuming that canonical subsets are stored in a simple data structure like a linked list). When we visit node v, we either store X at v, or Int(v) contains an endpoint of X. As proved above, an interval is stored at most twice at each level of the tree. There is also at most one node at every level whose corresponding interval contains x, and one node whose interval contains x. So, at most four nodes per level are visited. Since there are O(logn) levels, the total cost of the insertion is O(logn).[1]



[edit] Query
This section describes the query operation of a segment tree in a one-dimensional space.
A query for a segment tree, receives a point qx, and retrieves a list of all the segments stored which contain the point qx.
Formally stated; given a node (subtree) v and a query point qx, the query can be done using the following algorithm:

Report all the intervals in I(v).
If v is not a leaf:

If qx is in Int(left child of v) then

Perform a query in the left child of v.


Else

Perform a query in the right child of v.





In a segment tree that contains n intervals, those containing a given query point can be reported in O(logn + k) time, where k is the number of reported intervals.

Proof: The query algorithm visits one node per level of the tree, so O(logn) nodes in total. In the other hand, at a node v, the segments in I are reported in O(1 + kv) time, where kv is the number of intervals at node v, reported. The sum of all the kv for all nodes v visited, is k, the number of reported segments.[4]

[edit] Generalization for higher dimensions
The segment tree can be generalized to higher dimension spaces, in the form of multi-level segment trees. In higher dimension versions, the segment tree stores a collection of axis-parallel (hyper-)rectangles, and can retrieve the rectangles that contain a given query point. The structure uses O(nlogd-1n) storage, and answers queries in O(logdn).
The use of fractional cascading lowers the query time bound by a logarithmic factor. The use of the interval tree on the deepest level of associated structures lowers the storage bound with a logarithmic factor.[6]
[edit] Notes
The query that asks for all the intervals containing a given point, is often referred as stabbing query.[7]
The segment tree is less efficient than the interval tree for range queries in one dimension, due to its higher storage requirement: O(nlogn) against the O(n) of the interval tree. The importance of the segment tree is that the segments within each nodes canonical subset can be stored in any arbitrary manner.[7]
Another advantage of the segment tree is that it can easily be adapted to counting queries; that is, to report the number of segments containing a given point, instead of reporting the segments themselves. Instead of storing the intervals in the canonical subsets, it can simply store the number of them. Such a segment tree uses linear storage, and requires an O(log n) query time, so it is optimal.[8]
A version for higher dimensions of the interval tree and the priority search tree does not exist, that is, there is no clear extension of these structures that solves the analogous problem in higher dimensions. But the structures can be used as associated structure of segment trees.[6]
[edit] History



This section requires expansion. (November 2007)


The segment tree was discovered by J. L. Bentley in 1977; in "Solutions to Klees rectangle problems".[7]
[edit] References


^ a b (de Berg, van Kreveld, Overmars, Schwarzkopf 2000, p.227)
^ (de Berg, van Kreveld, Overmars, Schwarzkopf 2000, p.224)
^ (de Berg, van Kreveld, Overmars, Schwarzkopf 2000, pp.225226)
^ a b (de Berg, van Kreveld, Overmars, Schwarzkopf 2000, p.226)
^ (de Berg, van Kreveld, Overmars, Schwarzkopf 2000, pp.226227)
^ a b (de Berg, van Kreveld, Overmars, Schwarzkopf 2000, p.230)
^ a b c (de Berg, van Kreveld, Overmars, Schwarzkopf 2000, p.229)
^ (de Berg, van Kreveld, Overmars, Schwarzkopf 2000, pp.229230)



de Berg, Mark; van Kreveld, Marc; Overmars, Mark; Schwarzkopf, Otfried (2000), Computational Geometry: algorithms and applications (2nd ed.), Springer-Verlag Berlin Heidelberg New York, ISBN3-540-65620-0
http://www.cs.nthu.edu.tw/~wkhon/ds/ds10/tutorial/tutorial6.pdf








v
t
e


Trees in computer science






Binary trees



Binary search tree (BST)
Cartesian tree
MVP Tree
Top tree
T-tree








Self-balancing binary search trees



AA tree
AVL tree
LLRB tree
Redblack tree
Scapegoat tree
Splay tree
Treap








B-trees



B+ tree
B*-tree
Bx-tree
UB-tree
2-3 tree
2-3-4 tree
(a,b)-tree
Dancing tree
Htree








Tries



Suffix tree
Radix tree
Ternary search tree
X-fast trie
Y-fast trie








Binary space partitioning (BSP) trees



Quadtree
Octree
k-d tree
Implicit k-d tree
VP tree








Non-binary trees



Exponential tree
Fusion tree
Interval tree
PQ tree
Range tree
SPQR tree
Van Emde Boas tree








Spatial data partitioning trees



R-tree
R+ tree
R* tree
X-tree
M-tree
Segment tree
Hilbert R-tree
Priority R-tree








Other trees



Heap
Hash calendar
Hash tree
Finger tree
Order statistic tree
Metric tree
Cover tree
BK-tree
Doubly chained tree
iDistance
Link-cut tree
Fenwick tree








 
NewPP limit report
Preprocessor visited node count: 2933/1000000
Preprocessor generated node count: 28027/1500000
Post-expand include size: 33555/2048000 bytes
Template argument size: 8943/2048000 bytes
Highest expansion depth: 17/40
Expensive parser function count: 3/500

 Saved in parser cache with key enwiki:pcache:idhash:13682464-0!0!0!!en!4!* and timestamp 20130122175511 
  /bodycontent 
 printfooter 

				Retrieved from "http://en.wikipedia.org/w/index.php?title=Segment_tree&oldid=526685809"				
 /printfooter 
 catlinks 
Categories: Trees (data structures)Binary treesComputer graphics data structuresHidden categories: Articles needing additional references from November 2007All articles needing additional referencesArticles to be expanded from November 2007All articles to be expanded  /catlinks 

 debughtml 
 /debughtml 

 /bodyContent 

 