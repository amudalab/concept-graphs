
Kruskal's algorithm
 /firstHeading 
 bodyContent 

 tagline 
From Wikipedia, the free encyclopedia
 /tagline 
 subtitle 

 /subtitle 
 jumpto 

					Jump to:					navigation, 					search

 /jumpto 
 bodycontent 


Graph and tree
search algorithms





A*
B*
Beam
BellmanFord
Best-first
Bidirectional
Borvka
Branch & bound
BFS
British Museum
D*
DFS
Depth-limited
Dijkstra
Edmonds
FloydWarshall
Hill climbing
Iterative deepening
Kruskal
Johnson
Lexicographic BFS
Prim
Uniform-cost




Listings




Graph algorithms
Search algorithms
List of graph algorithms




Related topics




Dynamic programming
Graph traversal
Tree traversal
Search games







v
t
e





Kruskal's algorithm is a greedy algorithm in graph theory that finds a minimum spanning tree for a connected weighted graph. This means it finds a subset of the edges that forms a tree that includes every vertex, where the total weight of all the edges in the tree is minimized. If the graph is not connected, then it finds a minimum spanning forest (a minimum spanning tree for each connected component).
This algorithm first appeared in Proceedings of the American Mathematical Society, pp.4850 in 1956, and was written by Joseph Kruskal.
Other algorithms for this problem include Prim's algorithm, Reverse-Delete algorithm, and Borvka's algorithm.




Contents


1 Description
2 Pseudocode
3 Complexity
4 Example
5 Proof of correctness

5.1 Spanning Tree
5.2 Minimality


6 See also
7 References
8 External links




[edit] Description

create a forest F (a set of trees), where each vertex in the graph is a separate tree
create a set S containing all the edges in the graph
while S is nonempty and F is not yet spanning

remove an edge with minimum weight from S
if that edge connects two different trees, then add it to the forest, combining two trees into a single tree
otherwise discard that edge.



At the termination of the algorithm, the forest forms a minimum spanning forest of the graph. If the graph is connected, the forest has a single component and forms a minimum spanning tree.
[edit] Pseudocode
The following code is implemented with disjoint-set data structure:

KRUSKAL(G):
1 A = 
2 foreach v  G.V:
3   MAKE-SET(v)
4 foreach (u, v) ordered by weight(u, v), increasing:
5    if FIND-SET(u)  FIND-SET(v):
6       A = A  {(u, v)}
7       UNION(u, v)
8 return A

[edit] Complexity
Where E is the number of edges in the graph and V is the number of vertices, Kruskal's algorithm can be shown to run in O(E log E) time, or equivalently, O(E log V) time, all with simple data structures. These running times are equivalent because:

E is at most V2 and   is O(log V).
Each isolated vertex is a separate component of the minimum spanning forest. If we ignore isolated vertices we obtain V  E+1, so log V is O(log E).

We can achieve this bound as follows: first sort the edges by weight using a comparison sort in O(E log E) time; this allows the step "remove an edge with minimum weight from S" to operate in constant time. Next, we use a disjoint-set data structure (Union&Find) to keep track of which vertices are in which components. We need to perform O(E) operations, two 'find' operations and possibly one union for each edge. Even a simple disjoint-set data structure such as disjoint-set forests with union by rank can perform O(E) operations in O(E log V) time. Thus the total time is O(E log E) = O(E log V).
Provided that the edges are either already sorted or can be sorted in linear time (for example with counting sort or radix sort), the algorithm can use more sophisticated disjoint-set data structure to run in O(E (V)) time, where  is the extremely slowly growing inverse of the single-valued Ackermann function.
[edit] Example
Download the example data.


Image
Description



AD and CE are the shortest edges, with length 5, and AD has been arbitrarily chosen, so it is highlighted.



CE is now the shortest edge that does not form a cycle, with length 5, so it is highlighted as the second edge.



The next edge, DF with length 6, is highlighted using much the same method.



The next-shortest edges are AB and BE, both with length 7. AB is chosen arbitrarily, and is highlighted. The edge BD has been highlighted in red, because there already exists a path (in green) between B and D, so it would form a cycle (ABD) if it were chosen.



The process continues to highlight the next-smallest edge, BE with length 7. Many more edges are highlighted in red at this stage: BC because it would form the loop BCE, DE because it would form the loop DEBA, and FE because it would form FEBAD.



Finally, the process finishes with the edge EG of length 9, and the minimum spanning tree is found.


[edit] Proof of correctness
The proof consists of two parts. First, it is proved that the algorithm produces a spanning tree. Second, it is proved that the constructed spanning tree is of minimal weight.
[edit] Spanning Tree
Let  be a connected, weighted graph and let  be the subgraph of  produced by the algorithm.  cannot have a cycle, since the last edge added to that cycle would have been within one subtree and not between two different trees.  cannot be disconnected, since the first encountered edge that joins two components of  would have been added by the algorithm. Thus,  is a spanning tree of .
[edit] Minimality
We show that the following proposition P is true by induction: If F is the set of edges chosen at any stage of the algorithm, then there is some minimum spanning tree that contains F.

Clearly P is true at the beginning, when F is empty: any minimum spanning tree will do, and there exists one because a weighted connected graph always has a minimum spanning tree.
Now assume P is true for some non-final edge set F and let T be a minimum spanning tree that contains F. If the next chosen edge e is also in T, then P is true for F + e. Otherwise, T + e has a cycle C and there is another edge f that is in C but not F. (If there were no such edge f, then e could not have been added to F, since doing so would have created the cycle C.) Then T  f + e is a tree, and it has the same weight as T, since T has minimum weight and the weight of f cannot be less than the weight of e, otherwise the algorithm would have chosen f instead of e. So T  f + e is a minimum spanning tree containing F + e and again P holds.
Therefore, by the principle of induction, P holds when F has become a spanning tree, which is only possible if F is a minimum spanning tree itself.

[edit] See also

Reverse-Delete algorithm
Dijkstra's algorithm
Prim's algorithm
Single-linkage clustering

[edit] References

Joseph. B. Kruskal: On the Shortest Spanning Subtree of a Graph and the Traveling Salesman Problem. In: Proceedings of the American Mathematical Society, Vol 7, No. 1 (Feb, 1956), pp.4850
Thomas H. Cormen, Charles E. Leiserson, Ronald L. Rivest, and Clifford Stein. Introduction to Algorithms, Second Edition. MIT Press and McGraw-Hill, 2001. ISBN 0-262-03293-7. Section 23.2: The algorithms of Kruskal and Prim, pp.567574.
Michael T. Goodrich and Roberto Tamassia. Data Structures and Algorithms in Java, Fourth Edition. John Wiley & Sons, Inc., 2006. ISBN 0-471-73884-0. Section 13.7.1: Kruskal's Algorithm, pp.632..

[edit] External links

Download the example minimum spanning tree data.
Animation of Kruskal's algorithm (Requires Java plugin)
download kruskal algorithm Implement with C++ and java(graphical)(Requires java 7+)
C# Implementation

 
NewPP limit report
Preprocessor visited node count: 492/1000000
Preprocessor generated node count: 5091/1500000
Post-expand include size: 8173/2048000 bytes
Template argument size: 2807/2048000 bytes
Highest expansion depth: 11/40
Expensive parser function count: 0/500

 Saved in parser cache with key enwiki:pcache:idhash:53776-0!0!0!!en!4!* and timestamp 20130115082536 
  /bodycontent 
 printfooter 

				Retrieved from "http://en.wikipedia.org/w/index.php?title=Kruskal%27s_algorithm&oldid=533172778"				
 /printfooter 
 catlinks 
Categories: Graph algorithmsSpanning treeHidden categories: Articles with example pseudocodeArticles containing proofs  /catlinks 

 debughtml 
 /debughtml 

 /bodyContent 

 