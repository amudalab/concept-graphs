
Transaction processing
 /firstHeading 
 bodyContent 

 tagline 
From Wikipedia, the free encyclopedia
 /tagline 
 subtitle 

 /subtitle 
 jumpto 

					Jump to:					navigation, 					search

 /jumpto 
 bodycontent 
For other uses, see Transaction (disambiguation).
This article is about the principles of transaction processing.  For specific implementations, see Transaction processing system.





This article needs additional citations for verification. Please help improve this article by adding citations to reliable sources. Unsourced material may be challenged and removed. (November 2012) 







It has been suggested that Transaction processing system be merged into this article or section. (Discuss) Proposed since November 2012. 


In computer science, transaction processing is information processing that is divided into individual, indivisible operations, called transactions. Each transaction must succeed or fail as a complete unit; it cannot remain in an intermediate state.
Since most, though not necessarily all, transaction processing today is interactive the term is often treated as synonymous with online transaction processing.




Contents


1 Description
2 Methodology

2.1 Rollback
2.2 Rollforward
2.3 Deadlocks
2.4 Compensating transaction


3 ACID criteria

3.1 Atomicity
3.2 Consistency
3.3 Isolation
3.4 Durability


4 Benefits
5 Implementations
6 References
7 See also
8 External references
9 Further reading




[edit] Description
Transaction processing is designed to maintain a database Integrity (typically a database or some modern filesystems) in a known, consistent state, by ensuring that any operations carried out on the system that are interdependent are either all completed successfully or all canceled successfully.
For example, consider a typical banking transaction that involves moving $700 from a customer's savings account to a customer's checking account. This transaction is a single operation in the eyes of the bank, but it involves at least two separate operations in computer terms: debiting the savings account by $700, and crediting the checking account by $700. If the debit operation succeeds but the credit does not (or vice versa), the books of the bank will not balance at the end of the day. There must therefore be a way to ensure that either both operations succeed or both fail, so that there is never any inconsistency in the bank's database as a whole. Transaction processing is designed to provide this.
Transaction processing allows multiple individual operations to be linked together automatically as a single, indivisible transaction. The transaction-processing system ensures that either all operations in a transaction are completed without error, or none of them are. If some of the operations are completed but errors occur when the others are attempted, the transaction-processing system "rolls back" all of the operations of the transaction (including the successful ones), thereby erasing all traces of the transaction and restoring the system to the consistent, known state that it was in before processing of the transaction began. If all operations of a transaction are completed successfully, the transaction is committed by the system, and all changes to the database are made permanent; the transaction cannot be rolled back once this is done.
Transaction processing guards against hardware and software errors that might leave a transaction partially completed, with the system left in an unknown, inconsistent state. If the computer system crashes in the middle of a transaction, the transaction processing system guarantees that all operations in any uncommitted (i.e., not completely processed) transactions are cancelled.
Most of the time, transactions are issued concurrently. If they overlap (i.e. need to touch the same portion of the database), this can create conflicts. For example, if the customer mentioned in the example above has $1000 in his savings account and attempts to transfer $350 to a different person while at the same time moving $700 to the checking account, only one of them can succeed. However, forcing transactions to be processed sequentially (i.e. without overlapping in time) is inefficient. Therefore, under concurrency, transaction processing usually guarantees that the end result reflects a conflict-free outcome that can be reached as if executing the transactions sequentially in any order (a property called serializability). In our example, this means that no matter which transaction was issued first, either the transfer to a different person or the move to the checking account has succeeded, while the other one has failed.
[edit] Methodology
The basic principles of all transaction-processing systems are the same. However, the terminology may vary from one transaction-processing system to another, and the terms used below are not necessarily universal.
[edit] Rollback
Main article: Rollback (data management)
Transaction-processing systems ensure database integrity by recording intermediate states of the database as it is modified, then using these records to restore the database to a known state if a transaction cannot be committed. For example, copies of information on the database prior to its modification by a transaction are set aside by the system before the transaction can make any modifications (this is sometimes called a before image). If any part of the transaction fails before it is committed, these copies are used to restore the database to the state it was in before the transaction began.
[edit] Rollforward
It is also possible to keep a separate journal of all modifications to a database (sometimes called after images). This is not required for rollback of failed transactions but it is useful for updating the database in the event of a database failure, so some transaction-processing systems provide it. If the database fails entirely, it must be restored from the most recent back-up. The back-up will not reflect transactions committed since the back-up was made. However, once the database is restored, the journal of after images can be applied to the database (rollforward) to bring the database up to date. Any transactions in progress at the time of the failure can then be rolled back. The result is a database in a consistent, known state that includes the results of all transactions committed up to the moment of failure.
[edit] Deadlocks
Main article: Deadlock
In some cases, two transactions may, in the course of their processing, attempt to access the same portion of a database at the same time, in a way that prevents them from proceeding. For example, transaction A may access portion X of the database, and transaction B may access portion Y of the database. If, at that point, transaction A then tries to access portion Y of the database while transaction B tries to access portion X, a deadlock occurs, and neither transaction can move forward. Transaction-processing systems are designed to detect these deadlocks when they occur. Typically both transactions will be cancelled and rolled back, and then they will be started again in a different order, automatically, so that the deadlock doesn't occur again. Or sometimes, just one of the deadlocked transactions will be cancelled, rolled back, and automatically re-started after a short delay.
Deadlocks can also occur between three or more transactions. The more transactions involved, the more difficult they are to detect, to the point that transaction processing systems find there is a practical limit to the deadlocks they can detect.
[edit] Compensating transaction
In systems where commit and rollback mechanisms are not available or undesirable, a compensating transaction is often used to undo failed transactions and restore the system to a previous state.
[edit] ACID criteria
Main article: ACID
Jim Gray defined properties of a reliable transaction system in the late 1970s under the acronym ACID  atomicity, consistency, isolation, and durability.[1]
[edit] Atomicity
Main article: Atomicity (database systems)
A transactions changes to the state are atomic: either all happen or none happen. These changes include database changes, messages, and actions on transducers.
[edit] Consistency
Consistency: A transaction is a correct transformation of the state. The actions taken as a group do not violate any of the integrity constraints associated with the state.
[edit] Isolation
Even though transactions execute concurrently, it appears to each transaction T, that others executed either before T or after T, but not both.
[edit] Durability
Once a transaction completes successfully (commits), its changes to the state survive failures.
[edit] Benefits
Transaction processing has these benefits:

It allows sharing of computer resources among many users
It shifts the time of job processing to when the computing resources are less busy
It avoids idling the computing resources without minute-by-minute human interaction and supervision
It is used on expensive classes of computers to help amortize the cost by keeping high rates of utilization of those expensive resources

[edit] Implementations
Main article: Transaction processing system
Standard transaction-processing software, notably IBM's Information Management System, was first developed in the 1960s, and was often closely coupled to particular database management systems. clientserver computing implemented similar principles in the 1980s with mixed success. However, in more recent years, the distributed clientserver model has become considerably more difficult to maintain. As the number of transactions grew in response to various online services (especially the Web), a single distributed database was not a practical solution. In addition, most online systems consist of a whole suite of programs operating together, as opposed to a strict clientserver model where the single server could handle the transaction processing. Today a number of transaction processing systems are available that work at the inter-program level and which scale to large systems, including mainframes.
One well-known[citation needed] (and open) industry standard is the X/Open Distributed Transaction Processing (DTP) (see JTA). However, proprietary transaction-processing environments such as IBM's CICS are still very popular[citation needed], although CICS has evolved to include open industry standards as well.
A modern transaction processing implementation combines elements of both object-oriented persistence with traditional transaction monitoring.[citation needed] One such implementation is the commercial DTS/S1 product from Obsidian Dynamics, or the open-source product db4o.
The term 'Extreme Transaction Processing' (XTP) has been used to describe transaction processing systems with uncommonly challenging requirements, particularly throughput requirements (transactions per second). Such systems may be implemented via distributed or cluster style architectures.
[edit] References


^ Gray, Jim; Reuter, Andreas. "Transaction Processing - Concepts and Techniques (Powerpoint)". http://research.microsoft.com/~gray/WICS_99_TP/01_WhirlwindTour.ppt. Retrieved Nov 12, 2012.


[edit] See also

Audit trail
Compensating transaction
Concurrent programming
Database transaction
Extreme Transaction Processing (XTP)
IBM TXSeries (CICS on distributed platforms)
Java EE (e.g. WebSphere Application Server)
Java Transaction API (JTA)
Two-phase commit
Transaction Processing Management System (TPMS)
Transaction Processing Performance Council (TPC)
Telecommunication Application Transaction Processing Benchmark (TATP)

[edit] External references

Nuts and Bolts of Transaction Processing

[edit] Further reading

Gerhard Weikum, Gottfried Vossen, Transactional information systems: theory, algorithms, and the practice of concurrency control and recovery, Morgan Kaufmann, 2002, ISBN 1-55860-508-8
Jim Gray, Andreas Reuter, Transaction Processing Concepts and Techniques, 1993, Morgan Kaufmann, ISBN 1-55860-190-2
Philip A. Bernstein, Eric Newcomer, Principles of Transaction Processing, 1997, Morgan Kaufmann, ISBN 1-55860-415-4
Ahmed K. Elmagarmid (Editor), Transaction Models for Advanced Database Applications, Morgan-Kaufmann, 1992, ISBN 1-55860-214-3









v
t
e


Database management systems









Database models
Database normalization
Database storage
Distributed DBMS
Federated database system
Referential integrity
Relational algebra
Relational calculus
Relational database
Relational DBMS
Relational model
Object-relational database
Transaction processing








Concepts



Database
ACID
CRUD
Null
Candidate key
Foreign key
Primary key
Superkey
Surrogate key
Armstrong's axioms
NoSQL








Objects



Relation

table
column
row


View
Transaction
Log
Trigger
Index
Stored procedure
Cursor
Partition








Components



Concurrency control
Data dictionary
JDBC
XQJ
ODBC
Query language
Query optimizer
Query plan








Functions



Administration and automation
Query optimization
Replication











Database products
Object-oriented

comparison


Relational

comparison


Document-oriented
NewSQL








 
NewPP limit report
Preprocessor visited node count: 3695/1000000
Preprocessor generated node count: 29232/1500000
Post-expand include size: 39178/2048000 bytes
Template argument size: 17915/2048000 bytes
Highest expansion depth: 21/40
Expensive parser function count: 5/500

 Saved in parser cache with key enwiki:pcache:idhash:212409-0!*!0!!en!4!* and timestamp 20121215104737 
  /bodycontent 
 printfooter 

				Retrieved from "http://en.wikipedia.org/w/index.php?title=Transaction_processing&oldid=523486614"				
 /printfooter 
 catlinks 
Categories: Database management systemsTransaction processingFault-tolerant computer systemsHidden categories: Articles needing additional references from November 2012All articles needing additional referencesArticles to be merged from November 2012All articles to be mergedAll articles with unsourced statementsArticles with unsourced statements from May 2012  /catlinks 

 debughtml 
 /debughtml 

 /bodyContent 

 