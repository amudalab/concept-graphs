
Constraint satisfaction problem
 /firstHeading 
 bodyContent 

 tagline 
From Wikipedia, the free encyclopedia
 /tagline 
 subtitle 

 /subtitle 
 jumpto 

					Jump to:					navigation, 					search

 /jumpto 
 bodycontent 
Constraint satisfaction problems (CSPs) are mathematical problems defined as a set of objects whose state must satisfy a number of constraints or limitations. CSPs represent the entities in a problem as a homogeneous collection of finite constraints over variables, which is solved by constraint satisfaction methods. CSPs are the subject of intense research in both artificial intelligence and operations research, since the regularity in their formulation provides a common basis to analyze and solve problems of many unrelated families. CSPs often exhibit high complexity, requiring a combination of heuristics and combinatorial search methods to be solved in a reasonable time. The boolean satisfiability problem (SAT), the Satisfiability Modulo Theories (SMT) and answer set programming (ASP) can be roughly thought of as certain forms of the constraint satisfaction problem.
Examples of simple problems that can be modeled as a constraint satisfaction problem

Eight queens puzzle
Map coloring problem
Sudoku, Futoshiki, Kakuro (Cross Sums), Numbrix, Hidato and many other logic puzzles

Examples demonstrating the above are often provided with tutorials of ASP, boolean SAT and SMT solvers. In the general case, constraint problems can be much harder, and may not be expressible in some of these simpler systems.
"Real life" examples include planning and resource allocation.





Contents


1 Formal definition
2 Resolution of CSPs
3 Theoretical aspects of CSPs

3.1 Decision problems
3.2 Function problems


4 Variants of CSPs

4.1 Dynamic CSPs
4.2 Flexible CSPs


5 See also
6 References
7 Further reading
8 External links




[edit] Formal definition
Formally, a constraint satisfaction problem is defined as a triple , where  is a set of variables,  is a domain of values, and  is a set of constraints. Every constraint is in turn a pair (usually represented as a matrix), where  is an -tuple of variables and  is an -ary relation on . An evaluation of the variables is a function from the set of variables to the domain of values, . An evaluation  satisfies a constraint  if . A solution is an evaluation that satisfies all constraints.
[edit] Resolution of CSPs
Constraint satisfaction problems on finite domains are typically solved using a form of search. The most used techniques are variants of backtracking, constraint propagation, and local search.
Backtracking is a recursive algorithm. It maintains a partial assignment of the variables. Initially, all variables are unassigned. At each step, a variable is chosen, and all possible values are assigned to it in turn. For each value, the consistency of the partial assignment with the constraints is checked; in case of consistency, a recursive call is performed. When all values have been tried, the algorithm backtracks. In this basic backtracking algorithm, consistency is defined as the satisfaction of all constraints whose variables are all assigned. Several variants of backtracking exists. Backmarking improves the efficiency of checking consistency. Backjumping allows saving part of the search by backtracking "more than one variable" in some cases. Constraint learning infers and saves new constraints that can be later used to avoid part of the search. Look-ahead is also often used in backtracking to attempt to foresee the effects of choosing a variable or a value, thus sometimes determining in advance when a subproblem is satisfiable or unsatisfiable.
Constraint propagation techniques are methods used to modify a constraint satisfaction problem. More precisely, they are methods that enforce a form of local consistency, which are conditions related to the consistency of a group of variables and/or constraints. Constraint propagation has various uses. First, it turns a problem into one that is equivalent but is usually simpler to solve. Second, it may prove satisfiability or unsatisfiability of problems. This is not guaranteed to happen in general; however, it always happens for some forms of constraint propagation and/or for some certain kinds of problems. The most known and used form of local consistency are arc consistency, hyper-arc consistency, and path consistency. The most popular constraint propagation method is the AC-3 algorithm, which enforces arc consistency.
Local search methods are incomplete satisfiability algorithms. They may find a solution of a problem, but they may fail even if the problem is satisfiable. They work by iteratively improving a complete assignment over the variables. At each step, a small number of variables are changed value, with the overall aim of increasing the number of constraints satisfied by this assignment. The min-conflicts algorithm is a local search algorithm specific for CSPs and based in that principle. In practice, local search appears to work well when these changes are also affected by random choices. Integration of search with local search have been developed, leading to hybrid algorithms.
[edit] Theoretical aspects of CSPs
[edit] Decision problems
CSPs are also studied in computational complexity theory and finite model theory. An important question is whether for each set of relations, the set of all CSPs that can be represented using only relations chosen from that set is either in P or NP-complete. If such a dichotomy theorem is true, then CSPs provide one of the largest known subsets of NP which avoids NP-intermediate problems, whose existence was demonstrated by Ladner's theorem under the assumption that P  NP. Schaefer's dichotomy theorem handles the case when all the available relations are boolean operators, that is, for domain size 2. Schaefer's dichotomy theorem was recently generalized to a larger class of relations.[1]
Most classes of CSPs that are known to be tractable are those where the hypergraph of constraints has bounded treewidth (and there are no restrictions on the set of constraint relations), or where the constraints have arbitrary form but there exist essentially non-unary polymorphisms[clarification needed] of the set of constraint relations.
Every CSP can also be considered as a conjunctive query containment problem.[2]
[edit] Function problems
A similar situation exists between the functional classes FP and #P. By a generalization of Ladner's theorem, there are also problems in neither FP nor #P-complete as long as FP  #P. As in the decision case, a problem in the #CSP is defined by a set of relations. Each problem takes as input a Boolean formula as input and the task is to compute the number of satisfying assignments. This can be further generalized by using larger domain sizes and attaching a weight to each satisfying assignment and computing the sum of these weights. It is known that any complex weighted #CSP problem is either in FP or #P-hard.[3]
[edit] Variants of CSPs
The classic model of Constraint Satisfaction Problem defines a model of static, inflexible constraints. This rigid model is a shortcoming that makes it difficult to represent problems easily.[4] Several modifications of the basic CSP definition have been proposed to adapt the model to a wide variety of problems.
[edit] Dynamic CSPs
Dynamic CSPs[5] (DCSPs) are useful when the original formulation of a problem is altered in some way, typically because the set of constraints to consider evolves because of the environment.[6] DCSPs are viewed as a sequence of static CSPs, each one a transformation of the previous one in which variables and constraints can be added (restriction) or removed (relaxation). Information found in the initial formulations of the problem can be used to refine the next ones. The solving method can be classified according to the way in which information is transferred:

Oracles: the solution found to previous CSPs in the sequence are used as heuristics to guide the resolution of the current CSP from scratch.
Local repair: each CSP is calculated starting from the partial solution of the previous one and repairing the inconsistent constraints with local search.
Constraint recording: new constraints are defined in each stage of the search to represent the learning of inconsistent group of decisions. Those constraints are carried over the new CSP problems.

[edit] Flexible CSPs
Classic CSPs treat constraints as hard, meaning that they are imperative (each solution must satisfy all them) and inflexible (in the sense that they must be completely satisfied or else they are completely violated). Flexible CSPs relax those assumptions, partially relaxing the constraints and allowing the solution to not comply with all them. This is similar to preferences in preference-based planning. Some types of flexible CSPs include:

MAX-CSP, where a number of constraints are allowed to be violated, and the quality of a solution is measured by the number of satisfied constraints.
Weighted CSP, a MAX-CSP in which each violation of a constraint is weighted according to a predefined preference. Thus satisfying constraint with more weight is preferred.
Fuzzy CSP model constraints as fuzzy relations in which the satisfaction of a constraint is a continuous function of its variables' values, going from fully satisfied to fully violated.

[edit] See also

Constraint satisfaction
Declarative programming
Constraint programming
Distributed Constraint Satisfaction Problem (DisCSP)
Unique games conjecture

[edit] References

^ Bodirsky, Manuel; Pinsker, Michael (2011). "Schaefer's theorem for graphs". Proceedings of the 43rd annual ACM symposium on Theory of computing - STOC '11. pp.655664. arXiv:1011.2894. Bibcode 2010arXiv1011.2894B. doi:10.1145/1993636.1993724. ISBN978-1-4503-0691-1. edit
^ Kolaitis, Phokion G.; Vardi, Moshe Y. (2000). "Conjunctive-Query Containment and Constraint Satisfaction". Journal of Computer and System Sciences 61 (2): 302332. doi:10.1006/jcss.2000.1713.
^ Cai, Jin-Yi; Chen, Xi (2012). "Complexity of counting CSP with complex weights". Proceedings of the 44th symposium on Theory of Computing - STOC '12. pp.909920. arXiv:1111.2384. doi:10.1145/2213977.2214059. ISBN978-1-4503-1245-5. edit
^ Miguel, Ian (July 2001). Dynamic Flexible Constraint Satisfaction and its Application to AI Planning (Ph.D. thesis). University of Edinburgh School of Informatics. hdl:1842/326; CiteSeerX: 10.1.1.9.6733.edit
^ Dechter, R. and Dechter, A., Belief Maintenance in Dynamic Constraint Networks In Proc. of AAAI-88, 37-42. [1]
^ Solution reuse in dynamic constraint satisfaction problems, Thomas Schiex

[edit] Further reading

Steven Minton, Andy Philips, Mark D. Johnston, Philip Laird (1993). "Minimizing Conflicts: A Heuristic Repair Method for Constraint-Satisfaction and Scheduling Problems" (PDF). Journal of Artificial Intelligence Research 58: 161205. https://eprints.kfupm.edu.sa/50799/1/50799.pdf.

[edit] External links

CSP Tutorial


Tsang, Edward (1993). Foundations of Constraint Satisfaction. Academic Press. http://www.bracil.net/edward/FCS.html. ISBN 0-12-701610-4
Chen, Hubie (December 2009). "A Rendezvous of Logic, Complexity, and Algebra". ACM Computing Surveys (ACM) 42 (1): 132. doi:10.1145/1592451.1592453.
Dechter, Rina (2003). Constraint processing. Morgan Kaufmann. http://www.ics.uci.edu/~dechter/books/index.html. ISBN 1-55860-890-7
Apt, Krzysztof (2003). Principles of constraint programming. Cambridge University Press. ISBN 0-521-82583-0
Lecoutre, Christophe (2009). Constraint Networks: Techniques and Algorithms. ISTE/Wiley. http://www.iste.co.uk/index.php?f=a&ACTION=View&id=250. ISBN 978-1-84821-106-3
Toms Feder, Constraint satisfaction: a personal perspective, manuscript.
Constraints archive
Forced Satisfiable CSP Benchmarks of Model RB
Benchmarks -- XML representation of CSP instances
Dynamic Flexible Constraint Satisfaction and Its Application to AI Planning, Ian Miguel - slides.
Constraint Propagation - Dissertation by Guido Tack giving a good survey of theory and implementation issues

 
NewPP limit report
Preprocessor visited node count: 6408/1000000
Preprocessor generated node count: 27142/1500000
Post-expand include size: 44720/2048000 bytes
Template argument size: 12798/2048000 bytes
Highest expansion depth: 21/40
Expensive parser function count: 4/500

 Saved in parser cache with key enwiki:pcache:idhash:211652-0!0!0!!en!*!* and timestamp 20130102071713 
  /bodycontent 
 printfooter 

				Retrieved from "http://en.wikipedia.org/w/index.php?title=Constraint_satisfaction_problem&oldid=530881107"				
 /printfooter 
 catlinks 
Categories: Constraint programmingHidden categories: Wikipedia articles needing clarification from February 2009  /catlinks 

 debughtml 
 /debughtml 

 /bodyContent 

 