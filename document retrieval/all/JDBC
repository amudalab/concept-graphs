
Java Database Connectivity
 /firstHeading 
 bodyContent 

 tagline 
From Wikipedia, the free encyclopedia
 /tagline 
 subtitle 
(Redirected from JDBC)
 /subtitle 
 jumpto 

					Jump to:					navigation, 					search

 /jumpto 
 bodycontent 

JDBC

Type
Data Access API


Website
Java SE 7


JDBC is a Java-based data access technology (Java Standard Edition platform) from Sun Microsystems. It is an acronym as it is unofficially referred to as Java Database Connectivity, with DB being universally recognized as the abbreviation for database. This technology is an API for the Java programming language that defines how a client may access a database. It provides methods for querying and updating data in a database. JDBC is oriented towards relational databases. A JDBC-to-ODBC bridge enables connections to any ODBC-accessible data source in the JVM host environment.




Contents


1 History and implementation
2 Functionality
3 Examples
4 JDBC drivers

4.1 Types
4.2 Sources


5 References
6 External links




[edit] History and implementation
Sun Microsystems released JDBC as part of JDK 1.1 on February 19, 1997.[1] It has since formed part of the Java Standard Edition.
The JDBC classes are contained in the Java package java.sql and javax.sql.
Starting with version 3.1, JDBC has been developed under the Java Community Process. JSR 54 specifies JDBC 3.0 (included in J2SE 1.4), JSR 114 specifies the JDBC Rowset additions, and JSR 221 is the specification of JDBC 4.0 (included in Java SE 6).[2]
The latest version, JDBC 4.1, is specified by a maintenance release of JSR 221[3] and is included in Java SE 7.[4]
[edit] Functionality
JDBC allows multiple implementations to exist and be used by the same application. The API provides a mechanism for dynamically loading the correct Java packages and registering them with the JDBC Driver Manager. The Driver Manager is used as a connection factory for creating JDBC connections.
JDBC connections support creating and executing statements. These may be update statements such as SQL's CREATE, INSERT, UPDATE and DELETE, or they may be query statements such as SELECT. Additionally, stored procedures may be invoked through a JDBC connection. JDBC represents statements using one of the following classes:

Statement  the statement is sent to the database server each and every time.
PreparedStatement  the statement is cached and then the execution path[clarify] is pre-determined on the database server allowing it to be executed multiple times in an efficient manner.
CallableStatement  used for executing stored procedures on the database.

Update statements such as INSERT, UPDATE and DELETE return an update count that indicates how many rows were affected in the database. These statements do not return any other information.
Query statements return a JDBC row result set. The row result set is used to walk over the result set. Individual columns in a row are retrieved either by name or by column number. There may be any number of rows in the result set. The row result set has metadata that describes the names of the columns and their types.
There is an extension to the basic JDBC API in the javax.sql.
JDBC connections are often managed via a connection pool rather than obtained directly from the driver. Examples of connection pools include BoneCP, C3P0 and DBCP
[edit] Examples
The method Class.forName(String) is used to load the JDBC driver class. The line below causes the JDBC driver from some jdbc vendor to be loaded into the application. (Some JVMs also require the class to be instantiated with .newInstance().)



Class.forName( "com.somejdbcvendor.TheirJdbcDriver" );


In JDBC 4.0, it is no longer necessary to explicitly load JDBC drivers using Class.forName(). See JDBC 4.0 Enhancements in Java SE 6.
When a Driver class is loaded, it creates an instance of itself and registers it with the DriverManager. This can be done by including the needed code in the driver class's static block. E.g., DriverManager.registerDriver(Driver driver)
Now when a connection is needed, one of the DriverManager.getConnection() methods is used to create a JDBC connection.



Connection conn = DriverManager.getConnection(
     "jdbc:somejdbcvendor:other data needed by some jdbc vendor",
     "myLogin",
     "myPassword" );
try {
     /* you use the connection here */
} finally {
    //It's important to close the connection when you are done with it
    try { conn.close(); } catch (Throwable ignore) { /* Propagate the original exception
instead of this one that you may want just logged */ }
}


The URL used is dependent upon the particular JDBC driver. It will always begin with the "jdbc:" protocol, but the rest is up to the particular vendor. Once a connection is established, a statement can be created.



Statement stmt = conn.createStatement();
try {
    stmt.executeUpdate( "INSERT INTO MyTable( name ) VALUES ( 'my name' ) " );
} finally {
    //It's important to close the statement when you are done with it
    try { stmt.close(); } catch (Throwable ignore) { /* Propagate the original exception
instead of this one that you may want just logged */ }
}


Note that Connections, Statements, and ResultSets often tie up operating system resources such as sockets or file descriptors. In the case of Connections to remote database servers, further resources are tied up on the server, e.g., cursors for currently open ResultSets. It is vital to close() any JDBC object as soon as it has played its part; garbage collection should not be relied upon. Forgetting to close() things properly results in spurious errors and misbehaviour. The above try-finally construct is a recommended[by whom?] code pattern to use with JDBC objects.
Data is retrieved from the database using a database query mechanism. The example below shows creating a statement and executing a query.



Statement stmt = conn.createStatement();
try {
    ResultSet rs = stmt.executeQuery( "SELECT * FROM MyTable" );
    try {
        while ( rs.next() ) {
            int numColumns = rs.getMetaData().getColumnCount();
            for ( int i = 1 ; i <= numColumns ; i++ ) {
               // Column numbers start at 1.
               // Also there are many methods on the result set to return
               //  the column as a particular type. Refer to the Sun documentation
               //  for the list of valid conversions.
               System.out.println( "COLUMN " + i + " = " + rs.getObject(i) );
            }
        }
    } finally {
        try { rs.close(); } catch (Throwable ignore) { /* Propagate the original exception
instead of this one that you may want just logged */ }
    }
} finally {
    try { stmt.close(); } catch (Throwable ignore) { /* Propagate the original exception
instead of this one that you may want just logged */ }
}


Typically, however, it would be rare for a seasoned Java programmer to code in such a fashion. The usual practice would be to abstract the database logic into an entirely different class and to pass preprocessed strings (perhaps derived themselves from a further abstracted class) containing SQL statements and the connection to the required methods. Abstracting the data model from the application code makes it more likely that changes to the application and data model can be made independently.
An example of a PreparedStatement query, using conn and class from first example.



PreparedStatement ps =
    conn.prepareStatement( "SELECT i.*, j.* FROM Omega i, Zappa j WHERE i.name = ? AND j.num = ?" );
try {
    // In the SQL statement being prepared, each question mark is a placeholder
    // that must be replaced with a value you provide through a "set" method invocation.
    // The following two method calls replace the two placeholders; the first is
    // replaced by a string value, and the second by an integer value.
    ps.setString(1, "Poor Yorick");
    ps.setInt(2, 8008);
 
    // The ResultSet, rs, conveys the result of executing the SQL statement.
    // Each time you call rs.next(), an internal row pointer, or cursor,
    // is advanced to the next row of the result.  The cursor initially is
    // positioned before the first row.
    ResultSet rs = ps.executeQuery();
    try {
        while ( rs.next() ) {
            int numColumns = rs.getMetaData().getColumnCount();
            for ( int i = 1 ; i <= numColumns ; i++ ) {
                // Column numbers start at 1.
                // Also there are many methods on the result set to return
                // the column as a particular type. Refer to the Sun documentation
                // for the list of valid conversions.
                System.out.println( "COLUMN " + i + " = " + rs.getObject(i) );
            } // for
        } // while
    } finally {
        try { rs.close(); } catch (Throwable ignore) { /* Propagate the original exception
instead of this one that you may want just logged */ }
    }
} finally {
   try { ps.close(); } catch (Throwable ignore) { /* Propagate the original exception
instead of this one that you may want just logged */ }
} // try


If a database operation fails, JDBC raises an SQLException. There is typically very little one can do to recover from such an error, apart from logging it with as much detail as possible. It is recommended that the SQLException be translated into an application domain exception (an unchecked one) that eventually results in a transaction rollback and a notification to the user.
An example of a database transaction:



boolean autoCommitDefault = conn.getAutoCommit();
try {
    conn.setAutoCommit(false);
 
    /* You execute statements against conn here transactionally */
 
    conn.commit();
} catch (Throwable e) {
    try { conn.rollback(); } catch (Throwable ignore) {}
    throw e;
} finally {
    try { conn.setAutoCommit(autoCommitDefault); } catch (Throwable ignore) {}
}


Here are examples of host database types which Java can convert to with a function.

setXXX() Methods

Oracle Datatype
setXXX()


CHAR
setString()


VARCHAR2
setString()


NUMBER
setBigDecimal()


setBoolean()


setByte()


setShort()


setInt()


setLong()


setFloat()


setDouble()


INTEGER
setInt()


FLOAT
setDouble()


CLOB
setClob()


BLOB
setBlob()


RAW
setBytes()


LONGRAW
setBytes()


DATE
setDate()


setTime()


setTimestamp()


For an example of a CallableStatement (to call stored procedures in the database), see the Java SE 7.
[edit] JDBC drivers
Main article: JDBC driver
JDBC drivers are client-side adapters (installed on the client machine, not on the server) that convert requests from Java programs to a protocol that the DBMS can understand.
[edit] Types
There are commercial and free drivers available for most relational database servers. These drivers fall into one of the following types:

Type 1 that calls native code of the locally available ODBC driver.
Type 2 that calls database vendor native library on a client side. This code then talks to database over network.
Type 3, the pure-java driver that talks with the server-side middleware that then talks to database.
Type 4, the pure-java driver that uses database native protocol.

There is also a type called internal JDBC driver, driver embedded with JRE in Java-enabled SQL databases. It's used for Java stored procedures. This does not belong to the above classification, although it would likely be either a type 2 or type 4 driver (depending on whether the database itself is implemented in Java or not). An example of this is the KPRB driver supplied with Oracle RDBMS. "jdbc:default:connection" is a relatively standard way of referring making such a connection (at least Oracle and Apache Derby support it). The distinction here is that the JDBC client is actually running as part of the database being accessed, so access can be made directly rather than through network protocols.
[edit] Sources

SQLSummit.com publishes list of drivers, including JDBC drivers and vendors
Oracle provides a list of some JDBC drivers and vendors
Simba Technologies ships an SDK for building custom JDBC Drivers for any custom/proprietary relational data source
RSSBus Type 4 JDBC Drivers for applications, databases, and web services [1].
DataDirect Technologies provides a comprehensive suite of fast Type 4 JDBC drivers for all major database they advertise as Type 5[5]
IDS Software provides a Type 3 JDBC driver for concurrent access to all major databases. Supported features include resultset caching, SSL encryption, custom data source, dbShield
OpenLink Software ships JDBC Drivers for a variety of databases, including Bridges to other data access mechanisms (e.g., ODBC, JDBC) which can provide more functionality than the targeted mechanism
JDBaccess is a Java persistence library for MySQL and Oracle which defines major database access operations in an easy usable API above JDBC
JNetDirect provides a suite of fully Sun J2EE certified high performance JDBC drivers.
HSQLDB is a RDBMS with a JDBC driver and is available under a BSD license.
SchemaCrawler[6] is an open source API that leverages JDBC, and makes database metadata available as plain old Java objects (POJOs)

[edit] References


^ "SUN SHIPS JDK 1.1 -- JAVABEANS INCLUDED". www.sun.com. Sun Microsystems. 1997-02-19. Archived from the original on 2008-02-10. http://web.archive.org/web/20080210044125/http://www.sun.com/smi/Press/sunflash/1997-02/sunflash.970219.0001.xml. Retrieved 2010-02-15. "February 19, 1997 - The JDK 1.1 [...] is now available [...]. This release of the JDK includes: [...] Robust new features including JDBC[tm] for database connectivity"
^ JDBC API Specification Version: 4.0.
^ JSR-000221 JDBC API Specification 4.1 (Maintenance Release)
^ http://docs.oracle.com/javase/7/docs/technotes/guides/jdbc/jdbc_41.html
^ "New Type 5 JDBC Driver - DataDirect Connect". http://www.datadirect.com/products/features/data-connectivity/type-5-jdbc/index.html.
^ Sualeh Fatehi. "SchemaCrawler". SourceForge. http://schemacrawler.sourceforge.net/.


[edit] External links

Java SE 7 This documentation has examples where the JDBC resources are not closed appropriately (swallowing primary exceptions and being able to cause NullPointerExceptions) and has code prone to SQL injection[citation needed]
java.sql API Javadoc documentation
javax.sql API Javadoc documentation
O/R Broker Scala JDBC framework
SqlTool Open source, command-line, generic JDBC client utility. Works with any JDBC-supporting database.
JDBC URL Strings and related information of All Databases.

 
NewPP limit report
Preprocessor visited node count: 5338/1000000
Preprocessor generated node count: 32568/1500000
Post-expand include size: 24233/2048000 bytes
Template argument size: 10278/2048000 bytes
Highest expansion depth: 21/40
Expensive parser function count: 3/500

 Saved in parser cache with key enwiki:pcache:idhash:26257672-0!*!0!!en!*!* and timestamp 20121217215105 
  /bodycontent 
 printfooter 

				Retrieved from "http://en.wikipedia.org/w/index.php?title=Java_Database_Connectivity&oldid=528537412"				
 /printfooter 
 catlinks 
Categories: Java platformJava specification requestsSQL data accessJava APIsDatabase APIsHidden categories: All pages needing cleanupWikipedia articles needing clarification from September 2012Articles with specifically marked weasel-worded phrases from April 2011All articles with unsourced statementsArticles with unsourced statements from January 2012  /catlinks 

 debughtml 
 /debughtml 

 /bodyContent 

 