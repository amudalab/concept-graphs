hamiltonian cycle::213.996757057
vertex cover::157.996693051
perfect match::147.998399863
perfect matching::143.998463869
hamiltonian path::143.998442534
sub tree::128.998015831
dynamic programming::99.9984852041
lower bound::84.9975464573
np complete::75.9991039235
decision tree::75.998890572
binary tree::75.9987838962
minimum element::69.9992532696
polynomial time algorithm::67.9987838962
exchange trick::66.9992532696
sub trees::66.9992105993
recursive call::65.9991465938
approximate median::61.9993386102
element of rank::61.9992959399
number of comparisons::61.9988692368
approximation algorithm::59.9993599454
independent set::59.9977598088
dependent set::59.9977171385
maximum matching::58.9993172751
optimum solution::56.9993172751
optimal solution::55.9993172751
quick sort::53.9987198908
search space::49.9992532696
merge sort::49.9988265665
augmenting path::48.9989545775
efficient algorithm::47.9989759126
common subsequence::45.9995092915
set sum::42.9993599454
startup cost::41.9995519618
subset sum::41.9993812805
track search::41.999167929
cost function::40.9991465938
first day::39.9995306266
recursive calls::39.9995306266
backtrack search::38.9992319345
exact cover::38.999167929
interval that ends::37.9995946321
ends first::37.9995946321
find the median::37.9994879563
input instance::37.9988479017
cover of size::36.9992105993
optimal cluster::35.9996159672
middle element::35.9996159672
approximation algorithms::35.9996159672
spanning tree::35.9995946321
tree model::34.9995732969
branch and bound::34.9992532696
decision tree model::33.9995946321
optimal algorithm::31.9996586375
matching of size::31.9996586375
divide and conquer::31.9989119071
objective function::30.9993812805
epsilon prime::29.9996799727
exact median::29.9996799727
optimal schedule::29.9995519618
log base::29.9993172751
number of leaves::29.9990825884
set cover::28.9996799727
end point::28.9993386102
approximation ratio::27.9997013078
connected region::27.9997013078
complete problem::27.9996586375
entire array::27.9996373024
hand side::27.9994666212
find the minimum::27.999445286
first object::27.9994026157
sorted order::27.9993812805
sub routine::27.9993386102
recursive procedure::26.9996799727
comparison based::26.9995092915
code word::25.999722643
holding cost::25.999722643
algorithm for problem::25.999722643
cost tree::25.999722643
minimum spanning::25.9997013078
remove this edge::25.9997013078
minimum spanning tree::25.9997013078
longest path::25.9996799727
set of intervals::25.9996799727
start comparing::25.9995092915
real computer::25.999445286
matching of maximum::24.999722643
average case::24.999445286
set of size::24.999445286
sorting algorithm::24.9992959399
element distinctness::23.9997439782
line number::23.9997439782
pseudo polynomial::23.9997439782
find the maximum::23.9997013078
first part::23.9996586375
move the pattern::23.9996586375
input size::23.9995519618
hamiltonian circuit::23.9995092915
worst case::23.9990825884
array element::22.9996799727
greedy algorithm::22.9995946321
lower bounds::22.9994026157
shift the pattern::22.9992746048
maximum size::22.9992532696
pre code::21.9997653133
prefix pre code::21.9997653133
first interval::21.9997653133
left sub tree::21.9997653133
prefix pre::21.9997653133
ready vertices::21.9997653133
equal to null::21.9997653133
left sub::21.9997653133
find an element::21.9997653133
array of size::21.9997439782
complete problems::21.999722643
recursive algorithm::21.9996799727
brute force::21.9995946321
clique of size::21.9995306266
greedy algorithms::20.9996586375
real computers::20.9995519618
prefix free code::19.9997866485
optimal tour::19.9997866485
sub space::19.9997866485
free code::19.9997866485
approximation factor::19.9997866485
finishing times::19.9997866485
longest common::19.9997866485
max min::19.9997653133
real life::19.9997439782
brute force algorithm::19.9997013078
force algorithm::19.9997013078
first index::19.9996799727
class theta::19.9996799727
free vertex::19.9995946321
input instances::19.9995732969
positive integer::19.9995306266
two sub trees::18.9997653133
original graph::18.9997013078
evaluates to true::18.9995946321
first step::18.999445286
first thing::18.9992959399
analysis of algorithms::18.998890572
np complete problems::17.9998506539
common subsequences::17.9998079836
optimum tree::17.9998079836
residual instance::17.9998079836
right sub tree::17.9998079836
binary string::17.9998079836
right sub::17.9997866485
table entries::17.9997866485
dimensional space::17.9997866485
flow chart::17.9996159672
upper bound::17.9995732969
first element::17.9995519618
number of vertices::17.9995306266
cover problem::16.9998079836
programming idea::16.9997866485
sub collection::16.9997013078
closest pair::16.9996373024
benefit function::16.9996373024
decision problem::16.9995306266
algorithm design::16.9995306266
turns out::16.9994879563
total number::16.9992319345
connected component::15.9998293188
pre codes::15.9998293188
starting times::15.9998293188
prefix pre codes::15.9998293188
cost schedule::15.9998293188
optimal tree::15.9998293188
design principle::15.9998293188
dynamic programming idea::15.9998079836
fill this entry::15.9997866485
find the size::15.9997653133
search tree::15.9997439782
smallest element::15.9997439782
compare these two::15.9997439782
straight line::15.9997013078
right hand::15.9996799727
compare two elements::15.9996799727
right hand side::15.9996799727
number of ele::15.9996373024
dimensional array::15.9996159672
ram model::15.9995092915
design and analysis::15.9990185829
decision trees::14.9997866485
end points::14.9997653133
decision version::14.9996799727
boolean formula::14.9996799727
number of elements::14.9996586375
longest prefix::14.9995946321
increasing order::14.9995732969
computer science::14.9991252587
polynomial time algorithms::13.9998506539
find the approximate::13.9998506539
farthest point::13.9998506539
capacity needed::13.9998506539
proof of correctness::13.9998506539
set cover problem::13.9998506539
unit cube::13.9998506539
lambda times::13.9998506539
longest common subsequence::13.9998506539
sub range::13.9998506539
arrays of size::13.9998293188
table entry::13.9998293188
equal size::13.9998079836
sorted array::13.9997866485
order n log::13.9997439782
order n square::13.999722643
square left::13.9997013078
mathematical model::13.9997013078
factorial leaves::13.9997013078
design technique::13.9996799727
depth first::13.9996799727
terms out::12.9998506539
overlapping interval::12.9998293188
convince the verifier::12.999722643
small square::12.999722643
hardest problems::12.999722643
vertex degree::12.999722643
minimum distance::12.9997013078
generic step::12.9996799727
maximum number::12.9995732969
knapsack problem::12.9995092915
metric tsp::11.9998719891
number of parts::11.9998719891
return null::11.9998719891
spans all vertices::11.9998719891
ending times::11.9998719891
2nd part::11.9998719891
approximation scheme::11.9998719891
line segment::11.9998719891
common sequence::11.9998719891
algorithm for perfect::11.9998719891
times epsilon::11.9998719891
problem instance::11.9998506539
leaf node::11.9998506539
smaller input::11.9998506539
print out::11.9998506539
matrix multiplication::11.9998293188
insertion sort::11.9998293188
piece by piece::11.9998293188
pick an interval::11.9998293188
decreasing order::11.9998293188
constant multiplier::11.9998079836
programming algorithm::11.9998079836
text pointer::11.9998079836
design an algorithm::11.9998079836
number of intervals::11.9998079836
dynamic programming algorithm::11.9998079836
first comparison::11.9997866485
left hand side::11.9997866485
belongs to theta::11.9997866485
left hand::11.9997653133
based sorting algorithm::11.9997653133
problem lower bound::11.9997653133
comparison based sorting::11.9997653133
prover give::11.9997653133
make a decision::11.9997439782
number of squares::11.9997439782
first slot::11.9997439782
satisfying assignment::11.9997439782
size n minus::11.999722643
data structures::11.999722643
set of points::11.9996799727
data structure::11.9996586375
sorting algorithms::11.9995519618
science engineering::11.9993172751
computer science engineering::11.9993172751
bombay lecture::11.9992532696
algorithms prof::11.9992532696
left to right::10.9998719891
overlapping intervals::10.9998506539
minimum cost::10.9998506539
prime minus::10.9998293188
design algorithms::10.9997866485
subset of size::10.9997866485
evaluate the cost::10.9997866485
design algorithm::10.9997653133
instruction set::10.9997653133
main claim::10.9997653133
symmetric difference::10.9997653133
algorithm work::10.999722643
point out::10.9997013078
vishwanathan department::10.9996799727
sunder vishwanathan department::10.9996799727
algorithms prof sunder::10.9996159672
prof sunder::10.9996159672
vertex set::10.9995092915
engineering indian institute::10.9993812805
institute of technology::10.9993599454
science engineering indian::10.9993599454
indian institute::10.9993386102
engineering indian::10.9992959399
department of computer::10.9992959399
find element::9.99989332423
optimal solutions::9.99989332423
find the exact::9.99989332423
bag is full::9.99989332423
inventory cost::9.99989332423
cube upon epsilon::9.99989332423
divide the array::9.99989332423
temporary variable::9.99989332423
profit by size::9.99989332423
resultant graph::9.99989332423
residual problem::9.99989332423
line joining::9.99989332423
first n minus::9.99989332423
algorithms for np::9.99989332423
remove any edge::9.99989332423
connected components::9.99989332423
profit and size::9.99989332423
number of rows::9.99989332423
vertex connected::9.99989332423
scan the array::9.99989332423
middle elements::9.99989332423
vertex appears::9.99989332423
times delta::9.99989332423
finding the exact::9.99989332423
algorithm pick::9.99989332423
capacity knapsack::9.99989332423
triangle inequality::9.99989332423
space s sub::9.99989332423
longest element::9.99989332423
larger elements::9.99987198908
number of objects::9.99987198908
machine status::9.99987198908
number of entries::9.99985065392
solve the problem::9.99985065392
crucial question::9.99985065392
algorithm to find::9.99985065392
outgoing edge::9.99982931877
previous case::9.99982931877
crucial thing::9.99982931877
match this portion::9.99980798361
algorithm for sat::9.99978664846
pick a sub::9.99978664846
augmenting paths::9.99978664846
comparison tree::9.99978664846
number of multiplications::9.99978664846
largest clique::9.99978664846
depth first search::9.99976531331
number of multiplication::9.99976531331
proper prefix::9.99974397815
general problem::9.99970130784
tree of height::9.99970130784
constant times::9.99970130784
first search::9.99963730238
smallest degree::8.99989332423
algorithm for finding::8.99989332423
smallest overlap::8.99989332423
labeled i colon::8.99987198908
pick a set::8.99985065392
array elements::8.99985065392
pick a vertex::8.99985065392
inductive hypothesis::8.99980798361
constructed object::8.99980798361
combinatorial optimization::8.99980798361
forward direction::8.99980798361
successful comparison::8.99980798361
set of edges::8.99978664846
bipartite graph::8.99978664846
two dimensional array::8.99976531331
base case::8.99976531331
algorithm design technique::8.99976531331
optimization problem::8.99976531331
ranade department::8.99965863754
abhiram ranade department::8.99965863754
abhiram ranade::8.99963730238
algorithms prof abhiram::8.99963730238
prof abhiram::8.99963730238
prof abhiram ranade::8.99963730238
edge set::8.99963730238
number of times::8.99957329692
number of sets::7.99991465938
smaller array::7.99991465938
frequencies of elements::7.99991465938
clustering radius::7.99991465938
rho sub::7.99991465938
intervals that overlap::7.99991465938
straight line path::7.99991465938
construct a tour::7.99991465938
real life problem::7.99991465938
cluster centers::7.99991465938
connected regions::7.99991465938
minus epsilon::7.99991465938
optimal set::7.99991465938
minus lambda::7.99991465938
line path::7.99991465938
choose delta::7.99991465938
design principles::7.99991465938
exponential time algorithm::7.99991465938
call mcm::7.99991465938
entries to fill::7.99991465938
left half::7.99991465938
fractional knapsack::7.99991465938
opt times::7.99991465938
larger input::7.99991465938
pattern occurs::7.99991465938
return the longer::7.99991465938
log n elements::7.99991465938
profit increase::7.99991465938
2nd problem::7.99991465938
non recursive::7.99991465938
power minus::7.99991465938
feasible solution::7.99991465938
brute force algorithms::7.99991465938
frequency times::7.99991465938
element by element::7.99991465938
original space::7.99991465938
knapsack capacity::7.99991465938
distinct permutation::7.99991465938
store the result::7.99991465938
current minimum::7.99991465938
portion is sorted::7.99991465938
smaller inputs::7.99991465938
delta times::7.99991465938
algorithm outputs::7.99991465938
first lower::7.99991465938
merge step::7.99991465938
center problem::7.99991465938
optimal sub::7.99991465938
life problem::7.99991465938
subset sum problem::7.99991465938
computing the product::7.99991465938
remove the intervals::7.99991465938
clustering algorithm::7.99991465938
euclidean distance::7.99991465938
sum problem::7.99991465938
radius produced::7.99991465938
amount of item::7.99991465938
maximum and minimum::7.99991465938
lightest knapsack::7.99991465938
first lower bound::7.99991465938
force algorithms::7.99991465938
minus size::7.99991465938
sub i minus::7.99991465938
connected means::7.99991465938
minimum number::7.99989332423
algorithm output::7.99989332423
finding the median::7.99989332423
pick a pivot::7.99989332423
smaller element::7.99989332423
point set::7.99989332423
run in polynomial::7.99989332423
largest prefix::7.99989332423
last element::7.99989332423
last step::7.99989332423
key idea::7.99989332423
element is compared::7.99989332423
sub arrays::7.99989332423
relational operator::7.99989332423
sub array::7.99987198908
split the array::7.99987198908
first idea::7.99987198908
pick an element::7.99987198908
two sorted arrays::7.99987198908
crucial step::7.99987198908
put the solution::7.99987198908
first coordinate::7.99985065392
tree algorithm::7.99985065392
set of maximum::7.99985065392
decision tree algorithm::7.99985065392
formula evaluates::7.99985065392
smaller size::7.99985065392
sorted arrays::7.99985065392
number of columns::7.99985065392
number of bits::7.99985065392
based sorting algorithms::7.99985065392
smallest number::7.99985065392
special case::7.99985065392
left and right::7.99985065392
element is compare::7.99985065392
problem of size::7.99982931877
partially constructed object::7.99982931877
outer loop::7.99982931877
number of iterations::7.99982931877
free vertices::7.99982931877
equal parts::7.99982931877
design techniques::7.99982931877
case complexity::7.99982931877
total weight::7.99982931877
shortest path::7.99980798361
simple algorithm::7.99980798361
pick a subset::7.99980798361
divide step::7.99980798361
maximum value::7.99980798361
main idea::7.99978664846
turn out::7.99978664846
number of edges::7.99978664846
first claim::7.99976531331
sub problem::7.99974397815
search problem::7.999722643
fast algorithm::7.999722643
basic idea::7.99961596723
matching in fact::6.99991465938
belongs to omega::6.99991465938
smaller values::6.99991465938
greedy approach::6.99991465938
based algorithms::6.99991465938
pointer moves::6.99991465938
comparison based algorithms::6.99991465938
binary trees::6.99989332423
graph g prime::6.99989332423
smaller value::6.99989332423
function belongs::6.99989332423
based algorithm::6.99989332423
important idea::6.99989332423
outgoing edges::6.99987198908
first check::6.99987198908
algorithm for clique::6.99985065392
algorithm analysis::6.99985065392
first queen::6.99985065392
vertex degrees::6.99985065392
pair of points::6.99985065392
inductive step::6.99985065392
set of object::6.99985065392
multi set::6.99985065392
formula is satisfiable::6.99985065392
directed graph::6.99982931877
form a hamiltonian::6.99982931877
first character::6.99980798361
non trivial::6.99980798361
random access machine::6.99978664846
algorithm works::6.99978664846
access machine::6.99978664846
random access::6.99978664846
pattern shift::6.99978664846
set of vertices::6.99976531331
solve this problem::6.999722643
important point::6.999722643
problem size::6.99970130784
first graph::5.99993599454
lower bound decreases::5.99993599454
partition the array::5.99993599454
science & engineering::5.99993599454
sort each piece::5.99993599454
convex region::5.99993599454
fixed value::5.99993599454
lightest solution::5.99993599454
length n minus::5.99993599454
times the radius::5.99993599454
out this exchange::5.99993599454
pick the middle::5.99993599454
half n minus::5.99993599454
obvious strategies::5.99993599454
number of machines::5.99993599454
include item::5.99993599454
notion of efficiency::5.99993599454
sequence of characters::5.99993599454
find the element::5.99993599454
place holders::5.99993599454
direct edge::5.99993599454
extending solution::5.99993599454
mismatch occur::5.99993599454
two three lectures::5.99993599454
construct prefix::5.99993599454
bigger than cost::5.99993599454
non recursive procedure::5.99993599454
pick a point::5.99993599454
choose this edge::5.99993599454
studied earlier::5.99993599454
kind of question::5.99993599454
finding duplicates::5.99993599454
shaped region::5.99993599454
metric clustering::5.99993599454
first schedule::5.99993599454
straight distance::5.99993599454
define a table::5.99993599454
remove this vertex::5.99993599454
rows and columns::5.99993599454
put these things::5.99993599454
opts schedule::5.99993599454
optimal radius::5.99993599454
size of maximum::5.99993599454
portion consists::5.99993599454
sub claim::5.99993599454
search s sub::5.99993599454
closest center::5.99993599454
coordinates are distinct::5.99993599454
minus one comparison::5.99993599454
implementation of quick::5.99993599454
number of lines::5.99993599454
strategy works::5.99993599454
null sequence::5.99993599454
add item::5.99993599454
median falls::5.99993599454
non-overlapping intervals::5.99993599454
path from root::5.99993599454
minus cardinality::5.99993599454
cycle which spans::5.99993599454
procedure for searching::5.99993599454
optimum solutions::5.99993599454
left is smaller::5.99993599454
non increasing::5.99993599454
basically the algorithm::5.99993599454
algebraic geometry::5.99993599454
opt elements::5.99993599454
supposed to produce::5.99993599454
choose delta equal::5.99993599454
exchange item::5.99993599454
routine library::5.99993599454
add an interval::5.99993599454
programming require::5.99993599454
times epsilon prime::5.99993599454
entire graph::5.99993599454
factorial different answers::5.99993599454
fill procedure::5.99993599454
interval overlaps::5.99993599454
chain multiplication::5.99993599454
pay a startup::5.99993599454
output the minimum::5.99993599454
sort the array::5.99993599454
algorithm is optimum::5.99993599454
find p vertices::5.99993599454
make a comparison::5.99993599454
prime is greater::5.99993599454
3rd part::5.99993599454
sorting lower bound::5.99993599454
median in linear::5.99993599454
text pointer moves::5.99993599454
fill entries::5.99993599454
first letter::5.99993599454
order of ending::5.99993599454
weights and values::5.99993599454
concept of reduction::5.99993599454
groups of size::5.99993599454
values of input::5.99993599454
bound decreases::5.99993599454
number of initial::5.99993599454
algebraic expression::5.99993599454
instances visiting::5.99993599454
intermediate objective::5.99993599454
scale down values::5.99993599454
algebraic decision tree::5.99993599454
put the smaller::5.99993599454
call fill::5.99993599454
two dimensional space::5.99993599454
proof by induction::5.99993599454
numbers are represented::5.99993599454
algebraic decision::5.99993599454
sub routine library::5.99993599454
element was compared::5.99993599454
give raise::5.99993599454
return this expression::5.99993599454
instance space::5.99993599454
epsilon by epsilon::5.99993599454
smaller arrays::5.99993599454
make n minus::5.99993599454
last index::5.99993599454
centers selected::5.99993599454
two approximation algorithm::5.99993599454
initial intervals::5.99993599454
single question::5.99993599454
construct prefix pre::5.99993599454
fractional knapsack problem::5.99993599454
schedule at step::5.99993599454
dynamic programming require::5.99993599454
doing things::5.99993599454
edge back::5.99993599454
algorithm terminates::5.99993599454
first solution::5.99993599454
first appearance::5.99993599454
equal to opt::5.99993599454
times opt::5.99993599454
low precision::5.99993599454
kth part::5.99993599454
precedence constraint::5.99993599454
remaining days::5.99993599454
optimal sub tree::5.99993599454
prove the lower::5.99993599454
minus lambda times::5.99993599454
equal to ending::5.99993599454
put this edge::5.99993599454
decreasing profit::5.99993599454
moves forward::5.99991465938
ordering the input::5.99991465938
text moves::5.99991465938
previous lecture::5.99991465938
find the first::5.99991465938
equal to summation::5.99991465938
smaller elements::5.99991465938
linear programming::5.99991465938
algorithm picked::5.99991465938
procedure for filling::5.99991465938
natural question::5.99991465938
last job::5.99991465938
algorithm produced::5.99991465938
executed n times::5.99991465938
represented in binary::5.99991465938
recursive step::5.99991465938
important observation::5.99991465938
program tree::5.99991465938
relational operators::5.99991465938
pattern shifted::5.99991465938
prove this claim::5.99991465938
two recursive calls::5.99991465938
main ideas::5.99991465938
lecture on design::5.99989332423
root node::5.99989332423
recursively sort::5.99989332423
good idea::5.99989332423
first process::5.99989332423
first group::5.99989332423
equal to sum::5.99989332423
class notation::5.99989332423
discrete structure::5.99989332423
knapsack of capacity::5.99989332423
algorithm run::5.99989332423
first iteration::5.99989332423
input consists::5.99989332423
remaining object::5.99989332423
out the first::5.99989332423
remove the first::5.99989332423
write this term::5.99989332423
constant multipliers::5.99989332423
final graph::5.99987198908
basic instruction::5.99987198908
valid input::5.99987198908
greedy strategies::5.99987198908
construct a polynomial::5.99987198908
times n cube::5.99987198908
big square::5.99987198908
points sorted::5.99987198908
algorithm to solve::5.99987198908
algorithm for vertex::5.99987198908
give the verifier::5.99987198908
gcd problem::5.99987198908
first sort::5.99987198908
apply the inductive::5.99987198908
yellow edge::5.99987198908
dimensional arrays::5.99987198908
queens problem::5.99987198908
last day::5.99987198908
path length::5.99987198908
sub set::5.99987198908
greedy strategy::5.99987198908
prover sends::5.99987198908
right order::5.99987198908
greedy idea::5.99987198908
compute the distance::5.99987198908
smaller squares::5.99987198908
breadth first search::5.99987198908
combinatorial search::5.99987198908
input order::5.99987198908
ram algorithm::5.99987198908
average case complexity::5.99987198908
bit numbers::5.99985065392
entire tree::5.99985065392
evaluates to false::5.99985065392
entire region::5.99985065392
binary search::5.99985065392
input consist::5.99985065392
put order::5.99985065392
total size::5.99982931877
last lecture::5.99982931877
recursion tree::5.99982931877
set of input::5.99982931877
starting point::5.99982931877
first problem::5.99982931877
straight forward::5.99980798361
true or false::5.99980798361
make sense::5.99978664846
final answer::5.99978664846
topic for today::5.99978664846
large number::5.99970130784
object function::4.99993599454
equal to cost::4.99993599454
first show::4.99993599454
output a matching::4.99993599454
solution improve::4.99993599454
dynamic programming ideas::4.99993599454
optimum output::4.99993599454
pair wise::4.99993599454
vertex of smallest::4.99993599454
first issue::4.99993599454
programming ideas::4.99993599454
showed that clique::4.99993599454
path of length::4.99993599454
proved this claim::4.99993599454
set of instances::4.99993599454
allowed to pick::4.99993599454
entire sub::4.99993599454
omega notation::4.99993599454
intervals overlap::4.99993599454
path starts::4.99993599454
key value::4.99991465938
inputs of size::4.99991465938
cover elements::4.99991465938
describe algorithms::4.99991465938
first algorithm::4.99991465938
greedy technique::4.99991465938
extra elements::4.99991465938
sequence of numbers::4.99991465938
concluding remark::4.99991465938
simple problem::4.99991465938
search problems::4.99991465938
good shape::4.99991465938
set sub::4.99991465938
search procedure::4.99991465938
extra element::4.99989332423
algorithm takes::4.99989332423
optimization problems::4.99989332423
class of functions::4.99989332423
maximum vertex::4.99989332423
directed path::4.99989332423
main memory::4.99989332423
candidate object::4.99989332423
number of mismatches::4.99989332423
problem lower bounds::4.99989332423
cost functions::4.99989332423
school level::4.99989332423
instances which begin::4.99989332423
entire table::4.99989332423
comparison based ram::4.99989332423
successful comparisons::4.99989332423
tree height::4.99989332423
pick a splitter::4.99989332423
global variable::4.99989332423
total work::4.99989332423
heap sort::4.99989332423
pick elements::4.99989332423
travelling sales::4.99989332423
design & analysis::4.99989332423
horizontal edge::4.99989332423
clause evaluates::4.99989332423
greatest common divisor::4.99989332423
greatest common::4.99989332423
maximum vertex degree::4.99989332423
find the closest::4.99989332423
greater than delta::4.99989332423
bigger matching::4.99989332423
combinatorial optimization problem::4.99989332423
non negative::4.99989332423
algorithm for independent::4.99989332423
constructed objects::4.99989332423
distance delta::4.99989332423
partially constructed objects::4.99989332423
average case analysis::4.99989332423
formula in cnf::4.99989332423
complete object::4.99989332423
equals n mod::4.99989332423
common divisor::4.99989332423
vertex has degree::4.99989332423
notion of size::4.99989332423
based ram::4.99989332423
case analysis::4.99987198908
algorithm design techniques::4.99987198908
tsp problem::4.99985065392
largest value::4.99985065392
pattern matching::4.99985065392
algorithms our topic::4.99985065392
total value::4.99985065392
search version::4.99985065392
fairly simple::4.99985065392
first term::4.99985065392
constant factor::4.99985065392
number of subsets::4.99982931877
entire thing::4.99980798361
number of sub::4.99980798361
recursive solution::3.99993599454
mentioned earlier::3.99993599454
key insight::3.99993599454
matrix product::3.99993599454
class omega::3.99993599454
start filling::3.99993599454
subset sub::3.99993599454
total length::3.99993599454
finding the minimum::3.99993599454
takes order::3.99993599454
element is distinct::3.99993599454
design a algorithm::3.99993599454
store value::3.99993599454
find a minimum::3.99993599454
times max::3.99993599454
sort of push::3.99993599454
single element::3.99993599454
quick sort work::3.99993599454
sort work::3.99993599454
matching algorithm::3.99993599454
right part::3.99993599454
pointer remain::3.99993599454
two equal halves::3.99993599454
compare the first::3.99993599454
found the minimum::3.99993599454
original claim::3.99993599454
interval of smallest::3.99993599454
times the number::3.99993599454
initialized to null::3.99993599454
set of jobs::3.99993599454
bound the number::3.99993599454
set of inputs::3.99993599454
number of tree::3.99993599454
array size::3.99993599454
set of elements::3.99993599454
theta notation::3.99993599454
two sub problems::3.99993599454
pick the set::3.99993599454
algorithm construct::3.99993599454
first job::3.99993599454
graph in front::3.99993599454
number of keys::3.99993599454
assume for simplicity::3.99993599454
write this algorithm::3.99993599454
sorted sequence::3.99993599454
edge labels::3.99993599454
exist a path::3.99993599454
numbers are distinct::3.99993599454
left branch::3.99993599454
good news::3.99993599454
algorithm is clear::3.99993599454
make comparisons::3.99993599454
first processor::3.99993599454
text pointer remain::3.99993599454
half the size::3.99993599454
right answer::3.99993599454
comparisons you make::3.99993599454
bit more complicated::3.99993599454
verifier takes::3.99993599454
small values::3.99993599454
algorithm call::3.99993599454
pick the minimum::3.99993599454
separate program::3.99993599454
design this algorithm::3.99993599454
takes n log::3.99993599454
solve a problem::3.99993599454
smaller part::3.99993599454
number of connected::3.99993599454
single entry::3.99993599454
input for subset::3.99993599454
prime is equal::3.99993599454
algorithm produces::3.99993599454
ways of doing::3.99993599454
recurrence relation::3.99993599454
algorithm runs::3.99993599454
prover and verifier::3.99993599454
flow charts::3.99991465938
initial thing::3.99991465938
small piece::3.99991465938
matching earlier::3.99991465938
empty set::3.99991465938
vertical line::3.99991465938
real number::3.99991465938
increasing y coordinates::3.99991465938
combinatorial explosion::3.99991465938
salesman problem::3.99991465938
number of steps::3.99991465938
square is covered::3.99991465938
algorithm for exact::3.99991465938
verifier check::3.99991465938
pick up object::3.99991465938
made a decision::3.99991465938
elements are distinct::3.99991465938
analysis strategy::3.99991465938
tree sorting algorithm::3.99991465938
delta square::3.99991465938
algorithm that works::3.99991465938
level language::3.99991465938
basic instruction set::3.99991465938
times constant::3.99991465938
half minus::3.99991465938
set to true::3.99991465938
comparing two elements::3.99991465938
sort of check::3.99991465938
bottom to top::3.99991465938
equal halves::3.99991465938
prover can give::3.99991465938
solve the general::3.99991465938
pick interval::3.99991465938
key comparisons::3.99991465938
selected objects::3.99991465938
nth day::3.99991465938
circle of radius::3.99991465938
class n cube::3.99991465938
tile the entire::3.99991465938
discrete structures::3.99991465938
small value::3.99991465938
bigger square::3.99991465938
previous algorithm::3.99991465938
out its neighbor::3.99991465938
sub sets::3.99991465938
trivial bound::3.99991465938
decision tree sorting::3.99991465938
induction to work::3.99991465938
first domino::3.99991465938
optimum independent::3.99991465938
hit a leaf::3.99991465938
compute the minimum::3.99991465938
splitter is equal::3.99991465938
search and optimization::3.99991465938
shell sort::3.99991465938
tree sorting::3.99991465938
discuss algorithms::3.99991465938
intelligent compiler::3.99991465938
algorithm fails::3.99991465938
exact analysis::3.99991465938
quick overview::3.99991465938
paths and cycles::3.99991465938
removed edge::3.99991465938
smaller sub problems::3.99991465938
boyer moore::3.99991465938
thing runs::3.99991465938
corner square::3.99991465938
number of successful::3.99991465938
element occurs::3.99991465938
slightly more complicated::3.99991465938
auxiliary graph::3.99991465938
minute ago::3.99991465938
green edges::3.99991465938
high level language::3.99991465938
object has value::3.99991465938
square multiplications::3.99991465938
optimum independent set::3.99991465938
compare every element::3.99991465938
easier to prove::3.99991465938
merge two sorted::3.99991465938
recurse step::3.99991465938
common factors::3.99991465938
smaller cost::3.99991465938
two dimensional arrays::3.99991465938
kho kho::3.99991465938
first occurrence::3.99991465938
big sort::3.99991465938
cycle problem::3.99989332423
single step::3.99989332423
square times::3.99989332423
out the number::3.99989332423
simple graph::3.99989332423
high level::3.99989332423
smaller sub::3.99989332423
straight line distance::3.99989332423
worse case::3.99989332423
important step::3.99989332423
first argument::3.99989332423
hamiltonian cycle problem::3.99989332423
first statement::3.99989332423
limited resource::3.99989332423
distinct elements::3.99989332423
times n square::3.99989332423
start by defining::3.99989332423
solving the problem::3.99989332423
kinds of problems::3.99989332423
smaller sub problem::3.99989332423
comparisons made::3.99989332423
point onwards::3.99989332423
greater than equal::3.99989332423
interesting thing::3.99989332423
input graph::3.99989332423
line distance::3.99989332423
tree sort::3.99989332423
increase the size::3.99987198908
fairly straight forward::3.99987198908
instance of size::3.99987198908
important question::3.99987198908
loss of generality::3.99987198908
edges incident::3.99987198908
find the largest::3.99987198908
designing algorithms::3.99987198908
scheduling problem::3.99987198908
instances of size::3.99985065392
fast algorithms::3.99985065392
first place::3.99985065392
entire procedure::3.99985065392
original problem::3.99985065392
loss of general::3.99985065392
thing to notice::3.99982931877
problem of finding::3.99982931877
sub problems::3.99982931877
first case::3.99982931877
square root::3.99982931877
total path::2.99993599454
bar is true::2.99993599454
calculate r equals::2.99993599454
describe an algorithm::2.99993599454
empty template::2.99993599454
functional form::2.99993599454
negative function::2.99993599454
real computation::2.99993599454
small list::2.99993599454
computer model::2.99993599454
early checks::2.99993599454
size is small::2.99993599454
proved in fact::2.99993599454
ram sorting algorithm::2.99993599454
object weights::2.99993599454
writing style::2.99993599454
fairly natural::2.99993599454
single execution::2.99993599454
first lecture::2.99993599454
bound condition::2.99993599454
cycle the verifier::2.99993599454
algorithmic actions::2.99993599454
partially built::2.99993599454
fix the size::2.99993599454
large part::2.99993599454
negative number::2.99993599454
takes b steps::2.99993599454
sales person::2.99993599454
total path length::2.99993599454
maximum degree::2.99993599454
function found::2.99993599454
pointers and arrays::2.99993599454
cover input::2.99993599454
pick intervals::2.99993599454
factorial times::2.99993599454
set of objects::2.99993599454
algorithm analysis framework::2.99993599454
edge is covered::2.99993599454
directed backwards::2.99993599454
combinatorial optimization problems::2.99993599454
higher level::2.99993599454
basically the idea::2.99993599454
based ram algorithm::2.99993599454
middle part::2.99993599454
prove a lower::2.99993599454
first decision point::2.99993599454
algorithm that solves::2.99993599454
conquer approach::2.99993599454
extending the solution::2.99993599454
input for exact::2.99993599454
ways of placing::2.99993599454
sorting permutation::2.99993599454
conjunctive normal::2.99993599454
ram sorting::2.99993599454
pick a leaf::2.99993599454
solve the search::2.99993599454
set n equal::2.99993599454
boolean variable::2.99993599454
prove properties::2.99993599454
cache memory::2.99993599454
empty tour::2.99993599454
sort the points::2.99993599454
problem arises::2.99993599454
largest problem::2.99993599454
current object::2.99993599454
maximum benefit::2.99993599454
radio stations::2.99993599454
literal pair::2.99993599454
out its neighbors::2.99993599454
red matching::2.99993599454
statement is true::2.99993599454
asymptotic notation::2.99993599454
pick a maximum::2.99993599454
match i shift::2.99993599454
verifier checks::2.99993599454
matter what algorithm::2.99993599454
tells the verifier::2.99993599454
belonging to theta::2.99993599454
sort of thing::2.99993599454
algorithm proceeds::2.99993599454
local improvement::2.99993599454
control flow::2.99993599454
body takes::2.99993599454
exit condition::2.99993599454
move forward::2.99993599454
fully constructed::2.99993599454
theorem in hand::2.99993599454
candidate points::2.99993599454
finding the shortest::2.99993599454
radius delta::2.99993599454
check the constraints::2.99993599454
choose the minimum::2.99993599454
edges form::2.99993599454
comparisons performed::2.99993599454
points are sorted::2.99993599454
finish the proof::2.99993599454
subsets per vertex::2.99993599454
remaining objects::2.99993599454
sort of find::2.99993599454
adding edges::2.99993599454
candidate objects::2.99993599454
first decision::2.99993599454
improve the solution::2.99993599454
solve sat::2.99993599454
edge length::2.99993599454
solving this problem::2.99993599454
value is contained::2.99993599454
decision point::2.99993599454
shifted the pattern::2.99993599454
non bipartite::2.99993599454
satisfy the constraints::2.99993599454
normal form::2.99993599454
increase the number::2.99993599454
bounds for sorting::2.99993599454
execute n times::2.99993599454
blue edge::2.99993599454
form a clique::2.99993599454
simple variables::2.99993599454
number times::2.99993599454
pick subsets::2.99993599454
write theta::2.99993599454
added edge::2.99993599454
clause literal pair::2.99993599454
relate to real::2.99993599454
number of children::2.99993599454
exit early::2.99993599454
follow this branch::2.99993599454
back track search::2.99993599454
cube term::2.99993599454
solve the decision::2.99993599454
acceptable output::2.99993599454
side length::2.99993599454
conjunctive normal form::2.99993599454
analysis framework::2.99993599454
element of size::2.99993599454
minimum vertex::2.99993599454
first design::2.99993599454
graph has hamiltonian::2.99993599454
chooseful distances::2.99993599454
cost leaf::2.99993599454
basic terms::2.99993599454
large degree::2.99993599454
correspond to elements::2.99993599454
degree greater::2.99993599454
school level algorithm::2.99993599454
thing to note::2.99993599454
matches this portion::2.99993599454
unsuccessful comparison::2.99993599454
enter the loop::2.99993599454
pick that object::2.99993599454
combinatorial object::2.99993599454
rejected objects::2.99993599454
popular sorting algorithm::2.99991465938
extremely important::2.99991465938
extend the solution::2.99991465938
vertex of degree::2.99991465938
limited resources::2.99991465938
simple minded::2.99991465938
points inside::2.99991465938
number of problems::2.99991465938
sets of edges::2.99991465938
takes the value::2.99991465938
factorial permutations::2.99991465938
small part::2.99991465938
worst instance::2.99991465938
level algorithm::2.99991465938
write the term::2.99991465938
good chance::2.99991465938
maximum distance::2.99991465938
previous problem::2.99991465938
back track::2.99991465938
point lie::2.99991465938
shift this pattern::2.99991465938
entire portion::2.99991465938
good thing::2.99991465938
popular sorting::2.99991465938
first level::2.99989332423
topic today::2.99989332423
conquer strategy::2.99989332423
filled out::2.99989332423
original value::2.99989332423
left side::2.99989332423
algorithm in fact::2.99989332423
first edge::2.99989332423
draw a picture::2.99989332423
add an edge::2.99989332423
equal probability::2.99989332423
small problem::2.99987198908
right side::2.99987198908
general technique::1.99993599454
conclude this lecture::1.99993599454
point lies::1.99993599454
problem the input::1.99993599454
scheduling problems::1.99993599454
last point::1.99993599454
sort of crucial::1.99993599454
input is set::1.99993599454
smaller problem::1.99993599454
general idea::1.99993599454
linear time algorithm::1.99993599454
sort of first::1.99993599454
hard problem::1.99993599454
human beings::1.99993599454
sort of fill::1.99993599454
vice versa::1.99993599454
euclidean tsp::1.99993599454
inductive approach::1.99993599454
needed to represent::1.99993599454
small problems::1.99993599454
tree in fact::1.99993599454
conquer paradigm::1.99993599454
draw an edge::1.99993599454
main result::1.99993599454
main point::1.99993599454
sorted list::1.99993599454
entry depends::1.99993599454
good algorithms::1.99993599454
strictly increase::1.99993599454
problems of size::1.99993599454
geometric series::1.99993599454
analyze this algorithm::1.99993599454
sort of give::1.99993599454
number of instructions::1.99993599454
ready to define::1.99993599454
empty subset::1.99993599454
divided by log::1.99993599454
first row::1.99993599454
bucket sort::1.99993599454
sequence of vertices::1.99993599454
find min::1.99993599454
define the class::1.99993599454
optimal cost::1.99993599454
pair of vertices::1.99993599454
first property::1.99993599454
usual thing::1.99993599454
conquer sort::1.99993599454
techniques for designing::1.99993599454
constant factors::1.99993599454
undirected graph::1.99993599454
subsets of edges::1.99993599454
draw picture::1.99993599454
give a proof::1.99993599454
closely related::1.99993599454
interesting case::1.99993599454
makes sense::1.99993599454
negative values::1.99993599454
return the value::1.99993599454
put the first::1.99993599454
extremely important question::1.99993599454
algorithms for solving::1.99993599454
first position::1.99993599454
compute the product::1.99993599454
small set::1.99993599454
complete match::1.99993599454
last problem::1.99993599454
algorithm for sorting::1.99993599454
amount of cleverness::1.99993599454
simple principle::1.99993599454
decrease the number::1.99993599454
red edge::1.99993599454
conquer kind::1.99993599454
problem find::1.99993599454
leaf path::1.99991465938
maximum sized::1.99991465938
complete graph::1.99991465938
pick this vertex::1.99991465938
wanted to find::1.99991465938
engineering indian institution::1.99991465938
fairly easy::1.99991465938
work done::1.99991465938
institution of technology::1.99991465938
algorithm for solving::1.99991465938
formal definition::1.99991465938
lecture design::1.99991465938
sorting takes::1.99991465938
basic step::1.99991465938
times n log::1.99991465938
indian institution::1.99991465938
comparing these two::1.99991465938
vertices form::1.99991465938
entire algorithm::1.99989332423
first observation::1.99989332423
small number::1.99989332423
good algorithm::1.99989332423
define this problem::1.99989332423
small size::0.999935994538
first point::0.999935994538
