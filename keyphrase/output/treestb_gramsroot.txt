important nonlinear data::important nonlinear data
nonlinear data structures::nonlinear data structures
structures in computing::structures in computing
computing trees tree::computing trees tree
trees tree structures::trees tree structures
breakthrough in data::breakthrough in data
implement a host::implement a host
host of algorithms::host of algorithms
algorithms much faster::algorithms much faster
linear data structures::linear data structures
lists or linked::lists or linked
linked lists trees::linked lists trees
trees also provide::trees also provide
provide a natural::provide a natural
organization for data::organization for data
structures in file::structures in file
graphical user interfaces::graphical user interfaces
clear what productivity::clear what productivity
trees are nonlinear::trees are nonlinear
relationships between objects::relationships between objects
objects in sequences::objects in sequences
sequences the relationships::sequences the relationships
tree are hierarchical::tree are hierarchical
terminology for tree::terminology for tree
tree data structures::tree data structures
relationships we show::relationships we show
tree in figure::tree in figure
trees 8.1.1 tree::trees 8.1.1 tree
8.1.1 tree definitions::8.1.1 tree definitions
definitions and properties::definitions and properties
properties a tree::properties a tree
abstract data type::abstract data type
type that stores::type that stores
stores elements hierarchically::stores elements hierarchically
elements a tree::elements a tree
visualized by placing::visualized by placing
placing elements inside::placing elements inside
elements inside ovals::elements inside ovals
ovals or rectangles::ovals or rectangles
drawing the connections::drawing the connections
connections between parents::connections between parents
parents and children::parents and children
children with straight::children with straight
call the top::call the top
element the root::element the root
elements being connected::elements being connected
africa europe asia::africa europe asia
europe asia australia::europe asia australia
asia australia canada::asia australia canada
canada s america::canada s america
america overseas domestic::america overseas domestic
overseas domestic international::overseas domestic international
tuner r&d sales::tuner r&d sales
r&d sales purchasing::r&d sales purchasing
sales purchasing manufacturing::sales purchasing manufacturing
purchasing manufacturing electronics::purchasing manufacturing electronics
representing the organization::representing the organization
corporation the root::corporation the root
root stores electronics::root stores electronics
root store r&d::root store r&d
manufacturing the internal::manufacturing the internal
internal nodes store::internal nodes store
nodes store sales::nodes store sales
manufacturing formal tree::manufacturing formal tree
formal tree definition::formal tree definition
define a tree::define a tree
set of nodes::set of nodes
nodes storing elements::nodes storing elements
relationship that satisfies::relationship that satisfies
parent each node::parent each node
unique parent node::unique parent node
node with parent::node with parent
nodes this convention::nodes this convention
empty or consists::empty or consists
set of subtrees::set of subtrees
subtrees whose roots::subtrees whose roots
trees other node::trees other node
relationships two nodes::relationships two nodes
parent are siblings::parent are siblings
siblings a node::siblings a node
children a node::children a node
children external nodes::children external nodes
discussed the hierarchical::discussed the hierarchical
relationship between files::relationship between files
files and directories::files and directories
computer s file::computer s file
emphasize the nomenclature::emphasize the nomenclature
revisit an earlier::revisit an earlier
unix and linux::unix and linux
linux operating systems::linux operating systems
hw1 hw2 hw3::hw1 hw2 hw3
hw2 hw3 pr1::hw2 hw3 pr1
hw3 pr1 pr2::hw3 pr1 pr2
pr1 pr2 pr3::pr1 pr2 pr3
pr2 pr3 grades::pr2 pr3 grades
pr3 grades buylow::pr3 grades buylow
grades buylow sellhigh::grades buylow sellhigh
buylow sellhigh market::buylow sellhigh market
sellhigh market grades::sellhigh market grades
market grades figure::market grades figure
representing a portion::representing a portion
system a node::system a node
cs016 the subtree::NNP the subtree
edges and paths::edges and paths
paths in trees::paths in trees
trees an edge::trees an edge
edge of tree::edge of tree
pair of nodes::pair of nodes
versa a path::versa a path
sequence of nodes::sequence of nodes
two consecutive nodes::two consecutive nodes
form an edge::form an edge
relation between classes::relation between classes
python program forms::python program forms
forms a tree::forms a tree
tree when single::tree when single
provided a summary::provided a summary
hierarchy for python::hierarchy for python
python s exception::python s exception
portrayed in figure::portrayed in figure
user-defined exception classes::user-defined exception classes
conventionally be declared::conventionally be declared
declared as descendants::declared as descendants
specific exception class::specific exception class
class we introduced::class we introduced
introduced in code::introduced in code
portion of python::portion of python
python s hierarchy::python s hierarchy
hierarchy of exception::hierarchy of exception
types in python::types in python
classes are organized::classes are organized
exists a built-in::exists a built-in
built-in class named::built-in class named
class named object::class named object
ultimate base class::ultimate base class
direct or indirect::direct or indirect
indirect base class::indirect base class
pictured in figure::pictured in figure
python s complete::python s complete
complete class hierarchy::complete class hierarchy
hierarchy of classes::hierarchy of classes
classes for representing::classes for representing
representing various forms::representing various forms
tree arraybinarytree linkedbinarytree::tree arraybinarytree linkedbinarytree
arraybinarytree linkedbinarytree tree::arraybinarytree linkedbinarytree tree
linkedbinarytree tree binarytree::linkedbinarytree tree binarytree
tree binarytree linkedtree::tree binarytree linkedtree
binarytree linkedtree figure::binarytree linkedtree figure
hierarchy for modeling::hierarchy for modeling
modeling various abstractions::modeling various abstractions
abstractions and implementations::abstractions and implementations
implementations of tree::implementations of tree
linkedtree and arraybinarytree::linkedtree and arraybinarytree
trees ordered trees::trees ordered trees
trees a tree::trees a tree
tree is ordered::tree is ordered
meaningful linear order::meaningful linear order
identify the children::identify the children
visualized by arranging::visualized by arranging
arranging siblings left::arranging siblings left
tree whose internal::tree whose internal
nodes are parts::nodes are parts
leaves are paragraphs::leaves are paragraphs
expanding the tree::expanding the tree
show paragraphs consisting::show paragraphs consisting
consisting of sentences::consisting of sentences
consisting of words::consisting of words
consisting of characters::consisting of characters
examples of trees::examples of trees
order of children::order of children
children is significant::children is significant
significant a family::significant a family
tree that describes::tree that describes
describes generational relationships::describes generational relationships
birth in contrast::birth in contrast
considered an unordered::considered an unordered
unordered tree likewise::unordered tree likewise
tree to describe::tree to describe
describe an inheritance::describe an inheritance
tree in modeling::tree in modeling
modeling a computer::modeling a computer
system often displays::system often displays
system s representation::system s representation
8.1.2 the tree::8.1.2 the tree
tree abstract data::tree abstract data
lists in section::lists in section
tree an element::tree an element
element is stored::element is stored
positions satisfy parent-child::positions satisfy parent-child
satisfy parent-child relationships::satisfy parent-child relationships
relationships that define::relationships that define
define the tree::define the tree
structure a position::structure a position
supports the method::supports the method
return the element::return the element
stored at position::stored at position
adt then supports::adt then supports
allowing a user::allowing a user
user to navigate::user to navigate
return the position::return the position
root of tree::root of tree
empty t.is root::empty t.is root
true if position::true if position
tree t t.parent::tree t t.parent
parent of position::parent of position
return the number::return the number
number of children::number of children
children of position::children of position
position p t.children::position p t.children
generate an iteration::generate an iteration
position p t.is::position p t.is
number of positions::number of positions
contained in tree::contained in tree
tree t t.is::tree t t.is
true if tree::true if tree
positions of tree::positions of tree
tree t iter::tree t iter
stored within tree::stored within tree
methods that accepts::methods that accepts
accepts a position::accepts a position
argument should generate::argument should generate
generate a valueerror::generate a valueerror
position is invalid::position is invalid
reports the children::reports the children
generates an empty::generates an empty
iteration in similar::iteration in similar
generate empty iterations::generate empty iterations
discuss general means::discuss general means
means for iterating::means for iterating
tree in sections::tree in sections
define any methods::define any methods
methods for creating::methods for creating
creating or modifying::creating or modifying
point we prefer::point we prefer
prefer to describe::prefer to describe
describe different tree::describe different tree
tree update methods::tree update methods
methods in conjunction::methods in conjunction
conjunction with specific::conjunction with specific
applications of trees::applications of trees
tree abstract base::tree abstract base
abstract base class::abstract base class
class in python::class in python
python in discussing::python in discussing
discussing the object-oriented::discussing the object-oriented
object-oriented design principle::object-oriented design principle
principle of abstraction::principle of abstraction
abstraction in section::abstraction in section
managed in python::managed in python
python via duck::python via duck
defined the notion::defined the notion
adt in section::adt in section
presented several classes::presented several classes
classes that implement::classes that implement
implement the queue::implement the queue
arrayqueue in section::arrayqueue in section
linkedqueue in section::linkedqueue in section
circularqueue in section::circularqueue in section
gave any formal::gave any formal
adt in python::adt in python
implementations were self-contained::implementations were self-contained
happen to adhere::happen to adhere
mechanism to designate::mechanism to designate
designate the relationships::designate the relationships
class that serves::class that serves
choose to define::choose to define
adt our reason::adt our reason
reason for doing::reason for doing
level of abstraction::level of abstraction
allowing greater code::allowing greater code
greater code reuse::greater code reuse
concrete tree implementations::concrete tree implementations
nested position class::nested position class
accessor methods included::accessor methods included
define any internal::define any internal
representation for storing::representation for storing
storing a tree::storing a tree
code fragment remain::code fragment remain
fragment remain abstract::fragment remain abstract
raises a notimplementederror::raises a notimplementederror
approach for defining::approach for defining
defining abstract base::defining abstract base
abstract base classes::abstract base classes
classes and abstract::classes and abstract
python s abc::python s abc
described in section::described in section
subclasses are responsible::subclasses are responsible
responsible for overriding::responsible for overriding
overriding abstract methods::overriding abstract methods
provide a working::provide a working
chosen internal representation::chosen internal representation
includes several concrete::includes several concrete
methods with implementations::methods with implementations
rely on calls::rely on calls
class in defining::class in defining
defining the tree::defining the tree
declare ten accessor::declare ten accessor
ten accessor methods::ten accessor methods
left as abstract::left as abstract
implementations for methods::implementations for methods
methods is root::methods is root
empty in section::empty in section
explore general algorithms::explore general algorithms
algorithms for traversing::algorithms for traversing
traversing a tree::traversing a tree
provide concrete implementations::provide concrete implementations
positions and iter::positions and iter
class the beauty::class the beauty
concrete methods defined::concrete methods defined
subclasses this promotes::subclasses this promotes
promotes greater code::promotes greater code
subclasses to reimplement::subclasses to reimplement
reimplement such behaviors::reimplement such behaviors
behaviors we note::behaviors we note
class being abstract::class being abstract
reason to create::reason to create
create a direct::create a direct
exists to serve::exists to serve
base for inheritance::base for inheritance
users will create::users will create
instances of concrete::instances of concrete
8.1.3 computing depth::8.1.3 computing depth
depth and height::depth and height
number of ancestors::number of ancestors
tree of figure::tree of figure
node storing international::node storing international
international has depth::international has depth
present a simple::present a simple
computing the depth::computing the depth
number of levels::number of levels
levels separating position::levels separating position
class the running::class the running
denotes the depth::denotes the depth
performs a constant-time::performs a constant-time
constant-time recursive step::constant-time recursive step
form a single::form a single
informative to characterize::informative to characterize
characterize the running::characterize the running
height the height::height the height
children the height::children the height
positions we leave::positions we leave
leave the justification::leave the justification
present an algorithm::present an algorithm
implemented in code::implemented in code
nonpublic method height1::nonpublic method height1
class it computes::class it computes
computes the height::computes the height
tree t based::tree t based
based on proposition::based on proposition
depth from code::depth from code
defined the positions::defined the positions
implemented to run::implemented to run
height1 calls algorithm::height1 calls algorithm
calls algorithm depth::calls algorithm depth
set of leaf::set of leaf
algorithm height1 runs::algorithm height1 runs
compute the height::compute the height
original recursive definition::original recursive definition
parameterize a function::parameterize a function
calculate the height::calculate the height
important to understand::important to understand
understand why algorithm::understand why algorithm
efficient than height1::efficient than height1
height1 the algorithm::height1 the algorithm
algorithm is recursive::algorithm is recursive
root eventually invokes::root eventually invokes
invokes the recursion::invokes the recursion
determine the running::determine the running
algorithm by summing::algorithm by summing
analyses of recursive::analyses of recursive
amount of work::amount of work
work per position::work per position
overhead of computing::overhead of computing
computing the maximum::computing the maximum
iteration of children::iteration of children
implementation of children::implementation of children
iteration is generated::iteration is generated
denotes the number::denotes the number
algorithm height2 spends::algorithm height2 spends
compute the maximum::compute the maximum
order to complete::order to complete
complete the analysis::complete the analysis
denote the number::denote the number
contributes one unit::contributes one unit
sum by proposition::sum by proposition
revisiting the public::revisiting the public
ability to compute::ability to compute
heights of subtrees::heights of subtrees
subtrees is beneficial::subtrees is beneficial
user might expect::user might expect
designating the tree::designating the tree
wrap the nonpublic::wrap the nonpublic
public height method::public height method
interpretation when invoked::interpretation when invoked
invoked on tree::invoked on tree
trees a binary::trees a binary
node is labeled::node is labeled
left child precedes::left child precedes
precedes a right::precedes a right
node the subtree::node the subtree
tree is proper::tree is proper
children some people::children some people
full binary trees::full binary trees
proper binary tree::proper binary tree
children a binary::children a binary
proper is improper::proper is improper
class of binary::class of binary
binary trees arises::binary trees arises
arises in contexts::arises in contexts
represent a number::represent a number
result from answering::result from answering
answering a series::answering a series
series of yes-or-no::series of yes-or-no
questions each internal::questions each internal
follow an edge::follow an edge
tracing a path::tracing a path
leaf such binary::leaf such binary
represents a decision::represents a decision
ancestors are answered::ancestors are answered
binary tree figure::binary tree figure
illustrates a decision::illustrates a decision
prospective investor chapter::prospective investor chapter
binary treewhose leaves::binary treewhose leaves
variables or constants::variables or constants
node is leaf::node is leaf
variable or constant::variable or constant
node is internal::node is internal
value is defined::value is defined
defined by applying::defined by applying
applying its operation::applying its operation
children an arithmetic::children an arithmetic
arithmetic expression tree::arithmetic expression tree
improper binary tree::improper binary tree
binary tree representing::binary tree representing
representing an arithmetic::representing an arithmetic
expression this tree::expression this tree
represents the expression::represents the expression
internal node labeled::internal node labeled
recursive binary tree::recursive binary tree
binary tree definition::binary tree definition
define a binary::define a binary
stores an element::stores an element
element a binary::element a binary
8.2.1 the binary::8.2.1 the binary
binary tree abstract::binary tree abstract
tree that supports::tree that supports
supports three additional::supports three additional
additional accessor methods::additional accessor methods
position that represents::position that represents
represents the left::represents the left
left child t.right::left child t.right
represents the right::represents the right
right child t.sibling::right child t.sibling
represents the sibling::represents the sibling
define specialized update::define specialized update
specialized update methods::specialized update methods
methods for binary::methods for binary
describe specific implementations::describe specific implementations
implementations and applications::implementations and applications
applications of binary::applications of binary
trees the binarytree::trees the binarytree
binarytree abstract base::binarytree abstract base
tree was defined::tree was defined
class in section::class in section
binary tree adt::binary tree adt
rely on inheritance::rely on inheritance
inheritance to define::inheritance to define
define the binarytree::define the binarytree
binarytree class based::binarytree class based
existing tree class::existing tree class
binarytree class remains::binarytree class remains
class remains abstract::class remains abstract
provide complete specifications::provide complete specifications
behaviors our python::behaviors our python
binary tree supports::binary tree supports
defined for general::defined for general
class also inherits::class also inherits
inherits the nested::inherits the nested
tree class definition::tree class definition
definition in addition::definition in addition
class provides declarations::class provides declarations
abstract methods left::abstract methods left
supported by concrete::supported by concrete
subclasses of binarytree::subclasses of binarytree
two concrete implementations::two concrete implementations
implementations of methods::implementations of methods
method is derived::method is derived
combination of left::combination of left
identify the sibling::identify the sibling
method is abstract::method is abstract
derive a generator::derive a generator
ordered children based::ordered children based
behavior of abstract::behavior of abstract
left and right::left and right
properties of binary::properties of binary
binary trees binary::binary trees binary
trees binary trees::trees binary trees
interesting properties dealing::interesting properties dealing
dealing with relationships::dealing with relationships
heights and number::heights and number
number of nodes::number of nodes
nodes we denote::nodes we denote
denote the set::denote the set
binary tree grows::binary tree grows
relating the height::relating the height
nodes a detailed::nodes a detailed
properties is left::properties is left
left as exercise::left as exercise
exercise r-8.8 proposition::exercise r-8.8 proposition
nonempty binary tree::nonempty binary tree
number of external::number of external
number of internal::number of internal
trees relating internal::trees relating internal
relating internal nodes::relating internal nodes
nodes to external::nodes to external
tree in addition::tree in addition
earlier binary tree::earlier binary tree
binary tree properties::binary tree properties
nodes and external::nodes and external
binary tree proposition::binary tree proposition
nonempty proper binary::nonempty proper binary
justify this proposition::justify this proposition
proposition by removing::proposition by removing
empty the piles::empty the piles
pile is empty::pile is empty
node we place::node we place
shown in figure::shown in figure
removes one internal::removes one internal
leaves the tree::leaves the tree
binary tree repeating::binary tree repeating
repeating this operation::repeating this operation
eventually are left::eventually are left
final tree consisting::final tree consisting
single node note::single node note
external and internal::external and internal
sequence of operations::sequence of operations
remove the node::remove the node
internal-node pile figure::internal-node pile figure
operation that removes::operation that removes
removes an external::removes an external
justification of proposition::justification of proposition
improper binary trees::improper binary trees
trees and nonbinary::trees and nonbinary
c-8.32 through c-8.34::c-8.32 through c-8.34
trees the tree::trees the tree
tree and binarytree::tree and binarytree
formally abstract base::formally abstract base
provide a great::provide a great
deal of support::deal of support
defined key implementation::defined key implementation
key implementation details::key implementation details
navigate between parents::navigate between parents
tree must provide::tree must provide
provide methods root::provide methods root
case of binarytree::case of binarytree
additional accessors left::additional accessors left
representation of trees::representation of trees
trees we describe::trees we describe
section we begin::section we begin
defined 8.3.1 linked::defined 8.3.1 linked
8.3.1 linked structure::8.3.1 linked structure
structure for binary::structure for binary
trees a natural::trees a natural
realize a binary::realize a binary
children and parent::children and parent
tree itself maintains::tree itself maintains
maintains an instance::maintains an instance
instance variable storing::instance variable storing
storing a reference::storing a reference
linked structure representation::linked structure representation
figure 8.11b figure::figure 8.11b figure
structure for representing::structure for representing
trees python implementation::trees python implementation
linked binary tree::linked binary tree
binary tree structure::binary tree structure
define a concrete::define a concrete
concrete linkedbinarytree class::concrete linkedbinarytree class
class that implements::class that implements
implements the binary::implements the binary
adt by subclassing::adt by subclassing
subclassing the binarytree::subclassing the binarytree
class our general::class our general
developing the positionallist::developing the positionallist
positionallist in section::positionallist in section
define a simple::define a simple
nonpublic node class::nonpublic node class
class to represent::class to represent
represent a node::represent a node
public position class::public position class
class that wraps::class that wraps
wraps a node::wraps a node
node we provide::node we provide
provide a validate::provide a validate
checking the validity::checking the validity
instance when unwrapping::instance when unwrapping
make position utility::make position utility
utility for wrapping::utility for wrapping
wrapping a node::wrapping a node
position to return::position to return
caller those definitions::caller those definitions
definitions are provided::definitions are provided
provided in code::provided in code
class is declared::class is declared
declared to inherit::declared to inherit
immediately from binarytree.position::immediately from binarytree.position
binarytree class definition::binarytree class definition
tree.position a minor::tree.position a minor
position class inherits::position class inherits
derived appropriately relative::derived appropriately relative
class definition continues::class definition continues
methods that remain::methods that remain
classes the constructor::classes the constructor
creates an empty::creates an empty
tree by initializing::tree by initializing
methods are implemented::methods are implemented
implemented with careful::implemented with careful
validate and make::validate and make
make position utilities::make position utilities
utilities to safeguard::utilities to safeguard
safeguard against boundary::safeguard against boundary
boundary cases operations::boundary cases operations
operations for updating::operations for updating
updating a linked::updating a linked
functionality for examining::functionality for examining
examining an existing::examining an existing
existing binary tree::existing binary tree
linkedbinarytree class results::linkedbinarytree class results
provided any means::provided any means
means for changing::means for changing
changing the structure::changing the structure
structure or content::structure or content
tree we chose::tree we chose
declare update methods::declare update methods
methods as part::methods as part
tree or binarytree::tree or binarytree
principle of encapsulation::principle of encapsulation
representation we prefer::representation we prefer
tree class offer::tree class offer
options for updating::options for updating
updating a tree::updating a tree
provide update methods::provide update methods
forms of update::forms of update
place an update::place an update
class that inherits::class that inherits
base will inherit::base will inherit
inherit the update::inherit the update
replaces the element::replaces the element
study in section::study in section
enforce that internal::enforce that internal
store only operators::store only operators
operators as elements::operators as elements
linked binary trees::linked binary trees
set of update::set of update
methods to support::methods to support
support for general::support for general
create a root::create a root
empty t.add left::empty t.add left
node storing element::node storing element
link the node::link the node
child of position::child of position
return the resulting::return the resulting
left child t.add::left child t.add
child t.add right::child t.add right
right child t.replace::right child t.replace
replace the element::replace the element
previously stored element::previously stored element
stored element t.delete::stored element t.delete
node at position::node at position
two children t.attach::two children t.attach
attach the internal::attach the internal
structure of trees::structure of trees
subtrees of leaf::subtrees of leaf
error condition occurs::error condition occurs
chosen this collection::chosen this collection
collection of operations::collection of operations
case analyses involving::case analyses involving
relationships and boundary::relationships and boundary
number of operations::number of operations
operations to perform::operations to perform
treatment of positional::treatment of positional
avoid the problem::avoid the problem
problem of undesirable::problem of undesirable
undesirable update methods::undesirable update methods
methods being inherited::methods being inherited
inherited by subclasses::inherited by subclasses
subclasses of linkedbinarytree::subclasses of linkedbinarytree
chosen an implementation::chosen an implementation
provide nonpublic versions::provide nonpublic versions
providing the underscored::providing the underscored
delete in lieu::delete in lieu
delete our implementations::delete our implementations
methods are provided::methods are provided
linkedbinarytree can invoke::linkedbinarytree can invoke
invoke the nonpublic::invoke the nonpublic
preserving a public::preserving a public
application a subclass::application a subclass
choose to wrap::choose to wrap
nonpublic update methods::nonpublic update methods
method to expose::method to expose
user we leave::user we leave
task of defining::task of defining
defining a mutablelinkedbinarytree::defining a mutablelinkedbinarytree
public methods wrapping::public methods wrapping
binary tree implementation::binary tree implementation
implementation to summarize::implementation to summarize
summarize the efficiencies::summarize the efficiencies
analyze the running::analyze the running
including derived methods::including derived methods
implemented in linkedbinarytree::implemented in linkedbinarytree
storing the number::storing the number
method is empty::method is empty
inherited from tree::inherited from tree
call to len::call to len
accessor methods root::accessor methods root
children are implemented::children are implemented
directly in linkedbinarytree::directly in linkedbinarytree
sibling and children::sibling and children
methods are derived::methods are derived
derived in binarytree::derived in binarytree
number of calls::number of calls
root calls root::root calls root
relies on equivalence::relies on equivalence
testing of positions::testing of positions
leaf calls left::leaf calls left
right and verifies::right and verifies
analyzed in section::analyzed in section
8.1.3 the depth::8.1.3 the depth
method at position::method at position
position p runs::position p runs
update methods add::update methods add
methods add root::methods add root
nodes per operation::nodes per operation
summarizes the performance::summarizes the performance
linked structure implementation::linked structure implementation
binary tree operation::binary tree operation
tree operation running::tree operation running
running time len::running time len
n-node binary tree::n-node binary tree
binary tree implemented::binary tree implemented
structure the space::structure the space
8.3.2 array-based representation::8.3.2 array-based representation
tree an alternative::tree an alternative
numbering the positions::numbering the positions
numbers the positions::numbers the positions
order from left::order from left
left to right::left to right
numbering is based::numbering is based
based on potential::based on potential
nodes with level::nodes with level
node with level::node with level
trees the level::trees the level
level numbering function::level numbering function
function f suggests::function f suggests
suggests a representation::suggests a representation
element at position::element at position
stored at index::stored at index
array we show::array we show
tree by means::tree by means
array one advantage::array one advantage
implemented using simple::implemented using simple
simple arithmetic operations::simple arithmetic operations
leave the details::leave the details
array-based representation depends::array-based representation depends
array a requires::array a requires
number of empty::number of empty
worst-case space usage::worst-case space usage
tree is space::tree is space
general binary trees::general binary trees
exponential worst-case space::exponential worst-case space
worst-case space requirement::worst-case space requirement
representation is prohibitive::representation is prohibitive
prohibitive another drawback::prohibitive another drawback
operations for trees::operations for trees
deleting a node::deleting a node
node and promoting::node and promoting
promoting its child::promoting its child
child that moves::child that moves
8.3.3 linked structure::8.3.3 linked structure
structure for general::structure for general
trees when representing::trees when representing
representing a binary::representing a binary
node explicitly maintains::node explicitly maintains
explicitly maintains fields::explicitly maintains fields
maintains fields left::maintains fields left
right as references::right as references
references to individual::references to individual
realize a general::realize a general
store a single::store a single
container of references::container of references
list of references::list of references
linked representation .figure::linked representation .figure
structure the analysis::structure the analysis
analysis is left::analysis is left
collection to store::collection to store
store the children::store the children
iterating that collection::iterating that collection
collection operation running::collection operation running
n-node general tree::n-node general tree
general tree implemented::general tree implemented
tree traversal algorithms::tree traversal algorithms
algorithms a traversal::algorithms a traversal
position p depends::position p depends
incrementing a counter::incrementing a counter
counter to performing::counter to performing
performing some complex::performing some complex
describe several common::describe several common
common traversal schemes::common traversal schemes
schemes for trees::schemes for trees
discuss several common::discuss several common
applications of tree::applications of tree
traversals 8.4.1 preorder::traversals 8.4.1 preorder
preorder and postorder::preorder and postorder
traversals of general::traversals of general
children are traversed::children are traversed
subtrees are traversed::subtrees are traversed
children the pseudo-code::children the pseudo-code
shown in code::shown in code
perform the visit::perform the visit
action for position::action for position
traverse the subtree::traverse the subtree
preorder for performing::preorder for performing
performing the preorder::performing the preorder
rooted at position::rooted at position
tree t figure::tree t figure
portrays the order::portrays the order
tree are visited::tree are visited
preorder traversal algorithm::preorder traversal algorithm
traversal algorithm paper::traversal algorithm paper
algorithm paper title::algorithm paper title
paper title abstract::paper title abstract
position are ordered::position are ordered
ordered from left::ordered from left
traversal algorithms postorder::traversal algorithms postorder
algorithms postorder traversal::algorithms postorder traversal
traversal another important::traversal another important
important tree traversal::important tree traversal
tree traversal algorithm::tree traversal algorithm
traverses the subtrees::traverses the subtrees
visits the root::visits the root
traversal is portrayed::traversal is portrayed
position p code::position p code
postorder for performing::postorder for performing
performing the postorder::performing the postorder
tree t paper::tree t paper
analysis both preorder::analysis both preorder
postorder traversal algorithms::postorder traversal algorithms
algorithms are efficient::algorithms are efficient
ways to access::ways to access
tree the analysis::tree the analysis
algorithms is similar::algorithms is similar
traversal algorithm requires::traversal algorithm requires
visit itself takes::visit itself takes
traversal of tree::traversal of tree
tree this running::tree this running
traversal must visit::traversal must visit
trees 8.4.2 breadth-first::trees 8.4.2 breadth-first
8.4.2 breadth-first tree::8.4.2 breadth-first tree
breadth-first tree traversal::breadth-first tree traversal
traversals are common::traversals are common
ways of visiting::ways of visiting
visiting the positions::visiting the positions
traverse a tree::traverse a tree
positions at depth::positions at depth
visit the positions::visit the positions
traversal a breadth-first::traversal a breadth-first
software for playing::software for playing
games a game::games a game
game tree represents::game tree represents
choices of moves::choices of moves
displays a partial::displays a partial
partial game tree::partial game tree
tree for tic-tac-toe::tree for tic-tac-toe
displaying the order::displaying the order
positions are visited::positions are visited
unable to explore::unable to explore
explore a complete::explore a complete
complete game tree::complete game tree
deep as computational::deep as computational
traversing entire subtrees::traversing entire subtrees
queue to produce::queue to produce
produce a fifo::produce a fifo
calls to enqueue::calls to enqueue
calls to dequeue::calls to dequeue
dequeue algorithm breadthfirst::dequeue algorithm breadthfirst
algorithm for performing::algorithm for performing
performing a breadth-first::performing a breadth-first
8.4.3 inorder traversal::8.4.3 inorder traversal
tree the standard::tree the standard
introduced for general::introduced for general
applied to binary::applied to binary
introduce another common::introduce another common
common traversal algorithm::common traversal algorithm
visit a position::visit a position
subtrees the inorder::subtrees the inorder
viewed as visiting::viewed as visiting
visiting the nodes::visiting the nodes
inorder traversal visits::inorder traversal visits
inorder traversal algorithm::inorder traversal algorithm
traverse the left::traverse the left
traverse the right::traverse the right
inorder for performing::inorder for performing
performing an inorder::performing an inorder
tree the inorder::tree the inorder
tree to represent::tree to represent
represent an arithmetic::represent an arithmetic
traversal visits positions::traversal visits positions
albeit without parentheses::albeit without parentheses
trees binary search::trees binary search
binary search trees::binary search trees
trees an important::trees an important
traversal algorithm arises::traversal algorithm arises
store an ordered::store an ordered
sequence of elements::sequence of elements
defining a structure::defining a structure
structure we call::structure we call
call a binary::call a binary
binary search tree::binary search tree
set whose unique::set whose unique
set of integers::set of integers
integers a binary::integers a binary
position p stores::position p stores
tree is shown::tree is shown
tree t visits::tree t visits
visits the elements::visits the elements
elements in nondecreasing::elements in nondecreasing
search tree storing::search tree storing
tree storing integers::tree storing integers
integers the solid::integers the solid
path is traversed::path is traversed
traversed when searching::traversed when searching
traversing a path::traversing a path
position p encountered::position p encountered
compare our search::compare our search
search terminates successfully::search terminates successfully
reach an empty::reach an empty
search terminates unsuccessfully::search terminates unsuccessfully
binary decision tree::binary decision tree
element being searched::element being searched
illustrate several examples::illustrate several examples
operation in figure::operation in figure
recall from proposition::recall from proposition
small as log::small as log
small height chapter::small height chapter
study of search::study of search
8.4.4 implementing tree::8.4.4 implementing tree
implementing tree traversals::implementing tree traversals
traversals in python::traversals in python
python when first::python when first
stated that tree::stated that tree
make any assumption::make any assumption
report their results::report their results
produce these iterations::produce these iterations
iterations to begin::iterations to begin
easy to produce::easy to produce
produce an iteration::produce an iteration
special method iter::special method iter
base class tree::base class tree
rely on python::rely on python
python s generator::python s generator
mechanism for producing::mechanism for producing
implementation of tree::implementation of tree
tree s elements::tree s elements
order as positions::order as positions
yield each element::yield each element
element code fragment::element code fragment
iterating all elements::iterating all elements
tree this code::tree this code
class to implement::class to implement
implement the positions::implement the positions
choice of tree::choice of tree
provide independent implementations::provide independent implementations
tree adt preorder::tree adt preorder
adt preorder traversal::adt preorder traversal
traversal we begin::traversal we begin
support a public::support a public
method with calling::method with calling
calling signature t.preorder::calling signature t.preorder
generates a preorder::generates a preorder
algorithm for generating::algorithm for generating
generating a preorder::generating a preorder
described in code::described in code
tree that serves::tree that serves
subtree to traverse::subtree to traverse
traverse a standard::traverse a standard
define a nonpublic::define a nonpublic
nonpublic utility method::nonpublic utility method
desired recursive parameterization::desired recursive parameterization
public method preorder::public method preorder
method preorder invoke::method preorder invoke
tree our implementation::tree our implementation
generate a preorder::generate a preorder
iteration of positions::iteration of positions
def subtree preorder::def subtree preorder
positions in subtree::positions in subtree
caller code fragment::caller code fragment
support for performing::support for performing
performing a preorder::performing a preorder
utility subtree preorder::utility subtree preorder
preorder are generators::preorder are generators
perform a visit::perform a visit
yield each position::yield each position
decide what action::decide what action
action to perform::action to perform
position the subtree::position the subtree
subtree preorder method::subtree preorder method
relying on generators::relying on generators
slightly different form::slightly different form
form in order::form in order
order to yield::order to yield
yield all positions::yield all positions
subtree of child::subtree of child
call self subtree::call self subtree
reyield each position::reyield each position
outer context note::outer context note
loop over self.children::loop over self.children
public preorder method::public preorder method
method to re-yield::method to re-yield
re-yield all positions::re-yield all positions
recursive process starting::recursive process starting
tree is empty::tree is empty
provided full support::provided full support
generator a user::generator a user
official tree adt::official tree adt
tree adt requires::tree adt requires
support a positions::support a positions
order of iteration::order of iteration
include the definition::include the definition
return the entire::return the entire
tree s positions::tree s positions
return entire preorder::return entire preorder
entire preorder iteration::entire preorder iteration
preorder iteration code::preorder iteration code
iteration code fragment::iteration code fragment
class that relies::class that relies
traversal to generate::traversal to generate
generate the results::generate the results
implement a postorder::implement a postorder
postorder we wait::postorder we wait
wait to yield::wait to yield
yield the positions::yield the positions
subtrees an implementation::subtrees an implementation
generate a postorder::generate a postorder
def subtree postorder::def subtree postorder
subtrees code fragment::subtrees code fragment
performing a postorder::performing a postorder
tree class breadth-first::tree class breadth-first
class breadth-first traversal::class breadth-first traversal
traversal in code::traversal in code
provide an implementation::provide an implementation
breadth-first traversal algorithm::breadth-first traversal algorithm
tree class recall::tree class recall
queue of positions::queue of positions
positions to manage::positions to manage
manage the traversal::manage the traversal
process our implementation::process our implementation
class from section::class from section
adt would suffice::adt would suffice
suffice inorder traversal::suffice inorder traversal
traversal for binary::traversal for binary
trees the preorder::trees the preorder
breadth-first traversal algorithms::breadth-first traversal algorithms
algorithms are applicable::algorithms are applicable
include their implementations::include their implementations
class those methods::class those methods
methods are inherited::methods are inherited
abstract binarytree class::abstract binarytree class
dependent tree classes::dependent tree classes
develop the inorder::develop the inorder
applies to binary::applies to binary
include its definition::include its definition
technique to implement::technique to implement
implement an inorder::implement an inorder
generate a breadth-first::generate a breadth-first
fringe = linkedqueue::fringe = linkedqueue
remove from front::remove from front
report this position::report this position
children to back::children to back
back of queue::back of queue
queue code fragment::queue code fragment
generate an inorder::generate an inorder
def subtree inorder::def subtree inorder
left child exists::left child exists
traverse its subtree::traverse its subtree
right child exists::right child exists
yield other code::yield other code
class by overriding::class by overriding
overriding the positions::overriding the positions
override inherited version::override inherited version
version to make::version to make
inorder the default::inorder the default
default code fragment::default code fragment
defining the binarytree.position::defining the binarytree.position
positions are reported::positions are reported
reported using inorder::reported using inorder
demonstrate several representative::demonstrate several representative
including some customizations::including some customizations
standard traversal algorithms::standard traversal algorithms
traversal algorithms table::traversal algorithms table
table of contents::table of contents
represent the hierarchical::represent the hierarchical
produce a table::produce a table
tree from figure::tree from figure
displayed in figure::displayed in figure
element per line::element per line
line ; part::line ; part
attractive presentation produced::attractive presentation produced
produced by indenting::produced by indenting
indenting each element::indenting each element
tree a similar::tree a similar
display the contents::display the contents
paper paper title::paper paper title
paper title title::paper title title
title title abstract::title title abstract
title abstract abstract::title abstract abstract
based on depth::based on depth
tree the unindented::tree the unindented
produce the presentation::produce the presentation
presentation of figure::presentation of figure
indent each element::indent each element
number of spaces::number of spaces
element s depth::element s depth
element was unindented::element was unindented
replace the body::replace the body
work to produce::work to produce
produce the preorder::produce the preorder
preorder traversal runs::preorder traversal runs
analysis of section::analysis of section
calls to depth::calls to depth
incur a hidden::incur a hidden
hidden cost making::hidden cost making
making a call::making a call
call to depth::call to depth
noted when analyzing::noted when analyzing
analyzing the algorithm::analyzing the algorithm
height1 in section::height1 in section
trees a preferred::trees a preferred
approach to producing::approach to producing
producing an indented::producing an indented
redesign a top-down::redesign a top-down
recursion that includes::recursion that includes
includes the current::includes the current
implementation is provided::implementation is provided
runs in worst-case::runs in worst-case
takes to print::takes to print
strings of increasing::strings of increasing
def preorder indent::def preorder indent
print preorder representation::print preorder representation
representation of subtree::representation of subtree
depth for indentation::depth for indentation
recursion for printing::recursion for printing
printing indented version::printing indented version
started with form::started with form
form preorder indent::form preorder indent
numbering was embedded::numbering was embedded
traversal to display::traversal to display
display the structure::display the structure
display the tree::display the tree
international 2.2.1 canada::international 2.2.1 canada
2.2.2 s america::2.2.2 s america
labels are implicit::labels are implicit
tree a label::tree a label
position to accomplish::position to accomplish
accomplish the task::accomplish the task
add a representation::add a representation
list of zero-indexed::list of zero-indexed
convert those numbers::convert those numbers
numbers to oneindexed::numbers to oneindexed
form when printing::form when printing
avoid the inefficiency::avoid the inefficiency
inefficiency of duplicating::inefficiency of duplicating
duplicating such lists::duplicating such lists
lists when sending::lists when sending
list before making::list before making
making further recursive::making further recursive
calls in order::calls in order
order to leave::order to leave
leave no trace::leave no trace
block of code::block of code
code must remove::code must remove
remove the extraneous::remove the extraneous
list before completing::list before completing
completing its task::completing its task
task an implementation::task an implementation
def preorder label::def preorder label
print labeled representation::print labeled representation
labels are one-indexed::labels are one-indexed
entries are zero-indexed::entries are zero-indexed
printing an indented::printing an indented
indented and labeled::indented and labeled
preorder traversal parenthetic::preorder traversal parenthetic
traversal parenthetic representations::traversal parenthetic representations
reconstruct a general::reconstruct a general
indentation or numbered::indentation or numbered
concise string representations::concise string representations
representations of trees::representations of trees
representation the parenthetic::representation the parenthetic
parenthetic string representation::parenthetic string representation
denote string concatenation::denote string concatenation
breaks are cosmetic::breaks are cosmetic
essentially a preorder::essentially a preorder
produce the additional::produce the additional
implementation of preorder::implementation of preorder
position s children::position s children
produced the python::produced the python
python function parenthesize::python function parenthesize
traversal that prints::traversal that prints
print parenthesized representation::print parenthesized representation
end avoids trailing::end avoids trailing
avoids trailing newline::avoids trailing newline
determine proper separator::determine proper separator
recur on child::recur on child
include closing parenthesis::include closing parenthesis
closing parenthesis code::closing parenthesis code
parenthesis code fragment::parenthesis code fragment
function that prints::function that prints
prints parenthetic string::prints parenthetic string
tree computing disk::tree computing disk
computing disk space::computing disk space
internal positions representing::internal positions representing
positions representing directories::positions representing directories
directories and leaves::directories and leaves
leaves representing files::leaves representing files
files in fact::files in fact
back in chapter::back in chapter
examined the topic::examined the topic
topic of file::topic of file
gave an implementation::gave an implementation
algorithm for computing::algorithm for computing
computing the disk::computing the disk
computation of disk::computation of disk
space is emblematic::space is emblematic
compute the total::compute the total
implementation of postorder::implementation of postorder
visits the position::visits the position
previous positions represent::previous positions represent
positions represent children::positions represent children
recursive disk space::recursive disk space
space was allocated::space was allocated
mechanism for children::mechanism for children
children to return::children to return
parent as part::parent as part
process a custom::process a custom
disk space problem::disk space problem
level of recursion::level of recursion
providing a return::providing a return
def disk space::def disk space
return total disk::return total disk
total disk space::total disk space
space for subtree::space for subtree
subtotal = p.element::subtotal = p.element
child s space::child s space
space to subtotal::space to subtotal
return subtotal code::return subtotal code
subtotal code fragment::subtotal code fragment
tree we assume::tree we assume
tree element reports::tree element reports
reports the local::reports the local
8.4.6 euler tours::8.4.6 euler tours
template method pattern::template method pattern
section 8.4.5 demonstrate::section 8.4.5 demonstrate
demonstrate the great::demonstrate the great
power of recursive::power of recursive
recursive tree traversals::recursive tree traversals
capture the range::capture the range
range of computations::range of computations
computations we desire::computations we desire
initial work performed::initial work performed
performed before recurring::performed before recurring
recurring on subtrees::recurring on subtrees
additional work performed::additional work performed
two possible recursions::two possible recursions
develop a custom::develop a custom
adapt the recursive::adapt the recursive
principles of object-oriented::principles of object-oriented
object-oriented programming introduced::object-oriented programming introduced
introduced in section::introduced in section
section 2.1.1 include::section 2.1.1 include
2.1.1 include adaptability::2.1.1 include adaptability
adaptability and reusability::adaptability and reusability
framework for implementing::framework for implementing
tree traversals based::tree traversals based
euler tour traversal::euler tour traversal
traversal the euler::traversal the euler
viewing the edges::viewing the edges
tree the complexity::tree the complexity
edge to unify::edge to unify
unify the concept::unify the concept
concept of preorder::concept of preorder
two notable visits::two notable visits
pre visit occurs::pre visit occurs
occurs when first::occurs when first
reaching the position::reaching the position
passes immediately left::passes immediately left
visualization a post::visualization a post
post visit occurs::post visit occurs
walk later proceeds::walk later proceeds
trees the process::trees the process
easily be viewed::easily be viewed
visit and post::visit and post
node with element::node with element
two contiguous subtours::two contiguous subtours
traversing that position::traversing that position
position s left::position s left
traversing the right::traversing the right
subtree the pseudo-code::subtree the pseudo-code
perform the pre::perform the pre
pre visit action::pre visit action
tour the subtree::tour the subtree
perform the post::perform the post
post visit action::post visit action
eulertour for performing::eulertour for performing
performing an euler::performing an euler
tree the template::tree the template
pattern to provide::pattern to provide
provide a framework::provide a framework
reusable and adaptable::reusable and adaptable
interesting object-oriented software::interesting object-oriented software
object-oriented software design::object-oriented software design
software design pattern::software design pattern
pattern the template::pattern the template
method pattern describes::method pattern describes
describes a generic::describes a generic
generic computation mechanism::generic computation mechanism
application by redefining::application by redefining
redefining certain steps::redefining certain steps
primary algorithm calls::primary algorithm calls
algorithm calls auxiliary::algorithm calls auxiliary
calls auxiliary functions::calls auxiliary functions
hooks at designated::hooks at designated
define two separate::define two separate
two separate hooks::two separate hooks
traversals our implementation::traversals our implementation
class that manages::class that manages
manages the process::manages the process
defines trivial definitions::defines trivial definitions
customized by defining::customized by defining
defining a subclass::defining a subclass
eulertour and overriding::eulertour and overriding
hooks to provide::hooks to provide
provide specialized behavior::provide specialized behavior
specialized behavior python::specialized behavior python
behavior python implementation::behavior python implementation
implementation our implementation::implementation our implementation
class is provided::class is provided
primary recursive process::primary recursive process
process is defined::process is defined
nonpublic tour method::nonpublic tour method
method a tour::method a tour
instance is created::instance is created
created by sending::created by sending
sending a reference::sending a reference
calling the public::calling the public
public execute method::public execute method
beings the tour::beings the tour
tour and returns::tour and returns
returns a final::returns a final
class for performing::class for performing
performing euler tour::performing euler tour
previsit and hook::previsit and hook
overridden by subclasses::overridden by subclasses
prepare an euler::prepare an euler
euler tour template::euler tour template
tree = tree::tree = tree
tree being traversed::tree being traversed
return self tree::return self tree
perform the tour::perform the tour
tour and return::tour and return
return any result::return any result
result from post::result from post
visit of root::visit of root
return self tour::return self tour
start the recursion::start the recursion
tour of subtree::tour of subtree
position of current::position of current
node being visited::node being visited
list of indices::list of indices
indices of children::indices of children
children on path::children on path
path from root::path from root
add new index::add new index
index to end::index to end
end of path::end of path
path before recursion::path before recursion
child s subtree::child s subtree
remove extraneous index::remove extraneous index
index from end::index from end
def hook previsit::def hook previsit
def hook postvisit::def hook postvisit
pass code fragment::pass code fragment
eulertour base class::eulertour base class
base class providing::base class providing
providing a framework::providing a framework
framework for performing::framework for performing
euler tour traversals::euler tour traversals
experience of customizing::experience of customizing
traversals for sample::traversals for sample
sample applications section::sample applications section
eulertour for maintaining::eulertour for maintaining
maintaining the recursive::maintaining the recursive
provide a mechanism::provide a mechanism
level to return::level to return
return a value::return a value
method hook previsit::method hook previsit
discussion of code::discussion of code
value is expected::value is expected
function method hook::function method hook
method hook postvisit::method hook postvisit
traversed the first::traversed the first
first three parameters::first three parameters
previsit the final::previsit the final
list of objects::list of objects
provided as return::provided as return
choose to initialize::choose to initialize
initialize and maintain::initialize and maintain
maintain additional state::maintain additional state
form of instance::form of instance
euler tour framework::euler tour framework
framework to demonstrate::framework to demonstrate
demonstrate the flexibility::demonstrate the flexibility
revisit the sample::revisit the sample
applications from section::applications from section
indented preorder traversal::indented preorder traversal
produced by code::produced by code
eulertour that produces::eulertour that produces
produces an indented::produces an indented
indented preorder list::indented preorder list
started by creating::started by creating
creating an instance::creating an instance
invoking its execute::invoking its execute
tour = preorderprintindentedtour::tour = preorderprintindentedtour
akin to code::akin to code
produces a labeled::produces a labeled
labeled and indented::labeled and indented
elements to produce::elements to produce
produce the parenthetic::produce the parenthetic
achieved with code::achieved with code
define a subclass::define a subclass
subclass that overrides::subclass that overrides
previsit and postvisit::previsit and postvisit
path and path::path and path
print opening parenthesis::print opening parenthesis
print closing parenthesis::print closing parenthesis
eulertour that prints::eulertour that prints
prints a parenthetic::prints a parenthetic
invoke a method::invoke a method
hooks the public::hooks the public
eulertour class serves::eulertour class serves
task of computing::task of computing
eulertour subclass shown::eulertour subclass shown
call to execute::call to execute
simply add space::simply add space
eulertour that computes::eulertour that computes
computes disk space::computes disk space
trees the euler::trees the euler
tree in section::tree in section
introduced the concept::introduced the concept
pattern in designing::pattern in designing
designing the eulertour::designing the eulertour
class that class::class that class
class provided methods::class provided methods
provided methods hook::provided methods hook
methods hook previsit::methods hook previsit
overridden to customize::overridden to customize
customize a tour::customize a tour
tour in code::tour in code
provide a binaryeulertour::provide a binaryeulertour
specialization that includes::specialization that includes
includes an additional::includes an additional
additional hook invisit::additional hook invisit
subtree is traversed::subtree is traversed
traversed our implementation::traversed our implementation
replaces the original::replaces the original
original tour utility::original tour utility
utility to specialize::utility to specialize
visit taking place::visit taking place
sole left child::sole left child
sole right child::sole right child
update with results::update with results
results of recursions::results of recursions
def hook invisit::def hook invisit
overridden code fragment::overridden code fragment
binaryeulertour base class::binaryeulertour base class
providing a specialized::providing a specialized
tour for binary::tour for binary
trees the original::trees the original
original eulertour base::original eulertour base
tree to demonstrate::tree to demonstrate
develop a subclass::develop a subclass
subclass that computes::subclass that computes
computes a graphical::computes a graphical
geometry is determined::geometry is determined
algorithm that assigns::algorithm that assigns
common in computer::common in computer
graphics that xcoordinates::graphics that xcoordinates
xcoordinates increase left::xcoordinates increase left
right and y-coordinates::right and y-coordinates
y-coordinates increase top::y-coordinates increase top
top to bottom::top to bottom
upper left corner::upper left corner
computer screen code::computer screen code
screen code fragment::screen code fragment
subclass that implements::subclass that implements
algorithm for assigning::algorithm for assigning
tree we adapt::tree we adapt
adapt the binaryeulertour::adapt the binaryeulertour
framework by introducing::framework by introducing
introducing additional state::introducing additional state
count instance variable::count instance variable
variable that represents::variable that represents
represents the number::represents the number
performed the x-coordinate::performed the x-coordinate
position is set::position is set
class for computing::class for computing
call the parent::call the parent
count of processed::count of processed
serialized by count::serialized by count
y-coordinate is depth::y-coordinate is depth
processed nodes code::processed nodes code
nodes code fragment::nodes code fragment
class that computes::class that computes
original tree supports::original tree supports
tree supports setx::tree supports setx
setx and sety::setx and sety
represent the structure::represent the structure
support for constructing::support for constructing
constructing such trees::constructing such trees
displaying and evaluating::displaying and evaluating
evaluating the arithmetic::evaluating the arithmetic
represents our expressiontree::represents our expressiontree
class is defined::class is defined
subclass of linkedbinarytree::subclass of linkedbinarytree
mutators to construct::mutators to construct
construct such trees::construct such trees
trees each internal::trees each internal
node must store::node must store
store a string::store a string
string that defines::string that defines
defines a binary::defines a binary
leaf must store::leaf must store
store a numeric::store a numeric
representing a numeric::representing a numeric
build arbitrarily complex::build arbitrarily complex
arbitrarily complex expression::arbitrarily complex expression
complex expression trees::complex expression trees
trees for compound::trees for compound
compound arithmetic expressions::compound arithmetic expressions
class to support::class to support
support two basic::support two basic
two basic forms::two basic forms
forms of initialization::forms of initialization
create a tree::create a tree
tree storing string::tree storing string
structures of existing::structures of existing
existing expressiontree instances::existing expressiontree instances
class formally inherits::class formally inherits
inherits from linkedbinarytree::inherits from linkedbinarytree
defined in section::defined in section
root to create::root to create
create an initial::create an initial
storing the token::storing the token
perform run-time checking::perform run-time checking
parameters to determine::parameters to determine
invoked the one-parameter::invoked the one-parameter
inherited attach method::inherited attach method
method to incorporate::method to incorporate
incorporate the structure::incorporate the structure
trees as subtrees::trees as subtrees
composing a parenthesized::composing a parenthesized
parenthesized string representation::parenthesized string representation
representation a string::representation a string
existing expression tree::existing expression tree
expression tree instance::expression tree instance
produced by displaying::produced by displaying
displaying tree elements::displaying tree elements
opening and closing::opening and closing
closing parentheses inserted::closing parentheses inserted
support a special::support a special
special str method::special str method
efficient to first::efficient to first
build a sequence::build a sequence
sequence of individual::sequence of individual
discussion of composing::discussion of composing
strings in section::strings in section
implementation of str::implementation of str
recursive method named::recursive method named
method named parenthesize::method named parenthesize
named parenthesize recur::named parenthesize recur
recur that appends::recur that appends
appends a series::appends a series
series of strings::series of strings
list these methods::list these methods
methods are included::methods are included
included in code::included in code
create an expression::create an expression
single parameter form::single parameter form
return string representation::return string representation
sequence of piecewise::sequence of piecewise
strings to compose::strings to compose
def parenthesize recur::def parenthesize recur
append piecewise representation::append piecewise representation
subtree to resulting::subtree to resulting
trees expression tree::trees expression tree
expression tree evaluation::expression tree evaluation
evaluation the numeric::evaluation the numeric
calculate the result::calculate the result
computation that position::computation that position
position designates pseudo-code::position designates pseudo-code
algorithm evaluate recur::algorithm evaluate recur
leaf then return::leaf then return
return the value::return the value
recur for evaluating::recur for evaluating
evaluating the expression::evaluating the expression
expression tree rooted::expression tree rooted
implement this algorithm::implement this algorithm
python expressiontree class::python expressiontree class
provide a public::provide a public
public evaluate method::public evaluate method
invoked on instance::invoked on instance
nonpublic evaluate recur::nonpublic evaluate recur
evaluate recur method::evaluate recur method
method that computes::method that computes
computes the value::computes the value
return the numeric::return the numeric
return self evaluate::return self evaluate
def evaluate recur::def evaluate recur
result of subtree::result of subtree
element is numeric::element is numeric
return left val::return left val
val + right::val + right
val right val::val right val
val # treat::val # treat
multiplication code fragment::multiplication code fragment
support for evaluating::support for evaluating
evaluating an expressiontree::evaluating an expressiontree
building an expression::building an expression
tree the constructor::tree the constructor
functionality for combining::functionality for combining
combining existing trees::combining existing trees
trees to build::trees to build
build larger expression::build larger expression
larger expression trees::larger expression trees
question still remains::question still remains
construct a tree::construct a tree
tree that represents::tree that represents
represents an expression::represents an expression
automate this process::automate this process
bottom-up construction algorithm::bottom-up construction algorithm
first be tokenized::first be tokenized
numbers are treated::numbers are treated
parenthesized the algorithm::parenthesized the algorithm
push that string::push that string
create a single-node::create a single-node
single-node expression tree::single-node expression tree
tree t storing::tree t storing
pop the top::pop the top
top three items::top three items
represent a subexpression::represent a subexpression
push the resulting::push the resulting
stack we repeat::stack we repeat
stand-alone function named::stand-alone function named
function named build::function named build
named build expression::named build expression
build expression tree::build expression tree
produces and returns::produces and returns
assuming the input::assuming the input
def build expression::def build expression
returns an expressiontree::returns an expressiontree
list as stack::list as stack
push the operator::push the operator
symbol in chapter::symbol in chapter
introduced the tree::introduced the tree
tree data structure::tree data structure
structure and demonstrated::structure and demonstrated
demonstrated a variety::demonstrated a variety
variety of applications::variety of applications
applications one important::applications one important
described on page::described on page
search tree structure::search tree structure
implement a sorted::implement a sorted
raise a keyerror::raise a keyerror
keyerror ; implemented::keyerror ; implemented
implemented with getitem::implemented with getitem
replacing the existing::replacing the existing
item with key::item with key
implemented with setitem::implemented with setitem
setitem method del::setitem method del
remove from map::remove from map
implemented with delitem::implemented with delitem
method the sorted::method the sorted
sorted map adt::sorted map adt
map adt includes::map adt includes
adt includes additional::adt includes additional
includes additional functionality::includes additional functionality
iteration reports keys::iteration reports keys
keys in sorted::keys in sorted
supporting additional searches::supporting additional searches
excellent data structure::excellent data structure
structure for storing::structure for storing
order relation defined::order relation defined
position p storing::position p storing
storing a key-value::storing a key-value
matter of convenience::matter of convenience
diagram the values::diagram the values
affect the placement::affect the placement
placement of items::placement of items
search tree figure::search tree figure
tree with integer::tree with integer
keys we omit::keys we omit
omit the display::omit the display
order of items::order of items
search trees navigating::search trees navigating
navigating a binary::navigating a binary
tree we begin::tree we begin
begin by demonstrating::begin by demonstrating
tree hierarchically represents::tree hierarchically represents
represents the sorted::represents the sorted
placement of keys::placement of keys
search tree assures::search tree assures
search tree visits::search tree visits
tree visits positions::tree visits positions
positions in increasing::positions in increasing
visited in order::visited in order
subtree by induction::subtree by induction
recursive inorder traversal::recursive inorder traversal
subtree will produce::subtree will produce
subtree in increasing::subtree in increasing
search tree property::search tree property
subtree have keys::subtree have keys
keys strictly smaller::keys strictly smaller
visiting the root::visiting the root
extends the increasing::extends the increasing
order of keys::order of keys
subtree will visit::subtree will visit
visit those keys::visit those keys
keys in increasing::keys in increasing
executed in linear::executed in linear
produce a sorted::produce a sorted
map in linear::map in linear
provide nonrecursive descriptions::provide nonrecursive descriptions
descriptions of operations::descriptions of operations
binary search relative::binary search relative
keys our generic::keys our generic
generic binary tree::generic binary tree
adt from chapter::adt from chapter
allowing direct navigation::allowing direct navigation
navigation using methods::navigation using methods
provide additional navigation::provide additional navigation
additional navigation based::additional navigation based
last position chapter::last position chapter
trees the first::trees the first
located by starting::located by starting
starting a walk::starting a walk
root and continuing::root and continuing
exists by symmetry::exists by symmetry
position is reached::position is reached
reached by repeated::reached by repeated
steps rightward starting::steps rightward starting
root the successor::root the successor
successor is leftmost::successor is leftmost
computing the successor::computing the successor
tree the rationale::tree the rationale
process is based::process is based
correspondence of proposition::correspondence of proposition
flow of control::flow of control
inorder traversal returns::inorder traversal returns
parent s subtree::parent s subtree
traversal is complete::traversal is complete
ancestor is reached::ancestor is reached
recursion is returning::recursion is returning
ancestor is found::ancestor is found
successor a symmetric::successor a symmetric
defined to determine::defined to determine
determine the predecessor::determine the predecessor
single downward walk::single downward walk
single upward walk::single upward walk
position will execute::position will execute
leave a formal::leave a formal
fact to exercise::fact to exercise
intuitively the upward::intuitively the upward
upward and downward::upward and downward
downward paths mimic::downward paths mimic
paths mimic steps::paths mimic steps
argument was made::argument was made
namesake search algorithm::namesake search algorithm
attempt to locate::attempt to locate
tree by viewing::tree by viewing
denote as p.key::denote as p.key
answer is equal::answer is equal
answer is greater::answer is greater
search for key::search for key
describe this approach::describe this approach
approach in code::approach in code
key k occurs::key k occurs
call to treesearch::call to treesearch
key is found::key is found
getitem map operation::getitem map operation
operation would return::operation would return
treesearch algorithm returns::treesearch algorithm returns
returns the final::returns the final
final position explored::final position explored
search trees analysis::search trees analysis
analysis of binary::analysis of binary
binary tree searching::binary tree searching
searching the analysis::searching the analysis
simple algorithm treesearch::simple algorithm treesearch
treesearch is recursive::treesearch is recursive
recursive and executes::recursive and executes
executes a constant::executes a constant
number of primitive::number of primitive
call each recursive::call each recursive
call of treesearch::call of treesearch
treesearch is made::treesearch is made
positions is bounded::positions is bounded
illustrating the running::illustrating the running
tree the figure::tree the figure
figure uses standard::figure uses standard
subroutine for implementing::subroutine for implementing
implementing the getitem::implementing the getitem
setitem and delitem::setitem and delitem
locate an existing::locate an existing
key to implement::key to implement
implement sorted map::implement sorted map
sorted map operations::sorted map operations
combine this search::combine this search
search with traversal::search with traversal
operations will run::operations will run
run in worst-case::run in worst-case
tree with height::tree with height
implement the find::implement the find
find range method::find range method
number of items::number of items
number of entries::number of entries
chapter we show::chapter we show
show various strategies::show various strategies
strategies to maintain::strategies to maintain
maintain an upper::maintain an upper
insertions and deletions::insertions and deletions
algorithms for inserting::algorithms for inserting
inserting or deleting::inserting or deleting
insertion the map::insertion the map
assuming the map::assuming the map
map is nonempty::map is nonempty
item s existing::item s existing
value is reassigned::value is reassigned
search the binary::search the binary
property is sustained::property is sustained
search would expect::search would expect
node with item::node with item
algorithm for inserting::algorithm for inserting
inserting a key-value::inserting a key-value
finding the position::finding the position
position to insert::position to insert
insert is shown::insert is shown
search trees deletion::search trees deletion
trees deletion deleting::trees deletion deleting
deleting an item::deleting an item
bit more complex::bit more complex
complex than inserting::complex than inserting
delete an item::delete an item
begin by calling::begin by calling
find the position::find the position
storing an item::storing an item
search is successful::search is successful
implemented when introducing::implemented when introducing
introducing update methods::introducing update methods
declared a nonpublic::declared a nonpublic
deletes a node::deletes a node
precisely the desired::precisely the desired
behavior it removes::behavior it removes
removes the item::removes the item
map while maintaining::map while maintaining
assuring the upkeep::assuring the upkeep
create a hole::create a hole
two orphaned children::two orphaned children
notation of section::notation of section
deleted at position::deleted at position
immediately preceding key::immediately preceding key
property is satisfied::property is satisfied
delete the node::delete the node
searching and insertion::searching and insertion
involves the traversal::involves the traversal
single path downward::single path downward
moving an item::moving an item
removing a node::removing a node
path and promoting::path and promoting
item to delete::item to delete
trees 11.1.4 python::trees 11.1.4 python
11.1.4 python implementation::11.1.4 python implementation
implementation in code::implementation in code
define a treemap::define a treemap
implements the sorted::implements the sorted
tree in fact::tree in fact
general we support::general we support
standard map operations::standard map operations
additional sorted map::additional sorted map
positional operations including::positional operations including
treemap class takes::treemap class takes
class takes advantage::class takes advantage
advantage of multiple::advantage of multiple
inheritance for code::inheritance for code
class of section::class of section
positional binary tree::positional binary tree
class from code::class from code
10.1.4 to provide::10.1.4 to provide
key-value composite item::key-value composite item
collections.mutablemapping abstract base::collections.mutablemapping abstract base
class we subclass::class we subclass
subclass the nested::subclass the nested
support more specific::support more specific
adt we define::adt we define
define several nonpublic::define several nonpublic
notably a subtree::notably a subtree
method that corresponds::method that corresponds
algorithm of code::algorithm of code
returns a position::returns a position
nearest key greater::nearest key greater
public find position::public find position
adt when making::adt when making
making structural modifications::making structural modifications
rely on nonpublic::rely on nonpublic
inherited methods remain::inherited methods remain
methods remain nonpublic::methods remain nonpublic
violated through misuse::violated through misuse
code is peppered::code is peppered
peppered with calls::peppered with calls
calls to presumed::calls to presumed
presumed methods named::presumed methods named
methods named rebalance::methods named rebalance
named rebalance insert::named rebalance insert
access these methods::access these methods
serve as hooks::serve as hooks
hooks for future::hooks for future
balancing search trees::balancing search trees
code code fragment::code code fragment
beginning of treemap::beginning of treemap
treemap class including::treemap class including
class including redefined::class including redefined
including redefined position::including redefined position
redefined position class::redefined position class
class and nonpublic::class and nonpublic
nonpublic search utilities::nonpublic search utilities
search utilities code::search utilities code
utilities code fragment::utilities code fragment
accessor code fragment::accessor code fragment
methods are omitted::methods are omitted
sake of brevity::sake of brevity
brevity code fragment::brevity code fragment
tree an analysis::tree an analysis
maximum path length::maximum path length
tree is proportional::tree is proportional
implementations of map::implementations of map
map operations getitem::map operations getitem
delitem each begin::delitem each begin
subtree search utility::subtree search utility
utility which traces::utility which traces
traces a path::traces a path
node to determine::node to determine
continue the search::continue the search
search similar paths::search similar paths
paths are traced::paths are traced
computing a position::computing a position
position s inorder::position s inorder
predecessor or successor::predecessor or successor
successor we note::successor we note
method has worst-case::method has worst-case
successive calls made::successive calls made
call to iter::call to iter
require a total::require a total
edge is traced::edge is traced
amortized time bounds::amortized time bounds
bounds a similar::bounds a similar
call to find::call to find
range that reports::range that reports
reports s results::reports s results
search trees table::search trees table
worst-case running times::worst-case running times
denote the current::denote the current
reported by find::reported by find
map a binary::map a binary
height is small::height is small
yields logarithmic-time performance::yields logarithmic-time performance
ordered list implementation::ordered list implementation
worst-case configuration arises::worst-case configuration arises
items with keys::items with keys
increasing or decreasing::increasing or decreasing
decreasing order figure::decreasing order figure
tree with linear::tree with linear
obtained by inserting::obtained by inserting
entries with keys::entries with keys
series of insertions::series of insertions
insertions and removals::insertions and removals
removals of keys::removals of keys
keys has expected::keys has expected
requiring careful mathematical::requiring careful mathematical
careful mathematical language::careful mathematical language
sophisticated probability theory::sophisticated probability theory
theory in applications::theory in applications
guarantee the random::guarantee the random
nature of updates::nature of updates
rely on variations::rely on variations
variations of search::variations of search
guarantee a worst-case::guarantee a worst-case
balanced search trees::balanced search trees
assume a random::assume a random
standard binary search::standard binary search
search tree supports::search tree supports
expected running times::expected running times
basic map operations::basic map operations
sequences of operations::sequences of operations
operations may lead::operations may lead
explore four search::explore four search
four search tree::four search tree
search tree algorithms::search tree algorithms
algorithms that provide::algorithms that provide
provide stronger performance::provide stronger performance
stronger performance guarantees::stronger performance guarantees
four data structures::four data structures
based on augmenting::based on augmenting
augmenting a standard::augmenting a standard
tree with occasional::tree with occasional
operations to reshape::operations to reshape
reshape the tree::reshape the tree
tree and reduce::tree and reduce
reduce its height::reduce its height
height the primary::height the primary
operation to rebalance::operation to rebalance
rebalance a binary::rebalance a binary
rotate a child::rotate a child
diagrammed in figure::diagrammed in figure
tree a rotation::tree a rotation
performed to transform::performed to transform
transform the left::transform the left
keys in subtree::keys in subtree
maintain the binary::maintain the binary
relink the subtree::relink the subtree
subtree of items::subtree of items
keys that lie::keys that lie
labeled t2 represents::labeled t2 represents
subtree of position::subtree of position
single rotation modifies::single rotation modifies
modifies a constant::modifies a constant
number of parent-child::number of parent-child
binary tree representation::binary tree representation
modified while maintaining::modified while maintaining
maintaining the search::maintaining the search
performed to avoid::performed to avoid
avoid highly unbalanced::avoid highly unbalanced
highly unbalanced tree::highly unbalanced tree
unbalanced tree configurations::unbalanced tree configurations
formation of figure::formation of figure
reduces the depth::reduces the depth
node in subtree::node in subtree
increasing the depth::increasing the depth
depth of nodes::depth of nodes
nodes in subtree::nodes in subtree
combined to provide::combined to provide
provide broader rebalancing::provide broader rebalancing
restructure the subtree::restructure the subtree
order to reduce::order to reduce
illustrated in figure::illustrated in figure
describing a trinode::describing a trinode
rename the positions::rename the positions
four possible orientations::four possible orientations
relabeling the trinode::relabeling the trinode
trinode restructuring replaces::trinode restructuring replaces
makes the children::makes the children
four previous children::four previous children
maintaining the inorder::maintaining the inorder
grandparent z output::grandparent z output
single or double::single or double
replace the subtree::replace the subtree
trinode restructuring operation::trinode restructuring operation
tree in practice::tree in practice
tree t caused::tree t caused
implemented through case::implemented through case
double rotation arises::double rotation arises
arises when position::arises when position
originally its grandparent::originally its grandparent
restructuring is completed::restructuring is completed
require a single::require a single
require a double::require a double
trees 11.2.1 python::trees 11.2.1 python
11.2.1 python framework::11.2.1 python framework
framework for balancing::framework for balancing
trees our treemap::trees our treemap
concrete map implementation::concrete map implementation
perform any explicit::perform any explicit
explicit balancing operations::explicit balancing operations
designed that class::designed that class
subclasses that implement::subclasses that implement
implement more advanced::implement more advanced
advanced tree-balancing algorithms::advanced tree-balancing algorithms
algorithms a summary::algorithms a summary
hierarchy is shown::hierarchy is shown
hooks for rebalancing::hooks for rebalancing
operations our implementation::operations our implementation
operations in section::operations in section
section 11.1.4 includes::section 11.1.4 includes
11.1.4 includes strategic::11.1.4 includes strategic
includes strategic calls::includes strategic calls
methods that serve::methods that serve
call to rebalance::call to rebalance
node is added::node is added
tree at position::tree at position
position p identifying::position p identifying
identifying the parent::identifying the parent
provide a hook::provide a hook
item at position::item at position
tree is accessed::tree is accessed
splay tree structure::splay tree structure
restructure a tree::restructure a tree
frequently accessed items::frequently accessed items
items are brought::items are brought
root we provide::root we provide
provide trivial declarations::provide trivial declarations
subclass of treemap::subclass of treemap
treemap may override::treemap may override
methods to implement::methods to implement
implement a nontrivial::implement a nontrivial
action to rebalance::action to rebalance
rebalance a tree::rebalance a tree
template method design::template method design
method design pattern::method design pattern
def rebalance insert::def rebalance insert
def rebalance delete::def rebalance delete
def rebalance access::def rebalance access
continued from code::continued from code
rebalancing hooks nonpublic::rebalancing hooks nonpublic
hooks nonpublic methods::hooks nonpublic methods
methods for rotating::methods for rotating
rotating and restructuring::rotating and restructuring
form of support::form of support
support for balanced::support for balanced
inclusion of nonpublic::inclusion of nonpublic
nonpublic utility methods::nonpublic utility methods
utility methods rotate::utility methods rotate
rotate and restructure::rotate and restructure
implement a single::implement a single
beginning of section::beginning of section
public treemap operations::public treemap operations
promote code reuse::promote code reuse
reuse by providing::reuse by providing
providing these implementation::providing these implementation
subclasses our implementations::subclasses our implementations
implementations are provided::implementations are provided
simplify the code::simplify the code
define an additional::define an additional
additional relink utility::additional relink utility
properly links parent::properly links parent
parent and child::parent and child
including the special::including the special
reference the focus::reference the focus
redefining the relationship::redefining the relationship
relinking a rotated::relinking a rotated
shifting the middle::shifting the middle
perform a single::perform a single
described in figure::described in figure
factory for creating::factory for creating
creating tree nodes::creating tree nodes
nodes we draw::nodes we draw
original linkedbinarytree subclass::original linkedbinarytree subclass
subclass the low-level::subclass the low-level
node is provided::node is provided
nested node class::nested node class
class within linkedbinarytree::class within linkedbinarytree
tree-balancing strategies require::tree-balancing strategies require
require that auxiliary::require that auxiliary
information be stored::information be stored
node to guide::node to guide
guide the balancing::guide the balancing
process those classes::process those classes
classes will override::classes will override
override the nested::override the nested
class to provide::class to provide
add right method::add right method
instantiate the node::instantiate the node
syntax self node::syntax self node
qualified name linkedbinarytree::qualified name linkedbinarytree
expression self node::expression self node
node is applied::node is applied
subclass has overridden::subclass has overridden
overridden the definition::overridden the definition
newly defined node::newly defined node
defined node class::defined node class
class this technique::class this technique
factory method design::factory method design
provide a subclass::provide a subclass
subclass the means::subclass the means
means to control::means to control
control the type::control the type
type of node::type of node
created within methods::created within methods
parent class chapter::parent class chapter
search trees code::search trees code
trees code fragment::trees code fragment
provide nonpublic utilities::provide nonpublic utilities
utilities for balanced::utilities for balanced
balanced search tree::balanced search tree
search tree subclasses::search tree subclasses
trees the treemap::trees the treemap
efficient map data::efficient map data
map data structure::map data structure
operations is linear::operations is linear
series of operations::series of operations
describe a simple::describe a simple
simple balancing strategy::simple balancing strategy
strategy that guarantees::strategy that guarantees
guarantees worst-case logarithmic::guarantees worst-case logarithmic
worst-case logarithmic running::worst-case logarithmic running
fundamental map operations::fundamental map operations
map operations definition::map operations definition
tree the simple::tree the simple
add a rule::add a rule
search tree definition::search tree definition
maintain a logarithmic::maintain a logarithmic
defined the height::defined the height
number of edges::number of edges
easier for explanation::easier for explanation
position has height::position has height
define the height::define the height
characterizes the structure::characterizes the structure
nodes height-balance property::nodes height-balance property
differ by atmost::differ by atmost
satisfies the height-balance::satisfies the height-balance
adel son-vel skii::adel son-vel skii
skii and landis::skii and landis
tree the keys::tree the keys
items are shown::items are shown
inside the nodes::inside the nodes
nodes are shown::nodes are shown
subtrees having height::subtrees having height
tree the height-balance::tree the height-balance
consequence of keeping::consequence of keeping
keeping the height::keeping the height
avl tree storing::avl tree storing
storing n entries::storing n entries
find an upper::find an upper
easier to work::easier to work
problem of finding::problem of finding
finding a lower::finding a lower
step to derive::step to derive
begin by noting::begin by noting
tree of height::tree of height
nodes having height::nodes having height
subtrees are avl::subtrees are avl
taking the root::taking the root
root into account::root into account
formula that relates::formula that relates
properties of fibonacci::properties of fibonacci
formalize that observation::formalize that observation
strictly increasing function::strictly increasing function
exponentially to show::exponentially to show
show this fact::show this fact
series of inequalities::series of inequalities
trees by substituting::trees by substituting
entries has height::entries has height
maintain the height-balance::maintain the height-balance
insertion or deletion::insertion or deletion
deletion 11.3.1 update::deletion 11.3.1 update
11.3.1 update operations::11.3.1 update operations
position is balanced::position is balanced
height-balance property characterizing::height-balance property characterizing
property characterizing avl::property characterizing avl
characterizing avl trees::characterizing avl trees
trees is equivalent::trees is equivalent
balanced the insertion::balanced the insertion
insertion and deletion::insertion and deletion
operations for avl::operations for avl
avl trees begin::avl trees begin
operation to restore::operation to restore
restore the balance::restore the balance
change insertion suppose::change insertion suppose
suppose that tree::suppose that tree
tree t satisfies::tree t satisfies
item an insertion::item an insertion
action may violate::action may violate
violate the height-balance::violate the height-balance
unbalanced are ancestors::unbalanced are ancestors
positions whose subtrees::positions whose subtrees
subtrees have changed::subtrees have changed
fix any unbalance::fix any unbalance
search trees figure::search trees figure
node for key::node for key
nodes storing keys::nodes storing keys
trinode restructuring restores::trinode restructuring restores
restores the height-balance::restores the height-balance
property we show::property we show
show the heights::show the heights
heights of nodes::heights of nodes
identify the nodes::identify the nodes
restructuring we restore::restructuring we restore
simple search-and-repair strategy::simple search-and-repair strategy
position we encounter::position we encounter
denote the child::denote the child
tie and position::tie and position
rebalance the subtree::rebalance the subtree
calling the trinode::calling the trinode
trinode restructuring method::trinode restructuring method
insertion is portrayed::insertion is portrayed
argue the correctness::argue the correctness
process in reestablishing::process in reestablishing
reestablishing the avl::reestablishing the avl
avl height-balance property::avl height-balance property
subtrees with equal::subtrees with equal
increased its height::increased its height
previously had equal-height::previously had equal-height
denote the height::denote the height
restructuring has height::restructuring has height
precisely the height::precisely the height
unbalanced becomes balanced::unbalanced becomes balanced
restores the heightbalance::restores the heightbalance
heightbalance property globally::heightbalance property globally
property globally figure::property globally figure
insertion in subtree::insertion in subtree
balance with trinode::balance with trinode
trinode restructuring notice::trinode restructuring notice
trees deletion recall::trees deletion recall
regular binary search::regular binary search
search tree results::search tree results
change may violate::change may violate
position p represents::position p represents
represents the parent::represents the parent
node in tree::node in tree
unbalanced node figure::unbalanced node figure
removing the node::removing the node
node storing key::node storing key
root becomes unbalanced::root becomes unbalanced
restructuring to restore::restructuring to restore
first unbalanced position::first unbalanced position
unbalanced position encountered::unbalanced position encountered
note that position::note that position
perform a restructure::perform a restructure
subtree is rooted::subtree is rooted
middle position denoted::middle position denoted
operation the height-balance::operation the height-balance
property is guaranteed::property is guaranteed
restructuring may reduce::restructuring may reduce
reduce the height::reduce the height
restore its balance::restore its balance
restructurings are sufficient::restructurings are sufficient
sufficient to restore::sufficient to restore
restore the height-balance::restore the height-balance
height-balance property performance::height-balance property performance
performance of avl::performance of avl
trees by proposition::trees by proposition
items is guaranteed::items is guaranteed
search tree operation::search tree operation
operation had running::operation had running
running times bounded::running times bounded
work in maintaining::work in maintaining
maintaining balance factors::maintaining balance factors
factors and restructuring::factors and restructuring
restructuring an avl::restructuring an avl
traditional map operations::traditional map operations
map operations run::map operations run
tree we summarize::tree we summarize
summarize these results::summarize these results
results in table::results in table
illustrate this performance::illustrate this performance
performance in figure::performance in figure
multiway search tree::multiway search tree
children other forms::children other forms
forms of multiway::forms of multiway
multiway search trees::multiway search trees
discussed in section::discussed in section
11.5.1 multiway search::11.5.1 multiway search
search trees recall::search trees recall
recall that general::recall that general
trees are defined::trees are defined
discuss how general::discuss how general
search trees map::search trees map
trees map items::trees map items
map items stored::map items stored
tree are pairs::tree are pairs
children we define::children we define
define a multiway::define a multiway
stores an ordered::stores an ordered
set of keys::set of keys
special fictitious keys::special fictitious keys
key k stored::key k stored
two keys stored::two keys stored
viewpoint gives rise::viewpoint gives rise
forms the basis::forms the basis
algorithm for searching::algorithm for searching
store any data::store any data
data and serve::data and serve
placeholders these external::placeholders these external
convention with binary::convention with binary
sake of exposition::sake of exposition
store anything based::store anything based
number of key-value::number of key-value
search tree proposition::search tree proposition
n-item multiway search::n-item multiway search
nodes we leave::nodes we leave
search trees searching::search trees searching
multiway tree searching::multiway tree searching
simple we perform::simple we perform
search by tracing::search by tracing
compare the key::compare the key
reach an external::reach an external
terminates unsuccessfully data::terminates unsuccessfully data
unsuccessfully data structures::unsuccessfully data structures
structures for representing::structures for representing
representing multiway search::representing multiway search
trees in section::trees in section
discuss a linked::discuss a linked
linked data structure::linked data structure
representing a general::representing a general
tree this representation::tree this representation
tree to implement::tree to implement
implement a multiway::implement a multiway
collection that stores::collection that stores
stores the items::stores the items
primary operation needed::primary operation needed
needed when navigating::needed when navigating
navigating a node::navigating a node
node is finding::node is finding
finding the smallest::finding the smallest
natural to model::natural to model
model the information::model the information
secondary data structure::secondary data structure
structure to support::structure to support
support the primary::support the primary
primary data structure::primary data structure
data structure represented::data structure represented
entire multiway search::entire multiway search
tree this reasoning::tree this reasoning
map to represent::map to represent
avoid any circular::avoid any circular
problem to create::problem to create
sortedtablemap of section::sortedtablemap of section
value in case::value in case
match for key::match for key
secondary structure map::secondary structure map
processing a d-node::processing a d-node
binary search operation::binary search operation
denote the maximum::denote the maximum
performing a search::performing a search
primary efficiency goal::primary efficiency goal
height as small::height as small
discuss a strategy::discuss a strategy
strategy that caps::strategy that caps
guaranteeing a height::guaranteeing a height
operations a multiway::operations a multiway
secondary data structures::secondary data structures
data structures stored::data structures stored
primary multiway tree::primary multiway tree
multiway tree balanced::multiway tree balanced
tree this data::tree this data
data structure achieves::data structure achieves
achieves these goals::achieves these goals
goals by maintaining::goals by maintaining
maintaining two simple::maintaining two simple
two simple properties::two simple properties
four children depth::four children depth
children depth property::children depth property
assume that external::assume that external
nodes are empty::nodes are empty
sake of simplicity::sake of simplicity
describe our search::describe our search
search and update::search and update
update methods assuming::update methods assuming
assuming that external::assuming that external
nodes are real::nodes are real
strictly needed enforcing::strictly needed enforcing
enforcing the size::enforcing the size
search tree simple::search tree simple
children another implication::children another implication
represent the secondary::represent the secondary
secondary map stored::secondary map stored
enforces an important::enforces an important
storing n items::storing n items
items we justify::items we justify
justify the proposition::justify the proposition
proposition by showing::proposition by showing
showing the claim::showing the claim
justify this claim::justify this claim
nodes at depth::nodes at depth
taking the logarithm::taking the logarithm
logarithm in base::logarithm in base
justifies our claim::justifies our claim
terms are rearranged::terms are rearranged
size and depth::size and depth
properties are sufficient::properties are sufficient
sufficient for keeping::sufficient for keeping
keeping a multiway::keeping a multiway
implies that performing::implies that performing
crucial design choice::crucial design choice
maintaining the size::maintaining the size
depth properties requires::depth properties requires
requires some effort::requires some effort
effort after performing::effort after performing
discuss these operations::discuss these operations
operations next insertion::operations next insertion
insertion to insert::insertion to insert
perform a search::perform a search
item into node::item into node
insertion method preserves::insertion method preserves
preserves the depth::preserves the depth
level as existing::level as existing
existing external nodes::existing external nodes
violate the size::violate the size
previously a 4-node::previously a 4-node
tree this type::tree this type
type of violation::type of violation
overflow at node::overflow at node
resolved in order::resolved in order
order to restore::order to restore
restore the properties::restore the properties
remedy the overflow::remedy the overflow
perform a split::perform a split
3-node with children::3-node with children
children c1,c2,c3 storing::children c1,c2,c3 storing
c1,c2,c3 storing keys::c1,c2,c3 storing keys
2-node with children::2-node with children
children c4,c5 storing::children c4,c5 storing
c4,c5 storing key::c4,c5 storing key
w__ become children::w__ become children
operation on node::operation on node
overflow may occur::overflow may occur
triggers in turn::triggers in turn
turn a split::turn a split
split at node::split at node
operation either eliminates::operation either eliminates
eliminates the overflow::eliminates the overflow
overflow or propagates::overflow or propagates
node we show::node we show
show a sequence::show a sequence
sequence of insertions::sequence of insertions
causing an overflow::causing an overflow
analysis of insertion::analysis of insertion
tree because dmax::tree because dmax
node to insert::node to insert
key and child::key and child
single split operation::single split operation
operation the number::operation the number
number of cascading::number of cascading
cascading split operations::cascading split operations
operations is bounded::operations is bounded
process also runs::process also runs
perform an insertion::perform an insertion
tree t webegin::tree t webegin
operation by performing::operation by performing
key k removing::key k removing
removing an item::removing an item
removed is stored::removed is stored
children are external::children are external
external nodes suppose::external nodes suppose
remove is stored::remove is stored
swap the item::swap the item
find the rightmost::find the rightmost
rightmost internal node::rightmost internal node
children of node::children of node
item to remove::item to remove
remove the item::remove the item
described above preserves::described above preserves
remove an external::remove an external
previously a 2-node::previously a 2-node
underflow at node::underflow at node
remedy an underflow::remedy an underflow
perform a transfer::perform a transfer
move a child::move a child
perform a fusion::perform a fusion
move a key::move a key
sequence of removals::sequence of removals
causing an underflow::causing an underflow
operation at node::operation at node
underflow to occur::underflow to occur
triggers a transfer::triggers a transfer
transfer or fusion::transfer or fusion
number of fusion::number of fusion
sequence of fusions::sequence of fusions
final tree performance::final tree performance
trees the asymptotic::trees the asymptotic
tree is identical::tree is identical
guaranteed logarithmic bounds::guaranteed logarithmic bounds
pairs is based::pairs is based
fusion operation takes::fusion operation takes
provide for fast::provide for fast
fast map search::fast map search
structure we discuss::structure we discuss
trees although avl::trees although avl
number of nice::number of nice
disadvantages for instance::disadvantages for instance
trees may require::trees may require
require many restructure::require many restructure
require many split::require many split
split or fusing::split or fusing
insertion or removal::insertion or removal
removal the data::removal the data
update in order::update in order
order to stay::order to stay
nodes colored red::nodes colored red
red and black::red and black
root is black::root is black
black red property::black red property
black depth property::black depth property
number of black::number of black
red nodes drawn::red nodes drawn
drawn in white::drawn in white
white the common::white the common
common black depth::common black depth
make the red-black::make the red-black
red-black tree definition::red-black tree definition
definition more intuitive::definition more intuitive
intuitive by noting::intuitive by noting
noting an interesting::noting an interesting
correspondence between red-black::correspondence between red-black
excluding their trivial::excluding their trivial
trivial external nodes::trivial external nodes
tree by merging::tree by merging
merging every red::merging every red
storing the entry::storing the entry
red-black tree corresponds::red-black tree corresponds
red-black tree contributes::red-black tree contributes
tree by coloring::tree by coloring
coloring each node::coloring each node
node w black::node w black
grouping of red::grouping of red
make the first::make the first
two new red::two new red
red-black tree storing::red-black tree storing
correspondence between nodes::correspondence between nodes
search trees justification::search trees justification
proposition by establishing::proposition by establishing
excluding trivial leaves::excluding trivial leaves
nodes 11.6.1 red-black::nodes 11.6.1 red-black
11.6.1 red-black tree::11.6.1 red-black tree
red-black tree operations::red-black tree operations
operations the algorithm::operations the algorithm
red-black tree takes::red-black tree takes
takes time proportional::takes time proportional
trees and red-black::trees and red-black
trees provides important::trees provides important
updates in red-black::updates in red-black
algorithms for red-black::algorithms for red-black
split and fuse::split and fuse
mimicked by recoloring::mimicked by recoloring
recoloring neighboring red-black::recoloring neighboring red-black
neighboring red-black tree::neighboring red-black tree
red-black tree nodes::red-black tree nodes
nodes a rotation::nodes a rotation
algorithm initially proceeds::algorithm initially proceeds
reach a null::reach a null
storing the item::storing the item
color it black::color it black
color x red::color x red
red this action::red this action
corresponds to inserting::corresponds to inserting
children the insertion::children the insertion
preserves the root::preserves the root
root and depth::root and depth
violate the red::violate the red
parent are red::parent are red
call this violation::call this violation
property a double::property a double
red at node::red at node
remedy a double::remedy a double
red-black trees case::red-black trees case
double red denotes::double red denotes
denotes the fact::denotes the fact
creating a malformed::creating a malformed
4-node this formation::4-node this formation
two red nodes::two red nodes
nodes as siblings::nodes as siblings
fix this problem::fix this problem
perform a trinode::perform a trinode
restructuring is done::restructuring is done
inorder tree traversal::inorder tree traversal
tree traversal replace::tree traversal replace
replace the grandparent::replace the grandparent
keeping inorder relationships::keeping inorder relationships
inorder relationships unchanged::inorder relationships unchanged
unchanged after performing::unchanged after performing
performing the restructure::performing the restructure
color b black::color b black
eliminates the double-red::eliminates the double-red
double-red problem notice::double-red problem notice
tree is incident::tree is incident
tree is unaffected::tree is unaffected
restructuring a red-black::restructuring a red-black
tree to remedy::tree to remedy
search trees case::search trees case
denotes an overflow::denotes an overflow
fix the problem::fix the problem
perform the equivalent::perform the equivalent
parent z red::parent z red
double-red problem reappears::double-red problem reappears
repeat the consideration::repeat the consideration
recoloring either eliminates::recoloring either eliminates
problem at node::problem at node
resolve the double-red::resolve the double-red
number of recolorings::number of recolorings
half the height::half the height
height of tree::height of tree
recoloring to remedy::recoloring to remedy
remedy the double-red::remedy the double-red
sequence of insertion::sequence of insertion
root remains black::root remains black
continues in figure::continues in figure
continued from figure::continued from figure
removal a node::removal a node
originally containing key::originally containing key
node was red::node was red
affect the black::affect the black
introduce any red::introduce any red
resulting tree remains::resulting tree remains
remains a valid::remains a valid
valid red-black tree::valid red-black tree
denotes the shrinking::denotes the shrinking
node was black::node was black
node has black::node has black
removed node represents::removed node represents
represents the black::represents the black
restore the redblack::restore the redblack
properties by recoloring::properties by recoloring
recoloring the promoted::recoloring the promoted
child to black::child to black
leaf is removed::leaf is removed
denotes the removal::denotes the removal
2-node without rebalancing::2-node without rebalancing
item by necessity::item by necessity
sibling whose subtree::sibling whose subtree
subtree has black::subtree has black
remedy this scenario::remedy this scenario
theavy and tlight::theavy and tlight
root of tlight::root of tlight
depth of theavy::depth of theavy
removed black leaf::removed black leaf
leaf and tlight::leaf and tlight
trivially the empty::trivially the empty
subtree that remains::subtree that remains
deletion we describe::deletion we describe
algorithm for rebalancing::algorithm for rebalancing
rebalancing the tree::rebalancing the tree
push the deficit::push the deficit
tree sometimes cascades::tree sometimes cascades
denote the root::denote the root
root of theavy::root of theavy
exists because theavy::exists because theavy
theavy has black::theavy has black
tlight z figure::tlight z figure
subtrees of node::subtrees of node
color in illustrating::color in illustrating
colored either black::colored either black
black or red::black or red
cases to remedy::cases to remedy
remedy a deficit::remedy a deficit
takes the node::takes the node
two we color::two we color
path to tlight::path to tlight
includes one additional::includes one additional
additional black node::additional black node
resolving its deficit::resolving its deficit
deficit in contrast::deficit in contrast
nodes on paths::nodes on paths
remains unchanged resolving::remains unchanged resolving
resolving this case::resolving this case
red child assures::red child assures
4-node in effect::4-node in effect
item previously stored::item previously stored
2-node to resolve::2-node to resolve
resolve the deficiency::resolve the deficiency
child is promoted::child is promoted
resolving a black::resolving a black
deficit in tlight::deficit in tlight
tlight by performing::tlight by performing
performing a trinode::performing a trinode
restructuring as restructure::restructuring as restructure
two possible configurations::two possible configurations
configurations are shown::configurations are shown
two other configurations::two other configurations
configurations are symmetric::configurations are symmetric
left figures denotes::left figures denotes
colored either red::colored either red
red or black::red or black
black the root::black the root
color y red::color y red
resolves the deficit::resolves the deficit
leading to tlight::leading to tlight
affect the number::affect the number
subtrees of theavy::subtrees of theavy
increased the number::increased the number
reduced the number::reduced the number
path to theavy::path to theavy
entire tree rooted::entire tree rooted
propogating the problem::propogating the problem
reversing the colors::reversing the colors
resolves the black::resolves the black
ending the process::ending the process
requiring a cascading::requiring a cascading
red and theavy::red and theavy
black depth equal::black depth equal
perform a rotation::perform a rotation
recolor y black::recolor y black
red this denotes::red this denotes
denotes a reorientation::denotes a reorientation
resolve the deficit::resolve the deficit
black height equal::black height equal
reapply the algorithm::reapply the algorithm
algorithm to resolve::algorithm to resolve
applies or case::applies or case
terminal and case::terminal and case
rotation and recoloring::rotation and recoloring
recoloring about red::recoloring about red
assuming a black::assuming a black
change of orientation::change of orientation
tree this operation::tree this operation
black deficit remains::black deficit remains
remains at node::remains at node
transformation in figure::transformation in figure
sequence of deletions::sequence of deletions
tree a dashed::tree a dashed
represents a branch::represents a branch
resolved we illustrate::resolved we illustrate
illustrate a case::illustrate a case
restructuring in parts::restructuring in parts
recoloring in parts::recoloring in parts
rotation between parts::rotation between parts
recoloring in part::recoloring in part
causing a black::causing a black
handled by restructuring::handled by restructuring
handled by recoloring::handled by recoloring
rotation the black::rotation the black
search trees performance::search trees performance
performance of red-black::performance of red-black
tree in terms::tree in terms
logarithmic time bounds::logarithmic time bounds
number of restructuring::number of restructuring
contrast to avl::contrast to avl
require a logarithmic::require a logarithmic
number of structural::number of structural
red-black tree requires::red-black tree requires
tree requires logarithmic::tree requires logarithmic
number of recoloring::number of recoloring
operations that cascade::operations that cascade
number of rotations::number of rotations
rotations or restructure::rotations or restructure
single map operation::single map operation
map operation proposition::map operation proposition
trinode restructuring justification::trinode restructuring justification
potential upward effort::potential upward effort
effort to remedy::effort to remedy
remedy a double-red::remedy a double-red
logarithmically many recoloring::logarithmically many recoloring
recoloring operations due::recoloring operations due
cascading of case::cascading of case
operation is needed::operation is needed
red-black tree insertion::red-black tree insertion
tree insertion proposition::tree insertion proposition
algorithm for deleting::algorithm for deleting
two restructuring operations::two restructuring operations
restructuring operations justification::restructuring operations justification
search tree deletion::search tree deletion
tree deletion algorithm::tree deletion algorithm
requires time proportional::requires time proportional
subsequent rebalancing takes::subsequent rebalancing takes
rebalancing takes place::rebalancing takes place
node we considered::node we considered
considered three cases::considered three cases
remedy a resulting::remedy a resulting
resulting black deficit::resulting black deficit
black deficit case::black deficit case
requires a trinode::requires a trinode
completes the process::completes the process
case is applied::case is applied
logarithmically many times::logarithmically many times
involves a recoloring::involves a recoloring
nodes per application::nodes per application
requires a rotation::requires a rotation
resolve the problem::resolve the problem
recolorings from case::recolorings from case
rotation from case::rotation from case
restructuring from case::restructuring from case
11.6.2 python implementation::11.6.2 python implementation
implementation a complete::implementation a complete
standard treemap class::standard treemap class
class and relies::class and relies
balancing framework described::balancing framework described
11.2.1 we begin::11.2.1 we begin
overriding the definition::overriding the definition
class to introduce::class to introduce
introduce an additional::introduce an additional
additional boolean field::additional boolean field
field to denote::field to denote
node our constructor::node our constructor
constructor intentionally sets::constructor intentionally sets
sets the color::sets the color
node to red::node to red
approach for inserting::approach for inserting
items we define::items we define
define several additional::define several additional
additional utility functions::additional utility functions
top of code::top of code
aid in setting::aid in setting
setting the color::setting the color
color of nodes::color of nodes
nodes and querying::nodes and querying
querying various conditions::querying various conditions
rebalance insert hook::rebalance insert hook
opportunity to modify::opportunity to modify
modify the tree::modify the tree
node is red::node is red
red by default::red by default
node s parent::node s parent
red to remedy::red to remedy
remedy such violations::remedy such violations
follow the case::follow the case
case analysis described::case analysis described
11.6.1 the rebalancing::11.6.1 the rebalancing
11.6.1 an additional::11.6.1 an additional
tree that hook::tree that hook
hook is invoked::hook is invoked
case analysis depends::case analysis depends
depends on knowing::depends on knowing
engineer that information::engineer that information
information by relying::information by relying
red-black tree properties::red-black tree properties
denotes the parent::denotes the parent
causing a deficit::causing a deficit
productivity experts::productivity experts
thinking nonlinearly::thinking nonlinearly
important nonlinear::important nonlinear
nonlinear data::nonlinear data
data structures::data structures
computing trees::computing trees
trees tree::trees tree
tree structures::tree structures
data organization::data organization
linear data::linear data
array-based lists::array-based lists
linked lists::linked lists
lists trees::lists trees
natural organization::natural organization
ubiquitous structures::ubiquitous structures
file systems::file systems
graphical user::graphical user
user interfaces::user interfaces
web sites::web sites
computer systems::computer systems
organizational relationship::organizational relationship
main terminology::main terminology
tree data::tree data
family trees::family trees
terms parent::terms parent
common words::common words
describe relationships::describe relationships
family tree::family tree
general trees::general trees
tree definitions::tree definitions
abstract data::abstract data
data type::data type
stores elements::stores elements
elements hierarchically::elements hierarchically
top element::top element
parent element::parent element
children elements::children elements
placing elements::placing elements
elements inside::elements inside
inside ovals::inside ovals
straight lines::straight lines
highest element::highest element
botanical tree::botanical tree
africa europe::africa europe
europe asia::europe asia
asia australia::asia australia
australia canada::australia canada
domestic international::domestic international
r&d sales::r&d sales
sales purchasing::sales purchasing
purchasing manufacturing::purchasing manufacturing
manufacturing electronics::manufacturing electronics
nodes representing::nodes representing
fictitious corporation::fictitious corporation
root stores::root stores
stores electronics::stores electronics
root store::root store
internal nodes::internal nodes
nodes store::nodes store
store sales::store sales
formal tree::formal tree
tree definition::tree definition
nodes storing::nodes storing
storing elements::storing elements
parent-child relationship::parent-child relationship
special node::special node
unique parent::unique parent
parent node::parent node
node relationships::node relationships
external nodes::external nodes
hierarchical relationship::hierarchical relationship
file system::file system
regular files::regular files
linux operating::linux operating
operating systems::operating systems
root directory::root directory
hw1 hw2::hw1 hw2
hw2 hw3::hw2 hw3
hw3 pr1::hw3 pr1
pr1 pr2::pr1 pr2
pr2 pr3::pr2 pr3
pr3 grades::pr3 grades
buylow sellhigh::buylow sellhigh
sellhigh market::sellhigh market
market grades::market grades
grades figure::grades figure
tree representing::tree representing
tree consisting::tree consisting
subtree rooted::subtree rooted
pr3 edges::pr3 edges
vice versa::vice versa
consecutive nodes::consecutive nodes
sequence form::sequence form
inheritance relation::inheritance relation
python program::python program
program forms::program forms
single inheritance::single inheritance
exception types::exception types
originally figure::originally figure
baseexception class::baseexception class
user-defined exception::user-defined exception
exception classes::exception classes
specific exception::specific exception
exception class::exception class
empty class::empty class
code fragment::code fragment
single hierarchy::single hierarchy
built-in class::built-in class
class named::class named
named object::named object
ultimate base::ultimate base
base class::base class
indirect base::indirect base
hierarchy pictured::hierarchy pictured
complete class::complete class
class hierarchy::class hierarchy
tree arraybinarytree::tree arraybinarytree
arraybinarytree linkedbinarytree::arraybinarytree linkedbinarytree
linkedbinarytree tree::linkedbinarytree tree
tree binarytree::tree binarytree
binarytree linkedtree::binarytree linkedtree
linkedtree figure::linkedtree figure
inheritance hierarchy::inheritance hierarchy
provide implementations::provide implementations
linkedbinarytree classes::linkedbinarytree classes
highlevel sketches::highlevel sketches
trees ordered::trees ordered
ordered trees::ordered trees
meaningful linear::meaningful linear
linear order::linear order
arranging siblings::arranging siblings
siblings left::siblings left
structured document::structured document
tree corresponds::tree corresponds
show paragraphs::show paragraphs
paragraphs consisting::paragraphs consisting
sentences consisting::sentences consisting
words consisting::words consisting
ordered tree::ordered tree
well-defined order::well-defined order
node figure::node figure
generational relationships::generational relationships
siblings ordered::siblings ordered
organizational chart::organizational chart
unordered tree::unordered tree
tree likewise::tree likewise
parent class::parent class
operating system::operating system
displays entries::displays entries
tree abstract::tree abstract
positional lists::positional lists
tree adt::tree adt
positions satisfy::positions satisfy
parent-child relationships::parent-child relationships
tree structure::tree structure
position object::position object
tree supports::tree supports
element stored::element stored
accessor methods::accessor methods
empty t.is::empty t.is
t.is root::t.is root
return true::return true
t.num children::t.num children
t.is leaf::t.is leaf
children len::children len
t.is empty::t.is empty
positions t.positions::positions t.positions
elements stored::elements stored
natural order::natural order
empty iteration::empty iteration
similar regard::similar regard
generate empty::generate empty
empty iterations::empty iterations
general means::general means
modifying trees::modifying trees
tree update::tree update
update methods::update methods
specific implementations::specific implementations
tree interface::tree interface
specific applications::specific applications
abstract base::abstract base
object-oriented design::object-oriented design
design principle::design principle
public interface::public interface
duck typing::duck typing
queue adt::queue adt
queue interface::queue interface
formal definition::formal definition
concrete implementations::concrete implementations
self-contained classes::self-contained classes
formal mechanism::formal mechanism
concrete classes::concrete classes
tree class::tree class
greater code::greater code
code reuse::code reuse
concrete tree::concrete tree
tree implementations::tree implementations
nested position::nested position
position class::position class
methods included::methods included
internal representation::internal representation
fragment remain::fragment remain
remain abstract::remain abstract
num children::num children
methods raises::methods raises
formal approach::formal approach
defining abstract::defining abstract
base classes::base classes
abstract methods::abstract methods
abc module::abc module
overriding abstract::overriding abstract
working implementation::working implementation
concrete methods::concrete methods
previous section::previous section
ten accessor::ten accessor
general algorithms::general algorithms
iter methods::iter methods
methods defined::methods defined
direct instance::direct instance
class exists::class exists
create instances::create instances
concrete subclasses::concrete subclasses
computing depth::computing depth
node storing::node storing
definition implies::definition implies
recursive algorithm::recursive algorithm
method calls::method calls
value returned::value returned
def depth::def depth
levels separating::levels separating
separating position::separating position
self.is root::self.is root
method depth::method depth
algorithm performs::algorithm performs
constant-time recursive::constant-time recursive
recursive step::recursive step
total number::total number
nodes form::nodes form
single branch::single branch
input size::input size
nonempty tree::nonempty tree
leaf positions::leaf positions
nonpublic method::nonpublic method
method height1::method height1
algorithm depth::algorithm depth
algorithm height1::algorithm height1
height1 calls::height1 calls
calls algorithm::calls algorithm
worst case::worst case
exercise c-8.33::exercise c-8.33
height1 runs::height1 runs
original recursive::original recursive
recursive definition::recursive definition
function based::function based
algorithm height2::algorithm height2
top-down fashion::top-down fashion
turn invokes::turn invokes
height2 algorithm::height2 algorithm
nonrecursive part::nonrecursive part
review section::review section
recursive processes::recursive processes
constant amount::constant amount
concrete implementation::concrete implementation
height2 spends::height2 spends
property proposition::property proposition
compute heights::compute heights
entire tree::entire tree
tree root::tree root
nonpublic height2::nonpublic height2
public height::public height
height method::height method
default interpretation::default interpretation
binary trees::binary trees
binary tree::binary tree
child node::child node
left child::left child
right child::right child
child precedes::child precedes
internal node::internal node
left subtree::left subtree
full binary::full binary
proper binary::proper binary
important class::important class
trees arises::trees arises
yes-or-no questions::yes-or-no questions
question starting::question starting
current node::current node
decision trees::decision trees
leaf position::leaf position
tree represents::tree represents
decision tree::decision tree
tree figure::tree figure
prospective investor::prospective investor
investor chapter::investor chapter
arithmetic expression::arithmetic expression
binary treewhose::binary treewhose
treewhose leaves::treewhose leaves
expression tree::expression tree
unary operators::unary operators
improper binary::improper binary
node labeled::node labeled
recursive binary::recursive binary
right subtree::right subtree
additional accessor::additional accessor
child t.sibling::child t.sibling
specialized update::specialized update
binarytree abstract::binarytree abstract
binarytree class::binarytree class
class based::class based
existing tree::existing tree
class remains::class remains
remains abstract::remains abstract
complete specifications::complete specifications
python implementation::python implementation
class definition::class definition
methods left::methods left
sibling method::sibling method
children method::children method
ordered children::ordered children
children based::children based
implied behavior::implied behavior
interesting properties::interesting properties
properties dealing::properties dealing
nodes figure::nodes figure
maximum number::maximum number
tree grows::tree grows
simple observation::simple observation
properties relating::properties relating
detailed justification::detailed justification
exercise r-8.8::exercise r-8.8
r-8.8 proposition::r-8.8 proposition
nonempty binary::nonempty binary
trees relating::trees relating
earlier binary::earlier binary
tree properties::tree properties
relationship exists::relationship exists
tree proposition::tree proposition
nonempty proper::nonempty proper
removing nodes::removing nodes
internal-node pile::internal-node pile
external-node pile::external-node pile
initially empty::initially empty
empty case::empty case
external node::external node
tree repeating::tree repeating
final tree::final tree
single node::single node
node note::node note
respective piles::respective piles
operations leading::operations leading
pile figure::pile figure
nonbinary trees::nonbinary trees
interesting relationships::interesting relationships
implementing trees::implementing trees
binarytree classes::binarytree classes
formally abstract::formally abstract
great deal::great deal
directly instantiated::directly instantiated
key implementation::key implementation
implementation details::implementation details
provide methods::provide methods
methods root::methods root
additional accessors::additional accessors
accessors left::accessors left
common representations::common representations
narrowly defined::narrowly defined
linked structure::linked structure
maintains references::maintains references
parent field::parent field
variable storing::variable storing
root node::root node
structure representation::structure representation
concrete linkedbinarytree::concrete linkedbinarytree
linkedbinarytree class::linkedbinarytree class
general approach::general approach
nonpublic node::nonpublic node
node class::node class
public position::public position
validate utility::validate utility
position instance::position instance
make position::make position
position utility::position utility
nested class::nested class
minor benefit::minor benefit
class inherits::class inherits
special method::special method
definition continues::definition continues
constructor creates::constructor creates
empty tree::empty tree
initializing root::initializing root
position utilities::position utilities
boundary cases::boundary cases
cases operations::cases operations
linked binary::linked binary
provided functionality::provided functionality
class results::class results
encapsulation suggests::encapsulation suggests
outward behaviors::outward behaviors
operations depends::operations depends
class offer::class offer
suitable options::suitable options
update operations::update operations
update method::update method
method t.replace::method t.replace
general method::general method
case study::case study
reasonable set::reasonable set
general usage::general usage
t.add root::t.add root
error occurs::error occurs
empty t.add::empty t.add
t.add left::t.add left
storing element::storing element
resulting position::resulting position
child t.add::child t.add
t.add right::t.add right
child t.replace::child t.replace
stored element::stored element
internal structure::internal structure
empty trees::empty trees
error condition::error condition
condition occurs::condition occurs
linked representation::linked representation
case analyses::case analyses
boundary conditions::boundary conditions
constant number::constant number
tree representation::tree representation
sentinel node::sentinel node
undesirable update::undesirable update
publicly supported::publicly supported
nonpublic versions::nonpublic versions
public delete::public delete
code fragments::code fragments
nonpublic methods::nonpublic methods
nonpublic update::nonpublic update
public method::public method
mutablelinkedbinarytree subclass::mutablelinkedbinarytree subclass
public methods::public methods
methods wrapping::methods wrapping
trees performance::trees performance
tree implementation::tree implementation
running times::running times
linkedbinarytree methods::linkedbinarytree methods
derived methods::derived methods
len method::len method
single call::single call
children methods::children methods
leaf methods::leaf methods
root calls::root calls
calls root::calls root
equivalence testing::equivalence testing
leaf calls::leaf calls
methods depth::methods depth
depth method::depth method
tree runs::tree runs
methods add::methods add
add root::add root
add left::add left
add right::add right
nonpublic implementations::nonpublic implementations
operation table::operation table
structure implementation::structure implementation
tree operation::tree operation
operation running::operation running
n-node binary::n-node binary
tree implemented::tree implemented
space usage::space usage
array-based representation::array-based representation
alternative representation::alternative representation
integer defined::integer defined
numbering function::numbering function
level numbering::level numbering
increasing order::increasing order
potential positions::potential positions
actual positions::actual positions
necessarily consecutive::necessarily consecutive
array-based structure::array-based structure
python list::python list
single integer::single integer
position-based methods::position-based methods
arithmetic operations::arithmetic operations
complete implementation::complete implementation
representation depends::representation depends
maximum value::maximum value
requires length::requires length
elements range::elements range
empty cells::empty cells
existing nodes::existing nodes
worst-case space::worst-case space
array representation::array representation
space efficient::space efficient
general binary::general binary
exponential worst-case::exponential worst-case
space requirement::space requirement
efficiently supported::efficiently supported
child takes::child takes
moves locations::moves locations
maintains fields::maintains fields
fields left::fields left
individual children::individual children
general tree::general tree
priori limit::priori limit
node store::node store
single container::single container
children field::children field
representation .figure::representation .figure
larger portion::larger portion
data structure::data structure
implement children::implement children
collection operation::collection operation
n-node general::n-node general
tree traversal::tree traversal
traversal algorithms::traversal algorithms
specific action::specific action
complex computation::complex computation
common traversal::common traversal
traversal schemes::traversal schemes
tree classes::tree classes
common applications::common applications
tree traversals::tree traversals
postorder traversals::postorder traversals
preorder traversal::preorder traversal
subtrees rooted::subtrees rooted
traversed recursively::traversed recursively
algorithm preorder::algorithm preorder
visit action::visit action
sample tree::sample tree
traversal algorithm::traversal algorithm
algorithm paper::algorithm paper
paper title::paper title
title abstract::title abstract
algorithms postorder::algorithms postorder
postorder traversal::postorder traversal
important tree::important tree
algorithm postorder::algorithm postorder
running-time analysis::running-time analysis
efficient ways::efficient ways
algorithm requires::algorithm requires
breadth-first tree::breadth-first tree
common ways::common ways
common approach::common approach
breadth-first traversal::breadth-first traversal
playing games::playing games
game tree::game tree
initial configuration::initial configuration
partial game::partial game
tic-tac-toe figure::tic-tac-toe figure
annotations displaying::annotations displaying
complete game::complete game
limited amount::limited amount
entire subtrees::entire subtrees
first-in first-out::first-in first-out
visit nodes::visit nodes
dequeue algorithm::dequeue algorithm
algorithm breadthfirst::algorithm breadthfirst
initialize queue::initialize queue
oldest entry::oldest entry
inorder traversal::inorder traversal
standard preorder::standard preorder
breadth-first traversals::breadth-first traversals
recursive traversals::recursive traversals
right subtrees::right subtrees
traversal visits::traversal visits
algorithm inorder::algorithm inorder
important applications::important applications
visits positions::visits positions
consistent order::consistent order
standard representation::standard representation
binary search::binary search
search trees::search trees
important application::important application
algorithm arises::algorithm arises
ordered sequence::ordered sequence
search tree::search tree
unique elements::unique elements
order relation::order relation
properties assure::properties assure
nondecreasing order::nondecreasing order
tree storing::tree storing
storing integers::storing integers
solid path::solid path
dashed path::dashed path
search value::search value
internal position::internal position
search continues::search continues
search terminates::search terminates
terminates successfully::terminates successfully
empty subtree::empty subtree
terminates unsuccessfully::terminates unsuccessfully
binary decision::binary decision
question asked::question asked
search operation::search operation
small height::small height
height chapter::height chapter
implementing tree::implementing tree
first defining::first defining
include support::include support
iterations report::iterations report
presumed iteration::presumed iteration
method iter::method iter
class tree::class tree
generator syntax::generator syntax
producing iterations::producing iterations
tree iter::tree iter
def iter::def iter
element code::element code
tree instance::tree instance
positions method::positions method
traversal orders::traversal orders
independent implementations::independent implementations
default order::default order
adt preorder::adt preorder
calling signature::calling signature
signature t.preorder::signature t.preorder
preorder iteration::preorder iteration
specific position::specific position
standard solution::standard solution
nonpublic utility::nonpublic utility
utility method::utility method
recursive parameterization::recursive parameterization
method preorder::method preorder
preorder invoke::preorder invoke
def preorder::def preorder
self.is empty::self.is empty
subtree preorder::subtree preorder
start recursion::start recursion
def subtree::def subtree
caller code::caller code
utility subtree::utility subtree
caller decide::caller decide
preorder method::preorder method
traditional functions::traditional functions
positions yielded::positions yielded
recursive call::recursive call
outer context::outer context
context note::context note
base case::base case
similar technique::similar technique
public preorder::public preorder
recursive process::recursive process
process starting::process starting
full support::full support
preorder generator::preorder generator
write code::write code
visit position::visit position
official tree::official tree
adt requires::adt requires
trees support::trees support
definition shown::definition shown
results returned::results returned
preorder call::preorder call
entire iteration::entire iteration
def positions::def positions
return self.preorder::return self.preorder
return entire::return entire
entire preorder::entire preorder
iteration code::iteration code
recursive utility::recursive utility
yield position::yield position
def postorder::def postorder
postorder iteration::postorder iteration
subtree postorder::subtree postorder
subtrees code::subtrees code
class breadth-first::class breadth-first
class recall::class recall
traversal process::traversal process
linkedqueue class::linkedqueue class
suffice inorder::suffice inorder
abstract binarytree::abstract binarytree
dependent tree::dependent tree
def breadthfirst::def breadthfirst
breadth-first iteration::breadth-first iteration
fringe.is empty::fringe.is empty
add children::add children
queue code::queue code
def inorder::def inorder
inorder iteration::inorder iteration
subtree inorder::subtree inorder
child exists::child exists
natural iteration::natural iteration
inherited version::inherited version
make inorder::make inorder
return self.inorder::return self.inorder
default code::default code
binarytree.position method::binarytree.position method
representative applications::representative applications
standard traversal::standard traversal
algorithms table::algorithms table
hierarchical structure::hierarchical structure
simple presentation::simple presentation
attractive presentation::attractive presentation
presentation produced::presentation produced
element based::element based
similar presentation::similar presentation
paper paper::paper paper
title title::title title
abstract abstract::abstract abstract
document represented::document represented
indentation based::indentation based
unindented version::unindented version
root element::root element
statement print::statement print
unnecessarily inefficient::unnecessarily inefficient
traversal runs::traversal runs
depth incur::depth incur
hidden cost::hidden cost
cost making::cost making
tree results::tree results
preferred approach::preferred approach
indented table::indented table
top-down recursion::top-down recursion
current depth::current depth
additional parameter::additional parameter
implementation runs::implementation runs
print strings::print strings
increasing lengths::increasing lengths
preorder indent::preorder indent
print preorder::print preorder
preorder representation::preorder representation
child depth::child depth
efficient recursion::efficient recursion
printing indented::printing indented
indented version::indented version
complete tree::complete tree
form preorder::form preorder
label depends::label depends
current position::current position
recursive signature::recursive signature
zero-indexed numbers::zero-indexed numbers
downward path::downward path
oneindexed form::oneindexed form
implementation level::implementation level
list instance::list instance
recursive calls::recursive calls
extraneous entry::extraneous entry
implementation based::implementation based
preorder label::preorder label
print labeled::print labeled
labeled representation::labeled representation
displayed labels::displayed labels
path entries::path entries
labeled presentation::labeled presentation
parenthetic representations::parenthetic representations
preorder sequence::preorder sequence
additional context::additional context
numbered labels::numbered labels
human-friendly presentation::human-friendly presentation
concise string::concise string
string representations::string representations
parenthetic string::parenthetic string
string representation::string representation
single position::single position
denote string::denote string
string concatenation::string concatenation
parenthetic representation::parenthetic representation
line breaks::line breaks
additional punctuation::additional punctuation
formal implementation::formal implementation
opening parenthesis::opening parenthesis
closing parenthesis::closing parenthesis
separating commas::separating commas
python function::python function
function parenthesize::function parenthesize
custom traversal::custom traversal
def parenthesize::def parenthesize
print parenthesized::print parenthesized
parenthesized representation::parenthesized representation
end avoids::end avoids
avoids trailing::avoids trailing
trailing newline::trailing newline
determine proper::determine proper
proper separator::proper separator
future passes::future passes
include closing::include closing
parenthesis code::parenthesis code
tree computing::tree computing
computing disk::computing disk
disk space::disk space
file-system structure::file-system structure
internal positions::internal positions
positions representing::positions representing
representing directories::representing directories
leaves representing::leaves representing
representing files::representing files
disk usage::disk usage
recursive computation::recursive computation
total space::total space
children directories::children directories
previous positions::previous positions
positions represent::positions represent
represent children::represent children
recursive disk::recursive disk
return information::return information
custom solution::custom solution
space problem::space problem
recursion providing::recursion providing
return value::return value
def disk::def disk
return total::return total
total disk::total disk
add child::add child
return subtotal::return subtotal
subtotal code::subtotal code
tree element::tree element
element reports::element reports
local space::local space
euler tours::euler tours
template method::template method
method pattern::method pattern
applications described::applications described
great power::great power
recursive tree::recursive tree
postorder methods::postorder methods
inorder method::inorder method
initial work::initial work
work performed::work performed
additional work::additional work
complete path::complete path
previous applications::previous applications
custom implementation::custom implementation
recursive ideas::recursive ideas
great principles::great principles
object-oriented programming::object-oriented programming
programming introduced::programming introduced
include adaptability::include adaptability
general framework::general framework
traversals based::traversals based
euler tour::euler tour
tour traversal::tour traversal
leftmost child::leftmost child
notable visits::notable visits
pre visit::pre visit
visit occurs::visit occurs
first reaching::first reaching
walk passes::walk passes
post visit::post visit
proceeds upward::proceeds upward
recursive tour::recursive tour
contiguous portion::contiguous portion
entire tour::entire tour
contiguous subtours::contiguous subtours
algorithm eulertour::algorithm eulertour
interesting object-oriented::interesting object-oriented
object-oriented software::object-oriented software
software design::software design
design pattern::design pattern
pattern describes::pattern describes
generic computation::generic computation
computation mechanism::computation mechanism
primary algorithm::primary algorithm
algorithm calls::algorithm calls
auxiliary functions::auxiliary functions
designated steps::designated steps
separate hooks::separate hooks
previsit hook::previsit hook
postvisit hook::postvisit hook
subtree traversals::subtree traversals
eulertour class::eulertour class
trivial definitions::trivial definitions
specialized behavior::specialized behavior
behavior python::behavior python
primary recursive::primary recursive
nonpublic tour::nonpublic tour
tour method::tour method
tour instance::tour instance
specific tree::specific tree
public execute::public execute
execute method::execute method
final result::final result
class eulertour::class eulertour
hook previsit::hook previsit
hook postvisit::hook postvisit
def init::def init
tour template::tour template
def tree::def tree
return reference::return reference
def execute::def execute
def tour::def tour
perform tour::perform tour
path list::path list
increment index::increment index
extraneous index::extraneous index
return answer::return answer
def hook::def hook
pass code::pass code
eulertour base::eulertour base
class providing::class providing
tour traversals::tour traversals
trees based::trees based
customizing traversals::customizing traversals
sample applications::sample applications
applications section::applications section
build support::build support
primary eulertour::primary eulertour
recursive depth::recursive depth
recursive path::recursive path
recursive level::recursive level
framework relies::framework relies
method hook::method hook
traversed parameter::traversed parameter
convention described::convention described
function method::function method
final parameter::final parameter
return values::return values
post visits::post visits
respective subtrees::respective subtrees
complex tasks::complex tasks
additional state::additional state
instance variables::instance variables
tour framework::tour framework
indented preorder::indented preorder
simple subclass::simple subclass
class preorderprintindentedtour::class preorderprintindentedtour
preorder list::preorder list
labeled version::labeled version
preorder presentation::preorder presentation
class preorderprintindentedlabeledtour::class preorderprintindentedlabeledtour
postvisit hooks::postvisit hooks
class parenthesizetour::class parenthesizetour
print element::print element
.is leaf::.is leaf
print opening::print opening
print closing::print closing
tree notice::tree notice
public tree::public tree
class serves::class serves
eulertour subclass::eulertour subclass
subclass shown::subclass shown
postvisit result::postvisit result
class diskspacetour::class diskspacetour
add space::add space
computes disk::computes disk
general graph::general graph
class provided::class provided
provided methods::provided methods
methods hook::methods hook
binaryeulertour specialization::binaryeulertour specialization
additional hook::additional hook
hook invisit::hook invisit
original tour::original tour
tour utility::tour utility
tour differentiates::tour differentiates
visit taking::visit taking
taking place::taking place
sole left::sole left
sole right::sole right
class binaryeulertour::class binaryeulertour
version includes::version includes
assigned index::assigned index
left sibling::left sibling
overridden code::overridden code
binaryeulertour base::binaryeulertour base
specialized tour::specialized tour
original eulertour::original eulertour
inorder drawing::inorder drawing
binaryeulertour framework::binaryeulertour framework
graphical layout::graphical layout
positions visited::positions visited
computer graphics::computer graphics
xcoordinates increase::xcoordinates increase
increase left::increase left
y-coordinates increase::y-coordinates increase
upper left::upper left
left corner::left corner
computer screen::computer screen
screen code::screen code
binarylayout subclass::binarylayout subclass
count instance::count instance
parent constructor::parent constructor
initialize count::initialize count
processed nodes::processed nodes
x-coordinate serialized::x-coordinate serialized
advance count::advance count
nodes code::nodes code
binarylayout class::binarylayout class
draw positions::draw positions
element type::element type
original tree::original tree
supports setx::supports setx
sety methods::sety methods
expressiontree class::expressiontree class
nonpublic mutators::nonpublic mutators
binary operator::binary operator
numeric value::numeric value
string representing::string representing
eventual goal::eventual goal
complex expression::complex expression
expression trees::expression trees
arithmetic expressions::arithmetic expressions
basic forms::basic forms
root expressiontree::root expressiontree
storing string::storing string
expressiontree instances::expressiontree instances
initial root::initial root
token provided::token provided
first parameter::first parameter
run-time checking::run-time checking
caller invoked::caller invoked
one-parameter version::one-parameter version
three-parameter form::three-parameter form
inherited attach::inherited attach
attach method::attach method
existing trees::existing trees
root composing::root composing
parenthesized string::parenthesized string
existing expression::existing expression
displaying tree::displaying tree
tree elements::tree elements
closing parentheses::closing parentheses
parentheses inserted::parentheses inserted
postorder step::postorder step
special str::special str
str method::str method
first build::first build
individual strings::individual strings
composing strings::composing strings
str relies::str relies
recursive method::recursive method
method named::method named
named parenthesize::named parenthesize
parenthesize recur::parenthesize recur
class expressiontree::class expressiontree
single parameter::single parameter
parameter form::parameter form
leaf value::leaf value
isolated node::isolated node
three-parameter version::three-parameter version
linkedbinarytree initialization::linkedbinarytree initialization
raise typeerror::raise typeerror
raise valueerror::raise valueerror
valid operator::valid operator
def str::def str
return string::return string
piecewise strings::piecewise strings
append piecewise::append piecewise
piecewise representation::piecewise representation
resulting list::resulting list
self.is leaf::self.is leaf
trees expression::trees expression
tree evaluation::tree evaluation
numeric evaluation::numeric evaluation
simple application::simple application
values represented::values represented
position designates::position designates
designates pseudo-code::designates pseudo-code
recursive evaluation::recursive evaluation
value represented::value represented
algorithm evaluate::algorithm evaluate
evaluate recur::evaluate recur
value stored::value stored
operator stored::operator stored
expression represented::expression represented
tree rooted::tree rooted
python expressiontree::python expressiontree
public evaluate::public evaluate
evaluate method::evaluate method
nonpublic evaluate::nonpublic evaluate
recur method::recur method
designated subtree::designated subtree
def evaluate::def evaluate
numeric result::numeric result
return float::return float
assume element::assume element
left val::left val
right val::right val
return left::return left
multiplication code::multiplication code
expressiontree instance::expressiontree instance
basic functionality::basic functionality
combining existing::combining existing
larger expression::larger expression
bottom-up construction::bottom-up construction
construction algorithm::construction algorithm
multidigit numbers::multidigit numbers
fully parenthesized::fully parenthesized
scanning tokens::scanning tokens
input expression::input expression
find values::find values
right parentheses::right parentheses
left parentheses::left parentheses
literal value::literal value
single-node expression::single-node expression
right parenthesis::right parenthesis
root storing::root storing
resulting tree::resulting tree
total running::total running
stand-alone function::stand-alone function
function named::function named
named build::named build
build expression::build expression
def build::def build
tokenized expression::tokenized expression
operator symbol::operator symbol
sorted map::sorted map
fundamental methods::fundamental methods
getitem method::getitem method
associate value::associate value
existing value::existing value
key equal::key equal
setitem method::setitem method
method del::method del
delitem method::delitem method
map adt::map adt
adt includes::adt includes
additional functionality::additional functionality
iteration reports::iteration reports
reports keys::reports keys
sorted order::sorted order
additional searches::additional searches
find range::find range
excellent data::excellent data
storing items::storing items
relation defined::relation defined
key-value pair::key-value pair
keys stored::keys stored
integer keys::integer keys
trees navigating::trees navigating
structural property::structural property
tree assures::tree assures
important consequence::important consequence
tree visits::tree visits
keys justification::keys justification
tree consists::tree consists
recursive traversal::recursive traversal
recursive inorder::recursive inorder
tree property::tree property
subtree extends::subtree extends
sorted iteration::sorted iteration
nonrecursive descriptions::nonrecursive descriptions
finegrained navigation::finegrained navigation
generic binary::generic binary
positional structure::positional structure
direct navigation::direct navigation
additional navigation::additional navigation
navigation based::navigation based
greatest key::greatest key
first position::first position
last position::last position
position chapter::position chapter
repeated steps::repeated steps
algorithm algorithm::algorithm algorithm
leftmost position::leftmost position
traversal returns::traversal returns
subtree traversal::subtree traversal
control progresses::control progresses
position visited::position visited
full tree::full tree
symmetric algorithm::symmetric algorithm
single downward::single downward
downward walk::downward walk
single upward::single upward
upward walk::upward walk
worst-case running::worst-case running
methods run::methods run
formal justification::formal justification
downward paths::downward paths
mimic steps::mimic steps
related argument::related argument
namesake search::namesake search
search algorithm::search algorithm
recall figure::recall figure
successful search::successful search
unsuccessful search::unsuccessful search
getitem map::getitem map
map operation::map operation
treesearch algorithm::treesearch algorithm
algorithm returns::algorithm returns
final position::final position
position explored::position explored
search path::search path
trees analysis::trees analysis
tree searching::tree searching
simple algorithm::simple algorithm
algorithm treesearch::algorithm treesearch
primitive operations::primitive operations
previous position::previous position
position encountered::position encountered
search runs::search runs
standard caricature::standard caricature
big triangle::big triangle
zig-zag line::zig-zag line
delitem methods::delitem methods
existing item::existing item
map operations::map operations
traversal methods::traversal methods
range method::range method
items reported::items reported
upper bound::upper bound
deletions algorithms::deletions algorithms
deleting entries::deleting entries
trivial insertion::trivial insertion
map command::map command
underlying tree::underlying tree
failed search::failed search
treeinsert algorithm::treeinsert algorithm
algorithm treeinsert::algorithm treeinsert
search key::search key
add node::add node
trees deletion::trees deletion
deletion deleting::deletion deleting
calling treesearch::calling treesearch
increasing difficulty::increasing difficulty
easily implemented::easily implemented
introducing update::introducing update
desired behavior::desired behavior
ancestor-descendant relationships::ancestor-descendant relationships
orphaned children::orphaned children
locate position::locate position
rightmost position::rightmost position
deletion involves::deletion involves
single path::single path
path downward::path downward
deletion figure::deletion figure
treemap class::treemap class
standard map::standard map
positional operations::positional operations
operations including::operations including
find position::find position
class takes::class takes
takes advantage::takes advantage
multiple inheritance::multiple inheritance
positional binary::positional binary
mapbase class::mapbase class
key-value composite::key-value composite
composite item::composite item
concrete behaviors::concrete behaviors
collections.mutablemapping abstract::collections.mutablemapping abstract
specific p.key::specific p.key
syntax inherited::syntax inherited
nonpublic utilities::nonpublic utilities
subtree search::subtree search
nearest key::nearest key
key greater::key greater
search utility::search utility
public find::public find
deleting items::deleting items
robust searches::robust searches
structural modifications::structural modifications
inherited methods::inherited methods
methods remain::methods remain
presumed methods::presumed methods
methods named::methods named
named rebalance::named rebalance
rebalance insert::rebalance insert
rebalance delete::rebalance delete
rebalance access::rebalance access
methods serve::methods serve
balancing search::balancing search
code code::code code
class including::class including
redefined position::redefined position
nonpublic search::nonpublic search
search utilities::search utilities
utilities code::utilities code
positional methods::positional methods
accessor code::accessor code
selected methods::selected methods
find min::find min
related methods::related methods
brevity code::brevity code
current tree::current tree
maximum path::maximum path
path length::path length
operations getitem::operations getitem
similar paths::similar paths
inorder predecessor::inorder predecessor
successive calls::successive calls
iter require::iter require
similar argument::similar argument
worst-case bound::worst-case bound
current height::current height
items stored::items stored
efficient implementation::efficient implementation
yields logarithmic-time::yields logarithmic-time
logarithmic-time performance::logarithmic-time performance
ordered list::ordered list
list implementation::list implementation
worst-case configuration::worst-case configuration
configuration arises::configuration arises
insert items::insert items
decreasing order::decreasing order
order figure::order figure
linear height::linear height
inserting entries::inserting entries
keys generated::keys generated
random series::random series
expected height::expected height
careful mathematical::careful mathematical
mathematical language::mathematical language
sophisticated probability::sophisticated probability
probability theory::probability theory
random nature::random nature
worst-case height::worst-case height
balanced search::balanced search
standard binary::standard binary
basic map::basic map
unbalanced tree::unbalanced tree
tree algorithms::tree algorithms
stronger performance::stronger performance
performance guarantees::performance guarantees
avl trees::avl trees
splay trees::splay trees
red-black trees::red-black trees
occasional operations::occasional operations
primary operation::primary operation
rotation operation::rotation operation
left formation::left formation
right formation::right formation
left note::left note
represents items::represents items
first configuration::first configuration
single rotation::single rotation
rotation modifies::rotation modifies
tree-balancing algorithm::tree-balancing algorithm
tree configurations::tree configurations
rightward rotation::rightward rotation
first formation::first formation
broader rebalancing::broader rebalancing
compound operation::compound operation
trinode restructuring::trinode restructuring
subtrees pseudo-code::subtrees pseudo-code
orientations mapping::orientations mapping
restructuring replaces::restructuring replaces
node identified::node identified
previous children::previous children
inorder relationships::inorder relationships
algorithm restructure::algorithm restructure
double rotation::double rotation
involving positions::involving positions
restructuring operation::restructuring operation
case analysis::case analysis
rotation arises::rotation arises
relevant keys::relevant keys
schematic illustration::schematic illustration
python framework::python framework
concrete map::concrete map
map implementation::map implementation
explicit balancing::explicit balancing
balancing operations::balancing operations
advanced tree-balancing::advanced tree-balancing
tree-balancing algorithms::tree-balancing algorithms
rebalancing operations::rebalancing operations
strategic calls::strategic calls
rebalancing algorithms::rebalancing algorithms
public delitem::public delitem
splay tree::splay tree
accessed items::accessed items
trivial declarations::trivial declarations
pass statement::pass statement
nontrivial action::nontrivial action
method design::method design
def rebalance::def rebalance
additional code::additional code
providing stubs::providing stubs
rebalancing hooks::rebalancing hooks
utility methods::utility methods
methods rotate::methods rotate
public treemap::public treemap
treemap operations::treemap operations
promote code::promote code
balanced-tree subclasses::balanced-tree subclasses
additional relink::additional relink
relink utility::relink utility
links parent::links parent
child nodes::child nodes
special case::special case
rotate method::rotate method
rotated node::rotated node
original grandparent::original grandparent
middle subtree::middle subtree
rotated nodes::rotated nodes
creating tree::creating tree
tree nodes::tree nodes
draw attention::draw attention
important subtlety::important subtlety
original linkedbinarytree::original linkedbinarytree
linkedbinarytree subclass::linkedbinarytree subclass
low-level definition::low-level definition
nested node::nested node
tree-balancing strategies::tree-balancing strategies
strategies require::strategies require
auxiliary information::auxiliary information
balancing process::balancing process
provide storage::provide storage
additional field::additional field
linkedbinarytree node::linkedbinarytree node
inheritance structure::inheritance structure
node relies::node relies
defined node::defined node
factory method::factory method
class chapter::class chapter
trees code::trees code
tree subclasses::tree subclasses
efficient map::efficient map
map data::map data
worst-case performance::worst-case performance
operations results::operations results
simple balancing::simple balancing
balancing strategy::balancing strategy
worst-case logarithmic::worst-case logarithmic
logarithmic running::logarithmic running
fundamental map::fundamental map
operations definition::operations definition
avl tree::avl tree
simple correction::simple correction
logarithmic height::logarithmic height
longest path::longest path
null child::null child
height-balance property::height-balance property
nodes height-balance::nodes height-balance
adel son-vel::adel son-vel
son-vel skii::son-vel skii
shown inside::shown inside
empty subtrees::empty subtrees
proposition proposition::proposition proposition
inverse problem::inverse problem
lower bound::lower bound
minimum number::minimum number
easy step::easy step
reader familiar::reader familiar
fibonacci progressions::fibonacci progressions
function exponential::function exponential
increasing function::increasing function
grows exponentially::grows exponentially
operation getitem::operation getitem
map implemented::map implemented
absolute value::absolute value
property characterizing::property characterizing
characterizing avl::characterizing avl
deletion operations::deletion operations
trees begin::trees begin
change insertion::change insertion
insertion suppose::insertion suppose
occurred chapter::occurred chapter
trees figure::trees figure
storing keys::storing keys
restructuring restores::restructuring restores
simple search-and-repair::simple search-and-repair
search-and-repair strategy::search-and-repair strategy
higher height::higher height
restructuring method::restructuring method
avl insertion::avl insertion
avl height-balance::avl height-balance
nearest ancestor::nearest ancestor
equal heights::equal heights
height changed::height changed
equal-height subtrees::equal-height subtrees
tallest child::tallest child
heightbalance property::heightbalance property
property globally::property globally
globally figure::globally figure
typical insertion::typical insertion
restoring balance::restoring balance
restructuring notice::restructuring notice
insertion chapter::insertion chapter
deletion recall::deletion recall
regular binary::regular binary
structural removal::structural removal
removed node::removed node
unbalanced node::unbalanced node
rotation restores::rotation restores
restore balance::restore balance
unbalanced position::unbalanced position
larger height::larger height
taller child::taller child
restructured subtree::restructured subtree
middle position::middle position
position denoted::position denoted
unbalanced positions::unbalanced positions
restructure operation::restructure operation
trinode restructurings::trinode restructurings
property performance::property performance
times bounded::times bounded
maintaining balance::maintaining balance
balance factors::balance factors
traditional map::traditional map
operations run::operations run
general structure::general structure
multiway search::multiway search
trees recall::trees recall
trees map::trees map
map items::map items
key definition::key definition
internal d-node::internal d-node
,cd stores::,cd stores
ordered set::ordered set
key-value pairs::key-value pairs
special fictitious::special fictitious
fictitious keys::fictitious keys
simple viewpoint::simple viewpoint
d-node stores::d-node stores
regular keys::regular keys
actual nodes::actual nodes
interesting relationship::interesting relationship
n-item multiway::n-item multiway
trees searching::trees searching
multiway tree::multiway tree
successfully completed::successfully completed
unsuccessfully data::unsuccessfully data
representing multiway::representing multiway
linked data::linked data
operation needed::operation needed
smallest key::smallest key
map serves::map serves
secondary data::secondary data
primary data::primary data
structure represented::structure represented
entire multiway::entire multiway
circular argument::circular argument
ordered map::ordered map
circular dependence::circular dependence
bootstrapping technique::bootstrapping technique
simple solution::simple solution
advanced solution::advanced solution
natural choice::natural choice
secondary structure::secondary structure
structure map::structure map
dmax denote::dmax denote
hlog dmax::hlog dmax
primary efficiency::primary efficiency
efficiency goal::efficiency goal
caps dmax::caps dmax
-tree operations::-tree operations
structures stored::structures stored
primary multiway::primary multiway
tree balanced::tree balanced
structure achieves::structure achieves
simple properties::simple properties
size property::size property
children depth::children depth
depth property::depth property
methods assuming::methods assuming
real nodes::real nodes
strictly needed::strictly needed
needed enforcing::needed enforcing
tree simple::tree simple
secondary map::secondary map
map stored::map stored
unordered list::unordered list
ordered array::ordered array
-time performance::-time performance
important bound::important bound
claim note::claim note
rearranged proposition::rearranged proposition
depth properties::depth properties
proposition implies::proposition implies
tree takes::tree takes
specific realization::specific realization
secondary structures::secondary structures
crucial design::crucial design
design choice::design choice
children dmax::children dmax
constant maintaining::constant maintaining
properties requires::properties requires
performing insertions::performing insertions
insertion method::insertion method
method preserves::method preserves
split operation::split operation
insert key::insert key
w__ children::w__ children
overflow occurs::overflow occurs
cascading split::cascading split
initial tree::initial tree
original search::original search
single split::single split
split operations::split operations
insertion process::insertion process
nodes suppose::nodes suppose
internal-node children::internal-node children
external-node children::external-node children
rightmost internal::rightmost internal
last item::last item
externalnode children::externalnode children
external child::external child
external children::external children
transfer operation::transfer operation
fusion operation::fusion operation
turn triggers::turn triggers
fusion operations::fusion operations
underflow propagates::underflow propagates
simply deleted::simply deleted
propagating sequence::propagating sequence
tree performance::tree performance
asymptotic performance::asymptotic performance
logarithmic bounds::logarithmic bounds
complexity analysis::complexity analysis
keyvalue pairs::keyvalue pairs
operation takes::operation takes
entry visits::entry visits
trees provide::trees provide
fast map::fast map
map search::map search
nice properties::nice properties
restructure operations::restructure operations
fusing operations::fusing operations
red-black tree::red-black tree
stay balanced::stay balanced
nodes colored::nodes colored
root property::root property
black red::black red
red property::red property
red node::red node
black depth::black depth
black ancestors::black ancestors
red nodes::red nodes
nodes drawn::nodes drawn
common black::common black
interesting correspondence::interesting correspondence
trivial external::trivial external
black node::black node
tree contributes::tree contributes
black parents::black parents
first child::first child
black parent::black parent
construction proposition::construction proposition
trees justification::trees justification
trivial leaves::trivial leaves
tree operations::tree operations
important intuition::important intuition
perform updates::perform updates
update algorithms::update algorithms
intuition split::intuition split
fuse operations::fuse operations
recoloring neighboring::recoloring neighboring
change orientations::change orientations
null subtree::null subtree
action corresponds::action corresponds
insertion preserves::insertion preserves
red note::red note
trees case::trees case
double red::double red
red denotes::red denotes
operation restructure::operation restructure
temporarily relabel::temporarily relabel
left-to-right order::left-to-right order
inorder tree::inorder tree
traversal replace::traversal replace
make nodes::make nodes
keeping inorder::keeping inorder
relationships unchanged::relationships unchanged
restructuring eliminates::restructuring eliminates
double-red problem::double-red problem
problem notice::problem notice
restructured part::restructured part
unaffected figure::unaffected figure
affected part::affected part
problem reappears::problem reappears
red parent::red parent
performing recolorings::performing recolorings
final recoloring::final recoloring
recolorings caused::recolorings caused
insertion operations::insertion operations
root remains::root remains
process results::process results
remaining child::remaining child
structural change::structural change
black depths::black depths
red violations::red violations
tree remains::tree remains
valid red-black::valid red-black
case denotes::case denotes
red leaf::red leaf
black height::black height
node represents::node represents
black part::black part
redblack properties::redblack properties
promoted child::promoted child
complex case::complex case
black leaf::black leaf
change results::change results
path leading::path leading
deleted item::deleted item
general setting::general setting
removed black::removed black
general case::general case
node exists::node exists
theavy tlight::theavy tlight
black heights::black heights
gray color::gray color
deficit case::deficit case
red child::red child
result includes::result includes
additional black::additional black
black nodes::black nodes
subtrees illustrated::subtrees illustrated
remains unchanged::remains unchanged
unchanged resolving::unchanged resolving
case corresponds::case corresponds
child assures::child assures
item stored::item stored
black deficit::black deficit
left figures::left figures
figures denotes::figures denotes
restructured portion::restructured portion
colored black::colored black
red violation::red violation
recoloring resolves::recoloring resolves
tlight includes::tlight includes
repeat consideration::repeat consideration
remedy figure::remedy figure
recoloring operation::recoloring operation
entire subtree::entire subtree
cascading remedy::cascading remedy
black root::black root
original theavy::original theavy
red figure::red figure
deficit remains::deficit remains
dashed edge::dashed edge
black deficiency::black deficiency
avl performance::avl performance
primary advantage::primary advantage
deletion requires::deletion requires
restructuring operations::restructuring operations
logarithmic number::logarithmic number
tree requires::tree requires
recoloring operations::recoloring operations
cascade upward::cascade upward
single map::single map
operation proposition::operation proposition
restructuring justification::restructuring justification
insertion begins::insertion begins
downward search::downward search
leaf node::leaf node
potential upward::potential upward
upward effort::upward effort
double-red violation::double-red violation
upward cascading::upward cascading
single application::single application
action eliminates::action eliminates
tree insertion::tree insertion
insertion proposition::insertion proposition
items takes::items takes
operations justification::operations justification
deletion begins::deletion begins
tree deletion::tree deletion
deletion algorithm::deletion algorithm
subsequent rebalancing::subsequent rebalancing
rebalancing takes::rebalancing takes
takes place::takes place
upward path::upward path
deleted node::deleted node
resulting black::resulting black
application case::application case
terminal application::terminal application
redblacktreemap class::redblacktreemap class
standard treemap::standard treemap
balancing framework::balancing framework
framework described::framework described
additional boolean::additional boolean
boolean field::boolean field
current color::current color
inserting items::inserting items
additional utility::additional utility
utility functions::utility functions
insert hook::insert hook
analysis described::analysis described
additional challenge::additional challenge
rebalance hook::rebalance hook
analysis depends::analysis depends
reverse engineer::reverse engineer
exercise r-11.26::exercise r-11.26
exercise r-11.27::exercise r-11.27
productivity::productivity
experts::experts
breakthroughs::breakthroughs
thinking::thinking
nonlinearly::nonlinearly
chapter::chapter
discuss::discuss
important::important
nonlinear::nonlinear
data::data
structures::structures
computing::computing
trees::trees
tree::tree
breakthrough::breakthrough
organization::organization
implement::implement
host::host
algorithms::algorithms
faster::faster
linear::linear
array-based::array-based
lists::lists
linked::linked
provide::provide
natural::natural
ubiquitous::ubiquitous
file::file
systems::systems
graphical::graphical
user::user
interfaces::interfaces
databases::databases
web::web
sites::sites
computer::computer
clear::clear
referring::referring
organizational::organizational
relationship::relationship
richer::richer
simple::simple
relationships::relationships
objects::objects
sequences::sequences
hierarchical::hierarchical
main::main
terminology::terminology
family::family
terms::terms
parent::parent
child::child
ancestor::ancestor
descendant::descendant
common::common
words::words
describe::describe
show::show
figure::figure
general::general
8.1.1::8.1.1
definitions::definitions
properties::properties
abstract::abstract
type::type
stores::stores
elements::elements
hierarchically::hierarchically
exception::exception
top::top
element::element
children::children
visualized::visualized
placing::placing
inside::inside
ovals::ovals
rectangles::rectangles
drawing::drawing
connections::connections
parents::parents
straight::straight
lines::lines
typically::typically
call::call
root::root
drawn::drawn
highest::highest
connected::connected
opposite::opposite
botanical::botanical
africa::africa
europe::europe
asia::asia
australia::australia
canada::canada
america::america
overseas::overseas
domestic::domestic
international::international
tuner::tuner
r&d::r&d
sales::sales
purchasing::purchasing
manufacturing::manufacturing
electronics::electronics
nodes::nodes
representing::representing
fictitious::fictitious
corporation::corporation
store::store
internal::internal
formal::formal
definition::definition
formally::formally
define::define
set::set
storing::storing
parent-child::parent-child
satisfies::satisfies
nonempty::nonempty
special::special
node::node
unique::unique
note::note
empty::empty
meaning::meaning
convention::convention
recursively::recursively
consists::consists
possibly::possibly
subtrees::subtrees
roots::roots
two::two
siblings::siblings
external::external
leaves::leaves
section::section
4.1.4::4.1.4
discussed::discussed
files::files
directories::directories
system::system
emphasize::emphasize
nomenclature::nomenclature
revisit::revisit
earlier::earlier
regular::regular
unix::unix
linux::linux
operating::operating
appropriately::appropriately
directory::directory
represented::represented
symbol::symbol
hw1::hw1
hw2::hw2
hw3::hw3
pr1::pr1
pr2::pr2
pr3::pr3
grades::grades
buylow::buylow
sellhigh::sellhigh
market::market
portion::portion
conversely::conversely
cs252::NNP
subtree::subtree
rooted::rooted
consisting::consisting
descendants::descendants
including::including
cs016::-NONE-
edges::edges
paths::paths
edge::edge
pair::pair
u,v::u,v
vice::vice
versa::versa
path::path
sequence::sequence
consecutive::consecutive
form::form
inheritance::inheritance
relation::relation
classes::classes
python::python
program::program
forms::forms
single::single
provided::provided
summary::summary
hierarchy::hierarchy
types::types
portrayed::portrayed
originally::originally
baseexception::baseexception
class::class
user-defined::user-defined
conventionally::conventionally
declared::declared
specific::specific
introduced::introduced
code::code
fragment::fragment
organized::organized
exists::exists
built-in::built-in
named::named
object::object
ultimate::ultimate
base::base
direct::direct
indirect::indirect
defining::defining
pictured::pictured
complete::complete
preview::preview
remainder::remainder
portrays::portrays
arraybinarytree::arraybinarytree
linkedbinarytree::linkedbinarytree
binarytree::binarytree
linkedtree::linkedtree
modeling::modeling
abstractions::abstractions
implementations::implementations
highlevel::highlevel
sketches::sketches
designed::designed
ordered::ordered
meaningful::meaningful
order::order
purposefully::purposefully
identify::identify
first::first
arranging::arranging
left::left
right::right
components::components
structured::structured
document::document
book::book
parts::parts
chapters::chapters
sections::sections
paragraphs::paragraphs
tables::tables
figures::figures
corresponds::corresponds
fact::fact
expanding::expanding
sentences::sentences
characters::characters
well-defined::well-defined
back::back
examples::examples
described::described
significant::significant
describes::describes
generational::generational
modeled::modeled
birth::birth
contrast::contrast
chart::chart
company::company
considered::considered
unordered::unordered
likewise::likewise
significance::significance
subclasses::subclasses
finally::finally
displays::displays
entries::entries
e.g::e.g
alphabetical::alphabetical
chronological::chronological
inherent::inherent
representation::representation
8.1.2::8.1.2
positional::positional
adt::adt
concept::concept
position::position
abstraction::abstraction
stored::stored
positions::positions
satisfy::satisfy
structure::structure
supports::supports
method::method
p.element::p.element
return::return
accessor::accessor
methods::methods
allowing::allowing
navigate::navigate
t.root::t.root
t.is::t.is
true::true
t.parent::t.parent
t.num::t.num
number::number
t.children::t.children
generate::generate
iteration::iteration
leaf::leaf
len::len
contained::contained
t.positions::t.positions
iter::iter
accepts::accepts
argument::argument
valueerror::valueerror
invalid::invalid
reports::reports
generates::generates
similar::similar
regard::regard
iterations::iterations
means::means
iterating::iterating
creating::creating
modifying::modifying
point::point
prefer::prefer
update::update
conjunction::conjunction
interface::interface
applications::applications
discussing::discussing
object-oriented::object-oriented
design::design
principle::principle
2.1.2::2.1.2
noted::noted
public::public
managed::managed
duck::duck
typing::typing
defined::defined
notion::notion
queue::queue
presented::presented
arrayqueue::arrayqueue
6.2.2::6.2.2
linkedqueue::linkedqueue
7.1.2::7.1.2
circularqueue::circularqueue
7.2.2::7.2.2
gave::gave
concrete::concrete
self-contained::self-contained
happen::happen
adhere::adhere
mechanism::mechanism
designate::designate
serves::serves
2.4.3::2.4.3
choose::choose
reason::reason
doing::doing
bit::bit
level::level
greater::greater
reuse::reuse
nested::nested
declarations::declarations
included::included
remain::remain
num::num
raises::raises
notimplementederror::notimplementederror
approach::approach
abc::abc
module::module
responsible::responsible
overriding::overriding
working::working
implementation::implementation
behavior::behavior
based::based
chosen::chosen
includes::includes
rely::rely
calls::calls
previous::previous
declare::declare
ten::ten
implemented::implemented
explore::explore
traversing::traversing
beauty::beauty
inherited::inherited
promotes::promotes
reimplement::reimplement
behaviors::behaviors
create::create
instance::instance
serve::serve
users::users
instances::instances
8.1.3::8.1.3
depth::depth
height::height
ancestors::ancestors
excluding::excluding
implies::implies
present::present
recursive::recursive
algorithm::algorithm
adds::adds
value::value
returned::returned
def::def
levels::levels
separating::separating
self.is::self.is
self.depth::self.depth
self.parent::self.parent
running::running
t.depth::t.depth
denotes::denotes
performs::performs
constant-time::constant-time
step::step
runs::runs
worstcase::worstcase
total::total
branch::branch
function::function
input::input
size::size
informative::informative
characterize::characterize
parameter::parameter
smaller::smaller
maximum::maximum
heights::heights
addition::addition
viewed::viewed
proposition::proposition
equal::equal
depths::depths
leave::leave
justification::justification
exercise::exercise
r-8.3::r-8.3
height1::height1
nonpublic::nonpublic
computes::computes
efficient::efficient
run::run
worst::worst
case::case
sum::sum
proportional::proportional
c-8.33::c-8.33
worst-case::worst-case
compute::compute
efficiently::efficiently
relying::relying
original::original
parameterize::parameterize
calculate::calculate
understand::understand
height2::height2
progresses::progresses
top-down::top-down
fashion::fashion
initially::initially
eventually::eventually
invokes::invokes
recursion::recursion
turn::turn
determine::determine
summing::summing
amount::amount
spent::spent
nonrecursive::nonrecursive
part::part
review::review
analyses::analyses
processes::processes
constant::constant
work::work
overhead::overhead
assume::assume
generated::generated
spends::spends
analysis::analysis
make::make
property::property
denote::denote
contributes::contributes
unit::unit
revisiting::revisiting
ability::ability
beneficial::beneficial
expect::expect
entire::entire
explicitly::explicitly
designating::designating
wrap::wrap
default::default
interpretation::interpretation
invoked::invoked
syntax::syntax
t.height::t.height
binary::binary
labeled::labeled
precedes::precedes
proper::proper
people::people
full::full
improper::improper
arises::arises
contexts::contexts
represent::represent
outcomes::outcomes
result::result
answering::answering
series::series
yes-or-no::yes-or-no
questions::questions
question::question
starting::starting
current::current
depending::depending
answer::answer
decision::decision
follow::follow
tracing::tracing
represents::represents
answered::answered
leads::leads
illustrates::illustrates
recommendations::recommendations
prospective::prospective
investor::investor
arithmetic::arithmetic
expression::expression
treewhose::treewhose
variables::variables
constants::constants
operators::operators
variable::variable
applying::applying
operation::operation
values::values
operator::operator
takes::takes
operands::operands
unary::unary
negation::negation
incidentally::incidentally
8.2.1::8.2.1
specialization::specialization
additional::additional
t.left::t.left
t.right::t.right
t.sibling::t.sibling
sibling::sibling
specialized::specialized
existing::existing
remains::remains
specifications::specifications
internally::internally
functionality::functionality
inherits::inherits
supported::supported
derived::derived
combination::combination
derive::derive
generator::generator
implied::implied
8.2.2::8.2.2
interesting::interesting
dealing::dealing
four::four
grows::grows
exponentially::exponentially
observation::observation
relating::relating
detailed::detailed
r-8.8::r-8.8
justify::justify
removing::removing
dividing::dividing
piles::piles
internal-node::internal-node
pile::pile
external-node::external-node
end::end
cases::cases
remove::remove
place::place
arbitrary::arbitrary
reconnect::reconnect
shown::shown
removes::removes
repeating::repeating
final::final
removed::removed
respective::respective
operations::operations
leading::leading
hold::hold
nonbinary::nonbinary
exercises::exercises
c-8.32::c-8.32
c-8.34::c-8.34
implementing::implementing
great::great
deal::deal
support::support
directly::directly
instantiated::instantiated
key::key
details::details
effectively::effectively
specifically::specifically
accessors::accessors
choices::choices
representations::representations
begin::begin
shape::shape
narrowly::narrowly
8.3.1::8.3.1
realize::realize
8.11a::8.11a
maintains::maintains
references::references
field::field
reference::reference
8.11b::8.11b
implements::implements
subclassing::subclassing
developing::developing
positionallist::positionallist
wraps::wraps
validate::validate
utility::utility
robustly::robustly
checking::checking
validity::validity
unwrapping::unwrapping
wrapping::wrapping
caller::caller
formality::formality
inherit::inherit
immediately::immediately
binarytree.position::binarytree.position
technically::technically
trivially::trivially
tree.position::tree.position
minor::minor
benefit::benefit
relative::relative
continues::continues
constructor::constructor
creates::creates
initializing::initializing
careful::careful
utilities::utilities
safeguard::safeguard
boundary::boundary
updating::updating
examining::examining
results::results
changing::changing
content::content
chose::chose
reasons::reasons
encapsulation::encapsulation
suggests::suggests
outward::outward
depend::depend
efficiency::efficiency
depends::depends
greatly::greatly
offer::offer
suitable::suitable
options::options
application::application
unacceptable::unacceptable
possibility::possibility
t.replace::t.replace
replaces::replaces
context::context
page::page
study::study
enforce::enforce
reasonable::reasonable
usage::usage
t.add::t.add
error::error
occurs::occurs
link::link
resulting::resulting
replace::replace
previously::previously
t.delete::t.delete
replacing::replacing
t.attach::t.attach
attach::attach
reset::reset
condition::condition
collection::collection
complex::complex
delete::delete
due::due
involving::involving
conditions::conditions
perform::perform
simplified::simplified
sentinel::sentinel
akin::akin
treatment::treatment
c-8.40::c-8.40
avoid::avoid
problem::problem
undesirable::undesirable
publicly::publicly
versions::versions
providing::providing
underscored::underscored
lieu::lieu
fragments::fragments
invoke::invoke
preserving::preserving
subclass::subclass
expose::expose
r-8.15::r-8.15
task::task
mutablelinkedbinarytree::mutablelinkedbinarytree
performance::performance
summarize::summarize
efficiencies::efficiencies
analyze::analyze
times::times
relies::relies
equivalence::equivalence
testing::testing
verifies::verifies
analyzed::analyzed
add::add
involve::involve
relinking::relinking
table::table
summarizes::summarizes
n-node::n-node
space::space
8.3.2::8.3.2
alternative::alternative
numbering::numbering
integer::integer
numbers::numbers
increasing::increasing
potential::potential
actual::actual
necessarily::necessarily
list::list
index::index
array::array
advantage::advantage
position-based::position-based
formula::formula
r-8.18::r-8.18
requires::requires
length::length
range::range
cells::cells
r-8.16::r-8.16
heaps::heaps
spite::spite
exponential::exponential
requirement::requirement
prohibitive::prohibitive
drawback::drawback
deleting::deleting
promoting::promoting
moves::moves
locations::locations
8.3.3::8.3.3
fields::fields
individual::individual
priori::priori
limit::limit
container::container
.figure::.figure
larger::larger
r-8.14::r-8.14
simply::simply
traversal::traversal
systematic::systematic
accessing::accessing
visiting::visiting
action::action
visit::visit
incrementing::incrementing
counter::counter
performing::performing
computation::computation
schemes::schemes
traversals::traversals
8.4.1::8.4.1
preorder::preorder
postorder::postorder
visited::visited
traversed::traversed
pseudo-code::pseudo-code
traverse::traverse
sample::sample
paper::paper
title::title
sense::sense
traverses::traverses
visits::visits
running-time::running-time
ways::ways
access::access
assumption::assumption
asymptotically::asymptotically
optimal::optimal
8.4.2::8.4.2
breadth-first::breadth-first
software::software
playing::playing
games::games
game::game
made::made
player::player
initial::initial
configuration::configuration
partial::partial
tic-tac-toe::tic-tac-toe
annotations::annotations
displaying::displaying
performed::performed
unable::unable
limited::limited
responses::responses
deep::deep
computational::computational
process::process
produce::produce
fifo::fifo
i.e::i.e
first-in::first-in
first-out::first-out
semantics::semantics
enqueue::enqueue
dequeue::dequeue
breadthfirst::breadthfirst
initialize::initialize
q.dequeue::q.dequeue
oldest::oldest
entry::entry
q.enqueue::q.enqueue
8.4.3::8.4.3
inorder::inorder
standard::standard
applied::applied
introduce::introduce
informally::informally
consistent::consistent
albeit::albeit
parentheses::parentheses
search::search
integers::integers
denoted::denoted
assure::assure
nondecreasing::nondecreasing
solid::solid
searching::searching
successfully::successfully
dashed::dashed
unsuccessfully::unsuccessfully
find::find
encountered::encountered
compare::compare
terminates::terminates
reach::reach
recall::recall
asked::asked
searched::searched
illustrate::illustrate
small::small
log::log
large::large
devoted::devoted
8.4.4::8.4.4
stated::stated
include::include
report::report
demonstrate::demonstrate
easy::easy
presumed::presumed
producing::producing
self.positions::self.positions
yield::yield
body::body
choice::choice
advantages::advantages
orders::orders
independent::independent
strategy::strategy
adapt::adapt
calling::calling
signature::signature
t.preorder::t.preorder
generating::generating
parameterized::parameterized
solution::solution
circumstance::circumstance
desired::desired
parameterization::parameterization
self.root::self.root
start::start
self.children::self.children
yielding::yielding
generators::generators
decide::decide
traditional::traditional
functions::functions
slightly::slightly
loop::loop
yielded::yielded
reyield::reyield
outer::outer
trivial::trivial
technique::technique
re-yield::re-yield
write::write
official::official
self.preorder::self.preorder
difference::difference
wait::wait
manage::manage
suffice::suffice
applicable::applicable
dependent::dependent
develop::develop
applies::applies
fringe::fringe
fringe.enqueue::fringe.enqueue
fringe.is::fringe.is
fringe.dequeue::fringe.dequeue
front::front
self.left::self.left
self.right::self.right
override::override
version::version
self.inorder::self.inorder
reported::reported
8.4.5::8.4.5
representative::representative
customizations::customizations
contents::contents
naturally::naturally
displayed::displayed
presentation::presentation
line::line
shows::shows
attractive::attractive
produced::produced
indenting::indenting
display::display
indentation::indentation
unindented::unindented
print::print
indent::indent
spaces::spaces
statement::statement
str::str
unnecessarily::unnecessarily
inefficient::inefficient
incur::incur
hidden::hidden
cost::cost
making::making
analyzing::analyzing
preferred::preferred
indented::indented
redesign::redesign
strings::strings
lengths::lengths
printing::printing
started::started
fortunate::fortunate
embedded::embedded
generally::generally
interested::interested
explicit::explicit
beginning::beginning
2.2.1::2.2.1
2.2.2::2.2.2
challenging::challenging
labels::labels
implicit::implicit
label::label
accomplish::accomplish
zero-indexed::zero-indexed
downward::downward
convert::convert
oneindexed::oneindexed
inefficiency::inefficiency
duplicating::duplicating
sending::sending
share::share
temporarily::temporarily
added::added
trace::trace
block::block
extraneous::extraneous
completing::completing
.join::.join
one-indexed::one-indexed
path.append::path.append
path.pop::path.pop
parenthetic::parenthetic
reconstruct::reconstruct
numbered::numbered
human-friendly::human-friendly
concise::concise
string::string
computer-friendly::computer-friendly
t1,t2::t1,t2
,tk::,tk
concatenation::concatenation
breaks::breaks
cosmetic::cosmetic
essentially::essentially
easily::easily
punctuation::punctuation
opening::opening
parenthesis::parenthesis
closing::closing
commas::commas
parenthesize::parenthesize
custom::custom
prints::prints
parenthesized::parenthesized
avoids::avoids
trailing::trailing
newline::newline
sep::sep
separator::separator
false::false
future::future
passes::passes
recur::recur
disk::disk
model::model
file-system::file-system
introducing::introducing
examined::examined
topic::topic
emblematic::emblematic
purpose::purpose
discern::discern
allocated::allocated
information::information
subtotal::subtotal
.space::.space
local::local
8.4.6::8.4.6
euler::euler
tours::tours
template::template
pattern::pattern
power::power
capture::capture
computations::computations
desire::desire
blending::blending
approaches::approaches
recurring::recurring
recursions::recursions
properly::properly
ideas::ideas
principles::principles
programming::programming
2.1.1::2.1.1
adaptability::adaptability
reusability::reusability
framework::framework
tour::tour
walk::walk
leftmost::leftmost
viewing::viewing
walls::walls
complexity::complexity
upward::upward
unify::unify
notable::notable
pre::pre
reaching::reaching
visualization::visualization
post::post
proceeds::proceeds
contiguous::contiguous
subtours::subtours
eulertour::eulertour
reusable::reusable
adaptable::adaptable
generic::generic
redefining::redefining
steps::steps
customization::customization
primary::primary
auxiliary::auxiliary
hooks::hooks
designated::designated
separate::separate
previsit::previsit
hook::hook
postvisit::postvisit
completion::completion
manages::manages
defines::defines
customized::customized
created::created
execute::execute
beings::beings
returns::returns
overridden::overridden
init::init
prepare::prepare
tree.root::tree.root
indices::indices
tree.children::tree.children
results.append::results.append
increment::increment
pass::pass
experience::experience
customizing::customizing
build::build
maintaining::maintaining
post-processing::post-processing
discussion::discussion
expected::expected
parameters::parameters
tasks::tasks
maintain::maintain
state::state
accessed::accessed
bodies::bodies
flexibility::flexibility
preorderprintindentedtour::preorderprintindentedtour
produces::produces
invoking::invoking
expressed::expressed
tour.execute::tour.execute
preorderprintindentedlabeledtour::preorderprintindentedlabeledtour
achieved::achieved
overrides::overrides
parenthesizetour::parenthesizetour
preface::preface
self.tree::self.tree
.is::.is
notice::notice
diskspacetour::diskspacetour
graph::graph
designing::designing
customize::customize
binaryeulertour::binaryeulertour
invisit::invisit
specialize::specialize
differentiates::differentiates
taking::taking
sole::sole
succession::succession
assigned::assigned
tree.left::tree.left
tree.right::tree.right
layout::layout
geometry::geometry
determined::determined
assigns::assigns
y-coordinates::y-coordinates
rules::rules
graphics::graphics
xcoordinates::xcoordinates
increase::increase
bottom::bottom
origin::origin
upper::upper
corner::corner
screen::screen
binarylayout::binarylayout
assigning::assigning
x,y::x,y
coordinates::coordinates
count::count
x-coordinate::x-coordinate
super::super
processed::processed
.setx::.setx
serialized::serialized
.sety::.sety
y-coordinate::y-coordinate
advance::advance
draw::draw
setx::setx
sety::sety
expressiontree::expressiontree
constructing::constructing
evaluating::evaluating
mutators::mutators
construct::construct
numeric::numeric
eventual::eventual
goal::goal
arbitrarily::arbitrarily
compound::compound
expressions::expressions
suffices::suffices
basic::basic
initialization::initialization
op,e1,e2::op,e1,e2
token::token
run-time::run-time
one-parameter::one-parameter
done::done
three-parameter::three-parameter
incorporate::incorporate
composing::composing
9-5::9-5
inserted::inserted
2.3.2::2.3.2
joined::joined
5.4.2::5.4.2
appends::appends
isolated::isolated
isinstance::isinstance
raise::raise
typeerror::typeerror
valid::valid
pieces::pieces
piecewise::piecewise
compose::compose
append::append
result.append::result.append
evaluation::evaluation
accomplished::accomplished
designates::designates
evaluate::evaluate
t.evaluate::t.evaluate
float::float
val::val
elif::elif
treat::treat
multiplication::multiplication
building::building
combining::combining
automate::automate
bottom-up::bottom-up
construction::construction
assuming::assuming
tokenized::tokenized
multidigit::multidigit
treated::treated
atomically::atomically
r-8.30::r-8.30
fully::fully
stack::stack
scanning::scanning
tokens::tokens
push::push
literal::literal
single-node::single-node
pop::pop
items::items
subexpression::subexpression
repeat::repeat
stand-alone::stand-alone
s.append::s.append
demonstrated::demonstrated
variety::variety
sorted::sorted
map::map
fundamental::fundamental
10.1.1::10.1.1
keyerror::keyerror
getitem::getitem
associate::associate
item::item
setitem::setitem
del::del
delitem::delitem
guaranteeing::guaranteeing
keys::keys
supporting::supporting
searches::searches
stop::stop
excellent::excellent
key-value::key-value
k,v::k,v
matter::matter
convenience::convenience
diagram::diagram
affect::affect
placement::placement
omit::omit
relevant::relevant
navigating::navigating
demonstrating::demonstrating
structural::structural
assures::assures
consequence::consequence
prove::prove
induction::induction
sub::sub
strictly::strictly
extends::extends
executed::executed
descriptions::descriptions
finegrained::finegrained
navigation::navigation
7.4.1::7.4.1
last::last
greatest::greatest
located::located
continuing::continuing
long::long
symmetry::symmetry
reached::reached
repeated::repeated
rightward::rightward
successor::successor
rationale::rationale
purely::purely
workings::workings
correspondence::correspondence
flow::flow
control::control
returning::returning
found::found
rightmost::rightmost
symmetric::symmetric
predecessor::predecessor
bounded::bounded
amortized::amortized
c-11.34::c-11.34
intuitively::intuitively
mimic::mimic
related::related
11.1.2::11.1.2
namesake::namesake
attempt::attempt
locate::locate
p.key::p.key
successful::successful
unsuccessful::unsuccessful
treesearch::treesearch
event::event
explored::explored
determining::determining
insert::insert
executes::executes
primitive::primitive
starts::starts
spend::spend
illustrating::illustrating
caricature::caricature
big::big
triangle::triangle
zig-zag::zig-zag
subroutine::subroutine
begins::begins
combine::combine
variation::variation
admittedly::admittedly
strategies::strategies
bound::bound
logn::logn
11.1.3::11.1.3
insertions::insertions
deletions::deletions
inserting::inserting
fairly::fairly
straightforward::straightforward
insertion::insertion
command::command
reassigned::reassigned
underlying::underlying
failed::failed
sustained::sustained
treeinsert::treeinsert
t,t.root::t,t.root
finding::finding
deletion::deletion
location::location
enacted::enacted
distinguish::distinguish
difficulty::difficulty
deletes::deletes
presuming::presuming
precisely::precisely
ancestor-descendant::ancestor-descendant
assuring::assuring
upkeep::upkeep
hole::hole
orphaned::orphaned
proceed::proceed
is,r::is,r
notation::notation
11.1.1::11.1.1
replacement::replacement
deleted::deleted
preceding::preceding
satisfied::satisfied
fortunately::fortunately
simpler::simpler
involves::involves
moving::moving
11.4b::11.4b
11.5b::11.5b
replaced::replaced
11.1.4::11.1.4
treemap::treemap
multiple::multiple
inheriting::inheriting
mapbase::mapbase
10.1.4::10.1.4
composite::composite
collections.mutablemapping::collections.mutablemapping
p.value::p.value
notably::notably
ideally::ideally
nearest::nearest
basis::basis
robust::robust
modifications::modifications
violated::violated
misuse::misuse
peppered::peppered
rebalance::rebalance
balancing::balancing
conclude::conclude
guide::guide
redefined::redefined
selected::selected
min::min
omitted::omitted
sake::sake
brevity::brevity
11.1.5::11.1.5
traces::traces
continue::continue
traced::traced
successive::successive
require::require
bounds::bounds
yields::yields
logarithmic-time::logarithmic-time
feel::feel
decreasing::decreasing
obtained::obtained
comfort::comfort
average::average
random::random
removals::removals
scope::scope
requiring::requiring
mathematical::mathematical
language::language
sophisticated::sophisticated
probability::probability
theory::theory
guarantee::guarantee
nature::nature
updates::updates
variations::variations
balanced::balanced
claim::claim
lead::lead
unbalanced::unbalanced
stronger::stronger
guarantees::guarantees
avl::avl
splay::splay
red-black::red-black
augmenting::augmenting
occasional::occasional
reshape::reshape
reduce::reduce
rotation::rotation
rotate::rotate
diagrammed::diagrammed
transform::transform
formation::formation
prior::prior
relink::relink
lie::lie
rotated::rotated
modifies::modifies
tree-balancing::tree-balancing
modified::modified
wisely::wisely
highly::highly
configurations::configurations
reduces::reduces
unaffected::unaffected
rotations::rotations
combined::combined
broader::broader
rebalancing::rebalancing
trinode::trinode
restructuring::restructuring
manipulation::manipulation
grandparent::grandparent
restructure::restructure
illustrated::illustrated
describing::describing
rename::rename
orientations::orientations
mapping::mapping
unified::unified
relabeling::relabeling
identified::identified
makes::makes
output::output
double::double
left-to-right::left-to-right
listing::listing
t1,t2,t3,t4::t1,t2,t3,t4
practice::practice
modification::modification
caused::caused
11.9a::11.9a
11.9c::11.9c
middle::middle
completed::completed
schematic::schematic
illustration::illustration
11.2.1::11.2.1
advanced::advanced
strategic::strategic
identifying::identifying
indirectly::indirectly
frequently::frequently
brought::brought
closer::closer
nontrivial::nontrivial
continued::continued
stubs::stubs
rotating::rotating
inclusion::inclusion
promote::promote
balanced-tree::balanced-tree
simplify::simplify
links::links
focus::focus
shifting::shifting
factory::factory
attention::attention
subtlety::subtlety
low-level::low-level
storage::storage
intentionally::intentionally
instantiate::instantiate
qualified::qualified
vital::vital
resolution::resolution
2.5.2::2.5.2
instantiation::instantiation
newly::newly
logarithmic::logarithmic
correction::correction
rule::rule
longest::longest
easier::easier
explanation::explanation
null::null
height-balance::height-balance
characterizes::characterizes
differ::differ
atmost::atmost
initials::initials
inventors::inventors
adel::adel
son-vel::son-vel
skii::skii
landis::landis
keeping::keeping
turns::turns
out::out
inverse::inverse
lower::lower
minimum::minimum
noting::noting
account::account
obtain::obtain
relates::relates
reader::reader
familiar::familiar
fibonacci::fibonacci
progressions::progressions
c-3.49::c-3.49
formalize::formalize
dropping::dropping
doubles::doubles
increases::increases
apply::apply
repeatedly::repeatedly
inequalities::inequalities
substituting::substituting
2log::2log
2logn::2logn
11.3.1::11.3.1
absolute::absolute
characterizing::characterizing
equivalent::equivalent
similarly::similarly
restore::restore
balance::balance
portions::portions
adversely::adversely
affected::affected
change::change
suppose::suppose
violate::violate
11.12a::11.12a
changed::changed
fix::fix
unbalance::unbalance
occurred::occurred
adding::adding
restores::restores
participating::participating
search-and-repair::search-and-repair
encounter::encounter
higher::higher
tie::tie
argue::argue
correctness::correctness
reestablishing::reestablishing
implication::implication
increased::increased
equal-height::equal-height
letting::letting
tallest::tallest
scenario::scenario
heightbalance::heightbalance
globally::globally
typical::typical
imbalance::imbalance
restoring::restoring
removal::removal
11.12b::11.12b
taller::taller
side::side
11.14b::11.14b
restructured::restructured
description::description
guaranteed::guaranteed
locally::locally
restored::restored
r-11.11::r-11.11
r-11.12::r-11.12
walking::walking
marching::marching
restructurings::restructurings
sufficient::sufficient
factors::factors
2,4::2,4
multiway::multiway
11.5.1::11.5.1
pairs::pairs
d-node::d-node
11.23a::11.23a
,cd::,cd
k1,v1::k1,v1
1,vd::1,vd
viewpoint::viewpoint
rise::rise
placeholders::placeholders
exposition::exposition
n-item::n-item
c-11.52::c-11.52
11.23b::11.23b
,kd::,kd
needed::needed
smallest::smallest
secondary::secondary
reasoning::reasoning
circular::circular
dependence::dependence
bootstrapping::bootstrapping
sortedtablemap::sortedtablemap
10.3.1::10.3.1
match::match
recommend::recommend
vi,ci::vi,ci
realization::realization
processing::processing
logd::logd
dmax::dmax
hlog::hlog
caps::caps
11.5.2::11.5.2
-tree::-tree
2-4::2-4
2-3-4::2-3-4
achieves::achieves
goals::goals
simplicity::simplicity
real::real
enforcing::enforcing
achieve::achieve
-time::-time
hand::hand
enforces::enforces
showing::showing
logarithm::logarithm
justifies::justifies
rearranged::rearranged
states::states
crucial::crucial
effort::effort
preserves::preserves
4-node::4-node
5-node::5-node
longer::longer
violation::violation
overflow::overflow
resolved::resolved
,c5::,c5
,k4::,k4
remedy::remedy
split::split
w__::w__
3-node::3-node
c1,c2,c3::c1,c2,c3
2-node::2-node
c4,c5::c4,c5
occur::occur
triggers::triggers
eliminates::eliminates
propagates::propagates
cascading::cascading
causing::causing
creation::creation
phase::phase
ino::ino
webegin::webegin
reduced::reduced
ki,vi::ki,vi
swap::swap
11.28d::11.28d
ensure::ensure
externalnode::externalnode
swapped::swapped
1-node::1-node
11.28a::11.28a
allowed::allowed
underflow::underflow
check::check
transfer::transfer
move::move
11.28b::11.28b
2-nodes::2-nodes
fusion::fusion
merge::merge
11.28e::11.28e
11.29c::11.29c
propagating::propagating
fusions::fusions
asymptotic::asymptotic
identical::identical
keyvalue::keyvalue
fast::fast
nice::nice
disadvantages::disadvantages
fusing::fusing
drawbacks::drawbacks
stay::stay
colored::colored
red::red
black::black
white::white
intuitive::intuitive
merging::merging
coloring::coloring
transformations::transformations
highlighted::highlighted
grouping::grouping
give::give
establishing::establishing
inequality::inequality
11.6.1::11.6.1
intuition::intuition
mysteriously::mysteriously
fuse::fuse
mimicked::mimicked
recoloring::recoloring
neighboring::neighboring
color::color
malformed::malformed
relabel::relabel
unchanged::unchanged
double-red::double-red
incident::incident
reappears::reappears
consideration::consideration
recolorings::recolorings
resolve::resolve
half::half
handled::handled
structurally::structurally
promotion::promotion
remaining::remaining
violations::violations
shrinking::shrinking
redblack::redblack
promoted::promoted
nonroot::nonroot
deficit::deficit
necessity::necessity
setting::setting
theavy::theavy
tlight::tlight
cascades::cascades
portrayal::portrayal
gray::gray
resolving::resolving
effect::effect
demoted::demoted
deficiency::deficiency
resolves::resolves
11.39a::11.39a
11.39b::11.39b
deficient::deficient
propogating::propogating
reversing::reversing
colors::colors
ending::ending
recolor::recolor
reorientation::reorientation
reapply::reapply
knowing::knowing
terminal::terminal
amounts::amounts
orientation::orientation
transformation::transformation
concluding::concluding
cascade::cascade
propositions::propositions
logarithmically::logarithmically
subsequent::subsequent
completes::completes
11.6.2::11.6.2
redblacktreemap::redblacktreemap
boolean::boolean
sets::sets
aid::aid
querying::querying
opportunity::opportunity
modify::modify
closely::closely
challenge::challenge
reverse::reverse
engineer::engineer
r-11.26::r-11.26
r-11.27::r-11.27
