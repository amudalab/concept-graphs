linked list::151.0
linked lists::66.0
data structure::41.0
data structures::27.0
singly linked list::26.9443625123
doubly linked list::23.7744375108
doubly linked::16.0
dynamic array::16.0
singly linked lists::15.8496250072
last node::14.0
sentinel node::13.0
random access list::12.6797000058
circularly linked list::12.6797000058
external storage::12.0
random access::11.0
empty list::11.0
first node::11.0
list of families::9.50977500433
circular linked list::9.50977500433
doubly linked lists::9.50977500433
linked linear list::9.50977500433
internal storage::8.0
random access lists::7.92481250361
list of members::7.92481250361
link field::7.0
sentinel nodes::7.0
linear list::7.0
circular list::7.0
loop through list::6.33985000288
linked list node::6.33985000288
multiply linked list::6.33985000288
circularly linked lists::6.33985000288
singly linked linear::6.33985000288
linked linear lists::6.33985000288
internal and external::6.33985000288
node newnode::5.0
access list::5.0
list nodes::5.0
special case::5.0
dynamic arrays::5.0
unrolled linked list::4.75488750216
list whose nodes::4.75488750216
dynamic memory allocation::4.75488750216
abstract data type::4.75488750216
locality of reference::4.75488750216
circular doubly linked::4.75488750216
algorithms and data::4.75488750216
linked list nodes::4.75488750216
set of data::4.75488750216
list is empty::4.75488750216
logic theory machine::4.75488750216
persistent data structure::4.75488750216
head of list::4.75488750216
linearly linked lists::4.75488750216
linked list operations::4.75488750216
node node::4.0
previous node::4.0
list node::4.0
hash table::4.0
data record::4.0
data field::4.0
empty lists::4.0
list handle::4.0
lastname ; string::3.16992500144
arrays of node::3.16992500144
array data structure::3.16992500144
node is added::3.16992500144
first and last::3.16992500144
persistent data structures::3.16992500144
programming the logic::3.16992500144
firstname ; integer::3.16992500144
circular singly linked::3.16992500144
speeding up search::3.16992500144
structure for family::3.16992500144
print a complete::3.16992500144
information about family::3.16992500144
linked lists in-place::3.16992500144
node print information::3.16992500144
number of operations::3.16992500144
members using internal::3.16992500144
general memory pool::3.16992500144
related data structures::3.16992500144
languages for symbol::3.16992500144
double linked list::3.16992500144
structures linked list::3.16992500144
contiguously in memory::3.16992500144
introduction to algorithms::3.16992500144
insertion and deletion::3.16992500144
transactions on human::3.16992500144
number of families::3.16992500144
abstract data types::3.16992500144
joint computer conference::3.16992500144
stanford university computer::3.16992500144
western joint computer::3.16992500144
node data structure::3.16992500144
amount of control::3.16992500144
list in lisp::3.16992500144
functions of symbolic::3.16992500144
head of families::3.16992500144
list the diagram::3.16992500144
factors in electronics::3.16992500144
single sentinel node::3.16992500144
lists using arrays::3.16992500144
inserts a node::3.16992500144
computation by machine::3.16992500144
concepts and nomenclature::3.16992500144
information about member::3.16992500144
additional linked lists::3.16992500144
start at head::3.16992500144
list data structure::3.16992500144
added or removed::3.16992500144
university computer science::3.16992500144
comparison of list::3.16992500144
stacks and queues::3.16992500144
dictionary of algorithms::3.16992500144
computer science library::3.16992500144
lists vs dynamic::3.16992500144
ire transactions::3.0
print information::3.0
list elements::3.0
linear lists::3.0
data records::3.0
list structure::3.0
programming language::3.0
sequential access::3.0
null loop::3.0
link fields::3.0
dynamic memory::3.0
integer value::3.0
circular linked::3.0
special cases::3.0
node.next node.next::3.0
families start::2.0
maurice vincent::2.0
symbol manipulation::2.0
next-node link::2.0
list appending::2.0
memory pool::2.0
string address::2.0
generic routines::2.0
skip list::2.0
human factors::2.0
computer science::2.0
computer languages::2.0
complete list::2.0
list.firstnode list.firstnode::2.0
last element::2.0
recursive functions::2.0
next link::2.0
symbolic expressions::2.0
josephus problem::2.0
abstract data::2.0
constant number::2.0
memory overhead::2.0
array index::2.0
end-sentinel node::2.0
families list::2.0
circular lists::2.0
mechanical translation::2.0
associative array::2.0
nth person::2.0
red-black tree::2.0
family member::2.0
record family::2.0
removing nodes::2.0
integer age::2.0
record member::2.0
information processing::2.0
data type::2.0
efficient indexing::2.0
main article::2.0
stanford university::2.0
list list::2.0
single pointer::2.0
operating system::2.0
number of ways::1.58496250072
poor at deleting::1.58496250072
representation significantly simplifies::1.58496250072
array data structures::1.58496250072
node some algorithms::1.58496250072
word " list::1.58496250072
cdr of anylist::1.58496250072
linguistics a report::1.58496250072
insertion and removal::1.58496250072
indexed a pointer::1.58496250072
references from node::1.58496250072
removal of elements::1.58496250072
beginning as linked::1.58496250072
order to process::1.58496250072
find the nth::1.58496250072
bobrow and raphael::1.58496250072
linked list array::1.58496250072
nodes hash linking::1.58496250072
numbers of elements::1.58496250072
destroy obsoletenode function::1.58496250072
previous data indexes::1.58496250072
accelerates some list-handling::1.58496250072
inserted may require::1.58496250072
formed by placing::1.58496250072
smaller than expected::1.58496250072
array * circular::1.58496250072
research a balanced::1.58496250072
pointer for data::1.58496250072
subtle this section::1.58496250072
queue * queue::1.58496250072
order to avoid::1.58496250072
time-shared in round-robin::1.58496250072
chess program reports::1.58496250072
asymptotic time complexity::1.58496250072
algorithms mit press::1.58496250072
data structures national::1.58496250072
insufficient inline citations::1.58496250072
unesco international conference::1.58496250072
primary data representation::1.58496250072
afamily.next using external::1.58496250072
denoted by nil::1.58496250072
section gives pseudocode::1.58496250072
signify the end::1.58496250072
problem the josephus::1.58496250072
handle it separately::1.58496250072
offer some advantages::1.58496250072
e.g the corners::1.58496250072
form the subtrees::1.58496250072
array in constant::1.58496250072
node.next while node::1.58496250072
article by introducing::1.58496250072
remove one node::1.58496250072
heuristic which reduces::1.58496250072
list type operations::1.58496250072
lists contain nodes::1.58496250072
linked list data::1.58496250072
solution using iterative::1.58496250072
elements the advantages::1.58496250072
kernel linked list::1.58496250072
atlist.firstnode.next circularly linked::1.58496250072
unrolled linked lists::1.58496250072
nodes are linked::1.58496250072
assignments this makes::1.58496250072
structures circularly linked::1.58496250072
lists and return::1.58496250072
list of references::1.58496250072
create additional linked::1.58496250072
node in line::1.58496250072
set of fields::1.58496250072
improved cache performance::1.58496250072
data generic pointer::1.58496250072
actual data referenced::1.58496250072
newell and shaw::1.58496250072
maintain balance schemes::1.58496250072
step is needed::1.58496250072
functional programming languages::1.58496250072
empty function insertafter::1.58496250072
translation " appeared::1.58496250072
handle the specific::1.58496250072
arrays vs linked::1.58496250072
create separate routines::1.58496250072
functions for removing::1.58496250072
program that resolves::1.58496250072
unnecessary to test::1.58496250072
small data items::1.58496250072
space per node::1.58496250072
link being added::1.58496250072
removed without reallocation::1.58496250072
file were located::1.58496250072
keeping the nodes::1.58496250072
eliminate some end-of-list::1.58496250072
firstnode function insertbeginning::1.58496250072
merging two lists::1.58496250072
heap * binary::1.58496250072
style at goingnative::1.58496250072
tree or hash::1.58496250072
fragmentation that impedes::1.58496250072
west lafayette indiana::1.58496250072
two linearly linked::1.58496250072
released in fifo::1.58496250072
binary random access::1.58496250072
shaw in proc::1.58496250072
entitled " computer::1.58496250072
head and tail::1.58496250072
proper list ends::1.58496250072
type of message::1.58496250072
linked list explained::1.58496250072
list with support::1.58496250072
family from node::1.58496250072
node before current::1.58496250072
table * hashed::1.58496250072
advantages over dynamic::1.58496250072
solved using memory::1.58496250072
channel9.msdn.com from minute::1.58496250072
list is linked::1.58496250072
linux kernel linked::1.58496250072
generally need extra::1.58496250072
chains of items::1.58496250072
sparse array linked::1.58496250072
acyclic word graph::1.58496250072
simplifies some algorithms::1.58496250072
heuristic for decreasing::1.58496250072
decreasing memory overhead::1.58496250072
binary * binomial::1.58496250072
finding a specific::1.58496250072
memory is wasted::1.58496250072
structures and contained::1.58496250072
2009-09-21 external links::1.58496250072
type of linked::1.58496250072
linked list approach::1.58496250072
elements singly linked::1.58496250072
test for end-of-list::1.58496250072
viewed as immutable::1.58496250072
trie * hash::1.58496250072
two nodes applying::1.58496250072
advantages and disadvantages::1.58496250072
make them preferable::1.58496250072
election this shows::1.58496250072
robert ; munro::1.58496250072
double-ended priority queue::1.58496250072
shows the strengths::1.58496250072
simple linked lists::1.58496250072
commons has media::1.58496250072
removed is maintained::1.58496250072
department of computer::1.58496250072
maintained during list::1.58496250072
common final portion::1.58496250072
record a good::1.58496250072
lists in fact::1.58496250072
change that occurs::1.58496250072
expensive operation linked::1.58496250072
case circular linked::1.58496250072
now-classic diagram consisting::1.58496250072
front in constant::1.58496250072
list is simple::1.58496250072
link the list::1.58496250072
averaged over insertions::1.58496250072
create a linked::1.58496250072
node = null::1.58496250072
helps with appending::1.58496250072
lists were developed::1.58496250072
stanford university retrieved::1.58496250072
patterns and space::1.58496250072
map * multimap::1.58496250072
skew binary number::1.58496250072
indexes can occupy::1.58496250072
list is smaller::1.58496250072
algorithms that manipulate::1.58496250072
array of records::1.58496250072
reduced memory overhead::1.58496250072
first data record::1.58496250072
representing list nodes::1.58496250072
conference on information::1.58496250072
institute of standards::1.58496250072
consisting of blocks::1.58496250072
successive list nodes::1.58496250072
list.firstnode while node::1.58496250072
two linked lists::1.58496250072
0-07-282379-8 * cormen::1.58496250072
university of waterloo::1.58496250072
arrays * bit::1.58496250072
trees with special::1.58496250072
lists without sentinels::1.58496250072
links this structure::1.58496250072
base cases linear::1.58496250072
produce an excessive::1.58496250072
lists store references::1.58496250072
retrieval by keeping::1.58496250072
technique included flex::1.58496250072
lists by including::1.58496250072
lists allow insertion::1.58496250072
review in automatic::1.58496250072
structures linked lists::1.58496250072
list array dynamic::1.58496250072
two circular lists::1.58496250072
removal of nodes::1.58496250072
structure that allocates::1.58496250072
linear data structures::1.58496250072
support for fast::1.58496250072
0-201-89683-4 * newell::1.58496250072
data records list::1.58496250072
types * collection::1.58496250072
introducing more precise::1.58496250072
denote an empty::1.58496250072
node of list::1.58496250072
published a review::1.58496250072
routine to process::1.58496250072
require sequential scanning::1.58496250072
makes linked lists::1.58496250072
program linked lists::1.58496250072
immutable linked lists::1.58496250072
seizing an entry::1.58496250072
multimap * priority::1.58496250072
depth basic concepts::1.58496250072
newnode else newnode.next::1.58496250072
requires a separate::1.58496250072
computer chess program::1.58496250072
hash tree graphs::1.58496250072
library * open::1.58496250072
array is created::1.58496250072
disadvantage of linked::1.58496250072
operation that yields::1.58496250072
procedure would fail::1.58496250072
assuming that somenode::1.58496250072
referenceand thus make::1.58496250072
circle then count::1.58496250072
tradeoffs involving linked::1.58496250072
array * hash::1.58496250072
read in order::1.58496250072
constant-time random access::1.58496250072
field for message::1.58496250072
structures and algorithm::1.58496250072
eds " linked::1.58496250072
performance while decreasing::1.58496250072
2009-09-21 * sedgewick::1.58496250072
pointers requiring extra::1.58496250072
empty circular list::1.58496250072
list from wikipedia::1.58496250072
published its design::1.58496250072
recently used items::1.58496250072
prohibitive costs due::1.58496250072
list * linked::1.58496250072
traverse the list::1.58496250072
data structure consisting::1.58496250072
list is relocatable::1.58496250072
technical systems consultants::1.58496250072
introduction to data::1.58496250072
traverse the full::1.58496250072
control data required::1.58496250072
node although cons::1.58496250072
analysis new jersey::1.58496250072
cdr links point::1.58496250072
list * difficulties::1.58496250072
node an unrolled::1.58496250072
major data structures::1.58496250072
splay * heap::1.58496250072
fixed-size array data::1.58496250072
index next prev::1.58496250072
newell and simon::1.58496250072
insertbefore or removebefore::1.58496250072
sentinel nodes hash::1.58496250072
psychology of human::1.58496250072
creating an array::1.58496250072
access list indexing::1.58496250072
structures national institute::1.58496250072
jumping over large::1.58496250072
handle the structure::1.58496250072
framework new york::1.58496250072
made basic contributions::1.58496250072
developed by ibm::1.58496250072
programming with java::1.58496250072
anylist the advantages::1.58496250072
operating systems developed::1.58496250072
program is running::1.58496250072
andrej ; carlsson::1.58496250072
lincoln laboratory published::1.58496250072
listfree integer variable::1.58496250072
data in multiple::1.58496250072
require moving half::1.58496250072
integer listhead entry::1.58496250072
array of data::1.58496250072
insert or delete::1.58496250072
language for mechanical::1.58496250072
catalog the directory::1.58496250072
significantly less space::1.58496250072
afamily.members get list::1.58496250072
allocated and deallocated::1.58496250072
lists as data::1.58496250072
keeping commonly accessed::1.58496250072
previous element function::1.58496250072
data structures authority::1.58496250072
binary search tree::1.58496250072
2004-12-14 * antonakos::1.58496250072
languages multiply linked::1.58496250072
creating a listfree::1.58496250072
node not null::1.58496250072
graph * directed::1.58496250072
including the logic::1.58496250072
authors to develop::1.58496250072
choices in computer::1.58496250072
advantages that make::1.58496250072
data is allocated::1.58496250072
ability to traverse::1.58496250072
easy to find::1.58496250072
address ; node::1.58496250072
combine the advantages::1.58496250072
trees * b-tree::1.58496250072
two distinct lists::1.58496250072
established bert green::1.58496250072
elements are removed::1.58496250072
separate node reference::1.58496250072
list nodes multiple::1.58496250072
self-organizing list rearranges::1.58496250072
single linked list::1.58496250072
prev ; previous::1.58496250072
scanning the list::1.58496250072
invalidated in previous::1.58496250072
first node obsoletenode::1.58496250072
binary number system::1.58496250072
0-262-03293-7 * green::1.58496250072
node doubly linked::1.58496250072
advantage of making::1.58496250072
special case algorithms::1.58496250072
back pointer history::1.58496250072
broadcasting in california::1.58496250072
consor cons cell::1.58496250072
linked non-circular lists::1.58496250072
list.firstnode to null::1.58496250072
dynamic array requires::1.58496250072
fewer special cases::1.58496250072
entry in array::1.58496250072
control * gnd::1.58496250072
extra storage needed::1.58496250072
node and cast::1.58496250072
simon at rand::1.58496250072
node gives easy::1.58496250072
90013-8 * wilkes::1.58496250072
indices the approach::1.58496250072
set of processes::1.58496250072
support abstract data::1.58496250072
direction this makes::1.58496250072
insertion or deletion::1.58496250072
develop several early::1.58496250072
appending is provided::1.58496250072
values this leads::1.58496250072
related to linked::1.58496250072
function this requires::1.58496250072
complex variants add::1.58496250072
adding a single::1.58496250072
complexity by adding::1.58496250072
family are stored::1.58496250072
person a dynamic::1.58496250072
patent was granted::1.58496250072
manipulations to maintain::1.58496250072
access on arrays::1.58496250072
generic link structure::1.58496250072
data structures linked::1.58496250072
translation for natural::1.58496250072
similar to unix::1.58496250072
fast and easy::1.58496250072
thing makes sense::1.58496250072
extract the record::1.58496250072
handy for creating::1.58496250072
first unesco international::1.58496250072
list record node::1.58496250072
linked lists benefit::1.58496250072
tree has similar::1.58496250072
linked lists unsuitable::1.58496250072
artificial intelligence programs::1.58496250072
allocating the needed::1.58496250072
linked both types::1.58496250072
inserting a node::1.58496250072
rearranges its nodes::1.58496250072
setting the sentinel::1.58496250072
introduction to linked::1.58496250072
.next when faced::1.58496250072
internal storage works::1.58496250072
uncommon to implement::1.58496250072
singly linked non-circular::1.58496250072
type of data::1.58496250072
transactions on information::1.58496250072
append " newnode::1.58496250072
face-edge the simplest::1.58496250072
node " newnode::1.58496250072
list in constant::1.58496250072
difficult or impossible::1.58496250072
traverse the entire::1.58496250072
due to pointers::1.58496250072
access to elements::1.58496250072
process the message::1.58496250072
list no matter::1.58496250072
information processing language::1.58496250072
purpose in languages::1.58496250072
contiguous in memory::1.58496250072
significantly simplifies adding::1.58496250072
originally of west::1.58496250072
running the program::1.58496250072
inside the loop::1.58496250072
ways to improve::1.58496250072
linked list basics::1.58496250072
amount of overhead::1.58496250072
appeared in ire::1.58496250072
operations on addresses::1.58496250072
case the list::1.58496250072
node is composed::1.58496250072
pools some hybrid::1.58496250072
sequence a linked::1.58496250072
sources remain unclear::1.58496250072
names and account::1.58496250072
inserted or removed::1.58496250072
nodes are freed::1.58496250072
notice that entry::1.58496250072
reallocate an expensive::1.58496250072
index a self-organizing::1.58496250072
elements are contiguous::1.58496250072
list and renders::1.58496250072
implemented using linked::1.58496250072
arbitrarily many elements::1.58496250072
including a field::1.58496250072
giving the addresses::1.58496250072
requires a search::1.58496250072
circle n times::1.58496250072
lists * data::1.58496250072
variable to store::1.58496250072
data at node::1.58496250072
array integer prev::1.58496250072
binary decision diagram::1.58496250072
size this approach::1.58496250072
highlights the pros::1.58496250072
disadvantages of linked::1.58496250072
memnode null loop::1.58496250072
package using external::1.58496250072
solving this problem::1.58496250072
algorithms for inserting::1.58496250072
cost of reallocation::1.58496250072
found this scheme::1.58496250072
listhead entry records::1.58496250072
appending one linked::1.58496250072
lists have advantages::1.58496250072
augmented with layers::1.58496250072
rearrange the links::1.58496250072
doubly linked linear::1.58496250072
storage on disk::1.58496250072
improved by keeping::1.58496250072
left that person::1.58496250072
structure was similar::1.58496250072
store the chains::1.58496250072
add or delete::1.58496250072
read or modify::1.58496250072
list the disadvantage::1.58496250072
last nodes combining::1.58496250072
growing a large::1.58496250072
exist for trees::1.58496250072
problem of machine::1.58496250072
deleted node destroy::1.58496250072
electronics in march::1.58496250072
structures * introduction::1.58496250072
nodes with arrows::1.58496250072
build other data::1.58496250072
running * insertion::1.58496250072
implementation the principal::1.58496250072
vice versa sentinel::1.58496250072
lists and languages::1.58496250072
table whose elements::1.58496250072
linear lists offer::1.58496250072
hilbert * trie::1.58496250072
element by index::1.58496250072
memnode.data extract member::1.58496250072
node.next.next destroy obsoletenode::1.58496250072
multiple linked lists::1.58496250072
number of elements::1.58496250072
two other linked::1.58496250072
queue * set::1.58496250072
leads to simpler::1.58496250072
simplifies and accelerates::1.58496250072
william ; topp::1.58496250072
type of reference::1.58496250072
decreasing average search::1.58496250072
proper data type::1.58496250072
included in linked::1.58496250072
finds that person::1.58496250072
lists * description::1.58496250072
appeared in mechanical::1.58496250072
requiring extra storage::1.58496250072
pool of buffers::1.58496250072
records are stored::1.58496250072
linear time searching::1.58496250072
handle that consists::1.58496250072
families print information::1.58496250072
compiling and running::1.58496250072
handling for empty::1.58496250072
points to first::1.58496250072
node empty lists::1.58496250072
times for data::1.58496250072
members while memnode::1.58496250072
first element integer::1.58496250072
members while amember::1.58496250072
lists with sentinels::1.58496250072
insert " newnode::1.58496250072
skew binary random::1.58496250072
full list beginning::1.58496250072
amember null loop::1.58496250072
locality of referenceand::1.58496250072
reduces search times::1.58496250072
variants add additional::1.58496250072
process the specific::1.58496250072
implementing a program::1.58496250072
linked list structures::1.58496250072
list * skip::1.58496250072
juniata college spring::1.58496250072
architectures * locality::1.58496250072
requires the ability::1.58496250072
simplify certain list::1.58496250072
overhead of tree::1.58496250072
data this approach::1.58496250072
elements on average::1.58496250072
structure might work::1.58496250072
led victor yngve::1.58496250072
space * nodes::1.58496250072
simple recursive algorithms::1.58496250072
array at random::1.58496250072
prev if double::1.58496250072
remove first node::1.58496250072
routines to add::1.58496250072
newnode after node::1.58496250072
implemented as persistent::1.58496250072
car and cdr::1.58496250072
locations will require::1.58496250072
message type field::1.58496250072
recursive data structure::1.58496250072
list a hash::1.58496250072
add additional links::1.58496250072
memory access patterns::1.58496250072
family string lastname::1.58496250072
linked list representation::1.58496250072
node destroy obsoletenode::1.58496250072
simon were recognized::1.58496250072
build a red-black::1.58496250072
yields the minimum::1.58496250072
famnode.data extract family::1.58496250072
line of nodes::1.58496250072
caching another disadvantage::1.58496250072
unexpectedly take linear::1.58496250072
practical data structures::1.58496250072
vreda ; black::1.58496250072
form of efficient::1.58496250072
variable which points::1.58496250072
red-black * self-balancing::1.58496250072
complexity trade-offs juniata::1.58496250072
traversing for instance::1.58496250072
starting with somenode::1.58496250072
.balance print entry::1.58496250072
support any type::1.58496250072
dynamic arrays insertion::1.58496250072
complicated base cases::1.58496250072
list * linear::1.58496250072
queue * list::1.58496250072
lists as file::1.58496250072
items that hash::1.58496250072
element is unknown::1.58496250072
dynamic array balanced::1.58496250072
removing a node::1.58496250072
mit lincoln laboratory::1.58496250072
elements in reverse::1.58496250072
pointers with array::1.58496250072
sets * stack::1.58496250072
renders both insertbeginning::1.58496250072
lists * patent::1.58496250072
linked * association::1.58496250072
node is linked::1.58496250072
queue in order::1.58496250072
structures ; id06::1.58496250072
dynamic data structure::1.58496250072
trees or red-black::1.58496250072
multiple next references::1.58496250072
node gives access::1.58496250072
generic linked list::1.58496250072
language processing led::1.58496250072
simplify the handling::1.58496250072
array is exceeded::1.58496250072
involves a list::1.58496250072
makes it unnecessary::1.58496250072
indexes are calculated::1.58496250072
creating simple caches::1.58496250072
updating wasted space::1.58496250072
deletion node operations::1.58496250072
list * xor::1.58496250072
indicating the index::1.58496250072
contiguity an array::1.58496250072
build by creating::1.58496250072
list while famnode::1.58496250072
yngve at massachusetts::1.58496250072
easily the linked::1.58496250072
linear singly linked::1.58496250072
languages and computer::1.58496250072
algorithm is complicated::1.58496250072
group of people::1.58496250072
6.1.1 singly linked::1.58496250072
heapsort sequential access::1.58496250072
leads to improved::1.58496250072
array the list::1.58496250072
address ; member::1.58496250072
two different circular::1.58496250072
lists of elements::1.58496250072
collection * container::1.58496250072
null for lists::1.58496250072
list a binary::1.58496250072
link structure node::1.58496250072
element integer listhead::1.58496250072
institute of technology::1.58496250072
make it point::1.58496250072
commonly accessed nodes::1.58496250072
locating the place::1.58496250072
linked lists include::1.58496250072
dynamic memory allocators::1.58496250072
message the message::1.58496250072
layers of pointers::1.58496250072
node somenode notice::1.58496250072
member from node::1.58496250072
complicate other operations::1.58496250072
method that works::1.58496250072
memory overhead disadvantages::1.58496250072
lists to store::1.58496250072
simple list-processing language::1.58496250072
performance of iteration::1.58496250072
java collections framework::1.58496250072
characters or boolean::1.58496250072
free memory block::1.58496250072
insertion or removal::1.58496250072
node the last::1.58496250072
self-balancing * splay::1.58496250072
close the circle::1.58496250072
appeared in communications::1.58496250072
built using references::1.58496250072
array * double-ended::1.58496250072
creates fewer special::1.58496250072
data fields set::1.58496250072
two different lists::1.58496250072
list in order::1.58496250072
allocation typically requires::1.58496250072
supported the skip::1.58496250072
trade-offs juniata college::1.58496250072
abstract * associative::1.58496250072
last " node::1.58496250072
easier * adding::1.58496250072
doubly-linked and circular::1.58496250072
problem by aparallel::1.58496250072
prev name balance::1.58496250072
lists are cumbersome::1.58496250072
common data structures::1.58496250072
list data structures::1.58496250072
easily be inserted::1.58496250072
order to find::1.58496250072
constructing a linked::1.58496250072
eliminated by including::1.58496250072
circumstances a linked::1.58496250072
add new messages::1.58496250072
requires updating firstnode::1.58496250072
require more space::1.58496250072
building linked lists::1.58496250072
file system catalog::1.58496250072
types of messages::1.58496250072
arise in linked::1.58496250072
car or cdr::1.58496250072
extra storage space::1.58496250072
0-13-660911-2 * wilkes::1.58496250072
node a technique::1.58496250072
external storage internal::1.58496250072
list.firstnode.next point past::1.58496250072
arrays in optimal::1.58496250072
improve this article::1.58496250072
reach the nth::1.58496250072
directories and extend::1.58496250072
members using external::1.58496250072
simulate a linear::1.58496250072
cases using sentinel::1.58496250072
wins the election::1.58496250072
access individual elements::1.58496250072
array dynamic array::1.58496250072
includes a list::1.58496250072
increasing cache performance::1.58496250072
means " list::1.58496250072
similar memory access::1.58496250072
manipulating linked lists::1.58496250072
amount of data::1.58496250072
notice that removebeginning::1.58496250072
support dynamic memory::1.58496250072
view the people::1.58496250072
appending has asymptotic::1.58496250072
lisp and scheme::1.58496250072
makes them impractical::1.58496250072
separately by contrast::1.58496250072
fast random access::1.58496250072
versa sentinel nodes::1.58496250072
swapping the contents::1.58496250072
directory entry pointed::1.58496250072
list of family::1.58496250072
ranking problem concerns::1.58496250072
store the index::1.58496250072
developed by tsc::1.58496250072
impractical for lists::1.58496250072
diagram * directed::1.58496250072
two simple ways::1.58496250072
natural language processing::1.58496250072
0-201-31452-5 * shaffer::1.58496250072
multiple such indexes::1.58496250072
inherently sequential access::1.58496250072
expand in real::1.58496250072
algorithm design manual::1.58496250072
blocks representing list::1.58496250072
member members head::1.58496250072
summarized the advantages::1.58496250072
fibonacci * r-tree::1.58496250072
memory pool leaves::1.58496250072
private memory space::1.58496250072
efficient external data::1.58496250072
store a reference::1.58496250072
structure and machine::1.58496250072
moves an element::1.58496250072
layer this process::1.58496250072
store the data::1.58496250072
storage internal storage::1.58496250072
linked list adts::1.58496250072
poor at finding::1.58496250072
makes it easy::1.58496250072
family member string::1.58496250072
include a reference::1.58496250072
structures authority control::1.58496250072
needed for references::1.58496250072
operation linked lists::1.58496250072
pointer data generic::1.58496250072
node firstnode points::1.58496250072
data being stored::1.58496250072
allocation these disadvantages::1.58496250072
defining separate structures::1.58496250072
directed acyclic word::1.58496250072
list * unrolled::1.58496250072
node may include::1.58496250072
serialized for storage::1.58496250072
constructed from nodes::1.58496250072
list ranking problem::1.58496250072
composed of data::1.58496250072
array although trivial::1.58496250072
family of languages::1.58496250072
retrieved 2009-09-21 external::1.58496250072
list ; null::1.58496250072
resized in order::1.58496250072
disk or transfer::1.58496250072
message parsing routines::1.58496250072
tree random access::1.58496250072
members print information::1.58496250072
binomial * fibonacci::1.58496250072
applications that require::1.58496250072
code would traverse::1.58496250072
linked lists built::1.58496250072
implementation * growing::1.58496250072
list this ensures::1.58496250072
member string firstname::1.58496250072
overhead is incurred::1.58496250072
purely functional random-access::1.58496250072
previous nodes exist::1.58496250072
positions still carries::1.58496250072
lists are constructed::1.58496250072
algorithms require access::1.58496250072
entitled " recursive::1.58496250072
carries prohibitive costs::1.58496250072
comit programming language::1.58496250072
herbert a simon::1.58496250072
allocators can produce::1.58496250072
array is faster::1.58496250072
list while permitting::1.58496250072
random access listusing::1.58496250072
adts or templates::1.58496250072
integer fields indicating::1.58496250072
links by replacing::1.58496250072
data structures types::1.58496250072
store several elements::1.58496250072
linked list problems::1.58496250072
including a dummy::1.58496250072
incurred per node::1.58496250072
first node newnode.next::1.58496250072
advantages over singly-linked::1.58496250072
linked list record::1.58496250072
marker or sentinel::1.58496250072
links may exceed::1.58496250072
find and remove::1.58496250072
concerns the efficient::1.58496250072
data more efficient::1.58496250072
directed acyclic graph::1.58496250072
pointing to successive::1.58496250072
null to denote::1.58496250072
languages that support::1.58496250072
easy to place::1.58496250072
easier to read::1.58496250072
adding and removing::1.58496250072
node and insert::1.58496250072
person is left::1.58496250072
firstnode and lastnode::1.58496250072
null when removing::1.58496250072
multiset * disjoint::1.58496250072
finding a node::1.58496250072
group of nodes::1.58496250072
arrays and dynamic::1.58496250072
two a circular::1.58496250072
data in general::1.58496250072
last data node::1.58496250072
comparison of list-processing::1.58496250072
test was moved::1.58496250072
table a heap::1.58496250072
single link field::1.58496250072
language for computer::1.58496250072
deletion and traversal::1.58496250072
moving to maintain::1.58496250072
listusing the skew::1.58496250072
nodes if sentinel::1.58496250072
quickest to find::1.58496250072
list and vice::1.58496250072
due to reallocation::1.58496250072
access * nodes::1.58496250072
placing the array::1.58496250072
merging two sorted::1.58496250072
property greatly simplifies::1.58496250072
review article entitled::1.58496250072
perform linked list::1.58496250072
leaves more memory::1.58496250072
pros and cons::1.58496250072
two sorted lists::1.58496250072
distinct lists joins::1.58496250072
early artificial intelligence::1.58496250072
b-tree * binary::1.58496250072
strengths and weaknesses::1.58496250072
newnode linked lists::1.58496250072
list * map::1.58496250072
needed to extract::1.58496250072
cost doubly linked::1.58496250072
cumbersome to navigate::1.58496250072
adding or removing::1.58496250072
references cdr coding::1.58496250072
list structures linked::1.58496250072
array and referenced::1.58496250072
stores a reference::1.58496250072
array balanced tree::1.58496250072
node may simplify::1.58496250072
representations unrolled linked::1.58496250072
memory is fragmented::1.58496250072
newnode to insert::1.58496250072
overhead for references::1.58496250072
past deleted node::1.58496250072
acm turing award::1.58496250072
nodes this leads::1.58496250072
represent a sequence::1.58496250072
piece the operation::1.58496250072
created language support::1.58496250072
maintained as separate::1.58496250072
modify any element::1.58496250072
efficiency a circular::1.58496250072
field of linguistics::1.58496250072
creates and manages::1.58496250072
insert a node::1.58496250072
extension to random::1.58496250072
developed by technical::1.58496250072
primary data structure::1.58496250072
elements are formed::1.58496250072
encyclopedia this article::1.58496250072
linked list package::1.58496250072
xor linked list::1.58496250072
set * multiset::1.58496250072
removing the last::1.58496250072
common abstract data::1.58496250072
cell the cons::1.58496250072
standing for list::1.58496250072
option to represent::1.58496250072
records list handles::1.58496250072
structures then generic::1.58496250072
structure to perform::1.58496250072
afamily null loop::1.58496250072
obsoletenode function removebeginning::1.58496250072
list of data::1.58496250072
list-processing computer languages::1.58496250072
record has integer::1.58496250072
resolves the josephus::1.58496250072
svante ; sedgewick::1.58496250072
messages are received::1.58496250072
structures in addition::1.58496250072
balanced tree random::1.58496250072
type the generic::1.58496250072
hashed array tree::1.58496250072
graph * list::1.58496250072
link field pointing::1.58496250072
person to remove::1.58496250072
manipulate linked lists::1.58496250072
empty list consists::1.58496250072
approach * seizing::1.58496250072
list nodes appears::1.58496250072
external links advantages::1.58496250072
list of trees::1.58496250072
list these cells::1.58496250072
remove node past::1.58496250072
acm in april::1.58496250072
current first node::1.58496250072
common tradeoffs involving::1.58496250072
ways linearly linked::1.58496250072
null for empty::1.58496250072
trees singly linked::1.58496250072
node members head::1.58496250072
shaw and herbert::1.58496250072
allen ; shaw::1.58496250072
access to read::1.58496250072
somenode null node::1.58496250072
removing the node::1.58496250072
location after defining::1.58496250072
marketed by smoke::1.58496250072
node to node::1.58496250072
simplifying memory management::1.58496250072
types or templates::1.58496250072
list and removed::1.58496250072
allocates all elements::1.58496250072
quad-edge and face-edge::1.58496250072
processing language ipl::1.58496250072
portion of sub-list::1.58496250072
open data structures::1.58496250072
afamily.members get head::1.58496250072
date of birth::1.58496250072
balance schemes exist::1.58496250072
call the correct::1.58496250072
lists of small::1.58496250072
easier to manipulate::1.58496250072
deleting linked list::1.58496250072
wasted in allocating::1.58496250072
first data nodes::1.58496250072
inserting or deleting::1.58496250072
elements are references::1.58496250072
repeat the process::1.58496250072
cases of linked::1.58496250072
famnode null loop::1.58496250072
contributions to artificial::1.58496250072
delete a node::1.58496250072
destroy obsoletenode notice::1.58496250072
nodes somewhat subtle::1.58496250072
empty linear list::1.58496250072
double-linked lists require::1.58496250072
underlying array data::1.58496250072
restrict the type::1.58496250072
created by john::1.58496250072
library * linked::1.58496250072
node this function::1.58496250072
singly-linked linear lists::1.58496250072
manages a private::1.58496250072
graphs * binary::1.58496250072
return the handles::1.58496250072
located by traversing::1.58496250072
0-262-03293-7 * cormen::1.58496250072
find the tail::1.58496250072
processing led victor::1.58496250072
enumerating the elements::1.58496250072
nodes are stored::1.58496250072
requiring less storage::1.58496250072
people as connected::1.58496250072
unsuitable for applications::1.58496250072
node " node::1.58496250072
marking its slot::1.58496250072
list linked lists::1.58496250072
separate case circular::1.58496250072
links between elements::1.58496250072
general problem solver::1.58496250072
0-13-280843-9 * collins::1.58496250072
variables that point::1.58496250072
external data structure::1.58496250072
updating firstnode function::1.58496250072
impedes the performance::1.58496250072
member can belong::1.58496250072
list and display::1.58496250072
avl * red-black::1.58496250072
entire first list::1.58496250072
problem generally solved::1.58496250072
basis of implementation::1.58496250072
data in contrast::1.58496250072
linked list augmented::1.58496250072
programming and design::1.58496250072
empty list record::1.58496250072
involving linked list::1.58496250072
lists include insertion::1.58496250072
element function removeafter::1.58496250072
queue * double-ended::1.58496250072
sets of data::1.58496250072
structures a directory::1.58496250072
times and repeat::1.58496250072
reallocation or reorganization::1.58496250072
delete cells based::1.58496250072
point past deleted::1.58496250072
functional random-access lists::1.58496250072
logarithmic time random::1.58496250072
null for last::1.58496250072
obtaining the last::1.58496250072
ch20 data structures::1.58496250072
consists in swapping::1.58496250072
smoke signal broadcasting::1.58496250072
nodes combining alternatives::1.58496250072
suppose you wanted::1.58496250072
linked list type::1.58496250072
buffer * dynamic::1.58496250072
avoid storing firstnode::1.58496250072
tree * sparse::1.58496250072
two representations unrolled::1.58496250072
sentinels have data::1.58496250072
due to data::1.58496250072
traversing pointers systems::1.58496250072
pseudocode for adding::1.58496250072
type of operations::1.58496250072
first node elements::1.58496250072
number of dimensions::1.58496250072
standards and technology::1.58496250072
acm national conference::1.58496250072
wanted to create::1.58496250072
linked list trees::1.58496250072
list by creating::1.58496250072
easy sequential access::1.58496250072
first useful data::1.58496250072
nature the result::1.58496250072
required to access::1.58496250072
dummy element::1.0
round-robin order::1.0
physically part::1.0
cons cells::1.0
pergamon press::1.0
language entitled::1.0
function inserts::1.0
pre-allocated array::1.0
practical introduction::1.0
short lists::1.0
allocate memory::1.0
gerald kruse::1.0
rand corporation::1.0
output node::1.0
circle starting::1.0
data caching::1.0
specific data::1.0
priority queue::1.0
predetermined person::1.0
end-sentinel nodes::1.0
bottom layer::1.0
family members::1.0
primary disadvantages::1.0
end-of-list inside::1.0
remaining fields::1.0
extra step::1.0
cays horstmann::1.0
list remains::1.0
list record::1.0
list notes::1.0
represent arrays::1.0
special handling::1.0
current number::1.0
approach include::1.0
people stand::1.0
works inserting::1.0
memnode.next famnode::1.0
work appeared::1.0
first entry::1.0
message type::1.0
easy access::1.0
end-of-list marker::1.0
newnode inserting::1.0
connected nodes::1.0
list starting::1.0
specific type::1.0
aparallel algorithm::1.0
lecture notes::1.0
national conference::1.0
multiple lists::1.0
middle positions::1.0
supported,parallel arrays::1.0
member needed::1.0
basic operations::1.0
high-level languages::1.0
previous entry::1.0
list data::1.0
member memnode::1.0
data values::1.0
computer architecture::1.0
proc wjcc::1.0
elementary operations::1.0
reverse order::1.0
extra storage::1.0
specific number::1.0
insert node::1.0
combining alternatives::1.0
disjoint sets::1.0
linear search::1.0
makes algorithms::1.0
machine code::1.0
special node::1.0
mit press::1.0
list requires::1.0
human cognition::1.0
found atlist.firstnode.next::1.0
members close::1.0
separate function::1.0
acm press::1.0
list handles::1.0
insert newnode::1.0
entire structure::1.0
red-black trees::1.0
free encyclopedia::1.0
previous assignments::1.0
famnode.next notice::1.0
list processing::1.0
code inserts::1.0
allen newell::1.0
real balance::1.0
free list::1.0
conventional array::1.0
allocating space::1.0
specific point::1.0
link backward::1.0
media related::1.0
space overhead::1.0
prev field::1.0
avl trees::1.0
automatic programming::1.0
expensive due::1.0
common approach::1.0
expensive operation::1.0
deleting nodes::1.0
conventional computer::1.0
navigate backwards::1.0
variants discussed::1.0
first data::1.0
worst case::1.0
structures linked::1.0
lisp procedure::1.0
prentice hall::1.0
efficient insertbefore::1.0
amortized constant::1.0
tail operations::1.0
list-handling algorithms::1.0
members head::1.0
extra cost::1.0
file structures::1.0
current data::1.0
overhead storage::1.0
increases complexity::1.0
full pointer::1.0
actual list::1.0
minimum element::1.0
including multiple::1.0
constant-time operation::1.0
heap shares::1.0
empty circular::1.0
programming languages::1.0
list operations::1.0
list print::1.0
separate array::1.0
data shared::1.0
existing node::1.0
appending elements::1.0
node allocated::1.0
insertion point::1.0
record entry::1.0
list traversal::1.0
delete nodes::1.0
generic structure::1.0
deletion operations::1.0
languages involves::1.0
list processor::1.0
minimum amount::1.0
diagram demonstrates::1.0
first sector::1.0
control data::1.0
simplest form::1.0
function insertafter::1.0
members amember::1.0
small amount::1.0
iterate backwards::1.0
self-compiling compiler::1.0
common convention::1.0
circular buffer::1.0
special properties::1.0
alternatives listed::1.0
random locations::1.0
family amember::1.0
terminal portion::1.0
natural option::1.0
middle search::1.0
singly-linked list::1.0
correct routine::1.0
create links::1.0
needed memory::1.0
making access::1.0
generic link::1.0
association list::1.0
amember.next afamily::1.0
mcgraw hill::1.0
fundamental algorithms::1.0
replacing pointers::1.0
skew binary::1.0
directory structure::1.0
language support::1.0
algorithm analysis::1.0
avoid wasting::1.0
recursive solutions::1.0
including lists::1.0
person wins::1.0
large array::1.0
likewise support::1.0
cliff shaw::1.0
adding elements::1.0
tree manipulations::1.0
functional languages::1.0
maximum size::1.0
variable pointing::1.0
bit operations::1.0
nodes operations::1.0
annual review::1.0
account balance::1.0
process continues::1.0
lisp family::1.0
smaller object::1.0
primary data::1.0
fancy variants::1.0
previous  node::1.0
article includes::1.0
maintain contiguity::1.0
hybrid solutions::1.0
link forward::1.0
single link::1.0
removebefore operations::1.0
separate routines::1.0
display names::1.0
efficient conversion::1.0
code iterates::1.0
space reserved::1.0
input lists::1.0
associative arrays::1.0
null pointer::1.0
string firstname::1.0
finding space::1.0
conference proceedings::1.0
data moving::1.0
storage overhead::1.0
entire list::1.0
null reference::1.0
record node::1.0
variant developed::1.0
container abstract::1.0
simplest representation::1.0
replacing references::1.0
balanced tree::1.0
diagram shows::1.0
array indexes::1.0
per-array constant::1.0
data elements::1.0
append procedure::1.0
resulting lists::1.0
cons cell::1.0
variable firstnode::1.0
specific element::1.0
list notice::1.0
precise citations::1.0
machine translation::1.0
data retrieval::1.0
member amember::1.0
require access::1.0
resizable arrays::1.0
worst-case constant::1.0
addison wesley::1.0
last nodes::1.0
data node::1.0
bytes footnotes::1.0
principal benefit::1.0
minimal structure::1.0
operation consists::1.0
ordering properties::1.0
unordered list::1.0
non-empty circular::1.0
technique requires::1.0
arrows pointing::1.0
processing language::1.0
main disadvantage::1.0
reverse traversing::1.0
desired size::1.0
special representation::1.0
worst-case logarithmic::1.0
primary purpose::1.0
list predecessor::1.0
dummy node::1.0
persistent data::1.0
non-empty list::1.0
continuous circle::1.0
bjarne stroustrup::1.0
allocation overhead::1.0
massachusetts institute::1.0
large numbers::1.0
node serves::1.0
binary tree::1.0
simple extension::1.0
extra arguments::1.0
bit array::1.0
boolean values::1.0
single list::1.0
list algorithms::1.0
special value::1.0
excessive amount::1.0
chapel hill::1.0
small list::1.0
computer research::1.0
optimal locality::1.0
balanced state::1.0
move-to-front heuristic::1.0
including proceedings::1.0
efficient algorithms::1.0
data items::1.0
extra space::1.0
efficient insertion::1.0
access lists::1.0
function iterate::1.0
north carolina::1.0
reduce access::1.0
memory pools::1.0
hash linking::1.0
iterative commands::1.0
array indices::1.0
technology retrieved::1.0
additional operation::1.0
referencing record::1.0
node.value node::1.0
double-ended queue::1.0
parametric types::1.0
number crunching::1.0
source code::1.0
cache performance::1.0
technical report::1.0
newnode suppose::1.0
family memnode::1.0
arbitrary number::1.0
initial fields::1.0
derived languages::1.0
wikimedia commons::1.0
mutation complexities::1.0
review article::1.0
information theory::1.0
computer programming::1.0
improve search::1.0
nodes based::1.0
total memory::1.0
succeeding portions::1.0
election method::1.0
next pointer::1.0
node somenode::1.0
record list::1.0
stack arrays::1.0
per-dimension constant::1.0
end-of-list tests::1.0
general store::1.0
convention simplifies::1.0
clarification needed::1.0
string lastname::1.0
artificial intelligence::1.0
destroy obsoletenode::1.0
big java::1.0
head node::1.0
circular structure::1.0
array data::1.0
basic concepts::1.0
external links::1.0
limited::0.0
node.next.next destroy::0.0
dynamic::0.0
2004-08-16::0.0
basic contributions::0.0
kruse::0.0
stroustrup::0.0
data s index::0.0
updated::0.0
lack::0.0
led victor::0.0
now-classic diagram::0.0
summarized::0.0
0-262-03293-7::0.0
multiple::0.0
chapel::0.0
basics::0.0
alastnode::0.0
solution::0.0
common data::0.0
expressions::0.0
machines::0.0
established::0.0
language processing::0.0
complexities::0.0
deletion node::0.0
tail::0.0
suppose::0.0
increasing::0.0
consisting::0.0
simultaneously::0.0
composed::0.0
successive list::0.0
fields set::0.0
aparallel::0.0
logarithmic::0.0
balance::0.0
items::0.0
leaves::0.0
typically::0.0
procedure::0.0
smoke::0.0
advantages::0.0
6.2.1::0.0
york::0.0
wikimedia::0.0
explained::0.0
node.next::0.0
unix::0.0
r-tree::0.0
additional links::0.0
stand::0.0
total::0.0
linearly::0.0
ch20 data::0.0
indiana::0.0
type::0.0
creates::0.0
award::0.0
backwards::0.0
empty linear::0.0
nodes::0.0
circumstances::0.0
springer::0.0
word::0.0
work::0.0
.balance print::0.0
lincoln::0.0
concepts::0.0
algorithms mit::0.0
natural language::0.0
iterative::0.0
naturally::0.0
implementations::0.0
updating firstnode::0.0
fibonacci::0.0
college spring::0.0
association::0.0
unordered::0.0
end::0.0
sentinel s data::0.0
machine::0.0
could-er::0.0
manipulating::0.0
place::0.0
preferable::0.0
end-sentinel::0.0
description::0.0
memory block::0.0
replacing::0.0
turing::0.0
pieterse::0.0
diagram::0.0
jumping::0.0
goingnative::0.0
shaw::0.0
wins::0.0
patent::0.0
simple caches::0.0
decreasing::0.0
cpu::0.0
operations::0.0
executed::0.0
technique included::0.0
university computer::0.0
fifo::0.0
isbn::0.0
highlights::0.0
linear data::0.0
individually::0.0
listhead::0.0
amember::0.0
car singly linked::0.0
eventually::0.0
widely::0.0
double-linked lists::0.0
afamily.next::0.0
node.value::0.0
access patterns::0.0
node empty::0.0
queues::0.0
routines::0.0
storage needed::0.0
topp::0.0
associative::0.0
inserts::0.0
message parsing::0.0
commons::0.0
combining::0.0
laboratory::0.0
herbert::0.0
extract::0.0
array::0.0
network::0.0
sector::0.0
mccarthy::0.0
science library::0.0
computer chess::0.0
turning::0.0
linear::0.0
free::0.0
indices::0.0
hand::0.0
next-node::0.0
move-to-front::0.0
major data::0.0
messages::0.0
quickest::0.0
firstnode points::0.0
tss operating system::0.0
allocators::0.0
relocatable::0.0
list indexing::0.0
characters::0.0
coding::0.0
primary::0.0
system::0.0
easy sequential::0.0
list.firstnode.next::0.0
similarly::0.0
needed::0.0
california::0.0
listed::0.0
john::0.0
lists in-place::0.0
operating systems::0.0
western::0.0
wasted::0.0
consor::0.0
tree::0.0
design::0.0
separate node::0.0
reduces search::0.0
manner::0.0
shanmugasundaram::0.0
contents::0.0
inefficient::0.0
implemented::0.0
related data::0.0
convenient::0.0
brodnik::0.0
indexes::0.0
non-circular::0.0
next  field::0.0
object::0.0
prohibitive::0.0
simplify::0.0
list consists::0.0
hide::0.0
newnode.next::0.0
dummy::0.0
doi::0.0
parametric::0.0
calculated::0.0
points::0.0
article entitled::0.0
list trees::0.0
data types::0.0
random::0.0
insertafter::0.0
subtle::0.0
make::0.0
complexity trade-offs::0.0
depth::0.0
payload  fields::0.0
implementation::0.0
situations::0.0
6.1.1::0.0
predecessor::0.0
report::0.0
impractical::0.0
method::0.0
traversed::0.0
contrast::0.0
e.g::0.0
data indexes::0.0
traverse::0.0
human::0.0
reference::0.0
function removebeginning::0.0
1960s::0.0
unexpectedly::0.0
result::0.0
fail::0.0
external data::0.0
list representation::0.0
subject::0.0
addison-wesley::0.0
constant-time::0.0
wikipedia::0.0
simplest::0.0
inline citations::0.0
listfree::0.0
cdr links::0.0
approach::0.0
ire::0.0
extend::0.0
nature::0.0
university retrieved::0.0
consists::0.0
accessed::0.0
separately::0.0
self-compiling::0.0
improve::0.0
received::0.0
first element::0.0
amortized::0.0
blocks representing::0.0
merging::0.0
logic::0.0
adapted::0.0
appeared::0.0
0-13-085850-1::0.0
conference::0.0
common final::0.0
predetermined::0.0
basic::0.0
expected::0.0
collections::0.0
families::0.0
list-processing::0.0
uncommon::0.0
locations::0.0
remain unclear::0.0
kernel linked::0.0
remaining::0.0
complexity::0.0
cases linear::0.0
avoid storing::0.0
gnd::0.0
created language::0.0
cons::0.0
theory machine::0.0
reports::0.0
allen::0.0
march::0.0
list explained::0.0
perform::0.0
node reference::0.0
consor cons::0.0
complex::0.0
split::0.0
entitled::0.0
templates::0.0
nil::0.0
extract family::0.0
horstmann::0.0
linked-list::0.0
programs::0.0
trick::0.0
svante::0.0
unsuitable::0.0
list-handling::0.0
left::0.0
birth::0.0
links point::0.0
succeeding::0.0
adding::0.0
cells based::0.0
cs-99-09::0.0
n::0.0
easy::0.0
disadvantage::0.0
fixed-size::0.0
links advantages::0.0
lafayette indiana::0.0
makes sense::0.0
possibly::0.0
descending::0.0
performance::0.0
manual::0.0
mit::0.0
specific::0.0
sparse::0.0
amember null::0.0
people::0.0
function insertbeginning::0.0
unnecessary::0.0
consultants::0.0
election::0.0
systems consultants::0.0
case algorithms::0.0
obsoletenode function::0.0
pointers requiring::0.0
bottom::0.0
actual data::0.0
track::0.0
allocate::0.0
complex variants::0.0
deleted::0.0
arbitrary::0.0
data representation::0.0
binomial::0.0
shifting::0.0
entire first::0.0
mcgraw::0.0
0-13-280843-9::0.0
properties::0.0
array balanced::0.0
chapter::0.0
families print::0.0
distinct::0.0
international conference::0.0
automatically::0.0
array s end::0.0
successive::0.0
obtaining::0.0
parsing::0.0
multiply::0.0
lists require::0.0
pointers systems::0.0
support::0.0
initial::0.0
constant-time random::0.0
184.doi::0.0
fewer special::0.0
overhead::0.0
list array::0.0
head::0.0
ford::0.0
heap::0.0
enumerating::0.0
removed::0.0
true::0.0
portions::0.0
arrays::0.0
maximum::0.0
simplifying::0.0
lists benefit::0.0
delete::0.0
abstract::0.0
lists joins::0.0
stanford::0.0
exist::0.0
amember.next::0.0
marking::0.0
node.next.next::0.0
extract member::0.0
locality::0.0
generally::0.0
proceedings::0.0
simple ways::0.0
setting::0.0
test::0.0
nt::0.0
node::0.0
list structures::0.0
permitting::0.0
mechanical::0.0
reorganization::0.0
faster::0.0
serialized::0.0
non-empty::0.0
integer listhead::0.0
eliminate::0.0
backward::0.0
stacks::0.0
array requires::0.0
problem concerns::0.0
kenneth::0.0
pros::0.0
datum::0.0
manages::0.0
computation::0.0
layers::0.0
clarification::0.0
node past::0.0
graph::0.0
technique::0.0
include insertion::0.0
list-processing language::0.0
charles::0.0
string::0.0
advantage::0.0
national institute::0.0
entries::0.0
minute::0.0
reallocation::0.0
swapping::0.0
solver::0.0
proc::0.0
metadata::0.0
standards::0.0
solved::0.0
program linked::0.0
lists built::0.0
joint computer::0.0
element integer::0.0
variables::0.0
structure consisting::0.0
cost::0.0
run::0.0
cargo::0.0
high-level::0.0
shares::0.0
current::0.0
sequential::0.0
international::0.0
authority control::0.0
processing::0.0
tail-sharing::0.0
address::0.0
appears::0.0
institute::0.0
chess program::0.0
recursive algorithms::0.0
queue::0.0
wilkes::0.0
number system::0.0
lists offer::0.0
ipl::0.0
quad-edge::0.0
marker::0.0
traversing::0.0
anylist::0.0
efficient external::0.0
handles::0.0
memory::0.0
prev::0.0
appending::0.0
mansfield::0.0
cases::0.0
node elements::0.0
ibm::0.0
car::0.0
functional programming::0.0
memory space::0.0
values::0.0
growing::0.0
collections framework::0.0
access listusing::0.0
multiple linked::0.0
sense::0.0
compile::0.0
performed::0.0
reduced memory::0.0
means::0.0
listusing::0.0
write::0.0
map::0.0
applications::0.0
produce::0.0
crunching::0.0
date::0.0
representations::0.0
data::0.0
member members::0.0
natural::0.0
accelerates::0.0
slightly::0.0
2004-12-14::0.0
list problems::0.0
joins::0.0
vice versa::0.0
entry records::0.0
seizing::0.0
pointer::0.0
tendency::0.0
wasting::0.0
flex9::0.0
double-ended::0.0
main::0.0
nt iterate backwards::0.0
records::0.0
processing led::0.0
half::0.0
sorted::0.0
hall::0.0
cognition::0.0
arrows::0.0
average search::0.0
proper data::0.0
current first::0.0
steven::0.0
balanced::0.0
decision diagram::0.0
linear a circular::0.0
firstname::0.0
3rd::0.0
contained::0.0
references cdr::0.0
shows::0.0
theory::0.0
derived::0.0
care::0.0
language::0.0
shaffer::0.0
programming::0.0
memnode.data extract::0.0
thing::0.0
view::0.0
first::0.0
simplifies::0.0
pseudocode::0.0
symbolic::0.0
fast::0.0
directly::0.0
end-of-list::0.0
impossible::0.0
decreasing average::0.0
ways::0.0
open::0.0
size::0.0
occupy::0.0
past deleted::0.0
types::0.0
convention::0.0
structures::0.0
easier::0.0
acm turing::0.0
sentinels::0.0
continuous::0.0
directories::0.0
released::0.0
short::0.0
eliminated::0.0
representing::0.0
message::0.0
computer conference::0.0
require::0.0
payload::0.0
offer::0.0
angel::0.0
bert::0.0
invalidated::0.0
conversion::0.0
form::0.0
efficient::0.0
kulesh::0.0
singly-linked::0.0
caches::0.0
note::0.0
maintain::0.0
algorithms::0.0
search times::0.0
strengths::0.0
lists include::0.0
opposite::0.0
binary decision::0.0
firstnode function::0.0
inserted::0.0
bobrow::0.0
open data::0.0
average::0.0
incontiguously::0.0
order::0.0
choice::0.0
precise::0.0
common abstract::0.0
integer fields::0.0
complicated base::0.0
slot::0.0
min-list::0.0
store references::0.0
insertbefore::0.0
desired::0.0
black::0.0
carolina::0.0
ranking::0.0
quickly::0.0
media::0.0
nodes exist::0.0
inside::0.0
kernel::0.0
declared::0.0
physically::0.0
notice::0.0
sources remain::0.0
college::0.0
review::0.0
double-linked::0.0
prentice::0.0
basis::0.0
structure node::0.0
self-organizing list::0.0
optimal::0.0
case circular::0.0
simplifying memory::0.0
article::0.0
efficiency::0.0
nomenclature::0.0
decades::0.0
node s address::0.0
solving::0.0
storing::0.0
maintained::0.0
sentinel::0.0
0-201-89683-4::0.0
west::0.0
skew::0.0
doubly-linked::0.0
trie::0.0
file system::0.0
combined::0.0
direction::0.0
formed::0.0
commands::0.0
pre-allocated::0.0
intelligence programs::0.0
lincoln laboratory::0.0
case::0.0
schemes exist::0.0
general memory::0.0
s-expressions::0.0
cast::0.0
tree graphs::0.0
included flex::0.0
self-organizing::0.0
.next::0.0
return::0.0
property::0.0
technology::0.0
develop::0.0
circularly::0.0
granted::0.0
unrolled::0.0
fewer::0.0
pointer the remaining::0.0
arguments::0.0
knuth::0.0
cdr coding::0.0
disadvantages::0.0
allocation::0.0
running::0.0
skip::0.0
framework::0.0
vacant::0.0
costs::0.0
jersey::0.0
sparse array::0.0
rest::0.0
heuristic::0.0
null node::0.0
versa::0.0
parsing routines::0.0
final portion::0.0
easily::0.0
read::0.0
empty function::0.0
early::0.0
array tree::0.0
unesco::0.0
meaning::0.0
adams::0.0
reduces::0.0
serves::0.0
benefit::0.0
output::0.0
records list::0.0
reduced::0.0
node operations::0.0
distinct lists::0.0
nullto::0.0
elements::0.0
provided::0.0
dimensions::0.0
data fields::0.0
demaine::0.0
references::0.0
found::0.0
rearranging::0.0
comparison::0.0
supported,parallel::0.0
versa sentinel::0.0
discussed::0.0
acm::0.0
ranking problem::0.0
addition::0.0
greatly::0.0
processor::0.0
referenced::0.0
wasteful::0.0
variable::0.0
schemes::0.0
elementary::0.0
entry pointed::0.0
log::0.0
philadelphia::0.0
jones::0.0
idea::0.0
change::0.0
applying::0.0
somenode notice::0.0
age::0.0
required::0.0
moved::0.0
data required::0.0
allocating::0.0
moves::0.0
fill::0.0
keynote::0.0
storage::0.0
green::0.0
memory access::0.0
field::0.0
poor::0.0
separate::0.0
includes::0.0
suited::0.0
included::0.0
traversal::0.0
building::0.0
andrej::0.0
insertions::0.0
listhead entry::0.0
point past::0.0
raphael::0.0
starting::0.0
represent::0.0
pointing::0.0
wjcc::0.0
disk::0.0
laboratory published::0.0
rivest::0.0
removal::0.0
commonly::0.0
recursive data::0.0
program::0.0
immutable::0.0
.name::0.0
restrict::0.0
removing::0.0
occasionally::0.0
print::0.0
worst::0.0
somenode::0.0
leads::0.0
lisp::0.0
list::0.0
large::0.0
bjarne::0.0
single sentinel::0.0
wasted space::0.0
small::0.0
deallocated::0.0
correct::0.0
james::0.0
past::0.0
famnode.data extract::0.0
choices::0.0
citations::0.0
section::0.0
alternatives::0.0
small data::0.0
full::0.0
hash::0.0
modify::0.0
operating::0.0
directions::0.0
table::0.0
search::0.0
nth::0.0
non-circular lists::0.0
exceptionally::0.0
significantly::0.0
amount::0.0
fixed-size array::0.0
published::0.0
real::0.0
family::0.0
requiring::0.0
overhead disadvantages::0.0
representations unrolled::0.0
clifford::0.0
conventional::0.0
wanted::0.0
dereferenced::0.0
2005-04-04::0.0
single::0.0
two::0.0
juniata college::0.0
node data::0.0
7,2015::0.0
problem::0.0
parlante::0.0
multiset::0.0
keeping::0.0
middle::0.0
science::0.0
created::0.0
previous data::0.0
remain::0.0
history::0.0
node print::0.0
minimum::0.0
numbers::0.0
arise::0.0
improved cache::0.0
subtrees::0.0
information::0.0
memory allocators::0.0
recursive::0.0
lastnode::0.0
automatic::0.0
leiserson::0.0
speeding::0.0
ignore::0.0
0-07-282379-8::0.0
binary::0.0
weaknesses::0.0
variant::0.0
member string::0.0
catalog::0.0
afamily::0.0
removebeginning::0.0
broadcasting::0.0
fundamental::0.0
inline::0.0
retrieval::0.0
0-13-660911-2::0.0
rand::0.0
developed::0.0
per-dimension::0.0
paper::0.0
style::0.0
insufficient inline::0.0
storage space::0.0
gerald::0.0
compiling::0.0
systems::0.0
good::0.0
resizable::0.0
comit::0.0
singly-linked linear::0.0
removebefore::0.0
resized::0.0
done::0.0
notes::0.0
constructing::0.0
list adts::0.0
contiguous::0.0
reduce::0.0
sequential scanning::0.0
connect::0.0
operation::0.0
trade-offs juniata::0.0
buffers::0.0
delete cells::0.0
psychology::0.0
robert::0.0
research::0.0
hill::0.0
denoted::0.0
occurs::0.0
moving half::0.0
famnode.data::0.0
reason::0.0
base::0.0
members::0.0
algorithm design::0.0
beginning::0.0
memory allocation::0.0
data referenced::0.0
top::0.0
major::0.0
free memory::0.0
number::0.0
fancy::0.0
variants add::0.0
hashed array::0.0
introduction::0.0
channel9.msdn.com::0.0
okasaki::0.0
expand::0.0
scheme::0.0
store::0.0
pointer history::0.0
option::0.0
sorted lists::0.0
dummy  node::0.0
fields indicating::0.0
translation::0.0
linking::0.0
stl::0.0
doubly::0.0
remove node::0.0
array linked::0.0
proper list::0.0
container::0.0
cumbersome::0.0
xor-linking::0.0
orders::0.0
built::0.0
members print::0.0
internal::0.0
build::0.0
finding::0.0
pool leaves::0.0
slow::0.0
added::0.0
sets::0.0
reach::0.0
newell::0.0
splay::0.0
4783888-7::0.0
acyclic graph::0.0
array integer::0.0
constructed::0.0
representing list::0.0
family string::0.0
fields the head::0.0
2nd::0.0
part::0.0
caching::0.0
operation linked::0.0
authors::0.0
90013-8::0.0
cdr::0.0
excessive::0.0
2009-09-21::0.0
find::0.0
tradeoffs involving::0.0
sub-list::0.0
generic pointer::0.0
factor::0.0
signal broadcasting::0.0
joseph::0.0
circle::0.0
lastname::0.0
trees::0.0
donald::0.0
shared::0.0
carlsson::0.0
compiler::0.0
bytes::0.0
underlying::0.0
common::0.0
double::0.0
vincent::0.0
node firstnode::0.0
locating::0.0
scanning::0.0
set::0.0
signify::0.0
maurice::0.0
intelligence::0.0
individual::0.0
close::0.0
back pointer::0.0
matter::0.0
accessed nodes::0.0
call::0.0
newnode::0.0
listfree integer::0.0
creating::0.0
yngve::0.0
last::0.0
reverse::0.0
treated::0.0
annual::0.0
context::0.0
pdf::0.0
nodes multiple::0.0
arbitrarily::0.0
point::0.0
simple::0.0
simply::0.0
node members::0.0
famnode::0.0
expensive::0.0
ensures::0.0
per-array::0.0
create::0.0
due::0.0
complicated::0.0
navigate::0.0
extends::0.0
in-place::0.0
empty::0.0
vreda::0.0
addison::0.0
structures types::0.0
binary number::0.0
handling::0.0
loop::0.0
list beginning::0.0
terminator::0.0
null::0.0
belong::0.0
previous nodes::0.0
deletion::0.0
day::0.0
list-processing computer::0.0
moving::0.0
stack::0.0
list ranking::0.0
field pointing::0.0
analysis::0.0
person::0.0
entry::0.0
spend::0.0
private memory::0.0
0-201-31452-5::0.0
cays::0.0
extra::0.0
source::0.0
location::0.0
input::0.0
chess::0.0
stein::0.0
big::0.0
last data::0.0
integer::0.0
bit::0.0
signal::0.0
traversing pointers::0.0
communications::0.0
yields::0.0
afamily.members::0.0
names::0.0
prohibitive costs::0.0
spring::0.0
back::0.0
diagram consisting::0.0
established bert::0.0
pronounced::0.0
decision::0.0
transactions::0.0
minimal::0.0
inserting::0.0
step::0.0
hilbert::0.0
emulated::0.0
b-tree::0.0
java collections::0.0
involving::0.0
block::0.0
nodes combining::0.0
fast random::0.0
list rearranges::0.0
iterate::0.0
next::0.0
placing::0.0
underlying array::0.0
forward::0.0
adam::0.0
files::0.0
fragmented::0.0
link::0.0
authority::0.0
nodes hash::0.0
line::0.0
directed::0.0
program reports::0.0
mit lincoln::0.0
similar::0.0
constant::0.0
introducing::0.0
defined::0.0
likewise::0.0
singly::0.0
package::0.0
proper::0.0
polygon::0.0
buffer::0.0
nick::0.0
dynamic data::0.0
department::0.0
denote::0.0
problems::0.0
william::0.0
list.firstnode::0.0
structure::0.0
algorithm::0.0
vice::0.0
node the tail::0.0
id06::0.0
lafayette::0.0
decreasing memory::0.0
requires::0.0
avoid::0.0
code::0.0
sedgewick::0.0
thomas::0.0
existing::0.0
eds::0.0
contributions::0.0
issues::0.0
josephus::0.0
simon::0.0
languages::0.0
helps::0.0
insertbeginning::0.0
include::0.0
indicating::0.0
random-access::0.0
continues::0.0
tradeoffs::0.0
turing award::0.0
positions::0.0
book big java::0.0
mini-flex::0.0
assignments::0.0
freed::0.0
deleting::0.0
solutions::0.0
deleted node::0.0
smaller::0.0
pointer data::0.0
jump::0.0
insertion::0.0
append::0.0
victor::0.0
index::0.0
directory entry::0.0
giving::0.0
famnode.next::0.0
marketed::0.0
experiment::0.0
renders::0.0
language ipl::0.0
led::0.0
making::0.0
functional random-access::0.0
wesley::0.0
technical::0.0
resulting::0.0
implement::0.0
makes::0.0
involves::0.0
addresses::0.0
private::0.0
boolean::0.0
linux kernel::0.0
function removeafter::0.0
building linked::0.0
manipulate::0.0
standing::0.0
asymptotic::0.0
remains::0.0
cache::0.0
209.isbn::0.0
common tradeoffs::0.0
actual::0.0
red-black::0.0
account::0.0
indexed::0.0
averaged::0.0
memory management::0.0
control::0.0
impedes::0.0
reserved::0.0
links::0.0
process::0.0
prentice-hall::0.0
algorithms require::0.0
practical::0.0
word graph::0.0
purpose::0.0
memnode.data::0.0
cormen::0.0
lisp s major::0.0
circular::0.0
blocks::0.0
balance schemes::0.0
space::0.0
hashed::0.0
collection::0.0
element function::0.0
insufficient::0.0
acyclic::0.0
purely::0.0
.balance::0.0
encyclopedia::0.0
west lafayette::0.0
creation::0.0
iteration::0.0
including::0.0
referencing::0.0
linguistics::0.0
complicate::0.0
located::0.0
tsc::0.0
2.2.3-2.2.5::0.0
defining::0.0
multimap::0.0
type field::0.0
indexing::0.0
mitigated::0.0
front::0.0
handy::0.0
acyclic word::0.0
support abstract::0.0
february::0.0
edit::0.0
university::0.0
systems developed::0.0
worst-case::0.0
fields::0.0
pools::0.0
storing firstnode::0.0
related::0.0
remove::0.0
exceeded::0.0
special::0.0
out::0.0
list ends::0.0
data nodes::0.0
contiguously::0.0
first list::0.0
separate case::0.0
memnode null::0.0
lecture::0.0
electronics::0.0
architecture::0.0
dictionary::0.0
retrieved::0.0
problem solver::0.0
node destroy::0.0
ronald::0.0
waterloo::0.0
obsoletenode::0.0
maintain balance::0.0
times::0.0
length::0.0
list type::0.0
footnotes::0.0
anita::0.0
memnode::0.0
base cases::0.0
self-balancing::0.0
long::0.0
atlist.firstnode.next::0.0
management::0.0
start::0.0
unknown::0.0
integer prev::0.0
priority::0.0
final::0.0
smoke signal::0.0
extra sentinel::0.0
lists::0.0
reallocate::0.0
simulate::0.0
manipulation::0.0
general problem::0.0
updating::0.0
pointers::0.0
double-ended priority::0.0
list package::0.0
assumes::0.0
collins::0.0
newnode linked::0.0
disjoint::0.0
north::0.0
element::0.0
linked::0.0
viewed::0.0
complete::0.0
storage works::0.0
instance::0.0
rearranges::0.0
concerns::0.0
arrays insertion::0.0
juniata::0.0
obsoletenode notice::0.0
xor::0.0
print entry::0.0
rearrange::0.0
connected::0.0
representation::0.0
now-classic::0.0
technical systems::0.0
ch20::0.0
graphs::0.0
nodes applying::0.0
fact::0.0
list approach::0.0
early artificial::0.0
supported::0.0
destroy::0.0
artificial::0.0
simple list-processing::0.0
trivial::0.0
principal::0.0
based::0.0
type operations::0.0
terminal::0.0
originally::0.0
similar memory::0.0
pointed::0.0
individual elements::0.0
handle::0.0
memnode.next::0.0
western joint::0.0
removeafter::0.0
joint::0.0
simple recursive::0.0
words::0.0
procedures::0.0
processes::0.0
logic theory::0.0
practical data::0.0
national::0.0
computer::0.0
full list::0.0
recently::0.0
search tree::0.0
state::0.0
difficulties::0.0
routine::0.0
ends::0.0
ability::0.0
comit programming::0.0
implementing::0.0
group::0.0
reallocated::0.0
taking::0.0
list augmented::0.0
april::0.0
adts::0.0
family s members::0.0
safely::0.0
unclear::0.0
structures authority::0.0
allocates::0.0
allocated::0.0
random-access lists::0.0
copied::0.0
faced::0.0
nodes appears::0.0
ordering::0.0
ensuring::0.0
improved::0.0
general::0.0
213,501::0.0
external::0.0
time-shared::0.0
value::0.0
tss::0.0
paul::0.0
thing makes::0.0
somenode null::0.0
layer::0.0
node.data::0.0
file::0.0
cell::0.0
flex::0.0
contiguity::0.0
avl::0.0
antonakos::0.0
system catalog::0.0
generic::0.0
juan::0.0
access::0.0
proceeds::0.0
member::0.0
allocator::0.0
binary random::0.0
difficult::0.0
first unesco::0.0
heapsort::0.0
architectures::0.0
list.firstnode.next point::0.0
finds::0.0
patterns::0.0
corporation::0.0
binary search::0.0
position::0.0
face-edge::0.0
ignatius::0.0
stores::0.0
hybrid::0.0
sources::0.0
stored::0.0
list basics::0.0
entire::0.0
previous element::0.0
smith::0.0
reasons::0.0
add::0.0
book::0.0
combine::0.0
tests::0.0
increased::0.0
increases::0.0
resolves::0.0
press::0.0
variants::0.0
insert::0.0
motorola::0.0
corners::0.0
works::0.0
exceed::0.0
functional::0.0
sequence::0.0
linux::0.0
searching::0.0
library::0.0
repeat::0.0
list linked::0.0
round-robin::0.0
demonstrates::0.0
manipulations::0.0
node the field::0.0
mutation::0.0
assuming::0.0
chains::0.0
symbol::0.0
node obsoletenode::0.0
creating simple::0.0
famnode null::0.0
java::0.0
periodically::0.0
tree random::0.0
simpler::0.0
extension::0.0
foil::0.0
recognized::0.0
carries::0.0
kjellkod.wordpress.com::0.0
separate structures::0.0
massachusetts::0.0
pergamon::0.0
chris::0.0
firstnode::0.0
additions::0.0
utility::0.0
additional::0.0
transfer::0.0
trade-offs::0.0
pool::0.0
referenceand::0.0
cliff::0.0
function::0.0
munro::0.0
count::0.0
iterates::0.0
fragmentation::0.0
made::0.0
cells::0.0
record::0.0
piece::0.0
display::0.0
skiena::0.0
functions::0.0
link structure::0.0
categories::0.0
inherently::0.0
directory::0.0
victor yngve::0.0
previous::0.0
incurred::0.0
factors::0.0
persistent::0.0
portion::0.0
augmented::0.0
