features of mathematics
science like mathematicians
scientists use formal
languages to denote
components into systems
systems and evaluating
tradeoffs among alternatives
alternatives like scientists
observe the behavior
behavior of complex
predictions the single
single most important
scientist is problem
problem solving problem
solving problem solving
problem solving means
means the ability
ability to formulate
creatively about solutions
express a solution
process of learning
learning to program
opportunity to practice
practice problem solving
problem solving skills
python programming language
language the programming
learning is python
languages loosely speaking
execute programs written
written in low-level
run this extra
extra processing takes
disadvantage of high-level
advantages are enormous
easier to program
high-level language programs
language programs written
shorter and easier
easier to read
languages are portable
kinds of computers
modifications low-level programs
programs can run
kind of computer
rewritten to run
programs are written
written in high-level
high-level languages low-level
languages low-level languages
applications two kinds
kinds of programs
programs process high-level
process high-level languages
languages into low-level
interpreters and compilers
compilers an interpreter
reads a high-level
program and executes
processes the program
alternately reading lines
lines and performing
performing computations source
computations source output
source output code
output code interpreter
interpreter a compiler
reads the program
program and translates
program starts running
program is compiled
translation output code
output code object
code object executor
object executor code
executor code source
code source compiler
source compiler python
python is considered
considered an interpreted
language because python
programs are executed
mode and script
mode in command-line
type python programs
prints the result
credits or license
command that starts
starts the python
lines are messages
prompt the interpreter
ready we typed
write a program
interpreter to execute
execute the contents
editor to create
create a file
file named latoya.py
programs have names
names that end
end with .py
.py to execute
execute the program
details of executing
programs may differ
book are executed
command line working
line is convenient
convenient for program
development and testing
programs and execute
execute them immediately
execute or modify
program a program
sequence of instructions
instructions that specifies
perform a computation
computation the computation
solving a system
system of equations
equations or finding
finding the roots
searching and replacing
compiling a program
program the details
screen or send
perform basic mathematical
basic mathematical operations
operations like addition
addition and multiplication
multiplication conditional execution
conditions and execute
sequence of statements
perform some action
matter how complicated
process of breaking
breaking a large
task into smaller
smaller and smaller
subtasks are simple
talk about algorithms
done by human
leads to errors
errors for whimsical
process of tracking
debugging three kinds
kinds of errors
errors can occur
order to track
quickly 1.3.1 syntax
1.3.1 syntax errors
syntax errors python
execute a program
fails and returns
returns an error
error message syntax
message syntax refers
sentence must begin
letter and end
period this sentence
read the poetry
cummings without spewing
spewing error messages
error messages python
single syntax error
python will print
print an error
message and quit
run your program
first few weeks
spend a lot
tracking down syntax
make fewer errors
errors and find
find them faster
1.3.2 runtime errors
type of error
run the program
program these errors
happened runtime errors
errors are rare
first few chapters
1.3.3 semantic errors
generate any error
program you wrote
program you wanted
wanted to write
write the meaning
wrong identifying semantic
identifying semantic errors
doing 1.3.4 experimental
1.3.4 experimental debugging
acquire is debugging
parts of programming
confronted with clues
infer the processes
processes and events
events that led
modify your program
hypothesis was correct
predict the result
hypothesis was wrong
sherlock holmes pointed
eliminated the impossible
programming and debugging
debugging a program
make small modifications
thousands of lines
lines of code
simple program linus
program linus torvalds
explore the intel
switch between printing
aaaa and bbbb
evolved to linux
linux users guide
users guide beta
guide beta version
chapters will make
make more suggestions
suggestions about debugging
formal and natural
natural languages natural
languages natural languages
languages that people
designed by people
impose some order
evolved naturally formal
naturally formal languages
languages are languages
people for specific
notation that mathematicians
good at denoting
relationships among numbers
numbers and symbols
language to represent
represent the chemical
structure of molecules
languages are formal
designed to express
express computations formal
computations formal languages
formal languages tend
rules about syntax
syntactically correct mathematical
correct mathematical statement
syntactically correct chemical
pertaining to tokens
tokens and structure
token in mathematics
type of syntax
syntax error pertains
tokens are arranged
arranged the statement
create what appears
well-structured english sentence
sentence with unrecognizable
write another sentence
read a sentence
sentence in english
hear the sentence
subject and fell
parsed a sentence
means to fall
understand the general
sentence although formal
features in common
languages are full
full of ambiguity
information formal languages
languages are designed
order to make
ambiguity and reduce
natural languages employ
languages employ lots
lots of redundancy
verbose formal languages
full of idiom
idiom and metaphor
falling formal languages
people who grow
grow up speaking
speaking a natural
hard time adjusting
adjusting to formal
difference between formal
difference between poetry
poetry and prose
poem together creates
creates an effect
effect or emotional
emotional response ambiguity
meaning of words
contributes more meaning
amenable to analysis
analysis than poetry
program is unambiguous
unambiguous and literal
suggestions for reading
remember that formal
dense than natural
longer to read
idea to read
read from top
top to bottom
left to right
learn to parse
parse the program
identifying the tokens
tokens and interpreting
interpreting the structure
matter little things
things like spelling
errors and bad
make a big
first program written
display the words
paper it displays
displays a value
mark the beginning
beginning and end
result some people
judge the quality
world ! program
glossary problem solving
process of formulating
formulating a problem
finding a solution
expressing the solution
solution high-level language
language like python
easy for humans
humans to read
read and write
write low-level language
computer to execute
assembly language portability
language by translating
translate a program
execution source code
compiled object code
translates the program
set of instructions
specifies a computation
process for solving
solving a category
category of problems
process of finding
finding and removing
kinds of programming
programming errors syntax
program syntax error
program that makes
makes it impossible
impossible to parse
impossible to interpret
program has started
started to execute
prevents the program
program from continuing
runtime error semantic
error semantic error
programmer intended semantics
program natural language
speak that evolved
naturally formal language
people have designed
designed for specific
representing mathematical ideas
ideas or computer
formal languages token
natural language parse
examine a program
program and analyze
analyze the syntactic
syntactic structure print
structure print statement
interpreter to display
display a value
expressions and statements
values and types
types a value
manipulates the values
string of letters
enclosed in quotation
marks the print
statement also works
works for integers
type a value
str and integers
type called float
numbers are represented
format called floating-point
marks like strings
type a large
commas between groups
integer in python
runs without producing
producing an error
ability to manipulate
variables a variable
value the assignment
assignment statement creates
creates new variables
makes three assignments
assignments the first
assigns the string
variable named message
variables on paper
variable s value
value this kind
kind of figure
shows what state
variable s state
state of mind
shows the result
names and keywords
works with variables
case the result
value it refers
programmers generally choose
generally choose names
meaningful they document
letters and numbers
convention we don
remember that case
case matters bruce
bruce and bruce
variables the underscore
names with multiple
price of tea
tea in china
give a variable
variable an illegal
76trombones = big
big parade syntaxerror
class = computer
invalid syntax 76trombones
76trombones is illegal
wrong with class
class it turns
out that class
python keywords keywords
keywords keywords define
define the language
language s rules
rules and structure
variable names python
python has twenty-nine
return assert del
del finally import
pass while class
print yield continue
continue except global
global lambda raise
statements a statement
interpreter can execute
kinds of statements
print and assignment
type a statement
displays the result
value assignment statements
assignment statements don
don t produce
produce a result
result a script
print x produces
produces the output
assignment statement produces
produces no output
expressions an expression
combination of values
type an expression
expressions contain values
elements a value
considered an expression
evaluating an expression
thing as printing
printing a value
python interpreter displays
displays the value
enter a value
case of strings
includes the quotation
displays the contents
change the script
script to display
display the values
operators and operands
operators are special
symbols that represent
computations like addition
multiplication the values
values the operator
legal python expressions
expressions whose meaning
parenthesis for grouping
mathematics the asterisk
symbol for multiplication
symbol for exponentiation
variable name appears
operation is performed
surprised by division
value of minute
python is performing
performing integer division
operands are integers
division always rounds
calculate a percentage
result is rounded
correct another alternative
order of operations
order of evaluation
rules of precedence
operators that mathematics
remember the order
operations on strings
force an expression
expression to evaluate
expressions in parentheses
parentheses are evaluated
parentheses to make
make an expression
doesn t change
change the result
multiplication and division
higher than addition
addition and subtraction
precedence are evaluated
evaluated from left
multiplication happens first
right to left
strings in general
perform mathematical operations
assuming that message
message has type
message-1 hello message
operator does work
work with strings
expect for strings
operator represents concatenation
operands by linking
linking them end-to-end
fruit = banana
bakedgood = nut
nut bread print
bread print fruit
fruit + bakedgood
bakedgood the output
program is banana
banana nut bread
bread the space
nut is part
produce the space
strings the operator
operator also works
works on strings
sense by analogy
analogy with addition
fun + fun
concatenation and repetition
property that addition
statements in isolation
features of programming
small building blocks
blocks and compose
expression involving numbers
inside a print
number of minutes
minutes since midnight
put arbitrary expressions
examples where composition
express complex computations
neatly and concisely
comments as programs
programs get bigger
difficult to read
read formal languages
languages are dense
piece of code
code and figure
idea to add
programs to explain
explain in natural
program is doing
doing these notes
compute the percentage
program the message
message is intended
reminds the reader
behavior of integer
division this sort
sort of comment
integer division operation
effect is deliberate
integer division operator
number or string
variable or computed
set of values
values the type
format for representing
numbers with fractional
fractional parts variable
section of code
code that represents
represents a command
command or action
assignments and print
print statements assignment
statement that assigns
assigns a value
operator may change
change in future
versions of python
statements state diagram
set of variables
compiler to parse
parse a program
variable names operator
symbol that represents
represents a simple
computation like addition
string concatenation operand
operator operates expression
combination of variables
values that represents
represents a single
single result value
result value evaluate
simplify an expression
expression by performing
performing the operations
operations in order
order to yield
yield a single
single value integer
value integer division
operation that divides
divides one integer
yields an integer
integer integer division
integer division yields
number of times
numerator is divisible
denominator and discards
discards any remainder
set of rules
governing the order
expressions involving multiple
involving multiple operators
operands are evaluated
join two operands
two operands end-to-end
operands end-to-end composition
ability to combine
combine simple expressions
statements into compound
statements and expressions
expressions in order
order to represent
represent complex computations
complex computations concisely
computations concisely comment
reading the source
function is type
displays the type
value or variable
variable the value
enclosed in parentheses
takes an argument
argument and returns
returns a result
result the result
printing the return
betty = type
takes a value
variable and returns
returns an integer
integer that acts
unique number related
type conversion python
collection of built-in
functions that convert
int function takes
takes any value
value and converts
literal for int
convert floating-point values
values to integers
truncates the fractional
float function converts
function converts integers
integers and strings
strings to floating-point
str function converts
converts to type
odd that python
distinguishes the integer
types the reason
represented differently inside
inside the computer
convert between types
deal with integer
integer division returning
calculate the fraction
past the hour
minute to floating-point
rules for automatic
automatic type conversion
making the denominator
denominator a float
functions in mathematics
functions like sin
sin and log
learned to evaluate
expressions like sin
evaluate the expression
expression in parentheses
evaluate the function
performing various computations
computations the sin
assuming that log
repeatedly to evaluate
evaluate more complicated
expressions like log
evaluate the argument
familiar mathematical functions
functions a module
collection of related
related functions grouped
math to call
period this format
height = math.sin
first statement sets
statement sets decibel
function called log
log that takes
takes logarithm base
finds the sine
variable angle sin
arguments in radians
radians to convert
convert from degrees
degrees to radians
find the sine
calculate the angle
angle in radians
angle = degrees
check the previous
result by comparing
expression as part
takes the value
adds the result
value of angle
angle the sum
function and pass
finds the log
power the result
result gets assigned
adding new functions
add new functions
creating new functions
functions to solve
general-purpose programming language
context of programming
statements that performs
performs a desired
operation this operation
definition the functions
functions without worrying
definitions the syntax
list of parameters
functions you create
keyword the list
specifies what information
provide in order
number of statements
inside the function
spaces the first
couple of functions
print this function
function is named
newline the empty
outputs a newline
syntax for calling
syntax for built-in
print first line
first line newline
print second line
line the output
functions first line
line second line
notice the extra
wanted more space
function named threelines
threelines that prints
first line threelines
line this function
repeatedly in fact
call another function
case threelines calls
threelines calls newline
worth the trouble
trouble to create
lot of reasons
group of statements
functions can simplify
simplify a program
program by hiding
hiding a complex
words in place
place of arcane
function can make
make a program
smaller by eliminating
eliminating repetitive code
print nine consecutive
consecutive new lines
threelines three times
write a function
function called ninelines
threelines to print
print nine blank
twentyseven new lines
fragments from section
print def threelines
line this program
two function definitions
newline and threelines
threelines function definitions
definitions get executed
function the statements
function definition generates
generates no output
create a function
move the last
last three lines
program and move
move the definition
definition of newline
definition of threelines
run this program
flow of execution
execution in order
order to ensure
function is defined
statements are executed
execution always begins
order from top
bottom function definitions
alter the flow
remember that statements
define one function
isn t executed
back to pick
function can call
execute the statements
python is adept
adept at keeping
read a program
don t read
follow the flow
parameters and arguments
values that control
takes a numeric
argument some functions
takes two arguments
passed get assigned
assigned to variables
variables called parameters
takes a single
argument and assigns
parameter named bruce
bruce the value
bruce was chosen
chosen to suggest
give a parameter
illustrative than bruce
bruce the function
function printtwice works
first function call
rules of composition
apply to built-in
apply to user-defined
kind of expression
argument for printtwice
expression is evaluated
function is run
printtwice prints spamspamspamspam
prints spamspamspamspam spamspamspamspam
write a call
call to printtwice
single or double
type of quote
enclose the string
michael = eric
half a bee
variable we pass
doesn t matter
call everybody bruce
variables and parameters
parameters are local
create a local
local variable inside
inside a function
cat = part1
part1 + part2
call the function
chant1 = pie
pie jesu domine
chant2 = dona
dona eis requiem
eis requiem pie
requiem pie jesu
requiem when cattwice
cat is destroyed
print cat nameerror
thing as bruce
python will complain
draw a stack
diagram like state
stack diagrams show
show the value
show the function
belongs each function
function is represented
frame a frame
parameters and variables
cattwice chant1 chant2
chant1 chant2 pie
chant2 pie jesu
eis requiem __main__
requiem __main__ printtwice
__main__ printtwice part1
printtwice part1 part2
part1 part2 cat
part2 cat pie
cat pie jesu
eis requiem dona
requiem dona eis
eis requiem bruce
requiem bruce pie
bruce pie jesu
requiem the order
shows the flow
create a variable
belongs to main
value as chant1
value as chant2
value as cat
back to main
printtwice print cat
cat this list
list of functions
traceback it tells
file the error
functions were executing
shows the line
line of code
code that caused
caused the error
notice the similarity
functions with results
results other functions
perform an action
action but don
don t return
return a value
value that raises
raises some questions
call a function
don t assign
result as part
functions that yield
stuck with simple
function like newline
newline and printtwice
printtwice the answer
legal or illegal
illegal in python
glossary function call
statement that executes
executes a function
function it consists
list of arguments
value is assigned
function return value
expression type conversion
statement that takes
type and computes
type type coercion
python s coercion
coercion rules module
functions and classes
classes dot notation
calling a function
result function definition
statement that creates
statements it executes
program run parameter
argument local variable
variable defined inside
function a local
inside its function
function stack diagram
stack of functions
diagram that represents
represents a function
runtime error occurs
conditionals and recursion
operator the modulus
modulus operator works
works on integers
yields the remainder
operand is divided
modulus operator turns
number is divisible
extract the right-most
digit or digits
yields the right-most
yields the last
last two digits
expressions a boolean
true or false
write a boolean
compares two values
values and produces
produces a boolean
operands are equal
expression is true
true and false
false are special
built into python
symbols a common
single equal sign
double equal sign
operators is similar
meaning in english
conditions is true
negates a boolean
strict any nonzero
number is interpreted
interpreted as true
sort of thing
considered good style
compare a value
order to write
write useful programs
ability to check
conditions and change
change the behavior
program accordingly conditional
conditional statements give
ability the simplest
positive the boolean
statement gets executed
statement is made
block of statements
statement the header
line and ends
statements that follow
block the first
first unindented statement
unindented statement marks
marks the end
block a statement
statement block inside
inside a compound
keeper for code
haven t written
statement is alternative
executed the syntax
displays a message
condition is false
set of statements
statements is executed
executed the alternatives
check the parity
evenness or oddness
wrap this code
provide any integer
express a computation
number of elif
print invalid choice
choice each condition
condition is checked
checked in order
condition is true
first true branch
true branch executes
wrap these examples
examples in functions
functions called compare
conditionals one conditional
written the trichotomy
branches the first
simple output statement
makes the structure
conditionals become difficult
read very quickly
quickly in general
idea to avoid
operators often provide
simplify nested conditional
nested conditional statements
positive single digit
digit the print
statement is executed
make it past
recursion these kinds
kinds of conditions
conditions are common
similar to mathematical
digit this condition
compound boolean expression
statement the return
terminate the execution
reach the end
end one reason
detect an error
import math def
math def printlogarithm
print positive numbers
result = math.log
print the log
result the function
case it displays
displays an error
return to exit
exit the function
function the flow
execution immediately returns
recursion we mentioned
function to call
neglected to mention
magical and interesting
things a program
print n countdown
expects the parameter
outputs the word
calls a function
function named countdown
countdown itself passing
call this function
execution of countdown
outputs the value
returns the countdown
back in main
wanted to output
program is similar
similar to countdown
outputs one newline
output n-1 additional
n-1 additional newlines
number of newlines
diagrams for recursive
functions in section
diagram to represent
represent the state
kind of diagram
interpret a recursive
function s local
shows a stack
diagram for countdown
__main__ countdown countdown
countdown countdown countdown
frame for main
create any variables
variables in main
main or pass
pass any arguments
four countdown frames
make a recursive
diagram for nlines
recursion never reaches
reaches a base
making recursive calls
program never terminates
generally not considered
considered a good
program with infinite
run forever python
forever python reports
reports an error
maximum recursion depth
depth is reached
recursion depth exceeded
exceeded this traceback
function with infinite
recursion and run
input the programs
accept no input
python provides built-in
keyboard the simplest
stops and waits
user to type
user presses return
resumes and raw
raw input returns
input = raw_input
recursion before calling
calling raw input
idea to print
print a message
telling the user
input this message
supply a prompt
argument to raw
print name arthur
expect the response
prompt = what...is
what...is the airspeed
speed = input
represents a newline
user s input
types a string
string of digits
integer and assigned
assigned to speed
types a character
european swallow syntaxerror
syntax to avoid
avoid this kind
kind of error
generally a good
functions to convert
glossary modulus operator
integers and yields
number is divided
false comparison operator
operators that compares
operators that combines
combines boolean expressions
statement that controls
controls the flow
statement that determines
determines which branch
branch is executed
executed compound statement
statement that consists
body the header
body is indented
group of consecutive
conditional statement inside
inside a branch
conditional statement recursion
process of calling
calling the function
executing base case
recursive call infinite
call infinite recursion
function that calls
reaching the base
runtime error prompt
cue that tells
tells the user
user to input
produced results calling
height = radius
written has returned
returned a value
functions that return
call fruitful functions
returns the area
math def area
temp = math.pi
function the return
return statement includes
includes a return
value this statement
value the expression
written this function
return math.pi radius
variables like temp
temp often make
make debugging easier
multiple return statements
terminates without executing
executing any subsequent
subsequent statements code
code that appears
place the flow
idea to ensure
hits a return
ends without hitting
hitting a return
write a compare
function that returns
doing the exercises
written some small
write larger functions
runtime and semantic
increasingly complex programs
suggest a technique
technique called incremental
development the goal
goal of incremental
avoid long debugging
long debugging sessions
sessions by adding
adding and testing
amount of code
find the distance
parameters the return
write an outline
doesn t compute
complicated to test
chose these values
horizontal distance equals
vertical distance equals
testing a function
start adding lines
test the function
line we added
added a logical
logical first step
find the differences
store those values
values in temporary
temporary variables named
functions def distance
function is working
arguments and performing
performing the first
first computation correctly
lines to check
compute the sum
sum of squares
removed the print
statements we wrote
previous step code
helpful for building
building the program
stage and check
check the output
imported the math
function to compute
compute and return
return the result
result = math.sqrt
print the value
value of result
two of code
gain more experience
find yourself writing
writing and debugging
debugging bigger chunks
incremental development process
process can save
lot of debugging
program and make
make small incremental
variables to hold
hold intermediate values
output and check
program is working
scaffolding or consolidate
consolidate multiple statements
make the program
development to write
function called hypotenuse
hypotenuse that returns
returns the length
legs as arguments
record each stage
call one function
function that takes
takes two points
computes the area
point is stored
find the radius
radius = distance
find the area
radius and return
result = area
return result wrapping
area2 to distinguish
area function defined
function defined earlier
functions the temporary
temporary variables radius
radius and result
development and debugging
concise by composing
composing the function
returns the slope
function called intercept
returns the y-intercept
boolean functions functions
functions can return
return boolean values
convenient for hiding
hiding complicated tests
complicated tests inside
tests inside functions
function is isdivisible
common to give
give boolean functions
boolean functions names
names that sound
yes questions isdivisible
questions isdivisible returns
returns either true
make the function
function more concise
concise by taking
function in action
true boolean functions
tempting to write
comparison is unnecessary
learned a small
subset of python
complete programming language
language any program
program ever written
commands to control
proving that claim
exercise first accomplished
accomplished by alan
first computer scientists
lot of early
early computer scientists
computer scientists started
started as mathematicians
theory of computation
proof to give
recursively defined mathematical
defined mathematical functions
functions a recursive
definition is similar
thing being defined
mathematical function factorial
write a recursive
write a python
program to evaluate
conclude that factorial
call to find
find the factorial
recurse = factorial
recurse return result
result the flow
flow of countdown
countdown in section
branch and calculate
calculate the factorial
factorial of n-1
branch and return
calls the return
result is returned
returned the return
call that started
leap of faith
sequence of function
factorial factorial factorial
values are shown
shown being passed
local variables recurse
recurse and result
branch that creates
quickly become labyrinthine
labyrinthine an alternative
call the leap
correctly and returns
value in fact
practicing this leap
math.cos or math.exp
don t examine
examine the implementations
people who wrote
wrote the built-in
functions were good
wrote a function
function called isdivisible
isdivisible that determines
function is correct
correct by testing
testing and examining
examining the code
true of recursive
fruitful functions call
functions call works
yields the correct
compute the factorial
strange to assume
haven t finished
variables to spell
out the steps
make the code
easier to debug
return n factorial
inspired after factorial
defined mathematical function
function is fibonacci
translated into python
fairly small values
two recursive calls
recursive calls work
result by adding
factorial and give
miss the base
first recursive call
generalize the factorial
function to work
work with floating-point
make factorial check
check the type
argument the first
built-in function isinstance
isinstance to verify
verify the type
argument is positive
defined for integers
defined for positive
positive integers return
cases the first
first catches nonintegers
catches negative integers
prints an error
message and returns
returns a special
past both checks
functions this program
demonstrates a pattern
guardian the first
first two conditionals
two conditionals act
act as guardians
protecting the code
error the guardians
prove the correctness
glossary fruitful function
function that yields
yields a return
return value return
value return value
function call temporary
call temporary variable
store an intermediate
complex calculation dead
calculation dead code
special python value
python value returned
returned by functions
argument incremental development
program development plan
development plan intended
intended to avoid
debugging by adding
final version guardian
condition that checks
legal to make
makes an existing
bruce the output
first time bruce
bruce is printed
first print statement
print statement suppresses
suppresses the newline
bruce with multiple
important to distinguish
statement of equality
equality because python
tempting to interpret
interpret a statement
equality is commutative
commutative and assignment
statement can make
make two variables
two variables equal
change the value
values of variables
read and debug
automate repetitive tasks
repetitive tasks repeating
tasks repeating identical
identical or similar
tasks without making
people do poorly
nlines and countdown
recursion to perform
iteration because iteration
features to make
make it easier
easier the first
removed the recursive
english it means
displaying the value
reducing the value
display the word
evaluate the condition
statement and continue
back to step
indentation this type
type of flow
false the first
inside the loop
executed the body
loop should change
eventually the condition
condition becomes false
loop will repeat
loop an endless
source of amusement
amusement for computer
directions on shampoo
case of countdown
loop will continue
make the condition
value is replaced
passed to sequence
previous example ends
iteration particular values
rewrite the function
nlines from section
loops are good
generating tabular data
data before computers
sines and cosines
functions by hand
hand to make
make that easier
mathematics books contained
contained long tables
long tables listing
listing the values
creating the tables
tables was slow
slow and boring
full of errors
errors when computers
computers to generate
generate the tables
errors that turned
computers and calculators
tables became obsolete
computers use tables
tables of values
computations to improve
improve the approximation
table the intel
perform floating-point division
makes a good
outputs a sequence
sequence of values
represents a tab
character as characters
characters and strings
strings are displayed
cursor keeps track
line the tab
tab character shifts
shifts the cursor
tab stops tabs
columns of text
values seem odd
function uses base
important in computer
logarithms with respect
respect to base
loge x loge
changing the output
wanted to find
find the logarithms
modify the program
yields an arithmetic
yielding a geometric
sequence the result
number of digits
first column logarithm
column logarithm tables
knowing the powers
modify this program
outputs the powers
out and memorize
escape sequence escape
sequence escape sequences
represent invisible characters
characters like tabs
tabs and newlines
newlines the sequence
newline an escape
tab escape sequence
represent a backslash
write a single
string that produces
produces this output
tables a two-dimensional
read the value
column a multiplication
print a multiplication
write a loop
loop that prints
prints the multiples
encapsulation and generalization
first line initializes
initializes a variable
counter or loop
print statement starts
encapsulate and generalize
process of wrapping
wrapping a piece
functions are good
examples of encapsulation
printparity in section
isdivisible in section
generalization means taking
taking something specific
printing the multiples
integer this function
encapsulates the previous
loop and generalizes
print to encapsulate
add the first
list to generalize
replace the value
table by calling
arguments in fact
notice how similar
similar this loop
replace the print
call the output
encapsulation to demonstrate
end of section
common development plan
plan we develop
code by writing
function this development
divide the program
program into functions
functions this approach
lets you design
printmultiples and printmulttable
variable the answer
variable variables created
variables created inside
definition are local
access a local
function that means
function the stack
two variables named
printmultiples the value
printmulttable calls printmultiples
argument that value
value gets assigned
parameter n inside
changing this variable
frequently as loop
harder to read
imagine you wanted
wanted a program
add a parameter
parameter to printmulttable
replaced the value
number of rows
rows and columns
add another parameter
parameter to printmultiples
columns the table
call this parameter
print def printmulttable
change the first
change the place
printmulttable as expected
generates a square
square seven-by-seven table
generalize a function
program with capabilities
capabilities you didn
didn t plan
ink by printing
half the table
change one line
line of printmulttable
printmulttable change printmultiples
trace the execution
version of printmulttable
printmulttable and figure
makes your program
dividing a long
facilitate both recursion
recursion and iteration
iteration well-designed functions
write and debug
glossary multiple assignment
recursive function call
statement or group
statements that execute
condition is satisfied
satisfied infinite loop
inside a loop
loop loop variable
cursor to move
current line newline
printed escape sequence
designate a nonprintable
nonprintable character encapsulate
divide a large
large complex program
program into components
isolate the components
variable or parameter
generalization makes code
code more versatile
easier to write
write development plan
process for developing
developing a program
demonstrated a style
style of development
based on developing
encapsulating and generalizing
compound data type
smaller pieces characters
pieces characters types
types that comprise
comprise smaller pieces
compound data types
data types depending
treat a compound
access its parts
parts this ambiguity
bracket operator selects
selects a single
letter = fruit
letter the expression
selects character number
fruit the variable
variable letter refers
letter of banana
expression in brackets
index an index
specifies a member
case the set
set of characters
string the index
length the len
len function returns
returns the number
number of characters
length = len
last = fruit
won t work
runtime error indexerror
out of range
range the reason
letter in banana
letters are numbered
string the expression
loop a lot
lot of computations
computations involve processing
processing a string
string one character
select each character
character in turn
end this pattern
pattern of processing
encode a traversal
index < len
print letter index
index = index
traverses the string
string and displays
displays each letter
condition is index
index is equal
executed the last
last character accessed
takes a string
argument and outputs
outputs the letters
index to traverse
traverse a set
common that python
char in fruit
string is assigned
char the loop
characters are left
loop to generate
generate an abecedarian
abecedarian series abecedarian
series abecedarian refers
series or list
mccloskey s book
quack this loop
outputs these names
names in order
prefixes = jklmnopq
suffix = ack
ack for letter
letter in prefixes
letter + suffix
suffix the output
jack kack lack
kack lack mack
lack mack nack
mack nack oack
nack oack pack
oack pack qack
right because ouack
ouack and quack
quack are misspelled
program to fix
fix this error
slices a segment
selecting a slice
slice is similar
similar to selecting
selecting a character
mary the operator
returns the part
including the first
first but excluding
excluding the last
last this behavior
behavior is counterintuitive
makes more sense
imagine the indices
omit the first
comparison the comparison
comparison operators work
work on strings
strings are equal
strings are immutable
words in alphabetical
word < banana
print your word
banana elif word
word > banana
upper and lowercase
banana a common
address this problem
performing the comparison
problem is making
making the program
realize that zebras
intention of changing
changing a character
world ! greeting
error ! print
producing the output
produces the runtime
runtime error typeerror
doesn t support
support item assignment
item assignment strings
change an existing
world ! newgreeting
newgreeting the solution
slice of greeting
greeting this operation
function do def
return index index
taking an index
index and extracting
takes a character
character and finds
finds the index
return statement inside
loop if str
exits the loop
pattern of computation
modify the find
looping and counting
counts the number
times the letter
letter a appears
count = count
count this program
demonstrates another pattern
counter the variable
count is initialized
opposite of decrement
unrelated to excrement
result the total
encapsulate this code
function named countletters
accepts the string
letter as arguments
rewrite this function
traversing the string
version of find
module the string
functions that manipulate
strings as usual
import the module
string the string
string module includes
includes a function
function named find
function we wrote
wrote to call
function using dot
index = string.find
benefits of modules
names of built-in
functions and user-defined
takes an additional
argument that specifies
specifies the index
two additional arguments
range of indices
helpful to examine
examine a character
character and test
upper or lowercase
digit the string
purposes the string
constants and find
find to classify
returns a value
discuss which version
version of islower
reasons besides speed
speed to prefer
module may surprise
print string.whitespace whitespace
string.whitespace whitespace characters
whitespace characters move
move the cursor
cursor without printing
create the white
space between visible
isn t intended
python library reference
glossary compound data
values are made
performing a similar
variable or value
select a member
types whose elements
assigned new values
increase the value
decrease the value
characters that move
printing visible characters
characters the constant
lists a list
value is identified
index the values
values that make
lists are similar
similar to strings
sets of characters
lists and strings
things that behave
behave like ordered
ways to create
enclose the elements
elements in square
strings the elements
integers are common
lists the range
range function takes
arguments and returns
returns a list
two other forms
forms of range
creates a list
list that starts
specifies the space
space between successive
couldn t assign
assign list values
values to variables
variables or pass
lists as arguments
arguments to functions
elements the syntax
syntax for accessing
accessing the elements
accessing the characters
string the bracket
inside the brackets
element of numbers
read or write
write an element
list assignment index
doesn t exist
list index horsemen
printing the i-eth
element this pattern
length the function
function len returns
loop is executed
equal to len
list still counts
element the length
pol le veq
loop that traverses
traverses the previous
list and prints
prints the length
send an integer
integer to len
operator that tests
works with lists
pestilence in horsemen
debauchery in horsemen
false since pestilence
operator returns true
true since debauchery
lists the generalized
variable in list
body this statement
statement is equivalent
variable = list
eliminate the loop
previous loop written
loop for horseman
horseman in horsemen
reads like english
horseman any list
number in range
number for fruit
eat + fruit
first example prints
operator concatenates lists
repeats a list
first example repeats
repeats the list
slices the slice
work on lists
lists are mutable
mutable unlike strings
change their elements
update several elements
list by assigning
assigning the empty
list by squeezing
deletion using slices
slices to delete
delete list elements
readable del removes
removes an element
del handles negative
handles negative indices
index for del
lists as usual
objects and values
execute these assignment
two possible states
two different things
thing these things
things have names
objects an object
function by printing
printing the identifier
means that python
python only created
created one string
lists behave differently
create two lists
aliasing since variables
assign one variable
two different names
aliased changes made
unexpected or undesirable
undesirable in general
safer to avoid
working with mutable
python is free
free to alias
sees an opportunity
opportunity to economize
modify a list
make a copy
reference this process
avoid the ambiguity
copy the easiest
clone a list
taking any slice
case the slice
free to make
draw a state
list parameters passing
passing a list
argument actually passes
passes a reference
function head takes
takes a list
returns the first
numbers are aliases
object the state
__main__ numbers head
object is shared
modifies a list
sees the change
removes the first
returns a reference
rest = tail
value was created
list creating rest
effect on numbers
lists a nested
list that appears
extract an element
elt = list
bracket operators evaluate
evaluate from left
element of list
list and extracts
extracts the one-eth
matrices nested lists
strings and lists
select an entire
extract a single
first index selects
selects the row
selects the column
matrices is common
possibility a small
list of columns
list of rows
string module involve
module involve lists
lists of strings
strings the split
split function breaks
breaks a string
list of words
words by default
number of whitespace
characters is considered
considered a word
rain in spain
list the join
inverse of split
split it takes
list of strings
strings and concatenates
concatenates the elements
lists like split
takes an optional
inserted between elements
describe the relationship
relationship between string.join
collection of objects
object is identified
operator selects elements
types that consist
set of elements
index nested list
list list traversal
existing object copying
copying a reference
creates an alias
alias but doesn
doesn t clone
clone the object
character or string
mutability and tuples
two compound types
differences we noted
immutable and lists
type in python
list of values
conventional to enclose
tuples in parentheses
create a tuple
include the final
string in parentheses
tuples syntax issues
operations on tuples
operations on lists
lists the index
index operator selects
selects an element
slice operator selects
selects a range
range of elements
modify the elements
swap the values
variables with conventional
conventional assignment statements
approach becomes cumbersome
form of tuple
assignment that solves
solves this problem
tuple of variables
tuple of values
values each value
side are evaluated
assignments this feature
feature makes tuple
makes tuple assignment
assignment quite versatile
number of variables
number of values
tuples as return
tuple of wrong
return values functions
function that swaps
swaps two parameters
assign the return
advantage in making
swap a function
function in fact
changing x inside
inside swap makes
doesn t work
numbers most computer
calculation to yield
making a program
program truly nondeterministic
ways to make
generate random numbers
determine the outcome
function that generates
generates pseudorandom numbers
function called random
random that returns
returns a floatingpoint
run this loop
generate a random
bound like high
number between low
low and high
integer between low
including both end
list of random
numbers the first
generate a list
random values randomlist
values randomlist takes
takes an integer
length it starts
number the return
test this function
elements for purposes
purposes of debugging
idea to start
generated by random
random are supposed
divide the range
values into equal-sized
count the number
times a random
random value falls
test this theory
theory by writing
writing a program
program to divide
range into buckets
buckets and count
counting a good
approach to problems
divide the problem
problem into subproblems
subproblems that fit
fit a computational
traverse a list
list of numbers
numbers and count
times a value
range that sounds
familiar in section
wrote a program
program that traversed
traversed a string
string and counted
counted the number
proceed by copying
program and adapting
problem the original
count the first
char with num
num that doesn
change the program
change the test
test we aren
aren t interested
interested in finding
low < num
num < high
count the last
function called inbucket
inbucket the parameters
high def inbucket
count by copying
copying and modifying
modifying an existing
write this function
quickly and save
save a lot
find yourself working
reuse the solution
number of buckets
low = inbucket
high = inbucket
bucket1 = inbucket
bucket2 = inbucket
bucket3 = inbucket
bucket4 = inbucket
compute the range
buckets is numbuckets
loop to compute
bucket the loop
high = low
low + bucketwidth
bucketwidth print low
high to compute
compute the low
multiply the loop
width the high
don t overlap
cover the entire
store eight integers
create the bucket
repeatedly and update
update the i-eth
produces this bucket
random number generator
generator is working
traverses the entire
lot of traversals
make a single
list and compute
value the index
bucketwidth to find
find the lower
find the index
divide by bucketwidth
multiplying that guess
guess is correct
correct since bucketwidth
dividing by bucketwidth
multiplying by numbuckets
multiply a number
round that number
index = int
function to convert
convert a floating-point
calculation to produce
produce an index
negative or greater
greater than len
list like buckets
function called histogram
histogram that takes
buckets as arguments
returns a histogram
glossary immutable type
assignments to elements
elements or slices
slices of immutable
error mutable type
modified all mutable
types are compound
compound types lists
lists and dictionaries
dictionaries are mutable
mutable data types
types ; strings
strings and tuples
type is required
dictionary tuple assignment
single assignment statement
assignment statement tuple
statement tuple assignment
tuple assignment occurs
occurs in parallel
swapping values deterministic
sequence of numbers
deterministic computation histogram
list of integers
plan that involves
identifying a familiar
familiar computational pattern
pattern and copying
copying the solution
dictionaries the compound
learned about strings
tuples use integers
integers as indices
dictionaries are similar
create a dictionary
dictionary to translate
translate english words
words into spanish
indices are strings
dictionary and add
elements the empty
dictionary is denoted
dos the first
first assignment creates
creates a dictionary
dictionary named eng2sp
add new elements
print the current
list each entry
provide a list
list of key-value
value of eng2sp
reason to care
indexed with integer
dos the key
key two yields
yields the value
operations the del
del statement removes
removes a key-value
fruit in stock
remove the entry
expecting more pears
function also works
works on dictionaries
number of key-value
methods a method
method is similar
function it takes
keys method takes
takes a dictionary
dictionary and returns
function syntax keys
method syntax eng2sp.keys
form of dot
dot notation specifies
object to apply
apply the function
eng2sp the parentheses
parameters a method
eng2sp the values
items method returns
list of tuples
information the square
list the parentheses
list are tuples
method has key
takes a key
key and returns
call a method
aliasing and copying
copying because dictionaries
aware of aliasing
modify a dictionary
pairs of opposites
alias = opposites
copy = opposites.copy
alias and opposites
object ; copy
opposites is unchanged
matrices in section
list of lists
lists to represent
represent a matrix
lot of zeroes
row and column
matrix each key
integer to access
access an element
nested list representation
two integer indices
tuple of integers
improves the semantics
semantics of accessing
accessing a sparse
sparse matrix shame
function from section
bigger the argument
argument you provide
longer the function
takes to run
run time increases
increases very quickly
takes roughly forever
dictionaries to understand
graph for fibonacci
call graph shows
shows a set
set function frames
connecting each frame
functions it calls
argument gets bigger
bigger a good
track of values
computed by storing
previously computed value
implementation of fibonacci
fibonacci using hints
newvalue = fibonacci
newvalue return newvalue
newvalue the dictionary
dictionary named previous
previous keeps track
checks the dictionary
dictionary to determine
function can return
immediately without making
value is added
version of fibonacci
machines can compute
big to fit
python integer python
converted the result
long integers python
type called long
handle any size
create a long
write an integer
convert a value
long can accept
accept any numerical
strings of digits
math operations work
work on longs
general any code
code that works
works with integers
detects the overflow
overflow and returns
returns the result
result has type
letters in chapter
function that counted
number of occurrences
form a histogram
times each letter
compressing a text
compress a file
codes for common
letters and longer
codes for letters
frequently dictionaries provide
provide an elegant
generate a histogram
letter in mississippi
find the current
dictionary contains pairs
pairs of letters
appealing to display
display the histogram
histogram in alphabetical
items and sort
letteritems = lettercounts.items
encountered that applies
applies to lists
consult the python
documentation for details
collection of key-value
pairs that maps
maps from keys
keys to values
values the keys
dictionary key-value pair
kind of function
syntax and invoked
value to avoid
avoid redundant computation
files and exceptions
program is running
data in memory
disappears to store
number of files
organized into directories
file is identified
reading and writing
programs can exchange
generate printable formats
formats like pdf
working with files
lot like working
working with books
book is open
applies to files
open a file
opening a file
creates a file
variable f refers
open function takes
arguments the first
mode w means
opening the file
file for writing
file named test.dat
print the file
object to put
file we invoke
invoke the write
close the file
closing the file
tells the system
writing and makes
makes the file
open the file
read the contents
file that doesn
file or directory
read method reads
method reads data
reads the entire
text = f.read
write a space
characters to read
returns the remaining
returns the empty
copies a file
text = f1.read
return the break
executing it breaks
loop is infinite
files a text
characters and whitespace
organized into lines
separated by newline
characters since python
designed to process
process text files
methods that make
make the job
easy to demonstrate
create a text
lines of text
separated by newlines
two \ nline
readline method reads
exceptions readlines returns
newline character appears
string and readlines
line-processing program filterfile
program filterfile makes
makes a copy
copy of oldfile
omitting any lines
lines that begin
text = f1.readline
break if text
return the continue
continue statement ends
ends the current
looping the flow
checks the condition
character of text
variables the argument
argument of write
put other values
first the easiest
applied to integers
operator the first
tuple of expressions
expressions the result
letter d stands
stands for decimal
embed a value
july we sold
cars % cars
cars the format
days we made
dollars by default
floating-point format prints
prints six decimal
places the number
number of expressions
match the number
number of format
match the format
arguments for format
illegal argument type
type for built-in
format of numbers
digits as part
number of spaces
spaces the number
value provided takes
provided takes fewer
takes fewer digits
spaces are added
spaces is negative
takes up twelve
spaces and includes
includes two digits
decimal this format
printing dollar amounts
decimal points aligned
imagine a dictionary
names as keys
wages as values
function that prints
prints the contents
students = wages.keys
student in students
print % -20s
create a small
dictionary and print
print the contents
controlling the width
columns will line
names contain fewer
fewer than twenty-one
dollars an hour
file by opening
ran the program
file for reading
file is located
opens a file
file named words
words that resides
directory named dict
resides in share
resides in usr
delimiter between directory
directory and filenames
filenames the file
pickling in order
order to put
string the original
original type information
lost in fact
solution is pickling
preserves data structures
structures the pickle
exceptions to store
store a data
reading and load
load the data
structures we dumped
creates an exception
stops and python
division or modulo
accessing a nonexistent
nonexistent list item
range or accessing
accessing a key
key that isn
open a nonexistent
colon normally python
python also prints
prints a traceback
execute an operation
program to stop
handle the exception
prompt the user
program to crash
filename = raw_input
enter a file
executes the statements
exception of type
type ioerror occurs
encapsulate this capability
takes a filename
filename and returns
true except ioerror
multiple except blocks
blocks to handle
handle different kinds
kinds of exceptions
exceptions the python
python reference manual
detects an error
make it raise
raise an exception
user and checks
exceptions def inputnumber
pick a number
bad number return
raise statement takes
type and specific
exception types python
variety of occasions
occasions other examples
examples include typeerror
handles the error
program can continue
prints the error
message and exits
number the error
error message includes
includes the exception
information you provided
inputnumber to input
input a number
handles the valueerror
stream of characters
collection of files
sequence of directory
names that specifies
specifies the exact
file text file
printable characters organized
newline characters break
characters break statement
execution to exit
exit a loop
loop continue statement
loop to end
end the flow
evaluates the condition
proceeds accordingly format
takes a format
expressions and yields
yields a string
string that includes
includes the expressions
characters and format
format values format
values format sequence
sequence of characters
format a value
write a data
reconstituted later exception
error that occurs
occurs at runtime
prevent an exception
exception from terminating
terminating a program
signal an exception
classes and objects
user-defined compound types
python s built-in
ready to create
create a userdefined
object in mathematical
written in parentheses
separating the coordinates
represents the origin
represents the point
point x units
origin a natural
represent a point
point in python
two floating-point values
values the question
object the quick
quick and dirty
list or tuple
choice an alternative
user-defined compound type
class this approach
involves a bit
bit more effort
pass class definitions
class defi nition
objects this definition
class called point
point the pass
body by creating
creating the point
point the members
type or objects
instantiation to instantiate
instantiate a point
blank = point
blank is assigned
assigned a reference
object a function
function like point
point that creates
creates new objects
add new data
instance using dot
syntax is similar
syntax for selecting
selecting a variable
math.pi or string.uppercase
selecting a data
instance these named
state diagram shows
blank the variable
variable blank refers
attributes each attribute
expression blank.x means
object blank refers
assign that value
instances as arguments
purpose of dot
identify which variable
referring to unambiguously
notation as part
statements are legal
distancesquared = blank.x
blank.x + blank.y
blank.y the first
first line outputs
calculates the value
tempted to print
value of blank
blank the result
defined in main
written in hexadecimal
display a point
change it shortly
create and print
print a point
print the object
object s unique
unique identifier translate
translate the hexadecimal
form into decimal
decimal and confirm
pass an instance
takes a point
argument and displays
rewrite the distance
points as arguments
sameness the meaning
make and model
two different cars
idea of sameness
talk about objects
object to find
variables are aliases
true this type
type of equality
objects to compare
compare the contents
objects deep equality
function called samepoint
two different objects
samepoint to find
1not all languages
kinds of sameness
sameness same car
shallow and deep
class to represent
represent a rectangle
rectangle the question
rectangle is oriented
width and height
two opposing corners
corners a conventional
pass and instantiate
box = rectangle
two floating-point attributes
embed an object
object ! box.corner
box.corner = point
dot operator composes
composes the expression
expression box.corner.x means
object box refers
select the attribute
attribute named corner
object and select
objects the figure
shows the state
instances as return
takes a rectangle
returns a point
p.x = box.corner.x
p.y = box.corner.y
argument and assign
assign the result
center = findcenter
objects are mutable
change the state
object by making
making an assignment
change the size
rectangle without changing
changing its position
modify the values
values of width
box.width = box.width
box.height = box.height
method and generalize
grow the rectangle
box.width + dwidth
box.height + dheight
dwidth and dheight
rectangle should grow
invoking this method
effect of modifying
modifying the rectangle
rectangle named bob
bob and pass
bob = rectangle
bob.corner = point
growrect is running
alias for bob
made to box
box also affect
function named moverect
moverect that takes
two parameters named
change the location
rectangle by adding
coordinate of corner
corner and adding
aliasing can make
copying an object
alternative to aliasing
aliasing the copy
function called copy
duplicate any object
import the copy
method to make
objects to copy
copy a simple
copy is sufficient
thing it copies
copies the reference
create a box
resulting state diagram
width height corner
behavior is confusing
confusing and error-prone
method named deepcopy
deepcopy that copies
surprised to learn
completely separate objects
deepcopy to rewrite
import copy newbox
newbox = copy.deepcopy
newbox.width = newbox.width
newbox.width + dwidth
newbox.height = newbox.height
newbox.height + dheight
dheight return newbox
creates and returns
type a class
create an instance
object that belongs
model a thing
thing or concept
real world constructor
create new objects
named data items
items that makes
instance shallow equality
equality of references
references that point
object deep equality
equality of values
point to objects
value shallow copy
copy the contents
including any references
references to embedded
objects ; implemented
copy module deep
module deep copy
classes and functions
define a class
day the class
object and assign
attributes for hours
hours minutes seconds
printtime that takes
argument and prints
two time objects
chronologically and false
write two versions
function called addtime
calculates the sum
demonstrate two kinds
kinds of functions
functions and modifiers
version of addtime
sum.hours = t1.hours
t1.hours + t2.hours
sum.minutes = t1.minutes
t1.minutes + t2.minutes
sum.seconds = t1.seconds
t1.seconds + t2.seconds
t2.seconds return sum
sum the function
initializes its attributes
displaying a value
breadmaker to make
addtime to figure
finished writing printtime
donetime = addtime
deal with cases
number of seconds
seconds or minutes
carry the extra
t2.seconds if sum.seconds
sum.seconds = sum.seconds
sum.minutes = sum.minutes
sum.hours = sum.hours
suggest an alternative
approach that yields
yields shorter code
function to modify
objects it passes
makes are visible
functions that work
modifier a rough
functions def increment
time.seconds = time.seconds
time.seconds + seconds
seconds if time.seconds
time.minutes = time.minutes
time.hours = time.hours
first line performs
performs the basic
greater than sixty
sixty one solution
seconds while time.seconds
write function calls
done with modifiers
done with pure
functions in fact
evidence that programs
functions are faster
faster to develop
error-prone than programs
modifiers are convenient
convenient at times
prototype development versus
development versus planning
write pure functions
resort to modifiers
advantage this approach
functional programming style
demonstrated an approach
approach to program
call prototype development
wrote a rough
performed the basic
lead to code
cases and unreliable
errors an alternative
alternative is planned
problem can make
make the programming
programming much easier
number in base
thirty-six hundreds column
addtime and increment
effectively doing addition
addition in base
suggests another approach
arithmetic with numbers
minutes = t.hours
seconds = minutes
t.seconds return seconds
time.hours = seconds
time.seconds = seconds
bit to convince
converttoseconds to rewrite
functions def addtime
seconds = converttoseconds
easier to demonstrate
converting from base
back is harder
dealing with times
times base conversion
intuition for dealing
insight to treat
times as base
numbers and make
make the investment
investment of writing
writing the conversion
converttoseconds and maketime
easier to add
subtracting two times
times to find
find the duration
subtraction with borrowing
making a problem
makes it easier
fewer special cases
cases and fewer
opportunities for error
write a general
class of problems
written an algorithm
algorithm we mentioned
mentioned this word
define it carefully
easy to define
couple of approaches
multiply single-digit numbers
memorized the multiplication
table in effect
solutions that kind
kind of knowledge
cheated by learning
find the product
digit this trick
solution for multiplying
multiplying any single-digit
techniques you learned
learned for addition
addition with carrying
characteristics of algorithms
require any intelligence
intelligence to carry
embarrassing that humans
learning to execute
require no intelligence
process of designing
algorithms is interesting
things that people
difficulty or conscious
hardest to express
express algorithmically understanding
algorithmically understanding natural
understanding natural language
glossary pure function
objects it receives
receives as arguments
arguments most pure
functions are fruitful
arguments most modifiers
modifiers are fruitless
fruitless functional programming
style of program
majority of functions
functions are pure
pure prototype development
developing programs starting
testing and improving
improving it planned
programs that involves
involves high-level insight
planning than incremental
development or prototype
prototype development algorithm
instructions for solving
solving a class
classes and methods
object-oriented features python
object-oriented programming language
features that support
support object-oriented programming
define object-oriented programming
programs are made
definitions and function
computation is expressed
expressed in terms
terms of operations
operations on objects
objects each object
object definition corresponds
object or concept
functions that operate
ways real-world objects
real-world objects interact
defined in chapter
functions we defined
kinds of things
point and rectangle
rectangle classes correspond
programming strictly speaking
provide an alternative
syntax for things
conveys the structure
methods this observation
motivation for methods
keys and values
invoked on dictionaries
dictionaries each method
invoked on instances
methods are defined
inside a class
definition in order
make the relationship
explicit the syntax
syntax for invoking
invoking a method
previous two chapters
chapters and transform
methods this transformation
sequence of steps
printtime in chapter
defined a class
function named printtime
pass def printtime
printtime a method
move the function
function definition inside
inside the class
class definition notice
notice the change
change in indentation
printtime using dot
method is invoked
dot the object
invoked is assigned
currenttime is assigned
metaphor the syntax
print in object-oriented
agents an invocation
invocation like currenttime.printtime
change in perspective
write more versatile
easier to maintain
maintain and reuse
method to save
out previously defined
previously defined methods
previous method definitions
definitions here def
self.seconds = seconds
seconds + self.seconds
methods while self.seconds
self.seconds = self.seconds
self.minutes = self.minutes
self.hours = self.hours
mechanical we move
move the method
definition and change
invoked gets assigned
slightly more complicated
self.hour > time2.hour
self.hour < time2.hour
self.minute > time2.minute
self.minute < time2.minute
self.second > time2.second
invoke this method
object and pass
print the bread
read the invocation
invocation like english
number of arguments
write user-defined functions
functions with optional
optional argument lists
thing as string.find
version from section
index = start
start while index
value and starts
overrides the default
add a fourth
stop looking warning
tricky the default
value of end
work the default
values are evaluated
find is defined
find its length
method the initialization
object is created
method is init
two underscore characters
two more underscores
self.hours = hours
self.minutes = minutes
parameter hours dot
hours dot notation
specifies which variable
arguments we provide
provide are passed
arguments are optional
parameters by naming
rewrite the point
class from section
initialization method takes
values as optional
returns a string
method named str
python built-in str
built-in str function
printing a point
object implicitly invokes
implicitly invokes str
behavior of print
start by writing
easier to instantiate
overloading some languages
change the definition
applied to user-defined
types this feature
defining new mathematical
override the addition
provide a method
method named add
methods here def
self.x + other.x
self.y + other.y
add two points
create and return
operator to point
python invokes add
add a method
overloads the subtraction
ways to override
override the behavior
defining a method
method named mul
python invokes mul
point it computes
computes the dot
rules of linear
return self.x other.x
other.x + self.y
python invokes rmul
performs scalar multiplication
point whose coordinates
rmul will yield
yield an error
demonstrates both kinds
kinds of multiplication
argument inside mul
difficulties of object-oriented
out what code
code is running
written only work
methods that operate
set of operations
common in linear
takes three arguments
multiplies the first
method will work
point is multiplied
dot product yields
yields a numeric
value a function
prints a list
forward and backward
back = copy.copy
list before reversing
doesn t modify
modify the list
intended to apply
apply this function
function to lists
point to determine
apply the fundamental
rule of polymorphism
type the operations
method include copy
print copy works
written a str
method for points
self.y = self.y
points to frontandback
kind of polymorphism
glossary object-oriented language
classes and inheritance
facilitate object-oriented programming
object-oriented programming object-oriented
programming object-oriented programming
style of programming
operations that manipulate
organized into classes
replace a default
default examples include
examples include replacing
replacing a default
argument and replacing
method by providing
initializes the object
object s attributes
methods operator overloading
extending built-in operators
card1 = card
print card1 jack
jack of diamonds
diamonds class attributes
attributes like suitlist
suitlist are shared
objects the advantage
object to access
access the class
card2 = card
sets of objects
objects the disadvantage
modify a class
affects every instance
decide that jack
whales the problem
idea to modify
modify class attributes
cards for primitive
values and determine
operators by providing
providing a method
method named cmp
object is greater
ordered some sets
sets are unordered
element is bigger
fruits are unordered
apples and oranges
oranges the set
set of playing
clubs is higher
diamonds is higher
suit in order
make cards comparable
rank or suit
choice is arbitrary
sake of choosing
deck of cards
cards comes sorted
check the suits
suits if self.suit
self.suit > other.suit
self.suit < other.suit
ranks if self.rank
self.rank > other.rank
self.rank < other.rank
aces appear lower
lower than deuces
aces are ranked
higher than kings
objects to represent
represent a deck
deck is made
list of cards
class the initialization
initialization method creates
creates the attribute
cards and generates
generates the standard
suit in range
rank in range
populate the deck
loop the outer
outer loop enumerates
enumerates the suits
enumerates the ranks
outer loop iterates
iterates four times
loop iterates thirteen
iterates thirteen times
times the body
body is executed
instance of card
suit and rank
appends that card
list the append
append method works
works on lists
printing the deck
deck as usual
type of object
method that prints
object to print
print a deck
traverse the list
list and print
print each card
objects class deck
card in self.cards
alternative to printdeck
write a str
class the advantage
advantage of str
printing the contents
generates a string
program can manipulate
manipulate before printing
version of str
str that returns
deck to add
add a bit
bit of pizzazz
arranges the cards
card is indented
indented one space
demonstrates several features
self.cards and assigning
assigning each card
string multiplication operator
operator to indent
indent each card
last the expression
expression i yields
yields a number
command to print
print the cards
str function passing
passing an object
argument to str
str is equivalent
equivalent to invoking
invoking the str
string is generated
generated and concatenated
complete string representation
shuffling the deck
deck = deck
print deck ace
ace of clubs
jack of clubs
queen of clubs
king of clubs
ace of diamonds
card to shuffle
shuffle the deck
two integer arguments
chooses a random
chooses the index
traversing the cards
cards and swapping
swapping each card
precluded that possibility
import random ncards
ncards = len
list and store
choose a random
swap the current
swap the cards
rewrite this line
removing and dealing
cards another method
class is removecard
takes a card
deck and false
object s cmp
method to determine
equality with items
card class checks
checks for deep
removecard method checks
equality to deal
remove and return
return the top
card the list
list method pop
removes the last
boolean function isempty
represent one set
values by constructing
constructing a mapping
method class attributes
attributes are accessible
loop to accumulate
accumulate a series
series of values
string or adding
inheritance the language
programming is inheritance
ability to define
class the primary
add new methods
class without modifying
modifying the existing
existing class extending
extending this metaphor
feature some programs
complicated without inheritance
inheritance can facilitate
facilitate code reuse
customize the behavior
behavior of parent
inheritance structure reflects
reflects the natural
makes the program
easier to understand
inheritance can make
make programs difficult
find its definition
definition the relevant
done using inheritance
harm than good
inheritance as part
program that plays
plays the card
game old maid
reused to implement
implement other card
hand of cards
represent a hand
cards a hand
hand is similar
set of cards
operations like adding
adding and removing
ability to shuffle
shuffle both decks
decks and hands
hands a hand
game being played
perform some operations
operations on hands
hands that don
don t make
classify a hand
hand in bridge
compute a score
hand in order
make a bid
bid this situation
inheritance if hand
subclass of deck
methods of deck
parent class appears
appears in parentheses
pass this statement
hand class inherits
existing deck class
class the hand
hand constructor initializes
initializes the attributes
cards the string
string name identifies
identifies this hand
player that holds
default value cards
add and remove
deck removing cards
hand inherits removecard
removecard from deck
omitted other methods
methods the list
list append method
append method adds
deck into hands
natural to put
out the entire
add one card
hand deal takes
number of cards
cards to deal
cards and stops
nhands = len
break # break
out of cards
card = self.popcard
top card hand
hand = hands
add the card
dealt the loop
card is removed
removes and returns
returns the last
list the modulus
number of hands
printing a hand
hand to print
printdeck and str
str methods inherited
inherited from deck
hand = hand
print hand hand
hand hand frank
ace of hearts
convenient to inherit
inherit the existing
provide a str
class that overrides
hand + self.name
self.name if self.isempty
string that identifies
identifies the hand
hand is empty
appends the words
words is empty
empty and returns
appends the word
computed by invoking
odd to send
kind of deck
deck hand objects
legal to send
send a hand
method in general
subclass in place
class the cardgame
cardgame class takes
class takes care
basic chores common
creating the deck
deck and shuffling
self.deck = deck
initialization method performs
performs a significant
attributes to implement
implement specific games
inherit from cardgame
cardgame and add
write a simulation
maid the object
rid of cards
cards by rank
rank and color
suits are black
black the jack
jack of hearts
matches the jack
red to begin
begin the game
clubs is removed
queen of spades
match the fifty-one
fifty-one remaining cards
cards are dealt
match and discard
begins in turn
picks a card
chosen card matches
matches a card
player s hand
pair is removed
card is added
matches are made
loser s hand
plays all hands
game are lost
neighbor to pick
pick that card
failing to display
failing to fail
fail to display
display that card
card more prominently
prominently the computer
computer simply picks
picks a neighbor
neighbor s card
card at random
class a hand
hand for playing
playing old maid
requires some abilities
inherits from hand
method called removematches
inheritance class oldmaidhand
originalcards = self.cards
card in originalcards
match = card
match in self.cards
count we start
start by making
making a copy
traverse the copy
copy while removing
original since self.cards
self.cards is modified
control the traversal
traversing a list
color the expression
turns a club
operations also work
cards are removed
game = cardgame
hand = oldmaidhand
frank contains ace
ace of spades
clubs hand frank
class we inherit
turn our attention
game itself oldmaidgame
subclass of cardgame
method called play
play that takes
list of players
argument since init
init is inherited
inherited from cardgame
make a hand
deal the cards
inheritance # remove
remove initial matches
initial matches matches
matches = self.removeallmatches
play begins self.printhands
cards are matched
numhands = len
matches = matches
matches + self.playoneturn
separated into methods
methods removeallmatches traverses
traverses the list
list of hands
hands and invokes
hand in self.hands
count + hand.removematches
printhands which traverses
self.hands and prints
prints each hand
accumulator that adds
number of matches
hand and returns
returns the total
matches reaches twenty-five
card is left
turn keeps track
player s turn
modulus operator wraps
method playoneturn takes
neighbor = self.findneighbor
pickedcard = self.hands
count = self.hands
consists of finding
finding the first
taking one card
checking for matches
matches before returning
hand are shuffled
player s choice
choice is random
random the method
method findneighbor starts
left and continues
finds a player
neighbor if findneighbor
circle without finding
game is detected
omitted the printhands
top fifteen cards
tens and higher
game = cards.oldmaidgame
dealt hand allen
allen contains king
king of hearts
king of spades
diamonds hand jeff
queen of hearts
jack of spades
king of diamonds
queen of diamonds
diamonds hand chris
chris contains jack
clubs hand jeff
hearts matches queen
play begins hand
begins hand allen
jeff contains jack
hand allen picked
allen picked king
diamonds hand allen
hearts matches king
hand jeff picked
hearts hand chris
hand chris picked
chris picked jack
clubs hand allen
allen picked jack
hearts hand jeff
jeff picked jack
chris picked queen
spades hand allen
hearts matches jack
jeff picked king
clubs hand chris
chris picked king
hearts hand allen
jeff picked queen
spades hand chris
clubs matches jack
spades hand jeff
clubs matches king
allen is empty
empty hand jeff
jeff contains queen
chris is empty
previously defined class
defined class parent
class parent class
child class inherits
class inherits child
inherits child class
created by inheriting
examples of attributes
common data structure
feature linked lists
lists are made
list in addition
unit of data
cargo a linked
list is considered
considered a recursive
recursive data structure
definition a linked
linked list recursive
list recursive data
recursive data structures
data structures lend
class as usual
usual when writing
initialization and str
test the basic
mechanism of creating
creating and displaying
linked lists class
lists class node
self.cargo = cargo
method are optional
optional by default
store any value
list to test
test the implementation
create a node
node and print
node = node
print node test
test to make
make it interesting
node1 = node
node2 = node
node3 = node
creates three nodes
linked the state
node2 none cargo
node1 none cargo
link the nodes
make the first
node1.next = node2
node2.next = node3
node3 the reference
lists as collections
nodes and link
assemble multiple objects
list to pass
pass the list
pass a reference
function printlist takes
prints each node
node = node.next
print to invoke
invoke this function
variable that refers
node to traverse
traverse a linked
variable like node
nodes in succession
succession this diagram
shows the nodes
values that node
linked lists node1
lists node1 cargo
node3 none node
node by convention
printed in brackets
brackets with commas
lists and recursion
natural to express
express many list
operations using recursive
algorithm for printing
printing a list
separate the list
print the tail
print the head
recursive call works
works the leap
natural base case
head = list
tail = list.next
first line handles
handles the base
case by doing
two lines split
split the list
list into head
head and tail
tail the last
last two lines
two lines print
print the list
line keeps python
python from printing
printing a newline
printlist and printbackward
printbackward are functions
class the reason
represent the empty
legal to invoke
invoke a method
awkward to write
write list-manipulating code
clean object-oriented style
prove that printbackward
reach the base
case in fact
lists will make
make this function
prevent a node
node from referring
shows a list
infinitely this sort
sort of behavior
behavior makes infinite
makes infinite lists
infinite lists difficult
difficult to work
represent a number
list of digits
list to represent
represent a repeating
prove that printlist
functions will terminate
terminate this sort
sort of claim
precondition it imposes
imposes a constraint
arguments and describes
describes the behavior
constraint is satisfied
fundamental ambiguity theorem
theorem one part
part of printbackward
raised an eyebrow
head and list
variable the reason
two variables play
play different roles
list these roles
programmer in general
program what role
role a variable
plays this ambiguity
names like node
node and list
list to document
create additional variables
variables to disambiguate
printbackward without head
possibly less clear
two function calls
remember that printbackward
treats its argument
collection and print
object the fundamental
ambiguity theorem describes
describes the ambiguity
node might treat
treat the node
list of nodes
ways to modify
modify a linked
change the cargo
reorder the nodes
function that removes
list and returns
wrappers and helpers
first = list
list.next # make
first.next = second.next
second.next # separate
variables to make
code more readable
shows the effect
pass a list
pass the empty
fix the function
function to handle
handle a violation
divide a list
print a list
function to print
print the brackets
idea to check
work with special
propose an alternative
explain what problems
problems it solves
class called linkedlist
linkedlist its attributes
first node linkedlist
node linkedlist objects
linkedlist objects serve
serve as handles
handles for manipulating
lists of node
place to put
put wrapper functions
make a method
tail = self.next
make things confusing
two methods named
methods named printbackward
wrapper invokes self.head.printbackward
invoking the helper
object another benefit
add or remove
remove the first
method for linkedlists
takes an item
item of cargo
argument and puts
node.next = self.head
self.head = node
self.length = self.length
handles the special
invariants some lists
methods to crash
require that lists
loops another requirement
number of nodes
invariants for objects
easier to prove
correctness of code
check the integrity
integrity of data
errors one thing
confusing about invariants
middle of addfirst
added the node
invariant is violated
violated this kind
kind of violation
violation is acceptable
impossible to modify
modify an object
object without violating
violating an invariant
method that violates
violates an invariant
invariant must restore
restore the invariant
stretch of code
comments to make
make that clear
operations are performed
performed that depend
glossary embedded reference
object linked list
structure that implements
implements a collection
sequence of linked
linked nodes node
item of data
link one object
true in order
method to work
work correctly fundamental
correctly fundamental ambiguity
single node wrapper
method that acts
making the method
error-prone to invoke
method to perform
abstract data types
types the data
card class represents
represents a card
represent a card
implementations an abstract
abstract data type
specifies a set
makes it abstract
simplifies the task
denote the operations
ways to implement
implement an adt
write an algorithm
implementations well-known adts
implemented in standard
programmers the operations
operations on adts
provide a common
common high-level language
talking about algorithms
talk about adts
distinguish the code
code that implements
implements the adt
stack a stack
elements other collections
dictionaries and lists
lists an adt
adt is defined
interface the interface
empty stack push
return an item
stack the item
stack is empty
empty a stack
lifo data structure
last item added
stacks with python
lists the list
operations that define
define a stack
stack the interface
code to translate
operations this code
adt in general
set of methods
methods that satisfy
satisfy the syntactic
syntactic and semantic
pushing and popping
attribute named items
list of items
stack the initialization
initialization method sets
method sets items
list to push
items to pop
pop an item
homonymous1 list method
method to remove
return the last
isempty compares items
list an implementation
consist of simple
invocations of existing
veneer in real
coating of good
good quality wood
furniture-making to hide
hide lower quality
lower quality wood
quality wood underneath
wood underneath computer
underneath computer scientists
metaphor to describe
describe a small
code that hides
hides the details
popping a stack
generic data structure
add any type
type of item
pushes two integers
isempty and pop
pop to remove
remove and print
stack to print
print the items
backward ! granted
format for printing
compare this bit
bit of code
implementation of printbackward
printbackward in section
version of printbackward
recursion the stack
stack to evaluate
expressions are written
infix an alternative
postfix in postfix
evaluate a postfix
operator or operand
pop two operands
perform the operation
push the result
stack that operand
apply this algorithm
advantages of postfix
parentheses to control
control the order
result in infix
write a postfix
parsing to implement
implement the previous
traverse a string
string and break
operands and operators
operators this process
results the individual
remember these words
words from chapter
modules the function
function string.split splits
splits a string
string is split
space the function
provide a regular
delimiter a regular
set of strings
negates a set
string the resulting
resulting list includes
includes the operands
includes two empty
two empty strings
inserted as phantom
postfix to evaluate
implements the operators
stacks def evalpostfix
import re tokenlist
tokenlist = re.split
stack = stack
token in tokenlist
continue if token
sum = stack.pop
product = stack.pop
first condition takes
condition takes care
care of spaces
spaces and empty
two conditions handle
conditions handle operators
operators we assume
check for erroneous
input and report
report an error
evaluating the postfix
clients and providers
separate the interests
writes the code
adt the provider
implementation is correct
correct in accord
adt is correct
correct and doesn
doesn t worry
luxury of thinking
write client code
code to test
play both roles
make some effort
glossary abstract data
variety of ways
define an adt
code that satisfies
satisfies the syntactic
person who wrote
implements an adt
definition that implements
adt with method
transformations the veneer
improves or standardizes
standardizes the interface
client generic data
kind of data
writing mathematical expressions
read a string
string of characters
characters or tokens
tokens and analyze
analyze its grammatical
grammatical structure token
unit for purposes
purposes of parsing
natural language delimiter
queues this chapter
presents two adts
queue in real
line of customers
waiting for service
customer in line
customers whose flights
flights are leaving
queue at supermarkets
items go first
first the rule
rule that determines
policy the simplest
simplest queueing policy
general queueing policy
policy is priority
customer is assigned
assigned a priority
priority goes first
order of arrival
groceries the customer
important the customer
policies are fair
beholder the queue
priority queue adt
operations the difference
priority queueing policy
adt the queue
empty queue insert
queue the item
queue is empty
queue the first
linked node objects
list is empty
node goes first
find the last
last = self.head
self.head while last.next
last = last.next
last.next # append
last.next = node
cargo = self.head.cargo
self.head = self.head.next
cargo the methods
isempty and remove
remove are identical
linkedlist methods isempty
isempty and removefirst
removefirst the insert
bit more complicated
insert new items
node and tack
identify the last
properly formed queue
formed queue object
object the value
value of length
preserves both invariants
method how long
run time change
number of items
loops or function
constant time operation
operation in reality
skips the body
significant the performance
performance of insert
list to find
element this traversal
takes time proportional
linear time compared
compared to constant
improved linked queue
perform all operations
operations in constant
modify the queue
maintains a reference
cargo next cargo
queues the improvedqueue
insert and remove
node is head
head and last
self.head = self.last
self.last = node
last node last
last = self.last
self.last # append
last keeps track
method is constant
price to pay
add a special
case to remove
remove to set
node is removed
linked queue implementation
difficult to demonstrate
correct the advantage
achieved the goal
goal both insert
remove are constant
constant time operations
write an implementation
python list compare
compare the performance
range of queue
queue the priority
highest priority isempty
empty the semantic
necessarily the first
priority queue implementation
implementation it depends
queue have names
highest to lowest
lowest to highest
compare the items
find and remove
priority this implementation
implementation of priority
attribute a python
queue class priorityqueue
queues def insert
veneers on list
method is remove
item = self.items
holds the index
compares the i-eth
item is bigger
value of maxi
maxi is set
item this item
item is removed
list and returned
queue contains simple
numbers or strings
removed in numerical
numerical or alphabetical
python can find
find the biggest
integer or string
built-in comparison operators
provide a cmp
method when remove
operator to compare
invokes the cmp
items and passes
cmp method works
queue will work
definition of priority
implement a class
class called golfer
names and scores
scores of golfers
golfers as usual
start by defining
init and str
self.score = score
score def __str__
return % -16s
operator to put
put the names
scores in neat
define a version
version of cmp
score gets highest
equal class golfer
self.score < other.score
self.score > other.score
ready to test
test the priority
tiger = golfer
phil = golfer
hal = golfer
python list implementation
set of objects
adt that performs
performs the operations
queue queueing policy
rules that determine
determine which member
queue is removed
removed next fifo
member to arrive
removed priority queue
determined by external
factors the member
adt that defines
defines the operations
priority queue linked
queue linked queue
linked list constant
operation whose runtime
data structure linear
data structure chapter
trees like linked
trees are made
nodes a common
kind of tree
two other nodes
references are referred
subtrees like list
cargo a state
left right left
omit the nones
nones the top
node tree refers
root in keeping
tips with null
draw the picture
thing to make
make things worse
computer scientists mix
metaphor the family
tree the top
nodes it refers
vocabulary for talking
talking about trees
comprise a level
metaphors for talking
trees are recursive
recursively a tree
two tree references
trees the process
process of assembling
assembling a tree
tree is similar
assembling a linked
list each constructor
constructor invocation builds
builds a single
single node class
node class tree
self.left = left
right def __str__
arguments for left
tree nodes left
right are optional
print a node
print the cargo
build a tree
bottom up allocate
allocate the child
child nodes first
left = tree
right = tree
create the parent
node and link
tree = tree
write this code
concisely by nesting
nesting constructor invocations
traverse a tree
tree is recursively
tree contains integers
integers as cargo
returns their sum
tree.cargo the base
recursive step makes
makes two recursive
calls to find
find the sum
recursive calls complete
add the cargo
parent and return
return the total
trees a tree
represent the structure
unlike other notations
represent the computation
addition this expression
expression tree represents
cargo + cargo
tree left right
right left right
right the nodes
nodes ; operator
nodes contain references
operators are binary
build this tree
first in order
order to compute
addition expression trees
chapter uses trees
trees to translate
expressions to postfix
infix similar trees
compilers to parse
traverse an expression
tree and print
print a tree
print the entire
entire left subtree
entire right subtree
traversing a tree
notation called prefix
traverse the tree
print the subtrees
order of traversal
print the left
expression in infix
omitted an important
write an expression
parentheses to preserve
preserve the order
sufficient to generate
generate an infix
recursive traversals provide
provide a general
operator and pair
pair of operands
correct and unambiguous
generate a graphical
level + str
level keeps track
tree by default
child s level
item is indented
spaces per level
level the result
building an expression
parse infix expressions
expressions and build
simplified the diagram
diagram by leaving
out the names
attributes the parser
write handles expressions
expressions that include
list the token
preventing the parser
parser from reading
past the end
takes an expression
string and returns
returns a token
list the first
write is gettoken
takes a token
token as arguments
arguments it compares
compares the expected
removes the token
false since tokenlist
returns a leaf
returns none def
return none del
getnumber in isolation
isolation we assign
assign a list
numbers to tokenlist
extract the first
print the result
print what remains
builds an expression
tree for products
products a simple
numbers as operands
version of getproduct
getproduct that handles
handles simple products
simple products def
products def getproduct
return a assuming
assuming that getnumber
succeeds and returns
returns a singleton
assign the first
number and build
build an expression
return the leaf
tree = getproduct
kind of product
product this definition
definition of product
product is counterintuitive
deal with compound
treat this expression
product of products
change in getproduct
handle an arbitrarily
arbitrarily long product
line changed return
changed return tree
right this kind
kind of recursive
starting to feel
add the ability
ability to parse
slightly counterintuitive definition
definition of sum
represent any expression
sum of products
products this property
parsing algorithm getsum
doesn t find
builds a product
product def getsum
tree = getsum
entire sum enclosed
getnumber to handle
remove the closing
closing parenthesis return
return none tokenlist
test this code
trees the parser
handled the parentheses
idea to give
assuming that expressions
expressions are well-formed
missing parenthesis return
omitted the raise
raise statement creates
case a valueerror
handles the exception
find other places
functions where errors
occur and add
add appropriate raise
raise statements test
test your code
improperly formed expressions
develop a small
tree to represent
represent a knowledge
base the program
user to create
create a tree
tree of questions
questions and animal
animals name dog
dog what question
question would distinguish
distinguish a dog
animal were dog
dog the answer
animals name cat
cat what question
distinguish a cat
animal were cat
cat the answer
tree this dialog
bark cat dog
tree and asks
asks the first
first question depending
child and continues
makes a guess
asks the user
question that distinguishes
adds a node
trees def animal
root = tree
quits while true
break # walk
walk the tree
tree = root
root while tree.getleft
prompt = tree.getcargo
tree = tree.getright
tree = tree.getleft
make a guess
guess = tree.getcargo
print i rule
rule ! continue
animal = raw_input
question = raw_input
add new information
prompt % animal
prints a prompt
function returns true
string import lower
import lower ans
ans = lower
loop is true
break statement executes
walks the tree
tree from top
user s responses
node is added
replaces the cargo
cargo one shortcoming
save the knowledge
glossary binary tree
two dependent nodes
dependent nodes root
node that refers
nodes that share
share a common
common parent level
set of nodes
root binary operator
operator that takes
takes two operands
two operands subexpression
parentheses that acts
larger expression preorder
visiting each node
children prefix notation
writing a mathematical
visiting the children
node itself inorder
visiting the left
computer scientist
thinking combines
natural science
computer scientists
formal languages
denote ideas
specifically computations
design things
assembling components
evaluating tradeoffs
complex systems
form hypotheses
test predictions
important skill
problem solving
solving problem
solving means
formulate problems
excellent opportunity
practice problem
solving skills
python programming
programming language
python python
high-level language
high-level languages
lowlevel languages
machine languages
program languages
execute programs
programs written
low-level languages
extra processing
processing takes
small disadvantage
language programs
modifications low-level
low-level programs
languages low-level
specialized applications
programs process
process high-level
interpreter reads
high-level program
reading lines
performing computations
computations source
source output
output code
code interpreter
compiler reads
program starts
starts running
source code
translated program
object code
translation output
code object
object executor
executor code
code source
source compiler
compiler python
interpreted language
python programs
commandline mode
script mode
command-line mode
type python
interpreter prints
first line
python interpreter
line starts
interpreter replied
text editor
file named
development environments
executing programs
command line
line working
program development
type programs
working program
symbolic computation
replacing text
basic instructions
program input
device output
display data
send data
device math
basic mathematical
mathematical operations
conditional execution
statements repetition
describe programming
complex task
smaller subtasks
debugging programming
complex process
human beings
whimsical reasons
programming errors
syntax errors
runtime errors
semantic errors
errors python
process fails
error message
message syntax
syntax refers
capital letter
syntax error
significant problem
spewing error
error messages
messages python
single syntax
programming career
gain experience
fewer errors
runtime error
happened runtime
simple programs
semantic error
right thing
wrong identifying
work backward
experimental debugging
important skills
interesting parts
detective work
experimental science
step closer
sherlock holmes
holmes pointed
conan doyle
small modifications
operating system
simple program
program linus
linus torvalds
larry greenfield
earlier projects
printing aaaa
linux users
users guide
guide beta
beta version
programming practices
natural languages
people speak
evolved naturally
specific applications
formal language
denoting relationships
symbols chemists
chemical structure
programming languages
express computations
languages tend
strict rules
correct mathematical
mathematical statement
correct chemical
syntax rules
structure tokens
basic elements
chemical elements
legal token
error pertains
equal sign
molecular formulas
well-structured english
english sentence
unrecognizable tokens
valid tokens
invalid structure
natural language
shoe fell
sentence assuming
general implication
common tokens
people deal
contextual clues
context redundancy
reduce misunderstandings
languages employ
employ lots
concise literalness
emotional response
response ambiguity
deliberate prose
literal meaning
structure contributes
meaning prose
ambiguous programs
computer program
reading programs
good idea
details matter
spelling errors
bad punctuation
big difference
first program
program written
print statement
quotation marks
program mark
people judge
glossary problem
solution high-level
write low-level
low-level language
machine language
assembly language
language portability
computer interpret
lowlevel language
execution source
compiled object
executed script
program stored
computation algorithm
general process
problems bug
program debugging
errors syntax
program syntax
continuing exception
programmer intended
intended semantics
specific purposes
mathematical ideas
computer programs
languages token
syntactic structure
language parse
structure print
program chapter
fundamental things
program manipulates
values belong
identify strings
strings belong
type str
type int
decimal point
large integer
legal integer
legal expression
python interprets
comma-separated list
prints consecutively
code runs
powerful features
manipulate variables
assignment statement
statement creates
first assigns
named message
floating-point number
represent variables
arrow pointing
state diagram
diagram shows
assignment statements
variable names
print message
variable variables
keywords programmers
choose names
arbitrarily long
uppercase letters
case matters
matters bruce
underscore character
multiple words
big parade
parade syntaxerror
invalid syntax
computer science
syntax 76trombones
illegal character
dollar sign
python keywords
keywords keywords
keywords define
names python
twenty-nine keywords
def exec
return assert
assert del
finally import
print yield
yield continue
global lambda
lambda raise
list handy
interpreter complains
python executes
value assignment
statements don
statements execute
script print
evaluating expressions
statement produces
interpreter evaluates
interpreter displays
python displays
legal statement
operands operators
special symbols
represent computations
legal python
python expressions
performed addition
unexpected result
conventional arithmetic
performing integer
integer division
approximately correct
floating-point division
operator appears
evaluation depends
precedence python
precedence rules
mathematical operators
acronym pemdas
highest precedence
expression easier
result exponentiation
expression minute
turn yields
type string
operator represents
represents concatenation
banana bakedgood
nut bread
bread print
print fruit
word nut
concatenated strings
performs repetition
makes sense
string concatenation
integer addition
program variables
small building
building blocks
add numbers
actions aren
expression involving
involving numbers
print number
arbitrary expressions
right-hand side
composition makes
express complex
complex computations
concisely warning
left-hand side
add notes
elapsed percentage
comment appears
put comments
future programmers
ever-surprising behavior
division operation
division operator1
deliberate percentage
division operator
glossary value
expression type
value determines
floating-point numbers
type float
representing numbers
fractional parts
value statement
print statements
statements assignment
future versions
statements state
graphical representation
reserved word
names operator
special symbol
simple computation
concatenation operand
operator operates
operates expression
single result
result value
value evaluate
single value
value integer
integer integer
division yields
remainder rules
rules governing
expressions involving
involving multiple
multiple operators
evaluated concatenate
operands end-to-end
end-to-end composition
simple expressions
compound statements
computations concisely
concisely comment
function calls
function call
function takes
return value
print betty
unique identifier
unique number
number related
type conversion
conversion python
built-in functions
convert values
int function
invalid literal
floating-point values
fractional part
float function
function converts
converts integers
str function
python distinguishes
integer value
floatingpoint value
type coercion
division returning
previous chapter
obvious expression
integer arithmetic
math functions
convert minute
automatic type
force python
evaluate expressions
logarithm base
complicated expressions
innermost function
math module
familiar mathematical
mathematical functions
related functions
functions grouped
import math
dot notation
first statement
statement sets
sets decibel
takes logarithm
statement finds
variable angle
angle sin
trigonometric functions
first calculate
previous result
square root
python functions
statement takes
cos function
log base
functions creating
general-purpose programming
named sequence
desired operation
function definition
good thing
python keyword
parameters specifies
statements inside
left margin
first couple
def newline
empty parentheses
single statement
newline character
print command
line newline
line notice
extra space
function named
named threelines
def threelines
line threelines
procedure repeatedly
case threelines
threelines calls
calls newline
statements functions
complex computation
single command
english words
arcane code
program smaller
repetitive code
call threelines
blank lines
code fragments
print def
function definitions
threelines function
definition generates
definitions run
working version
execution execution
program statements
bottom function
function inside
definition isn
outer function
flow jumps
sounds simple
keeping track
function completes
program picks
sordid tale
require arguments
sin takes
numeric value
pow takes
exponent inside
user-defined function
def printtwice
print bruce
single argument
parameter named
named bruce
function printtwice
printtwice works
spam spam
first function
user-defined functions
spamspamspamspam spamspamspamspam
printtwice prints
prints spamspamspamspam
print spam
double quotes
bee notice
back home
local variable
variable inside
exists inside
def cattwice
part2 printtwice
pie jesu
jesu domine
dona eis
eis requiem
requiem pie
cattwice terminates
variable cat
print cat
cat nameerror
cat parameters
stack diagrams
stack diagram
state diagrams
diagrams show
variable belongs
cattwice chant1
chant1 chant2
chant2 pie
requiem __main__
__main__ printtwice
printtwice part1
part1 part2
part2 cat
cat pie
requiem dona
requiem bruce
bruce pie
stack shows
execution printtwice
topmost function
parameter refers
error occurs
python prints
file test.py
__main__ cattwice
cattwice printtwice
printtwice print
program file
error occurred
error notice
yield results
larger expression
write functions
simple function
last question
glossary function
arguments enclosed
parentheses argument
value provided
function return
explicit statement
type type
coercion rules
rules module
classes dot
operation functions
result function
executes flow
program run
run parameter
value passed
defined inside
function stack
local variables
function traceback
functions chapter
modulus operator
operator works
integer expressions
first operand
percent sign
print quotient
print remainder
operator turns
right-most digit
boolean expressions
boolean expression
boolean value
false true
special values
comparison operators
python symbols
mathematical symbols
common error
single equal
double equal
assignment operator
comparison operator
logical operators
operator negates
nonzero number
good style
check conditions
conditional statements
statements give
simplest form
indented statement
last statement
header begins
indented statements
unindented statement
statement marks
statement block
block inside
compound statement
place keeper
pass statement
alternative execution
condition determines
program displays
def printparity
printparity displays
integer expression
chained conditionals
equal elif
elif statements
last branch
elif choice
nested conditionals
print invalid
invalid choice
branch executes
statement ends
first true
true branch
first branch
simple output
output statement
output statements
statements makes
structure apparent
single conditional
positive single
single digit
alternative syntax
mathematical notation
compound boolean
nested conditional
return statement
error condition
math def
def printlogarithm
positive numbers
return result
function printlogarithm
first thing
remaining lines
executed remember
interesting things
print blastoff
countdown expects
positive integer
named countdown
countdown begins
total output
functions newline
def nlines
print nlines
additional newlines
total number
function calling
recursive functions
recursive function
python creates
function frame
figure shows
__main__ countdown
countdown countdown
infinite recursion
countdown frames
base case
recursive call
recursive calls
minimal program
def recurse
programming environments
run forever
forever python
python reports
maximum recursion
recursion depth
repetitions omitted
recurse runtimeerror
depth exceeded
recurse frames
keyboard input
bit rude
raw input
program stops
user presses
presses return
enter key
program resumes
input returns
user typed
print input
calling raw
message telling
input function
airspeed velocity
unladen swallow
string represents
input appears
user types
program crashes
european swallow
swallow syntaxerror
conversion functions
glossary modulus
false comparison
logical operator
conditional statement
execution depending
executed compound
header ends
header block
consecutive statements
indentation body
header nesting
program structure
statement inside
statement recursion
executing base
call infinite
error prompt
visual cue
input data
recursion chapter
fruitful functions
return values
produced results
results calling
function generates
radius math.sin
def area
math.pi radius
return temp
fruitful function
statement includes
statement means
expression provided
return math.pi
temporary variables
debugging easier
multiple return
return statements
def absolutevalue
function terminates
subsequent statements
statements code
dead code
program hits
function ends
special value
print absolutevalue
compare function
complete functions
small functions
larger functions
complex programs
incremental development
long debugging
debugging sessions
small amount
pythagorean theorem
first step
distance function
floating-point value
def distance
function doesn
compute distances
sample values
horizontal distance
distance equals
vertical distance
right answer
adding lines
incremental change
last line
logical first
variables named
right arguments
first computation
computation correctly
print dsquared
dsquared return
previous step
step code
final product
sqrt function
bigger chunks
development process
key aspects
small incremental
intermediate values
multiple statements
compound expressions
program difficult
right triangle
arguments record
circle assume
center point
perimeter point
result wrapping
def area2
function area2
area function
function defined
defined earlier
variables radius
return area
function slope
boolean functions
functions functions
boolean values
hiding complicated
complicated tests
tests inside
inside functions
return true
return false
functions names
isdivisible returns
taking advantage
session shows
true boolean
extra comparison
function isbetween
returns true
small subset
complete programming
language features
control devices
nontrivial exercise
alan turing
first computer
early computer
scientists started
turing thesis
recursive definition
circular definition
mathematical function
python program
single parameter
def factorial
interesting part
recurse return
factorial factorial
recurse notice
last frame
variables recurse
read programs
function works
call math.cos
good programmers
recursive programs
functions call
call works
correct result
bit strange
code easier
concise form
explicit version
developing code
feeling inspired
def fibonacci
return fibonacci
small values
head explodes
calls work
right result
checking types
first recursive
factorial function
factorial check
first option
gamma function
built-in function
function isinstance
integers return
positive integers
base cases
first catches
catches nonintegers
negative integers
program prints
recursion terminates
program demonstrates
conditionals act
guardians make
glossary fruitful
value return
call temporary
intermediate value
complex calculation
calculation dead
special python
python value
value returned
argument incremental
development plan
plan intended
avoid debugging
final version
handles circumstances
error chapter
multiple assignment
assignment makes
first print
statement suppresses
assignment operation
longer equal
avoid confusion
variables change
code difficult
statement computers
repetitive tasks
tasks repeating
similar tasks
making errors
perform repetition
first feature
word blastoff
continue execution
body consists
step loops
top notice
loop terminates
infinite loop
endless source
def sequence
condition false
program outputs
starting value
argument passed
resulting sequence
program terminates
prove termination
interesting question
positive values
function nlines
things loops
tabular data
calculate logarithms
mathematics books
books contained
long tables
tables listing
computers appeared
initial reactions
approximate answer
perform computations
underlying tables
intel pentium
log table
left column
right column
tab character
invisible marker
character shifts
tab stops
stops tabs
making columns
text line
previous program
log function
find logarithms
logarithms base
round numbers
arithmetic sequence
geometric sequence
tab characters
first column
column logarithm
logarithm tables
backslash character
escape sequence
sequence escape
escape sequences
invisible characters
tab escape
single string
two-dimensional tables
two-dimensional table
multiplication table
line initializes
loop variable
loop executes
loop completes
statement starts
generalization encapsulation
things functions
generalization means
function encapsulates
previous loop
print multiples
def printmultiples
parameter list
calling printmultiples
inside printmultiples
demonstrate encapsulation
common development
develop code
writing lines
code working
approach lets
printmulttable doesn
variables created
created inside
home function
multiple variables
program shows
printmulttable printmultiples
printmulttable calls
calls printmultiples
current value
loop variables
program harder
six-by-six table
parameter high
function heading
program generates
seven-by-seven table
save ink
printmulttable change
change printmultiples
program easier
iteration dividing
long program
separate parts
functions facilitate
well-designed functions
glossary multiple
program iteration
repeated execution
loop loop
terminating condition
satisfied infinite
satisfied body
loop tab
special character
tab stop
current line
line cursor
printed escape
escape character
printable characters
nonprintable character
character encapsulate
large complex
complex program
constant value
generalization makes
makes code
write development
development based
specific things
generalizing chapter
compound data
data type
string strings
smaller pieces
pieces characters
characters types
data types
types depending
single thing
bracket operator
operator selects
single character
print letter
expression fruit
character number
variable letter
letter refers
display letter
first letter
0th letter
1th letter
index specifies
ordered set
len function
function returns
last letter
error indexerror
string index
6th letter
last character
negative indices
count backward
computations involve
letter index
loop traverses
loop condition
character accessed
index len
letters backward
simpler syntax
print char
variable char
loop continues
abecedarian series
series abecedarian
abecedarian refers
alphabetical order
robert mccloskey
book make
loop outputs
jklmnopq suffix
jack kack
kack lack
lack mack
mack nack
nack oack
oack pack
pack qack
string slices
slice selecting
n-eth character
m-eth character
indices pointing
first index
slice starts
string comparison
operators work
comparison operations
putting words
elif word
lowercase letters
convert strings
standard format
difficult problem
program realize
left side
print greeting
output jello
code produces
error typeerror
object doesn
support item
item assignment
assignment strings
existing string
print newgreeting
original string
find function
def find
return index
index index
character appears
loop prematurely
character doesn
program exits
eureka traversal
cry eureka
program counts
banana count
print count
variable count
string module
loop exits
named countletters
three-parameter version
manipulate strings
import string
module includes
named find
print index
avoid collisions
find substrings
additional argument
additional arguments
search fails
index range
character classification
string string.lowercase
system considers
print string.lowercase
print string.uppercase
print string.digits
classify characters
def islower
lowercase letter
constant defined
print string.whitespace
string.whitespace whitespace
whitespace characters
characters move
white space
visible characters
white paper
constant string.whitespace
including space
book isn
reference manual
python library
library reference
python website
glossary compound
values traverse
similar operation
string slice
values counter
incremented increment
strings chapter
elements lists
ordered sets
type lists
list values
square brackets
list don
mirabile dictu
nested lists
consecutive integers
range function
successive values
step size
special list
empty list
create lists
assign list
pass lists
print vocabulary
accessing elements
expression inside
brackets specifies
index remember
indices start
print numbers
one-eth element
sequence index
list length
list assignment
assignment index
negative value
counts backward
list index
range numbers
last element
index horsemen
print horsemen
loop counts
condition fails
i-eth element
list traversal
function len
len returns
upper bound
program changing
size list
lists horsemen
legal index
nested list
single element
previous list
list membership
boolean operator
tests membership
horsemen false
horsemen list
operator returns
returns false
generalized syntax
list operations
loop written
print horseman
list expression
expresses enthusiasm
operator concatenates
concatenates lists
operator repeats
list slices
slice operations
unlike strings
slice operator
list deletion
print list
remove elements
add elements
empty slice
desired location
delete list
list elements
error-prone python
readable del
del removes
del list
slices select
letters banana
banana banana
lists behave
behave differently
alias affect
avoid aliasing
mutable objects
immutable objects
alias strings
cloning lists
word copy
list parameters
parameters passing
function head
head takes
first element
def head
return list
variable numbers
__main__ numbers
numbers head
list object
function modifies
list parameter
caller sees
deletehead removes
def deletehead
tail returns
def tail
print rest
list creating
creating rest
three-eth element
bracket operators
operators evaluate
threeeth element
matrices nested
represent matrices
entire row
double-index form
index selects
representing matrices
small variation
radical alternative
module involve
involve lists
split function
function breaks
word boundary
optional argument
word boundaries
delimiter doesn
join function
join takes
optional delimiter
glossary list
named collection
list element
selects elements
list sequence
element identified
index nested
list list
sequential accessing
object clone
existing object
object copying
object creates
object delimiter
split chapter
compound types
enclose tuples
python treats
tuples syntax
syntax issues
index operator
tuple assignment
conventional assignment
temporary variable
cumbersome python
right side
respective variable
feature makes
makes tuple
unpack tuple
wrong size
values functions
return tuples
def swap
great advantage
making swap
encapsulate swap
tempting mistake
incorrect version
value changing
inside swap
swap makes
function runs
random numbers
deterministic determinism
unpredictable games
tuples making
nondeterministic turns
generate random
program python
generates pseudorandom
pseudorandom numbers
mathematical sense
random module
floatingpoint number
call random
long series
import random
random number
additional exercise
random integer
end points
random values
values randomlist
randomlist takes
integer argument
complete list
def randomlist
start small
numbers generated
equal-sized buckets
random value
value falls
good approach
computational pattern
sounds familiar
letter appeared
current problem
original program
replace fruit
finding letters
tuples count
last step
high def
def inbucket
return count
existing program
pattern matching
buckets increases
cumbersome bucket1
problem first
bucketwidth print
low end
bucket width
high end
entire range
first problem
bucket list
call inbucket
numbuckets bucketwidth
bucketwidth buckets
print buckets
number generator
longer lists
single-pass solution
program works
calls inbucket
entire list
single pass
previous section
lower bound
previous problem
lower integer
bucket index
glossary immutable
immutable type
modified assignments
immutable types
mutable type
mutable types
types lists
mutable data
sequence type
immutable tuples
dictionary tuple
single assignment
statement tuple
assignment occurs
swapping values
deterministic computation
computation histogram
element counts
familiar computational
similar problem
tuples chapter
error dictionaries
empty dictionary
first assignment
assignment creates
named eng2sp
assignments add
print eng2sp
value separated
key-value pairs
previous output
integer indices
value dos
keyvalue pair
dictionary operations
del statement
statement removes
key-value pair
print inventory
del inventory
dictionary methods
takes arguments
keys method
method takes
function syntax
syntax keys
method syntax
syntax eng2sp.keys
notation specifies
method call
invoking keys
object eng2sp
values method
items method
method returns
type information
key takes
key appears
copy method
copy refers
fresh copy
sparse matrices
good choice
sparse matrix
list representation
column numbers
dictionary representation
nonzero element
method solves
first argument
matrix shame
fibonacci function
roughly forever
call graph
graph shows
set function
function frames
lines connecting
calls fibonacci
times fibonacci
inefficient solution
good solution
computed value
newvalue return
return newvalue
fibonacci numbers
long integers
compute fibonacci
python integer
integer python
long integer
integers python
size integer
long value
long function
numerical type
math operations
operations work
python detects
first case
counting letters
general version
letter appears
text file
shorter codes
common letters
longer codes
frequently dictionaries
dictionaries provide
current count
sort methods
print letteritems
first method
list methods
including append
reverse consult
python documentation
glossary dictionary
type key
dictionary method
object invoke
method hint
temporary storage
precomputed value
redundant computation
numerical result
numerical format
dictionaries chapter
program ends
computer shuts
memory disappears
store data
file files
hard drive
floppy drive
large number
writing files
exchange information
generate printable
printable formats
pdf working
natural order
write opening
file creates
file object
open function
mode mode
put data
write method
file tells
mode argument
read method
method reads
reads data
entire contents
print text
timeto close
strings read
read returns
remaining characters
empty string
text files
function copies
fifty characters
original file
break statement
execution moves
value true
lines separated
newline characters
process text
job easy
text separated
readline method
print f.readline
exceptions readlines
readlines returns
print f.readlines
list format
readline returns
line-processing program
program filterfile
filterfile makes
continue statement
current iteration
continues looping
first character
hash mark
conditions fail
writing variables
strings first
format operator
format string
format sequence
first expression
floating-point format
format prints
decimal places
format sequences
dollars typeerror
illegal argument
argument type
built-in operation
wrong type
minimum number
fewer digits
leading spaces
trailing spaces
result takes
twelve spaces
printing dollar
dollar amounts
decimal points
points aligned
student names
hourly wages
formatted report
def report
small dictionary
twenty-one characters
current directory
named words
directory named
named dict
top-level directory
danish university
put values
original type
value ends
preserves data
data structures
pickle module
import pickle
data structure
dump method
nonexistent list
list item
nonexistent file
file doesn
statement executes
first block
exceptions occur
type ioerror
ioerror occurs
exists takes
file exists
def exists
python reference
program detects
valid input
def inputnumber
raise valueerror
bad number
number return
raise statement
exception type
specific information
error valueerror
exception types
types python
examples include
include typeerror
inputnumber handles
message includes
additional information
valueerror exception
glossary file
named entity
floppy disk
characters directory
folder path
directory names
exact location
file text
characters organized
characters break
loop continue
operator takes
format values
values format
characters beginning
value pickle
data value
runtime handle
statements raise
exceptions chapter
user-defined compound
built-in types
userdefined type
mathematical point
single object
compound object
dirty solution
compound type
approach involves
class definition
class point
pass class
class definitions
import statements
class defi
defi nition
definition creates
point class
objects creating
point object
variable blank
data item
named items
blank refers
attribute refers
expression blank.x
blank.x means
object blank
blank.x blank.x
blank.y blank.y
line outputs
line calculates
print blank
identifier translate
hexadecimal form
def printpoint
printpoint takes
similar ambiguity
shallow equality
objects deep
deep equality
def samepoint
selbe mutter
opposing corners
conventional choice
upper-left corner
class rectangle
code creates
rectangle object
floating-point attributes
dot operator
operator composes
expression box.corner.x
box.corner.x means
object box
box refers
attribute named
named corner
width height
return instances
findcenter takes
def findcenter
pass box
def growrect
variables dwidth
direction invoking
rectangle named
named bob
parameter box
affect bob
named moverect
parameters named
copying aliasing
unexpected effects
copy module
import copy
simple object
embedded objects
shallow copying
copy doesn
single point
resulting state
height corner
invoking growrect
invoking moverect
method named
named deepcopy
deep copy
separate objects
copy newbox
dheight return
return newbox
rewrite moverect
glossary class
class instance
class object
real world
world constructor
objects attribute
named data
data items
instance shallow
object deep
value shallow
shallow copy
copy function
module deep
objects embedded
deepcopy function
objects chapter
user-defined type
assign attributes
hours minutes
minutes seconds
function printtime
form hours
boolean function
pure functions
rough version
def addtime
t2.hours sum.minutes
t2.minutes sum.seconds
t2.seconds return
return sum
function creates
pure function
objects passed
side effects
user input
make bread
writing printtime
minutes adds
extra seconds
minutes column
extra minutes
hours column
corrected version
alternative approach
shorter code
function makes
caller functions
modifiers increment
rough draft
def increment
line performs
basic operation
remainder deals
special cases
function correct
parameter seconds
efficient solution
rewrite increment
write function
functional programs
prototype development
development versus
write pure
compelling advantage
functional programming
programming style
call prototype
basic calculation
correcting flaws
planned development
three-digit number
minute component
sixties column
hour component
thirty-six hundreds
hundreds column
doing addition
observation suggests
single number
def converttoseconds
t.minutes seconds
t.seconds return
return seconds
def maketime
correct assuming
rewrite addtime
return maketime
times base
base conversion
treat times
add features
imagine subtracting
implement subtraction
problem harder
fewer special
fewer opportunities
general solution
specific solution
single problem
single-digit numbers
specific solutions
first digit
single-digit number
long division
carry out
mechanical processes
simple set
humans spend
school learning
execute algorithms
designing algorithms
central part
call programming
conscious thought
express algorithmically
algorithmically understanding
glossary pure
program design
pure prototype
developing programs
programs starting
high-level insight
development algorithm
unintelligent process
object-oriented features
features python
object-oriented programming
object definitions
object definition
definition corresponds
object correspond
real-world objects
objects interact
class defined
people record
defined correspond
things people
rectangle classes
classes correspond
mathematical concepts
obvious connection
class methods
method explicit
class named
named printtime
pass def
def printtime
print str
definition inside
definition notice
invoke printtime
invoked appears
method appears
first parameter
case currenttime
active agent
active agents
shifting responsibility
objects makes
versatile functions
reuse code
convert increment
save space
defined methods
previous method
method definitions
method definition
invoke increment
method currenttime.increment
convert converttoseconds
optional arguments
variable number
argument lists
original version
improved version
default value
fourth parameter
bit tricky
default values
str doesn
initialization method
special method
underscore characters
def __init__
hours self.minutes
minutes self.seconds
attribute self.hours
parameter hours
hours dot
points revisited
make assignments
object-oriented style
def __str__
optional parameters
string representation
named str
default behavior
python built-in
built-in str
invokes str
defining str
writing init
instantiate objects
operator overloading
languages make
built-in operators
user-defined types
mathematical types
addition operator
named add
def __add__
return point
point objects
python invokes
method sub
subtraction operator
multiplication operator
named mul
left operand
dot product
linear algebra
def __mul__
return self.x
self.x other.x
self.y other.y
primitive type
right operand
performs scalar
scalar multiplication
def __rmul__
original coordinates
argument inside
inside mul
int object
bit opaque
specific type
write methods
arithmetic operations
previous sections
types support
multadd operation
def multadd
numeric values
print multadd
product yields
method frontandback
def frontandback
reverse method
method doesn
applies frontandback
fundamental rule
operations inside
method include
include copy
print copy
copy works
str method
def reverse
pass points
unintentional kind
glossary object-oriented
object-oriented language
userdefined classes
facilitate object-oriented
methods method
class override
default examples
include replacing
default method
methods operator
print card1
card1 jack
diamonds class
class attributes
card objects
card object
print card2
class attribute
swirly whales
modify class
comparing cards
primitive types
conditional operators
compare values
named cmp
first object
floatingpoint numbers
completely ordered
compare apples
playing cards
compare cards
higher rank
higher suit
make cards
write cmp
def __cmp__
check ranks
tie return
modify cmp
represent cards
logical step
deck object
deck class
method creates
attribute cards
standard set
class deck
nested loop
outer loop
loop enumerates
loop iterates
thirteen times
iteration creates
current suit
cards list
append method
method works
objects class
def printdeck
print card
previous card
traversing self.cards
string multiplication
function passing
loop ends
complete string
print deck
deck ace
clubs jack
clubs king
clubs ace
result appears
long string
randrange function
integer arguments
randrange chooses
expression chooses
random card
def shuffle
random ncards
actual length
current card
selected card
sequence assignment
dealing cards
def removecard
cmp method
determine equality
card class
class checks
removecard method
method checks
deal cards
top card
list method
method pop
def popcard
return self.cards.pop
pop removes
last card
effect dealing
function isempty
def isempty
glossary encode
method class
class accumulator
running sum
language feature
inheritance inheritance
modified version
existing class
primary advantage
class inherits
class extending
parent class
child class
subclass inheritance
powerful feature
facilitate code
code reuse
parent classes
inheritance structure
structure reflects
natural structure
make programs
relevant code
card game
write code
card games
require operations
removing cards
deck depending
make sense
situation suggests
class appears
class hand
hand class
existing deck
hand constructor
constructor initializes
optional parameter
value cards
remove cards
deck removing
hand inherits
inherits removecard
write addcard
def addcard
list append
method adds
single deck
deck deal
entire deck
hand deal
deal takes
method deals
def deal
cards card
card hand
last item
round robin
nhands wraps
str methods
methods inherited
print hand
hand hand
hand frank
spades ace
great hand
straight flush
existing methods
hand object
program appends
current hand
deck method
deck hand
hand objects
deck objects
cardgame class
class takes
takes care
basic chores
class cardgame
method performs
significant computation
initializing attributes
specific games
matching cards
clubs matches
hearts matches
fifty-one remaining
remaining cards
players match
play begins
player picks
closest neighbor
chosen card
card matches
computer simulation
computer plays
real game
oldmaidhand class
maid requires
general abilities
additional method
inheritance class
class oldmaidhand
def removematches
traversal python
matching card
match card
card.suit turns
opposite operations
oldmaidgame class
spades matches
clubs hand
diamonds matches
diamonds notice
init method
oldmaidgame object
shuffled deck
class oldmaidgame
def play
player self.hands
dealt self.printhands
initial matches
matches matches
matches discarded
begins self.printhands
matched turn
numhands print
methods removeallmatches
removeallmatches traverses
invokes removematches
def removeallmatches
write printhands
traverses self.hands
hand count
matches reaches
fifty cards
variable turn
reaches numhands
operator wraps
method playoneturn
playoneturn takes
matches made
def playoneturn
pickedcard count
turn consists
first player
method findneighbor
findneighbor starts
def findneighbor
return neighbor
finding cards
printhands method
truncated form
top fifteen
fifteen cards
small deck
play stops
import cards
dealt hand
hand allen
hearts jack
spades king
diamonds hand
hand jeff
spades jack
hearts king
hand chris
diamonds king
matches queen
begins hand
allen picked
matches king
jeff picked
hearts hand
chris picked
picked jack
picked queen
spades hand
matches jack
empty hand
jeff loses
glossary inheritance
defined class
class parent
inherits child
class created
inheritance chapter
linked lists
embedded references
common data
linked list
takes advantage
feature linked
recursive data
cargo object
structures lend
recursive methods
node class
basic mechanism
lists class
class node
return str
print node
node test
first node
node1 cargo
node2 cargo
create nodes
collections lists
assemble multiple
multiple objects
single entity
list serves
function printlist
printlist takes
single node
argument starting
def printlist
node.next print
inside printlist
node takes
lists node1
modify printlist
generates output
recursive algorithm
list backwards
tail backward
list backward
algorithm works
natural base
def printbackward
return head
list tail
list.next printbackward
print head
line handles
lines split
lines print
infinite lists
invoked printlist
backward list
limitation makes
list-manipulating code
clean object-oriented
function crash
earlier node
loop forever
recurse infinitely
behavior makes
infinite list
repeating fraction
printbackward terminate
hypothetical statement
fundamental ambiguity
ambiguity theorem
variables play
variable plays
additional variables
written printbackward
return printbackward
printbackward treats
print treats
theorem describes
modifying lists
interesting operations
removed node
def removesecond
list operation
printbackward function
separate function
check functions
invokes printbackward
linkedlist class
subtle problems
implementing lists
alternative implementation
node linkedlist
linkedlist objects
objects serve
manipulating lists
node objects
class linkedlist
nice thing
natural place
put wrapper
wrapper functions
self.next tail.printbackward
make things
things confusing
renamed printbackwardnicely
methods named
named printbackward
wrapper invokes
node object
def addfirst
self.head self.head
node self.length
check code
length value
linkedlist object
actual number
list requirements
programming practice
detect errors
incremented length
significant stretch
glossary embedded
embedded reference
reference stored
object linked
linked nodes
nodes node
type cargo
data contained
node link
work correctly
list node
nodes singleton
node wrapper
helper method
method easier
invoke helper
perform part
operation invariant
abstract data
class represents
alternative implementations
implementations well-known
well-known adts
stack adt
standard libraries
adts provide
common high-level
client code
provider code
common adt
multiple elements
include dictionaries
stack consists
empty stack
stack push
stack pop
added isempty
lifo data
item added
implementing stacks
python lists
interface isn
built-in operations
semantic requirements
python list
class stack
def push
def pop
return self.items.pop
stack object
method sets
sets items
push appends
homonymous1 list
isempty compares
compares items
methods consist
simple invocations
real life
thin coating
good quality
quality wood
lower quality
wood underneath
underneath computer
small piece
generic data
print s.pop
items backward
natural parallel
recursive version
stack algorithm
runtime stack
evaluate postfix
mathematical expressions
reason postfix
postfix expression
operand left
previous algorithm
evaluating postfix
individual chunks
split method
regular expression
function string.split
string.split splits
space character
function re.split
resulting list
list includes
empty strings
phantom operands
def evalpostfix
elif token
return stack.pop
first condition
condition takes
handle operators
erroneous input
postfix form
print evalpostfix
fundamental goals
client assumes
write client
glossary abstract
ways interface
adt implementation
interface client
adt provider
adt veneer
simple transformations
significant work
type infix
operands postfix
operands parse
grammatical structure
structure token
language delimiter
separate tokens
stacks chapter
chapter presents
priority queue
customers waiting
first customer
polite customer
queueing policy
general queueing
priority queueing
highest priority
general policy
flight leaves
queueing policies
queue adt
fifo policy
empty queue
queue insert
queues remove
first implementation
linked queue
linked node
class queue
def insert
first self.head
last node
def remove
self.head.cargo self.head
self.head.next self.length
return cargo
methods isempty
linkedlist methods
insert method
set head
performance characteristics
formed queue
queue object
method preserves
collection increases
general case
traversal takes
linear function
queue class
head length
improvedqueue implementation
class improvedqueue
attribute last
remove methods
last self.head
special case
queue implementation
list compare
queue lengths
queue remove
priority isempty
semantic difference
bowling scores
class priorityqueue
return self.items
interesting method
return item
maxi holds
biggest item
program compares
i-eth item
statement completes
simple numbers
lowest python
biggest integer
built-in comparison
object type
compare items
golfer class
unusual definition
defining init
class golfer
score def
neat columns
lowest score
cmp returns
equal class
tiger woods
phil mickelson
hal sutton
list sorted
operation compare
list implementation
glossary queue
objects waiting
kind queue
queue queueing
first member
removed priority
priority determined
external factors
queue linked
list constant
structure linear
structure chapter
common kind
binary tree
right subtrees
list nodes
tree nodes
avoid cluttering
node tree
tree refers
tree metaphor
null references
strangest thing
scientists mix
family tree
top node
children nodes
geometric vocabulary
root comprise
defined recursively
empty tree
object reference
tree references
building trees
constructor invocation
invocation builds
class tree
cargo self.left
nodes left
child nodes
parent node
nesting constructor
constructor invocations
traversing trees
first question
def total
return total
recursive step
step makes
child trees
expression trees
computation unambiguously
infix expression
expression tree
tree represents
cargo cargo
tree left
left right
right left
leaf nodes
operator nodes
addition expression
translate expressions
similar trees
inside compilers
translate programs
tree traversal
def printtree
return print
entire left
left subtree
entire right
right subtree
root node
def printtreepostorder
return printtreepostorder
tree inorder
left tree
right tree
def printtreeinorder
return printtreeinorder
important complication
inorder traversal
recursive traversals
traversals provide
modify printtreeinorder
puts parentheses
output correct
def printtreeindented
return printtreeindented
print level
parameter level
pass level
output sideways
simplified version
original figure
write handles
handles expressions
include numbers
input string
token list
end token
reading past
expression string
expected token
first token
def gettoken
del tokenlist
tokenlist refers
mutable object
handles operands
getnumber removes
leaf node
def getnumber
return tree
test getnumber
print tokenlist
simple product
handles simple
simple products
products def
def getproduct
getnumber succeeds
singleton tree
single operand
compound products
resulting tree
small change
long product
line changed
changed return
feel familiar
compound product
parse sums
counterintuitive definition
nice property
parsing algorithm
algorithm getsum
product def
def getsum
handle parentheses
entire sum
sum enclosed
modify getnumber
handle subexpressions
subexpression gettoken
closing parenthesis
parenthesis return
parser handled
give getnumber
handling errors
close parenthesis
missing parenthesis
function omitted
raise statements
statements test
formed expressions
animal tree
small program
knowledge base
program interacts
animal names
sample run
dialog builds
cat dog
question depending
singleton root
user quits
tree tree
guess guess
information prompt
takes input
response begins
string import
lower ans
loop walks
question replaces
original cargo
knowledge tree
file implement
glossary binary
node refers
dependent nodes
nodes root
topmost node
parent leaf
bottom-most node
children parent
node child
nodes referred
node siblings
common parent
parent level
nodes equidistant
root binary
binary operator
operands subexpression
expression preorder
children prefix
prefix notation
mathematical expression
operator appearing
goal
book
teach
computer
scientist
thinking
combines
features
mathematics
engineering
natural
science
mathematicians
scientists
formal
languages
denote
ideas
specifically
computations
engineers
design
things
assembling
components
systems
evaluating
tradeoffs
alternatives
observe
behavior
complex
form
hypotheses
test
predictions
single
important
skill
problem
solving
means
ability
formulate
problems
creatively
solutions
express
solution
accurately
turns
out
process
learning
program
excellent
opportunity
practice
skills
chapter
level
programming
end
clearer
python
language
high-level
heard
perl
java
infer
lowlevel
referred
machine
assembly
loosely
speaking
computers
execute
programs
written
low-level
processed
run
extra
processing
takes
small
disadvantage
advantages
enormous
first
easier
write
shorter
read
correct
portable
meaning
kinds
modifications
kind
rewritten
due
specialized
applications
two
interpreters
compilers
interpreter
reads
executes
processes
alternately
reading
lines
performing
source
output
code
compiler
translates
completely
starts
running
case
translated
object
executable
compiled
repeatedly
translation
executor
considered
interpreted
executed
ways
commandline
mode
script
command-line
type
prints
result
2.4.1
apr
copyright
credits
license
information
print
line
command
messages
prompt
ready
typed
replied
alternatively
file
contents
text
editor
create
named
latoya.py
convention
files
names
.py
development
environments
details
executing
differ
interesting
examples
working
convenient
testing
immediately
store
modify
future
sequence
instructions
specifies
perform
computation
mathematical
system
equations
finding
roots
polynomial
symbolic
searching
replacing
document
strangely
compiling
basic
input
data
keyboard
device
display
screen
send
math
operations
addition
multiplication
conditional
execution
check
conditions
statements
repetition
action
variation
pretty
matter
complicated
made
describe
breaking
large
task
smaller
subtasks
simple
performed
vague
back
topic
talk
algorithms
debugging
done
human
beings
leads
errors
whimsical
reasons
bugs
tracking
correcting
occur
syntax
runtime
semantic
distinguish
order
track
quickly
1.3.1
syntactically
fails
returns
error
message
refers
structure
rules
english
sentence
begin
capital
letter
period
readers
significant
poetry
cummings
spewing
forgiving
quit
weeks
career
spend
lot
gain
experience
make
fewer
find
faster
1.3.2
exceptions
exceptional
bad
happened
rare
chapters
encounter
1.3.3
successfully
sense
generate
right
thing
told
wrote
wanted
semantics
wrong
identifying
tricky
requires
work
backward
figure
doing
1.3.4
experimental
acquire
frustrating
intellectually
rich
challenging
parts
detective
confronted
clues
events
led
results
idea
hypothesis
predict
modification
step
closer
sherlock
holmes
pointed
eliminated
impossible
remains
improbable
truth
conan
doyle
sign
four
people
gradually
start
linux
operating
thousands
started
linus
torvalds
explore
intel
chip
larry
greenfield
earlier
projects
switch
printing
aaaa
bbbb
evolved
users
guide
beta
version
suggestions
practices
speak
spanish
french
designed
impose
naturally
specific
notation
good
denoting
relationships
numbers
symbols
chemists
represent
chemical
molecules
importantly
tend
strict
statement
h2o
2zz
flavors
pertaining
tokens
elements
words
legal
token
similarly
element
abbreviation
pertains
arranged
structurally
illegal
place
equal
molecular
formulas
subscripts
exercise
appears
well-structured
unrecognizable
valid
invalid
subconsciously
parsing
hear
shoe
fell
understand
subject
predicate
parsed
assuming
fall
general
implication
common
differences
ambiguity
full
deal
contextual
unambiguous
context
redundancy
reduce
misunderstandings
employ
lots
verbose
redundant
concise
literalness
idiom
metaphor
falling
grow
hard
adjusting
difference
prose
sounds
poem
creates
effect
emotional
response
deliberate
literal
contributes
amenable
analysis
ambiguous
understood
remember
dense
longer
top
bottom
left
learn
parse
head
interpreting
finally
spelling
punctuation
big
traditionally
world
doesn
paper
displays
value
quotation
marks
mark
beginning
don
judge
quality
simplicity
standard
glossary
formulating
expressing
easy
humans
portability
property
interpret
translating
compile
translate
preparation
stored
set
algorithm
category
bug
removing
makes
prevents
continuing
exception
programmer
intended
purposes
representing
syntactic
analogous
word
examine
analyze
instruction
variables
expressions
values
types
fundamental
number
manipulates
added
belong
integer
string
so-called
letters
identify
strings
enclosed
works
integers
surprisingly
str
int
decimal
point
float
represented
format
floating-point
tempted
commas
groups
digits
1,000,000
expression
expected
interprets
comma-separated
list
consecutively
runs
producing
powerful
manipulate
variable
assignment
doc
assignments
assigns
arrow
pointing
state
diagram
shows
mind
keywords
programmers
generally
choose
meaningful
arbitrarily
long
uppercase
matters
bruce
underscore
character
multiple
price
tea
china
give
76trombones
parade
syntaxerror
class
dollar
define
twenty-nine
def
exec
return
assert
del
import
break
elif
pass
yield
continue
global
lambda
raise
handy
complains
produce
produces
combination
operators
evaluates
confusingly
enter
includes
change
operands
special
operator
clear
hour-1
hour
minute
15-7
parenthesis
grouping
asterisk
symbol
exponentiation
operand
replaced
operation
subtraction
expect
surprised
division
unexpected
conventional
arithmetic
divided
reason
discrepancy
rounds
cases
close
calculate
percentage
fraction
rounded
answer
approximately
alternative
evaluation
depends
precedence
acronym
pemdas
parentheses
highest
force
evaluate
evaluated
3-1
5-2
higher
yields
yielding
turn
message-1
interestingly
represents
concatenation
joining
linking
end-to-end
fruit
banana
bakedgood
nut
bread
space
part
concatenated
performs
fun
funfunfun
hand
interpretation
analogy
equivalent
composition
looked
isolation
talking
combine
building
blocks
compose
add
reality
happen
actions
aren
happening
involving
inside
minutes
midnight
put
arbitrary
right-hand
side
impressive
neatly
concisely
warning
limits
left-hand
comments
bigger
difficult
piece
notes
explain
marked
compute
elapsed
comment
caution
reminds
reader
ever-surprising
sort
operator1
signals
computed
determines
fractional
section
1for
versions
graphical
representation
keyword
reserved
operates
simplify
divides
times
numerator
divisible
denominator
discards
remainder
governing
concatenate
join
compound
meant
functions
function
calls
call
argument
assign
betty
acts
unique
identifier
related
memory
conversion
collection
built-in
convert
converts
valueerror
truncates
odd
distinguishes
floatingpoint
differently
coercion
returning
previous
suppose
obvious
past
advantage
automatic
automatically
converted
making
sin
log
learned
table
logarithm
base
applied
innermost
module
familiar
grouped
separated
dot
decibel
math.log10
angle
height
math.sin
sets
finds
sine
trigonometric
cos
tan
arguments
radians
degrees
divide
multiply
math.pi
constant
geometry
comparing
square
root
math.sqrt
composed
math.cos
adds
sum
passed
math.exp
math.log
raises
power
assigned
adding
creating
solve
general-purpose
desired
definition
defined
definitions
hidden
worrying
parameters
provide
indented
margin
indentation
spaces
couple
newline
empty
outputs
calling
notice
threelines
procedure
fact
worth
trouble
demonstrates
group
hiding
arcane
eliminating
repetitive
short
consecutive
ninelines
blank
twentyseven
pulling
fragments
generates
move
last
flow
ensure
begins
alter
isn
outer
detour
jumps
pick
middle
fortunately
adept
keeping
completes
picks
terminates
moral
sordid
tale
follow
require
control
job
numeric
pow
exponent
user-defined
parameter
printtwice
printed
chosen
suggest
illustrative
spam
apply
spamspamspamspam
usual
hint
double
quotes
quote
enclose
michael
eric
half
bee
home
caller
local
exists
cattwice
part1
part2
cat
concatenates
chant1
pie
jesu
domine
chant2
dona
eis
requiem
destroyed
nameerror
complain
stack
diagrams
draw
show
belongs
frame
box
__main__
main
topmost
occurs
access
traceback
test.py
tells
occurred
caused
similarity
coincidence
noticed
questions
i.e
larger
stuck
question
consists
provided
explicit
computes
classes
conditionals
recursion
modulus
percent
quotient
extract
right-most
digit
boolean
true
false
compares
built
comparison
greater
logical
similar
negates
strictly
nonzero
style
compare
explicitly
simplest
positive
condition
header
block
ends
colon
unindented
body
limit
occasionally
keeper
haven
possibilities
branches
parity
evenness
oddness
wrap
printparity
chained
branch
choice
functiona
functionb
functionc
nested
checked
dispatch
trichotomy
apparent
avoid
rewrite
semantically
terminate
reach
detect
printlogarithm
exit
remaining
mentioned
neglected
mention
magical
countdown
blastoff
n-1
expects
passing
trip
total
newlines
nlines
additional
algebra
recursive
infinite
frames
reaches
forever
minimal
recurse
reports
maximum
depth
reached
repetitions
omitted
runtimeerror
exceeded
bit
rude
accept
user
raw
stops
waits
presses
key
resumes
raw_input
waiting
telling
supply
what...is
arthur
king
britons
airspeed
velocity
unladen
swallow
speed
crashes
african
european
denoted
controls
depending
relative
nesting
recursively
reaching
eventually
visual
cue
fruitful
produced
radius
returned
area
circle
temp
temporary
absolutevalue
subsequent
dead
path
hits
hitting
complete
exercises
difficulty
increasingly
technique
incremental
sessions
amount
distance
points
coordinates
pythagorean
theorem
inputs
outline
distances
sample
chose
horizontal
equals
vertical
hypotenuse
3-4-5
triangle
confirmed
correctly
squares
dsquared
removed
scaffolding
helpful
final
product
stage
imported
sqrt
writing
chunks
save
aspects
hold
intermediate
remove
consolidate
length
lengths
legs
record
center
perimeter
assume
wrapping
area2
composing
slope
intercept
y-intercept
tests
isdivisible
sound
yes
taking
directly
avoiding
altogether
session
tempting
unnecessary
isbetween
subset
interested
expressed
commands
devices
mouse
disks
proving
claim
nontrivial
accomplished
alan
turing
argue
mathematician
early
thesis
theory
chance
proof
tools
circular
reference
frabjuous
adjective
dictionary
annoyed
factorial
multiplied
putting
decide
effort
conclude
leap
faith
shown
exist
labyrinthine
practicing
implementations
convinced
examining
multiplying
strange
finished
spell
steps
debug
saved
recommend
developing
tighten
feeling
inspired
fibonacci
n-2
fairly
explodes
checking
miss
choices
generalize
option
gamma
scope
isinstance
verify
catches
nonintegers
negative
fred
checks
prove
pattern
guardian
act
guardians
protecting
correctness
calculation
plan
handles
circumstances
iteration
discovered
existing
stop
referring
suppresses
equality
commutative
stay
confusion
frequently
automate
tasks
repeating
identical
poorly
feature
displaying
reducing
formally
loop
loops
repeat
endless
amusement
observation
directions
shampoo
lather
rinse
finite
starting
resulting
increases
decreases
termination
disprove
tables
generating
tabular
readily
logarithms
sines
cosines
books
contained
listing
slow
boring
tended
appeared
scene
initial
reactions
great
turned
shortsighted
calculators
pervasive
obsolete
approximate
improve
approximation
underlying
famously
pentium
column
tab
characters
displayed
invisible
marker
cursor
shifts
tabs
columns
powers
respect
formula
log2
loge
changing
round
geometric
position
depend
knowing
65,536
memorize
backslash
escape
sequences
two-dimensional
intersection
row
multiples
encapsulation
generalization
initializes
counter
encapsulate
allowing
encapsulates
generalizes
printmultiples
declares
replace
guess
demonstrate
printmulttable
develop
typing
approach
lets
wondering
created
free
affect
current
perfectly
harder
imagine
size
six-by-six
high
rows
annoying
demonstrating
heading
seven-by-seven
appropriately
capabilities
didn
entries
ink
trace
giving
dividing
separate
facilitate
well-designed
reuse
repeated
terminating
satisfied
printable
designate
nonprintable
isolate
unnecessarily
versatile
reused
demonstrated
based
encapsulating
generalizing
qualitatively
pieces
comprise
treat
bracket
selects
surprise
brackets
offset
0th
zero-eth
1th
one-eth
2th
two-eth
index
member
ordered
len
won
indexerror
range
6th
counting
numbered
subtract
length-1
indices
count
traversal
involve
select
encode
traverses
accessed
traverse
simpler
char
continues
abecedarian
series
alphabetical
robert
mccloskey
ducklings
jack
kack
lack
mack
nack
ouack
pack
quack
prefixes
jklmnopq
suffix
ack
oack
qack
misspelled
fix
slices
segment
slice
selecting
peter
paul
mary
n-eth
m-eth
including
excluding
counterintuitive
omit
ban
ana
bananas
immutable
aware
handle
upper
lowercase
zebra
address
realize
zebras
intention
greeting
jello
typeerror
support
item
original
newgreeting
opposite
extracting
found
prematurely
exits
eureka
cry
looping
counts
initialized
incremented
increment
increase
decrement
unrelated
excrement
noun
countletters
accepts
traversing
three-parameter
string.find
benefits
modules
collisions
substrings
bob
search
classification
constants
string.lowercase
considers
string.uppercase
string.digits
classify
islower
discuss
fastest
prefer
string.whitespace
whitespace
white
visible
manual
library
wealth
documentation
website
www.python.org
iterate
mutable
decrease
lists
identified
behave
bungee
mirabile
dictu
1,5
forms
successive
disappointing
couldn
vocabulary
ameliorate
castigate
defenestrate
accessing
3-2
horsemen
war
famine
pestilence
death
i-eth
bound
brie
roquefort
pol
veq
membership
debauchery
generalized
eliminate
horseman
apple
quince
eat
nineteen
expresses
enthusiasm
fruits
repeats
copy
unlike
update
pear
orange
deletion
assigning
squeezing
location
delete
awkward
error-prone
readable
removes
objects
states
obtain
aliasing
aliased
alias
undesirable
safer
sees
economize
cloning
easiest
clone
consist
passes
aliases
shared
drew
modifies
deletehead
tail
rest
three-eth
proceed
elt
threeeth
extracts
matrices
matrix
entire
double-index
possibility
radical
split
breaks
default
boundary
song
rain
spain
string.split
optional
delimiter
boundaries
inverse
pair
string.join
inserted
the_rain_in_spain
relationship
sequential
references
copying
tuples
mutability
noted
modified
tuple
include
treats
issues
swap
cumbersome
solves
respective
unpack
swaps
danger
mistake
incorrect
random
deterministic
determinism
unpredictable
games
nondeterministic
determine
outcome
pseudorandom
random.random
low
randomlist
zeros
replaces
generated
supposed
distributed
uniformly
equally
equal-sized
buckets
falls
bucket
roughly
subproblems
fit
computational
traversed
counted
adapting
num
inbucket
modifying
matching
solved
unwieldy
bucket1
bucket2
bucket3
bucket4
numbuckets
width
numbuckets-1
bucketwidth
confirm
overlap
cover
generator
single-pass
efficient
traversals
lower
histogram
dictionaries
required
parallel
swapping
involves
eng2sp
uno
dos
entry
keys
key-value
pairs
tres
care
indexed
keyvalue
stock
inventory
apples
oranges
pears
buys
expecting
methods
method
eng2sp.keys
invocation
invoking
eng2sp.values
items
eng2sp.items
eng2sp.has_key
deux
has_key
opposites
opposites.copy
fresh
changed
unchanged
privilege
sparse
zeroes
0,0,0,1,0
0,0,0,0,0
0,2,0,0,0
0,0,0,3,0
hints
0,3
1,3
keyerror
matrix.get
improves
shame
played
machines
finishes
instantly
graph
connecting
inefficient
worse
storing
previously
implementation
previous.has_key
newvalue
maps
eyeblink
20365011074l
20,365,011,074
numerical
57l
longs
detects
overflow
10000000000l
occurrences
compressing
frequencies
compress
codes
elegant
lettercounts
mississippi
lettercounts.get
possibly
appealing
letteritems
lettercounts.items
letteritems.sort
encountered
applies
append
extend
reverse
consult
invoked
invoke
storage
precomputed
shuts
disappears
permanently
drive
floppy
cd-rom
organized
directories
folders
directory
exchange
formats
pdf
open
skip
opening
test.dat,w
test.dat
f.write
closing
f.close
test.dat,r
test.cat,r
ioerror
errno
test.cat
f.read
timeto
copies
fifty
copyfile
oldfile
newfile
f1.read
f2.write
f1.close
f2.close
moves
nline
readline
f.readline
readlines
f.readlines
line-processing
filterfile
omitting
f1.readline
proceeds
hash
fail
formatted
stands
cars
confused
embed
july
sold
days
million
34,6.1
dollars
places
match
1,2
12f
minimum
leading
trailing
-6d
12.2f
twelve
amounts
aligned
student
hourly
wages
report
students
wages.keys
students.sort
-20s
joe
joshua
controlling
guarantee
twenty-one
billion
ran
folder
located
aarhus
opens
resides
dict
share
usr
top-level
filename
filenames
danish
university
pickling
1,2,3
lost
preserves
structures
pickle
test.pck,w
dump
pickle.dump
load
dumped
test.pck,r
pickle.load
zerodivisionerror
modulo
nonexistent
idontexist
specifics
crash
ignores
capability
inputnumber
variety
occasions
favorite
notimplementederror
entity
disk
stream
exact
reconstituted
prevent
signal
userdefined
concept
dimensions
treated
collectively
separating
origin
units
quick
dirty
defi
nition
members
instances
instance
instantiation
instantiate
guessed
constructor
attributes
blank.x
blank.y
attribute
conflict
purpose
unambiguously
distancesquared
calculates
80f8e70
hexadecimal
informative
shortly
printpoint
p.x
p.y
sameness
thought
chris
car
model
mother
person.1
p1.x
p1.y
p2.x
p2.y
shallow
deep
samepoint
1not
german
gleiche
auto
selbe
mutter
rectangles
rectangle
oriented
vertically
horizontally
corners
opposing
upper-left
corner
box.width
box.height
box.corner
box.corner.x
box.corner.y
composes
findcenter
growrect
dwidth
dheight
direction
bob.width
bob.height
bob.corner
bob.corner.x
bob.corner.y
moverect
coordinate
effects
duplicate
copy.copy
embedded
sufficient
confusing
deepcopy
copy.deepcopy
newbox
newbox.width
newbox.height
template
real
implemented
records
day
hours
seconds
time.hours
time.minutes
time.seconds
printtime
chronologically
pure
sections
addtime
modifiers
rough
sum.hours
t1.hours
t2.hours
sum.minutes
t1.minutes
t2.minutes
sum.seconds
t1.seconds
t2.seconds
currenttime
breadtime
breadmaker
currenttime.hours
currenttime.minutes
currenttime.seconds
breadtime.hours
breadtime.minutes
breadtime.seconds
donetime
sixty
carry
corrected
modifier
draft
deals
evidence
functional
prototype
versus
planning
reasonable
resort
compelling
tested
flaws
effective
lead
unreliable
planned
insight
three-digit
component
sixties
thirty-six
hundreds
effectively
suggests
converttoseconds
t.hours
t.minutes
t.seconds
maketime
convince
converting
dealing
abstract
intuition
investment
reliable
subtracting
duration
implement
borrowing
ironically
opportunities
opposed
carefully
approaches
single-digit
memorized
knowledge
algorithmic
lazy
cheated
tricks
trick
techniques
carrying
characteristics
intelligence
mechanical
opinion
embarrassing
school
literally
designing
central
conscious
hardest
algorithmically
understanding
receives
fruitless
majority
improving
unintelligent
object-oriented
terms
corresponds
operate
correspond
real-world
interact
concepts
conveys
connection
examination
motivation
transform
transformation
purely
simply
comfortable
currenttime.printtime
convoluted
active
agent
hey
agents
perspective
polite
shifting
responsibility
maintain
leave
self.seconds
self.minutes
self.hours
currenttime.increment
slightly
stays
time2
self.hour
time2.hour
self.minute
time2.minute
self.second
time2.second
donetime.after
done-time
current-time
upgrade
improved
overrides
fourth
initialization
init
underscores
__init__
revisited
naming
self.x
self.y
__str__
implicitly
invokes
defining
overloading
override
__add__
other.x
other.y
conveniently
sub
overloads
mul
rmul
assumes
linear
polymorphism
__mul__
primitive
scalar
__rmul__
attributeerror
opaque
difficulties
appendix
multadd
multiplies
polymorphic
frontandback
forward
front
back.reverse
reversing
mylist
surprising
rule
unintentional
discover
inheritance
providing
extending
card1
card
diamonds
suitlist
card2
card2.suitlist
affects
swirly
whales
card1.suitlist
cards
cmp
unordered
playing
partially
clubs
rank
suit
comparable
honest
sake
choosing
deck
sorted
decided
decks
__cmp__
suits
self.suit
other.suit
ranks
self.rank
other.rank
tie
ordering
aces
deuces
ranked
kings
fifty-two
self.cards
self.cards.append
populate
enumerates
iterates
thirteen
appends
printdeck
ellipsis
flexible
pizzazz
arranges
cascade
indent
accumulator
initially
shuffling
ace
queen
shuffled
shuffle
randrange
chooses
guaranteed
random.randrange
randomly
swapped
precluded
ncards
actual
selected
removecard
self.cards.remove
pop
popcard
self.cards.pop
isempty
constructing
mapping
accessible
accumulate
concatenating
primary
inherits
parent
child
subclass
customize
reflects
relevant
scattered
elegantly
lend
harm
plays
game
maid
goals
hands
poker
straight
flush
bridge
score
bid
situation
identifies
player
holds
self.name
addcard
self,card
requirements
nhands
self.isempty
self.popcard
hand.addcard
dealt
ncards-1
robin
wraps
inherited
deck.shuffle
frank
deck.deal
spades
hearts
makings
inherit
deck.__str__
cardgame
chores
self.deck
self.deck.shuffle
initializing
simulation
rid
color
matches
black
red
fifty-one
players
discard
play
closest
neighbor
leaving
loser
nuances
prominently
failing
oldmaidhand
abilities
removematches
originalcards
card.suit
card.rank
self.name,card,match
club
spade
diamond
heart
satisfy
game.deck.deal
oldmaidgame
hand.removematches
attention
self.deck.removecard
0,12
self.hands
self.hands.append
self.deck.deal
self.printhands
self.removeallmatches
discarded
matched
numhands
self.playoneturn
removeallmatches
printhands
twenty-five
playoneturn
.isempty
self.findneighbor
pickedcard
.popcard
.addcard
.name
picked
.removematches
.shuffle
findneighbor
1,numhands
detected
truncated
fifteen
tens
cards.oldmaidgame
game.play
allen,jeff,chris
allen
jeff
loses
inheriting
linked
nodes
node
unit
cargo
mechanism
self.cargo
self.next
link
node1
node2
node3
node1.next
node2.next
collections
assemble
serves
printlist
node.next
succession
backwards
printbackward
list.next
limitation
list-manipulating
clean
infinitely
problematic
hypothetical
precondition
imposes
constraint
describes
raised
eyebrow
roles
role
intend
disambiguate
inherent
reorder
wrappers
helpers
removesecond
first.next
second.next
singleton
violation
printbackwardnicely
behalf
wrapper
helper
linkedlist
subtle
implementing
reversal
propose
serve
manipulating
self.length
self.head
nice
self.head.printbackward
invariants
tail.printbackward
renamed
benefit
addfirst
linkedlists
puts
formed
requirement
ideally
integrity
violated
invariant
acceptable
violating
violates
restore
stretch
implements
assertion
middleman
stacks
concrete
discussed
adt
simplifies
well-known
adts
libraries
client
provider
interface
initialize
push
lifo
self.items
self.items.append
pushing
popping
self.items.pop
homonymous1
invocations
veneer
life
thin
coating
wood
furniture-making
hide
underneath
hides
generic
pushes
s.push
s.isempty
s.pop
granted
remarkably
same-named
postfix
infix
term
individual
regular
splits
re.split
a-z
0-9
phantom
parser
evaluator
evalpostfix
expr
tokenlist
stack.pop
stack.push
erroneous
clients
providers
interests
writes
worry
accord
specification
conversely
luxury
exclusively
moment
satisfies
person
transformations
standardizes
grammatical
queues
presents
queue
priority
customers
service
customer
served
airports
flights
supermarkets
queueing
policy
fifo
first-in-first-out
arrival
flight
leaves
groceries
policies
fair
fairness
eye
beholder
insert
last.next
self.head.cargo
self.head.next
removefirst
performance
tack
properly
concerned
detail
suggesting
skips
proportional
compared
maintains
improvedqueue
self.last
pay
achieved
necessarily
priorities
bowling
scores
lowest
golf
priorityqueue
veneers
maxi
1,len
biggest
champion
q.insert
q.isempty
q.remove
golfer
unusual
golfers
self.score
-16s
neat
other.score
tiger
woods
phil
mickelson
hal
sutton
pq.insert
pq.isempty
pq.remove
removal
arrive
determined
external
factors
defines
trees
tree
binary
null
subtrees
cluttering
picture
nones
tips
strangest
mix
family
children
siblings
metaphors
builds
self.left
self.right
build
allocate
tree.left
tree.right
tree.cargo
notations
leaf
prefix
optimize
printtree
subtree
preorder
suspect
printtreepostorder
postorder
inorder
printtreeinorder
complication
preserve
improvements
printtreeindented
sideways
simplified
tokenized
preventing
gettoken
getnumber
getproduct
products
succeeds
implies
feel
sums
basis
getsum
subexpressions
subexpression
handled
descriptive
handling
well-formed
missing
improperly
animal
interacts
bird
animals
dog
fly
bark
dialog
asks
quits
walk
tree.getleft
tree.getcargo
tree.getright
animal,guess
tree.setcargo
tree.setleft
tree.setright
ques
ans
walks
guided
responses
shortcoming
forgets
taught
dependent
bottom-most
equidistant
visiting
appearing
