left child::19.0
binary search tree::17.4345875079
avl tree::15.0
right child::14.0
height balance::12.0
original height::11.0
order log::9.0
larger height::9.0
find the first::7.92481250361
height of node::7.92481250361
deleting a leaf::7.92481250361
nodes whose height::7.92481250361
right subtree::7.0
height imbalance::7.0
height h minus::6.33985000288
height balanced::6.0
first node::6.0
single rotation::6.0
height imbalanced::5.0
double rotation::5.0
search tree::5.0
middle key::5.0
first place::5.0
subtree rooted::5.0
ended up making::4.75488750216
increase in height::4.75488750216
deleting a node::4.75488750216
insertion and deletion::4.75488750216
put the key::4.75488750216
difference of height::4.75488750216
first unbalanced node::4.75488750216
two h minus::4.75488750216
node had height::4.75488750216
node i deleted::3.16992500144
four has height::3.16992500144
find the node::3.16992500144
making the root::3.16992500144
means the height::3.16992500144
rebalance this tree::3.16992500144
balanced after insertion::3.16992500144
repeat the argument::3.16992500144
nodes whose heights::3.16992500144
increased because height::3.16992500144
repeating the argument::3.16992500144
deleting a parent::3.16992500144
height balance property::3.16992500144
delete the node::3.16992500144
total time require::3.16992500144
balanced no difference::3.16992500144
right so thing::3.16992500144
search tree properties::3.16992500144
delete a node::3.16992500144
increased and height::3.16992500144
pick the left::3.16992500144
tree the difference::3.16992500144
difference in heights::3.16992500144
repeat the rotation::3.16992500144
find the success::3.16992500144
four different cases::3.16992500144
tree to find::3.16992500144
height could change::3.16992500144
insert the node::3.16992500144
spent log::3.0
symmetric case::3.0
avl trees::3.0
last class::3.0
left subtree::3.0
actual node::3.0
successor node::3.0
final tree::2.0
valid question::2.0
huge tree::2.0
entire thing::2.0
balanced height::2.0
insertion happened::2.0
imbalanced right::2.0
imbalance occurs::2.0
leaf node::2.0
double rotations::2.0
lets call::2.0
previous rotation::2.0
original tree::2.0
increasing height::2.0
larger smaller larger::1.58496250072
happened the original::1.58496250072
pick the right::1.58496250072
node its subtree::1.58496250072
shown the link::1.58496250072
right so whats::1.58496250072
problem of height::1.58496250072
kind of argument::1.58496250072
require a proof::1.58496250072
done a rotation::1.58496250072
sort the double::1.58496250072
number of operations::1.58496250072
doing the rotation::1.58496250072
tree has height::1.58496250072
root the middle::1.58496250072
height might change::1.58496250072
started the discussion::1.58496250072
height might increase::1.58496250072
rebalance this subtree::1.58496250072
picture you don::1.58496250072
change and change::1.58496250072
organizing the binary::1.58496250072
drawn the links::1.58496250072
rotation take constant::1.58496250072
nodes and tress::1.58496250072
property of binary::1.58496250072
started this discussion::1.58496250072
seventy eight eighty::1.58496250072
node height imbalanced::1.58496250072
order time deletion::1.58496250072
node v travel::1.58496250072
make that argument::1.58496250072
right you understand::1.58496250072
nodes but organized::1.58496250072
forget these links::1.58496250072
done some local::1.58496250072
minus one lets::1.58496250072
piece will remain::1.58496250072
node is changed::1.58496250072
locally re organizing::1.58496250072
grandchild means parent::1.58496250072
done single rotation::1.58496250072
heights are changed::1.58496250072
two step rotation::1.58496250072
lets just forget::1.58496250072
height balanced picture::1.58496250072
originally not balanced::1.58496250072
nodes so note::1.58496250072
dead the rotation::1.58496250072
occurs the first::1.58496250072
four different reference::1.58496250072
forty eight fifty::1.58496250072
make any difference::1.58496250072
taking a constant::1.58496250072
properties still holds::1.58496250072
balanced picture height::1.58496250072
argue that height::1.58496250072
right we ended::1.58496250072
last two slides::1.58496250072
whats a problem::1.58496250072
four has reduced::1.58496250072
perform it rotation::1.58496250072
height and height::1.58496250072
grandchild the grandchild::1.58496250072
two this node::1.58496250072
process of insertion::1.58496250072
rotation do rotation::1.58496250072
rotation we ended::1.58496250072
insert and delete::1.58496250072
checking the parent::1.58496250072
rotation and stuff::1.58496250072
parent sorry childs::1.58496250072
two has height::1.58496250072
height is reduced::1.58496250072
define the height::1.58496250072
insertion basically requires::1.58496250072
two now lets::1.58496250072
picture height balanced::1.58496250072
four i started::1.58496250072
out these links::1.58496250072
smaller larger smaller::1.58496250072
inserted and dead::1.58496250072
insertion we spent::1.58496250072
make this kind::1.58496250072
root the root::1.58496250072
number of rotations::1.58496250072
heights the height::1.58496250072
ways to rotate::1.58496250072
child so child::1.58496250072
symmetric lets assume::1.58496250072
lets compute heights::1.58496250072
problem height problem::1.58496250072
doing this thing::1.58496250072
changed as result::1.58496250072
balanced okay good::1.58496250072
doing a rotation::1.58496250072
tree i found::1.58496250072
links okay lets::1.58496250072
identified which hadn::1.58496250072
subtree the difference::1.58496250072
log n order::1.58496250072
happened what happened::1.58496250072
solve your problem::1.58496250072
device the child::1.58496250072
means this node::1.58496250072
tree i don::1.58496250072
properties are maintained::1.58496250072
find the place::1.58496250072
insert why log::1.58496250072
height balance problem::1.58496250072
remain the right::1.58496250072
takes a log::1.58496250072
height imbalance means::1.58496250072
log n rotations::1.58496250072
search and delete::1.58496250072
rotation that rotation::1.58496250072
reduce its size::1.58496250072
single and double::1.58496250072
switch is loyalties::1.58496250072
heights h minus::1.58496250072
tree no node::1.58496250072
satisfy the height::1.58496250072
minus three kind::1.58496250072
satisfied by checking::1.58496250072
mine the previous::1.58496250072
remain an avl::1.58496250072
imbalance or unbalanced::1.58496250072
node to recall::1.58496250072
right of subtree::1.58496250072
minus one height::1.58496250072
bit more work::1.58496250072
subtree this subtree::1.58496250072
two because height::1.58496250072
continue on discussion::1.58496250072
imbalance happens lets::1.58496250072
leaf and copying::1.58496250072
ended up doing::1.58496250072
split the thing::1.58496250072
sixty two seventy::1.58496250072
height balanced height::1.58496250072
rotations are done::1.58496250072
height we argued::1.58496250072
balance problem height::1.58496250072
call the define::1.58496250072
node and deleted::1.58496250072
single rotation case::1.58496250072
two so height::1.58496250072
put the links::1.58496250072
middle key ended::1.58496250072
place you put::1.58496250072
height has reduced::1.58496250072
height problem means::1.58496250072
happening you understand::1.58496250072
question here asked::1.58496250072
first you find::1.58496250072
bigger thing height::1.58496250072
unbalanced and repeat::1.58496250072
insert a node::1.58496250072
height imbalanced height::1.58496250072
right so height::1.58496250072
grandchild which grandchild::1.58496250072
performing the rotation::1.58496250072
node their height::1.58496250072
property is violated::1.58496250072
suppose the insertion::1.58496250072
today is understand::1.58496250072
reach the root::1.58496250072
whats a process::1.58496250072
increasing in height::1.58496250072
done i don::1.58496250072
requires only order::1.58496250072
identify the node::1.58496250072
happen the ancestors::1.58496250072
leaf or parent::1.58496250072
deletion in avl::1.58496250072
lets first understand::1.58496250072
solve the problem::1.58496250072
imbalanced because original::1.58496250072
understand this process::1.58496250072
picked it pick::1.58496250072
restore the balance::1.58496250072
insertion it doesn::1.58496250072
grandparent is unbalanced::1.58496250072
heights could change::1.58496250072
tree and node::1.58496250072
thing is happened::1.58496250072
node is deleting::1.58496250072
height balanced properties::1.58496250072
imbalanced height imbalance::1.58496250072
fifty no difference::1.58496250072
rotation the remains::1.58496250072
cases the node::1.58496250072
recap you understand::1.58496250072
path would change::1.58496250072
case of insertion::1.58496250072
deleted the successor::1.58496250072
deleting the node::1.58496250072
occurs having found::1.58496250072
find the successor::1.58496250072
subtree has changed::1.58496250072
node i copied::1.58496250072
unbalanced node encountered::1.58496250072
discussion on avl::1.58496250072
node i identified::1.58496250072
total time required::1.58496250072
two the fact::1.58496250072
rotation to restore::1.58496250072
minus one right::1.58496250072
rotation of mine::1.58496250072
imbalanced that happened::1.58496250072
subtree subtree rooted::1.58496250072
height could reduce::1.58496250072
happen x moves::1.58496250072
discussion on insertion::1.58496250072
imbalanced the height::1.58496250072
delete the successor::1.58496250072
uniformly the heights::1.58496250072
right so final::1.58496250072
rotations only taking::1.58496250072
node the difference::1.58496250072
kind of split::1.58496250072
tree which means::1.58496250072
path whose height::1.58496250072
changed the height::1.58496250072
right and height::1.58496250072
deleting is leaf::1.58496250072
height as reduced::1.58496250072
deletion um recall::1.58496250072
continue the argument::1.58496250072
operations of insert::1.58496250072
height of subtree::1.58496250072
height imbalanced happening::1.58496250072
tree so fifty::1.58496250072
case after rotation::1.58496250072
ended up deleting::1.58496250072
log n deletion::1.58496250072
recall that insertion::1.58496250072
restore height balance::1.58496250072
height imbalance happening::1.58496250072
four different ways::1.58496250072
happened is final::1.58496250072
constant number independent::1.58496250072
copied the content::1.58496250072
continue this argument::1.58496250072
key we ended::1.58496250072
height has increased::1.58496250072
double rotation step::1.58496250072
fifty four sixty::1.58496250072
log n height::1.58496250072
end up deleting::1.58496250072
successor swap contents::1.58496250072
right the reason::1.58496250072
entire delete operation::1.58496250072
hand also requires::1.58496250072
copying the content::1.58496250072
stop after doing::1.58496250072
happened here earlier::1.58496250072
rotation the height::1.58496250072
remains the left::1.58496250072
kind of rotation::1.58496250072
height here imbalance::1.58496250072
two right lets::1.58496250072
earlier this node::1.58496250072
unbalanced so lets::1.58496250072
done the job::1.58496250072
rotation so first::1.58496250072
proportional to height::1.58496250072
minus one good::1.58496250072
two as left::1.58496250072
means one left::1.58496250072
avoid the clutter::1.58496250072
basically requires order::1.58496250072
moving one level::1.58496250072
pin the parent::1.58496250072
thing the height::1.58496250072
denote the height::1.58496250072
spend order log::1.58496250072
rotation you don::1.58496250072
child sub tress::1.58496250072
requires order log::1.58496250072
decreased the height::1.58496250072
step so first::1.58496250072
insert a key::1.58496250072
number of nodes::1.58496250072
recalls will remain::1.58496250072
right lets continue::1.58496250072
thing we argued::1.58496250072
higher larger height::1.58496250072
remains the right::1.58496250072
deleting the leaf::1.58496250072
done in log::1.58496250072
pick the root::1.58496250072
nodes height::1.0
right difference::1.0
insertion process::1.0
original subtree::1.0
remember lets::1.0
good question::1.0
binary tree::1.0
unbalanced node::1.0
imbalanced imbalance::1.0
rotation height::1.0
large tree::1.0
guy decreased::1.0
first part::1.0
first thing::1.0
height remains::1.0
deletion procedure::1.0
parent pointer::1.0
higher level::1.0
local reorganization::1.0
constant number::1.0
reduce right::1.0
system rotation::1.0
imbalanced fifty::1.0
rotate node::1.0
wrong statement::1.0
height moves::1.0
rotation step::1.0
delete delete::1.0
subtree remains::1.0
essentially travel::1.0
childs child::1.0
means height::1.0
unbalanced repeat::1.0
process today::1.0
implies height::1.0
correct right::1.0
final thing::1.0
performer rotation::1.0
big piece::1.0
bigger tree::1.0
larger smaller::1.0
key right::1.0
previous case::1.0
ancestors ancestors::1.0
link counter::1.0
smallest right::1.0
lets lets::1.0
slow motion::1.0
lets understand::1.0
imbalanced node::1.0
end today::1.0
interesting thing::1.0
heights reduced::1.0
ancestor nodes::1.0
middle child::1.0
nodes forty::1.0
quick recap::1.0
balanced picture::1.0
increased implies::1.0
insert search::1.0
case height::1.0
rotations put::1.0
null tree::1.0
fifty fifty::1.0
left find::1.0
childs::0.0
forget::0.0
pardon::0.0
child::0.0
swap contents::0.0
higher::0.0
grandparent::0.0
children::0.0
marching::0.0
content::0.0
lets assume::0.0
graph::0.0
swap::0.0
nodes::0.0
takes::0.0
wave::0.0
problem height::0.0
difference::0.0
minute::0.0
four::0.0
height problem::0.0
large::0.0
balanced properties::0.0
quick::0.0
spent::0.0
deleting::0.0
straight::0.0
smaller::0.0
traveling::0.0
insertion::0.0
follow::0.0
sub::0.0
satisfy::0.0
lef::0.0
balance property::0.0
successor swap::0.0
path::0.0
change::0.0
property::0.0
increasing::0.0
changed::0.0
grandchild::0.0
encountered::0.0
order::0.0
kind::0.0
number independent::0.0
links::0.0
give::0.0
two::0.0
call::0.0
today::0.0
sort::0.0
started::0.0
relationships::0.0
cases::0.0
middle::0.0
recall::0.0
originally::0.0
work::0.0
remain::0.0
values::0.0
making::0.0
root::0.0
proof::0.0
performer::0.0
process::0.0
organized::0.0
subtrees::0.0
huge::0.0
answer::0.0
end::0.0
thing::0.0
discussion::0.0
holds::0.0
write::0.0
ancestor::0.0
rebalance::0.0
node encountered::0.0
means parent::0.0
wrong::0.0
coming::0.0
remember::0.0
counter::0.0
switch::0.0
travel::0.0
tree properties::0.0
hadn::0.0
ended::0.0
argued::0.0
pointer::0.0
rooted::0.0
interesting::0.0
culprit::0.0
differently::0.0
total::0.0
decreased::0.0
imbalance::0.0
defining::0.0
youe::0.0
happened::0.0
eventually::0.0
return::0.0
entire::0.0
largest::0.0
recap::0.0
rotation::0.0
successor::0.0
level::0.0
sufficiently::0.0
found::0.0
loyalties::0.0
independent::0.0
doing::0.0
replay::0.0
happen::0.0
forty::0.0
increase::0.0
stuff::0.0
correct::0.0
occurs::0.0
earlier::0.0
written::0.0
eighty::0.0
put::0.0
seventy::0.0
care::0.0
times::0.0
motion::0.0
restore height::0.0
place::0.0
consequence::0.0
top::0.0
first::0.0
student::0.0
number::0.0
system::0.0
done::0.0
size::0.0
entire delete::0.0
heights::0.0
tol::0.0
final::0.0
statement::0.0
grandchildren::0.0
larger::0.0
copy::0.0
television::0.0
reason::0.0
travels::0.0
minus::0.0
result::0.0
picked::0.0
basically::0.0
mind::0.0
argument::0.0
roughly::0.0
manner::0.0
null::0.0
contents::0.0
unbalanced::0.0
note::0.0
begin::0.0
node::0.0
reach::0.0
pair::0.0
child sub::0.0
inserted::0.0
slides::0.0
don::0.0
compute heights::0.0
clear::0.0
flow::0.0
counted::0.0
ways::0.0
rotation case::0.0
link::0.0
requires order::0.0
left::0.0
fact::0.0
operations::0.0
walking::0.0
right lets::0.0
show::0.0
fifty::0.0
step rotation::0.0
find::0.0
symmetric::0.0
slow::0.0
local::0.0
move::0.0
handle::0.0
means::0.0
stop::0.0
trees::0.0
satisfied::0.0
copying::0.0
first understand::0.0
double::0.0
require::0.0
remains::0.0
guys::0.0
reference::0.0
tree::0.0
violated::0.0
pictures::0.0
bigger thing::0.0
smallest::0.0
drawn::0.0
node height::0.0
parent::0.0
job::0.0
key::0.0
essentially::0.0
piece::0.0
last::0.0
repeating::0.0
balance problem::0.0
ignore::0.0
symmetric lets::0.0
argue::0.0
simple::0.0
height::0.0
maintained::0.0
trust::0.0
locally::0.0
lets::0.0
quickly::0.0
sub tress::0.0
hindi::0.0
copied::0.0
bit::0.0
search::0.0
mine::0.0
case::0.0
leave::0.0
suppose::0.0
situation::0.0
balance::0.0
procedure::0.0
tress::0.0
avl::0.0
good::0.0
clutter::0.0
higher larger::0.0
worry::0.0
binary::0.0
perform::0.0
things::0.0
make::0.0
imbalance means::0.0
split::0.0
deletion::0.0
big::0.0
keys::0.0
pick::0.0
hand::0.0
running::0.0
moving::0.0
subtree::0.0
asked::0.0
solve::0.0
binary search::0.0
spend::0.0
subtree subtree::0.0
restore::0.0
identify::0.0
questions::0.0
previous::0.0
adding::0.0
point::0.0
add::0.0
bigger::0.0
increased::0.0
insert::0.0
checking::0.0
delete operation::0.0
finding::0.0
unbalance::0.0
taking::0.0
part::0.0
thing height::0.0
rotate::0.0
success::0.0
performing::0.0
continue::0.0
completely::0.0
reduced::0.0
right::0.0
imbalance happening::0.0
imbalanced height::0.0
recalls::0.0
back::0.0
dead::0.0
identified::0.0
choosing::0.0
organizing::0.0
leaf::0.0
avoid::0.0
assuming::0.0
noise::0.0
deleted::0.0
uniformly::0.0
continuing::0.0
clearer::0.0
step::0.0
relationship::0.0
sixty::0.0
properties::0.0
actual::0.0
face::0.0
slightly::0.0
whats::0.0
initially::0.0
rotations::0.0
device::0.0
balanced::0.0
proportional::0.0
problem means::0.0
log::0.0
strictly::0.0
question::0.0
class::0.0
start::0.0
reduce::0.0
implies::0.0
line::0.0
happening::0.0
compute::0.0
understood::0.0
assume::0.0
grandchild means::0.0
key ended::0.0
imbalanced::0.0
problem::0.0
define::0.0
similar::0.0
delete::0.0
required::0.0
constant::0.0
pin::0.0
moved::0.0
doesn::0.0
denote::0.0
single::0.0
guy::0.0
moves::0.0
operation::0.0
ancestors::0.0
valid::0.0
out::0.0
picture::0.0
draw::0.0
repeat::0.0
shown::0.0
important::0.0
reorganization::0.0
spend order::0.0
picture height::0.0
principle::0.0
lets continue::0.0
understand::0.0
requires::0.0
original::0.0
restored::0.0
smaller larger::0.0
