the basic java application a program is a sequence of instructions that a computer can execute to perform some  online  task a simple enough idea  but for the computer to make any use of the instructions  they must be written in a form that the computer can use this means that programs have to be written in programming languages programming languages differ from ordinary human languages in being completely unambiguous and very strict about what is and is not allowed in a program the rules that determine what is allowed are called the syntax of the language syntax rules specify the basic vocabulary of the language and how programs can be constructed using things like loops  branches  and subroutines a syntactically correct program is one that 18 chapter  names and things 19 can be successfully compiled or interpreted ; programs that have syntax errors will be rejected  hopefully with a useful error message that will help you fix the problem   so  to be a successful programmer  you have to develop a detailed knowledge of the syntax of the programming language that you are using however  syntax is only part of the story it s not enough to write a program that will run you want a program that will run and produce the correct result ! that is  the meaning of the program has to be right the meaning of a program is referred to as its semantics a semantically correct program is one that does what you want it to furthermore  a program can be syntactically and semantically correct but still be a pretty bad program using the language correctly is not the same as using it well for example  a good program has style it is written in a way that will make it easy for people to read and to understand it follows conventions that will be familiar to other programmers and it has an overall design that will make sense to human readers the computer is completely oblivious to such things  but to a human reader  they are paramount these aspects of programming are sometimes referred to as pragmatics when i introduce a new language feature  i will explain the syntax  the semantics  and some of the pragmatics of that feature you should memorize the syntax ; that s the easy part then you should get a feeling for the semantics by following the examples given  making sure that you understand how they work  and maybe writing short programs of your own to test your understanding and you should try to appreciate and absorb the pragmatics this means learning how to use the language feature well  with style that will earn you the admiration of other programmers of course  even when you ve become familiar with all the individual features of the language  that doesn t make you a programmer you still have to learn how to construct complex programs to solve particular problems for that  you ll need both experience and taste you ll find hints about software development throughout this textbook we begin our exploration of java with the problem that has become traditional for such beginnings  to write a program that displays the message hello world !  this might seem like a trivial problem  but getting a computer to do this is really a big first step in learning a new programming language  especially if it s your first programming language   it means that you understand the basic process of   getting the program text into the computer   compiling the program  and 3 running the compiled program the first time through  each of these steps will probably take you a few tries to get right i won t go into the details here of how you do each of these steps ; it depends on the particular computer and java programming environment that you are using see section .6 for information about creating and running java programs in specific programming environments but in general  you will type the program using some sort of text editor and save the program in a file then  you will use some command to try to compile the file you ll either get a message that the program contains syntax errors  or you ll get a compiled version of the program in the case of java  the program is compiled into java bytecode  not into machine language finally  you can run the compiled program by giving some appropriate command for java  you will actually use an interpreter to execute the java bytecode your programming environment chapter  names and things 20 might automate some of the steps for you  but you can be sure that the same three steps are being done in the background here is a java program to display the message hello world !  don t expect to understand what s going on here just yet some of it you won t really understand until a few chapters from now  // a program to display the message // hello world ! on standard output public class helloworld  public static void main  string   args   system.out.println  hello world !  ;   // end of class helloworld the command that actually displays the message is  system.out.println  hello world !  ; this command is an example of a subroutine call statement it uses a built-in subroutine named system.out.println to do the actual work recall that a subroutine consists of the instructions for performing some task  chunked together and given a name that name can be used to call the subroutine whenever that task needs to be performed a built-in subroutine is one that is already defined as part of the language and therefore automatically available for use in any program when you run this program  the message hello world !  without the quotes  will be displayed on standard output unfortunately  i can t say exactly what that means ! java is meant to run on many different platforms  and standard output will mean different things on different platforms however  you can expect the message to show up in some convenient place  if you use a command-line interface  like that in sun microsystem s java development kit  you type in a command to tell the computer to run the program the computer will type the output from the program  hello world !  on the next line  you must be curious about all the other stuff in the above program part of it consists of comments comments in a program are entirely ignored by the computer ; they are there for human readers only this doesn t mean that they are unimportant programs are meant to be read by people as well as by computers  and without comments  a program can be very difficult to understand java has two types of comments the first type  used in the above program  begins with // and extends to the end of a line the computer ignores the // and everything that follows it on the same line java has another style of comment that can extend over many lines that type of comment begins with / and ends with / everything else in the program is required by the rules of java syntax all programming in java is done inside classes the first line in the above program  not counting the comments  says that this is a class named helloworld helloworld  the name of the class  also serves as the name of the program not every class is a program in order to define a program  a class must include a subroutine named main  with a definition that takes the form  public static void main  string   args   hstatements i  when you tell the java interpreter to run the program  the interpreter calls the main   subroutine  and the statements that it contains are executed these statements make up the chapter  names and things 21 script that tells the computer exactly what to do when the program is executed the main   routine can call subroutines that are defined in the same class or even in other classes  but it is the main   routine that determines how and in what order the other subroutines are used the word public in the first line of main   means that this routine can be called from outside the program this is essential because the main   routine is called by the java interpreter  which is something external to the program itself the remainder of the first line of the routine is harder to explain at the moment ; for now  just think of it as part of the required syntax the definition of the subroutine that is  the instructions that say what it does consists of the sequence of statements enclosed between braces   and   here  i ve used hstatementsi as a placeholder for the actual statements that make up the program throughout this textbook  i will always use a similar format  anything that you see in hthis style of texti  italic in angle brackets  is a placeholder that describes something you need to type when you write an actual program as noted above  a subroutine can t exist by itself it has to be part of a class  a program is defined by a public class that takes the form  public class hprogram-namei  hoptional-variable-declarations-and-subroutinesi public static void main  string   args   hstatementsi  hoptional-variable-declarations-and-subroutinesi  the name on the first line is the name of the program  as well as the name of the class if the name of the class is helloworld  then the class must be saved in a file called helloworld.java when this file is compiled  another file named helloworld.class will be produced this class file  helloworld.class  contains the java bytecode that is executed by a java interpreter helloworld.java is called the source code for the program to execute the program  you only need the compiled class file  not the source code the layout of the program on the page  such as the use of blank lines and indentation  is not part of the syntax or semantics of the language the computer doesn t care about layout you could run the entire program together on one line as far as it is concerned however  layout is important to human readers  and there are certain style guidelines for layout that are followed by most programmers these style guidelines are part of the pragmatics of the java programming language also note that according to the above syntax specification  a program can contain other subroutines besides main    as well as things called variable declarations you ll learn more about these later  but not until chapter 4 .2 variables and the primitive types names are fundamental to programming in programs  names are used to refer to many  online  different sorts of things in order to use those things  a programmer must understand the rules for giving names to things and the rules for using the names to work with those things that is  the programmer must understand the syntax and the semantics of names chapter  names and things 22 according to the syntax rules of java  a name is a sequence of one or more characters it must begin with a letter or underscore and must consist entirely of letters  digits  and underscores  underscore refers to the character   for example  here are some legal names  n n rate x15 quite a long name helloworld no spaces are allowed in identifiers ; helloworld is a legal identifier  but hello world is not upper case and lower case letters are considered to be different  so that helloworld  helloworld  helloworld  and helloworld are all distinct names certain names are reserved for special uses in java  and can not be used by the programmer for other purposes these reserved words include  class  public  static  if  else  while  and several dozen other words java is actually pretty liberal about what counts as a letter or a digit java uses the unicode character set  which includes thousands of characters from many different languages and different alphabets  and many of these characters count as letters or digits however  i will be sticking to what can be typed on a regular english keyboard the pragmatics of naming includes style guidelines about how to choose names for things for example  it is customary for names of classes to begin with upper case letters  while names of variables and of subroutines begin with lower case letters ; you can avoid a lot of confusion by following the same convention in your own programs most java programmers do not use underscores in names  although some do use them at the beginning of the names of certain kinds of variables when a name is made up of several words  such as helloworld or interestrate  it is customary to capitalize each word  except possibly the first ; this is sometimes referred to as camel case  since the upper case letters in the middle of a name are supposed to look something like the humps on a camel s back finally  i ll note that things are often referred to by compound names which consist of several ordinary names separated by periods  compound names are also called qualified names  you ve already seen an example  system.out.println the idea here is that things in java can contain other things a compound name is a kind of path to an item through one or more levels of containment the name system.out.println indicates that something called system contains something called out which in turn contains something called println  non-compound names are called simple identifiers i ll use the term identifier to refer to any name simple or compound that can be used to refer to something in java  note that the reserved words are not identifiers  since they can t be used as names for things   variables programs manipulate data that are stored in memory in machine language  data can only be referred to by giving the numerical address of the location in memory where it is stored in a high-level language such as java  names are used instead of numbers to refer to data it is the job of the computer to keep track of where in memory the data is actually stored ; the programmer only has to remember the name a name used in this way to refer to data stored in memory is called a variable variables are actually rather subtle properly speaking  a variable is not a name for the data itself but for a location in memory that can hold data you should think of a variable as a container or box where you can store data that you will need to use later the variable refers directly to the box and only indirectly to the data in the box since the data in the box can change  a variable can refer to different data values at different times during the execution of the program  but it always refers to the same box confusion can arise  especially for beginning chapter  names and things 23 programmers  because when a variable is used in a program in certain ways  it refers to the container  but when it is used in other ways  it refers to the data in the container you ll see examples of both cases below  in this way  a variable is something like the title  the president of the united states this title can refer to different people at different times  but it always refers to the same office if i say the president is playing basketball  i mean that barack obama is playing basketball but if i say newt gingrich wants to be president i mean that he wants to fill the office  not that he wants to be barack obama  in java  the only way to get data into a variable that is  into the box that the variable names is with an assignment statement an assignment statement takes the form  hvariable i = hexpression i ; where hexpressioni represents anything that refers to or computes a data value when the computer comes to an assignment statement in the course of executing a program  it evaluates the expression and puts the resulting data value into the variable for example  consider the simple assignment statement rate = 0.07 ; the hvariablei in this assignment statement is rate  and the hexpressioni is the number 0.07 the computer executes this assignment statement by putting the number 0.07 in the variable rate  replacing whatever was there before now  consider the following more complicated assignment statement  which might come later in the same program  interest = rate principal ; here  the value of the expression rate principal is being assigned to the variable interest in the expression  the is a multiplication operator that tells the computer to multiply rate times principal the names rate and principal are themselves variables  and it is really the values stored in those variables that are to be multiplied we see that when a variable is used in an expression  it is the value stored in the variable that matters ; in this case  the variable seems to refer to the data in the box  rather than to the box itself when the computer executes this assignment statement  it takes the value of rate  multiplies it by the value of principal  and stores the answer in the box referred to by interest when a variable is used on the left-hand side of an assignment statement  it refers to the box that is named by the variable  note  by the way  that an assignment statement is a command that is executed by the computer at a certain time it is not a statement of fact for example  suppose a program includes the statement rate = 0.07 ;  if the statement interest = rate principal ; is executed later in the program  can we say that the principal is multiplied by 0.07 no ! the value of rate might have been changed in the meantime by another statement the meaning of an assignment statement is completely different from the meaning of an equation in mathematics  even though both use the symbol =   ..2 types and literals a variable in java is designed to hold only one particular type of data ; it can legally hold that type of data and no other the compiler will consider it to be a syntax error if you try to violate this rule we say that java is a strongly typed language because it enforces this rule there are eight so-called primitive types built into java the primitive types are named byte  short  int  long  float  double  char  and boolean the first four types hold integers chapter  names and things 24  whole numbers such as 17  -38477  and 0   the four integer types are distinguished by the ranges of integers they can hold the float and double types hold real numbers  such as 3.6 and -145.99   again  the two real types are distinguished by their range and accuracy a variable of type char holds a single character from the unicode character set and a variable of type boolean holds one of the two logical values true or false any data value stored in the computer s memory must be represented as a binary number  that is as a string of zeros and ones a single zero or one is called a bit a string of eight bits is called a byte memory is usually measured in terms of bytes not surprisingly  the byte data type refers to a single byte of memory a variable of type byte holds a string of eight bits  which can represent any of the integers between -128 and 127  inclusive  there are 256 integers in that range ; eight bits can represent 256 two raised to the power eight different values  as for the other integer types  short corresponds to two bytes  16 bits   variables of type short have values in the range -32768 to 32767 int corresponds to four bytes  32 bits   variables of type int have values in the range -2147483648 to 2147483647 long corresponds to eight bytes  64 bits   variables of type long have values in the range -9223372036854775808 to 9223372036854775807 you don t have to remember these numbers  but they do give you some idea of the size of integers that you can work with usually  you should just stick to the int data type  which is good enough for most purposes the float data type is represented in four bytes of memory  using a standard method for encoding real numbers the maximum value for a float is about 10 raised to the power 38 a float can have about 7 significant digits  so that 3.3989231134 and 3.3989234399 would both have to be rounded off to about 3.398923 in order to be stored in a variable of type float  a double takes up 8 bytes  can range up to about 10 to the power 308  and has about 15 significant digits ordinarily  you should stick to the double type for real values a variable of type char occupies two bytes in memory the value of a char variable is a single character such as a   x  or a space character the value can also be a special character such a tab or a carriage return or one of the many unicode characters that come from different languages when a character is typed into a program  it must be surrounded by single quotes ; for example  a   or x  without the quotes  a would be an identifier and would be a multiplication operator the quotes are not part of the value and are not stored in the variable ; they are just a convention for naming a particular character constant in a program a name for a constant value is called a literal a literal is what you have to type in a program to represent a value a and are literals of type char  representing the character values a and  certain special characters have special literals that use a backslash  \  as an escape character  in particular  a tab is represented as \ t  a carriage return as \ r  a linefeed as \ n  the single quote character as \  and the backslash itself as \ \  note that even though you type two characters between the quotes in \ t  the value represented by this literal is a single tab character numeric literals are a little more complicated than you might expect of course  there are the obvious literals such as 317 and 17.4 but there are other possibilities for expressing numbers in a java program first of all  real numbers can be represented in an exponential form such as .3e12 or .3737e-108 the e12 and e-108 represent powers of 10  so that .3e12 means .3 times 1012 and .3737e-108 means .3737 times 10 108 this format can chapter  names and things 25 be used to express very large and very small numbers any numerical literal that contains a decimal point or exponential is a literal of type double to make a literal of type float  you have to append an f or f to the end of the number for example  .2f stands for .2 considered as a value of type float  occasionally  you need to know this because the rules of java say that you can t assign a value of type double to a variable of type float  so you might be confronted with a ridiculous-seeming error message if you try to do something like x = .2 ; when x is a variable of type float you have to say x = .2f ;  this is one reason why i advise sticking to type double for real numbers  even for integer literals  there are some complications ordinary integers such as 177777 and -32 are literals of type byte  short  or int  depending on their size you can make a literal of type long by adding l as a suffix for example  17l or 728476874368l as another complication  java allows octal  base-8  and hexadecimal  base-16  literals i don t want to cover base-8 and base-16 in detail  but in case you run into them in other people s programs  it s worth knowing a few things  octal numbers use only the digits 0 through 7 in java  a numeric literal that begins with a 0 is interpreted as an octal number ; for example  the literal 045 represents the number 37  not the number 45 hexadecimal numbers use 16 digits  the usual digits 0 through 9 and the letters a  b  c  d  e  and f upper case and lower case letters can be used interchangeably in this context the letters represent the numbers 10 through 15 in java  a hexadecimal literal begins with 0x or 0x  as in 0x45 or 0xff7a hexadecimal numbers are also used in character literals to represent arbitrary unicode characters a unicode literal consists of \ u followed by four hexadecimal digits for example  the character literal \ u00e9 represents the unicode character that is an e with an acute accent for the type boolean  there are precisely two literals  true and false these literals are typed just as i ve written them here  without quotes  but they represent values  not variables boolean values occur most often as the values of conditional expressions for example  rate > 0.05 is a boolean-valued expression that evaluates to true if the value of the variable rate is greater than 0.05  and to false if the value of rate is not greater than 0.05 as you ll see in chapter 3  boolean-valued expressions are used extensively in control structures of course  boolean values can also be assigned to variables of type boolean java has other types in addition to the primitive types  but all the other types represent objects rather than primitive data values for the most part  we are not concerned with objects for the time being however  there is one predefined object type that is very important  the type string a string is a sequence of characters you ve already seen a string literal  hello world !  the double quotes are part of the literal ; they have to be typed in the program however  they are not part of the actual string value  which consists of just the characters between the quotes within a string  special characters can be represented using the backslash notation within this context  the double quote is itself a special character for example  to represent the string value i said  are you listening ! with a linefeed at the end  you would have to type the string literal  i said  \ are you listening ! \ \ n you can also use \ t  \ r  \ \  and unicode sequences such as \ u00e9 to represent other special characters in string literals because strings are objects  their behavior in programs is peculiar chapter  names and things 26 in some respects  to someone who is not used to objects   i ll have more to say about them in the next section ..3 variables in programs a variable can be used in a program only if it has first been declared a variable declaration statement is used to declare one or more variables and to give them names when the computer executes a variable declaration  it sets aside memory for the variable and associates the variable s name with that memory a simple variable declaration takes the form  htype-name i hvariable-name-or-namesi ; the hvariable-name-or-namesi can be a single variable name or a list of variable names separated by commas  we ll see later that variable declaration statements can actually be somewhat more complicated than this  good programming style is to declare only one variable in a declaration statement  unless the variables are closely related in some way for example  int numberofstudents ; string name ; double x  y ; boolean isfinished ; char firstinitial  middleinitial  lastinitial ; it is also good style to include a comment with each variable declaration to explain its purpose in the program  or to give other information that might be useful to a human reader for example  double principal ; // amount of money invested double interestrate ; // rate as a decimal  not percentage in this chapter  we will only use variables declared inside the main   subroutine of a program variables declared inside a subroutine are called local variables for that subroutine they exist only inside the subroutine  while it is running  and are completely inaccessible from outside variable declarations can occur anywhere inside the subroutine  as long as each variable is declared before it is used in any expression some people like to declare all the variables at the beginning of the subroutine others like to wait to declare a variable until it is needed my preference  declare important variables at the beginning of the subroutine  and use a comment to explain the purpose of each variable declare utility variables which are not important to the overall logic of the subroutine at the point in the subroutine where they are first used here is a simple program using some variables and assignment statements  / this class implements a simple program that will compute the amount of interest that is earned on $ 17,000 invested at an interest rate of 0.07 for one year the interest and the value of the investment after one year are printed to standard output / public class interest  public static void main  string   args   / declare the variables / chapter  names and things 27 double principal ; // the value of the investment double rate ; // the annual interest rate double interest ; // interest earned in one year / do the computations / principal = 17000 ; rate = 0.07 ; interest = principal rate ; // compute the interest principal = principal + interest ; // compute value of investment after one year  with interest //  note  the new value replaces the old value of principal  / output the results / system.out.print  the interest earned is $  ; system.out.println  interest  ; system.out.print  the value of the investment after one year is $  ; system.out.println  principal  ;  // end of main    // end of class interest this program uses several subroutine call statements to display information to the user of the program two different subroutines are used  system.out.print and system.out.println the difference between these is that system.out.println adds a linefeed after the end of the information that it displays  while system.out.print does not thus  the value of interest  which is displayed by the subroutine call system.out.println  interest  ;  follows on the same line after the string displayed by the previous system.out.print statement note that the value to be displayed by system.out.print or system.out.println is provided in parentheses after the subroutine name this value is called a parameter to the subroutine a parameter provides a subroutine with information it needs to perform its task in a subroutine call statement  any parameters are listed in parentheses after the subroutine name not all subroutines have parameters if there are no parameters in a subroutine call statement  the subroutine name must be followed by an empty pair of parentheses all the sample programs for this textbook are available in separate source code files in the on-line version of this text at http  //math.hws.edu/javanotes/source they are also included in the downloadable archives of the web site the source code for the interest program  for example  can be found in the file interest.java .3 strings  objects  enums  and subroutines the previous section introduced the eight primitive data types and the type string there  online  is a fundamental difference between the primitive types and the string type  values of type string are objects while we will not study objects in detail until chapter 5  it will be useful for you to know a little about them and about a closely related topic  classes this is not just because strings are useful but because objects and classes are essential to understanding another important programming concept  subroutines another reason for considering classes and objects at this point is so that we can introduce enums an enum is a data type that can be created by a java programmer to represent a small collection of possible values technically  an enum is a class and its possible values are chapter  names and things 28 objects enums will be our first example of adding a new type to the java language we will look at them later in this section .3.1 built-in subroutines and functions recall that a subroutine is a set of program instructions that have been chunked together and given a name in chapter 4  you ll learn how to write your own subroutines  but you can get a lot done in a program just by calling subroutines that have already been written for you in java  every subroutine is contained in a class or in an object some classes that are standard parts of the java language contain predefined subroutines that you can use a value of type string  which is an object  contains subroutines that can be used to manipulate that string these subroutines are built into the java language you can call all these subroutines without understanding how they were written or how they work indeed  that s the whole point of subroutines  a subroutine is a black box which can be used without knowing what goes on inside classes in java have two very different functions first of all  a class can group together variables and subroutines that are contained in that class these variables and subroutines are called static members of the class you ve seen one example  in a class that defines a program  the main   routine is a static member of the class the parts of a class definition that define static members are marked with the reserved word static  just like the main   routine of a program however  classes have a second function they are used to describe objects in this role  the class of an object specifies what subroutines and variables are contained in that object the class is a type in the technical sense of a specification of a certain type of data value and the object is a value of that type for example  string is actually the name of a class that is included as a standard part of the java language string is also a type  and literal strings such as hello world represent values of type string so  every subroutine is contained either in a class or in an object classes contain subroutines called static member subroutines classes also describe objects and the subroutines that are contained in those objects this dual use can be confusing  and in practice most classes are designed to perform primarily or exclusively in only one of the two possible roles for example  although the string class does contain a few rarely-used static member subroutines  it exists mainly to specify a large number of subroutines that are contained in objects of type string another standard class  named math  exists entirely to group together a number of static member subroutines that compute various common mathematical functions to begin to get a handle on all of this complexity  let s look at the subroutine system.out.print as an example as you have seen earlier in this chapter  this subroutine is used to display information to the user for example  system.out.print  hello world  displays the message  hello world system is one of java s standard classes one of the static member variables in this class is named out since this variable is contained in the class system  its full name which you have to use to refer to it in your programs is system.out the variable system.out refers to an object  and that object in turn contains a subroutine named print the compound identifier system.out.print refers to the subroutine print in the object out in the class system  as an aside  i will note that the object referred to by system.out is an object of the class printstream printstream is another class that is a standard part of java any object of chapter  names and things 29 type printstream is a destination to which information can be printed ; any object of type printstream has a print subroutine that can be used to send information to that destination the object system.out is just one possible destination  and system.out.print is the subroutine that sends information to that particular destination other objects of type printstream might send information to other destinations such as files or across a network to other computers this is object-oriented programming  many different things which have something in common they can all be used as destinations for information can all be used in the same way through a print subroutine the printstream class expresses the commonalities among all these objects  since class names and variable names are used in similar ways  it might be hard to tell which is which remember that all the built-in  predefined names in java follow the rule that class names begin with an upper case letter while variable names begin with a lower case letter while this is not a formal syntax rule  i recommend that you follow it in your own programming subroutine names should also begin with lower case letters there is no possibility of confusing a variable with a subroutine  since a subroutine name in a program is always followed by a left parenthesis  as one final general note  you should be aware that subroutines in java are often referred to as methods generally  the term method means a subroutine that is contained in a class or in an object since this is true of every subroutine in java  every subroutine in java is a method the same is not true for other programming languages nevertheless  the term method is mostly used in the context of object-oriented programming  and until we start doing real object-oriented programming in chapter 5  i will prefer to use the more general term  subroutine  classes can contain static member subroutines  as well as static member variables for example  the system class contains a subroutine named exit in a program  of course  this subroutine must be referred to as system.exit calling this subroutine will terminate the program you could use it if you had some reason to terminate the program before the end of the main routine for historical reasons  this subroutine takes an integer as a parameter  so the subroutine call statement might look like system.exit  0  ; or system.exit  1  ;   the parameter tells the computer why the program was terminated a parameter value of 0 indicates that the program ended normally any other value indicates that the program was terminated because an error was detected but in practice  the value of the parameter is usually ignored  every subroutine performs some specific task for some subroutines  that task is to compute or retrieve some data value subroutines of this type are called functions we say that a function returns a value the returned value must then be used somehow in the program you are familiar with the mathematical function that computes the square root of a number java has a corresponding function called math.sqrt this function is a static member subroutine of the class named math if x is any numerical value  then math.sqrt  x  computes and returns the square root of that value since math.sqrt  x  represents a value  it doesn t make sense to put it on a line by itself in a subroutine call statement such as math.sqrt  x  ; // this doesn t make sense ! what  after all  would the computer do with the value computed by the function in this case you have to tell the computer to do something with the value you might tell the computer to display it  chapter  names and things 30 system.out.print  math.sqrt  x   ; // display the square root of x or you might use an assignment statement to tell the computer to store that value in a variable  lengthofside = math.sqrt  x  ; the function call math.sqrt  x  represents a value of type double  and it can be used anyplace where a numeric literal of type double could be used the math class contains many static member functions here is a list of some of the more important of them  math.abs  x   which computes the absolute value of x the usual trigonometric functions  math.sin  x   math.cos  x   and math.tan  x    for all the trigonometric functions  angles are measured in radians  not degrees  the inverse trigonometric functions arcsin  arccos  and arctan  which are written as  math.asin  x   math.acos  x   and math.atan  x   the return value is expressed in radians  not degrees the exponential function math.exp  x  for computing the number e raised to the power x  and the natural logarithm function math.log  x  for computing the logarithm of x in the base e math.pow  x,y  for computing x raised to the power y math.floor  x   which rounds x down to the nearest integer value that is less than or equal to x even though the return value is mathematically an integer  it is returned as a value of type double  rather than of type int as you might expect for example  math.floor  3.76  is 3.0 the function math.round  x  returns the integer that is closest to x math.random    which returns a randomly chosen double in the range 0.0 < = math.random   < .0  the computer actually calculates so-called pseudorandom numbers  which are not truly random but are random enough for most purposes  for these functions  the type of the parameter the x or y inside the parentheses can be any value of any numeric type for most of the functions  the value returned by the function is of type double no matter what the type of the parameter however  for math.abs  x   the value returned will be the same type as x ; if x is of type int  then so is math.abs  x   so  for example  while math.sqrt  9  is the double value 3.0  math.abs  9  is the int value 9 note that math.random   does not have any parameter you still need the parentheses  even though there s nothing between them the parentheses let the computer know that this is a subroutine rather than a variable another example of a subroutine that has no parameters is the function system.currenttimemillis    from the system class when this function is executed  it retrieves the current time  expressed as the number of milliseconds that have passed since a standardized base time  the start of the year 1970 in greenwich mean time  if you care   one millisecond is one-thousandth of a second the return value of system.currenttimemillis   is of type long this function can be used to measure the time that it takes the computer to perform a task just record the time at which the task is begun and the time at which it is finished and take the difference here is a sample program that performs a few mathematical tasks and reports the time that it takes for the program to run on some computers  the time reported might be zero  because it is too small to measure in milliseconds even if it s not zero  you can be sure that most of the time reported by the computer was spent doing output or working on tasks other chapter  names and things 31 than the program  since the calculations performed in this program occupy only a tiny fraction of a second of a computer s time / this program performs some mathematical computations and displays the results it then reports the number of seconds that the computer spent on this task / public class timedcomputation  public static void main  string   args   long starttime ; // starting time of program  in milliseconds long endtime ; // time when computations are done  in milliseconds double time ; // time difference  in seconds starttime = system.currenttimemillis   ; double width  height  hypotenuse ; // sides of a triangle width = 4.0 ; height = 17.0 ; hypotenuse = math.sqrt  width width + height height  ; system.out.print  a triangle with sides 42 and 17 has hypotenuse  ; system.out.println  hypotenuse  ; system.out.println  \ nmathematically  sin  x  sin  x  + + cos  x  cos  x   1 should be 0  ; system.out.println  let s check this for x = 1   ; system.out.print  sin  1  sin  1  + cos  1  cos  1   1 is  ; system.out.println  math.sin  1  math.sin  1  + math.cos  1  math.cos  1   1  ; system.out.println   there can be round-off errors when + computing with real numbers !   ; system.out.print  \ nhere is a random number   ; system.out.println  math.random    ; endtime = system.currenttimemillis   ; time =  endtime  starttime  / 1000.0 ; system.out.print  \ nrun time in seconds was   ; system.out.println  time  ;  // end main    // end class timedcomputation .3.2 operations on strings a value of type string is an object that object contains data  namely the sequence of characters that make up the string it also contains subroutines all of these subroutines are in fact functions for example  every string object contains a function named length that computes the number of characters in that string suppose that advice is a variable that refers to a string for example  advice might have been declared and assigned a value as follows  string advice ; advice = seize the day ! ; chapter  names and things 32 then advice.length   is a function call that returns the number of characters in the string seize the day !  in this case  the return value would be 14 in general  for any string variable str  the value of str.length   is an int equal to the number of characters in the string that is the value of str note that this function has no parameter ; the particular string whose length is being computed is the value of str the length subroutine is defined by the class string  and it can be used with any value of type string it can even be used with string literals  which are  after all  just constant values of type string for example  you could have a program count the characters in hello world for you by saying system.out.print  the number of characters in  ; system.out.println  the string \ hello world \ is  ; system.out.println  hello world .length    ; the string class defines a lot of functions here are some that you might find useful assume that s1 and s2 refer to values of type string  s.equals  s2  is a function that returns a boolean value it returns true if s1 consists of exactly the same sequence of characters as s2  and returns false otherwise s.equalsignorecase  s2  is another boolean-valued function that checks whether s1 is the same string as s2  but this function considers upper and lower case letters to be equivalent thus  if s1 is cat  then s.equals  cat  is false  while s.equalsignorecase  cat  is true s.length    as mentioned above  is an integer-valued function that gives the number of characters in s s.charat  n   where n is an integer  returns a value of type char it returns the nth character in the string positions are numbered starting with 0  so s.charat  0  is actually the first character  s.charat  1  is the second  and so on the final position is s.length     for example  the value of cat .charat  1  is a  an error occurs if the value of the parameter is less than zero or greater than s.length     s.substring  n,m   where n and m are integers  returns a value of type string the returned value consists of the characters in s1 in positions n  n + 1    m note that the character in position m is not included the returned value is called a substring of s s.indexof  s2  returns an integer if s2 occurs as a substring of s1  then the returned value is the starting position of that substring otherwise  the returned value is  you can also use s.indexof  ch  to search for a particular character  ch  in s to find the first occurrence of x at or after position n  you can use s.indexof  x,n   s.compareto  s2  is an integer-valued function that compares the two strings if the strings are equal  the value returned is zero if s1 is less than s2  the value returned is a number less than zero  and if s1 is greater than s2  the value returned is some number greater than zero  if both of the strings consist entirely of lower case letters  then less than and greater than refer to alphabetical order otherwise  the ordering is more complicated  s.touppercase   is a string-valued function that returns a new string that is equal to s1  except that any lower case letters in s1 have been converted to upper case for example  cat .touppercase   is the string cat  there is also a function s.tolowercase    s.trim   is a string-valued function that returns a new string that is equal to s1 except that any non-printing characters such as spaces and tabs have been trimmed from the chapter  names and things 33 beginning and from the end of the string thus  if s1 has the value fred  then s.trim   is the string fred  for the functions s.touppercase    s.tolowercase    and s.trim    note that the value of s1 is not modified instead a new string is created and returned as the value of the function the returned value could be used  for example  in an assignment statement such as smallletters = s.tolowercase   ;  to change the value of s1  you could use an assignment s1 = s.tolowercase   ;  here is another extremely useful fact about strings  you can use the plus operator  +  to concatenate two strings the concatenation of two strings is a new string consisting of all the characters of the first string followed by all the characters of the second string for example  hello + world evaluates to helloworld   got ta watch those spaces  of course if you want a space in the concatenated string  it has to be somewhere in the input data  as in hello + world   let s suppose that name is a variable of type string and that it already refers to the name of the person using the program then  the program could greet the user by executing the statement  system.out.println  hello  + name +  pleased to meet you !  ; even more surprising is that you can actually concatenate values of any type onto a string using the + operator the value is converted to a string  just as it would be if you printed it to the standard output  and then it is concatenated onto the string for example  the expression number + 42 evaluates to the string number42  and the statements system.out.print  after  ; system.out.print  years  ; system.out.print  years  the value is  ; system.out.print  principal  ; can be replaced by the single statement  system.out.print  after + years + years  the value is + principal  ; obviously  this is very convenient it would have shortened some of the examples presented earlier in this chapter .3.3 introduction to enums java comes with eight built-in primitive types and a large set of types that are defined by classes  such as string but even this large collection of types is not sufficient to cover all the possible situations that a programmer might have to deal with so  an essential part of java  just like almost any other programming language  is the ability to create new types for the most part  this is done by defining new classes ; you will learn how to do that in chapter 5 but we will look here at one particular case  the ability to define enums  short for enumerated types   enums are a recent addition to java they were only added in version 5.0 many programming languages have something similar  and many people believe that enums should have been part of java from the beginning technically  an enum is considered to be a special kind of class  but that is not important for now in this section  we will look at enums in a simplified form in practice  most uses of enums will only need the simplified form that is presented here chapter  names and things 34 an enum is a type that has a fixed list of possible values  which is specified when the enum is created in some ways  an enum is similar to the boolean data type  which has true and false as its only possible values however  boolean is a primitive type  while an enum is not the definition of an enum types has the  simplified  form  enum henum-type-namei  hlist-of-enum-valuesi  this definition can not be inside a subroutine you can place it outside the main   routine of the program the henum-type-namei can be any simple identifier this identifier becomes the name of the enum type  in the same way that boolean is the name of the boolean type and string is the name of the string type each value in the hlist-of-enum-valuesi must be a simple identifier  and the identifiers in the list are separated by commas for example  here is the definition of an enum type named season whose values are the names of the four seasons of the year  enum season  spring  summer  fall  winter  by convention  enum values are given names that are made up of upper case letters  but that is a style guideline and not a syntax rule enum values are not variables each value is a constant that always has the same value in fact  the possible values of an enum type are usually referred to as enum constants note that the enum constants of type season are considered to be contained in season  which means following the convention that compound identifiers are used for things that are contained in other things the names that you actually use in your program to refer to them are season.spring  season.summer  season.fall  and season.winter once an enum type has been created  it can be used to declare variables in exactly the same ways that other types are used for example  you can declare a variable named vacation of type season with the statement  season vacation ; after declaring the variable  you can assign a value to it using an assignment statement the value on the right-hand side of the assignment can be one of the enum constants of type season remember to use the full name of the constant  including season ! for example  vacation = season.summer ; you can print out an enum value with an output statement such as system.out.print  vacation   the output value will be the name of the enum constant  without the season   in this case  the output would be summer  because an enum is technically a class  the enum values are technically objects as objects  they can contain subroutines one of the subroutines in every enum value is named ordinal    when used with an enum value  it returns the ordinal number of the value in the list of values of the enum the ordinal number simply tells the position of the value in the list that is  season.spring.ordinal   is the int value 0  season.summer.ordinal   is 1  season.fall.ordinal   is 2  and season.winter.ordinal   is 3  you will see over and over again that computer scientists like to start counting at zero !  you can  of course  use the ordinal   method with a variable of type season  such as vacation.ordinal   in our example right now  it might not seem to you that enums are all that useful as you work though the rest of the book  you should be convinced that they are for now  you should at least appreciate them as the first example of an important concept  creating new types here is a little example that shows enums being used in a complete program  chapter  names and things 35 public class enumdemo  // define two enum types  remember that the definitions // go outside the main   routine ! enum day  sunday  monday  tuesday  wednesday  thursday  friday  saturday  enum month  jan  feb  mar  apr  may  jun  jul  aug  sep  oct  nov  dec  public static void main  string   args   day tgif ; // declare a variable of type day month libra ; // declare a variable of type month tgif = day.friday ; // assign a value of type day to tgif libra = month.oct ; // assign a value of type month to libra system.out.print  my sign is libra  since i was born in  ; system.out.println  libra  ; // output value will be  oct system.out.print  that s the  ; system.out.print  libra.ordinal    ; system.out.println  -th month of the year  ; system.out.println   counting from 0  of course !   ; system.out.print  isn t it nice to get to  ; system.out.println  tgif  ; // output value will be  friday system.out.println  tgif + is the + tgif.ordinal   + -th day of the week  ; // you can concatenate enum values onto strings !   .4 text input and output for some unfathomable reason  java has never made it easy to read data typed in  online  by the user of a program you ve already seen that output can be displayed to the user using the subroutine system.out.print this subroutine is part of a pre-defined object called system.out the purpose of this object is precisely to display output to the user there is a corresponding object called system.in that exists to read data input by the user  but it provides only very primitive input facilities  and it requires some advanced java programming skills to use it effectively java 5.0 finally makes input a little easier with a new scanner class however  it requires some knowledge of object-oriented programming to use this class  so it s not appropriate for use here at the beginning of this course  furthermore  in my opinion  scanner still does not get things quite right  there is some excuse for this lack of concern with input  since java is meant mainly to write programs for graphical user interfaces  and those programs have their own style of input/output  which is implemented in java however  basic support is needed for input/output in old-fashioned non-gui programs fortunately  it is possible to extend java by creating new classes that provide subroutines that are not available in the standard part of the language as soon as a new class is available  the subroutines that it contains can be used in exactly the same way as built-in routines chapter  names and things 36 along these lines  i ve written a class called textio that defines subroutines for reading values typed by the user of a non-gui program the subroutines in this class make it possible to get input from the standard input object  system.in  without knowing about the advanced aspects of java that are needed to use scanner or to use system.in directly textio also contains a set of output subroutines the output subroutines are similar to those provided in system.out  but they provide a few additional features you can use whichever set of output subroutines you prefer  and you can even mix them in the same program to use the textio class  you must make sure that the class is available to your program what this means depends on the java programming environment that you are using in general  you just have to add the source code file  textio.java  to the same directory that contains your main program see section .6 for more information about how to use textio .4.1 a first text input example the input routines in the textio class are static member functions  static member functions were introduced in the previous section  let s suppose that you want your program to read an integer typed in by the user the textio class contains a static member function named getlnint that you can use for this purpose since this function is contained in the textio class  you have to refer to it in your program as textio.getlnint the function has no parameters  so a complete call to the function takes the form textio.getlnint    this function call represents the int value typed by the user  and you have to do something with the returned value  such as assign it to a variable for example  if userinput is a variable of type int  created with a declaration statement int userinput ;   then you could use the assignment statement userinput = textio.getlnint   ; when the computer executes this statement  it will wait for the user to type in an integer value the value typed will be returned by the function  and it will be stored in the variable  userinput here is a complete program that uses textio.getlnint to read a number typed by the user and then prints out the square of the number that the user types  / a program that reads an integer that is typed in by the user and computes and prints the square of that integer / public class printsquare  public static void main  string   args   int userinput ; // the number input by the user int square ; // the userinput  multiplied by itself system.out.print  please type a number   ; userinput = textio.getlnint   ; square = userinput userinput ; system.out.print  the square of that number is  ; system.out.println  square  ;  // end of main    //end of class printsquare chapter  names and things 37 when you run this program  it will display the message please type a number  and will pause until you type a response  including a carriage return after the number .4.2 text output the textio class contains static member subroutines textio.put and textio.putln that can be used in the same way as system.out.print and system.out.println for example  although there is no particular advantage in doing so in this case  you could replace the two lines system.out.print  the square of that number is  ; system.out.println  square  ; with textio.put  the square of that number is  ; textio.putln  square  ; for the next few chapters  i will use textio for input in all my examples  and i will often use it for output keep in mind that textio can only be used in a program if it is available to that program it is not built into java in the way that the system class is let s look a little more closely at the built-in output subroutines system.out.print and system.out.println each of these subroutines can be used with one parameter  where the parameter can be a value of any of the primitive types byte  short  int  long  float  double  char  or boolean the parameter can also be a string  a value belonging to an enum type  or indeed any object that is  you can say system.out.print  x  ; or system.out.println  x  ;  where x is any expression whose value is of any type whatsoever the expression can be a constant  a variable  or even something more complicated such as 2 distance time now  in fact  the system class actually includes several different subroutines to handle different parameter types there is one system.out.print for printing values of type double  one for values of type int  another for values that are objects  and so on these subroutines can have the same name since the computer can tell which one you mean in a given subroutine call statement  depending on the type of parameter that you supply having several subroutines of the same name that differ in the types of their parameters is called overloading many programming languages do not permit overloading  but it is common in java programs the difference between system.out.print and system.out.println is that the println version outputs a carriage return after it outputs the specified parameter value there is a version of system.out.println that has no parameters this version simply outputs a carriage return  and nothing else a subroutine call statement for this version of the subroutine looks like system.out.println   ;  with empty parentheses note that system.out.println  x  ; is exactly equivalent to system.out.print  x  ; system.out.println   ; ; the carriage return comes after the value of x  there is no version of system.out.print without parameters do you see why  as mentioned above  the textio subroutines textio.put and textio.putln can be used as replacements for system.out.print and system.out.println the textio functions work in exactly the same way as the system functions  except that  as we will see below  textio can also be used to write to other destinations chapter  names and things 38 .4.3 textio input functions the textio class is a little more versatile at doing output than is system.out however  it s input for which we really need it with textio  input is done using functions for example  textio.getlnint    which was discussed above  makes the user type in a value of type int and returns that input value so that you can use it in your program textio includes several functions for reading different types of input values here are examples of the ones that you are most likely to use  j = textio.getlnint   ; // reads a value of type int y = textio.getlndouble   ; // reads a value of type double a = textio.getlnboolean   ; // reads a value of type boolean c = textio.getlnchar   ; // reads a value of type char w = textio.getlnword   ; // reads one word as a value of type string s = textio.getln   ; // reads an entire input line as a string for these statements to be legal  the variables on the left side of each assignment statement must already be declared and must be of the same type as that returned by the function on the right side note carefully that these functions do not have parameters the values that they return come from outside the program  typed in by the user as the program is running to capture that data so that you can use it in your program  you have to assign the return value of the function to a variable you will then be able to refer to the user s input value by using the name of the variable when you call one of these functions  you are guaranteed that it will return a legal value of the correct type if the user types in an illegal value as input for example  if you ask for an int and the user types in a non-numeric character or a number that is outside the legal range of values that can be stored in in a variable of type int then the computer will ask the user to re-enter the value  and your program never sees the first  illegal value that the user entered for textio.getlnboolean    the user is allowed to type in any of the following  true  false  t  f  yes  no  y  n  1  or 0 furthermore  they can use either upper or lower case letters in any case  the user s input is interpreted as a true/false value it s convenient to use textio.getlnboolean   to read the user s response to a yes/no question you ll notice that there are two input functions that return strings the first  getlnword    returns a string consisting of non-blank characters only when it is called  it skips over any spaces and carriage returns typed in by the user then it reads non-blank characters until it gets to the next space or carriage return it returns a string consisting of all the non-blank characters that it has read the second input function  getln    simply returns a string consisting of all the characters typed in by the user  including spaces  up to the next carriage return it gets an entire line of input text the carriage return itself is not returned as part of the input string  but it is read and discarded by the computer note that the string returned by this function might be the empty string   which contains no characters at all you will get this return value if the user simply presses return  without typing anything else first all the other input functions listed getlnint    getlndouble    getlnboolean    and getlnchar   behave like getword   in that they will skip past any blanks and carriage returns in the input before reading a value furthermore  if the user types extra characters on the line after the input value  all the extra characters will be discarded  along with the carriage return at the end of the line if the program executes another input function  the user will have to type in another line of input it might not sound like a good idea to discard any of the user s input  but it turns out to be the safest thing to do in most programs sometimes  however  you do want to read more chapter  names and things 39 than one value from the same line of input textio provides the following alternative input functions to allow you to do this  j = textio.getint   ; // reads a value of type int y = textio.getdouble   ; // reads a value of type double a = textio.getboolean   ; // reads a value of type boolean c = textio.getchar   ; // reads a value of type char w = textio.getword   ; // reads one word as a value of type string the names of these functions start with get instead of getln  getln is short for get line and should remind you that the functions whose names begin with getln will get an entire line of data a function without the ln will read an input value in the same way  but will then save the rest of the input line in a chunk of internal memory called the input buffer the next time the computer wants to read an input value  it will look in the input buffer before prompting the user for input this allows the computer to read several values from one line of the user s input strictly speaking  the computer actually reads only from the input buffer the first time the program tries to read input from the user  the computer will wait while the user types in an entire line of input textio stores that line in the input buffer until the data on the line has been read or discarded  by one of the getln functions   the user only gets to type when the buffer is empty clearly  the semantics of input is much more complicated than the semantics of output ! fortunately  for the majority of applications  it s pretty straightforward in practice you only need to follow the details if you want to do something fancy in particular  i strongly advise you to use the getln versions of the input routines  rather than the get versions  unless you really want to read several items from the same line of input  precisely because the semantics of the getln versions is much simpler note  by the way  that although the textio input functions will skip past blank spaces and carriage returns while looking for input  they will not skip past other characters for example  if you try to read two ints and the user types 2,3  the computer will read the first number correctly  but when it tries to read the second number  it will see the comma it will regard this as an error and will force the user to retype the number if you want to input several numbers from one line  you should make sure that the user knows to separate them with spaces  not commas alternatively  if you want to require a comma between the numbers  use getchar   to read the comma before reading the second number there is another character input function  textio.getanychar    which does not skip past blanks or carriage returns it simply reads and returns the next character typed by the user  even if it s a blank or carriage return if the user typed a carriage return  then the char returned by getanychar   is the special linefeed character \ n  there is also a function  textio.peek    that lets you look ahead at the next character in the input without actually reading it after you peek at the next character  it will still be there when you read the next item from input this allows you to look ahead and see what s coming up in the input  so that you can take different actions depending on what s there the textio class provides a number of other functions to learn more about them  you can look at the comments in the source code file  textio.java  you might be wondering why there are only two output routines  print and println  which can output data values of any type  while there is a separate input routine for each data type as noted above  in reality there are many print and println routines  one for each data type the computer can tell them apart based on the type of the parameter that you provide however  the input routines don t have parameters  so the different input routines can only be chapter  names and things 40 distinguished by having different names  using textio for input and output  we can now improve the program from section .2 for computing the value of an investment we can have the user type in the initial value of the investment and the interest rate the result is a much more useful program for one thing  it makes sense to run it more than once ! / this class implements a simple program that will compute the amount of interest that is earned on an investment over a period of one year the initial amount of the investment and the interest rate are input by the user the value of the investment at the end of the year is output the rate must be input as a decimal  not a percentage  for example  0.05 rather than 5   / public class interest2  public static void main  string   args   double principal ; // the value of the investment double rate ; // the annual interest rate double interest ; // the interest earned during the year textio.put  enter the initial investment   ; principal = textio.getlndouble   ; textio.put  enter the annual interest rate  decimal  not percentage !    ; rate = textio.getlndouble   ; interest = principal rate ; // compute this year s interest principal = principal + interest ; // add it to principal textio.put  the value of the investment after one year is $  ; textio.putln  principal  ;  // end of main    // end of class interest2 .4.4 formatted output if you ran the preceding interest2 example  you might have noticed that the answer is not always written in the format that is usually used for dollar amounts in general  dollar amounts are written with two digits after the decimal point but the program s output can be a number like 1050.0 or 43.575 it would be better if these numbers were printed as 1050.00 and 43.58 java 5.0 introduced a formatted output capability that makes it much easier than it used to be to control the format of output numbers a lot of formatting options are available i will cover just a few of the simplest and most commonly used possibilities here you can use the function system.out.printf to produce formatted output  the name printf  which stands for print formatted  is copied from the c and c + + programming languages  which have always had a similar formatting capability   system.out.printf takes two or more parameters the first parameter is a string that specifies the format of the output this parameter is called the format string the remaining parameters specify the values that chapter  names and things 41 are to be output here is a statement that will print a number in the proper format for a dollar amount  where amount is a variable of type double  system.out.printf  % .2f  amount  ; textio can also do formatted output the function textio.putf has the same functionality as system.out.printf using textio  the above example would be  textio.putf  % .2 ,amount  ; and you could say textio.putf  % .2f ,principal  ; instead of textio.putln  principal  ; in the interest2 program to get the output in the right format the output format of a value is specified by a format specifier the format string  in the simple cases that i cover here  contains one format specifier for each of the values that is to be output some typical format specifiers are % d  % 12d  % 10s  % .2f  % 15.8e and % .8g every format specifier begins with a percent sign  %  and ends with a letter  possibly with some extra formatting information in between the letter specifies the type of output that is to be produced for example  in % d and % 12d  the d specifies that an integer is to be written the 12 in % 12d specifies the minimum number of spaces that should be used for the output if the integer that is being output takes up fewer than 12 spaces  extra blank spaces are added in front of the integer to bring the total up to  we say that the output is right-justified in a field of length  the value is not forced into 12 spaces ; if the value has more than 12 digits  all the digits will be printed  with no extra spaces the specifier % d means the same as % 1d ; that is an integer will be printed using just as many spaces as necessary  the d  by the way  stands for decimal  base-10  numbers you can use an x to output an integer value in hexadecimal form  the letter s at the end of a format specifier can be used with any type of value it means that the value should be output in its default format  just as it would be in unformatted output a number  such as the 10 in % 10s can be added to specify the  minimum  number of characters the s stands for string  meaning that the value is converted into a string value in the usual way the format specifiers for values of type double are even more complicated an f  as in % .2f  is used to output a number in floating-point form  that is with digits after the decimal point in % .2f  the 2 specifies the number of digits to use after the decimal point the 1 specifies the  minimum  number of characters to output  which effectively means that just as many characters as are necessary should be used similarly  % .3f would specify a floating-point format with 3 digits after the decimal point  right-justified in a field of length  very large and very small numbers should be written in exponential format  such as 6.00221415e23  representing 6.00221415 times 10 raised to the power 23 a format speci fier such as % 15.8e specifies an output in exponential form  with the 8 telling how many digits to use after the decimal point if you use g instead of e  the output will be in floating-point form for small values and in exponential form for large values in % .8g  the 8 gives the total number of digits in the answer  including both the digits before the decimal point and the digits after the decimal point in addition to format specifiers  the format string in a printf statement can include other characters these extra characters are just copied to the output this can be a convenient way to insert values into the middle of an output string for example  if x and y are variables of type int  you could say system.out.printf  the product of % d and % d is % d  x  y  x y  ; when this statement is executed  the value of x is substituted for the first % d in the string  the chapter  names and things 42 value of y for the second % d  and the value of the expression x y for the third  so the output would be something like the product of 17 and 42 is 714  quotation marks not included in output !   .4.5 introduction to file i/o system.out sends its output to the output destination known as standard output but standard output is just one possible output destination for example  data can be written to a file that is stored on the user s hard drive the advantage to this  of course  is that the data is saved in the file even after the program ends  and the user can print the file  email it to someone else  edit it with another program  and so on textio has the ability to write data to files and to read data from files when you write output using the put  putln  or putf method in textio  the output is sent to the current output destination by default  the current output destination is standard output however  textio has some subroutines that can be used to change the current output destination to write to a file named result.txt  for example  you would use the statement  textio.writefile  result.txt  ; after this statement is executed  any output from textio output statements will be sent to the file named result.txt instead of to standard output the file should be created in the same directory that contains the program note that if a file with the same name already exists  its previous contents will be erased ! in many cases  you want to let the user select the file that will be used for output the statement textio.writeuserselectedfile   ; will open a typical graphical-user-interface file selection dialog where the user can specify the output file if you want to go back to sending output to standard output  you can say textio.writestandardoutput   ; you can also specify the input source for textio s various get functions the default input source is standard input you can use the statement textio.readfile  data.txt  to read from a file named data.txt instead  or you can let the user select the input file by saying textio.readuserselectedfile    and you can go back to reading from standard input with textio.readstandardinput    when your program is reading from standard input  the user gets a chance to correct any errors in the input this is not possible when the program is reading from a file if illegal data is found when a program tries to read from a file  an error occurs that will crash the program  later  we will see that it is possible to catch such errors and recover from them  errors can also occur  though more rarely  when writing to files a complete understanding of file input/output in java requires a knowledge of object oriented programming we will return to the topic later  in chapter 1 the file i/o capabilities in textio are rather primitive by comparison nevertheless  they are sufficient for many applications  and they will allow you to get some experience with files sooner rather than later as a simple example  here is a program that asks the user some questions and outputs the user s responses to a file named profile.txt  public class createprofile  public static void main  string   args   chapter  names and things 43 string name ; // the user s name string email ; // the user s email address double salary ; // the user s yearly salary string favcolor ; // the user s favorite color textio.putln  good afternoon ! this program will create  ; textio.putln  your profile file  if you will just answer  ; textio.putln  a few simple questions  ; textio.putln   ; / gather responses from the user / textio.put  what is your name  ; name = textio.getln   ; textio.put  what is your email address  ; email = textio.getln   ; textio.put  what is your yearly income  ; salary = textio.getlndouble   ; textio.put  what is your favorite color  ; favcolor = textio.getln   ; / write the user s information to the file named profile.txt / textio.writefile  profile.txt  ; // subsequent output goes to the file textio.putln  name  + name  ; textio.putln  email  + email  ; textio.putln  favorite color  + favcolor  ; textio.putf  yearly income  % .2f \ n  salary  ; // the \ n in the previous line is a carriage return / print a final message to standard output / textio.writestandardoutput   ; textio.putln  thank you your profile has been written to profile.txt  ;   .5 details of expressions this section takes a closer look at expressions recall that an expression is a piece of  online  program code that represents or computes a value an expression can be a literal  a variable  a function call  or several of these things combined with operators such as + and >  the value of an expression can be assigned to a variable  used as a parameter in a subroutine call  or combined with other values into a more complicated expression  the value can even  in some cases  be ignored  if that s what you want to do ; this is more common than you might think  expressions are an essential part of programming so far  these notes have dealt only informally with expressions this section tells you the more-or-less complete story  leaving out some of the less commonly used operators   the basic building blocks of expressions are literals  such as 674  3.14  true  and x   variables  and function calls recall that a function is a subroutine that returns a value you ve already seen some examples of functions  such as the input routines from the textio class and the mathematical functions from the math class chapter  names and things 44 the math class also contains a couple of mathematical constants that are useful in mathematical expressions  math.pi represents  the ratio of the circumference of a circle to its diameter   and math.e represents e  the base of the natural logarithms   these constants are actually member variables in math of type double they are only approximations for the mathematical constants  which would require an infinite number of digits to specify exactly literals  variables  and function calls are simple expressions more complex expressions can be built up by using operators to combine simpler expressions operators include + for adding two numbers  > for comparing two values  and so on when several operators appear in an expression  there is a question of precedence  which determines how the operators are grouped for evaluation for example  in the expression a + b c  b c is computed first and then the result is added to a we say that multiplication   has higher precedence than addition  +   if the default precedence is not what you want  you can use parentheses to explicitly specify the grouping you want for example  you could use  a + b  c if you want to add a to b first and then multiply the result by c the rest of this section gives details of operators in java the number of operators in java is quite large  and i will not cover them all here most of the important ones are here ; a few will be covered in later chapters as they become relevant .5.1 arithmetic operators arithmetic operators include addition  subtraction  multiplication  and division they are indicated by +     and / these operations can be used on values of any numeric type  byte  short  int  long  float  or double when the computer actually calculates one of these operations  the two values that it combines must be of the same type if your program tells the computer to combine two values of different types  the computer will convert one of the values from one type to another for example  to compute 37.4 + 10  the computer will convert the integer 10 to a real number 10.0 and will then compute 37.4 + 10.0 this is called a type conversion ordinarily  you don t have to worry about type conversion in expressions  because the computer does it automatically when two numerical values are combined  after doing type conversion on one of them  if necessary   the answer will be of the same type if you multiply two ints  you get an int ; if you multiply two doubles  you get a double this is what you would expect  but you have to be very careful when you use the division operator / when you divide two integers  the answer will always be an integer ; if the quotient has a fractional part  it is discarded for example  the value of 7/2 is 3  not 3.5 if n is an integer variable  then n/100 is an integer  and 1/n is equal to zero for any n greater than one ! this fact is a common source of programming errors you can force the computer to compute a real number as the answer by making one of the operands real  for example  when the computer evaluates .0/n  it first converts n to a real number in order to match the type of .0  so you get a real number as the answer java also has an operator for computing the remainder when one integer is divided by another this operator is indicated by %  if a and b are integers  then a % b represents the remainder when a is divided by b  however  for negative operands  % is not quite the same as the usual mathematical modulus operator  since if one of a or b is negative  then the value of a % b will be negative  for example  7 % 2 is 1  while 34577 % 100 is 77  and 50 % 8 is  a common use of % is to test whether a given integer is even or odd n is even if n % 2 is zero  and it is odd if n % 2 is  more generally  you can check whether an integer n is evenly divisible by an integer m by checking whether n % m is zero finally  you might need the unary minus operator  which takes the negative of a number chapter  names and things 45 for example  -x has the same value as  -1  x for completeness  java also has a unary plus operator  as in + x  even though it doesn t really do anything by the way  recall that the + operator can also be used to concatenate a value of any type onto a string this is another example of type conversion in java  any type can be automatically converted into type string .5.2 increment and decrement you ll find that adding 1 to a variable is an extremely common operation in programming subtracting 1 from a variable is also pretty common you might perform the operation of adding 1 to a variable with assignment statements such as  counter = counter + 1 ; goalsscored = goalsscored + 1 ; the effect of the assignment statement x = x + 1 is to take the old value of the variable x  compute the result of adding 1 to that value  and store the answer as the new value of x the same operation can be accomplished by writing x + +  or  if you prefer  + + x   this actually changes the value of x  so that it has the same effect as writing x = x + 1  the two statements above could be written counter + + ; goalsscored + + ; similarly  you could write x  or --x  to subtract 1 from x that is  x performs the same computation as x = x   adding 1 to a variable is called incrementing that variable  and subtracting 1 is called decrementing the operators + + and  are called the increment operator and the decrement operator  respectively these operators can be used on variables belonging to any of the numerical types and also on variables of type char usually  the operators + + or  are used in statements like x + + ; or x ;  these statements are commands to change the value of x however  it is also legal to use x + +  + + x  x  or --x as expressions  or as parts of larger expressions that is  you can write things like  y = x + + ; y = + + x ; textio.putln  --x  ; z =  + + x   y  ; the statement y = x + + ; has the effects of adding 1 to the value of x and  in addition  assigning some value to y the value assigned to y is the value of the expression x + +  which is defined to be the old value of x  before the 1 is added thus  if the value of x is 6  the statement y = x + + ; will change the value of x to 7  but it will change the value of y to 6 since the value assigned to y is the old value of x on the other hand  the value of + + x is defined to be the new value of x  after the 1 is added so if x is 6  then the statement y = + + x ; changes the values of both x and y to 7 the decrement operator    works in a similar way this can be confusing my advice is  don t be confused use + + and  only in stand-alone statements  not in expressions i will follow this advice in all the examples in these notes .5.3 relational operators java has boolean variables and boolean-valued expressions that can be used to express conditions that can be either true or false one way to form a boolean-valued expression is chapter  names and things 46 to compare two values using a relational operator relational operators are used to test whether two values are equal  whether one value is greater than another  and so forth the relational operators in java are  = =  ! =   < =  and > =  the meanings of these operators are  a = = b is a equal to b a ! = b is a not equal to b a < b is a less than b a > b is a greater than b a < = b is a less than or equal to b a > = b is a greater than or equal to b these operators can be used to compare values of any of the numeric types they can also be used to compare values of type char for characters  < and > are defined according the numeric unicode values of the characters  this might not always be what you want it is not the same as alphabetical order because all the upper case letters come before all the lower case letters  when using boolean expressions  you should remember that as far as the computer is concerned  there is nothing special about boolean values in the next chapter  you will see how to use them in loop and branch statements but you can also assign boolean-valued expressions to boolean variables  just as you can assign numeric values to numeric variables by the way  the operators = = and ! = can be used to compare boolean values this is occasionally useful for example  can you figure out what this does  boolean samesign ; samesign =   x > 0  = =  y > 0   ; one thing that you can not do with the relational operators  < =  and < = is to use them to compare values of type string you can legally use = = and ! = to compare strings  but because of peculiarities in the way objects behave  they might not give the results you want  the = = operator checks whether two objects are stored in the same memory location  rather than whether they contain the same value occasionally  for some objects  you do want to make such a check but rarely for strings i ll get back to this in a later chapter  instead  you should use the subroutines equals    equalsignorecase    and compareto    which were described in section .3  to compare two strings .5.4 boolean operators in english  complicated conditions can be formed using the words and  or  and not for example  if there is a test and you did not study for it    and  or  and not are boolean operators  and they exist in java as well as in english in java  the boolean operator and is represented by && the && operator is used to combine two boolean values the result is also a boolean value the result is true if both of the combined values are true  and the result is false if either of the combined values is false for example   x = = 0  &&  y = = 0  is true if and only if both x is equal to 0 and y is equal to 0 the boolean operator or is represented by | |   that s supposed to be two of the vertical line characters  |   the expression a | | b is true if either a is true or b is true  or if both are true a | | b is false only if both a and b are false the operators && and | | are said to be short-circuited versions of the boolean operators this means that the second operand of && or | | is not necessarily evaluated consider the test  x ! = 0  &&  y/x > 1  chapter  names and things 47 suppose that the value of x is in fact zero in that case  the division y/x is undefined mathematically however  the computer will never perform the division  since when the computer evaluates  x ! = 0   it finds that the result is false  and so it knows that   x ! = 0  && anything  has to be false therefore  it doesn t bother to evaluate the second operand   y/x > 1   the evaluation has been short-circuited and the division by zero is avoided without the shortcircuiting  there would have been a division by zero  this may seem like a technicality  and it is but at times  it will make your programming life a little easier  the boolean operator not is a unary operator in java  it is indicated by ! and is written in front of its single operand for example  if test is a boolean variable  then test = ! test ; will reverse the value of test  changing it from true to false  or from false to true .5.5 conditional operator any good programming language has some nifty little features that aren t really necessary but that let you feel cool when you use them java has the conditional operator it s a ternary operator that is  it has three operands and it comes in two pieces  and   that have to be used together it takes the form hboolean-expressioni hexpression1i  hexpression2i the computer tests the value of hboolean-expressioni if the value is true  it evaluates hexpression1i ; otherwise  it evaluates hexpression2i for example  next =  n % 2 = = 0   n/2    3 n + 1  ; will assign the value n/2 to next if n is even  that is  if n % 2 = = 0 is true   and it will assign the value  3 n + 1  to next if n is odd  the parentheses in this example are not required  but they do make the expression easier to read  .5.6 assignment operators and type-casts you are already familiar with the assignment statement  which uses the symbol = to assign the value of an expression to a variable in fact  = is really an operator in the sense that an assignment can itself be used as an expression or as part of a more complex expression the value of an assignment such as a = b is the same as the value that is assigned to a so  if you want to assign the value of b to a and test at the same time whether that value is zero  you could say  if   a = b  = = 0   usually  i would say  don t do things like that ! in general  the type of the expression on the right-hand side of an assignment statement must be the same as the type of the variable on the left-hand side however  in some cases  the computer will automatically convert the value computed by the expression to match the type of the variable consider the list of numeric types  byte  short  int  long  float  double a value of a type that occurs earlier in this list can be converted automatically to a value that occurs later for example  int a ; double x ; short b ; chapter  names and things 48 a = 17 ; x = a ; // ok ; a is converted to a double b = a ; // illegal ; no automatic conversion // from int to short the idea is that conversion should only be done automatically when it can be done without changing the semantics of the value any int can be converted to a double with the same numeric value however  there are int values that lie outside the legal range of shorts there is simply no way to represent the int 100000 as a short  for example  since the largest value of type short is 32767 in some cases  you might want to force a conversion that wouldn t be done automatically for this  you can use what is called a type cast a type cast is indicated by putting a type name  in parentheses  in front of the value you want to convert for example  int a ; short b ; a = 17 ; b =  short  a ; // ok ; a is explicitly type cast // to a value of type short you can do type casts from any numeric type to any other numeric type however  you should note that you might change the numeric value of a number by type-casting it for example   short  100000 is -3107  the -31072 is obtained by taking the 4-byte int 100000 and throwing away two of those bytes to obtain a short you ve lost the real information that was in those two bytes  as another example of type casts  consider the problem of getting a random integer between 1 and 6 the function math.random   gives a real number between 0.0 and 0.9999    and so 6 math.random   is between 0.0 and 5.999    the type-cast operator   int   can be used to convert this to an integer   int   6 math.random     a real number is cast to an integer by discarding the fractional part thus   int   6 math.random    is one of the integers 0  1  2  3  4  and 5 to get a number between 1 and 6  we can add 1   int   6 math.random    + 1  you can also type-cast between the type char and the numeric types the numeric value of a char is its unicode code number for example   char  97 is a  and  int  + is 43  however  a type conversion from char to int is automatic and does not have to be indicated with an explicit type cast  java has several variations on the assignment operator  which exist to save typing for example  a + = b is defined to be the same as a = a + b  every operator in java that applies to two operands gives rise to a similar assignment operator for example  x  = y ; // same as  x = x  y ; x = y ; // same as  x = x y ; x / = y ; // same as  x = x / y ; x % = y ; // same as  x = x % y ;  for integers x and y  q && = p ; // same as  q = q && p ;  for booleans q and p  the combined assignment operator + = even works with strings recall that when the + operator is used with a string as one of the operands  it represents concatenation since str + = x is equivalent to str = str + x  when + = is used with a string on the left-hand side  it appends the value on the right-hand side onto the string for example  if str has the value tire  then the statement str + = d ; changes the value of str to tired  chapter  names and things 49 .5.7 type conversion of strings in addition to automatic type conversions and explicit type casts  there are some other cases where you might want to convert a value of one type into a value of a different type one common example is the conversion of a string value into some other type  such as converting the string 10 into the int value 10 or the string 17.42e-2 into the double value 0.174 in java  these conversions are handled by built-in functions there is a standard class named integer that contains several subroutines and variables related to the int data type  recall that since int is not a class  int itself can t contain any subroutines or variables  in particular  if str is any expression of type string  then integer.parseint  str  is a function call that attempts to convert the value of str into a value of type int for example  the value of integer.parseint  10  is the int value 10 if the parameter to integer.parseint does not represent a legal int value  then an error occurs similarly  the standard class named double includes a function double.parsedouble that tries to convert a parameter of type string into a value of type double for example  the value of the function call double.parsedouble  3.14  is the double value 3.14  of course  in practice  the parameter used in double.parsedouble or integer.parseint would be a variable or expression rather than a constant string  type conversion functions also exist for converting strings into enumerated type values  enumerated types  or enums  were introduced in subsection .3.3  for any enum type  a predefined function named valueof is automatically defined for that type this is a function that takes a string as parameter and tries to convert it to a value belonging to the enum the valueof function is part of the enum type  so the name of the enum is part of the full name of the function for example  if an enum suit is defined as enum suit  spade  diamond  club  heart  then the name of the type conversion function would be suit.valueof the value of the function call suit.valueof  club  would be the enumerated type value suit.club for the conversion to succeed  the string must exactly match the simple name of one of the enumerated type constants  without the suit in front   .5.8 precedence rules if you use several operators in one expression  and if you don t use parentheses to explicitly indicate the order of evaluation  then you have to worry about the precedence rules that determine the order of evaluation  advice  don t confuse yourself or the reader of your program ; use parentheses liberally  here is a listing of the operators discussed in this section  listed in order from highest precedence  evaluated first  to lowest precedence  evaluated last   unary operators  + +    !  unary  and +  type-cast multiplication and division   /  % addition and subtraction  +   relational operators   < =  > = equality and inequality  = =  ! = boolean and  && boolean or  | | conditional operator   assignment operators  =  + =   =  =  / =  % = chapter  names and things 50 operators on the same line have the same precedence when operators of the same precedence are strung together in the absence of parentheses  unary operators and assignment operators are evaluated right-to-left  while the remaining operators are evaluated left-to-right for example  a b/c means  a b  /c  while a = b = c means a =  b = c    can you see how the expression a = b = c might be useful  given that the value of b = c as an expression is the same as the value that is assigned to b  .6 programming environments although the java language is highly standardized  the procedures for creating  compil  online  ing  and editing java programs vary widely from one programming environment to another there are two basic approaches  a command line environment  where the user types commands and the computer responds  and an integrated development environment  ide   where the user uses the keyboard and mouse to interact with a graphical user interface while there is just one common command line environment for java programming  there is a wide variety of ides i can not give complete or definitive information on java programming environments in this section  but i will try to give enough information to let you compile and run the examples from this textbook  at least in a command line environment there are many ides  and i can t cover them all here i will concentrate on eclipse  one of the most popular ides for java programming  but some of the information that is presented will apply to other ides as well one thing to keep in mind is that you do not have to pay any money to do java programming  aside from buying a computer  of course   everything that you need can be downloaded for free on the internet .6.1 java development kit the basic development system for java programming is usually referred to as the jdk  java development kit   it is a part of j2se  the java 2 platform standard edition this book requires j2se version 5.0  or higher   confusingly  the jdk that is part of j2se version 5.0 is sometimes referred to as jdk .5 instead of 5.0 note that j2se comes in two versions  a development kit version and a runtime version the runtime can be used to run java programs and to view java applets in web pages  but it does not allow you to compile your own java programs the development kit includes the runtime and adds to it the jdk which lets you compile programs you need a jdk for use with this textbook java was developed by sun microsystems  inc  which makes its jdk for windows and linux available for free download at its java web site  java.sun.com if you have a windows computer  it might have come with a java runtime  but you might still need to download the jdk some versions of linux come with the jdk either installed by default or on the installation media if you need to download and install the jdk  be sure to get jdk 5.0  or higher   as of june  2009  the current version of the jdk is jdk 6  and it can be downloaded from http  //java.sun.com/javase/downloads/index.jsp mac os comes with java the version included with mac os 10.5 is 5.0  but 6.0 is installed by recent software updates if a jdk is installed on your computer  you can use the command line environment to compile and run java programs some ides depend on the jdk  so even if you plan to use an ide for programming  you might still need a jdk chapter  names and things 51 .6.2 command line environment many modern computer users find the command line environment to be pretty alien and unintuitive it is certainly very different from the graphical user interfaces that most people are used to however  it takes only a little practice to learn the basics of the command line environment and to become productive using it to use a command line programming environment  you will have to open a window where you can type in commands in windows  you can open such a command window by running the program named cmd in recent versions of windows  it can be found in the accessories submenu of the start menu  under the name command prompt  alternatively  you can run cmd by using the run program feature in the start menu  and entering cmd as the name of the program in mac os  you want to run the terminal program  which can be be found in the utilities folder inside the applications folder in linux  there are several possibilities  including konsole  gterm  and xterm no matter what type of computer you are using  when you open a command window  it will display a prompt of some sort type in a command at the prompt and press return the computer will carry out the command  displaying any output in the command window  and will then redisplay the prompt so that you can type another command one of the central concepts in the command line environment is the current directory which contains the files to which commands that you type apply  the words directory and folder mean the same thing  often  the name of the current directory is part of the command prompt you can get a list of the files in the current directory by typing in the command dir  on windows  or ls  on linux and mac os   when the window first opens  the current directory is your home directory  where all your files are stored you can change the current directory using the cd command with the name of the directory that you want to use for example  to change into your desktop directory  type in the command cd desktop and press return you should create a directory  that is  a folder  to hold your java work for example  create a directory named javawork in your home directory you can do this using your computer s gui ; another way to do it is to open a command window and enter the command mkdir javawork when you want to work on programming  open a command window and enter the command cd javawork to change into your work directory of course  you can have more than one working directory for your java work ; you can organize your files any way you like the most basic commands for using java on the command line are javac and java ; javac is used to compile java source code  and java is used to run java stand-alone applications if a jdk is correctly installed on your computer  it should recognize these commands when you type them in on the command line try typing the commands java -version and javac -version which should tell you which version of java is installed if you get a message such as command not found  then java is not correctly installed if the java command works  but javac does not  it means that a java runtime is installed rather than a development kit  on windows  after installing the jdk  you need to modify the windows path variable to make this work see the jdk installation instructions for information about how to do this  to test the javac command  place a copy of textio.java into your working directory  if you downloaded the web site of this book  you can find it in the directory named source ; you can use your computer s gui to copy-and-paste this file into your working directory alternatively  you can navigate to textio.java on the book s web site and use the save as command in your web browser to save a copy of the file into your working directory  type the command  chapter  names and things 52 javac textio.java this will compile textio.java and will create a bytecode file named textio.class in the same directory note that if the command succeeds  you will not get any response from the computer ; it will just redisplay the command prompt to tell you it s ready for another command to test the java command  copy sample program interest.java from this book s source directory into your working directory first  compile the program with the command javac interest.java remember that for this to succeed  textio must already be in the same directory then you can execute the program using the command java interest2 be careful to use just the name of the program  interest2  not the name of the java source code file or the name of the compiled class file when you give this command  the program will run you will be asked to enter some information  and you will respond by typing your answers into the command window  pressing return at the end of the line when the program ends  you will see the command prompt  and you can enter another command you can follow the same procedure to run all of the examples in the early sections of this book when you start work with applets  you will need a different command to execute the applets that command will be introduced later in the book to create your own programs  you will need a text editor a text editor is a computer program that allows you to create and save documents that contain plain text it is important that the documents be saved as plain text  that is without any special encoding or formatting information word processor documents are not appropriate  unless you can get your word processor to save as plain text a good text editor can make programming a lot more pleasant linux comes with several text editors on windows  you can use notepad in a pinch  but you will probably want something better for mac os  you might download the free textwrangler application one possibility that will work on any platform is to use jedit  a good programmer s text editor that is itself written in java and that can be downloaded for free from www.jedit.org to create your own programs  you should open a command line window and cd into the working directory where you will store your source code files start up your text editor program  such as by double-clicking its icon or selecting it from a start menu type your code into the editor window  or open an existing source code file that you want to modify save the file remember that the name of a java source code file must end in .java  and the rest of the file name must match the name of the class that is defined in the file once the file is saved in your working directory  go to the command window and use the javac command to compile it  as discussed above if there are syntax errors in the code  they will be listed in the command window each error message contains the line number in the file where the computer found the error go back to the editor and try to fix the errors  save your changes  and then try the javac command again  it s usually a good idea to just work on the first few errors ; sometimes fixing those will make other errors go away  remember that when the javac command finally succeeds  you will get no message at all then you can use the java command to run your program  as described above once you ve compiled the program  you can run it as many times as you like without recompiling it that s really all there is to it  keep both editor and command-line window open edit  save  and compile until you have eliminated all the syntax errors  always remember to save chapter  names and things 53 the file before compiling it the compiler only sees the saved file  not the version in the editor window  when you run the program  you might find that it has semantic errors that cause it to run incorrectly it that case  you have to go back to the edit/save/compile loop to try to find and fix the problem .6.3 ides and eclipse in an integrated development environment  everything you need to create  compile  and run programs is integrated into a single package  with a graphical user interface that will be familiar to most computer users there are many different ides for java program development  ranging from fairly simple wrappers around the jdk to highly complex applications with a multitude of features for a beginning programmer  there is a danger in using an ide  since the difficulty of learning to use the ide  on top of the difficulty of learning to program  can be overwhelming however  for my own programming  i generally use the eclipse ide  and i introduce my students to it after they have had some experience with the command line eclipse has a variety of features that are very useful for a beginning programmer and even though it has many advanced features  its design makes it possible to use eclipse without understanding its full complexity eclipse is used by many professional programmers and is probably the most commonly used java ide eclipse is itself written in java it requires java .4  or higher  to run  so it works on any computer platform that supports java .4  including linux  windows  and recent versions of mac os furthermore  eclipse requires a jdk you should make sure that jdk 5.0  or higher  is installed on your computer  as described above  before you install eclipse eclipse can be downloaded for free from www.eclipse.org you can download the eclipse ide for java developers another popular choice of ide is netbeans  which provides many of the same capabilies as eclipse netbeans can be downloaded from www.netbeans.org/  and sun offers download bundles that include netbeans along with the jdk i like netbeans a little less than eclipse  and i won t say much about it here it is  however  quite similar to eclipse the first time you start eclipse  you will be asked to specify a workspace  which is the directory where all your work will be stored you can accept the default name  or provide one of your own when startup is complete  the eclipse window will be filled by a large welcome screen that includes links to extensive documentation and tutorials you can close this screen  by clicking the x next to the word welcome ; you can get back to it later by choosing welcome from the help menu the eclipse gui consists of one large window that is divided into several sections each section contains one or more views if there are several views in one section  there there will be tabs at the top of the section to select the view that is displayed in that section each view displays a different type of information the whole set of views is called a perspective eclipse uses different perspectives  that is different sets of views of different types of information  for different tasks the only perspective that you will need is the java perspective the java perspective includes a large area in the center of the window where you will create and edit your java programs to the left of this is the package explorer view  which will contain a list of your java projects and source code files to the right are some other views that i don t find this very useful  and i suggest that you close them by clicking the small x next to the name of each view several other views that will be useful while you are compiling and running programs appear in a section of the window below the editing area if you accidently close one of the important views  such as the package explorer  you can get it back by selecting it form chapter  names and things 54 the show view submenu of the window menu to do any work in eclipse  you need a project to start a java project  go to the new submenu in the file menu  and select the java project command  there is also a small icon in the toolbar that you can click to start a java project  in the window that pops up  it is only necessary to fill in a project name for the project and click the finish button the project name can be anything you like the project should appear in the package explorer view click on the small triangle next to the project name to see the contents of the project assuming that you use the default settings  there should be a directory named src  which is where your java source code files will go it also contains the jre system library ; this is the collection of standard built-in classes that come with java to run the textio based examples from this textbook  you must add the source code file textio.java to your project if you have downloaded the web site of this book  you can find a copy of textio.java in the source directory alternatively  you can navigate to the file on-line and use the save as command of your web browser to save a copy of the file onto your computer the easiest way to get textio into your project is to locate the source code file on your computer and drag the file icon onto the project name in the eclipse window if that doesn t work  you can try using copy-and-paste  right-click the file icon  or control-click on mac os   select copy from the pop-up menu  right-click the project name in the eclipse window  and select paste  if you also have trouble with that  you can try using the import command in the file menu ; select file system in the window that pops up  click next  and provide the necessary information in the next window  unfortunately  using the file import window is rather complicated if you find that you have to use it  you should consult the eclipse documentation about it  in any case  textio should appear in the src dirctory of your project  inside a package named default package  once a file is in this list  you can open it by double-clicking it ; it will appear in the editing area of the eclipse window to run any of the java programs from this textbook  copy the source code file into your eclipse java project in the same way that you did for textio.java to run the program  rightclick the file name in the package explorer view  or control-click in mac os   in the menu that pops up  go to the run as submenu  and select java application  the program will be executed if the program writes to standard output  the output will appear in the console view  under the editing area if the program uses textio for input  you will have to type the required input into the console view click the console view before you start typing  so that the characters that you type will be sent to the correct part of the window  note that if you don t like doing i/o in the console view  you can use an alternative version of textio.java that opens a separate window for i/o you can find this gui version of textio in a directory named textio-gui inside this textbook s source directory  you can have more than one program in the same eclipse project  or you can create additional projects to organize your work better remember to place a copy of textio.java in any project that requires it to create your own java program  you must create a new java class to do this  right-click the java project name in the project explorer view go to the new submenu of the popup menu  and select class  in the window that opens  type in the name of the class  and click the finish button the class name must be a legal java identifier note that you want the name of the class  not the name of the source code file  so don t add .java at the end of the name the class should appear inside the default package  and it should automatically open chapter  names and things 55 in the editing area so that you can start typing in your program eclipse has several features that aid you as you type your code it will underline any syntax error with a jagged red line  and in some cases will place an error marker in the left border of the edit window if you hover the mouse cursor over the error marker  a description of the error will appear note that you do not have to get rid of every error immediately as you type ; some errors will go away as you type in more of the program if an error marker displays a small light bulb  eclipse is offering to try to fix the error for you click the light bulb to get a list of possible fixes  then double click the fix that you want to apply for example  if you use an undeclared variable in your program  eclipse will offer to declare it for you you can actually use this error-correcting feature to get eclipse to write certain types of code for you ! unfortunately  you ll find that you won t understand a lot of the proposed fixes until you learn more about the java language  and it is not usually a good idea to apply a fix that you don t understand another nice eclipse feature is code assist code assist can be invoked by typing controlspace it will offer possible completions of whatever you are typing at the moment for example  if you type part of an identifier and hit control-space  you will get a list of identifiers that start with the characters that you have typed ; use the up and down arrow keys to select one of the items in the list  and press return or enter  or hit escape to dismiss the list  if there is only one possible completion when you hit control-space  it will be inserted automatically by default  code assist will also pop up automatically  after a short delay  when you type a period or certain other characters for example  if you type textio and pause for just a fraction of a second  you will get a list of all the subroutines in the textio class personally  i find this auto-activation annoying you can disable it in the eclipse preferences  look under java / editor / code assist  and turn off the enable auto activation option  you can still call up code assist manually with control-space once you have an error-free program  you can run it as described above  by right-clicking its name in the package explorer and using run as / java application  if you find a problem when you run it  it s very easy to go back to the editor  make changes  and run it again note that using eclipse  there is no explicit compile command the source code files in your project are automatically compiled  and are re-compiled whenever you modify them if you use netbeans instead of eclipse  the procedures are similar you still have to create new project  of type java application   you can add an existing source code file to a project by dragging the file onto the source packages folder in the project  and you can create your own classes by right-clicking the project name and selecting new/java class to run a program  right-click the file that contains the main routine  and select the run file command netbeans has a code completion feature that is similar to eclipse s code assist one thing that you have to watch with netbeans is that it might want to create classes in  non-default  packages ; when you create a new java class  make sure that the package input box is left blank .6.4 the problem of packages every class in java is contained in something called a package classes that are not explicitly put into a different package are in the default package almost all the examples in this textbook are in the default package  and i will not even discuss packages in any depth until section 4.5 however  some ides might force you to pay attention to packages when you create a class in eclipse  you might notice a message that says that the use of the default package is discouraged although this is true  i have chosen to use it anyway  since it seems easier for beginning programmers to avoid the whole issue of packages  at least at first chapter  names and things 56 some ides  like netbeans  might be even less willing than eclipse to use the default package if you create a class in a package  the source code starts with a line that specifies which package the class is in for example  if the class is in a package named test.pkg  then the first line of the source code will be package test.pkg ; in an ide  this will not cause any problem unless the program you are writing depends on textio you will not be able to use textio in a program unless textio is in the same package as the program you can put textio in a non-default package  as long as the source code file textio.java is modified to specify the package ; just add a package statement to the beginning of the file  using the same package name as the program  the ide might do this for you  if you copy textio.java into a non-default package  once you ve done this  the example should run in the same way as if it were in the default package by the way  if you use packages in a command-line environment  other complications arise for example  if a class is in a package named test.pkg  then the source code file must be in a subdirectory named pkg inside a directory named test that is in turn inside your main java working directory nevertheless  when you compile or execute the program  you should be in the main directory  not in a subdirectory when you compile the source code file  you have to include the name of the directory in the command  use javac test/pkg/classname.java on linux or mac os  or javac test \ pkg \ classname.java on windows the command for executing the program is then java test.pkg.classname  with a period separating the package name from the class name however  you will not need to worry about any of that when working with almost all of the examples in this boo 