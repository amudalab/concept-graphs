confused with trie::confused with trie
type of tree::type of tree
tree data structure::tree data structure
structure this article::structure this article
article needs additional::article needs additional
citations for verification::citations for verification
improve this article::improve this article
article by adding::article by adding
citations to reliable::citations to reliable
reliable sources unsourced::reliable sources unsourced
sources unsourced material::sources unsourced material
challenged and removed::challenged and removed
simple unordered tree::simple unordered tree
parent in computer::parent in computer
widely used abstract::widely used abstract
abstract data type::abstract data type
data structure implementing::data structure implementing
implementing this adt::implementing this adt
adt that simulates::adt that simulates
simulates a hierarchical::simulates a hierarchical
hierarchical tree structure::hierarchical tree structure
value and subtrees::value and subtrees
subtrees of children::subtrees of children
set of linked::set of linked
nodes a tree::nodes a tree
collection of nodes::collection of nodes
data structure consisting::data structure consisting
list of references::list of references
references to nodes::references to nodes
reference is duplicated::reference is duplicated
represented and worked::represented and worked
separately by node::separately by node
list of nodes::list of nodes
list of edges::list of edges
edges between nodes::edges between nodes
represent a digraph::represent a digraph
type vs data::type vs data
external links definition::external links definition
two non-connected parts::two non-connected parts
trivially a tree::trivially a tree
tree a tree::tree a tree
data structure made::data structure made
nodes or vertices::nodes or vertices
vertices and edges::vertices and edges
cycle the tree::cycle the tree
null orempty tree::null orempty tree
potentially many levels::potentially many levels
levels of additional::levels of additional
nodes that form::nodes that form
form a hierarchy::form a hierarchy
root the top::root the top
tree * parent::tree * parent
parent the converse::parent the converse
notion of child::notion of child
child * siblings::child * siblings
parent * descendant::parent * descendant
descendant a node::descendant a node
reachable by repeated::reachable by repeated
proceeding from parent::proceeding from parent
parent to child::parent to child
child * ancestor::child * ancestor
ancestor a node::ancestor a node
proceeding from child::proceeding from child
child to parent::child to parent
parent * leaf::parent * leaf
leaf a node::leaf a node
children * internal::children * internal
node a node::node a node
child * external::child * external
children * degree::children * degree
number of sub::number of sub
node * edge::node * edge
path a sequence::path a sequence
sequence of nodes::sequence of nodes
nodes and edges::nodes and edges
connecting a node::connecting a node
descendant * level::descendant * level
level the level::level the level
node is defined::node is defined
number of connections::number of connections
root * height::root * height
height of tree::height of tree
tree the height::tree the height
number of edges::number of edges
longest downward path::longest downward path
leaf * height::leaf * height
height of node::height of node
node the height::node the height
leaf * depth::leaf * depth
depth the depth::depth the depth
tree s root::tree s root
node * forest::node * forest
forest a forest::forest a forest
disjoint trees data::disjoint trees data
trees data type::trees data type
concrete data structure::concrete data structure
value and children::value and children
tree are interpreted::tree are interpreted
list of children::list of children
case the list::case the list
group of nodes::group of nodes
structure actually defines::structure actually defines
defines a directed::defines a directed
two references point::two references point
tree that violates::tree that violates
references to trees::references to trees
linked tree data::linked tree data
discussed implicitly assuming::discussed implicitly assuming
represented by references::represented by references
type a tree::type a tree
tree is defined::tree is defined
list of trees::list of trees
possibly an empty::possibly an empty
tree t consists::tree t consists
defined in terms::defined in terms
terms of values::terms of values
assumes referential transparency::assumes referential transparency
lists of values::lists of values
list possibly empty::list possibly empty
references possibly null::references possibly null
node n consists::node n consists
data structure defines::data structure defines
add a condition::add a condition
reference can point::reference can point
root in fact::root in fact
node a list::node a list
analyzing its global::analyzing its global
topologically a tree::topologically a tree
defined below type::defined below type
abstract tree type::abstract tree type
abstract forest type::abstract forest type
terms of type::terms of type
inductive type defined::inductive type defined
tree with root::tree with root
generally with values::generally with values
root " direction::root " direction
underlying undirected graph::underlying undirected graph
vertices are connected::vertices are connected
vertex is designated::vertex is designated
determines the direction::determines the direction
node often trees::node often trees
two child nodes::two child nodes
two non-empty child::two non-empty child
non-empty child nodes::non-empty child nodes
allowing empty trees::allowing empty trees
empty trees makes::empty trees makes
makes some definitions::makes some definitions
trees are allowed::trees are allowed
empty trees simplify::empty trees simplify
trees simplify defining::trees simplify defining
simplify defining fixed::simplify defining fixed
defining fixed branching::defining fixed branching
fixed branching factor::fixed branching factor
empty trees allowed::empty trees allowed
.the complete sets::.the complete sets
sets of operations::sets of operations
operations on tree::operations on tree
tree must include::tree must include
include fork operation::include fork operation
fork operation terminology::fork operation terminology
value or condition::value or condition
represent a separate::represent a separate
separate data structure::separate data structure
trees are drawn::trees are drawn
child s parent::child s parent
parent an internal::parent an internal
inode for short::inode for short
nodes the topmost::nodes the topmost
root node depending::root node depending
depending on definition::depending on definition
case all trees::case all trees
trees are non-empty::trees are non-empty
pass from parents::pass from parents
parents to children::parents to children
post-order depth-first search::post-order depth-first search
first visit leaf::first visit leaf
visit leaf nodes::visit leaf nodes
access the value::access the value
value of leaf::value of leaf
visit the root::visit the root
access the children::access the children
edges or links::edges or links
node has special::node has special
properties every node::properties every node
tree the depth::tree the depth
node has depth::node has depth
nodes have height::nodes have height
root and leaf::root and leaf
depth and height::depth and height
nodes thus correspond::nodes thus correspond
correspond to subtrees::correspond to subtrees
subtree it determines::subtree it determines
plane ordered trees::plane ordered trees
fixes a conventional::fixes a conventional
arranges the child::arranges the child
first incoming parent::first incoming parent
incoming parent edge::incoming parent edge
first child edge::first child edge
yields an embedding::yields an embedding
determines an ordering::determines an ordering
places the root::places the root
parents above children::parents above children
places all nodes::places all nodes
terms of number::terms of number
obtains a standard::obtains a standard
ways to represent::ways to represent
trees ; common::trees ; common
common representations represent::common representations represent
represent the nodes::represent the nodes
dynamically allocated records::dynamically allocated records
records with pointers::records with pointers
list of lists::list of lists
values are lists::values are lists
value of first::value of first
child in general::child in general
general a node::general a node
expanding the data::expanding the data
include a pointer::include a pointer
child node data::child node data
threaded binary tree::threaded binary tree
binary tree generalizations::binary tree generalizations
generalized to represent::generalized to represent
represent directed graphs::represent directed graphs
graphs by removing::graphs by removing
removing the constraints::removing the constraints
cycles are allowed::cycles are allowed
considered as pairs::considered as pairs
pairs of nodes::pairs of nodes
termsparent and child::termsparent and child
source and target::source and target
implementation strategies exist::implementation strategies exist
local data structure::local data structure
node with value::node with value
value and list::value and list
structures as adjacency::structures as adjacency
lists in graph::lists in graph
connected acyclic graph::connected acyclic graph
graph theory trees::graph theory trees
trees and graphs::trees and graphs
graphs are assumed::graphs are assumed
trees and trees::trees and trees
trees as data::trees as data
arbitrary undirected tree::arbitrary undirected tree
directed by making::directed by making
making them point::making them point
root node producing::root node producing
producing an arborescence::producing an arborescence
arborescence and assign::arborescence and assign
assign an order::assign an order
nodes the result::nodes the result
data structure picking::data structure picking
define an ordered::define an ordered
union of subtrees::union of subtrees
taking the subtree::taking the subtree
erasing the root::erasing the root
subtrees are natural::subtrees are natural
natural for recursion::natural for recursion
forests are natural::forests are natural
natural for corecursion::natural for corecursion
represented by root::represented by root
tree traversal stepping::tree traversal stepping
connections between parents::connections between parents
parents and children::parents and children
walking the tree::walking the tree
node a walk::node a walk
node is traversed::node is traversed
children are traversed::children are traversed
parents are traversed::parents are traversed
node s left::node s left
finally its right::finally its right
subtree are traversed::subtree are traversed
specifically a binary::specifically a binary
walk effectively performs::walk effectively performs
performs a breadth-first::performs a breadth-first
tree ; nodes::tree ; nodes
nodes are traversed::nodes are traversed
level by level::level by level
node is visited::node is visited
direct child nodes::direct child nodes
traversed common operations::traversed common operations
items * enumerating::items * enumerating
enumerating a section::enumerating a section
tree * searching::tree * searching
item * adding::item * adding
tree * deleting::tree * deleting
deleting an item::deleting an item
item * pruning::item * pruning
tree * grafting::tree * grafting
tree * finding::tree * finding
finding the root::finding the root
representing hierarchical data::representing hierarchical data
data * storing::data * storing
binary search tree::binary search tree
tree and tree::tree and tree
representing sorted lists::representing sorted lists
lists of data::lists of data
workflow for compositing::workflow for compositing
compositing digital images::compositing digital images
images for visual::images for visual
effects * routing::effects * routing
structure * tree::structure * tree
tree * single::tree * single
inheritance other trees::inheritance other trees
trie * dsw::trie * dsw
algorithm * enfilade::algorithm * enfilade
enfilade * left::enfilade * left
left child-right sibling::left child-right sibling
child-right sibling binary::child-right sibling binary
sibling binary tree::sibling binary tree
tree * hierarchical::tree * hierarchical
hierarchical temporal memory::hierarchical temporal memory
temporal memory notes::temporal memory notes
ordered directed graph::ordered directed graph
definition of subtree::definition of subtree
subgraph that forms::subgraph that forms
forms a tree::forms a tree
include all descendants::include all descendants
graph theory sense::graph theory sense
data structure sense::data structure sense
mathworld * donald::mathworld * donald
knuth the art::knuth the art
art of computer::art of computer
thomas h cormen::thomas h cormen
charles e leiserson::charles e leiserson
ronald l rivest::ronald l rivest
clifford stein introduction::clifford stein introduction
introduction to algorithms::introduction to algorithms
edition mit press::edition mit press
press and mcgraw-hill::press and mcgraw-hill
representing rooted trees::representing rooted trees
binary search trees::binary search trees
augmenting data structures::augmenting data structures
commons has media::commons has media
related to tree::related to tree
structures * data::structures * data
means of presenting::means of presenting
presenting complex data::presenting complex data
complex data analysis::complex data analysis
knipe * description::knipe * description
dictionary of algorithms::dictionary of algorithms
algorithms and data::algorithms and data
structures * wormweb.org::structures * wormweb.org
elegans cell tree::elegans cell tree
cell tree visualize::cell tree visualize
visualize the entire::visualize the entire
entire cell lineage::entire cell lineage
cell lineage tree::cell lineage tree
nematode c elegans::nematode c elegans
tree data structures::tree data structures
data structures categories::data structures categories
types * trees::types * trees
knowledge representation binary::knowledge representation binary
representation binary tree::representation binary tree
tree from wikipedia::tree from wikipedia
confused with b-tree::confused with b-tree
b-tree a labeled::b-tree a labeled
labeled binary tree::labeled binary tree
tree of size::tree of size
node whose value::node whose value
tree is unbalanced::tree is unbalanced
sorted in computer::sorted in computer
child a recursive::child a recursive
set theory notions::set theory notions
graph theory perspective::graph theory perspective
trees as defined::trees as defined
modern computer science::modern computer science
computer science terminology::computer science terminology
science terminology prevailed::science terminology prevailed
interpret a binary::interpret a binary
case a binary::case a binary
authors use rooted::authors use rooted
rooted binary tree::rooted binary tree
tree to emphasize::tree to emphasize
emphasize the fact::emphasize the fact
tree is rooted::tree is rooted
ordered k-ary tree::ordered k-ary tree
define a labeling::define a labeling
associates some value::associates some value
binary trees labelled::binary trees labelled
implement binary search::implement binary search
trees and binary::trees and binary
searching and sorting::searching and sorting
sorting the designation::sorting the designation
designation of non-root::designation of non-root
nodes as left::nodes as left
child present matters::child present matters
significant in binary::significant in binary
termed binary tree::termed binary tree
tree can vary::tree can vary
significantly from author::significantly from author
author to author::author to author
nt necessarily order::nt necessarily order
graph theory concepts::graph theory concepts
types of binary::types of binary
properties of binary::properties of binary
methods for storing::methods for storing
storing binary trees::storing binary trees
nodes and references::nodes and references
encoding general trees::encoding general trees
trees as binary::trees as binary
7.1.1 leaf nodes::7.1.1 leaf nodes
7.1.2 internal nodes::7.1.2 internal nodes
7.3.1 depth-first order::7.3.1 depth-first order
7.3.2 breadth-first order::7.3.2 breadth-first order
external links definitions::external links definitions
comply with wikipedia::comply with wikipedia
wikipedia s quality::wikipedia s quality
defining a full::defining a full
full binary tree::full binary tree
definition a full::definition a full
formed by taking::formed by taking
adding a vertex::adding a vertex
adding an edge::adding an edge
establish the order::establish the order
order of children::order of children
fix a specific::fix a specific
specific root node::specific root node
define a binary::define a binary
tree in general::tree in general
empty an artifact::empty an artifact
extended binary tree::extended binary tree
tree is needed::tree is needed
purpose an extended::purpose an extended
extended binary trees::extended binary trees
binary tree obtained::binary tree obtained
obtained by adding::obtained by adding
adding a root::adding a root
root r connected::root r connected
sub-trees are non-empty::sub-trees are non-empty
imagining this construction::imagining this construction
understanding the terminology::understanding the terminology
type of node::type of node
node for instance::node for instance
instance square nodes::instance square nodes
a.k.a plane tree::a.k.a plane tree
children a rooted::children a rooted
tree naturally imparts::tree naturally imparts
imparts a notion::imparts a notion
notion of levels::notion of levels
node a notion::node a notion
notion of children::notion of children
level below ordering::level below ordering
distinguish left child::distinguish left child
child from right::child from right
node with left::node with left
made by first::made by first
partitioning the edges::partitioning the edges
defining the binary::defining the binary
tree as triplet::tree as triplet
making the distinction::making the distinction
quoting the encyclopedia::quoting the encyclopedia
encyclopedia of mathematics::encyclopedia of mathematics
plane binary tree::plane binary tree
children an ancestry::children an ancestry
chart which maps::chart which maps
perfect depth-4 binary::perfect depth-4 binary
depth-4 binary tree::depth-4 binary tree
perfect binary tree::perfect binary tree
acomplete or full::acomplete or full
two biological parents::two biological parents
complete binary tree::complete binary tree
tree every level::tree every level
possibly the last::possibly the last
type of binary::type of binary
specialized data structure::specialized data structure
infinite complete binary::infinite complete binary
set of levels::set of levels
root is uncountable::root is uncountable
continuum these paths::continuum these paths
stern brocot tree::stern brocot tree
set of positive::set of positive
positive irrational numbers::positive irrational numbers
balanced binary tree::balanced binary tree
minimum possible maximum::minimum possible maximum
number of leaf::number of leaf
nodes the leaf::nodes the leaf
abcd e abcd::abcd e abcd
common balanced tree::common balanced tree
balanced tree structure::balanced tree structure
binary tree structure::binary tree structure
differ in height::differ in height
means that performance-wise::means that performance-wise
tree will behave::tree will behave
linked list data::linked list data
list data structure::list data structure
data structure properties::data structure properties
number of nodes::number of nodes
number of non-leaf::number of non-leaf
tree with leaves::tree with leaves
leaves has nodes::leaves has nodes
balanced full binary::balanced full binary
perfect full binary::perfect full binary
maximum possible number::maximum possible number
number of null::number of null
exists in bottom-most::exists in bottom-most
number of internal::number of internal
non-empty binary tree::non-empty binary tree
nodes of degree::nodes of degree
cite any references::cite any references
references or sources::references or sources
improve this section::improve this section
section by adding::section by adding
combinatorics one considers::combinatorics one considers
considers the problem::considers the problem
problem of counting::problem of counting
counting the number::counting the number
number of full::number of full
full binary trees::full binary trees
multiply the number::multiply the number
easily determined factor::easily determined factor
trees are distinguished::trees are distinguished
node are distinguished::node are distinguished
produce a tree::produce a tree
trees of size::trees of size
number of ways::number of ways
parenthesizing a string::parenthesizing a string
representing internal nodes::representing internal nodes
determine the argument::determine the argument
operator for instance::operator for instance
parenthesize a string::parenthesize a string
correspondence to binary::correspondence to binary
addition of redundant::addition of redundant
counted as producing::counted as producing
unique binary tree::unique binary tree
tree is characterized::tree is characterized
tree has size::tree has size
number of binary::number of binary
number of index::number of index
set of words::set of words
words of length::words of length
balanced the number::balanced the number
word of length::word of length
dyck subword enclosed::dyck subword enclosed
dyck subword remaining::dyck subword remaining
trees a bijective::trees a bijective
enclose the dyck::enclose the dyck
pair of parentheses::pair of parentheses
lisp list expression::lisp list expression
fully parenthesized expression::fully parenthesized expression
nil as symbol::nil as symbol
fact the internal::fact the internal
ability to represent::ability to represent
represent binary trees::represent binary trees
trees as strings::trees as strings
strings of symbols::strings of symbols
symbols and parentheses::symbols and parentheses
implies that binary::implies that binary
trees can represent::trees can represent
represent the elements::represent the elements
singleton set methods::singleton set methods
constructed from programming::constructed from programming
programming language primitives::programming language primitives
language with records::language with records
records and references::records and references
tree node structure::tree node structure
data and references::data and references
node has fewer::node has fewer
special null value::special null value
special sentinel node::special sentinel node
node this method::node this method
method of storing::method of storing
binary trees wastes::binary trees wastes
wastes a fair::wastes a fair
bit of memory::bit of memory
conservative representation alternative::conservative representation alternative
alternative is threaded::alternative is threaded
languages with tagged::languages with tagged
types of nodes::types of nodes
3-tuple of data::3-tuple of data
leaf " node::leaf " node
data and functions::data and functions
language with pointers::language with pointers
line of code::line of code
code in ocaml::code in ocaml
defines a binary::defines a binary
tree that stores::tree that stores
stores a character::stores a character
chr_tree = empty::chr_tree = empty
empty | node::empty | node
node of char::node of char
stored in breadth-first::stored in breadth-first
implicit data structure::implicit data structure
structure in arrays::structure in arrays
wastes no space::wastes no space
children are found::children are found
found at indices::found at indices
found at index::found at index
assuming the root::assuming the root
root has index::root has index
locality of reference::locality of reference
expensive to grow::expensive to grow
grow and wastes::grow and wastes
wastes space proportional::wastes space proportional
tree of depth::tree of depth
nodes this method::nodes this method
method of storage::method of storage
heaps no space::heaps no space
space is wasted::space is wasted
wasted because nodes::wasted because nodes
nodes are added::nodes are added
added in breadth-first::added in breadth-first
breadth-first order encodings::breadth-first order encodings
succinct data structure::succinct data structure
close to minimum::close to minimum
minimum possible space::minimum possible space
established by information::established by information
information theoretical lower::information theoretical lower
theoretical lower bounds::theoretical lower bounds
bounds the number::bounds the number
trees on nodes::trees on nodes
assuming we view::assuming we view
trees with identical::trees with identical
structure as identical::structure as identical
bits to encode::bits to encode
succinct binary tree::succinct binary tree
bits one simple::bits one simple
representation which meets::representation which meets
meets this bound::meets this bound
visit the nodes::visit the nodes
tree in preorder::tree in preorder
tree contains data::tree contains data
simply simultaneously store::simply simultaneously store
array in preorder::array in preorder
preorder this function::preorder this function
nil then append::nil then append
structure ; append::structure ; append
n.data to data::n.data to data
data ; encodesuccinct::data ; encodesuccinct
store its length::store its length
length to show::length to show
information is lost::information is lost
convert the output::convert the output
remove first bit::remove first bit
bit of structure::bit of structure
structure and put::structure and put
node n remove::node n remove
remove first element::remove first element
element of data::element of data
data and put::data and put
n.left = decodesuccinct::n.left = decodesuccinct
n.right = decodesuccinct::n.right = decodesuccinct
sophisticated succinct representations::sophisticated succinct representations
storage of trees::storage of trees
succinct form encoding::succinct form encoding
form encoding general::form encoding general
mapping between general::mapping between general
general ordered trees::general ordered trees
lisp to represent::lisp to represent
represent general ordered::represent general ordered
trees to convert::trees to convert
convert a general::convert a general
general ordered tree::general ordered tree
tree to binary::tree to binary
represent the general::represent the general
tree in left::tree in left
automatically binary tree::automatically binary tree
perspective each node::perspective each node
ordered tree corresponds::ordered tree corresponds
first child ofn::first child ofn
node in order::node in order
binary tree representation::binary tree representation
general order tree::general order tree
doubly chained tree::doubly chained tree
node s children::node s children
beginning or head::beginning or head
right the binary::right the binary
original tree tilted::original tree tilted
tree tilted sideways::tree tilted sideways
black left edges::black left edges
left edges representing::left edges representing
edges representing first::edges representing first
representing first child::representing first child
blue right edges::blue right edges
right edges representing::right edges representing
representing next sibling::representing next sibling
sibling the leaves::sibling the leaves
written in lisp::written in lisp
implemented in memory::implemented in memory
left child common::left child common
child common operations::child common operations
common internal operations::common internal operations
operations on self-balancing::operations on self-balancing
self-balancing binary trees::self-balancing binary trees
performed on binary::performed on binary
return useful information::return useful information
inserted into binary::inserted into binary
two other nodes::two other nodes
nodes or added::nodes or added
node in binary::node in binary
node after leaf::node after leaf
node assigns node::node assigns node
parent internal nodes::parent internal nodes
process of inserting::process of inserting
inserting a node::inserting a node
binary tree insertion::binary tree insertion
insertion on internal::insertion on internal
slightly more complex::slightly more complex
node is node::node is node
insert a right::insert a right
left child insertion::left child insertion
assigns its child::assigns its child
assigns its parent::assigns its parent
node is removed::node is removed
process of deleting::process of deleting
deleting an internal::deleting an internal
binary tree suppose::binary tree suppose
node to delete::node to delete
delete is node::delete is node
deletion is accomplished::deletion is accomplished
accomplished by setting::accomplished by setting
setting the child::setting the child
parent to null::parent to null
set the parent::set the parent
parent and set::parent and set
set the child::set the child
including binary search::including binary search
tree structure traversal::tree structure traversal
tree traversal pre-order::tree traversal pre-order
post-order traversal visit::post-order traversal visit
visit each node::visit each node
visiting each node::visiting each node
root depth-first order::root depth-first order
attempt to visit::attempt to visit
visit the node::visit the node
unlike a depth-first::unlike a depth-first
search on graphs::search on graphs
information breadth-first order::information breadth-first order
contrasting with depth-first::contrasting with depth-first
order is breadth-first::order is breadth-first
attempts to visit::attempts to visit
visited see breadth-first::visited see breadth-first
node s breadth-index::node s breadth-index
root reading bitwise::root reading bitwise
bitwise from left::bitwise from left
starting at bit::starting at bit
node s distance::node s distance
node in question::node in question
breadth-index is masked::breadth-index is masked
masked at bit::masked at bit
1mean to step::1mean to step
step either left::step either left
node s parent::node s parent
trade-off between iterating::trade-off between iterating
iterating a complete::iterating a complete
versus each node::versus each node
tree * ahnentafel::tree * ahnentafel
ahnentafel * avl::ahnentafel * avl
tree * b-tree::tree * b-tree
b-tree * binary::b-tree * binary
binary space partitioning::binary space partitioning
partitioning * huffman::partitioning * huffman
tree * k-ary::tree * k-ary
tree * kraft::tree * kraft
kraft s inequality::kraft s inequality
inequality * optimal::inequality * optimal
optimal binary search::optimal binary search
tree * random::tree * random
random binary tree::random binary tree
tree * recursion::tree * recursion
red black tree::red black tree
tree * rope::tree * rope
self-balancing binary search::self-balancing binary search
tree * splay::tree * splay
tree * strahler::tree * strahler
number * tree::number * tree
tree of primitive::tree of primitive
primitive pythagorean triples::primitive pythagorean triples
triples # alternative::triples # alternative
methods of generating::methods of generating
generating the tree::generating the tree
tree * unrooted::tree * unrooted
unrooted binary tree::unrooted binary tree
binary tree references::binary tree references
garnier ; john::garnier ; john
structures and applications::structures and applications
edition crc press::edition crc press
steven s skiena::steven s skiena
algorithm design manual::algorithm design manual
design manual springer::design manual springer
manual springer science::manual springer science
science & business::science & business
programming system prentice-hall::programming NNP prentice-hall
7th edition mcgraw-hill::7th edition mcgraw-hill
edition mcgraw-hill science::edition mcgraw-hill science
david r mazur::david r mazur
guided tour mathematical::guided tour mathematical
tour mathematical association::tour mathematical association
association of america::association of america
logic and maths::logic and maths
maths for computing::maths for computing
computing springer science::computing springer science
jonathan l gross::jonathan l gross
methods with computer::methods with computer
computer applications crc::computer applications crc
applications crc press::applications crc press
encyclopedia of mathematics,springer::encyclopedia of mathematics,springer
print as michiel::print as michiel
.encyclopaedia of mathematics::.encyclopaedia of mathematics
supplement i springer::supplement i springer
graph theory applications::graph theory applications
theory applications springer::theory applications springer
applications springer science::applications springer science
applications 7th edition::applications 7th edition
combinatorial algorithms courier::combinatorial algorithms courier
algorithms courier dover::algorithms courier dover
courier dover publications::courier dover publications
hsu ; cheng-kuan::hsu ; cheng-kuan
theory and interconnection::theory and interconnection
interconnection networks crc::interconnection networks crc
networks crc press::networks crc press
parameterized complexity theory::parameterized complexity theory
complexity theory springer::complexity theory springer
aaron m tenenbaum::aaron m tenenbaum
paul e black::paul e black
entry for data::entry for data
structure in dictionary::structure in dictionary
data structures u.s::data structures u.s
structures u.s national::structures u.s national
u.s national institute::u.s national institute
institute of standards::institute of standards
standards and technology::standards and technology
december 2004.online version::december 2004.online version
2004.online version accessed::2004.online version accessed
dinesh ; sartaj::dinesh ; sartaj
handbook of data::handbook of data
structures and applications.chapman::structures and applications.chapman
applications.chapman and hall::applications.chapman and hall
classic data structures::classic data structures
data structures phi::data structures phi
structures phi learning::structures phi learning
phi learning pvt::phi learning pvt
michael l scott::michael l scott
programming language pragmatics::programming language pragmatics
dung x nguyen::dung x nguyen
rice.edu retrieved december::rice.edu retrieved december
december 28,2010 bibliography::december 28,2010 bibliography
computer programming vol::computer programming vol
isbn 0-201-89683-4 section::isbn 0-201-89683-4 section
related to binary::related to binary
trees * binary::trees * binary
binary trees entry::binary trees entry
database * gamedev.net::database * gamedev.net
introduction on binary::introduction on binary
proof by induction::proof by induction
induction * balanced::induction * balanced
balanced binary search::balanced binary search
tree on array::tree on array
bottom-up an ahnentafel::bottom-up an ahnentafel
data structures search::data structures search
structures search trees::structures search trees
dynamic sets arrays::dynamic JJ arrays
search * dancing::search * dancing
dancing * htree::dancing * htree
htree * interval::htree * interval
interval * order::interval * order
red-black * scapegoat::red-black * scapegoat
scapegoat * splay::scapegoat * splay
heaps * binary::heaps * binary
binary * binomial::binary * binomial
binomial * fibonacci::binomial * fibonacci
fibonacci * leftist::fibonacci * leftist
leftist * pairing::leftist * pairing
pairing * skew::pairing * skew
skew * van::skew * van
van emde boas::van emde boas
hash * radix::hash * radix
radix * suffix::radix * suffix
suffix * ternary::suffix * ternary
search * x-fast::search * x-fast
x-fast * y-fast::x-fast * y-fast
y-fast spatial data::y-fast spatial data
spatial data partitioning::spatial data partitioning
data partitioning trees::data partitioning trees
bsp * cartesian::bsp * cartesian
cartesian * hilbert::cartesian * hilbert
metric * mvp::metric * mvp
mvp * octree::mvp * octree
octree * priority::octree * priority
trees * cover::trees * cover
cover * exponential::cover * exponential
exponential * fenwick::exponential * fenwick
fenwick * finger::fenwick * finger
finger * fusion::finger * fusion
fusion * hash::fusion * hash
calendar * idistance::calendar * idistance
idistance * k-ary::idistance * k-ary
k-ary * left-child::k-ary * left-child
merge * merkle::merge * merkle
range * spqr::range * spqr
spqr * top::spqr * top
trees * data::trees * data
data structures binary::data structures binary
structures binary search::structures binary search
free encyclopedia binary::free encyclopedia binary
encyclopedia binary search::encyclopedia binary search
search tree type::search tree type
tree type tree::tree type tree
type tree invented::type tree invented
invented by p.f::invented by p.f
hibbard time complexity::hibbard time complexity
complexity in big::complexity in big
big o notation::big o notation
notation average worst::notation average worst
average worst case::average worst case
worst case space::worst case space
root the leaves::root the leaves
drawn in computer::drawn in computer
ordered or sorted::ordered or sorted
sorted binary trees::sorted binary trees
store " items::store " items
addition and removal::addition and removal
removal of items::removal of items
implement either dynamic::implement either dynamic
sets of items::sets of items
finding an item::finding an item
finding the phone::finding the phone
keys in sorted::keys in sorted
principle of binary::principle of binary
place to insert::place to insert
traverse the tree::traverse the tree
tree from root::tree from root
root to leaf::root to leaf
comparisons to keys::comparisons to keys
tree and deciding::tree and deciding
subtrees on average::subtrees on average
operations to skip::operations to skip
insertion or deletion::insertion or deletion
takes time proportional::takes time proportional
number of items::number of items
timerequired to find::timerequired to find
items by key::items by key
operations on hash::operations on hash
hash tables contents::hash tables contents
priority queue operations::priority queue operations
nodes each store::nodes each store
store a key::store a key
two distinguished sub-trees::two distinguished sub-trees
commonly denoted left::commonly denoted left
left and right::left and right
right the tree::right the tree
tree additionally satisfies::tree additionally satisfies
satisfies the binary::satisfies the binary
search tree property::search tree property
keys in right::keys in right
structure to distinguish::structure to distinguish
leaf or nil::leaf or nil
single data element::single data element
nodes are compared::nodes are compared
records the major::records the major
advantage of binary::advantage of binary
related sorting algorithms::related sorting algorithms
algorithms and search::algorithms and search
easy to code::easy to code
code binary search::code binary search
fundamental data structure::fundamental data structure
construct more abstract::construct more abstract
abstract data structures::abstract data structures
tree totally depends::tree totally depends
order of insertions::order of insertions
inserting or searching::inserting or searching
element in binary::element in binary
inserted or found::inserted or found
takes a long::takes a long
search an element::search an element
long intermixed sequence::long intermixed sequence
sequence of random::sequence of random
insertion and deletion::insertion and deletion
tree approaches square::tree approaches square
approaches square root::approaches square root
number of keys::number of keys
grows much faster::grows much faster
faster than log::faster than log
log n operations::log n operations
search trees support::search trees support
support three main::support three main
insertion of keys::insertion of keys
deletion of keys::deletion of keys
key is present::key is present
requires a comparator::requires a comparator
computes the total::computes the total
keys this comparator::keys this comparator
tree was implemented::tree was implemented
implemented a common::implemented a common
search tree searching::search tree searching
searching a binary::searching a binary
process we begin::process we begin
begin by examining::begin by examining
examining the root::examining the root
tree is null::tree is null
search is successful::search is successful
return the node::return the node
search the left::search the left
key is greater::key is greater
search the right::search the right
subtree this process::subtree this process
process is repeated::process is repeated
key is found::key is found
subtree is null::subtree is null
subtree is reached::subtree is reached
initially with node::initially with node
node = root::node = root
root if node::root if node
node = null::node = null
null or node.key::null or node.key
node.key = key::node.key = key
key then return::key then return
key < node.key::key < node.key
node.key then return::node.key then return
root while current-node::root while current-node
current-node.key = key::current-node.key = key
key < current-node.key::key < current-node.key
current-node.key then current-node::current-node.key then current-node
current-node.left else current-node::current-node.left else current-node
current-node current-node.right return::current-node current-node.right return
current-node.right return null::current-node.right return null
case this algorithm::case this algorithm
algorithm must search::algorithm must search
search operation takes::search operation takes
tree s height::tree s height
unbalanced tree resembles::unbalanced tree resembles
resembles a linked::resembles a linked
search would begin::search would begin
reach an external::reach an external
node and add::node and add
right or left::right or left
node s key::node s key
examine the root::examine the root
typical binary search::typical binary search
search tree insertion::search tree insertion
data < root::data < root-
root > data::root- > data
root > left::root- > left
data > root::data > root-
root > right::root- > right
destructive procedural variant::destructive procedural variant
procedural variant modifies::procedural variant modifies
modifies the tree::modifies the tree
tree in place::tree in place
constant heap space::constant heap space
version uses constant::version uses constant
constant stack space::constant stack space
tree is lost::tree is lost
reconstruct all ancestors::reconstruct all ancestors
original tree root::original tree root
tree root remains::tree root remains
root remains valid::root remains valid
making the tree::making the tree
tree a persistent::tree a persistent
persistent data structure::persistent data structure
requires time proportional::requires time proportional
order to insert::order to insert
key is first::key is first
root s left::root s left
root s right::root s right
child this process::child this process
node is compared::node is compared
node s right::node s right
ways of inserting::ways of inserting
preserving the bst::preserving the bst
bst structure deletion::bst structure deletion
deleting a node::deleting a node
remove the node::remove the node
node and replace::node and replace
child * deleting::child * deleting
call the node::call the node
in-order successor node::in-order successor node
in-order predecessor node::in-order predecessor node
copy the value::copy the value
recursively call delete::recursively call delete
first two cases::first two cases
choose in-order successor::choose in-order successor
right sub tree::right sub tree
case is node::case is node
successor is node::successor is node
cases broadly speaking::cases broadly speaking
nodes with children::nodes with children
children are harder::children are harder
harder to delete::harder to delete
node s in-order::node s in-order
subtree s left-most::subtree s left-most
subtree s right-most::subtree s right-most
two simpler cases::two simpler cases
cases above deleting::cases above deleting
first the rightmost::first the rightmost
identified its value::identified its value
value is copied::value is copied
node being deleted::node being deleted
deleted the inorder::deleted the inorder
inorder successor labelled::inorder successor labelled
case can lead::case can lead
times runtime analysis::times runtime analysis
case it requires::case it requires
visit any node::visit any node
node twice def::node twice def
current_node = current_node.left_child::current_node = current_node.left_child
current_node.left_child return current_node::current_node.left_child return current_node
return current_node def::return current_node def
current_node def replace_node_in_parent::current_node def replace_node_in_parent
self.parent.left_child = new_value::self.parent.left_child = new_value
self.parent.right_child = new_value::self.parent.right_child = new_value
new_value if new_value::new_value if new_value
new_value.parent = self.parent::new_value.parent = self.parent
self.parent def binary_tree_delete::self.parent def binary_tree_delete
key < self.key::key < self.key
key > self.key::key > self.key
delete the key::delete the key
self.left_child and self.right_child::self.left_child and self.right_child
children are present::children are present
successor = self.right_child.find_min::successor = self.right_child.find_min
self.key = successor.key::self.key = successor.key
left * child::left * child
right * child::right * child
traversing the left::traversing the left
accessing the node::accessing the node
traversing the right::traversing the right
continuing this pattern::continuing this pattern
conduct a pre-order::conduct a pre-order
trees an in-order::trees an in-order
list of node::list of node
code for in-order::code for in-order
traversal in python::traversal in python
tree def traverse_binary_tree::tree def traverse_binary_tree
visit every node::visit every node
node this algorithm::node this algorithm
asymptotically optimal sort::asymptotically optimal sort
sort a binary::sort a binary
implement a simple::implement a simple
simple sorting algorithm::simple sorting algorithm
sorting algorithm similar::sorting algorithm similar
similar to heapsort::similar to heapsort
ordered data structure::ordered data structure
order the worst-case::order the worst-case
list of values::list of values
subtrees for example,build_binary_tree::subtrees for example,build_binary_tree
yields the tree::yields the tree
schemes for overcoming::schemes for overcoming
overcoming this flaw::overcoming this flaw
flaw with simple::flaw with simple
simple binary trees::simple binary trees
procedure is done::procedure is done
sort in practice::sort in practice
poor cache performance::poor cache performance
performance and added::performance and added
asymptotically optimal sorts::asymptotically optimal sorts
heapsort for static::heapsort for static
static list sorting::static list sorting
methods of incremental::methods of incremental
keeping the list::keeping the list
bst this problem::bst this problem
simple recursive solution::simple recursive solution
solution the bst::solution the bst
property every node::property every node
poses the question::poses the question
key to figuring::key to figuring
algorithm simply traverse::algorithm simply traverse
child and smaller::child and smaller
meets the condition::meets the condition
right child hold::right child hold
making a decision::making a decision
violating the bst::violating the bst
bst property contract::bst property contract
subtree to make::subtree to make
subtree is greater::subtree is greater
subtree is lesser::subtree is lesser
parent a recursive::parent a recursive
data ; treenode::data ; treenode
treenode * left::treenode * left
left ; treenode::left ; treenode
treenode * node::treenode * node
node > data::node- > data
data < mindata::data < mindata
data > maxdata::data > maxdata
false ; return::false ; return
node > left::node- > left
creating a valid::creating a valid
recursively priority queue::recursively priority queue
trees can serve::trees can serve
serve as priority::serve as priority
insertion of arbitrary::insertion of arbitrary
lookup and deletion::lookup and deletion
key insertion works::key insertion works
previously explained find-min::previously explained find-min
explained find-min walks::explained find-min walks
walks the tree::walks the tree
hitting a leaf::hitting a leaf
leaf function find-min::leaf function find-min
find-max is analogous::find-max is analogous
follow right pointers::follow right pointers
unlike a binary::unlike a binary
priority queue implementations::priority queue implementations
tree can support::tree can support
find-max,delete-min and delete-max::find-max,delete-min and delete-max
making binary search::making binary search
search trees suitable::search trees suitable
suitable as double-ended::suitable as double-ended
double-ended priority queues::double-ended priority queues
search trees avl::search trees avl
trees avl trees::trees avl trees
trees and red-black::trees and red-black
forms of self-balancing::forms of self-balancing
trees a splay::trees a splay
moves frequently accessed::moves frequently accessed
frequently accessed elements::frequently accessed elements
accessed elements nearer::accessed elements nearer
node also holds::node also holds
node has higher::node has higher
children tango trees::children tango trees
trees are trees::trees are trees
two other titles::two other titles
titles describing binary::titles describing binary
describing binary search::describing binary search
complete and degenerate::complete and degenerate
tree a complete::tree a complete
filled from left::filled from left
left to right::left to right
right in complete::right in complete
number of existing::number of existing
nodes at level::nodes at level
levels an additional::levels an additional
exist must fill::exist must fill
fill from left::fill from left
right a degenerate::right a degenerate
added node function::added node function
construct a degenerate::construct a degenerate
tree by feeding::tree by feeding
data structure performance::data structure performance
structure performance comparisons::structure performance comparisons
presented a performance::presented a performance
comparison of binary::comparison of binary
search trees treap::search trees treap
treap was found::treap was found
tree was found::tree was found
amount of performance::amount of performance
performance variations optimal::performance variations optimal
variations optimal binary::variations optimal binary
search tree tree::search tree tree
tree tree rotations::tree tree rotations
operations in binary::operations in binary
plan on modifying::plan on modifying
modifying a search::modifying a search
expected search cost::expected search cost
speed up lookups::speed up lookups
lookups on average::lookups on average
bst of english::bst of english
balance the tree::balance the tree
based on word::based on word
word frequency intext::word frequency intext
frequency intext corpora::frequency intext corpora
root and words::root and words
words like agerasia::words like agerasia
compared with huffman::compared with huffman
seek to place::seek to place
frequently used items::frequently used items
root in order::root in order
order to produce::order to produce
produce a dense::produce a dense
dense information encoding::dense information encoding
huffman trees store::huffman trees store
trees store data::trees store data
store data elements::store data elements
accessed in advance::accessed in advance
asymptotically as good::asymptotically as good
static search tree::static search tree
sequence of lookup::sequence of lookup
lookup operations alphabetic::lookup operations alphabetic
operations alphabetic trees::operations alphabetic trees
trees are huffman::trees are huffman
constraint on order::constraint on order
elements are stored::elements are stored
leaves faster algorithms::leaves faster algorithms
faster algorithms exist::faster algorithms exist
exist for optimal::exist for optimal
optimal alphabetic binary::optimal alphabetic binary
alphabetic binary trees::alphabetic binary trees
tree * binary::tree * binary
binary search algorithm::binary search algorithm
algorithm * randomized::algorithm * randomized
randomized binary search::randomized binary search
tree * tango::tree * tango
trees * self-balancing::trees * self-balancing
tree * geometry::tree * geometry
geometry of binary::geometry of binary
trees * red-black::trees * red-black
tree * avl::tree * avl
trees * day::trees * day
day stout warren::day stout warren
stout warren algorithm::stout warren algorithm
warren algorithm references::warren algorithm references
kurt ; sanders::kurt ; sanders
basic toolbox springer::basic toolbox springer
behavior of binary::behavior of binary
search tree data::search tree data
gaston " optimal::gaston " optimal
scientific computation eth::scientific computation eth
eth z rich::eth z rich
data structures nist::data structures nist
nist * cormen::nist * cormen
press & mcgraw-hill::press & mcgraw-hill
0-262-03293-7 * jarc::0-262-03293-7 * jarc
binary tree traversals::binary tree traversals
interactive data structure::interactive data structure
data structure visualizations::data structure visualizations
structure visualizations university::structure visualizations university
university of maryland::university of maryland
maryland * knuth::maryland * knuth
binary tree searching::binary tree searching
sorting and searching::sorting and searching
sean " binary::sean " binary
structures and algorithms::structures and algorithms
algorithms visualization-a powerpoint::algorithms visualization-a powerpoint
visualization-a powerpoint slides::visualization-a powerpoint slides
powerpoint slides based::powerpoint slides based
slides based approach::slides based approach
based approach suny::based approach suny
approach suny oneonta::approach suny oneonta
oneonta * parlante::oneonta * parlante
education library stanford::education library stanford
library stanford university::library stanford university
stanford university external::stanford university external
university external links::university external links
implementations of binary::implementations of binary
languages on literateprograms::languages on literateprograms
literateprograms * binary::literateprograms * binary
binary tree visualizer::binary tree visualizer
bt-based data structures::bt-based data structures
kubo " binary::kubo " binary
ponden n semin::ponden n semin
programovania * madru::programovania * madru
implementation * binary::implementation * binary
references to pointers::references to pointers
binary tree implementation::binary tree implementation
types * search::types * search
trees avl tree::trees avl tree
free encyclopedia avl::free encyclopedia avl
encyclopedia avl tree::encyclopedia avl tree
avl tree type::avl tree type
invented by georgy::invented by georgy
landis time complexity::landis time complexity
tree in computer::tree in computer
adelson-velsky and landis::adelson-velsky and landis
landis  tree::landis  tree
first such data::first such data
two child subtrees::two child subtrees
rebalancing is done::rebalancing is done
done to restore::done to restore
restore this property::restore this property
average and worst::average and worst
insertions and deletions::insertions and deletions
deletions may require::deletions may require
require the tree::require the tree
rotations the avl::rotations the avl
tree is named::tree is named
two soviet inventors::two soviet inventors
organization of information::organization of information
compared with red-black::compared with red-black
set of operations::set of operations
operations for lookup-intensive::operations for lookup-intensive
trees are faster::trees are faster
faster than red-black::faster than red-black
similar to red-black::similar to red-black
trees are height-balanced::trees are height-balanced
general not weight-balanced::general not weight-balanced
weight-balanced nor -balanced::weight-balanced nor -balanced
hugely differing numbers::hugely differing numbers
numbers of descendants::numbers of descendants
external links operations::external links operations
tree rotations basic::tree rotations basic
rotations basic operations::rotations basic operations
avl tree involve::avl tree involve
tree involve carrying::tree involve carrying
unbalanced binary search::unbalanced binary search
operations called tree::operations called tree
restore the height::restore the height
normal unbalanced binary::normal unbalanced binary
search tree traversal::search tree traversal
explored in amortized::explored in amortized
instances of exploring::instances of exploring
nearby " nodes::nearby " nodes
nodes require traversing::nodes require traversing
moving from node::moving from node
traversal to enter::traversal to enter
enter the subtree::enter the subtree
leave that node::leave that node
node s subtree::node s subtree
cost is found::cost is found
node s ancestors::node s ancestors
ancestors for consistency::ancestors for consistency
invariants of avl::invariants of avl
balancefactor = height::balancefactor = height
rebalance a node::rebalance a node
node in avl::node in avl
tree the numbered::tree the numbered
numbered circles represent::numbered circles represent
nodes being rebalanced::nodes being rebalanced
rebalanced the lettered::rebalanced the lettered
lettered triangles represent::lettered triangles represent
triangles represent subtrees::triangles represent subtrees
balanced avl trees::balanced avl trees
trees a blue::trees a blue
denotes possible balance::denotes possible balance
case of deletion::case of deletion
factor is stored::factor is stored
done during retracing::done during retracing
insertion the height::insertion the height
temporarily recomputed balance::temporarily recomputed balance
recomputed balance factor::recomputed balance factor
balance factor remains::balance factor remains
node is unbalanced::node is unbalanced
rotation is needed::rotation is needed
assume the balance::assume the balance
case is depicted::case is depicted
left left case::left left case
subtree does lean::subtree does lean
rotate the subtree::rotate the subtree
left and end::left and end
case is labelled::case is labelled
left right case::left right case
subtree has balance::subtree has balance
right right case::right right case
right left case::right left case
right to end::right to end
rebalancing is required::rebalancing is required
right case rotate_left::right case rotate_left
reduce to left::reduce to left
left case rotate_right::left case rotate_right
leave the loop::leave the loop
increase is absorbed::increase is absorbed
child whose height::child whose height
rotation a subtree::rotation a subtree
retracing can stop::retracing can stop
stop in order::stop in order
order to restore::order to restore
restore the balance::restore the balance
nodes requiring correction::nodes requiring correction
requiring correction lie::requiring correction lie
procedure is applied::procedure is applied
applied to nodes::applied to nodes
i.e the inserted::i.e the inserted
skip to step::skip to step
finding the largest::finding the largest
node in node::node in node
child and parent::child and parent
links of node::links of node
sequence between nodes::sequence between nodes
parent is null::parent is null
retrace the path::retrace the path
starting with node::starting with node
adjusting the balance::adjusting the balance
factors as needed::factors as needed
deletion the height::deletion the height
temporary balance factor::temporary balance factor
subtree is unbalanced::subtree is unbalanced
cases of rotations::cases of rotations
rotations are depicted::rotations are depicted
depicted in section::depicted in section
section " insertion::section " insertion
picture the small::picture the small
decrease is absorbed::decrease is absorbed
root the retracing::root the retracing
subtree has remained::subtree has remained
higher child tree::higher child tree
subtree has decreased::subtree has decreased
trees are self-balancing::trees are self-balancing
operations to balance::operations to balance
balance the trees::balance the trees
balanced than red-black::balanced than red-black
leading to slower::leading to slower
insertion and removal::insertion and removal
removal but faster::removal but faster
trees * tree::trees * tree
rotation * red-black::rotation * red-black
tree * scapegoat::tree * scapegoat
b-tree * t-tree::b-tree * t-tree
t-tree * list::t-tree * list
list of data::list of data
data structures references::data structures references
academy of sciences::academy of sciences
translation by myron::translation by myron
myron j ricci::myron j ricci
ricci in soviet::ricci in soviet
soviet math doklady::soviet math doklady
analysis of bsts::analysis of bsts
bsts in system::bsts in system
including the root::including the root
left child node::left child node
avl dictionary data::avl dictionary data
dictionary data type::dictionary data type
data type implementation::data type implementation
advanced data structures::advanced data structures
a.s soft reserves::a.s soft reserves
updated and rev::updated and rev
proof of asymptotic::proof of asymptotic
bounds further reading::bounds further reading
isbn 0-201-89685-0 pages::isbn 0-201-89685-0 pages
balanced trees external::balanced trees external
trees external links::trees external links
wikibook algorithm implementation::wikibook algorithm implementation
avl tree wikimedia::avl tree wikimedia
tree wikimedia commons::tree wikimedia commons
related to avl-trees::related to avl-trees
avl-trees * xdg::avl-trees * xdg
library by dmitriy::library by dmitriy
serializable straight c-implementation::serializable straight c-implementation
library under gnu-lgpl::library under gnu-lgpl
gnu-lgpl and afl::gnu-lgpl and afl
afl v2.0 licenses::afl v2.0 licenses
licenses * description::licenses * description
structures * python::structures * python
implementation * single::implementation * single
single c header::single c header
file by ian::file by ian
piumarta * avl::piumarta * avl
avl tree demonstration::avl tree demonstration
demonstration * avl::demonstration * avl
avl tree applet::avl tree applet
applet all operations::applet all operations
operations * fast::operations * fast
fast and efficient::fast and efficient
implementation of avl::implementation of avl
trees * php::trees * php
implementation * avl::implementation * avl
avl threaded tree::avl threaded tree
threaded tree php::threaded tree php
tree php implementation::tree php implementation
balancing avl tree::balancing avl tree
tree with concat::tree with concat
concat and split::concat and split
science * binary::science * binary
trees * soviet::trees * soviet
inventions * search::inventions * search
encyclopedia in computer::encyclopedia in computer
self-balancing data structure::self-balancing data structure
numbers mean atree::numbers mean atree
node with children::node with children
four child nodes::four child nodes
two data elements::two data elements
trees are b-trees::trees are b-trees
b-trees of order::b-trees of order
b-trees in general::b-trees in general
insert and delete::insert and delete
isometry of red::isometry of red
red black trees::red black trees
equivalent data structures::equivalent data structures
tree with data::tree with data
splits and merges::splits and merges
merges are equivalent::merges are equivalent
color-flipping and rotations::color-flipping and rotations
rotations in red::rotations in red
black trees introductions::black trees introductions
introductions to red::introductions to red
trees usually introduce::trees usually introduce
difficult to implement::difficult to implement
number of special::number of special
special cases involved::special cases involved
involved in operations::involved in operations
tree red black::tree red black
trees are simpler::trees are simpler
simpler to implement::simpler to implement
external links properties::external links properties
leaf or internal::leaf or internal
sorted order insertion::sorted order insertion
insert a value::insert a value
remove and save::remove and save
save the middle::save the middle
3-node * split::3-node * split
split the remaining::split the remaining
pair of 2-nodes::pair of 2-nodes
missing middle value::missing middle value
value is handled::value is handled
tree height increases::tree height increases
push the middle::push the middle
parent node ascend::parent node ascend
find the child::find the child
child whose interval::child whose interval
insert the value::insert the value
node and finish::node and finish
child and repeat::child and repeat
repeat from step::repeat from step
child for interval::child for interval
leaving the element::leaving the element
marking it deleted::marking it deleted
insertion to remove::insertion to remove
remove a value::remove a value
find the element::find the element
remember its location::remember its location
location and continue::location and continue
element s successor::element s successor
reached the successor::reached the successor
simplest to make::simplest to make
leaf node found::leaf node found
empty leaf node::empty leaf node
make the adjustments::make the adjustments
adjustments below make::adjustments below make
node is encountered::node is encountered
perform a rotation::perform a rotation
key that overlooks::key that overlooks
parent key moves::parent key moves
node to form::node to form
rotated sibling key::rotated sibling key
node s additional::node s additional
elements to form::elements to form
shorten the tree::shorten the tree
siblings are 2-nodes::siblings are 2-nodes
parent key overlooking::parent key overlooking
two sibling nodes::two sibling nodes
4-node * transfer::4-node * transfer
transfer the sibling::transfer the sibling
sibling s children::sibling s children
value is reached::value is reached
entry s location::entry s location
transfer and fusion::transfer and fusion
run in constant::run in constant
computer programming portal::computer programming portal
tree * red::tree * red
searching the art::searching the art
computer programming volume::computer programming volume
addison wesley isbn::addison wesley isbn
isbn 0-201-89685-0 section::isbn 0-201-89685-0 section
discusses 2-3 trees::discusses 2-3 trees
left-leaning red-black trees::left-leaning red-black trees
red-black trees department::red-black trees department
department of computer::department of computer
william ; topp::william ; topp
roberto ; mount::roberto ; mount
data structures lecture::data structures lecture
structures lecture notes::structures lecture notes
lecture notes department::lecture notes department
purdue university retrieved::purdue university retrieved
retrieved 2008-04-10 external::retrieved 2008-04-10 external
2008-04-10 external links::2008-04-10 external links
2-3-4-trees * algorithms::2-3-4-trees * algorithms
algorithms in action::algorithms in action
animation * animation::animation * animation
tree * java::tree * java
java applet showing::java applet showing
tree * left-leaning::tree * left-leaning
left-leaning red black::left-leaning red black
black trees princeton::black trees princeton
trees princeton university::trees princeton university
open data structures::open data structures
data structures section::data structures section
b-tree from wikipedia::b-tree from wikipedia
confused with binary::confused with binary
binary tree b-tree::binary tree b-tree
tree b-tree type::tree b-tree type
b-tree type tree::b-tree type tree
invented by rudolf::invented by rudolf
edward m mccreight::edward m mccreight
mccreight time complexity::mccreight time complexity
deletions in logarithmic::deletions in logarithmic
unlike self-balancing binary::unlike self-balancing binary
b-tree is optimized::b-tree is optimized
optimized for systems::optimized for systems
systems that read::systems that read
read and write::read and write
write large blocks::write large blocks
blocks of data::blocks of data
structure for external::structure for external
databases and filesystems::databases and filesystems
search a sorted::search a sorted
speeds the search::speeds the search
deletions cause trouble::deletions cause trouble
case and worst::case and worst
worst case heights::worst case heights
rebalancing after deletion::rebalancing after deletion
external links overview::external links overview
b-tree of order::b-tree of order
bayer & mccreight::bayer & mccreight
number of child::number of child
range when data::range when data
data is inserted::data is inserted
inserted or removed::inserted or removed
order to maintain::order to maintain
maintain the pre-defined::maintain the pre-defined
joined or split::joined or split
range of child::range of child
nodes is permitted::nodes is permitted
self-balancing search trees::self-balancing search trees
waste some space::waste some space
full the lower::full the lower
lower and upper::lower and upper
nodes each internal::nodes each internal
keys the keys::keys the keys
act as separation::act as separation
values which divide::values which divide
divide its subtrees::divide its subtrees
keys is chosen::keys is chosen
chosen to vary::chosen to vary
degree or branching::degree or branching
tree in practice::tree in practice
node the factor::node the factor
guarantee that nodes::guarantee that nodes
split or combined::split or combined
node has keys::node has keys
adding a key::adding a key
accomplished by splitting::accomplished by splitting
splitting the key::splitting the key
two key nodes::two key nodes
nodes and adding::nodes and adding
adding the key::adding the key
node each split::node each split
required minimum number::required minimum number
node by combining::node by combining
deleting the key::deleting the key
key would make::key would make
make the internal::make the internal
node have keys::node have keys
keys ; joining::keys ; joining
joining the neighbor::joining the neighbor
neighbor would add::neighbor would add
neighbor s parent::neighbor s parent
parent the result::parent the result
node of keys::node of keys
keys the number::keys the number
number of branches::number of branches
nodes will store::nodes will store
highest branching order::highest branching order
balanced by requiring::balanced by requiring
depth this depth::depth this depth
depth will increase::depth will increase
slowly as elements::slowly as elements
elements are added::elements are added
depth is infrequent::depth is infrequent
b-trees have substantial::b-trees have substantial
advantages over alternative::advantages over alternative
access the data::access the data
node greatly exceeds::node greatly exceeds
processing that data::processing that data
cost of accessing::cost of accessing
amortized over multiple::amortized over multiple
drives by maximizing::drives by maximizing
maximizing the number::maximizing the number
number of expensive::number of expensive
expensive node accesses::expensive node accesses
accesses is reduced::accesses is reduced
reduced in addition::reduced in addition
child nodes depends::child nodes depends
full disk block::full disk block
size in secondary::size in secondary
b-trees are easier::b-trees are easier
easier to explain::easier to explain
b-trees using secondary::b-trees using secondary
nodes to improve::nodes to improve
improve performance variants::improve performance variants
class of designs::class of designs
b-tree stores keys::b-tree stores keys
store those keys::store those keys
leaves the general::leaves the general
general class includes::general class includes
class includes variations::class includes variations
keys are stored::keys are stored
keys and records::keys and records
records are stored::records are stored
stored in leaves::stored in leaves
node may include::node may include
node to speed::node to speed
speed sequential access::speed sequential access
balances more neighboring::balances more neighboring
neighboring internal nodes::neighboring internal nodes
variant requires non-root::variant requires non-root
requires non-root nodes::requires non-root nodes
keys are shared::keys are shared
nodes are full::nodes are full
nodes are split::nodes are split
complex than inserting::complex than inserting
turned into order::turned into order
order statistic trees::order statistic trees
record in key::record in key
number of records::number of records
invented the b-tree::invented the b-tree
b-tree while working::b-tree while working
working at boeing::working at boeing
boeing research labs::boeing research labs
douglas comer explains::douglas comer explains
apply others suggest::apply others suggest
stands for boeing::stands for boeing
bayer " -trees::bayer " -trees
donald knuth speculates::donald knuth speculates
etymology of b-trees::etymology of b-trees
topic " cs144c::topic " cs144c
cs144c classroom lecture::cs144c classroom lecture
lecture about disk::lecture about disk
storage and b-trees::storage and b-trees
originated from boeing::originated from boeing
talk at cpm::talk at cpm
24th annual symposium::24th annual symposium
symposium on combinatorial::symposium on combinatorial
combinatorial pattern matching::combinatorial pattern matching
answered a question::answered a question
question on b-tree::question on b-tree
working for boeing::working for boeing
talking to lawyers::talking to lawyers
made more sense::made more sense
describes a problem::describes a problem
faced by database::faced by database
outlines a series::outlines a series
increasingly effective solutions::increasingly effective solutions
ends by describing::ends by describing
solves the problem::solves the problem
number of comparison::number of comparison
performed using order::performed using order
notation a binary::notation a binary
table with records::table with records
read a record::read a record
drive far exceeds::drive far exceeds
needed to compare::needed to compare
disk drive involves::disk drive involves
involves a seek::involves a seek
delay the seek::delay the seek
rotational delay averages::rotational delay averages
half the rotation::half the rotation
average reading seek::average reading seek
reading from disk::reading from disk
locate one record::locate one record
disk reads times::disk reads times
milliseconds per disk::milliseconds per disk
bad because individual::bad because individual
records are grouped::records are grouped
block a disk::block a disk
block the disk::block the disk
records per block::records per block
reads the comparisons::reads the comparisons
last disk block::last disk block
disk block read::disk block read
read to speed::read to speed
speed the search::speed the search
required a disk::required a disk
initial disk reads::initial disk reads
disk reads narrowed::disk reads narrowed
narrowed the search::narrowed the search
factor of two::factor of two
substantially by creating::substantially by creating
creating an auxiliary::creating an auxiliary
searched more quickly::searched more quickly
finding an entry::finding an entry
block to search::block to search
searching the auxiliary::searching the auxiliary
read the index::read the index
index would hold::index would hold
hold 10,000 entries::hold 10,000 entries
block the index::block the index
reads the trick::reads the trick
trick of creating::trick of creating
repeated to make::repeated to make
make an auxiliary::make an auxiliary
make an aux-aux::make an aux-aux
blocks to find::blocks to find
find the desired::find the desired
reading and searching::reading and searching
searching the first::searching the first
aux-aux index identifies::aux-aux index identifies
identifies the relevant::identifies the relevant
block in aux-index::block in aux-index
searching that aux-index::searching that aux-index
aux-index block identifies::aux-index block identifies
record the auxiliary::record the auxiliary
indices have turned::indices have turned
turned the search::turned the search
binary search requiring::binary search requiring
requiring roughly disk::requiring roughly disk
roughly disk reads::roughly disk reads
requiring only disk::requiring only disk
number of entries::number of entries
entries per block::entries per block
block ; reads::block ; reads
index may reside::index may reside
incur a disk::incur a disk
disk read insertions::disk read insertions
compiling the index::compiling the index
index is simple::index is simple
managing the database::managing the database
complicated deleting records::complicated deleting records
trouble the index::trouble the index
index can stay::index can stay
marked as deleted::marked as deleted
deleted the database::deleted the database
stays in sorted::stays in sorted
number of deletions::number of deletions
searching and storage::searching and storage
sorted sequential file::sorted sequential file
file because room::file because room
inserting a record::inserting a record
file requires shifting::file requires shifting
practical a trick::practical a trick
leave some space::leave some space
insertions those records::insertions those records
deleted " records::deleted " records
records both insertions::records both insertions
long as space::long as space
auxiliary indices adjusted::auxiliary indices adjusted
adjusted the hope::adjusted the hope
space is nearby::space is nearby
lot of blocks::lot of blocks
out-of-sequence disk blocks::out-of-sequence disk blocks
order for sequential::order for sequential
index to minimize::index to minimize
minimize the number::minimize the number
number of disk::number of disk
partially full blocks::partially full blocks
blocks to speed::blocks to speed
elegant recursive algorithm::elegant recursive algorithm
algorithm in addition::algorithm in addition
b-tree minimizes waste::b-tree minimizes waste
waste by making::waste by making
full a b-tree::full a b-tree
b-tree can handle::b-tree can handle
handle an arbitrary::handle an arbitrary
number of insertions::number of insertions
deletions technical description::deletions technical description
literature on b-trees::literature on b-trees
folk & zoellick::folk & zoellick
define the order::define the order
order of b-tree::order of b-tree
non-root node folk::non-root node folk
out that terminology::out that terminology
terminology is ambiguous::terminology is ambiguous
clear an order::clear an order
b-tree might hold::b-tree might hold
hold a maximum::hold a maximum
avoids the problem::avoids the problem
problem by defining::problem by defining
defining the order::defining the order
number of children::number of children
considered the leaf::considered the leaf
level of keys::level of keys
leaves may hold::leaves may hold
hold the entire::hold the entire
entire data record::entire data record
record those choices::record those choices
represent the number::represent the number
keys for simplicity::keys for simplicity
keys that fit::keys that fit
node the basic::node the basic
size is fixed::size is fixed
fixed in practice::fixed in practice
variable length keys::variable length keys
knuth s definition::knuth s definition
tree which satisfies::tree which satisfies
level each internal::level each internal
node s keys::node s keys
internal nodes internal::internal nodes internal
nodes internal nodes::nodes internal nodes
set of elements::set of elements
elements and child::elements and child
pointers every internal::pointers every internal
number of elements::number of elements
full the relationship::full the relationship
two half-full nodes::two half-full nodes
joined to make::joined to make
make a legal::make a legal
two legal nodes::two legal nodes
room to push::room to push
push one element::push one element
delete and insert::delete and insert
insert new values::insert new values
b-tree and adjust::b-tree and adjust
adjust the tree::adjust the tree
tree to preserve::tree to preserve
preserve the b-tree::preserve the b-tree
properties the root::properties the root
node the root::node the root
node s number::node s number
limit as internal::limit as internal
leaf nodes leaf::leaf nodes leaf
nodes leaf nodes::nodes leaf nodes
pointers a b-tree::pointers a b-tree
b-tree of depth::b-tree of depth
cost of search::cost of search
delete operations grows::delete operations grows
elements some balanced::elements some balanced
balanced trees store::balanced trees store
trees store values::trees store values
kinds of nodes::kinds of nodes
nodes for leaf::nodes for leaf
nodes and internal::nodes and internal
internal nodes b-trees::internal nodes b-trees
b-trees keep values::b-trees keep values
benefit from improved::benefit from improved
structure best case::structure best case
children a node::children a node
b-tree of height::b-tree of height
nodes completely filled::nodes completely filled
children an internal::children an internal
give the worst::give the worst
worst case height::worst case height
node is considered::node is considered
confusing or unclear::confusing or unclear
unclear to readers::unclear to readers
thing the terms::thing the terms
root and leaves::root and leaves
clarify the article::clarify the article
article ; suggestions::article ; suggestions
searching is similar::searching is similar
similar to searching::similar to searching
search tree starting::search tree starting
traversed from top::traversed from top
top to bottom::top to bottom
chooses the child::chooses the child
search value binary::search value binary
value binary search::value binary search
nodes to find::nodes to find
find the separation::find the separation
values and child::values and child
tree of interest::tree of interest
iteration the nodes::iteration the nodes
node to insert::node to insert
search the tree::search the tree
tree to find::tree to find
find the leaf::find the leaf
node contains fewer::node contains fewer
maximum legal number::maximum legal number
keeping the node::keeping the node
node s elements::node s elements
node is full::node is full
median is chosen::median is chosen
leaf s elements::leaf s elements
median are put::median are put
node and values::node and values
value is inserted::value is inserted
increasing the height::increasing the height
single separator value::single separator value
size of internal::size of internal
root the maximum::root the maximum
elements per node::elements per node
node is split::node is split
element is added::element is added
divide the maximum::divide the maximum
number is odd::number is odd
allowed per node::allowed per node
node an improved::node an improved
mond & raz::mond & raz
supports a single::supports a single
splitting any full::splitting any full
full nodes encountered::full nodes encountered
recall the parent::recall the parent
nodes into memory::nodes into memory
send one element::send one element
parent and split::parent and split
element this requires::element this requires
impose this requirement::impose this requirement
requirement in defining::requirement in defining
defining b-trees deletion::defining b-trees deletion
two popular strategies::two popular strategies
strategies for deletion::strategies for deletion
locate and delete::locate and delete
delete the item::delete the item
restructure the tree::restructure the tree
tree to regain::tree to regain
regain its invariants::regain its invariants
deleted is encountered::deleted is encountered
deleted without triggering::deleted without triggering
restructuring the algorithm::restructuring the algorithm
two special cases::two special cases
deleting an element::deleting an element
element may put::element may put
put its node::put its node
elements and children::elements and children
children the procedures::children the procedures
order below deletion::order below deletion
value to delete::value to delete
rebalance the tree::rebalance the tree
tree as described::tree as described
described in section::described in section
section " rebalancing::section " rebalancing
internal node acts::internal node acts
find a replacement::find a replacement
replacement for separation::replacement for separation
subtrees algorithmically described::subtrees algorithmically described
replace the element::replace the element
previous step deleted::previous step deleted
deleted an element::deleted an element
leaf node rebalancing::leaf node rebalancing
leaf and proceeds::leaf and proceeds
tree is balanced::tree is balanced
balanced if deleting::balanced if deleting
node has brought::node has brought
redistributed to bring::redistributed to bring
bring all nodes::bring all nodes
redistribution involves moving::redistribution involves moving
moving an element::moving an element
nodes that redistribution::nodes that redistribution
sibling can spare::sibling can spare
spare an element::spare an element
sibling the merge::sibling the merge
parent to lose::parent to lose
lose a separator::lose a separator
rebalancing the merging::rebalancing the merging
merging and rebalancing::merging and rebalancing
rebalancing may continue::rebalancing may continue
minimum element count::minimum element count
making the root::making the root
problem the algorithm::problem the algorithm
algorithm to rebalance::algorithm to rebalance
right sibling exists::right sibling exists
copy the separator::copy the separator
replace the separator::replace the separator
right sibling loses::right sibling loses
loses one node::loses one node
left sibling exists::left sibling exists
left sibling loses::left sibling loses
sandwiching their separator::sandwiching their separator
move all elements::move all elements
right node empty::right node empty
remove the separator::remove the separator
empty right child::empty right child
loses an element::loses an element
make the merged::make the merged
tree becomes shallower::tree becomes shallower
parent has fewer::parent has fewer
rebalance the parent::rebalance the parent
parent has copy::parent has copy
siblings are merged::siblings are merged
freshly loaded databases::freshly loaded databases
loaded databases tend::loaded databases tend
good sequential behavior::good sequential behavior
difficult to maintain::difficult to maintain
i and performance::-NONE- and performance
build a b-tree::build a b-tree
b-tree to represent::b-tree to represent
represent a large::represent a large
large existing collection::large existing collection
collection of data::collection of data
incrementally using standard::incrementally using standard
standard b-tree operations::standard b-tree operations
construct the initial::construct the initial
insert every element::insert every element
set of leaf::set of leaf
build the internal::build the internal
approach to b-tree::approach to b-tree
nodes have maximum::nodes have maximum
leaves by taking::leaves by taking
taking the last::taking the last
suppose the internal::suppose the internal
process is continued::process is continued
reach a level::reach a level
root level remains::root level remains
quick random access::quick random access
file the basic::file the basic
problem is turning::problem is turning
turning the file::turning the file
file block address::file block address
address some operating::address some operating
operating systems require::operating systems require
require the user::require the user
user to allocate::user to allocate
allocate the maximum::allocate the maximum
file is created::file is created
created the file::created the file
allocated as contiguous::allocated as contiguous
contiguous disk blocks::contiguous disk blocks
disk blocks converting::disk blocks converting
system just adds::system just adds
adds the file::adds the file
starting disk block::starting disk block
file the scheme::file the scheme
scheme is simple::scheme is simple
exceed its created::exceed its created
size other operating::size other operating
file to grow::file to grow
grow the resulting::grow the resulting
resulting disk blocks::resulting disk blocks
mapping logical blocks::mapping logical blocks
blocks to physical::blocks to physical
simple file allocation::simple file allocation
file allocation table::file allocation table
file is represented::file is represented
table in order::table in order
order to find::order to find
find the disk::find the disk
address of file::address of file
follow the file::follow the file
file s linked::file s linked
find a free::find a free
free disk block::free disk block
scan the fat::scan the fat
fat for ms-dos::fat for ms-dos
disks and files::disks and files
files were small::files were small
short file chains::short file chains
early hard disks::early hard disks
resident in memory::resident in memory
memory as disks::memory as disks
disks got bigger::disks got bigger
fat architecture began::fat architecture began
began to confront::began to confront
disk using fat::disk using fat
perform disk reads::perform disk reads
reads to learn::reads to learn
learn the disk::learn the disk
read or written::read or written
directory would point::directory would point
physical disk block::physical disk block
holding an aux-aux::holding an aux-aux
null or point::null or point
two disk reads::two disk reads
reads and read::reads and read
apple s filesystem::apple s filesystem
microsoft s ntfs::microsoft s ntfs
btrfs and ext4::btrfs and ext4
hfs and reiser4::hfs and reiser4
reiser4 file systems::reiser4 file systems
file systems variations::file systems variations
lehman and yao::lehman and yao
access greatly improved::access greatly improved
linking the tree::linking the tree
pointer this results::pointer this results
insertion and search::insertion and search
search operations descend::search operations descend
leaf write locks::leaf write locks
block is modified::block is modified
modified this maximizes::modified this maximizes
maximizes access concurrency::maximizes access concurrency
concurrency by multiple::concurrency by multiple
consideration for databases::consideration for databases
b-tree based isam::b-tree based isam
based isam storage::based isam storage
isam storage methods::isam storage methods
methods the cost::methods the cost
btree during normal::btree during normal
strategies to implement::strategies to implement
implement node merging::implement node merging
united states patent::united states patent
appears to show::appears to show
meta access method::meta access method
access and modification::access and modification
modification without locks::modification without locks
locks the technique::locks the technique
accesses the tree::accesses the tree
searches and updates::searches and updates
updates by means::updates by means
means of additional::means of additional
additional in-memory indexes::additional in-memory indexes
indexes that point::indexes that point
cache no reorganization::cache no reorganization
reorganization for deletes::reorganization for deletes
deletes is needed::deletes is needed
next  pointers::next  pointers
fat documentation calls::fat documentation calls
contiguous whole physical::contiguous whole physical
physical disk sectors::physical disk sectors
reserved for special::reserved for special
represent disk blocks::represent disk blocks
knuth s video::knuth s video
lectures from stanford::lectures from stanford
talk s video::talk s video
seagate technology llc::seagate technology llc
barracuda es.2 serial::barracuda es.2 serial
es.2 serial ata::es.2 serial ata
avoided the issue::avoided the issue
record or records::record or records
nt really matter::nt really matter
node is needed::node is needed
cache oblivious b-trees::cache oblivious b-trees
stony brook retrieved::stony brook retrieved
russinovich " inside::russinovich " inside
inside win2k ntfs::inside win2k ntfs
microsoft developer network.archived::microsoft developer network.archived
locking for concurrent::locking for concurrent
operations on b-trees::operations on b-trees
ada232287&location = u2&doc::ada232287&location = u2&doc
u2&doc = gettrdoc.pdf::u2&doc = gettrdoc.pdf
high concurrency b-tree::high concurrency b-tree
concurrency b-tree code::concurrency b-tree code
github project hosting::github project hosting
general * bayer::general * bayer
organization and maintenance::organization and maintenance
maintenance of large::maintenance of large
large ordered indexes::large ordered indexes
0360-0300 * cormen::0360-0300 * cormen
thomas ; leiserson::thomas ; leiserson
charles ; rivest::charles ; rivest
ronald ; stein::ronald ; stein
isbn 0-262-03293-7 chapter::isbn 0-262-03293-7 chapter
b-trees * folk::b-trees * folk
trees * mond::trees * mond
yehudit ; raz::yehudit ; raz
databases using preparatory::databases using preparatory
proceedings of 11th::proceedings of 11th
11th international conference::11th international conference
large data bases::large data bases
rudolf ; mccreight::rudolf ; mccreight
large ordered indices::large ordered indices
mathematical and information::mathematical and information
information sciences report::information sciences report
boeing scientific research::boeing scientific research
scientific research laboratories::scientific research laboratories
laboratories * bayer::laboratories * bayer
b-trees for virtual::b-trees for virtual
workshop on data::workshop on data
access and control::access and control
californiamissing or empty::californiamissing or empty
empty | title::empty | title
lecture by david::lecture by david
david scot taylor::david scot taylor
sjsu * b-tree::sjsu * b-tree
b-tree animation applet::b-tree animation applet
applet by slady::applet by slady
slady * b-tree::slady * b-tree
b-tree and ub-tree::b-tree and ub-tree
ub-tree on scholarpedia::ub-tree on scholarpedia
bayer * b-trees::bayer * b-trees
balanced tree data::balanced tree data
structures * nist::structures * nist
nist s dictionary::nist s dictionary
b-tree * b-tree::b-tree * b-tree
infinitydb btree implementation::infinitydb btree implementation
implementation * cache::implementation * cache
-trees * dictionary::-trees * dictionary
data structures entry::data structures entry
-tree * open::-tree * open
b-trees * counted::b-trees * counted
introductions * b-tree::introductions * b-tree
b-tree * database::b-tree * database
database index techniques::database index techniques
index techniques red::index techniques red
techniques red black::techniques red black
free encyclopedia red::free encyclopedia red
encyclopedia red black::encyclopedia red black
black tree type::black tree type
bayer time complexity::bayer time complexity
bit of data::bit of data
data per node::data per node
red or black::red or black
bit of storage::bit of storage
approximately balanced tree::approximately balanced tree
tree by constraining::tree by constraining
constraining how nodes::constraining how nodes
nodes are colored::nodes are colored
type of self-balancing::type of self-balancing
search tree balance::search tree balance
balance is preserved::balance is preserved
preserved by painting::preserved by painting
painting each node::painting each node
typically called red::typically called red
satisfies certain properties::satisfies certain properties
constrain how unbalanced::constrain how unbalanced
unbalanced the tree::unbalanced the tree
tree is modified::tree is modified
rearranged and repainted::rearranged and repainted
repainted to restore::repainted to restore
restore the coloring::restore the coloring
properties the properties::properties the properties
properties are designed::properties are designed
rearranging and recoloring::rearranging and recoloring
efficiently the balancing::efficiently the balancing
tree the insertion::tree the insertion
rearrangement and recoloring::rearrangement and recoloring
tracking the color::tracking the color
bit of information::bit of information
information per node::information per node
colors the tree::colors the tree
cases the additional::cases the additional
additional memory cost::additional memory cost
memory cost contents::memory cost contents
analogy to b-trees::analogy to b-trees
applications and related::applications and related
related data structures::related data structures
external links history::external links history
original data structure::original data structure
structure was invented::structure was invented
named " symmetric::named " symmetric
symmetric binary b-tree::symmetric binary b-tree
acquired its modern::acquired its modern
guibas and robert::guibas and robert
robert sedgewick entitled::robert sedgewick entitled
framework for balanced::framework for balanced
color " red::color " red
best-looking color produced::best-looking color produced
color laser printer::color laser printer
authors while working::authors while working
working at xerox::working at xerox
science to organize::science to organize
pieces of comparable::pieces of comparable
fragments or numbers::fragments or numbers
numbers the leaf::numbers the leaf
nodes of red::nodes of red
data these leaves::data these leaves
explicit in computer::explicit in computer
memory a null::memory a null
null child pointer::null child pointer
pointer can encode::pointer can encode
encode the fact::encode the fact
simplifies some algorithms::simplifies some algorithms
algorithms for operating::algorithms for operating
operating on red::operating on red
nodes to save::nodes to save
single sentinel node::single sentinel node
sentinel node performs::sentinel node performs
performs the role::performs the role
references from internal::references from internal
nodes to leaf::nodes to leaf
nodes then point::nodes then point
sentinel node red::sentinel node red
node red black::node red black
efficient in-order traversal::efficient in-order traversal
order left root::order left root
elements the search-time::elements the search-time
traversal from root::traversal from root
search time properties::search time properties
tree in addition::tree in addition
root is black::root is black
changed from red::changed from red
red to black::red to black
necessarily vice versa::necessarily vice versa
effect on analysis::effect on analysis
black all leaves::black all leaves
two black child::two black child
black child nodes::black child nodes
descendant nil nodes::descendant nil nodes
number of black::number of black
nodes these constraints::nodes these constraints
enforce a critical::enforce a critical
property of red::property of red
leaf the result::leaf the result
height-balanced since operations::height-balanced since operations
finding values require::finding values require
values require worst-case::values require worst-case
worst-case time proportional::worst-case time proportional
theoretical upper bound::theoretical upper bound
height allows red::height allows red
unlike ordinary binary::unlike ordinary binary
ordinary binary search::ordinary binary search
effect of properties::effect of properties
nodes in property::nodes in property
shortest possible path::shortest possible path
black nodes longer::black nodes longer
longer possible paths::longer possible paths
constructed by inserting::constructed by inserting
inserting red nodes::inserting red nodes
makes it impossible::makes it impossible
impossible to insert::impossible to insert
consecutive red node::consecutive red node
longest possible path::longest possible path
black and red::black and red
alternates between red::alternates between red
red and black::red and black
b-tree a red::b-tree a red
tree is similar::tree is similar
similar in structure::similar in structure
matching the value::matching the value
matching an equivalent::matching an equivalent
equivalent red node::equivalent red node
parent black node::parent black node
modified graphical representation::modified graphical representation
depth the red::depth the red
minimum fill factor::minimum fill factor
values per cluster::values per cluster
values this b-tree::values this b-tree
black tree conversion::black tree conversion
tree conversion multiple::tree conversion multiple
conversion multiple red::conversion multiple red
multiple red black::multiple red black
two child pointers::two child pointers
root black tree::root black tree
operations on red::operations on red
maintain the vector::maintain the vector
vector of values::vector of values
costly if values::costly if values
values are stored::values are stored
stored by reference::stored by reference
reference b-tree nodes::reference b-tree nodes
economical in space::economical in space
store the color::store the color
slots for value::slots for value
slots for child::slots for child
compact in memory::compact in memory
improving data locality::improving data locality
made with b-trees::made with b-trees
b-trees with larger::b-trees with larger
colored binary tree::colored binary tree
blue red black::blue red black
black tree defined::black tree defined
defined like red::defined like red
two successive nodes::two successive nodes
b-tree whose clusters::b-tree whose clusters
volumes of values::volumes of values
tree are faster::tree are faster
compared to b-trees::compared to b-trees
b-trees because colored::b-trees because colored
attempt to maximize::attempt to maximize
maximize the fill::maximize the fill
cluster of nodes::cluster of nodes
factor is guaranteed::factor is guaranteed
guaranteed in colored::guaranteed in colored
colored binary trees::colored binary trees
limiting the number::limiting the number
number of splits::number of splits
splits or junctions::splits or junctions
junctions of clusters::junctions of clusters
faster for performing::faster for performing
multiple separate nodes::multiple separate nodes
storing large volumes::storing large volumes
compact by grouping::compact by grouping
grouping several children::grouping several children
locally all optimizations::locally all optimizations
b-trees to increase::b-trees to increase
increase the average::increase the average
average fill factors::average fill factors
factors of clusters::factors of clusters
equivalent multicolored binary::equivalent multicolored binary
multicolored binary tree::multicolored binary tree
maximizing the average::maximizing the average
average fill factor::average fill factor
structurally equivalent b-tree::structurally equivalent b-tree
reducing the total::reducing the total
increasing the number::increasing the number
number of non-black::number of non-black
nodes the worst::nodes the worst
worst case occurs::worst case occurs
tree are black::tree are black
thirds are red::thirds are red
definition of order::definition of order
black trees offer::black trees offer
trees offer worst-case::trees offer worst-case
offer worst-case guarantees::offer worst-case guarantees
guarantees for insertion::guarantees for insertion
make them valuable::make them valuable
valuable in time-sensitive::valuable in time-sensitive
makes them valuable::makes them valuable
valuable building blocks::valuable building blocks
structures which provide::structures which provide
provide worst-case guarantees::provide worst-case guarantees
structures used incomputational::structures used incomputational
based on red::based on red
completely fair scheduler::completely fair scheduler
current linux kernels::current linux kernels
kernels uses red::kernels uses red
trees the avl::trees the avl
balanced than red::balanced than red
retrieval this makes::retrieval this makes
makes it attractive::makes it attractive
attractive for data::attractive for data
loaded without reconstruction::loaded without reconstruction
assembler or interpreter::assembler or interpreter
valuable in functional::valuable in functional
common persistent data::common persistent data
persistent data structures::persistent data structures
construct associative arraysand::construct associative arraysand
associative arraysand sets::associative arraysand sets
retain previous versions::retain previous versions
versions after mutations::versions after mutations
mutations the persistent::mutations the persistent
version of red::version of red
black trees requires::black trees requires
trees with data::trees with data
order the insertion::order the insertion
equivalent to color-flipping::equivalent to color-flipping
trees this makes::trees this makes
makes 2-4 trees::makes 2-4 trees
trees an important::trees an important
tool for understanding::tool for understanding
understanding the logic::understanding the logic
logic behind red::logic behind red
introductory algorithm texts::introductory algorithm texts
algorithm texts introduce::algorithm texts introduce
introduce 2-4 trees::introduce 2-4 trees
introduced a simpler::introduced a simpler
previously unspecified degree::previously unspecified degree
degree of freedom::degree of freedom
implementation the llrb::implementation the llrb
maintains an additional::maintains an additional
links must lean::links must lean
inserts and deletes::inserts and deletes
deletes red black::deletes red black
sequence of operations::sequence of operations
2-4 tree isometry::2-4 tree isometry
isometry was described::isometry was described
isometry is resolved::isometry is resolved
two children nodes::two children nodes
children nodes leaves::children nodes leaves
leaves the children::leaves the children
children and moves::children and moves
node the tango::node the tango
trees as part::trees as part
data structure operations::data structure operations
black tree require::black tree require
require no modification::require no modification
simple binary search::simple binary search
insertion or removal::insertion or removal
removal may violate::removal may violate
violate the properties::violate the properties
black tree restoring::black tree restoring
restoring the red::restoring the red
red black properties::red black properties
black properties requires::black properties requires
requires a small::requires a small
quick in practice::quick in practice
two for insertion::two for insertion
operations are complicated::operations are complicated
begins by adding::begins by adding
adding the node::adding the node
coloring it red::coloring it red
add a leaf::add a leaf
add a red::add a red
red interior node::red interior node
two black leaves::two black leaves
existing black leaf::existing black leaf
nodes the term::nodes the term
term uncle node::term uncle node
human family trees::human family trees
family trees note::family trees note
leaves are black::leaves are black
holds * property::holds * property
node are black::node are black
adding a red::adding a red
repainting a black::repainting a black
black node red::black node red
rotation * property::rotation * property
adding a black::adding a black
repainting a red::repainting a red
red node black::red node black
denote the current::denote the current
node being inserted::node being inserted
roles and labels::roles and labels
nodes are exchanged::nodes are exchanged
continues to represent::continues to represent
node it represented::node it represented
case any color::case any color
case or implied::case or implied
assumptions a numbered::assumptions a numbered
numbered triangle represents::numbered triangle represents
represents a subtree::represents a subtree
subtree of unspecified::subtree of unspecified
depth a black::depth a black
black circle atop::black circle atop
atop the triangle::atop the triangle
designates a black::designates a black
black root node::black root node
node s color::node s color
color is unspecified::color is unspecified
cases of red::cases of red
black tree insertion::black tree insertion
insertion to handle::insertion to handle
node of red::node of red
right of left::right of left
child of grandparent::child of grandparent
added to left::added to left
left of right::left of right
left of left::left of left
code the uncle::code the uncle
uncle and grandparent::uncle and grandparent
node * grandparent::node * grandparent
parent > parent::parent- > parent
node * uncle::node * uncle
means no uncle::means no uncle
black to satisfy::black to satisfy
adds one black::adds one black
violated void insert_case1::violated void insert_case1
color = black::color = black
two black leaf::two black leaf
black leaf children::black leaf children
leaf it replaced::leaf it replaced
property remains satisfied::property remains satisfied
remains satisfied void::remains satisfied void
satisfied void insert_case2::satisfied void insert_case2
parent > color::parent- > color
leaf in cases::leaf in cases
current red node::current red node
parent or uncle::parent or uncle
uncle must pass::uncle must pass
possibly being violated::possibly being violated
number of rotations::number of rotations
rotations occur void::rotations occur void
occur void insert_case3::occur void insert_case3
color = red::color = red
red ; insert_case1::red ; insert_case1
reversed throughout cases::reversed throughout cases
samples take care::samples take care
switches the roles::switches the roles
violated the rotation::violated the rotation
nodes are red::nodes are red
continuing to case::continuing to case
parent > right::parent- > right
node * saved_p::node * saved_p
left = saved_p::left = saved_p
right = saved_left_n::right = saved_left_n
modify the parent::modify the parent
parent s nodes::parent s nodes
parent > left::parent- > left
right = saved_p::right = saved_p
saved_p > left::saved_p- > left
left = saved_right_n::left = saved_right_n
resulting tree satisfies::resulting tree satisfies
tree satisfies property::tree satisfies property
note that inserting::note that inserting
tail recursion removal::tail recursion removal
regular binary search::regular binary search
tree when deleting::tree when deleting
two non-leaf children::two non-leaf children
move its value::move its value
delete the node::delete the node
node we copied::node we copied
copied the value::copied the value
unlike normal binary::unlike normal binary
normal binary search::normal binary search
children or leaf::children or leaf
children in effect::children in effect
two leaf children::two leaf children
copying a value::copying a value
violate any red::violate any red
problem of deleting::problem of deleting
solved that problem::solved that problem
case just considered::case just considered
discussion we address::discussion we address
address the deletion::address the deletion
denote the node::denote the node
denote a selected::denote a selected
choose either leaf::choose either leaf
black by property::black by property
black non-leaf child::black non-leaf child
count of black::count of black
tree would violate::tree would violate
fewer red node::fewer red node
parent and child::parent and child
hold another simple::hold another simple
red simply removing::red simply removing
removing a black::removing a black
node could break::node could break
repaint c black::repaint c black
properties are preserved::properties are preserved
preserved the complex::preserved the complex
occur when deleting::occur when deleting
deleting a black::deleting a black
invalid red black::invalid red black
tree by violation::tree by violation
violation of property::violation of property
begin by replacing::begin by replacing
previously the sibling::previously the sibling
subtree which included::subtree which included
included m counted::included m counted
counted two black-height::counted two black-height
subtree which includes::subtree which includes
count two black-height::count two black-height
exchange the roles::exchange the roles
assumptions white represents::assumptions white represents
represents an unknown::represents an unknown
find the sibling::find the sibling
node * sibling::node * sibling
tree remains well-defined::tree remains well-defined
null leaf remains::null leaf remains
remains a leaf::remains a leaf
property is satisfied::property is satisfied
perform the steps::perform the steps
function replace_node substitutes::function replace_node substitutes
replace_node substitutes child::replace_node substitutes child
tree for convenience::tree for convenience
section will assume::section will assume
assume that null::assume that null
leaves are represented::leaves are represented
represented by actual::represented by actual
actual node objects::actual node objects
insertion section works::insertion section works
node * child::node * child
child = is_leaf::child = is_leaf
right ; replace_node::right ; replace_node
child > color::child- > color
represent null leaves::represent null leaves
leaves as actual::leaves as actual
modify the algorithm::modify the algorithm
algorithm by first::algorithm by first
first calling delete_case1::first calling delete_case1
parent is black::parent is black
phantom  leaf::phantom  leaf
remain a leaf::remain a leaf
parent are black::parent are black
deleting this original::deleting this original
parent causes paths::parent causes paths
paths which proceed::paths which proceed
fewer black node::fewer black node
node than paths::node than paths
done we removed::done we removed
removed one black::removed one black
preserved void delete_case1::preserved void delete_case1
cases into account::cases into account
case we reverse::case we reverse
reverse the colors::reverse the colors
proceed to step::proceed to step
sibling is black::sibling is black
children are black::children are black
repaint s red::repaint s red
red the result::red the result
paths passing throughs::paths passing throughs
precisely those paths::precisely those paths
paths not passing::paths not passing
node because deleting::node because deleting
original parent made::original parent made
made all paths::made all paths
violated to correct::violated to correct
perform the rebalancing::perform the rebalancing
starting at case::starting at case
left > color::left- > color
right > color::right- > color
red ; delete_case1::red ; delete_case1
exchange the colors::exchange the colors
affect the number::affect the number
nodes on paths::nodes on paths
deleted black node::deleted black node
paths void delete_case4::paths void delete_case4
child is red::child is red
child is black::child is black
case we rotate::case we rotate
parent all paths::parent all paths
sibling whose right::sibling whose right
fall into case::fall into case
parent are affected::parent are affected
statement is trivial::statement is trivial
due to case::due to case
changed the sibling::changed the sibling
sibling s child::sibling s child
nt be red::nt be red
statements just force::statements just force
force the red::force the red
test is trivial::test is trivial
trivial too due::trivial too due
due to cases::due to cases
black ; rotate_right::black ; rotate_right
black ; rotate_left::black ; rotate_left
sbecomes the parent::sbecomes the parent
right child black::right child black
black the subtree::black the subtree
additional black ancestor::additional black ancestor
additional black node::additional black node
colors and places::colors and places
assumed the color::assumed the color
transformation void delete_case6::transformation void delete_case6
algorithm is in-place::algorithm is in-place
cases are chained::cases are chained
chained in order::chained in order
recurse to case::recurse to case
rotation in case::rotation in case
recursion ever occurs::recursion ever occurs
tail recursion loop::tail recursion loop
back to case::back to case
tree before deletion::tree before deletion
occurs in case::occurs in case
possibility of rotation::possibility of rotation
loop of cases::loop of cases
exit the loop::exit the loop
rotation will occur::rotation will occur
two additional rotations::two additional rotations
rotations will occur::rotations will occur
occur after exiting::occur after exiting
exiting the loop::exiting the loop
occur in total::occur in total
height of subtree::height of subtree
rooted at node::rooted at node
proof of lemma::proof of lemma
internal nodes implies::internal nodes implies
hypothesis each child::hypothesis each child
tree is logarithmic::tree is logarithmic
leaf are black::leaf are black
red black property::red black property
complexity parallel algorithms::complexity parallel algorithms
algorithms for constructing::algorithms for constructing
constructing red black::constructing red black
trees from sorted::trees from sorted
lists of items::lists of items
items can run::items can run
number of processors::number of processors
items fast search::items fast search
deletion parallel algorithms::deletion parallel algorithms
rotation * scapegoat::rotation * scapegoat
data structures notes::data structures notes
clifford stein mit::clifford stein mit
stein mit press::stein mit press
morris " red::morris " red
symmetric binary b-trees::symmetric binary b-trees
structure and maintenance::structure and maintenance
19th annual symposium::19th annual symposium
symposium on foundations::symposium on foundations
foundations of computer::foundations of computer
red-black bsts coursera::red-black bsts coursera
coursera a lot::coursera a lot
lot of people::lot of people
invented this data::invented this data
live with today::live with today
graphic user interfaces::graphic user interfaces
ethernet and object-oriented::ethernet and object-oriented
nearby color laser::nearby color laser
out in color::out in color
colors the red::colors the red
picked the color::picked the color
red to distinguish::red to distinguish
distinguish red links::distinguish red links
types of links::types of links
question for people::question for people
heejin ; park::heejin ; park
algorithms for red::algorithms for red
theoretical computer science::theoretical computer science
00287-5 our parallel::00287-5 our parallel
algorithm for constructing::algorithm for constructing
constructing a red::constructing a red
pram and runs::pram and runs
log log nprocessors::log log nprocessors
erew pram references::erew pram references
includes a list::includes a list
sources remain unclear::sources remain unclear
insufficient inline citations::insufficient inline citations
article by introducing::article by introducing
introducing more precise::introducing more precise
tree * san::tree * san
san diego state::san diego state
diego state university::diego state university
black tree notes::black tree notes
whitney * thomas::whitney * thomas
university * okasaki::university * okasaki
chris " red::chris " red
complete and working::complete and working
black tree demonstration::black tree demonstration
demonstration * ocw::demonstration * ocw
ocw mit lecture::ocw mit lecture
lecture by prof::lecture by prof
prof erik demaine::prof erik demaine
demaine on red::demaine on red
tree insertion visualization::tree insertion visualization
visualization on youtube::visualization on youtube
visualization of random::visualization of random
random and pre-sorted::random and pre-sorted
pre-sorted data insertions::pre-sorted data insertions
elementary binary search::elementary binary search
intrusive red-black tree::intrusive red-black tree
red-black tree written::red-black tree written
trees * search::trees * search
data structure::data structure
free encyclopedia::free encyclopedia
specific type::specific type
tree data::tree data
additional citations::additional citations
adding citations::adding citations
reliable sources::reliable sources
sources unsourced::sources unsourced
unsourced material::unsourced material
unordered tree::unordered tree
node labeled::node labeled
root node::root node
computer science::computer science
abstract data::abstract data
data type::data type
hierarchical tree::hierarchical tree
tree structure::tree structure
root value::root value
parent node::parent node
linked nodes::linked nodes
structure consisting::structure consisting
ordered tree::ordered tree
value assigned::value assigned
adjacency list::adjacency list
type theory::type theory
drawing trees::drawing trees
traversal methods::traversal methods
common operations::common operations
external links::external links
links definition::links definition
non-connected parts::non-connected parts
undirected cycle::undirected cycle
linear list::linear list
structure made::structure made
null orempty::null orempty
orempty tree::orempty tree
empty consists::empty consists
additional nodes::additional nodes
hierarchy terminologies::hierarchy terminologies
top node::top node
converse notion::converse notion
siblings nodes::siblings nodes
internal node::internal node
external node::external node
degree number::degree number
sub trees::sub trees
edge connection::edge connection
edges connecting::edges connecting
longest downward::longest downward
downward path::downward path
disjoint trees::disjoint trees
trees data::trees data
concrete data::concrete data
linked list::linked list
finite trees::finite trees
case trees::case trees
empty tree::empty tree
fixed size::fixed size
branching factor::branching factor
linked tree::linked tree
directed graph::directed graph
references point::references point
single parent::single parent
null reference::null reference
empty list::empty list
mutual recursion::mutual recursion
basic examples::basic examples
tree consists::tree consists
functional languages::functional languages
referential transparency::referential transparency
simply lists::simply lists
structure defines::structure defines
global structure::global structure
tree point::tree point
abstract tree::abstract tree
tree type::tree type
abstract forest::abstract forest
forest type::forest type
inductive type::inductive type
type defined::type defined
constructors nil::constructors nil
empty forest::empty forest
values attached::values attached
rooted tree::rooted tree
narrow term::narrow term
undirected graph::undirected graph
simple path::simple path
distinguished root::distinguished root
arrows point::arrows point
edge points::edge points
child nodes::child nodes
non-empty child::non-empty child
binary tree::binary tree
allowing empty::allowing empty
empty trees::empty trees
trees makes::trees makes
definitions simpler::definitions simpler
trees simplify::trees simplify
trees allowed::trees allowed
.the complete::.the complete
complete sets::complete sets
include fork::include fork
fork operation::fork operation
operation terminology::operation terminology
separate data::separate data
morechild nodes::morechild nodes
ancestor node::ancestor node
branch node::branch node
anouter node::anouter node
leaf node::leaf node
terminal node::terminal node
topmost node::topmost node
node depending::node depending
tree begin::tree begin
children note::children note
post-order depth-first::post-order depth-first
depth-first search::depth-first search
first visit::first visit
visit leaf::visit leaf
leaf nodes::leaf nodes
first access::first access
formal definition::formal definition
special properties::special properties
root path::root path
self-balancing trees::self-balancing trees
avl trees::avl trees
single node::single node
tree consisting::tree consisting
node corresponds::node corresponds
entire tree::entire tree
proper subtree::proper subtree
proper subset::proper subset
plane ordered::plane ordered
ordered trees::ordered trees
plane trees::plane trees
conventional order::conventional order
first incoming::first incoming
incoming parent::incoming parent
parent edge::parent edge
first child::first child
child edge::child edge
ambient isotopy::ambient isotopy
embedding determines::embedding determines
family tree::family tree
horizontal line::horizontal line
standard drawing::standard drawing
left node::left node
represent trees::represent trees
common representations::common representations
representations represent::representations represent
allocated records::allocated records
binary heap::binary heap
first term::first term
left child::left child
future terms::future terms
right child::right child
lisp s-expressions::lisp s-expressions
stored separately::stored separately
upward links::upward links
child node::child node
node data::node data
threaded binary::threaded binary
tree generalizations::tree generalizations
special case::special case
directed graphs::directed graphs
allowed edges::allowed edges
implementation strategies::implementation strategies
strategies exist::strategies exist
local data::local data
adjacency lists::adjacency lists
graph theory::graph theory
acyclic graph::acyclic graph
theory trees::theory trees
assumed undirected::assumed undirected
one-to-one correspondence::one-to-one correspondence
undirected tree::undirected tree
edges directed::edges directed
node producing::node producing
result corresponds::result corresponds
structure picking::structure picking
ordering produces::ordering produces
children define::children define
ordered forest::ordered forest
breadth-first search::breadth-first search
root nodes::root nodes
main article::main article
tree traversal::tree traversal
traversal stepping::traversal stepping
pointer arrives::pointer arrives
pre-order walk::pre-order walk
respective parents::respective parents
post-order walk::post-order walk
left subtree::left subtree
right subtree::right subtree
in-order traversal::in-order traversal
last scenario::last scenario
level-order walk::level-order walk
traversed level::traversed level
direct child::direct child
grandchild nodes::grandchild nodes
hierarchical data::hierarchical data
storing data::storing data
binary search::binary search
search tree::search tree
sorted lists::sorted lists
compositing digital::compositing digital
digital images::digital images
visual effects::visual effects
routing algorithms::routing algorithms
set theory::set theory
single inheritance::single inheritance
dsw algorithm::dsw algorithm
child-right sibling::child-right sibling
sibling binary::sibling binary
hierarchical temporal::hierarchical temporal
temporal memory::temporal memory
memory notes::memory notes
theory sense::theory sense
structure sense::structure sense
donald knuth::donald knuth
computer programming::computer programming
fundamental algorithms::fundamental algorithms
edition addison-wesley::edition addison-wesley
clifford stein::clifford stein
stein introduction::stein introduction
edition mit::edition mit
mit press::mit press
rooted trees::rooted trees
search trees::search trees
red-black trees::red-black trees
augmenting data::augmenting data
data structures::data structures
wikimedia commons::wikimedia commons
media related::media related
tree structures::tree structures
data trees::data trees
complex data::complex data
data analysis::data analysis
sally knipe::sally knipe
interactive visualization::interactive visualization
elegans cell::elegans cell
cell tree::cell tree
tree visualize::tree visualize
entire cell::entire cell
cell lineage::cell lineage
lineage tree::lineage tree
binary trees::binary trees
structures categories::structures categories
data types::data types
knowledge representation::knowledge representation
representation binary::representation binary
labeled binary::labeled binary
recursive definition::recursive definition
theory notions::theory notions
empty set::empty set
singleton set::singleton set
theory perspective::theory perspective
bifurcating arborescence::bifurcating arborescence
programming books::programming books
modern computer::modern computer
science terminology::science terminology
terminology prevailed::terminology prevailed
k-ary tree::k-ary tree
labeling function::labeling function
trees labelled::trees labelled
binary heaps::binary heaps
efficient searching::efficient searching
non-root nodes::non-root nodes
child present::child present
present matters::present matters
theory concepts::theory concepts
succinct encodings::succinct encodings
general trees::general trees
internal nodes::internal nodes
depth-first order::depth-first order
breadth-first order::breadth-first order
links definitions::links definitions
quality standards::quality standards
thediscussion page::thediscussion page
full binary::full binary
single vertex::single vertex
graph formed::graph formed
edge directed::edge directed
specific root::specific root
extended binary::extended binary
tree obtained::tree obtained
adding edges::adding edges
instance square::instance square
square nodes::square nodes
a.k.a plane::a.k.a plane
plane tree::plane tree
nodes connected::nodes connected
first partitioning::first partitioning
equivalently arborescence::equivalently arborescence
tree terminology::tree terminology
citation needed::citation needed
ancestry chart::ancestry chart
perfect binary::perfect binary
biological parents::biological parents
complete binary::complete binary
last level::last level
completely filled::completely filled
clarification needed::clarification needed
specialized data::specialized data
infinite complete::infinite complete
infinite paths::infinite paths
paths correspond::paths correspond
order-preserving bijection::order-preserving bijection
cantor set::cantor set
stern brocot::stern brocot
brocot tree::brocot tree
positive irrational::positive irrational
irrational numbers::irrational numbers
balanced binary::balanced binary
maximum height::maximum height
a.k.a depth::a.k.a depth
greatest height::greatest height
abcde abcde::abcde abcde
common balanced::common balanced
balanced tree::balanced tree
node differ::node differ
balancing schemes::balancing schemes
list data::list data
structure properties::structure properties
balanced full::balanced full
ceiling function::ceiling function
null links::null links
absent children::absent children
node exists::node exists
bottom-most level::bottom-most level
non-empty binary::non-empty binary
determined factor::determined factor
tree distinct::tree distinct
representing leaves::representing leaves
binary operators::binary operators
argument subexpressions::argument subexpressions
redundant parentheses::redundant parentheses
parenthesized expression::parenthesized expression
full expression::full expression
unique binary::unique binary
single leaf::single leaf
full tree::full tree
recursive description::recursive description
positive integer::positive integer
catalan number::catalan number
parenthesized strings::parenthesized strings
dyck language::dyck language
properly balanced::properly balanced
strings satisfies::strings satisfies
dyck word::dyck word
dyck subword::dyck subword
subword enclosed::subword enclosed
subword remaining::subword remaining
closing parenthesis::closing parenthesis
dyck words::dyck words
bijective correspondence::bijective correspondence
extra pair::extra pair
lisp list::lisp list
list expression::list expression
occurring atom::occurring atom
dotted-pair expression::dotted-pair expression
proper list::proper list
internal representation::internal representation
parentheses implies::parentheses implies
free magma::free magma
set methods::set methods
programming language::programming language
language primitives::language primitives
ways nodes::ways nodes
tree node::tree node
node structure::node structure
unique parent::unique parent
child pointers::child pointers
special null::special null
null value::null value
special sentinel::special sentinel
sentinel node::sentinel node
trees wastes::trees wastes
fair bit::fair bit
conservative representation::conservative representation
representation alternative::representation alternative
tagged unions::tagged unions
tagged union::tagged union
type chr_tree::type chr_tree
implicit data::implicit data
method wastes::method wastes
compact arrangement::compact arrangement
method benefits::method benefits
compact storage::compact storage
preorder traversal::preorder traversal
wastes space::wastes space
order encodings::order encodings
succinct data::succinct data
occupies close::occupies close
theoretical lower::theoretical lower
lower bounds::lower bounds
view trees::view trees
identical structure::identical structure
succinct binary::succinct binary
occupy bits::occupy bits
simple representation::simple representation
consecutive array::consecutive array
function accomplishes::function accomplishes
function encodesuccinct::function encodesuccinct
bitstring structure::bitstring structure
array data::array data
string structure::string structure
original tree::original tree
function decodesuccinct::function decodesuccinct
first bit::first bit
n.data n.left::n.data n.left
return nil::return nil
sophisticated succinct::sophisticated succinct
succinct representations::succinct representations
succinct form::succinct form
form encoding::form encoding
encoding general::encoding general
one-to-one mapping::one-to-one mapping
general tree::general tree
tree corresponds::tree corresponds
child ofn::child ofn
tree representation::tree representation
general order::general order
order tree::order tree
lcrs tree::lcrs tree
chained tree::chained tree
filial-heir chain::filial-heir chain
right fields::right fields
left field::left field
tree tilted::tree tilted
tilted sideways::tilted sideways
black left::black left
left edges::left edges
edges representing::edges representing
blue right::blue right
right edges::right edges
tree rotations::tree rotations
common internal::common internal
internal operations::internal operations
self-balancing binary::self-balancing binary
mutator operations::mutator operations
tree insertion::tree insertion
node assigns::node assigns
assigns node::assigns node
child insertion::child insertion
node deletion::node deletion
tree suppose::tree suppose
including binary::including binary
structure traversal::structure traversal
traversal pre-order::traversal pre-order
post-order traversal::post-order traversal
traversal visit::traversal visit
root depth-first::root depth-first
node farthest::node farthest
cycles pre-order::cycles pre-order
seedepth-first search::seedepth-first search
node closest::node closest
level-order traversal::level-order traversal
traversal instructions::traversal instructions
root reading::root reading
reading bitwise::reading bitwise
bit values::bit values
process continues::process continues
rightmost bit::rightmost bit
final traversal::final traversal
desired node::desired node
time-space trade-off::time-space trade-off
binary space::binary space
space partitioning::space partitioning
huffman tree::huffman tree
optimal binary::optimal binary
black tree::black tree
strahler number::strahler number
primitive pythagorean::primitive pythagorean
pythagorean triples::pythagorean triples
alternative methods::alternative methods
tree references::tree references
rowan garnier::rowan garnier
john taylor::john taylor
discrete mathematics::discrete mathematics
edition crc::edition crc
crc press::crc press
algorithm design::algorithm design
design manual::design manual
manual springer::manual springer
springer science::springer science
business media::business media
pearson education::pearson education
kenneth rosen::kenneth rosen
7th edition::7th edition
edition mcgraw-hill::edition mcgraw-hill
mcgraw-hill science::mcgraw-hill science
guided tour::guided tour
mathematical association::mathematical association
david makinson::david makinson
computing springer::computing springer
combinatorial methods::combinatorial methods
computer applications::computer applications
applications crc::applications crc
michiel hazewinkel::michiel hazewinkel
mathematics supplement::mathematics supplement
l.r foulds::l.r foulds
theory applications::theory applications
applications springer::applications springer
man-tak shing::man-tak shing
combinatorial algorithms::combinatorial algorithms
algorithms courier::algorithms courier
courier dover::courier dover
dover publications::dover publications
lih-hsing hsu::lih-hsing hsu
cheng-kuan lin::cheng-kuan lin
interconnection networks::interconnection networks
networks crc::networks crc
parameterized complexity::parameterized complexity
complexity theory::complexity theory
theory springer::theory springer
richard stanley::richard stanley
enumerative combinatorics::enumerative combinatorics
prentice hall::prentice hall
structures u.s::structures u.s
national institute::national institute
version accessed::version accessed
sartaj sahni::sartaj sahni
hall isbn::hall isbn
classic data::classic data
structures phi::structures phi
phi learning::phi learning
learning pvt::learning pvt
language pragmatics::language pragmatics
morgan kaufmann::morgan kaufmann
rice.edu retrieved::rice.edu retrieved
retrieved december::retrieved december
programming vol::programming vol
trees entry::trees entry
findstat database::findstat database
gamedev.net introduction::gamedev.net introduction
ahnentafel list::ahnentafel list
structures search::structures search
weight-balanced heaps::weight-balanced heaps
emde boas::emde boas
ternary search::ternary search
y-fast spatial::y-fast spatial
spatial data::spatial data
data partitioning::data partitioning
partitioning trees::partitioning trees
hash calendar::hash calendar
left-child right-sibling::left-child right-sibling
log-structured merge::log-structured merge
top categories::top categories
structures binary::structures binary
encyclopedia binary::encyclopedia binary
type tree::type tree
tree invented::tree invented
p.f windley::p.f windley
a.d booth::a.d booth
a.j.t colin::a.j.t colin
t.n hibbard::t.n hibbard
notation average::notation average
average worst::average worst
worst case::worst case
case space::case space
type ofcontainers::type ofcontainers
fast lookup::fast lookup
dynamic sets::dynamic sets
lookup tables::lookup tables
phone number::phone number
sorted order::sorted order
making comparisons::making comparisons
keys stored::keys stored
continue searching::continue searching
right subtrees::right subtrees
deletion takes::deletion takes
items stored::items stored
linear timerequired::linear timerequired
find items::find items
hash tables::hash tables
tables contents::tables contents
priority queue::priority queue
queue operations::queue operations
performance comparisons::performance comparisons
distinguished sub-trees::distinguished sub-trees
tree property::tree property
right sub-tree::right sub-tree
final nodes::final nodes
special leaf::special leaf
nil symbol::nil symbol
null pointer::null pointer
information represented::information represented
single data::single data
data element::data element
sequencing purposes::sequencing purposes
major advantage::major advantage
related sorting::related sorting
sorting algorithms::sorting algorithms
search algorithms::search algorithms
code binary::code binary
fundamental data::fundamental data
associative arrays::associative arrays
visited node::visited node
intermixed sequence::intermixed sequence
random insertion::random insertion
expected height::expected height
tree approaches::tree approaches
square root::square root
trees support::trees support
main operations::main operations
subroutinethat computes::subroutinethat computes
total order::total order
linear order::linear order
common comparator::common comparator
less-than function::less-than function
dubious discuss::dubious discuss
tree searching::tree searching
specific key::specific key
iterative process::iterative process
key equals::key equals
remaining subtree::remaining subtree
null subtree::null subtree
recursive algorithm::recursive algorithm
return node::return node
return current-node::return current-node
current-node current-node.left::current-node current-node.left
current-node current-node.right::current-node current-node.right
current-node.right return::current-node.right return
return null::return null
leaf farthest::leaf farthest
search operation::search operation
operation takes::operation takes
unbalanced tree::unbalanced tree
tree resembles::tree resembles
degenerate tree::degenerate tree
insertion begins::insertion begins
key-value pair::key-value pair
typical binary::typical binary
void insert::void insert
int data::int data
destructive procedural::destructive procedural
procedural variant::procedural variant
variant modifies::variant modifies
constant heap::constant heap
heap space::heap space
iterative version::iterative version
constant stack::constant stack
stack space::stack space
prior version::prior version
inserted node::inserted node
tree root::tree root
root remains::root remains
persistent data::persistent data
def binary_tree_insert::def binary_tree_insert
return treenode::return treenode
average case::average case
operation requires::operation requires
explain insertion::explain insertion
inserting nodes::inserting nodes
bst structure::bst structure
structure deletion::structure deletion
in-order successor::in-order successor
successor node::successor node
in-order predecessor::in-order predecessor
predecessor node::predecessor node
right sub::right sub
sub tree::sub tree
present case::present case
left-most child::left-most child
right-most child::right-most child
children delete::children delete
simpler cases::simpler cases
rightmost node::rightmost node
inorder predecessor::inorder predecessor
method works::method works
inorder successor::inorder successor
successor labelled::successor labelled
two-child case::two-child case
implementations select::implementations select
times runtime::times runtime
runtime analysis::runtime analysis
single path::single path
def find_min::def find_min
minimum node::minimum node
subtree current_node::subtree current_node
current_node.left_child return::current_node.left_child return
return current_node::return current_node
current_node def::current_node def
def replace_node_in_parent::def replace_node_in_parent
self.parent def::self.parent def
def binary_tree_delete::def binary_tree_delete
present successor::present successor
successor.key successor.binary_tree_delete::successor.key successor.binary_tree_delete
recursively accessed::recursively accessed
pre-order traversal::pre-order traversal
sorted list::sorted list
node items::node items
comparable items::comparable items
call callback::call callback
tree def::tree def
def traverse_binary_tree::def traverse_binary_tree
return traverse_binary_tree::return traverse_binary_tree
traversal requires::traversal requires
asymptotically optimal::asymptotically optimal
optimal sort::optimal sort
tree sort::tree sort
simple sorting::simple sorting
sorting algorithm::sorting algorithm
ordered data::ordered data
left subtrees::left subtrees
simple binary::simple binary
comparison sort::comparison sort
poor cache::poor cache
cache performance::cache performance
tree-based sort::tree-based sort
node allocation::node allocation
optimal sorts::optimal sorts
static list::static list
list sorting::list sorting
efficient methods::efficient methods
incremental sorting::incremental sorting
adding items::adding items
list sorted::list sorted
times verification::times verification
simple recursive::simple recursive
recursive solution::recursive solution
bst property::bst property
current node::current node
unique values::unique values
greedy algorithm::greedy algorithm
node check::node check
value larger::value larger
node meets::node meets
child hold::child hold
decision based::decision based
information flowing::information flowing
property contract::property contract
struct treenode::struct treenode
bool isbst::bool isbst
int mindata::int mindata
int maxdata::int maxdata
return true::return true
return false::return false
return isbst::return isbst
initial call::initial call
valid range::valid range
recursively priority::recursively priority
priority queues::priority queues
arbitrary key::arbitrary key
key insertion::key insertion
insertion works::insertion works
previously explained::previously explained
explained find-min::explained find-min
find-min walks::find-min walks
left pointers::left pointers
leaf function::leaf function
function find-min::function find-min
return key::return key
follow right::follow right
right pointers::right pointers
queue implementations::queue implementations
single tree::single tree
double-ended priority::double-ended priority
trees avl::trees avl
splay tree::splay tree
accessed elements::accessed elements
elements nearer::elements nearer
tree heap::tree heap
higher priority::higher priority
children tango::children tango
tango trees::tango trees
trees optimized::trees optimized
fast searches::fast searches
titles describing::titles describing
bottom level::bottom level
existing nodes::existing nodes
nodes exist::nodes exist
additional requirement::additional requirement
nth level::nth level
performance degrades::performance degrades
added node::added node
node function::node function
performance measurement::performance measurement
structure performance::structure performance
performance comparison::performance comparison
trees treap::trees treap
average performance::average performance
red-black tree::red-black tree
smallest amount::smallest amount
performance variations::performance variations
tree tree::tree tree
internal balance::internal balance
average cost::average cost
expected search::expected search
search cost::search cost
search costs::search costs
english words::english words
spell checker::spell checker
tree based::tree based
word frequency::word frequency
frequency intext::frequency intext
intext corpora::intext corpora
placing words::placing words
huffman trees::huffman trees
dense information::dense information
information encoding::information encoding
trees store::trees store
store data::store data
data elements::data elements
splay trees::splay trees
static search::static search
lookup operations::lookup operations
alphabetic trees::alphabetic trees
additional constraint::additional constraint
leaves faster::leaves faster
faster algorithms::faster algorithms
algorithms exist::algorithms exist
optimal alphabetic::optimal alphabetic
alphabetic binary::alphabetic binary
search algorithm::search algorithm
stout warren::stout warren
warren algorithm::warren algorithm
algorithm references::algorithm references
basic toolbox::basic toolbox
toolbox springer::toolbox springer
performance behavior::performance behavior
european journal::european journal
scientific computation::scientific computation
computation eth::computation eth
rich retrieved::rich retrieved
structures nist::structures nist
tree traversals::tree traversals
interactive data::interactive data
structure visualizations::structure visualizations
visualizations university::visualizations university
algorithms visualization-a::algorithms visualization-a
visualization-a powerpoint::visualization-a powerpoint
powerpoint slides::powerpoint slides
based approach::based approach
approach suny::approach suny
suny oneonta::suny oneonta
education library::education library
library stanford::library stanford
stanford university::stanford university
literate implementations::literate implementations
tree visualizer::tree visualizer
javascript animation::javascript animation
bt-based data::bt-based data
java applet::java applet
kore ponden::kore ponden
msdn microsoft::msdn microsoft
tree implementation::tree implementation
avl tree::avl tree
encyclopedia avl::encyclopedia avl
child subtrees::child subtrees
property lookup::property lookup
worst cases::worst cases
operation insertions::operation insertions
soviet inventors::soviet inventors
basic operations::basic operations
lookup-intensive applications::lookup-intensive applications
rigidly balanced::rigidly balanced
sibling nodes::sibling nodes
differing numbers::differing numbers
descendants contents::descendants contents
links operations::links operations
tree involve::tree involve
involve carrying::involve carrying
height balance::height balance
subtrees searching::subtrees searching
previous nodes::previous nodes
amortized constant::amortized constant
nodes require::nodes require
rightmost leaf::rightmost leaf
leftmost leaf::leftmost leaf
subtree rooted::subtree rooted
amortized cost::amortized cost
balance factor::balance factor
pictorial description::pictorial description
rotations rebalance::rotations rebalance
numbered circles::numbered circles
circles represent::circles represent
lettered triangles::lettered triangles
triangles represent::triangles represent
represent subtrees::represent subtrees
balanced avl::balanced avl
blue number::blue number
node denotes::node denotes
balance factors::balance factors
parentheses occurring::parentheses occurring
integer range::integer range
single insertion::single insertion
avl subtree::avl subtree
recomputed balance::recomputed balance
node checked::node checked
factor remains::factor remains
needed description::needed description
unbalanced value::unbalanced value
left column::left column
left case::left case
previous case::previous case
right case::right case
right column::right column
algorithm i.e::algorithm i.e
right left::right left
retracing loop::retracing loop
height increases::height increases
temporary balance_factor::temporary balance_factor
case rotate_left::case rotate_left
left left::left left
case rotate_right::case rotate_right
height increase::height increase
first observe::first observe
requiring correction::requiring correction
correction lie::correction lie
initial insertion::initial insertion
retracing levels::retracing levels
actual node::actual node
tree deleting::tree deleting
determine node::determine node
parent links::parent links
in-order sequence::in-order sequence
nt change::nt change
choose node::choose node
update root::update root
delete node::delete node
single deletion::single deletion
temporary balance::temporary balance
height decreases::height decreases
small blue::small blue
height decrease::height decrease
remained unchanged::remained unchanged
higher child::higher child
child tree::child tree
similar mathematically::similar mathematically
real difference::real difference
limiting height::limiting height
golden ratio::golden ratio
slower insertion::slower insertion
faster retrieval::faster retrieval
tree rotation::tree rotation
structures references::structures references
robert sedgewick::robert sedgewick
balanced trees::balanced trees
ussr academy::ussr academy
english translation::english translation
soviet math::soviet math
math doklady::math doklady
performance analysis::performance analysis
system software::system software
inequality holds::inequality holds
avl dictionary::avl dictionary
dictionary data::dictionary data
type implementation::type implementation
advanced data::advanced data
a.s soft::a.s soft
soft reserves::soft reserves
san diego::san diego
asymptotic bounds::asymptotic bounds
wikibook algorithm::wikibook algorithm
algorithm implementation::algorithm implementation
tree wikimedia::tree wikimedia
dmitriy vilkov::dmitriy vilkov
serializable straight::serializable straight
straight c-implementation::straight c-implementation
python implementation::python implementation
header file::header file
ian piumarta::ian piumarta
tree demonstration::tree demonstration
tree applet::tree applet
efficient implementation::efficient implementation
php implementation::php implementation
threaded tree::threaded tree
tree php::tree php
balancing avl::balancing avl
split operations::split operations
soviet inventions::soviet inventions
self-balancing data::self-balancing data
implement dictionaries::implement dictionaries
external nodes::external nodes
black trees::black trees
equivalent data::equivalent data
deletion operations::deletion operations
node expansions::node expansions
red black::red black
trees introductions::trees introductions
conceptually simpler::conceptually simpler
programming languages::programming languages
large number::large number
special cases::special cases
cases involved::cases involved
tree red::tree red
links properties::links properties
order insertion::order insertion
middle value::middle value
missing middle::missing middle
tree height::tree height
node ascend::node ascend
rightmost child::rightmost child
middle element::middle element
leftmost child::leftmost child
insert value::insert value
future insertion::future insertion
largest key::largest key
smallest key::smallest key
make adjustments::make adjustments
node found::node found
empty leaf::empty leaf
2-node leaf::2-node leaf
sibling closest::sibling closest
node moves::node moves
parent key::parent key
key moves::key moves
additional child::additional child
preserves balance::preserves balance
important assumption::important assumption
fusion operation::fusion operation
adjacent siblings::adjacent siblings
adjacent sibling::adjacent sibling
key overlooking::key overlooking
sought value::sought value
removed entry::removed entry
key deletion::key deletion
assuming transfer::assuming transfer
fusion run::fusion run
programming portal::programming portal
b-tree references::b-tree references
programming volume::programming volume
addison wesley::addison wesley
wesley isbn::wesley isbn
multiway trees::multiway trees
left-leaning red-black::left-leaning red-black
trees department::trees department
purdue university::purdue university
structures lecture::structures lecture
lecture notes::lecture notes
notes department::notes department
university retrieved::university retrieved
tree animation::tree animation
applet showing::applet showing
trees princeton::trees princeton
princeton university::princeton university
open data::open data
structures section::structures section
b-tree b-tree::b-tree b-tree
tree b-tree::tree b-tree
b-tree type::b-tree type
rudolf bayer::rudolf bayer
data sorted::data sorted
sequential access::sequential access
large blocks::large blocks
data b-trees::data b-trees
external memory::external memory
filesystems contents::filesystems contents
database problem::database problem
sorted file::sorted file
index speeds::index speeds
technical description::technical description
case heights::case heights
initial construction::initial construction
access concurrency::access concurrency
original papers::original papers
links overview::links overview
variable number::variable number
pre-defined range::pre-defined range
self-balancing search::self-balancing search
upper bounds::upper bounds
keys act::keys act
separation values::separation values
leftmost subtree::leftmost subtree
middle subtree::middle subtree
rightmost subtree::rightmost subtree
minimum number::minimum number
minimum degree::minimum degree
key node::key node
key nodes::key nodes
split node::split node
neighbor deleting::neighbor deleting
add keys::add keys
key brought::key brought
full node::full node
branching order::branching order
node farther::node farther
root b-trees::root b-trees
substantial advantages::substantial advantages
alternative implementations::alternative implementations
spent processing::spent processing
multiple operations::multiple operations
secondary storage::secondary storage
disk drives::disk drives
tree decreases::tree decreases
expensive node::expensive node
node accesses::node accesses
tree occurs::tree occurs
maximum number::maximum number
nodes depends::nodes depends
full disk::full disk
disk block::disk block
analogous size::analogous size
practical b-trees::practical b-trees
improve performance::improve performance
performance variants::performance variants
specific design::specific design
general class::general class
narrow sense::narrow sense
b-tree stores::b-tree stores
stores keys::stores keys
class includes::class includes
includes variations::includes variations
-tree balances::-tree balances
variant requires::variant requires
deleting nodes::deleting nodes
statistic trees::statistic trees
rapid searches::rapid searches
nth record::nth record
key order::key order
related operations::related operations
mccreight invented::mccreight invented
boeing research::boeing research
research labs::research labs
douglas comer::douglas comer
comer explains::comer explains
knuth speculates::knuth speculates
cs144c classroom::cs144c classroom
classroom lecture::classroom lecture
disk storage::disk storage
annual symposium::annual symposium
combinatorial pattern::combinatorial pattern
pattern matching::pattern matching
bad herrenalb::bad herrenalb
martin farach-colton::martin farach-colton
senior author::senior author
lunch table::lunch table
b-trees means::b-trees means
understand b-trees::understand b-trees
section describes::section describes
problem faced::problem faced
database designers::database designers
effective solutions::effective solutions
b-tree solves::b-tree solves
problem completely::problem completely
searching algorithms::searching algorithms
comparison operations::comparison operations
order notation::order notation
roughly comparisons::roughly comparisons
specific record::specific record
large databases::large databases
disk drive::disk drive
compare keys::compare keys
drive involves::drive involves
rotational delay::rotational delay
delay averages::delay averages
rotation period::rotation period
seagate st3500320ns::seagate st3500320ns
track-to-track seek::track-to-track seek
average reading::average reading
reading seek::reading seek
assume reading::assume reading
disk takes::disk takes
disk reads::disk reads
reads times::reads times
disk read::disk read
individual records::individual records
entire block::entire block
disk head::disk head
disk blocks::disk blocks
last disk::last disk
block read::block read
disk access::disk access
significant improvement::significant improvement
initial disk::initial disk
reads narrowed::reads narrowed
search range::search range
auxiliary index::auxiliary index
first record::first record
sparse index::sparse index
original database::original database
quickly finding::quickly finding
main database::main database
aux index::aux index
desired record::desired record
aux-aux index::aux-aux index
blocks reading::blocks reading
index identifies::index identifies
relevant block::relevant block
aux-index reading::aux-index reading
aux-index block::aux-index block
block identifies::block identifies
auxiliary indices::auxiliary indices
search problem::search problem
search requiring::search requiring
blocking factor::blocking factor
disk cache::disk cache
read insertions::read insertions
complicated deleting::complicated deleting
deleting records::deleting records
database stays::database stays
efficient insertions::efficient insertions
sequential file::sequential file
inserted record::inserted record
made inserting::made inserting
file requires::file requires
space lying::space lying
free space::free space
subsequent insertions::subsequent insertions
nearby block::nearby block
indices adjusted::indices adjusted
out-of-sequence disk::out-of-sequence disk
ideas described::ideas described
sequential traversing::sequential traversing
hierarchical index::hierarchical index
full blocks::full blocks
speed insertions::speed insertions
index balanced::index balanced
elegant recursive::elegant recursive
b-tree minimizes::b-tree minimizes
minimizes waste::minimizes waste
interior nodes::interior nodes
half full::half full
arbitrary number::arbitrary number
non-root node::non-root node
node folk::node folk
keys knuth::keys knuth
term leaf::term leaf
inconsistent bayer::inconsistent bayer
leaf level::leaf level
lowest level::lowest level
knuth considered::knuth considered
lowest keys::lowest keys
implementation choices::implementation choices
entire data::entire data
data record::data record
hold pointers::hold pointers
unfortunate choices::unfortunate choices
authors assume::authors assume
fixed number::fixed number
basic assumption::basic assumption
key size::key size
node size::node size
variable length::variable length
length keys::length keys
non-leaf node::non-leaf node
ordered set::ordered set
half-full nodes::half-full nodes
legal node::legal node
legal nodes::legal nodes
properties make::properties make
b-tree properties::b-tree properties
upper limit::upper limit
lower limit::lower limit
nodes leaf::nodes leaf
delete operations::delete operations
operations grows::operations grows
cost grows::cost grows
store values::store values
nodes b-trees::nodes b-trees
b-trees benefit::b-trees benefit
improved performance::improved performance
specialized structure::specialized structure
classic b-tree::classic b-tree
case height::case height
ordinary b-tree::ordinary b-tree
separation value::separation value
subtle issues::subtle issues
talk page::talk page
tree starting::tree starting
search chooses::search chooses
child pointer::child pointer
search value::search value
value binary::value binary
interest insertion::interest insertion
knuth order::knuth order
insertions start::insertions start
added insert::added insert
legal number::legal number
element insert::element insert
elements ordered::elements ordered
single median::single median
right node::right node
median acting::median acting
single separator::single separator
separator value::separator value
lower bound::lower bound
element moves::element moves
node half::node half
elements allowed::elements allowed
improved algorithm::improved algorithm
single pass::single pass
full nodes::full nodes
nodes encountered::nodes encountered
parent nodes::parent nodes
textbooks impose::textbooks impose
defining b-trees::defining b-trees
b-trees deletion::b-trees deletion
popular strategies::popular strategies
node acts::node acts
separation note::separation note
largest element::largest element
separator likewise::separator likewise
smallest element::smallest element
previous step::previous step
step deleted::step deleted
required number::required number
node rebalancing::node rebalancing
rebalancing starts::rebalancing starts
minimum size::minimum size
redistribution involves::redistribution involves
sibling node::sibling node
redistribution operation::redistribution operation
deficient node::deficient node
separator element::separator element
minimum element::minimum element
element count::element count
right sibling::right sibling
sibling exists::sibling exists
separator moves::separator moves
first element::first element
sibling loses::sibling loses
left sibling::left sibling
last element::last element
sibling sandwiching::sibling sandwiching
node empty::node empty
empty right::empty right
parent loses::parent loses
merged node::merged node
parent note::parent note
rebalancing operations::rebalancing operations
loaded databases::loaded databases
databases tend::databases tend
good sequential::good sequential
sequential behavior::sequential behavior
database grows::database grows
performance challenges::performance challenges
existing collection::existing collection
standard b-tree::standard b-tree
b-tree operations::b-tree operations
initial b-tree::initial b-tree
initial collection::initial collection
initial set::initial set
b-tree construction::b-tree construction
extra element::extra element
maximum size::maximum size
extra value::extra value
root level::root level
level remains::level remains
quick random::quick random
random access::random access
arbitrary block::arbitrary block
basic problem::basic problem
file block::file block
block address::block address
operating systems::operating systems
systems require::systems require
contiguous disk::contiguous disk
blocks converting::blocks converting
operating system::operating system
starting disk::starting disk
created size::created size
resulting disk::resulting disk
logical blocks::logical blocks
physical blocks::physical blocks
involved ms-dos::involved ms-dos
simple file::simple file
file allocation::file allocation
allocation table::allocation table
entry identifies::entry identifies
disk address::disk address
disk utility::disk utility
fat worse::fat worse
free disk::free disk
huge penalty::huge penalty
short file::short file
file chains::file chains
fat12 filesystem::fat12 filesystem
floppy disks::floppy disks
fat architecture::fat architecture
architecture began::architecture began
confront penalties::confront penalties
large disk::large disk
perform disk::perform disk
disk location::disk location
possibly tenex::possibly tenex
level tree::level tree
file fit::file fit
word block::word block
file directory::file directory
physical disk::physical disk
physical address::physical address
block holding::block holding
word file::word file
filesystem hfs::filesystem hfs
linux filesystems::linux filesystems
reiser4 file::reiser4 file
file systems::file systems
systems variations::systems variations
read locks::read locks
concurrent access::concurrent access
tree blocks::tree blocks
search operations::search operations
operations descend::operations descend
leaf write::leaf write
write locks::write locks
tree block::tree block
maximizes access::maximizes access
multiple users::multiple users
important consideration::important consideration
based isam::based isam
isam storage::isam storage
storage methods::storage methods
empty pages::empty pages
normal operations::normal operations
implement node::implement node
node merging::node merging
source code::source code
united states::united states
states patent::states patent
meta access::meta access
access method::access method
tree access::tree access
technique accesses::technique accesses
tree upwards::tree upwards
additional in-memory::additional in-memory
in-memory indexes::in-memory indexes
block cache::block cache
tree notes::tree notes
fat documentation::fat documentation
documentation calls::documentation calls
fixed-size group::fixed-size group
disk sectors::disk sectors
significant difference::significant difference
physical sector::physical sector
special purposes::special purposes
represent disk::represent disk
counted b-trees::counted b-trees
video lectures::video lectures
seagate technology::seagate technology
technology llc::technology llc
serial ata::serial ata
index element::index element
matter bayer::matter bayer
oblivious b-trees::oblivious b-trees
state university::state university
stony brook::stony brook
brook retrieved::brook retrieved
mark russinovich::mark russinovich
inside win2k::inside win2k
win2k ntfs::win2k ntfs
microsoft developer::microsoft developer
efficient locking::efficient locking
concurrent operations::concurrent operations
high concurrency::high concurrency
b-tree code::b-tree code
github project::github project
project hosting::project hosting
lockless concurrent::lockless concurrent
ordered indexes::ordered indexes
acta informatica::acta informatica
ubiquitous b-tree::ubiquitous b-tree
computing surveys::computing surveys
file structures::file structures
concurrency control::concurrency control
-trees databases::-trees databases
preparatory operations::preparatory operations
11th international::11th international
international conference::international conference
large data::large data
data bases::data bases
ordered indices::ordered indices
information sciences::information sciences
sciences report::sciences report
scientific research::scientific research
research laboratories::research laboratories
binary b-trees::binary b-trees
virtual memory::virtual memory
acm-sigfidet workshop::acm-sigfidet workshop
data description::data description
b-tree lecture::b-tree lecture
david scot::david scot
scot taylor::scot taylor
b-tree animation::b-tree animation
animation applet::animation applet
scholarpedia curator::scholarpedia curator
b-tree tutorial::b-tree tutorial
infinitydb btree::infinitydb btree
btree implementation::btree implementation
structures entry::structures entry
database index::database index
index techniques::index techniques
techniques red::techniques red
encyclopedia red::encyclopedia red
extra bit::extra bit
storage ensures::storage ensures
tree balance::tree balance
coloring properties::coloring properties
guarantee searching::guarantee searching
total number::total number
tree rearrangement::tree rearrangement
node requires::node requires
memory footprint::memory footprint
additional bit::additional bit
additional memory::additional memory
memory cost::memory cost
cost contents::cost contents
related data::related data
insertion complexity::insertion complexity
parallel algorithms::parallel algorithms
links history::links history
original data::original data
symmetric binary::symmetric binary
binary b-tree::binary b-tree
sedgewick entitled::sedgewick entitled
dichromatic framework::dichromatic framework
best-looking color::best-looking color
color produced::color produced
color laser::color laser
laser printer::laser printer
xerox parc::xerox parc
special type::special type
organize pieces::organize pieces
comparable data::comparable data
text fragments::text fragments
computer memory::computer memory
null child::null child
explicit nodes::explicit nodes
save memory::save memory
single sentinel::single sentinel
node performs::node performs
node red::node red
efficient in-order::efficient in-order
order left::order left
left root::left root
search-time results::search-time results
requirements imposed::requirements imposed
necessarily vice::necessarily vice
vice versa::vice versa
red node::red node
black child::black child
black parent::black parent
descendant nil::descendant nil
nil nodes::nil nodes
black nodes::black nodes
constraints enforce::constraints enforce
critical property::critical property
farthest leaf::farthest leaf
nearest leaf::nearest leaf
roughly height-balanced::roughly height-balanced
finding values::finding values
values require::values require
theoretical upper::theoretical upper
upper bound::upper bound
ordinary binary::ordinary binary
leaf consist::leaf consist
nodes longer::nodes longer
inserting red::inserting red
red nodes::red nodes
consecutive red::consecutive red
path consists::path consists
alternating black::alternating black
path alternates::path alternates
maximal paths::maximal paths
path analogy::path analogy
value matching::value matching
black node::black node
optional value::optional value
equivalent red::equivalent red
graphical representation::graphical representation
parent black::parent black
horizontal cluster::horizontal cluster
modified graphical::modified graphical
structurally equivalent::structurally equivalent
minimum fill::minimum fill
fill factor::fill factor
maximum capacity::maximum capacity
tree conversion::tree conversion
conversion multiple::conversion multiple
multiple red::multiple red
b-tree cluster::b-tree cluster
central value::central value
value stored::value stored
values contained::values contained
root black::root black
reference b-tree::reference b-tree
b-tree nodes::b-tree nodes
color attribute::color attribute
cluster vector::cluster vector
e.g objects::e.g objects
null references::null references
value pointers::value pointers
child references::child references
improving data::improving data
data locality::data locality
larger orders::larger orders
colors suppose::colors suppose
blue red::blue red
tree defined::tree defined
successive nodes::successive nodes
blue nodes::blue nodes
moderate volumes::moderate volumes
colored trees::colored trees
performing rotations::performing rotations
multiple separate::multiple separate
separate nodes::separate nodes
large volumes::large volumes
average fill::average fill
fill factors::fill factors
equivalent multicolored::equivalent multicolored
equivalent b-tree::equivalent b-tree
total height::total height
multicolored tree::multicolored tree
non-black nodes::non-black nodes
case occurs::case occurs
children applications::children applications
trees offer::trees offer
worst-case guarantees::worst-case guarantees
time-sensitive applications::time-sensitive applications
real-time applications::real-time applications
valuable building::valuable building
building blocks::building blocks
incomputational geometry::incomputational geometry
fair scheduler::fair scheduler
current linux::current linux
linux kernels::linux kernels
structure supporting::structure supporting
language dictionaries::language dictionaries
program dictionaries::program dictionaries
functional programming::functional programming
common persistent::common persistent
associative arraysand::associative arraysand
arraysand sets::arraysand sets
previous versions::previous versions
persistent version::persistent version
trees requires::trees requires
important tool::important tool
introductory algorithm::introductory algorithm
algorithm texts::algorithm texts
texts introduce::texts introduce
sedgewick introduced::sedgewick introduced
simpler version::simpler version
left-leaning red::left-leaning red
unspecified degree::unspecified degree
llrb maintains::llrb maintains
additional invariant::additional invariant
red links::red links
deletes red::deletes red
tree isometry::tree isometry
color flip::color flip
red color::red color
children nodes::children nodes
nodes leaves::nodes leaves
tango tree::tango tree
tree optimized::tree optimized
structure operations::structure operations
read-only operations::read-only operations
tree require::tree require
tree restoring::tree restoring
black properties::black properties
properties requires::properties requires
small number::small number
times remain::times remain
interior node::interior node
black leaves::black leaves
black leaf::black leaf
nearby nodes::nearby nodes
term uncle::term uncle
uncle node::uncle node
human family::human family
family trees::family trees
trees note::trees note
node black::node black
rotation note::rotation note
entire procedure::entire procedure
uncle note::uncle note
label continues::label continues
color shown::color shown
numbered triangle::numbered triangle
triangle represents::triangle represents
unspecified depth::unspecified depth
black circle::black circle
circle atop::circle atop
triangle designates::triangle designates
black root::black root
first node::first node
grandparent nodes::grandparent nodes
struct node::struct node
grandparent means::grandparent means
satisfy property::satisfy property
violated void::violated void
void insert_case1::void insert_case1
valid property::valid property
leaf children::leaf children
property remains::property remains
remains satisfied::remains satisfied
satisfied void::satisfied void
void insert_case2::void insert_case2
grandparent node::grandparent node
maintain property::maintain property
current red::current red
violate properties::violate properties
red parent::red parent
tail-recursive call::tail-recursive call
rotations occur::rotations occur
constant number::constant number
occur void::occur void
void insert_case3::void insert_case3
remaining cases::remaining cases
code samples::code samples
left rotation::left rotation
void insert_case4::void insert_case4
right rotation::right rotation
violating property::violating property
resulting tree::resulting tree
tree satisfies::tree satisfies
satisfies property::satisfies property
void insert_case5::void insert_case5
tail recursion::tail recursion
recursion removal::recursion removal
regular binary::regular binary
non-leaf children::non-leaf children
maximum element::maximum element
normal binary::normal binary
non-leaf child::non-leaf child
solution applies::solution applies
selected child::selected child
black non-leaf::black non-leaf
leaf child::leaf child
violate property::violate property
deleted node::deleted node
simple case::simple case
break properties::break properties
complex case::complex case
white represents::white represents
unknown color::unknown color
tree remains::tree remains
null leaf::null leaf
leaf remains::leaf remains
steps outlined::steps outlined
function replace_node::function replace_node
replace_node substitutes::replace_node substitutes
substitutes child::substitutes child
null leaves::null leaves
node objects::node objects
insertion section::insertion section
section works::section works
void delete_one_child::void delete_one_child
non-null child::non-null child
first calling::first calling
calling delete_case1::calling delete_case1
original parent::original parent
fewer black::fewer black
violates property::violates property
void delete_case1::void delete_case1
code examples::code examples
account case::account case
grandparent note::grandparent note
red child::red child
black sibling::black sibling
void delete_case2::void delete_case2
paths passing::paths passing
passing throughs::passing throughs
parent made::parent made
evens things::evens things
rebalancing procedure::rebalancing procedure
void delete_case3::void delete_case3
deleted black::deleted black
paths void::paths void
void delete_case4::void delete_case4
void delete_case5::void delete_case5
rotate correctly::rotate correctly
last test::last test
child black::child black
additional black::additional black
black ancestor::black ancestor
black grandparent::black grandparent
exchanged colors::exchanged colors
net effect::net effect
restored properties::restored properties
white node::white node
transformation void::transformation void
void delete_case6::void delete_case6
function calls::function calls
delete case::delete case
in-place implementation::in-place implementation
recursion loop::recursion loop
successive ancestors::successive ancestors
loops back::loops back
rotation occurs::rotation occurs
additional rotations::additional rotations
induction height::induction height
inductive step::inductive step
nodes implies::nodes implies
inductive hypothesis::inductive hypothesis
tree code::tree code
black property::black property
original height::original height
insert routine::insert routine
complexity parallel::complexity parallel
log log::log log
computer model::computer model
items fast::items fast
fast search::fast search
deletion parallel::deletion parallel
structures notes::structures notes
algorithms charles::algorithms charles
stein mit::stein mit
john morris::john morris
maintenance algorithms::maintenance algorithms
19th annual::19th annual
red-black bsts::red-black bsts
bsts coursera::bsts coursera
personal computer::personal computer
today entering::today entering
graphic user::graphic user
user interfaces::user interfaces
object-oriented programmings::object-oriented programmings
laser printing::laser printing
nearby color::nearby color
print things::print things
red looked::red looked
color red::color red
theoretical computer::theoretical computer
parallel algorithm::parallel algorithm
items runs::items runs
crcw pram::crcw pram
log nprocessors::log nprocessors
erew pram::erew pram
pram references::pram references
article includes::article includes
sources remain::sources remain
remain unclear::remain unclear
insufficient inline::insufficient inline
inline citations::inline citations
precise citations::precise citations
diego state::diego state
roger whitney::roger whitney
functional setting::functional setting
working implementation::working implementation
ocw mit::ocw mit
mit lecture::mit lecture
prof erik::prof erik
erik demaine::erik demaine
insertion visualization::insertion visualization
youtube visualization::youtube visualization
pre-sorted data::pre-sorted data
data insertions::data insertions
elementary binary::elementary binary
intrusive red-black::intrusive red-black
tree written::tree written
tree::tree
data::data
structure::structure
wikipedia::wikipedia
free::free
encyclopedia::encyclopedia
confused::confused
trie::trie
specific::specific
type::type
article::article
additional::additional
citations::citations
verification::verification
improve::improve
adding::adding
reliable::reliable
sources::sources
unsourced::unsourced
material::material
challenged::challenged
removed::removed
august::august
simple::simple
unordered::unordered
diagram::diagram
node::node
labeled::labeled
two::two
children::children
parent::parent
root::root
top::top
computer::computer
science::science
widely::widely
abstract::abstract
adt::adt
implementing::implementing
simulates::simulates
hierarchical::hierarchical
value::value
subtrees::subtrees
represented::represented
set::set
linked::linked
nodes::nodes
defined::defined
recursively::recursively
locally::locally
collection::collection
starting::starting
consisting::consisting
list::list
references::references
constraints::constraints
reference::reference
duplicated::duplicated
points::points
alternatively::alternatively
abstractly::abstractly
globally::globally
ordered::ordered
assigned::assigned
perspectives::perspectives
analyzed::analyzed
mathematically::mathematically
worked::worked
separately::separately
adjacency::adjacency
edges::edges
represent::represent
digraph::digraph
instance::instance
talk::talk
general::general
contents::contents
hide::hide
definition::definition
terminologies::terminologies
trees::trees
recursive::recursive
theory::theory
mathematical::mathematical
terminology::terminology
drawing::drawing
representations::representations
generalizations::generalizations
digraphs::digraphs
traversal::traversal
methods::methods
common::common
operations::operations
notes::notes
external::external
links::links
edit::edit
non-connected::non-connected
parts::parts
undirected::undirected
cycle::cycle
1-2-4-3::1-2-4-3
linear::linear
trivially::trivially
possibly::possibly
non-linear::non-linear
made::made
vertices::vertices
null::null
orempty::orempty
empty::empty
consists::consists
potentially::potentially
levels::levels
form::form
hierarchy::hierarchy
converse::converse
notion::notion
child::child
siblings::siblings
descendant::descendant
reachable::reachable
repeated::repeated
proceeding::proceeding
ancestor::ancestor
leaf::leaf
internal::internal
degree::degree
number::number
sub::sub
edge::edge
connection::connection
path::path
sequence::sequence
connecting::connecting
level::level
connections::connections
height::height
longest::longest
downward::downward
depth::depth
forest::forest
disjoint::disjoint
distinction::distinction
concrete::concrete
analogous::analogous
interpreted::interpreted
finite::finite
case::case
required::required
non-empty::non-empty
fixed::fixed
size::size
branching::branching
factor::factor
binary::binary
desired::desired
group::group
defines::defines
directed::directed
graph::graph
loops::loops
loop::loop
requirement::requirement
point::point
single::single
fact::fact
violates::violates
corrupt::corrupt
due::due
discussed::discussed
implicitly::implicitly
assuming::assuming
implemented::implemented
symbolically::symbolically
elegantly::elegantly
mutual::mutual
recursion::recursion
basic::basic
examples::examples
terms::terms
note::note
values::values
functional::functional
languages::languages
assumes::assumes
referential::referential
transparency::transparency
simply::simply
lists::lists
add::add
condition::condition
global::global
topology::topology
parents::parents
analyzing::analyzing
topologically::topologically
functions::functions
nil::nil
axioms::axioms
inductive::inductive
constructors::constructors
viewed::viewed
generally::generally
attached::attached
concretely::concretely
rooted::rooted
direction::direction
narrow::narrow
term::term
arborescence::arborescence
meaning::meaning
underlying::underlying
connected::connected
distinguished::distinguished
vertex::vertex
designated::designated
determines::determines
arrows::arrows
ordering::ordering
properly::properly
bounded::bounded
outdegree::outdegree
allowing::allowing
makes::makes
definitions::definitions
simpler::simpler
complicated::complicated
allowed::allowed
hand::hand
simplify::simplify
defining::defining
.the::.the
complete::complete
sets::sets
include::include
fork::fork
operation::operation
separate::separate
morechild::morechild
convention::convention
drawn::drawn
growing::growing
orsuperior::orsuperior
inode::inode
short::short
branch::branch
similarly::similarly
anouter::anouter
terminal::terminal
topmost::topmost
depending::depending
necessarily::necessarily
algorithms::algorithms
begin::begin
pass::pass
post-order::post-order
depth-first::depth-first
search::search
first::first
visit::visit
access::access
last::last
i.e::i.e
reached::reached
formal::formal
unique::unique
diagrams::diagrams
conventionally::conventionally
heaps::heaps
special::special
properties::properties
subtree::subtree
length::length
commonly::commonly
needed::needed
manipulation::manipulation
self-balancing::self-balancing
avl::avl
descendants::descendants
correspond::correspond
corresponds::corresponds
entire::entire
proper::proper
analogy::analogy
subset::subset
plane::plane
essentially::essentially
uniquely::uniquely
fixes::fixes
conventional::conventional
order::order
counterclockwise::counterclockwise
arranges::arranges
incoming::incoming
yields::yields
embedding::embedding
ambient::ambient
isotopy::isotopy
conversely::conversely
places::places
family::family
distance::distance
horizontal::horizontal
line::line
obtains::obtains
standard::standard
left::left
right::right
ways::ways
dynamically::dynamically
allocated::allocated
records::records
pointers::pointers
items::items
array::array
relationships::relationships
determined::determined
positions::positions
e.g::e.g
heap::heap
head::head
tail::tail
future::future
modified::modified
lisp::lisp
s-expressions::s-expressions
information::information
included::included
expanding::expanding
pointer::pointer
stored::stored
upward::upward
threaded::threaded
thought::thought
generalized::generalized
graphs::graphs
removing::removing
cycles::cycles
considered::considered
pairs::pairs
termsparent::termsparent
replaced::replaced
source::source
target::target
implementation::implementation
strategies::strategies
exist::exist
local::local
structures::structures
acyclic::acyclic
stated::stated
assumed::assumed
one-to-one::one-to-one
correspondence::correspondence
arbitrary::arbitrary
arbitrarily::arbitrarily
pick::pick
make::make
making::making
producing::producing
assign::assign
result::result
picking::picking
produces::produces
define::define
union::union
equivalently::equivalently
taking::taking
erasing::erasing
natural::natural
forests::forests
corecursion::corecursion
breadth-first::breadth-first
main::main
stepping::stepping
means::means
walking::walking
action::action
walk::walk
performed::performed
arrives::arrives
traversed::traversed
pre-order::pre-order
respective::respective
finally::finally
in-order::in-order
scenario::scenario
referring::referring
specifically::specifically
level-order::level-order
effectively::effectively
performs::performs
entirety::entirety
visited::visited
direct::direct
grandchild::grandchild
enumerating::enumerating
section::section
searching::searching
item::item
position::position
deleting::deleting
pruning::pruning
grafting::grafting
finding::finding
representing::representing
storing::storing
easily::easily
searchable::searchable
sorted::sorted
workflow::workflow
compositing::compositing
digital::digital
images::images
visual::visual
effects::effects
routing::routing
mathematics::mathematics
dialog::dialog
inheritance::inheritance
dsw::dsw
algorithm::algorithm
enfilade::enfilade
child-right::child-right
sibling::sibling
temporal::temporal
memory::memory
jump::jump
subgraph::subgraph
forms::forms
sense::sense
weisstein::weisstein
eric::eric
mathworld::mathworld
donald::donald
knuth::knuth
art::art
programming::programming
fundamental::fundamental
edition::edition
addison-wesley::addison-wesley
isbn::isbn
0-201-89683-4::0-201-89683-4
thomas::thomas
cormen::cormen
charles::charles
leiserson::leiserson
ronald::ronald
rivest::rivest
clifford::clifford
stein::stein
introduction::introduction
mit::mit
press::press
mcgraw-hill::mcgraw-hill
0-262-03293-7::0-262-03293-7
chapters::chapters
red-black::red-black
augmenting::augmenting
wikimedia::wikimedia
commons::commons
media::media
related::related
presenting::presenting
complex::complex
analysis::analysis
sally::sally
knipe::knipe
description::description
dictionary::dictionary
wormweb.org::wormweb.org
interactive::interactive
visualization::visualization
elegans::elegans
cell::cell
visualize::visualize
lineage::lineage
nematode::nematode
javascript::javascript
allison::allison
show::show
categories::categories
types::types
knowledge::knowledge
representation::representation
b-tree::b-tree
unbalanced::unbalanced
referred::referred
notions::notions
triple::triple
singleton::singleton
authors::authors
perspective::perspective
k-ary::k-ary
arborescences::arborescences
bifurcating::bifurcating
appears::appears
books::books
modern::modern
prevailed::prevailed
interpret::interpret
emphasize::emphasize
computing::computing
seldom::seldom
solely::solely
typical::typical
labeling::labeling
function::function
associates::associates
labelled::labelled
implement::implement
efficient::efficient
sorting::sorting
designation::designation
non-root::non-root
present::present
matters::matters
applications::applications
significant::significant
termed::termed
vary::vary
significantly::significantly
author::author
non-leaf::non-leaf
nt::nt
concepts::concepts
combinatorics::combinatorics
arrays::arrays
encodings::encodings
succinct::succinct
encoding::encoding
insertion::insertion
7.1.1::7.1.1
7.1.2::7.1.2
deletion::deletion
7.2.1::7.2.1
7.2.2::7.2.2
7.3.1::7.3.1
7.3.2::7.3.2
bibliography::bibliography
rewritten::rewritten
comply::comply
quality::quality
standards::standards
thediscussion::thediscussion
page::page
suggestions::suggestions
july::july
full::full
formed::formed
establish::establish
fix::fix
possibility::possibility
artifact::artifact
textbooks::textbooks
extended::extended
purpose::purpose
denote::denote
obtained::obtained
sub-trees::sub-trees
imagining::imagining
construction::construction
understanding::understanding
square::square
regular::regular
circles::circles
a.k.a::a.k.a
naturally::naturally
imparts::imparts
distinguish::distinguish
partitioning::partitioning
triplet::triplet
requiring::requiring
informal::informal
quoting::quoting
well-standardized::well-standardized
varies::varies
literature::literature
citation::citation
ancestry::ancestry
chart::chart
maps::maps
perfect::perfect
depth-4::depth-4
leaves::leaves
ambiguously::ambiguously
acomplete::acomplete
person::person
biological::biological
mother::mother
father::father
completely::completely
filled::filled
clarification::clarification
specialized::specialized
infinite::infinite
countably::countably
paths::paths
uncountable::uncountable
cardinality::cardinality
continuum::continuum
order-preserving::order-preserving
bijection::bijection
cantor::cantor
stern::stern
brocot::brocot
positive::positive
irrational::irrational
numbers::numbers
balanced::balanced
minimum::minimum
maximum::maximum
greatest::greatest
abcde::abcde
abcd::abcd
abc::abc
differ::differ
farther::farther
balancing::balancing
schemes::schemes
degenerate::degenerate
pathological::pathological
performance-wise::performance-wise
behave::behave
ceiling::ceiling
absent::absent
exists::exists
bottom-most::bottom-most
n::-NONE-
cite::cite
considers::considers
problem::problem
counting::counting
multiply::multiply
interchanging::interchanging
produce::produce
distinct::distinct
original::original
equal::equal
fully::fully
parenthesizing::parenthesizing
string::string
symbols::symbols
separated::separated
operators::operators
determine::determine
argument::argument
subexpressions::subexpressions
operator::operator
parenthesize::parenthesize
obvious::obvious
addition::addition
redundant::redundant
parentheses::parentheses
parenthesized::parenthesized
expression::expression
disallowed::disallowed
counted::counted
characterized::characterized
pair::pair
sizes::sizes
jrespectively::jrespectively
integer::integer
catalan::catalan
index::index
strings::strings
words::words
dyck::dyck
language::language
consist::consist
satisfies::satisfies
word::word
subword::subword
enclosed::enclosed
initial::initial
matching::matching
remaining::remaining
closing::closing
parenthesis::parenthesis
lengths::lengths
satisfy::satisfy
bijective::bijective
enclose::enclose
extra::extra
occurring::occurring
atom::atom
dotted-pair::dotted-pair
symbol::symbol
describing::describing
ability::ability
implies::implies
elements::elements
magma::magma
constructed::constructed
primitives::primitives
typically::typically
fewer::fewer
sentinel::sentinel
method::method
wastes::wastes
fair::fair
bit::bit
half::half
conservative::conservative
alternative::alternative
tagged::tagged
unions::unions
3-tuple::3-tuple
code::code
ocaml::ocaml
dialect::dialect
stores::stores
character::character
chr_tree::chr_tree
char::char
implicit::implicit
space::space
compact::compact
arrangement::arrangement
found::found
indices::indices
benefits::benefits
storage::storage
locality::locality
preorder::preorder
expensive::expensive
grow::grow
proportional::proportional
wasted::wasted
added::added
occupies::occupies
close::close
established::established
theoretical::theoretical
lower::lower
bounds::bounds
view::view
identical::identical
large::large
bits::bits
encode::encode
occupy::occupy
meets::meets
bound::bound
outputting::outputting
simultaneously::simultaneously
store::store
consecutive::consecutive
accomplishes::accomplishes
encodesuccinct::encodesuccinct
bitstring::bitstring
append::append
n.data::n.data
n.left::n.left
n.right::n.right
end::end
lost::lost
convert::convert
output::output
back::back
decodesuccinct::decodesuccinct
remove::remove
put::put
create::create
element::element
return::return
sophisticated::sophisticated
directly::directly
re::re
mapping::mapping
automatically::automatically
ofn::ofn
lcrs::lcrs
doubly::doubly
chained::chained
filial-heir::filial-heir
chain::chain
thinking::thinking
fields::fields
beginning::beginning
field::field
b,c,d,e,f,g::b,c,d,e,f,g
converted::converted
tilted::tilted
sideways::sideways
black::black
blue::blue
written::written
letters::letters
rotations::rotations
variety::variety
mutator::mutator
inserted::inserted
assigns::assigns
process::process
inserting::inserting
slightly::slightly
insert::insert
unambiguously::unambiguously
suppose::suppose
delete::delete
accomplished::accomplished
setting::setting
deleted::deleted
including::including
rearrangement::rearrangement
visiting::visiting
attempt::attempt
farthest::farthest
caveat::caveat
unlike::unlike
remember::remember
seedepth-first::seedepth-first
contrasting::contrasting
attempts::attempts
closest::closest
breadth-index::breadth-index
instructions::instructions
reading::reading
bitwise::bitwise
floor::floor
log2::log2
question::question
masked::masked
1mean::1mean
step::step
continues::continues
successively::successively
checking::checking
rightmost::rightmost
final::final
time-space::time-space
trade-off::trade-off
iterating::iterating
versus::versus
pointer::NNS
sibling::NNP
ahnentafel::ahnentafel
huffman::huffman
kraft::kraft
inequality::inequality
optimal::optimal
random::random
red::red
rope::rope
splay::splay
strahler::strahler
primitive::primitive
pythagorean::pythagorean
triples::triples
generating::generating
unrooted::unrooted
rowan::rowan
garnier::garnier
john::john
taylor::taylor
discrete::discrete
proofs::proofs
crc::crc
978-1-4398-1280-8::978-1-4398-1280-8
steven::steven
skiena::skiena
design::design
manual::manual
springer::springer
business::business
978-1-84800-070-4::978-1-84800-070-4
volume::volume
pearson::pearson
education::education
flores::flores
prentice-hall::prentice-hall
kenneth::kenneth
rosen::rosen
7th::7th
978-0-07-338309-5::978-0-07-338309-5
david::david
mazur::mazur
guided::guided
tour::tour
association::association
america::america
978-0-88385-762-5::978-0-88385-762-5
makinson::makinson
logic::logic
maths::maths
978-1-84628-845-6::978-1-84628-845-6
jonathan::jonathan
gross::gross
combinatorial::combinatorial
978-1-58488-743-0::978-1-58488-743-0
hazewinkel::hazewinkel
michiel::michiel
mathematics,springer::mathematics,springer
978-1-55608-010-4::978-1-55608-010-4
print::print
.encyclopaedia::.encyclopaedia
supplement::supplement
978-0-7923-4709-5::978-0-7923-4709-5
l.r::l.r
foulds::foulds
978-0-387-97599-3::978-0-387-97599-3
chiang::chiang
man-tak::man-tak
shing::shing
courier::courier
dover::dover
publications::publications
978-0-486-41962-6::978-0-486-41962-6
lih-hsing::lih-hsing
hsu::hsu
cheng-kuan::cheng-kuan
lin::lin
interconnection::interconnection
networks::networks
978-1-4200-4482-9::978-1-4200-4482-9
flum::flum
grohe::grohe
parameterized::parameterized
complexity::complexity
245.isbn::245.isbn
978-3-540-29953-0::978-3-540-29953-0
nist::nist
richard::richard
stanley::stanley
enumerative::enumerative
p.36::p.36
aaron::aaron
tenenbaum::tenenbaum
prentice::prentice
hall::hall
0-13-199746-7::0-13-199746-7
paul::paul
entry::entry
u.s::u.s
national::national
institute::institute
technology::technology
december::december
2004.online::2004.online
version::version
accessed::accessed
2010-12-19::2010-12-19
mehta::mehta
dinesh::dinesh
sartaj::sartaj
sahni::sahni
handbook::handbook
applications.chapman::applications.chapman
1-58488-435-5::1-58488-435-5
samanta::samanta
classic::classic
phi::phi
learning::learning
pvt::pvt
265.isbn::265.isbn
978-81-203-1874-8::978-81-203-1874-8
michael::michael
scott::scott
pragmatics::pragmatics
3rd::3rd
morgan::morgan
kaufmann::kaufmann
978-0-08-092299-7::978-0-08-092299-7
dung::dung
nguyen::nguyen
rice.edu::rice.edu
retrieved::retrieved
28,2010::28,2010
vol::vol
subsections::subsections
2.3.1::2.3.1
2.3.2::2.3.2
findstat::findstat
database::database
gamedev.net::gamedev.net
proof::proof
induction::induction
bottom-up::bottom-up
dynamic::dynamic
a,b::a,b
dancing::dancing
htree::htree
interval::interval
statistic::statistic
left-leaning::left-leaning
scapegoat::scapegoat
treap::treap
weight-balanced::weight-balanced
binomial::binomial
fibonacci::fibonacci
leftist::leftist
pairing::pairing
skew::skew
van::van
emde::emde
boas::boas
hash::hash
radix::radix
suffix::suffix
ternary::ternary
x-fast::x-fast
y-fast::y-fast
spatial::spatial
bsp::bsp
cartesian::cartesian
hilbert::hilbert
k-d::k-d
metric::metric
mvp::mvp
octree::octree
priority::priority
quad::quad
segment::segment
cover::cover
exponential::exponential
fenwick::fenwick
finger::finger
fusion::fusion
calendar::calendar
idistance::idistance
left-child::left-child
right-sibling::right-sibling
log-structured::log-structured
merge::merge
merkle::merkle
range::range
spqr::spqr
invented::invented
p.f::p.f
windley::windley
a.d::a.d
booth::booth
a.j.t::a.j.t
colin::colin
t.n::t.n
hibbard::hibbard
big::big
notation::notation
average::average
worst::worst
log::log
bst::bst
ofcontainers::ofcontainers
names::names
fast::fast
lookup::lookup
removal::removal
tables::tables
key::key
phone::phone
keys::keys
principle::principle
place::place
traverse::traverse
comparisons::comparisons
deciding::deciding
based::based
comparison::comparison
continue::continue
skip::skip
takes::takes
logarithm::logarithm
timerequired::timerequired
find::find
unsorted::unsorted
slower::slower
sort::sort
queue::queue
performance::performance
optionally::optionally
denoted::denoted
additionally::additionally
property::property
states::states
greater::greater
sub-tree::sub-tree
smaller::smaller
record::record
sequencing::sequencing
purposes::purposes
compared::compared
part::part
major::major
advantage::advantage
easy::easy
construct::construct
multisets::multisets
associative::associative
disadvantages::disadvantages
shape::shape
totally::totally
depends::depends
insertions::insertions
degenerated::degenerated
long::long
run::run
increase::increase
intermixed::intermixed
expected::expected
approaches::approaches
grows::grows
faster::faster
support::support
requires::requires
comparator::comparator
subroutinethat::subroutinethat
computes::computes
total::total
explicitly::explicitly
less-than::less-than
dubious::dubious
discuss::discuss
iterative::iterative
examining::examining
equals::equals
successful::successful
searched::searched
expressed::expressed
find-recursive::find-recursive
call::call
initially::initially
node.key::node.key
node.left::node.left
node.right::node.right
iteratively::iteratively
current-node::current-node
current-node.key::current-node.key
current-node.left::current-node.left
current-node.right::current-node.right
resembles::resembles
begins::begins
eventually::eventually
reach::reach
key-value::key-value
encoded::encoded
newnode::newnode
examine::examine
void::void
int::int
root::root-
destructive::destructive
procedural::procedural
variant::variant
modifies::modifies
constant::constant
stack::stack
prior::prior
python::python
reconstruct::reconstruct
ancestors::ancestors
remains::remains
valid::valid
persistent::persistent
def::def
binary_tree_insert::binary_tree_insert
treenode::treenode
node.value::node.value
rebuilt::rebuilt
big-o::big-o
explain::explain
preserving::preserving
cases::cases
replace::replace
choose::choose
successor::successor
predecessor::predecessor
copy::copy
reaching::reaching
fall::fall
broadly::broadly
speaking::speaking
harder::harder
left-most::left-most
right-most::right-most
inorder::inorder
identified::identified
copied::copied
works::works
symmetrically::symmetrically
consistently::consistently
two-child::two-child
lead::lead
implementations::implementations
select::select
times::times
runtime::runtime
require::require
find_min::find_min
current_node::current_node
current_node.left_child::current_node.left_child
replace_node_in_parent::replace_node_in_parent
new_value::new_value
self.parent::self.parent
self.parent.left_child::self.parent.left_child
self.parent.right_child::self.parent.right_child
new_value.parent::new_value.parent
binary_tree_delete::binary_tree_delete
self.key::self.key
self.left_child.binary_tree_delete::self.left_child.binary_tree_delete
elif::elif
self.right_child.binary_tree_delete::self.right_child.binary_tree_delete
self.left_child::self.left_child
self.right_child::self.right_child
self.right_child.find_min::self.right_child.find_min
successor.key::successor.key
successor.binary_tree_delete::successor.binary_tree_delete
self.replace_node_in_parent::self.replace_node_in_parent
created::created
traversing::traversing
accessing::accessing
continuing::continuing
pattern::pattern
conduct::conduct
comparable::comparable
callback::callback
traverse_binary_tree::traverse_binary_tree
node.leftchild::node.leftchild
node.rightchild::node.rightchild
asymptotically::asymptotically
similar::similar
heapsort::heapsort
worst-case::worst-case
build_binary_tree::build_binary_tree
feed::feed
chains::chains
example,build_binary_tree::example,build_binary_tree
overcoming::overcoming
flaw::flaw
procedure::procedure
done::done
nlog::nlog
practice::practice
poor::poor
cache::cache
overhead::overhead
tree-based::tree-based
allocation::allocation
inferior::inferior
sorts::sorts
static::static
incremental::incremental
keeping::keeping
solution::solution
larger::larger
current::current
poses::poses
figuring::figuring
out::out
greedy::greedy
check::check
work::work
hold::hold
violation::violation
decision::decision
flowing::flowing
violating::violating
contract::contract
lesser::lesser
struct::struct
bool::bool
isbst::isbst
mindata::mindata
maxdata::maxdata
true::true
node::node-
false::false
int_min::int_min
int_max::int_max
puts::puts
creating::creating
min_value::min_value
max_value::max_value
shrinking::shrinking
serve::serve
queues::queues
previously::previously
explained::explained
find-min::find-min
walks::walks
hitting::hitting
precondition::precondition
hasleft::hasleft
find-max::find-max
follow::follow
delete-min::delete-min
max::max
logarithmic::logarithmic
find-max,delete-min::find-max,delete-min
delete-max::delete-max
suitable::suitable
double-ended::double-ended
moves::moves
frequently::frequently
nearer::nearer
holds::holds
randomly::randomly
chosen::chosen
higher::higher
tango::tango
optimized::optimized
searches::searches
titles::titles
exception::exception
bottom::bottom
existing::existing
nth::nth
fill::fill
degrades::degrades
handle::handle
re-balancing::re-balancing
feeding::feeding
measurement::measurement
heger::heger
presented::presented
smallest::smallest
amount::amount
variations::variations
near-to-perfect::near-to-perfect
balance::balance
plan::plan
modifying::modifying
cost::cost
minimized::minimized
estimates::estimates
costs::costs
system::system
considerably::considerably
speed::speed
lookups::lookups
english::english
spell::spell
checker::checker
frequency::frequency
intext::intext
corpora::corpora
placing::placing
agerasia::agerasia
seek::seek
dense::dense
advance::advance
good::good
alphabetic::alphabetic
constraint::constraint
modification::modification
oabts::oabts
randomized::randomized
geometry::geometry
day::day
stout::stout
warren::warren
0-262-03384-4::0-262-03384-4
mehlhorn::mehlhorn
kurt::kurt
sanders::sanders
peter::peter
toolbox::toolbox
dominique::dominique
disquisition::disquisition
behavior::behavior
pdf::pdf
european::european
journal::journal
informatics::informatics
professional::professional
gonnet::gonnet
gaston::gaston
scientific::scientific
computation::computation
eth::eth
rich::rich
2nd::2nd
jarc::jarc
duane::duane
traversals::traversals
visualizations::visualizations
university::university
maryland::maryland
6.2.2::6.2.2
0-201-89685-0::0-201-89685-0
sean::sean
ppt::ppt
visualization-a::visualization-a
powerpoint::powerpoint
slides::slides
approach::approach
suny::suny
oneonta::oneonta
parlante::parlante
nick::nick
library::library
stanford::stanford
literate::literate
literateprograms::literateprograms
visualizer::visualizer
animation::animation
bt-based::bt-based
kovac::kovac
kubo::kubo
java::java
applet::applet
kore::kore
ponden::ponden
semin::semin
programovania::programovania
madru::madru
justin::justin
jdserver::jdserver
msdn::msdn
microsoft::microsoft
georgy::georgy
adelson-velsky::adelson-velsky
landis::landis
named::named
inventors::inventors
heights::heights
rebalancing::rebalancing
restore::restore
deletions::deletions
rebalanced::rebalanced
soviet::soviet
published::published
paper::paper
organization::organization
lookup-intensive::lookup-intensive
rigidly::rigidly
height-balanced::height-balanced
-balanced::-balanced
hugely::hugely
differing::differing
involve::involve
carrying::carrying
actions::actions
carried::carried
modifications::modifications
normal::normal
previous::previous
explored::explored
amortized::amortized
instances::instances
exploring::exploring
nearby::nearby
moving::moving
leftmost::leftmost
onenode::onenode
steps::steps
manner::manner
link::link
enter::enter
leave::leave
approximately::approximately
consistency::consistency
invariants::invariants
retracing::retracing
achieved::achieved
balancefactor::balancefactor
pictorial::pictorial
rebalance::rebalance
numbered::numbered
lettered::lettered
triangles::triangles
denotes::denotes
factors::factors
corrected::corrected
temporarily::temporarily
recomputed::recomputed
checked::checked
corrections::corrections
rotation::rotation
assume::assume
opposed::opposed
depicted::depicted
column::column
illustration::illustration
lean::lean
rotate::rotate
mirror::mirror
increases::increases
left_child::left_child
balance_factor::balance_factor
picture::picture
temporary::temporary
rotate_left::rotate_left
reduce::reduce
rotate_right::rotate_right
break::break
absorbed::absorbed
right_child::right_child
stop::stop
observe::observe
correction::correction
lie::lie
applied::applied
completed::completed
actual::actual
largest::largest
exchange::exchange
disturbed::disturbed
change::change
attach::attach
update::update
retrace::retrace
adjusting::adjusting
decrease::decrease
rotated::rotated
decreases::decreases
small::small
indicating::indicating
remained::remained
unchanged::unchanged
decreased::decreased
occur::occur
real::real
difference::difference
limiting::limiting
strictly::strictly
golden::golden
ratio::ratio
leading::leading
retrieval::retrieval
t-tree::t-tree
robert::robert
sedgewick::sedgewick
0-201-06672-6::0-201-06672-6
chapter::chapter
proceedings::proceedings
ussr::ussr
academy::academy
sciences::sciences
russian::russian
translation::translation
myron::myron
ricci::ricci
math::math
doklady::doklady
pfaff::pfaff
ben::ben
june::june
bsts::bsts
software::software
minimal::minimal
colored::colored
burkhard::burkhard
walt::walt
spring::spring
advanced::advanced
jolla::jolla
a.s::a.s
soft::soft
reserves::reserves
san::san
diego::diego
printing::printing
newly::newly
updated::updated
rev::rev
boston::boston
u.a::u.a
asymptotic::asymptotic
pages::pages
6.2.3::6.2.3
wikibook::wikibook
topic::topic
avl-trees::avl-trees
xdg::xdg
dmitriy::dmitriy
vilkov::vilkov
serializable::serializable
straight::straight
c-implementation::c-implementation
gnu-lgpl::gnu-lgpl
afl::afl
v2.0::v2.0
licenses::licenses
header::header
file::file
ian::ian
piumarta::piumarta
demonstration::demonstration
php::php
concat::concat
split::split
inventions::inventions
dictionaries::dictionaries
atree::atree
four::four
2-node::2-node
3-node::3-node
4-node::4-node
b-trees::b-trees
isometry::isometry
equivalent::equivalent
expansions::expansions
splits::splits
merges::merges
color-flipping::color-flipping
introductions::introductions
introduce::introduce
conceptually::conceptually
difficult::difficult
involved::involved
tend::tend
start::start
save::save
middle::middle
2-nodes::2-nodes
missing::missing
handled::handled
ascend::ascend
push::push
finish::finish
descend::descend
repeat::repeat
pushed::pushed
leaving::leaving
marking::marking
re-used::re-used
location::location
simplest::simplest
adjustments::adjustments
swap::swap
encountered::encountered
side::side
perform::perform
overlooks::overlooks
originally::originally
combine::combine
shorten::shorten
rule::rule
trigger::trigger
preserves::preserves
important::important
assumption::assumption
adjacent::adjacent
overlooking::overlooking
transfer::transfer
sought::sought
ensured::ensured
portal::portal
addison::addison
wesley::wesley
6.2.4::6.2.4
multiway::multiway
discusses::discusses
2-3::2-3
department::department
purdue::purdue
ford::ford
william::william
topp::topp
stl::stl
jersey::jersey
0-13-085850-1::0-13-085850-1
goodrich::goodrich
tamassia::tamassia
roberto::roberto
mount::mount
wiley::wiley
0-471-20208-8::0-471-20208-8
grama::grama
ananth::ananth
2,4::2,4
cs251::cs251
lecture::lecture
2008-04-10::2008-04-10
2-3-4-trees::2-3-4-trees
showing::showing
princeton::princeton
open::open
rudolf::rudolf
bayer::bayer
edward::edward
mccreight::mccreight
sequential::sequential
generalization::generalization
comer::comer
systems::systems
read::read
write::write
blocks::blocks
databases::databases
filesystems::filesystems
overview::overview
variants::variants
etymology::etymology
speeds::speeds
trouble::trouble
ideas::ideas
technical::technical
5.3.1::5.3.1
5.3.2::5.3.2
5.3.3::5.3.3
concurrency::concurrency
papers::papers
variable::variable
pre-defined::pre-defined
maintain::maintain
joined::joined
permitted::permitted
waste::waste
upper::upper
act::act
separation::separation
divide::divide
guarantee::guarantee
combined::combined
splitting::splitting
neighbor::neighbor
combining::combining
joining::joining
brought::brought
branches::branches
described::described
parameters::parameters
highest::highest
slowly::slowly
infrequent::infrequent
results::results
substantial::substantial
advantages::advantages
greatly::greatly
exceeds::exceeds
spent::spent
processing::processing
multiple::multiple
occurs::occurs
secondary::secondary
disk::disk
drives::drives
maximizing::maximizing
accesses::accesses
reduced::reduced
block::block
easier::easier
practical::practical
class::class
designs::designs
includes::includes
copies::copies
-tree::-tree
balances::balances
neighboring::neighboring
densely::densely
packed::packed
immediately::immediately
shared::shared
turned::turned
rapid::rapid
working::working
boeing::boeing
research::research
labs::labs
bstands::bstands
douglas::douglas
explains::explains
origin::origin
broad::broad
bushy::bushy
apply::apply
suggest::suggest
stands::stands
contributions::contributions
-trees::-trees
footnote::footnote
speculates::speculates
cs144c::cs144c
classroom::classroom
suggesting::suggesting
originated::originated
cpm::cpm
24th::24th
annual::annual
symposium::symposium
bad::bad
herrenalb::herrenalb
germany::germany
answered::answered
martin::martin
farach-colton::farach-colton
lunch::lunch
talking::talking
lawyers::lawyers
senior::senior
years::years
older::older
table::table
resolve::resolve
rest::rest
lives::lives
understand::understand
describes::describes
faced::faced
designers::designers
outlines::outlines
series::series
increasingly::increasingly
effective::effective
solutions::solutions
ends::ends
solves::solves
roughly::roughly
1,000,000::1,000,000
located::located
historically::historically
drive::drive
compare::compare
involves::involves
rotational::rotational
delay::delay
milliseconds::milliseconds
averages::averages
period::period
rpm::rpm
seagate::seagate
st3500320ns::st3500320ns
track-to-track::track-to-track
simplicity::simplicity
naively::naively
locate::locate
million::million
reads::reads
seconds::seconds
individual::individual
grouped::grouped
kilobytes::kilobytes
bytes::bytes
sped::sped
improvement::improvement
narrowed::narrowed
improved::improved
substantially::substantially
auxiliary::auxiliary
sparse::sparse
quickly::quickly
10,000::10,000
entries::entries
aux::aux
trick::trick
aux-aux::aux-aux
fit::fit
identifies::identifies
relevant::relevant
aux-index::aux-index
blocking::blocking
reside::reside
incur::incur
compiling::compiling
changed::changed
managing::managing
stay::stay
marked::marked
stays::stays
slow::slow
room::room
shifting::shifting
lying::lying
subsequent::subsequent
adjusted::adjusted
hope::hope
lot::lot
reorganized::reorganized
out-of-sequence::out-of-sequence
minimize::minimize
partially::partially
elegant::elegant
minimizes::minimizes
interior::interior
uniform::uniform
folk::folk
zoellick::zoellick
ambiguous::ambiguous
clear::clear
avoids::avoids
inconsistent::inconsistent
lowest::lowest
choices::choices
idea::idea
unfortunate::unfortunate
employed::employed
relationship::relationship
half-full::half-full
legal::legal
adjust::adjust
preserve::preserve
limit::limit
restriction::restriction
kinds::kinds
benefit::benefit
shown::shown
ordinary::ordinary
give::give
confusing::confusing
unclear::unclear
readers::readers
discussion::discussion
separator::separator
thing::thing
subtle::subtle
issues::issues
clarify::clarify
february::february
chooses::chooses
interest::interest
iteration::iteration
evenly::evenly
median::median
acting::acting
increasing::increasing
creates::creates
odd::odd
mond::mond
raz::raz
supports::supports
prevents::prevents
recall::recall
send::send
accounts::accounts
impose::impose
popular::popular
restructure::restructure
regain::regain
entering::entering
triggering::triggering
restructuring::restructuring
strategy::strategy
procedures::procedures
underflow::underflow
acts::acts
replacement::replacement
likewise::likewise
algorithmically::algorithmically
deficient::deficient
starts::starts
proceeds::proceeds
redistributed::redistributed
bring::bring
redistribution::redistribution
spare::spare
merged::merged
lose::lose
merging::merging
count::count
loses::loses
sandwiching::sandwiching
move::move
shallower::shallower
freshly::freshly
loaded::loaded
resulting::resulting
challenges::challenges
build::build
incrementally::incrementally
input::input
bulkloading::bulkloading
integers::integers
continued::continued
overfilled::overfilled
quick::quick
turning::turning
address::address
cylinder-head-sector::cylinder-head-sector
operating::operating
user::user
allocate::allocate
contiguous::contiguous
converting::converting
adds::adds
scheme::scheme
exceed::exceed
logical::logical
physical::physical
ms-dos::ms-dos
fat::fat
utility::utility
sequentially::sequentially
worse::worse
scan::scan
huge::huge
penalty::penalty
disks::disks
files::files
fat12::fat12
filesystem::filesystem
floppy::floppy
early::early
hard::hard
4,080::4,080
resident::resident
bigger::bigger
architecture::architecture
began::began
confront::confront
penalties::penalties
learn::learn
tops-20::tops-20
tenex::tenex
similarities::similarities
36-bit::36-bit
directory::directory
holding::holding
apple::apple
hfs::hfs
ntfs::ntfs
aix::aix
jfs2::jfs2
linux::linux
btrfs::btrfs
ext4::ext4
reiser4::reiser4
lehman::lehman
yao::yao
showed::showed
locks::locks
avoided::avoided
concurrent::concurrent
linking::linking
maximizes::maximizes
users::users
consideration::consideration
isam::isam
btree::btree
united::united
patent::patent
granted::granted
meta::meta
technique::technique
upwards::upwards
updates::updates
in-memory::in-memory
indexes::indexes
reorganization::reorganization
deletes::deletes
next::next
r-tree::r-tree
documentation::documentation
calls::calls
cluster::cluster
fixed-size::fixed-size
sectors::sectors
sector::sector
reserved::reserved
clusters::clusters
2010-01-25::2010-01-25
video::video
lectures::lectures
2014-01-17::2014-01-17
llc::llc
product::product
barracuda::barracuda
es.2::es.2
serial::serial
ata::ata
publication::publication
issue::issue
physically::physically
matter::matter
oblivious::oblivious
state::state
york::york
stony::stony
brook::brook
2011-01-17::2011-01-17
mark::mark
russinovich::russinovich
inside::inside
win2k::win2k
developer::developer
network.archived::network.archived
april::april
2008-04-18::2008-04-18
locking::locking
portal.acm.org.doi::portal.acm.org.doi
2012-06-28::2012-06-28
http::http
ada232287&location::ada232287&location
u2&doc::u2&doc
gettrdoc.pdf::gettrdoc.pdf
downloads::downloads
high-concurrency-btree::high-concurrency-btree
high::high
github::github
project::project
hosting::hosting
2014-01-27::2014-01-27
lockless::lockless
maintenance::maintenance
acta::acta
informatica::informatica
doi::doi
ubiquitous::ubiquitous
surveys::surveys
issn::issn
0360-0300::0360-0300
bill::bill
0-201-55713-4::0-201-55713-4
yehudit::yehudit
yoav::yoav
control::control
preparatory::preparatory
vldb85::vldb85
11th::11th
international::international
conference::conference
bases::bases
report::report
laboratories::laboratories
virtual::virtual
acm-sigfidet::acm-sigfidet
workshop::workshop
californiamissing::californiamissing
title::title
november::november
scot::scot
sjsu::sjsu
slady::slady
ub-tree::ub-tree
scholarpedia::scholarpedia
curator::curator
tutorial::tutorial
infinitydb::infinitydb
techniques::techniques
color::color
ensures::ensures
constraining::constraining
preserved::preserved
painting::painting
colors::colors
red::red
black::black
collectively::collectively
constrain::constrain
subsequently::subsequently
rearranged::rearranged
repainted::repainted
coloring::coloring
designed::designed
rearranging::rearranging
recoloring::recoloring
efficiently::efficiently
tracking::tracking
footprint::footprint
uncolored::uncolored
history::history
parallel::parallel
symmetric::symmetric
acquired::acquired
leonidas::leonidas
guibas::guibas
entitled::entitled
dichromatic::dichromatic
framework::framework
best-looking::best-looking
produced::produced
laser::laser
printer::printer
xerox::xerox
parc::parc
organize::organize
pieces::pieces
text::text
fragments::fragments
explicit::explicit
simplifies::simplifies
role::role
search-time::search-time
requirements::requirements
imposed::imposed
satisfied::satisfied
omitted::omitted
vice::vice
versa::versa
effect::effect
enforce::enforce
critical::critical
nearest::nearest
guaranteed::guaranteed
suffices::suffices
shortest::shortest
longer::longer
impossible::impossible
alternating::alternating
alternates::alternates
maximal::maximal
shows::shows
optional::optional
equivalence::equivalence
graphical::graphical
align::align
horizontally::horizontally
structurally::structurally
capacity::capacity
ambiguity::ambiguity
conversion::conversion
central::central
sides::sides
order-4::order-4
contained::contained
economical::economical
vector::vector
costly::costly
attribute::attribute
slot::slot
objects::objects
slots::slots
improving::improving
orders::orders
successive::successive
moderate::moderate
volumes::volumes
maximize::maximize
junctions::junctions
performing::performing
grouping::grouping
optimizations::optimizations
multicolored::multicolored
notably::notably
reducing::reducing
non-black::non-black
thirds::thirds
offer::offer
guarantees::guarantees
valuable::valuable
time-sensitive::time-sensitive
real-time::real-time
building::building
provide::provide
incomputational::incomputational
scheduler::scheduler
kernels::kernels
supporting::supporting
attractive::attractive
built::built
reconstruction::reconstruction
program::program
opcodes::opcodes
assembler::assembler
interpreter::interpreter
arraysand::arraysand
retain::retain
versions::versions
mutations::mutations
2-4::2-4
tool::tool
introductory::introductory
texts::texts
introduced::introduced
eliminating::eliminating
unspecified::unspecified
freedom::freedom
llrb::llrb
maintains::maintains
invariant::invariant
inserts::inserts
isometric::isometric
quote::quote
resolved::resolved
flip::flip
read-only::read-only
violate::violate
restoring::restoring
remain::remain
uncle::uncle
human::human
threatened::threatened
repainting::repainting
label::label
grandparent::grandparent
roles::roles
labels::labels
exchanged::exchanged
implied::implied
assumptions::assumptions
triangle::triangle
represents::represents
circle::circle
atop::atop
designates::designates
demonstrated::demonstrated
parent::parent-
violated::violated
insert_case1::insert_case1
insert_case2::insert_case2
invalidated::invalidated
insert_case3::insert_case3
tail-recursive::tail-recursive
proves::proves
insert_case4::insert_case4
reversed::reversed
samples::samples
care::care
turn::turn
switches::switches
dealt::dealt
relabeling::relabeling
saved_p::saved_p
saved_left_n::saved_left_n
saved_p::saved_p-
modify::modify
saved_right_n::saved_right_n
insert_case5::insert_case5
parentp::parentp
switched::switched
in-place::in-place
copying::copying
reduces::reduces
solved::solved
applies::applies
equally::equally
remainder::remainder
selected::selected
repaint::repaint
invalid::invalid
replacing::replacing
relabel::relabel
scannot::scannot
black-height::black-height
white::white
unknown::unknown
well-defined::well-defined
transformations::transformations
non-null::non-null
verified::verified
outlined::outlined
replace_node::replace_node
substitutes::substitutes
convenience::convenience
delete_one_child::delete_one_child
is_leaf::is_leaf
child::child-
delete_case1::delete_case1
calling::calling
behaves::behaves
phantom::phantom
safely::safely
proceed::proceed
delete_case2::delete_case2
account::account
reverse::reverse
delete_case3::delete_case3
passing::passing
throughs::throughs
precisely::precisely
evens::evens
things::things
correct::correct
left::left-
right::right-
delete_case4::delete_case4
affect::affect
delete_case5::delete_case5
affected::affected
transformation::transformation
statement::statement
trivial::trivial
statements::statements
force::force
correctly::correctly
test::test
delete_case6::delete_case6
sbecomes::sbecomes
possibilities::possibilities
net::net
restored::restored
recurse::recurse
exit::exit
exiting::exiting
lemma::lemma
basis::basis
hypothesis::hypothesis
moved::moved
iterations::iterations
routine::routine
constructing::constructing
model::model
processors::processors
2-3-4::2-3-4
morris::morris
19th::19th
foundations::foundations
coursera::coursera
people::people
home::home
personal::personal
innovations::innovations
live::live
today::today
sic::sic
graphic::graphic
interfaces::interfaces
ethernet::ethernet
object-oriented::object-oriented
programmings::programmings
excited::excited
looked::looked
picked::picked
answer::answer
978-0-262-03384-8::978-0-262-03384-8
park::park
heejin::heejin
kunsoo::kunsoo
elsevier::elsevier
00287-5::00287-5
runs::runs
crcw::crcw
pram::pram
nprocessors::nprocessors
erew::erew
insufficient::insufficient
inline::inline
introducing::introducing
precise::precise
roger::roger
whitney::whitney
okasaki::okasaki
chris::chris
ocw::ocw
prof::prof
erik::erik
demaine::demaine
youtube::youtube
pre-sorted::pre-sorted
elementary::elementary
intrusive::intrusive
