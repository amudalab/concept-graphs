data/NNS/data structures/NNS/structures and/CC/and algorithms/NNS/algorithms dr/NNP/dr. naveen/IN/naveen garg/NN/garg department/NN/department of/IN/of computer/NN/computer science/NN/science and/CC/and engineering/NN/engineering indian/NN/indian institute/NN/institute of/IN/of technology/NN/technology /,/, delhi/NN/delhi lecture/NN/lecture 2/CD/2 stacks/NNS/stacks let/VBP/let us/PRP/us see/VBP/see about/IN/about stacks/NNP/stacks. we/PRP/we will/MD/will mainly/RB/mainly see/VB/see about/IN/about stacks/NNS/stacks /,/, besides/VBZ/besides we/PRP/we will/MD/will talk/VB/talk about/IN/about abstract/NN/abstract data/NNS/data types/NNS/types /,/, interfaces/NNS/interfaces /,/, exceptions/NNS/exceptions /,/, how/WRB/how stacks/NNS/stacks are/VBP/are implemented/VBN/implemented in/IN/in java/NN/java and/CC/and application/NN/application to/TO/to the/DT/the analysis/NN/analysis of/IN/of time/NN/time series/NNP/series. we/PRP/we will/MD/will also/RB/also talk/VB/talk about/IN/about growable/JJ/growable stacks/NNS/stacks /,/, which/WDT/which do/VBP/do a/DT/a little/RB/little bit/NN/bit of/IN/of amortized/JJ/amortized analysis/NN/analysis and/CC/and then/RB/then we/PRP/we will/MD/will talk/VB/talk about/IN/about stacks/NNS/stacks in/IN/in java/NN/java virtual/JJ/virtual machine/NNP/machine. what/WP/what is/VBZ/is an/DT/an abstract/NN/abstract data/NNS/data type/NN/type it/PRP/it is/VBZ/is basically/RB/basically a/DT/a specification/NN/specification of/IN/of the/DT/the instances/NNS/instances and/CC/and the/DT/the set/NN/set of/IN/of axioms/NNS/axioms that/WDT/that define/NN/define the/DT/the semantics/NNS/semantics of/IN/of the/DT/the operations/NNS/operations on/IN/on those/DT/those instances/NNP/instances. what/WP/what does/VBZ/does it/PRP/it all/DT/all mean/JJ/mean you/PRP/you know/VBP/know the/DT/the data/NNS/data types/VBZ/types like/IN/like integer/JJR/integer /,/, real/JJ/real numbers/NNS/numbers and/CC/and so/RB/so on/NNP/on. you/PRP/you can/MD/can understand/VB/understand the/DT/the notion/NN/notion of/IN/of addition/NN/addition and/CC/and that/IN/that is/VBZ/is the/DT/the same/JJ/same way/NN/way as/IN/as you/PRP/you add/VBP/add 2/CD/2 integers/NNS/integers in/IN/in mathematics/NNP/mathematics. similarly/RB/similarly we/PRP/we will/MD/will define/VB/define data/NNS/data types/NNS/types and/CC/and certain/JJ/certain operations/NNS/operations on/IN/on those/DT/those data/NNS/data types/NNP/types. those/DT/those operations/NNS/operations would/MD/would be/VB/be defined/VBN/defined through/IN/through an/DT/an interface/NN/interface which/WDT/which basically/RB/basically gives/VBZ/gives us/PRP/us the/DT/the signature/NN/signature of/IN/of the/DT/the operation/NN/operation that/IN/that is/VBZ/is the/DT/the parameters/NNS/parameters that/WDT/that operation/NN/operation requires/VBZ/requires and/CC/and so/RB/so on/NNP/on. we/PRP/we will/MD/will also/RB/also specify/VB/specify the/DT/the results/NNS/results of/IN/of those/DT/those operations/NNS/operations through/IN/through a/DT/a set/NN/set of/IN/of axioms/NNP/axioms. just/RB/just as/IN/as in/IN/in the/DT/the case/NN/case of/IN/of integers/NNS/integers /,/, you/PRP/you know/VBP/know the/DT/the sum/NN/sum of/IN/of 2/CD/2 integers/NNS/integers as/IN/as defined/VBN/defined in/IN/in mathematics/NNP/mathematics. for/IN/for example/NN/example if/IN/if you/PRP/you add/VBP/add a/DT/a variable/JJ/variable of/IN/of type/NN/type a/DT/a and/CC/and another/DT/another variable/JJ/variable of/IN/of type/NN/type b/NNP/b. if/IN/if you/PRP/you sum/VBP/sum them/PRP/them up/RP/up /,/, then/RB/then the/DT/the answer/NN/answer will/MD/will be/VB/be of/IN/of type/NN/type variable/JJ/variable as/IN/as you/PRP/you would/MD/would know/VB/know it/PRP/it from/IN/from your/PRP$/your mathematics/NNS/mathematics class/NNP/class. we/PRP/we will/MD/will be/VB/be clear/JJ/clear if/IN/if we/PRP/we see/VBP/see an/DT/an example/NNP/example. the/DT/the operations/NNS/operations that/IN/that you/PRP/you have/VBP/have been/VBN/been talking/VBG/talking about/IN/about are/JJ/are essentially/RB/essentially of/IN/of three/CD/three kinds/NNP/kinds. one/CD/one would/MD/would be/VB/be just/RB/just a/DT/a constructor/NN/constructor operation/NN/operation which/WDT/which is/VBZ/is as/RB/as same/JJ/same as/IN/as the/DT/the constructor/NN/constructor method/NN/method in/IN/in java/NNP/java. using/NN/using this/DT/this method/NN/method you/PRP/you can/MD/can create/VB/create an/DT/an instance/NN/instance of/IN/of that/DT/that particular/JJ/particular data/NNS/data type/NNP/type. when/WRB/when you/PRP/you are/VBP/are talking/VBG/talking about/IN/about sophisticated/JJ/sophisticated data/NNS/data types/NNS/types /,/, this/DT/this method/NN/method has/VBZ/has to/TO/to do/VB/do a/DT/a lot/NN/lot of/IN/of work/NN/work access/NN/access functions/NNS/functions are/VBP/are the/DT/the functions/NNS/functions which/WDT/which let/VB/let us/PRP/us to/TO/to access/NN/access elements/NNS/elements of/IN/of the/DT/the data/NNS/data type/NN/type and/CC/and manipulation/NN/manipulation procedure/NN/procedure would/MD/would let/VB/let us/PRP/us to/TO/to manipulate/VB/manipulate or/CC/or modify/VB/modify the/DT/the data/NNS/data type/NNP/type. why/WRB/why are/VBP/are we/PRP/we talking/VBG/talking about/IN/about data/NNS/data types/NNS/types data/NNS/data types/NNS/types help/VBP/help us/PRP/us to/TO/to identify/VB/identify the/DT/the requirements/NNS/requirements for/IN/for the/DT/the building/VBG/building blocks/NNS/blocks of/IN/of our/PRP$/our algorithmic/JJ/algorithmic procedure/NNP/procedure. it/PRP/it provides/VBZ/provides a/DT/a language/NN/language which/WDT/which will/MD/will help/VB/help us/PRP/us to/TO/to talk/VB/talk at/IN/at a/DT/a higher/JJR/higher level/NN/level of/IN/of abstraction/NNP/abstraction. as/IN/as just/RB/just as/IN/as we/PRP/we are/VBP/are talking/VBG/talking in/IN/in terms/NNS/terms of/IN/of adding/VBG/adding up/RP/up of/IN/of integers/NNS/integers or/CC/or in/IN/in terms/NNS/terms of/IN/of stacks/NNS/stacks or/CC/or queues/NNS/queues or/CC/or any/DT/any of/IN/of the/DT/the advanced/JJ/advanced data/NNS/data type/NNP/type. they/PRP/they encapsulate/VBP/encapsulate the/DT/the data/NNS/data structure/VBP/structure like/IN/like how/WRB/how the/DT/the data/NNS/data is/VBZ/is organized/VBN/organized and/CC/and the/DT/the algorithms/NNS/algorithms that/WDT/that work/NN/work on/IN/on that/DT/that data/NN/data structures/NNP/structures. also/RB/also they/PRP/they help/VBP/help us/PRP/us to/TO/to separate/VB/separate the/DT/the issues/NNS/issues of/IN/of correctness/NN/correctness and/CC/and efficiency/NNP/efficiency. we/PRP/we will/MD/will see/VB/see more/RBR/more of/IN/of this/DT/this as/IN/as we/PRP/we see/VBP/see the/DT/the example/NN/example of/IN/of data/NNS/data types/NNP/types. let/VB/let me/PRP/me start/VB/start by/IN/by giving/NN/giving a/DT/a simple/JJ/simple example/NN/example of/IN/of the/DT/the data/NNS/data type/NN/type and/CC/and that/IN/that is/VBZ/is a/DT/a dynamic/JJ/dynamic set/NNP/set. a/DT/a set/NN/set is/VBZ/is defined/VBN/defined as/RB/as a/DT/a collection/NN/collection of/IN/of objects/NNP/objects. suppose/NN/suppose we/PRP/we also/RB/also had/VBD/had operations/NNS/operations /,/, which/WDT/which would/MD/would let/VB/let us/PRP/us modify/VB/modify that/IN/that collection/NN/collection of/IN/of objects/NNS/objects /,/, which/WDT/which means/VBZ/means add/VBP/add or/CC/or remove/VB/remove an/DT/an object/NN/object of/IN/of that/DT/that collection/NNP/collection. such/JJ/such a/DT/a set/NN/set we/PRP/we would/MD/would call/VB/call it/PRP/it as/IN/as a/DT/a dynamic/JJ/dynamic set/NNP/set. /NNP/( refer/NN/refer slide/NN/slide time/NN/time /:/: 4/CD/4 /:/: 47/CD/47 /CD/) we/PRP/we call/VBP/call it/PRP/it as/IN/as dynamic/JJ/dynamic /,/, because/IN/because we/PRP/we are/VBP/are changing/VBG/changing the/DT/the set/NN/set which/WDT/which is/VBZ/is the/DT/the collection/NN/collection of/IN/of objects/NNP/objects. we/PRP/we will/MD/will create/VB/create data/NNS/data types/NNS/types for/IN/for such/JJ/such dynamic/JJ/dynamic sets/NNP/sets. what/WP/what are/VBP/are the/DT/the kinds/NNS/kinds of/IN/of methods/NNS/methods that/WDT/that you/PRP/you have/VBP/have in/IN/in a/DT/a dynamic/JJ/dynamic set/NN/set you/PRP/you would/MD/would have/VB/have a/DT/a method/NN/method to/TO/to create/VB/create a/DT/a dynamic/JJ/dynamic set/NN/set /,/, which/WDT/which would/MD/would be/VB/be a/DT/a method/NN/method new/NNP/new. there/EX/there would/MD/would be/VB/be a/DT/a method/NN/method insert/NN/insert /,/, to/TO/to insert/VB/insert an/DT/an element/NN/element in/IN/in to/TO/to a/DT/a dynamic/JJ/dynamic set/NNP/set. s/NNS/s is/VBZ/is the/DT/the dynamic/JJ/dynamic set/NN/set and/CC/and this/DT/this method/NN/method has/VBZ/has two/CD/two parameters/NNS/parameters let/VB/let us/PRP/us say/VB/say /,/, the/DT/the set/NN/set s/VBZ/s and/CC/and the/DT/the element/NNP/element. the/DT/the result/NN/result is/VBZ/is an/DT/an instance/NN/instance of/IN/of the/DT/the set/NN/set itself/PRP/itself which/WDT/which gives/VBZ/gives a/DT/a new/JJ/new set/NN/set /,/, another/DT/another set/NN/set and/CC/and also/RB/also includes/VBZ/includes the/DT/the element/NN/element v/NN/v in/IN/in it/NNP/it. similarly/RB/similarly the/DT/the delete/JJ/delete method/NN/method removes/NNS/removes the/DT/the element/NN/element v/NN/v from/IN/from the/DT/the set/NN/set s/NNP/s. these/DT/these are/VBP/are the/DT/the two/CD/two methods/NNS/methods for/IN/for updating/VBG/updating the/DT/the set/NNP/set. new/JJ/new method/NN/method is/VBZ/is for/IN/for creating/VBG/creating or/CC/or constructing/VBG/constructing the/DT/the set/NN/set and/CC/and isin/NN/isin is/VBZ/is one/CD/one of/IN/of the/DT/the access/NN/access methods/NNP/methods. all/DT/all of/IN/of it/PRP/it is/VBZ/is telling/VBG/telling us/PRP/us whether/IN/whether the/DT/the element/NN/element is/VBZ/is in/IN/in the/DT/the set/NN/set or/CC/or not/NNP/not. the/DT/the return/NN/return value/NN/value is/VBZ/is of/IN/of type/NN/type boolean/NNP/boolean. if/IN/if v/NN/v is/VBZ/is in/IN/in the/DT/the set/NN/set then/RB/then it/PRP/it is/VBZ/is true/JJ/true otherwise/NN/otherwise false/NNP/false. axioms/NNS/axioms are/VBP/are the/DT/the one/CD/one which/WDT/which define/NN/define how/WRB/how the/DT/the operations/NNS/operations should/MD/should behave/NNP/behave. we/PRP/we can/MD/can write/VB/write axioms/NNS/axioms in/IN/in the/DT/the following/JJ/following form/NNP/form. when/WRB/when i/PRP/i create/VBP/create a/DT/a new/JJ/new set/NN/set and/CC/and if/IN/if the/DT/the set/NN/set is/VBZ/is empty/JJ/empty then/RB/then the/DT/the answer/NN/answer should/MD/should be/VB/be always/RB/always false/VB/false /,/, no/DT/no matter/NN/matter what/WP/what v/NN/v is/NNP/is. if/IN/if i/PRP/i have/VBP/have a/DT/a dynamic/JJ/dynamic set/NN/set s/NNS/s and/CC/and i/PRP/i insert/VBP/insert an/DT/an element/NN/element v/NN/v in/IN/in it/NNP/it. then/RB/then the/DT/the resulting/VBG/resulting set/NN/set which/WDT/which has/VBZ/has v/NN/v in/IN/in it/PRP/it should/MD/should be/VB/be true.if/JJ/true.if i/PRP/i have/VBP/have a/DT/a set/NN/set s/VBZ/s and/CC/and when/WRB/when i/PRP/i insert/VBP/insert u/PRP/u in/IN/in it/PRP/it /,/, then/RB/then the/DT/the resulting/VBG/resulting set/NN/set has/VBZ/has u/NN/u in/IN/in it/NNP/it. then/RB/then if/IN/if i/PRP/i where/WRB/where to/TO/to ask/VB/ask whether/IN/whether v/NN/v is/VBZ/is in/IN/in the/DT/the resulting/VBG/resulting set/NN/set /,/, i/PRP/i will/MD/will know/VB/know that/IN/that only/RB/only if/IN/if v/NN/v was/VBD/was in/IN/in the/DT/the previous/JJ/previous set/NN/set s/NNP/s. thus/RB/thus the/DT/the answer/NN/answer to/TO/to this/DT/this operation/NN/operation isin/NN/isin /:/( delete/JJ/delete /NN/( s/NNS/s /,/, u/VBP/u /:/) /,/, v/NN/v /:/) /,/, should/MD/should be/VB/be the/DT/the same/JJ/same as/IN/as the/DT/the answer/NN/answer to/TO/to this/DT/this operation/NN/operation isin/NN/isin /:/( s/NNS/s /,/, v/NN/v /:/) /,/, provided/VBN/provided v/NN/v is/VBZ/is different/JJ/different from/IN/from u/NNP/u. isin/NN/isin /:/( delete/JJ/delete /NN/( s/NNS/s /,/, u/VBP/u /:/) /,/, v/NN/v /:/) =/:/= isin/NN/isin /:/( s/NNS/s /,/, v/NN/v /:/) /,/, if/IN/if v/NN/v u/NN/u suppose/NN/suppose i/PRP/i have/VBP/have a/DT/a set/NN/set s/VBZ/s and/CC/and i/PRP/i delete/VBP/delete v/NN/v from/IN/from it/NNP/it. if/IN/if i/PRP/i ask/VBP/ask whether/IN/whether v/NN/v is/VBZ/is in/IN/in the/DT/the resulting/VBG/resulting set/NN/set /,/, then/RB/then the/DT/the answer/NN/answer should/MD/should be/VB/be false/NNP/false. these/DT/these are/VBP/are some/DT/some basic/JJ/basic axioms/NNS/axioms that/WDT/that define/NN/define the/DT/the nature/NN/nature of/IN/of these/DT/these operations/NNS/operations and/CC/and also/RB/also the/DT/the functionality/NN/functionality of/IN/of these/DT/these operations/NNP/operations. still/RB/still we/PRP/we did/VBD/did not/RB/not specify/VB/specify how/WRB/how to/TO/to do/VB/do these/DT/these operations/NNS/operations or/CC/or we/PRP/we did/VBD/did not/RB/not talk/VB/talk about/IN/about an/DT/an algorithm/NN/algorithm or/CC/or any/DT/any procedure/NNP/procedure. at/IN/at the/DT/the least/JJS/least we/PRP/we have/VBP/have talked/VBN/talked about/IN/about the/DT/the code/NN/code for/IN/for implementing/NN/implementing the/DT/the dynamic/JJ/dynamic set/NNP/set. when/WRB/when you/PRP/you are/VBP/are talking/VBG/talking about/IN/about abstract/NN/abstract data/NNS/data types/NNS/types /,/, we/PRP/we are/VBP/are interested/JJ/interested in/IN/in more/JJR/more of/IN/of the/DT/the specification/NNP/specification. that/IN/that is/VBZ/is what/WP/what the/DT/the instances/NNS/instances would/MD/would be/VB/be like/IN/like and/CC/and what/WP/what are/VBP/are the/DT/the operations/NNS/operations permitted/VBD/permitted on/IN/on those/DT/those instances/NNS/instances /,/, and/CC/and the/DT/the axioms/NNS/axioms that/WDT/that govern/NN/govern those/DT/those operations/NNP/operations. /NNP/( refer/NN/refer slide/NN/slide time/NN/time /:/: 6/CD/6 /:/: 46/CD/46 /CD/) some/DT/some simple/JJ/simple abstract/NN/abstract data/NNS/data type/NN/type that/IN/that you/PRP/you may/MD/may be/VB/be familiar/JJ/familiar with/IN/with is/VBZ/is queue/JJ/queue /,/, but/CC/but we/PRP/we will/MD/will be/VB/be doing/VBG/doing it/PRP/it later/NNP/later. let/VB/let us/PRP/us see/VB/see about/IN/about stacks/NNP/stacks. /NNP/( refer/NN/refer slide/NN/slide time/NN/time /:/: 8/CD/8 /:/: 52/CD/52 /CD/) what/WP/what is/VBZ/is the/DT/the stack/NN/stack it/PRP/it is/VBZ/is the/DT/the collection/NN/collection of/IN/of elements/NNS/elements but/CC/but this/DT/this collection/NN/collection follows/VBZ/follows the/DT/the last-infirst-out/NN/last-infirst-out principle/NNP/principle. what/WP/what does/VBZ/does it/PRP/it mean/VB/mean it/PRP/it means/VBZ/means that/IN/that the/DT/the element/NN/element which/WDT/which is/VBZ/is inserted/VBN/inserted last/JJ/last would/MD/would be/VB/be removed/VBN/removed first/NNP/first. if/IN/if i/PRP/i insert/VBP/insert an/DT/an element/NN/element and/CC/and then/RB/then i/PRP/i remove/VBP/remove an/DT/an element/NN/element from/IN/from this/DT/this collection/NNP/collection. then/RB/then the/DT/the element/NN/element that/IN/that would/MD/would be/VB/be removed/VBN/removed was/VBD/was the/DT/the one/CD/one which/WDT/which was/VBD/was inserted/VBN/inserted at/IN/at the/DT/the last/NNP/last. the/DT/the operation/NN/operation of/IN/of inserting/VBG/inserting an/DT/an element/NN/element is/VBZ/is called/VBN/called pushing/VBG/pushing onto/IN/onto the/DT/the stack/NN/stack and/CC/and the/DT/the operation/NN/operation of/IN/of removing/VBG/removing an/DT/an element/NN/element is/VBZ/is called/VBN/called popping/VBG/popping off/RP/off the/DT/the stack/NNP/stack. /NNP/( refer/NN/refer slide/NN/slide time/NN/time /:/: 9/CD/9 /:/: 10/CD/10 /CD/) some/DT/some of/IN/of you/PRP/you might/MD/might have/VB/have seen/VBN/seen this/DT/this kind/NN/kind of/IN/of toys/NNP/toys. it/PRP/it has/VBZ/has a/DT/a collection/NN/collection of/IN/of elements/NNS/elements for/IN/for instance/NN/instance may/MD/may be/VB/be stack/RB/stack of/IN/of trays/NNS/trays in/IN/in your/PRP$/your mess/NNP/mess. what/WP/what you/PRP/you do/VBP/do is/VBZ/is when/WRB/when you/PRP/you put/VBD/put a/DT/a tray/NN/tray /,/, you/PRP/you put/VBD/put it/PRP/it on/IN/on the/DT/the top/JJ/top and/CC/and when/WRB/when you/PRP/you remove/VBP/remove it/PRP/it you/PRP/you would/MD/would always/RB/always remove/VB/remove the/DT/the one/CD/one which/WDT/which is/VBZ/is at/IN/at the/DT/the top/NNP/top. when/WRB/when you/PRP/you remove/VBP/remove or/CC/or pop/VB/pop of/IN/of an/DT/an element/NN/element /,/, it/PRP/it is/VBZ/is always/RB/always the/DT/the one/CD/one which/WDT/which you/PRP/you inserted/VBD/inserted at/IN/at the/DT/the last/NNP/last. we/PRP/we are/VBP/are going/VBG/going to/TO/to define/VB/define the/DT/the abstract/NN/abstract data/NNS/data type/NN/type that/IN/that is/VBZ/is supported/VBN/supported by/IN/by four/CD/four methods/NNS/methods which/WDT/which are/VBP/are the/DT/the key/JJ/key methods/NNP/methods. the/DT/the new/JJ/new is/VBZ/is a/DT/a method/NN/method to/TO/to create/VB/create a/DT/a stack/NNP/stack. in/IN/in the/DT/the push/NN/push method/NN/method when/WRB/when i/PRP/i specify/VBP/specify an/DT/an element/NN/element o/NN/o it/PRP/it adds/VBZ/adds this/DT/this element/NN/element to/TO/to the/DT/the abstract/NN/abstract data/NNS/data type/NNP/type. it/PRP/it inserts/VBZ/inserts an/DT/an object/NN/object o/NN/o on/IN/on to/TO/to the/DT/the top/JJ/top of/IN/of the/DT/the stack/NNP/stack. /NNP/( refer/NN/refer slide/NN/slide time/NN/time /:/: 9/CD/9 /:/: 52/CD/52 /CD/) pop/NN/pop takes/VBZ/takes stack/NN/stack as/IN/as the/DT/the parameter/NN/parameter and/CC/and it/PRP/it does/VBZ/does not/RB/not take/VB/take any/DT/any parameter/NN/parameter other/JJ/other than/IN/than abstract/NN/abstract data/NNS/data type/NNP/type. when/WRB/when i/PRP/i say/VBP/say pop/JJ/pop the/DT/the stack/NN/stack /,/, it/PRP/it just/RB/just removes/VBZ/removes the/DT/the top/JJ/top element/NN/element from/IN/from the/DT/the stack/NNP/stack. if/IN/if the/DT/the stack/NN/stack is/VBZ/is empty/JJ/empty /,/, they/PRP/they should/MD/should flag/VB/flag an/DT/an error/NN/error stating/VBG/stating that/IN/that the/DT/the stack/NN/stack is/VBZ/is empty/NNP/empty. the/DT/the top/JJ/top operation/NN/operation returns/NNS/returns the/DT/the top/JJ/top element/NN/element /,/, it/PRP/it does/VBZ/does not/RB/not remove/VB/remove it/PRP/it and/CC/and that/IN/that is/VBZ/is how/WRB/how it/PRP/it differs/VBZ/differs from/IN/from the/DT/the pop/NNP/pop. pop/NN/pop operation/NN/operation removes/NNS/removes that/WDT/that element/NN/element but/CC/but the/DT/the top/JJ/top tell/NN/tell us/PRP/us only/RB/only about/IN/about the/DT/the top/JJ/top element/NNP/element. again/RB/again if/IN/if the/DT/the stack/NN/stack is/VBZ/is empty/JJ/empty then/RB/then top/JJ/top does/NNS/does not/RB/not make/VB/make any/DT/any sense/NN/sense /,/, it/PRP/it should/MD/should flag/VB/flag an/DT/an error/NNP/error. /NNP/( refer/NN/refer slide/NN/slide time/NN/time /:/: 10/CD/10 /:/: 22/CD/22 /CD/) we/PRP/we can/MD/can also/RB/also have/VB/have some/DT/some support/NN/support methods/NNS/methods which/WDT/which will/MD/will help/VB/help us/PRP/us do/VB/do these/DT/these operations/NNP/operations. size/NN/size is/VBZ/is one/CD/one such/JJ/such method/NNP/method. size/NN/size tells/VBZ/tells us/PRP/us about/IN/about how/WRB/how many/JJ/many elements/NNS/elements are/VBP/are there/RB/there in/IN/in the/DT/the stack/NN/stack and/CC/and isempty/NN/isempty tell/NN/tell us/PRP/us whether/IN/whether the/DT/the stack/NN/stack is/VBZ/is empty/JJ/empty or/CC/or not/NNP/not. the/DT/the 6/CD/6 methods/NNS/methods that/WDT/that we/PRP/we saw/VBD/saw are/VBP/are push/JJ/push /,/, pop/NN/pop /,/, new/JJ/new /,/, top/JJ/top /,/, size/NN/size and/CC/and isempty/NNP/isempty. these/DT/these are/VBP/are all/DT/all the/DT/the methods/NNS/methods and/CC/and hope/NN/hope you/PRP/you all/DT/all understood/NN/understood about/IN/about what/WP/what these/DT/these methods/NNS/methods are/VBP/are doing/NNP/doing. /NNP/( refer/NN/refer slide/NN/slide time/NN/time /:/: 11/CD/11 /:/: 34/CD/34 /CD/) axiom/NN/axiom governs/NNS/governs the/DT/the behavior/NN/behavior of/IN/of these/DT/these methods/NNP/methods. if/IN/if s/NNS/s is/VBZ/is the/DT/the stack/NN/stack /,/, when/WRB/when i/PRP/i push/VBP/push an/DT/an element/NN/element on/IN/on to/TO/to s/NNS/s and/CC/and then/RB/then when/WRB/when i/PRP/i pop/VBP/pop it/PRP/it /,/, i/PRP/i should/MD/should get/VB/get back/RB/back s/NNP/s. while/IN/while doing/VBG/doing a/DT/a top/JJ/top operation/NN/operation /,/, when/WRB/when i/PRP/i push/VBP/push an/DT/an element/NN/element on/IN/on to/TO/to a/DT/a stack/NN/stack and/CC/and then/RB/then when/WRB/when i/PRP/i do/VBP/do a/DT/a top/JJ/top operation/NN/operation i/PRP/i should/MD/should get/VB/get v/NN/v /,/, because/IN/because v/NN/v would/MD/would be/VB/be the/DT/the top/JJ/top element/NN/element of/IN/of the/DT/the stack/NNP/stack. so/RB/so far/RB/far we/PRP/we have/VBP/have defined/VBN/defined about/IN/about the/DT/the stack/NN/stack abstract/NN/abstract data/NNS/data type/NN/type /,/, the/DT/the methods/NNS/methods and/CC/and 2/CD/2 axioms/NNP/axioms. axioms/NNS/axioms may/MD/may not/RB/not be/VB/be complete/JJ/complete but/CC/but this/DT/this is/VBZ/is what/WP/what the/DT/the axioms/NNS/axioms would/MD/would look/VB/look like/NNP/like. how/WRB/how do/VBP/do we/PRP/we translate/VB/translate abstract/NN/abstract data/NNS/data type/NN/type into/IN/into code/NN/code we/PRP/we need/VBP/need 2/CD/2 constructs/NNS/constructs for/IN/for that/DT/that and/CC/and they/PRP/they are/VBP/are the/DT/the interfaces/NNS/interfaces and/CC/and exceptions/NNP/exceptions. what/WP/what is/VBZ/is an/DT/an interface/NN/interface an/DT/an interface/NN/interface is/VBZ/is a/DT/a way/NN/way to/TO/to declare/VB/declare about/IN/about what/WP/what a/DT/a class/NN/class has/VBZ/has to/TO/to do/VB/do and/CC/and what/WP/what are/VBP/are the/DT/the various/JJ/various methods/NNS/methods associated/VBN/associated with/IN/with the/DT/the class/NNP/class. it/PRP/it does/VBZ/does not/RB/not tell/VB/tell us/PRP/us about/IN/about how/WRB/how those/DT/those methods/NNS/methods are/VBP/are done/NNP/done. that/IN/that would/MD/would be/VB/be a/DT/a part/NN/part of/IN/of the/DT/the implementation/NN/implementation of/IN/of that/DT/that interface/NN/interface or/CC/or a/DT/a class/NNP/class. for/IN/for an/DT/an interface/NN/interface we/PRP/we just/RB/just right/RB/right down/IN/down the/DT/the various/JJ/various names/NNS/names of/IN/of the/DT/the methods/NNS/methods and/CC/and the/DT/the parameters/NNS/parameters it/PRP/it is/VBZ/is going/VBG/going to/TO/to take/NNP/take. in/IN/in fact/NN/fact we/PRP/we do/VBP/do not/RB/not even/RB/even specify/VB/specify the/DT/the names/NNS/names of/IN/of parameter/NN/parameter /,/, we/PRP/we just/RB/just have/VBP/have to/TO/to specify/VB/specify the/DT/the types/NNS/types of/IN/of the/DT/the parameter/NNP/parameter. when/WRB/when we/PRP/we write/VBP/write a/DT/a class/NN/class for/IN/for an/DT/an interface/NN/interface /,/, we/PRP/we will/MD/will actually/RB/actually provide/VB/provide the/DT/the code/NN/code for/IN/for those/DT/those various/JJ/various methods/NNP/methods. i/PRP/i might/MD/might specify/VB/specify an/DT/an interface/NN/interface for/IN/for a/DT/a stack/NN/stack and/CC/and i/PRP/i am/VBP/am going/VBG/going to/TO/to ask/VB/ask you/PRP/you to/TO/to write/VB/write the/DT/the classes/NNS/classes for/IN/for that/DT/that interface/NNP/interface. different/JJ/different people/NNS/people will/MD/will write/VB/write different/JJ/different classes/NNS/classes to/TO/to implement/VB/implement the/DT/the interface/NN/interface in/IN/in a/DT/a completely/RB/completely different/JJ/different ways/NNP/ways. i/PRP/i can/MD/can still/RB/still use/VB/use your/PRP$/your classes/NNS/classes or/CC/or any/DT/any implementation/NN/implementation of/IN/of the/DT/the interface/NN/interface /,/, in/IN/in a/DT/a program/NN/program that/WDT/that i/PRP/i have/VBP/have written/VBN/written /,/, provided/VBN/provided that/IN/that must/MD/must meet/VB/meet the/DT/the interface/NN/interface specification/NN/specification which/WDT/which i/PRP/i have/VBP/have given/VBN/given to/TO/to you/NNP/you. all/DT/all i/PRP/i need/VBP/need to/TO/to know/VB/know is/VBZ/is that/IN/that the/DT/the implementation/NN/implementation meets/NNS/meets the/DT/the specification/NN/specification so/RB/so that/IN/that i/PRP/i can/MD/can use/VB/use that/IN/that in/IN/in the/DT/the coding/NN/coding of/IN/of my/PRP$/my own/JJ/own program/NNP/program. it/PRP/it helps/VBZ/helps us/PRP/us to/TO/to separate/VB/separate the/DT/the implementation/NN/implementation from/IN/from the/DT/the specification/NN/specification and/CC/and that/IN/that is/VBZ/is why/WRB/why it/PRP/it is/VBZ/is a/DT/a very/RB/very useful/JJ/useful programming/NN/programming technique/NNP/technique. let/NN/let us/PRP/us see/VBP/see about/IN/about how/WRB/how a/DT/a stack/NN/stack implementation/NN/implementation looks/NNS/looks like/IN/like in/IN/in java/NNP/java. java/NN/java has/VBZ/has a/DT/a built-in/JJ/built-in stack/NN/stack data/NNS/data structure/NN/structure but/CC/but nevertheless/NN/nevertheless we/PRP/we will/MD/will define/VB/define a/DT/a stack/NN/stack interface/NNP/interface. we/PRP/we just/RB/just define/VBP/define the/DT/the various/JJ/various methods/NNS/methods that/WDT/that are/VBP/are going/VBG/going to/TO/to be/VB/be a/DT/a part/NN/part of/IN/of this/DT/this interface/NNP/interface. there/RB/there is/VBZ/is one/CD/one method/NN/method called/VBN/called size/NN/size /,/, in/IN/in which/WDT/which i/PRP/i need/VBP/need to/TO/to specify/VB/specify the/DT/the types/NNS/types of/IN/of the/DT/the parameters/NNS/parameters and/CC/and the/DT/the return/NN/return type/NN/type of/IN/of the/DT/the method/NNP/method. i/PRP/i have/VBP/have not/RB/not specified/VBN/specified how/WRB/how these/DT/these methods/NNS/methods are/VBP/are implemented/NNP/implemented. this/DT/this is/VBZ/is just/RB/just an/DT/an interface/NNP/interface. in/IN/in an/DT/an interface/NN/interface we/PRP/we need/VBP/need to/TO/to know/VB/know the/DT/the types/NNS/types of/IN/of the/DT/the parameter/NNP/parameter. when/WRB/when i/PRP/i am/VBP/am pushing/VBG/pushing /,/, it/PRP/it takes/VBZ/takes a/DT/a parameter/NN/parameter of/IN/of type/NN/type object/NNP/object. object/NN/object is/VBZ/is the/DT/the generic/JJ/generic type/NN/type in/IN/in java/NN/java and/CC/and all/DT/all objects/NNS/objects are/VBP/are derived/VBN/derived from/IN/from this/DT/this type/NNP/type. the/DT/the method/NN/method isempty/NN/isempty returns/NNS/returns boolean/NNP/boolean. it/PRP/it just/RB/just tells/VBZ/tells us/PRP/us whether/IN/whether the/DT/the stack/NN/stack is/VBZ/is empty/JJ/empty or/CC/or not/NNP/not. the/DT/the top/JJ/top gives/NNS/gives you/PRP/you the/DT/the top/JJ/top element/NN/element in/IN/in the/DT/the stack/NN/stack and/CC/and it/PRP/it returns/VBZ/returns an/DT/an object/NNP/object. it/PRP/it throws/VBZ/throws stackemptyexception/NN/stackemptyexception /,/, if/IN/if this/DT/this stack/NN/stack is/VBZ/is empty/JJ/empty then/RB/then top/JJ/top /NN/( /:/) method/NN/method should/MD/should somehow/VB/somehow signal/JJ/signal that/IN/that the/DT/the stack/NN/stack is/VBZ/is empty/NNP/empty. we/PRP/we are/VBP/are going/VBG/going to/TO/to do/VB/do that/DT/that using/VBG/using the/DT/the notion/NN/notion of/IN/of exceptions/NNP/exceptions. void/JJ/void means/NNS/means it/PRP/it does/VBZ/does not/RB/not return/VB/return any/DT/any object/NN/object or/CC/or any/DT/any value/NNP/value. it/PRP/it does/VBZ/does not/RB/not return/VB/return a/DT/a stack/NN/stack but/CC/but it/PRP/it is/VBZ/is a/DT/a method/NN/method which/WDT/which is/VBZ/is executed/VBN/executed on/IN/on this/DT/this stack/NN/stack and/CC/and it/PRP/it modifies/VBZ/modifies the/DT/the stack/NNP/stack. thus/RB/thus stack/VB/stack can/MD/can not/RB/not be/VB/be considered/VBN/considered as/IN/as a/DT/a parameter/NNP/parameter. what/WP/what is/VBZ/is an/DT/an exception/NN/exception exceptions/NNS/exceptions are/VBP/are the/DT/the mechanisms/NNS/mechanisms to/TO/to handle/VB/handle errors/NNP/errors. when/WRB/when we/PRP/we have/VBP/have an/DT/an error/NN/error or/CC/or when/WRB/when we/PRP/we reach/VBP/reach some/DT/some exceptional/JJ/exceptional condition/NN/condition or/CC/or an/DT/an exceptional/JJ/exceptional case/NN/case in/IN/in the/DT/the execution/NN/execution of/IN/of program/NN/program /,/, we/PRP/we throw/VBP/throw an/DT/an exception/NNP/exception. the/DT/the term/NN/term used/VBD/used in/IN/in java/NN/java is/VBZ/is throw/NNP/throw. /:/( refer/NN/refer slide/NN/slide time/NN/time /:/: 18/CD/18 /:/: 07/CD/07 /CD/) as/IN/as soon/RB/soon as/IN/as an/DT/an exception/NN/exception is/VBZ/is thrown/VBN/thrown /,/, the/DT/the flow/NN/flow of/IN/of control/NN/control moves/NNS/moves from/IN/from the/DT/the current/JJ/current method/NN/method to/TO/to the/DT/the point/NN/point where/WRB/where the/DT/the method/NN/method was/VBD/was called/NNP/called. the/DT/the idea/NN/idea essentially/RB/essentially is/VBZ/is that/IN/that /,/, when/WRB/when an/DT/an exception/NN/exception occurs/VBZ/occurs you/PRP/you delegate/VBP/delegate the/DT/the responsibility/NN/responsibility of/IN/of handling/NN/handling that/IN/that exceptional/JJ/exceptional case/NN/case /,/, to/TO/to the/DT/the procedure/NN/procedure which/WDT/which called/VBN/called that/IN/that particular/JJ/particular method/NNP/method. you/PRP/you will/MD/will be/VB/be clear/JJ/clear /,/, if/IN/if you/PRP/you see/VBP/see an/DT/an example/NNP/example. i/PRP/i have/VBP/have two/CD/two methods/NNS/methods /,/, one/CD/one is/VBZ/is an/DT/an eat/NN/eat pizza/NN/pizza method/NN/method which/WDT/which throws/VBZ/throws a/DT/a stomachache/NN/stomachache exception/NN/exception /,/, also/RB/also there/EX/there is/VBZ/is some/DT/some dotted/VBN/dotted code/NNP/code. if/IN/if you/PRP/you eat/VBP/eat too/RB/too much/RB/much of/IN/of pizza/NN/pizza /,/, then/RB/then there/EX/there is/VBZ/is a/DT/a problem/NN/problem and/CC/and you/PRP/you throw/VBP/throw stomachacheexception/NNP/stomachacheexception. the/DT/the procedure/NN/procedure public/NN/public void/VBD/void eatpizza/NN/eatpizza /:/( /:/) throws/VBZ/throws was/VBD/was called/VBN/called in/IN/in the/DT/the method/NN/method eatpizza/NN/eatpizza /:/( /:/) /,/, which/WDT/which is/VBZ/is inside/VBP/inside the/DT/the stimulate/NN/stimulate meeting/NN/meeting procedure/NNP/procedure. when/WRB/when this/DT/this stomachacheexception/NN/stomachacheexception is/VBZ/is thrown/VBN/thrown /,/, the/DT/the flow/NN/flow of/IN/of control/NN/control will/MD/will come/VB/come to/TO/to ta.eatpizza/NNP/ta.eatpizza /NNP/( /NNP/) /./. thus/RB/thus when/WRB/when this/DT/this stomachacheexception/NN/stomachacheexception is/VBZ/is thrown/VBN/thrown /,/, we/PRP/we will/MD/will exist/VB/exist this/DT/this method/NN/method eatpizza/NN/eatpizza /:/( /:/) and/CC/and go/VB/go to/TO/to ta.eatpizza/NNP/ta.eatpizza /NNP/( /NNP/) /./. in/IN/in the/DT/the coding/NN/coding after/IN/after /CD/{ /CD/} there/EX/there are/VBP/are bunches/NNS/bunches of/IN/of other/JJ/other statements/NNS/statements that/IN/that would/MD/would not/RB/not be/VB/be executed/NNP/executed. the/DT/the flow/NN/flow of/IN/of control/NN/control would/MD/would interrupt/VB/interrupt the/DT/the dotted/VBN/dotted point/NN/point and/CC/and would/MD/would reach/VB/reach ta.eatpizza/NNP/ta.eatpizza /NNP/( /NNP/) /./. there/EX/there is/VBZ/is also/RB/also a/DT/a notion/NN/notion of/IN/of try/NN/try and/CC/and catch/NN/catch blocks/NNP/blocks. when/WRB/when the/DT/the exception/NN/exception is/VBZ/is thrown/VBN/thrown what/WP/what happens/NNS/happens to/TO/to the/DT/the variable/JJ/variable that/IN/that we/PRP/we have/VBP/have modified/VBN/modified it/PRP/it depends/VBZ/depends upon/IN/upon the/DT/the procedure/NN/procedure call/NN/call /,/, think/VBP/think as/IN/as if/IN/if we/PRP/we are/VBP/are returning/VBG/returning from/IN/from this/DT/this procedure/NN/procedure stomachacheexception/NN/stomachacheexception or/CC/or a/DT/a method/NNP/method. if/IN/if those/DT/those are/VBP/are local/JJ/local variables/NNS/variables then/RB/then you/PRP/you do/VBP/do not/RB/not want/VB/want to/TO/to see/VB/see them/NNP/them. if/IN/if they/PRP/they are/VBP/are global/JJ/global variables/NNS/variables and/CC/and if/IN/if it/PRP/it is/VBZ/is modified/VBN/modified in/IN/in the/DT/the if-loop/JJ/if-loop /,/, then/RB/then those/DT/those modifications/NNS/modifications are/VBP/are carried/VBN/carried over/IN/over to/TO/to the/DT/the ta.eatpizza/NNP/ta.eatpizza /NNP/( /NNP/) method/NNP/method. there/RB/there is/VBZ/is something/NN/something called/VBN/called as/IN/as a/DT/a try/NN/try and/CC/and a/DT/a catch/NN/catch block/NNP/block. if/IN/if you/PRP/you think/VBP/think that/IN/that there/EX/there could/MD/could be/VB/be possible/JJ/possible exception/NN/exception in/IN/in this/DT/this /NN/( ta.eatpizza/NN/ta.eatpizza /:/( /:/) /:/) method/NN/method /,/, then/RB/then you/PRP/you enclose/VBP/enclose the/DT/the method/NN/method within/IN/within a/DT/a try/NN/try block/NNP/block. start/NN/start it/PRP/it with/IN/with a/DT/a try/NN/try /,/, open/JJ/open a/DT/a bracket/NN/bracket /,/, and/CC/and then/RB/then include/VBP/include the/DT/the method/NN/method which/WDT/which you/PRP/you are/VBP/are calling/VBG/calling and/CC/and close/JJ/close it/PRP/it with/IN/with a/DT/a bracket/NNP/bracket. if/IN/if there/EX/there was/VBD/was no/DT/no exception/NN/exception raised/VBD/raised in/IN/in ta.eatpizza/NNP/ta.eatpizza /NNP/( /NNP/) method/NN/method or/CC/or this/DT/this particular/JJ/particular exception/NN/exception stomachacheexception/NN/stomachacheexception did/VBD/did not/RB/not get/VB/get raised/VBN/raised in/IN/in this/DT/this method/NN/method /,/, then/RB/then we/PRP/we will/MD/will just/RB/just skip/VB/skip the/DT/the catch/NN/catch block/NN/block /,/, then/RB/then go/VB/go on/IN/on to/TO/to the/DT/the statement/NN/statement /,/, after/IN/after the/DT/the catch/NN/catch block/NNP/block. if/IN/if an/DT/an exception/NN/exception was/VBD/was raised/VBN/raised in/IN/in this/DT/this /NN/( ta.eatpizza/NN/ta.eatpizza /:/( /:/) /:/) method/NN/method /,/, because/IN/because this/DT/this method/NN/method might/MD/might raise/VB/raise many/JJ/many exceptions/NNP/exceptions. if/IN/if this/DT/this /NN/( stomachacheexception/NN/stomachacheexception /:/) exception/NN/exception was/VBD/was raised/VBN/raised in/IN/in the/DT/the method/NN/method /,/, then/RB/then we/PRP/we would/MD/would come/VB/come in/IN/in to/TO/to the/DT/the catch/NN/catch block/NN/block and/CC/and execute/NN/execute the/DT/the statements/NNP/statements. if/IN/if the/DT/the method/NN/method raises/VBZ/raises an/DT/an exception/NN/exception /,/, then/RB/then if/IN/if that/DT/that exception/NN/exception is/VBZ/is caught/VBN/caught through/IN/through a/DT/a catch/NN/catch block/NN/block /,/, then/RB/then we/PRP/we would/MD/would execute/VB/execute the/DT/the statements/NNS/statements which/WDT/which are/VBP/are written/VBN/written inside/NN/inside the/DT/the catch/NN/catch block/NNP/block. any/DT/any kind/NN/kind of/IN/of statements/NNS/statements can/MD/can be/VB/be written/VBN/written inside/NN/inside the/DT/the catch/NN/catch block/NN/block /,/, not/RB/not necessarily/RB/necessarily system.out.exception/JJ/system.out.exception what/WP/what would/MD/would happen/VB/happen /,/, if/IN/if i/PRP/i did/VBD/did not/RB/not write/VB/write the/DT/the catch/NN/catch block/NN/block this/DT/this procedure/NN/procedure simulate/NN/simulate meeting/NN/meeting /,/, would/MD/would throw/VB/throw the/DT/the exception/NN/exception to/TO/to the/DT/the point/NN/point from/IN/from where/WRB/where its/PRP$/its parent/NN/parent procedure/NN/procedure was/VBD/was called/NNP/called. when/WRB/when stomachacheexception/NN/stomachacheexception throws/VBZ/throws an/DT/an exception/NN/exception /,/, the/DT/the ta.eatpizza/NNP/ta.eatpizza /NNP/( /NNP/) method/NN/method would/MD/would also/RB/also throw/VB/throw an/DT/an exception/NN/exception /,/, then/RB/then the/DT/the control/NN/control will/MD/will go/VB/go to/TO/to procedure/VB/procedure from/IN/from where/WRB/where simulate/JJ/simulate meeting/NN/meeting is/VBZ/is called/NNP/called. it/PRP/it is/VBZ/is fine/NN/fine if/IN/if it/PRP/it catches/VBZ/catches the/DT/the exception/NN/exception at/IN/at that/DT/that point/NN/point /,/, if/IN/if not/RB/not it/PRP/it will/MD/will throw/VB/throw an/DT/an exception/NN/exception to/TO/to the/DT/the high/JJ/high level/NN/level procedure/NN/procedure and/CC/and finally/RB/finally your/PRP$/your procedure/NN/procedure will/MD/will stop/VB/stop with/IN/with your/PRP$/your exception/NN/exception appearing/VBG/appearing at/IN/at your/PRP$/your console/NNP/console. in/IN/in this/DT/this manner/NN/manner it/PRP/it is/VBZ/is getting/VBG/getting propagated/VBN/propagated all/DT/all the/DT/the way/NN/way up/RP/up to/TO/to /,/, where/WRB/where your/PRP$/your procedure/NN/procedure stops/NNS/stops and/CC/and the/DT/the exception/NN/exception is/VBZ/is shown/VBN/shown to/TO/to the/DT/the user/NNP/user. system.out.println/NNP/system.out.println is/VBZ/is just/RB/just the/DT/the method/NN/method to/TO/to print/VB/print the/DT/the statement/NNP/statement. an/DT/an exception/NN/exception is/VBZ/is really/RB/really a/DT/a java/NN/java class/NN/class in/IN/in which/WDT/which i/PRP/i am/VBP/am creating/VBG/creating an/DT/an object/NN/object or/CC/or an/DT/an instance/NN/instance for/IN/for this/DT/this class/NNP/class. then/RB/then i/PRP/i am/VBP/am initializing/VBG/initializing that/IN/that instance/NN/instance with/IN/with any/DT/any parameter/NN/parameter and/CC/and i/PRP/i can/MD/can specify/VB/specify some/DT/some set/NN/set of/IN/of parameters/NNS/parameters in/IN/in the/DT/the statement/NN/statement given/VBN/given below/NNP/below. stomachacheexception/NN/stomachacheexception /:/( ouch/JJ/ouch /NN/) ;/:/; stomachacheexception/NN/stomachacheexception itself/PRP/itself is/VBZ/is a/DT/a class/NN/class and/CC/and for/IN/for this/DT/this class/NN/class /,/, i/PRP/i am/VBP/am creating/VBG/creating an/DT/an object/NN/object by/IN/by making/VBG/making a/DT/a call/NN/call to/TO/to the/DT/the statement/NNP/statement. stomachacheexception/NN/stomachacheexception /:/( ouch/JJ/ouch /NN/) ;/:/; when/WRB/when the/DT/the catch/NN/catch statement/NN/statement is/VBZ/is caught/VBN/caught /,/, e/NN/e in/IN/in that/DT/that statement/NN/statement would/MD/would get/VB/get assigned/VBN/assigned to/TO/to the/DT/the object/NN/object that/IN/that is/VBZ/is created/VBN/created by/IN/by stomachacheexception/NN/stomachacheexception /:/( ouch/JJ/ouch /NN/) statement/NNP/statement. the/DT/the try/NN/try and/CC/and catch/NN/catch block/NN/block would/MD/would come/VB/come together/NNP/together. if/IN/if the/DT/the method/NN/method were/VBD/were not/RB/not enclosed/VBN/enclosed between/IN/between try/NN/try and/CC/and catch/NN/catch /,/, then/RB/then the/DT/the exception/NN/exception would/MD/would just/RB/just get/VB/get propagate/JJ/propagate upwards/NNS/upwards in/IN/in the/DT/the procedural/JJ/procedural hierarchy/NNP/hierarchy. stomachacheexception/NN/stomachacheexception would/MD/would throw/VB/throw an/DT/an exception/NN/exception and/CC/and the/DT/the calling/NN/calling procedure/NN/procedure of/IN/of simulate/NN/simulate meeting/NN/meeting would/MD/would throw/VB/throw an/DT/an exception/NN/exception /,/, till/NN/till it/PRP/it is/VBZ/is caught/VBN/caught at/IN/at some/DT/some point/NNP/point. if/IN/if not/RB/not it/PRP/it reaches/VBZ/reaches the/DT/the console/NNP/console. what/WP/what does/VBZ/does the/DT/the name/NN/name of/IN/of the/DT/the class/NN/class followed/VBD/followed by/IN/by brackets/NNS/brackets and/CC/and some/DT/some parameters/NNS/parameters written/VBN/written would/MD/would signify/VB/signify in/IN/in java/NN/java for/IN/for example/NN/example /:/: stomachacheexception/NN/stomachacheexception /:/( ouch/JJ/ouch /NN/) ;/:/; in/IN/in java/NN/java it/PRP/it signifies/VBZ/signifies /,/, that/IN/that you/PRP/you are/VBP/are creating/VBG/creating an/DT/an object/NN/object for/IN/for this/DT/this class/NN/class and/CC/and you/PRP/you are/VBP/are invoking/VBG/invoking the/DT/the constructor/NN/constructor method/NN/method with/IN/with ouch/JJ/ouch as/IN/as the/DT/the parameters/NNP/parameters. the/DT/the try/NN/try and/CC/and catch/NN/catch block/NN/block are/VBP/are a/DT/a method/NN/method for/IN/for listening/NN/listening exceptions/NNS/exceptions and/CC/and catching/VBG/catching them/NNP/them. as/IN/as i/PRP/i mentioned/VBD/mentioned before/IN/before /,/, a/DT/a catch/NN/catch block/NN/block can/MD/can contain/VB/contain anything/NNP/anything. it/PRP/it does/VBZ/does not/RB/not mean/VB/mean that/IN/that it/PRP/it should/MD/should have/VB/have only/RB/only system.out.println/JJ/system.out.println /,/, it/PRP/it can/MD/can also/RB/also throw/VB/throw an/DT/an exception/NN/exception in/IN/in turn/NNP/turn. it/PRP/it also/RB/also helps/VBZ/helps us/PRP/us to/TO/to exit/VB/exit from/IN/from the/DT/the program/NN/program when/WRB/when an/DT/an exception/NN/exception occurs/NNP/occurs. if/IN/if you/PRP/you throw/VBP/throw an/DT/an exception/NN/exception in/IN/in any/DT/any method/NN/method /,/, then/RB/then you/PRP/you need/VBP/need to/TO/to add/VB/add a/DT/a throws/NN/throws class/NN/class next/IN/next to/TO/to the/DT/the method/NN/method name/NNP/name. when/WRB/when we/PRP/we wrote/VBP/wrote the/DT/the method/NN/method eatpizza/NN/eatpizza /:/( /:/) we/PRP/we had/VBD/had /,/, throws/VBZ/throws stomachacheexception/NNP/stomachacheexception. a/DT/a method/NN/method can/MD/can throw/VB/throw more/RBR/more than/IN/than one/CD/one exception/NNP/exception. in/IN/in java/NN/java everything/NN/everything is/VBZ/is really/RB/really an/DT/an object/NNP/object. stomachacheexception/NN/stomachacheexception is/VBZ/is the/DT/the name/NN/name of/IN/of the/DT/the class/NNP/class. public/NN/public class/NN/class stomachacheexception/NN/stomachacheexception extends/NNS/extends and/CC/and the/DT/the statement/NN/statement given/VBN/given below/IN/below is/VBZ/is the/DT/the constructor/NN/constructor method/NN/method for/IN/for the/DT/the class/NNP/class. thus/RB/thus the/DT/the name/NN/name of/IN/of the/DT/the constructor/NN/constructor method/NN/method is/VBZ/is the/DT/the same/JJ/same as/IN/as the/DT/the class/NN/class name/NNP/name. public/JJ/public stomachacheexception/NN/stomachacheexception /:/( string/VBG/string err/NN/err /:/) the/DT/the constructor/NN/constructor method/NN/method takes/VBZ/takes a/DT/a single/JJ/single parameter/NN/parameter /,/, which/WDT/which is/VBZ/is a/DT/a string/NNP/string. super/NN/super means/VBZ/means that/DT/that it/PRP/it is/VBZ/is calling/VBG/calling the/DT/the super/NN/super class/NN/class with/IN/with the/DT/the same/JJ/same parameter.again/NN/parameter.again as/IN/as i/PRP/i mentioned/VBD/mentioned before/IN/before /,/, if/IN/if you/PRP/you never/RB/never catch/VBP/catch an/DT/an exception/NN/exception it/PRP/it will/MD/will propagate/VB/propagate upwards/NNS/upwards /,/, along/IN/along with/IN/with the/DT/the chain/NN/chain of/IN/of method/NN/method calls/NNS/calls /,/, till/IN/till it/PRP/it reaches/VBZ/reaches the/DT/the console/NNP/console. since/IN/since the/DT/the stomach/NN/stomach ache/NN/ache exception/NN/exception is/VBZ/is extending/VBG/extending a/DT/a run/NN/run time/NN/time exception/NN/exception /,/, it/PRP/it will/MD/will call/VB/call the/DT/the constructor/NN/constructor method/NN/method for/IN/for the/DT/the run/NN/run time/NN/time exception/NNP/exception. if/IN/if a/DT/a particular/JJ/particular method/NN/method throws/VBZ/throws more/JJR/more than/IN/than one/CD/one exception/NN/exception /,/, then/RB/then you/PRP/you will/MD/will have/VB/have to/TO/to specify/VB/specify all/DT/all those/DT/those exceptions/NNS/exceptions which/WDT/which it/PRP/it throws/VBZ/throws /,/, next/JJ/next to/TO/to the/DT/the method/NN/method name/NNP/name. even/RB/even in/IN/in the/DT/the try/NN/try block/NN/block you/PRP/you can/MD/can have/VB/have many/JJ/many catch/NN/catch statements/NNP/statements. first/RB/first we/PRP/we can/MD/can catch/VB/catch one/CD/one particular/JJ/particular exception/NN/exception followed/VBN/followed by/IN/by some/DT/some other/JJ/other exception/NN/exception and/CC/and so/RB/so on/NNP/on. look/NN/look at/IN/at your/PRP$/your java/NN/java book/NN/book for/IN/for more/JJR/more details/NNP/details. let/NN/let us/PRP/us look/VBP/look at/IN/at the/DT/the stacks/NNP/stacks. we/PRP/we had/VBD/had created/VBN/created the/DT/the interface/NN/interface for/IN/for our/PRP$/our stack/NNP/stack. we/PRP/we are/VBP/are going/VBG/going to/TO/to implement/VB/implement the/DT/the methods/NNS/methods and/CC/and there/EX/there are/VBP/are many/JJ/many ways/NNS/ways of/IN/of implementing/VBG/implementing a/DT/a stack/NNP/stack. first/JJ/first we/PRP/we are/VBP/are going/VBG/going to/TO/to implement/VB/implement using/VBG/using an/DT/an array/NNP/array. let/NN/let us/PRP/us say/VBP/say the/DT/the maximum/NN/maximum size/NN/size of/IN/of our/PRP$/our stack/NN/stack is/VBZ/is n/VBN/n and/CC/and i/PRP/i am/VBP/am going/VBG/going to/TO/to have/VB/have an/DT/an array/NN/array of/IN/of n/NN/n elements/NNS/elements of/IN/of the/DT/the stack/NNP/stack. i/PRP/i am/VBP/am going/VBG/going to/TO/to have/VB/have a/DT/a variable/JJ/variable t/NN/t /,/, which/WDT/which will/MD/will tell/VB/tell about/IN/about the/DT/the location/NN/location of/IN/of the/DT/the top/JJ/top element/NN/element of/IN/of the/DT/the stack/NNP/stack. the/DT/the variable/JJ/variable t/NN/t gives/VBZ/gives the/DT/the index/NN/index of/IN/of the/DT/the top/JJ/top element/NN/element in/IN/in the/DT/the array/NN/array s/NNP/s. the/DT/the first/JJ/first element/NN/element will/MD/will be/VB/be at/IN/at location/NN/location 0/-NONE-/0 and/CC/and then/RB/then when/WRB/when i/PRP/i push/VBP/push another/DT/another element/NN/element it/PRP/it will/MD/will move/VB/move to/TO/to the/DT/the next/JJ/next location/NN/location and/CC/and so/RB/so on/NNP/on. /NNP/( refer/NN/refer slide/NN/slide time/NN/time /:/: 29/CD/29 /:/: 43/CD/43 /CD/) i/PRP/i have/VBP/have actually/RB/actually listed/VBN/listed out/RP/out an/DT/an entire/JJ/entire implementation/NN/implementation for/IN/for our/PRP$/our stack/NN/stack interface/NNP/interface. my/PRP$/my implementation/NN/implementation is/VBZ/is called/VBN/called array/NN/array stack/NN/stack because/IN/because i/PRP/i am/VBP/am using/VBG/using an/DT/an array/NN/array to/TO/to implement/VB/implement the/DT/the stack/NNP/stack. the/DT/the statement/NN/statement mentioned/VBD/mentioned below/IN/below says/NNS/says that/IN/that i/PRP/i am/VBP/am implementing/VBG/implementing the/DT/the stack/NN/stack interface/NNP/interface. public/JJ/public class/NN/class arraystack/NN/arraystack implements/NNS/implements stack/VBP/stack implement/NN/implement stack/NN/stack means/VBZ/means /,/, it/PRP/it is/VBZ/is implementing/VBG/implementing the/DT/the stack/NN/stack interface/NN/interface that/WDT/that we/PRP/we provided/NNP/provided. i/PRP/i have/VBP/have set/VBN/set with/IN/with a/DT/a default/NN/default capacity/NN/capacity for/IN/for the/DT/the stack/NN/stack which/WDT/which is/VBZ/is 1024/CD/1024 /,/, otherwise/RB/otherwise the/DT/the capacity/NN/capacity of/IN/of the/DT/the stack/NN/stack would/MD/would be/VB/be in/IN/in the/DT/the variable/JJ/variable n/NNP/n. final/JJ/final is/VBZ/is just/RB/just specifying/VBG/specifying that/IN/that the/DT/the value/NN/value of/IN/of capacity/NN/capacity is/VBZ/is always/RB/always a/DT/a constant/JJ/constant and/CC/and it/PRP/it can/MD/can never/RB/never be/VB/be changed/NNP/changed. /NNP/( refer/NN/refer slide/NN/slide time/NN/time /:/: 30/CD/30 /:/: 48/CD/48 /CD/) s/NNS/s is/VBZ/is an/DT/an array/NN/array which/WDT/which is/VBZ/is going/VBG/going to/TO/to hold/VB/hold the/DT/the elements/NNS/elements of/IN/of the/DT/the stack/NNP/stack. thus/RB/thus s/VBZ/s is/VBZ/is an/DT/an array/NN/array of/IN/of object/NN/object and/CC/and t/NN/t is/VBZ/is the/DT/the index/NN/index of/IN/of the/DT/the top/JJ/top element/NNP/element. initially/RB/initially t/VBD/t =/CD/= -1/-NONE-/-1 /,/, because/IN/because there/EX/there is/VBZ/is nothing/NN/nothing inside/NN/inside the/DT/the t/NNP/t. t/NN/t =/:/= 0/-NONE-/0 means/VBZ/means the/DT/the top/JJ/top element/NN/element is/VBZ/is in/IN/in the/DT/the location/NN/location 0/-NONE-/0 and/CC/and when/WRB/when the/DT/the stack/NN/stack is/VBZ/is empty/JJ/empty t/NN/t =/:/= -1/NNP/-1. public/JJ/public arraystack/NN/arraystack /:/( /:/) public/JJ/public arraystack/NN/arraystack /:/( int/NN/int cap/NN/cap /:/) the/DT/the above/NN/above two/CD/two statements/NNS/statements are/VBP/are the/DT/the constructor/NN/constructor methods/NNP/methods. if/IN/if you/PRP/you do/VBP/do not/RB/not specify/VB/specify anything/NN/anything or/CC/or if/IN/if you/PRP/you just/RB/just call/VBP/call the/DT/the array/NN/array stack/NN/stack without/IN/without any/DT/any parameters/NNS/parameters /,/, then/RB/then i/PRP/i am/VBP/am going/VBG/going to/TO/to create/VB/create a/DT/a stack/NN/stack whose/WP$/whose capacity/NN/capacity is/VBZ/is 1024/CD/1024. if/IN/if you/PRP/you call/VBP/call array/VBP/array stack/NN/stack with/IN/with some/DT/some number/NN/number let/VBD/let us/PRP/us say/VBP/say 37/CD/37 /,/, then/RB/then i/PRP/i am/VBP/am going/VBG/going to/TO/to create/VB/create a/DT/a stack/NN/stack of/IN/of size/NN/size 37/CD/37. what/WP/what should/MD/should size/VB/size do/VB/do size/NN/size should/MD/should just/RB/just return/VB/return how/WRB/how many/JJ/many elements/NNS/elements are/VBP/are there/RB/there in/IN/in my/PRP$/my stack/NNP/stack. if/IN/if t/NN/t is/VBZ/is the/DT/the index/NN/index of/IN/of the/DT/the top/JJ/top element/NN/element /,/, then/RB/then t/VB/t +/:/+ 1/CD/1 elements/NNS/elements are/VBP/are there/RB/there because/IN/because we/PRP/we just/RB/just started/VBD/started from/IN/from zero/NNP/zero. the/DT/the stack/NN/stack is/VBZ/is empty/JJ/empty if/IN/if t/NN/t =/:/= -1/-NONE-/-1 that/IN/that is/VBZ/is t/VBN/t 