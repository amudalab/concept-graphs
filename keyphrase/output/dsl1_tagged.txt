welcome/NN/welcome to/TO/to data/NNS/data structures/NNS/structures and/CC/and algorithms/NNP/algorithms. we/PRP/we are/VBP/are going/VBG/going to/TO/to learn/VB/learn about/IN/about some/DT/some basic/JJ/basic terminologies/NNS/terminologies regarding/VBG/regarding data/NNS/data structures/NNS/structures and/CC/and the/DT/the notations/NNS/notations that/WDT/that you/PRP/you would/MD/would be/VB/be following/VBG/following in/IN/in the/DT/the rest/NN/rest of/IN/of this/DT/this course/NNP/course. we/PRP/we will/MD/will begin/VB/begin with/IN/with some/DT/some simple/JJ/simple definitions/NNP/definitions. an/DT/an algorithm/NN/algorithm is/VBZ/is an/DT/an outline/NN/outline of/IN/of the/DT/the steps/NNS/steps that/WDT/that a/DT/a program/NN/program or/CC/or any/DT/any computational/JJ/computational procedure/NN/procedure has/VBZ/has to/TO/to take/NNP/take. a/DT/a program/NN/program on/IN/on the/DT/the other/JJ/other hand/NN/hand is/VBZ/is an/DT/an implementation/NN/implementation of/IN/of an/DT/an algorithm/NN/algorithm and/CC/and it/PRP/it could/MD/could be/VB/be in/IN/in any/DT/any programming/NN/programming language/NNP/language. data/NNS/data structure/VBP/structure is/VBZ/is the/DT/the way/NN/way we/PRP/we need/VBP/need to/TO/to organize/VB/organize the/DT/the data/NNS/data /,/, so/RB/so that/IN/that it/PRP/it can/MD/can be/VB/be used/VBN/used effectively/RB/effectively by/IN/by the/DT/the program/NNP/program. hope/NN/hope you/PRP/you are/VBP/are all/DT/all familiar/JJ/familiar with/IN/with certain/JJ/certain data/NNS/data structures/NNS/structures /,/, an/DT/an array/NN/array or/CC/or a/DT/a list/NNP/list. in/IN/in this/DT/this course/NN/course you/PRP/you will/MD/will be/VB/be seeing/VBG/seeing a/DT/a lot/NN/lot of/IN/of data/NNS/data structures/NNS/structures and/CC/and you/PRP/you will/MD/will see/VB/see how/WRB/how to/TO/to use/VB/use them/PRP/them in/IN/in various/JJ/various algorithms/NNP/algorithms. we/PRP/we will/MD/will take/VB/take a/DT/a particular/JJ/particular problem/NN/problem /,/, try/NN/try to/TO/to solve/VB/solve it/PRP/it and/CC/and in/IN/in the/DT/the process/NN/process develop/NN/develop data/NNS/data structures/NNP/structures. the/DT/the best/JJS/best way/NN/way of/IN/of organizing/VBG/organizing the/DT/the data/NNS/data /,/, associated/VBN/associated with/IN/with that/DT/that problem/NNP/problem. what/WP/what is/VBZ/is an/DT/an algorithmic/JJ/algorithmic problem/NN/problem an/DT/an algorithmic/JJ/algorithmic problem/NN/problem is/VBZ/is essentially/RB/essentially /,/, that/IN/that you/PRP/you have/VBP/have a/DT/a certain/JJ/certain specifications/NNS/specifications of/IN/of an/DT/an input/NN/input and/CC/and specify/NN/specify what/WP/what the/DT/the output/NN/output should/MD/should be/VB/be like/NNP/like. here/RB/here is/VBZ/is one/CD/one specification/NNP/specification. a/DT/a sorted/JJ/sorted /,/, non/NN/non decreasing/VBG/decreasing sequence/NN/sequence of/IN/of natural/JJ/natural numbers/NNS/numbers of/IN/of non-zero/JJ/non-zero /,/, finite/JJ/finite length/NNP/length. for/IN/for example/NN/example /:/: */-NONE-/* 1,20,908,909,100000,1000000000/CD/1,20,908,909,100000,1000000000 */-NONE-/* 3/CD/3. this/DT/this is/VBZ/is a/DT/a completely/RB/completely specified/VBN/specified input/NNP/input. above/IN/above are/VBP/are the/DT/the two/CD/two examples/NNS/examples of/IN/of input/NN/input /,/, which/WDT/which meets/NNS/meets the/DT/the specification/NN/specification and/CC/and i/PRP/i have/VBP/have not/RB/not given/VBN/given any/DT/any output/NN/output specification/NNP/specification. what/WP/what is/VBZ/is an/DT/an instance/NN/instance a/DT/a sorted/JJ/sorted /,/, non-decreasing/JJ/non-decreasing sequence/NN/sequence of/IN/of natural/JJ/natural numbers/NNS/numbers of/IN/of non-zero/JJ/non-zero /,/, finite/JJ/finite length/NN/length forms/NNS/forms an/DT/an instance/NNP/instance. those/DT/those two/CD/two examples/NNS/examples are/VBP/are the/DT/the instances/NNS/instances of/IN/of the/DT/the input/NNP/input. you/PRP/you can/MD/can have/VB/have any/DT/any possible/JJ/possible number/NN/number of/IN/of instances/NNS/instances that/WDT/that may/MD/may take/VB/take sequence/NN/sequence of/IN/of sorted/VBN/sorted /,/, nondecreasing/NN/nondecreasing numbers/NNS/numbers as/IN/as input/NNP/input. an/DT/an algorithm/NN/algorithm is/VBZ/is essentially/RB/essentially /,/, describing/VBG/describing the/DT/the actions/NNS/actions that/WDT/that one/CD/one should/MD/should take/VB/take on/IN/on the/DT/the input/NN/input instance/NN/instance to/TO/to get/VB/get the/DT/the specified/VBN/specified output/NNP/output. also/RB/also there/RB/there can/MD/can be/VB/be infinitely/RB/infinitely many/JJ/many input/NN/input instances/NNS/instances and/CC/and algorithms/NNS/algorithms for/IN/for solving/VBG/solving certain/JJ/certain problem/NNP/problem. each/DT/each one/CD/one of/IN/of you/PRP/you could/MD/could do/VB/do it/PRP/it in/IN/in a/DT/a different/JJ/different way/NNP/way. that/IN/that brings/NNS/brings the/DT/the notion/NN/notion of/IN/of good/JJ/good algorithm/NNP/algorithm. there/RB/there are/VBP/are so/RB/so many/JJ/many different/JJ/different algorithms/NNS/algorithms for/IN/for solving/VBG/solving a/DT/a certain/JJ/certain problem/NNP/problem. what/WP/what is/VBZ/is a/DT/a good/JJ/good algorithm/NN/algorithm good/JJ/good algorithm/NN/algorithm is/VBZ/is an/DT/an efficient/JJ/efficient algorithm/NNP/algorithm. what/WP/what is/VBZ/is efficient/JJ/efficient efficient/NN/efficient is/VBZ/is something/NN/something /,/, which/WDT/which has/VBZ/has small/JJ/small running/VBG/running time/NN/time and/CC/and takes/VBZ/takes less/JJR/less memory/NNP/memory. these/DT/these will/MD/will be/VB/be the/DT/the two/CD/two measures/NNS/measures of/IN/of efficiency/NN/efficiency we/PRP/we will/MD/will be/VB/be working/VBG/working with/NNP/with. there/RB/there could/MD/could also/RB/also be/VB/be other/JJ/other measures/NNS/measures of/IN/of efficiency/NNP/efficiency. but/CC/but these/DT/these are/VBP/are the/DT/the only/JJ/only two/CD/two things/NNS/things we/PRP/we will/MD/will be/VB/be considering/VBG/considering in/IN/in this/DT/this course/NNP/course. we/PRP/we would/MD/would be/VB/be spending/NN/spending more/JJR/more time/NN/time on/IN/on analyzing/NN/analyzing the/DT/the running/NN/running time/NN/time of/IN/of an/DT/an algorithm/NN/algorithm and/CC/and we/PRP/we will/MD/will also/RB/also spend/VB/spend some/DT/some time/NN/time on/IN/on analyzing/NN/analyzing the/DT/the space/NNP/space. we/PRP/we would/MD/would be/VB/be interested/JJ/interested in/IN/in the/DT/the efficiency/NN/efficiency of/IN/of algorithms/NNS/algorithms /,/, as/IN/as a/DT/a function/NN/function of/IN/of input/NN/input size/NNP/size. clearly/RB/clearly you/PRP/you can/MD/can imagine/VB/imagine that/IN/that /,/, if/IN/if i/PRP/i have/VBP/have a/DT/a small/JJ/small input/NN/input and/CC/and my/PRP$/my algorithm/NN/algorithm or/CC/or a/DT/a program/NN/program running/VBG/running on/IN/on that/DT/that input/NN/input will/MD/will take/VB/take less/JJR/less amount/NN/amount of/IN/of time/NNP/time. if/IN/if the/DT/the input/NN/input becomes/VBZ/becomes 10/CD/10 times/NNS/times larger/JJR/larger /,/, then/RB/then the/DT/the time/NN/time taken/VBN/taken by/IN/by the/DT/the program/NN/program may/MD/may also/RB/also increase/NNP/increase. it/PRP/it may/MD/may become/VB/become 10/CD/10 /,/, 20/CD/20 or/CC/or 100/CD/100 times/NNP/times. it/PRP/it is/VBZ/is this/DT/this behavior/NN/behavior of/IN/of increase/NN/increase in/IN/in the/DT/the running/NN/running time/NN/time /,/, with/IN/with the/DT/the increase/NN/increase in/IN/in the/DT/the size/NN/size of/IN/of input/NN/input would/MD/would be/VB/be of/IN/of our/PRP$/our interest/NNP/interest. let/NN/let us/PRP/us see/VBP/see the/DT/the slide/NNP/slide. how/WRB/how does/VBZ/does one/CD/one measure/NN/measure the/DT/the running/NN/running time/NN/time of/IN/of an/DT/an algorithm/NN/algorithm let/NN/let us/PRP/us look/VBP/look at/IN/at the/DT/the experimental/JJ/experimental study/NNP/study. you/PRP/you have/VBP/have a/DT/a certain/JJ/certain algorithm/NN/algorithm and/CC/and you/PRP/you have/VBP/have to/TO/to implement/VB/implement the/DT/the algorithm/NN/algorithm /,/, which/WDT/which means/VBZ/means you/PRP/you have/VBP/have to/TO/to write/VB/write a/DT/a program/NN/program in/IN/in a/DT/a certain/JJ/certain programming/NN/programming language/NNP/language. you/PRP/you run/VBP/run the/DT/the program/NN/program with/IN/with varying/VBG/varying data/NNS/data sets/NNS/sets in/IN/in which/WDT/which some/DT/some are/VBP/are smaller/JJR/smaller /,/, some/DT/some are/VBP/are of/IN/of larger/JJR/larger data/NNS/data sets/NNS/sets /,/, some/DT/some would/MD/would be/VB/be of/IN/of some/DT/some kinds/NNS/kinds and/CC/and some/DT/some would/MD/would be/VB/be of/IN/of different/JJ/different kinds/NNS/kinds of/IN/of varying/VBG/varying composition/NNP/composition. then/RB/then you/PRP/you clock/VBP/clock the/DT/the time/NN/time the/DT/the program/NN/program takes/VBZ/takes and/CC/and clock/NN/clock does/VBZ/does not/RB/not mean/VB/mean that/IN/that you/PRP/you should/MD/should sit/VB/sit down/RB/down near/IN/near stopwatch/NNP/stopwatch. perhaps/RB/perhaps you/PRP/you can/MD/can use/VB/use the/DT/the system/NN/system utility/NN/utility like/IN/like system/NNP/system. current/JJ/current time/NN/time millis/NNS/millis /:/( /:/) /,/, to/TO/to clock/VB/clock the/DT/the time/NN/time that/IN/that program/NN/program takes/VBZ/takes and/CC/and then/RB/then from/IN/from that/DT/that you/PRP/you try/VBP/try to/TO/to figure/VB/figure out/RP/out /,/, how/WRB/how good/JJ/good your/PRP$/your algorithms/NNS/algorithms is/NNP/is. that/IN/that is/VBZ/is what/WP/what one/CD/one would/MD/would call/VB/call as/IN/as the/DT/the experimental/JJ/experimental study/NN/study of/IN/of the/DT/the algorithm/NNP/algorithm. this/DT/this has/VBZ/has certain/JJ/certain limitations/NNS/limitations /,/, let/VB/let us/PRP/us see/VB/see them/PRP/them in/IN/in detail/NNP/detail. first/JJ/first you/PRP/you have/VBP/have to/TO/to implement/VB/implement the/DT/the algorithm/NN/algorithm in/IN/in which/WDT/which we/PRP/we will/MD/will be/VB/be able/JJ/able to/TO/to determine/VB/determine how/WRB/how good/JJ/good your/PRP$/your algorithm/NN/algorithm is/NNP/is. implementing/NN/implementing it/PRP/it is/VBZ/is a/DT/a huge/JJ/huge overhead/NN/overhead /,/, where/WRB/where you/PRP/you have/VBP/have to/TO/to spend/VB/spend considerable/JJ/considerable amount/NN/amount of/IN/of time/NNP/time. experiments/NNS/experiments can/MD/can be/VB/be done/VBN/done only/RB/only on/IN/on a/DT/a limited/JJ/limited set/NN/set of/IN/of inputs/NNP/inputs. you/PRP/you can/MD/can run/VB/run your/PRP$/your experiment/NN/experiment on/IN/on a/DT/a small/JJ/small set/NN/set of/IN/of instances/NNS/instances and/CC/and that/IN/that might/MD/might not/RB/not really/RB/really indicate/VBP/indicate the/DT/the time/NN/time that/IN/that your/PRP$/your algorithm/NN/algorithm is/VBZ/is taking/VBG/taking for/IN/for other/JJ/other inputs/NNS/inputs /,/, which/WDT/which you/PRP/you have/VBP/have not/RB/not considered/VBN/considered in/IN/in your/PRP$/your experiment/NNP/experiment. if/IN/if you/PRP/you have/VBP/have two/CD/two algorithms/NNS/algorithms and/CC/and you/PRP/you have/VBP/have to/TO/to decide/VB/decide /,/, which/WDT/which one/CD/one is/VBZ/is better/NNP/better. you/PRP/you have/VBP/have to/TO/to use/VB/use exactly/RB/exactly the/DT/the same/JJ/same platforms/NNS/platforms to/TO/to do/VB/do the/DT/the comparison/NNP/comparison. platform/NN/platform means/VBZ/means both/DT/both the/DT/the hardware/NN/hardware and/CC/and software/NN/software environment/NNP/environment. because/IN/because as/IN/as you/PRP/you can/MD/can imagine/VB/imagine /,/, different/JJ/different machines/NNS/machines would/MD/would make/VB/make a/DT/a difference/NN/difference /,/, in/IN/in fact/NN/fact even/RB/even the/DT/the users/NNS/users who/WP/who are/VBP/are working/VBG/working on/IN/on that/DT/that system/NN/system at/IN/at that/DT/that particular/JJ/particular point/NN/point would/MD/would make/VB/make a/DT/a difference/NN/difference on/IN/on the/DT/the running/NN/running time/NN/time of/IN/of an/DT/an algorithm/NNP/algorithm. it/PRP/it becomes/VBZ/becomes very/RB/very messy/JJ/messy /,/, if/IN/if you/PRP/you have/VBP/have to/TO/to do/VB/do it/PRP/it this/DT/this way/NNP/way. hence/NN/hence same/VBD/same hardware/NN/hardware and/CC/and software/NN/software environments/NNS/environments should/MD/should be/VB/be used/NNP/used. what/WP/what we/PRP/we are/VBP/are going/VBG/going to/TO/to do/VB/do in/IN/in the/DT/the part/NN/part of/IN/of this/DT/this course/NN/course in/IN/in this/DT/this very/RB/very first/JJ/first lecture/NN/lecture /,/, we/PRP/we have/VBP/have to/TO/to develop/VB/develop the/DT/the general/JJ/general methodology/NN/methodology /,/, which/WDT/which will/MD/will help/VB/help us/PRP/us to/TO/to analyze/VB/analyze running/VBG/running time/NN/time of/IN/of algorithms/NNP/algorithms. we/PRP/we are/VBP/are going/VBG/going to/TO/to do/VB/do it/PRP/it as/IN/as follows/NNS/follows /:/: first/JJ/first we/PRP/we are/VBP/are going/VBG/going to/TO/to develop/VB/develop a/DT/a high/JJ/high level/NN/level description/NN/description of/IN/of an/DT/an algorithm/NNP/algorithm. the/DT/the way/NN/way of/IN/of describing/VBG/describing an/DT/an algorithm/NN/algorithm and/CC/and we/PRP/we are/VBP/are going/VBG/going to/TO/to use/VB/use this/DT/this description/NN/description to/TO/to figure/VB/figure out/RP/out the/DT/the running/NN/running time/NN/time and/CC/and not/RB/not to/TO/to implement/VB/implement it/PRP/it to/TO/to any/DT/any system/NNP/system. a/DT/a methodology/NN/methodology would/MD/would help/VB/help us/PRP/us to/TO/to take/VB/take into/IN/into account/NN/account of/IN/of all/DT/all possible/JJ/possible input/NN/input instances/NNS/instances and/CC/and also/RB/also it/PRP/it will/MD/will allow/VB/allow us/PRP/us to/TO/to evaluate/VB/evaluate the/DT/the efficiency/NN/efficiency of/IN/of the/DT/the algorithm/NN/algorithm in/IN/in a/DT/a way/NN/way that/WDT/that it/PRP/it is/VBZ/is independent/JJ/independent of/IN/of the/DT/the platform/NN/platform we/PRP/we are/VBP/are using/NNP/using. pseudo-code/NNP/pseudo-code is/VBZ/is the/DT/the high/JJ/high level/NN/level description/NN/description of/IN/of an/DT/an algorithm/NN/algorithm and/CC/and this/DT/this is/VBZ/is how/WRB/how we/PRP/we would/MD/would be/VB/be specifying/VBG/specifying all/DT/all our/PRP$/our algorithms/NNS/algorithms for/IN/for the/DT/the purpose/NN/purpose of/IN/of this/DT/this course/NNP/course. here/RB/here is/VBZ/is an/DT/an example/NN/example of/IN/of pseudo/NN/pseudo code/NN/code and/CC/and you/PRP/you might/MD/might have/VB/have seen/VBN/seen this/DT/this in/IN/in earlier/JJR/earlier courses/NNS/courses also/-NONE-/also. what/WP/what is/VBZ/is this/DT/this algorithm/NN/algorithm doing/VBG/doing this/DT/this algorithm/NN/algorithm takes/VBZ/takes an/DT/an array/NN/array a/DT/a /,/, which/WDT/which stores/NNS/stores an/DT/an integer/NN/integer in/IN/in it/PRP/it and/CC/and it/PRP/it is/VBZ/is trying/VBG/trying to/TO/to find/VB/find the/DT/the maximum/NN/maximum element/NN/element in/IN/in this/DT/this array/NNP/array. algorithm/NN/algorithm array/NN/array max/NN/max /:/( a/DT/a /,/, n/NN/n /:/) the/DT/the above/NN/above mentioned/VBD/mentioned example/NN/example is/VBZ/is not/RB/not a/DT/a program/NN/program /,/, because/IN/because the/DT/the syntax/NN/syntax is/VBZ/is wrong/NNP/wrong. but/CC/but it/PRP/it is/VBZ/is a/DT/a pseudo/NN/pseudo code/NN/code which/WDT/which is/VBZ/is a/DT/a mixture/NN/mixture of/IN/of natural/JJ/natural language/NN/language and/CC/and some/DT/some high-level/JJ/high-level programming/NN/programming concepts/NNP/concepts. i/PRP/i am/VBP/am going/VBG/going to/TO/to use/VB/use a/DT/a for/IN/for loop/NN/loop /,/, do/VBP/do loop/NN/loop /,/, if-then-else/JJ/if-then-else statement/NN/statement and/CC/and a/DT/a while/NN/while loop/NNP/loop. but/CC/but i/PRP/i will/MD/will not/RB/not bother/VB/bother about/IN/about whether/IN/whether there/EX/there should/MD/should be/VB/be a/DT/a semicolon/NN/semicolon or/CC/or a/DT/a colon/NN/colon /,/, because/IN/because they/PRP/they are/VBP/are required/VBN/required for/IN/for the/DT/the compiler/NNP/compiler. but/CC/but for/IN/for our/PRP$/our understanding/NN/understanding /,/, what/WP/what the/DT/the program/NN/program is/VBZ/is doing/VBG/doing is/VBZ/is clear/NNP/clear. in/IN/in the/DT/the beginning/NN/beginning it/PRP/it keeps/VBZ/keeps track/NN/track of/IN/of the/DT/the maximum/NN/maximum variable/JJ/variable in/IN/in a/DT/a variable/JJ/variable called/VBN/called current/JJ/current max/NN/max which/WDT/which is/VBZ/is initialized/VBN/initialized to/TO/to the/DT/the first/JJ/first element/NN/element of/IN/of the/DT/the array/NNP/array. current/JJ/current max/NN/max a/DT/a /NN/[ 0/-NONE-/0 /./] then/RB/then it/PRP/it is/VBZ/is going/VBG/going to/TO/to run/VB/run through/IN/through the/DT/the remaining/VBG/remaining element/NN/element of/IN/of the/DT/the array/NN/array /,/, compare/NN/compare them/PRP/them with/IN/with the/DT/the current/JJ/current maximum/NN/maximum element/NNP/element. if/IN/if the/DT/the current/JJ/current maximum/NN/maximum element/NN/element is/VBZ/is less/JJR/less than/IN/than the/DT/the current/JJ/current element/NN/element /,/, then/RB/then it/PRP/it would/MD/would update/VB/update the/DT/the current/JJ/current max/NNP/max. a/DT/a /NN/[ i/PRP/i /VBP/] becomes/VBZ/becomes the/DT/the new/JJ/new max/NN/max and/CC/and then/RB/then when/WRB/when the/DT/the loop/NN/loop terminates/VBZ/terminates we/PRP/we would/MD/would just/RB/just return/VB/return current/JJ/current max/NNP/max. if/IN/if current/JJ/current max/NN/max </:/< a/DT/a /NN/[ i/PRP/i /VBP/] then/RB/then current/JJ/current max/NN/max a/DT/a /NN/[ i/PRP/i /VBP/] return/NN/return current/JJ/current max/NN/max it/PRP/it is/VBZ/is a/DT/a very/RB/very simple/JJ/simple algorithm/NN/algorithm but/CC/but just/RB/just with/IN/with this/DT/this pseudo-code/JJ/pseudo-code /,/, you/PRP/you are/VBP/are able/JJ/able to/TO/to understand/VB/understand what/WP/what it/PRP/it is/VBZ/is doing/NNP/doing. this/DT/this will/MD/will not/RB/not run/VB/run on/IN/on any/DT/any computer/NN/computer since/IN/since it/PRP/it is/VBZ/is the/DT/the pseudo-code/JJ/pseudo-code /,/, but/CC/but it/PRP/it conveys/VBZ/conveys the/DT/the idea/NN/idea or/CC/or the/DT/the concepts/NNP/concepts. thus/RB/thus pseudo-code/JJ/pseudo-code is/VBZ/is more/RBR/more structured/VBN/structured than/IN/than usual/JJ/usual prose/NN/prose /,/, but/CC/but it/PRP/it is/VBZ/is less/JJR/less formal/JJ/formal than/IN/than a/DT/a programming/NN/programming language/NNP/language. how/WRB/how pseudo-code/JJ/pseudo-code will/MD/will look/VB/look like/IN/like we/PRP/we will/MD/will use/VB/use standard/JJ/standard numeric/JJ/numeric and/CC/and boolean/JJ/boolean expressions/NNS/expressions in/IN/in it/NNP/it. instead/RB/instead of/IN/of the/DT/the assignment/NN/assignment operator/NN/operator which/WDT/which is/VBZ/is =/:/= in/IN/in java/NN/java /,/, i/PRP/i will/MD/will use/VB/use and/CC/and instead/RB/instead of/IN/of the/DT/the equality/NN/equality operator/NN/operator /,/, an/DT/an equality/NN/equality relationship/NN/relationship in/IN/in java/NN/java which/WDT/which is/VBZ/is =/:/= =/:/= the/DT/the same/JJ/same in/IN/in c/NN/c /,/, i/PRP/i will/MD/will just/RB/just use/VB/use =/:/= /./. i/PRP/i will/MD/will declare/VB/declare methods/NNS/methods with/IN/with the/DT/the algorithmic/JJ/algorithmic name/NN/name and/CC/and the/DT/the parameter/NN/parameter it/PRP/it takes/NNP/takes. algorithm/NN/algorithm name/NN/name /:/( param/NN/param 1/CD/1 /,/, param2/NNP/param2 /NNP/) i/PRP/i will/MD/will use/VB/use all/DT/all kinds/NNS/kinds of/IN/of programming/NN/programming construct/NN/construct like/IN/like if/IN/if then/RB/then statement/NN/statement /,/, if/IN/if then/RB/then /:/[ else/RB/else /:/] statement/NN/statement /,/, while/IN/while do/VB/do /,/, repeat/VB/repeat until/IN/until /,/, for/IN/for do/VB/do and/CC/and to/TO/to index/NN/index array/NN/array i/PRP/i will/MD/will say/VB/say a/DT/a /NN/[ i/PRP/i /VBP/] /,/, a/DT/a /NN/[ i/PRP/i /,/, j/VBP/j /:/] /./. it/PRP/it should/MD/should be/VB/be clear/JJ/clear in/IN/in what/WP/what it/PRP/it is/VBZ/is doing/NNP/doing. i/PRP/i will/MD/will use/VB/use return/NN/return when/WRB/when the/DT/the procedure/NN/procedure terminates/VBZ/terminates and/CC/and return/NN/return value/NN/value will/MD/will tell/VB/tell about/IN/about the/DT/the value/NN/value returned/VBD/returned by/IN/by the/DT/the particular/JJ/particular procedure/NN/procedure or/CC/or a/DT/a function/NNP/function. returns/VBZ/returns /:/: return/NN/return value/NN/value when/WRB/when i/PRP/i have/VBP/have to/TO/to call/VB/call a/DT/a method/NN/method /,/, i/PRP/i will/MD/will specify/VB/specify that/IN/that with/IN/with the/DT/the name/NN/name of/IN/of the/DT/the method/NN/method and/CC/and the/DT/the argument/NN/argument and/CC/and the/DT/the object/NN/object used/NNP/used. calls/VBZ/calls /:/: object/NN/object method/NN/method /:/( args/NNS/args /VBP/) object/JJ/object specifies/NNS/specifies the/DT/the type/NN/type of/IN/of the/DT/the value/NN/value returned/VBD/returned by/IN/by the/DT/the particular/JJ/particular method/NNP/method. you/PRP/you will/MD/will see/VB/see more/RBR/more of/IN/of this/DT/this /,/, when/WRB/when we/PRP/we come/VBP/come across/RP/across more/JJR/more pseudo-code/NNP/pseudo-code. how/WRB/how do/VBP/do we/PRP/we analyze/VB/analyze algorithms/NNS/algorithms first/RB/first we/PRP/we identify/RB/identify what/WP/what are/VBP/are the/DT/the primitive/JJ/primitive operations/NNS/operations in/IN/in our/PRP$/our pseudo-code/NNP/pseudo-code. what/WP/what is/VBZ/is a/DT/a primitive/JJ/primitive operation/NN/operation it/PRP/it is/VBZ/is a/DT/a low/JJ/low level/NN/level operation/NNP/operation. example/NN/example is/VBZ/is a/DT/a data/NN/data movement/NN/movement in/IN/in which/WDT/which i/PRP/i do/VBP/do an/DT/an assignment/NN/assignment from/IN/from one/CD/one to/TO/to another/DT/another /,/, i/PRP/i do/VBP/do a/DT/a control/NN/control statement/NN/statement which/WDT/which is/VBZ/is a/DT/a branch/NN/branch /:/( if/IN/if then/RB/then else/RB/else /:/) subroutine/NN/subroutine call/NN/call or/CC/or return/NNP/return. i/PRP/i do/VBP/do arithmetic/JJ/arithmetic operations/NNS/operations or/CC/or logical/JJ/logical operations/NNS/operations and/CC/and these/DT/these are/VBP/are called/VBN/called as/IN/as a/DT/a primitive/JJ/primitive operation/NNP/operation. */-NONE-/* data/NNS/data movement/NN/movement /:/( assign/NN/assign /:/) */-NONE-/* control/NN/control /:/( branch/NN/branch /,/, subroutine/NN/subroutine call/NN/call /,/, return/NN/return /:/) */-NONE-/* arithmetic/JJ/arithmetic an/DT/an logical/JJ/logical operations/NNS/operations /:/( e.g/NNP/e.g. addition/NN/addition /,/, comparison/NN/comparison /:/) in/IN/in my/PRP$/my pseudo/NN/pseudo code/NN/code /,/, i/PRP/i just/RB/just inspect/VBP/inspect the/DT/the pseudo/NN/pseudo code/NN/code and/CC/and count/NN/count the/DT/the number/NN/number of/IN/of primitive/JJ/primitive operations/NNS/operations that/WDT/that are/VBP/are executed/VBN/executed by/IN/by an/DT/an algorithm/NNP/algorithm. let/NN/let us/PRP/us see/VBP/see an/DT/an example/NN/example of/IN/of sorting/NNP/sorting. the/DT/the input/NN/input is/VBZ/is some/DT/some sequence/NN/sequence of/IN/of numbers/NNS/numbers and/CC/and output/VBD/output is/VBZ/is a/DT/a permutation/NN/permutation of/IN/of the/DT/the sequence/NN/sequence which/WDT/which is/VBZ/is in/IN/in non/NN/non decreasing/VBG/decreasing order/NNP/order. what/WP/what are/VBP/are the/DT/the requirements/NNS/requirements for/IN/for the/DT/the output/NN/output it/PRP/it should/MD/should be/VB/be in/IN/in nondecreasing/NN/nondecreasing order/NN/order and/CC/and it/PRP/it should/MD/should be/VB/be the/DT/the permutation/NN/permutation of/IN/of the/DT/the input/NNP/input. any/DT/any set/NN/set of/IN/of numbers/NNS/numbers which/WDT/which are/VBP/are in/IN/in non-decreasing/JJ/non-decreasing order/NN/order does/VBZ/does not/RB/not make/VB/make an/DT/an output/NNP/output. algorithm/NN/algorithm should/MD/should sort/VB/sort the/DT/the numbers/NNS/numbers that/WDT/that were/VBD/were given/VBN/given to/TO/to it/PRP/it and/CC/and not/RB/not just/RB/just produce/VB/produce the/DT/the sequence/NN/sequence of/IN/of numbers/NNS/numbers as/IN/as an/DT/an increasing/VBG/increasing order/NNP/order. clearly/RB/clearly the/DT/the running/VBG/running time/NN/time depends/NNS/depends upon/IN/upon /,/, number/NN/number of/IN/of elements/NNS/elements /:/( n/NN/n /:/) and/CC/and often/RB/often it/PRP/it depends/VBZ/depends upon/IN/upon how/WRB/how sorted/VBN/sorted these/DT/these numbers/NNS/numbers are/NNP/are. if/IN/if they/PRP/they are/VBP/are already/RB/already in/IN/in sorted/VBN/sorted order/NN/order then/RB/then the/DT/the algorithm/NN/algorithm will/MD/will not/RB/not take/VB/take a/DT/a long/JJ/long time/NNP/time. it/PRP/it also/RB/also depends/VBZ/depends upon/IN/upon the/DT/the particular/JJ/particular algorithm/NN/algorithm we/PRP/we use/NNP/use. the/DT/the running/VBG/running time/NN/time would/MD/would depend/VB/depend upon/IN/upon all/DT/all these/DT/these things/NNP/things. the/DT/the first/JJ/first sorting/NN/sorting technique/NN/technique we/PRP/we use/VBP/use is/VBZ/is the/DT/the one/CD/one that/WDT/that you/PRP/you have/VBP/have used/VBN/used very/RB/very often/NNP/often. let/VB/let us/PRP/us say/VB/say when/WRB/when you/PRP/you are/VBP/are playing/VBG/playing game/NN/game of/IN/of cards/NNP/cards. what/WP/what is/VBZ/is the/DT/the strategy/NN/strategy you/PRP/you follow/VBP/follow /,/, when/WRB/when you/PRP/you are/VBP/are picking/VBG/picking up/RP/up a/DT/a set/NN/set of/IN/of cards/NNS/cards that/WDT/that have/VBP/have been/VBN/been dealt/VBN/dealt out/RP/out to/TO/to you/PRP/you you/PRP/you like/VBP/like to/TO/to keep/VB/keep them/PRP/them in/IN/in a/DT/a sorted/VBN/sorted order/NN/order in/IN/in your/PRP$/your hand/NNP/hand. you/PRP/you start/VB/start with/IN/with the/DT/the empty/NN/empty hand/NN/hand and/CC/and you/PRP/you pick/VBP/pick up/RP/up the/DT/the first/JJ/first card/NN/card /,/, then/RB/then you/PRP/you take/VBP/take the/DT/the next/JJ/next card/NN/card and/CC/and insert/NN/insert it/PRP/it at/IN/at the/DT/the appropriate/JJ/appropriate place/NNP/place. suppose/NN/suppose if/IN/if i/PRP/i have/VBP/have some/DT/some five/CD/five cards/NNS/cards in/IN/in your/PRP$/your hand/NN/hand already/RB/already /,/, let/VB/let us/PRP/us say/VB/say 2/CD/2 /,/, 7/CD/7 /,/, 9/CD/9 /,/, jack/NN/jack and/CC/and queen/NNP/queen. then/RB/then i/PRP/i am/VBP/am getting/VBG/getting 8/CD/8 /,/, so/RB/so i/PRP/i am/VBP/am going/VBG/going to/TO/to put/VB/put it/PRP/it between/IN/between 7/CD/7 and/CC/and 9/CD/9. that/WDT/that is/VBZ/is the/DT/the right/NN/right place/NN/place it/PRP/it has/VBZ/has to/TO/to be/VB/be placed/VBN/placed in/-NONE-/in. i/PRP/i am/VBP/am inserting/VBG/inserting it/PRP/it at/IN/at the/DT/the appropriate/JJ/appropriate place/NN/place and/CC/and that/IN/that is/VBZ/is why/WRB/why this/DT/this technique/NN/technique is/VBZ/is called/VBN/called insertion/NN/insertion sort/NNP/sort. i/PRP/i keep/VBP/keep on/IN/on doing/VBG/doing this/DT/this /,/, till/IN/till i/PRP/i have/VBP/have picked/VBN/picked up/RP/up all/DT/all the/DT/the cards/NNS/cards and/CC/and inserted/VBD/inserted in/IN/in the/DT/the appropriate/NN/appropriate place/NNP/place. let/NN/let us/PRP/us see/VBP/see the/DT/the pseudo-code/JJ/pseudo-code for/IN/for insertion/NN/insertion sort/NNP/sort. i/PRP/i will/MD/will give/VB/give an/DT/an array/NN/array of/IN/of integers/NNS/integers as/IN/as input/NN/input and/CC/and output/NN/output is/VBZ/is a/DT/a permutation/NN/permutation of/IN/of the/DT/the original/JJ/original numbers/NNS/numbers /,/, such/JJ/such that/IN/that it/PRP/it is/VBZ/is sorted/NNP/sorted. the/DT/the output/NN/output is/VBZ/is also/RB/also going/VBG/going to/TO/to be/VB/be in/IN/in the/DT/the same/JJ/same array/NNP/array. a/DT/a /NN/[ 1/CD/1 /CD/] a/DT/a /NN/[ 2/CD/2 /CD/] _/NNP/_ a/DT/a /NN/[ n/NN/n /:/] this/DT/this is/VBZ/is the/DT/the input/NN/input /,/, output/NN/output specification/NNP/specification. i/PRP/i am/VBP/am going/VBG/going to/TO/to have/VB/have 2/CD/2 variables/NNS/variables or/CC/or indices/NNS/indices i/PRP/i and/CC/and j/NNP/j. the/DT/the array/NN/array is/VBZ/is going/VBG/going to/TO/to be/VB/be sorted/VBN/sorted from/IN/from a/DT/a /CD/[ 1/CD/1 /CD/] through/IN/through a/DT/a /NN/[ j-1/-NONE-/j-1 /./] /./. the/DT/the element/NN/element should/MD/should be/VB/be inserted/VBN/inserted at/IN/at the/DT/the th/NN/th j/NN/j location/NN/location /,/, which/WDT/which is/VBZ/is the/DT/the right/NN/right place/NN/place to/TO/to insert/NNP/insert. clearly/RB/clearly j/VB/j has/VBZ/has to/TO/to vary/VB/vary from/IN/from 2-n/CD/2-n. for/IN/for j/NN/j 2/CD/2 to/TO/to n/VB/n do/VBP/do i/PRP/i am/VBP/am going/VBG/going to/TO/to look/VB/look at/IN/at th/NN/th j/NN/j element/NN/element and/CC/and i/PRP/i put/VBD/put that/IN/that in/IN/in key/NNP/key. key/NN/key a/DT/a /NN/[ j/NN/j /:/] i/PRP/i have/VBP/have to/TO/to insert/VB/insert a/DT/a /NN/[ j/NN/j /:/] or/CC/or the/DT/the key/JJ/key in/IN/in to/TO/to the/DT/the sorted/VBN/sorted sequence/NN/sequence which/WDT/which is/VBZ/is a/DT/a /NN/[ 1/CD/1 /CD/] through/IN/through a/DT/a /NN/[ j-1/-NONE-/j-1 /./] /./. i.e/NNP/i.e. a/DT/a /NN/[ 1_j-1/CD/1_j-1 /CD/] i/PRP/i am/VBP/am going/VBG/going to/TO/to use/VB/use the/DT/the index/NN/index i/PRP/i to/TO/to do/VB/do this/NNP/this. what/WP/what is/VBZ/is index/NN/index i/PRP/i going/VBG/going to/TO/to do/VB/do index/NN/index i/PRP/i is/VBZ/is going/VBG/going to/TO/to run/VB/run down/RP/down from/IN/from j-1/-NONE-/j-1 down/IN/down to/TO/to 1/CD/1. we/PRP/we have/VBP/have to/TO/to decrease/VB/decrease index/NN/index i/PRP/i /,/, which/WDT/which we/PRP/we are/VBP/are doing/VBG/doing in/IN/in the/DT/the while/NN/while do/VBP/do loop/NNP/loop. it/PRP/it starts/VBZ/starts with/IN/with the/DT/the value/NN/value j-1/NNP/j-1. i/PRP/i have/VBP/have to/TO/to insert/VB/insert 7/CD/7 and/CC/and i/PRP/i am/VBP/am going/VBG/going to/TO/to move/VB/move 9/CD/9 to/TO/to 7th/CD/7th location/NN/location /,/, because/IN/because 9/CD/9 is/VBZ/is greater/JJR/greater than/IN/than 7/CD/7. then/RB/then i/PRP/i compare/VBP/compare 7/CD/7 with/IN/with 8/CD/8 and/CC/and 8/CD/8 is/VBZ/is still/RB/still greater/JJR/greater than/IN/than 7/CD/7 /,/, so/RB/so i/PRP/i will/MD/will move/VB/move it/PRP/it right/NNP/right. then/RB/then i/PRP/i compare/VBP/compare 7/CD/7 with/IN/with 6/CD/6. as/IN/as 6/CD/6 is/VBZ/is smaller/JJR/smaller than/IN/than 7/CD/7 /,/, i/PRP/i would/MD/would put/VB/put 7/CD/7 in/IN/in the/DT/the appropriate/NN/appropriate place/NNP/place. i/PRP/i run/VBP/run through/IN/through this/DT/this loop/NN/loop /,/, till/NN/till i/PRP/i find/VBP/find an/DT/an element/NN/element which/WDT/which is/VBZ/is less/RBR/less than/IN/than a/DT/a key/NNP/key. key/NN/key is/VBZ/is the/DT/the element/NN/element which/WDT/which i/PRP/i am/VBP/am trying/VBG/trying to/TO/to insert/NNP/insert. this/DT/this loop/NN/loop will/MD/will continue/VB/continue while/IN/while the/DT/the element/NN/element /,/, which/WDT/which i/PRP/i consider/VBP/consider is/VBZ/is more/RBR/more than/IN/than key/JJ/key and/CC/and this/DT/this loop/NN/loop will/MD/will terminate/VB/terminate /,/, when/WRB/when i/PRP/i see/VBP/see an/DT/an element/NN/element which/WDT/which is/VBZ/is less/RBR/less than/IN/than key/JJ/key or/CC/or the/DT/the loop/NN/loop will/MD/will terminate/VB/terminate when/WRB/when i/PRP/i reach/VBP/reach i/PRP/i =/VBP/= 0/CD/0. while/IN/while i/PRP/i >/VBP/> 0/-NONE-/0 and/CC/and a/DT/a /NN/[ i/PRP/i /VBP/] >/:/> key/JJ/key do/VBP/do a/DT/a /NN/[ i/PRP/i +/VBP/+ 1/CD/1 /CD/] a/DT/a /NN/[ i/PRP/i /VBP/] that/IN/that means/NNS/means i/PRP/i have/VBP/have moved/VBN/moved everything/VBG/everything to/TO/to the/DT/the right/NN/right and/CC/and i/PRP/i should/MD/should insert/VB/insert the/DT/the element/NN/element at/IN/at the/DT/the very/RB/very first/JJ/first place/NN/place and/CC/and i/PRP/i am/VBP/am just/RB/just shifting/VBG/shifting the/DT/the element/NN/element one/CD/one step/NN/step to/TO/to the/DT/the right/NNP/right. do/VBP/do a/DT/a /NN/[ i/PRP/i +/VBP/+ 1/CD/1 /CD/] a/DT/a /NN/[ i/PRP/i /VBP/] note/JJ/note that/IN/that i/PRP/i have/VBP/have to/TO/to insert/VB/insert 7/CD/7 at/IN/at the/DT/the right/NN/right place/NN/place /,/, so/RB/so i/PRP/i shift/VBP/shift 9/CD/9 right/NN/right to/TO/to 1/CD/1 step/NNP/step. 9th/CD/9th location/NN/location becomes/VBZ/becomes empty/JJ/empty /,/, then/RB/then i/PRP/i shift/VBP/shift 8/CD/8 to/TO/to 1/CD/1 step/VB/step /,/, so/RB/so this/DT/this 8th/JJ/8th location/NN/location becomes/VBZ/becomes empty/JJ/empty and/CC/and now/RB/now i/PRP/i put/VBD/put 7/CD/7 there/NNP/there. i/PRP/i +/VBP/+ 1/CD/1 is/VBZ/is the/DT/the index/NN/index /,/, which/WDT/which would/MD/would be/VB/be the/DT/the empty/NN/empty location/NN/location eventually/RB/eventually and/CC/and i/PRP/i put/VBD/put the/DT/the key/JJ/key there/NNP/there. a/DT/a /NN/[ i/PRP/i +/VBP/+ 1/CD/1 /CD/] key/JJ/key all/DT/all of/IN/of you/PRP/you can/MD/can implement/VB/implement it/NNP/it. may/MD/may be/VB/be you/PRP/you would/MD/would have/VB/have implemented/VBN/implemented it/PRP/it in/IN/in a/DT/a slightly/RB/slightly different/JJ/different way/NN/way /,/, that/IN/that would/MD/would give/VB/give you/PRP/you a/DT/a different/JJ/different program/NN/program /,/, but/CC/but the/DT/the algorithm/NN/algorithm is/VBZ/is essentially/RB/essentially the/DT/the same/NNP/same. you/PRP/you are/VBP/are going/VBG/going to/TO/to find/VB/find the/DT/the right/NN/right place/NN/place for/IN/for the/DT/the element/NN/element and/CC/and insert/NN/insert it/NNP/it. let/NN/let us/PRP/us analyze/VBP/analyze this/DT/this algorithm/NNP/algorithm. i/PRP/i have/VBP/have put/VBN/put down/RP/down the/DT/the algorithm/NN/algorithm on/IN/on the/DT/the left/NNP/left. there/RB/there is/VBZ/is a/DT/a small/JJ/small mistake/NN/mistake in/IN/in the/DT/the last/JJ/last line/NN/line of/IN/of the/DT/the slide/NN/slide /,/, where/WRB/where there/EX/there should/MD/should be/VB/be a/DT/a left/NN/left arrow/NNP/arrow. please/NN/please make/VB/make a/DT/a correction/NN/correction on/IN/on that/NNP/that. a/DT/a /NN/[ i/PRP/i +/VBP/+ 1/CD/1 /CD/] a/DT/a key/JJ/key let/NN/let us/PRP/us count/NNP/count. key/JJ/key a/DT/a /NN/[ j/NN/j /:/] i/PRP/i j-1/-NONE-/j-1 these/DT/these are/VBP/are all/DT/all my/PRP$/my primitive/JJ/primitive operations/NNP/operations. i/PRP/i am/VBP/am comparing/VBG/comparing i/PRP/i with/IN/with 0/-NONE-/0 and/CC/and i/PRP/i am/VBP/am comparing/VBG/comparing a/DT/a /NN/[ i/PRP/i /VBP/] with/IN/with key/JJ/key /,/, also/RB/also i/PRP/i take/VBP/take and/CC/and /,/, so/RB/so there/RB/there are/VBP/are three/CD/three primitive/JJ/primitive operations/NNP/operations. while/IN/while i/PRP/i >/VBP/> 0/-NONE-/0 and/CC/and a/DT/a /NN/[ i/PRP/i /VBP/] >/:/> key/JJ/key each/DT/each of/IN/of the/DT/the operation/NN/operation takes/VBZ/takes a/DT/a certain/JJ/certain amount/NN/amount of/IN/of time/NN/time /,/, depending/VBG/depending upon/IN/upon the/DT/the computer/NN/computer system/NN/system you/PRP/you have/NNP/have. c1/NNP/c1 ,c2/NNP/,c2 ,c3/NNP/,c3 ,c4/NNP/,c4 ,c5/NNP/,c5 ,c6/NNP/,c6 just/RB/just represent/VBP/represent the/DT/the amount/NN/amount of/IN/of time/NN/time taken/VBN/taken for/IN/for these/DT/these operations/NNS/operations and/CC/and they/PRP/they can/MD/can be/VB/be in/IN/in any/DT/any units/NNP/units. i/PRP/i am/VBP/am counting/VBG/counting the/DT/the number/NN/number of/IN/of times/NNS/times /,/, each/DT/each of/IN/of these/DT/these operations/NNS/operations is/VBZ/is executed/VBN/executed in/IN/in this/DT/this entire/JJ/entire program/NNP/program. why/WRB/why this/DT/this operation/NN/operation is/VBZ/is done/VBN/done n/NN/n times/NNS/times i/PRP/i start/VBP/start by/IN/by assigning/NN/assigning j/NN/j =/:/= 2/CD/2 then/RB/then assign/JJ/assign 3/CD/3 /,/, 4,5,6,7/CD/4,5,6,7 and/CC/and go/VB/go up/RP/up to/TO/to n/NNP/n. then/RB/then when/WRB/when i/PRP/i increment/VBP/increment it/PRP/it once/RB/once and/CC/and check/VB/check that/IN/that there/EX/there is/VBZ/is one/CD/one more/RBR/more /,/, so/RB/so i/PRP/i have/VBP/have counted/VBN/counted it/PRP/it as/IN/as n/NN/n times/NNP/times. there/EX/there might/MD/might be/VB/be small/JJ/small errors/NNS/errors in/IN/in n/NN/n and/CC/and n/NN/n +/:/+ 1/CD/1 /,/, but/CC/but that/IN/that is/VBZ/is not/RB/not very/RB/very important/NNP/important. roughly/RB/roughly n/JJ/n times/NNS/times we/PRP/we need/VBP/need to/TO/to do/VB/do this/DT/this operation.how/JJ/operation.how about/IN/about this/DT/this operation/NN/operation key/NN/key a/DT/a /NN/[ j/NN/j /:/] i/PRP/i am/VBP/am going/VBG/going to/TO/to do/VB/do exactly/RB/exactly n-1/-NONE-/n-1 times/VBZ/times once/RB/once for/IN/for 2/CD/2 /,/, once/RB/once for3/NNP/for3 /,/, once/RB/once for/IN/for 4/CD/4 up/IN/up to/TO/to n/NNP/n. that/IN/that is/VBZ/is why/WRB/why this/DT/this operation/NN/operation is/VBZ/is being/VBG/being done/NN/done up/IN/up to/TO/to n-1/-NONE-/n-1 times/NNP/times. just/RB/just leave/VBP/leave the/DT/the comment/NN/comment statement/NNP/statement. again/RB/again the/DT/the operation/NN/operation will/MD/will be/VB/be done/VBN/done exactly/RB/exactly n-1/-NONE-/n-1 times/NNP/times. we/PRP/we have/VBP/have to/TO/to look/VB/look at/IN/at how/WRB/how many/JJ/many times/NNS/times i/PRP/i come/VBP/come to/TO/to this/DT/this statement/NNP/statement. while/IN/while i/PRP/i >/VBP/> 0/-NONE-/0 and/CC/and a/DT/a /NN/[ i/PRP/i /VBP/] >/:/> key/JJ/key j/NN/j t/NN/t /:/- counts/NNS/counts the/DT/the number/NN/number of/IN/of times/NNS/times i/PRP/i have/VBP/have to/TO/to shift/VB/shift an/DT/an element/NN/element to/TO/to the/DT/the right/NN/right /,/, when/WRB/when i/PRP/i am/VBP/am inserting/VBG/inserting the/DT/the th/NN/th j/NN/j card/NN/card in/IN/in to/TO/to my/PRP$/my hand/NNP/hand. in/IN/in the/DT/the previous/JJ/previous example/NN/example when/WRB/when i/PRP/i am/VBP/am inserting/VBG/inserting 7/CD/7 /,/, i/PRP/i had/VBD/had to/TO/to shift/VB/shift 2/CD/2 elements/NNS/elements 8/CD/8 and/CC/and 9/CD/9. j/NN/j t/NN/t is/VBZ/is going/VBG/going to/TO/to count/VB/count that/IN/that quantity/NN/quantity and/CC/and that/IN/that is/VBZ/is the/DT/the number/NN/number of/IN/of times/NNS/times i/PRP/i am/VBP/am going/VBG/going to/TO/to reach/VB/reach a/DT/a /NN/[ i/PRP/i /VBP/] part/NN/part of/IN/of my/PRP$/my while/IN/while loop/NNP/loop. while/IN/while i/PRP/i >/VBP/> 0/-NONE-/0 and/CC/and a/DT/a /NN/[ i/PRP/i /VBP/] >/:/> key/JJ/key i/PRP/i will/MD/will be/VB/be checking/VBG/checking this/DT/this condition/NN/condition for/IN/for many/JJ/many times/NNP/times. for/IN/for one/CD/one iteration/NN/iteration or/CC/or for/IN/for the/DT/the th/NN/th j/NN/j iteration/NN/iteration of/IN/of this/DT/this for/IN/for loop/NN/loop /,/, i/PRP/i am/VBP/am going/VBG/going to/TO/to reach/VB/reach this/DT/this condition/NN/condition for/IN/for j/NN/j t/NN/t times/NNP/times. the/DT/the total/JJ/total number/NN/number of/IN/of times/NNS/times i/PRP/i am/VBP/am saying/VBG/saying that/IN/that condition/NN/condition is/VBZ/is the/DT/the sum/NN/sum of/IN/of j/NN/j t/NN/t as/IN/as j/NN/j goes/VBZ/goes from/IN/from 2/CD/2 to/TO/to n/NNP/n. 2/CD/2 n/NN/n j/NN/j j/NN/j t/NN/t while/IN/while i/PRP/i >/VBP/> 0/-NONE-/0 and/CC/and a/DT/a /NN/[ i/PRP/i /VBP/] >/:/> key/JJ/key do/VBP/do a/DT/a /NN/[ i/PRP/i +/VBP/+ 1/CD/1 /CD/] a/DT/a /NN/[ i/PRP/i /VBP/] every/DT/every time/NN/time i/PRP/i see/VBP/see /:/( a/DT/a /NN/[ i/PRP/i /VBP/] >/:/> key/JJ/key /NN/) condition/NN/condition i/PRP/i also/RB/also come/VBP/come to/TO/to a/DT/a /NN/[ i/PRP/i /VBP/] /,/, because/IN/because the/DT/the last/JJ/last time/NN/time i/PRP/i see/VBP/see the/DT/the statement/NN/statement i/PRP/i would/MD/would exit/VB/exit out/RP/out of/IN/of this/DT/this condition/NNP/condition. that/IN/that is/VBZ/is why/WRB/why this/DT/this is/VBZ/is j/NN/j t/NN/t -1/-NONE-/-1 where/WRB/where j/NN/j going/VBG/going from/IN/from 2/CD/2 to/TO/to n/NNP/n. 1/CD/1 2/CD/2 /CD/( /CD/) n/NN/n j/NN/j j/NN/j t/NN/t a/DT/a /NN/[ i/PRP/i +/VBP/+ 1/CD/1 /CD/] a/DT/a key/NNP/key. this/DT/this statement/NN/statement here/RB/here is/VBZ/is not/RB/not a/DT/a part/NN/part of/IN/of the/DT/the while/NN/while loop/NN/loop rather/RB/rather it/PRP/it is/VBZ/is a/DT/a part/NN/part of/IN/of the/DT/the for/IN/for loop/NN/loop as/IN/as it/PRP/it is/VBZ/is done/VBN/done exactly/RB/exactly n-1/-NONE-/n-1 times/VBZ/times as/IN/as the/DT/the other/JJ/other statement/NNP/statement. if/IN/if you/PRP/you knew/VBD/knew about/IN/about the/DT/the constants/NNS/constants then/RB/then the/DT/the total/NN/total time/NN/time taken/VBN/taken by/IN/by the/DT/the procedure/NN/procedure can/MD/can be/VB/be computed/NNP/computed. you/PRP/you do/VBP/do not/RB/not know/VB/know what/WP/what j/NN/j t/VBD/t is/NNP/is. j/NN/j t/NN/t is/VBZ/is quantity/NN/quantity which/WDT/which depends/NNS/depends upon/IN/upon your/PRP$/your instance/NN/instance and/CC/and not/RB/not problem/NNP/problem. problem/NN/problem is/VBZ/is in/IN/in the/DT/the sorting/NNP/sorting. the/DT/the instance/NN/instance is/VBZ/is a/DT/a set/NN/set or/CC/or a/DT/a sequence/NN/sequence of/IN/of numbers/NNS/numbers that/WDT/that have/VBP/have given/VBN/given to/TO/to you/NNP/you. thus/RB/thus j/VB/j t/NN/t depends/NNS/depends upon/IN/upon the/DT/the instance/NNP/instance. let/NN/let us/PRP/us see/VBP/see the/DT/the difference/NN/difference that/IN/that j/NN/j t/NN/t makes/NNP/makes. if/IN/if the/DT/the input/NN/input was/VBD/was already/RB/already sorted/VBN/sorted /,/, then/RB/then j/VB/j t/NN/t is/VBZ/is always/RB/always 1/CD/1 /CD/( j/NN/j t/NN/t =/:/= 1/CD/1 /CD/) /./. i/PRP/i just/RB/just have/VBP/have to/TO/to compare/VB/compare the/DT/the element/NN/element with/IN/with the/DT/the last/JJ/last element/NN/element and/CC/and if/IN/if it/PRP/it is/VBZ/is larger/JJR/larger than/IN/than the/DT/the last/JJ/last element/NN/element /,/, i/PRP/i would/MD/would not/RB/not have/VB/have to/TO/to do/VB/do anything/NNP/anything. j/VB/j t/NN/t is/VBZ/is always/RB/always a/DT/a 1/CD/1 if/IN/if the/DT/the input/NN/input is/VBZ/is already/RB/already in/IN/in increasing/VBG/increasing order/NNP/order. what/WP/what happens/VBZ/happens when/WRB/when the/DT/the input/NN/input is/VBZ/is in/IN/in decreasing/NN/decreasing order/NN/order if/IN/if the/DT/the input/NN/input is/VBZ/is in/IN/in decreasing/NN/decreasing order/NN/order /,/, then/RB/then the/DT/the number/NN/number that/IN/that i/PRP/i am/VBP/am trying/VBG/trying to/TO/to insert/VB/insert is/VBZ/is going/VBG/going to/TO/to be/VB/be smaller/JJR/smaller than/IN/than all/DT/all the/DT/the numbers/NNS/numbers that/WDT/that i/PRP/i have/VBP/have sorted/VBN/sorted in/IN/in my/PRP$/my array/NNP/array. what/WP/what am/NN/am i/PRP/i going/VBG/going to/TO/to do/VB/do i/PRP/i am/VB/am going/VBG/going to/TO/to compare/VB/compare with/IN/with the/DT/the 1st/CD/1st element/NN/element /,/, 2nd/CD/2nd element/NN/element /,/, 3rd/JJ/3rd element/NN/element /,/, 4th/JJ/4th element/NN/element and/CC/and all/DT/all the/DT/the way/NN/way up/RP/up to/TO/to the1st/NNP/the1st element/NNP/element. when/WRB/when i/PRP/i am/VBP/am trying/VBG/trying to/TO/to insert/VB/insert the/DT/the th/NN/th j/NN/j element/NN/element /,/, i/PRP/i am/VBP/am going/VBG/going to/TO/to end/VB/end up/RP/up in/IN/in comparing/NN/comparing with/IN/with all/DT/all the/DT/the other/JJ/other j/NN/j elements/NNS/elements in/IN/in the/DT/the array/NNP/array. in/IN/in that/DT/that case/NN/case when/WRB/when j/NN/j t/NN/t is/VBZ/is equal/JJ/equal to/TO/to j/VB/j /,/, note/VB/note that/IN/that the/DT/the quantity/NN/quantity becomes/VBZ/becomes its/PRP$/its summation/NN/summation of/IN/of j/NN/j /,/, where/WRB/where j/NN/j goes/VBZ/goes from/IN/from 2/CD/2 to/TO/to n/NNP/n. it/PRP/it is/VBZ/is of/IN/of the/DT/the kind/NN/kind 2/CD/2 n/NN/n and/CC/and the/DT/the running/NN/running time/NN/time of/IN/of this/DT/this algorithm/NN/algorithm would/MD/would be/VB/be some/DT/some constant/JJ/constant time/NN/time 2/CD/2 n/NN/n plus/CC/plus some/DT/some other/JJ/other constant/NN/constant times/NNS/times n/VBP/n minus/NN/minus some/DT/some other/JJ/other constant/NNP/constant. thus/RB/thus the/DT/the behavior/NN/behavior of/IN/of this/DT/this running/NN/running time/NN/time is/VBZ/is more/RBR/more like/IN/like 2/CD/2 n/NN/n /./. we/PRP/we will/MD/will come/VB/come to/TO/to this/DT/this point/NN/point later/JJ/later /,/, when/WRB/when we/PRP/we talk/VBP/talk about/IN/about asymptotic/JJ/asymptotic analysis/NN/analysis but/CC/but this/DT/this is/VBZ/is what/WP/what i/PRP/i meant/VBP/meant by/IN/by 2/CD/2 f/NN/f /:/( /:/) n/NN/n /./. on/IN/on the/DT/the other/JJ/other hand/NN/hand in/IN/in the/DT/the best/JJS/best case/NN/case when/WRB/when j/NN/j t/NN/t =/:/= 1/CD/1 /,/, the/DT/the sum/NN/sum is/VBZ/is just/RB/just n/VBN/n or/CC/or n-1/-NONE-/n-1 and/CC/and in/IN/in that/DT/that case/NN/case the/DT/the total/NN/total time/NN/time is/VBZ/is n/VBN/n times/NNS/times some/DT/some constant/NN/constant plus/CC/plus n-1/-NONE-/n-1 times/VBZ/times some/DT/some constant/NN/constant minus/NN/minus some/DT/some constant/JJ/constant which/WDT/which is/VBZ/is roughly/RB/roughly n/VBN/n times/NNS/times some/DT/some constant/NNP/constant. hence/NN/hence this/DT/this is/VBZ/is called/VBN/called as/RB/as linear/JJ/linear time/NN/time algorithm/NNP/algorithm. on/IN/on an/DT/an average/JJ/average what/WP/what would/MD/would you/PRP/you expect/VB/expect in/IN/in the/DT/the best/JJS/best case/NN/case you/PRP/you have/VB/have to/TO/to compare/VB/compare only/RB/only against/IN/against one/CD/one element/NN/element and/CC/and in/IN/in the/DT/the worst/JJS/worst case/NN/case you/PRP/you have/VB/have to/TO/to compare/VB/compare about/IN/about j/NN/j elements/NNP/elements. in/IN/in the/DT/the average/NN/average case/NN/case it/PRP/it would/MD/would compare/VB/compare against/IN/against half/DT/half of/IN/of those/DT/those elements/NNP/elements. thus/RB/thus it/PRP/it will/MD/will compare/VB/compare with/IN/with 2/CD/2 j/NN/j /,/, even/RB/even when/WRB/when the/DT/the summation/NN/summation of/IN/of 2/CD/2 j/NN/j where/WRB/where j/NN/j goes/VBZ/goes from/IN/from 2/CD/2 to/TO/to n/VB/n /,/, this/DT/this will/MD/will be/VB/be roughly/RB/roughly by/IN/by 2/CD/2 4/CD/4 n/NN/n and/CC/and it/PRP/it behaves/VBZ/behaves like/IN/like 2/CD/2 n/NN/n /./. this/DT/this is/VBZ/is what/WP/what i/PRP/i mean/VBP/mean by/IN/by the/DT/the best/JJS/best /,/, worst/RB/worst and/CC/and average/JJ/average case/NNP/case. i/PRP/i take/VBP/take the/DT/the size/NN/size of/IN/of input/NN/input /,/, suppose/NN/suppose if/IN/if i/PRP/i am/VBP/am interested/JJ/interested in/IN/in sorting/NN/sorting n/NN/n numbers/NNS/numbers and/CC/and i/PRP/i look/VBP/look at/IN/at all/DT/all possible/JJ/possible instances/NNS/instances of/IN/of these/DT/these n/NN/n numbers/NNP/numbers. it/PRP/it may/MD/may be/VB/be infinitely/RB/infinitely many/JJ/many /,/, again/RB/again it/PRP/it is/VBZ/is not/RB/not clear/JJ/clear about/IN/about how/WRB/how to/TO/to do/VB/do that/NNP/that. what/WP/what is/VBZ/is worst/VBN/worst case/NN/case the/DT/the worst/JJS/worst case/NN/case is/VBZ/is defined/VBN/defined as/RB/as the/DT/the maximum/NN/maximum possible/JJ/possible time/NN/time that/WDT/that your/PRP$/your algorithm/NN/algorithm would/MD/would take/VB/take for/IN/for any/DT/any instance/NN/instance of/IN/of that/DT/that size/NNP/size. in/IN/in the/DT/the slide/NN/slide 27/CD/27 /:/: 08/CD/08 /,/, all/DT/all the/DT/the instances/NNS/instances are/VBP/are of/IN/of the/DT/the same/JJ/same size/NNP/size. the/DT/the best/JJS/best case/NN/case would/MD/would be/VB/be the/DT/the smallest/JJS/smallest time/NN/time that/WDT/that your/PRP$/your algorithm/NN/algorithm takes/VBZ/takes and/CC/and the/DT/the average/JJ/average would/MD/would be/VB/be the/DT/the average/JJ/average of/IN/of all/DT/all infinite/JJ/infinite bars/NNP/bars. that/IN/that was/VBD/was for/IN/for the/DT/the input/NN/input for/IN/for 1size/CD/1size of/IN/of size/NN/size n/NN/n /,/, that/IN/that would/MD/would give/VB/give the/DT/the values/NNS/values /,/, from/IN/from that/DT/that we/PRP/we can/MD/can compute/VB/compute worst/JJ/worst case/NN/case /,/, best/JJS/best case/NN/case and/CC/and the/DT/the average/JJ/average case/NNP/case. if/IN/if i/PRP/i would/MD/would consider/VB/consider inputs/NNS/inputs of/IN/of all/DT/all sizes/NNS/sizes then/RB/then i/PRP/i can/MD/can create/VB/create a/DT/a plot/NN/plot for/IN/for each/DT/each inputs/NNS/inputs size/VBP/size and/CC/and i/PRP/i could/MD/could figure/VB/figure out/RP/out the/DT/the worst/JJS/worst case/NN/case /,/, best/JJS/best case/NN/case and/CC/and an/DT/an average/JJ/average case/NNP/case. then/RB/then i/PRP/i would/MD/would get/VB/get such/JJ/such a/DT/a monotonically/RB/monotonically increasing/VBG/increasing plots/NNP/plots. it/PRP/it is/VBZ/is clear/JJ/clear that/IN/that as/IN/as the/DT/the size/NN/size of/IN/of the/DT/the input/NN/input increases/NNS/increases /,/, the/DT/the time/NN/time taken/VBN/taken by/IN/by your/PRP$/your algorithm/NN/algorithm will/MD/will increase/NNP/increase. thus/RB/thus when/WRB/when the/DT/the input/NN/input size/NN/size becomes/VBZ/becomes larger/JJR/larger /,/, it/PRP/it will/MD/will not/RB/not take/VB/take lesser/NN/lesser time/NNP/time. which/WDT/which of/IN/of this/DT/this is/VBZ/is the/DT/the easiest/JJS/easiest to/TO/to work/VB/work with/IN/with worst/JJS/worst case/NN/case is/VBZ/is the/DT/the one/CD/one we/PRP/we will/MD/will use/VB/use the/DT/the most/NNP/most. for/IN/for the/DT/the purpose/NN/purpose of/IN/of this/DT/this course/NN/course this/DT/this is/VBZ/is the/DT/the only/JJ/only measure/NN/measure we/PRP/we will/MD/will be/VB/be working/VBG/working with/NNP/with. why/WRB/why is/VBZ/is the/DT/the worst/JJS/worst case/NN/case used/VBD/used often/RB/often first/JJ/first it/PRP/it provides/VBZ/provides an/DT/an upper/JJ/upper bound/NN/bound and/CC/and it/PRP/it tells/VBZ/tells you/PRP/you how/WRB/how long/JJ/long your/PRP$/your algorithm/NN/algorithm is/VBZ/is going/VBG/going to/TO/to take/VB/take in/IN/in the/DT/the worst/JJS/worst case/NNP/case. for/IN/for some/DT/some algorithms/NNS/algorithms worst/VBP/worst case/NN/case occurs/NNS/occurs fairly/RB/fairly often/NNP/often. for/IN/for many/JJ/many instances/NNS/instances the/DT/the time/NN/time taken/VBN/taken by/IN/by the/DT/the algorithm/NN/algorithm is/VBZ/is close/JJ/close to/TO/to the/DT/the worst/JJS/worst case/NNP/case. average/NN/average case/NN/case essentially/RB/essentially becomes/VBZ/becomes as/IN/as bad/JJ/bad as/IN/as the/DT/the worst/JJS/worst case/NNP/case. in/IN/in the/DT/the previous/JJ/previous example/NN/example that/WDT/that we/PRP/we saw/VBD/saw /,/, the/DT/the average/JJ/average case/NN/case and/CC/and the/DT/the worst/JJS/worst case/NN/case were/VBD/were 2/CD/2 n/NN/n /./. there/EX/there were/VBD/were differences/NNS/differences in/IN/in the/DT/the constant/NN/constant but/CC/but it/PRP/it was/VBD/was roughly/RB/roughly the/DT/the same/NNP/same. the/DT/the average/JJ/average case/NN/case might/MD/might be/VB/be very/RB/very difficult/JJ/difficult to/TO/to compute/VB/compute /,/, because/IN/because you/PRP/you should/MD/should look/VB/look at/IN/at all/DT/all possible/JJ/possible instances/NNS/instances and/CC/and then/RB/then take/VB/take some/DT/some kind/NN/kind of/IN/of an/DT/an average/NNP/average. or/CC/or you/PRP/you have/VBP/have to/TO/to say/VB/say like/IN/like /,/, when/WRB/when my/PRP$/my input/NN/input instance/NN/instance is/VBZ/is drawn/VBN/drawn from/IN/from a/DT/a certain/JJ/certain distribution/NN/distribution and/CC/and the/DT/the expected/VBN/expected time/NN/time my/PRP$/my algorithm/NN/algorithm will/MD/will take/VB/take is/VBZ/is typically/RB/typically a/DT/a much/RB/much harder/JJR/harder quantity/NN/quantity to/TO/to work/VB/work and/CC/and to/TO/to compute/VB/compute with/NNP/with. the/DT/the worst/JJS/worst case/NN/case is/VBZ/is the/DT/the measure/NN/measure of/IN/of interest/NN/interest in/IN/in which/WDT/which we/PRP/we will/MD/will be/VB/be working/VBG/working with/NNP/with. asymptotic/JJ/asymptotic analysis/NN/analysis is/VBZ/is the/DT/the kind/NN/kind of/IN/of thing/NN/thing that/WDT/that we/PRP/we have/VBP/have been/VBN/been doing/VBG/doing so/RB/so far/RB/far as/IN/as n/NN/n and/CC/and 2/CD/2 n/NN/n and/CC/and the/DT/the goal/NN/goal of/IN/of this/DT/this is/VBZ/is to/TO/to analyze/VB/analyze the/DT/the running/NN/running time/NN/time while/IN/while getting/VBG/getting rid/NN/rid of/IN/of superficial/JJ/superficial details/NNP/details. we/PRP/we would/MD/would like/VB/like to/TO/to say/VB/say that/IN/that an/DT/an algorithm/NN/algorithm /,/, which/WDT/which has/VBZ/has the/DT/the running/VBG/running time/NN/time of/IN/of some/DT/some constant/JJ/constant times/NNS/times 2/CD/2 n/NN/n squared/VBD/squared is/VBZ/is the/DT/the same/JJ/same as/IN/as an/DT/an algorithm/NN/algorithm which/WDT/which has/VBZ/has a/DT/a running/NN/running time/NN/time of/IN/of some/DT/some other/JJ/other constant/NN/constant times/NNS/times 2/CD/2 n/NN/n ,because/NN/,because this/DT/this constant/NN/constant is/VBZ/is typically/RB/typically something/NN/something which/WDT/which would/MD/would be/VB/be dependent/JJ/dependent upon/IN/upon the/DT/the hardware/NN/hardware that/IN/that your/PRP$/your using/NNP/using. 2/CD/2 3n/CD/3n =/CD/= 2/CD/2 n/NN/n in/IN/in the/DT/the previous/JJ/previous example/NN/example 1/CD/1 c/NN/c /,/, 2/CD/2 c/NN/c and/CC/and 3/CD/3 c/NN/c would/MD/would depend/VB/depend upon/IN/upon the/DT/the computer/NN/computer system/NN/system /,/, the/DT/the hardware/NN/hardware /,/, the/DT/the compiler/NN/compiler and/CC/and many/JJ/many factors/NNP/factors. we/PRP/we are/VBP/are not/RB/not interested/JJ/interested to/TO/to distinguish/VB/distinguish between/IN/between such/JJ/such algorithms/NNP/algorithms. both/DT/both of/IN/of these/DT/these algorithms/NNS/algorithms /,/, one/CD/one which/WDT/which has/VBZ/has the/DT/the running/VBG/running time/NN/time of/IN/of 2/CD/2 3n/CD/3n and/CC/and another/DT/another with/IN/with running/VBG/running time/NN/time 2/CD/2 n/NN/n have/VBP/have a/DT/a quadratic/JJ/quadratic behavior/NNP/behavior. when/WRB/when the/DT/the input/NN/input size/NN/size doubles/NNS/doubles the/DT/the running/VBG/running time/NN/time of/IN/of both/DT/both of/IN/of the/DT/the algorithm/NN/algorithm increases/NNS/increases four/CD/four fold/NNP/fold. that/WDT/that is/VBZ/is the/DT/the thing/NN/thing which/WDT/which is/VBZ/is of/IN/of interest/NN/interest to/TO/to us/NNP/us. we/PRP/we are/VBP/are interested/JJ/interested in/IN/in capturing/NN/capturing how/WRB/how the/DT/the running/VBG/running time/NN/time of/IN/of algorithm/NN/algorithm increases/NNS/increases /,/, with/IN/with the/DT/the size/NN/size of/IN/of the/DT/the input/NN/input in/IN/in the/DT/the limit/NNP/limit. this/DT/this is/VBZ/is the/DT/the crucial/JJ/crucial point/NN/point here/RB/here and/CC/and the/DT/the asymptotic/JJ/asymptotic analysis/NN/analysis clearly/RB/clearly explains/VBZ/explains about/IN/about how/WRB/how the/DT/the running/VBG/running time/NN/time of/IN/of this/DT/this algorithm/NN/algorithm increases/VBZ/increases with/IN/with increase/NN/increase in/IN/in input/NN/input size/NN/size within/IN/within the/DT/the limit/NNP/limit. let/NN/let us/PRP/us see/VBP/see about/IN/about the/DT/the big-oh/JJ/big-oh o-notation/NNP/o-notation. if/IN/if i/PRP/i have/VBP/have functions/NNS/functions f/IN/f /CD/( /CD/) n/NN/n /,/, g/NN/g /:/( n/NN/n /:/) and/CC/and n/NN/n represents/NNS/represents the/DT/the input/NN/input size/NNP/size. f/NN/f /:/( n/NN/n /:/) measures/NNS/measures the/DT/the time/NN/time taken/VBN/taken by/IN/by that/DT/that algorithm/NNP/algorithm. f/NN/f /:/( n/NN/n /:/) and/CC/and g/NN/g /:/( n/NN/n /:/) are/VBP/are nonnegative/JJ/nonnegative functions/NNS/functions and/CC/and also/RB/also non-decreasing/JJ/non-decreasing /,/, because/IN/because as/IN/as the/DT/the input/NN/input size/NN/size increases/NNS/increases /,/, the/DT/the running/NN/running time/NN/time taken/VBN/taken by/IN/by the/DT/the algorithm/NN/algorithm would/MD/would also/RB/also increase/NNP/increase. both/DT/both of/IN/of these/DT/these are/VBP/are nondecreasing/VBG/nondecreasing functions/NNS/functions of/IN/of n/NN/n and/CC/and we/PRP/we say/VBP/say that/IN/that f/NN/f /:/( n/NN/n /:/) is/VBZ/is o/RB/o /:/( g/NN/g /:/( n/NN/n /:/) /:/) /,/, if/IN/if there/EX/there exist/VBP/exist constants/NNS/constants c/NN/c and/CC/and 0/-NONE-/0 n/NN/n /,/, such/JJ/such that/IN/that f/NN/f /:/( n/NN/n /:/) c/NN/c times/NNS/times of/IN/of g/NN/g /:/( n/NN/n /:/) 0/-NONE-/0 n/NN/n /./. f/NN/f /:/( n/NN/n /:/) =/:/= o/NN/o /:/( g/NN/g /:/( n/NN/n /:/) f/NN/f /:/( n/NN/n /:/) c/NN/c g/NN/g /:/( n/NN/n /:/) for/IN/for n/NN/n 0/-NONE-/0 n/NN/n what/WP/what does/VBZ/does it/PRP/it mean/VB/mean i/PRP/i have/VBP/have drawn/VBN/drawn two/CD/two functions/NNP/functions. the/DT/the function/NN/function in/IN/in red/JJ/red is/VBZ/is f/NN/f /:/( n/NN/n /:/) and/CC/and g/NN/g /:/( n/NN/n /:/) is/VBZ/is some/DT/some other/JJ/other function/NNP/function. the/DT/the function/NN/function in/IN/in green/JJ/green is/VBZ/is some/DT/some constant/JJ/constant times/NNS/times of/IN/of g/NN/g /:/( n/NN/n /:/) /./. as/IN/as you/PRP/you can/MD/can see/VB/see beyond/IN/beyond the/DT/the point/NN/point 0/-NONE-/0 n/NN/n /,/, c/NN/c /:/( g/NN/g /:/( n/NN/n /:/) /:/) is/VBZ/is always/RB/always larger/JJR/larger than/IN/than that/DT/that of/IN/of f/NN/f /:/( n/NN/n /:/) /./. this/DT/this is/VBZ/is the/DT/the way/NN/way it/PRP/it continues/VBZ/continues even/RB/even beyond/NNP/beyond. then/RB/then we/PRP/we would/MD/would say/VB/say that/IN/that f/NN/f /:/( n/NN/n /:/) is/VBZ/is o/RB/o /:/( g/NN/g /:/( n/NN/n /:/) or/CC/or f/NN/f /:/( n/NN/n /:/) is/VBZ/is order/NN/order /:/( g/NN/g /:/( n/NN/n /:/) /:/) /./. f/NN/f /:/( n/NN/n /:/) =/:/= o/NN/o /:/( g/NN/g /:/( n/NN/n /:/) /:/) few/JJ/few examples/NNS/examples would/MD/would clarify/VB/clarify this/DT/this and/CC/and we/PRP/we will/MD/will see/VB/see those/DT/those examples/NNP/examples. the/DT/the function/NN/function f/NN/f /:/( n/NN/n /:/) =/:/= 2n/CD/2n +/CD/+ 6/CD/6 and/CC/and g/NN/g /:/( n/NN/n /:/) =/:/= n/NNP/n. if/IN/if you/PRP/you look/VBP/look at/IN/at these/DT/these two/CD/two functions/NNS/functions 2n/CD/2n +/CD/+ 6/CD/6 is/VBZ/is always/RB/always larger/JJR/larger than/IN/than n/NN/n and/CC/and you/PRP/you might/MD/might be/VB/be wondering/VBG/wondering why/WRB/why this/DT/this 2n/JJ/2n +/NN/+ 6/CD/6 is/VBZ/is a/DT/a non-linear/JJ/non-linear function/NNP/function. that/IN/that is/VBZ/is because/IN/because the/DT/the scale/NN/scale here/RB/here is/VBZ/is an/DT/an exponential/JJ/exponential scale/NNP/scale. the/DT/the scale/NN/scale increases/NNS/increases by/IN/by 2/CD/2 on/IN/on y-axis/NNP/y-axis and/CC/and similarly/RB/similarly on/IN/on x-axis/NNP/x-axis. the/DT/the red/NN/red colored/VBD/colored line/NN/line is/VBZ/is n/VBN/n and/CC/and the/DT/the blue/JJ/blue line/NN/line is/VBZ/is 2n/CD/2n and/CC/and the/DT/the above/NN/above next/IN/next line/NN/line is/VBZ/is 4n/CD/4n. as/IN/as you/PRP/you can/MD/can see/VB/see beyond/IN/beyond the/DT/the dotted/VBN/dotted line/NN/line f/NN/f /:/( n/NN/n /:/) is/VBZ/is less/JJR/less than/IN/than 4/CD/4 times/NNS/times of/IN/of n/NNP/n. hence/NN/hence the/DT/the constant/NN/constant c/NN/c is/VBZ/is 4/CD/4 and/CC/and 0/-NONE-/0 n/NN/n would/MD/would be/VB/be this/DT/this point/NN/point of/IN/of crossing/VBG/crossing beyond/IN/beyond which/WDT/which 4n/CD/4n becomes/VBZ/becomes larger/JJR/larger than/IN/than 2n/CD/2n +/CD/+ 6/CD/6. at/IN/at what/WP/what point/NN/point does/VBZ/does 4n/CD/4n becomes/NNS/becomes larger/JJR/larger than/IN/than 2n/CD/2n +/CD/+ 6/CD/6. it/PRP/it is/VBZ/is three/NNP/three. so/RB/so 0/-NONE-/0 n/NN/n becomes/VBZ/becomes three/NNP/three. then/RB/then we/PRP/we say/VBP/say that/IN/that f/NN/f /:/( n/NN/n /:/) which/WDT/which is/VBZ/is 2n/CD/2n +/CD/+ 6/CD/6 is/VBZ/is o/RB/o /:/( n/NN/n /:/) /./. 2n/CD/2n +/CD/+ 6/CD/6 =/CD/= o/NN/o /:/( n/NN/n /:/) let/NN/let us/PRP/us look/VBP/look at/IN/at another/DT/another example/NNP/example. the/DT/the function/NN/function in/IN/in red/JJ/red is/VBZ/is g/JJ/g /NN/( n/NN/n /:/) which/WDT/which is/VBZ/is n/VBN/n and/CC/and any/DT/any constant/NN/constant time/NN/time g/NN/g /:/( n/NN/n /:/) which/WDT/which is/VBZ/is as/RB/as same/JJ/same scale/NN/scale as/IN/as in/IN/in the/DT/the previous/JJ/previous slide/NNP/slide. any/DT/any constant/NN/constant time/NN/time g/NN/g /:/( n/NN/n /:/) will/MD/will be/VB/be just/RB/just the/DT/the same/JJ/same straight/NN/straight line/NN/line displaced/VBD/displaced by/IN/by suitable/JJ/suitable amount/NNP/amount. the/DT/the green/JJ/green line/NN/line will/MD/will be/VB/be 4/CD/4 times/NNS/times n/VBP/n and/CC/and it/PRP/it depends/VBZ/depends upon/IN/upon the/DT/the intercept/NN/intercept /,/, but/CC/but you/PRP/you re/VBP/re 2/CD/2 n/NN/n would/MD/would be/VB/be like/IN/like the/DT/the line/NN/line which/WDT/which is/VBZ/is blue/JJ/blue in/IN/in color/NNP/color. so/RB/so there/RB/there is/VBZ/is no/DT/no constant/NN/constant c/NN/c such/JJ/such that/IN/that 2/CD/2 n/NN/n </:/< c/NN/c /:/( n/NN/n /:/) /./. can/MD/can you/PRP/you find/VB/find out/RP/out a/DT/a constant/JJ/constant c/NN/c so/IN/so that/IN/that 2/CD/2 n/NN/n </:/< c/NN/c /:/( n/NN/n /:/) for/IN/for n/NN/n more/JJR/more than/IN/than 0/-NONE-/0 n/NN/n /./. we/PRP/we can/MD/can not/RB/not find/VB/find it/NNP/it. any/DT/any constant/NN/constant that/IN/that you/PRP/you choose/VBP/choose /,/, i/PRP/i can/MD/can pick/VB/pick a/DT/a larger/JJR/larger n/NN/n such/JJ/such that/IN/that this/DT/this is/VBZ/is violated/VBN/violated and/CC/and so/RB/so it/PRP/it is/VBZ/is not/RB/not the/DT/the case/NN/case that/IN/that 2/CD/2 n/NN/n is/VBZ/is o/RB/o /:/( n/NN/n /:/) /./. how/WRB/how does/VBZ/does one/CD/one figure/NN/figure out/IN/out these/DT/these things/NNS/things this/DT/this is/VBZ/is the/DT/the very/JJ/very simple/NN/simple rule/NNP/rule. suppose/NN/suppose this/DT/this is/VBZ/is my/PRP$/my function/NN/function 50/CD/50 n/NN/n log/NN/log n/NN/n /,/, i/PRP/i just/RB/just drop/NN/drop all/DT/all constants/NNS/constants and/CC/and the/DT/the lower/JJR/lower order/NN/order terms/NNP/terms. forget/NN/forget the/DT/the constant/NN/constant 50/CD/50 and/CC/and i/PRP/i get/VBP/get n/RB/n log/JJ/log n/NNP/n. this/DT/this function/NN/function 50/CD/50 n/NN/n log/NN/log n/NN/n is/VBZ/is o/RB/o /:/( n/NN/n log/NN/log n/NN/n /:/) /./. in/IN/in the/DT/the function/NN/function 7n-3/CD/7n-3 /,/, i/PRP/i drop/VBP/drop the/DT/the constant/JJ/constant and/CC/and lower/JJR/lower order/NN/order terms/NNS/terms /,/, i/PRP/i get/VBP/get 7n-3/CD/7n-3 as/IN/as o/NN/o /:/( n/NN/n /:/) /./. i/PRP/i have/VBP/have some/DT/some complicated/JJ/complicated function/NN/function like/IN/like 8/CD/8 2/CD/2 n/NN/n log/NN/log n/NN/n +/:/+ 5/CD/5 2/CD/2 n/NN/n +/:/+ n/NN/n in/IN/in which/WDT/which i/PRP/i just/RB/just drop/NN/drop all/DT/all lower/JJR/lower order/NN/order terms/NNP/terms. this/DT/this is/VBZ/is the/DT/the fastest/JJS/fastest growing/VBG/growing term/NN/term because/IN/because this/DT/this has/VBZ/has 2/CD/2 n/NN/n as/IN/as well/RB/well as/IN/as log/NN/log n/NN/n in/IN/in it/NNP/it. i/PRP/i just/RB/just drop/NN/drop 2/CD/2 n/NN/n /,/, n/NN/n term/NN/term and/CC/and also/RB/also i/PRP/i drop/VBP/drop my/PRP$/my constant/NN/constant and/CC/and get/VB/get 2/CD/2 n/NN/n log/NN/log n/NNP/n. this/DT/this function/NN/function is/VBZ/is o/RB/o /:/( 2/CD/2 n/NN/n log/NN/log n/NN/n /:/) /./. in/IN/in the/DT/the limit/NN/limit this/DT/this quantity/NN/quantity /:/( 8/CD/8 2/CD/2 n/NN/n log/NN/log n/NN/n +/:/+ 5/CD/5 2/CD/2 n/NN/n +/:/+ n/NN/n /:/) will/MD/will be/VB/be less/RBR/less than/IN/than some/DT/some constant/JJ/constant times/NNS/times this/DT/this quantity/NN/quantity /:/( o/NN/o /:/( 2/CD/2 n/NN/n log/NN/log n/NN/n /:/) /:/) /./. you/PRP/you can/MD/can figure/VB/figure out/RP/out what/WP/what should/MD/should be/VB/be the/DT/the value/NN/value of/IN/of c/NN/c and/CC/and 0/-NONE-/0 n/NN/n /,/, for/IN/for that/DT/that to/TO/to happen/NNP/happen. this/DT/this is/VBZ/is a/DT/a common/JJ/common error/NNP/error. the/DT/the function/NN/function 50/CD/50 n/NN/n log/NN/log n/NN/n is/VBZ/is also/RB/also o/RB/o /:/( 5/CD/5 n/NN/n /:/) /./. whether/IN/whether it/PRP/it is/VBZ/is yes/VBZ/yes or/CC/or no/NNP/no. it/PRP/it is/VBZ/is yes/VBZ/yes /,/, because/IN/because this/DT/this quantity/NN/quantity /:/( 50/CD/50 n/NN/n log/NN/log n/NN/n /:/) in/IN/in fact/NN/fact is/VBZ/is 50/CD/50 times/NNS/times 5/CD/5 n/NN/n always/RB/always /,/, for/IN/for all/PDT/all n/NN/n and/CC/and that/IN/that is/VBZ/is just/RB/just a/DT/a constant/JJ/constant so/RB/so this/DT/this is/VBZ/is o/RB/o /:/( 5/CD/5 n/NN/n /:/) /./. but/CC/but when/WRB/when we/PRP/we use/VBP/use the/DT/the o-notation/NN/o-notation we/PRP/we try/VBP/try and/CC/and provide/VB/provide as/IN/as strong/JJ/strong amount/NN/amount as/IN/as possible/JJ/possible instead/NN/instead of/IN/of saying/VBG/saying this/DT/this statement/NN/statement is/VBZ/is true/JJ/true we/PRP/we will/MD/will rather/RB/rather call/VB/call this/DT/this as/IN/as o/NN/o /:/( n/NN/n log/NN/log n/NN/n /:/) /:/) /./. we/PRP/we will/MD/will see/VB/see more/RBR/more of/IN/of this/DT/this in/IN/in subsequent/NN/subsequent slides/NNP/slides. how/WRB/how are/VBP/are we/PRP/we going/VBG/going to/TO/to use/VB/use the/DT/the o-notation/NN/o-notation we/PRP/we are/VBP/are going/VBG/going to/TO/to express/NN/express the/DT/the number/NN/number of/IN/of primitive/JJ/primitive operations/NNS/operations that/WDT/that are/VBP/are executed/VBN/executed during/IN/during run/VBN/run of/IN/of the/DT/the program/NN/program as/IN/as a/DT/a function/NN/function of/IN/of the/DT/the input/NN/input size/NNP/size. we/PRP/we are/VBP/are going/VBG/going to/TO/to use/VB/use o-notation/NN/o-notation for/IN/for that/NNP/that. if/IN/if i/PRP/i have/VBP/have an/DT/an algorithm/NN/algorithm which/WDT/which takes/VBZ/takes the/DT/the number/NN/number of/IN/of primitive/JJ/primitive operations/NNS/operations as/IN/as o/NN/o /:/( n/NN/n /:/) and/CC/and some/DT/some other/JJ/other algorithm/NN/algorithm for/IN/for which/WDT/which the/DT/the number/NN/number of/IN/of primitive/JJ/primitive operations/NNS/operations is/VBZ/is o/IN/o /CD/( 2/CD/2 n/NN/n /:/) /./. then/RB/then clearly/RB/clearly the/DT/the first/JJ/first algorithm/NN/algorithm is/VBZ/is better/RBR/better than/IN/than the/DT/the second/NNP/second. why/WRB/why because/IN/because as/IN/as the/DT/the input/NN/input size/NN/size doubles/NNS/doubles then/RB/then the/DT/the running/NN/running time/NN/time of/IN/of the/DT/the algorithm/NN/algorithm is/VBZ/is also/RB/also going/VBG/going to/TO/to double/JJ/double /,/, while/IN/while the/DT/the running/NN/running time/NN/time of/IN/of o/NN/o /:/( 2/CD/2 n/NN/n /:/) algorithm/NN/algorithm will/MD/will increase/VB/increase four/CD/four fold/NNP/fold. similarly/RB/similarly our/PRP$/our algorithm/NN/algorithm which/WDT/which has/VBZ/has the/DT/the running/VBG/running time/NN/time of/IN/of o/NN/o /:/( log/NN/log n/NN/n /:/) is/VBZ/is better/JJR/better than/IN/than the/DT/the one/CD/one which/WDT/which has/VBZ/has running/VBG/running time/NN/time of/IN/of o/NN/o /:/( n/NN/n /:/) /./. thus/RB/thus we/PRP/we have/VBP/have a/DT/a hierarchy/JJ/hierarchy of/IN/of functions/NNS/functions in/IN/in the/DT/the order/NN/order of/IN/of log/NN/log n/NN/n /,/, n/NN/n /,/, 2/CD/2 n/NN/n /,/, 3/CD/3 n/NN/n /,/, 2n/CD/2n /./. there/RB/there is/VBZ/is a/DT/a word/NN/word of/IN/of caution/NN/caution here/NNP/here. you/PRP/you might/MD/might have/VB/have an/DT/an algorithm/NN/algorithm whose/WP$/whose running/VBG/running time/NN/time is/VBZ/is 1,000,000/CD/1,000,000 n/NN/n /,/, because/IN/because you/PRP/you may/MD/may be/VB/be doing/VBG/doing some/DT/some other/JJ/other operations/NNP/operations. i/PRP/i can/MD/can not/RB/not see/VB/see how/WRB/how you/PRP/you would/MD/would create/VB/create such/JJ/such an/DT/an algorithm/NN/algorithm /,/, but/CC/but you/PRP/you might/MD/might have/VB/have an/DT/an algorithm/NN/algorithm of/IN/of this/DT/this running/NN/running time/NNP/time. 1,000,000n/CD/1,000,000n is/VBZ/is o/RB/o /:/( n/NN/n /:/) /,/, because/IN/because this/DT/this is/VBZ/is some/DT/some constant/JJ/constant time/NN/time n/NN/n and/CC/and you/PRP/you might/MD/might have/VB/have some/DT/some other/JJ/other algorithm/NN/algorithm with/IN/with the/DT/the running/VBG/running time/NN/time of/IN/of 2/CD/2 2/CD/2 n/NN/n /./. hence/NN/hence from/IN/from what/WP/what i/PRP/i said/VBD/said before/IN/before /,/, you/PRP/you would/MD/would say/VB/say that/IN/that 1,000,000/CD/1,000,000 n/NN/n algorithm/NN/algorithm is/VBZ/is better/RBR/better than/IN/than 2/CD/2 2/CD/2 n/NN/n /./. the/DT/the one/CD/one with/IN/with the/DT/the linear/JJ/linear running/NN/running time/NN/time which/WDT/which is/VBZ/is o/RB/o /:/( n/NN/n /:/) running/VBG/running time/NN/time is/VBZ/is better/RBR/better than/IN/than o/NN/o /:/( 2/CD/2 n/NN/n /:/) /./. it/PRP/it is/VBZ/is true/JJ/true but/CC/but in/IN/in the/DT/the limit/NN/limit and/CC/and the/DT/the limit/NN/limit is/VBZ/is achieved/VBN/achieved very/RB/very late/JJ/late when/WRB/when n/NN/n is/VBZ/is really/RB/really large/NNP/large. for/IN/for small/JJ/small instances/NNS/instances this/DT/this 2/CD/2 2/CD/2 n/NN/n might/MD/might actually/RB/actually take/VB/take less/JJR/less amount/NN/amount of/IN/of time/NN/time than/IN/than your/PRP$/your 1,000,000/CD/1,000,000 n/NNP/n. you/PRP/you have/VBP/have to/TO/to be/VB/be careful/JJ/careful about/IN/about the/DT/the constants/NNS/constants also/NNP/also. we/PRP/we will/MD/will do/VB/do some/DT/some examples/NNS/examples of/IN/of asymptotic/JJ/asymptotic analysis/NNP/analysis. i/PRP/i have/VBP/have a/DT/a pseudo/NN/pseudo code/NN/code and/CC/and i/PRP/i have/VBP/have an/DT/an array/NN/array of/IN/of n/NN/n numbers/NNS/numbers sitting/VBG/sitting in/IN/in an/DT/an array/NN/array called/VBN/called x/NN/x and/CC/and i/PRP/i have/VBP/have to/TO/to output/VB/output an/DT/an array/NN/array a/DT/a /,/, in/IN/in which/WDT/which the/DT/the element/NN/element a/DT/a /NN/[ i/PRP/i /VBP/] is/VBZ/is the/DT/the average/JJ/average of/IN/of the/DT/the numbers/NNS/numbers x/VBP/x /:/[ 0/-NONE-/0 /:/] through/IN/through x/NN/x /:/[ i/PRP/i /VBP/] /./. one/CD/one way/NN/way of/IN/of doing/VBG/doing it/PRP/it is/VBZ/is /,/, i/PRP/i basically/RB/basically have/VBP/have a/DT/a for/IN/for loop/NN/loop in/IN/in which/WDT/which i/PRP/i compute/VBP/compute each/DT/each element/NN/element of/IN/of the/DT/the array/NN/array a/NNP/a. to/TO/to compute/VB/compute a/DT/a /NN/[ 10/CD/10 /CD/] /,/, i/PRP/i just/RB/just have/VBP/have to/TO/to sum/VB/sum up/RP/up x/NN/x /:/[ 0/-NONE-/0 /:/] through/IN/through x/NN/x /:/[ 10/CD/10 /CD/] /,/, which/WDT/which i/PRP/i am/VBP/am doing/VBG/doing here/NNP/here. for/IN/for j/NN/j 0/-NONE-/0 to/TO/to i/PRP/i do/VBP/do a/DT/a a/DT/a +/NN/+ x/NN/x /:/[ j/NN/j /:/] a/DT/a /NN/[ i/PRP/i /VBP/] a//JJ/a/ /NN/( i/PRP/i +/VBP/+ 1/CD/1 /CD/) to/TO/to compute/VB/compute a/DT/a /NN/[ 10/CD/10 /CD/] /,/, i/PRP/i is/VBZ/is taking/VBG/taking the/DT/the value/NN/value 10/CD/10 and/CC/and i/PRP/i am/VBP/am running/VBG/running the/DT/the index/NN/index j/NN/j from/IN/from 0-10/CD/0-10. i/PRP/i am/VBP/am summing/VBG/summing up/RP/up the/DT/the value/NN/value of/IN/of x/NN/x from/IN/from x/NN/x /:/[ 0/-NONE-/0 /:/] /:/- x/NN/x /:/[ 10/CD/10 /CD/] in/IN/in this/DT/this accumulator/NN/accumulator a/DT/a and/CC/and then/RB/then i/PRP/i am/VBP/am eventually/RB/eventually dividing/VBG/dividing the/DT/the value/NN/value of/IN/of this/DT/this accumulator/NN/accumulator with/IN/with 11/CD/11 /,/, because/IN/because it/PRP/it is/VBZ/is from/IN/from x/NN/x /:/[ 0/-NONE-/0 /:/] to/TO/to x/VB/x /:/[ 10/CD/10 /CD/] /./. that/IN/that gives/VBZ/gives me/PRP/me the/DT/the number/NN/number i/PRP/i should/MD/should have/VB/have in/IN/in a/DT/a /NN/[ 10/CD/10 /CD/] /./. i/PRP/i am/VBP/am going/VBG/going to/TO/to repeat/VB/repeat this/DT/this for/IN/for 11,12,13,14/CD/11,12,13,14 and/CC/and for/IN/for all/DT/all the/DT/the elements/NNP/elements. it/PRP/it is/VBZ/is an/DT/an algorithm/NN/algorithm and/CC/and let/VB/let us/PRP/us compute/VB/compute the/DT/the running/NN/running time/NNP/time. this/DT/this is/VBZ/is one/CD/one step/NNP/step. it/PRP/it is/VBZ/is executed/VBN/executed for/IN/for i/PRP/i number/NN/number of/IN/of times/NNS/times and/CC/and initially/RB/initially i/PRP/i take/VBP/take a/DT/a value/NN/value from/IN/from 0,1,2,3/CD/0,1,2,3 and/CC/and all/DT/all the/DT/the way/NN/way up/RP/up to/TO/to n-1/NNP/n-1. this/DT/this entire/JJ/entire thing/NN/thing is/VBZ/is done/VBN/done n/NN/n times/NNP/times. this/DT/this gives/VBZ/gives you/PRP/you the/DT/the total/JJ/total running/NN/running time/NN/time of/IN/of roughly/RB/roughly 2/CD/2 n/NN/n /./. a/DT/a a/DT/a +/NN/+ x/NN/x /:/[ j/NN/j /:/] this/DT/this one/CD/one step/NN/step is/VBZ/is getting/VBG/getting executed/VBN/executed 2/CD/2 n/NN/n times/NNS/times and/CC/and this/DT/this is/VBZ/is the/DT/the dominant/JJ/dominant thing/NNP/thing. how/WRB/how many/JJ/many times/NNS/times the/DT/the steps/NNS/steps given/VBN/given below/IN/below are/VBP/are executed/VBN/executed a/DT/a /NN/[ i/PRP/i /VBP/] a//JJ/a/ /NN/( j/NN/j +/:/+ 1/CD/1 /CD/) a/DT/a 0/-NONE-/0 these/DT/these steps/NNS/steps are/VBP/are executed/VBN/executed for/IN/for n/NN/n times/NNP/times. a/DT/a a/DT/a +/NN/+ x/NN/x /:/[ j/NN/j /:/] but/CC/but the/DT/the step/NN/step mentioned/VBD/mentioned above/IN/above is/VBZ/is getting/VBG/getting executed/VBN/executed roughly/RB/roughly for/IN/for some/DT/some constant/JJ/constant 2/CD/2 n/NN/n times/NNP/times. thus/RB/thus the/DT/the running/VBG/running time/NN/time of/IN/of the/DT/the algorithm/NN/algorithm is/VBZ/is o/RB/o /:/( 2/CD/2 n/NN/n /:/) /./. it/PRP/it is/VBZ/is a/DT/a very/RB/very simple/JJ/simple problem/NN/problem but/CC/but you/PRP/you can/MD/can have/VB/have a/DT/a better/JJR/better solution/NNP/solution. what/WP/what is/VBZ/is a/DT/a better/JJR/better solution/NN/solution we/PRP/we will/MD/will have/VB/have a/DT/a variable/JJ/variable s/NNS/s in/IN/in which/WDT/which we/PRP/we would/MD/would keep/VB/keep accumulating/VBG/accumulating the/DT/the x/NN/x /:/[ i/PRP/i /VBP/] /./. initially/RB/initially s/VBZ/s =/:/= 0/CD/0. when/WRB/when i/PRP/i compute/VBP/compute a/DT/a /NN/[ i/PRP/i /VBP/] /,/, which/WDT/which i/PRP/i already/RB/already have/VBP/have in/IN/in s/NNS/s /,/, x/NN/x /:/[ 0/-NONE-/0 /:/] through/IN/through x/NN/x /:/[ i-1/-NONE-/i-1 /:/] because/IN/because they/PRP/they used/VBD/used that/IN/that at/IN/at the/DT/the last/JJ/last step/NNP/step. that/IN/that is/VBZ/is the/DT/the problem/NN/problem here/NNP/here. a/DT/a a/DT/a +/NN/+ x/NN/x /:/[ j/NN/j /:/] every/DT/every time/NN/time we/PRP/we are/VBP/are computing/VBG/computing x/NNP/x. first/RB/first we/PRP/we are/VBP/are computing/VBG/computing x/NN/x /:/[ 0/-NONE-/0 /:/] +/:/+ x/NN/x /:/[ 1/CD/1 /CD/] /,/, then/RB/then we/PRP/we are/VBP/are computing/VBG/computing x/NN/x /:/[ 0/-NONE-/0 /:/] +/:/+ x/NN/x /:/[ 1/CD/1 /CD/] +/CD/+ x/NN/x /:/[ 2/CD/2 /CD/] and/CC/and goes/VBZ/goes on/NNP/on. it/PRP/it is/VBZ/is a/DT/a kind/NN/kind of/IN/of repeating/NN/repeating computations/NNP/computations. why/WRB/why should/MD/should we/PRP/we do/VBP/do that/IN/that we/PRP/we will/MD/will have/VB/have a/DT/a single/JJ/single variable/JJ/variable which/WDT/which will/MD/will keep/VB/keep track/NN/track of/IN/of the/DT/the sum/NN/sum of/IN/of the/DT/the prefixes/NNP/prefixes. s/VBZ/s at/IN/at this/DT/this point/NN/point /:/( s/NNS/s s/NNS/s +/VBP/+ x/NN/x /:/[ i/PRP/i /VBP/] /:/) /,/, when/WRB/when i/PRP/i am/VBP/am in/IN/in the/DT/the th/NN/th i/PRP/i run/VBP/run of/IN/of this/DT/this loop/NN/loop has/VBZ/has some/DT/some of/IN/of x/NN/x /:/[ 0/-NONE-/0 /:/] through/IN/through x/NN/x /:/[ i-1/-NONE-/i-1 /:/] and/CC/and then/RB/then some/DT/some x/NN/x /:/[ i/PRP/i /VBP/] in/IN/in it/NNP/it. to/TO/to compute/VB/compute th/NN/th i/PRP/i element/VBP/element /,/, i/PRP/i just/RB/just need/VBP/need to/TO/to divide/VB/divide this/DT/this sum/NN/sum by/IN/by i/PRP/i +/VBP/+ 1/CD/1. s/NNS/s s/NNS/s +/VBP/+ x/NN/x /:/[ i/PRP/i /VBP/] a/DT/a /NN/[ i/PRP/i /VBP/] s//JJ/s/ /NN/( i/PRP/i +/VBP/+ 1/CD/1 /CD/) i/PRP/i keep/VBP/keep this/DT/this accumulator/NN/accumulator /:/( s/NNS/s /VBP/) around/IN/around with/IN/with me/NNP/me. when/WRB/when i/PRP/i finish/VBP/finish the/DT/the th/NN/th i/PRP/i iteration/NN/iteration of/IN/of this/DT/this loop/NN/loop /,/, i/PRP/i have/VBP/have an/DT/an s/NNS/s /,/, the/DT/the sum/NN/sum x/NN/x /:/[ 0/-NONE-/0 /:/] through/IN/through x/NN/x /:/[ i/PRP/i /VBP/] /./. i/PRP/i can/MD/can reuse/VB/reuse it/PRP/it for/IN/for the/DT/the next/JJ/next step/NNP/step. how/WRB/how much/JJ/much time/NN/time does/VBZ/does this/DT/this take/NN/take in/IN/in each/DT/each run/NN/run of/IN/of this/DT/this loop/NN/loop i/PRP/i am/VBP/am just/RB/just doing/VBG/doing two/CD/two primitive/JJ/primitive operations/NNS/operations that/WDT/that makes/VBZ/makes an/DT/an order/NN/order n/NN/n times/NNS/times /,/, because/IN/because this/DT/this loop/NN/loop is/VBZ/is executed/VBN/executed n/NN/n times/NNP/times. i/PRP/i have/VBP/have been/VBN/been using/VBG/using this/DT/this freely/RB/freely linear/JJ/linear and/CC/and quadratic/JJ/quadratic /,/, but/CC/but the/DT/the slide/NN/slide given/VBN/given below/IN/below just/RB/just tells/VBZ/tells you/PRP/you the/DT/the other/JJ/other terms/NNS/terms i/PRP/i might/MD/might be/VB/be using/NNP/using. linear/NN/linear is/VBZ/is when/WRB/when an/DT/an algorithm/NN/algorithm has/VBZ/has an/DT/an asymptotic/JJ/asymptotic running/NN/running time/NN/time of/IN/of o/NN/o /:/( n/NN/n /:/) /,/, then/RB/then we/PRP/we call/VBP/call it/PRP/it as/IN/as a/DT/a linear/NN/linear algorithm/NNP/algorithm. if/IN/if it/PRP/it has/VBZ/has asymptotic/JJ/asymptotic running/NN/running time/NN/time of/IN/of 2/CD/2 n/NN/n /,/, we/PRP/we called/VBD/called it/PRP/it as/IN/as a/DT/a quadratic/JJ/quadratic and/CC/and logarithmic/JJ/logarithmic if/IN/if it/PRP/it is/VBZ/is log/JJ/log n/NNP/n. it/PRP/it is/VBZ/is polynomial/JJ/polynomial if/IN/if it/PRP/it is/VBZ/is k/NN/k n/NN/n for/IN/for some/DT/some constant/JJ/constant k/NNP/k. algorithm/NN/algorithm is/VBZ/is called/VBN/called exponential/JJ/exponential if/IN/if it/PRP/it has/VBZ/has running/VBG/running time/NN/time of/IN/of n/NN/n a/DT/a /,/, where/WRB/where a/DT/a is/VBZ/is some/DT/some number/NN/number more/JJR/more than/IN/than 1/CD/1. till/NN/till now/RB/now i/PRP/i have/VBP/have introduced/VBN/introduced only/RB/only the/DT/the big-oh/JJ/big-oh notation/NN/notation /,/, we/PRP/we also/RB/also have/VBP/have the/DT/the bigomega/NN/bigomega notation/NN/notation and/CC/and big-theta/NNP/big-theta notation/NNP/notation. the/DT/the big-omega/NNP/big-omega notation/NN/notation provides/VBZ/provides a/DT/a lower/JJR/lower bound/NNP/bound. the/DT/the function/NN/function f/NN/f /:/( n/NN/n /:/) is/VBZ/is omega/NN/omega of/IN/of g/NN/g /:/( n/NN/n /:/) /,/, f/NN/f /:/( n/NN/n /:/) =/:/= /:/( g/NN/g /:/( n/NN/n /:/) /:/) if/IN/if constant/JJ/constant time/NN/time g/NN/g /:/( n/NN/n /:/) is/VBZ/is always/RB/always less/JJR/less than/IN/than f/NN/f /:/( n/NN/n /:/) /,/, earlier/JJR/earlier that/IN/that was/VBD/was more/JJR/more than/IN/than f/NN/f /:/( n/NN/n /:/) but/CC/but now/RB/now it/PRP/it is/VBZ/is less/JJR/less than/IN/than f/NN/f /:/( n/NN/n /:/) in/IN/in the/DT/the limit/NN/limit /,/, beyond/IN/beyond a/DT/a certain/JJ/certain 0/-NONE-/0 n/NN/n as/IN/as the/DT/the picture/NN/picture given/VBN/given below/IN/below illustrates/NNP/illustrates. c/NN/c g/NN/g /:/( n/NN/n /:/) f/NN/f /:/( n/NN/n /:/) for/IN/for n/NN/n 0/-NONE-/0 n/NN/n f/NN/f /:/( n/NN/n /:/) is/VBZ/is more/RBR/more than/IN/than c/NN/c /:/( g/NN/g /:/( n/NN/n /:/) /:/) beyond/IN/beyond the/DT/the point/NN/point 0/-NONE-/0 n/NN/n /./. that/IN/that case/NN/case we/PRP/we will/MD/will say/VB/say that/IN/that f/NN/f /:/( n/NN/n /:/) is/VBZ/is omega/NN/omega of/IN/of g/NN/g /:/( n/NN/n /:/) /./. f/NN/f /:/( n/NN/n /:/) =/:/= /:/( g/NN/g /:/( n/NN/n /:/) /:/) /./. in/IN/in notation/NN/notation f/NN/f /:/( n/NN/n /:/) is/VBZ/is /:/( g/NN/g /:/( n/NN/n /:/) /,/, if/IN/if there/EX/there exist/VBP/exist constant/JJ/constant c1/NNP/c1 and/CC/and c2/NNP/c2 such/JJ/such that/IN/that f/NN/f /:/( n/NN/n /:/) is/VBZ/is sandwiched/VBN/sandwiched between/IN/between c1/NNP/c1 g/NN/g /:/( n/NN/n /:/) and/CC/and c2/NNP/c2 g/NN/g /:/( n/NN/n /:/) /./. beyond/IN/beyond a/DT/a certain/JJ/certain point/NN/point /,/, f/NN/f /:/( n/NN/n /:/) lies/NNS/lies between/IN/between 1/CD/1 constant/NN/constant time/NN/time g/NN/g /:/( n/NN/n /:/) and/CC/and another/DT/another constant/NN/constant time/NN/time of/IN/of g/NN/g /:/( n/NN/n /:/) /./. then/RB/then f/NN/f /:/( n/NN/n /:/) is/VBZ/is /:/( g/NN/g /:/( n/NN/n /:/) /:/) where/WRB/where f/NN/f /:/( n/NN/n /:/) grows/VBZ/grows like/IN/like g/NN/g /:/( n/NN/n /:/) in/IN/in the/DT/the limit/NNP/limit. another/DT/another way/NN/way of/IN/of thinking/VBG/thinking of/IN/of it/PRP/it is/VBZ/is /,/, f/NN/f /:/( n/NN/n /:/) is/VBZ/is /:/( g/NN/g /:/( n/NN/n /:/) /:/) /./. if/IN/if f/NN/f /:/( n/NN/n /:/) is/VBZ/is o/RB/o /:/( g/NN/g /:/( n/NN/n /:/) /:/) and/CC/and it/PRP/it also/RB/also /:/( g/NN/g /:/( n/NN/n /:/) /./. there/EX/there are/VBP/are two/CD/two more/RBR/more related/JJ/related asymptotic/JJ/asymptotic notations/NNS/notations /,/, one/CD/one is/VBZ/is called/VBN/called little-oh/JJ/little-oh notation/NN/notation and/CC/and the/DT/the other/JJ/other is/VBZ/is called/VBN/called little-omega/-NONE-/little-omega notation/NNP/notation. they/PRP/they are/VBP/are the/DT/the non-tight/JJ/non-tight analogs/NNS/analogs of/IN/of big-oh/JJ/big-oh and/CC/and big-omega/NNP/big-omega. it/PRP/it is/VBZ/is best/JJS/best to/TO/to understand/VB/understand this/DT/this through/IN/through the/DT/the analogy/NN/analogy of/IN/of real/JJ/real numbers/NNP/numbers. when/WRB/when f/NN/f /:/( n/NN/n /:/) is/VBZ/is o/RB/o /:/( g/NN/g /:/( n/NN/n /:/) /:/) and/CC/and the/DT/the function/NN/function f/NN/f is/VBZ/is less/JJR/less than/IN/than or/CC/or equal/JJ/equal to/TO/to g/VB/g or/CC/or f/NN/f /:/( n/NN/n /:/) is/VBZ/is less/JJR/less than/IN/than c/NN/c /:/( g/NN/g /:/( n/NN/n /:/) /./. the/DT/the analogy/NN/analogy with/IN/with the/DT/the real/JJ/real numbers/NNS/numbers is/VBZ/is when/WRB/when the/DT/the number/NN/number is/VBZ/is less/JJR/less than/IN/than or/CC/or equal/JJ/equal to/TO/to another/DT/another number/NNP/number. is/VBZ/is for/IN/for and/CC/and is/VBZ/is for/IN/for =/CD/= /./. /CD/( g/NN/g /:/( n/NN/n /:/) is/VBZ/is function/NN/function and/CC/and f/NN/f =/:/= g/NN/g are/VBP/are real/JJ/real numbers/NNP/numbers. if/IN/if these/DT/these are/VBP/are real/JJ/real numbers/NNS/numbers /,/, you/PRP/you can/MD/can talk/VB/talk of/IN/of equality/NN/equality but/CC/but you/PRP/you can/MD/can not/RB/not talk/VB/talk of/IN/of equality/NN/equality for/IN/for a/DT/a function/NN/function unless/IN/unless they/PRP/they are/VBP/are equal/NNP/equal. little-oh/NNP/little-oh corresponds/VBZ/corresponds to/TO/to strictly/RB/strictly less/JJR/less than/IN/than g/NN/g and/CC/and littleomega/NN/littleomega corresponds/NNS/corresponds to/TO/to strictly/RB/strictly more/NNP/more. we/PRP/we are/VBP/are not/RB/not going/VBG/going to/TO/to use/VB/use these/DT/these /,/, infact/NN/infact we/PRP/we will/MD/will use/VB/use big-oh/NNP/big-oh. you/PRP/you should/MD/should be/VB/be very/RB/very clear/JJ/clear with/IN/with that/DT/that part/NNP/part. the/DT/the formal/JJ/formal definition/NN/definition for/IN/for little-oh/JJ/little-oh is/VBZ/is that/IN/that /,/, for/IN/for every/DT/every constant/NN/constant c/NN/c there/EX/there should/MD/should exist/VB/exist some/DT/some 0/-NONE-/0 n/NN/n such/JJ/such that/IN/that f/NN/f /:/( n/NN/n /:/) is/VBZ/is </:/< c/NN/c /:/( g/NN/g /:/( n/NN/n /:/) for/IN/for n/NN/n >/:/> 0/-NONE-/0 n/NN/n /./. f/NN/f /:/( n/NN/n /:/) c/NN/c /:/( g/NN/g /:/( n/NN/n /:/) /:/) for/IN/for n/NN/n 0/-NONE-/0 n/NN/n how/WRB/how it/PRP/it is/VBZ/is different/JJ/different from/IN/from big/JJ/big- oh/NN/oh in/IN/in that/DT/that case/NN/case i/PRP/i said/VBD/said /,/, there/EX/there exist/NN/exist c/NN/c and/CC/and 0/-NONE-/0 n/NN/n such/JJ/such that/IN/that this/DT/this is/VBZ/is true/NNP/true. here/RB/here we/PRP/we will/MD/will say/VB/say for/IN/for every/DT/every c/NN/c there/RB/there should/MD/should exist/VB/exist an/DT/an 0/-NONE-/0 n/NN/n /./. the/DT/the slide/NN/slide which/WDT/which is/VBZ/is below/IN/below defines/NNS/defines the/DT/the difference/NN/difference between/IN/between the/DT/the functions/NNP/functions. i/PRP/i have/VBP/have an/DT/an algorithm/NN/algorithm whose/WP$/whose running/VBG/running times/NNS/times are/VBP/are like/IN/like 400n/CD/400n /,/, 20n/CD/20n log/NN/log n/NN/n /,/, 2/CD/2 2/CD/2 n/NN/n /,/, 4/CD/4 n/NN/n and/CC/and 2n/CD/2n /./. also/RB/also i/PRP/i have/VBP/have listed/VBN/listed out/RP/out /,/, the/DT/the largest/JJS/largest problem/NN/problem size/NN/size that/IN/that you/PRP/you can/MD/can solve/VB/solve in/IN/in 1/CD/1 second/JJ/second or/CC/or 1/CD/1 minute/NN/minute or/CC/or 1/CD/1 hour/NNP/hour. the/DT/the largest/JJS/largest problem/NN/problem size/NN/size that/IN/that you/PRP/you can/MD/can solve/VB/solve is/VBZ/is roughly/RB/roughly 2500/CD/2500. let/VB/let us/PRP/us say/VB/say if/IN/if you/PRP/you have/VBP/have 20n/CD/20n log/NN/log n/NN/n as/IN/as running/VBG/running time/NN/time then/RB/then the/DT/the problem/NN/problem size/NN/size would/MD/would be/VB/be like/IN/like 4096/CD/4096. why/WRB/why did/VBD/did you/PRP/you see/VB/see that/IN/that 4096/CD/4096 is/VBZ/is larger/JJR/larger than/IN/than 2500/CD/2500 /,/, although/IN/although 20n/CD/20n log/NN/log n/NN/n is/VBZ/is the/DT/the worst/JJS/worst running/VBG/running time/NN/time than/IN/than 400n/CD/400n /,/, because/IN/because of/IN/of the/DT/the constant/NNP/constant. you/PRP/you can/MD/can see/VB/see the/DT/the differences/NNS/differences happening/NNP/happening. if/IN/if it/PRP/it is/VBZ/is 2/CD/2 2/CD/2 n/NN/n then/RB/then the/DT/the problem/NN/problem size/NN/size is/VBZ/is 707/CD/707 and/CC/and when/WRB/when it/PRP/it is/VBZ/is 2n/CD/2n the/DT/the problem/NN/problem size/NN/size is/VBZ/is 19/CD/19. see/NN/see the/DT/the behavior/NN/behavior as/IN/as the/DT/the time/NN/time increases/NNP/increases. an/DT/an hour/NN/hour is/VBZ/is 3600seconds/CD/3600seconds and/CC/and there/EX/there is/VBZ/is a/DT/a huge/JJ/huge increase/NN/increase in/IN/in the/DT/the size/NN/size of/IN/of the/DT/the problem/NN/problem you/PRP/you solve/VBP/solve /,/, if/IN/if it/PRP/it is/VBZ/is linear/JJ/linear time/NN/time algorithm/NNP/algorithm. still/RB/still there/RB/there is/VBZ/is a/DT/a large/JJ/large increase/NN/increase /,/, when/WRB/when it/PRP/it is/VBZ/is n/VBN/n log/NN/log n/NN/n algorithm/NN/algorithm and/CC/and not/RB/not so/RB/so large/JJ/large increase/NN/increase when/WRB/when it/PRP/it is/VBZ/is an/DT/an 2/CD/2 n/NN/n algorithm/NN/algorithm and/CC/and almost/RB/almost no/DT/no increase/NN/increase when/WRB/when it/PRP/it is/VBZ/is 2n/CD/2n algorithm/NNP/algorithm. if/IN/if you/PRP/you have/VBP/have an/DT/an algorithm/NN/algorithm whose/WP$/whose running/VBG/running time/NN/time is/VBZ/is something/NN/something like/IN/like 2n/CD/2n /,/, you/PRP/you can/MD/can not/RB/not solve/VB/solve for/IN/for problem/NN/problem of/IN/of more/JJR/more than/IN/than size/NN/size 100/CD/100. it/PRP/it will/MD/will take/VB/take millions/NNS/millions of/IN/of years/NNS/years to/TO/to solve/VB/solve it.this/DT/it.this is/VBZ/is the/DT/the behavior/NN/behavior we/PRP/we are/VBP/are interested/JJ/interested in/IN/in our/PRP$/our course/NNP/course. hence/NN/hence we/PRP/we consider/VBP/consider asymptotic/JJ/asymptotic analysis/NN/analysis for/IN/for this/NNP/this. 