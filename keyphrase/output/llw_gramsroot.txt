list from wikipedia::list from wikipedia
encyclopedia this article::encyclopedia this article
includes a list::includes a list
list of references::list of references
sources remain unclear::sources remain unclear
insufficient inline citations::insufficient inline citations
improve this article::improve this article
article by introducing::article by introducing
introducing more precise::introducing more precise
data structure consisting::data structure consisting
group of nodes::group of nodes
represent a sequence::represent a sequence
node is composed::node is composed
composed of data::composed of data
complex variants add::complex variants add
variants add additional::variants add additional
add additional links::add additional links
links this structure::links this structure
insertion or removal::insertion or removal
removal of elements::removal of elements
sequence a linked::sequence a linked
list whose nodes::list whose nodes
node the last::node the last
node is linked::node is linked
signify the end::signify the end
list linked lists::list linked lists
common data structures::common data structures
common abstract data::common abstract data
abstract data types::abstract data types
abstract data type::abstract data type
uncommon to implement::uncommon to implement
basis of implementation::basis of implementation
implementation the principal::implementation the principal
easily be inserted::easily be inserted
inserted or removed::inserted or removed
removed without reallocation::removed without reallocation
reallocation or reorganization::reallocation or reorganization
contiguously in memory::contiguously in memory
compiling and running::compiling and running
running the program::running the program
program linked lists::program linked lists
lists allow insertion::lists allow insertion
insertion and removal::insertion and removal
removal of nodes::removal of nodes
number of operations::number of operations
link being added::link being added
added or removed::added or removed
removed is maintained::removed is maintained
maintained during list::maintained during list
simple linked lists::simple linked lists
form of efficient::form of efficient
obtaining the last::obtaining the last
maintained as separate::maintained as separate
separate node reference::separate node reference
finding a node::finding a node
locating the place::locating the place
inserted may require::inserted may require
require sequential scanning::require sequential scanning
elements the advantages::elements the advantages
advantages and disadvantages::advantages and disadvantages
concepts and nomenclature::concepts and nomenclature
singly linked list::singly linked list
doubly linked list::doubly linked list
multiply linked list::multiply linked list
circular linked list::circular linked list
lists vs dynamic::lists vs dynamic
singly linked linear::singly linked linear
linked linear lists::linked linear lists
linked list operations::linked list operations
linearly linked lists::linearly linked lists
6.1.1 singly linked::6.1.1 singly linked
singly linked lists::singly linked lists
circularly linked list::circularly linked list
lists using arrays::lists using arrays
arrays of node::arrays of node
internal and external::internal and external
speeding up search::speeding up search
random access lists::random access lists
related data structures::related data structures
external links advantages::external links advantages
dynamic data structure::dynamic data structure
allocating the needed::allocating the needed
program is running::program is running
running * insertion::running * insertion
insertion and deletion::insertion and deletion
deletion node operations::deletion node operations
list * linear::list * linear
linear data structures::linear data structures
stacks and queues::stacks and queues
expand in real::expand in real
memory overhead disadvantages::memory overhead disadvantages
due to pointers::due to pointers
pointers requiring extra::pointers requiring extra
requiring extra storage::requiring extra storage
extra storage space::extra storage space
space * nodes::space * nodes
read in order::read in order
beginning as linked::beginning as linked
inherently sequential access::inherently sequential access
access * nodes::access * nodes
nodes are stored::nodes are stored
required to access::required to access
access individual elements::access individual elements
list * difficulties::list * difficulties
arise in linked::arise in linked
traversing for instance::traversing for instance
lists are cumbersome::lists are cumbersome
cumbersome to navigate::cumbersome to navigate
doubly linked lists::doubly linked lists
easier to read::easier to read
memory is wasted::memory is wasted
wasted in allocating::wasted in allocating
back pointer history::back pointer history
lists were developed::lists were developed
shaw and herbert::shaw and herbert
herbert a simon::herbert a simon
simon at rand::simon at rand
primary data structure::primary data structure
information processing language::information processing language
processing language ipl::processing language ipl
authors to develop::authors to develop
develop several early::develop several early
early artificial intelligence::early artificial intelligence
artificial intelligence programs::artificial intelligence programs
including the logic::including the logic
logic theory machine::logic theory machine
general problem solver::general problem solver
computer chess program::computer chess program
chess program reports::chess program reports
appeared in ire::appeared in ire
transactions on information::transactions on information
western joint computer::western joint computer
joint computer conference::joint computer conference
first unesco international::first unesco international
unesco international conference::unesco international conference
conference on information::conference on information
now-classic diagram consisting::now-classic diagram consisting
consisting of blocks::consisting of blocks
blocks representing list::blocks representing list
representing list nodes::representing list nodes
nodes with arrows::nodes with arrows
pointing to successive::pointing to successive
successive list nodes::successive list nodes
list nodes appears::list nodes appears
programming the logic::programming the logic
newell and shaw::newell and shaw
shaw in proc::shaw in proc
newell and simon::newell and simon
simon were recognized::simon were recognized
acm turing award::acm turing award
made basic contributions::made basic contributions
contributions to artificial::contributions to artificial
psychology of human::psychology of human
problem of machine::problem of machine
translation for natural::translation for natural
natural language processing::natural language processing
language processing led::language processing led
processing led victor::processing led victor
led victor yngve::led victor yngve
yngve at massachusetts::yngve at massachusetts
institute of technology::institute of technology
lists as data::lists as data
comit programming language::comit programming language
language for computer::language for computer
field of linguistics::field of linguistics
linguistics a report::linguistics a report
language for mechanical::language for mechanical
translation " appeared::translation " appeared
appeared in mechanical::appeared in mechanical
standing for list::standing for list
created by john::created by john
published its design::published its design
entitled " recursive::entitled " recursive
functions of symbolic::functions of symbolic
computation by machine::computation by machine
lisp s major::lisp s major
major data structures::major data structures
lists and languages::lists and languages
primary data representation::primary data representation
established bert green::established bert green
mit lincoln laboratory::mit lincoln laboratory
lincoln laboratory published::lincoln laboratory published
published a review::published a review
review article entitled::review article entitled
entitled " computer::entitled " computer
languages for symbol::languages for symbol
transactions on human::transactions on human
factors in electronics::factors in electronics
electronics in march::electronics in march
summarized the advantages::summarized the advantages
linked list approach::linked list approach
comparison of list-processing::comparison of list-processing
list-processing computer languages::list-processing computer languages
bobrow and raphael::bobrow and raphael
appeared in communications::appeared in communications
acm in april::acm in april
operating systems developed::operating systems developed
developed by technical::developed by technical
technical systems consultants::technical systems consultants
originally of west::originally of west
west lafayette indiana::west lafayette indiana
lists as file::lists as file
structures a directory::structures a directory
directory entry pointed::directory entry pointed
file were located::file were located
located by traversing::located by traversing
traversing pointers systems::traversing pointers systems
technique included flex::technique included flex
developed by tsc::developed by tsc
marketed by smoke::marketed by smoke
smoke signal broadcasting::smoke signal broadcasting
broadcasting in california::broadcasting in california
tss operating system::NNP operating system
developed by ibm::developed by ibm
double linked list::double linked list
file system catalog::file system catalog
catalog the directory::catalog the directory
structure was similar::structure was similar
similar to unix::similar to unix
directories and extend::directories and extend
depth basic concepts::depth basic concepts
node the field::node the field
pointer the remaining::pointer the remaining
payload  fields::payload  fields
fields the head::fields the head
node the tail::node the tail
list in lisp::list in lisp
car singly linked::car singly linked
lists contain nodes::lists contain nodes
next  field::next  field
node in line::node in line
line of nodes::line of nodes
linked lists include::linked lists include
lists include insertion::lists include insertion
deletion and traversal::deletion and traversal
node doubly linked::node doubly linked
doubly linked list::doubly linked list
link field pointing::link field pointing
previous  node::previous  node
node a technique::node a technique
single link field::single link field
requires the ability::requires the ability
operations on addresses::operations on addresses
languages multiply linked::languages multiply linked
multiply linked list::multiply linked list
set of data::set of data
date of birth::date of birth
leads to simpler::leads to simpler
separate case circular::separate case circular
case circular linked::case circular linked
make it point::make it point
case the list::case the list
linear a circular::linear a circular
circular doubly linked::circular doubly linked
change that occurs::change that occurs
list is linked::list is linked
list and vice::list and vice
vice versa sentinel::vice versa sentinel
versa sentinel nodes::versa sentinel nodes
dummy  node::dummy  node
first data record::first data record
simplifies and accelerates::simplifies and accelerates
accelerates some list-handling::accelerates some list-handling
last " node::last " node
node empty lists::node empty lists
nodes if sentinel::nodes if sentinel
sentinel nodes hash::sentinel nodes hash
nodes hash linking::nodes hash linking
records are stored::records are stored
array and referenced::array and referenced
data records list::data records list
records list handles::records list handles
node gives access::node gives access
algorithms that manipulate::algorithms that manipulate
manipulate linked lists::manipulate linked lists
lists and return::lists and return
return the handles::return the handles
lists in fact::lists in fact
word " list::word " list
means " list::means " list
handle that consists::handle that consists
first and last::first and last
last nodes combining::last nodes combining
nodes combining alternatives::nodes combining alternatives
lists without sentinels::lists without sentinels
circular singly linked::circular singly linked
lists with sentinels::lists with sentinels
choices in computer::choices in computer
programming and design::programming and design
circumstances a linked::circumstances a linked
linked list data::linked list data
list data structure::list data structure
structure might work::structure might work
common tradeoffs involving::common tradeoffs involving
tradeoffs involving linked::tradeoffs involving linked
involving linked list::involving linked list
linked list structures::linked list structures
list structures linked::list structures linked
structures linked lists::structures linked lists
comparison of list::comparison of list
list data structures::list data structures
data structures linked::data structures linked
structures linked list::structures linked list
linked list array::linked list array
list array dynamic::list array dynamic
array dynamic array::array dynamic array
dynamic array balanced::dynamic array balanced
array balanced tree::array balanced tree
balanced tree random::balanced tree random
tree random access::tree random access
random access list::random access list
access list indexing::access list indexing
element is unknown::element is unknown
updating wasted space::updating wasted space
structure that allocates::structure that allocates
allocates all elements::allocates all elements
number of elements::number of elements
array is exceeded::array is exceeded
expensive operation linked::expensive operation linked
operation linked lists::operation linked lists
advantages over dynamic::advantages over dynamic
dynamic arrays insertion::dynamic arrays insertion
insertion or deletion::insertion or deletion
indexed a pointer::indexed a pointer
array at random::array at random
locations will require::locations will require
require moving half::require moving half
elements on average::elements on average
array in constant::array in constant
marking its slot::marking its slot
fragmentation that impedes::fragmentation that impedes
impedes the performance::impedes the performance
performance of iteration::performance of iteration
arbitrarily many elements::arbitrarily many elements
underlying array data::underlying array data
array data structure::array data structure
reallocate an expensive::reallocate an expensive
memory is fragmented::memory is fragmented
cost of reallocation::cost of reallocation
averaged over insertions::averaged over insertions
due to reallocation::due to reallocation
helps with appending::helps with appending
array s end::array s end
positions still carries::positions still carries
carries prohibitive costs::carries prohibitive costs
prohibitive costs due::prohibitive costs due
due to data::due to data
moving to maintain::moving to maintain
contiguity an array::contiguity an array
elements are removed::elements are removed
resized in order::resized in order
order to avoid::order to avoid
fixed-size array data::fixed-size array data
array data structures::array data structures
constant-time random access::constant-time random access
access to elements::access to elements
elements singly linked::elements singly linked
direction this makes::direction this makes
makes linked lists::makes linked lists
linked lists unsuitable::linked lists unsuitable
unsuitable for applications::unsuitable for applications
heapsort sequential access::heapsort sequential access
access on arrays::access on arrays
arrays and dynamic::arrays and dynamic
locality of referenceand::locality of referenceand
referenceand thus make::referenceand thus make
caching another disadvantage::caching another disadvantage
disadvantage of linked::disadvantage of linked
extra storage needed::extra storage needed
needed for references::needed for references
makes them impractical::makes them impractical
impractical for lists::impractical for lists
lists of small::lists of small
small data items::small data items
characters or boolean::characters or boolean
links may exceed::links may exceed
data in contrast::data in contrast
dynamic array requires::dynamic array requires
amount of control::amount of control
problem generally solved::problem generally solved
solved using memory::solved using memory
pools some hybrid::pools some hybrid
combine the advantages::combine the advantages
two representations unrolled::two representations unrolled
representations unrolled linked::representations unrolled linked
unrolled linked lists::unrolled linked lists
store several elements::store several elements
increasing cache performance::increasing cache performance
performance while decreasing::performance while decreasing
decreasing memory overhead::decreasing memory overhead
overhead for references::overhead for references
references cdr coding::references cdr coding
actual data referenced::actual data referenced
record a good::record a good
highlights the pros::highlights the pros
pros and cons::pros and cons
arrays vs linked::arrays vs linked
implementing a program::implementing a program
program that resolves::program that resolves
resolves the josephus::resolves the josephus
problem the josephus::problem the josephus
method that works::method that works
group of people::group of people
circle n times::circle n times
reach the nth::reach the nth
close the circle::close the circle
circle then count::circle then count
times and repeat::times and repeat
repeat the process::repeat the process
person is left::person is left
left that person::left that person
wins the election::wins the election
election this shows::election this shows
shows the strengths::shows the strengths
strengths and weaknesses::strengths and weaknesses
view the people::view the people
people as connected::people as connected
easily the linked::easily the linked
rearrange the links::rearrange the links
poor at finding::poor at finding
person to remove::person to remove
finds that person::finds that person
person a dynamic::person a dynamic
poor at deleting::poor at deleting
remove one node::remove one node
easy to find::easy to find
find the nth::find the nth
array the list::array the list
list ranking problem::list ranking problem
ranking problem concerns::ranking problem concerns
concerns the efficient::concerns the efficient
linked list representation::linked list representation
array although trivial::array although trivial
solving this problem::solving this problem
problem by aparallel::problem by aparallel
algorithm is complicated::algorithm is complicated
research a balanced::research a balanced
tree has similar::tree has similar
similar memory access::similar memory access
memory access patterns::memory access patterns
patterns and space::patterns and space
list while permitting::list while permitting
overhead of tree::overhead of tree
manipulations to maintain::manipulations to maintain
maintain balance schemes::maintain balance schemes
balance schemes exist::balance schemes exist
exist for trees::exist for trees
trees or red-black::trees or red-black
trees singly linked::trees singly linked
doubly-linked and circular::doubly-linked and circular
lists have advantages::lists have advantages
advantages over singly-linked::advantages over singly-linked
singly-linked linear lists::singly-linked linear lists
linear lists offer::linear lists offer
offer some advantages::offer some advantages
advantages that make::advantages that make
make them preferable::make them preferable
linked linear list::linked linear list
recursive data structure::recursive data structure
merging two lists::merging two lists
enumerating the elements::enumerating the elements
elements in reverse::elements in reverse
simple recursive algorithms::simple recursive algorithms
solution using iterative::solution using iterative
circularly linked lists::circularly linked lists
generally need extra::generally need extra
complicated base cases::complicated base cases
base cases linear::base cases linear
linear singly linked::linear singly linked
common final portion::common final portion
portion of sub-list::portion of sub-list
two different lists::two different lists
node is added::node is added
persistent data structure::persistent data structure
two different circular::two different circular
singly linked non-circular::singly linked non-circular
linked non-circular lists::linked non-circular lists
proper list ends::proper list ends
denoted by nil::denoted by nil
car and cdr::car and cdr
cdr links point::cdr links point
car or cdr::car or cdr
cdr of anylist::cdr of anylist
anylist the advantages::anylist the advantages
efficiency a circular::efficiency a circular
variables that point::variables that point
cost doubly linked::cost doubly linked
double-linked lists require::double-linked lists require
require more space::require more space
space per node::space per node
easier to manipulate::easier to manipulate
fast and easy::fast and easy
easy sequential access::easy sequential access
insert or delete::insert or delete
delete a node::delete a node
node s address::node s address
node some algorithms::node some algorithms
algorithms require access::algorithms require access
persistent data structures::persistent data structures
structures circularly linked::structures circularly linked
option to represent::option to represent
e.g the corners::e.g the corners
pool of buffers::pool of buffers
released in fifo::released in fifo
set of processes::set of processes
time-shared in round-robin::time-shared in round-robin
node gives easy::node gives easy
applications that require::applications that require
handle the structure::handle the structure
two a circular::two a circular
two circular lists::two circular lists
giving the addresses::giving the addresses
piece the operation::piece the operation
consists in swapping::consists in swapping
swapping the contents::swapping the contents
two nodes applying::two nodes applying
two distinct lists::two distinct lists
distinct lists joins::distinct lists joins
property greatly simplifies::property greatly simplifies
simplifies some algorithms::simplifies some algorithms
algorithms and data::algorithms and data
quad-edge and face-edge::quad-edge and face-edge
face-edge the simplest::face-edge the simplest
empty circular list::empty circular list
thing makes sense::thing makes sense
handle it separately::handle it separately
separately by contrast::separately by contrast
null to denote::null to denote
denote an empty::denote an empty
empty linear list::empty linear list
creates fewer special::creates fewer special
fewer special cases::fewer special cases
cases using sentinel::cases using sentinel
node may simplify::node may simplify
simplify certain list::simplify certain list
previous nodes exist::previous nodes exist
eliminate some end-of-list::eliminate some end-of-list
scanning the list::scanning the list
setting the sentinel::setting the sentinel
sentinel s data::sentinel s data
makes it unnecessary::makes it unnecessary
unnecessary to test::unnecessary to test
test for end-of-list::test for end-of-list
inside the loop::inside the loop
merging two sorted::merging two sorted
two sorted lists::two sorted lists
sentinels have data::sentinels have data
data fields set::data fields set
handling for empty::handling for empty
complicate other operations::complicate other operations
simulate a linear::simulate a linear
complexity by adding::complexity by adding
adding a single::adding a single
single sentinel node::single sentinel node
first data nodes::first data nodes
empty list consists::empty list consists
link the list::link the list
last data node::last data node
list is empty::list is empty
simplify the handling::simplify the handling
doubly linked linear::doubly linked linear
manipulating linked lists::manipulating linked lists
invalidated in previous::invalidated in previous
assignments this makes::assignments this makes
algorithms for inserting::algorithms for inserting
inserting or deleting::inserting or deleting
deleting linked list::deleting linked list
linked list nodes::linked list nodes
nodes somewhat subtle::nodes somewhat subtle
subtle this section::subtle this section
section gives pseudocode::section gives pseudocode
pseudocode for adding::pseudocode for adding
adding or removing::adding or removing
linked lists in-place::linked lists in-place
marker or sentinel::marker or sentinel
number of ways::number of ways
ways linearly linked::ways linearly linked
node data structure::node data structure
empty list record::empty list record
list record node::list record node
data being stored::data being stored
null for last::null for last
node firstnode points::node firstnode points
points to first::points to first
node of list::node of list
list ; null::list ; null
null for empty::null for empty
list is simple::list is simple
list.firstnode while node::list.firstnode while node
node not null::node not null
inserts a node::inserts a node
list the diagram::list the diagram
inserting a node::inserting a node
node and insert::node and insert
insert a node::insert a node
newnode after node::newnode after node
requires a separate::requires a separate
function this requires::function this requires
requires updating firstnode::requires updating firstnode
updating firstnode function::updating firstnode function
firstnode function insertbeginning::firstnode function insertbeginning
node before current::node before current
current first node::current first node
first node newnode.next::first node newnode.next
functions for removing::functions for removing
removing the node::removing the node
removing a node::removing a node
find and remove::find and remove
previous element function::previous element function
element function removeafter::element function removeafter
remove node past::remove node past
node.next.next destroy obsoletenode::node.next.next destroy obsoletenode
destroy obsoletenode function::destroy obsoletenode function
obsoletenode function removebeginning::obsoletenode function removebeginning
remove first node::remove first node
first node obsoletenode::first node obsoletenode
list.firstnode.next point past::list.firstnode.next point past
point past deleted::point past deleted
past deleted node::past deleted node
deleted node destroy::deleted node destroy
node destroy obsoletenode::node destroy obsoletenode
destroy obsoletenode notice::destroy obsoletenode notice
notice that removebeginning::notice that removebeginning
list.firstnode to null::list.firstnode to null
null when removing::null when removing
removing the last::removing the last
nt iterate backwards::nt iterate backwards
insertbefore or removebefore::insertbefore or removebefore
appending one linked::appending one linked
traverse the entire::traverse the entire
entire first list::entire first list
list in order::list in order
order to find::order to find
find the tail::find the tail
two linearly linked::two linearly linked
appending has asymptotic::appending has asymptotic
asymptotic time complexity::asymptotic time complexity
family of languages::family of languages
appending is provided::appending is provided
cases of linked::cases of linked
eliminated by including::eliminated by including
including a dummy::including a dummy
list this ensures::list this ensures
list and renders::list and renders
renders both insertbeginning::renders both insertbeginning
first useful data::first useful data
atlist.firstnode.next circularly linked::atlist.firstnode.next circularly linked
nodes are linked::nodes are linked
null for lists::null for lists
stores a reference::stores a reference
first node elements::first node elements
list and removed::list and removed
front in constant::front in constant
linked both types::linked both types
linked lists benefit::linked lists benefit
ability to traverse::ability to traverse
traverse the full::traverse the full
full list beginning::full list beginning
avoid storing firstnode::avoid storing firstnode
firstnode and lastnode::firstnode and lastnode
variable which points::variable which points
representation significantly simplifies::representation significantly simplifies
significantly simplifies adding::significantly simplifies adding
adding and removing::adding and removing
special case algorithms::special case algorithms
assuming that somenode::assuming that somenode
starting with somenode::starting with somenode
somenode null node::somenode null node
node.next while node::node.next while node
node somenode notice::node somenode notice
test was moved::test was moved
procedure would fail::procedure would fail
node this function::node this function
node " newnode::node " newnode
node " node::node " node
empty function insertafter::empty function insertafter
node = null::node = null
newnode else newnode.next::newnode else newnode.next
append " newnode::append " newnode
newnode to insert::newnode to insert
insert " newnode::insert " newnode
newnode linked lists::newnode linked lists
support any type::support any type
type of reference::type of reference
links by replacing::links by replacing
pointers with array::pointers with array
indices the approach::indices the approach
array of records::array of records
record has integer::record has integer
integer fields indicating::integer fields indicating
indicating the index::indicating the index
linked list record::linked list record
entry in array::entry in array
array integer prev::array integer prev
prev ; previous::prev ; previous
build by creating::build by creating
creating an array::creating an array
variable to store::variable to store
store the index::store the index
first element integer::first element integer
element integer listhead::element integer listhead
integer listhead entry::integer listhead entry
listhead entry records::listhead entry records
links between elements::links between elements
elements are formed::elements are formed
formed by placing::formed by placing
placing the array::placing the array
index next prev::index next prev
prev name balance::prev name balance
notice that entry::notice that entry
list these cells::list these cells
list by creating::list by creating
creating a listfree::creating a listfree
listfree integer variable::listfree integer variable
code would traverse::code would traverse
traverse the list::traverse the list
list and display::list and display
names and account::names and account
.balance print entry::.balance print entry
.next when faced::.next when faced
list is relocatable::list is relocatable
serialized for storage::serialized for storage
storage on disk::storage on disk
disk or transfer::disk or transfer
indexes can occupy::indexes can occupy
significantly less space::significantly less space
architectures * locality::architectures * locality
locality of reference::locality of reference
improved by keeping::improved by keeping
keeping the nodes::keeping the nodes
dynamic memory allocators::dynamic memory allocators
allocators can produce::allocators can produce
produce an excessive::produce an excessive
amount of overhead::amount of overhead
overhead is incurred::overhead is incurred
incurred per node::incurred per node
approach * seizing::approach * seizing
seizing an entry::seizing an entry
array is faster::array is faster
dynamic memory allocation::dynamic memory allocation
allocation typically requires::allocation typically requires
requires a search::requires a search
free memory block::free memory block
size this approach::size this approach
creates and manages::creates and manages
manages a private::manages a private
private memory space::private memory space
nodes this leads::nodes this leads
implementation * growing::implementation * growing
growing a large::growing a large
difficult or impossible::difficult or impossible
linked list node::linked list node
general memory pool::general memory pool
easier * adding::easier * adding
unexpectedly take linear::unexpectedly take linear
memory pool leaves::memory pool leaves
leaves more memory::leaves more memory
list is smaller::list is smaller
smaller than expected::smaller than expected
nodes are freed::nodes are freed
support dynamic memory::support dynamic memory
allocation these disadvantages::allocation these disadvantages
array is created::array is created
created language support::created language support
lisp and scheme::lisp and scheme
linked lists built::linked lists built
lists are constructed::lists are constructed
constructed from nodes::constructed from nodes
consor cons cell::consor cons cell
cell the cons::cell the cons
node although cons::node although cons
build other data::build other data
purpose in languages::purpose in languages
languages that support::languages that support
support abstract data::support abstract data
types or templates::types or templates
linked list adts::linked list adts
adts or templates::adts or templates
building linked lists::building linked lists
built using references::built using references
constructing a linked::constructing a linked
store the data::store the data
store a reference::store a reference
external storage internal::external storage internal
storage internal storage::storage internal storage
advantage of making::advantage of making
data more efficient::data more efficient
requiring less storage::requiring less storage
simplifying memory management::simplifying memory management
data is allocated::data is allocated
allocated and deallocated::allocated and deallocated
structure and machine::structure and machine
list no matter::list no matter
makes it easy::makes it easy
easy to place::easy to place
data in multiple::data in multiple
multiple linked lists::multiple linked lists
lists by including::lists by including
multiple next references::multiple next references
create separate routines::create separate routines
routines to add::routines to add
add or delete::add or delete
delete cells based::delete cells based
create additional linked::create additional linked
additional linked lists::additional linked lists
lists of elements::lists of elements
lists store references::lists store references
data in general::data in general
included in linked::included in linked
generic linked list::generic linked list
linked list package::linked list package
package using external::package using external
sets of data::sets of data
single linked list::single linked list
prev if double::prev if double
location after defining::location after defining
defining separate structures::defining separate structures
type of data::type of data
amount of data::amount of data
structures and contained::structures and contained
structures then generic::structures then generic
structure to perform::structure to perform
perform linked list::perform linked list
linked list type::linked list type
list type operations::list type operations
handle the specific::handle the specific
data this approach::data this approach
message parsing routines::message parsing routines
types of messages::types of messages
messages are received::messages are received
set of fields::set of fields
including a field::including a field
field for message::field for message
type the generic::type the generic
add new messages::add new messages
queue in order::queue in order
order to process::order to process
process the message::process the message
message the message::message the message
message type field::message type field
call the correct::call the correct
routine to process::routine to process
process the specific::process the specific
type of message::type of message
suppose you wanted::suppose you wanted
wanted to create::wanted to create
create a linked::create a linked
list of families::list of families
members using internal::members using internal
firstname ; integer::firstname ; integer
lastname ; string::lastname ; string
address ; member::address ; member
member members head::member members head
head of list::head of list
list of members::list of members
print a complete::print a complete
start at head::start at head
head of families::head of families
afamily null loop::afamily null loop
loop through list::loop through list
families print information::families print information
information about family::information about family
afamily.members get head::afamily.members get head
family s members::family s members
members while amember::members while amember
amember null loop::amember null loop
members print information::members print information
information about member::information about member
afamily.next using external::afamily.next using external
generic link structure::generic link structure
link structure node::link structure node
pointer data generic::pointer data generic
data generic pointer::data generic pointer
pointer for data::pointer for data
data at node::data at node
structure for family::structure for family
family member string::family member string
member string firstname::member string firstname
family string lastname::family string lastname
address ; node::address ; node
node members head::node members head
members using external::members using external
list while famnode::list while famnode
famnode null loop::famnode null loop
famnode.data extract family::famnode.data extract family
family from node::family from node
node print information::node print information
afamily.members get list::afamily.members get list
list of family::list of family
members while memnode::members while memnode
memnode null loop::memnode null loop
memnode.data extract member::memnode.data extract member
member from node::member from node
step is needed::step is needed
needed to extract::needed to extract
extract the record::extract the record
node and cast::node and cast
proper data type::proper data type
family are stored::family are stored
two linked lists::two linked lists
number of families::number of families
member can belong::member can belong
internal storage works::internal storage works
finding a specific::finding a specific
disadvantages of linked::disadvantages of linked
structures in addition::structures in addition
two simple ways::two simple ways
ways to improve::ways to improve
heuristic for decreasing::heuristic for decreasing
decreasing average search::decreasing average search
moves an element::moves an element
found this scheme::found this scheme
handy for creating::handy for creating
creating simple caches::creating simple caches
recently used items::recently used items
quickest to find::quickest to find
efficient external data::efficient external data
external data structure::external data structure
build a red-black::build a red-black
tree or hash::tree or hash
table whose elements::table whose elements
elements are references::elements are references
list nodes multiple::list nodes multiple
multiple such indexes::multiple such indexes
list the disadvantage::list the disadvantage
list with support::list with support
support for fast::support for fast
fast random access::fast random access
access to read::access to read
read or modify::read or modify
modify any element::modify any element
skew binary random::skew binary random
binary random access::binary random access
random access listusing::random access listusing
listusing the skew::listusing the skew
skew binary number::skew binary number
binary number system::binary number system
involves a list::involves a list
list of trees::list of trees
trees with special::trees with special
logarithmic time random::logarithmic time random
element by index::element by index
implemented as persistent::implemented as persistent
viewed as immutable::viewed as immutable
immutable linked lists::immutable linked lists
head and tail::head and tail
extension to random::extension to random
operation that yields::operation that yields
yields the minimum::yields the minimum
list in constant::list in constant
implemented using linked::implemented using linked
restrict the type::restrict the type
type of operations::type of operations
supported the skip::supported the skip
linked list augmented::linked list augmented
augmented with layers::augmented with layers
layers of pointers::layers of pointers
jumping over large::jumping over large
numbers of elements::numbers of elements
layer this process::layer this process
list a binary::list a binary
type of linked::type of linked
nature the result::nature the result
node may include::node may include
include a reference::include a reference
two other linked::two other linked
form the subtrees::form the subtrees
node an unrolled::node an unrolled
unrolled linked list::unrolled linked list
array of data::array of data
values this leads::values this leads
leads to improved::leads to improved
improved cache performance::improved cache performance
elements are contiguous::elements are contiguous
contiguous in memory::contiguous in memory
reduced memory overhead::reduced memory overhead
list a hash::list a hash
lists to store::lists to store
store the chains::store the chains
chains of items::chains of items
items that hash::items that hash
table a heap::table a heap
references from node::references from node
node to node::node to node
previous data indexes::previous data indexes
indexes are calculated::indexes are calculated
data s index::data s index
index a self-organizing::index a self-organizing
self-organizing list rearranges::self-organizing list rearranges
rearranges its nodes::rearranges its nodes
heuristic which reduces::heuristic which reduces
reduces search times::reduces search times
times for data::times for data
retrieval by keeping::retrieval by keeping
keeping commonly accessed::keeping commonly accessed
commonly accessed nodes::commonly accessed nodes
control data required::control data required
number of dimensions::number of dimensions
algorithm design manual::algorithm design manual
linear time searching::linear time searching
complexity trade-offs juniata::complexity trade-offs juniata
trade-offs juniata college::trade-offs juniata college
juniata college spring::juniata college spring
style at goingnative::style at goingnative
channel9.msdn.com from minute::channel9.msdn.com from minute
andrej ; carlsson::andrej ; carlsson
svante ; sedgewick::svante ; sedgewick
robert ; munro::robert ; munro
arrays in optimal::arrays in optimal
department of computer::department of computer
university of waterloo::university of waterloo
william ; topp::william ; topp
purely functional random-access::purely functional random-access
functional random-access lists::functional random-access lists
functional programming languages::functional programming languages
languages and computer::languages and computer
ch20 data structures::ch20 data structures
structures ; id06::structures ; id06
programming with java::programming with java
book big java::book big java
vreda ; black::vreda ; black
eds " linked::eds " linked
dictionary of algorithms::dictionary of algorithms
data structures national::data structures national
structures national institute::structures national institute
institute of standards::institute of standards
standards and technology::standards and technology
2004-12-14 * antonakos::2004-12-14 * antonakos
practical data structures::practical data structures
0-13-280843-9 * collins::0-13-280843-9 * collins
java collections framework::java collections framework
framework new york::framework new york
0-07-282379-8 * cormen::0-07-282379-8 * cormen
introduction to algorithms::introduction to algorithms
algorithms mit press::algorithms mit press
0-262-03293-7 * cormen::0-262-03293-7 * cormen
0-262-03293-7 * green::0-262-03293-7 * green
0-201-89683-4 * newell::0-201-89683-4 * newell
allen ; shaw::allen ; shaw
linked list basics::linked list basics
stanford university retrieved::stanford university retrieved
2009-09-21 * sedgewick::2009-09-21 * sedgewick
0-201-31452-5 * shaffer::0-201-31452-5 * shaffer
introduction to data::introduction to data
structures and algorithm::structures and algorithm
analysis new jersey::analysis new jersey
0-13-660911-2 * wilkes::0-13-660911-2 * wilkes
simple list-processing language::simple list-processing language
review in automatic::review in automatic
90013-8 * wilkes::90013-8 * wilkes
acm national conference::acm national conference
linux kernel linked::linux kernel linked
kernel linked list::kernel linked list
linked list explained::linked list explained
retrieved 2009-09-21 external::retrieved 2009-09-21 external
2009-09-21 external links::2009-09-21 external links
commons has media::commons has media
related to linked::related to linked
lists * description::lists * description
structures * introduction::structures * introduction
introduction to linked::introduction to linked
stanford university computer::stanford university computer
university computer science::university computer science
computer science library::computer science library
library * linked::library * linked
linked list problems::linked list problems
library * open::library * open
open data structures::open data structures
lists * patent::lists * patent
patent was granted::patent was granted
data structures types::data structures types
types * collection::types * collection
collection * container::collection * container
abstract * associative::abstract * associative
array * double-ended::array * double-ended
double-ended priority queue::double-ended priority queue
queue * double-ended::queue * double-ended
queue * list::queue * list
list * map::list * map
map * multimap::map * multimap
multimap * priority::multimap * priority
queue * queue::queue * queue
queue * set::queue * set
set * multiset::set * multiset
multiset * disjoint::multiset * disjoint
sets * stack::sets * stack
arrays * bit::arrays * bit
array * circular::array * circular
buffer * dynamic::buffer * dynamic
array * hash::array * hash
table * hashed::table * hashed
hashed array tree::hashed array tree
tree * sparse::tree * sparse
sparse array linked::sparse array linked
linked * association::linked * association
list * linked::list * linked
list * skip::list * skip
list * unrolled::list * unrolled
list * xor::list * xor
xor linked list::xor linked list
linked list trees::linked list trees
trees * b-tree::trees * b-tree
b-tree * binary::b-tree * binary
binary search tree::binary search tree
avl * red-black::avl * red-black
red-black * self-balancing::red-black * self-balancing
self-balancing * splay::self-balancing * splay
splay * heap::splay * heap
heap * binary::heap * binary
binary * binomial::binary * binomial
binomial * fibonacci::binomial * fibonacci
fibonacci * r-tree::fibonacci * r-tree
hilbert * trie::hilbert * trie
trie * hash::trie * hash
hash tree graphs::hash tree graphs
graphs * binary::graphs * binary
binary decision diagram::binary decision diagram
diagram * directed::diagram * directed
directed acyclic graph::directed acyclic graph
graph * directed::graph * directed
directed acyclic word::directed acyclic word
acyclic word graph::acyclic word graph
graph * list::graph * list
list of data::list of data
data structures authority::data structures authority
structures authority control::structures authority control
control * gnd::control * gnd
lists * data::lists * data
linked list::linked list
free encyclopedia::free encyclopedia
article includes::article includes
sources remain::sources remain
remain unclear::remain unclear
insufficient inline::insufficient inline
inline citations::inline citations
precise citations::precise citations
computer science::computer science
data structure::data structure
structure consisting::structure consisting
simplest form::simplest form
complex variants::complex variants
variants add::variants add
additional links::additional links
efficient insertion::efficient insertion
integer value::integer value
last node::last node
list linked::list linked
linked lists::linked lists
common data::common data
data structures::data structures
common abstract::common abstract
abstract data::abstract data
data types::data types
including lists::including lists
data type::data type
associative arrays::associative arrays
principal benefit::principal benefit
conventional array::conventional array
list elements::list elements
entire structure::entire structure
data items::data items
source code::source code
program linked::program linked
constant number::constant number
list traversal::list traversal
random access::random access
efficient indexing::efficient indexing
basic operations::basic operations
separate node::separate node
node reference::node reference
list structure::list structure
sequential scanning::sequential scanning
basic concepts::basic concepts
sentinel nodes::sentinel nodes
empty lists::empty lists
hash linking::hash linking
list handles::list handles
combining alternatives::combining alternatives
dynamic arrays::dynamic arrays
linear lists::linear lists
list operations::list operations
language support::language support
external storage::external storage
access lists::access lists
related data::related data
external links::external links
links advantages::links advantages
dynamic data::dynamic data
needed memory::needed memory
deletion node::deletion node
node operations::node operations
linear data::linear data
reduce access::reduce access
memory overhead::memory overhead
overhead disadvantages::overhead disadvantages
pointers requiring::pointers requiring
extra storage::extra storage
storage space::storage space
sequential access::sequential access
individual elements::individual elements
reverse traversing::reverse traversing
navigate backwards::navigate backwards
allocating space::allocating space
back pointer::back pointer
pointer history::pointer history
allen newell::allen newell
cliff shaw::cliff shaw
rand corporation::rand corporation
primary data::primary data
information processing::information processing
processing language::processing language
language ipl::language ipl
early artificial::early artificial
artificial intelligence::artificial intelligence
intelligence programs::intelligence programs
logic theory::logic theory
theory machine::theory machine
general problem::general problem
problem solver::problem solver
computer chess::computer chess
chess program::chess program
program reports::program reports
work appeared::work appeared
ire transactions::ire transactions
information theory::information theory
conference proceedings::conference proceedings
including proceedings::including proceedings
western joint::western joint
joint computer::joint computer
computer conference::computer conference
first unesco::first unesco
international conference::international conference
now-classic diagram::now-classic diagram
diagram consisting::diagram consisting
blocks representing::blocks representing
representing list::representing list
list nodes::list nodes
arrows pointing::arrows pointing
successive list::successive list
nodes appears::nodes appears
proc wjcc::proc wjcc
acm turing::acm turing
turing award::turing award
basic contributions::basic contributions
human cognition::human cognition
list processing::list processing
machine translation::machine translation
natural language::natural language
language processing::language processing
processing led::processing led
led victor::led victor
victor yngve::victor yngve
massachusetts institute::massachusetts institute
comit programming::comit programming
programming language::programming language
computer research::computer research
language entitled::language entitled
mechanical translation::mechanical translation
list processor::list processor
recursive functions::recursive functions
symbolic expressions::symbolic expressions
major data::major data
data representation::data representation
established bert::established bert
mit lincoln::mit lincoln
lincoln laboratory::lincoln laboratory
laboratory published::laboratory published
review article::review article
article entitled::article entitled
computer languages::computer languages
symbol manipulation::symbol manipulation
human factors::human factors
list approach::list approach
list-processing computer::list-processing computer
operating systems::operating systems
systems developed::systems developed
technical systems::technical systems
systems consultants::systems consultants
west lafayette::west lafayette
lafayette indiana::lafayette indiana
chapel hill::chapel hill
north carolina::north carolina
file structures::file structures
directory entry::directory entry
entry pointed::entry pointed
first sector::first sector
succeeding portions::succeeding portions
traversing pointers::traversing pointers
pointers systems::pointers systems
technique included::technique included
included flex::included flex
variant developed::variant developed
smoke signal::smoke signal
signal broadcasting::signal broadcasting
operating system::operating system
file system::file system
system catalog::system catalog
directory structure::directory structure
next link::next link
next pointer::next pointer
remaining fields::remaining fields
first node::first node
derived languages::derived languages
head node::head node
data field::data field
nodes operations::nodes operations
lists include::lists include
include insertion::include insertion
main article::main article
next-node link::next-node link
link field::link field
field pointing::field pointing
link forward::link forward
link backward::link backward
previous node::previous node
single link::single link
technique requires::technique requires
bit operations::bit operations
high-level languages::high-level languages
link fields::link fields
data records::data records
special cases::special cases
efficient algorithms::efficient algorithms
separate case::separate case
case circular::case circular
circular linked::circular linked
null reference::null reference
special value::special value
common convention::common convention
vice versa::vice versa
versa sentinel::versa sentinel
sentinel node::sentinel node
extra sentinel::extra sentinel
first data::first data
data record::data record
convention simplifies::convention simplifies
list-handling algorithms::list-handling algorithms
data elements::data elements
node empty::node empty
empty list::empty list
nodes hash::nodes hash
physically part::physically part
separate array::separate array
records list::records list
list algorithms::list algorithms
input lists::input lists
resulting lists::resulting lists
list handle::list handle
last nodes::last nodes
nodes combining::nodes combining
alternatives listed::alternatives listed
computer programming::computer programming
list data::list data
common tradeoffs::common tradeoffs
tradeoffs involving::tradeoffs involving
list structures::list structures
structures linked::structures linked
list array::list array
dynamic array::dynamic array
array balanced::array balanced
balanced tree::balanced tree
tree random::tree random
access list::access list
list indexing::list indexing
last element::last element
middle search::middle search
wasted space::wasted space
current number::current number
space reserved::space reserved
expensive operation::expensive operation
operation linked::operation linked
arrays insertion::arrays insertion
specific point::specific point
insertion point::insertion point
constant-time operation::constant-time operation
random locations::random locations
moving half::moving half
worst case::worst case
total memory::total memory
underlying array::underlying array
array data::array data
appending elements::appending elements
middle positions::middle positions
prohibitive costs::prohibitive costs
data moving::data moving
maintain contiguity::maintain contiguity
avoid wasting::avoid wasting
fixed-size array::fixed-size array
constant-time random::constant-time random
optimal locality::optimal locality
data caching::data caching
storage needed::storage needed
small data::small data
boolean values::boolean values
storage overhead::storage overhead
array requires::array requires
small amount::small amount
control data::control data
allocate memory::allocate memory
memory pools::memory pools
hybrid solutions::hybrid solutions
representations unrolled::representations unrolled
list node::list node
decreasing memory::decreasing memory
references cdr::references cdr
cdr coding::cdr coding
replacing references::replacing references
actual data::actual data
data referenced::data referenced
referencing record::referencing record
josephus problem::josephus problem
election method::election method
people stand::people stand
circle starting::circle starting
predetermined person::predetermined person
nth person::nth person
members close::members close
person wins::person wins
connected nodes::connected nodes
delete nodes::delete nodes
deleting nodes::deleting nodes
list ranking::list ranking
ranking problem::ranking problem
problem concerns::problem concerns
efficient conversion::efficient conversion
list representation::list representation
conventional computer::conventional computer
aparallel algorithm::aparallel algorithm
similar memory::similar memory
memory access::memory access
access patterns::access patterns
space overhead::space overhead
deletion operations::deletion operations
expensive due::expensive due
tree manipulations::tree manipulations
maintain balance::maintain balance
balance schemes::balance schemes
schemes exist::schemes exist
balanced state::balanced state
avl trees::avl trees
red-black trees::red-black trees
circular lists::circular lists
singly-linked linear::singly-linked linear
lists offer::lists offer
linear list::linear list
recursive data::recursive data
smaller object::smaller object
reverse order::reverse order
simple recursive::simple recursive
recursive algorithms::recursive algorithms
iterative commands::iterative commands
recursive solutions::recursive solutions
extra arguments::extra arguments
complicated base::complicated base
base cases::base cases
cases linear::cases linear
common final::common final
final portion::final portion
terminal portion::terminal portion
list remains::list remains
persistent data::persistent data
end-sentinel nodes::end-sentinel nodes
non-circular lists::non-circular lists
end-sentinel node::end-sentinel node
proper list::proper list
list ends::list ends
special node::special node
cdr links::cdr links
links point::links point
lisp procedure::lisp procedure
fancy variants::fancy variants
circular list::circular list
extra cost::extra cost
double-linked lists::double-linked lists
lists require::lists require
elementary operations::elementary operations
easy sequential::easy sequential
algorithms require::algorithms require
require access::require access
natural option::natural option
represent arrays::represent arrays
round-robin order::round-robin order
node serves::node serves
easy access::easy access
circular structure::circular structure
single pointer::single pointer
operation consists::operation consists
nodes applying::nodes applying
distinct lists::distinct lists
lists joins::lists joins
simplest representation::simplest representation
empty circular::empty circular
thing makes::thing makes
makes sense::makes sense
null pointer::null pointer
special case::special case
empty linear::empty linear
fewer special::fewer special
previous nodes::previous nodes
nodes exist::nodes exist
end-of-list tests::end-of-list tests
end-of-list inside::end-of-list inside
sorted lists::sorted lists
data fields::data fields
fields set::fields set
output node::output node
special handling::special handling
extra space::extra space
short lists::short lists
single sentinel::single sentinel
data nodes::data nodes
list consists::list consists
last data::last data
data node::data node
dummy node::dummy node
previous assignments::previous assignments
makes algorithms::makes algorithms
removing nodes::removing nodes
lists in-place::lists in-place
end-of-list marker::end-of-list marker
node data::node data
variable firstnode::variable firstnode
list record::list record
record node::record node
node node::node node
record list::record list
node firstnode::node firstnode
firstnode points::firstnode points
code inserts::code inserts
existing node::existing node
diagram shows::diagram shows
works inserting::works inserting
function insertafter::function insertafter
node newnode::node newnode
insert newnode::insert newnode
node.next node.next::node.next node.next
newnode inserting::newnode inserting
list requires::list requires
separate function::separate function
updating firstnode::updating firstnode
firstnode function::firstnode function
function insertbeginning::function insertbeginning
list list::list list
insert node::insert node
current first::current first
list.firstnode list.firstnode::list.firstnode list.firstnode
diagram demonstrates::diagram demonstrates
previous element::previous element
element function::element function
function removeafter::function removeafter
remove node::remove node
node past::node past
node.next.next destroy::node.next.next destroy
destroy obsoletenode::destroy obsoletenode
obsoletenode function::obsoletenode function
function removebeginning::function removebeginning
node obsoletenode::node obsoletenode
list.firstnode.next point::list.firstnode.next point
point past::point past
past deleted::past deleted
deleted node::deleted node
node destroy::node destroy
obsoletenode notice::obsoletenode notice
iterate backwards::iterate backwards
efficient insertbefore::efficient insertbefore
removebefore operations::removebefore operations
entire first::entire first
first list::first list
list appending::list appending
lisp family::lisp family
append procedure::append procedure
dummy element::dummy element
found atlist.firstnode.next::found atlist.firstnode.next
continuous circle::continuous circle
node elements::node elements
doubly linked::doubly linked
lists benefit::lists benefit
full list::full list
list beginning::list beginning
avoid storing::avoid storing
storing firstnode::storing firstnode
special representation::special representation
non-empty list::non-empty list
case algorithms::case algorithms
non-empty circular::non-empty circular
code iterates::code iterates
list starting::list starting
function iterate::function iterate
somenode null::somenode null
null node::null node
node.value node::node.value node
node somenode::node somenode
somenode notice::somenode notice
function inserts::function inserts
empty function::empty function
newnode suppose::newnode suppose
variable pointing::variable pointing
newnode linked::newnode linked
create links::create links
replacing pointers::replacing pointers
array indices::array indices
integer fields::integer fields
fields indicating::fields indicating
supported,parallel arrays::supported,parallel arrays
record entry::record entry
array integer::array integer
integer prev::integer prev
previous entry::previous entry
real balance::real balance
first element::first element
element integer::element integer
integer listhead::integer listhead
listhead entry::listhead entry
entry records::entry records
array index::array index
prev field::prev field
first entry::first entry
list notice::list notice
listfree integer::listfree integer
free list::free list
display names::display names
account balance::account balance
list print::list print
.balance print::.balance print
print entry::print entry
approach include::approach include
small list::small list
array indexes::array indexes
full pointer::full pointer
general store::general store
dynamic memory::dynamic memory
memory allocators::memory allocators
excessive amount::excessive amount
overhead storage::overhead storage
node allocated::node allocated
allocation overhead::allocation overhead
pre-allocated array::pre-allocated array
memory allocation::memory allocation
free memory::free memory
memory block::memory block
desired size::desired size
main disadvantage::main disadvantage
private memory::private memory
memory space::memory space
increases complexity::increases complexity
large array::large array
finding space::finding space
general memory::general memory
memory pool::memory pool
adding elements::adding elements
amortized constant::amortized constant
pool leaves::pool leaves
maximum size::maximum size
created language::created language
programming languages::programming languages
lists built::lists built
functional languages::functional languages
consor cons::consor cons
cons cell::cons cell
cons cells::cons cells
primary purpose::primary purpose
support abstract::support abstract
list adts::list adts
building linked::building linked
internal storage::internal storage
making access::making access
simplifying memory::simplifying memory
memory management::memory management
machine code::machine code
multiple linked::multiple linked
multiple lists::multiple lists
including multiple::including multiple
separate routines::separate routines
delete cells::delete cells
cells based::cells based
store references::store references
list package::list package
languages involves::languages involves
initial fields::initial fields
separate structures::separate structures
generic structure::generic structure
minimum amount::minimum amount
data shared::data shared
generic routines::generic routines
minimal structure::minimal structure
list type::list type
type operations::type operations
specific data::specific data
message parsing::message parsing
parsing routines::parsing routines
message type::message type
type field::type field
correct routine::correct routine
specific type::specific type
record member::record member
family member::family member
string firstname::string firstname
integer age::integer age
record family::record family
string lastname::string lastname
string address::string address
member members::member members
members head::members head
complete list::complete list
families start::families start
families list::families list
null loop::null loop
families print::families print
print information::print information
family amember::family amember
amember null::amember null
members print::members print
member amember::member amember
amember.next afamily::amember.next afamily
generic link::generic link
link structure::link structure
structure node::structure node
pointer data::pointer data
generic pointer::generic pointer
member string::member string
family string::family string
node members::node members
famnode null::famnode null
famnode.data extract::famnode.data extract
extract family::extract family
node print::node print
family memnode::family memnode
family members::family members
memnode null::memnode null
members amember::members amember
memnode.data extract::memnode.data extract
extract member::extract member
member memnode::member memnode
memnode.next famnode::memnode.next famnode
famnode.next notice::famnode.next notice
extra step::extra step
proper data::proper data
parametric types::parametric types
storage works::storage works
member needed::member needed
arbitrary number::arbitrary number
specific number::specific number
specific element::specific element
linear search::linear search
primary disadvantages::primary disadvantages
variants discussed::variants discussed
simple ways::simple ways
improve search::improve search
unordered list::unordered list
decreasing average::decreasing average
average search::average search
move-to-front heuristic::move-to-front heuristic
creating simple::creating simple
simple caches::simple caches
common approach::common approach
efficient external::efficient external
external data::external data
red-black tree::red-black tree
nodes multiple::nodes multiple
single list::single list
fast random::fast random
skew binary::skew binary
binary random::binary random
access listusing::access listusing
binary number::binary number
number system::number system
special properties::special properties
worst-case constant::worst-case constant
worst-case logarithmic::worst-case logarithmic
likewise support::likewise support
tail operations::tail operations
simple extension::simple extension
additional operation::additional operation
minimum element::minimum element
entire list::entire list
clarification needed::clarification needed
mutation complexities::mutation complexities
skip list::skip list
list augmented::list augmented
large numbers::large numbers
process continues::process continues
bottom layer::bottom layer
actual list::actual list
binary tree::binary tree
data values::data values
improved cache::improved cache
cache performance::cache performance
reduced memory::reduced memory
hash table::hash table
heap shares::heap shares
ordering properties::ordering properties
previous data::previous data
data indexes::data indexes
current data::current data
self-organizing list::self-organizing list
list rearranges::list rearranges
nodes based::nodes based
reduces search::reduces search
search times::search times
data retrieval::data retrieval
accessed nodes::accessed nodes
list notes::list notes
data required::data required
per-array constant::per-array constant
per-dimension constant::per-dimension constant
bytes footnotes::bytes footnotes
algorithm design::algorithm design
list predecessor::list predecessor
singly-linked list::singly-linked list
gerald kruse::gerald kruse
lecture notes::lecture notes
complexity trade-offs::complexity trade-offs
trade-offs juniata::trade-offs juniata
juniata college::juniata college
college spring::college spring
bjarne stroustrup::bjarne stroustrup
number crunching::number crunching
resizable arrays::resizable arrays
technical report::technical report
functional random-access::functional random-access
random-access lists::random-access lists
functional programming::functional programming
computer architecture::computer architecture
acm press::acm press
ch20 data::ch20 data
big java::big java
cays horstmann::cays horstmann
national institute::national institute
technology retrieved::technology retrieved
practical data::practical data
java collections::java collections
collections framework::collections framework
mcgraw hill::mcgraw hill
algorithms mit::algorithms mit
mit press::mit press
fundamental algorithms::fundamental algorithms
list basics::list basics
stanford university::stanford university
university retrieved::university retrieved
addison wesley::addison wesley
practical introduction::practical introduction
algorithm analysis::algorithm analysis
prentice hall::prentice hall
maurice vincent::maurice vincent
self-compiling compiler::self-compiling compiler
simple list-processing::simple list-processing
list-processing language::list-processing language
annual review::annual review
automatic programming::automatic programming
pergamon press::pergamon press
national conference::national conference
linux kernel::linux kernel
kernel linked::kernel linked
list explained::list explained
wikimedia commons::wikimedia commons
media related::media related
university computer::university computer
science library::science library
list problems::list problems
open data::open data
structures types::structures types
container abstract::container abstract
associative array::associative array
double-ended priority::double-ended priority
priority queue::priority queue
double-ended queue::double-ended queue
disjoint sets::disjoint sets
stack arrays::stack arrays
bit array::bit array
circular buffer::circular buffer
hashed array::hashed array
array tree::array tree
sparse array::sparse array
array linked::array linked
association list::association list
list trees::list trees
binary search::binary search
search tree::search tree
tree graphs::tree graphs
binary decision::binary decision
decision diagram::decision diagram
acyclic graph::acyclic graph
acyclic word::acyclic word
word graph::word graph
structures authority::structures authority
authority control::authority control
linked::linked
list::list
wikipedia::wikipedia
free::free
encyclopedia::encyclopedia
article::article
includes::includes
references::references
sources::sources
remain::remain
unclear::unclear
insufficient::insufficient
inline::inline
citations::citations
improve::improve
introducing::introducing
precise::precise
march::march
computer::computer
science::science
data::data
structure::structure
consisting::consisting
group::group
nodes::nodes
represent::represent
sequence::sequence
simplest::simplest
form::form
node::node
composed::composed
reference::reference
words::words
link::link
complex::complex
variants::variants
add::add
additional::additional
links::links
efficient::efficient
insertion::insertion
removal::removal
elements::elements
position::position
two::two
fields::fields
integer::integer
value::value
last::last
terminator::terminator
signify::signify
end::end
lists::lists
common::common
structures::structures
implement::implement
abstract::abstract
types::types
including::including
type::type
stacks::stacks
queues::queues
associative::associative
arrays::arrays
s-expressions::s-expressions
uncommon::uncommon
directly::directly
basis::basis
implementation::implementation
principal::principal
benefit::benefit
conventional::conventional
array::array
easily::easily
inserted::inserted
removed::removed
reallocation::reallocation
reorganization::reorganization
entire::entire
items::items
stored::stored
contiguously::contiguously
memory::memory
disk::disk
declared::declared
source::source
code::code
compiling::compiling
running::running
program::program
point::point
constant::constant
number::number
operations::operations
previous::previous
added::added
maintained::maintained
traversal::traversal
hand::hand
simple::simple
random::random
access::access
indexing::indexing
basic::basic
obtaining::obtaining
assuming::assuming
separate::separate
finding::finding
datum::datum
locating::locating
place::place
require::require
sequential::sequential
scanning::scanning
advantages::advantages
disadvantages::disadvantages
contents::contents
hide::hide
history::history
concepts::concepts
nomenclature::nomenclature
singly::singly
doubly::doubly
multiply::multiply
circular::circular
sentinel::sentinel
empty::empty
hash::hash
linking::linking
handles::handles
combining::combining
alternatives::alternatives
tradeoffs::tradeoffs
dynamic::dynamic
linear::linear
circularly::circularly
linearly::linearly
6.1.1::6.1.1
6.2.1::6.2.1
algorithms::algorithms
language::language
support::support
internal::internal
external::external
storage::storage
speeding::speeding
search::search
related::related
notes::notes
footnotes::footnotes
edit::edit
allocating::allocating
needed::needed
deletion::deletion
implemented::implemented
executed::executed
reduce::reduce
expand::expand
real::real
overhead::overhead
tendency::tendency
due::due
pointers::pointers
requiring::requiring
extra::extra
space::space
read::read
order::order
beginning::beginning
inherently::inherently
incontiguously::incontiguously
greatly::greatly
increasing::increasing
required::required
individual::individual
difficulties::difficulties
arise::arise
reverse::reverse
traversing::traversing
instance::instance
cumbersome::cumbersome
navigate::navigate
backwards::backwards
easier::easier
wasted::wasted
back::back
pointer::pointer
developed::developed
allen::allen
newell::newell
cliff::cliff
shaw::shaw
herbert::herbert
simon::simon
rand::rand
corporation::corporation
primary::primary
information::information
processing::processing
ipl::ipl
authors::authors
develop::develop
early::early
artificial::artificial
intelligence::intelligence
programs::programs
logic::logic
theory::theory
machine::machine
general::general
problem::problem
solver::solver
chess::chess
reports::reports
work::work
appeared::appeared
ire::ire
transactions::transactions
conference::conference
proceedings::proceedings
western::western
joint::joint
first::first
unesco::unesco
international::international
now-classic::now-classic
diagram::diagram
blocks::blocks
representing::representing
arrows::arrows
pointing::pointing
successive::successive
appears::appears
programming::programming
proc::proc
wjcc::wjcc
february::february
recognized::recognized
acm::acm
turing::turing
award::award
made::made
contributions::contributions
psychology::psychology
human::human
cognition::cognition
translation::translation
natural::natural
led::led
victor::victor
yngve::yngve
massachusetts::massachusetts
institute::institute
technology::technology
mit::mit
comit::comit
research::research
field::field
linguistics::linguistics
report::report
entitled::entitled
mechanical::mechanical
lisp::lisp
standing::standing
processor::processor
created::created
john::john
mccarthy::mccarthy
published::published
design::design
paper::paper
communications::communications
recursive::recursive
functions::functions
symbolic::symbolic
expressions::expressions
computation::computation
part::part
major::major
1960s::1960s
utility::utility
languages::languages
representation::representation
established::established
bert::bert
green::green
lincoln::lincoln
laboratory::laboratory
review::review
symbol::symbol
manipulation::manipulation
factors::factors
electronics::electronics
summarized::summarized
approach::approach
comparison::comparison
list-processing::list-processing
bobrow::bobrow
raphael::raphael
april::april
operating::operating
systems::systems
technical::technical
consultants::consultants
originally::originally
west::west
lafayette::lafayette
indiana::indiana
chapel::chapel
hill::hill
north::north
carolina::carolina
file::file
directory::directory
entry::entry
pointed::pointed
sector::sector
succeeding::succeeding
portions::portions
located::located
technique::technique
included::included
flex::flex
motorola::motorola
cpu::cpu
mini-flex::mini-flex
flex9::flex9
variant::variant
tsc::tsc
marketed::marketed
smoke::smoke
signal::signal
broadcasting::broadcasting
california::california
manner::manner
tss::NNP
system::system
ibm::ibm
machines::machines
double::double
catalog::catalog
similar::similar
unix::unix
files::files
directories::directories
extend::extend
depth::depth
record::record
element::element
node::node
address::address
next::next
pointer::pointer
remaining::remaining
data::data
information::information
value::value
cargo::cargo
payload::payload
head::head
tail::tail
rest::rest
head::head
derived::derived
cdr::cdr
pronounced::pronounced
could-er::could-er
payload::payload
car::car
points::points
line::line
performed::performed
include::include
main::main
doubly::doubly
next-node::next-node
previous::previous
forward::forward
backwards::backwards
prev::prev
forward::forward
backward::backward
xor-linking::xor-linking
single::single
requires::requires
ability::ability
bit::bit
addresses::addresses
high-level::high-level
multiply::multiply
connect::connect
set::set
records::records
e.g::e.g
department::department
date::date
birth::birth
special::special
cases::cases
fact::fact
orders::orders
opposite::opposite
leads::leads
simpler::simpler
treated::treated
case::case
null::null
lack::lack
convention::convention
make::make
circular::circular
circularly::circularly
open::open
linear::linear
change::change
occurs::occurs
tail::tail
front::front
vice::vice
versa::versa
implementations::implementations
sentinel::sentinel
dummy::dummy
simplifies::simplifies
accelerates::accelerates
list-handling::list-handling
ensuring::ensuring
safely::safely
dereferenced::dereferenced
physically::physically
referenced::referenced
indices::indices
address::address
pointer::pointer
handle::handle
manipulate::manipulate
input::input
return::return
resulting::resulting
context::context
word::word
means::means
handle::handle
situations::situations
convenient::convenient
consists::consists
listed::listed
arbitrarily::arbitrarily
combined::combined
sentinels::sentinels
choices::choices
method::method
suited::suited
circumstances::circumstances
problems::problems
involving::involving
balanced::balanced
tree::tree
log::log
element::element
unknown::unknown
n::-NONE-
amortized::amortized
updating::updating
middle::middle
average::average
allocates::allocates
count::count
current::current
reserved::reserved
exceeded::exceeded
reallocated::reallocated
possibly::possibly
copied::copied
expensive::expensive
operation::operation
specific::specific
indexed::indexed
constant-time::constant-time
locations::locations
moving::moving
half::half
worst::worst
delete::delete
marking::marking
slot::slot
vacant::vacant
fragmentation::fragmentation
impedes::impedes
performance::performance
iteration::iteration
limited::limited
total::total
eventually::eventually
fill::fill
underlying::underlying
reallocate::reallocate
fragmented::fragmented
cost::cost
averaged::averaged
insertions::insertions
helps::helps
appending::appending
inserting::inserting
removing::removing
positions::positions
carries::carries
prohibitive::prohibitive
costs::costs
maintain::maintain
contiguity::contiguity
resized::resized
avoid::avoid
wasting::wasting
fixed-size::fixed-size
traversed::traversed
direction::direction
makes::makes
unsuitable::unsuitable
applications::applications
index::index
quickly::quickly
heapsort::heapsort
faster::faster
optimal::optimal
locality::locality
referenceand::referenceand
good::good
caching::caching
disadvantage::disadvantage
impractical::impractical
small::small
characters::characters
boolean::boolean
values::values
exceed::exceed
factor::factor
size::size
contrast::contrast
amount::amount
control::control
note::note
slow::slow
allocator::allocator
wasteful::wasteful
allocate::allocate
separately::separately
generally::generally
solved::solved
pools::pools
hybrid::hybrid
solutions::solutions
combine::combine
representations::representations
unrolled::unrolled
store::store
cache::cache
decreasing::decreasing
cdr::cdr
coding::coding
replacing::replacing
actual::actual
extends::extends
referencing::referencing
highlights::highlights
pros::pros
cons::cons
implementing::implementing
resolves::resolves
josephus::josephus
election::election
works::works
people::people
stand::stand
circle::circle
starting::starting
predetermined::predetermined
person::person
times::times
reach::reach
nth::nth
out::out
members::members
close::close
repeat::repeat
process::process
left::left
wins::wins
shows::shows
strengths::strengths
weaknesses::weaknesses
view::view
connected::connected
rearrange::rearrange
poor::poor
remove::remove
finds::finds
deleting::deleting
individually::individually
shifting::shifting
exceptionally::exceptionally
easy::easy
find::find
ranking::ranking
concerns::concerns
conversion::conversion
trivial::trivial
solving::solving
aparallel::aparallel
algorithm::algorithm
complicated::complicated
subject::subject
patterns::patterns
permitting::permitting
taking::taking
manipulations::manipulations
balance::balance
schemes::schemes
exist::exist
trees::trees
automatically::automatically
state::state
avl::avl
red-black::red-black
doubly-linked::doubly-linked
singly-linked::singly-linked
offer::offer
preferable::preferable
smaller::smaller
object::object
reason::reason
merging::merging
enumerating::enumerating
solution::solution
iterative::iterative
commands::commands
adapted::adapted
procedures::procedures
arguments::arguments
base::base
tail-sharing::tail-sharing
final::final
portion::portion
sub-list::sub-list
terminal::terminal
remains::remains
persistent::persistent
true::true
belong::belong
end-sentinel::end-sentinel
shared::shared
non-circular::non-circular
proper::proper
ends::ends
denoted::denoted
nil::nil
car::car
procedure::procedure
anylist::anylist
fancy::fancy
complexity::complexity
efficiency::efficiency
emulated::emulated
variables::variables
double-linked::double-linked
elementary::elementary
fast::fast
directions::directions
insert::insert
option::option
naturally::naturally
corners::corners
polygon::polygon
pool::pool
buffers::buffers
released::released
fifo::fifo
processes::processes
time-shared::time-shared
round-robin::round-robin
serves::serves
queue::queue
split::split
giving::giving
piece::piece
swapping::swapping
applying::applying
distinct::distinct
joins::joins
property::property
quad-edge::quad-edge
face-edge::face-edge
thing::thing
sense::sense
indicating::indicating
choice::choice
test::test
denote::denote
creates::creates
fewer::fewer
simplify::simplify
eliminate::eliminate
end-of-list::end-of-list
tests::tests
setting::setting
unnecessary::unnecessary
inside::inside
loop::loop
sorted::sorted
output::output
handling::handling
short::short
complicate::complicate
creation::creation
simulate::simulate
adding::adding
trick::trick
turning::turning
dummy::dummy
manipulating::manipulating
in-place::in-place
care::care
invalidated::invalidated
assignments::assignments
subtle::subtle
section::section
pseudocode::pseudocode
nullto::nullto
marker::marker
ways::ways
variable::variable
firstnode::firstnode
list.firstnode::list.firstnode
node.data::node.data
node.next::node.next
inserts::inserts
existing::existing
done::done
track::track
function::function
insertafter::insertafter
newnode::newnode
newnode.next::newnode.next
insertbeginning::insertbeginning
similarly::similarly
demonstrates::demonstrates
removeafter::removeafter
past::past
obsoletenode::obsoletenode
node.next.next::node.next.next
destroy::destroy
removebeginning::removebeginning
list.firstnode.next::list.firstnode.next
deleted::deleted
notice::notice
sets::sets
nt::nt
iterate::iterate
insertbefore::insertbefore
removebefore::removebefore
inefficient::inefficient
traverse::traverse
append::append
length::length
asymptotic::asymptotic
family::family
provided::provided
eliminated::eliminated
ensures::ensures
renders::renders
found::found
atlist.firstnode.next::atlist.firstnode.next
continuous::continuous
stores::stores
full::full
storing::storing
lastnode::lastnode
alastnode::alastnode
significantly::significantly
non-empty::non-empty
somenode::somenode
iterates::iterates
node.value::node.value
moved::moved
fail::fail
assumes::assumes
suppose::suppose
create::create
supported,parallel::supported,parallel
prev::prev
string::string
build::build
creating::creating
listhead::listhead
formed::formed
placing::placing
cell::cell
jones::jones
smith::smith
joseph::joseph
adams::adams
adam::adam
ignore::ignore
ignatius::ignatius
anita::anita
location::location
cells::cells
additions::additions
listfree::listfree
entries::entries
increased::increased
display::display
names::names
account::account
print::print
.name::.name
.balance::.balance
.next::.next
faced::faced
relocatable::relocatable
meaning::meaning
serialized::serialized
transfer::transfer
network::network
indexes::indexes
occupy::occupy
architectures::architectures
improved::improved
keeping::keeping
periodically::periodically
rearranging::rearranging
allocators::allocators
produce::produce
excessive::excessive
allocated::allocated
allocation::allocation
incurred::incurred
seizing::seizing
pre-allocated::pre-allocated
typically::typically
block::block
desired::desired
manages::manages
private::private
issues::issues
increases::increases
growing::growing
large::large
difficult::difficult
impossible::impossible
occasionally::occasionally
unexpectedly::unexpectedly
leaves::leaves
expected::expected
freed::freed
reasons::reasons
mitigated::mitigated
maximum::maximum
scheme::scheme
built::built
functional::functional
constructed::constructed
consor::consor
purpose::purpose
templates::templates
adts::adts
building::building
constructing::constructing
advantage::advantage
making::making
simplifying::simplifying
management::management
deallocated::deallocated
generic::generic
matter::matter
multiple::multiple
routines::routines
based::based
slightly::slightly
package::package
likewise::likewise
involves::involves
initial::initial
defining::defining
defined::defined
minimum::minimum
contained::contained
top::top
minimal::minimal
perform::perform
message::message
parsing::parsing
messages::messages
received::received
start::start
call::call
correct::correct
routine::routine
wanted::wanted
families::families
member::member
firstname::firstname
age::age
lastname::lastname
complete::complete
write::write
afamily::afamily
amember::amember
afamily.members::afamily.members
amember.next::amember.next
afamily.next::afamily.next
famnode::famnode
famnode.data::famnode.data
extract::extract
memnode::memnode
memnode.data::memnode.data
memnode.next::memnode.next
famnode.next::famnode.next
step::step
cast::cast
parametric::parametric
long::long
compile::compile
arbitrary::arbitrary
run::run
addition::addition
discussed::discussed
unordered::unordered
heuristic::heuristic
move-to-front::move-to-front
simply::simply
moves::moves
handy::handy
caches::caches
recently::recently
quickest::quickest
table::table
updated::updated
modify::modify
skew::skew
binary::binary
listusing::listusing
properties::properties
worst-case::worst-case
head::NNS
logarithmic::logarithmic
viewed::viewed
immutable::immutable
extension::extension
min-list::min-list
yields::yields
clarification::clarification
mutation::mutation
complexities::complexities
restrict::restrict
supported::supported
skip::skip
augmented::augmented
layers::layers
jumping::jumping
numbers::numbers
descending::descending
layer::layer
continues::continues
bottom::bottom
nature::nature
result::result
subtrees::subtrees
contiguous::contiguous
reduced::reduced
metadata::metadata
chains::chains
heap::heap
shares::shares
ordering::ordering
calculated::calculated
self-organizing::self-organizing
rearranges::rearranges
reduces::reduces
retrieval::retrieval
commonly::commonly
accessed::accessed
jump::jump
per-array::per-array
per-dimension::per-dimension
dimensions::dimensions
bytes::bytes
skiena::skiena
steven::steven
manual::manual
2nd::2nd
springer::springer
isbn::isbn
predecessor::predecessor
spend::spend
searching::searching
gerald::gerald
kruse::kruse
lecture::lecture
trade-offs::trade-offs
juniata::juniata
college::college
spring::spring
day::day
keynote::keynote
bjarne::bjarne
stroustrup::stroustrup
style::style
goingnative::goingnative
channel9.msdn.com::channel9.msdn.com
minute::minute
foil::foil
crunching::crunching
linked-list::linked-list
kjellkod.wordpress.com::kjellkod.wordpress.com
brodnik::brodnik
andrej::andrej
carlsson::carlsson
svante::svante
sedgewick::sedgewick
robert::robert
munro::munro
demaine::demaine
resizable::resizable
cs-99-09::cs-99-09
pdf::pdf
university::university
waterloo::waterloo
ford::ford
william::william
topp::topp
stl::stl
prentice-hall::prentice-hall
0-13-085850-1::0-13-085850-1
okasaki::okasaki
chris::chris
purely::purely
random-access::random-access
architecture::architecture
press::press
retrieved::retrieved
7,2015::7,2015
juan::juan
angel::angel
ch20::ch20
id06::id06
java::java
book::book
big::big
cays::cays
horstmann::horstmann
black::black
paul::paul
2004-08-16::2004-08-16
pieterse::pieterse
vreda::vreda
eds::eds
dictionary::dictionary
national::national
standards::standards
2004-12-14::2004-12-14
antonakos::antonakos
james::james
mansfield::mansfield
kenneth::kenneth
practical::practical
0-13-280843-9::0-13-280843-9
collins::collins
collections::collections
framework::framework
york::york
mcgraw::mcgraw
0-07-282379-8::0-07-282379-8
cormen::cormen
thomas::thomas
leiserson::leiserson
charles::charles
rivest::rivest
ronald::ronald
stein::stein
clifford::clifford
introduction::introduction
213,501::213,501
0-262-03293-7::0-262-03293-7
209.isbn::209.isbn
doi::doi
184.doi::184.doi
knuth::knuth
donald::donald
2.2.3-2.2.5::2.2.3-2.2.5
fundamental::fundamental
3rd::3rd
addison-wesley::addison-wesley
0-201-89683-4::0-201-89683-4
parlante::parlante
nick::nick
basics::basics
stanford::stanford
2009-09-21::2009-09-21
addison::addison
wesley::wesley
0-201-31452-5::0-201-31452-5
shaffer::shaffer
analysis::analysis
jersey::jersey
prentice::prentice
hall::hall
0-13-660911-2::0-13-660911-2
wilkes::wilkes
maurice::maurice
vincent::vincent
experiment::experiment
self-compiling::self-compiling
compiler::compiler
annual::annual
automatic::automatic
pergamon::pergamon
90013-8::90013-8
proceeds::proceeds
philadelphia::philadelphia
shanmugasundaram::shanmugasundaram
kulesh::kulesh
2005-04-04::2005-04-04
linux::linux
kernel::kernel
explained::explained
wikimedia::wikimedia
commons::commons
media::media
description::description
library::library
open::open
chapter::chapter
patent::patent
idea::idea
simultaneously::simultaneously
widely::widely
decades::decades
granted::granted
collection::collection
container::container
double-ended::double-ended
priority::priority
map::map
multimap::multimap
multiset::multiset
disjoint::disjoint
stack::stack
buffer::buffer
hashed::hashed
sparse::sparse
association::association
xor::xor
b-tree::b-tree
self-balancing::self-balancing
splay::splay
binomial::binomial
fibonacci::fibonacci
r-tree::r-tree
hilbert::hilbert
trie::trie
graphs::graphs
decision::decision
directed::directed
acyclic::acyclic
graph::graph
authority::authority
gnd::gnd
4783888-7::4783888-7
categories::categories
