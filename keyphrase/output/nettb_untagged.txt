this page intentionally left blank computer networks fifth edition this page intentionally left blank computer networks fifth edition andrew s tanenbaum vrije universiteit amsterdam  the netherlands david j wetherall university of washington seattle  wa prentice hall boston columbus indianapolis new york san francisco upper saddle river amsterdam cape town dubai london madrid milan paris montreal toronto delhi mexico city sao paulo sydney hong kong seoul singapore tapei tokyo editorial director  marcia horton editor-in-chief  michael hirsch executive editor  tracy dunkelberger assistant editor  melinda haggerty editorial assistant  allison michael vice president  marketing  patrice jones marketing manager  yezan alayan marketing coordinator  kathryn ferranti vice president  production  vince o ? brien managing editor  jeff holcomb senior operations supervisor  alan fischer manufacturing buyer  lisa mcdowell cover direction  andrew s tanenbaum  david j wetherall  tracy dunkelberger art director  linda knowles cover designer  susan paradise cover illustration  jason consalvo interior design  andrew s tanenbaum av production project manager  gregory l dulles interior illustrations  laserwords  inc media editor  daniel sandin composition  andrew s tanenbaum copyeditor  rachel head proofreader  joe ruddick printer/binder  courier/westford cover printer  lehigh-phoenix color/ hagerstown credits and acknowledgments borrowed from other sources and reproduced  with permission  in this textbook appear on appropriate page within text many of the designations by manufacturers and sellers to distinguish their products are claimed as trademarks where those designations appear in this book  and the publisher was aware of a trademark claim  the designations have been printed in initial caps or all caps copyright ? 2011  2003  1996  1989  1981 pearson education  inc  publishing as prentice hall all rights reserved manufactured in the united states of america this publication is protected by copyright  and permission should be obtained from the publisher prior to any prohibited reproduction  storage in a retrieval system  or transmission in any form or by any means  electronic  mechanical  photocopying  recording  or likewise to obtain permission  s  to use material from this work  please submit a written request to pearson education  inc  permissions department  501 boylston street  suite 900  boston  massachusetts 02116 library of congress cataloging-in-publication data tanenbaum  andrew s  1944 computer networks / andrew s tanenbaum  david j wetherall  5th ed p cm includes bibliographical references and index isbn-13  978-0-13-212695-3  alk paper  isbn-10  0-13-212695-8  alk paper  1 computer networks i wetherall  d  david  ii title tk5105.5.t36 2011 004.6--dc22 2010034366 10 9 8 7 6 5 4 3 2 1 ? crw ? 14 13 12 11 10 to suzanne  barbara  daniel  aron  marvin  matilde  and the memory of bram  and sweetie ? ?  ast  to katrin  lucy  and pepper  djw  this page intentionally left blank contents preface xix 1 introduction 1 1.1 uses of computer networks  3 1.1.1 business applications  3 1.1.2 home applications  6 1.1.3 mobile users  10 1.1.4 social issues  14 1.2 network hardware  17 1.2.1 personal area networks  18 1.2.2 local area networks  19 1.2.3 metropolitan area networks  23 1.2.4 wide area networks  23 1.2.5 internetworks  28 1.3 network software  29 1.3.1 protocol hierarchies  29 1.3.2 design issues for the layers  33 1.3.3 connection-oriented versus connectionless service  35 1.3.4 service primitives  38 1.3.5 the relationship of services to protocols  40 1.4 reference models  41 1.4.1 the osi reference model  41 1.4.2 the tcp/ip reference model  45 1.4.3 the model used in this book  48 vii viii contents 1.4.4 a comparison of the osi and tcp/ip reference models *  49 1.4.5 a critique of the osi model and protocols *  51 1.4.6 a critique of the tcp/ip reference model *  53 1.5 example networks  54 1.5.1 the internet  54 1.5.2 third-generation mobile phone networks *  65 1.5.3 wireless lans  802.11 *  70 1.5.4 rfid and sensor networks *  73 1.6 network standardization *  75 1.6.1 who ? s who in the telecommunications world  77 1.6.2 who ? s who in the international standards world  78 1.6.3 who ? s who in the internet standards world  80 1.7 metric units  82 1.8 outline of the rest of the book  83 1.9 summary  84 2 the physical layer 89 2.1 the theoretical basis for data communication  90 2.1.1 fourier analysis  90 2.1.2 bandwidth-limited signals  90 2.1.3 the maximum data rate of a channel  94 2.2 guided transmission media  95 2.2.1 magnetic media  95 2.2.2 twisted pairs  96 2.2.3 coaxial cable  97 2.2.4 power lines  98 2.2.5 fiber optics  99 2.3 wireless transmission  105 2.3.1 the electromagnetic spectrum  105 2.3.2 radio transmission  109 2.3.3 microwave transmission  110 2.3.4 infrared transmission  114 2.3.5 light transmission  114 contents ix 2.4 communication satellites *  116 2.4.1 geostationary satellites  117 2.4.2 medium-earth orbit satellites  121 2.4.3 low-earth orbit satellites  121 2.4.4 satellites versus fiber  123 2.5 digital modulation and multiplexing  125 2.5.1 baseband transmission  125 2.5.2 passband transmission  130 2.5.3 frequency division multiplexing  132 2.5.4 time division multiplexing  135 2.5.5 code division multiplexing  135 2.6 the public switched telephone network  138 2.6.1 structure of the telephone system  139 2.6.2 the politics of telephones  142 2.6.3 the local loop  modems  adsl  and fiber  144 2.6.4 trunks and multiplexing  152 2.6.5 switching  161 2.7 the mobile telephone system *  164 2.7.1 first-generation  coco1g  mobile phones  analog voice  166 2.7.2 second-generation  2g  mobile phones  digital voice  170 2.7.3 third-generation  3g  mobile phones  digital voice and data  174 2.8 cable television *  179 2.8.1 community antenna television  179 2.8.2 internet over cable  180 2.8.3 spectrum allocation  182 2.8.4 cable modems  183 2.8.5 adsl versus cable  185 2.9 summary  186 3 the data link layer 193 3.1 data link layer design issues  194 3.1.1 services provided to the network layer  194 3.1.2 framing  197 3.1.3 error control  200 3.1.4 flow control  201 x contents 3.2 error detection and correction  202 3.2.1 error-correcting codes  204 3.2.2 error-detecting codes  209 3.3 elementary data link protocols  215 3.3.1 a utopian simplex protocol  220 3.3.2 a simplex stop-and-wait protocol for an error-free channel  221 3.3.3 a simplex stop-and-wait protocol for a noisy channel  222 3.4 sliding window protocols  226 3.4.1 a one-bit sliding window protocol  229 3.4.2 a protocol using go-back-n  232 3.4.3 a protocol using selective repeat  239 3.5 example data link protocols  244 3.5.1 packet over sonet  245 3.5.2 adsl  asymmetric digital subscriber loop   248 3.6 summary  251 4 the medium access control sublayer 257 4.1 the channel allocation problem  258 4.1.1 static channel allocation  258 4.1.2 assumptions for dynamic channel allocation  260 4.2 multiple access protocols  261 4.2.1 aloha  262 4.2.2 carrier sense multiple access protocols  266 4.2.3 collision-free protocols  269 4.2.4 limited-contention protocols  274 4.2.5 wireless lan protocols  277 4.3 ethernet  280 4.3.1 classic ethernet physical layer  281 4.3.2 classic ethernet mac sublayer protocol  282 4.3.3 ethernet performance  286 4.3.4 switched ethernet  288 contents xi 4.3.5 fast ethernet  290 4.3.6 gigabit ethernet  293 4.3.7 10-gigabit ethernet  296 4.3.8 retrospective on ethernet  298 4.4 wireless lans  299 4.4.1 the 802.11 architecture and protocol stack  299 4.4.2 the 802.11 physical layer  301 4.4.3 the 802.11 mac sublayer protocol  303 4.4.4 the 802.11 frame structure  309 4.4.5 services  311 4.5 broadband wireless *  312 4.5.1 comparison of 802.16 with 802.11 and 3g  313 4.5.2 the 802.16 architecture and protocol stack  314 4.5.3 the 802.16 physical layer  316 4.5.4 the 802.16 mac sublayer protocol  317 4.5.5 the 802.16 frame structure  319 4.6 bluetooth *  320 4.6.1 bluetooth architecture  320 4.6.2 bluetooth applications  321 4.6.3 the bluetooth protocol stack  322 4.6.4 the bluetooth radio layer  324 4.6.5 the bluetooth link layers  324 4.6.6 the bluetooth frame structure  325 4.7 rfid *  327 4.7.1 epc gen 2 architecture  327 4.7.2 epc gen 2 physical layer  328 4.7.3 epc gen 2 tag identification layer  329 4.7.4 tag identification message formats  331 4.8 data link layer switching  332 4.8.1 uses of bridges  332 4.8.2 learning bridges  334 4.8.3 spanning tree bridges  337 4.8.4 repeaters  hubs  bridges  switches  routers  and gateways  340 4.8.5 virtual lans  342 4.9 summary  349 xii contents 5 the network layer 355 5.1 network layer design issues  355 5.1.1 store-and-forward packet switching  356 5.1.2 services provided to the transport layer  356 5.1.3 implementation of connectionless service  358 5.1.4 implementation of connection-oriented service  359 5.1.5 comparison of virtual-circuit and datagram networks  361 5.2 routing algorithms  362 5.2.1 the optimality principle  364 5.2.2 shortest path algorithm  366 5.2.3 flooding  368 5.2.4 distance vector routing  370 5.2.5 link state routing  373 5.2.6 hierarchical routing  378 5.2.7 broadcast routing  380 5.2.8 multicast routing  382 5.2.9 anycast routing  385 5.2.10 routing for mobile hosts  386 5.2.11 routing in ad hoc networks  389 5.3 congestion control algorithms  392 5.3.1 approaches to congestion control  394 5.3.2 traffic-aware routing  395 5.3.3 admission control  397 5.3.4 traffic throttling  398 5.3.5 load shedding  401 5.4 quality of service  404 5.4.1 application requirements  405 5.4.2 traffic shaping  407 5.4.3 packet scheduling  411 5.4.4 admission control  415 5.4.5 integrated services  418 5.4.6 differentiated services  421 5.5 internetworking  424 5.5.1 how networks differ  425 5.5.2 how networks can be connected  426 5.5.3 tunneling  429 contents xiii 5.5.4 internetwork routing  431 5.5.5 packet fragmentation  432 5.6 the network layer in the internet  436 5.6.1 the ip version 4 protocol  439 5.6.2 ip addresses  442 5.6.3 ip version 6  455 5.6.4 internet control protocols  465 5.6.5 label switching and mpls  470 5.6.6 ospf ? an interior gateway routing protocol  474 5.6.7 bgp ? the exterior gateway routing protocol  479 5.6.8 internet multicasting  484 5.6.9 mobile ip  485 5.7 summary  488 6 the transport layer 495 6.1 the transport service  495 6.1.1 services provided to the upper layers  496 6.1.2 transport service primitives  498 6.1.3 berkeley sockets  500 6.1.4 an example of socket programming  an internet file server  503 6.2 elements of transport protocols  507 6.2.1 addressing  509 6.2.2 connection establishment  512 6.2.3 connection release  517 6.2.4 error control and flow control  522 6.2.5 multiplexing  527 6.2.6 crash recovery  527 6.3 congestion control  530 6.3.1 desirable bandwidth allocation  531 6.3.2 regulating the sending rate  535 6.3.3 wireless issues  539 6.4 the internet transport protocols  udp  541 6.4.1 introduction to udp  541 6.4.2 remote procedure call  543 6.4.3 real-time transport protocols  546 xiv contents 6.5 the internet transport protocols  tcp  552 6.5.1 introduction to tcp  552 6.5.2 the tcp service model  553 6.5.3 the tcp protocol  556 6.5.4 the tcp segment header  557 6.5.5 tcp connection establishment  560 6.5.6 tcp connection release  562 6.5.7 tcp connection management modeling  562 6.5.8 tcp sliding window  565 6.5.9 tcp timer management  568 6.5.10 tcp congestion control  571 6.5.11 the future of tcp  581 6.6 performance issues *  582 6.6.1 performance problems in computer networks  583 6.6.2 network performance measurement  584 6.6.3 host design for fast networks  586 6.6.4 fast segment processing  590 6.6.5 header compression  593 6.6.6 protocols for long fat networks  595 6.7 delay-tolerant networking *  599 6.7.1 dtn architecture  600 6.7.2 the bundle protocol  603 6.8 summary  605 7 the application layer 611 7.1 dns ? the domain name system  611 7.1.1 the dns name space  612 7.1.2 domain resource records  616 7.1.3 name servers  619 7.2 electronic mail *  623 7.2.1 architecture and services  624 7.2.2 the user agent  626 7.2.3 message formats  630 7.2.4 message transfer  637 7.2.5 final delivery  643 contents xv 7.3 the world wide web  646 7.3.1 architectural overview  647 7.3.2 static web pages  662 7.3.3 dynamic web pages and web applications  672 7.3.4 http ? the hypertext transfer protocol  683 7.3.5 the mobile web  693 7.3.6 web search  695 7.4 streaming audio and video  697 7.4.1 digital audio  699 7.4.2 digital video  704 7.4.3 streaming stored media  713 7.4.4 streaming live media  721 7.4.5 real-time conferencing  724 7.5 content delivery  734 7.5.1 content and internet traffic  736 7.5.2 server farms and web proxies  738 7.5.3 content delivery networks  743 7.5.4 peer-to-peer networks  748 7.6 summary  757 8 network security 763 8.1 cryptography  766 8.1.1 introduction to cryptography  767 8.1.2 substitution ciphers  769 8.1.3 transposition ciphers  771 8.1.4 one-time pads  772 8.1.5 two fundamental cryptographic principles  776 8.2 symmetric-key algorithms  778 8.2.1 des ? the data encryption standard  780 8.2.2 aes ? the advanced encryption standard  783 8.2.3 cipher modes  787 8.2.4 other ciphers  792 8.2.5 cryptanalysis  792 xvi contents 8.3 public-key algorithms  793 8.3.1 rsa  794 8.3.2 other public-key algorithms  796 8.4 digital signatures  797 8.4.1 symmetric-key signatures  798 8.4.2 public-key signatures  799 8.4.3 message digests  800 8.4.4 the birthday attack  804 8.5 management of public keys  806 8.5.1 certificates  807 8.5.2 x.509  809 8.5.3 public key infrastructures  810 8.6 communication security  813 8.6.1 ipsec  814 8.6.2 firewalls  818 8.6.3 virtual private networks  821 8.6.4 wireless security  822 8.7 authentication protocols  827 8.7.1 authentication based on a shared secret key  828 8.7.2 establishing a shared key  the diffie-hellman key exchange  833 8.7.3 authentication using a key distribution center  835 8.7.4 authentication using kerberos  838 8.7.5 authentication using public-key cryptography  840 8.8 email security *  841 8.8.1 pgp ? pretty good privacy  842 8.8.2 s/mime  846 8.9 web security  846 8.9.1 threats  847 8.9.2 secure naming  848 8.9.3 ssl ? the secure sockets layer  853 8.9.4 mobile code security  857 8.10 social issues  860 8.10.1 privacy  860 8.10.2 freedom of speech  863 8.10.3 copyright  867 8.11 summary  869 contents xvii 9 reading list and bibliography 877 9.1 suggestions for further reading *  877 9.1.1 introduction and general works  878 9.1.2 the physical layer  879 9.1.3 the data link layer  880 9.1.4 the medium access control sublayer  880 9.1.5 the network layer  881 9.1.6 the transport layer  882 9.1.7 the application layer  882 9.1.8 network security  883 9.2 alphabetical bibliography *  884 index 905 this page intentionally left blank preface this book is now in its fifth edition each edition has corresponded to a different phase in the way computer networks were used when the first edition appeared in 1980  networks were an academic curiosity when the second edition appeared in 1988  networks were used by universities and large businesses when the third edition appeared in 1996  computer networks  especially the internet  had become a daily reality for millions of people by the fourth edition  in 2003  wireless networks and mobile computers had become commonplace for accessing the web and the internet now  in the fifth edition  networks are about content distribution  especially videos using cdns and peer-to-peer networks  and mobile phones are small computers on the internet new in the fifth edition among the many changes in this book  the most important one is the addition of prof david j wetherall as a co-author david brings a rich background in networking  having cut his teeth designing metropolitan-area networks more than 20 years ago he has worked with the internet and wireless networks ever since and is a professor at the university of washington  where he has been teaching and doing research on computer networks and related topics for the past decade of course  the book also has many changes to keep up with the  ever-changing world of computer networks among these are revised and new material on wireless networks  802.12 and 802.16  the 3g networks used by smart phones rfid and sensor networks content distribution using cdns peer-to-peer networks real-time media  from stored  streaming  and live sources  internet telephony  voice over ip  delay-tolerant networks a more detailed chapter-by-chapter list follows xix xx preface chapter 1 has the same introductory function as in the fourth edition  but the contents have been revised and brought up to date the internet  mobile phone networks  802.11  and rfid and sensor networks are discussed as examples of computer networks material on the original ethernet ? with its vampire taps ? has been removed  along with the material on atm chapter 2  which covers the physical layer  has expanded coverage of digital modulation  including ofdm as widely used in wireless networks  and 3g networks  based on cdma   new technologies are discussed  including fiber to the home and power-line networking chapter 3  on point-to-point links  has been improved in two ways the material on codes for error detection and correction has been updated  and also includes a brief description of the modern codes that are important in practice  e.g  convolutional and ldpc codes   the examples of protocols now use packet over sonet and adsl sadly  the material on protocol verification has been removed as it is little used in chapter 4  on the mac sublayer  the principles are timeless but the technologies have changed sections on the example networks have been redone accordingly  including gigabit ethernet  802.11  802.16  bluetooth  and rfid also updated is the coverage of lan switching  including vlans chapter 5  on the network layer  covers the same ground as in the fourth edition the revisions have been to update material and add depth  particularly for quality of service  relevant for real-time media  and internetworking the sections on bgp  ospf and cidr have been expanded  as has the treatment of multicast routing anycast routing is now included chapter 6  on the transport layer  has had material added  revised  and removed new material describes delay-tolerant networking and congestion control in general the revised material updates and expands the coverage of tcp congestion control the material removed described connection-oriented network layers  something rarely seen any more chapter 7  on applications  has also been updated and enlarged while material on dns and email is similar to that in the fourth edition  in the past few years there have been many developments in the use of the web  streaming media and content delivery accordingly  sections on the web and streaming media have been brought up to date a new section covers content distribution  including cdns and peer-to-peer networks chapter 8  on security  still covers both symmetric and public-key cryptography for confidentiality and authenticity material on the techniques used in practice  including firewalls and vpns  has been updated  with new material on 802.11 security and kerberos v5 added chapter 9 contains a renewed list of suggested readings and a comprehensive bibliography of over 300 citations to the current literature more than half of these are to papers and books written in 2000 or later  and the rest are citations to classic papers preface xxi list of acronyms computer books are full of acronyms this one is no exception by the time you are finished reading this one  the following should ring a bell  adsl  aes  ajax  aodv  ap  arp  arq  as  bgp  boc  cdma  cdn  cgi  cidr  crl  csma  css  dct  des  dhcp  dht  difs  dmca  dmt  dmz  dns  docsis  dom  dslam  dtn  fcfs  fdd  fddi  fdm  fec  fifo  fsk  ftp  gprs  gsm  hdtv  hfc  hmac  http  iab  icann  icmp  idea  ietf  imap  imp  ip  iptv  irtf  iso  isp  itu  jpeg  jsp  jvm  lan  lata  lec  leo  llc  lsr  lte  man  mfj  mime  mpeg  mpls  msc  mtso  mtu  nap  nat  nrz  nsap  ofdm  osi  ospf  paws  pcm  pgp  pim  pki  pop  pots  ppp  pstn  qam  qpsk  red  rfc  rfid  rpc  rsa  rtsp  sha  sip  smtp  snr  soap  sonet  spe  ssl  tcp  tdd  tdm  tsap  udp  umts  url  vlan  vsat  wan  wdm  and xml but don ? t worry each will appear in boldface type and be carefully defined before it is used as a fun test  see how many you can identify before reading the book  write the number in the margin  then try again after reading the book how to use the book to help instructors use this book as a text for courses ranging in length from quarters to semesters  we have structured the chapters into core and optional material the sections marked with a ? ? * ? ? in the table of contents are the optional ones if a major section  e.g  2.7  is so marked  all of its subsections are optional they provide material on network technologies that is useful but can be omitted from a short course without loss of continuity of course  students should be encouraged to read those sections as well  to the extent they have time  as all the material is up to date and of value instructors ? resource materials the following protected instructors ? resource materials are available on the publisher ? s web site at www.pearsonhighered.com/tanenbaum for a username and password  please contact your local pearson representative solutions manual powerpoint lecture slides students ? resource materials resources for students are available through the open-access companion web site link on www.pearsonhighered.com/tanenbaum  including web resources  links to tutorials  organizations  faqs  and more figures  tables  and programs from the book steganography demo protocol simulators xxii preface acknowledgements many people helped us during the course of the fifth edition we would especially like to thank emmanuel agu  worcester polytechnic institute   yoris au  university of texas at antonio   nikhil bhargava  aircom international  inc   michael buettner  university of washington   john day  boston university   kevin fall  intel labs   ronald fulle  rochester institute of technology   ben greenstein  intel labs   daniel halperin  university of washington   bob kinicki  worcester polytechnic institute   tadayoshi kohno  university of washington   sarvish kulkarni  villanova university   hank levy  university of washington   ratul mahajan  microsoft research   craig partridge  bbn   michael piatek  university of washington   joshua smith  intel labs   neil spring  university of maryland   david teneyuca  university of texas at antonio   tammy vandegrift  university of portland   and bo yuan  rochester institute of technology   for providing ideas and feedback melody kadenko and julie svendsen provided administrative support to david shivakant mishra  university of colorado at boulder  and paul nagin  chimborazo publishing  inc  thought of many new and challenging end-of-chapter problems our editor at pearson  tracy dunkelberger  was her usual helpful self in many ways large and small melinda haggerty and jeff holcomb did a good job of keeping things running smoothly steve armstrong  letourneau university  prepared the powerpoint slides stephen turner  university of michigan at flint  artfully revised the web resources and the simulators that accompany the text our copyeditor  rachel head  is an odd hybrid  she has the eye of an eagle and the memory of an elephant after reading all her corrections  both of us wondered how we ever made it past third grade finally  we come to the most important people suzanne has been through this 19 times now and still has endless patience and love barbara and marvin now know the difference between good textbooks and bad ones and are always an inspiration to produce good ones daniel and matilde are welcome additions to our family aron is unlikely to read this book soon  but he likes the nice pictures on page 866  ast   katrin and lucy provided endless support and always managed to keep a smile on my face thank you  djw   andrew s tanenbaum david j.wetherall 1 introduction each of the past three centuries was dominated by a single new technology the 18th century was the era of the great mechanical systems accompanying the industrial revolution the 19th century was the age of the steam engine during the 20th century  the key technology was information gathering  processing  and distribution among other developments  we saw the installation of worldwide telephone networks  the invention of radio and television  the birth and unprecedented growth of the computer industry  the launching of communication satellites  and  of course  the internet as a result of rapid technological progress  these areas are rapidly converging in the 21st century and the differences between collecting  transporting  storing  and processing information are quickly disappearing organizations with hundreds of offices spread over a wide geographical area routinely expect to be able to examine the current status of even their most remote outpost at the push of a button as our ability to gather  process  and distribute information grows  the demand for ever more sophisticated information processing grows even faster although the computer industry is still young compared to other industries  e.g  automobiles and air transportation   computers have made spectacular progress in a short time during the first two decades of their existence  computer systems were highly centralized  usually within a single large room not infrequently  this room had glass walls  through which visitors could gawk at the great electronic wonder inside a medium-sized company or university might have had 1 2 introduction chap 1 one or two computers  while very large institutions had at most a few dozen the idea that within forty years vastly more powerful computers smaller than postage stamps would be mass produced by the billions was pure science fiction the merging of computers and communications has had a profound influence on the way computer systems are organized the once-dominant concept of the ? ? computer center ? ? as a room with a large computer to which users bring their work for processing is now totally obsolete  although data centers holding thousands of internet servers are becoming common   the old model of a single computer serving all of the organization ? s computational needs has been replaced by one in which a large number of separate but interconnected computers do the job these systems are called computer networks the design and organization of these networks are the subjects of this book throughout the book we will use the term ? ? computer network ? ? to mean a collection of autonomous computers interconnected by a single technology two computers are said to be interconnected if they are able to exchange information the connection need not be via a copper wire ; fiber optics  microwaves  infrared  and communication satellites can also be used networks come in many sizes  shapes and forms  as we will see later they are usually connected together to make larger networks  with the internet being the most well-known example of a network of networks there is considerable confusion in the literature between a computer network and a distributed system the key distinction is that in a distributed system  a collection of independent computers appears to its users as a single coherent system usually  it has a single model or paradigm that it presents to the users often a layer of software on top of the operating system  called middleware  is responsible for implementing this model a well-known example of a distributed system is the world wide web it runs on top of the internet and presents a model in which everything looks like a document  web page   in a computer network  this coherence  model  and software are absent users are exposed to the actual machines  without any attempt by the system to make the machines look and act in a coherent way if the machines have different hardware and different operating systems  that is fully visible to the users if a user wants to run a program on a remote machine  he ? has to log onto that machine and run it there in effect  a distributed system is a software system built on top of a network the software gives it a high degree of cohesiveness and transparency thus  the distinction between a network and a distributed system lies with the software  especially the operating system   rather than with the hardware nevertheless  there is considerable overlap between the two subjects for example  both distributed systems and computer networks need to move files around the difference lies in who invokes the movement  the system or the user ? ? ? he ? ? should be read as ? ? he or she ? ? throughout this book sec 1.1 uses of computer networks 3 although this book primarily focuses on networks  many of the topics are also important in distributed systems for more information about distributed systems  see tanenbaum and van steen  2007   1.1 uses of computer networks before we start to examine the technical issues in detail  it is worth devoting some time to pointing out why people are interested in computer networks and what they can be used for after all  if nobody were interested in computer networks  few of them would be built we will start with traditional uses at companies  then move on to home networking and recent developments regarding mobile users  and finish with social issues 1.1.1 business applications most companies have a substantial number of computers for example  a company may have a computer for each worker and use them to design products  write brochures  and do the payroll initially  some of these computers may have worked in isolation from the others  but at some point  management may have decided to connect them to be able to distribute information throughout the company put in slightly more general form  the issue here is resource sharing the goal is to make all programs  equipment  and especially data available to anyone on the network without regard to the physical location of the resource or the user an obvious and widespread example is having a group of office workers share a common printer none of the individuals really needs a private printer  and a high-volume networked printer is often cheaper  faster  and easier to maintain than a large collection of individual printers however  probably even more important than sharing physical resources such as printers  and tape backup systems  is sharing information companies small and large are vitally dependent on computerized information most companies have customer records  product information  inventories  financial statements  tax information  and much more online if all of its computers suddenly went down  a bank could not last more than five minutes a modern manufacturing plant  with a computer-controlled assembly line  would not last even 5 seconds even a small travel agency or three-person law firm is now highly dependent on computer networks for allowing employees to access relevant information and documents instantly for smaller companies  all the computers are likely to be in a single office or perhaps a single building  but for larger ones  the computers and employees may be scattered over dozens of offices and plants in many countries nevertheless  a sales person in new york might sometimes need access to a product inventory 4 introduction chap 1 database in singapore networks called vpns  virtual private networks  may be used to join the individual networks at different sites into one extended network in other words  the mere fact that a user happens to be 15,000 km away from his data should not prevent him from using the data as though they were local this goal may be summarized by saying that it is an attempt to end the ? ? tyranny of geography ? ? in the simplest of terms  one can imagine a company ? s information system as consisting of one or more databases with company information and some number of employees who need to access them remotely in this model  the data are stored on powerful computers called servers often these are centrally housed and maintained by a system administrator in contrast  the employees have simpler machines  called clients  on their desks  with which they access remote data  for example  to include in spreadsheets they are constructing  sometimes we will refer to the human user of the client machine as the ? ? client  ? ? but it should be clear from the context whether we mean the computer or its user  the client and server machines are connected by a network  as illustrated in fig 1-1 note that we have shown the network as a simple oval  without any detail we will use this form when we mean a network in the most abstract sense when more detail is required  it will be provided client server network figure 1-1 a network with two clients and one server this whole arrangement is called the client-server model it is widely used and forms the basis of much network usage the most popular realization is that of a web application  in which the server generates web pages based on its database in response to client requests that may update the database the client-server model is applicable when the client and server are both in the same building  and belong to the same company   but also when they are far apart for example  when a person at home accesses a page on the world wide web  the same model is employed  with the remote web server being the server and the user ? s personal sec 1.1 uses of computer networks 5 computer being the client under most conditions  one server can handle a large number  hundreds or thousands  of clients simultaneously if we look at the client-server model in detail  we see that two processes  i.e  running programs  are involved  one on the client machine and one on the server machine communication takes the form of the client process sending a message over the network to the server process the client process then waits for a reply message when the server process gets the request  it performs the requested work or looks up the requested data and sends back a reply these messages are shown in fig 1-2 client process server process client machine network reply request server machine figure 1-2 the client-server model involves requests and replies a second goal of setting up a computer network has to do with people rather than information or even computers a computer network can provide a powerful communication medium among employees virtually every company that has two or more computers now has email  electronic mail   which employees generally use for a great deal of daily communication in fact  a common gripe around the water cooler is how much email everyone has to deal with  much of it quite meaningless because bosses have discovered that they can send the same  often content-free  message to all their subordinates at the push of a button telephone calls between employees may be carried by the computer network instead of by the phone company this technology is called ip telephony or voice over ip  voip  when internet technology is used the microphone and speaker at each end may belong to a voip-enabled phone or the employee ? s computer companies find this a wonderful way to save on their telephone bills other  richer forms of communication are made possible by computer networks video can be added to audio so that employees at distant locations can see and hear each other as they hold a meeting this technique is a powerful tool for eliminating the cost and time previously devoted to travel desktop sharing lets remote workers see and interact with a graphical computer screen this makes it easy for two or more people who work far apart to read and write a shared blackboard or write a report together when one worker makes a change to an online document  the others can see the change immediately  instead of waiting several days for a letter such a speedup makes cooperation among far-flung groups of people easy where it previously had been impossible more ambitious forms of remote coordination such as telemedicine are only now starting to be used  e.g  6 introduction chap 1 remote patient monitoring  but may become much more important it is sometimes said that communication and transportation are having a race  and whichever wins will make the other obsolete a third goal for many companies is doing business electronically  especially with customers and suppliers this new model is called e-commerce  electronic commerce  and it has grown rapidly in recent years airlines  bookstores  and other retailers have discovered that many customers like the convenience of shopping from home consequently  many companies provide catalogs of their goods and services online and take orders online manufacturers of automobiles  aircraft  and computers  among others  buy subsystems from a variety of suppliers and then assemble the parts using computer networks  manufacturers can place orders electronically as needed this reduces the need for large inventories and enhances efficiency 1.1.2 home applications in 1977  ken olsen was president of the digital equipment corporation  then the number two computer vendor in the world  after ibm   when asked why digital was not going after the personal computer market in a big way  he said  ? ? there is no reason for any individual to have a computer in his home ? ? history showed otherwise and digital no longer exists people initially bought computers for word processing and games recently  the biggest reason to buy a home computer was probably for internet access now  many consumer electronic devices  such as set-top boxes  game consoles  and clock radios  come with embedded computers and computer networks  especially wireless networks  and home networks are broadly used for entertainment  including listening to  looking at  and creating music  photos  and videos internet access provides home users with connectivity to remote computers as with companies  home users can access information  communicate with other people  and buy products and services with e-commerce the main benefit now comes from connecting outside of the home bob metcalfe  the inventor of ethernet  hypothesized that the value of a network is proportional to the square of the number of users because this is roughly the number of different connections that may be made  gilder  1993   this hypothesis is known as ? ? metcalfe ? s law ? ? it helps to explain how the tremendous popularity of the internet comes from its size access to remote information comes in many forms it can be surfing the world wide web for information or just for fun information available includes the arts  business  cooking  government  health  history  hobbies  recreation  science  sports  travel  and many others fun comes in too many ways to mention  plus some ways that are better left unmentioned many newspapers have gone online and can be personalized for example  it is sometimes possible to tell a newspaper that you want everything about corrupt sec 1.1 uses of computer networks 7 politicians  big fires  scandals involving celebrities  and epidemics  but no football  thank you sometimes it is possible to have the selected articles downloaded to your computer while you sleep as this trend continues  it will cause massive unemployment among 12-year-old paperboys  but newspapers like it because distribution has always been the weakest link in the whole production chain of course  to make this model work  they will first have to figure out how to make money in this new world  something not entirely obvious since internet users expect everything to be free the next step beyond newspapers  plus magazines and scientific journals  is the online digital library many professional organizations  such as the acm  www.acm.org  and the ieee computer society  www.computer.org   already have all their journals and conference proceedings online electronic book readers and online libraries may make printed books obsolete skeptics should take note of the effect the printing press had on the medieval illuminated manuscript much of this information is accessed using the client-server model  but there is different  popular model for accessing information that goes by the name of peer-to-peer communication  parameswaran et al  2001   in this form  individuals who form a loose group can communicate with others in the group  as shown in fig 1-3 every person can  in principle  communicate with one or more other people ; there is no fixed division into clients and servers figure 1-3 in a peer-to-peer system there are no fixed clients and servers many peer-to-peer systems  such bittorrent  cohen  2003   do not have any central database of content instead  each user maintains his own database locally and provides a list of other nearby people who are members of the system a new user can then go to any existing member to see what he has and get the names of other members to inspect for more content and more names this lookup process can be repeated indefinitely to build up a large local database of what is out there it is an activity that would get tedious for people but computers excel at it 8 introduction chap 1 peer-to-peer communication is often used to share music and videos it really hit the big time around 2000 with a music sharing service called napster that was shut down after what was probably the biggest copyright infringement case in all of recorded history  lam and tan  2001 ; and macedonia  2000   legal applications for peer-to-peer communication also exist these include fans sharing public domain music  families sharing photos and movies  and users downloading public software packages in fact  one of the most popular internet applications of all  email  is inherently peer-to-peer this form of communication is likely to grow considerably in the future all of the above applications involve interactions between a person and a remote database full of information the second broad category of network use is person-to-person communication  basically the 21st century ? s answer to the 19th century ? s telephone e-mail is already used on a daily basis by millions of people all over the world and its use is growing rapidly it already routinely contains audio and video as well as text and pictures smell may take a while any teenager worth his or her salt is addicted to instant messaging this facility  derived from the unix talk program in use since around 1970  allows two people to type messages at each other in real time there are multi-person messaging services too  such as the twitter service that lets people send short text messages called ? ? tweets ? ? to their circle of friends or other willing audiences the internet can be used by applications to carry audio  e.g  internet radio stations  and video  e.g  youtube   besides being a cheap way to call to distant friends  these applications can provide rich experiences such as telelearning  meaning attending 8 a.m classes without the inconvenience of having to get out of bed first in the long run  the use of networks to enhance human-to-human communication may prove more important than any of the others it may become hugely important to people who are geographically challenged  giving them the same access to services as people living in the middle of a big city between person-to-person communications and accessing information are social network applications here  the flow of information is driven by the relationships that people declare between each other one of the most popular social networking sites is facebook it lets people update their personal profiles and shares the updates with other people who they have declared to be their friends other social networking applications can make introductions via friends of friends  send news messages to friends such as twitter above  and much more even more loosely  groups of people can work together to create content a wiki  for example  is a collaborative web site that the members of a community edit the most famous wiki is the wikipedia  an encyclopedia anyone can edit  but there are thousands of other wikis our third category is electronic commerce in the broadest sense of the term home shopping is already popular and enables users to inspect the online catalogs of thousands of companies some of these catalogs are interactive  showing products from different viewpoints and in configurations that can be personalized sec 1.1 uses of computer networks 9 after the customer buys a product electronically but can not figure out how to use it  online technical support may be consulted another area in which e-commerce is widely used is access to financial institutions many people already pay their bills  manage their bank accounts  and handle their investments electronically this trend will surely continue as networks become more secure one area that virtually nobody foresaw is electronic flea markets  e-flea ?   online auctions of second-hand goods have become a massive industry unlike traditional e-commerce  which follows the client-server model  online auctions are peer-to-peer in the sense that consumers can act as both buyers and sellers some of these forms of e-commerce have acquired cute little tags based on the fact that ? ? to ? ? and ? ? 2 ? ? are pronounced the same the most popular ones are listed in fig 1-4 tag full name example b2c business-to-consumer ordering books online b2b business-to-business car manufacturer ordering tires from supplier g2c government-to-consumer government distributing tax forms electronically c2c consumer-to-consumer auctioning second-hand products online p2p peer-to-peer music sharing figure 1-4 some forms of e-commerce our fourth category is entertainment this has made huge strides in the home in recent years  with the distribution of music  radio and television programs  and movies over the internet beginning to rival that of traditional mechanisms users can find  buy  and download mp3 songs and dvd-quality movies and add them to their personal collection tv shows now reach many homes via iptv  ip television  systems that are based on ip technology instead of cable tv or radio transmissions media streaming applications let users tune into internet radio stations or watch recent episodes of their favorite tv shows naturally  all of this content can be moved around your house between different devices  displays and speakers  usually with a wireless network soon  it may be possible to search for any movie or television program ever made  in any country  and have it displayed on your screen instantly new films may become interactive  where the user is occasionally prompted for the story direction  should macbeth murder duncan or just bide his time ?  with alternative scenarios provided for all cases live television may also become interactive  with the audience participating in quiz shows  choosing among contestants  and so on another form of entertainment is game playing already we have multiperson real-time simulation games  like hide-and-seek in a virtual dungeon  and flight 10 introduction chap 1 simulators with the players on one team trying to shoot down the players on the opposing team virtual worlds provide a persistent setting in which thousands of users can experience a shared reality with three-dimensional graphics our last category is ubiquitous computing  in which computing is embedded into everyday life  as in the vision of mark weiser  1991   many homes are already wired with security systems that include door and window sensors  and there are many more sensors that can be folded in to a smart home monitor  such as energy consumption your electricity  gas and water meters could also report usage over the network this would save money as there would be no need to send out meter readers and your smoke detectors could call the fire department instead of making a big noise  which has little value if no one is home   as the cost of sensing and communication drops  more and more measurement and reporting will be done with networks increasingly  consumer electronic devices are networked for example  some high-end cameras already have a wireless network capability and use it to send photos to a nearby display for viewing professional sports photographers can also send their photos to their editors in real-time  first wirelessly to an access point then over the internet devices such as televisions that plug into the wall can use power-line networks to send information throughout the house over the wires that carry electricity it may not be very surprising to have these objects on the network  but objects that we do not think of as computers may sense and communicate information too for example  your shower may record water usage  give you visual feedback while you lather up  and report to a home environmental monitoring application when you are done to help save on your water bill a technology called rfid  radio frequency identification  will push this idea even further in the future rfid tags are passive  i.e  have no battery  chips the size of stamps and they can already be affixed to books  passports  pets  credit cards  and other items in the home and out this lets rfid readers locate and communicate with the items over a distance of up to several meters  depending on the kind of rfid originally  rfid was commercialized to replace barcodes it has not succeeded yet because barcodes are free and rfid tags cost a few cents of course  rfid tags offer much more and their price is rapidly declining they may turn the real world into the internet of things  itu  2005   1.1.3 mobile users mobile computers  such as laptop and handheld computers  are one of the fastest-growing segments of the computer industry their sales have already overtaken those of desktop computers why would anyone want one ? people on the go often want to use their mobile devices to read and send email  tweet  watch movies  download music  play games  or simply to surf the web for information they want to do all of the things they do at home and in the office naturally  they want to do them from anywhere on land  sea or in the air sec 1.1 uses of computer networks 11 connectivity to the internet enables many of these mobile uses since having a wired connection is impossible in cars  boats  and airplanes  there is a lot of interest in wireless networks cellular networks operated by the telephone companies are one familiar kind of wireless network that blankets us with coverage for mobile phones wireless hotspots based on the 802.11 standard are another kind of wireless network for mobile computers they have sprung up everywhere that people go  resulting in a patchwork of coverage at cafes  hotels  airports  schools  trains and planes anyone with a laptop computer and a wireless modem can just turn on their computer on and be connected to the internet through the hotspot  as though the computer were plugged into a wired network wireless networks are of great value to fleets of trucks  taxis  delivery vehicles  and repairpersons for keeping in contact with their home base for example  in many cities  taxi drivers are independent businessmen  rather than being employees of a taxi company in some of these cities  the taxis have a display the driver can see when a customer calls up  a central dispatcher types in the pickup and destination points this information is displayed on the drivers ? displays and a beep sounds the first driver to hit a button on the display gets the call wireless networks are also important to the military if you have to be able to fight a war anywhere on earth at short notice  counting on using the local networking infrastructure is probably not a good idea it is better to bring your own although wireless networking and mobile computing are often related  they are not identical  as fig 1-5 shows here we see a distinction between fixed wireless and mobile wireless networks even notebook computers are sometimes wired for example  if a traveler plugs a notebook computer into the wired network jack in a hotel room  he has mobility without a wireless network wireless mobile typical applications no no desktop computers in offices no yes a notebook computer used in a hotel room yes no networks in unwired buildings yes yes store inventory with a handheld computer figure 1-5 combinations of wireless networks and mobile computing conversely  some wireless computers are not mobile in the home  and in offices or hotels that lack suitable cabling  it can be more convenient to connect desktop computers or media players wirelessly than to install wires installing a wireless network may require little more than buying a small box with some electronics in it  unpacking it  and plugging it in this solution may be far cheaper than having workmen put in cable ducts to wire the building finally  there are also true mobile  wireless applications  such as people walking around stores with a handheld computers recording inventory at many busy 12 introduction chap 1 airports  car rental return clerks work in the parking lot with wireless mobile computers they scan the barcodes or rfid chips of returning cars  and their mobile device  which has a built-in printer  calls the main computer  gets the rental information  and prints out the bill on the spot perhaps the key driver of mobile  wireless applications is the mobile phone text messaging or texting is tremendously popular it lets a mobile phone user type a short message that is then delivered by the cellular network to another mobile subscriber few people would have predicted ten years ago that having teenagers tediously typing short text messages on mobile phones would be an immense money maker for telephone companies but texting  or short message service as it is known outside the u.s  is very profitable since it costs the carrier but a tiny fraction of one cent to relay a text message  a service for which they charge far more the long-awaited convergence of telephones and the internet has finally arrived  and it will accelerate the growth of mobile applications smart phones  such as the popular iphone  combine aspects of mobile phones and mobile computers the  3g and 4g  cellular networks to which they connect can provide fast data services for using the internet as well as handling phone calls many advanced phones connect to wireless hotspots too  and automatically switch between networks to choose the best option for the user other consumer electronics devices can also use cellular and hotspot networks to stay connected to remote computers electronic book readers can download a newly purchased book or the next edition of a magazine or today ? s newspaper wherever they roam electronic picture frames can update their displays on cue with fresh images since mobile phones know their locations  often because they are equipped with gps  global positioning system  receivers  some services are intentionally location dependent mobile maps and directions are an obvious candidate as your gps-enabled phone and car probably have a better idea of where you are than you do so  too  are searches for a nearby bookstore or chinese restaurant  or a local weather forecast other services may record location  such as annotating photos and videos with the place at which they were made this annotation is known as ? ? geo-tagging ? ? an area in which mobile phones are now starting to be used is m-commerce  mobile-commerce   senn  2000   short text messages from the mobile are used to authorize payments for food in vending machines  movie tickets  and other small items instead of cash and credit cards the charge then appears on the mobile phone bill when equipped with nfc  near field communication  technology the mobile can act as an rfid smartcard and interact with a nearby reader for payment the driving forces behind this phenomenon are the mobile device makers and network operators  who are trying hard to figure out how to get a piece of the e-commerce pie from the store ? s point of view  this scheme may save them most of the credit card company ? s fee  which can be several percent sec 1.1 uses of computer networks 13 of course  this plan may backfire  since customers in a store might use the rfid or barcode readers on their mobile devices to check out competitors ? prices before buying and use them to get a detailed report on where else an item can be purchased nearby and at what price one huge thing that m-commerce has going for it is that mobile phone users are accustomed to paying for everything  in contrast to internet users  who expect everything to be free   if an internet web site charged a fee to allow its customers to pay by credit card  there would be an immense howling noise from the users if  however  a mobile phone operator its customers to pay for items in a store by waving the phone at the cash register and then tacked on a fee for this convenience  it would probably be accepted as normal time will tell no doubt the uses of mobile and wireless computers will grow rapidly in the future as the size of computers shrinks  probably in ways no one can now foresee let us take a quick look at some possibilities sensor networks are made up of nodes that gather and wirelessly relay information they sense about the state of the physical world the nodes may be part of familiar items such as cars or phones  or they may be small separate devices for example  your car might gather data on its location  speed  vibration  and fuel efficiency from its on-board diagnostic system and upload this information to a database  hull et al  2006   those data can help find potholes  plan trips around congested roads  and tell you if you are a ? ? gas guzzler ? ? compared to other drivers on the same stretch of road sensor networks are revolutionizing science by providing a wealth of data on behavior that could not previously be observed one example is tracking the migration of individual zebras by placing a small sensor on each animal  juang et al  2002   researchers have packed a wireless computer into a cube 1 mm on edge  warneke et al  2001   with mobile computers this small  even small birds  rodents  and insects can be tracked even mundane uses  such as in parking meters  can be significant because they make use of data that were not previously available wireless parking meters can accept credit or debit card payments with instant verification over the wireless link they can also report when they are in use over the wireless network this would let drivers download a recent parking map to their car so they can find an available spot more easily of course  when a meter expires  it might also check for the presence of a car  by bouncing a signal off it  and report the expiration to parking enforcement it has been estimated that city governments in the u.s alone could collect an additional $ 10 billion this way  harte et al  2000   wearable computers are another promising application smart watches with radios have been part of our mental space since their appearance in the dick tracy comic strip in 1946 ; now you can buy them other such devices may be implanted  such as pacemakers and insulin pumps some of these can be controlled over a wireless network this lets doctors test and reconfigure them more easily it could also lead to some nasty problems if the devices are as insecure as the average pc and can be hacked easily  halperin et al  2008   14 introduction chap 1 1.1.4 social issues computer networks  like the printing press 500 years ago  allow ordinary citizens to distribute and view content in ways that were not previously possible but along with the good comes the bad  as this new-found freedom brings with it many unsolved social  political  and ethical issues let us just briefly mention a few of them ; a thorough study would require a full book  at least social networks  message boards  content sharing sites  and a host of other applications allow people to share their views with like-minded individuals as long as the subjects are restricted to technical topics or hobbies like gardening  not too many problems will arise the trouble comes with topics that people actually care about  like politics  religion  or sex views that are publicly posted may be deeply offensive to some people worse yet  they may not be politically correct furthermore  opinions need not be limited to text ; high-resolution color photographs and video clips are easily shared over computer networks some people take a live-and-let-live view  but others feel that posting certain material  e.g  verbal attacks on particular countries or religions  pornography  etc  is simply unacceptable and that such content must be censored different countries have different and conflicting laws in this area thus  the debate rages in the past  people have sued network operators  claiming that they are responsible for the contents of what they carry  just as newspapers and magazines are the inevitable response is that a network is like a telephone company or the post office and can not be expected to police what its users say it should now come only as a slight surprise to learn that some network operators block content for their own reasons some users of peer-to-peer applications had their network service cut off because the network operators did not find it profitable to carry the large amounts of traffic sent by those applications those same operators would probably like to treat different companies differently if you are a big company and pay well then you get good service  but if you are a small-time player  you get poor service opponents of this practice argue that peer-to-peer and other content should be treated in the same way because they are all just bits to the network this argument for communications that are not differentiated by their content or source or who is providing the content is known as network neutrality  wu  2003   it is probably safe to say that this debate will go on for a while many other parties are involved in the tussle over content for instance  pirated music and movies fueled the massive growth of peer-to-peer networks  which did not please the copyright holders  who have threatened  and sometimes taken  legal action there are now automated systems that search peer-to-peer networks and fire off warnings to network operators and users who are suspected of infringing copyright in the united states  these warnings are known as dmca takedown notices after the digital millennium copyright act this sec 1.1 uses of computer networks 15 search is an arms ? race because it is hard to reliably catch copyright infringement even your printer might be mistaken for a culprit  piatek et al  2008   computer networks make it very easy to communicate they also make it easy for the people who run the network to snoop on the traffic this sets up conflicts over issues such as employee rights versus employer rights many people read and write email at work many employers have claimed the right to read and possibly censor employee messages  including messages sent from a home computer outside working hours not all employees agree with this  especially the latter part another conflict is centered around government versus citizen ? s rights the fbi has installed systems at many internet service providers to snoop on all incoming and outgoing email for nuggets of interest one early system was originally called carnivore  but bad publicity caused it to be renamed to the more innocent-sounding dcs1000  blaze and bellovin  2000 ; sobel  2001 ; and zacks  2001   the goal of such systems is to spy on millions of people in the hope of perhaps finding information about illegal activities unfortunately for the spies  the fourth amendment to the u.s constitution prohibits government searches without a search warrant  but the government often ignores it of course  the government does not have a monopoly on threatening people ? s privacy the private sector does its bit too by profiling users for example  small files called cookies that web browsers store on users ? computers allow companies to track users ? activities in cyberspace and may also allow credit card numbers  social security numbers  and other confidential information to leak all over the internet  berghel  2001   companies that provide web-based services may maintain large amounts of personal information about their users that allows them to study user activities directly for example  google can read your email and show you advertisements based on your interests if you use its email service  gmail a new twist with mobile devices is location privacy  beresford and stajano  2003   as part of the process of providing service to your mobile device the network operators learn where you are at different times of day this allows them to track your movements they may know which nightclub you frequent and which medical center you visit computer networks also offer the potential to increase privacy by sending anonymous messages in some situations  this capability may be desirable beyond preventing companies from learning your habits  it provides  for example  a way for students  soldiers  employees  and citizens to blow the whistle on illegal behavior on the part of professors  officers  superiors  and politicians without fear of reprisals on the other hand  in the united states and most other democracies  the law specifically permits an accused person the right to confront and challenge his accuser in court so anonymous accusations can not be used as evidence the internet makes it possible to find information quickly  but a great deal of it is ill considered  misleading  or downright wrong that medical advice you 16 introduction chap 1 plucked from the internet about the pain in your chest may have come from a nobel prize winner or from a high-school dropout other information is frequently unwanted electronic junk mail  spam  has become a part of life because spammers have collected millions of email addresses and would-be marketers can cheaply send computer-generated messages to them the resulting flood of spam rivals the flow messages from real people fortunately  filtering software is able to read and discard the spam generated by other computers  with lesser or greater degrees of success still other content is intended for criminal behavior web pages and email messages containing active content  basically  programs or macros that execute on the receiver ? s machine  can contain viruses that take over your computer they might be used to steal your bank account passwords  or to have your computer send spam as part of a botnet or pool of compromised machines phishing messages masquerade as originating from a trustworthy party  for example  your bank  to try to trick you into revealing sensitive information  for example  credit card numbers identity theft is becoming a serious problem as thieves collect enough information about a victim to obtain credit cards and other documents in the victim ? s name it can be difficult to prevent computers from impersonating people on the internet this problem has led to the development of captchas  in which a computer asks a person to solve a short recognition task  for example  typing in the letters shown in a distorted image  to show that they are human  von ahn  2001   this process is a variation on the famous turing test in which a person asks questions over a network to judge whether the entity responding is human a lot of these problems could be solved if the computer industry took computer security seriously if all messages were encrypted and authenticated  it would be harder to commit mischief such technology is well established and we will study it in detail in chap 8 the problem is that hardware and software vendors know that putting in security features costs money and their customers are not demanding such features in addition  a substantial number of the problems are caused by buggy software  which occurs because vendors keep adding more and more features to their programs  which inevitably means more code and thus more bugs a tax on new features might help  but that might be a tough sell in some quarters a refund for defective software might be nice  except it would bankrupt the entire software industry in the first year computer networks raise new legal problems when they interact with old laws electronic gambling provides an example computers have been simulating things for decades  so why not simulate slot machines  roulette wheels  blackjack dealers  and more gambling equipment ? well  because it is illegal in a lot of places the trouble is  gambling is legal in a lot of other places  england  for example  and casino owners there have grasped the potential for internet gambling what happens if the gambler  the casino  and the server are all in different countries  with conflicting laws ? good question sec 1.2 network hardware 17 1.2 network hardware it is now time to turn our attention from the applications and social aspects of networking  the dessert  to the technical issues involved in network design  the spinach   there is no generally accepted taxonomy into which all computer networks fit  but two dimensions stand out as important  transmission technology and scale we will now examine each of these in turn broadly speaking  there are two types of transmission technology that are in widespread use  broadcast links and point-to-point links point-to-point links connect individual pairs of machines to go from the source to the destination on a network made up of point-to-point links  short messages  called packets in certain contexts  may have to first visit one or more intermediate machines often multiple routes  of different lengths  are possible  so finding good ones is important in point-to-point networks point-to-point transmission with exactly one sender and exactly one receiver is sometimes called unicasting in contrast  on a broadcast network  the communication channel is shared by all the machines on the network ; packets sent by any machine are received by all the others an address field within each packet specifies the intended recipient upon receiving a packet  a machine checks the address field if the packet is intended for the receiving machine  that machine processes the packet ; if the packet is intended for some other machine  it is just ignored a wireless network is a common example of a broadcast link  with communication shared over a coverage region that depends on the wireless channel and the transmitting machine as an analogy  consider someone standing in a meeting room and shouting ? ? watson  come here i want you ? ? although the packet may actually be received  heard  by many people  only watson will respond ; the others just ignore it broadcast systems usually also allow the possibility of addressing a packet to all destinations by using a special code in the address field when a packet with this code is transmitted  it is received and processed by every machine on the network this mode of operation is called broadcasting some broadcast systems also support transmission to a subset of the machines  which known as multicasting an alternative criterion for classifying networks is by scale distance is important as a classification metric because different technologies are used at different scales in fig 1-6 we classify multiple processor systems by their rough physical size at the top are the personal area networks  networks that are meant for one person beyond these come longer-range networks these can be divided into local  metropolitan  and wide area networks  each with increasing scale finally  the connection of two or more networks is called an internetwork the worldwide internet is certainly the best-known  but not the only  example of an internetwork 18 introduction chap 1 soon we will have even larger internetworks with the interplanetary internet that connects networks across space  burleigh et al  2003   1 m square meter 10 m room 100 m building 1 km campus 10 km city interprocessor distance processors located in same example 100 km country 1000 km continent planet personal area network the internet local area network metropolitan area network wide area network 10,000 km figure 1-6 classification of interconnected processors by scale in this book we will be concerned with networks at all these scales in the following sections  we give a brief introduction to network hardware by scale 1.2.1 personal area networks pans  personal area networks  let devices communicate over the range of a person a common example is a wireless network that connects a computer with its peripherals almost every computer has an attached monitor  keyboard  mouse  and printer without using wireless  this connection must be done with cables so many new users have a hard time finding the right cables and plugging them into the right little holes  even though they are usually color coded  that most computer vendors offer the option of sending a technician to the user ? s home to do it to help these users  some companies got together to design a short-range wireless network called bluetooth to connect these components without wires the idea is that if your devices have bluetooth  then you need no cables you just put them down  turn them on  and they work together for many people  this ease of operation is a big plus in the simplest form  bluetooth networks use the master-slave paradigm of fig 1-7 the system unit  the pc  is normally the master  talking to the mouse  keyboard  etc  as slaves the master tells the slaves what addresses to use  when they can broadcast  how long they can transmit  what frequencies they can use  and so on bluetooth can be used in other settings  too it is often used to connect a headset to a mobile phone without cords and it can allow your digital music player sec 1.2 network hardware 19 figure 1-7 bluetooth pan configuration to connect to your car merely being brought within range a completely different kind of pan is formed when an embedded medical device such as a pacemaker  insulin pump  or hearing aid talks to a user-operated remote control we will discuss bluetooth in more detail in chap 4 pans can also be built with other technologies that communicate over short ranges  such as rfid on smartcards and library books we will study rfid in chap 4 1.2.2 local area networks the next step up is the lan  local area network   a lan is a privately owned network that operates within and nearby a single building like a home  office or factory lans are widely used to connect personal computers and consumer electronics to let them share resources  e.g  printers  and exchange information when lans are used by companies  they are called enterprise networks wireless lans are very popular these days  especially in homes  older office buildings  cafeterias  and other places where it is too much trouble to install cables in these systems  every computer has a radio modem and an antenna that it uses to communicate with other computers in most cases  each computer talks to a device in the ceiling as shown in fig 1-8  a   this device  called an ap  access point   wireless router  or base station  relays packets between the wireless computers and also between them and the internet being the ap is like being the popular kid as school because everyone wants to talk to you however  if other computers are close enough  they can communicate directly with one another in a peer-to-peer configuration there is a standard for wireless lans called ieee 802.11  popularly known as wifi  which has become very widespread it runs at speeds anywhere from 11 20 introduction chap 1 ethernet ports switch to rest of network access to wired network point figure 1-8 wireless and wired lans  a  802.11  b  switched ethernet to hundreds of mbps  in this book we will adhere to tradition and measure line speeds in megabits/sec  where 1 mbps is 1,000,000 bits/sec  and gigabits/sec  where 1 gbps is 1,000,000,000 bits/sec  we will discuss 802.11 in chap 4 wired lans use a range of different transmission technologies most of them use copper wires  but some use optical fiber lans are restricted in size  which means that the worst-case transmission time is bounded and known in advance knowing these bounds helps with the task of designing network protocols typically  wired lans run at speeds of 100 mbps to 1 gbps  have low delay  microseconds or nanoseconds   and make very few errors newer lans can operate at up to 10 gbps compared to wireless networks  wired lans exceed them in all dimensions of performance it is just easier to send signals over a wire or through a fiber than through the air the topology of many wired lans is built from point-to-point links ieee 802.3  popularly called ethernet  is  by far  the most common type of wired lan fig 1-8  b  shows a sample topology of switched ethernet each computer speaks the ethernet protocol and connects to a box called a switch with a point-to-point link hence the name a switch has multiple ports  each of which can connect to one computer the job of the switch is to relay packets between computers that are attached to it  using the address in each packet to determine which computer to send it to to build larger lans  switches can be plugged into each other using their ports what happens if you plug them together in a loop ? will the network still work ? luckily  the designers thought of this case it is the job of the protocol to sort out what paths packets should travel to safely reach the intended computer we will see how this works in chap 4 it is also possible to divide one large physical lan into two smaller logical lans you might wonder why this would be useful sometimes  the layout of the network equipment does not match the organization ? s structure for example  the sec 1.2 network hardware 21 engineering and finance departments of a company might have computers on the same physical lan because they are in the same wing of the building but it might be easier to manage the system if engineering and finance logically each had its own network virtual lan or vlan in this design each port is tagged with a ? ? color  ? ? say green for engineering and red for finance the switch then forwards packets so that computers attached to the green ports are separated from the computers attached to the red ports broadcast packets sent on a red port  for example  will not be received on a green port  just as though there were two different lans we will cover vlans at the end of chap 4 there are other wired lan topologies too in fact  switched ethernet is a modern version of the original ethernet design that broadcast all the packets over a single linear cable at most one machine could successfully transmit at a time  and a distributed arbitration mechanism was used to resolve conflicts it used a simple algorithm  computers could transmit whenever the cable was idle if two or more packets collided  each computer just waited a random time and tried later we will call that version classic ethernet for clarity  and as you suspected  you will learn about it in chap 4 both wireless and wired broadcast networks can be divided into static and dynamic designs  depending on how the channel is allocated a typical static allocation would be to divide time into discrete intervals and use a round-robin algorithm  allowing each machine to broadcast only when its time slot comes up static allocation wastes channel capacity when a machine has nothing to say during its allocated slot  so most systems attempt to allocate the channel dynamically  i.e  on demand   dynamic allocation methods for a common channel are either centralized or decentralized in the centralized channel allocation method  there is a single entity  for example  the base station in cellular networks  which determines who goes next it might do this by accepting multiple packets and prioritizing them according to some internal algorithm in the decentralized channel allocation method  there is no central entity ; each machine must decide for itself whether to transmit you might think that this approach would lead to chaos  but it does not later we will study many algorithms designed to bring order out of the potential chaos it is worth spending a little more time discussing lans in the home in the future  it is likely that every appliance in the home will be capable of communicating with every other appliance  and all of them will be accessible over the internet this development is likely to be one of those visionary concepts that nobody asked for  like tv remote controls or mobile phones   but once they arrived nobody can imagine how they lived without them many devices are already capable of being networked these include computers  entertainment devices such as tvs and dvds  phones and other consumer electronics such as cameras  appliances like clock radios  and infrastructure like utility meters and thermostats this trend will only continue for instance  the average home probably has a dozen clocks  e.g  in appliances   all of which could 22 introduction chap 1 adjust to daylight savings time automatically if the clocks were on the internet remote monitoring of the home is a likely winner  as many grown children would be willing to spend some money to help their aging parents live safely in their own homes while we could think of the home network as just another lan  it is more likely to have different properties than other networks first  the networked devices have to be very easy to install wireless routers are the most returned consumer electronic item people buy one because they want a wireless network at home  find that it does not work ? ? out of the box  ? ? and then return it rather than listen to elevator music while on hold on the technical helpline second  the network and devices have to be foolproof in operation air conditioners used to have one knob with four settings  off  low  medium  and high now they have 30-page manuals once they are networked  expect the chapter on security alone to be 30 pages this is a problem because only computer users are accustomed to putting up with products that do not work ; the car  television  and refrigerator-buying public is far less tolerant they expect products to work 100 % without the need to hire a geek third  low price is essential for success people will not pay a $ 50 premium for an internet thermostat because few people regard monitoring their home temperature from work that important for $ 5 extra  though  it might sell fourth  it must be possible to start out with one or two devices and expand the reach of the network gradually this means no format wars telling consumers to buy peripherals with ieee 1394  firewire  interfaces and a few years later retracting that and saying usb 2.0 is the interface-of-the-month and then switching that to 802.11g ? oops  no  make that 802.11n ? i mean 802.16  different wireless networks  ? is going to make consumers very skittish the network interface will have to remain stable for decades  like the television broadcasting standards fifth  security and reliability will be very important losing a few files to an email virus is one thing ; having a burglar disarm your security system from his mobile computer and then plunder your house is something quite different an interesting question is whether home networks will be wired or wireless convenience and cost favors wireless networking because there are no wires to fit  or worse  retrofit security favors wired networking because the radio waves that wireless networks use are quite good at going through walls not everyone is overjoyed at the thought of having the neighbors piggybacking on their internet connection and reading their email in chap 8 we will study how encryption can be used to provide security  but it is easier said than done with inexperienced users a third option that may be appealing is to reuse the networks that are already in the home the obvious candidate is the electric wires that are installed throughout the house power-line networks let devices that plug into outlets broadcast information throughout the house you have to plug in the tv anyway  and this way it can get internet connectivity at the same time the difficulty is sec 1.2 network hardware 23 how to carry both power and data signals at the same time part of the answer is that they use different frequency bands in short  home lans offer many opportunities and challenges most of the latter relate to the need for the networks to be easy to manage  dependable  and secure  especially in the hands of nontechnical users  as well as low cost 1.2.3 metropolitan area networks a man  metropolitan area network  covers a city the best-known examples of mans are the cable television networks available in many cities these systems grew from earlier community antenna systems used in areas with poor over-the-air television reception in those early systems  a large antenna was placed on top of a nearby hill and a signal was then piped to the subscribers ? houses at first  these were locally designed  ad hoc systems then companies began jumping into the business  getting contracts from local governments to wire up entire cities the next step was television programming and even entire channels designed for cable only often these channels were highly specialized  such as all news  all sports  all cooking  all gardening  and so on but from their inception until the late 1990s  they were intended for television reception only when the internet began attracting a mass audience  the cable tv network operators began to realize that with some changes to the system  they could provide two-way internet service in unused parts of the spectrum at that point  the cable tv system began to morph from simply a way to distribute television to a metropolitan area network to a first approximation  a man might look something like the system shown in fig 1-9 in this figure we see both television signals and internet being fed into the centralized cable headend for subsequent distribution to people ? s homes we will come back to this subject in detail in chap 2 cable television is not the only man  though recent developments in highspeed wireless internet access have resulted in another man  which has been standardized as ieee 802.16 and is popularly known as wimax we will look at it in chap 4 1.2.4 wide area networks a wan  wide area network  spans a large geographical area  often a country or continent we will begin our discussion with wired wans  using the example of a company with branch offices in different cities the wan in fig 1-10 is a network that connects offices in perth  melbourne  and brisbane each of these offices contains computers intended for running user  i.e  application  programs we will follow traditional usage and call these machines hosts the rest of the network that connects these hosts is then called the 24 introduction chap 1 internet antenna junction box head end figure 1-9 a metropolitan area network based on cable tv communication subnet  or just subnet for short the job of the subnet is to carry messages from host to host  just as the telephone system carries words  really just sounds  from speaker to listener in most wans  the subnet consists of two distinct components  transmission lines and switching elements transmission lines move bits between machines they can be made of copper wire  optical fiber  or even radio links most companies do not have transmission lines lying about  so instead they lease the lines from a telecommunications company switching elements  or just switches  are specialized computers that connect two or more transmission lines when data arrive on an incoming line  the switching element must choose an outgoing line on which to forward them these switching computers have been called by various names in the past ; the name router is now most commonly used unfortunately  some people pronounce it ? ? rooter ? ? while others have it rhyme with ? ? doubter ? ? determining the correct pronunciation will be left as an exercise for the reader  note  the perceived correct answer may depend on where you live  a short comment about the term ? ? subnet ? ? is in order here originally  its only meaning was the collection of routers and communication lines that moved packets from the source host to the destination host readers should be aware that it has acquired a second  more recent meaning in conjunction with network addressing we will discuss that meaning in chap 5 and stick with the original meaning  a collection of lines and routers  until then the wan as we have described it looks similar to a large wired lan  but there are some important differences that go beyond long wires usually in a wan  the hosts and subnet are owned and operated by different people in our sec 1.2 network hardware 25 subnet router perth brisbane melbourne transmission line figure 1-10 wan that connects three branch offices in australia example  the employees might be responsible for their own computers  while the company ? s it department is in charge of the rest of the network we will see clearer boundaries in the coming examples  in which the network provider or telephone company operates the subnet separation of the pure communication aspects of the network  the subnet  from the application aspects  the hosts  greatly simplifies the overall network design a second difference is that the routers will usually connect different kinds of networking technology the networks inside the offices may be switched ethernet  for example  while the long-distance transmission lines may be sonet links  which we will cover in chap 2   some device needs to join them the astute reader will notice that this goes beyond our definition of a network this means that many wans will in fact be internetworks  or composite networks that are made up of more than one network we will have more to say about internetworks in the next section a final difference is in what is connected to the subnet this could be individual computers  as was the case for connecting to lans  or it could be entire lans this is how larger networks are built from smaller ones as far as the subnet is concerned  it does the same job we are now in a position to look at two other varieties of wans first  rather than lease dedicated transmission lines  a company might connect its offices to the internet this allows connections to be made between the offices as virtual links 26 introduction chap 1 that use the underlying capacity of the internet this arrangement  shown in fig 1-11  is called a vpn  virtual private network   compared to the dedicated arrangement  a vpn has the usual advantage of virtualization  which is that it provides flexible reuse of a resource  internet connectivity   consider how easy it is to add a fourth office to see this a vpn also has the usual disadvantage of virtualization  which is a lack of control over the underlying resources with a dedicated line  the capacity is clear with a vpn your mileage may vary with your internet service internet perth brisbane melbourne link via the internet figure 1-11 wan using a virtual private network the second variation is that the subnet may be run by a different company the subnet operator is known as a network service provider and the offices are its customers this structure is shown in fig 1-12 the subnet operator will connect to other customers too  as long as they can pay and it can provide service since it would be a disappointing network service if the customers could only send packets to each other  the subnet operator will also connect to other networks that are part of the internet such a subnet operator is called an isp  internet service provider  and the subnet is an isp network its customers who connect to the isp receive internet service we can use the isp network to preview some key issues that we will study in later chapters in most wans  the network contains many transmission lines  each connecting a pair of routers if two routers that do not share a transmission line wish to communicate  they must do this indirectly  via other routers there sec 1.2 network hardware 27 isp network perth brisbane melbourne transmission line customer network figure 1-12 wan using an isp network may be many paths in the network that connect these two routers how the network makes the decision as to which path to use is called the routing algorithm many such algorithms exist how each router makes the decision as to where to send a packet next is called the forwarding algorithm many of them exist too we will study some of both types in detail in chap 5 other kinds of wans make heavy use of wireless technologies in satellite systems  each computer on the ground has an antenna through which it can send data to and receive data from to a satellite in orbit all computers can hear the output from the satellite  and in some cases they can also hear the upward transmissions of their fellow computers to the satellite as well satellite networks are inherently broadcast and are most useful when the broadcast property is important the cellular telephone network is another example of a wan that uses wireless technology this system has already gone through three generations and a fourth one is on the horizon the first generation was analog and for voice only the second generation was digital and for voice only the third generation is digital and is for both voice and data each cellular base station covers a distance much larger than a wireless lan  with a range measured in kilometers rather than tens of meters the base stations are connected to each other by a backbone network that is usually wired the data rates of cellular networks are often on the order of 1 mbps  much smaller than a wireless lan that can range up to on the order of 100 mbps we will have a lot to say about these networks in chap 2 28 introduction chap 1 1.2.5 internetworks many networks exist in the world  often with different hardware and software people connected to one network often want to communicate with people attached to a different one the fulfillment of this desire requires that different  and frequently incompatible  networks be connected a collection of interconnected networks is called an internetwork or internet these terms will be used in a generic sense  in contrast to the worldwide internet  which is one specific internet   which we will always capitalize the internet uses isp networks to connect enterprise networks  home networks  and many other networks we will look at the internet in great detail later in this book subnets  networks  and internetworks are often confused the term ? ? subnet ? ? makes the most sense in the context of a wide area network  where it refers to the collection of routers and communication lines owned by the network operator as an analogy  the telephone system consists of telephone switching offices connected to one another by high-speed lines  and to houses and businesses by low-speed lines these lines and equipment  owned and managed by the telephone company  form the subnet of the telephone system the telephones themselves  the hosts in this analogy  are not part of the subnet a network is formed by the combination of a subnet and its hosts however  the word ? ? network ? ? is often used in a loose sense as well a subnet might be described as a network  as in the case of the ? ? isp network ? ? of fig 1-12 an internetwork might also be described as a network  as in the case of the wan in fig 1-10 we will follow similar practice  and if we are distinguishing a network from other arrangements  we will stick with our original definition of a collection of computers interconnected by a single technology let us say more about what constitutes an internetwork we know that an internet is formed when distinct networks are interconnected in our view  connecting a lan and a wan or connecting two lans is the usual way to form an internetwork  but there is little agreement in the industry over terminology in this area there are two rules of thumb that are useful first  if different organizations have paid to construct different parts of the network and each maintains its part  we have an internetwork rather than a single network second  if the underlying technology is different in different parts  e.g  broadcast versus point-to-point and wired versus wireless   we probably have an internetwork to go deeper  we need to talk about how two different networks can be connected the general name for a machine that makes a connection between two or more networks and provides the necessary translation  both in terms of hardware and software  is a gateway gateways are distinguished by the layer at which they operate in the protocol hierarchy we will have much more to say about layers and protocol hierarchies starting in the next section  but for now imagine that higher layers are more tied to applications  such as the web  and lower layers are more tied to transmission links  such as ethernet sec 1.2 network hardware 29 since the benefit of forming an internet is to connect computers across networks  we do not want to use too low-level a gateway or we will be unable to make connections between different kinds of networks we do not want to use too high-level a gateway either  or the connection will only work for particular applications the level in the middle that is ? ? just right ? ? is often called the network layer  and a router is a gateway that switches packets at the network layer we can now spot an internet by finding a network that has routers 1.3 network software the first computer networks were designed with the hardware as the main concern and the software as an afterthought this strategy no longer works network software is now highly structured in the following sections we examine the software structuring technique in some detail the approach described here forms the keystone of the entire book and will occur repeatedly later on 1.3.1 protocol hierarchies to reduce their design complexity  most networks are organized as a stack of layers or levels  each one built upon the one below it the number of layers  the name of each layer  the contents of each layer  and the function of each layer differ from network to network the purpose of each layer is to offer certain services to the higher layers while shielding those layers from the details of how the offered services are actually implemented in a sense  each layer is a kind of virtual machine  offering certain services to the layer above it this concept is actually a familiar one and is used throughout computer science  where it is variously known as information hiding  abstract data types  data encapsulation  and object-oriented programming the fundamental idea is that a particular piece of software  or hardware  provides a service to its users but keeps the details of its internal state and algorithms hidden from them when layer n on one machine carries on a conversation with layer n on another machine  the rules and conventions used in this conversation are collectively known as the layer n protocol basically  a protocol is an agreement between the communicating parties on how communication is to proceed as an analogy  when a woman is introduced to a man  she may choose to stick out her hand he  in turn  may decide to either shake it or kiss it  depending  for example  on whether she is an american lawyer at a business meeting or a european princess at a formal ball violating the protocol will make communication more difficult  if not completely impossible a five-layer network is illustrated in fig 1-13 the entities comprising the corresponding layers on different machines are called peers the peers may be 30 introduction chap 1 software processes  hardware devices  or even human beings in other words  it is the peers that communicate by using the protocol to talk to each other layer 5 layer 4 layer 3 layer 2 layer 1 host 1 layer 4/5 interface layer 3/4 interface layer 2/3 interface layer 1/2 interface layer 5 protocol layer 5 layer 4 layer 3 layer 2 layer 1 host 2 layer 4 protocol layer 3 protocol layer 2 protocol layer 1 protocol physical medium figure 1-13 layers  protocols  and interfaces in reality  no data are directly transferred from layer n on one machine to layer n on another machine instead  each layer passes data and control information to the layer immediately below it  until the lowest layer is reached below layer 1 is the physical medium through which actual communication occurs in fig 1-13  virtual communication is shown by dotted lines and physical communication by solid lines between each pair of adjacent layers is an interface the interface defines which primitive operations and services the lower layer makes available to the upper one when network designers decide how many layers to include in a network and what each one should do  one of the most important considerations is defining clean interfaces between the layers doing so  in turn  requires that each layer perform a specific collection of well-understood functions in addition to minimizing the amount of information that must be passed between layers  clearcut interfaces also make it simpler to replace one layer with a completely different protocol or implementation  e.g  replacing all the telephone lines by satellite channels  because all that is required of the new protocol or implementation is that it offer exactly the same set of services to its upstairs neighbor as the old one did it is common that different hosts use different implementations of the same protocol  often written by different companies   in fact  the protocol itself can change in some layer without the layers above and below it even noticing sec 1.3 network software 31 a set of layers and protocols is called a network architecture the specification of an architecture must contain enough information to allow an implementer to write the program or build the hardware for each layer so that it will correctly obey the appropriate protocol neither the details of the implementation nor the specification of the interfaces is part of the architecture because these are hidden away inside the machines and not visible from the outside it is not even necessary that the interfaces on all machines in a network be the same  provided that each machine can correctly use all the protocols a list of the protocols used by a certain system  one protocol per layer  is called a protocol stack network architectures  protocol stacks  and the protocols themselves are the principal subjects of this book an analogy may help explain the idea of multilayer communication imagine two philosophers  peer processes in layer 3   one of whom speaks urdu and english and one of whom speaks chinese and french since they have no common language  they each engage a translator  peer processes at layer 2   each of whom in turn contacts a secretary  peer processes in layer 1   philosopher 1 wishes to convey his affection for oryctolagus cuniculus to his peer to do so  he passes a message  in english  across the 2/3 interface to his translator  saying ? ? i like rabbits  ? ? as illustrated in fig 1-14 the translators have agreed on a neutral language known to both of them  dutch  so the message is converted to ? ? ik vind konijnen leuk ? ? the choice of the language is the layer 2 protocol and is up to the layer 2 peer processes the translator then gives the message to a secretary for transmission  for example  by email  the layer 1 protocol   when the message arrives at the other secretary  it is passed to the local translator  who translates it into french and passes it across the 2/3 interface to the second philosopher note that each protocol is completely independent of the other ones as long as the interfaces are not changed the translators can switch from dutch to  say  finnish  at will  provided that they both agree and neither changes his interface with either layer 1 or layer 3 similarly  the secretaries can switch from email to telephone without disturbing  or even informing  the other layers each process may add some information intended only for its peer this information is not passed up to the layer above now consider a more technical example  how to provide communication to the top layer of the five-layer network in fig 1-15 a message  m  is produced by an application process running in layer 5 and given to layer 4 for transmission layer 4 puts a header in front of the message to identify the message and passes the result to layer 3 the header includes control information  such as addresses  to allow layer 4 on the destination machine to deliver the message other examples of control information used in some layers are sequence numbers  in case the lower layer does not preserve message order   sizes  and times in many networks  no limit is placed on the size of messages transmitted in the layer 4 protocol but there is nearly always a limit imposed by the layer 3 protocol consequently  layer 3 must break up the incoming messages into smaller 32 introduction chap 1 i like rabbits location a 3 2 1 3 2 1 location b message philosopher translator secretary information for the remote translator information for the remote secretary l  dutch ik vind konijnen leuk fax #  l  dutch ik vind konijnen leuk j'aime bien les lapins l  dutch ik vind konijnen leuk fax #  l  dutch ik vind konijnen leuk figure 1-14 the philosopher-translator-secretary architecture units  packets  prepending a layer 3 header to each packet in this example  m is split into two parts  m1 and m2  that will be transmitted separately layer 3 decides which of the outgoing lines to use and passes the packets to layer 2 layer 2 adds to each piece not only a header but also a trailer  and gives the resulting unit to layer 1 for physical transmission at the receiving machine the message moves upward  from layer to layer  with headers being stripped off as it progresses none of the headers for layers below n are passed up to layer n the important thing to understand about fig 1-15 is the relation between the virtual and actual communication and the difference between protocols and interfaces the peer processes in layer 4  for example  conceptually think of their communication as being ? ? horizontal  ? ? using the layer 4 protocol each one is likely to have procedures called something like sendtootherside and getfrom otherside  even though these procedures actually communicate with lower layers across the 3/4 interface  and not with the other side sec 1.3 network software 33 h2 h3 h4 m1 t2 h2 h3 m2 t2 h2 h3 h4 m1 t2 h2 h3 m2 t2 h3 h4 m1 h3 m2 h3 h4 m1 h3 m2 h4 m h4 m m m layer 2 protocol 2 layer 3 protocol layer 4 protocol layer 5 protocol 3 4 5 1 layer source machine destination machine figure 1-15 example information flow supporting virtual communication in layer 5 the peer process abstraction is crucial to all network design using it  the unmanageable task of designing the complete network can be broken into several smaller  manageable design problems  namely  the design of the individual layers although sec 1.3 is called ? ? network software  ? ? it is worth pointing out that the lower layers of a protocol hierarchy are frequently implemented in hardware or firmware nevertheless  complex protocol algorithms are involved  even if they are embedded  in whole or in part  in hardware 1.3.2 design issues for the layers some of the key design issues that occur in computer networks will come up in layer after layer below  we will briefly mention the more important ones reliability is the design issue of making a network that operates correctly even though it is made up of a collection of components that are themselves unreliable think about the bits of a packet traveling through the network there is a chance that some of these bits will be received damaged  inverted  due to fluke electrical noise  random wireless signals  hardware flaws  software bugs and so on how is it possible that we find and fix these errors ? one mechanism for finding errors in received information uses codes for error detection information that is incorrectly received can then be retransmitted 34 introduction chap 1 until it is received correctly more powerful codes allow for error correction  where the correct message is recovered from the possibly incorrect bits that were originally received both of these mechanisms work by adding redundant information they are used at low layers  to protect packets sent over individual links  and high layers  to check that the right contents were received another reliability issue is finding a working path through a network often there are multiple paths between a source and destination  and in a large network  there may be some links or routers that are broken suppose that the network is down in germany packets sent from london to rome via germany will not get through  but we could instead send packets from london to rome via paris the network should automatically make this decision this topic is called routing a second design issue concerns the evolution of the network over time  networks grow larger and new designs emerge that need to be connected to the existing network we have recently seen the key structuring mechanism used to support change by dividing the overall problem and hiding implementation details  protocol layering there are many other strategies as well since there are many computers on the network  every layer needs a mechanism for identifying the senders and receivers that are involved in a particular message this mechanism is called addressing or naming  in the low and high layers  respectively an aspect of growth is that different network technologies often have different limitations for example  not all communication channels preserve the order of messages sent on them  leading to solutions that number messages another example is differences in the maximum size of a message that the networks can transmit this leads to mechanisms for disassembling  transmitting  and then reassembling messages this overall topic is called internetworking when networks get large  new problems arise cities can have traffic jams  a shortage of telephone numbers  and it is easy to get lost not many people have these problems in their own neighborhood  but citywide they may be a big issue designs that continue to work well when the network gets large are said to be scalable a third design issue is resource allocation networks provide a service to hosts from their underlying resources  such as the capacity of transmission lines to do this well  they need mechanisms that divide their resources so that one host does not interfere with another too much many designs share network bandwidth dynamically  according to the shortterm needs of hosts  rather than by giving each host a fixed fraction of the bandwidth that it may or may not use this design is called statistical multiplexing  meaning sharing based on the statistics of demand it can be applied at low layers for a single link  or at high layers for a network or even applications that use the network an allocation problem that occurs at every level is how to keep a fast sender from swamping a slow receiver with data feedback from the receiver to the sec 1.3 network software 35 sender is often used this subject is called flow control sometimes the problem is that the network is oversubscribed because too many computers want to send too much traffic  and the network can not deliver it all this overloading of the network is called congestion one strategy is for each computer to reduce its demand when it experiences congestion it  too  can be used in all layers it is interesting to observe that the network has more resources to offer than simply bandwidth for uses such as carrying live video  the timeliness of delivery matters a great deal most networks must provide service to applications that want this real-time delivery at the same time that they provide service to applications that want high throughput quality of service is the name given to mechanisms that reconcile these competing demands the last major design issue is to secure the network by defending it against different kinds of threats one of the threats we have mentioned previously is that of eavesdropping on communications mechanisms that provide confidentiality defend against this threat  and they are used in multiple layers mechanisms for authentication prevent someone from impersonating someone else they might be used to tell fake banking web sites from the real one  or to let the cellular network check that a call is really coming from your phone so that you will pay the bill other mechanisms for integrity prevent surreptitious changes to messages  such as altering ? ? debit my account $ 10 ? ? to ? ? debit my account $ 1000 ? ? all of these designs are based on cryptography  which we shall study in chap 8 1.3.3 connection-oriented versus connectionless service layers can offer two different types of service to the layers above them  connection oriented and connectionless in this section we will look at these two types and examine the differences between them connection-oriented service is modeled after the telephone system to talk to someone  you pick up the phone  dial the number  talk  and then hang up similarly  to use a connection-oriented network service  the service user first establishes a connection  uses the connection  and then releases the connection the essential aspect of a connection is that it acts like a tube  the sender pushes objects  bits  in at one end  and the receiver takes them out at the other end in most cases the order is preserved so that the bits arrive in the order they were sent in some cases when a connection is established  the sender  receiver  and subnet conduct a negotiation about the parameters to be used  such as maximum message size  quality of service required  and other issues typically  one side makes a proposal and the other side can accept it  reject it  or make a counterproposal a circuit is another name for a connection with associated resources  such as a fixed bandwidth this dates from the telephone network in which a circuit was a path over copper wire that carried a phone conversation in contrast to connection-oriented service  connectionless service is modeled after the postal system each message  letter  carries the full destination address  36 introduction chap 1 and each one is routed through the intermediate nodes inside the system independent of all the subsequent messages there are different names for messages in different contexts ; a packet is a message at the network layer when the intermediate nodes receive a message in full before sending it on to the next node  this is called store-and-forward switching the alternative  in which the onward transmission of a message at a node starts before it is completely received by the node  is called cut-through switching normally  when two messages are sent to the same destination  the first one sent will be the first one to arrive however  it is possible that the first one sent can be delayed so that the second one arrives first each kind of service can further be characterized by its reliability some services are reliable in the sense that they never lose data usually  a reliable service is implemented by having the receiver acknowledge the receipt of each message so the sender is sure that it arrived the acknowledgement process introduces overhead and delays  which are often worth it but are sometimes undesirable a typical situation in which a reliable connection-oriented service is appropriate is file transfer the owner of the file wants to be sure that all the bits arrive correctly and in the same order they were sent very few file transfer customers would prefer a service that occasionally scrambles or loses a few bits  even if it is much faster reliable connection-oriented service has two minor variations  message sequences and byte streams in the former variant  the message boundaries are preserved when two 1024-byte messages are sent  they arrive as two distinct 1024 byte messages  never as one 2048-byte message in the latter  the connection is simply a stream of bytes  with no message boundaries when 2048 bytes arrive at the receiver  there is no way to tell if they were sent as one 2048-byte message  two 1024-byte messages  or 2048 1-byte messages if the pages of a book are sent over a network to a phototypesetter as separate messages  it might be important to preserve the message boundaries on the other hand  to download a dvd movie  a byte stream from the server to the user ? s computer is all that is needed message boundaries within the movie are not relevant for some applications  the transit delays introduced by acknowledgements are unacceptable one such application is digitized voice traffic for voice over ip it is less disruptive for telephone users to hear a bit of noise on the line from time to time than to experience a delay waiting for acknowledgements similarly  when transmitting a video conference  having a few pixels wrong is no problem  but having the image jerk along as the flow stops and starts to correct errors is irritating not all applications require connections for example  spammers send electronic junk-mail to many recipients the spammer probably does not want to go to the trouble of setting up and later tearing down a connection to a recipient just to send them one item nor is 100 percent reliable delivery essential  especially if it costs more all that is needed is a way to send a single message that has a high sec 1.3 network software 37 probability of arrival  but no guarantee unreliable  meaning not acknowledged  connectionless service is often called datagram service  in analogy with telegram service  which also does not return an acknowledgement to the sender despite it being unreliable  it is the dominant form in most networks for reasons that will become clear later in other situations  the convenience of not having to establish a connection to send one message is desired  but reliability is essential the acknowledged datagram service can be provided for these applications it is like sending a registered letter and requesting a return receipt when the receipt comes back  the sender is absolutely sure that the letter was delivered to the intended party and not lost along the way text messaging on mobile phones is an example still another service is the request-reply service in this service the sender transmits a single datagram containing a request ; the reply contains the answer request-reply is commonly used to implement communication in the client-server model  the client issues a request and the server responds to it for example  a mobile phone client might send a query to a map server to retrieve the map data for the current location figure 1-16 summarizes the types of services discussed above reliable message stream reliable byte stream unreliable connection unreliable datagram acknowledged datagram request-reply service connectionoriented connectionless sequence of pages movie download voice over ip electronic junk mail text messaging database query example figure 1-16 six different types of service the concept of using unreliable communication may be confusing at first after all  why would anyone actually prefer unreliable communication to reliable communication ? first of all  reliable communication  in our sense  that is  acknowledged  may not be available in a given layer for example  ethernet does not provide reliable communication packets can occasionally be damaged in transit it is up to higher protocol levels to recover from this problem in particular  many reliable services are built on top of an unreliable datagram service second  the delays inherent in providing a reliable service may be unacceptable  especially in real-time applications such as multimedia for these reasons  both reliable and unreliable communication coexist 38 introduction chap 1 1.3.4 service primitives a service is formally specified by a set of primitives  operations  available to user processes to access the service these primitives tell the service to perform some action or report on an action taken by a peer entity if the protocol stack is located in the operating system  as it often is  the primitives are normally system calls these calls cause a trap to kernel mode  which then turns control of the machine over to the operating system to send the necessary packets the set of primitives available depends on the nature of the service being provided the primitives for connection-oriented service are different from those of connectionless service as a minimal example of the service primitives that might provide a reliable byte stream  consider the primitives listed in fig 1-17 they will be familiar to fans of the berkeley socket interface  as the primitives are a simplified version of that interface primitive meaning listen block waiting for an incoming connection connect establish a connection with a waiting peer accept accept an incoming connection from a peer receive block waiting for an incoming message send send a message to the peer disconnect terminate a connection figure 1-17 six service primitives that provide a simple connection-oriented service these primitives might be used for a request-reply interaction in a client-server environment to illustrate how  we sketch a simple protocol that implements the service using acknowledged datagrams first  the server executes listen to indicate that it is prepared to accept incoming connections a common way to implement listen is to make it a blocking system call after executing the primitive  the server process is blocked until a request for connection appears next  the client process executes connect to establish a connection with the server the connect call needs to specify who to connect to  so it might have a parameter giving the server ? s address the operating system then typically sends a packet to the peer asking it to connect  as shown by  1  in fig 1-18 the client process is suspended until there is a response when the packet arrives at the server  the operating system sees that the packet is requesting a connection it checks to see if there is a listener  and if so it unblocks the listener the server process can then establish the connection with the accept call this sends a response  2  back to the client process to accept the sec 1.3 network software 39 client machine  1  connect request  2  accept response system calls operating kernel system client process protocol drivers stack server machine system process kernel protocol drivers stack  3  request for data  4  reply  5  disconnect  6  disconnect figure 1-18 a simple client-server interaction using acknowledged datagrams connection the arrival of this response then releases the client at this point the client and server are both running and they have a connection established the obvious analogy between this protocol and real life is a customer  client  calling a company ? s customer service manager at the start of the day  the service manager sits next to his telephone in case it rings later  a client places a call when the manager picks up the phone  the connection is established the next step is for the server to execute receive to prepare to accept the first request normally  the server does this immediately upon being released from the listen  before the acknowledgement can get back to the client the receive call blocks the server then the client executes send to transmit its request  3  followed by the execution of receive to get the reply the arrival of the request packet at the server machine unblocks the server so it can handle the request after it has done the work  the server uses send to return the answer to the client  4   the arrival of this packet unblocks the client  which can now inspect the answer if the client has additional requests  it can make them now when the client is done  it executes disconnect to terminate the connection  5   usually  an initial disconnect is a blocking call  suspending the client and sending a packet to the server saying that the connection is no longer needed when the server gets the packet  it also issues a disconnect of its own  acknowledging the client and releasing the connection  6   when the server ? s packet gets back to the client machine  the client process is released and the connection is broken in a nutshell  this is how connection-oriented communication works of course  life is not so simple many things can go wrong here the timing can be wrong  e.g  the connect is done before the listen   packets can get lost  and much more we will look at these issues in great detail later  but for the moment  fig 1-18 briefly summarizes how client-server communication might work with acknowledged datagrams so that we can ignore lost packets given that six packets are required to complete this protocol  one might wonder why a connectionless protocol is not used instead the answer is that in a perfect world it could be  in which case only two packets would be needed  one 40 introduction chap 1 for the request and one for the reply however  in the face of large messages in either direction  e.g  a megabyte file   transmission errors  and lost packets  the situation changes if the reply consisted of hundreds of packets  some of which could be lost during transmission  how would the client know if some pieces were missing ? how would the client know whether the last packet actually received was really the last packet sent ? suppose the client wanted a second file how could it tell packet 1 from the second file from a lost packet 1 from the first file that suddenly found its way to the client ? in short  in the real world  a simple request reply protocol over an unreliable network is often inadequate in chap 3 we will study a variety of protocols in detail that overcome these and other problems for the moment  suffice it to say that having a reliable  ordered byte stream between processes is sometimes very convenient 1.3.5 the relationship of services to protocols services and protocols are distinct concepts this distinction is so important that we emphasize it again here a service is a set of primitives  operations  that a layer provides to the layer above it the service defines what operations the layer is prepared to perform on behalf of its users  but it says nothing at all about how these operations are implemented a service relates to an interface between two layers  with the lower layer being the service provider and the upper layer being the service user a protocol  in contrast  is a set of rules governing the format and meaning of the packets  or messages that are exchanged by the peer entities within a layer entities use protocols to implement their service definitions they are free to change their protocols at will  provided they do not change the service visible to their users in this way  the service and the protocol are completely decoupled this is a key concept that any network designer should understand well to repeat this crucial point  services relate to the interfaces between layers  as illustrated in fig 1-19 in contrast  protocols relate to the packets sent between peer entities on different machines it is very important not to confuse the two concepts an analogy with programming languages is worth making a service is like an abstract data type or an object in an object-oriented language it defines operations that can be performed on an object but does not specify how these operations are implemented in contrast  a protocol relates to the implementation of the service and as such is not visible to the user of the service many older protocols did not distinguish the service from the protocol in effect  a typical layer might have had a service primitive send packet with the user providing a pointer to a fully assembled packet this arrangement meant that all changes to the protocol were immediately visible to the users most network designers now regard such a design as a serious blunder sec 1.4 reference models 41 layer k layer k + 1 layer k  1 protocol service provided by layer k layer k layer k + 1 layer k  1 figure 1-19 the relationship between a service and a protocol 1.4 reference models now that we have discussed layered networks in the abstract  it is time to look at some examples we will discuss two important network architectures  the osi reference model and the tcp/ip reference model although the protocols associated with the osi model are not used any more  the model itself is actually quite general and still valid  and the features discussed at each layer are still very important the tcp/ip model has the opposite properties  the model itself is not of much use but the protocols are widely used for this reason we will look at both of them in detail also  sometimes you can learn more from failures than from successes 1.4.1 the osi reference model the osi model  minus the physical medium  is shown in fig 1-20 this model is based on a proposal developed by the international standards organization  iso  as a first step toward international standardization of the protocols used in the various layers  day and zimmermann  1983   it was revised in 1995  day  1995   the model is called the iso osi  open systems interconnection  reference model because it deals with connecting open systems ? that is  systems that are open for communication with other systems we will just call it the osi model for short the osi model has seven layers the principles that were applied to arrive at the seven layers can be briefly summarized as follows  1 a layer should be created where a different abstraction is needed 2 each layer should perform a well-defined function 3 the function of each layer should be chosen with an eye toward defining internationally standardized protocols 42 introduction chap 1 layer presentation application session transport network data link physical 7 6 5 4 3 2 1 interface host a name of unit exchanged apdu ppdu spdu tpdu packet frame bit presentation application session transport network data link physical host b network network data link data link physical physical router router internal subnet protocol application protocol presentation protocol transport protocol session protocol communication subnet boundary network layer host-router protocol data link layer host-router protocol physical layer host-router protocol figure 1-20 the osi reference model 4 the layer boundaries should be chosen to minimize the information flow across the interfaces 5 the number of layers should be large enough that distinct functions need not be thrown together in the same layer out of necessity and small enough that the architecture does not become unwieldy below we will discuss each layer of the model in turn  starting at the bottom layer note that the osi model itself is not a network architecture because it does not specify the exact services and protocols to be used in each layer it just tells what each layer should do however  iso has also produced standards for all the layers  although these are not part of the reference model itself each one has been published as a separate international standard the model  in part  is widely used although the associated protocols have been long forgotten sec 1.4 reference models 43 the physical layer the physical layer is concerned with transmitting raw bits over a communication channel the design issues have to do with making sure that when one side sends a 1 bit it is received by the other side as a 1 bit  not as a 0 bit typical questions here are what electrical signals should be used to represent a 1 and a 0  how many nanoseconds a bit lasts  whether transmission may proceed simultaneously in both directions  how the initial connection is established  how it is torn down when both sides are finished  how many pins the network connector has  and what each pin is used for these design issues largely deal with mechanical  electrical  and timing interfaces  as well as the physical transmission medium  which lies below the physical layer the data link layer the main task of the data link layer is to transform a raw transmission facility into a line that appears free of undetected transmission errors it does so by masking the real errors so the network layer does not see them it accomplishes this task by having the sender break up the input data into data frames  typically a few hundred or a few thousand bytes  and transmit the frames sequentially if the service is reliable  the receiver confirms correct receipt of each frame by sending back an acknowledgement frame another issue that arises in the data link layer  and most of the higher layers as well  is how to keep a fast transmitter from drowning a slow receiver in data some traffic regulation mechanism may be needed to let the transmitter know when the receiver can accept more data broadcast networks have an additional issue in the data link layer  how to control access to the shared channel a special sublayer of the data link layer  the medium access control sublayer  deals with this problem the network layer the network layer controls the operation of the subnet a key design issue is determining how packets are routed from source to destination routes can be based on static tables that are ? ? wired into ? ? the network and rarely changed  or more often they can be updated automatically to avoid failed components they can also be determined at the start of each conversation  for example  a terminal session  such as a login to a remote machine finally  they can be highly dynamic  being determined anew for each packet to reflect the current network load if too many packets are present in the subnet at the same time  they will get in one another ? s way  forming bottlenecks handling congestion is also a responsibility of the network layer  in conjunction with higher layers that adapt the load 44 introduction chap 1 they place on the network more generally  the quality of service provided  delay  transit time  jitter  etc  is also a network layer issue when a packet has to travel from one network to another to get to its destination  many problems can arise the addressing used by the second network may be different from that used by the first one the second one may not accept the packet at all because it is too large the protocols may differ  and so on it is up to the network layer to overcome all these problems to allow heterogeneous networks to be interconnected in broadcast networks  the routing problem is simple  so the network layer is often thin or even nonexistent the transport layer the basic function of the transport layer is to accept data from above it  split it up into smaller units if need be  pass these to the network layer  and ensure that the pieces all arrive correctly at the other end furthermore  all this must be done efficiently and in a way that isolates the upper layers from the inevitable changes in the hardware technology over the course of time the transport layer also determines what type of service to provide to the session layer  and  ultimately  to the users of the network the most popular type of transport connection is an error-free point-to-point channel that delivers messages or bytes in the order in which they were sent however  other possible kinds of transport service exist  such as the transporting of isolated messages with no guarantee about the order of delivery  and the broadcasting of messages to multiple destinations the type of service is determined when the connection is established  as an aside  an error-free channel is completely impossible to achieve ; what people really mean by this term is that the error rate is low enough to ignore in practice  the transport layer is a true end-to-end layer ; it carries data all the way from the source to the destination in other words  a program on the source machine carries on a conversation with a similar program on the destination machine  using the message headers and control messages in the lower layers  each protocols is between a machine and its immediate neighbors  and not between the ultimate source and destination machines  which may be separated by many routers the difference between layers 1 through 3  which are chained  and layers 4 through 7  which are end-to-end  is illustrated in fig 1-20 the session layer the session layer allows users on different machines to establish sessions between them sessions offer various services  including dialog control  keeping track of whose turn it is to transmit   token management  preventing two parties from attempting the same critical operation simultaneously   and synchronization sec 1.4 reference models 45  checkpointing long transmissions to allow them to pick up from where they left off in the event of a crash and subsequent recovery   the presentation layer unlike the lower layers  which are mostly concerned with moving bits around  the presentation layer is concerned with the syntax and semantics of the information transmitted in order to make it possible for computers with different internal data representations to communicate  the data structures to be exchanged can be defined in an abstract way  along with a standard encoding to be used ? ? on the wire ? ? the presentation layer manages these abstract data structures and allows higher-level data structures  e.g  banking records  to be defined and exchanged the application layer the application layer contains a variety of protocols that are commonly needed by users one widely used application protocol is http  hypertext transfer protocol   which is the basis for the world wide web when a browser wants a web page  it sends the name of the page it wants to the server hosting the page using http the server then sends the page back other application protocols are used for file transfer  electronic mail  and network news 1.4.2 the tcp/ip reference model let us now turn from the osi reference model to the reference model used in the grandparent of all wide area computer networks  the arpanet  and its successor  the worldwide internet although we will give a brief history of the arpanet later  it is useful to mention a few key aspects of it now the arpanet was a research network sponsored by the dod  u.s department of defense   it eventually connected hundreds of universities and government installations  using leased telephone lines when satellite and radio networks were added later  the existing protocols had trouble interworking with them  so a new reference architecture was needed thus  from nearly the beginning  the ability to connect multiple networks in a seamless way was one of the major design goals this architecture later became known as the tcp/ip reference model  after its two primary protocols it was first described by cerf and kahn  1974   and later refined and defined as a standard in the internet community  braden  1989   the design philosophy behind the model is discussed by clark  1988   given the dod ? s worry that some of its precious hosts  routers  and internetwork gateways might get blown to pieces at a moment ? s notice by an attack from the soviet union  another major goal was that the network be able to survive loss of subnet hardware  without existing conversations being broken off in other 46 introduction chap 1 words  the dod wanted connections to remain intact as long as the source and destination machines were functioning  even if some of the machines or transmission lines in between were suddenly put out of operation furthermore  since applications with divergent requirements were envisioned  ranging from transferring files to real-time speech transmission  a flexible architecture was needed the link layer all these requirements led to the choice of a packet-switching network based on a connectionless layer that runs across different networks the lowest layer in the model  the link layer describes what links such as serial lines and classic ethernet must do to meet the needs of this connectionless internet layer it is not really a layer at all  in the normal sense of the term  but rather an interface between hosts and transmission links early material on the tcp/ip model has little to say about it the internet layer the internet layer is the linchpin that holds the whole architecture together it is shown in fig 1-21 as corresponding roughly to the osi network layer its job is to permit hosts to inject packets into any network and have them travel independently to the destination  potentially on a different network   they may even arrive in a completely different order than they were sent  in which case it is the job of higher layers to rearrange them  if in-order delivery is desired note that ? ? internet ? ? is used here in a generic sense  even though this layer is present in the internet osi tcp/ip application presentation session transport network data link physical 7 6 5 4 3 2 1 application transport internet link not present in the model figure 1-21 the tcp/ip reference model the analogy here is with the  snail  mail system a person can drop a sequence of international letters into a mailbox in one country  and with a little luck  sec 1.4 reference models 47 most of them will be delivered to the correct address in the destination country the letters will probably travel through one or more international mail gateways along the way  but this is transparent to the users furthermore  that each country  i.e  each network  has its own stamps  preferred envelope sizes  and delivery rules is hidden from the users the internet layer defines an official packet format and protocol called ip  internet protocol   plus a companion protocol called icmp  internet control message protocol  that helps it function the job of the internet layer is to deliver ip packets where they are supposed to go packet routing is clearly a major issue here  as is congestion  though ip has not proven effective at avoiding congestion   the transport layer the layer above the internet layer in the tcp/ip model is now usually called the transport layer it is designed to allow peer entities on the source and destination hosts to carry on a conversation  just as in the osi transport layer two end-to-end transport protocols have been defined here the first one  tcp  transmission control protocol   is a reliable connection-oriented protocol that allows a byte stream originating on one machine to be delivered without error on any other machine in the internet it segments the incoming byte stream into discrete messages and passes each one on to the internet layer at the destination  the receiving tcp process reassembles the received messages into the output stream tcp also handles flow control to make sure a fast sender can not swamp a slow receiver with more messages than it can handle the second protocol in this layer  udp  user datagram protocol   is an unreliable  connectionless protocol for applications that do not want tcp ? s sequencing or flow control and wish to provide their own it is also widely used for one-shot  client-server-type request-reply queries and applications in which prompt delivery is more important than accurate delivery  such as transmitting speech or video the relation of ip  tcp  and udp is shown in fig 1-22 since the model was developed  ip has been implemented on many other networks the application layer the tcp/ip model does not have session or presentation layers no need for them was perceived instead  applications simply include any session and presentation functions that they require experience with the osi model has proven this view correct  these layers are of little use to most applications on top of the transport layer is the application layer it contains all the higher level protocols the early ones included virtual terminal  telnet   file transfer  ftp   and electronic mail  smtp   many other protocols have been added to these over the years some important ones that we will study  shown in fig 1-22  48 introduction chap 1 link dsl sonet 802.11 ethernet ip icmp http smtp rtp dns tcp udp internet transport layers protocols application figure 1-22 the tcp/ip model with some protocols we will study include the domain name system  dns   for mapping host names onto their network addresses  http  the protocol for fetching pages on the world wide web  and rtp  the protocol for delivering real-time media such as voice or movies 1.4.3 the model used in this book as mentioned earlier  the strength of the osi reference model is the model itself  minus the presentation and session layers   which has proven to be exceptionally useful for discussing computer networks in contrast  the strength of the tcp/ip reference model is the protocols  which have been widely used for many years since computer scientists like to have their cake and eat it  too  we will use the hybrid model of fig 1-23 as the framework for this book 5 application 4 transport 3 network 2 link 1 physical figure 1-23 the reference model used in this book this model has five layers  running from the physical layer up through the link  network and transport layers to the application layer the physical layer specifies how to transmit bits across different kinds of media as electrical  or other analog  signals the link layer is concerned with how to send finite-length messages between directly connected computers with specified levels of reliability ethernet and 802.11 are examples of link layer protocols sec 1.4 reference models 49 the network layer deals with how to combine multiple links into networks  and networks of networks  into internetworks so that we can send packets between distant computers this includes the task of finding the path along which to send the packets ip is the main example protocol we will study for this layer the transport layer strengthens the delivery guarantees of the network layer  usually with increased reliability  and provide delivery abstractions  such as a reliable byte stream  that match the needs of different applications tcp is an important example of a transport layer protocol finally  the application layer contains programs that make use of the network many  but not all  networked applications have user interfaces  such as a web browser our concern  however  is with the portion of the program that uses the network this is the http protocol in the case of the web browser there are also important support programs in the application layer  such as the dns  that are used by many applications our chapter sequence is based on this model in this way  we retain the value of the osi model for understanding network architectures  but concentrate primarily on protocols that are important in practice  from tcp/ip and related protocols to newer ones such as 802.11  sonet  and bluetooth 1.4.4 a comparison of the osi and tcp/ip reference models the osi and tcp/ip reference models have much in common both are based on the concept of a stack of independent protocols also  the functionality of the layers is roughly similar for example  in both models the layers up through and including the transport layer are there to provide an end-to-end  network independent transport service to processes wishing to communicate these layers form the transport provider again in both models  the layers above transport are application-oriented users of the transport service despite these fundamental similarities  the two models also have many differences in this section we will focus on the key differences between the two reference models it is important to note that we are comparing the reference models here  not the corresponding protocol stacks the protocols themselves will be discussed later for an entire book comparing and contrasting tcp/ip and osi  see piscitello and chapin  1993   three concepts are central to the osi model  1 services 2 interfaces 3 protocols probably the biggest contribution of the osi model is that it makes the distinction between these three concepts explicit each layer performs some services for the 50 introduction chap 1 layer above it the service definition tells what the layer does  not how entities above it access it or how the layer works it defines the layer ? s semantics a layer ? s interface tells the processes above it how to access it it specifies what the parameters are and what results to expect it  too  says nothing about how the layer works inside finally  the peer protocols used in a layer are the layer ? s own business it can use any protocols it wants to  as long as it gets the job done  i.e  provides the offered services   it can also change them at will without affecting software in higher layers these ideas fit very nicely with modern ideas about object-oriented programming an object  like a layer  has a set of methods  operations  that processes outside the object can invoke the semantics of these methods define the set of services that the object offers the methods ? parameters and results form the object ? s interface the code internal to the object is its protocol and is not visible or of any concern outside the object the tcp/ip model did not originally clearly distinguish between services  interfaces  and protocols  although people have tried to retrofit it after the fact to make it more osi-like for example  the only real services offered by the internet layer are send ip packet and receive ip packet as a consequence  the protocols in the osi model are better hidden than in the tcp/ip model and can be replaced relatively easily as the technology changes being able to make such changes transparently is one of the main purposes of having layered protocols in the first place the osi reference model was devised before the corresponding protocols were invented this ordering meant that the model was not biased toward one particular set of protocols  a fact that made it quite general the downside of this ordering was that the designers did not have much experience with the subject and did not have a good idea of which functionality to put in which layer for example  the data link layer originally dealt only with point-to-point networks when broadcast networks came around  a new sublayer had to be hacked into the model furthermore  when people started to build real networks using the osi model and existing protocols  it was discovered that these networks did not match the required service specifications  wonder of wonders   so convergence sublayers had to be grafted onto the model to provide a place for papering over the differences finally  the committee originally expected that each country would have one network  run by the government and using the osi protocols  so no thought was given to internetworking to make a long story short  things did not turn out that way with tcp/ip the reverse was true  the protocols came first  and the model was really just a description of the existing protocols there was no problem with the protocols fitting the model they fit perfectly the only trouble was that the model did not fit any other protocol stacks consequently  it was not especially useful for describing other  non-tcp/ip networks sec 1.4 reference models 51 turning from philosophical matters to more specific ones  an obvious difference between the two models is the number of layers  the osi model has seven layers and the tcp/ip model has four both have  inter  network  transport  and application layers  but the other layers are different another difference is in the area of connectionless versus connection-oriented communication the osi model supports both connectionless and connectionoriented communication in the network layer  but only connection-oriented communication in the transport layer  where it counts  because the transport service is visible to the users   the tcp/ip model supports only one mode in the network layer  connectionless  but both in the transport layer  giving the users a choice this choice is especially important for simple request-response protocols 1.4.5 a critique of the osi model and protocols neither the osi model and its protocols nor the tcp/ip model and its protocols are perfect quite a bit of criticism can be  and has been  directed at both of them in this section and the next one  we will look at some of these criticisms we will begin with osi and examine tcp/ip afterward at the time the second edition of this book was published  1989   it appeared to many experts in the field that the osi model and its protocols were going to take over the world and push everything else out of their way this did not happen why ? a look back at some of the reasons may be useful they can be summarized as  1 bad timing 2 bad technology 3 bad implementations 4 bad politics bad timing first let us look at reason one  bad timing the time at which a standard is established is absolutely critical to its success david clark of m.i.t has a theory of standards that he calls the apocalypse of the two elephants  which is illustrated in fig 1-24 this figure shows the amount of activity surrounding a new subject when the subject is first discovered  there is a burst of research activity in the form of discussions  papers  and meetings after a while this activity subsides  corporations discover the subject  and the billion-dollar wave of investment hits it is essential that the standards be written in the trough in between the two ? ? elephants ? ? if they are written too early  before the research results are well 52 introduction chap 1 time activity research standards billion dollar investment figure 1-24 the apocalypse of the two elephants established   the subject may still be poorly understood ; the result is a bad standard if they are written too late  so many companies may have already made major investments in different ways of doing things that the standards are effectively ignored if the interval between the two elephants is very short  because everyone is in a hurry to get started   the people developing the standards may get crushed it now appears that the standard osi protocols got crushed the competing tcp/ip protocols were already in widespread use by research universities by the time the osi protocols appeared while the billion-dollar wave of investment had not yet hit  the academic market was large enough that many vendors had begun cautiously offering tcp/ip products when osi came around  they did not want to support a second protocol stack until they were forced to  so there were no initial offerings with every company waiting for every other company to go first  no company went first and osi never happened bad technology the second reason that osi never caught on is that both the model and the protocols are flawed the choice of seven layers was more political than technical  and two of the layers  session and presentation  are nearly empty  whereas two other ones  data link and network  are overfull the osi model  along with its associated service definitions and protocols  is extraordinarily complex when piled up  the printed standards occupy a significant fraction of a meter of paper they are also difficult to implement and inefficient in operation in this context  a riddle posed by paul mockapetris and cited by rose  1993  comes to mind  q  what do you get when you cross a mobster with an international standard ? a  someone who makes you an offer you can ? t understand sec 1.4 reference models 53 in addition to being incomprehensible  another problem with osi is that some functions  such as addressing  flow control  and error control  reappear again and again in each layer saltzer et al  1984   for example  have pointed out that to be effective  error control must be done in the highest layer  so that repeating it over and over in each of the lower layers is often unnecessary and inefficient bad implementations given the enormous complexity of the model and the protocols  it will come as no surprise that the initial implementations were huge  unwieldy  and slow everyone who tried them got burned it did not take long for people to associate ? ? osi ? ? with ? ? poor quality ? ? although the products improved in the course of time  the image stuck in contrast  one of the first implementations of tcp/ip was part of berkeley unix and was quite good  not to mention  free   people began using it quickly  which led to a large user community  which led to improvements  which led to an even larger community here the spiral was upward instead of downward bad politics on account of the initial implementation  many people  especially in academia  thought of tcp/ip as part of unix  and unix in the 1980s in academia was not unlike parenthood  then incorrectly called motherhood  and apple pie osi  on the other hand  was widely thought to be the creature of the european telecommunication ministries  the european community  and later the u.s government this belief was only partly true  but the very idea of a bunch of government bureaucrats trying to shove a technically inferior standard down the throats of the poor researchers and programmers down in the trenches actually developing computer networks did not aid osi ? s cause some people viewed this development in the same light as ibm announcing in the 1960s that pl/i was the language of the future  or the dod correcting this later by announcing that it was actually ada 1.4.6 a critique of the tcp/ip reference model the tcp/ip model and protocols have their problems too first  the model does not clearly distinguish the concepts of services  interfaces  and protocols good software engineering practice requires differentiating between the specification and the implementation  something that osi does very carefully  but tcp/ip does not consequently  the tcp/ip model is not much of a guide for designing new networks using new technologies second  the tcp/ip model is not at all general and is poorly suited to describing any protocol stack other than tcp/ip trying to use the tcp/ip model to describe bluetooth  for example  is completely impossible 54 introduction chap 1 third  the link layer is not really a layer at all in the normal sense of the term as used in the context of layered protocols it is an interface  between the network and data link layers   the distinction between an interface and a layer is crucial  and one should not be sloppy about it fourth  the tcp/ip model does not distinguish between the physical and data link layers these are completely different the physical layer has to do with the transmission characteristics of copper wire  fiber optics  and wireless communication the data link layer ? s job is to delimit the start and end of frames and get them from one side to the other with the desired degree of reliability a proper model should include both as separate layers the tcp/ip model does not do this finally  although the ip and tcp protocols were carefully thought out and well implemented  many of the other protocols were ad hoc  generally produced by a couple of graduate students hacking away until they got tired the protocol implementations were then distributed free  which resulted in their becoming widely used  deeply entrenched  and thus hard to replace some of them are a bit of an embarrassment now the virtual terminal protocol  telnet  for example  was designed for a ten-character-per-second mechanical teletype terminal it knows nothing of graphical user interfaces and mice nevertheless  it is still in use some 30 years later 1.5 example networks the subject of computer networking covers many different kinds of networks  large and small  well known and less well known they have different goals  scales  and technologies in the following sections  we will look at some examples  to get an idea of the variety one finds in the area of computer networking we will start with the internet  probably the best known network  and look at its history  evolution  and technology then we will consider the mobile phone network technically  it is quite different from the internet  contrasting nicely with it next we will introduce ieee 802.11  the dominant standard for wireless lans finally  we will look at rfid and sensor networks  technologies that extend the reach of the network to include the physical world and everyday objects 1.5.1 the internet the internet is not really a network at all  but a vast collection of different networks that use certain common protocols and provide certain common services it is an unusual system in that it was not planned by anyone and is not controlled by anyone to better understand it  let us start from the beginning and see how it has developed and why for a wonderful history of the internet  john naughton ? s  2000  book is highly recommended it is one of those rare books that is not only fun to read  but also has 20 pages of ibid ? s and op cit ? s for the serious historian some of the material in this section is based on this book sec 1.5 example networks 55 of course  countless technical books have been written about the internet and its protocols as well for more information  see  for example  maufer  1999   the arpanet the story begins in the late 1950s at the height of the cold war  the u.s dod wanted a command-and-control network that could survive a nuclear war at that time  all military communications used the public telephone network  which was considered vulnerable the reason for this belief can be gleaned from fig 1-25  a   here the black dots represent telephone switching offices  each of which was connected to thousands of telephones these switching offices were  in turn  connected to higher-level switching offices  toll offices   to form a national hierarchy with only a small amount of redundancy the vulnerability of the system was that the destruction of a few key toll offices could fragment it into many isolated islands  a  toll office switching office  b  figure 1-25  a  structure of the telephone system  b  baran ? s proposed distributed switching system around 1960  the dod awarded a contract to the rand corporation to find a solution one of its employees  paul baran  came up with the highly distributed and fault-tolerant design of fig 1-25  b   since the paths between any two switching offices were now much longer than analog signals could travel without distortion  baran proposed using digital packet-switching technology baran wrote several reports for the dod describing his ideas in detail  baran  1964   officials at the pentagon liked the concept and asked at&t  then the u.s ? national telephone monopoly  to build a prototype at&t dismissed baran ? s ideas out of hand the biggest and richest corporation in the world was not about to allow 56 introduction chap 1 some young whippersnapper tell it how to build a telephone system they said baran ? s network could not be built and the idea was killed several years went by and still the dod did not have a better command-andcontrol system to understand what happened next  we have to go back all the way to october 1957  when the soviet union beat the u.s into space with the launch of the first artificial satellite  sputnik when president eisenhower tried to find out who was asleep at the switch  he was appalled to find the army  navy  and air force squabbling over the pentagon ? s research budget his immediate response was to create a single defense research organization  arpa  the advanced research projects agency arpa had no scientists or laboratories ; in fact  it had nothing more than an office and a small  by pentagon standards  budget it did its work by issuing grants and contracts to universities and companies whose ideas looked promising to it for the first few years  arpa tried to figure out what its mission should be in 1967  the attention of larry roberts  a program manager at arpa who was trying to figure out how to provide remote access to computers  turned to networking he contacted various experts to decide what to do one of them  wesley clark  suggested building a packet-switched subnet  connecting each host to its own router after some initial skepticism  roberts bought the idea and presented a somewhat vague paper about it at the acm sigops symposium on operating system principles held in gatlinburg  tennessee in late 1967  roberts  1967   much to roberts ? surprise  another paper at the conference described a similar system that had not only been designed but actually fully implemented under the direction of donald davies at the national physical laboratory in england the npl system was not a national system  it just connected several computers on the npl campus   but it demonstrated that packet switching could be made to work furthermore  it cited baran ? s now discarded earlier work roberts came away from gatlinburg determined to build what later became known as the arpanet the subnet would consist of minicomputers called imps  interface message processors  connected by 56-kbps transmission lines for high reliability  each imp would be connected to at least two other imps the subnet was to be a datagram subnet  so if some lines and imps were destroyed  messages could be automatically rerouted along alternative paths each node of the network was to consist of an imp and a host  in the same room  connected by a short wire a host could send messages of up to 8063 bits to its imp  which would then break these up into packets of at most 1008 bits and forward them independently toward the destination each packet was received in its entirety before being forwarded  so the subnet was the first electronic storeand forward packet-switching network arpa then put out a tender for building the subnet twelve companies bid for it after evaluating all the proposals  arpa selected bbn  a consulting firm based in cambridge  massachusetts  and in december 1968 awarded it a contract sec 1.5 example networks 57 to build the subnet and write the subnet software bbn chose to use specially modified honeywell ddp-316 minicomputers with 12k 16-bit words of core memory as the imps the imps did not have disks  since moving parts were considered unreliable the imps were interconnected by 56-kbps lines leased from telephone companies although 56 kbps is now the choice of teenagers who can not afford dsl or cable  it was then the best money could buy the software was split into two parts  subnet and host the subnet software consisted of the imp end of the host-imp connection  the imp-imp protocol  and a source imp to destination imp protocol designed to improve reliability the original arpanet design is shown in fig 1-26 host-imp protocol host-host protocol source imp to destination imp protocol imp-imp protocol imp-imp protocol host imp subnet figure 1-26 the original arpanet design outside the subnet  software was also needed  namely  the host end of the host-imp connection  the host-host protocol  and the application software it soon became clear that bbn was of the opinion that when it had accepted a message on a host-imp wire and placed it on the host-imp wire at the destination  its job was done roberts had a problem  though  the hosts needed software too to deal with it  he convened a meeting of network researchers  mostly graduate students  at snowbird  utah  in the summer of 1969 the graduate students expected some network expert to explain the grand design of the network and its software to them and then assign each of them the job of writing part of it they were astounded when there was no network expert and no grand design they had to figure out what to do on their own nevertheless  somehow an experimental network went online in december 1969 with four nodes  at ucla  ucsb  sri  and the university of utah these four were chosen because all had a large number of arpa contracts  and all had different and completely incompatible host computers  just to make it more fun   the first host-to-host message had been sent two months earlier from the ucla 58 introduction chap 1 node by a team led by len kleinrock  a pioneer of the theory of packet switching  to the sri node the network grew quickly as more imps were delivered and installed ; it soon spanned the united states figure 1-27 shows how rapidly the arpanet grew in the first 3 years mit ucla ucla rand bbn sri utah illinois mit lincoln case carn rand bbn harvard burroughs sdc stan ucla sri utah ucsb sdc ucsb sri utah ucsb ncar gwc lincoln case mitre etac rand tinker bbn harvard nbs sdc ames usc stan ucla carn sri utah mcclellan ucsb illinois linc radc mit illinois mit linc radc utah tinker rand sri lbl mcclellan ames tip ames imp x-parc fnwc ucsb ucsd stanford cca bbn harvard aberdeen nbs etac arpa mitre saac belvoir cmu ucla sdc usc noaa gwc case  a   d   b   c   e  figure 1-27 growth of the arpanet  a  december 1969  b  july 1970  c  march 1971  d  april 1972  e  september 1972 in addition to helping the fledgling arpanet grow  arpa also funded research on the use of satellite networks and mobile packet radio networks in one now famous demonstration  a truck driving around in california used the packet radio network to send messages to sri  which were then forwarded over the arpanet to the east coast  where they were shipped to university college in london over the satellite network this allowed a researcher in the truck to use a computer in london while driving around in california this experiment also demonstrated that the existing arpanet protocols were not suitable for running over different networks this observation led to more research on protocols  culminating with the invention of the tcp/ip model and protocols  cerf and kahn  1974   tcp/ip was specifically designed to handle communication over internetworks  something becoming increasingly important as more and more networks were hooked up to the arpanet sec 1.5 example networks 59 to encourage adoption of these new protocols  arpa awarded several contracts to implement tcp/ip on different computer platforms  including ibm  dec  and hp systems  as well as for berkeley unix researchers at the university of california at berkeley rewrote tcp/ip with a new programming interface called sockets for the upcoming 4.2bsd release of berkeley unix they also wrote many application  utility  and management programs to show how convenient it was to use the network with sockets the timing was perfect many universities had just acquired a second or third vax computer and a lan to connect them  but they had no networking software when 4.2bsd came along  with tcp/ip  sockets  and many network utilities  the complete package was adopted immediately furthermore  with tcp/ip  it was easy for the lans to connect to the arpanet  and many did during the 1980s  additional networks  especially lans  were connected to the arpanet as the scale increased  finding hosts became increasingly expensive  so dns  domain name system  was created to organize machines into domains and map host names onto ip addresses since then  dns has become a generalized  distributed database system for storing a variety of information related to naming we will study it in detail in chap 7 nsfnet by the late 1970s  nsf  the u.s national science foundation  saw the enormous impact the arpanet was having on university research  allowing scientists across the country to share data and collaborate on research projects however  to get on the arpanet a university had to have a research contract with the dod many did not have a contract nsf ? s initial response was to fund the computer science network  csnet  in 1981 it connected computer science departments and industrial research labs to the arpanet via dial-up and leased lines in the late 1980s  the nsf went further and decided to design a successor to the arpanet that would be open to all university research groups to have something concrete to start with  nsf decided to build a backbone network to connect its six supercomputer centers  in san diego  boulder  champaign  pittsburgh  ithaca  and princeton each supercomputer was given a little brother  consisting of an lsi-11 microcomputer called a fuzzball the fuzzballs were connected with 56-kbps leased lines and formed the subnet  the same hardware technology the arpanet used the software technology was different however  the fuzzballs spoke tcp/ip right from the start  making it the first tcp/ip wan nsf also funded some  eventually about 20  regional networks that connected to the backbone to allow users at thousands of universities  research labs  libraries  and museums to access any of the supercomputers and to communicate with one another the complete network  including backbone and the regional networks  was called nsfnet it connected to the arpanet through a link between an 60 introduction chap 1 imp and a fuzzball in the carnegie-mellon machine room the first nsfnet backbone is illustrated in fig 1-28 superimposed on a map of the u.s nsf supercomputer center nsf midlevel network both figure 1-28 the nsfnet backbone in 1988 nsfnet was an instantaneous success and was overloaded from the word go nsf immediately began planning its successor and awarded a contract to the michigan-based merit consortium to run it fiber optic channels at 448 kbps were leased from mci  since merged with worldcom  to provide the version 2 backbone ibm pc-rts were used as routers this  too  was soon overwhelmed  and by 1990  the second backbone was upgraded to 1.5 mbps as growth continued  nsf realized that the government could not continue financing networking forever furthermore  commercial organizations wanted to join but were forbidden by nsf ? s charter from using networks nsf paid for consequently  nsf encouraged merit  mci  and ibm to form a nonprofit corporation  ans  advanced networks and services   as the first step along the road to commercialization in 1990  ans took over nsfnet and upgraded the 1.5-mbps links to 45 mbps to form ansnet this network operated for 5 years and was then sold to america online but by then  various companies were offering commercial ip service and it was clear the government should now get out of the networking business to ease the transition and make sure every regional network could communicate with every other regional network  nsf awarded contracts to four different network operators to establish a nap  network access point   these operators were pacbell  san francisco   ameritech  chicago   mfs  washington  d.c   and sprint  new york city  where for nap purposes  pennsauken  new jersey counts as new york city   every network operator that wanted to provide backbone service to the nsf regional networks had to connect to all the naps sec 1.5 example networks 61 this arrangement meant that a packet originating on any regional network had a choice of backbone carriers to get from its nap to the destination ? s nap consequently  the backbone carriers were forced to compete for the regional networks ? business on the basis of service and price  which was the idea  of course as a result  the concept of a single default backbone was replaced by a commercially driven competitive infrastructure many people like to criticize the federal government for not being innovative  but in the area of networking  it was dod and nsf that created the infrastructure that formed the basis for the internet and then handed it over to industry to operate during the 1990s  many other countries and regions also built national research networks  often patterned on the arpanet and nsfnet these included europanet and ebone in europe  which started out with 2-mbps lines and then upgraded to 34-mbps lines eventually  the network infrastructure in europe was handed over to industry as well the internet has changed a great deal since those early days it exploded in size with the emergence of the world wide web  www  in the early 1990s recent data from the internet systems consortium puts the number of visible internet hosts at over 600 million this guess is only a low-ball estimate  but it far exceeds the few million hosts that were around when the first conference on the www was held at cern in 1994 the way we use the internet has also changed radically initially  applications such as email-for-academics  newsgroups  remote login  and file transfer dominated later it switched to email-for-everyman  then the web and peer-to-peer content distribution  such as the now-shuttered napster now real-time media distribution  social networks  e.g  facebook   and microblogging  e.g  twitter  are taking off these switches brought richer kinds of media to the internet and hence much more traffic in fact  the dominant traffic on the internet seems to change with some regularity as  for example  new and better ways to work with music or movies can become very popular very quickly architecture of the internet the architecture of the internet has also changed a great deal as it has grown explosively in this section  we will attempt to give a brief overview of what it looks like today the picture is complicated by continuous upheavals in the businesses of telephone companies  telcos   cable companies and isps that often make it hard to tell who is doing what one driver of these upheavals is telecommunications convergence  in which one network is used for previously different uses for example  in a ? ? triple play ? ? one company sells you telephony  tv  and internet service over the same network connection on the assumption that this will save you money consequently  the description given here will be of necessity somewhat simpler than reality and what is true today may not be true tomorrow 62 introduction chap 1 the big picture is shown in fig 1-29 let us examine this figure piece by piece  starting with a computer at home  at the edges of the figure   to join the internet  the computer is connected to an internet service provider  or simply isp  from who the user purchases internet access or connectivity this lets the computer exchange packets with all of the other accessible hosts on the internet the user might send packets to surf the web or for any of a thousand other uses  it does not matter there are many kinds of internet access  and they are usually distinguished by how much bandwidth they provide and how much they cost  but the most important attribute is connectivity data center fiber  ftth  dsl dialup cable 3g mobile phone tier 1 isp other isps peering at ixp pop data path router cable modem cmts backbone dslam dsl modem figure 1-29 overview of the internet architecture a common way to connect to an isp is to use the phone line to your house  in which case your phone company is your isp dsl  short for digital subscriber line  reuses the telephone line that connects to your house for digital data transmission the computer is connected to a device called a dsl modem that converts between digital packets and analog signals that can pass unhindered over the telephone line at the other end  a device called a dslam  digital subscriber line access multiplexer  converts between signals and packets several other popular ways to connect to an isp are shown in fig 1-29 dsl is a higher-bandwidth way to use the local telephone line than to send bits over a traditional telephone call instead of a voice conversation that is called dial-up and done with a different kind of modem at both ends the word modem is short for ? ? modulator demodulator ? ? and refers to any device that converts between digital bits and analog signals another method is to send signals over the cable tv system like dsl  this is a way to reuse existing infrastructure  in this case otherwise unused cable tv sec 1.5 example networks 63 channels the device at the home end is called a cable modem and the device at the cable headend is called the cmts  cable modem termination system   dsl and cable provide internet access at rates from a small fraction of a megabit/sec to multiple megabit/sec  depending on the system these rates are much greater than dial-up rates  which are limited to 56 kbps because of the narrow bandwidth used for voice calls internet access at much greater than dial-up speeds is called broadband the name refers to the broader bandwidth that is used for faster networks  rather than any particular speed the access methods mentioned so far are limited by the bandwidth of the ? ? last mile ? ? or last leg of transmission by running optical fiber to residences  faster internet access can be provided at rates on the order of 10 to 100 mbps this design is called ftth  fiber to the home   for businesses in commercial areas  it may make sense to lease a high-speed transmission line from the offices to the nearest isp for example  in north america  a t3 line runs at roughly 45 mbps wireless is used for internet access too an example we will explore shortly is that of 3g mobile phone networks they can provide data delivery at rates of 1 mbps or higher to mobile phones and fixed subscribers in the coverage area we can now move packets between the home and the isp we call the location at which customer packets enter the isp network for service the isp ? s pop  point of presence   we will next explain how packets are moved between the pops of different isps from this point on  the system is fully digital and packet switched isp networks may be regional  national  or international in scope we have already seen that their architecture is made up of long-distance transmission lines that interconnect routers at pops in the different cities that the isps serve this equipment is called the backbone of the isp if a packet is destined for a host served directly by the isp  that packet is routed over the backbone and delivered to the host otherwise  it must be handed over to another isp isps connect their networks to exchange traffic at ixps  internet exchange points   the connected isps are said to peer with each other there are many ixps in cities around the world they are drawn vertically in fig 1-29 because isp networks overlap geographically basically  an ixp is a room full of routers  at least one per isp a lan in the room connects all the routers  so packets can be forwarded from any isp backbone to any other isp backbone ixps can be large and independently owned facilities one of the largest is the amsterdam internet exchange  to which hundreds of isps connect and through which they exchange hundreds of gigabits/sec of traffic the peering that happens at ixps depends on the business relationships between isps there are many possible relationships for example  a small isp might pay a larger isp for internet connectivity to reach distant hosts  much as a customer purchases service from an internet provider in this case  the small isp is said to pay for transit alternatively  two large isps might decide to exchange 64 introduction chap 1 traffic so that each isp can deliver some traffic to the other isp without having to pay for transit one of the many paradoxes of the internet is that isps who publicly compete with one another for customers often privately cooperate to do peering  metz  2001   the path a packet takes through the internet depends on the peering choices of the isps if the isp delivering a packet peers with the destination isp  it might deliver the packet directly to its peer otherwise  it might route the packet to the nearest place at which it connects to a paid transit provider so that provider can deliver the packet two example paths across isps are drawn in fig 1-29 often  the path a packet takes will not be the shortest path through the internet at the top of the food chain are a small handful of companies  like at&t and sprint  that operate large international backbone networks with thousands of routers connected by high-bandwidth fiber optic links these isps do not pay for transit they are usually called tier 1 isps and are said to form the backbone of the internet  since everyone else must connect to them to be able to reach the entire internet companies that provide lots of content  such as google and yahoo !  locate their computers in data centers that are well connected to the rest of the internet these data centers are designed for computers  not humans  and may be filled with rack upon rack of machines called a server farm colocation or hosting data centers let customers put equipment such as servers at isp pops so that short  fast connections can be made between the servers and the isp backbones the internet hosting industry has become increasingly virtualized so that it is now common to rent a virtual machine that is run on a server farm instead of installing a physical computer these data centers are so large  tens or hundreds of thousands of machines  that electricity is a major cost  so data centers are sometimes built in areas where electricity is cheap this ends our quick tour of the internet we will have a great deal to say about the individual components and their design  algorithms  and protocols in subsequent chapters one further point worth mentioning here is that what it means to be on the internet is changing it used to be that a machine was on the internet if it   1  ran the tcp/ip protocol stack ;  2  had an ip address ; and  3  could send ip packets to all the other machines on the internet however  isps often reuse ip addresses depending on which computers are in use at the moment  and home networks often share one ip address between multiple computers this practice undermines the second condition security measures such as firewalls can also partly block computers from receiving packets  undermining the third condition despite these difficulties  it makes sense to regard such machines as being on the internet while they are connected to their isps also worth mentioning in passing is that some companies have interconnected all their existing internal networks  often using the same technology as the internet these intranets are typically accessible only on company premises or from company notebooks but otherwise work the same way as the internet sec 1.5 example networks 65 1.5.2 third-generation mobile phone networks people love to talk on the phone even more than they like to surf the internet  and this has made the mobile phone network the most successful network in the world it has more than four billion subscribers worldwide to put this number in perspective  it is roughly 60 % of the world ? s population and more than the number of internet hosts and fixed telephone lines combined  itu  2009   the architecture of the mobile phone network has changed greatly over the past 40 years along with its tremendous growth first-generation mobile phone systems transmitted voice calls as continuously varying  analog  signals rather than sequences of  digital  bits amps  advanced mobile phone system   which was deployed in the united states in 1982  was a widely used firstgeneration system second-generation mobile phone systems switched to transmitting voice calls in digital form to increase capacity  improve security  and offer text messaging gsm  global system for mobile communications   which was deployed starting in 1991 and has become the most widely used mobile phone system in the world  is a 2g system the third generation  or 3g  systems were initially deployed in 2001 and offer both digital voice and broadband digital data services they also come with a lot of jargon and many different standards to choose from 3g is loosely defined by the itu  an international standards body we will discuss in the next section  as providing rates of at least 2 mbps for stationary or walking users and 384 kbps in a moving vehicle umts  universal mobile telecommunications system   also called wcdma  wideband code division multiple access   is the main 3g system that is being rapidly deployed worldwide it can provide up to 14 mbps on the downlink and almost 6 mbps on the uplink future releases will use multiple antennas and radios to provide even greater speeds for users the scarce resource in 3g systems  as in 2g and 1g systems before them  is radio spectrum governments license the right to use parts of the spectrum to the mobile phone network operators  often using a spectrum auction in which network operators submit bids having a piece of licensed spectrum makes it easier to design and operate systems  since no one else is allowed transmit on that spectrum  but it often costs a serious amount of money in the uk in 2000  for example  five 3g licenses were auctioned for a total of about $ 40 billion it is the scarcity of spectrum that led to the cellular network design shown in fig 1-30 that is now used for mobile phone networks to manage the radio interference between users  the coverage area is divided into cells within a cell  users are assigned channels that do not interfere with each other and do not cause too much interference for adjacent cells this allows for good reuse of the spectrum  or frequency reuse  in the neighboring cells  which increases the capacity of the network in 1g systems  which carried each voice call on a specific frequency band  the frequencies were carefully chosen so that they did not conflict with neighboring cells in this way  a given frequency might only be reused once 66 introduction chap 1 in several cells modern 3g systems allow each cell to use all frequencies  but in a way that results in a tolerable level of interference to the neighboring cells there are variations on the cellular design  including the use of directional or sectored antennas on cell towers to further reduce interference  but the basic idea is the same cells base station figure 1-30 cellular design of mobile phone networks the architecture of the mobile phone network is very different than that of the internet it has several parts  as shown in the simplified version of the umts architecture in fig 1-31 first  there is the air interface this term is a fancy name for the radio communication protocol that is used over the air between the mobile device  e.g  the cell phone  and the cellular base station advances in the air interface over the past decades have greatly increased wireless data rates the umts air interface is based on code division multiple access  cdma   a technique that we will study in chap 2 the cellular base station together with its controller forms the radio access network this part is the wireless side of the mobile phone network the controller node or rnc  radio network controller  controls how the spectrum is used the base station implements the air interface it is called node b  a temporary label that stuck the rest of the mobile phone network carries the traffic for the radio access network it is called the core network the umts core network evolved from the core network used for the 2g gsm system that came before it however  something surprising is happening in the umts core network since the beginning of networking  a war has been going on between the people who support packet networks  i.e  connectionless subnets  and the people who support circuit networks  i.e  connection-oriented subnets   the main proponents of packets come from the internet community in a connectionless design  every packet is routed independently of every other packet as a consequence  if some routers go down during a session  no harm will be done as long as the system can sec 1.5 example networks 67 rnc rnc msc / mgw gmsc / mgw sgsn ggsn radio access network core network air interface  ? uu ?  node b pstn internet packets circuits  ? iu-cs ?  access / core interface  ? iu ?  packets  ? iu-ps ?  hss figure 1-31 architecture of the umts 3g mobile phone network dynamically reconfigure itself so that subsequent packets can find some route to the destination  even if it is different from that which previous packets used the circuit camp comes from the world of telephone companies in the telephone system  a caller must dial the called party ? s number and wait for a connection before talking or sending data this connection setup establishes a route through the telephone system that is maintained until the call is terminated all words or packets follow the same route if a line or switch on the path goes down  the call is aborted  making it less fault tolerant than a connectionless design the advantage of circuits is that they can support quality of service more easily by setting up a connection in advance  the subnet can reserve resources such as link bandwidth  switch buffer space  and cpu if an attempt is made to set up a call and insufficient resources are available  the call is rejected and the caller gets a kind of busy signal in this way  once a connection has been set up  the connection will get good service with a connectionless network  if too many packets arrive at the same router at the same moment  the router will choke and probably lose packets the sender will eventually notice this and resend them  but the quality of service will be jerky and unsuitable for audio or video unless the network is lightly loaded needless to say  providing adequate audio quality is something telephone companies care about very much  hence their preference for connections the surprise in fig 1-31 is that there is both packet and circuit switched equipment in the core network this shows the mobile phone network in transition  with mobile phone companies able to implement one or sometimes both of 68 introduction chap 1 the alternatives older mobile phone networks used a circuit-switched core in the style of the traditional phone network to carry voice calls this legacy is seen in the umts network with the msc  mobile switching center   gmsc  gateway mobile switching center   and mgw  media gateway  elements that set up connections over a circuit-switched core network such as the pstn  public switched telephone network   data services have become a much more important part of the mobile phone network than they used to be  starting with text messaging and early packet data services such as gprs  general packet radio service  in the gsm system these older data services ran at tens of kbps  but users wanted more newer mobile phone networks carry packet data at rates of multiple mbps for comparison  a voice call is carried at a rate of 64 kbps  typically 3 ? 4x less with compression to carry all this data  the umts core network nodes connect directly to a packet-switched network the sgsn  serving gprs support node  and the ggsn  gateway gprs support node  deliver data packets to and from mobiles and interface to external packet networks such as the internet this transition is set to continue in the mobile phone networks that are now being planned and deployed internet protocols are even used on mobiles to set up connections for voice calls over a packet data network  in the manner of voiceover ip ip and packets are used all the way from the radio access through to the core network of course  the way that ip networks are designed is also changing to support better quality of service if it did not  then problems with chopped-up audio and jerky video would not impress paying customers we will return to this subject in chap 5 another difference between mobile phone networks and the traditional internet is mobility when a user moves out of the range of one cellular base station and into the range of another one  the flow of data must be re-routed from the old to the new cell base station this technique is known as handover or handoff  and it is illustrated in fig 1-32  a   b  figure 1-32 mobile phone handover  a  before   b  after either the mobile device or the base station may request a handover when the quality of the signal drops in some cell networks  usually those based on cdma sec 1.5 example networks 69 technology  it is possible to connect to the new base station before disconnecting from the old base station this improves the connection quality for the mobile because there is no break in service ; the mobile is actually connected to two base stations for a short while this way of doing a handover is called a soft handover to distinguish it from a hard handover  in which the mobile disconnects from the old base station before connecting to the new one a related issue is how to find a mobile in the first place when there is an incoming call each mobile phone network has a hss  home subscriber server  in the core network that knows the location of each subscriber  as well as other profile information that is used for authentication and authorization in this way  each mobile can be found by contacting the hss a final area to discuss is security historically  phone companies have taken security much more seriously than internet companies for a long time because of the need to bill for service and avoid  payment  fraud unfortunately that is not saying much nevertheless  in the evolution from 1g through 3g technologies  mobile phone companies have been able to roll out some basic security mechanisms for mobiles starting with the 2g gsm system  the mobile phone was divided into a handset and a removable chip containing the subscriber ? s identity and account information the chip is informally called a sim card  short for subscriber identity module sim cards can be switched to different handsets to activate them  and they provide a basis for security when gsm customers travel to other countries on vacation or business  they often bring their handsets but buy a new sim card for few dollars upon arrival in order to make local calls with no roaming charges to reduce fraud  information on sim cards is also used by the mobile phone network to authenticate subscribers and check that they are allowed to use the network with umts  the mobile also uses the information on the sim card to check that it is talking to a legitimate network another aspect of security is privacy wireless signals are broadcast to all nearby receivers  so to make it difficult to eavesdrop on conversations  cryptographic keys on the sim card are used to encrypt transmissions this approach provides much better privacy than in 1g systems  which were easily tapped  but is not a panacea due to weaknesses in the encryption schemes mobile phone networks are destined to play a central role in future networks they are now more about mobile broadband applications than voice calls  and this has major implications for the air interfaces  core network architecture  and security of future networks 4g technologies that are faster and better are on the drawing board under the name of lte  long term evolution   even as 3g design and deployment continues other wireless technologies also offer broadband internet access to fixed and mobile clients  notably 802.16 networks under the common name of wimax it is entirely possible that lte and wimax are on a collision course with each other and it is hard to predict what will happen to them 70 introduction chap 1 1.5.3 wireless lans  802.11 almost as soon as laptop computers appeared  many people had a dream of walking into an office and magically having their laptop computer be connected to the internet consequently  various groups began working on ways to accomplish this goal the most practical approach is to equip both the office and the laptop computers with short-range radio transmitters and receivers to allow them to talk work in this field rapidly led to wireless lans being marketed by a variety of companies the trouble was that no two of them were compatible the proliferation of standards meant that a computer equipped with a brand x radio would not work in a room equipped with a brand y base station in the mid 1990s  the industry decided that a wireless lan standard might be a good idea  so the ieee committee that had standardized wired lans was given the task of drawing up a wireless lan standard the first decision was the easiest  what to call it all the other lan standards had numbers like 802.1  802.2  and 802.3  up to 802.10  so the wireless lan standard was dubbed 802.11 a common slang name for it is wifi but it is an important standard and deserves respect  so we will call it by its proper name  802.11 the rest was harder the first problem was to find a suitable frequency band that was available  preferably worldwide the approach taken was the opposite of that used in mobile phone networks instead of expensive  licensed spectrum  802.11 systems operate in unlicensed bands such as the ism  industrial  scientific  and medical  bands defined by itu-r  e.g  902-928 mhz  2.4-2.5 ghz  5.725-5.825 ghz   all devices are allowed to use this spectrum provided that they limit their transmit power to let different devices coexist of course  this means that 802.11 radios may find themselves competing with cordless phones  garage door openers  and microwave ovens 802.11 networks are made up of clients  such as laptops and mobile phones  and infrastructure called aps  access points  that is installed in buildings access points are sometimes called base stations the access points connect to the wired network  and all communication between clients goes through an access point it is also possible for clients that are in radio range to talk directly  such as two computers in an office without an access point this arrangement is called an ad hoc network it is used much less often than the access point mode both modes are shown in fig 1-33 802.11 transmission is complicated by wireless conditions that vary with even small changes in the environment at the frequencies used for 802.11  radio signals can be reflected off solid objects so that multiple echoes of a transmission may reach a receiver along different paths the echoes can cancel or reinforce each other  causing the received signal to fluctuate greatly this phenomenon is called multipath fading  and it is shown in fig 1-34 the key idea for overcoming variable wireless conditions is path diversity  or the sending of information along multiple  independent paths in this way  the sec 1.5 example networks 71  a   b  access to wired network point figure 1-33  a  wireless network with an access point  b  ad hoc network information is likely to be received even if one of the paths happens to be poor due to a fade these independent paths are typically built into the digital modulation scheme at the physical layer options include using different frequencies across the allowed band  following different spatial paths between different pairs of antennas  or repeating bits over different periods of time reflector faded signal wireless transmitter non-faded signal multiple paths wireless receiver figure 1-34 multipath fading different versions of 802.11 have used all of these techniques the initial  1997  standard defined a wireless lan that ran at either 1 mbps or 2 mbps by hopping between frequencies or spreading the signal across the allowed spectrum almost immediately  people complained that it was too slow  so work began on faster standards the spread spectrum design was extended and became the  1999  802.11b standard running at rates up to 11 mbps the 802.11a  1999  and 802.11g  2003  standards switched to a different modulation scheme called ofdm  orthogonal frequency division multiplexing   it divides a wide band of spectrum into many narrow slices over which different bits are sent in parallel this improved scheme  which we will study in chap 2  boosted the 802.11a/g bit 72 introduction chap 1 rates up to 54 mbps that is a significant increase  but people still wanted more throughput to support more demanding uses the latest version is 802.11n  2009   it uses wider frequency bands and up to four antennas per computer to achieve rates up to 450 mbps since wireless is inherently a broadcast medium  802.11 radios also have to deal with the problem that multiple transmissions that are sent at the same time will collide  which may interfere with reception to handle this problem  802.11 uses a csma  carrier sense multiple access  scheme that draws on ideas from classic wired ethernet  which  ironically  drew from an early wireless network developed in hawaii and called aloha computers wait for a short random interval before transmitting  and defer their transmissions if they hear that someone else is already transmitting this scheme makes it less likely that two computers will send at the same time it does not work as well as in the case of wired networks  though to see why  examine fig 1-35 suppose that computer a is transmitting to computer b  but the radio range of a ? s transmitter is too short to reach computer c if c wants to transmit to b it can listen before starting  but the fact that it does not hear anything does not mean that its transmission will succeed the inability of c to hear a before starting causes some collisions to occur after any collision  the sender then waits another  longer  random delay and retransmits the packet despite this and some other issues  the scheme works well enough in practice a b c range of a 's radio range of c 's radio figure 1-35 the range of a single radio may not cover the entire system another problem is that of mobility if a mobile client is moved away from the access point it is using and into the range of a different access point  some way of handing it off is needed the solution is that an 802.11 network can consist of multiple cells  each with its own access point  and a distribution system that connects the cells the distribution system is often switched ethernet  but it can use any technology as the clients move  they may find another access point with a better signal than the one they are currently using and change their association from the outside  the entire system looks like a single wired lan sec 1.5 example networks 73 that said  mobility in 802.11 has been of limited value so far compared to mobility in the mobile phone network typically  802.11 is used by nomadic clients that go from one fixed location to another  rather than being used on-the-go mobility is not really needed for nomadic usage even when 802.11 mobility is used  it extends over a single 802.11 network  which might cover at most a large building future schemes will need to provide mobility across different networks and across different technologies  e.g  802.21   finally  there is the problem of security since wireless transmissions are broadcast  it is easy for nearby computers to receive packets of information that were not intended for them to prevent this  the 802.11 standard included an encryption scheme known as wep  wired equivalent privacy   the idea was to make wireless security like that of wired security it is a good idea  but unfortunately the scheme was flawed and soon broken  borisov et al  2001   it has since been replaced with newer schemes that have different cryptographic details in the 802.11i standard  also called wifi protected access  initially called wpa but now replaced by wpa2 802.11 has caused a revolution in wireless networking that is set to continue beyond buildings  it is starting to be installed in trains  planes  boats  and automobiles so that people can surf the internet wherever they go mobile phones and all manner of consumer electronics  from game consoles to digital cameras  can communicate with it we will come back to it in detail in chap 4 1.5.4 rfid and sensor networks the networks we have studied so far are made up of computing devices that are easy to recognize  from computers to mobile phones with radio frequency identification  rfid   everyday objects can also be part of a computer network an rfid tag looks like a postage stamp-sized sticker that can be affixed to  or embedded in  an object so that it can be tracked the object might be a cow  a passport  a book or a shipping pallet the tag consists of a small microchip with a unique identifier and an antenna that receives radio transmissions rfid readers installed at tracking points find tags when they come into range and interrogate them for their information as shown in fig 1-36 applications include checking identities  managing the supply chain  timing races  and replacing barcodes there are many kinds of rfid  each with different properties  but perhaps the most fascinating aspect of rfid technology is that most rfid tags have neither an electric plug nor a battery instead  all of the energy needed to operate them is supplied in the form of radio waves by rfid readers this technology is called passive rfid to distinguish it from the  less common  active rfid in which there is a power source on the tag one common form of rfid is uhf rfid  ultra-high frequency rfid   it is used on shipping pallets and some drivers licenses readers send signals in 74 introduction chap 1 rfid reader rfid tag figure 1-36 rfid used to network everyday objects the 902-928 mhz band in the united states tags communicate at distances of several meters by changing the way they reflect the reader signals ; the reader is able to pick up these reflections this way of operating is called backscatter another popular kind of rfid is hf rfid  high frequency rfid   it operates at 13.56 mhz and is likely to be in your passport  credit cards  books  and noncontact payment systems hf rfid has a short range  typically a meter or less  because the physical mechanism is based on induction rather than backscatter there are also other forms of rfid using other frequencies  such as lf rfid  low frequency rfid   which was developed before hf rfid and used for animal tracking it is the kind of rfid likely to be in your cat rfid readers must somehow solve the problem of dealing with multiple tags within reading range this means that a tag can not simply respond when it hears a reader  or the signals from multiple tags may collide the solution is similar to the approach taken in 802.11  tags wait for a short random interval before responding with their identification  which allows the reader to narrow down individual tags and interrogate them further security is another problem the ability of rfid readers to easily track an object  and hence the person who uses it  can be an invasion of privacy unfortunately  it is difficult to secure rfid tags because they lack the computation and communication power to run strong cryptographic algorithms instead  weak measures like passwords  which can easily be cracked  are used if an identity card can be remotely read by an official at a border  what is to stop the same card from being tracked by other people without your knowledge ? not much rfid tags started as identification chips  but are rapidly turning into fullfledged computers for example  many tags have memory that can be updated and later queried  so that information about what has happened to the tagged object can be stored with it rieback et al  2006  demonstrated that this means that all of the usual problems of computer malware apply  only now your cat or your passport might be used to spread an rfid virus a step up in capability from rfid is the sensor network sensor networks are deployed to monitor aspects of the physical world so far  they have mostly been used for scientific experimentation  such as monitoring bird habitats  volcanic activity  and zebra migration  but business applications including healthcare  sec 1.5 example networks 75 monitoring equipment for vibration  and tracking of frozen  refrigerated  or otherwise perishable goods can not be too far behind sensor nodes are small computers  often the size of a key fob  that have temperature  vibration  and other sensors many nodes are placed in the environment that is to be monitored typically  they have batteries  though they may scavenge energy from vibrations or the sun as with rfid  having enough energy is a key challenge  and the nodes must communicate carefully to be able to deliver their sensor information to an external collection point a common strategy is for the nodes to self-organize to relay messages for each other  as shown in fig 1-37 this design is called a multihop network data collection point sensor node wireless hop figure 1-37 multihop topology of a sensor network rfid and sensor networks are likely to become much more capable and pervasive in the future researchers have already combined the best of both technologies by prototyping programmable rfid tags with light  movement  and other sensors  sample et al  2008   1.6 network standardization many network vendors and suppliers exist  each with its own ideas of how things should be done without coordination  there would be complete chaos  and users would get nothing done the only way out is to agree on some network standards not only do good standards allow different computers to communicate  but they also increase the market for products adhering to the standards a larger market leads to mass production  economies of scale in manufacturing  better implementations  and other benefits that decrease price and further increase acceptance in this section we will take a quick look at the important but little-known  world of international standardization but let us first discuss what belongs in a 76 introduction chap 1 standard a reasonable person might assume that a standard tells you how a protocol should work so that you can do a good job of implementing it that person would be wrong standards define what is needed for interoperability  no more  no less that lets the larger market emerge and also lets companies compete on the basis of how good their products are for example  the 802.11 standard defines many transmission rates but does not say when a sender should use which rate  which is a key factor in good performance that is up to whoever makes the product often getting to interoperability this way is difficult  since there are many implementation choices and standards usually define many options for 802.11  there were so many problems that  in a strategy that has become common practice  a trade group called the wifi alliance was started to work on interoperability within the 802.11 standard similarly  a protocol standard defines the protocol over the wire but not the service interface inside the box  except to help explain the protocol real service interfaces are often proprietary for example  the way tcp interfaces to ip within a computer does not matter for talking to a remote host it only matters that the remote host speaks tcp/ip in fact  tcp and ip are commonly implemented together without any distinct interface that said  good service interfaces  like good apis  are valuable for getting protocols used  and the best ones  such as berkeley sockets  can become very popular standards fall into two categories  de facto and de jure de facto  latin for ? ? from the fact ? ?  standards are those that have just happened  without any formal plan http  the protocol on which the web runs  started life as a de facto standard it was part of early www browsers developed by tim berners-lee at cern  and its use took off with the growth of the web bluetooth is another example it was originally developed by ericsson but now everyone is using it de jure  latin for ? ? by law ? ?  standards  in contrast  are adopted through the rules of some formal standardization body international standardization authorities are generally divided into two classes  those established by treaty among national governments  and those comprising voluntary  nontreaty organizations in the area of computer network standards  there are several organizations of each type  notably itu  iso  ietf and ieee  all of which we will discuss below in practice  the relationships between standards  companies  and standardization bodies are complicated de facto standards often evolve into de jure standards  especially if they are successful this happened in the case of http  which was quickly picked up by ietf standards bodies often ratify each others ? standards  in what looks like patting one another on the back  to increase the market for a technology these days  many ad hoc business alliances that are formed around particular technologies also play a significant role in developing and refining network standards for example  3gpp  third generation partnership project  is a collaboration between telecommunications associations that drives the umts 3g mobile phone standards sec 1.6 network standardization 77 1.6.1 who ? s who in the telecommunications world the legal status of the world ? s telephone companies varies considerably from country to country at one extreme is the united states  which has over 2000 separate   mostly very small  privately owned telephone companies a few more were added with the breakup of at&t in 1984  which was then the world ? s largest corporation  providing telephone service to about 80 percent of america ? s telephones   and the telecommunications act of 1996 that overhauled regulation to foster competition at the other extreme are countries in which the national government has a complete monopoly on all communication  including the mail  telegraph  telephone  and often radio and television much of the world falls into this category in some cases the telecommunication authority is a nationalized company  and in others it is simply a branch of the government  usually known as the ptt  post  telegraph & telephone administration   worldwide  the trend is toward liberalization and competition and away from government monopoly most european countries have now  partially  privatized their ptts  but elsewhere the process is still only slowly gaining steam with all these different suppliers of services  there is clearly a need to provide compatibility on a worldwide scale to ensure that people  and computers  in one country can call their counterparts in another one actually  this need has existed for a long time in 1865  representatives from many european governments met to form the predecessor to today ? s itu  international telecommunication union   its job was to standardize international telecommunications  which in those days meant telegraphy even then it was clear that if half the countries used morse code and the other half used some other code  there was going to be a problem when the telephone was put into international service  itu took over the job of standardizing telephony  pronounced te-lef-ony  as well in 1947  itu became an agency of the united nations itu has about 200 governmental members  including almost every member of the united nations since the united states does not have a ptt  somebody else had to represent it in itu this task fell to the state department  probably on the grounds that itu had to do with foreign countries  the state department ? s specialty itu also has more than 700 sector and associate members they include telephone companies  e.g  at&t  vodafone  sprint   telecom equipment manufacturers  e.g  cisco  nokia  nortel   computer vendors  e.g  microsoft  agilent  toshiba   chip manufacturers  e.g  intel  motorola  ti   and other interested companies  e.g  boeing  cbs  verisign   itu has three main sectors we will focus primarily on itu-t  the telecommunications standardization sector  which is concerned with telephone and data communication systems before 1993  this sector was called ccitt  which is an acronym for its french name  comite ? consultatif international te ? le ? graphique et te ? le ? phonique itu-r  the radiocommunications sector  is concerned with 78 introduction chap 1 coordinating the use by competing interest groups of radio frequencies worldwide the other sector is itu-d  the development sector it promotes the development of information and communication technologies to narrow the ? ? digital divide ? ? between countries with effective access to the information technologies and countries with limited access itu-t ? s task is to make technical recommendations about telephone  telegraph  and data communication interfaces these often become internationally recognized standards  though technically the recommendations are only suggestions that governments can adopt or ignore  as they wish  because governments are like 13-year-old boys ? they do not take kindly to being given orders   in practice  a country that wishes to adopt a telephone standard different from that used by the rest of the world is free to do so  but at the price of cutting itself off from everyone else this might work for north korea  but elsewhere it would be a real problem the real work of itu-t is done in its study groups there are currently 10 study groups  often as large as 400 people  that cover topics ranging from telephone billing to multimedia services to security sg 15  for example  standardizes the dsl technologies popularly used to connect to the internet in order to make it possible to get anything at all done  the study groups are divided into working parties  which are in turn divided into expert teams  which are in turn divided into ad hoc groups once a bureaucracy  always a bureaucracy despite all this  itu-t actually does get things done since its inception  it has produced more than 3000 recommendations  many of which are widely used in practice for example  recommendation h.264  also an iso standard known as mpeg-4 avc  is widely used for video compression  and x.509 public key certificates are used for secure web browsing and digitally signed email as the field of telecommunications completes the transition started in the 1980s from being entirely national to being entirely global  standards will become increasingly important  and more and more organizations will want to become involved in setting them for more information about itu  see irmer  1994   1.6.2 who ? s who in the international standards world international standards are produced and published by iso  international standards organization ?   a voluntary nontreaty organization founded in 1946 its members are the national standards organizations of the 157 member countries these members include ansi  u.s   bsi  great britain   afnor  france   din  germany   and 153 others iso issues standards on a truly vast number of subjects  ranging from nuts and bolts  literally  to telephone pole coatings  not to mention cocoa beans  iso 2451   fishing nets  iso 1530   women ? s underwear  iso 4416  and quite a few ? for the purist  iso ? s true name is the international organization for standardization sec 1.6 network standardization 79 other subjects one might not think were subject to standardization   on issues of telecommunication standards  iso and itu-t often cooperate  iso is a member of itu-t  to avoid the irony of two official and mutually incompatible international standards over 17,000 standards have been issued  including the osi standards iso has over 200 technical committees  tcs   numbered in the order of their creation  each dealing with a specific subject tc1 deals with the nuts and bolts  standardizing screw thread pitches   jtc1 deals with information technology  including networks  computers  and software it is the first  and so far only  joint technical committee  created in 1987 by merging tc97 with activities in iec  yet another standardization body each tc has subcommittees  scs  divided into working groups  wgs   the real work is done largely in the wgs by over 100,000 volunteers worldwide many of these ? ? volunteers ? ? are assigned to work on iso matters by their employers  whose products are being standardized others are government officials keen on having their country ? s way of doing things become the international standard academic experts also are active in many of the wgs the procedure used by iso for adopting standards has been designed to achieve as broad a consensus as possible the process begins when one of the national standards organizations feels the need for an international standard in some area a working group is then formed to come up with a cd  committee draft   the cd is then circulated to all the member bodies  which get 6 months to criticize it if a substantial majority approves  a revised document  called a dis  draft international standard  is produced and circulated for comments and voting based on the results of this round  the final text of the is  international standard  is prepared  approved  and published in areas of great controversy  a cd or dis may have to go through several versions before acquiring enough votes  and the whole process can take years nist  national institute of standards and technology  is part of the u.s department of commerce it used to be called the national bureau of standards it issues standards that are mandatory for purchases made by the u.s government  except for those of the department of defense  which defines its own standards another major player in the standards world is ieee  institute of electrical and electronics engineers   the largest professional organization in the world in addition to publishing scores of journals and running hundreds of conferences each year  ieee has a standardization group that develops standards in the area of electrical engineering and computing ieee ? s 802 committee has standardized many kinds of lans we will study some of its output later in this book the actual work is done by a collection of working groups  which are listed in fig 1-38 the success rate of the various 802 working groups has been low ; having an 802.x number is no guarantee of success still  the impact of the success stories  especially 802.3 and 802.11  on the industry and the world has been enormous 80 introduction chap 1 number topic 802.1 overview and architecture of lans 802.2 ? ? logical link control 802.3 * ethernet 802.4 ? ? token bus  was briefly used in manufacturing plants  802.5 token ring  ibm ? s entry into the lan world  802.6 ? ? dual queue dual bus  early metropolitan area network  802.7 ? ? technical advisory group on broadband technologies 802.8 ? technical advisory group on fiber optic technologies 802.9 ? ? isochronous lans  for real-time applications  802.10 ? ? virtual lans and security 802.11 * wireless lans  wifi  802.12 ? ? demand priority  hewlett-packard ? s anylan  802.13 unlucky number ; nobody wanted it 802.14 ? ? cable modems  defunct  an industry consortium got there first  802.15 * personal area networks  bluetooth  zigbee  802.16 * broadband wireless  wimax  802.17 resilient packet ring 802.18 technical advisory group on radio regulatory issues 802.19 technical advisory group on coexistence of all these standards 802.20 mobile broadband wireless  similar to 802.16e  802.21 media independent handoff  for roaming over technologies  802.22 wireless regional area network figure 1-38 the 802 working groups the important ones are marked with *  the ones marked with ? ? are hibernating the one marked with ? gave up and disbanded itself 1.6.3 who ? s who in the internet standards world the worldwide internet has its own standardization mechanisms  very different from those of itu-t and iso the difference can be crudely summed up by saying that the people who come to itu or iso standardization meetings wear suits  while the people who come to internet standardization meetings wear jeans  except when they meet in san diego  when they wear shorts and t-shirts   itu-t and iso meetings are populated by corporate officials and government civil servants for whom standardization is their job they regard standardization as a good thing and devote their lives to it internet people  on the other hand  prefer anarchy as a matter of principle however  with hundreds of millions of sec 1.6 network standardization 81 people all doing their own thing  little communication can occur thus  standards  however regrettable  are sometimes needed in this context  david clark of m.i.t once made a now-famous remark about internet standardization consisting of ? ? rough consensus and running code ? ? when the arpanet was set up  dod created an informal committee to oversee it in 1983  the committee was renamed the iab  internet activities board  and was given a slighter broader mission  namely  to keep the researchers involved with the arpanet and the internet pointed more or less in the same direction  an activity not unlike herding cats the meaning of the acronym ? ? iab ? ? was later changed to internet architecture board each of the approximately ten members of the iab headed a task force on some issue of importance the iab met several times a year to discuss results and to give feedback to the dod and nsf  which were providing most of the funding at this time when a standard was needed  e.g  a new routing algorithm   the iab members would thrash it out and then announce the change so the graduate students who were the heart of the software effort could implement it communication was done by a series of technical reports called rfcs  request for comments   rfcs are stored online and can be fetched by anyone interested in them from www.ietf.org/rfc they are numbered in chronological order of creation over 5000 now exist we will refer to many rfcs in this book by 1989  the internet had grown so large that this highly informal style no longer worked many vendors by then offered tcp/ip products and did not want to change them just because ten researchers had thought of a better idea in the summer of 1989  the iab was reorganized again the researchers were moved to the irtf  internet research task force   which was made subsidiary to iab  along with the ietf  internet engineering task force   the iab was repopulated with people representing a broader range of organizations than just the research community it was initially a self-perpetuating group  with members serving for a 2-year term and new members being appointed by the old ones later  the internet society was created  populated by people interested in the internet the internet society is thus in a sense comparable to acm or ieee it is governed by elected trustees who appoint the iab ? s members the idea of this split was to have the irtf concentrate on long-term research while the ietf dealt with short-term engineering issues the ietf was divided up into working groups  each with a specific problem to solve the chairmen of these working groups initially met as a steering committee to direct the engineering effort the working group topics include new applications  user information  osi integration  routing and addressing  security  network management  and standards eventually  so many working groups were formed  more than 70  that they were grouped into areas and the area chairmen met as the steering committee in addition  a more formal standardization process was adopted  patterned after isos to become a proposed standard  the basic idea must be explained in an rfc and have sufficient interest in the community to warrant consideration 82 introduction chap 1 to advance to the draft standard stage  a working implementation must have been rigorously tested by at least two independent sites for at least 4 months if the iab is convinced that the idea is sound and the software works  it can declare the rfc to be an internet standard some internet standards have become dod standards  mil-std   making them mandatory for dod suppliers for web standards  the world wide web consortium  w3c  develops protocols and guidelines to facilitate the long-term growth of the web it is an industry consortium led by tim berners-lee and set up in 1994 as the web really begun to take off w3c now has more than 300 members from around the world and has produced more than 100 w3c recommendations  as its standards are called  covering topics such as html and web privacy 1.7 metric units to avoid any confusion  it is worth stating explicitly that in this book  as in computer science in general  metric units are used instead of traditional english units  the furlong-stone-fortnight system   the principal metric prefixes are listed in fig 1-39 the prefixes are typically abbreviated by their first letters  with the units greater than 1 capitalized  kb  mb  etc   one exception  for historical reasons  is kbps for kilobits/sec thus  a 1-mbps communication line transmits 106 bits/sec and a 100-psec  or 100-ps  clock ticks every 10 ? 10 seconds since milli and micro both begin with the letter ? ? m  ? ? a choice had to be made normally  ? ? m ? ? is used for milli and ? ? ? ? ?  the greek letter mu  is used for micro exp explicit prefix exp explicit prefix 10 ? 3 0.001 milli 103 1,000 kilo 10 ? 6 0.000001 micro 106 1,000,000 mega 10 ? 9 0.000000001 nano 109 1,000,000,000 giga 10 ? 12 0.000000000001 pico 1012 1,000,000,000,000 tera 10 ? 15 0.000000000000001 femto 1015 1,000,000,000,000,000 peta 10 ? 18 0.0000000000000000001 atto 1018 1,000,000,000,000,000,000 exa 10 ? 21 0.0000000000000000000001 zepto 1021 1,000,000,000,000,000,000,000 zetta 10 ? 24 0.0000000000000000000000001 yocto 1024 1,000,000,000,000,000,000,000,000 yotta figure 1-39 the principal metric prefixes it is also worth pointing out that for measuring memory  disk  file  and database sizes  in common industry practice  the units have slightly different meanings there  kilo means 210  1024  rather than 103  1000  because memories are always a power of two thus  a 1-kb memory contains 1024 bytes  not 1000 bytes note also the capital ? ? b ? ? in that usage to mean ? ? bytes ? ?  units of eight sec 1.7 metric units 83 bits   instead of a lowercase ? ? b ? ? that means ? ? bits ? ? similarly  a 1-mb memory contains 220  1,048,576  bytes  a 1-gb memory contains 230  1,073,741,824  bytes  and a 1-tb database contains 240  1,099,511,627,776  bytes however  a 1-kbps communication line transmits 1000 bits per second and a 10-mbps lan runs at 10,000,000 bits/sec because these speeds are not powers of two unfortunately  many people tend to mix up these two systems  especially for disk sizes to avoid ambiguity  in this book  we will use the symbols kb  mb  gb  and tb for 210  220  230  and 240 bytes  respectively  and the symbols kbps  mbps  gbps  and tbps for 103  106  109  and 1012 bits/sec  respectively 1.8 outline of the rest of the book this book discusses both the principles and practice of computer networking most chapters start with a discussion of the relevant principles  followed by a number of examples that illustrate these principles these examples are usually taken from the internet and wireless networks such as the mobile phone network since these are both important and very different other examples will be given where relevant the book is structured according to the hybrid model of fig 1-23 starting with chap 2  we begin working our way up the protocol hierarchy beginning at the bottom we provide some background in the field of data communication that covers both wired and wireless transmission systems this material is concerned with how to deliver information over physical channels  although we cover only the architectural rather than the hardware aspects several examples of the physical layer  such as the public switched telephone network  the mobile telephone network  and the cable television network are also discussed chapters 3 and 4 discuss the data link layer in two parts chap 3 looks at the problem of how to send packets across a link  including error detection and correction we look at dsl  used for broadband internet access over phone lines  as a real-world example of a data link protocol in chap 4  we examine the medium access sublayer this is the part of the data link layer that deals with how to share a channel between multiple computers the examples we look at include wireless  such as 802.11 and rfid  and wired lans such as classic ethernet link layer switches that connect lans  such as switched ethernet  are also discussed here chapter 5 deals with the network layer  especially routing many routing algorithms  both static and dynamic  are covered even with good routing algorithms  though  if more traffic is offered than the network can handle  some packets will be delayed or discarded we discuss this issue from how to prevent congestion to how to guarantee a certain quality of service connecting heterogeneous networks to form internetworks also leads to numerous problems that are discussed here the network layer in the internet is given extensive coverage 84 introduction chap 1 chapter 6 deals with the transport layer much of the emphasis is on connection oriented protocols and reliability  since many applications need these both internet transport protocols  udp and tcp  are covered in detail  as are their performance issues chapter 7 deals with the application layer  its protocols  and its applications the first topic is dns  which is the internet ? s telephone book next comes email  including a discussion of its protocols then we move on to the web  with detailed discussions of static and dynamic content  and what happens on the client and server sides we follow this with a look at networked multimedia  including streaming audio and video finally  we discuss content-delivery networks  including peer-to-peer technology chapter 8 is about network security this topic has aspects that relate to all layers  so it is easiest to treat it after all the layers have been thoroughly explained the chapter starts with an introduction to cryptography later  it shows how cryptography can be used to secure communication  email  and the web the chapter ends with a discussion of some areas in which security collides with privacy  freedom of speech  censorship  and other social issues chapter 9 contains an annotated list of suggested readings arranged by chapter it is intended to help those readers who would like to pursue their study of networking further the chapter also has an alphabetical bibliography of all the references cited in this book the authors ? web site at pearson  http  //www.pearsonhighered.com/tanenbaum has a page with links to many tutorials  faqs  companies  industry consortia  professional organizations  standards organizations  technologies  papers  and more 1.9 summary computer networks have many uses  both for companies and for individuals  in the home and while on the move companies use networks of computers to share corporate information  typically using the client-server model with employee desktops acting as clients accessing powerful servers in the machine room for individuals  networks offer access to a variety of information and entertainment resources  as well as a way to buy and sell products and services individuals often access the internet via their phone or cable providers at home  though increasingly wireless access is used for laptops and phones technology advances are enabling new kinds of mobile applications and networks with computers embedded in appliances and other consumer devices the same advances raise social issues such as privacy concerns roughly speaking  networks can be divided into lans  mans  wans  and internetworks lans typical cover a building and operate at high speeds mans sec 1.9 summary 85 usually cover a city an example is the cable television system  which is now used by many people to access the internet wans may cover a country or a continent some of the technologies used to build these networks are point-to-point  e.g  a cable  while others are broadcast  e.g.,wireless   networks can be interconnected with routers to form internetworks  of which the internet is the largest and best known example wireless networks  for example 802.11 lans and 3g mobile telephony  are also becoming extremely popular network software is built around protocols  which are rules by which processes communicate most networks support protocol hierarchies  with each layer providing services to the layer above it and insulating them from the details of the protocols used in the lower layers protocol stacks are typically based either on the osi model or on the tcp/ip model both have link  network  transport  and application layers  but they differ on the other layers design issues include reliability  resource allocation  growth  security  and more much of this book deals with protocols and their design networks provide various services to their users these services can range from connectionless best-efforts packet delivery to connection-oriented guaranteed delivery in some networks  connectionless service is provided in one layer and connection-oriented service is provided in the layer above it well-known networks include the internet  the 3g mobile telephone network  and 802.11 lans the internet evolved from the arpanet  to which other networks were added to form an internetwork the present-day internet is actually a collection of many thousands of networks that use the tcp/ip protocol stack the 3g mobile telephone network provides wireless and mobile access to the internet at speeds of multiple mbps  and  of course  carries voice calls as well wireless lans based on the ieee 802.11 standard are deployed in many homes and cafes and can provide connectivity at rates in excess of 100 mbps new kinds of networks are emerging too  such as embedded sensor networks and networks based on rfid technology enabling multiple computers to talk to each other requires a large amount of standardization  both in the hardware and software organizations such as itu-t  iso  ieee  and iab manage different parts of the standardization process problems 1 imagine that you have trained your st bernard  bernie  to carry a box of three 8-mm tapes instead of a flask of brandy  when your disk fills up  you consider that an emergency  these tapes each contain 7 gigabytes the dog can travel to your side  wherever you may be  at 18 km/hour for what range of distances does bernie have a higher data rate than a transmission line whose data rate  excluding overhead  is 150 mbps ? how does your answer change if  i  bernie ? s speed is doubled ;  ii  each tape capacity is doubled ;  iii  the data rate of the transmission line is doubled 86 introduction chap 1 2 an alternative to a lan is simply a big timesharing system with terminals for all users give two advantages of a client-server system using a lan 3 the performance of a client-server system is strongly influenced by two major network characteristics  the bandwidth of the network  that is  how many bits/sec it can transport  and the latency  that is  how many seconds it takes for the first bit to get from the client to the server   give an example of a network that exhibits high bandwidth but also high latency then give an example of one that has both low bandwidth and low latency 4 besides bandwidth and latency  what other parameter is needed to give a good characterization of the quality of service offered by a network used for  i  digitized voice traffic ?  ii  video traffic ?  iii  financial transaction traffic ? 5 a factor in the delay of a store-and-forward packet-switching system is how long it takes to store and forward a packet through a switch if switching time is 10 ? sec  is this likely to be a major factor in the response of a client-server system where the client is in new york and the server is in california ? assume the propagation speed in copper and fiber to be 2/3 the speed of light in vacuum 6 a client-server system uses a satellite network  with the satellite at a height of 40,000 km what is the best-case delay in response to a request ? 7 in the future  when everyone has a home terminal connected to a computer network  instant public referendums on important pending legislation will become possible ultimately  existing legislatures could be eliminated  to let the will of the people be expressed directly the positive aspects of such a direct democracy are fairly obvious ; discuss some of the negative aspects 8 five routers are to be connected in a point-to-point subnet between each pair of routers  the designers may put a high-speed line  a medium-speed line  a low-speed line  or no line if it takes 100 ms of computer time to generate and inspect each topology  how long will it take to inspect all of them ? 9 a disadvantage of a broadcast subnet is the capacity wasted when multiple hosts attempt to access the channel at the same time as a simplistic example  suppose that time is divided into discrete slots  with each of the n hosts attempting to use the channel with probability p during each slot what fraction of the slots will be wasted due to collisions ? 10 what are two reasons for using layered protocols ? what is one possible disadvantage of using layered protocols ? 11 the president of the specialty paint corp gets the idea to work with a local beer brewer to produce an invisible beer can  as an anti-litter measure   the president tells her legal department to look into it  and they in turn ask engineering for help as a result  the chief engineer calls his counterpart at the brewery to discuss the technical aspects of the project the engineers then report back to their respective legal departments  which then confer by telephone to arrange the legal aspects finally  the two corporate presidents discuss the financial side of the deal what principle of a multilayer protocol in the sense of the osi model does this communication mechanism violate ? chap 1 problems 87 12 two networks each provide reliable connection-oriented service one of them offers a reliable byte stream and the other offers a reliable message stream are these identical ? if so  why is the distinction made ? if not  give an example of how they differ 13 what does ? ? negotiation ? ? mean when discussing network protocols ? give an example 14 in fig 1-19  a service is shown are any other services implicit in this figure ? if so  where ? if not  why not ? 15 in some networks  the data link layer handles transmission errors by requesting that damaged frames be retransmitted if the probability of a frame ? s being damaged is p  what is the mean number of transmissions required to send a frame ? assume that acknowledgements are never lost 16 a system has an n-layer protocol hierarchy applications generate messages of length m bytes at each of the layers  an h-byte header is added what fraction of the network bandwidth is filled with headers ? 17 what is the main difference between tcp and udp ? 18 the subnet of fig 1-25  b  was designed to withstand a nuclear war how many bombs would it take to partition the nodes into two disconnected sets ? assume that any bomb wipes out a node and all of the links connected to it 19 the internet is roughly doubling in size every 18 months although no one really knows for sure  one estimate put the number of hosts on it at 600 million in 2009 use these data to compute the expected number of internet hosts in the year 2018 do you believe this ? explain why or why not 20 when a file is transferred between two computers  two acknowledgement strategies are possible in the first one  the file is chopped up into packets  which are individually acknowledged by the receiver  but the file transfer as a whole is not acknowledged in the second one  the packets are not acknowledged individually  but the entire file is acknowledged when it arrives discuss these two approaches 21 mobile phone network operators need to know where their subscribers ? mobile phones  hence their users  are located explain why this is bad for users now give reasons why this is good for users 22 how long was a bit in the original 802.3 standard in meters ? use a transmission speed of 10 mbps and assume the propagation speed in coax is 2/3 the speed of light in vacuum 23 an image is 1600 ? ? 1200 pixels with 3 bytes/pixel assume the image is uncompressed how long does it take to transmit it over a 56-kbps modem channel ? over a 1-mbps cable modem ? over a 10-mbps ethernet ? over 100-mbps ethernet ? over gigabit ethernet ? 24 ethernet and wireless networks have some similarities and some differences one property of ethernet is that only one frame at a time can be transmitted on an ethernet does 802.11 share this property with ethernet ? discuss your answer 25 list two advantages and two disadvantages of having international standards for network protocols 88 introduction chap 1 26 when a system has a permanent part and a removable part  such as a cd-rom drive and the cd-rom   it is important that the system be standardized  so that different companies can make both the permanent and removable parts and everything still works together give three examples outside the computer industry where such international standards exist now give three areas outside the computer industry where they do not exist 27 suppose the algorithms used to implement the operations at layer k is changed how does this impact operations at layers k ? ? 1 and k ? ? 1 ? 28 suppose there is a change in the service  set of operations  provided by layer k how does this impact services at layers k-1 and k + 1 ? 29 provide a list of reasons for why the response time of a client may be larger than the best-case delay 30 what are the disadvantages of using small  fixed-length cells in atm ? 31 make a list of activities that you do every day in which computer networks are used how would your life be altered if these networks were suddenly switched off ? 32 find out what networks are used at your school or place of work describe the network types  topologies  and switching methods used there 33 the ping program allows you to send a test packet to a given location and see how long it takes to get there and back try using ping to see how long it takes to get from your location to several known locations from these data  plot the one-way transit time over the internet as a function of distance it is best to use universities since the location of their servers is known very accurately for example  berkeley.edu is in berkeley  california ; mit.edu is in cambridge  massachusetts ; vu.nl is in amsterdam ; the netherlands ; www.usyd.edu.au is in sydney  australia ; and www.uct.ac.za is in cape town  south africa 34 go to ietf ? s web site  www.ietf.org  to see what they are doing pick a project you like and write a half-page report on the problem and the proposed solution 35 the internet is made up of a large number of networks their arrangement determines the topology of the internet a considerable amount of information about the internet topology is available on line use a search engine to find out more about the internet topology and write a short report summarizing your findings 36 search the internet to find out some of the important peering points used for routing packets in the internet at present 37 write a program that implements message flow from the top layer to the bottom layer of the 7-layer protocol model your program should include a separate protocol function for each layer protocol headers are sequence up to 64 characters each protocol function has two parameters  a message passed from the higher layer protocol  a char buffer  and the size of the message this function attaches its header in front of the message  prints the new message on the standard output  and then invokes the protocol function of the lower-layer protocol program input is an application message  a sequence of 80 characters or less   2 the physical layer in this chapter we will look at the lowest layer in our protocol model  the physical layer it defines the electrical  timing and other interfaces by which bits are sent as signals over channels the physical layer is the foundation on which the network is built the properties of different kinds of physical channels determine the performance  e.g  throughput  latency  and error rate  so it is a good place to start our journey into networkland we will begin with a theoretical analysis of data transmission  only to discover that mother  parent ?  nature puts some limits on what can be sent over a channel then we will cover three kinds of transmission media  guided  copper wire and fiber optics   wireless  terrestrial radio   and satellite each of these technologies has different properties that affect the design and performance of the networks that use them this material will provide background information on the key transmission technologies used in modern networks next comes digital modulation  which is all about how analog signals are converted into digital bits and back again after that we will look at multiplexing schemes  exploring how multiple conversations can be put on the same transmission medium at the same time without interfering with one another finally  we will look at three examples of communication systems used in practice for wide area computer networks  the  fixed  telephone system  the mobile phone system  and the cable television system each of these is important in practice  so we will devote a fair amount of space to each one 89 90 the physical layer chap 2 2.1 the theoretical basis for data communication information can be transmitted on wires by varying some physical property such as voltage or current by representing the value of this voltage or current as a single-valued function of time  f  t   we can model the behavior of the signal and analyze it mathematically this analysis is the subject of the following sections 2.1.1 fourier analysis in the early 19th century  the french mathematician jean-baptiste fourier proved that any reasonably behaved periodic function  g  t  with period t  can be constructed as the sum of a  possibly infinite  number of sines and cosines  g  t  ? 2 1 c ? n ? 1 ? ? ? an sin  2 ? nft  ? n ? 1 ? ? ? bn cos  2 ? nft   2-1  where f ? ? 1/t is the fundamental frequency  an and bn are the sine and cosine amplitudes of the nth harmonics  terms   and c is a constant such a decomposition is called a fourier series from the fourier series  the function can be reconstructed that is  if the period  t  is known and the amplitudes are given  the original function of time can be found by performing the sums of eq  2-1   a data signal that has a finite duration  which all of them do  can be handled by just imagining that it repeats the entire pattern over and over forever  i.e  the interval from t to 2t is the same as from 0 to t  etc   the an amplitudes can be computed for any given g  t  by multiplying both sides of eq  2-1  by sin  2 ? kft  and then integrating from 0 to t since 0 ? ? t sin  2 ? kft  sin  2 ? nft  dt ? ? ? ? t /2 for k ? ? n 0 for k ? ? n only one term of the summation survives  an the bn summation vanishes completely similarly  by multiplying eq  2-1  by cos  2 ? kft  and integrating between 0 and t  we can derive bn by just integrating both sides of the equation as it stands  we can find c the results of performing these operations are as follows  an ? t 2 0 ? ? t g  t  sin  2 ? nft  dt bn ? t 2 0 ? ? t g  t  cos  2 ? nft  dt c ? t 2 0 ? ? t g  t  dt 2.1.2 bandwidth-limited signals the relevance of all of this to data communication is that real channels affect different frequency signals differently let us consider a specific example  the transmission of the ascii character ? ? b ? ? encoded in an 8-bit byte the bit pattern that is to be transmitted is 01100010 the left-hand part of fig 2-1  a  shows the sec 2.1 the theoretical basis for data communication 91 voltage output by the transmitting computer the fourier analysis of this signal yields the coefficients  an ? ? n 1  cos  ? n /4  ? ? cos  3 ? n /4  ? ? cos  6 ? n /4  ? ? cos  7 ? n /4   bn ? ? n 1  sin  3 ? n /4  ? ? sin  ? n /4  ? ? sin  7 ? n /4  ? ? sin  6 ? n /4   c ? ? 3/4 the root-mean-square amplitudes  ? an 2 ? ? bn 2  for the first few terms are shown on the right-hand side of fig 2-1  a   these values are of interest because their squares are proportional to the energy transmitted at the corresponding frequency no transmission facility can transmit signals without losing some power in the process if all the fourier components were equally diminished  the resulting signal would be reduced in amplitude but not distorted  i.e  it would have the same nice squared-off shape as fig 2-1  a    unfortunately  all transmission facilities diminish different fourier components by different amounts  thus introducing distortion usually  for a wire  the amplitudes are transmitted mostly undiminished from 0 up to some frequency fc  measured in cycles/sec or hertz  hz    with all frequencies above this cutoff frequency attenuated the width of the frequency range transmitted without being strongly attenuated is called the bandwidth in practice  the cutoff is not really sharp  so often the quoted bandwidth is from 0 to the frequency at which the received power has fallen by half the bandwidth is a physical property of the transmission medium that depends on  for example  the construction  thickness  and length of a wire or fiber filters are often used to further limit the bandwidth of a signal 802.11 wireless channels are allowed to use up to roughly 20 mhz  for example  so 802.11 radios filter the signal bandwidth to this size as another example  traditional  analog  television channels occupy 6 mhz each  on a wire or over the air this filtering lets more signals share a given region of spectrum  which improves the overall efficiency of the system it means that the frequency range for some signals will not start at zero  but this does not matter the bandwidth is still the width of the band of frequencies that are passed  and the information that can be carried depends only on this width and not on the starting and ending frequencies signals that run from 0 up to a maximum frequency are called baseband signals signals that are shifted to occupy a higher range of frequencies  as is the case for all wireless transmissions  are called passband signals now let us consider how the signal of fig 2-1  a  would look if the bandwidth were so low that only the lowest frequencies were transmitted  i.e  if the function were being approximated by the first few terms of eq  2-1    figure 2-1  b  shows the signal that results from a channel that allows only the first harmonic 92 the physical layer chap 2 0 1 1 0 0 0 1 0 1 0 time t 1 0 1 0 1 0 1 0 time rms amplitude 1 2 3 4 5 6 7 8 9 10111213 1415 0.50 0.25 harmonic number 1 harmonic 2 harmonics 4 harmonics 8 harmonics 1 1 2 1 2 3 4 1 2 3 4 5 6 7 8 harmonic number  a   b   c   d   e  figure 2-1  a  a binary signal and its root-mean-square fourier amplitudes  b  ?  e  successive approximations to the original signal sec 2.1 the theoretical basis for data communication 93  the fundamental  f  to pass through similarly  fig 2-1  c  ?  e  show the spectra and reconstructed functions for higher-bandwidth channels for digital transmission  the goal is to receive a signal with just enough fidelity to reconstruct the sequence of bits that was sent we can already do this easily in fig 2-1  e   so it is wasteful to use more harmonics to receive a more accurate replica given a bit rate of b bits/sec  the time required to send the 8 bits in our example 1 bit at a time is 8/b sec  so the frequency of the first harmonic of this signal is b /8 hz an ordinary telephone line  often called a voice-grade line  has an artificially introduced cutoff frequency just above 3000 hz the presence of this restriction means that the number of the highest harmonic passed through is roughly 3000/  b/8   or 24,000/b  the cutoff is not sharp   for some data rates  the numbers work out as shown in fig 2-2 from these numbers  it is clear that trying to send at 9600 bps over a voice-grade telephone line will transform fig 2-1  a  into something looking like fig 2-1  c   making accurate reception of the original binary bit stream tricky it should be obvious that at data rates much higher than 38.4 kbps  there is no hope at all for binary signals  even if the transmission facility is completely noiseless in other words  limiting the bandwidth limits the data rate  even for perfect channels however  coding schemes that make use of several voltage levels do exist and can achieve higher data rates we will discuss these later in this chapter bps t  msec  first harmonic  hz  # harmonics sent 300 26.67 37.5 80 600 13.33 75 40 1200 6.67 150 20 2400 3.33 300 10 4800 1.67 600 5 9600 0.83 1200 2 19200 0.42 2400 1 38400 0.21 4800 0 figure 2-2 relation between data rate and harmonics for our example there is much confusion about bandwidth because it means different things to electrical engineers and to computer scientists to electrical engineers   analog  bandwidth is  as we have described above  a quantity measured in hz to computer scientists   digital  bandwidth is the maximum data rate of a channel  a quantity measured in bits/sec that data rate is the end result of using the analog bandwidth of a physical channel for digital transmission  and the two are related  as we discuss next in this book  it will be clear from the context whether we mean analog bandwidth  hz  or digital bandwidth  bits/sec   94 the physical layer chap 2 2.1.3 the maximum data rate of a channel as early as 1924  an at&t engineer  henry nyquist  realized that even a perfect channel has a finite transmission capacity he derived an equation expressing the maximum data rate for a finite-bandwidth noiseless channel in 1948  claude shannon carried nyquist ? s work further and extended it to the case of a channel subject to random  that is  thermodynamic  noise  shannon  1948   this paper is the most important paper in all of information theory we will just briefly summarize their now classical results here nyquist proved that if an arbitrary signal has been run through a low-pass filter of bandwidth b  the filtered signal can be completely reconstructed by making only 2b  exact  samples per second sampling the line faster than 2b times per second is pointless because the higher-frequency components that such sampling could recover have already been filtered out if the signal consists of v discrete levels  nyquist ? s theorem states  maximum data rate ? ? 2b log2 v bits /sec  2-2  for example  a noiseless 3-khz channel can not transmit binary  i.e  two-level  signals at a rate exceeding 6000 bps so far we have considered only noiseless channels if random noise is present  the situation deteriorates rapidly and there is always random  thermal  noise present due to the motion of the molecules in the system the amount of thermal noise present is measured by the ratio of the signal power to the noise power  called the snr  signal-to-noise ratio   if we denote the signal power by s and the noise power by n  the signal-to-noise ratio is s/n usually  the ratio is expressed on a log scale as the quantity 10 log10 s /n because it can vary over a tremendous range the units of this log scale are called decibels  db   with ? ? deci ? ? meaning 10 and ? ? bel ? ? chosen to honor alexander graham bell  who invented the telephone an s /n ratio of 10 is 10 db  a ratio of 100 is 20 db  a ratio of 1000 is 30 db  and so on the manufacturers of stereo amplifiers often characterize the bandwidth  frequency range  over which their products are linear by giving the 3 db frequency on each end these are the points at which the amplification factor has been approximately halved  because 10 log100.5 ? ? ? 3   shannon ? s major result is that the maximum data rate or capacity of a noisy channel whose bandwidth is b hz and whose signal-to-noise ratio is s/n  is given by  maximum number of bits/sec ? ? b log2  1 ? ? s/n   2-3  this tells us the best capacities that real channels can have for example  adsl  asymmetric digital subscriber line   which provides internet access over normal telephone lines  uses a bandwidth of around 1 mhz the snr depends strongly on the distance of the home from the telephone exchange  and an snr of around 40 db for short lines of 1 to 2 km is very good with these characteristics  sec 2.1 the theoretical basis for data communication 95 the channel can never transmit much more than 13 mbps  no matter how many or how few signal levels are used and no matter how often or how infrequently samples are taken in practice  adsl is specified up to 12 mbps  though users often see lower rates this data rate is actually very good  with over 60 years of communications techniques having greatly reduced the gap between the shannon capacity and the capacity of real systems shannon ? s result was derived from information-theory arguments and applies to any channel subject to thermal noise counterexamples should be treated in the same category as perpetual motion machines for adsl to exceed 13 mbps  it must either improve the snr  for example by inserting digital repeaters in the lines closer to the customers  or use more bandwidth  as is done with the evolution to asdl2 +  2.2 guided transmission media the purpose of the physical layer is to transport bits from one machine to another various physical media can be used for the actual transmission each one has its own niche in terms of bandwidth  delay  cost  and ease of installation and maintenance media are roughly grouped into guided media  such as copper wire and fiber optics  and unguided media  such as terrestrial wireless  satellite  and lasers through the air we will look at guided media in this section  and unguided media in the next sections 2.2.1 magnetic media one of the most common ways to transport data from one computer to another is to write them onto magnetic tape or removable media  e.g  recordable dvds   physically transport the tape or disks to the destination machine  and read them back in again although this method is not as sophisticated as using a geosynchronous communication satellite  it is often more cost effective  especially for applications in which high bandwidth or cost per bit transported is the key factor a simple calculation will make this point clear an industry-standard ultrium tape can hold 800 gigabytes a box 60 ? ? 60 ? ? 60 cm can hold about 1000 of these tapes  for a total capacity of 800 terabytes  or 6400 terabits  6.4 petabits   a box of tapes can be delivered anywhere in the united states in 24 hours by federal express and other companies the effective bandwidth of this transmission is 6400 terabits/86,400 sec  or a bit over 70 gbps if the destination is only an hour away by road  the bandwidth is increased to over 1700 gbps no computer network can even approach this of course  networks are getting faster  but tape densities are increasing  too if we now look at cost  we get a similar picture the cost of an ultrium tape is around $ 40 when bought in bulk a tape can be reused at least 10 times  so the 96 the physical layer chap 2 tape cost is maybe $ 4000 per box per usage add to this another $ 1000 for shipping  probably much less   and we have a cost of roughly $ 5000 to ship 800 tb this amounts to shipping a gigabyte for a little over half a cent no network can beat that the moral of the story is  never underestimate the bandwidth of a station wagon full of tapes hurtling down the highway 2.2.2 twisted pairs although the bandwidth characteristics of magnetic tape are excellent  the delay characteristics are poor transmission time is measured in minutes or hours  not milliseconds for many applications an online connection is needed one of the oldest and still most common transmission media is twisted pair a twisted pair consists of two insulated copper wires  typically about 1 mm thick the wires are twisted together in a helical form  just like a dna molecule twisting is done because two parallel wires constitute a fine antenna when the wires are twisted  the waves from different twists cancel out  so the wire radiates less effectively a signal is usually carried as the difference in voltage between the two wires in the pair this provides better immunity to external noise because the noise tends to affect both wires the same  leaving the differential unchanged the most common application of the twisted pair is the telephone system nearly all telephones are connected to the telephone company  telco  office by a twisted pair both telephone calls and adsl internet access run over these lines twisted pairs can run several kilometers without amplification  but for longer distances the signal becomes too attenuated and repeaters are needed when many twisted pairs run in parallel for a substantial distance  such as all the wires coming from an apartment building to the telephone company office  they are bundled together and encased in a protective sheath the pairs in these bundles would interfere with one another if it were not for the twisting in parts of the world where telephone lines run on poles above ground  it is common to see bundles several centimeters in diameter twisted pairs can be used for transmitting either analog or digital information the bandwidth depends on the thickness of the wire and the distance traveled  but several megabits/sec can be achieved for a few kilometers in many cases due to their adequate performance and low cost  twisted pairs are widely used and are likely to remain so for years to come twisted-pair cabling comes in several varieties the garden variety deployed in many office buildings is called category 5 cabling  or ? ? cat 5 ? ? a category 5 twisted pair consists of two insulated wires gently twisted together four such pairs are typically grouped in a plastic sheath to protect the wires and keep them together this arrangement is shown in fig 2-3 different lan standards may use the twisted pairs differently for example  100-mbps ethernet uses two  out of the four  pairs  one pair for each direction sec 2.2 guided transmission media 97 twisted pair figure 2-3 category 5 utp cable with four twisted pairs to reach higher speeds  1-gbps ethernet uses all four pairs in both directions simultaneously ; this requires the receiver to factor out the signal that is transmitted locally some general terminology is now in order links that can be used in both directions at the same time  like a two-lane road  are called full-duplex links in contrast  links that can be used in either direction  but only one way at a time  like a single-track railroad line are called half-duplex links a third category consists of links that allow traffic in only one direction  like a one-way street they are called simplex links returning to twisted pair  cat 5 replaced earlier category 3 cables with a similar cable that uses the same connector  but has more twists per meter more twists result in less crosstalk and a better-quality signal over longer distances  making the cables more suitable for high-speed computer communication  especially 100-mbps and 1-gbps ethernet lans new wiring is more likely to be category 6 or even category 7 these categories has more stringent specifications to handle signals with greater bandwidths some cables in category 6 and above are rated for signals of 500 mhz and can support the 10-gbps links that will soon be deployed through category 6  these wiring types are referred to as utp  unshielded twisted pair  as they consist simply of wires and insulators in contrast to these  category 7 cables have shielding on the individual twisted pairs  as well as around the entire cable  but inside the plastic protective sheath   shielding reduces the susceptibility to external interference and crosstalk with other nearby cables to meet demanding performance specifications the cables are reminiscent of the high-quality  but bulky and expensive shielded twisted pair cables that ibm introduced in the early 1980s  but which did not prove popular outside of ibm installations evidently  it is time to try again 2.2.3 coaxial cable another common transmission medium is the coaxial cable  known to its many friends as just ? ? coax ? ? and pronounced ? ? co-ax ? ?   it has better shielding and greater bandwidth than unshielded twisted pairs  so it can span longer distances at 98 the physical layer chap 2 higher speeds two kinds of coaxial cable are widely used one kind  50-ohm cable  is commonly used when it is intended for digital transmission from the start the other kind  75-ohm cable  is commonly used for analog transmission and cable television this distinction is based on historical  rather than technical  factors  e.g  early dipole antennas had an impedance of 300 ohms  and it was easy to use existing 4  1 impedance-matching transformers   starting in the mid 1990s  cable tv operators began to provide internet access over cable  which has made 75-ohm cable more important for data communication a coaxial cable consists of a stiff copper wire as the core  surrounded by an insulating material the insulator is encased by a cylindrical conductor  often as a closely woven braided mesh the outer conductor is covered in a protective plastic sheath a cutaway view of a coaxial cable is shown in fig 2-4 copper core insulating material braided outer conductor protective plastic covering figure 2-4 a coaxial cable the construction and shielding of the coaxial cable give it a good combination of high bandwidth and excellent noise immunity the bandwidth possible depends on the cable quality and length modern cables have a bandwidth of up to a few ghz coaxial cables used to be widely used within the telephone system for long-distance lines but have now largely been replaced by fiber optics on longhaul routes coax is still widely used for cable television and metropolitan area networks  however 2.2.4 power lines the telephone and cable television networks are not the only sources of wiring that can be reused for data communication there is a yet more common kind of wiring  electrical power lines power lines deliver electrical power to houses  and electrical wiring within houses distributes the power to electrical outlets the use of power lines for data communication is an old idea power lines have been used by electricity companies for low-rate communication such as remote metering for many years  as well in the home to control devices  e.g  the x10 standard   in recent years there has been renewed interest in high-rate communication over these lines  both inside the home as a lan and outside the home sec 2.2 guided transmission media 99 for broadband internet access we will concentrate on the most common scenario  using electrical wires inside the home the convenience of using power lines for networking should be clear simply plug a tv and a receiver into the wall  which you must do anyway because they need power  and they can send and receive movies over the electrical wiring this configuration is shown in fig 2-5 there is no other plug or radio the data signal is superimposed on the low-frequency power signal  on the active or ? ? hot ? ? wire  as both signals use the wiring at the same time power signal electric cable data signal figure 2-5 a network that uses household electrical wiring the difficulty with using household electrical wiring for a network is that it was designed to distribute power signals this task is quite different than distributing data signals  at which household wiring does a horrible job electrical signals are sent at 50 ? 60 hz and the wiring attenuates the much higher frequency  mhz  signals needed for high-rate data communication the electrical properties of the wiring vary from one house to the next and change as appliances are turned on and off  which causes data signals to bounce around the wiring transient currents when appliances switch on and off create electrical noise over a wide range of frequencies and without the careful twisting of twisted pairs  electrical wiring acts as a fine antenna  picking up external signals and radiating signals of its own this behavior means that to meet regulatory requirements  the data signal must exclude licensed frequencies such as the amateur radio bands despite these difficulties  it is practical to send at least 100 mbps over typical household electrical wiring by using communication schemes that resist impaired frequencies and bursts of errors many products use various proprietary standards for power-line networking  so international standards are actively under development 2.2.5 fiber optics many people in the computer industry take enormous pride in how fast computer technology is improving as it follows moore ? s law  which predicts a doubling of the number of transistors per chip roughly every two years  schaller  100 the physical layer chap 2 1997   the original  1981  ibm pc ran at a clock speed of 4.77 mhz twentyeight years later  pcs could run a four-core cpu at 3 ghz this increase is a gain of a factor of around 2500  or 16 per decade impressive in the same period  wide area communication links went from 45 mbps  a t3 line in the telephone system  to 100 gbps  a modern long distance line   this gain is similarly impressive  more than a factor of 2000 and close to 16 per decade  while at the same time the error rate went from 10 ? 5 per bit to almost zero furthermore  single cpus are beginning to approach physical limits  which is why it is now the number of cpus that is being increased per chip in contrast  the achievable bandwidth with fiber technology is in excess of 50,000 gbps  50 tbps  and we are nowhere near reaching these limits the current practical limit of around 100 gbps is due to our inability to convert between electrical and optical signals any faster to build higher-capacity links  many channels are simply carried in parallel over a single fiber in this section we will study fiber optics to learn how that transmission technology works in the ongoing race between computing and communication  communication may yet win because of fiber optic networks the implication of this would be essentially infinite bandwidth and a new conventional wisdom that computers are hopelessly slow so that networks should try to avoid computation at all costs  no matter how much bandwidth that wastes this change will take a while to sink in to a generation of computer scientists and engineers taught to think in terms of the low shannon limits imposed by copper of course  this scenario does not tell the whole story because it does not include cost the cost to install fiber over the last mile to reach consumers and bypass the low bandwidth of wires and limited availability of spectrum is tremendous it also costs more energy to move bits than to compute we may always have islands of inequities where either computation or communication is essentially free for example  at the edge of the internet we throw computation and storage at the problem of compressing and caching content  all to make better use of internet access links within the internet  we may do the reverse  with companies such as google moving huge amounts of data across the network to where it is cheaper to store or compute on it fiber optics are used for long-haul transmission in network backbones  highspeed lans  although so far  copper has always managed catch up eventually   and high-speed internet access such as ftth  fiber to the home   an optical transmission system has three key components  the light source  the transmission medium  and the detector conventionally  a pulse of light indicates a 1 bit and the absence of light indicates a 0 bit the transmission medium is an ultra-thin fiber of glass the detector generates an electrical pulse when light falls on it by attaching a light source to one end of an optical fiber and a detector to the other  we have a unidirectional data transmission system that accepts an electrical signal  converts and transmits it by light pulses  and then reconverts the output to an electrical signal at the receiving end sec 2.2 guided transmission media 101 this transmission system would leak light and be useless in practice were it not for an interesting principle of physics when a light ray passes from one medium to another ? for example  from fused silica to air ? the ray is refracted  bent  at the silica/air boundary  as shown in fig 2-6  a   here we see a light ray incident on the boundary at an angle ? 1 emerging at an angle ? 1 the amount of refraction depends on the properties of the two media  in particular  their indices of refraction   for angles of incidence above a certain critical value  the light is refracted back into the silica ; none of it escapes into the air thus  a light ray incident at or above the critical angle is trapped inside the fiber  as shown in fig 2-6  b   and can propagate for many kilometers with virtually no loss total internal reflection air/silica boundary silica light source air  a   b  ? 1 ? 2 ? 3 ? 1 ? 2 ? 3 figure 2-6  a  three examples of a light ray from inside a silica fiber impinging on the air/silica boundary at different angles  b  light trapped by total internal reflection the sketch of fig 2-6  b  shows only one trapped ray  but since any light ray incident on the boundary above the critical angle will be reflected internally  many different rays will be bouncing around at different angles each ray is said to have a different mode  so a fiber having this property is called a multimode fiber however  if the fiber ? s diameter is reduced to a few wavelengths of light the fiber acts like a wave guide and the light can propagate only in a straight line  without bouncing  yielding a single-mode fiber single-mode fibers are more expensive but are widely used for longer distances currently available single-mode fibers can transmit data at 100 gbps for 100 km without amplification even higher data rates have been achieved in the laboratory for shorter distances transmission of light through fiber optical fibers are made of glass  which  in turn  is made from sand  an inexpensive raw material available in unlimited amounts glassmaking was known to the ancient egyptians  but their glass had to be no more than 1 mm thick or the 102 the physical layer chap 2 light could not shine through glass transparent enough to be useful for windows was developed during the renaissance the glass used for modern optical fibers is so transparent that if the oceans were full of it instead of water  the seabed would be as visible from the surface as the ground is from an airplane on a clear day the attenuation of light through glass depends on the wavelength of the light  as well as on some physical properties of the glass   it is defined as the ratio of input to output signal power for the kind of glass used in fibers  the attenuation is shown in fig 2-7 in units of decibels per linear kilometer of fiber for example  a factor of two loss of signal power gives an attenuation of 10 log10 2 ? ? 3 db the figure shows the near-infrared part of the spectrum  which is what is used in practice visible light has slightly shorter wavelengths  from 0.4 to 0.7 microns  1 micron is 10 ? 6 meters  the true metric purist would refer to these wavelengths as 400 nm to 700 nm  but we will stick with traditional usage 0 0.8 0.9 2.0 1.8 1.6 1.4 1.2 1.0 0.8 0.6 0.4 0.2 1.0 1.1 1.2 1.3 wavelength  microns  0.85 ? band 1.30 ? band 1.55 ? band attenuation  db/km  1.4 1.5 1.6 1.7 1.8 figure 2-7 attenuation of light through fiber in the infrared region three wavelength bands are most commonly used at present for optical communication they are centered at 0.85  1.30  and 1.55 microns  respectively all three bands are 25,000 to 30,000 ghz wide the 0.85-micron band was used first it has higher attenuation and so is used for shorter distances  but at that wavelength the lasers and electronics could be made from the same material  gallium arsenide   the last two bands have good attenuation properties  less than 5 % loss per kilometer   the 1.55-micron band is now widely used with erbium-doped amplifiers that work directly in the optical domain sec 2.2 guided transmission media 103 light pulses sent down a fiber spread out in length as they propagate this spreading is called chromatic dispersion the amount of it is wavelength dependent one way to keep these spread-out pulses from overlapping is to increase the distance between them  but this can be done only by reducing the signaling rate fortunately  it has been discovered that making the pulses in a special shape related to the reciprocal of the hyperbolic cosine causes nearly all the dispersion effects cancel out  so it is possible to send pulses for thousands of kilometers without appreciable shape distortion these pulses are called solitons a considerable amount of research is going on to take solitons out of the lab and into the field fiber cables fiber optic cables are similar to coax  except without the braid figure 2-8  a  shows a single fiber viewed from the side at the center is the glass core through which the light propagates in multimode fibers  the core is typically 50 microns in diameter  about the thickness of a human hair in single-mode fibers  the core is 8 to 10 microns jacket  plastic  core cladding sheath jacket cladding  glass  core  glass   a   b  figure 2-8  a  side view of a single fiber  b  end view of a sheath with three fibers the core is surrounded by a glass cladding with a lower index of refraction than the core  to keep all the light in the core next comes a thin plastic jacket to protect the cladding fibers are typically grouped in bundles  protected by an outer sheath figure 2-8  b  shows a sheath with three fibers terrestrial fiber sheaths are normally laid in the ground within a meter of the surface  where they are occasionally subject to attacks by backhoes or gophers near the shore  transoceanic fiber sheaths are buried in trenches by a kind of seaplow in deep water  they just lie on the bottom  where they can be snagged by fishing trawlers or attacked by giant squid fibers can be connected in three different ways first  they can terminate in connectors and be plugged into fiber sockets connectors lose about 10 to 20 % of the light  but they make it easy to reconfigure systems second  they can be spliced mechanically mechanical splices just lay the two carefully cut ends next to each other in a special sleeve and clamp them in 104 the physical layer chap 2 place alignment can be improved by passing light through the junction and then making small adjustments to maximize the signal mechanical splices take trained personnel about 5 minutes and result in a 10 % light loss third  two pieces of fiber can be fused  melted  to form a solid connection a fusion splice is almost as good as a single drawn fiber  but even here  a small amount of attenuation occurs for all three kinds of splices  reflections can occur at the point of the splice  and the reflected energy can interfere with the signal two kinds of light sources are typically used to do the signaling these are leds  light emitting diodes  and semiconductor lasers they have different properties  as shown in fig 2-9 they can be tuned in wavelength by inserting fabry-perot or mach-zehnder interferometers between the source and the fiber fabry-perot interferometers are simple resonant cavities consisting of two parallel mirrors the light is incident perpendicular to the mirrors the length of the cavity selects out those wavelengths that fit inside an integral number of times mach-zehnder interferometers separate the light into two beams the two beams travel slightly different distances they are recombined at the end and are in phase for only certain wavelengths item led semiconductor laser data rate low high fiber type multi-mode multi-mode or single-mode distance short long lifetime long life short life temperature sensitivity minor substantial cost low cost expensive figure 2-9 a comparison of semiconductor diodes and leds as light sources the receiving end of an optical fiber consists of a photodiode  which gives off an electrical pulse when struck by light the response time of photodiodes  which convert the signal from the optical to the electrical domain  limits data rates to about 100 gbps thermal noise is also an issue  so a pulse of light must carry enough energy to be detected by making the pulses powerful enough  the error rate can be made arbitrarily small comparison of fiber optics and copper wire it is instructive to compare fiber to copper fiber has many advantages to start with  it can handle much higher bandwidths than copper this alone would require its use in high-end networks due to the low attenuation  repeaters are needed only about every 50 km on long lines  versus about every 5 km for copper  sec 2.2 guided transmission media 105 resulting in a big cost saving fiber also has the advantage of not being affected by power surges  electromagnetic interference  or power failures nor is it affected by corrosive chemicals in the air  important for harsh factory environments oddly enough  telephone companies like fiber for a different reason  it is thin and lightweight many existing cable ducts are completely full  so there is no room to add new capacity removing all the copper and replacing it with fiber empties the ducts  and the copper has excellent resale value to copper refiners who see it as very high-grade ore also  fiber is much lighter than copper one thousand twisted pairs 1 km long weigh 8000 kg two fibers have more capacity and weigh only 100 kg  which reduces the need for expensive mechanical support systems that must be maintained for new routes  fiber wins hands down due to its much lower installation cost finally  fibers do not leak light and are difficult to tap these properties give fiber good security against potential wiretappers on the downside  fiber is a less familiar technology requiring skills not all engineers have  and fibers can be damaged easily by being bent too much since optical transmission is inherently unidirectional  two-way communication requires either two fibers or two frequency bands on one fiber finally  fiber interfaces cost more than electrical interfaces nevertheless  the future of all fixed data communication over more than short distances is clearly with fiber for a discussion of all aspects of fiber optics and their networks  see hecht  2005   2.3 wireless transmission our age has given rise to information junkies  people who need to be online all the time for these mobile users  twisted pair  coax  and fiber optics are of no use they need to get their ? ? hits ? ? of data for their laptop  notebook  shirt pocket  palmtop  or wristwatch computers without being tethered to the terrestrial communication infrastructure for these users  wireless communication is the answer in the following sections  we will look at wireless communication in general it has many other important applications besides providing connectivity to users who want to surf the web from the beach wireless has advantages for even fixed devices in some circumstances for example  if running a fiber to a building is difficult due to the terrain  mountains  jungles  swamps  etc   wireless may be better it is noteworthy that modern wireless digital communication began in the hawaiian islands  where large chunks of pacific ocean separated the users from their computer center and the telephone system was inadequate 2.3.1 the electromagnetic spectrum when electrons move  they create electromagnetic waves that can propagate through space  even in a vacuum   these waves were predicted by the british physicist james clerk maxwell in 1865 and first observed by the german 106 the physical layer chap 2 physicist heinrich hertz in 1887 the number of oscillations per second of a wave is called its frequency  f  and is measured in hz  in honor of heinrich hertz   the distance between two consecutive maxima  or minima  is called the wavelength  which is universally designated by the greek letter ? ?  lambda   when an antenna of the appropriate size is attached to an electrical circuit  the electromagnetic waves can be broadcast efficiently and received by a receiver some distance away all wireless communication is based on this principle in a vacuum  all electromagnetic waves travel at the same speed  no matter what their frequency this speed  usually called the speed of light  c  is approximately 3 ? ? 108 m/sec  or about 1 foot  30 cm  per nanosecond  a case could be made for redefining the foot as the distance light travels in a vacuum in 1 nsec rather than basing it on the shoe size of some long-dead king  in copper or fiber the speed slows to about 2/3 of this value and becomes slightly frequency dependent the speed of light is the ultimate speed limit no object or signal can ever move faster than it the fundamental relation between f  ?  and c  in a vacuum  is ? f ? ? c  2-4  since c is a constant  if we know f  we can find ?  and vice versa as a rule of thumb  when ? ? is in meters and f is in mhz  ? f ? ? 300 for example  100-mhz waves are about 3 meters long  1000-mhz waves are 0.3 meters long  and 0.1 meter waves have a frequency of 3000 mhz the electromagnetic spectrum is shown in fig 2-10 the radio  microwave  infrared  and visible light portions of the spectrum can all be used for transmitting information by modulating the amplitude  frequency  or phase of the waves ultraviolet light  x-rays  and gamma rays would be even better  due to their higher frequencies  but they are hard to produce and modulate  do not propagate well through buildings  and are dangerous to living things the bands listed at the bottom of fig 2-10 are the official itu  international telecommunication union  names and are based on the wavelengths  so the lf band goes from 1 km to 10 km  approximately 30 khz to 300 khz   the terms lf  mf  and hf refer to low  medium  and high frequency  respectively clearly  when the names were assigned nobody expected to go above 10 mhz  so the higher bands were later named the very  ultra  super  extremely  and tremendously high frequency bands beyond that there are no names  but incredibly  astonishingly  and prodigiously high frequency  ihf  ahf  and phf  would sound nice we know from shannon  eq  2-3   that the amount of information that a signal such as an electromagnetic wave can carry depends on the received power and is proportional to its bandwidth from fig 2-10 it should now be obvious why networking people like fiber optics so much many ghz of bandwidth are available to tap for data transmission in the microwave band  and even more in fiber because it is further to the right in our logarithmic scale as an example  consider the 1.30-micron band of fig 2-7  which has a width of 0.17 microns if we use sec 2.3 wireless transmission 107 100 102 104 106 108 1010 1012 1014 1016 1018 1020 1022 1024 radio microwave infrared uv x-ray gamma ray f  hz  visible light 104 105 106 107 108 109 1010 1011 1012 1013 1014 1015 1016 f  hz  twisted pair coax satellite tv terrestrial microwave fiber optics maritime am radio fm radio band lf mf hf vhf uhf shf ehf thf figure 2-10 the electromagnetic spectrum and its uses for communication eq  2-4  to find the start and end frequencies from the start and end wavelengths  we find the frequency range to be about 30,000 ghz with a reasonable signalto noise ratio of 10 db  this is 300 tbps most transmissions use a relatively narrow frequency band  i.e  ? f / f < < 1   they concentrate their signals in this narrow band to use the spectrum efficiently and obtain reasonable data rates by transmitting with enough power however  in some cases  a wider band is used  with three variations in frequency hopping spread spectrum  the transmitter hops from frequency to frequency hundreds of times per second it is popular for military communication because it makes transmissions hard to detect and next to impossible to jam it also offers good resistance to multipath fading and narrowband interference because the receiver will not be stuck on an impaired frequency for long enough to shut down communication this robustness makes it useful for crowded parts of the spectrum  such as the ism bands we will describe shortly this technique is used commercially  for example  in bluetooth and older versions of 802.11 as a curious footnote  the technique was coinvented by the austrian-born sex goddess hedy lamarr  the first woman to appear nude in a motion picture  the 1933 czech film extase   her first husband was an armaments manufacturer who told her how easy it was to block the radio signals then used to control torpedoes when she discovered that he was selling weapons to hitler  she was horrified  disguised herself as a maid to escape him  and fled to hollywood to continue her career as a movie actress in her spare time  she invented frequency hopping to help the allied war effort her scheme used 88 frequencies  the number of keys 108 the physical layer chap 2  and frequencies  on the piano for their invention  she and her friend  the musical composer george antheil  received u.s patent 2,292,387 however  they were unable to convince the u.s navy that their invention had any practical use and never received any royalties only years after the patent expired did it become popular a second form of spread spectrum  direct sequence spread spectrum  uses a code sequence to spread the data signal over a wider frequency band it is widely used commercially as a spectrally efficient way to let multiple signals share the same frequency band these signals can be given different codes  a method called cdma  code division multiple access  that we will return to later in this chapter this method is shown in contrast with frequency hopping in fig 2-11 it forms the basis of 3g mobile phone networks and is also used in gps  global positioning system   even without different codes  direct sequence spread spectrum  like frequency hopping spread spectrum  can tolerate narrowband interference and multipath fading because only a fraction of the desired signal is lost it is used in this role in older 802.11b wireless lans for a fascinating and detailed history of spread spectrum communication  see scholtz  1982   ultrawideband underlay  cdma user with different code  direct sequence spread spectrum frequency hopping spread spectrum frequency  cdma user with different code  figure 2-11 spread spectrum and ultra-wideband  uwb  communication a third method of communication with a wider band is uwb  ultra wideband  communication uwb sends a series of rapid pulses  varying their positions to communicate information the rapid transitions lead to a signal that is spread thinly over a very wide frequency band uwb is defined as signals that have a bandwidth of at least 500 mhz or at least 20 % of the center frequency of their frequency band uwb is also shown in fig 2-11 with this much bandwidth  uwb has the potential to communicate at high rates because it is spread across a wide band of frequencies  it can tolerate a substantial amount of relatively strong interference from other narrowband signals just as importantly  since uwb has very little energy at any given frequency when used for short-range transmission  it does not cause harmful interference to those other narrowband radio signals it is said to underlay the other signals this peaceful coexistence has led to its application in wireless pans that run at up to 1 gbps  although commercial success has been mixed it can also be used for imaging through solid objects  ground  walls  and bodies  or as part of precise location systems sec 2.3 wireless transmission 109 we will now discuss how the various parts of the electromagnetic spectrum of fig 2-11 are used  starting with radio we will assume that all transmissions use a narrow frequency band unless otherwise stated 2.3.2 radio transmission radio frequency  rf  waves are easy to generate  can travel long distances  and can penetrate buildings easily  so they are widely used for communication  both indoors and outdoors radio waves also are omnidirectional  meaning that they travel in all directions from the source  so the transmitter and receiver do not have to be carefully aligned physically sometimes omnidirectional radio is good  but sometimes it is bad in the 1970s  general motors decided to equip all its new cadillacs with computer-controlled antilock brakes when the driver stepped on the brake pedal  the computer pulsed the brakes on and off instead of locking them on hard one fine day an ohio highway patrolman began using his new mobile radio to call headquarters  and suddenly the cadillac next to him began behaving like a bucking bronco when the officer pulled the car over  the driver claimed that he had done nothing and that the car had gone crazy eventually  a pattern began to emerge  cadillacs would sometimes go berserk  but only on major highways in ohio and then only when the highway patrol was watching for a long  long time general motors could not understand why cadillacs worked fine in all the other states and also on minor roads in ohio only after much searching did they discover that the cadillac ? s wiring made a fine antenna for the frequency used by the ohio highway patrol ? s new radio system the properties of radio waves are frequency dependent at low frequencies  radio waves pass through obstacles well  but the power falls off sharply with distance from the source ? at least as fast as 1/r 2 in air ? as the signal energy is spread more thinly over a larger surface this attenuation is called path loss at high frequencies  radio waves tend to travel in straight lines and bounce off obstacles path loss still reduces power  though the received signal can depend strongly on reflections as well high-frequency radio waves are also absorbed by rain and other obstacles to a larger extent than are low-frequency ones at all frequencies  radio waves are subject to interference from motors and other electrical equipment it is interesting to compare the attenuation of radio waves to that of signals in guided media with fiber  coax and twisted pair  the signal drops by the same fraction per unit distance  for example 20 db per 100m for twisted pair with radio  the signal drops by the same fraction as the distance doubles  for example 6 db per doubling in free space this behavior means that radio waves can travel long distances  and interference between users is a problem for this reason  all governments tightly regulate the use of radio transmitters  with few notable exceptions  which are discussed later in this chapter 110 the physical layer chap 2 in the vlf  lf  and mf bands  radio waves follow the ground  as illustrated in fig 2-12  a   these waves can be detected for perhaps 1000 km at the lower frequencies  less at the higher ones am radio broadcasting uses the mf band  which is why the ground waves from boston am radio stations can not be heard easily in new york radio waves in these bands pass through buildings easily  which is why portable radios work indoors the main problem with using these bands for data communication is their low bandwidth  see eq  2-4    e r e h p s o n o i earth 's surface earth 's surface  a   b  ground wave figure 2-12  a  in the vlf  lf  and mf bands  radio waves follow the curvature of the earth  b  in the hf band  they bounce off the ionosphere in the hf and vhf bands  the ground waves tend to be absorbed by the earth however  the waves that reach the ionosphere  a layer of charged particles circling the earth at a height of 100 to 500 km  are refracted by it and sent back to earth  as shown in fig 2-12  b   under certain atmospheric conditions  the signals can bounce several times amateur radio operators  hams  use these bands to talk long distance the military also communicate in the hf and vhf bands 2.3.3 microwave transmission above 100 mhz  the waves travel in nearly straight lines and can therefore be narrowly focused concentrating all the energy into a small beam by means of a parabolic antenna  like the familiar satellite tv dish  gives a much higher signalto noise ratio  but the transmitting and receiving antennas must be accurately aligned with each other in addition  this directionality allows multiple transmitters lined up in a row to communicate with multiple receivers in a row without interference  provided some minimum spacing rules are observed before fiber optics  for decades these microwaves formed the heart of the long-distance telephone transmission system in fact  mci  one of at&t ? s first competitors after it was deregulated  built its entire system with microwave communications passing between towers tens of kilometers apart even the company ? s name reflected this  mci stood for microwave communications  inc   mci has since gone over to fiber and through a long series of corporate mergers and bankruptcies in the telecommunications shuffle has become part of verizon sec 2.3 wireless transmission 111 microwaves travel in a straight line  so if the towers are too far apart  the earth will get in the way  think about a seattle-to-amsterdam link   thus  repeaters are needed periodically the higher the towers are  the farther apart they can be the distance between repeaters goes up very roughly with the square root of the tower height for 100-meter-high towers  repeaters can be 80 km apart unlike radio waves at lower frequencies  microwaves do not pass through buildings well in addition  even though the beam may be well focused at the transmitter  there is still some divergence in space some waves may be refracted off low-lying atmospheric layers and may take slightly longer to arrive than the direct waves the delayed waves may arrive out of phase with the direct wave and thus cancel the signal this effect is called multipath fading and is often a serious problem it is weather and frequency dependent some operators keep 10 % of their channels idle as spares to switch on when multipath fading temporarily wipes out some frequency band the demand for more and more spectrum drives operators to yet higher frequencies bands up to 10 ghz are now in routine use  but at about 4 ghz a new problem sets in  absorption by water these waves are only a few centimeters long and are absorbed by rain this effect would be fine if one were planning to build a huge outdoor microwave oven for roasting passing birds  but for communication it is a severe problem as with multipath fading  the only solution is to shut off links that are being rained on and route around them in summary  microwave communication is so widely used for long-distance telephone communication  mobile phones  television distribution  and other purposes that a severe shortage of spectrum has developed it has several key advantages over fiber the main one is that no right of way is needed to lay down cables by buying a small plot of ground every 50 km and putting a microwave tower on it  one can bypass the telephone system entirely this is how mci managed to get started as a new long-distance telephone company so quickly  sprint  another early competitor to the deregulated at&t  went a completely different route  it was formed by the southern pacific railroad  which already owned a large amount of right of way and just buried fiber next to the tracks  microwave is also relatively inexpensive putting up two simple towers  which can be just big poles with four guy wires  and putting antennas on each one may be cheaper than burying 50 km of fiber through a congested urban area or up over a mountain  and it may also be cheaper than leasing the telephone company ? s fiber  especially if the telephone company has not yet even fully paid for the copper it ripped out when it put in the fiber the politics of the electromagnetic spectrum to prevent total chaos  there are national and international agreements about who gets to use which frequencies since everyone wants a higher data rate  everyone wants more spectrum national governments allocate spectrum for am 112 the physical layer chap 2 and fm radio  television  and mobile phones  as well as for telephone companies  police  maritime  navigation  military  government  and many other competing users worldwide  an agency of itu-r  wrc  tries to coordinate this allocation so devices that work in multiple countries can be manufactured however  countries are not bound by itu-r ? s recommendations  and the fcc  federal communication commission   which does the allocation for the united states  has occasionally rejected itu-r ? s recommendations  usually because they required some politically powerful group to give up some piece of the spectrum   even when a piece of spectrum has been allocated to some use  such as mobile phones  there is the additional issue of which carrier is allowed to use which frequencies three algorithms were widely used in the past the oldest algorithm  often called the beauty contest  requires each carrier to explain why its proposal serves the public interest best government officials then decide which of the nice stories they enjoy most having some government official award property worth billions of dollars to his favorite company often leads to bribery  corruption  nepotism  and worse furthermore  even a scrupulously honest government official who thought that a foreign company could do a better job than any of the national companies would have a lot of explaining to do this observation led to algorithm 2  holding a lottery among the interested companies the problem with that idea is that companies with no interest in using the spectrum can enter the lottery if  say  a fast food restaurant or shoe store chain wins  it can resell the spectrum to a carrier at a huge profit and with no risk bestowing huge windfalls on alert but otherwise random companies has been severely criticized by many  which led to algorithm 3  auction off the bandwidth to the highest bidder when the british government auctioned off the frequencies needed for third-generation mobile systems in 2000  it expected to get about $ 4 billion it actually received about $ 40 billion because the carriers got into a feeding frenzy  scared to death of missing the mobile boat this event switched on nearby governments ? greedy bits and inspired them to hold their own auctions it worked  but it also left some of the carriers with so much debt that they are close to bankruptcy even in the best cases  it will take many years to recoup the licensing fee a completely different approach to allocating frequencies is to not allocate them at all instead  let everyone transmit at will  but regulate the power used so that stations have such a short range that they do not interfere with each other accordingly  most governments have set aside some frequency bands  called the ism  industrial  scientific  medical  bands for unlicensed usage garage door openers  cordless phones  radio-controlled toys  wireless mice  and numerous other wireless household devices use the ism bands to minimize interference between these uncoordinated devices  the fcc mandates that all devices in the ism bands limit their transmit power  e.g  to 1 watt  and use other techniques to spread their signals over a range of frequencies devices may also need to take care to avoid interference with radar installations sec 2.3 wireless transmission 113 the location of these bands varies somewhat from country to country in the united states  for example  the bands that networking devices use in practice without requiring a fcc license are shown in fig 2-13 the 900-mhz band was used for early versions of 802.11  but it is crowded the 2.4-ghz band is available in most countries and widely used for 802.11b/g and bluetooth  though it is subject to interference from microwave ovens and radar installations the 5-ghz part of the spectrum includes u-nii  unlicensed national information infrastructure  bands the 5-ghz bands are relatively undeveloped but  since they have the most bandwidth and are used by 802.11a  they are quickly gaining in popularity 26 mhz 902 mhz 928 mhz 2.4 ghz 5.25 ghz 5.35 ghz 5.47 ghz 5.725 ghz u-nii bands 5.825 ghz 2.4835 ghz ism band 83.5 mhz 100 mhz 255 mhz ism band 100 mhz ism band figure 2-13 ism and u-nii bands used in the united states by wireless devices the unlicensed bands have been a roaring success over the past decade the ability to use the spectrum freely has unleashed a huge amount of innovation in wireless lans and pans  evidenced by the widespread deployment of technologies such as 802.11 and bluetooth to continue this innovation  more spectrum is needed one exciting development in the u.s is the fcc decision in 2009 to allow unlicensed use of white spaces around 700 mhz white spaces are frequency bands that have been allocated but are not being used locally the transition from analog to all-digital television broadcasts in the u.s in 2010 freed up white spaces around 700 mhz the only difficulty is that  to use the white spaces  unlicensed devices must be able to detect any nearby licensed transmitters  including wireless microphones  that have first rights to use the frequency band another flurry of activity is happening around the 60-ghz band the fcc opened 57 ghz to 64 ghz for unlicensed operation in 2001 this range is an enormous portion of spectrum  more than all the other ism bands combined  so it can support the kind of high-speed networks that would be needed to stream high-definition tv through the air across your living room at 60 ghz  radio 114 the physical layer chap 2 waves are absorbed by oxygen this means that signals do not propagate far  making them well suited to short-range networks the high frequencies  60 ghz is in the extremely high frequency or ? ? millimeter ? ? band  just below infrared radiation  posed an initial challenge for equipment makers  but products are now on the market 2.3.4 infrared transmission unguided infrared waves are widely used for short-range communication the remote controls used for televisions  vcrs  and stereos all use infrared communication they are relatively directional  cheap  and easy to build but have a major drawback  they do not pass through solid objects  try standing between your remote control and your television and see if it still works  in general  as we go from long-wave radio toward visible light  the waves behave more and more like light and less and less like radio on the other hand  the fact that infrared waves do not pass through solid walls well is also a plus it means that an infrared system in one room of a building will not interfere with a similar system in adjacent rooms or buildings  you can not control your neighbor ? s television with your remote control furthermore  security of infrared systems against eavesdropping is better than that of radio systems precisely for this reason therefore  no government license is needed to operate an infrared system  in contrast to radio systems  which must be licensed outside the ism bands infrared communication has a limited use on the desktop  for example  to connect notebook computers and printers with the irda  infrared data association  standard  but it is not a major player in the communication game 2.3.5 light transmission unguided optical signaling or free-space optics has been in use for centuries paul revere used binary optical signaling from the old north church just prior to his famous ride a more modern application is to connect the lans in two buildings via lasers mounted on their rooftops optical signaling using lasers is inherently unidirectional  so each end needs its own laser and its own photodetector this scheme offers very high bandwidth at very low cost and is relatively secure because it is difficult to tap a narrow laser beam it is also relatively easy to install and  unlike microwave transmission  does not require an fcc license the laser ? s strength  a very narrow beam  is also its weakness here aiming a laser beam 1 mm wide at a target the size of a pin head 500 meters away requires the marksmanship of a latter-day annie oakley usually  lenses are put into the system to defocus the beam slightly to add to the difficulty  wind and temperature changes can distort the beam and laser beams also can not penetrate rain or thick fog  although they normally work well on sunny days however  many of these factors are not an issue when the use is to connect two spacecraft sec 2.3 wireless transmission 115 one of the authors  ast  once attended a conference at a modern hotel in europe at which the conference organizers thoughtfully provided a room full of terminals to allow the attendees to read their email during boring presentations since the local ptt was unwilling to install a large number of telephone lines for just 3 days  the organizers put a laser on the roof and aimed it at their university ? s computer science building a few kilometers away they tested it the night before the conference and it worked perfectly at 9 a.m on a bright  sunny day  the link failed completely and stayed down all day the pattern repeated itself the next two days it was not until after the conference that the organizers discovered the problem  heat from the sun during the daytime caused convection currents to rise up from the roof of the building  as shown in fig 2-14 this turbulent air diverted the beam and made it dance around the detector  much like a shimmering road on a hot day the lesson here is that to work well in difficult conditions as well as good conditions  unguided optical links need to be engineered with a sufficient margin of error laser beam misses the detector laser photodetector region of turbulent seeing heat rising off the building figure 2-14 convection currents can interfere with laser communication systems a bidirectional system with two lasers is pictured here unguided optical communication may seem like an exotic networking technology today  but it might soon become much more prevalent we are surrounded 116 the physical layer chap 2 by cameras  that sense light  and displays  that emit light using leds and other technology   data communication can be layered on top of these displays by encoding information in the pattern at which leds turn on and off that is below the threshold of human perception communicating with visible light in this way is inherently safe and creates a low-speed network in the immediate vicinity of the display this could enable all sorts of fanciful ubiquitous computing scenarios the flashing lights on emergency vehicles might alert nearby traffic lights and vehicles to help clear a path informational signs might broadcast maps even festive lights might broadcast songs that are synchronized with their display 2.4 communication satellites in the 1950s and early 1960s  people tried to set up communication systems by bouncing signals off metallized weather balloons unfortunately  the received signals were too weak to be of any practical use then the u.s navy noticed a kind of permanent weather balloon in the sky ? the moon ? and built an operational system for ship-to-shore communication by bouncing signals off it further progress in the celestial communication field had to wait until the first communication satellite was launched the key difference between an artificial satellite and a real one is that the artificial one can amplify the signals before sending them back  turning a strange curiosity into a powerful communication system communication satellites have some interesting properties that make them attractive for many applications in its simplest form  a communication satellite can be thought of as a big microwave repeater in the sky it contains several transponders  each of which listens to some portion of the spectrum  amplifies the incoming signal  and then rebroadcasts it at another frequency to avoid interference with the incoming signal this mode of operation is known as a bent pipe digital processing can be added to separately manipulate or redirect data streams in the overall band  or digital information can even be received by the satellite and rebroadcast regenerating signals in this way improves performance compared to a bent pipe because the satellite does not amplify noise in the upward signal the downward beams can be broad  covering a substantial fraction of the earth ? s surface  or narrow  covering an area only hundreds of kilometers in diameter according to kepler ? s law  the orbital period of a satellite varies as the radius of the orbit to the 3/2 power the higher the satellite  the longer the period near the surface of the earth  the period is about 90 minutes consequently  low-orbit satellites pass out of view fairly quickly  so many of them are needed to provide continuous coverage and ground antennas must track them at an altitude of about 35,800 km  the period is 24 hours at an altitude of 384,000 km  the period is about one month  as anyone who has observed the moon regularly can testify sec 2.4 communication satellites 117 a satellite ? s period is important  but it is not the only issue in determining where to place it another issue is the presence of the van allen belts  layers of highly charged particles trapped by the earth ? s magnetic field any satellite flying within them would be destroyed fairly quickly by the particles these factors lead to three regions in which satellites can be placed safely these regions and some of their properties are illustrated in fig 2-15 below we will briefly describe the satellites that inhabit each of these regions altitude  km  type 35,000 30,000 25,000 20,000 15,000 10,000 5,000 0 geo meo upper van allen belt lower van allen belt leo latency  ms  270 35 ? 85 1 ? 7 sats needed 3 10 50 figure 2-15 communication satellites and some of their properties  including altitude above the earth  round-trip delay time  and number of satellites needed for global coverage 2.4.1 geostationary satellites in 1945  the science fiction writer arthur c clarke calculated that a satellite at an altitude of 35,800 km in a circular equatorial orbit would appear to remain motionless in the sky  so it would not need to be tracked  clarke  1945   he went on to describe a complete communication system that used these  manned  geostationary satellites  including the orbits  solar panels  radio frequencies  and launch procedures unfortunately  he concluded that satellites were impractical due to the impossibility of putting power-hungry  fragile vacuum tube amplifiers into orbit  so he never pursued this idea further  although he wrote some science fiction stories about it the invention of the transistor changed all that  and the first artificial communication satellite  telstar  was launched in july 1962 since then  communication satellites have become a multibillion dollar business and the only aspect of outer space that has become highly profitable these high-flying satellites are often called geo  geostationary earth orbit  satellites 118 the physical layer chap 2 with current technology  it is unwise to have geostationary satellites spaced much closer than 2 degrees in the 360-degree equatorial plane  to avoid interference with a spacing of 2 degrees  there can only be 360/2 = 180 of these satellites in the sky at once however  each transponder can use multiple frequencies and polarizations to increase the available bandwidth to prevent total chaos in the sky  orbit slot allocation is done by itu this process is highly political  with countries barely out of the stone age demanding ? ? their ? ? orbit slots  for the purpose of leasing them to the highest bidder   other countries  however  maintain that national property rights do not extend up to the moon and that no country has a legal right to the orbit slots above its territory to add to the fight  commercial telecommunication is not the only application television broadcasters  governments  and the military also want a piece of the orbiting pie modern satellites can be quite large  weighing over 5000 kg and consuming several kilowatts of electric power produced by the solar panels the effects of solar  lunar  and planetary gravity tend to move them away from their assigned orbit slots and orientations  an effect countered by on-board rocket motors this fine-tuning activity is called station keeping however  when the fuel for the motors has been exhausted  typically after about 10 years  the satellite drifts and tumbles helplessly  so it has to be turned off eventually  the orbit decays and the satellite reenters the atmosphere and burns up  or very rarely crashes to earth   orbit slots are not the only bone of contention frequencies are an issue  too  because the downlink transmissions interfere with existing microwave users consequently  itu has allocated certain frequency bands to satellite users the main ones are listed in fig 2-16 the c band was the first to be designated for commercial satellite traffic two frequency ranges are assigned in it  the lower one for downlink traffic  from the satellite  and the upper one for uplink traffic  to the satellite   to allow traffic to go both ways at the same time  two channels are required these channels are already overcrowded because they are also used by the common carriers for terrestrial microwave links the l and s bands were added by international agreement in 2000 however  they are narrow and also crowded band downlink uplink bandwidth problems l 1.5 ghz 1.6 ghz 15 mhz low bandwidth ; crowded s 1.9 ghz 2.2 ghz 70 mhz low bandwidth ; crowded c 4.0 ghz 6.0 ghz 500 mhz terrestrial interference ku 11 ghz 14 ghz 500 mhz rain ka 20 ghz 30 ghz 3500 mhz rain  equipment cost figure 2-16 the principal satellite bands sec 2.4 communication satellites 119 the next-highest band available to commercial telecommunication carriers is the ku  k under  band this band is not  yet  congested  and at its higher frequencies  satellites can be spaced as close as 1 degree however  another problem exists  rain water absorbs these short microwaves well fortunately  heavy storms are usually localized  so using several widely separated ground stations instead of just one circumvents the problem  but at the price of extra antennas  extra cables  and extra electronics to enable rapid switching between stations bandwidth has also been allocated in the ka  k above  band for commercial satellite traffic  but the equipment needed to use it is expensive in addition to these commercial bands  many government and military bands also exist a modern satellite has around 40 transponders  most often with a 36-mhz bandwidth usually  each transponder operates as a bent pipe  but recent satellites have some on-board processing capacity  allowing more sophisticated operation in the earliest satellites  the division of the transponders into channels was static  the bandwidth was simply split up into fixed frequency bands nowadays  each transponder beam is divided into time slots  with various users taking turns we will study these two techniques  frequency division multiplexing and time division multiplexing  in detail later in this chapter the first geostationary satellites had a single spatial beam that illuminated about 1/3 of the earth ? s surface  called its footprint with the enormous decline in the price  size  and power requirements of microelectronics  a much more sophisticated broadcasting strategy has become possible each satellite is equipped with multiple antennas and multiple transponders each downward beam can be focused on a small geographical area  so multiple upward and downward transmissions can take place simultaneously typically  these so-called spot beams are elliptically shaped  and can be as small as a few hundred km in diameter a communication satellite for the united states typically has one wide beam for the contiguous 48 states  plus spot beams for alaska and hawaii a recent development in the communication satellite world is the development of low-cost microstations  sometimes called vsats  very small aperture terminals   abramson  2000   these tiny terminals have 1-meter or smaller antennas  versus 10 m for a standard geo antenna  and can put out about 1 watt of power the uplink is generally good for up to 1 mbps  but the downlink is often up to several megabits/sec direct broadcast satellite television uses this technology for one-way transmission in many vsat systems  the microstations do not have enough power to communicate directly with one another  via the satellite  of course   instead  a special ground station  the hub  with a large  high-gain antenna is needed to relay traffic between vsats  as shown in fig 2-17 in this mode of operation  either the sender or the receiver has a large antenna and a powerful amplifier the trade-off is a longer delay in return for having cheaper end-user stations vsats have great potential in rural areas it is not widely appreciated  but over half the world ? s population lives more than hour ? s walk from the nearest 120 the physical layer chap 2 communication satellite 1 3 2 4 hub vsat figure 2-17 vsats using a hub telephone stringing telephone wires to thousands of small villages is far beyond the budgets of most third world governments  but installing 1-meter vsat dishes powered by solar cells is often feasible vsats provide the technology that will wire the world communication satellites have several properties that are radically different from terrestrial point-to-point links to begin with  even though signals to and from a satellite travel at the speed of light  nearly 300,000 km/sec   the long round-trip distance introduces a substantial delay for geo satellites depending on the distance between the user and the ground station and the elevation of the satellite above the horizon  the end-to-end transit time is between 250 and 300 msec a typical value is 270 msec  540 msec for a vsat system with a hub   for comparison purposes  terrestrial microwave links have a propagation delay of roughly 3 ? sec /km  and coaxial cable or fiber optic links have a delay of approximately 5 ? sec/km the latter are slower than the former because electromagnetic signals travel faster in air than in solid materials another important property of satellites is that they are inherently broadcast media it does not cost more to send a message to thousands of stations within a transponder ? s footprint than it does to send to one for some applications  this property is very useful for example  one could imagine a satellite broadcasting popular web pages to the caches of a large number of computers spread over a wide area even when broadcasting can be simulated with point-to-point lines  sec 2.4 communication satellites 121 satellite broadcasting may be much cheaper on the other hand  from a privacy point of view  satellites are a complete disaster  everybody can hear everything encryption is essential when security is required satellites also have the property that the cost of transmitting a message is independent of the distance traversed a call across the ocean costs no more to service than a call across the street satellites also have excellent error rates and can be deployed almost instantly  a major consideration for disaster response and military communication 2.4.2 medium-earth orbit satellites at much lower altitudes  between the two van allen belts  we find the meo  medium-earth orbit  satellites as viewed from the earth  these drift slowly in longitude  taking something like 6 hours to circle the earth accordingly  they must be tracked as they move through the sky because they are lower than the geos  they have a smaller footprint on the ground and require less powerful transmitters to reach them currently they are used for navigation systems rather than telecommunications  so we will not examine them further here the constellation of roughly 30 gps  global positioning system  satellites orbiting at about 20,200 km are examples of meo satellites 2.4.3 low-earth orbit satellites moving down in altitude  we come to the leo  low-earth orbit  satellites due to their rapid motion  large numbers of them are needed for a complete system on the other hand  because the satellites are so close to the earth  the ground stations do not need much power  and the round-trip delay is only a few milliseconds the launch cost is substantially cheaper too in this section we will examine two examples of satellite constellations for voice service  iridium and globalstar for the first 30 years of the satellite era  low-orbit satellites were rarely used because they zip into and out of view so quickly in 1990  motorola broke new ground by filing an application with the fcc asking for permission to launch 77 low-orbit satellites for the iridium project  element 77 is iridium   the plan was later revised to use only 66 satellites  so the project should have been renamed dysprosium  element 66   but that probably sounded too much like a disease the idea was that as soon as one satellite went out of view  another would replace it this proposal set off a feeding frenzy among other communication companies all of a sudden  everyone wanted to launch a chain of low-orbit satellites after seven years of cobbling together partners and financing  communication service began in november 1998 unfortunately  the commercial demand for large  heavy satellite telephones was negligible because the mobile phone network had grown in a spectacular way since 1990 as a consequence  iridium was not 122 the physical layer chap 2 profitable and was forced into bankruptcy in august 1999 in one of the most spectacular corporate fiascos in history the satellites and other assets  worth $ 5 billion  were later purchased by an investor for $ 25 million at a kind of extraterrestrial garage sale other satellite business ventures promptly followed suit the iridium service restarted in march 2001 and has been growing ever since it provides voice  data  paging  fax  and navigation service everywhere on land  air  and sea  via hand-held devices that communicate directly with the iridium satellites customers include the maritime  aviation  and oil exploration industries  as well as people traveling in parts of the world lacking a telecom infrastructure  e.g  deserts  mountains  the south pole  and some third world countries   the iridium satellites are positioned at an altitude of 750 km  in circular polar orbits they are arranged in north-south necklaces  with one satellite every 32 degrees of latitude  as shown in fig 2-18 each satellite has a maximum of 48 cells  spot beams  and a capacity of 3840 channels  some of which are used for paging and navigation  while others are used for data and voice each satellite has four neighbors figure 2-18 the iridium satellites form six necklaces around the earth with six satellite necklaces the entire earth is covered  as suggested by fig 2-18 an interesting property of iridium is that communication between distant customers takes place in space  as shown in fig 2-19  a   here we see a caller at the north pole contacting a satellite directly overhead each satellite has four neighbors with which it can communicate  two in the same necklace  shown  and two in adjacent necklaces  not shown   the satellites relay the call across this grid until it is finally sent down to the callee at the south pole an alternative design to iridium is globalstar it is based on 48 leo satellites but uses a different switching scheme than that of iridium whereas iridium relays calls from satellite to satellite  which requires sophisticated switching equipment in the satellites  globalstar uses a traditional bent-pipe design the call originating at the north pole in fig 2-19  b  is sent back to earth and picked sec 2.4 communication satellites 123 bent-pipe satellite satellite switches in space switching on the ground  a   b  figure 2-19  a  relaying in space  b  relaying on the ground up by the large ground station at santa ? s workshop the call is then routed via a terrestrial network to the ground station nearest the callee and delivered by a bent-pipe connection as shown the advantage of this scheme is that it puts much of the complexity on the ground  where it is easier to manage also  the use of large ground station antennas that can put out a powerful signal and receive a weak one means that lower-powered telephones can be used after all  the telephone puts out only a few milliwatts of power  so the signal that gets back to the ground station is fairly weak  even after having been amplified by the satellite satellites continue to be launched at a rate of around 20 per year  including ever-larger satellites that now weigh over 5000 kilograms but there are also very small satellites for the more budget-conscious organization to make space research more accessible  academics from cal poly and stanford got together in 1999 to define a standard for miniature satellites and an associated launcher that would greatly lower launch costs  nugent et al  2008   cubesats are satellites in units of 10 cm ? ? 10 cm ? ? 10 cm cubes  each weighing no more than 1 kilogram  that can be launched for as little as $ 40,000 each the launcher flies as a secondary payload on commercial space missions it is basically a tube that takes up to three units of cubesats and uses springs to release them into orbit roughly 20 cubesats have launched so far  with many more in the works most of them communicate with ground stations on the uhf and vhf bands 2.4.4 satellites versus fiber a comparison between satellite communication and terrestrial communication is instructive as recently as 25 years ago  a case could be made that the future of communication lay with communication satellites after all  the telephone system 124 the physical layer chap 2 had changed little in the previous 100 years and showed no signs of changing in the next 100 years this glacial movement was caused in no small part by the regulatory environment in which the telephone companies were expected to provide good voice service at reasonable prices  which they did   and in return got a guaranteed profit on their investment for people with data to transmit  1200-bps modems were available that was pretty much all there was the introduction of competition in 1984 in the united states and somewhat later in europe changed all that radically telephone companies began replacing their long-haul networks with fiber and introduced high-bandwidth services like adsl  asymmetric digital subscriber line   they also stopped their long-time practice of charging artificially high prices to long-distance users to subsidize local service all of a sudden  terrestrial fiber connections looked like the winner nevertheless  communication satellites have some major niche markets that fiber does not  and  sometimes  can not  address first  when rapid deployment is critical  satellites win easily a quick response is useful for military communication systems in times of war and disaster response in times of peace following the massive december 2004 sumatra earthquake and subsequent tsunami  for example  communications satellites were able to restore communications to first responders within 24 hours this rapid response was possible because there is a developed satellite service provider market in which large players  such as intelsat with over 50 satellites  can rent out capacity pretty much anywhere it is needed for customers served by existing satellite networks  a vsat can be set up easily and quickly to provide a megabit/sec link to elsewhere in the world a second niche is for communication in places where the terrestrial infrastructure is poorly developed many people nowadays want to communicate everywhere they go mobile phone networks cover those locations with good population density  but do not do an adequate job in other places  e.g  at sea or in the desert   conversely  iridium provides voice service everywhere on earth  even at the south pole terrestrial infrastructure can also be expensive to install  depending on the terrain and necessary rights of way indonesia  for example  has its own satellite for domestic telephone traffic launching one satellite was cheaper than stringing thousands of undersea cables among the 13,677 islands in the archipelago a third niche is when broadcasting is essential a message sent by satellite can be received by thousands of ground stations at once satellites are used to distribute much network tv programming to local stations for this reason there is now a large market for satellite broadcasts of digital tv and radio directly to end users with satellite receivers in their homes and cars all sorts of other content can be broadcast too for example  an organization transmitting a stream of stock  bond  or commodity prices to thousands of dealers might find a satellite system to be much cheaper than simulating broadcasting on the ground in short  it looks like the mainstream communication of the future will be terrestrial fiber optics combined with cellular radio  but for some specialized uses  sec 2.4 communication satellites 125 satellites are better however  there is one caveat that applies to all of this  economics although fiber offers more bandwidth  it is conceivable that terrestrial and satellite communication could compete aggressively on price if advances in technology radically cut the cost of deploying a satellite  e.g  if some future space vehicle can toss out dozens of satellites on one launch  or low-orbit satellites catch on in a big way  it is not certain that fiber will win all markets 2.5 digital modulation and multiplexing now that we have studied the properties of wired and wireless channels  we turn our attention to the problem of sending digital information wires and wireless channels carry analog signals such as continuously varying voltage  light intensity  or sound intensity to send digital information  we must devise analog signals to represent bits the process of converting between bits and signals that represent them is called digital modulation we will start with schemes that directly convert bits into a signal these schemes result in baseband transmission  in which the signal occupies frequencies from zero up to a maximum that depends on the signaling rate it is common for wires then we will consider schemes that regulate the amplitude  phase  or frequency of a carrier signal to convey bits these schemes result in passband transmission  in which the signal occupies a band of frequencies around the frequency of the carrier signal it is common for wireless and optical channels for which the signals must reside in a given frequency band channels are often shared by multiple signals after all  it is much more convenient to use a single wire to carry several signals than to install a wire for every signal this kind of sharing is called multiplexing it can be accomplished in several different ways we will present methods for time  frequency  and code division multiplexing the modulation and multiplexing techniques we describe in this section are all widely used for wires  fiber  terrestrial wireless  and satellite channels in the following sections  we will look at examples of networks to see them in action 2.5.1 baseband transmission the most straightforward form of digital modulation is to use a positive voltage to represent a 1 and a negative voltage to represent a 0 for an optical fiber  the presence of light might represent a 1 and the absence of light might represent a 0 this scheme is called nrz  non-return-to-zero   the odd name is for historical reasons  and simply means that the signal follows the data an example is shown in fig 2-20  b   once sent  the nrz signal propagates down the wire at the other end  the receiver converts it into bits by sampling the signal at regular intervals of time 126 the physical layer chap 2  clock that is xored with bits   a  bit stream  b  non-return to zero  nrz   c  nrz invert  nrzi   d  manchester  e  bipolar encoding  also alternate mark inversion  ami  1 0 0 0 0 1 0 1 1 1 1 figure 2-20 line codes   a  bits   b  nrz   c  nrzi   d  manchester   e  bipolar or ami this signal will not look exactly like the signal that was sent it will be attenuated and distorted by the channel and noise at the receiver to decode the bits  the receiver maps the signal samples to the closest symbols for nrz  a positive voltage will be taken to indicate that a 1 was sent and a negative voltage will be taken to indicate that a 0 was sent nrz is a good starting point for our studies because it is simple  but it is seldom used by itself in practice more complex schemes can convert bits to signals that better meet engineering considerations these schemes are called line codes below  we describe line codes that help with bandwidth efficiency  clock recovery  and dc balance bandwidth efficiency with nrz  the signal may cycle between the positive and negative levels up to every 2 bits  in the case of alternating 1s and 0s   this means that we need a bandwidth of at least b/2 hz when the bit rate is b bits/sec this relation comes from the nyquist rate  eq  2-2    it is a fundamental limit  so we can not run nrz faster without using more bandwidth bandwidth is often a limited resource  even for wired channels  higher-frequency signals are increasingly attenuated  making them less useful  and higher-frequency signals also require faster electronics one strategy for using limited bandwidth more efficiently is to use more than two signaling levels by using four voltages  for instance  we can send 2 bits at once as a single symbol this design will work as long as the signal at the receiver is sufficiently strong to distinguish the four levels the rate at which the signal changes is then half the bit rate  so the needed bandwidth has been reduced sec 2.5 digital modulation and multiplexing 127 we call the rate at which the signal changes the symbol rate to distinguish it from the bit rate the bit rate is the symbol rate multiplied by the number of bits per symbol an older name for the symbol rate  particularly in the context of devices called telephone modems that convey digital data over telephone lines  is the baud rate in the literature  the terms ? ? bit rate ? ? and ? ? baud rate ? ? are often used incorrectly note that the number of signal levels does not need to be a power of two often it is not  with some of the levels used for protecting against errors and simplifying the design of the receiver clock recovery for all schemes that encode bits into symbols  the receiver must know when one symbol ends and the next symbol begins to correctly decode the bits with nrz  in which the symbols are simply voltage levels  a long run of 0s or 1s leaves the signal unchanged after a while it is hard to tell the bits apart  as 15 zeros look much like 16 zeros unless you have a very accurate clock accurate clocks would help with this problem  but they are an expensive solution for commodity equipment remember  we are timing bits on links that run at many megabits/sec  so the clock would have to drift less than a fraction of a microsecond over the longest permitted run this might be reasonable for slow links or short messages  but it is not a general solution one strategy is to send a separate clock signal to the receiver another clock line is no big deal for computer buses or short cables in which there are many lines in parallel  but it is wasteful for most network links since if we had another line to send a signal we could use it to send data a clever trick here is to mix the clock signal with the data signal by xoring them together so that no extra line is needed the results are shown in fig 2-20  d   the clock makes a clock transition in every bit time  so it runs at twice the bit rate when it is xored with the 0 level it makes a low-to-high transition that is simply the clock this transition is a logical 0 when it is xored with the 1 level it is inverted and makes a high-tolow transition this transition is a logical 1 this scheme is called manchester encoding and was used for classic ethernet the downside of manchester encoding is that it requires twice as much bandwidth as nrz because of the clock  and we have learned that bandwidth often matters a different strategy is based on the idea that we should code the data to ensure that there are enough transitions in the signal consider that nrz will have clock recovery problems only for long runs of 0s and 1s if there are frequent transitions  it will be easy for the receiver to stay synchronized with the incoming stream of symbols as a step in the right direction  we can simplify the situation by coding a 1 as a transition and a 0 as no transition  or vice versa this coding is called nrzi  non-return-to-zero inverted   a twist on nrz an example is shown in 128 the physical layer chap 2 fig 2-20  c   the popular usb  universal serial bus  standard for connecting computer peripherals uses nrzi with it  long runs of 1s do not cause a problem of course  long runs of 0s still cause a problem that we must fix if we were the telephone company  we might simply require that the sender not transmit too many 0s older digital telephone lines in the u.s  called t1 lines  did in fact require that no more than 15 consecutive 0s be sent for them to work correctly to really fix the problem we can break up runs of 0s by mapping small groups of bits to be transmitted so that groups with successive 0s are mapped to slightly longer patterns that do not have too many consecutive 0s a well-known code to do this is called 4b/5b every 4 bits is mapped into a5-bit pattern with a fixed translation table the five bit patterns are chosen so that there will never be a run of more than three consecutive 0s the mapping is shown in fig 2-21 this scheme adds 25 % overhead  which is better than the 100 % overhead of manchester encoding since there are 16 input combinations and 32 output combinations  some of the output combinations are not used putting aside the combinations with too many successive 0s  there are still some codes left as a bonus  we can use these nondata codes to represent physical layer control signals for example  in some uses ? ? 11111 ? ? represents an idle line and ? ? 11000 ? ? represents the start of a frame data  4b  codeword  5b  data  4b  codeword  5b  0000 11110 1000 10010 0001 01001 1001 10011 0010 10100 1010 10110 0011 10101 1011 10111 0100 01010 1100 11010 0101 01011 1101 11011 0110 01110 1110 11100 0111 01111 1111 11101 figure 2-21 4b/5b mapping an alternative approach is to make the data look random  known as scrambling in this case it is very likely that there will be frequent transitions a scrambler works by xoring the data with a pseudorandom sequence before it is transmitted this mixing will make the data as random as the pseudorandom sequence  assuming it is independent of the pseudorandom sequence   the receiver then xors the incoming bits with the same pseudorandom sequence to recover the real data for this to be practical  the pseudorandom sequence must be easy to create it is commonly given as the seed to a simple random number generator scrambling is attractive because it adds no bandwidth or time overhead in fact  it often helps to condition the signal so that it does not have its energy in sec 2.5 digital modulation and multiplexing 129 dominant frequency components  caused by repetitive data patterns  that might radiate electromagnetic interference scrambling helps because random signals tend to be ? ? white  ? ? or have energy spread across the frequency components however  scrambling does not guarantee that there will be no long runs it is possible to get unlucky occasionally if the data are the same as the pseudorandom sequence  they will xor to all 0s this outcome does not generally occur with a long pseudorandom sequence that is difficult to predict however  with a short or predictable sequence  it might be possible for malicious users to send bit patterns that cause long runs of 0s after scrambling and cause links to fail early versions of the standards for sending ip packets over sonet links in the telephone system had this defect  malis and simpson  1999   it was possible for users to send certain ? ? killer packets ? ? that were guaranteed to cause problems balanced signals signals that have as much positive voltage as negative voltage even over short periods of time are called balanced signals they average to zero  which means that they have no dc electrical component the lack of a dc component is an advantage because some channels  such as coaxial cable or lines with transformers  strongly attenuate a dc component due to their physical properties also  one method of connecting the receiver to the channel called capacitive coupling passes only the ac portion of a signal in either case  if we send a signal whose average is not zero  we waste energy as the dc component will be filtered out balancing helps to provide transitions for clock recovery since there is a mix of positive and negative voltages it also provides a simple way to calibrate receivers because the average of the signal can be measured and used as a decision threshold to decode symbols with unbalanced signals  the average may be drift away from the true decision level due to a density of 1s  for example  which would cause more symbols to be decoded with errors a straightforward way to construct a balanced code is to use two voltage levels to represent a logical 1   say + 1 v or ? 1 v  with 0 v representing a logical zero to send a 1  the transmitter alternates between the + 1 v and ? 1 v levels so that they always average out this scheme is called bipolar encoding in telephone networks it is called ami  alternate mark inversion   building on old terminology in which a 1 is called a ? ? mark ? ? and a 0 is called a ? ? space ? ? an example is given in fig 2-20  e   bipolar encoding adds a voltage level to achieve balance alternatively we can use a mapping like 4b/5b to achieve balance  as well as transitions for clock recovery   an example of this kind of balanced code is the 8b/10b line code it maps 8 bits of input to 10 bits of output  so it is 80 % efficient  just like the 4b/5b line code the 8 bits are split into a group of 5 bits  which is mapped to 6 bits  and a group of 3 bits  which is mapped to 4 bits the 6-bit and 4-bit symbols are 130 the physical layer chap 2 then concatenated in each group  some input patterns can be mapped to balanced output patterns that have the same number of 0s and 1s for example  ? ? 001 ? ? is mapped to ? ? 1001  ? ? which is balanced but there are not enough combinations for all output patterns to be balanced for these cases  each input pattern is mapped to two output patterns one will have an extra 1 and the alternate will have an extra 0 for example  ? ? 000 ? ? is mapped to both ? ? 1011 ? ? and its complement ? ? 0100 ? ? as input bits are mapped to output bits  the encoder remembers the disparity from the previous symbol the disparity is the total number of 0s or 1s by which the signal is out of balance the encoder then selects either an output pattern or its alternate to reduce the disparity with 8b/10b  the disparity will be at most 2 bits thus  the signal will never be far from balanced there will also never be more than five consecutive 1s or 0s  to help with clock recovery 2.5.2 passband transmission often  we want to use a range of frequencies that does not start at zero to send information across a channel for wireless channels  it is not practical to send very low frequency signals because the size of the antenna needs to be a fraction of the signal wavelength  which becomes large in any case  regulatory constraints and the need to avoid interference usually dictate the choice of frequencies even for wires  placing a signal in a given frequency band is useful to let different kinds of signals coexist on the channel this kind of transmission is called passband transmission because an arbitrary band of frequencies is used to pass the signal fortunately  our fundamental results from earlier in the chapter are all in terms of bandwidth  or the width of the frequency band the absolute frequency values do not matter for capacity this means that we can take a baseband signal that occupies 0 to b hz and shift it up to occupy a passband of s to s ? b hz without changing the amount of information that it can carry  even though the signal will look different to process a signal at the receiver  we can shift it back down to baseband  where it is more convenient to detect symbols digital modulation is accomplished with passband transmission by regulating or modulating a carrier signal that sits in the passband we can modulate the amplitude  frequency  or phase of the carrier signal each of these methods has a corresponding name in ask  amplitude shift keying   two different amplitudes are used to represent 0 and 1 an example with a nonzero and a zero level is shown in fig 2-22  b   more than two levels can be used to represent more symbols similarly  with fsk  frequency shift keying   two or more different tones are used the example in fig 2-21  c  uses just two frequencies in the simplest form of psk  phase shift keying   the carrier wave is systematically shifted 0 or 180 degrees at each symbol period because there are two phases  it is called bpsk  binary phase shift keying   ? ? binary ? ? here refers to the two symbols  not that the symbols represent 2 bits an example is shown in fig 2-22  c   a sec 2.5 digital modulation and multiplexing 131 better scheme that uses the channel bandwidth more efficiently is to use four shifts  e.g  45  135  225  or 315 degrees  to transmit 2 bits of information per symbol this version is called qpsk  quadrature phase shift keying   phase changes 0  a   b   c   d  1 0 1 1 0 0 1 0 0 1 0 0 figure 2-22  a  a binary signal  b  amplitude shift keying  c  frequency shift keying  d  phase shift keying we can combine these schemes and use more levels to transmit more bits per symbol only one of frequency and phase can be modulated at a time because they are related  with frequency being the rate of change of phase over time usually  amplitude and phase are modulated in combination three examples are shown in fig 2-23 in each example  the points give the legal amplitude and phase combinations of each symbol in fig 2-23  a   we see equidistant dots at 45  135  225  and 315 degrees the phase of a dot is indicated by the angle a line from it to the origin makes with the positive x-axis the amplitude of a dot is the distance from the origin this figure is a representation of qpsk this kind of diagram is called a constellation diagram in fig 2-23  b  we see a modulation scheme with a denser constellation sixteen combinations of amplitudes and phase are used  so the modulation scheme can be used to transmit 132 the physical layer chap 2 270  a  90 180 0 270  b  90 0 270  c  90 180 0 figure 2-23  a  qpsk  b  qam-16  c  qam-64 4 bits per symbol it is called qam-16  where qam stands for quadrature amplitude modulation figure 2-23  c  is a still denser modulation scheme with 64 different combinations  so 6 bits can be transmitted per symbol it is called qam-64 even higher-order qams are used too as you might suspect from these constellations  it is easier to build electronics to produce symbols as a combination of values on each axis than as a combination of amplitude and phase values that is why the patterns look like squares rather than concentric circles the constellations we have seen so far do not show how bits are assigned to symbols when making the assignment  an important consideration is that a small burst of noise at the receiver not lead to many bit errors this might happen if we assigned consecutive bit values to adjacent symbols with qam-16  for example  if one symbol stood for 0111 and the neighboring symbol stood for 1000  if the receiver mistakenly picks the adjacent symbol it will cause all of the bits to be wrong a better solution is to map bits to symbols so that adjacent symbols differ in only 1 bit position this mapping is called a gray code fig 2-24 shows a qam-16 constellation that has been gray coded now if the receiver decodes the symbol in error  it will make only a single bit error in the expected case that the decoded symbol is close to the transmitted symbol 2.5.3 frequency division multiplexing the modulation schemes we have seen let us send one signal to convey bits along a wired or wireless link however  economies of scale play an important role in how we use networks it costs essentially the same amount of money to install and maintain a high-bandwidth transmission line as a low-bandwidth line between two different offices  i.e  the costs come from having to dig the trench and not from what kind of cable or fiber goes into it   consequently  multiplexing schemes have been developed to share lines among many signals sec 2.5 digital modulation and multiplexing 133 a b c d e when 1101 is sent  point decodes as bit errors a 1101 0 b 1100 1 c 1001 1 d 1111 1 e 0101 1 1100 1000 1101 1001 1111 1011 1110 1010 0011 0111 0010 0110 0000 0100 0001 0101 q i figure 2-24 gray-coded qam-16 fdm  frequency division multiplexing  takes advantage of passband transmission to share a channel it divides the spectrum into frequency bands  with each user having exclusive possession of some band in which to send their signal am radio broadcasting illustrates fdm the allocated spectrum is about 1 mhz  roughly 500 to 1500 khz different frequencies are allocated to different logical channels  stations   each operating in a portion of the spectrum  with the interchannel separation great enough to prevent interference for a more detailed example  in fig 2-25 we show three voice-grade telephone channels multiplexed using fdm filters limit the usable bandwidth to about 3100 hz per voice-grade channel when many channels are multiplexed together  4000 hz is allocated per channel the excess is called a guard band it keeps the channels well separated first the voice channels are raised in frequency  each by a different amount then they can be combined because no two channels now occupy the same portion of the spectrum notice that even though there are gaps between the channels thanks to the guard bands  there is some overlap between adjacent channels the overlap is there because real filters do not have ideal sharp edges this means that a strong spike at the edge of one channel will be felt in the adjacent one as nonthermal noise this scheme has been used to multiplex calls in the telephone system for many years  but multiplexing in time is now preferred instead however  fdm continues to be used in telephone networks  as well as cellular  terrestrial wireless  and satellite networks at a higher level of granularity when sending digital data  it is possible to divide the spectrum efficiently without using guard bands in ofdm  orthogonal frequency division multiplexing   the channel bandwidth is divided into many subcarriers that independently send data  e.g  with qam   the subcarriers are packed tightly together in the frequency domain thus  signals from each subcarrier extend into adjacent ones however  as seen in fig 2-26  the frequency response of each subcarrier is 134 the physical layer chap 2 300 3100 channel 3 channel 2 channel 1 1 1 1 attenuation factor 64 frequency  khz   c  channel 1 channel 3 channel 2 68 72 60 64 frequency  khz   b  frequency  hz   a  68 72 60 figure 2-25 frequency division multiplexing  a  the original bandwidths  b  the bandwidths raised in frequency  c  the multiplexed channel designed so that it is zero at the center of the adjacent subcarriers the subcarriers can therefore be sampled at their center frequencies without interference from their neighbors to make this work  a guard time is needed to repeat a portion of the symbol signals in time so that they have the desired frequency response however  this overhead is much less than is needed for many guard bands frequency power f1 f2 f3 f4 f5 separation f one ofdm subcarrier  shaded  figure 2-26 orthogonal frequency division multiplexing  ofdm   the idea of ofdm has been around for a long time  but it is only in the last decade that it has been widely adopted  following the realization that it is possible sec 2.5 digital modulation and multiplexing 135 to implement ofdm efficiently in terms of a fourier transform of digital data over all subcarriers  instead of separately modulating each subcarrier   ofdm is used in 802.11  cable networks and power line networking  and is planned for fourth-generation cellular systems usually  one high-rate stream of digital information is split into many low-rate streams that are transmitted on the subcarriers in parallel this division is valuable because degradations of the channel are easier to cope with at the subcarrier level ; some subcarriers may be very degraded and excluded in favor of subcarriers that are received well 2.5.4 time division multiplexing an alternative to fdm is tdm  time division multiplexing   here  the users take turns  in a round-robin fashion   each one periodically getting the entire bandwidth for a little burst of time an example of three streams being multiplexed with tdm is shown in fig 2-27 bits from each input stream are taken in a fixed time slot and output to the aggregate stream this stream runs at the sum rate of the individual streams for this to work  the streams must be synchronized in time small intervals of guard time analogous to a frequency guard band may be added to accommodate small timing variations 1 2 3 round-robin tdm multiplexer 2 1 3 2 1 3 guard time 2 figure 2-27 time division multiplexing  tdm   tdm is used widely as part of the telephone and cellular networks to avoid one point of confusion  let us be clear that it is quite different from the alternative stdm  statistical time division multiplexing   the prefix ? ? statistical ? ? is added to indicate that the individual streams contribute to the multiplexed stream not on a fixed schedule  but according to the statistics of their demand stdm is packet switching by another name 2.5.5 code division multiplexing there is a third kind of multiplexing that works in a completely different way than fdm and tdm cdm  code division multiplexing  is a form of spread spectrum communication in which a narrowband signal is spread out over a wider frequency band this can make it more tolerant of interference  as well as allowing multiple signals from different users to share the same frequency band because code division multiplexing is mostly used for the latter purpose it is commonly called cdma  code division multiple access   136 the physical layer chap 2 cdma allows each station to transmit over the entire frequency spectrum all the time multiple simultaneous transmissions are separated using coding theory before getting into the algorithm  let us consider an analogy  an airport lounge with many pairs of people conversing tdm is comparable to pairs of people in the room taking turns speaking fdm is comparable to the pairs of people speaking at different pitches  some high-pitched and some low-pitched such that each pair can hold its own conversation at the same time as but independently of the others cdma is comparable to each pair of people talking at once  but in a different language the french-speaking couple just hones in on the french  rejecting everything that is not french as noise thus  the key to cdma is to be able to extract the desired signal while rejecting everything else as random noise a somewhat simplified description of cdma follows in cdma  each bit time is subdivided into m short intervals called chips typically  there are 64 or 128 chips per bit  but in the example given here we will use 8 chips/bit for simplicity each station is assigned a unique m-bit code called a chip sequence for pedagogical purposes  it is convenient to use a bipolar notation to write these codes as sequences of ? 1 and + 1 we will show chip sequences in parentheses to transmit a 1 bit  a station sends its chip sequence to transmit a 0 bit  it sends the negation of its chip sequence no other patterns are permitted thus  for m ? ? 8  if station a is assigned the chip sequence  ? 1 ? 1 ? 1 ? 1 ? 1 ? 1 ? 1 ? 1   it can send a 1 bit by transmiting the chip sequence and a 0 by transmitting  ? 1 ? 1 ? 1 ? 1 ? 1 ? 1 ? 1 ? 1   it is really signals with these voltage levels that are sent  but it is sufficient for us to think in terms of the sequences increasing the amount of information to be sent from b bits/sec to mb chips/sec for each station means that the bandwidth needed for cdma is greater by a factor of m than the bandwidth needed for a station not using cdma  assuming no changes in the modulation or encoding techniques   if we have a 1-mhz band available for 100 stations  with fdm each one would have 10 khz and could send at 10 kbps  assuming 1 bit per hz   with cdma  each station uses the full 1 mhz  so the chip rate is 100 chips per bit to spread the station ? s bit rate of 10 kbps across the channel in fig 2-28  a  and  b  we show the chip sequences assigned to four example stations and the signals that they represent each station has its own unique chip sequence let us use the symbol s to indicate the m-chip vector for station s  and s for its negation all chip sequences are pairwise orthogonal  by which we mean that the normalized inner product of any two distinct chip sequences  s and t  written as s t   is 0 it is known how to generate such orthogonal chip sequences using a method known as walsh codes in mathematical terms  orthogonality of the chip sequences can be expressed as follows  s t ? m 1 i ? 1 ? m siti ? ? 0  2-5  sec 2.5 digital modulation and multiplexing 137 in plain english  as many pairs are the same as are different this orthogonality property will prove crucial later note that if s t ? ? 0  then s t is also 0 the normalized inner product of any chip sequence with itself is 1  s s ? m 1 i ? 1 ? m sisi ? m 1 i ? 1 ? m si 2 ? m 1 i ? 1 ? m  ? 1  2 ? ? 1 this follows because each of the m terms in the inner product is 1  so the sum is m also note that s s ? ? ? 1  b  a =  ? 1 ? 1 ? 1 + 1 + 1 ? 1 + 1 + 1  b =  ? 1 ? 1 + 1 ? 1 + 1 + 1 + 1 ? 1  c =  ? 1 + 1 ? 1 + 1 + 1 + 1 ? 1 ? 1  d =  ? 1 + 1 ? 1 ? 1 ? 1 ? 1 + 1 ? 1   a   c   d  s1 = c =  ? 1 + 1 ? 1 + 1 + 1 + 1 ? 1 ? 1  s2 = b + c =  ? 2 0 0 0 + 2 + 2 0 ? 2  s3 = a + b =  0 0 ? 2 + 2 0 ? 2 0 + 2  s4 = a + b + c =  ? 1 + 1 ? 3 + 3 + 1 ? 1 ? 1 + 1  s5 = a + b + c + d =  ? 4 0 ? 2 0 + 2 0 + 2 ? 2  s6 = a + b + c + d =  ? 2 ? 2 0 ? 2 0 ? 2 + 4 0  s1 c =  1 + 1 ? 1 + 1 + 1 + 1 ? 1 ? 1  /8 = 1 s2 c =  2 + 0 + 0 + 0 + 2 + 2 + 0 + 2  /8 = 1 s3 c =  0 + 0 + 2 + 2 + 0 ? 2 + 0 ? 2  /8 = 0 s4 c =  1 + 1 + 3 + 3 + 1 ? 1 + 1 ? 1  /8 = 1 s5 c =  4 + 0 + 2 + 0 + 2 + 0 ? 2 + 2  /8 = 1 s6 c =  2 ? 2 + 0 ? 2 + 0 ? 2 ? 4 + 0  /8 = ? 1 figure 2-28  a  chip sequences for four stations  b  signals the sequences represent  c  six examples of transmissions  d  recovery of station c ? s signal during each bit time  a station can transmit a 1  by sending its chip sequence   it can transmit a 0  by sending the negative of its chip sequence   or it can be silent and transmit nothing we assume for now that all stations are synchronized in time  so all chip sequences begin at the same instant when two or more stations transmit simultaneously  their bipolar sequences add linearly for example  if in one chip period three stations output + 1 and one station outputs ? 1  + 2 will be received one can think of this as signals that add as voltages superimposed on the channel  three stations output + 1 v and one station outputs ? 1 v  so that 2 v is received for instance  in fig 2-28  c  we see six examples of one or more stations transmitting 1 bit at the same time in the first example  c transmits a 1 bit  so we just get c ? s chip sequence in the second example  both b and c transmit 1 bits  so we get the sum of their bipolar chip sequences  namely   ? 1 ? 1 ? 1 ? 1 ? 1 ? 1 ? 1 ? 1  ? ?  ? 1 ? 1 ? 1 ? 1 ? 1 ? 1 ? 1 ? 1  ? ?  ? 2 0 0 0 ? 2 ? 2 0 ? 2  to recover the bit stream of an individual station  the receiver must know that station ? s chip sequence in advance it does the recovery by computing the normalized inner product of the received chip sequence and the chip sequence of the station whose bit stream it is trying to recover if the received chip sequence is s and the receiver is trying to listen to a station whose chip sequence is c  it just computes the normalized inner product  s c 138 the physical layer chap 2 to see why this works  just imagine that two stations  a and c  both transmit a 1 bit at the same time that b transmits a 0 bit  as is the case in the third example the receiver sees the sum  s ? ? a ? ? b ? ? c  and computes s c ? ?  a ? ? b ? ? c  c ? ? a c ? ? b c ? ? c c ? ? 0 ? ? 0 ? ? 1 ? ? 1 the first two terms vanish because all pairs of chip sequences have been carefully chosen to be orthogonal  as shown in eq  2-5   now it should be clear why this property must be imposed on the chip sequences to make the decoding process more concrete  we show six examples in fig 2-28  d   suppose that the receiver is interested in extracting the bit sent by station c from each of the six signals s1 through s6 it calculates the bit by summing the pairwise products of the received s and the c vector of fig 2-28  a  and then taking 1/8 of the result  since m ? ? 8 here   the examples include cases where c is silent  sends a 1 bit  and sends a 0 bit  individually and in combination with other transmissions as shown  the correct bit is decoded each time it is just like speaking french in principle  given enough computing capacity  the receiver can listen to all the senders at once by running the decoding algorithm for each of them in parallel in real life  suffice it to say that this is easier said than done  and it is useful to know which senders might be transmitting in the ideal  noiseless cdma system we have studied here  the number of stations that send concurrently can be made arbitrarily large by using longer chip sequences for 2n stations  walsh codes can provide 2n orthogonal chip sequences of length 2n however  one significant limitation is that we have assumed that all the chips are synchronized in time at the receiver this synchronization is not even approximately true in some applications  such as cellular networks  in which cdma has been widely deployed starting in the 1990s   it leads to different designs we will return to this topic later in the chapter and describe how asynchronous cdma differs from synchronous cdma as well as cellular networks  cdma is used by satellites and cable networks we have glossed over many complicating factors in this brief introduction engineers who want to gain a deep understanding of cdma should read viterbi  1995  and lee and miller  1998   these references require quite a bit of background in communication engineering  however 2.6 the public switched telephone network when two computers owned by the same company or organization and located close to each other need to communicate  it is often easiest just to run a cable between them lans work this way however  when the distances are large or there are many computers or the cables have to pass through a public road or other public right of way  the costs of running private cables are usually prohibitive sec 2.6 the public switched telephone network 139 furthermore  in just about every country in the world  stringing private transmission lines across  or underneath  public property is also illegal consequently  the network designers must rely on the existing telecommunication facilities these facilities  especially the pstn  public switched telephone network   were usually designed many years ago  with a completely different goal in mind  transmitting the human voice in a more-or-less recognizable form their suitability for use in computer-computer communication is often marginal at best to see the size of the problem  consider that a cheap commodity cable running between two computers can transfer data at 1 gbps or more in contrast  typical adsl  the blazingly fast alternative to a telephone modem  runs at around 1 mbps the difference between the two is the difference between cruising in an airplane and taking a leisurely stroll nonetheless  the telephone system is tightly intertwined with  wide area  computer networks  so it is worth devoting some time to study it in detail the limiting factor for networking purposes turns out to be the ? ? last mile ? ? over which customers connect  not the trunks and switches inside the telephone network this situation is changing with the gradual rollout of fiber and digital technology at the edge of the network  but it will take time and money during the long wait  computer systems designers used to working with systems that give at least three orders of magnitude better performance have devoted much time and effort to figure out how to use the telephone network efficiently in the following sections we will describe the telephone system and show how it works for additional information about the innards of the telephone system see bellamy  2000   2.6.1 structure of the telephone system soon after alexander graham bell patented the telephone in 1876  just a few hours ahead of his rival  elisha gray   there was an enormous demand for his new invention the initial market was for the sale of telephones  which came in pairs it was up to the customer to string a single wire between them if a telephone owner wanted to talk to n other telephone owners  separate wires had to be strung to all n houses within a year  the cities were covered with wires passing over houses and trees in a wild jumble it became immediately obvious that the model of connecting every telephone to every other telephone  as shown in fig 2-29  a   was not going to work to his credit  bell saw this problem early on and formed the bell telephone company  which opened its first switching office  in new haven  connecticut  in 1878 the company ran a wire to each customer ? s house or office to make a call  the customer would crank the phone to make a ringing sound in the telephone company office to attract the attention of an operator  who would then manually connect the caller to the callee by using a short jumper cable to connect the caller to the callee the model of a single switching office is illustrated in fig 2-29  b   140 the physical layer chap 2  a   b   c  figure 2-29  a  fully interconnected network  b  centralized switch  c  two-level hierarchy pretty soon  bell system switching offices were springing up everywhere and people wanted to make long-distance calls between cities  so the bell system began to connect the switching offices the original problem soon returned  to connect every switching office to every other switching office by means of a wire between them quickly became unmanageable  so second-level switching offices were invented after a while  multiple second-level offices were needed  as illustrated in fig 2-29  c   eventually  the hierarchy grew to five levels by 1890  the three major parts of the telephone system were in place  the switching offices  the wires between the customers and the switching offices  by now balanced  insulated  twisted pairs instead of open wires with an earth return   and the long-distance connections between the switching offices for a short technical history of the telephone system  see hawley  1991   while there have been improvements in all three areas since then  the basic bell system model has remained essentially intact for over 100 years the following description is highly simplified but gives the essential flavor nevertheless each telephone has two copper wires coming out of it that go directly to the telephone company ? s nearest end office  also called a local central office   the distance is typically 1 to 10 km  being shorter in cities than in rural areas in the united states alone there are about 22,000 end offices the two-wire connections between each subscriber ? s telephone and the end office are known in the trade as the local loop if the world ? s local loops were stretched out end to end  they would extend to the moon and back 1000 times at one time  80 % of at&t ? s capital value was the copper in the local loops at&t was then  in effect  the world ? s largest copper mine fortunately  this fact was not well known in the investment community had it been known  some corporate raider might have bought at&t  ended all telephone service in the united states  ripped out all the wire  and sold it to a copper refiner for a quick payback sec 2.6 the public switched telephone network 141 if a subscriber attached to a given end office calls another subscriber attached to the same end office  the switching mechanism within the office sets up a direct electrical connection between the two local loops this connection remains intact for the duration of the call if the called telephone is attached to another end office  a different procedure has to be used each end office has a number of outgoing lines to one or more nearby switching centers  called toll offices  or  if they are within the same local area  tandem offices   these lines are called toll connecting trunks the number of different kinds of switching centers and their topology varies from country to country depending on the country ? s telephone density if both the caller ? s and callee ? s end offices happen to have a toll connecting trunk to the same toll office  a likely occurrence if they are relatively close by   the connection may be established within the toll office a telephone network consisting only of telephones  the small dots   end offices  the large dots   and toll offices  the squares  is shown in fig 2-29  c   if the caller and callee do not have a toll office in common  a path will have to be established between two toll offices the toll offices communicate with each other via high-bandwidth intertoll trunks  also called interoffice trunks   prior to the 1984 breakup of at&t  the u.s telephone system used hierarchical routing to find a path  going to higher levels of the hierarchy until there was a switching office in common this was then replaced with more flexible  nonhierarchical routing figure 2-30 shows how a long-distance connection might be routed telephone end office toll office intermediate switching office  s  end telephone office toll office local loop toll connecting trunk very high bandwidth intertoll trunks toll connecting trunk local loop figure 2-30 a typical circuit route for a long-distance call a variety of transmission media are used for telecommunication unlike modern office buildings  where the wiring is commonly category 5  local loops to homes mostly consist of category 3 twisted pairs  with fiber just starting to appear between switching offices  coaxial cables  microwaves  and especially fiber optics are widely used in the past  transmission throughout the telephone system was analog  with the actual voice signal being transmitted as an electrical voltage from source to destination with the advent of fiber optics  digital electronics  and computers  all the trunks and switches are now digital  leaving the local loop as the last piece of 142 the physical layer chap 2 analog technology in the system digital transmission is preferred because it is not necessary to accurately reproduce an analog waveform after it has passed through many amplifiers on a long call being able to correctly distinguish a 0 from a 1 is enough this property makes digital transmission more reliable than analog it is also cheaper and easier to maintain in summary  the telephone system consists of three major components  1 local loops  analog twisted pairs going to houses and businesses   2 trunks  digital fiber optic links connecting the switching offices   3 switching offices  where calls are moved from one trunk to another   after a short digression on the politics of telephones  we will come back to each of these three components in some detail the local loops provide everyone access to the whole system  so they are critical unfortunately  they are also the weakest link in the system for the long-haul trunks  the main issue is how to collect multiple calls together and send them out over the same fiber this calls for multiplexing  and we apply fdm and tdm to do it finally  there are two fundamentally different ways of doing switching ; we will look at both 2.6.2 the politics of telephones for decades prior to 1984  the bell system provided both local and long-distance service throughout most of the united states in the 1970s  the u.s federal government came to believe that this was an illegal monopoly and sued to break it up the government won  and on january 1  1984  at&t was broken up into at&t long lines  23 bocs  bell operating companies   and a few other pieces the 23 bocs were grouped into seven regional bocs  rbocs  to make them economically viable the entire nature of telecommunication in the united states was changed overnight by court order  not by an act of congress   the exact specifications of the divestiture were described in the so-called mfj  modified final judgment   an oxymoron if ever there was one ? if the judgment could be modified  it clearly was not final this event led to increased competition  better service  and lower long-distance rates for consumers and businesses however  prices for local service rose as the cross subsidies from longdistance calling were eliminated and local service had to become self supporting many other countries have now introduced competition along similar lines of direct relevance to our studies is that the new competitive framework caused a key technical feature to be added to the architecture of the telephone network to make it clear who could do what  the united states was divided up into 164 latas  local access and transport areas   very roughly  a lata is about as big as the area covered by one area code within each lata  there was one lec  local exchange carrier  with a monopoly on traditional telephone sec 2.6 the public switched telephone network 143 service within its area the most important lecs were the bocs  although some latas contained one or more of the 1500 independent telephone companies operating as lecs the new feature was that all inter-lata traffic was handled by a different kind of company  an ixc  interexchange carrier   originally  at&t long lines was the only serious ixc  but now there are well-established competitors such as verizon and sprint in the ixc business one of the concerns at the breakup was to ensure that all the ixcs would be treated equally in terms of line quality  tariffs  and the number of digits their customers would have to dial to use them the way this is handled is illustrated in fig 2-31 here we see three example latas  each with several end offices latas 2 and 3 also have a small hierarchy with tandem offices  intra-lata toll offices   1 2 to local loops ixc # 1 ? s toll office ixc # 2 ? s toll office ixc pop tandem office end office lata 1 lata 2 lata 3 1 2 1 2 1 2 figure 2-31 the relationship of latas  lecs  and ixcs all the circles are lec switching offices each hexagon belongs to the ixc whose number is in it any ixc that wishes to handle calls originating in a lata can build a switching office called a pop  point of presence  there the lec is required to connect each ixc to every end office  either directly  as in latas 1 and 3  or indirectly  as in lata 2 furthermore  the terms of the connection  both technical and financial  must be identical for all ixcs this requirement enables  a subscriber in  say  lata 1  to choose which ixc to use for calling subscribers in lata 3 as part of the mfj  the ixcs were forbidden to offer local telephone service and the lecs were forbidden to offer inter-lata telephone service  although 144 the physical layer chap 2 both were free to enter any other business  such as operating fried chicken restaurants in 1984  that was a fairly unambiguous statement unfortunately  technology has a funny way of making the law obsolete neither cable television nor mobile phones were covered by the agreement as cable television went from one way to two way and mobile phones exploded in popularity  both lecs and ixcs began buying up or merging with cable and mobile operators by 1995  congress saw that trying to maintain a distinction between the various kinds of companies was no longer tenable and drafted a bill to preserve accessibility for competition but allow cable tv companies  local telephone companies  long-distance carriers  and mobile operators to enter one another ? s businesses the idea was that any company could then offer its customers a single integrated package containing cable tv  telephone  and information services and that different companies would compete on service and price the bill was enacted into law in february 1996 as a major overhaul of telecommunications regulation as a result  some bocs became ixcs and some other companies  such as cable television operators  began offering local telephone service in competition with the lecs one interesting property of the 1996 law is the requirement that lecs implement local number portability this means that a customer can change local telephone companies without having to get a new telephone number portability for mobile phone numbers  and between fixed and mobile lines  followed suit in 2003 these provisions removed a huge hurdle for many people  making them much more inclined to switch lecs as a result  the u.s telecommunications landscape became much more competitive  and other countries have followed suit often other countries wait to see how this kind of experiment works out in the u.s if it works well  they do the same thing ; if it works badly  they try something else 2.6.3 the local loop  modems  adsl  and fiber it is now time to start our detailed study of how the telephone system works let us begin with the part that most people are familiar with  the two-wire local loop coming from a telephone company end office into houses the local loop is also frequently referred to as the ? ? last mile  ? ? although the length can be up to several miles it has carried analog information for over 100 years and is likely to continue doing so for some years to come  due to the high cost of converting to digital much effort has been devoted to squeezing data networking out of the copper local loops that are already deployed telephone modems send digital data between computers over the narrow channel the telephone network provides for a voice call they were once widely used  but have been largely displaced by broadband technologies such as adsl that reuse the local loop to send digital data from a customer to the end office  where they are siphoned off to the internet sec 2.6 the public switched telephone network 145 both modems and adsl must deal with the limitations of old local loops  relatively narrow bandwidth  attenuation and distortion of signals  and susceptibility to electrical noise such as crosstalk in some places  the local loop has been modernized by installing optical fiber to  or very close to  the home fiber is the way of the future these installations support computer networks from the ground up  with the local loop having ample bandwidth for data services the limiting factor is what people will pay  not the physics of the local loop in this section we will study the local loop  both old and new we will cover telephone modems  adsl  and fiber to the home telephone modems to send bits over the local loop  or any other physical channel for that matter  they must be converted to analog signals that can be transmitted over the channel this conversion is accomplished using the methods for digital modulation that we studied in the previous section at the other end of the channel  the analog signal is converted back to bits a device that converts between a stream of digital bits and an analog signal that represents the bits is called a modem  which is short for ? ? modulator demodulator ? ? modems come in many varieties  telephone modems  dsl modems  cable modems  wireless modems  etc the modem may be built into the computer  which is now common for telephone modems  or be a separate box  which is common for dsl and cable modems   logically  the modem is inserted between the  digital  computer and the  analog  telephone system  as seen in fig 2-32 end office modem codec computer local loop  analog  trunk  digital  fiber  digital line analog line codec modem isp 1 isp 2 figure 2-32 the use of both analog and digital transmission for a computerto computer call conversion is done by the modems and codecs telephone modems are used to send bits between two computers over a voice-grade telephone line  in place of the conversation that usually fills the line the main difficulty in doing so is that a voice-grade telephone line is limited to 3100 hz  about what is sufficient to carry a conversation this bandwidth is more than four orders of magnitude less than the bandwidth that is used for ethernet or 146 the physical layer chap 2 802.11  wifi   unsurprisingly  the data rates of telephone modems are also four orders of magnitude less than that of ethernet and 802.11 let us run the numbers to see why this is the case the nyquist theorem tells us that even with a perfect 3000-hz line  which a telephone line is decidedly not   there is no point in sending symbols at a rate faster than 6000 baud in practice  most modems send at a rate of 2400 symbols/sec  or 2400 baud  and focus on getting multiple bits per symbol while allowing traffic in both directions at the same time  by using different frequencies for different directions   the humble 2400-bps modem uses 0 volts for a logical 0 and 1 volt for a logical 1  with 1 bit per symbol one step up  it can use four different symbols  as in the four phases of qpsk  so with 2 bits/symbol it can get a data rate of 4800 bps a long progression of higher rates has been achieved as technology has improved higher rates require a larger set of symbols or constellation with many symbols  even a small amount of noise in the detected amplitude or phase can result in an error to reduce the chance of errors  standards for the higher-speed modems use some of the symbols for error correction the schemes are known as tcm  trellis coded modulation   ungerboeck  1987   the v.32 modem standard uses 32 constellation points to transmit 4 data bits and 1 check bit per symbol at 2400 baud to achieve 9600 bps with error correction the next step above 9600 bps is 14,400 bps it is called v.32 bis and transmits 6 data bits and 1 check bit per symbol at 2400 baud then comes v.34  which achieves 28,800 bps by transmitting 12 data bits/symbol at 2400 baud the constellation now has thousands of points the final modem in this series is v.34 bis which uses 14 data bits/symbol at 2400 baud to achieve 33,600 bps why stop here ? the reason that standard modems stop at 33,600 is that the shannon limit for the telephone system is about 35 kbps based on the average length of local loops and the quality of these lines going faster than this would violate the laws of physics  department of thermodynamics   however  there is one way we can change the situation at the telephone company end office  the data are converted to digital form for transmission within the telephone network  the core of the telephone network converted from analog to digital long ago   the 35-kbps limit is for the situation in which there are two local loops  one at each end each of these adds noise to the signal if we could get rid of one of these local loops  we would increase the snr and the maximum rate would be doubled this approach is how 56-kbps modems are made to work one end  typically an isp  gets a high-quality digital feed from the nearest end office thus  when one end of the connection is a high-quality signal  as it is with most isps now  the maximum data rate can be as high as 70 kbps between two home users with modems and analog lines  the maximum is still 33.6 kbps the reason that 56-kbps modems  rather than 70-kbps modems  are in use has to do with the nyquist theorem a telephone channel is carried inside the telephone system as digital samples each telephone channel is 4000 hz wide when sec 2.6 the public switched telephone network 147 the guard bands are included the number of samples per second needed to reconstruct it is thus 8000 the number of bits per sample in the u.s is 8  one of which may be used for control purposes  allowing 56,000 bits/sec of user data in europe  all 8 bits are available to users  so 64,000-bit/sec modems could have been used  but to get international agreement on a standard  56,000 was chosen the end result is the v.90 and v.92 modem standards they provide for a 56-kbps downstream channel  isp to user  and a 33.6-kbps and 48-kbps upstream channel  user to isp   respectively the asymmetry is because there is usually more data transported from the isp to the user than the other way it also means that more of the limited bandwidth can be allocated to the downstream channel to increase the chances of it actually working at 56 kbps digital subscriber lines when the telephone industry finally got to 56 kbps  it patted itself on the back for a job well done meanwhile  the cable tv industry was offering speeds up to 10 mbps on shared cables as internet access became an increasingly important part of their business  the telephone companies  lecs  began to realize they needed a more competitive product their answer was to offer new digital services over the local loop initially  there were many overlapping high-speed offerings  all under the general name of xdsl  digital subscriber line   for various x services with more bandwidth than standard telephone service are sometimes called broadband  although the term really is more of a marketing concept than a specific technical concept later  we will discuss what has become the most popular of these services  adsl  asymmetric dsl   we will also use the term dsl or xdsl as shorthand for all flavors the reason that modems are so slow is that telephones were invented for carrying the human voice and the entire system has been carefully optimized for this purpose data have always been stepchildren at the point where each local loop terminates in the end office  the wire runs through a filter that attenuates all frequencies below 300 hz and above 3400 hz the cutoff is not sharp ? 300 hz and 3400 hz are the 3-db points ? so the bandwidth is usually quoted as 4000 hz even though the distance between the 3 db points is 3100 hz data on the wire are thus also restricted to this narrow band the trick that makes xdsl work is that when a customer subscribes to it  the incoming line is connected to a different kind of switch  one that does not have this filter  thus making the entire capacity of the local loop available the limiting factor then becomes the physics of the local loop  which supports roughly 1 mhz  not the artificial 3100 hz bandwidth created by the filter unfortunately  the capacity of the local loop falls rather quickly with distance from the end office as the signal is increasingly degraded along the wire it also depends on the thickness and general quality of the twisted pair a plot of the 148 the physical layer chap 2 potential bandwidth as a function of distance is given in fig 2-33 this figure assumes that all the other factors are optimal  new wires  modest bundles  etc   50 40 20 30 10 0 0 1000 2000 3000 4000 meters 5000 6000 mbps figure 2-33 bandwidth versus distance over category 3 utp for dsl the implication of this figure creates a problem for the telephone company when it picks a speed to offer  it is simultaneously picking a radius from its end offices beyond which the service can not be offered this means that when distant customers try to sign up for the service  they may be told ? ? thanks a lot for your interest  but you live 100 meters too far from the nearest end office to get this service could you please move ? ? ? the lower the chosen speed is  the larger the radius and the more customers are covered but the lower the speed  the less attractive the service is and the fewer the people who will be willing to pay for it this is where business meets technology the xdsl services have all been designed with certain goals in mind first  the services must work over the existing category 3 twisted pair local loops second  they must not affect customers ? existing telephones and fax machines third  they must be much faster than 56 kbps fourth  they should be always on  with just a monthly charge and no per-minute charge to meet the technical goals  the available 1.1 mhz spectrum on the local loop is divided into 256 independent channels of 4312.5 hz each this arrangement is shown in fig 2-34 the ofdm scheme  which we saw in the previous section  is used to send data over these channels  though it is often called dmt  discrete multitone  in the context of adsl channel 0 is used for pots  plain old telephone service   channels 1 ? 5 are not used  to keep the voice and data signals from interfering with each other of the remaining 250 channels  one is used for upstream control and one is used for downstream control the rest are available for user data in principle  each of the remaining channels can be used for a full-duplex data stream  but harmonics  crosstalk  and other effects keep practical systems well sec 2.6 the public switched telephone network 149 power voice upstream downstream 256 4-khz channels 0 25 1100 khz figure 2-34 operation of adsl using discrete multitone modulation below the theoretical limit it is up to the provider to determine how many channels are used for upstream and how many for downstream a 50/50 mix of upstream and downstream is technically possible  but most providers allocate something like 80 ? 90 % of the bandwidth to the downstream channel since most users download more data than they upload this choice gives rise to the ? ? a ? ? in adsl a common split is 32 channels for upstream and the rest downstream it is also possible to have a few of the highest upstream channels be bidirectional for increased bandwidth  although making this optimization requires adding a special circuit to cancel echoes the international adsl standard  known as g.dmt  was approved in 1999 it allows speeds of as much as 8 mbps downstream and 1 mbps upstream it was superseded by a second generation in 2002  called adsl2  with various improvements to allow speeds of as much as 12 mbps downstream and 1 mbps upstream now we have adsl2 +  which doubles the downstream speed to 24 mbps by doubling the bandwidth to use 2.2 mhz over the twisted pair however  the numbers quoted here are best-case speeds for good lines close  within 1 to 2 km  to the exchange few lines support these rates  and few providers offer these speeds typically  providers offer something like 1 mbps downstream and 256 kbps upstream  standard service   4 mbps downstream and 1 mbps upstream  improved service   and 8 mbps downstream and 2 mbps upstream  premium service   within each channel  qam modulation is used at a rate of roughly 4000 symbols/sec the line quality in each channel is constantly monitored and the data rate is adjusted by using a larger or smaller constellation  like those in fig 2-23 different channels may have different data rates  with up to 15 bits per symbol sent on a channel with a high snr  and down to 2  1  or no bits per symbol sent on a channel with a low snr depending on the standard a typical adsl arrangement is shown in fig 2-35 in this scheme  a telephone company technician must install a nid  network interface device  on the customer ? s premises this small plastic box marks the end of the telephone company ? s property and the start of the customer ? s property close to the nid  or sometimes combined with it  is a splitter  an analog filter that separates the 150 the physical layer chap 2 0 ? 4000-hz band used by pots from the data the pots signal is routed to the existing telephone or fax machine the data signal is routed to an adsl modem  which uses digital signal processing to implement ofdm since most adsl modems are external  the computer must be connected to them at high speed usually  this is done using ethernet  a usb cable  or 802.11 dslam splitter codec splitter telephone to isp adsl modem ethernet computer telephone line telephone company end office customer premises voice switch nid figure 2-35 a typical adsl equipment configuration at the other end of the wire  on the end office side  a corresponding splitter is installed here  the voice portion of the signal is filtered out and sent to the normal voice switch the signal above 26 khz is routed to a new kind of device called a dslam  digital subscriber line access multiplexer   which contains the same kind of digital signal processor as the adsl modem once the bits have been recovered from the signal  packets are formed and sent off to the isp this complete separation between the voice system and adsl makes it relatively easy for a telephone company to deploy adsl all that is needed is buying a dslam and splitter and attaching the adsl subscribers to the splitter other high-bandwidth services  e.g  isdn  require much greater changes to the existing switching equipment one disadvantage of the design of fig 2-35 is the need for a nid and splitter on the customer ? s premises installing these can only be done by a telephone company technician  necessitating an expensive ? ? truck roll ? ?  i.e  sending a technician to the customer ? s premises   therefore  an alternative  splitterless design  informally called g.lite  has also been standardized it is the same as fig 2-35 but without the customer ? s splitter the existing telephone line is used as is the only difference is that a microfilter has to be inserted into each telephone jack sec 2.6 the public switched telephone network 151 between the telephone or adsl modem and the wire the microfilter for the telephone is a low-pass filter eliminating frequencies above 3400 hz ; the microfilter for the adsl modem is a high-pass filter eliminating frequencies below 26 khz however  this system is not as reliable as having a splitter  so g.lite can be used only up to 1.5 mbps  versus 8 mbps for adsl with a splitter   for more information about adsl  see starr  2003   fiber to the home deployed copper local loops limit the performance of adsl and telephone modems to let them provide faster and better network services  telephone companies are upgrading local loops at every opportunity by installing optical fiber all the way to houses and offices the result is called ftth  fiber to the home   while ftth technology has been available for some time  deployments only began to take off in 2005 with growth in the demand for high-speed internet from customers used to dsl and cable who wanted to download movies around 4 % of u.s houses are now connected to ftth with internet access speeds of up to 100 mbps several variations of the form ? ? fttx ? ?  where x stands for the basement  curb  or neighborhood  exist they are used to note that the fiber deployment may reach close to the house in this case  copper  twisted pair or coaxial cable  provides fast enough speeds over the last short distance the choice of how far to lay the fiber is an economic one  balancing cost with expected revenue in any case  the point is that optical fiber has crossed the traditional barrier of the ? ? last mile ? ? we will focus on ftth in our discussion like the copper wires before it  the fiber local loop is passive this means no powered equipment is required to amplify or otherwise process signals the fiber simply carries signals between the home and the end office this in turn reduces cost and improves reliability usually  the fibers from the houses are joined together so that only a single fiber reaches the end office per group of up to 100 houses in the downstream direction  optical splitters divide the signal from the end office so that it reaches all the houses encryption is needed for security if only one house should be able to decode the signal in the upstream direction  optical combiners merge the signals from the houses into a single signal that is received at the end office this architecture is called a pon  passive optical network   and it is shown in fig 2-36 it is common to use one wavelength shared between all the houses for downstream transmission  and another wavelength for upstream transmission even with the splitting  the tremendous bandwidth and low attenuation of fiber mean that pons can provide high rates to users over distances of up to 20 km the actual data rates and other details depend on the type of pon two kinds are common gpons  gigabit-capable pons  come from the world of telecommunications  so they are defined by an itu standard epons  ethernet pons  152 the physical layer chap 2 fiber optical end office splitter/combiner rest of network figure 2-36 passive optical network for fiber to the home are more in tune with the world of networking  so they are defined by an ieee standard both run at around a gigabit and can carry traffic for different services  including internet  video  and voice for example  gpons provide 2.4 gbps downstream and 1.2 or 2.4 gbps upstream some protocol is needed to share the capacity of the single fiber at the end office between the different houses the downstream direction is easy the end office can send messages to each different house in whatever order it likes in the upstream direction  however  messages from different houses can not be sent at the same time  or different signals would collide the houses also can not hear each other ? s transmissions so they can not listen before transmitting the solution is that equipment at the houses requests and is granted time slots to use by equipment in the end office for this to work  there is a ranging process to adjust the transmission times from the houses so that all the signals received at the end office are synchronized the design is similar to cable modems  which we cover later in this chapter for more information on the future of pons  see grobe and elbers  2008   2.6.4 trunks and multiplexing trunks in the telephone network are not only much faster than the local loops  they are different in two other respects the core of the telephone network carries digital information  not analog information ; that is  bits not voice this necessitates a conversion at the end office to digital form for transmission over the longhaul trunks the trunks carry thousands  even millions  of calls simultaneously this sharing is important for achieving economies of scale  since it costs essentially the same amount of money to install and maintain a high-bandwidth trunk as a low-bandwidth trunk between two switching offices it is accomplished with versions of tdm and fdm multiplexing below we will briefly examine how voice signals are digitized so that they can be transported by the telephone network after that  we will see how tdm is used to carry bits on trunks  including the tdm system used for fiber optics sec 2.6 the public switched telephone network 153  sonet   then we will turn to fdm as it is applied to fiber optics  which is called wavelength division multiplexing digitizing voice signals early in the development of the telephone network  the core handled voice calls as analog information fdm techniques were used for many years to multiplex 4000-hz voice channels  comprised of 3100 hz plus guard bands  into larger and larger units for example  12 calls in the 60 khz ? to ? 108 khz band is known as a group and five groups  a total of 60 calls  are known as a supergroup  and so on these fdm methods are still used over some copper wires and microwave channels however  fdm requires analog circuitry and is not amenable to being done by a computer in contrast  tdm can be handled entirely by digital electronics  so it has become far more widespread in recent years since tdm can only be used for digital data and the local loops produce analog signals  a conversion is needed from analog to digital in the end office  where all the individual local loops come together to be combined onto outgoing trunks the analog signals are digitized in the end office by a device called a codec  short for ? ? coder-decoder ? ?   the codec makes 8000 samples per second  125 ? sec/sample  because the nyquist theorem says that this is sufficient to capture all the information from the 4-khz telephone channel bandwidth at a lower sampling rate  information would be lost ; at a higher one  no extra information would be gained each sample of the amplitude of the signal is quantized to an 8-bit number this technique is called pcm  pulse code modulation   it forms the heart of the modern telephone system as a consequence  virtually all time intervals within the telephone system are multiples of 125 ? sec the standard uncompressed data rate for a voice-grade telephone call is thus 8 bits every 125 ? sec  or 64 kbps at the other end of the call  an analog signal is recreated from the quantized samples by playing them out  and smoothing them  over time it will not be exactly the same as the original analog signal  even though we sampled at the nyquist rate  because the samples were quantized to reduce the error due to quantization  the quantization levels are unevenly spaced a logarithmic scale is used that gives relatively more bits to smaller signal amplitudes and relatively fewer bits to large signal amplitudes in this way the error is proportional to the signal amplitude two versions of quantization are widely used  ? -law  used in north america and japan  and a-law  used in europe and the rest of the world both versions are specified in standard itu g.711 an equivalent way to think about this process is to imagine that the dynamic range of the signal  or the ratio between the largest and smallest possible values  is compressed before it is  evenly  quantized  and then expanded when the analog signal is recreated for this reason it is called 154 the physical layer chap 2 companding it is also possible to compress the samples after they are digitized so that they require much less than 64 kbps however  we will leave this topic for when we explore audio applications such as voice over ip time division multiplexing tdm based on pcm is used to carry multiple voice calls over trunks by sending a sample from each call every 125 ? sec when digital transmission began emerging as a feasible technology  itu  then called ccitt  was unable to reach agreement on an international standard for pcm consequently  a variety of incompatible schemes are now in use in different countries around the world the method used in north america and japan is the t1 carrier  depicted in fig 2-37  technically speaking  the format is called ds1 and the carrier is called t1  but following widespread industry tradition  we will not make that subtle distinction here  the t1 carrier consists of 24 voice channels multiplexed together each of the 24 channels  in turn  gets to insert 8 bits into the output stream channel 1 channel 2 channel 3 channel 4 channel 24 193-bit frame  125 ? sec  7 data bits per channel per sample bit 1 is a framing code bit 8 is for signaling 0 1 figure 2-37 the t1 carrier  1.544 mbps   a frame consists of 24 ? ? 8 = 192 bits plus one extra bit for control purposes  yielding 193 bits every 125 ? sec this gives a gross data rate of 1.544 mbps  of which 8 kbps is for signaling the 193rd bit is used for frame synchronization and signaling in one variation  the 193rd bit is used across a group of 24 frames called an extended superframe six of the bits  in the 4th  8th  12th  16th  20th  and 24th positions  take on the alternating pattern 001011     normally  the receiver keeps checking for this pattern to make sure that it has not lost synchronization six more bits are used to send an error check code to help the receiver confirm that it is synchronized if it does get out of sync  the receiver can scan for the pattern and validate the error check code to get resynchronized the remaining 12 sec 2.6 the public switched telephone network 155 bits are used for control information for operating and maintaining the network  such as performance reporting from the remote end the t1 format has several variations the earlier versions sent signaling information in-band  meaning in the same channel as the data  by using some of the data bits this design is one form of channel-associated signaling  because each channel has its own private signaling subchannel in one arrangement  the least significant bit out of an 8-bit sample on each channel is used in every sixth frame it has the colorful name of robbed-bit signaling the idea is that a few stolen bits will not matter for voice calls no one will hear the difference for data  however  it is another story delivering the wrong bits is unhelpful  to say the least if older versions of t1 are used to carry data  only 7 of 8 bits  or 56 kbps can be used in each of the 24 channels instead  newer versions of t1 provide clear channels in which all of the bits may be used to send data clear channels are what businesses who lease a t1 line want when they send data across the telephone network in place of voice samples signaling for any voice calls is then handled out-of-band  meaning in a separate channel from the data often  the signaling is done with common-channel signaling in which there is a shared signaling channel one of the 24 channels may be used for this purpose outside north america and japan  the 2.048-mbps e1 carrier is used instead of t1 this carrier has 32 8-bit data samples packed into the basic 125 ? sec frame thirty of the channels are used for information and up to two are used for signaling each group of four frames provides 64 signaling bits  half of which are used for signaling  whether channel-associated or common-channel  and half of which are used for frame synchronization or are reserved for each country to use as it wishes time division multiplexing allows multiple t1 carriers to be multiplexed into higher-order carriers figure 2-38 shows how this can be done at the left we see four t1 channels being multiplexed into one t2 channel the multiplexing at t2 and above is done bit for bit  rather than byte for byte with the 24 voice channels that make up a t1 frame four t1 streams at 1.544 mbps should generate 6.176 mbps  but t2 is actually 6.312 mbps the extra bits are used for framing and recovery in case the carrier slips t1 and t3 are widely used by customers  whereas t2 and t4 are only used within the telephone system itself  so they are not well known at the next level  seven t2 streams are combined bitwise to form a t3 stream then six t3 streams are joined to form a t4 stream at each step a small amount of overhead is added for framing and recovery in case the synchronization between sender and receiver is lost just as there is little agreement on the basic carrier between the united states and the rest of the world  there is equally little agreement on how it is to be multiplexed into higher-bandwidth carriers the u.s scheme of stepping up by 4  7  and 6 did not strike everyone else as the way to go  so the itu standard calls for multiplexing four streams into one stream at each level also  the framing and 156 the physical layer chap 2 6 5 4 3 2 1 0 5 1 4 0 6 2 7 3 4  1 7  1 6  1 4 t1 streams in 1 t2 stream out 6.312 mbps t2 1.544 mbps t1 44.736 mbps t3 274.176 mbps t4 7 t2 streams in 6 t3 streams in figure 2-38 multiplexing t1 streams into higher carriers recovery data are different in the u.s and itu standards the itu hierarchy for 32  128  512  2048  and 8192 channels runs at speeds of 2.048  8.848  34.304  139.264  and 565.148 mbps sonet/sdh in the early days of fiber optics  every telephone company had its own proprietary optical tdm system after at&t was broken up in 1984  local telephone companies had to connect to multiple long-distance carriers  all with different optical tdm systems  so the need for standardization became obvious in 1985  bellcore  the rboc ? s research arm  began working on a standard  called sonet  synchronous optical network   later  itu joined the effort  which resulted in a sonet standard and a set of parallel itu recommendations  g.707  g.708  and g.709  in 1989 the itu recommendations are called sdh  synchronous digital hierarchy  but differ from sonet only in minor ways virtually all the long-distance telephone traffic in the united states  and much of it elsewhere  now uses trunks running sonet in the physical layer for additional information about sonet  see bellamy  2000   goralski  2002   and shepard  2001   the sonet design had four major goals first and foremost  sonet had to make it possible for different carriers to interwork achieving this goal required defining a common signaling standard with respect to wavelength  timing  framing structure  and other issues second  some means was needed to unify the u.s  european  and japanese digital systems  all of which were based on 64-kbps pcm channels but combined them in different  and incompatible  ways third  sonet had to provide a way to multiplex multiple digital channels at the time sonet was devised  the highest-speed digital carrier actually used widely in the united states was t3  at 44.736 mbps t4 was defined  but not used sec 2.6 the public switched telephone network 157 much  and nothing was even defined above t4 speed part of sonet ? s mission was to continue the hierarchy to gigabits/sec and beyond a standard way to multiplex slower channels into one sonet channel was also needed fourth  sonet had to provide support for operations  administration  and maintenance  oam   which are needed to manage the network previous systems did not do this very well an early decision was to make sonet a traditional tdm system  with the entire bandwidth of the fiber devoted to one channel containing time slots for the various subchannels as such  sonet is a synchronous system each sender and receiver is tied to a common clock the master clock that controls the system has an accuracy of about 1 part in 109 bits on a sonet line are sent out at extremely precise intervals  controlled by the master clock the basic sonet frame is a block of 810 bytes put out every 125 ? sec since sonet is synchronous  frames are emitted whether or not there are any useful data to send having 8000 frames/sec exactly matches the sampling rate of the pcm channels used in all digital telephony systems the 810-byte sonet frames are best described as a rectangle of bytes  90 columns wide by 9 rows high thus  8 ? ? 810 ? ? 6480 bits are transmitted 8000 times per second  for a gross data rate of 51.84 mbps this layout is the basic sonet channel  called sts-1  synchronous transport signal-1   all sonet trunks are multiples of sts-1 the first three columns of each frame are reserved for system management information  as illustrated in fig 2-39 in this block  the first three rows contain the section overhead ; the next six contain the line overhead the section overhead is generated and checked at the start and end of each section  whereas the line overhead is generated and checked at the start and end of each line a sonet transmitter sends back-to-back 810-byte frames  without gaps between them  even when there are no data  in which case it sends dummy data   from the receiver ? s point of view  all it sees is a continuous bit stream  so how does it know where each frame begins ? the answer is that the first 2 bytes of each frame contain a fixed pattern that the receiver searches for if it finds this pattern in the same place in a large number of consecutive frames  it assumes that it is in sync with the sender in theory  a user could insert this pattern into the payload in a regular way  but in practice it can not be done due to the multiplexing of multiple users into the same frame and other reasons the remaining 87 columns of each frame hold 87 ? ? 9 ? ? 8 ? ? 8000 ? ? 50.112 mbps of user data this user data could be voice samples  t1 and other carriers swallowed whole  or packets sonet is simply a convenient container for transporting bits the spe  synchronous payload envelope   which carries the user data does not always begin in row 1  column 4 the spe can begin anywhere within the frame a pointer to the first byte is contained in the first row of the line overhead the first column of the spe is the path overhead  i.e  the header for the end-to-end path sublayer protocol   158 the physical layer chap 2 sonet frame  125 ? sec  sonet frame  125 ? sec  9 rows       87 columns 3 columns for overhead section spe overhead line overhead path overhead figure 2-39 two back-to-back sonet frames the ability to allow the spe to begin anywhere within the sonet frame and even to span two frames  as shown in fig 2-39  gives added flexibility to the system for example  if a payload arrives at the source while a dummy sonet frame is being constructed  it can be inserted into the current frame instead of being held until the start of the next one the sonet/sdh multiplexing hierarchy is shown in fig 2-40 rates from sts-1 to sts-768 have been defined  ranging from roughly a t3 line to 40 gbps even higher rates will surely be defined over time  with oc-3072 at 160 gbps being the next in line if and when it becomes technologically feasible the optical carrier corresponding to sts-n is called oc-n but is bit for bit the same except for a certain bit reordering needed for synchronization the sdh names are different  and they start at oc-3 because itu-based systems do not have a rate near 51.84 mbps we have shown the common rates  which proceed from oc-3 in multiples of four the gross data rate includes all the overhead the spe data rate excludes the line and section overhead the user data rate excludes all overhead and counts only the 87 payload columns as an aside  when a carrier  such as oc-3  is not multiplexed  but carries the data from only a single source  the letter c  for concatenated  is appended to the designation  so oc-3 indicates a 155.52-mbps carrier consisting of three separate oc-1 carriers  but oc-3c indicates a data stream from a single source at 155.52 mbps the three oc-1 streams within an oc-3c stream are interleaved by column ? first column 1 from stream 1  then column 1 from stream 2  then column 1 from stream 3  followed by column 2 from stream 1  and so on ? leading to a frame 270 columns wide and 9 rows deep sec 2.6 the public switched telephone network 159 sonet sdh data rate  mbps  electrical optical optical gross spe user sts-1 oc-1 51.84 50.112 49.536 sts-3 oc-3 stm-1 155.52 150.336 148.608 sts-12 oc-12 stm-4 622.08 601.344 594.432 sts-48 oc-48 stm-16 2488.32 2405.376 2377.728 sts-192 oc-192 stm-64 9953.28 9621.504 9510.912 sts-768 oc-768 stm-256 39813.12 38486.016 38043.648 figure 2-40 sonet and sdh multiplex rates wavelength division multiplexing a form of frequency division multiplexing is used as well as tdm to harness the tremendous bandwidth of fiber optic channels it is called wdm  wavelength division multiplexing   the basic principle of wdm on fibers is depicted in fig 2-41 here four fibers come together at an optical combiner  each with its energy present at a different wavelength the four beams are combined onto a single shared fiber for transmission to a distant destination at the far end  the beam is split up over as many fibers as there were on the input side each output fiber contains a short  specially constructed core that filters out all but one wavelength the resulting signals can be routed to their destination or recombined in different ways for additional multiplexed transport there is really nothing new here this way of operating is just frequency division multiplexing at very high frequencies  with the term wdm owing to the description of fiber optic channels by their wavelength or ? ? color ? ? rather than frequency as long as each channel has its own frequency  i.e  wavelength  range and all the ranges are disjoint  they can be multiplexed together on the long-haul fiber the only difference with electrical fdm is that an optical system using a diffraction grating is completely passive and thus highly reliable the reason wdm is popular is that the energy on a single channel is typically only a few gigahertz wide because that is the current limit of how fast we can convert between electrical and optical signals by running many channels in parallel on different wavelengths  the aggregate bandwidth is increased linearly with the number of channels since the bandwidth of a single fiber band is about 25,000 ghz  see fig 2-7   there is theoretically room for 2500 10-gbps channels even at 1 bit/hz  and higher rates are also possible   wdm technology has been progressing at a rate that puts computer technology to shame wdm was invented around 1990 the first commercial systems had eight channels of 2.5 gbps per channel by 1998  systems with 40 channels 160 the physical layer chap 2 spectrum on the shared fiber power ? fiber 4 spectrum power ? fiber 3 spectrum power ? fiber 2 spectrum power ? ? 1 ? 1 + ? 2 + ? 3 + ? 4 fiber 1 spectrum power ? fiber 1 ? 2 fiber 2 ? 3 fiber 3 combiner splitter ? 4 long-haul shared fiber ? 2 ? 4 ? 1 fiber 4 ? 3 filter figure 2-41 wavelength division multiplexing of 2.5 gbps were on the market by 2006  there were products with 192 channels of 10 gbps and 64 channels of 40 gbps  capable of moving up to 2.56 tbps this bandwidth is enough to transmit 80 full-length dvd movies per second the channels are also packed tightly on the fiber  with 200  100  or as little as 50 ghz of separation technology demonstrations by companies after bragging rights have shown 10 times this capacity in the lab  but going from the lab to the field usually takes at least a few years when the number of channels is very large and the wavelengths are spaced close together  the system is referred to as dwdm  dense wdm   one of the drivers of wdm technology is the development of all-optical components previously  every 100 km it was necessary to split up all the channels and convert each one to an electrical signal for amplification separately before reconverting them to optical signals and combining them nowadays  all-optical amplifiers can regenerate the entire signal once every 1000 km without the need for multiple opto-electrical conversions in the example of fig 2-41  we have a fixed-wavelength system bits from input fiber 1 go to output fiber 3  bits from input fiber 2 go to output fiber 1  etc however  it is also possible to build wdm systems that are switched in the optical domain in such a device  the output filters are tunable using fabry-perot or mach-zehnder interferometers these devices allow the selected frequencies to be changed dynamically by a control computer this ability provides a large amount of flexibility to provision many different wavelength paths through the telephone network from a fixed set of fibers for more information about optical networks and wdm  see ramaswami et al  2009   sec 2.6 the public switched telephone network 161 2.6.5 switching from the point of view of the average telephone engineer  the phone system is divided into two principal parts  outside plant  the local loops and trunks  since they are physically outside the switching offices  and inside plant  the switches  which are inside the switching offices   we have just looked at the outside plant now it is time to examine the inside plant two different switching techniques are used by the network nowadays  circuit switching and packet switching the traditional telephone system is based on circuit switching  but packet switching is beginning to make inroads with the rise of voice over ip technology we will go into circuit switching in some detail and contrast it with packet switching both kinds of switching are important enough that we will come back to them when we get to the network layer circuit switching conceptually  when you or your computer places a telephone call  the switching equipment within the telephone system seeks out a physical path all the way from your telephone to the receiver ? s telephone this technique is called circuit switching it is shown schematically in fig 2-42  a   each of the six rectangles represents a carrier switching office  end office  toll office  etc   in this example  each office has three incoming lines and three outgoing lines when a call passes through a switching office  a physical connection is  conceptually  established between the line on which the call came in and one of the output lines  as shown by the dotted lines in the early days of the telephone  the connection was made by the operator plugging a jumper cable into the input and output sockets in fact  a surprising little story is associated with the invention of automatic circuit switching equipment it was invented by a 19th-century missouri undertaker named almon b strowger shortly after the telephone was invented  when someone died  one of the survivors would call the town operator and say ? ? please connect me to an undertaker ? ? unfortunately for mr strowger  there were two undertakers in his town  and the other one ? s wife was the town telephone operator he quickly saw that either he was going to have to invent automatic telephone switching equipment or he was going to go out of business he chose the first option for nearly 100 years  the circuit-switching equipment used worldwide was known as strowger gear  history does not record whether the now-unemployed switchboard operator got a job as an information operator  answering questions such as ? ? what is the phone number of an undertaker ? ? ?  the model shown in fig 2-42  a  is highly simplified  of course  because parts of the physical path between the two telephones may  in fact  be microwave or fiber links onto which thousands of calls are multiplexed nevertheless  the basic idea is valid  once a call has been set up  a dedicated path between both ends exists and will continue to exist until the call is finished 162 the physical layer chap 2  a   b  switching office physical  copper  connection set up when call is made packets queued for subsequent transmission computer computer figure 2-42  a  circuit switching  b  packet switching an important property of circuit switching is the need to set up an end-to-end path before any data can be sent the elapsed time between the end of dialing and the start of ringing can easily be 10 sec  more on long-distance or international calls during this time interval  the telephone system is hunting for a path  as shown in fig 2-43  a   note that before data transmission can even begin  the call request signal must propagate all the way to the destination and be acknowledged for many computer applications  e.g  point-of-sale credit verification   long setup times are undesirable as a consequence of the reserved path between the calling parties  once the setup has been completed  the only delay for data is the propagation time for the electromagnetic signal  about 5 msec per 1000 km also as a consequence of the established path  there is no danger of congestion ? that is  once the call has been put through  you never get busy signals of course  you might get one before the connection has been established due to lack of switching or trunk capacity packet switching the alternative to circuit switching is packet switching  shown in fig 2 42  b  and described in chap 1 with this technology  packets are sent as soon as they are available there is no need to set up a dedicated path in advance  unlike sec 2.6 the public switched telephone network 163 call request signal data ab trunk a b c  a  d a b c  b  d bc trunk cd trunk call accept signal propagation delay queuing delay pkt 1 pkt 2 pkt 3 pkt 1 pkt 2 pkt 3 pkt 1 pkt 2 pkt 3 time spent hunting for an outgoing trunk time figure 2-43 timing of events in  a  circuit switching   b  packet switching with circuit switching it is up to routers to use store-and-forward transmission to send each packet on its way to the destination on its own this procedure is unlike circuit switching  in which the result of the connection setup is the reservation of bandwidth all the way from the sender to the receiver all data on the circuit follows this path among other properties  having all the data follow the same path means that it can not arrive out of order with packet switching there is no fixed path  so different packets can follow different paths  depending on network conditions at the time they are sent  and they may arrive out of order packet-switching networks place a tight upper limit on the size of packets this ensures that no user can monopolize any transmission line for very long  e.g  many milliseconds   so that packet-switched networks can handle interactive traffic it also reduces delay since the first packet of a long message can be forwarded before the second one has fully arrived however  the store-and-forward delay of accumulating a packet in the router ? s memory before it is sent on to the 164 the physical layer chap 2 next router exceeds that of circuit switching with circuit switching  the bits just flow through the wire continuously packet and circuit switching also differ in other ways because no bandwidth is reserved with packet switching  packets may have to wait to be forwarded this introduces queuing delay and congestion if many packets are sent at the same time on the other hand  there is no danger of getting a busy signal and being unable to use the network thus  congestion occurs at different times with circuit switching  at setup time  and packet switching  when packets are sent   if a circuit has been reserved for a particular user and there is no traffic  its bandwidth is wasted it can not be used for other traffic packet switching does not waste bandwidth and thus is more efficient from a system perspective understanding this trade-off is crucial for comprehending the difference between circuit switching and packet switching the trade-off is between guaranteed service and wasting resources versus not guaranteeing service and not wasting resources packet switching is more fault tolerant than circuit switching in fact  that is why it was invented if a switch goes down  all of the circuits using it are terminated and no more traffic can be sent on any of them with packet switching  packets can be routed around dead switches a final difference between circuit and packet switching is the charging algorithm with circuit switching  charging has historically been based on distance and time for mobile phones  distance usually does not play a role  except for international calls  and time plays only a coarse role  e.g  a calling plan with 2000 free minutes costs more than one with 1000 free minutes and sometimes nights or weekends are cheap   with packet switching  connect time is not an issue  but the volume of traffic is for home users  isps usually charge a flat monthly rate because it is less work for them and their customers can understand this model  but backbone carriers charge regional networks based on the volume of their traffic the differences are summarized in fig 2-44 traditionally  telephone networks have used circuit switching to provide high-quality telephone calls  and computer networks have used packet switching for simplicity and efficiency however  there are notable exceptions some older computer networks have been circuit switched under the covers  e.g  x.25  and some newer telephone networks use packet switching with voice over ip technology this looks just like a standard telephone call on the outside to users  but inside the network packets of voice data are switched this approach has let upstarts market cheap international calls via calling cards  though perhaps with lower call quality than the incumbents 2.7 the mobile telephone system the traditional telephone system  even if it someday gets multigigabit end-toend fiber  will still not be able to satisfy a growing group of users  people on the go people now expect to make phone calls and to use their phones to check sec 2.7 the mobile telephone system 165 item circuit switched packet switched call setup required not needed dedicated physical path yes no each packet follows the same route yes no packets arrive in order yes no is a switch crash fatal yes no bandwidth available fixed dynamic time of possible congestion at setup time on every packet potentially wasted bandwidth yes no store-and-forward transmission no yes charging per minute per packet figure 2-44 a comparison of circuit-switched and packet-switched networks email and surf the web from airplanes  cars  swimming pools  and while jogging in the park consequently  there is a tremendous amount of interest in wireless telephony in the following sections we will study this topic in some detail the mobile phone system is used for wide area voice and data communication mobile phones  sometimes called cell phones  have gone through three distinct generations  widely called 1g  2g  and 3g the generations are  1 analog voice 2 digital voice 3 digital voice and data  internet  email  etc    mobile phones should not be confused with cordless phones that consist of a base station and a handset sold as a set for use within the home these are never used for networking  so we will not examine them further  although most of our discussion will be about the technology of these systems  it is interesting to note how political and tiny marketing decisions can have a huge impact the first mobile system was devised in the u.s by at&t and mandated for the whole country by the fcc as a result  the entire u.s had a single  analog  system and a mobile phone purchased in california also worked in new york in contrast  when mobile phones came to europe  every country devised its own system  which resulted in a fiasco europe learned from its mistake and when digital came around  the government run ptts got together and standardized on a single system  gsm   so any european mobile phone will work anywhere in europe by then  the u.s had decided that government should not be in the standardization business  so it left digital to the marketplace this decision resulted in different equipment manufacturers producing different kinds of mobile phones as a consequence  in the u.s 166 the physical layer chap 2 two major ? and completely incompatible ? digital mobile phone systems were deployed  as well as other minor systems despite an initial lead by the u.s  mobile phone ownership and usage in europe is now far greater than in the u.s having a single system that works anywhere in europe and with any provider is part of the reason  but there is more a second area where the u.s and europe differed is in the humble matter of phone numbers in the u.s  mobile phones are mixed in with regular  fixed  telephones thus  there is no way for a caller to see if  say   212  234-5678 is a fixed telephone  cheap or free call  or a mobile phone  expensive call   to keep people from getting nervous about placing calls  the telephone companies decided to make the mobile phone owner pay for incoming calls as a consequence  many people hesitated buying a mobile phone for fear of running up a big bill by just receiving calls in europe  mobile phone numbers have a special area code  analogous to 800 and 900 numbers  so they are instantly recognizable consequently  the usual rule of ? ? caller pays ? ? also applies to mobile phones in europe  except for international calls  where costs are split   a third issue that has had a large impact on adoption is the widespread use of prepaid mobile phones in europe  up to 75 % in some areas   these can be purchased in many stores with no more formality than buying a digital camera you pay and you go they are preloaded with a balance of  for example  20 or 50 euros and can be recharged  using a secret pin code  when the balance drops to zero as a consequence  practically every teenager and many small children in europe have  usually prepaid  mobile phones so their parents can locate them  without the danger of the child running up a huge bill if the mobile phone is used only occasionally  its use is essentially free since there is no monthly charge or charge for incoming calls 2.7.1 first-generation  1g  mobile phones  analog voice enough about the politics and marketing aspects of mobile phones now let us look at the technology  starting with the earliest system mobile radiotelephones were used sporadically for maritime and military communication during the early decades of the 20th century in 1946  the first system for car-based telephones was set up in st louis this system used a single large transmitter on top of a tall building and had a single channel  used for both sending and receiving to talk  the user had to push a button that enabled the transmitter and disabled the receiver such systems  known as push-to-talk systems  were installed in several cities beginning in the late 1950s cb radio  taxis  and police cars often use this technology in the 1960s  imts  improved mobile telephone system  was installed it  too  used a high-powered  200-watt  transmitter on top of a hill but it had two frequencies  one for sending and one for receiving  so the push-to-talk button was sec 2.7 the mobile telephone system 167 no longer needed since all communication from the mobile telephones went inbound on a different channel than the outbound signals  the mobile users could not hear each other  unlike the push-to-talk system used in taxis   imts supported 23 channels spread out from 150 mhz to 450 mhz due to the small number of channels  users often had to wait a long time before getting a dial tone also  due to the large power of the hilltop transmitters  adjacent systems had to be several hundred kilometers apart to avoid interference all in all  the limited capacity made the system impractical advanced mobile phone system all that changed with amps  advanced mobile phone system   invented by bell labs and first installed in the united states in 1982 it was also used in england  where it was called tacs  and in japan  where it was called mcs-l1 amps was formally retired in 2008  but we will look at it to understand the context for the 2g and 3g systems that improved on it in all mobile phone systems  a geographic region is divided up into cells  which is why the devices are sometimes called cell phones in amps  the cells are typically 10 to 20 km across ; in digital systems  the cells are smaller each cell uses some set of frequencies not used by any of its neighbors the key idea that gives cellular systems far more capacity than previous systems is the use of relatively small cells and the reuse of transmission frequencies in nearby  but not adjacent  cells whereas an imts system 100 km across can have only one call on each frequency  an amps system might have 100 10-km cells in the same area and be able to have 10 to 15 calls on each frequency  in widely separated cells thus  the cellular design increases the system capacity by at least an order of magnitude  more as the cells get smaller furthermore  smaller cells mean that less power is needed  which leads to smaller and cheaper transmitters and handsets the idea of frequency reuse is illustrated in fig 2-45  a   the cells are normally roughly circular  but they are easier to model as hexagons in fig 2-45  a   the cells are all the same size they are grouped in units of seven cells each letter indicates a group of frequencies notice that for each frequency set  there is a buffer about two cells wide where that frequency is not reused  providing for good separation and low interference finding locations high in the air to place base station antennas is a major issue this problem has led some telecommunication carriers to forge alliances with the roman catholic church  since the latter owns a substantial number of exalted potential antenna sites worldwide  all conveniently under a single management in an area where the number of users has grown to the point that the system is overloaded  the power can be reduced and the overloaded cells split into smaller 168 the physical layer chap 2 g f a b c d e g f a b c d e g f a b c d e  a   b  figure 2-45  a  frequencies are not reused in adjacent cells  b  to add more users  smaller cells can be used microcells to permit more frequency reuse  as shown in fig 2-45  b   telephone companies sometimes create temporary microcells  using portable towers with satellite links at sporting events  rock concerts  and other places where large numbers of mobile users congregate for a few hours at the center of each cell is a base station to which all the telephones in the cell transmit the base station consists of a computer and transmitter/receiver connected to an antenna in a small system  all the base stations are connected to a single device called an msc  mobile switching center  or mtso  mobile telephone switching office   in a larger one  several mscs may be needed  all of which are connected to a second-level msc  and so on the mscs are essentially end offices as in the telephone system  and are in fact connected to at least one telephone system end office the mscs communicate with the base stations  each other  and the pstn using a packet-switching network at any instant  each mobile telephone is logically in one specific cell and under the control of that cell ? s base station when a mobile telephone physically leaves a cell  its base station notices the telephone ? s signal fading away and asks all the surrounding base stations how much power they are getting from it when the answers come back  the base station then transfers ownership to the cell getting the strongest signal ; under most conditions that is the cell where the telephone is now located the telephone is then informed of its new boss  and if a call is in progress  it is asked to switch to a new channel  because the old one is not reused in any of the adjacent cells   this process  called handoff  takes about 300 msec channel assignment is done by the msc  the nerve center of the system the base stations are really just dumb radio relays sec 2.7 the mobile telephone system 169 channels amps uses fdm to separate the channels the system uses 832 full-duplex channels  each consisting of a pair of simplex channels this arrangement is known as fdd  frequency division duplex   the 832 simplex channels from 824 to 849 mhz are used for mobile to base station transmission  and 832 simplex channels from 869 to 894 mhz are used for base station to mobile transmission each of these simplex channels is 30 khz wide the 832 channels are divided into four categories control channels  base to mobile  are used to manage the system paging channels  base to mobile  alert mobile users to calls for them access channels  bidirectional  are used for call setup and channel assignment finally  data channels  bidirectional  carry voice  fax  or data since the same frequencies can not be reused in nearby cells and 21 channels are reserved in each cell for control  the actual number of voice channels available per cell is much smaller than 832  typically about 45 call management each mobile telephone in amps has a 32-bit serial number and a 10-digit telephone number in its programmable read-only memory the telephone number is represented as a 3-digit area code in 10 bits and a 7-digit subscriber number in 24 bits when a phone is switched on  it scans a preprogrammed list of 21 control channels to find the most powerful signal the phone then broadcasts its 32-bit serial number and 34-bit telephone number like all the control information in amps  this packet is sent in digital form  multiple times  and with an error-correcting code  even though the voice channels themselves are analog when the base station hears the announcement  it tells the msc  which records the existence of its new customer and also informs the customer ? s home msc of his current location during normal operation  the mobile telephone reregisters about once every 15 minutes to make a call  a mobile user switches on the phone  enters the number to be called on the keypad  and hits the send button the phone then transmits the number to be called and its own identity on the access channel if a collision occurs there  it tries again later when the base station gets the request  it informs the msc if the caller is a customer of the msc ? s company  or one of its partners   the msc looks for an idle channel for the call if one is found  the channel number is sent back on the control channel the mobile phone then automatically switches to the selected voice channel and waits until the called party picks up the phone incoming calls work differently to start with  all idle phones continuously listen to the paging channel to detect messages directed at them when a call is placed to a mobile phone  either from a fixed phone or another mobile phone   a packet is sent to the callee ? s home msc to find out where it is a packet is then 170 the physical layer chap 2 sent to the base station in its current cell  which sends a broadcast on the paging channel of the form ? ? unit 14  are you there ? ? ? the called phone responds with a ? ? yes ? ? on the access channel the base then says something like  ? ? unit 14  call for you on channel 3 ? ? at this point  the called phone switches to channel 3 and starts making ringing sounds  or playing some melody the owner was given as a birthday present   2.7.2 second-generation  2g  mobile phones  digital voice the first generation of mobile phones was analog ; the second generation is digital switching to digital has several advantages it provides capacity gains by allowing voice signals to be digitized and compressed it improves security by allowing voice and control signals to be encrypted this in turn deters fraud and eavesdropping  whether from intentional scanning or echoes of other calls due to rf propagation finally  it enables new services such as text messaging just as there was no worldwide standardization during the first generation  there was also no worldwide standardization during the second  either several different systems were developed  and three have been widely deployed damps  digital advanced mobile phone system  is a digital version of amps that coexists with amps and uses tdm to place multiple calls on the same frequency channel it is described in international standard is-54 and its successor is-136 gsm  global system for mobile communications  has emerged as the dominant system  and while it was slow to catch on in the u.s it is now used virtually everywhere in the world like d-amps  gsm is based on a mix of fdm and tdm cdma  code division multiple access   described in international standard is-95  is a completely different kind of system and is based on neither fdm mor tdm while cdma has not become the dominant 2g system  its technology has become the basis for 3g systems also  the name pcs  personal communications services  is sometimes used in the marketing literature to indicate a second-generation  i.e  digital  system originally it meant a mobile phone using the 1900 mhz band  but that distinction is rarely made now we will now describe gsm  since it is the dominant 2g system in the next section we will have more to say about cdma when we describe 3g systems gsm ? the global system for mobile communications gsm started life in the 1980s as an effort to produce a single european 2g standard the task was assigned to a telecommunications group called  in french  groupe speciale ? mobile the first gsm systems were deployed starting in 1991 and were a quick success it soon became clear that gsm was going to be more than a european success  with uptake stretching to countries as far away as australia  so gsm was renamed to have a more worldwide appeal sec 2.7 the mobile telephone system 171 gsm and the other mobile phone systems we will study retain from 1g systems a design based on cells  frequency reuse across cells  and mobility with handoffs as subscribers move it is the details that differ here  we will briefly discuss some of the main properties of gsm however  the printed gsm standard is over 5000  sic  pages long a large fraction of this material relates to engineering aspects of the system  especially the design of receivers to handle multipath signal propagation  and synchronizing transmitters and receivers none of this will be even mentioned here fig 2-46 shows that the gsm architecture is similar to the amps architecture  though the components have different names the mobile itself is now divided into the handset and a removable chip with subscriber and account information called a sim card  short for subscriber identity module it is the sim card that activates the handset and contains secrets that let the mobile and the network identify each other and encrypt conversations a sim card can be removed and plugged into a different handset to turn that handset into your mobile as far as the network is concerned vlr msc air interface cell tower and base station sim pstn card handset bsc hlr bsc figure 2-46 gsm mobile network architecture the mobile talks to cell base stations over an air interface that we will describe in a moment the cell base stations are each connected to a bsc  base station controller  that controls the radio resources of cells and handles handoff the bsc in turn is connected to an msc  as in amps  that routes calls and connects to the pstn  public switched telephone network   to be able to route calls  the msc needs to know where mobiles can currently be found it maintains a database of nearby mobiles that are associated with the cells it manages this database is called the vlr  visitor location register   there is also a database in the mobile network that gives the last known location of each mobile it is called the hlr  home location register   this database is used to route incoming calls to the right locations both databases must be kept up to date as mobiles move from cell to cell we will now describe the air interface in some detail gsm runs on a range of frequencies worldwide  including 900  1800  and 1900 mhz more spectrum is allocated than for amps in order to support a much larger number of users gsm 172 the physical layer chap 2 is a frequency division duplex cellular system  like amps that is  each mobile transmits on one frequency and receives on another  higher frequency  55 mhz higher for gsm versus 80 mhz higher for amps   however  unlike with amps  with gsm a single frequency pair is split by time-division multiplexing into time slots in this way it is shared by multiple mobiles to handle multiple mobiles  gsm channels are much wider than the amps channels  200-khz versus 30 khz   one 200-khz channel is shown in fig 2-47 a gsm system operating in the 900-mhz region has 124 pairs of simplex channels each simplex channel is 200 khz wide and supports eight separate connections on it  using time division multiplexing each currently active station is assigned one time slot on one channel pair theoretically  992 channels can be supported in each cell  but many of them are not available  to avoid frequency conflicts with neighboring cells in fig 2-47  the eight shaded time slots all belong to the same connection  four of them in each direction transmitting and receiving does not happen in the same time slot because the gsm radios can not transmit and receive at the same time and it takes time to switch from one to the other if the mobile device assigned to 890.4/935.4 mhz and time slot 2 wanted to transmit to the base station  it would use the lower four shaded slots  and the ones following them in time   putting some data in each slot until all the data had been sent 959.8 mhz 935.4 mhz 935.2 mhz 914.8 mhz 890.4 mhz 890.2 mhz frequency base to mobile mobile to base 124 2 1 124 2 1 channel tdm frame time figure 2-47 gsm uses 124 frequency channels  each of which uses an eightslot tdm system the tdm slots shown in fig 2-47 are part of a complex framing hierarchy each tdm slot has a specific structure  and groups of tdm slots form multiframes  also with a specific structure a simplified version of this hierarchy is shown in fig 2-48 here we can see that each tdm slot consists of a 148-bit data frame that occupies the channel for 577 ? sec  including a 30 ? sec guard time sec 2.7 the mobile telephone system 173 after each slot   each data frame starts and ends with three 0 bits  for frame delineation purposes it also contains two 57-bit information fields  each one having a control bit that indicates whether the following information field is for voice or data between the information fields is a 26-bit sync  training  field that is used by the receiver to synchronize to the sender ? s frame boundaries ctl 0 1 2 3 4 5 6 7 8 9 10 11 13 14 15 16 17 18 19 20 21 22 23 24 32,500-bit multiframe sent in 120 msec 0 1 2 3 4 5 6 7 1250-bit tdm frame sent in 4.615 msec 8.25 ? bit  30 ? sec  guard time reserved for future use 000 information sync information 000 148-bit data frame sent in 547 ? sec bits 3 57 26 57 3 voice/data bit figure 2-48 a portion of the gsm framing structure a data frame is transmitted in 547 ? sec  but a transmitter is only allowed to send one data frame every 4.615 msec  since it is sharing the channel with seven other stations the gross rate of each channel is 270,833 bps  divided among eight users however  as with amps  the overhead eats up a large fraction of the bandwidth  ultimately leaving 24.7 kbps worth of payload per user before error correction after error correction  13 kbps is left for speech while this is substantially less than 64 kbps pcm for uncompressed voice signals in the fixed telephone network  compression on the mobile device can reach these levels with little loss of quality as can be seen from fig 2-48  eight data frames make up a tdm frame and 26 tdm frames make up a 120-msec multiframe of the 26 tdm frames in a multiframe  slot 12 is used for control and slot 25 is reserved for future use  so only 24 are available for user traffic however  in addition to the 26-slot multiframe shown in fig 2-48  a 51-slot multiframe  not shown  is also used some of these slots are used to hold several control channels used to manage the system the broadcast control channel is a continuous stream of output from the base station containing the base station ? s identity and the channel status all mobile stations monitor their signal strength to see when they have moved into a new cell 174 the physical layer chap 2 the dedicated control channel is used for location updating  registration  and call setup in particular  each bsc maintains a database of mobile stations currently under its jurisdiction  the vlr information needed to maintain the vlr is sent on the dedicated control channel finally  there is the common control channel  which is split up into three logical subchannels the first of these subchannels is the paging channel  which the base station uses to announce incoming calls each mobile station monitors it continuously to watch for calls it should answer the second is the random access channel  which allows users to request a slot on the dedicated control channel if two requests collide  they are garbled and have to be retried later using the dedicated control channel slot  the station can set up a call the assigned slot is announced on the third subchannel  the access grant channel finally  gsm differs from amps in how handoff is handled in amps  the msc manages it completely without help from the mobile devices with time slots in gsm  the mobile is neither sending nor receiving most of the time the idle slots are an opportunity for the mobile to measure signal quality to other nearby base stations it does so and sends this information to the bsc the bsc can use it to determine when a mobile is leaving one cell and entering another so it can perform the handoff this design is called maho  mobile assisted handoff   2.7.3 third-generation  3g  mobile phones  digital voice and data the first generation of mobile phones was analog voice  and the second generation was digital voice the third generation of mobile phones  or 3g as it is called  is all about digital voice and data a number of factors are driving the industry first  data traffic already exceeds voice traffic on the fixed network and is growing exponentially  whereas voice traffic is essentially flat many industry experts expect data traffic to dominate voice on mobile devices as well soon second  the telephone  entertainment  and computer industries have all gone digital and are rapidly converging many people are drooling over lightweight  portable devices that act as a telephone  music and video player  email terminal  web interface  gaming machine  and more  all with worldwide wireless connectivity to the internet at high bandwidth apple ? s iphone is a good example of this kind of 3g device with it  people get hooked on wireless data services  and at&t wireless data volumes are rising steeply with the popularity of iphones the trouble is  the iphone uses a 2.5g network  an enhanced 2g network  but not a true 3g network  and there is not enough data capacity to keep users happy 3g mobile telephony is all about providing enough wireless bandwidth to keep these future users happy itu tried to get a bit more specific about this vision starting back around 1992 it issued a blueprint for getting there called imt-2000  where imt stood sec 2.7 the mobile telephone system 175 for international mobile telecommunications the basic services that the imt-2000 network was supposed to provide to its users are  1 high-quality voice transmission 2 messaging  replacing email  fax  sms  chat  etc   3 multimedia  playing music  viewing videos  films  television  etc   4 internet access  web surfing  including pages with audio and video   additional services might be video conferencing  telepresence  group game playing  and m-commerce  waving your telephone at the cashier to pay in a store   furthermore  all these services are supposed to be available worldwide  with automatic connection via a satellite when no terrestrial network can be located   instantly  always on   and with quality of service guarantees itu envisioned a single worldwide technology for imt-2000  so manufacturers could build a single device that could be sold and used anywhere in the world  like cd players and computers and unlike mobile phones and televisions   having a single technology would also make life much simpler for network operators and would encourage more people to use the services format wars  such as the betamax versus vhs battle with videorecorders  are not good for business as it turned out  this was a bit optimistic the number 2000 stood for three things   1  the year it was supposed to go into service   2  the frequency it was supposed to operate at  in mhz   and  3  the bandwidth the service should have  in kbps   it did not make it on any of the three counts nothing was implemented by 2000 itu recommended that all governments reserve spectrum at 2 ghz so devices could roam seamlessly from country to country china reserved the required bandwidth but nobody else did finally  it was recognized that 2 mbps is not currently feasible for users who are too mobile  due to the difficulty of performing handoffs quickly enough   more realistic is 2 mbps for stationary indoor users  which will compete head-on with adsl   384 kbps for people walking  and 144 kbps for connections in cars despite these initial setbacks  much has been accomplished since then several imt proposals were made and  after some winnowing  it came down to two main ones the first one  wcdma  wideband cdma   was proposed by ericsson and was pushed by the european union  which called it umts  universal mobile telecommunications system   the other contender was cdma2000  proposed by qualcomm both of these systems are more similar than different in that they are based on broadband cdma ; wcdma uses 5-mhz channels and cdma2000 uses 1.25 mhz channels if the ericsson and qualcomm engineers were put in a room and told to come to a common design  they probably could find one fairly quickly the trouble is that the real problem is not engineering  but politics  as usual   europe wanted a system that interworked with gsm  whereas the u.s wanted a 176 the physical layer chap 2 system that was compatible with one already widely deployed in the u.s  is-95   each side also supported its local company  ericsson is based in sweden ; qualcomm is in california   finally  ericsson and qualcomm were involved in numerous lawsuits over their respective cdma patents worldwide  10 ? 15 % of mobile subscribers already use 3g technologies in north america and europe  around a third of mobile subscribers are 3g japan was an early adopter and now nearly all mobile phones in japan are 3g these figures include the deployment of both umts and cdma2000  and 3g continues to be one great cauldron of activity as the market shakes out to add to the confusion  umts became a single 3g standard with multiple incompatible options  including cdma2000 this change was an effort to unify the various camps  but it just papers over the technical differences and obscures the focus of ongoing efforts we will use umts to mean wcdma  as distinct from cdma2000 we will focus our discussion on the use of cdma in cellular networks  as it is the distinguishing feature of both systems cdma is neither fdm nor tdm but a kind of mix in which each user sends on the same frequency band at the same time when it was first proposed for cellular systems  the industry gave it approximately the same reaction that columbus first got from queen isabella when he proposed reaching india by sailing in the wrong direction however  through the persistence of a single company  qualcomm  cdma succeeded as a 2g system  is-95  and matured to the point that it became the technical basis for 3g to make cdma work in the mobile phone setting requires more than the basic cdma technique that we described in the previous section specifically  we described synchronous cdma  in which the chip sequences are exactly orthogonal this design works when all users are synchronized on the start time of their chip sequences  as in the case of the base station transmitting to mobiles the base station can transmit the chip sequences starting at the same time so that the signals will be orthogonal and able to be separated however  it is difficult to synchronize the transmissions of independent mobile phones without care  their transmissions would arrive at the base station at different times  with no guarantee of orthogonality to let mobiles send to the base station without synchronization  we want code sequences that are orthogonal to each other at all possible offsets  not simply when they are aligned at the start while it is not possible to find sequences that are exactly orthogonal for this general case  long pseudorandom sequences come close enough they have the property that  with high probability  they have a low cross-correlation with each other at all offsets this means that when one sequence is multiplied by another sequence and summed up to compute the inner product  the result will be small ; it would be zero if they were orthogonal  intuitively  random sequences should always look different from each other multiplying them together should then produce a random signal  which will sum to a small result  this lets a receiver filter unwanted transmissions out of the received signal also  the auto-correlation of sec 2.7 the mobile telephone system 177 pseudorandom sequences is also small  with high probability  except at a zero offset this means that when one sequence is multiplied by a delayed copy of itself and summed  the result will be small  except when the delay is zero  intuitively  a delayed random sequence looks like a different random sequence  and we are back to the cross-correlation case  this lets a receiver lock onto the beginning of the wanted transmission in the received signal the use of pseudorandom sequences lets the base station receive cdma messages from unsynchronized mobiles however  an implicit assumption in our discussion of cdma is that the power levels of all mobiles are the same at the receiver if they are not  a small cross-correlation with a powerful signal might overwhelm a large auto-correlation with a weak signal thus  the transmit power on mobiles must be controlled to minimize interference between competing signals it is this interference that limits the capacity of cdma systems the power levels received at a base station depend on how far away the transmitters are as well as how much power they transmit there may be many mobile stations at varying distances from the base station a good heuristic to equalize the received power is for each mobile station to transmit to the base station at the inverse of the power level it receives from the base station in other words  a mobile station receiving a weak signal from the base station will use more power than one getting a strong signal for more accuracy  the base station also gives each mobile feedback to increase  decrease  or hold steady its transmit power the feedback is frequent  1500 times per second  because good power control is important to minimize interference another improvement over the basic cdma scheme we described earlier is to allow different users to send data at different rates this trick is accomplished naturally in cdma by fixing the rate at which chips are transmitted and assigning users chip sequences of different lengths for example  in wcdma  the chip rate is 3.84 mchips/sec and the spreading codes vary from 4 to 256 chips with a 256 chip code  around 12 kbps is left after error correction  and this capacity is sufficient for a voice call with a 4-chip code  the user data rate is close to 1 mbps intermediate-length codes give intermediate rates ; to get to multiple mbps  the mobile must use more than one 5-mhz channel at once now let us describe the advantages of cdma  given that we have dealt with the problems of getting it to work it has three main advantages first  cdma can improve capacity by taking advantage of small periods when some transmitters are silent in polite voice calls  one party is silent while the other talks on average  the line is busy only 40 % of the time however  the pauses may be small and are difficult to predict with tdm or fdm systems  it is not possible to reassign time slots or frequency channels quickly enough to benefit from these small silences however  in cdma  by simply not transmitting one user lowers the interference for other users  and it is likely that some fraction of users will not be transmitting in a busy cell at any given time thus cdma takes advantage of expected silences to allow a larger number of simultaneous calls 178 the physical layer chap 2 second  with cdma each cell uses the same frequencies unlike gsm and amps  fdm is not needed to separate the transmissions of different users this eliminates complicated frequency planning tasks and improves capacity it also makes it easy for a base station to use multiple directional antennas  or sectored antennas  instead of an omnidirectional antenna directional antennas concentrate a signal in the intended direction and reduce the signal  and hence interference  in other directions this in turn increases capacity three sector designs are common the base station must track the mobile as it moves from sector to sector this tracking is easy with cdma because all frequencies are used in all sectors third  cdma facilitates soft handoff  in which the mobile is acquired by the new base station before the previous one signs off in this way there is no loss of continuity soft handoff is shown in fig 2-49 it is easy with cdma because all frequencies are used in each cell the alternative is a hard handoff  in which the old base station drops the call before the new one acquires it if the new one is unable to acquire it  e.g  because there is no available frequency   the call is disconnected abruptly users tend to notice this  but it is inevitable occasionally with the current design hard handoff is the norm with fdm designs to avoid the cost of having the mobile transmit or receive on two frequencies simultaneously  a   b   c  figure 2-49 soft handoff  a  before   b  during  and  c  after much has been written about 3g  most of it praising it as the greatest thing since sliced bread meanwhile  many operators have taken cautious steps in the direction of 3g by going to what is sometimes called 2.5g  although 2.1g might be more accurate one such system is edge  enhanced data rates for gsm evolution   which is just gsm with more bits per symbol the trouble is  more bits per symbol also means more errors per symbol  so edge has nine different schemes for modulation and error correction  differing in terms of how much of the bandwidth is devoted to fixing the errors introduced by the higher speed edge is one step along an evolutionary path that is defined from gsm to wcdma similarly  there is an evolutionary path defined for operators to upgrade from is-95 to cdma2000 networks even though 3g networks are not fully deployed yet  some researchers regard 3g as a done deal these people are already working on 4g systems under the sec 2.7 the mobile telephone system 179 name of lte  long term evolution   some of the proposed features of 4g include  high bandwidth ; ubiquity  connectivity everywhere  ; seamless integration with other wired and wireless ip networks  including 802.11 access points ; adaptive resource and spectrum management ; and high quality of service for multimedia for more information see astely et al  2009  and larmo et al  2009   meanwhile  wireless networks with 4g levels of performance are already available the main example is 802.16  also known as wimax for an overview of mobile wimax see ahmadi  2009   to say the industry is in a state of flux is a huge understatement check back in a few years to see what has happened 2.8 cable television we have now studied both the fixed and wireless telephone systems in a fair amount of detail both will clearly play a major role in future networks but there is another major player that has emerged over the past decade for internet access  cable television networks many people nowadays get their telephone and internet service over cable in the following sections we will look at cable television as a network in more detail and contrast it with the telephone systems we have just studied some relevant references for more information are donaldson and jones  2001   dutta-roy  2001   and fellows and jones  2001   2.8.1 community antenna television cable television was conceived in the late 1940s as a way to provide better reception to people living in rural or mountainous areas the system initially consisted of a big antenna on top of a hill to pluck the television signal out of the air  an amplifier  called the headend  to strengthen it  and a coaxial cable to deliver it to people ? s houses  as illustrated in fig 2-50 tap coaxial cable drop cable headend antenna for picking up distant signals figure 2-50 an early cable television system in the early years  cable television was called community antenna television it was very much a mom-and-pop operation ; anyone handy with electronics 180 the physical layer chap 2 could set up a service for his town  and the users would chip in to pay the costs as the number of subscribers grew  additional cables were spliced onto the original cable and amplifiers were added as needed transmission was one way  from the headend to the users by 1970  thousands of independent systems existed in 1974  time inc started a new channel  home box office  with new content  movies  distributed only on cable other cable-only channels followed  focusing on news  sports  cooking  and many other topics this development gave rise to two changes in the industry first  large corporations began buying up existing cable systems and laying new cable to acquire new subscribers second  there was now a need to connect multiple systems  often in distant cities  in order to distribute the new cable channels the cable companies began to lay cable between the cities to connect them all into a single system this pattern was analogous to what happened in the telephone industry 80 years earlier with the connection of previously isolated end offices to make long-distance calling possible 2.8.2 internet over cable over the course of the years the cable system grew and the cables between the various cities were replaced by high-bandwidth fiber  similar to what happened in the telephone system a system with fiber for the long-haul runs and coaxial cable to the houses is called an hfc  hybrid fiber coax  system the electrooptical converters that interface between the optical and electrical parts of the system are called fiber nodes because the bandwidth of fiber is so much greater than that of coax  a fiber node can feed multiple coaxial cables part of a modern hfc system is shown in fig 2-51  a   over the past decade  many cable operators decided to get into the internet access business  and often the telephony business as well technical differences between the cable plant and telephone plant had an effect on what had to be done to achieve these goals for one thing  all the one-way amplifiers in the system had to be replaced by two-way amplifiers to support upstream as well as downstream transmissions while this was happening  early internet over cable systems used the cable television network for downstream transmissions and a dialup connection via the telephone network for upstream transmissions it was a clever workaround  but not much of a network compared to what it could be however  there is another difference between the hfc system of fig 2-51  a  and the telephone system of fig 2-51  b  that is much harder to remove down in the neighborhoods  a single cable is shared by many houses  whereas in the telephone system  every house has its own private local loop when used for television broadcasting  this sharing is a natural fit all the programs are broadcast on the cable and it does not matter whether there are 10 viewers or 10,000 viewers when the same cable is used for internet access  however  it matters a lot if there are 10 users or 10,000 if one user decides to download a very large file  that bandwidth is potentially being taken away from other users the more users there sec 2.8 cable television 181 copper twisted pair switch toll office headend high-bandwidth fiber trunk end office local loop  a   b  house high-bandwidth fiber trunk coaxial cable house tap fiber node fiber fiber figure 2-51  a  cable television  b  the fixed telephone system are  the more competition there is for bandwidth the telephone system does not have this particular property  downloading a large file over an adsl line does not reduce your neighbor ? s bandwidth on the other hand  the bandwidth of coax is much higher than that of twisted pairs  so you can get lucky if your neighbors do not use the internet much the way the cable industry has tackled this problem is to split up long cables and connect each one directly to a fiber node the bandwidth from the headend to each fiber node is effectively infinite  so as long as there are not too many subscribers on each cable segment  the amount of traffic is manageable typical 182 the physical layer chap 2 cables nowadays have 500 ? 2000 houses  but as more and more people subscribe to internet over cable  the load may become too great  requiring more splitting and more fiber nodes 2.8.3 spectrum allocation throwing off all the tv channels and using the cable infrastructure strictly for internet access would probably generate a fair number of irate customers  so cable companies are hesitant to do this furthermore  most cities heavily regulate what is on the cable  so the cable operators would not be allowed to do this even if they really wanted to as a consequence  they needed to find a way to have television and internet peacefully coexist on the same cable the solution is to build on frequency division multiplexing cable television channels in north america occupy the 54 ? 550 mhz region  except for fm radio  from 88 to 108 mhz   these channels are 6-mhz wide  including guard bands  and can carry one traditional analog television channel or several digital television channels in europe the low end is usually 65 mhz and the channels are 6 ? 8 mhz wide for the higher resolution required by pal and secam  but otherwise the allocation scheme is similar the low part of the band is not used modern cables can also operate well above 550 mhz  often at up to 750 mhz or more the solution chosen was to introduce upstream channels in the 5 ? 42 mhz band  slightly higher in europe  and use the frequencies at the high end for the downstream signals the cable spectrum is illustrated in fig 2-52 0 108 tv tv downstream data downstream frequencies upstream data upstream frequencies fm 550 750 mhz 5 4254 88 figure 2-52 frequency allocation in a typical cable tv system used for internet access note that since the television signals are all downstream  it is possible to use upstream amplifiers that work only in the 5 ? 42 mhz region and downstream amplifiers that work only at 54 mhz and up  as shown in the figure thus  we get an asymmetry in the upstream and downstream bandwidths because more spectrum is available above television than below it on the other hand  most users want more downstream traffic  so cable operators are not unhappy with this fact sec 2.8 cable television 183 of life as we saw earlier  telephone companies usually offer an asymmetric dsl service  even though they have no technical reason for doing so in addition to upgrading the amplifiers  the operator has to upgrade the headend  too  from a dumb amplifier to an intelligent digital computer system with a high-bandwidth fiber interface to an isp often the name gets upgraded as well  from ? ? headend ? ? to cmts  cable modem termination system   in the following text  we will refrain from doing a name upgrade and stick with the traditional ? ? headend ? ? 2.8.4 cable modems internet access requires a cable modem  a device that has two interfaces on it  one to the computer and one to the cable network in the early years of cable internet  each operator had a proprietary cable modem  which was installed by a cable company technician however  it soon became apparent that an open standard would create a competitive cable modem market and drive down prices  thus encouraging use of the service furthermore  having the customers buy cable modems in stores and install them themselves  as they do with wireless access points  would eliminate the dreaded truck rolls consequently  the larger cable operators teamed up with a company called cablelabs to produce a cable modem standard and to test products for compliance this standard  called docsis  data over cable service interface specification   has mostly replaced proprietary modems docsis version 1.0 came out in 1997  and was soon followed by docsis 2.0 in 2001 it increased upstream rates to better support symmetric services such as ip telephony the most recent version of the standard is docsis 3.0  which came out in 2006 it uses more bandwidth to increase rates in both directions the european version of these standards is called eurodocsis not all cable operators like the idea of a standard  however  since many of them were making good money leasing their modems to their captive customers an open standard with dozens of manufacturers selling cable modems in stores ends this lucrative practice the modem-to-computer interface is straightforward it is normally ethernet  or occasionally usb the other end is more complicated as it uses all of fdm  tdm  and cdma to share the bandwidth of the cable between subscribers when a cable modem is plugged in and powered up  it scans the downstream channels looking for a special packet periodically put out by the headend to provide system parameters to modems that have just come online upon finding this packet  the new modem announces its presence on one of the upstream channels the headend responds by assigning the modem to its upstream and downstream channels these assignments can be changed later if the headend deems it necessary to balance the load the use of 6-mhz or 8-mhz channels is the fdm part each cable modem sends data on one upstream and one downstream channel  or multiple channels 184 the physical layer chap 2 under docsis 3.0 the usual scheme is to take each 6  or 8  mhz downstream channel and modulate it with qam-64 or  if the cable quality is exceptionally good  qam-256 with a 6-mhz channel and qam-64  we get about 36 mbps when the overhead is subtracted  the net payload is about 27 mbps with qam 256  the net payload is about 39 mbps the european values are 1/3 larger for upstream  there is more rf noise because the system was not originally designed for data  and noise from multiple subscribers is funneled to the headend  so a more conservative scheme is used this ranges from qpsk to qam-128  where some of the symbols are used for error protection with trellis coded modulation with fewer bits per symbol on the upstream  the asymmetry between upstream and downstream rates is much more than suggested by fig 2-52 tdm is then used to share bandwidth on the upstream across multiple subscribers otherwise their transmissions would collide at the headend time is divided into minislots and different subscribers send in different minislots to make this work  the modem determines its distance from the headend by sending it a special packet and seeing how long it takes to get the response this process is called ranging it is important for the modem to know its distance to get the timing right each upstream packet must fit in one or more consecutive minislots at the headend when it is received the headend announces the start of a new round of minislots periodically  but the starting gun is not heard at all modems simultaneously due to the propagation time down the cable by knowing how far it is from the headend  each modem can compute how long ago the first minislot really started minislot length is network dependent a typical payload is 8 bytes during initialization  the headend assigns each modem to a minislot to use for requesting upstream bandwidth when a computer wants to send a packet  it transfers the packet to the modem  which then requests the necessary number of minislots for it if the request is accepted  the headend puts an acknowledgement on the downstream channel telling the modem which minislots have been reserved for its packet the packet is then sent  starting in the minislot allocated to it additional packets can be requested using a field in the header as a rule  multiple modems will be assigned the same minislot  which leads to contention two different possibilities exist for dealing with it the first is that cdma is used to share the minislot between subscribers this solves the contention problem because all subscribers with a cdma code sequence can send at the same time  albeit at a reduced rate the second option is that cdma is not used  in which case there may be no acknowledgement to the request because of a collision in this case  the modem just waits a random time and tries again after each successive failure  the randomization time is doubled  for readers already somewhat familiar with networking  this algorithm is just slotted aloha with binary exponential backoff ethernet can not be used on cable because stations can not sense the medium we will come back to these issues in chap 4  the downstream channels are managed differently from the upstream channels for starters  there is only one sender  the headend   so there is no contention sec 2.8 cable television 185 and no need for minislots  which is actually just statistical time division multiplexing for another  the amount of traffic downstream is usually much larger than upstream  so a fixed packet size of 204 bytes is used part of that is a reed solomon error-correcting code and some other overhead  leaving a user payload of 184 bytes these numbers were chosen for compatibility with digital television using mpeg-2  so the tv and downstream data channels are formatted the same way logically  the connections are as depicted in fig 2-53 figure 2-53 typical details of the upstream and downstream channels in north america 2.8.5 adsl versus cable which is better  adsl or cable ? that is like asking which operating system is better or which language is better or which religion which answer you get depends on whom you ask let us compare adsl and cable on a few points both use fiber in the backbone  but they differ on the edge cable uses coax ; adsl uses twisted pair the theoretical carrying capacity of coax is hundreds of times more than twisted pair however  the full capacity of the cable is not available for data users because much of the cable ? s bandwidth is wasted on useless stuff such as television programs in practice  it is hard to generalize about effective capacity adsl providers give specific statements about the bandwidth  e.g  1 mbps downstream  256 kbps upstream  and generally achieve about 80 % of it consistently cable providers may artificially cap the bandwidth to each user to help them make performance predictions  but they can not really give guarantees because the effective capacity depends on how many people are currently active on the user ? s cable segment sometimes it may be better than adsl and sometimes it may be worse what can be annoying  though  is the unpredictability having great service one minute does not guarantee great service the next minute since the biggest bandwidth hog in town may have just turned on his computer 186 the physical layer chap 2 as an adsl system acquires more users  their increasing numbers have little effect on existing users  since each user has a dedicated connection with cable  as more subscribers sign up for internet service  performance for existing users will drop the only cure is for the cable operator to split busy cables and connect each one to a fiber node directly doing so costs time and money  so there are business pressures to avoid it as an aside  we have already studied another system with a shared channel like cable  the mobile telephone system here  too  a group of users ? we could call them cellmates ? share a fixed amount of bandwidth for voice traffic  which is fairly smooth  the bandwidth is rigidly divided in fixed chunks among the active users using fdm and tdm but for data traffic  this rigid division is very inefficient because data users are frequently idle  in which case their reserved bandwidth is wasted as with cable  a more dynamic means is used to allocate the shared bandwidth availability is an issue on which adsl and cable differ everyone has a telephone  but not all users are close enough to their end offices to get adsl on the other hand  not everyone has cable  but if you do have cable and the company provides internet access  you can get it distance to the fiber node or headend is not an issue it is also worth noting that since cable started out as a television distribution medium  few businesses have it being a point-to-point medium  adsl is inherently more secure than cable any cable user can easily read all the packets going down the cable for this reason  any decent cable provider will encrypt all traffic in both directions nevertheless  having your neighbor get your encrypted messages is still less secure than having him not get anything at all the telephone system is generally more reliable than cable for example  it has backup power and continues to work normally even during a power outage with cable  if the power to any amplifier along the chain fails  all downstream users are cut off instantly finally  most adsl providers offer a choice of isps sometimes they are even required to do so by law such is not always the case with cable operators the conclusion is that adsl and cable are much more alike than they are different they offer comparable service and  as competition between them heats up  probably comparable prices 2.9 summary the physical layer is the basis of all networks nature imposes two fundamental limits on all channels  and these determine their bandwidth these limits are the nyquist limit  which deals with noiseless channels  and the shannon limit  which deals with noisy channels sec 2.9 summary 187 transmission media can be guided or unguided the principal guided media are twisted pair  coaxial cable  and fiber optics unguided media include terrestrial radio  microwaves  infrared  lasers through the air  and satellites digital modulation methods send bits over guided and unguided media as analog signals line codes operate at baseband  and signals can be placed in a passband by modulating the amplitude  frequency  and phase of a carrier channels can be shared between users with time  frequency and code division multiplexing a key element in most wide area networks is the telephone system its main components are the local loops  trunks  and switches adsl offers speeds up to 40 mbps over the local loop by dividing it into many subcarriers that run in parallel this far exceeds the rates of telephone modems pons bring fiber to the home for even greater access rates than adsl trunks carry digital information they are multiplexed with wdm to provision many high capacity links over individual fibers  as well as with tdm to share each high rate link between users both circuit switching and packet switching are important for mobile applications  the fixed telephone system is not suitable mobile phones are currently in widespread use for voice  and increasingly for data they have gone through three generations the first generation  1g  was analog and dominated by amps 2g was digital  with gsm presently the most widely deployed mobile phone system in the world 3g is digital and based on broadband cdma  with wcdma and also cdma2000 now being deployed an alternative system for network access is the cable television system it has gradually evolved from coaxial cable to hybrid fiber coax  and from television to television and internet potentially  it offers very high bandwidth  but the bandwidth in practice depends heavily on the other users because it is shared problems 1 compute the fourier coefficients for the function f  t  ? ? t  0 ? ? t ? ? 1   2 a noiseless 4-khz channel is sampled every 1 msec what is the maximum data rate ? how does the maximum data rate change if the channel is noisy  with a signal-to-noise ratio of 30 db ? 3 television channels are 6 mhz wide how many bits/sec can be sent if four-level digital signals are used ? assume a noiseless channel 4 if a binary signal is sent over a 3-khz channel whose signal-to-noise ratio is 20 db  what is the maximum achievable data rate ? 5 what signal-to-noise ratio is needed to put a t1 carrier on a 50-khz line ? 6 what are the advantages of fiber optics over copper as a transmission medium ? is there any downside of using fiber optics over copper ? 188 the physical layer chap 2 7 how much bandwidth is there in 0.1 microns of spectrum at a wavelength of 1 micron ? 8 it is desired to send a sequence of computer screen images over an optical fiber the screen is 2560 ? ? 1600 pixels  each pixel being 24 bits there are 60 screen images per second how much bandwidth is needed  and how many microns of wavelength are needed for this band at 1.30 microns ? 9 is the nyquist theorem true for high-quality single-mode optical fiber or only for copper wire ? 10 radio antennas often work best when the diameter of the antenna is equal to the wavelength of the radio wave reasonable antennas range from 1 cm to 5 meters in diameter what frequency range does this cover ? 11 a laser beam 1 mm wide is aimed at a detector 1 mm wide 100 m away on the roof of a building how much of an angular diversion  in degrees  does the laser have to have before it misses the detector ? 12 the 66 low-orbit satellites in the iridium project are divided into six necklaces around the earth at the altitude they are using  the period is 90 minutes what is the average interval for handoffs for a stationary transmitter ? 13 calculate the end-to-end transit time for a packet for both geo  altitude  35,800 km   meo  altitude  18,000 km  and leo  altitude  750 km  satellites 14 what is the latency of a call originating at the north pole to reach the south pole if the call is routed via iridium satellites ? assume that the switching time at the satellites is 10 microseconds and earth ? s radius is 6371 km 15 what is the minimum bandwidth needed to achieve a data rate of b bits/sec if the signal is transmitted using nrz  mlt-3  and manchester encoding ? explain your answer 16 prove that in 4b/5b encoding  a signal transition will occur at least every four bit times 17 how many end office codes were there pre-1984  when each end office was named by its three-digit area code and the first three digits of the local number ? area codes started with a digit in the range 2 ? 9  had a 0 or 1 as the second digit  and ended with any digit the first two digits of a local number were always in the range 2 ? 9 the third digit could be any digit 18 a simple telephone system consists of two end offices and a single toll office to which each end office is connected by a 1-mhz full-duplex trunk the average telephone is used to make four calls per 8-hour workday the mean call duration is 6 min ten percent of the calls are long distance  i.e  pass through the toll office   what is the maximum number of telephones an end office can support ?  assume 4 khz per circuit  explain why a telephone company may decide to support a lesser number of telephones than this maximum number at the end office 19 a regional telephone company has 10 million subscribers each of their telephones is connected to a central office by a copper twisted pair the average length of these twisted pairs is 10 km how much is the copper in the local loops worth ? assume chap 2 problems 189 that the cross section of each strand is a circle 1 mm in diameter  the density of copper is 9.0 grams/cm3  and that copper sells for $ 6 per kilogram 20 is an oil pipeline a simplex system  a half-duplex system  a full-duplex system  or none of the above ? what about a river or a walkie-talkie-style communication ? 21 the cost of a fast microprocessor has dropped to the point where it is now possible to put one in each modem how does that affect the handling of telephone line errors ? does it negate the need for error checking/correction in layer 2 ? 22 a modem constellation diagram similar to fig 2-23 has data points at the following coordinates   1  1    1  ? 1    ? 1  1   and  ? 1  ? 1   how many bps can a modem with these parameters achieve at 1200 symbols/second ? 23 what is the maximum bit rate achievable in a v.32 standard modem if the baud rate is 1200 and no error correction is used ? 24 how many frequencies does a full-duplex qam-64 modem use ? 25 ten signals  each requiring 4000 hz  are multiplexed onto a single channel using fdm what is the minimum bandwidth required for the multiplexed channel ? assume that the guard bands are 400 hz wide 26 why has the pcm sampling time been set at 125 ? sec ? 27 what is the percent overhead on a t1 carrier ? that is  what percent of the 1.544 mbps are not delivered to the end user ? how does it relate to the percent overhead in oc-1 or oc-768 lines ? 28 compare the maximum data rate of a noiseless 4-khz channel using  a  analog encoding  e.g  qpsk  with 2 bits per sample  b  the t1 pcm system 29 if a t1 carrier system slips and loses track of where it is  it tries to resynchronize using the first bit in each frame how many frames will have to be inspected on average to resynchronize with a probability of 0.001 of being wrong ? 30 what is the difference  if any  between the demodulator part of a modem and the coder part of a codec ?  after all  both convert analog signals to digital ones  31 sonet clocks have a drift rate of about 1 part in 109 how long does it take for the drift to equal the width of 1 bit ? do you see any practical implications of this calculation ? if so  what ? 32 how long will it take to transmit a 1-gb file from one vsat to another using a hub as shown in figure 2-17 ? assume that the uplink is 1 mbps  the downlink is 7 mbps  and circuit switching is used with 1.2 sec circuit setup time 33 calculate the transmit time in the previous problem if packet switching is used instead assume that the packet size is 64 kb  the switching delay in the satellite and hub is 10 microseconds  and the packet header size is 32 bytes 34 in fig 2-40  the user data rate for oc-3 is stated to be 148.608 mbps show how this number can be derived from the sonet oc-3 parameters what will be the gross  spe  and user data rates of an oc-3072 line ? 190 the physical layer chap 2 35 to accommodate lower data rates than sts-1  sonet has a system of virtual tributaries  vts   a vt is a partial payload that can be inserted into an sts-1 frame and combined with other partial payloads to fill the data frame vt1.5 uses 3 columns  vt2 uses 4 columns  vt3 uses 6 columns  and vt6 uses 12 columns of an sts-1 frame which vt can accommodate  a  a ds-1 service  1.544 mbps  ?  b  european cept-1 service  2.048 mbps  ?  c  a ds-2 service  6.312 mbps  ? 36 what is the available user bandwidth in an oc-12c connection ? 37 three packet-switching networks each contain n nodes the first network has a star topology with a central switch  the second is a  bidirectional  ring  and the third is fully interconnected  with a wire from every node to every other node what are the best  average  and worst-case transmission paths in hops ? 38 compare the delay in sending an x-bit message over a k-hop path in a circuit-switched network and in a  lightly loaded  packet-switched network the circuit setup time is s sec  the propagation delay is d sec per hop  the packet size is p bits  and the data rate is b bps under what conditions does the packet network have a lower delay ? also  explain the conditions under which a packet-switched network is preferable to a circuitswitched network 39 suppose that x bits of user data are to be transmitted over a k-hop path in a packetswitched network as a series of packets  each containing p data bits and h header bits  with x > > p ? ? h the bit rate of the lines is b bps and the propagation delay is negligible what value of p minimizes the total delay ? 40 in a typical mobile phone system with hexagonal cells  it is forbidden to reuse a frequency band in an adjacent cell if 840 frequencies are available  how many can be used in a given cell ? 41 the actual layout of cells is seldom as regular that as shown in fig 2-45 even the shapes of individual cells are typically irregular give a possible reason why this might be how do these irregular shapes affect frequency assignment to each cell ? 42 make a rough estimate of the number of pcs microcells 100 m in diameter it would take to cover san francisco  120 square km   43 sometimes when a mobile user crosses the boundary from one cell to another  the current call is abruptly terminated  even though all transmitters and receivers are functioning perfectly why ? 44 suppose that a  b  and c are simultaneously transmitting 0 bits  using a cdma system with the chip sequences of fig 2-28  a   what is the resulting chip sequence ? 45 consider a different way of looking at the orthogonality property of cdma chip sequences each bit in a pair of sequences can match or not match express the orthogonality property in terms of matches and mismatches 46 a cdma receiver gets the following chips   ? 1 + 1 ? 3 + 1 ? 1 ? 3 + 1 + 1   assuming the chip sequences defined in fig 2-28  a   which stations transmitted  and which bits did each one send ? chap 2 problems 191 47 in figure 2-28  there are four stations that can transmit suppose four more stations are added provide the chip sequences of these stations 48 at the low end  the telephone system is star shaped  with all the local loops in a neighborhood converging on an end office in contrast  cable television consists of a single long cable snaking its way past all the houses in the same neighborhood suppose that a future tv cable were 10-gbps fiber instead of copper could it be used to simulate the telephone model of everybody having their own private line to the end office ? if so  how many one-telephone houses could be hooked up to a single fiber ? 49 a cable company decides to provide internet access over cable in a neighborhood consisting of 5000 houses the company uses a coaxial cable and spectrum allocation allowing 100 mbps downstream bandwidth per cable to attract customers  the company decides to guarantee at least 2 mbps downstream bandwidth to each house at any time describe what the cable company needs to do to provide this guarantee 50 using the spectral allocation shown in fig 2-52 and the information given in the text  how many mbps does a cable system allocate to upstream and how many to downstream ? 51 how fast can a cable user receive data if the network is otherwise idle ? assume that the user interface is  a  10-mbps ethernet  b  100-mbps ethernet  c  54-mbps wireless 52 multiplexing sts-1 multiple data streams  called tributaries  plays an important role in sonet a 3  1 multiplexer multiplexes three input sts-1 tributaries onto one output sts-3 stream this multiplexing is done byte for byte that is  the first three output bytes are the first bytes of tributaries 1  2  and 3  respectively the next three output bytes are the second bytes of tributaries 1  2  and 3  respectively  and so on write a program that simulates this 3  1 multiplexer your program should consist of five processes the main process creates four processes  one each for the three sts-1 tributaries and one for the multiplexer each tributary process reads in an sts-1 frame from an input file as a sequence of 810 bytes they send their frames  byte by byte  to the multiplexer process the multiplexer process receives these bytes and outputs an sts-3 frame  byte by byte  by writing it to standard output use pipes for communication among processes 53 write a program to implement cdma assume that the length of a chip sequence is eight and the number of stations transmitting is four your program consists of three sets of processes  four transmitter processes  t0  t1  t2  and t3   one joiner process  and four receiver processes  r0  r1  r2  and r3   the main program  which also acts as the joiner process first reads four chip sequences  bipolar notation  from the standard input and a sequence of 4 bits  1 bit per transmitter process to be transmitted   and forks off four pairs of transmitter and receiver processes each pair of transmitter/receiver processes  t0,r0 ; t1,r1 ; t2,r2 ; t3,r3  is assigned one chip sequence and each transmitter process is assigned 1 bit  first bit to t0  second bit to t1  and so on   next  each transmitter process computes the signal to be transmitted  a sequence of 8 bits  and sends it to the joiner process after receiving signals from all four transmitter processes  the joiner process combines the signals and sends the combined signal to 192 the physical layer chap 2 the four receiver processes each receiver process then computes the bit it has received and prints it to standard output use pipes for communication between processes 3 the data link layer in this chapter we will study the design principles for the second layer in our model  the data link layer this study deals with algorithms for achieving reliable  efficient communication of whole units of information called frames  rather than individual bits  as in the physical layer  between two adjacent machines by adjacent  we mean that the two machines are connected by a communication channel that acts conceptually like a wire  e.g  a coaxial cable  telephone line  or wireless channel   the essential property of a channel that makes it ? ? wire-like ? ? is that the bits are delivered in exactly the same order in which they are sent at first you might think this problem is so trivial that there is nothing to study ? machine a just puts the bits on the wire  and machine b just takes them off unfortunately  communication channels make errors occasionally furthermore  they have only a finite data rate  and there is a nonzero propagation delay between the time a bit is sent and the time it is received these limitations have important implications for the efficiency of the data transfer the protocols used for communications must take all these factors into consideration these protocols are the subject of this chapter after an introduction to the key design issues present in the data link layer  we will start our study of its protocols by looking at the nature of errors and how they can be detected and corrected then we will study a series of increasingly complex protocols  each one solving more and more of the problems present in this layer finally  we will conclude with some examples of data link protocols 193 194 the data link layer chap 3 3.1 data link layer design issues the data link layer uses the services of the physical layer to send and receive bits over communication channels it has a number of functions  including  1 providing a well-defined service interface to the network layer 2 dealing with transmission errors 3 regulating the flow of data so that slow receivers are not swamped by fast senders to accomplish these goals  the data link layer takes the packets it gets from the network layer and encapsulates them into frames for transmission each frame contains a frame header  a payload field for holding the packet  and a frame trailer  as illustrated in fig 3-1 frame management forms the heart of what the data link layer does in the following sections we will examine all the abovementioned issues in detail header payload field trailer frame sending machine packet packet receiving machine header payload field trailer figure 3-1 relationship between packets and frames although this chapter is explicitly about the data link layer and its protocols  many of the principles we will study here  such as error control and flow control  are found in transport and other protocols as well that is because reliability is an overall goal  and it is achieved when all the layers work together in fact  in many networks  these functions are found mostly in the upper layers  with the data link layer doing the minimal job that is ? ? good enough ? ? however  no matter where they are found  the principles are pretty much the same they often show up in their simplest and purest forms in the data link layer  making this a good place to examine them in detail 3.1.1 services provided to the network layer the function of the data link layer is to provide services to the network layer the principal service is transferring data from the network layer on the source machine to the network layer on the destination machine on the source machine is sec 3.1 data link layer design issues 195 an entity  call it a process  in the network layer that hands some bits to the data link layer for transmission to the destination the job of the data link layer is to transmit the bits to the destination machine so they can be handed over to the network layer there  as shown in fig 3-2  a   the actual transmission follows the path of fig 3-2  b   but it is easier to think in terms of two data link layer processes communicating using a data link protocol for this reason  we will implicitly use the model of fig 3-2  a  throughout this chapter 4 3 2 1 4 3 2 1 4 3 2 1 4 3 2 1 host 1 host 2 host 1 host 2 virtual data path actual data path  a   b  figure 3-2  a  virtual communication  b  actual communication the data link layer can be designed to offer various services the actual services that are offered vary from protocol to protocol three reasonable possibilities that we will consider in turn are  1 unacknowledged connectionless service 2 acknowledged connectionless service 3 acknowledged connection-oriented service unacknowledged connectionless service consists of having the source machine send independent frames to the destination machine without having the destination machine acknowledge them ethernet is a good example of a data link layer that provides this class of service no logical connection is established beforehand or released afterward if a frame is lost due to noise on the line  no 196 the data link layer chap 3 attempt is made to detect the loss or recover from it in the data link layer this class of service is appropriate when the error rate is very low  so recovery is left to higher layers it is also appropriate for real-time traffic  such as voice  in which late data are worse than bad data the next step up in terms of reliability is acknowledged connectionless service when this service is offered  there are still no logical connections used  but each frame sent is individually acknowledged in this way  the sender knows whether a frame has arrived correctly or been lost if it has not arrived within a specified time interval  it can be sent again this service is useful over unreliable channels  such as wireless systems 802.11  wifi  is a good example of this class of service it is perhaps worth emphasizing that providing acknowledgements in the data link layer is just an optimization  never a requirement the network layer can always send a packet and wait for it to be acknowledged by its peer on the remote machine if the acknowledgement is not forthcoming before the timer expires  the sender can just send the entire message again the trouble with this strategy is that it can be inefficient links usually have a strict maximum frame length imposed by the hardware  and known propagation delays the network layer does not know these parameters it might send a large packet that is broken up into  say  10 frames  of which 2 are lost on average it would then take a very long time for the packet to get through instead  if individual frames are acknowledged and retransmitted  then errors can be corrected more directly and more quickly on reliable channels  such as fiber  the overhead of a heavyweight data link protocol may be unnecessary  but on  inherently unreliable  wireless channels it is well worth the cost getting back to our services  the most sophisticated service the data link layer can provide to the network layer is connection-oriented service with this service  the source and destination machines establish a connection before any data are transferred each frame sent over the connection is numbered  and the data link layer guarantees that each frame sent is indeed received furthermore  it guarantees that each frame is received exactly once and that all frames are received in the right order connection-oriented service thus provides the network layer processes with the equivalent of a reliable bit stream it is appropriate over long  unreliable links such as a satellite channel or a long-distance telephone circuit if acknowledged connectionless service were used  it is conceivable that lost acknowledgements could cause a frame to be sent and received several times  wasting bandwidth when connection-oriented service is used  transfers go through three distinct phases in the first phase  the connection is established by having both sides initialize variables and counters needed to keep track of which frames have been received and which ones have not in the second phase  one or more frames are actually transmitted in the third and final phase  the connection is released  freeing up the variables  buffers  and other resources used to maintain the connection sec 3.1 data link layer design issues 197 3.1.2 framing to provide service to the network layer  the data link layer must use the service provided to it by the physical layer what the physical layer does is accept a raw bit stream and attempt to deliver it to the destination if the channel is noisy  as it is for most wireless and some wired links  the physical layer will add some redundancy to its signals to reduce the bit error rate to a tolerable level however  the bit stream received by the data link layer is not guaranteed to be error free some bits may have different values and the number of bits received may be less than  equal to  or more than the number of bits transmitted it is up to the data link layer to detect and  if necessary  correct errors the usual approach is for the data link layer to break up the bit stream into discrete frames  compute a short token called a checksum for each frame  and include the checksum in the frame when it is transmitted  checksum algorithms will be discussed later in this chapter  when a frame arrives at the destination  the checksum is recomputed if the newly computed checksum is different from the one contained in the frame  the data link layer knows that an error has occurred and takes steps to deal with it  e.g  discarding the bad frame and possibly also sending back an error report   breaking up the bit stream into frames is more difficult than it at first appears a good design must make it easy for a receiver to find the start of new frames while using little of the channel bandwidth we will look at four methods  1 byte count 2 flag bytes with byte stuffing 3 flag bits with bit stuffing 4 physical layer coding violations the first framing method uses a field in the header to specify the number of bytes in the frame when the data link layer at the destination sees the byte count  it knows how many bytes follow and hence where the end of the frame is this technique is shown in fig 3-3  a  for four small example frames of sizes 5  5  8  and 8 bytes  respectively the trouble with this algorithm is that the count can be garbled by a transmission error for example  if the byte count of 5 in the second frame of fig 3-3  b  becomes a 7 due to a single bit flip  the destination will get out of synchronization it will then be unable to locate the correct start of the next frame even if the checksum is incorrect so the destination knows that the frame is bad  it still has no way of telling where the next frame starts sending a frame back to the source asking for a retransmission does not help either  since the destination does not know how many bytes to skip over to get to the start of the retransmission for this reason  the byte count method is rarely used by itself 198 the data link layer chap 3  b   a  5 1 2 3 4 5 6 7 8 9 8 0 1 2 3 4 5 6 8 7 8 9 0 1 2 3 5 1 2 3 4 7 6 7 8 9 8 0 1 2 3 4 5 6 8 7 8 9 0 1 2 3 byte count one byte error frame 1 5 bytes frame 1 frame 2 5 bytes frame 2  wrong  frame 3 8 bytes frame 4 8 bytes now a byte count figure 3-3 a byte stream  a  without errors  b  with one error the second framing method gets around the problem of resynchronization after an error by having each frame start and end with special bytes often the same byte  called a flag byte  is used as both the starting and ending delimiter this byte is shown in fig 3-4  a  as flag two consecutive flag bytes indicate the end of one frame and the start of the next thus  if the receiver ever loses synchronization it can just search for two flag bytes to find the end of the current frame and the start of the next frame however  there is a still a problem we have to solve it may happen that the flag byte occurs in the data  especially when binary data such as photographs or songs are being transmitted this situation would interfere with the framing one way to solve this problem is to have the sender ? s data link layer insert a special escape byte  esc  just before each ? ? accidental ? ? flag byte in the data thus  a framing flag byte can be distinguished from one in the data by the absence or presence of an escape byte before it the data link layer on the receiving end removes the escape bytes before giving the data to the network layer this technique is called byte stuffing of course  the next question is  what happens if an escape byte occurs in the middle of the data ? the answer is that it  too  is stuffed with an escape byte at the receiver  the first escape byte is removed  leaving the data byte that follows it  which might be another escape byte or the flag byte   some examples are shown in fig 3-4  b   in all cases  the byte sequence delivered after destuffing is exactly the same as the original byte sequence we can still search for a frame boundary by looking for two flag bytes in a row  without bothering to undo escapes the byte-stuffing scheme depicted in fig 3-4 is a slight simplification of the one used in ppp  point-to-point protocol   which is used to carry packets over communications links we will discuss ppp near the end of this chapter sec 3.1 data link layer design issues 199 a esc flag b a esc esc b a esc esc esc flag b a esc esc esc esc b a flag b a esc b a esc flag b a esc esc b flag header payload field trailer flag original bytes after stuffing  a   b  figure 3-4  a  a frame delimited by flag bytes  b  four examples of byte sequences before and after byte stuffing the third method of delimiting the bit stream gets around a disadvantage of byte stuffing  which is that it is tied to the use of 8-bit bytes framing can be also be done at the bit level  so frames can contain an arbitrary number of bits made up of units of any size it was developed for the once very popular hdlc  highlevel data link control  protocol each frame begins and ends with a special bit pattern  01111110 or 0x7e in hexadecimal this pattern is a flag byte whenever the sender ? s data link layer encounters five consecutive 1s in the data  it automatically stuffs a 0 bit into the outgoing bit stream this bit stuffing is analogous to byte stuffing  in which an escape byte is stuffed into the outgoing character stream before a flag byte in the data it also ensures a minimum density of transitions that help the physical layer maintain synchronization usb  universal serial bus  uses bit stuffing for this reason when the receiver sees five consecutive incoming 1 bits  followed by a 0 bit  it automatically destuffs  i.e  deletes  the 0 bit just as byte stuffing is completely transparent to the network layer in both computers  so is bit stuffing if the user data contain the flag pattern  01111110  this flag is transmitted as 011111010 but stored in the receiver ? s memory as 01111110 figure 3-5 gives an example of bit stuffing with bit stuffing  the boundary between two frames can be unambiguously recognized by the flag pattern thus  if the receiver loses track of where it is  all it has to do is scan the input for flag sequences  since they can only occur at frame boundaries and never within the data 200 the data link layer chap 3 0 1 1 0 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 0 0 1 0 0 1 1 0 1 1 1 1 1 0 1 1 1 1 1 0 1 1 1 1 1 0 1 0 0 1 0 stuffed bits  a   b   c  0 1 1 0 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 0 0 1 0 figure 3-5 bit stuffing  a  the original data  b  the data as they appear on the line  c  the data as they are stored in the receiver ? s memory after destuffing with both bit and byte stuffing  a side effect is that the length of a frame now depends on the contents of the data it carries for instance  if there are no flag bytes in the data  100 bytes might be carried in a frame of roughly 100 bytes if  however  the data consists solely of flag bytes  each flag byte will be escaped and the frame will become roughly 200 bytes long with bit stuffing  the increase would be roughly 12.5 % as 1 bit is added to every byte the last method of framing is to use a shortcut from the physical layer we saw in chap 2 that the encoding of bits as signals often includes redundancy to help the receiver this redundancy means that some signals will not occur in regular data for example  in the 4b/5b line code 4 data bits are mapped to 5 signal bits to ensure sufficient bit transitions this means that 16 out of the 32 signal possibilities are not used we can use some reserved signals to indicate the start and end of frames in effect  we are using ? ? coding violations ? ? to delimit frames the beauty of this scheme is that  because they are reserved signals  it is easy to find the start and end of frames and there is no need to stuff the data many data link protocols use a combination of these methods for safety a common pattern used for ethernet and 802.11 is to have a frame begin with a well-defined pattern called a preamble this pattern might be quite long  72 bits is typical for 802.11  to allow the receiver to prepare for an incoming packet the preamble is then followed by a length  i.e  count  field in the header that is used to locate the end of the frame 3.1.3 error control having solved the problem of marking the start and end of each frame  we come to the next problem  how to make sure all frames are eventually delivered to the network layer at the destination and in the proper order assume for the moment that the receiver can tell whether a frame that it receives contains correct or faulty information  we will look at the codes that are used to detect and correct transmission errors in sec 3.2   for unacknowledged connectionless service it might be fine if the sender just kept outputting frames without regard to whether sec 3.1 data link layer design issues 201 they were arriving properly but for reliable  connection-oriented service it would not be fine at all the usual way to ensure reliable delivery is to provide the sender with some feedback about what is happening at the other end of the line typically  the protocol calls for the receiver to send back special control frames bearing positive or negative acknowledgements about the incoming frames if the sender receives a positive acknowledgement about a frame  it knows the frame has arrived safely on the other hand  a negative acknowledgement means that something has gone wrong and the frame must be transmitted again an additional complication comes from the possibility that hardware troubles may cause a frame to vanish completely  e.g  in a noise burst   in this case  the receiver will not react at all  since it has no reason to react similarly  if the acknowledgement frame is lost  the sender will not know how to proceed it should be clear that a protocol in which the sender transmits a frame and then waits for an acknowledgement  positive or negative  will hang forever if a frame is ever lost due to  for example  malfunctioning hardware or a faulty communication channel this possibility is dealt with by introducing timers into the data link layer when the sender transmits a frame  it generally also starts a timer the timer is set to expire after an interval long enough for the frame to reach the destination  be processed there  and have the acknowledgement propagate back to the sender normally  the frame will be correctly received and the acknowledgement will get back before the timer runs out  in which case the timer will be canceled however  if either the frame or the acknowledgement is lost  the timer will go off  alerting the sender to a potential problem the obvious solution is to just transmit the frame again however  when frames may be transmitted multiple times there is a danger that the receiver will accept the same frame two or more times and pass it to the network layer more than once to prevent this from happening  it is generally necessary to assign sequence numbers to outgoing frames  so that the receiver can distinguish retransmissions from originals the whole issue of managing the timers and sequence numbers so as to ensure that each frame is ultimately passed to the network layer at the destination exactly once  no more and no less  is an important part of the duties of the data link layer  and higher layers   later in this chapter  we will look at a series of increasingly sophisticated examples to see how this management is done 3.1.4 flow control another important design issue that occurs in the data link layer  and higher layers as well  is what to do with a sender that systematically wants to transmit frames faster than the receiver can accept them this situation can occur when the sender is running on a fast  powerful computer and the receiver is running on a slow  low-end machine a common situation is when a smart phone requests a web page from a far more powerful server  which then turns on the fire hose and 202 the data link layer chap 3 blasts the data at the poor helpless phone until it is completely swamped even if the transmission is error free  the receiver may be unable to handle the frames as fast as they arrive and will lose some clearly  something has to be done to prevent this situation two approaches are commonly used in the first one  feedback-based flow control  the receiver sends back information to the sender giving it permission to send more data  or at least telling the sender how the receiver is doing in the second one  rate-based flow control  the protocol has a built-in mechanism that limits the rate at which senders may transmit data  without using feedback from the receiver in this chapter we will study feedback-based flow control schemes  primarily because rate-based schemes are only seen as part of the transport layer  chap 5   feedback-based schemes are seen at both the link layer and higher layers the latter is more common these days  in which case the link layer hardware is designed to run fast enough that it does not cause loss for example  hardware implementations of the link layer as nics  network interface cards  are sometimes said to run at ? ? wire speed  ? ? meaning that they can handle frames as fast as they can arrive on the link any overruns are then not a link problem  so they are handled by higher layers various feedback-based flow control schemes are known  but most of them use the same basic principle the protocol contains well-defined rules about when a sender may transmit the next frame these rules often prohibit frames from being sent until the receiver has granted permission  either implicitly or explicitly for example  when a connection is set up the receiver might say  ? ? you may send me n frames now  but after they have been sent  do not send any more until i have told you to continue ? ? we will examine the details shortly 3.2 error detection and correction we saw in chap 2 that communication channels have a range of characteristics some channels  like optical fiber in telecommunications networks  have tiny error rates so that transmission errors are a rare occurrence but other channels  especially wireless links and aging local loops  have error rates that are orders of magnitude larger for these links  transmission errors are the norm they can not be avoided at a reasonable expense or cost in terms of performance the conclusion is that transmission errors are here to stay we have to learn how to deal with them network designers have developed two basic strategies for dealing with errors both add redundant information to the data that is sent one strategy is to include enough redundant information to enable the receiver to deduce what the transmitted data must have been the other is to include only enough redundancy to allow the receiver to deduce that an error has occurred  but not which error  sec 3.2 error detection and correction 203 and have it request a retransmission the former strategy uses error-correcting codes and the latter uses error-detecting codes the use of error-correcting codes is often referred to as fec  forward error correction   each of these techniques occupies a different ecological niche on channels that are highly reliable  such as fiber  it is cheaper to use an error-detecting code and just retransmit the occasional block found to be faulty however  on channels such as wireless links that make many errors  it is better to add redundancy to each block so that the receiver is able to figure out what the originally transmitted block was fec is used on noisy channels because retransmissions are just as likely to be in error as the first transmission a key consideration for these codes is the type of errors that are likely to occur neither error-correcting codes nor error-detecting codes can handle all possible errors since the redundant bits that offer protection are as likely to be received in error as the data bits  which can compromise their protection   it would be nice if the channel treated redundant bits differently than data bits  but it does not they are all just bits to the channel this means that to avoid undetected errors the code must be strong enough to handle the expected errors one model is that errors are caused by extreme values of thermal noise that overwhelm the signal briefly and occasionally  giving rise to isolated single-bit errors another model is that errors tend to come in bursts rather than singly this model follows from the physical processes that generate them ? such as a deep fade on a wireless channel or transient electrical interference on a wired channel/ both models matter in practice  and they have different trade-offs having the errors come in bursts has both advantages and disadvantages over isolated singlebit errors on the advantage side  computer data are always sent in blocks of bits suppose that the block size was 1000 bits and the error rate was 0.001 per bit if errors were independent  most blocks would contain an error if the errors came in bursts of 100  however  only one block in 100 would be affected  on average the disadvantage of burst errors is that when they do occur they are much harder to correct than isolated errors other types of errors also exist sometimes  the location of an error will be known  perhaps because the physical layer received an analog signal that was far from the expected value for a 0 or 1 and declared the bit to be lost this situation is called an erasure channel it is easier to correct errors in erasure channels than in channels that flip bits because even if the value of the bit has been lost  at least we know which bit is in error however  we often do not have the benefit of erasures we will examine both error-correcting codes and error-detecting codes next please keep two points in mind  though first  we cover these codes in the link layer because this is the first place that we have run up against the problem of reliably transmitting groups of bits however  the codes are widely used because reliability is an overall concern error-correcting codes are also seen in the physical layer  particularly for noisy channels  and in higher layers  particularly for 204 the data link layer chap 3 real-time media and content distribution error-detecting codes are commonly used in link  network  and transport layers the second point to bear in mind is that error codes are applied mathematics unless you are particularly adept at galois fields or the properties of sparse matrices  you should get codes with good properties from a reliable source rather than making up your own in fact  this is what many protocol standards do  with the same codes coming up again and again in the material below  we will study a simple code in detail and then briefly describe advanced codes in this way  we can understand the trade-offs from the simple code and talk about the codes that are used in practice via the advanced codes 3.2.1 error-correcting codes we will examine four different error-correcting codes  1 hamming codes 2 binary convolutional codes 3 reed-solomon codes 4 low-density parity check codes all of these codes add redundancy to the information that is sent a frame consists of m data  i.e  message  bits and r redundant  i.e check  bits in a block code  the r check bits are computed solely as a function of the m data bits with which they are associated  as though the m bits were looked up in a large table to find their corresponding r check bits in a systematic code  the m data bits are sent directly  along with the check bits  rather than being encoded themselves before they are sent in a linear code  the r check bits are computed as a linear function of the m data bits exclusive or  xor  or modulo 2 addition is a popular choice this means that encoding can be done with operations such as matrix multiplications or simple logic circuits the codes we will look at in this section are linear  systematic block codes unless otherwise noted let the total length of a block be n  i.e  n ? ? m ? ? r   we will describe this as an  n,m  code an n-bit unit containing data and check bits is referred to as an nbit codeword the code rate  or simply rate  is the fraction of the codeword that carries information that is not redundant  or m/n the rates used in practice vary widely they might be 1/2 for a noisy channel  in which case half of the received information is redundant  or close to 1 for a high-quality channel  with only a small number of check bits added to a large message to understand how errors can be handled  it is necessary to first look closely at what an error really is given any two codewords that may be transmitted or received ? say  10001001 and 10110001 ? it is possible to determine how many sec 3.2 error detection and correction 205 corresponding bits differ in this case  3 bits differ to determine how many bits differ  just xor the two codewords and count the number of 1 bits in the result for example  10001001 10110001 00111000 the number of bit positions in which two codewords differ is called the hamming distance  hamming  1950   its significance is that if two codewords are a hamming distance d apart  it will require d single-bit errors to convert one into the other given the algorithm for computing the check bits  it is possible to construct a complete list of the legal codewords  and from this list to find the two codewords with the smallest hamming distance this distance is the hamming distance of the complete code in most data transmission applications  all 2m possible data messages are legal  but due to the way the check bits are computed  not all of the 2n possible codewords are used in fact  when there are r check bits  only the small fraction of 2m /2n or 1/2r of the possible messages will be legal codewords it is the sparseness with which the message is embedded in the space of codewords that allows the receiver to detect and correct errors the error-detecting and error-correcting properties of a block code depend on its hamming distance to reliably detect d errors  you need a distance d ? ? 1 code because with such a code there is no way that d single-bit errors can change a valid codeword into another valid codeword when the receiver sees an illegal codeword  it can tell that a transmission error has occurred similarly  to correct d errors  you need a distance 2d ? ? 1 code because that way the legal codewords are so far apart that even with d changes the original codeword is still closer than any other codeword this means the original codeword can be uniquely determined based on the assumption that a larger number of errors are less likely as a simple example of an error-correcting code  consider a code with only four valid codewords  0000000000  0000011111  1111100000  and 1111111111 this code has a distance of 5  which means that it can correct double errors or detect quadruple errors if the codeword 0000000111 arrives and we expect only single or double-bit errors  the receiver will know that the original must have been 0000011111 if  however  a triple error changes 0000000000 into 0000000111  the error will not be corrected properly alternatively  if we expect all of these errors  we can detect them none of the received codewords are legal codewords so an error must have occurred it should be apparent that in this example we can not both correct double errors and detect quadruple errors because this would require us to interpret a received codeword in two different ways 206 the data link layer chap 3 in our example  the task of decoding by finding the legal codeword that is closest to the received codeword can be done by inspection unfortunately  in the most general case where all codewords need to be evaluated as candidates  this task can be a time-consuming search instead  practical codes are designed so that they admit shortcuts to find what was likely the original codeword imagine that we want to design a code with m message bits and r check bits that will allow all single errors to be corrected each of the 2m legal messages has n illegal codewords at a distance of 1 from it these are formed by systematically inverting each of the n bits in the n-bit codeword formed from it thus  each of the 2m legal messages requires n ? ? 1 bit patterns dedicated to it since the total number of bit patterns is 2n  we must have  n ? ? 1  2m ? ? 2n using n ? ? m ? ? r  this requirement becomes  m ? ? r ? ? 1  ? ? 2r  3-1  given m  this puts a lower limit on the number of check bits needed to correct single errors this theoretical lower limit can  in fact  be achieved using a method due to hamming  1950   in hamming codes the bits of the codeword are numbered consecutively  starting with bit 1 at the left end  bit 2 to its immediate right  and so on the bits that are powers of 2  1  2  4  8  16  etc  are check bits the rest  3  5  6  7  9  etc  are filled up with the m data bits this pattern is shown for an  11,7  hamming code with 7 data bits and 4 check bits in fig 3-6 each check bit forces the modulo 2 sum  or parity  of some collection of bits  including itself  to be even  or odd   a bit may be included in several check bit computations to see which check bits the data bit in position k contributes to  rewrite k as a sum of powers of 2 for example  11 = 1 + 2 + 8 and 29 = 1 + 4 + 8 + 16 a bit is checked by just those check bits occurring in its expansion  e.g  bit 11 is checked by bits 1  2  and 8   in the example  the check bits are computed for even parity sums for a message that is the ascii letter ? ? a ? ? sent codeword received codeword 0 0 1 0 0 0 0 1 0 0 1 p1 p2 m3 p4 m5 m6 m7 p8 m9 m10 m11 check bits channel 0 0 1 0 1 0 0 1 0 0 1 1 bit error syndrome 0 1 0 1 check results a 1000001 flip bit 5 a 1000001 message message figure 3-6 example of an  11  7  hamming code correcting a single-bit error this construction gives a code with a hamming distance of 3  which means that it can correct single errors  or detect double errors   the reason for the very careful numbering of message and check bits becomes apparent in the decoding sec 3.2 error detection and correction 207 process when a codeword arrives  the receiver redoes the check bit computations including the values of the received check bits we call these the check results if the check bits are correct then  for even parity sums  each check result should be zero in this case the codeword is accepted as valid if the check results are not all zero  however  an error has been detected the set of check results forms the error syndrome that is used to pinpoint and correct the error in fig 3-6  a single-bit error occurred on the channel so the check results are 0  1  0  and 1 for k = 8  4  2  and 1  respectively this gives a syndrome of 0101 or 4 ? ? 1 ? 5 by the design of the scheme  this means that the fifth bit is in error flipping the incorrect bit  which might be a check bit or a data bit  and discarding the check bits gives the correct message of an ascii ? ? a ? ? hamming distances are valuable for understanding block codes  and hamming codes are used in error-correcting memory however  most networks use stronger codes the second code we will look at is a convolutional code this code is the only one we will cover that is not a block code in a convolutional code  an encoder processes a sequence of input bits and generates a sequence of output bits there is no natural message size or encoding boundary as in a block code the output depends on the current and previous input bits that is  the encoder has memory the number of previous bits on which the output depends is called the constraint length of the code convolutional codes are specified in terms of their rate and constraint length convolutional codes are widely used in deployed networks  for example  as part of the gsm mobile phone system  in satellite communications  and in 802.11 as an example  a popular convolutional code is shown in fig 3-7 this code is known as the nasa convolutional code of r ? ? 1/2 and k ? ? 7  since it was first used for the voyager space missions starting in 1977 since then it has been liberally reused  for example  as part of 802.11 input bit output bit 1 s1 s2 s3 s4 s5 s6 output bit 2 figure 3-7 the nasa binary convolutional code used in 802.11 in fig 3-7  each input bit on the left-hand side produces two output bits on the right-hand side that are xor sums of the input and internal state since it deals with bits and performs linear operations  this is a binary  linear convolutional code since 1 input bit produces 2 output bits  the code rate is 1/2 it is not systematic since none of the output bits is simply the input bit 208 the data link layer chap 3 the internal state is kept in six memory registers each time another bit is input the values in the registers are shifted to the right for example  if 111 is input and the initial state is all zeros  the internal state  written left to right  will become 100000  110000  and 111000 after the first  second  and third bits have been input the output bits will be 11  followed by 10  and then 01 it takes seven shifts to flush an input completely so that it does not affect the output the constraint length of this code is thus k ? ? 7 a convolutional code is decoded by finding the sequence of input bits that is most likely to have produced the observed sequence of output bits  which includes any errors   for small values of k  this is done with a widely used algorithm developed by viterbi  forney  1973   the algorithm walks the observed sequence  keeping for each step and for each possible internal state the input sequence that would have produced the observed sequence with the fewest errors the input sequence requiring the fewest errors at the end is the most likely message convolutional codes have been popular in practice because it is easy to factor the uncertainty of a bit being a 0 or a 1 into the decoding for example  suppose ? 1v is the logical 0 level and + 1v is the logical 1 level  we might receive 0.9v and ? 0.1v for 2 bits instead of mapping these signals to 1 and 0 right away  we would like to treat 0.9v as ? ? very likely a 1 ? ? and ? 0.1v as ? ? maybe a 0 ? ? and correct the sequence as a whole extensions of the viterbi algorithm can work with these uncertainties to provide stronger error correction this approach of working with the uncertainty of a bit is called soft-decision decoding conversely  deciding whether each bit is a 0 or a 1 before subsequent error correction is called hard-decision decoding the third kind of error-correcting code we will describe is the reed-solomon code like hamming codes  reed-solomon codes are linear block codes  and they are often systematic too unlike hamming codes  which operate on individual bits  reed-solomon codes operate on m bit symbols naturally  the mathematics are more involved  so we will describe their operation by analogy reed-solomon codes are based on the fact that every n degree polynomial is uniquely determined by n ? ? 1 points for example  a line having the form ax ? ? b is determined by two points extra points on the same line are redundant  which is helpful for error correction imagine that we have two data points that represent a line and we send those two data points plus two check points chosen to lie on the same line if one of the points is received in error  we can still recover the data points by fitting a line to the received points three of the points will lie on the line  and one point  the one in error  will not by finding the line we have corrected the error reed-solomon codes are actually defined as polynomials that operate over finite fields  but they work in a similar manner for m bit symbols  the codewords are 2m ? 1 symbols long a popular choice is to make m ? ? 8 so that symbols are bytes a codeword is then 255 bytes long the  255  233  code is widely used ; it adds 32 redundant symbols to 233 data symbols decoding with error correction sec 3.2 error detection and correction 209 is done with an algorithm developed by berlekamp and massey that can efficiently perform the fitting task for moderate-length codes  massey  1969   reed-solomon codes are widely used in practice because of their strong error-correction properties  particularly for burst errors they are used for dsl  data over cable  satellite communications  and perhaps most ubiquitously on cds  dvds  and blu-ray discs because they are based on m bit symbols  a single-bit error and an m-bit burst error are both treated simply as one symbol error when 2t redundant symbols are added  a reed-solomon code is able to correct up to t errors in any of the transmitted symbols this means  for example  that the  255  233  code  which has 32 redundant symbols  can correct up to 16 symbol errors since the symbols may be consecutive and they are each 8 bits  an error burst of up to 128 bits can be corrected the situation is even better if the error model is one of erasures  e.g  a scratch on a cd that obliterates some symbols   in this case  up to 2t errors can be corrected reed-solomon codes are often used in combination with other codes such as a convolutional code the thinking is as follows convolutional codes are effective at handling isolated bit errors  but they will fail  likely with a burst of errors  if there are too many errors in the received bit stream by adding a reed-solomon code within the convolutional code  the reed-solomon decoding can mop up the error bursts  a task at which it is very good the overall code then provides good protection against both single and burst errors the final error-correcting code we will cover is the ldpc  low-density parity check  code ldpc codes are linear block codes that were invented by robert gallagher in his doctoral thesis  gallagher  1962   like most theses  they were promptly forgotten  only to be reinvented in 1995 when advances in computing power had made them practical in an ldpc code  each output bit is formed from only a fraction of the input bits this leads to a matrix representation of the code that has a low density of 1s  hence the name for the code the received codewords are decoded with an approximation algorithm that iteratively improves on a best fit of the received data to a legal codeword this corrects errors ldpc codes are practical for large block sizes and have excellent error-correction abilities that outperform many other codes  including the ones we have looked at  in practice for this reason they are rapidly being included in new protocols they are part of the standard for digital video broadcasting  10 gbps ethernet  power-line networks  and the latest version of 802.11 expect to see more of them in future networks 3.2.2 error-detecting codes error-correcting codes are widely used on wireless links  which are notoriously noisy and error prone when compared to optical fibers without error-correcting codes  it would be hard to get anything through however  over fiber or 210 the data link layer chap 3 high-quality copper  the error rate is much lower  so error detection and retransmission is usually more efficient there for dealing with the occasional error we will examine three different error-detecting codes they are all linear  systematic block codes  1 parity 2 checksums 3 cyclic redundancy checks  crcs   to see how they can be more efficient than error-correcting codes  consider the first error-detecting code  in which a single parity bit is appended to the data the parity bit is chosen so that the number of 1 bits in the codeword is even  or odd   doing this is equivalent to computing the  even  parity bit as the modulo 2 sum or xor of the data bits for example  when 1011010 is sent in even parity  a bit is added to the end to make it 10110100 with odd parity 1011010 becomes 10110101 a code with a single parity bit has a distance of 2  since any single-bit error produces a codeword with the wrong parity this means that it can detect single-bit errors consider a channel on which errors are isolated and the error rate is 10 ? 6 per bit this may seem a tiny error rate  but it is at best a fair rate for a long wired cable that is challenging for error detection typical lan links provide bit error rates of 10 ? 10 let the block size be 1000 bits to provide error correction for 1000-bit blocks  we know from eq  3-1  that 10 check bits are needed thus  a megabit of data would require 10,000 check bits to merely detect a block with a single 1-bit error  one parity bit per block will suffice once every 1000 blocks  a block will be found to be in error and an extra block  1001 bits  will have to be transmitted to repair the error the total overhead for the error detection and retransmission method is only 2001 bits per megabit of data  versus 10,000 bits for a hamming code one difficulty with this scheme is that a single parity bit can only reliably detect a single-bit error in the block if the block is badly garbled by a long burst error  the probability that the error will be detected is only 0.5  which is hardly acceptable the odds can be improved considerably if each block to be sent is regarded as a rectangular matrix n bits wide and k bits high now  if we compute and send one parity bit for each row  up to k bit errors will be reliably detected as long as there is at most one error per row however  there is something else we can do that provides better protection against burst errors  we can compute the parity bits over the data in a different order than the order in which the data bits are transmitted doing so is called interleaving in this case  we will compute a parity bit for each of the n columns and send all the data bits as k rows  sending the rows from top to bottom and the bits in each row from left to right in the usual manner at the last row  we send the n parity bits this transmission order is shown in fig 3-8 for n ? ? 7 and k ? ? 7 sec 3.2 error detection and correction 211 burst error channel transmit order parity bits 1011110 n c l w o r k parity errors 1011110 n e t w o r k 1001110 1100101 1110100 1110111 1101111 1110010 1101011 1001110 1100011 1101100 1110111 1101111 1110010 1101011 figure 3-8 interleaving of parity bits to detect a burst error interleaving is a general technique to convert a code that detects  or corrects  isolated errors into a code that detects  or corrects  burst errors in fig 3-8  when a burst error of length n ? ? 7 occurs  the bits that are in error are spread across different columns  a burst error does not imply that all the bits are wrong ; it just implies that at least the first and last are wrong in fig 3-8  4 bits were flipped over a range of 7 bits  at most 1 bit in each of the n columns will be affected  so the parity bits on those columns will detect the error this method uses n parity bits on blocks of kn data bits to detect a single burst error of length n or less a burst of length n ? ? 1 will pass undetected  however  if the first bit is inverted  the last bit is inverted  and all the other bits are correct if the block is badly garbled by a long burst or by multiple shorter bursts  the probability that any of the n columns will have the correct parity by accident is 0.5  so the probability of a bad block being accepted when it should not be is 2 ? n the second kind of error-detecting code  the checksum  is closely related to groups of parity bits the word ? ? checksum ? ? is often used to mean a group of check bits associated with a message  regardless of how are calculated a group of parity bits is one example of a checksum however  there are other  stronger checksums based on a running sum of the data bits of the message the checksum is usually placed at the end of the message  as the complement of the sum function this way  errors may be detected by summing the entire received codeword  both data bits and checksum if the result comes out to be zero  no error has been detected one example of a checksum is the 16-bit internet checksum used on all internet packets as part of the ip protocol  braden et al  1988   this checksum is a sum of the message bits divided into 16-bit words because this method operates on words rather than on bits  as in parity  errors that leave the parity unchanged can still alter the sum and be detected for example  if the lowest order bit in two different words is flipped from a 0 to a 1  a parity check across these bits would fail to detect an error however  two 1s will be added to the 16-bit checksum to produce a different result the error can then be detected 212 the data link layer chap 3 the internet checksum is computed in one ? s complement arithmetic instead of as the modulo 216 sum in one ? s complement arithmetic  a negative number is the bitwise complement of its positive counterpart modern computers run two ? s complement arithmetic  in which a negative number is the one ? s complement plus one on a two ? s complement computer  the one ? s complement sum is equivalent to taking the sum modulo 216 and adding any overflow of the high order bits back into the low-order bits this algorithm gives a more uniform coverage of the data by the checksum bits otherwise  two high-order bits can be added  overflow  and be lost without changing the sum there is another benefit  too one ? s complement has two representations of zero  all 0s and all 1s this allows one value  e.g  all 0s  to indicate that there is no checksum  without the need for another field for decades  it has always been assumed that frames to be checksummed contain random bits all analyses of checksum algorithms have been made under this assumption inspection of real data by partridge et al  1995  has shown this assumption to be quite wrong as a consequence  undetected errors are in some cases much more common than had been previously thought the internet checksum in particular is efficient and simple but provides weak protection in some cases precisely because it is a simple sum it does not detect the deletion or addition of zero data  nor swapping parts of the message  and it provides weak protection against message splices in which parts of two packets are put together these errors may seem very unlikely to occur by random processes  but they are just the sort of errors that can occur with buggy hardware a better choice is fletcher ? s checksum  fletcher  1982   it includes a positional component  adding the product of the data and its position to the running sum this provides stronger detection of changes in the position of data although the two preceding schemes may sometimes be adequate at higher layers  in practice  a third and stronger kind of error-detecting code is in widespread use at the link layer  the crc  cyclic redundancy check   also known as a polynomial code polynomial codes are based upon treating bit strings as representations of polynomials with coefficients of 0 and 1 only a k-bit frame is regarded as the coefficient list for a polynomial with k terms  ranging from x k ? ? 1 to x 0 such a polynomial is said to be of degree k ? ? 1 the high-order  leftmost  bit is the coefficient of x k ? ? 1  the next bit is the coefficient of x k ? ? 2  and so on for example  110001 has 6 bits and thus represents a six-term polynomial with coefficients 1  1  0  0  0  and 1  1x 5 ? ? 1x 4 ? ? 0x 3 ? ? 0x 2 ? ? 0x 1 ? ? 1x 0 polynomial arithmetic is done modulo 2  according to the rules of algebraic field theory it does not have carries for addition or borrows for subtraction both addition and subtraction are identical to exclusive or for example  10011011 00110011 11110000 01010101 + 11001010 + 11001101 ? 10100110 ? 10101111 01010001 11111110 01010110 11111010 long division is carried out in exactly the same way as it is in binary except that sec 3.2 error detection and correction 213 the subtraction is again done modulo 2 a divisor is said ? ? to go into ? ? a dividend if the dividend has as many bits as the divisor when the polynomial code method is employed  the sender and receiver must agree upon a generator polynomial  g  x   in advance both the high and loworder bits of the generator must be 1 to compute the crc for some frame with m bits corresponding to the polynomial m  x   the frame must be longer than the generator polynomial the idea is to append a crc to the end of the frame in such a way that the polynomial represented by the checksummed frame is divisible by g  x   when the receiver gets the checksummed frame  it tries dividing it by g  x   if there is a remainder  there has been a transmission error the algorithm for computing the crc is as follows  1 let r be the degree of g  x   append r zero bits to the low-order end of the frame so it now contains m ? ? r bits and corresponds to the polynomial x rm  x   2 divide the bit string corresponding to g  x  into the bit string corresponding to x rm  x   using modulo 2 division 3 subtract the remainder  which is always r or fewer bits  from the bit string corresponding to x rm  x  using modulo 2 subtraction the result is the checksummed frame to be transmitted call its polynomial t  x   figure 3-9 illustrates the calculation for a frame 1101011111 using the generator g  x  ? ? x 4 ? ? x ? ? 1 it should be clear that t  x  is divisible  modulo 2  by g  x   in any division problem  if you diminish the dividend by the remainder  what is left over is divisible by the divisor for example  in base 10  if you divide 210,278 by 10,941  the remainder is 2399 if you then subtract 2399 from 210,278  what is left over  207,879  is divisible by 10,941 now let us analyze the power of this method what kinds of errors will be detected ? imagine that a transmission error occurs  so that instead of the bit string for t  x  arriving  t  x  ? ? e  x  arrives each 1 bit in e  x  corresponds to a bit that has been inverted if there are k 1 bits in e  x   k single-bit errors have occurred a single burst error is characterized by an initial 1  a mixture of 0s and 1s  and a final 1  with all other bits being 0 upon receiving the checksummed frame  the receiver divides it by g  x  ; that is  it computes  t  x  ? ? e  x   /g  x   t  x  /g  x  is 0  so the result of the computation is simply e  x  /g  x   those errors that happen to correspond to polynomials containing g  x  as a factor will slip by ; all other errors will be caught if there has been a single-bit error  e  x  ? ? x i  where i determines which bit is in error if g  x  contains two or more terms  it will never divide into e  x   so all single-bit errors will be detected 214 the data link layer chap 3 1 1 0 0 0 1 0 0 1 0 1 0 0 1 1 1 1 1 0 1 0 1 0 0 1 1 1 1 1 1 1 0 1 0 0 1 1 1 0 0 0 0 0 0 1 1 1 1 1 1 1 0 0 0 1 1 1 0 0 0 0 0 0 0 0 1 1 0 0 0 0 0 0 0 0 0 0 1 0 0 0 0 0 1 0 0 1 1 1 0 0 1 1 1 0 0 0 0 0 0 0 0 0 0 0 1 0 1 0 1 1 1 0 0 1 1 remainder quotient  thrown away  frame with four zeros appended 1 1 0 1 0 1 1 1 1 1 0 0 1 0 frame with four zeros appended minus remainder transmitted frame  1 1 0 1 1 0 0 frame  0 1 1 1 1 1 1 1 1 1 0 0 0 0 1 1 1 0 generator  figure 3-9 example calculation of the crc if there have been two isolated single-bit errors  e  x  ? ? x i ? ? x j  where i > j alternatively  this can be written as e  x  ? ? x j  x i ? ? j ? ? 1   if we assume that g  x  is not divisible by x  a sufficient condition for all double errors to be detected is that g  x  does not divide x k ? ? 1 for any k up to the maximum value of i ? ? j  i.e  up to the maximum frame length   simple  low-degree polynomials that give protection to long frames are known for example  x 15 ? ? x 14 ? ? 1 will not divide x k ? ? 1 for any value of k below 32,768 if there are an odd number of bits in error  e  x  contains an odd number of terms  e.g  x 5 ? ? x 2 ? ? 1  but not x 2 ? ? 1   interestingly  no polynomial with an odd number of terms has x ? ? 1 as a factor in the modulo 2 system by making x ? ? 1 a factor of g  x   we can catch all errors with an odd number of inverted bits finally  and importantly  a polynomial code with r check bits will detect all burst errors of length ? ? r a burst error of length k can be represented by x i  x k ? ? 1 ? ?    ? ? 1   where i determines how far from the right-hand end of the received frame the burst is located if g  x  contains an x 0 term  it will not have x i as a factor  so if the degree of the parenthesized expression is less than the degree of g  x   the remainder can never be zero sec 3.2 error detection and correction 215 if the burst length is r ? ? 1  the remainder of the division by g  x  will be zero if and only if the burst is identical to g  x   by definition of a burst  the first and last bits must be 1  so whether it matches depends on the r ? ? 1 intermediate bits if all combinations are regarded as equally likely  the probability of such an incorrect frame being accepted as valid is ? r ? ? 1 it can also be shown that when an error burst longer than r ? ? 1 bits occurs or when several shorter bursts occur  the probability of a bad frame getting through unnoticed is ? r  assuming that all bit patterns are equally likely certain polynomials have become international standards the one used in ieee 802 followed the example of ethernet and is x 32 ? ? x 26 ? ? x 23 ? ? x 22 ? ? x 16 ? ? x 12 ? ? x 11 ? ? x 10 ? ? x 8 ? ? x 7 ? ? x 5 ? ? x 4 ? ? x 2 ? ? x 1 ? ? 1 among other desirable properties  it has the property that it detects all bursts of length 32 or less and all bursts affecting an odd number of bits it has been used widely since the 1980s however  this does not mean it is the best choice using an exhaustive computational search  castagnoli et al  1993  and koopman  2002  found the best crcs these crcs have a hamming distance of 6 for typical message sizes  while the ieee standard crc-32 has a hamming distance of only 4 although the calculation required to compute the crc may seem complicated  it is easy to compute and verify crcs in hardware with simple shift register circuits  peterson and brown  1961   in practice  this hardware is nearly always used dozens of networking standards include various crcs  including virtually all lans  e.g  ethernet  802.11  and point-to-point links  e.g  packets over sonet   3.3 elementary data link protocols to introduce the subject of protocols  we will begin by looking at three protocols of increasing complexity for interested readers  a simulator for these and subsequent protocols is available via the web  see the preface   before we look at the protocols  it is useful to make explicit some of the assumptions underlying the model of communication to start with  we assume that the physical layer  data link layer  and network layer are independent processes that communicate by passing messages back and forth a common implementation is shown in fig 3-10 the physical layer process and some of the data link layer process run on dedicate hardware called a nic  network interface card   the rest of the link layer process and the network layer process run on the main cpu as part of the operating system  with the software for the link layer process often taking the form of a device driver however  other implementations are also possible  e.g  three processes offloaded to dedicated hardware called a network accelerator  or three processes running on the 216 the data link layer chap 3 main cpu on a software-defined ratio   actually  the preferred implementation changes from decade to decade with technology trade-offs in any event  treating the three layers as separate processes makes the discussion conceptually cleaner and also serves to emphasize the independence of the layers network cable  medium  phy link link application network interface card  nic  driver operating system computer figure 3-10 implementation of the physical  data link  and network layers another key assumption is that machine a wants to send a long stream of data to machine b  using a reliable  connection-oriented service later  we will consider the case where b also wants to send data to a simultaneously a is assumed to have an infinite supply of data ready to send and never has to wait for data to be produced instead  when a ? s data link layer asks for data  the network layer is always able to comply immediately  this restriction  too  will be dropped later  we also assume that machines do not crash that is  these protocols deal with communication errors  but not the problems caused by computers crashing and rebooting as far as the data link layer is concerned  the packet passed across the interface to it from the network layer is pure data  whose every bit is to be delivered to the destination ? s network layer the fact that the destination ? s network layer may interpret part of the packet as a header is of no concern to the data link layer when the data link layer accepts a packet  it encapsulates the packet in a frame by adding a data link header and trailer to it  see fig 3-1   thus  a frame consists of an embedded packet  some control information  in the header   and a checksum  in the trailer   the frame is then transmitted to the data link layer on the other machine we will assume that there exist suitable library procedures to physical layer to send a frame and from physical layer to receive a frame these procedures compute and append or check the checksum  which is usually done in hardware  so that we do not need to worry about it as part of the protocols we develop in this section they might use the crc algorithm discussed in the previous section  for example initially  the receiver has nothing to do it just sits around waiting for something to happen in the example protocols throughout this chapter we will indicate that the data link layer is waiting for something to happen by the procedure call sec 3.3 elementary data link protocols 217 # define max pkt 1024 / * determines packet size in bytes * / typedef enum  false  true  boolean ; / * boolean type * / typedef unsigned int seq nr ; / * sequence or ack numbers * / typedef struct  unsigned char data  max pkt  ;  packet ; / * packet definition * / typedef enum  data  ack  nak  frame kind ; / * frame kind definition * / typedef struct  / * frames are transported in this layer * / frame kind kind ; / * what kind of frame is it ? * / seq nr seq ; / * sequence number * / seq nr ack ; / * acknowledgement number * / packet info ; / * the network layer packet * /  frame ; / * wait for an event to happen ; return its type in event * / void wait for event  event type * event  ; / * fetch a packet from the network layer for transmission on the channel * / void from network layer  packet * p  ; / * deliver information from an inbound frame to the network layer * / void to network layer  packet * p  ; / * go get an inbound frame from the physical layer and copy it to r * / void from physical layer  frame * r  ; / * pass the frame to the physical layer for transmission * / void to physical layer  frame * s  ; / * start the clock running and enable the timeout event * / void start timer  seq nr k  ; / * stop the clock and disable the timeout event * / void stop timer  seq nr k  ; / * start an auxiliary timer and enable the ack timeout event * / void start ack timer  void  ; / * stop the auxiliary timer and disable the ack timeout event * / void stop ack timer  void  ; / * allow the network layer to cause a network layer ready event * / void enable network layer  void  ; / * forbid the network layer from causing a network layer ready event * / void disable network layer  void  ; / * macro inc is expanded in-line  increment k circularly * / # define inc  k  if  k < max seq  k = k + 1 ; else k = 0 figure 3-11 some definitions needed in the protocols to follow these definitions are located in the file protocol.h 218 the data link layer chap 3 wait for event  &event   this procedure only returns when something has happened  e.g  a frame has arrived   upon return  the variable event tells what happened the set of possible events differs for the various protocols to be described and will be defined separately for each protocol note that in a more realistic situation  the data link layer will not sit in a tight loop waiting for an event  as we have suggested  but will receive an interrupt  which will cause it to stop whatever it was doing and go handle the incoming frame nevertheless  for simplicity we will ignore all the details of parallel activity within the data link layer and assume that it is dedicated full time to handling just our one channel when a frame arrives at the receiver  the checksum is recomputed if the checksum in the frame is incorrect  i.e  there was a transmission error   the data link layer is so informed  event ? ? cksum err   if the inbound frame arrived undamaged  the data link layer is also informed  event ? ? frame arrival  so that it can acquire the frame for inspection using from physical layer as soon as the receiving data link layer has acquired an undamaged frame  it checks the control information in the header  and  if everything is all right  passes the packet portion to the network layer under no circumstances is a frame header ever given to a network layer there is a good reason why the network layer must never be given any part of the frame header  to keep the network and data link protocols completely separate as long as the network layer knows nothing at all about the data link protocol or the frame format  these things can be changed without requiring changes to the network layer ? s software this happens whenever a new nic is installed in a computer providing a rigid interface between the network and data link layers greatly simplifies the design task because communication protocols in different layers can evolve independently figure 3-11 shows some declarations  in c  common to many of the protocols to be discussed later five data structures are defined there  boolean  seq nr  packet  frame kind  and frame a boolean is an enumerated type and can take on the values true and false a seq nr is a small integer used to number the frames so that we can tell them apart these sequence numbers run from 0 up to and including max seq  which is defined in each protocol needing it a packet is the unit of information exchanged between the network layer and the data link layer on the same machine  or between network layer peers in our model it always contains max pkt bytes  but more realistically it would be of variable length a frame is composed of four fields  kind  seq  ack  and info  the first three of which contain control information and the last of which may contain actual data to be transferred these control fields are collectively called the frame header the kind field tells whether there are any data in the frame  because some of the protocols distinguish frames containing only control information from those containing data as well the seq and ack fields are used for sequence numbers and acknowledgements  respectively ; their use will be described in more detail later the info field of a data frame contains a single packet ; the info field of a sec 3.3 elementary data link protocols 219 control frame is not used a more realistic implementation would use a variablelength info field  omitting it altogether for control frames again  it is important to understand the relationship between a packet and a frame the network layer builds a packet by taking a message from the transport layer and adding the network layer header to it this packet is passed to the data link layer for inclusion in the info field of an outgoing frame when the frame arrives at the destination  the data link layer extracts the packet from the frame and passes the packet to the network layer in this manner  the network layer can act as though machines can exchange packets directly a number of procedures are also listed in fig 3-11 these are library routines whose details are implementation dependent and whose inner workings will not concern us further in the following discussions the procedure wait for event sits in a tight loop waiting for something to happen  as mentioned earlier the procedures to network layer and from network layer are used by the data link layer to pass packets to the network layer and accept packets from the network layer  respectively note that from physical layer and to physical layer pass frames between the data link layer and the physical layer in other words  to network layer and from network layer deal with the interface between layers 2 and 3  whereas from physical layer and to physical layer deal with the interface between layers 1 and 2 in most of the protocols  we assume that the channel is unreliable and loses entire frames upon occasion to be able to recover from such calamities  the sending data link layer must start an internal timer or clock whenever it sends a frame if no reply has been received within a certain predetermined time interval  the clock times out and the data link layer receives an interrupt signal in our protocols this is handled by allowing the procedure wait for event to return event ? ? timeout the procedures start timer and stop timer turn the timer on and off  respectively timeout events are possible only when the timer is running and before stop timer is called it is explicitly permitted to call start timer while the timer is running ; such a call simply resets the clock to cause the next timeout after a full timer interval has elapsed  unless it is reset or turned off   the procedures start ack timer and stop ack timer control an auxiliary timer used to generate acknowledgements under certain conditions the procedures enable network layer and disable network layer are used in the more sophisticated protocols  where we no longer assume that the network layer always has packets to send when the data link layer enables the network layer  the network layer is then permitted to interrupt when it has a packet to be sent we indicate this with event ? ? network layer ready when the network layer is disabled  it may not cause such events by being careful about when it enables and disables its network layer  the data link layer can prevent the network layer from swamping it with packets for which it has no buffer space frame sequence numbers are always in the range 0 to max seq  inclusive   where max seq is different for the different protocols it is frequently necessary 220 the data link layer chap 3 to advance a sequence number by 1 circularly  i.e  max seq is followed by 0   the macro inc performs this incrementing it has been defined as a macro because it is used in-line within the critical path as we will see later  the factor limiting network performance is often protocol processing  so defining simple operations like this as macros does not affect the readability of the code but does improve performance the declarations of fig 3-11 are part of each of the protocols we will discuss shortly to save space and to provide a convenient reference  they have been extracted and listed together  but conceptually they should be merged with the protocols themselves in c  this merging is done by putting the definitions in a special header file  in this case protocol.h  and using the # include facility of the c preprocessor to include them in the protocol files 3.3.1 a utopian simplex protocol as an initial example we will consider a protocol that is as simple as it can be because it does not worry about the possibility of anything going wrong data are transmitted in one direction only both the transmitting and receiving network layers are always ready processing time can be ignored infinite buffer space is available and best of all  the communication channel between the data link layers never damages or loses frames this thoroughly unrealistic protocol  which we will nickname ? ? utopia  ? ? is simply to show the basic structure on which we will build it ? s implementation is shown in fig 3-12 the protocol consists of two distinct procedures  a sender and a receiver the sender runs in the data link layer of the source machine  and the receiver runs in the data link layer of the destination machine no sequence numbers or acknowledgements are used here  so max seq is not needed the only event type possible is frame arrival  i.e  the arrival of an undamaged frame   the sender is in an infinite while loop just pumping data out onto the line as fast as it can the body of the loop consists of three actions  go fetch a packet from the  always obliging  network layer  construct an outbound frame using the variable s  and send the frame on its way only the info field of the frame is used by this protocol  because the other fields have to do with error and flow control and there are no errors or flow control restrictions here the receiver is equally simple initially  it waits for something to happen  the only possibility being the arrival of an undamaged frame eventually  the frame arrives and the procedure wait for event returns  with event set to frame arrival  which is ignored anyway   the call to from physical layer removes the newly arrived frame from the hardware buffer and puts it in the variable r  where the receiver code can get at it finally  the data portion is passed on to the network layer  and the data link layer settles back to wait for the next frame  effectively suspending itself until the frame arrives sec 3.3 elementary data link protocols 221 / * protocol 1  utopia  provides for data transmission in one direction only  from sender to receiver the communication channel is assumed to be error free and the receiver is assumed to be able to process all the input infinitely quickly consequently  the sender just sits in a loop pumping data out onto the line as fast as it can * / typedef enum  frame arrival  event type ; # include " protocol.h " void sender1  void   frame s ; / * buffer for an outbound frame * / packet buffer ; / * buffer for an outbound packet * / while  true   from network layer  &buffer  ; / * go get something to send * / s.info = buffer ; / * copy it into s for transmission * / to physical layer  &s  ; / * send it on its way * /  / * tomorrow  and tomorrow  and tomorrow  creeps in this petty pace from day to day to the last syllable of recorded time ? macbeth  v  v * /  void receiver1  void   frame r ; event type event ; / * filled in by wait  but not used here * / while  true   wait for event  &event  ; / * only possibility is frame arrival * / from physical layer  &r  ; / * go get the inbound frame * / to network layer  &r.info  ; / * pass the data to the network layer * /   figure 3-12 a utopian simplex protocol the utopia protocol is unrealistic because it does not handle either flow control or error correction its processing is close to that of an unacknowledged connectionless service that relies on higher layers to solve these problems  though even an unacknowledged connectionless service would do some error detection 3.3.2 a simplex stop-and-wait protocol for an error-free channel now we will tackle the problem of preventing the sender from flooding the receiver with frames faster than the latter is able to process them this situation can easily happen in practice so being able to prevent it is of great importance 222 the data link layer chap 3 the communication channel is still assumed to be error free  however  and the data traffic is still simplex one solution is to build the receiver to be powerful enough to process a continuous stream of back-to-back frames  or  equivalently  define the link layer to be slow enough that the receiver can keep up   it must have sufficient buffering and processing abilities to run at the line rate and must be able to pass the frames that are received to the network layer quickly enough however  this is a worst-case solution it requires dedicated hardware and can be wasteful of resources if the utilization of the link is mostly low moreover  it just shifts the problem of dealing with a sender that is too fast elsewhere ; in this case to the network layer a more general solution to this problem is to have the receiver provide feedback to the sender after having passed a packet to its network layer  the receiver sends a little dummy frame back to the sender which  in effect  gives the sender permission to transmit the next frame after having sent a frame  the sender is required by the protocol to bide its time until the little dummy  i.e  acknowledgement  frame arrives this delay is a simple example of a flow control protocol protocols in which the sender sends one frame and then waits for an acknowledgement before proceeding are called stop-and-wait figure 3-13 gives an example of a simplex stop-and-wait protocol although data traffic in this example is simplex  going only from the sender to the receiver  frames do travel in both directions consequently  the communication channel between the two data link layers needs to be capable of bidirectional information transfer however  this protocol entails a strict alternation of flow  first the sender sends a frame  then the receiver sends a frame  then the sender sends another frame  then the receiver sends another one  and so on a halfduplex physical channel would suffice here as in protocol 1  the sender starts out by fetching a packet from the network layer  using it to construct a frame  and sending it on its way but now  unlike in protocol 1  the sender must wait until an acknowledgement frame arrives before looping back and fetching the next packet from the network layer the sending data link layer need not even inspect the incoming frame as there is only one possibility the incoming frame is always an acknowledgement the only difference between receiver1 and receiver2 is that after delivering a packet to the network layer  receiver2 sends an acknowledgement frame back to the sender before entering the wait loop again because only the arrival of the frame back at the sender is important  not its contents  the receiver need not put any particular information in it 3.3.3 a simplex stop-and-wait protocol for a noisy channel now let us consider the normal situation of a communication channel that makes errors frames may be either damaged or lost completely however  we assume that if a frame is damaged in transit  the receiver hardware will detect this sec 3.3 elementary data link protocols 223 / * protocol 2  stop-and-wait  also provides for a one-directional flow of data from sender to receiver the communication channel is once again assumed to be error free  as in protocol 1 however  this time the receiver has only a finite buffer capacity and a finite processing speed  so the protocol must explicitly prevent the sender from flooding the receiver with data faster than it can be handled * / typedef enum  frame arrival  event type ; # include " protocol.h " void sender2  void   frame s ; / * buffer for an outbound frame * / packet buffer ; / * buffer for an outbound packet * / event type event ; / * frame arrival is the only possibility * / while  true   from network layer  &buffer  ; / * go get something to send * / s.info = buffer ; / * copy it into s for transmission * / to physical layer  &s  ; / * bye-bye little frame * / wait for event  &event  ; / * do not proceed until given the go ahead * /   void receiver2  void   frame r  s ; / * buffers for frames * / event type event ; / * frame arrival is the only possibility * / while  true   wait for event  &event  ; / * only possibility is frame arrival * / from physical layer  &r  ; / * go get the inbound frame * / to network layer  &r.info  ; / * pass the data to the network layer * / to physical layer  &s  ; / * send a dummy frame to awaken sender * /   figure 3-13 a simplex stop-and-wait protocol when it computes the checksum if the frame is damaged in such a way that the checksum is nevertheless correct ? an unlikely occurrence ? this protocol  and all other protocols  can fail  i.e  deliver an incorrect packet to the network layer   at first glance it might seem that a variation of protocol 2 would work  adding a timer the sender could send a frame  but the receiver would only send an acknowledgement frame if the data were correctly received if a damaged frame arrived at the receiver  it would be discarded after a while the sender would time out and send the frame again this process would be repeated until the frame finally arrived intact this scheme has a fatal flaw in it though think about the problem and try to discover what might go wrong before reading further 224 the data link layer chap 3 to see what might go wrong  remember that the goal of the data link layer is to provide error-free  transparent communication between network layer processes the network layer on machine a gives a series of packets to its data link layer  which must ensure that an identical series of packets is delivered to the network layer on machine b by its data link layer in particular  the network layer on b has no way of knowing that a packet has been lost or duplicated  so the data link layer must guarantee that no combination of transmission errors  however unlikely  can cause a duplicate packet to be delivered to a network layer consider the following scenario  1 the network layer on a gives packet 1 to its data link layer the packet is correctly received at b and passed to the network layer on b b sends an acknowledgement frame back to a 2 the acknowledgement frame gets lost completely it just never arrives at all life would be a great deal simpler if the channel mangled and lost only data frames and not control frames  but sad to say  the channel is not very discriminating 3 the data link layer on a eventually times out not having received an acknowledgement  it  incorrectly  assumes that its data frame was lost or damaged and sends the frame containing packet 1 again 4 the duplicate frame also arrives intact at the data link layer on b and is unwittingly passed to the network layer there if a is sending a file to b  part of the file will be duplicated  i.e  the copy of the file made by b will be incorrect and the error will not have been detected   in other words  the protocol will fail clearly  what is needed is some way for the receiver to be able to distinguish a frame that it is seeing for the first time from a retransmission the obvious way to achieve this is to have the sender put a sequence number in the header of each frame it sends then the receiver can check the sequence number of each arriving frame to see if it is a new frame or a duplicate to be discarded since the protocol must be correct and the sequence number field in the header is likely to be small to use the link efficiently  the question arises  what is the minimum number of bits needed for the sequence number ? the header might provide 1 bit  a few bits  1 byte  or multiple bytes for a sequence number depending on the protocol the important point is that it must carry sequence numbers that are large enough for the protocol to work correctly  or it is not much of a protocol the only ambiguity in this protocol is between a frame  m  and its direct successor  m ? ? 1 if frame m is lost or damaged  the receiver will not acknowledge it  so the sender will keep trying to send it once it has been correctly received  the receiver will send an acknowledgement to the sender it is here that the potential sec 3.3 elementary data link protocols 225 trouble crops up depending upon whether the acknowledgement frame gets back to the sender correctly or not  the sender may try to send m or m ? ? 1 at the sender  the event that triggers the transmission of frame m ? ? 1 is the arrival of an acknowledgement for frame m but this situation implies that m ? ? 1 has been correctly received  and furthermore that its acknowledgement has also been correctly received by the sender otherwise  the sender would not have begun with m  let alone have been considering m ? ? 1 as a consequence  the only ambiguity is between a frame and its immediate predecessor or successor  not between the predecessor and successor themselves a 1-bit sequence number  0 or 1  is therefore sufficient at each instant of time  the receiver expects a particular sequence number next when a frame containing the correct sequence number arrives  it is accepted and passed to the network layer  then acknowledged then the expected sequence number is incremented modulo 2  i.e  0 becomes 1 and 1 becomes 0   any arriving frame containing the wrong sequence number is rejected as a duplicate however  the last valid acknowledgement is repeated so that the sender can eventually discover that the frame has been received an example of this kind of protocol is shown in fig 3-14 protocols in which the sender waits for a positive acknowledgement before advancing to the next data item are often called arq  automatic repeat request  or par  positive acknowledgement with retransmission   like protocol 2  this one also transmits data only in one direction protocol 3 differs from its predecessors in that both sender and receiver have a variable whose value is remembered while the data link layer is in the wait state the sender remembers the sequence number of the next frame to send in next frame to send ; the receiver remembers the sequence number of the next frame expected in frame expected each protocol has a short initialization phase before entering the infinite loop after transmitting a frame  the sender starts the timer running if it was already running  it will be reset to allow another full timer interval the interval should be chosen to allow enough time for the frame to get to the receiver  for the receiver to process it in the worst case  and for the acknowledgement frame to propagate back to the sender only when that interval has elapsed is it safe to assume that either the transmitted frame or its acknowledgement has been lost  and to send a duplicate if the timeout interval is set too short  the sender will transmit unnecessary frames while these extra frames will not affect the correctness of the protocol  they will hurt performance after transmitting a frame and starting the timer  the sender waits for something exciting to happen only three possibilities exist  an acknowledgement frame arrives undamaged  a damaged acknowledgement frame staggers in  or the timer expires if a valid acknowledgement comes in  the sender fetches the next packet from its network layer and puts it in the buffer  overwriting the previous packet it also advances the sequence number if a damaged frame arrives or the 226 the data link layer chap 3 timer expires  neither the buffer nor the sequence number is changed so that a duplicate can be sent in all cases  the contents of the buffer  either the next packet or a duplicate  are then sent when a valid frame arrives at the receiver  its sequence number is checked to see if it is a duplicate if not  it is accepted  passed to the network layer  and an acknowledgement is generated duplicates and damaged frames are not passed to the network layer  but they do cause the last correctly received frame to be acknowledged to signal the sender to advance to the next frame or retransmit a damaged frame 3.4 sliding window protocols in the previous protocols  data frames were transmitted in one direction only in most practical situations  there is a need to transmit data in both directions one way of achieving full-duplex data transmission is to run two instances of one of the previous protocols  each using a separate link for simplex data traffic  in different directions   each link is then comprised of a ? ? forward ? ? channel  for data  and a ? ? reverse ? ? channel  for acknowledgements   in both cases the capacity of the reverse channel is almost entirely wasted a better idea is to use the same link for data in both directions after all  in protocols 2 and 3 it was already being used to transmit frames both ways  and the reverse channel normally has the same capacity as the forward channel in this model the data frames from a to b are intermixed with the acknowledgement frames from a to b by looking at the kind field in the header of an incoming frame  the receiver can tell whether the frame is data or an acknowledgement although interleaving data and control frames on the same link is a big improvement over having two separate physical links  yet another improvement is possible when a data frame arrives  instead of immediately sending a separate control frame  the receiver restrains itself and waits until the network layer passes it the next packet the acknowledgement is attached to the outgoing data frame  using the ack field in the frame header   in effect  the acknowledgement gets a free ride on the next outgoing data frame the technique of temporarily delaying outgoing acknowledgements so that they can be hooked onto the next outgoing data frame is known as piggybacking the principal advantage of using piggybacking over having distinct acknowledgement frames is a better use of the available channel bandwidth the ack field in the frame header costs only a few bits  whereas a separate frame would need a header  the acknowledgement  and a checksum in addition  fewer frames sent generally means a lighter processing load at the receiver in the next protocol to be examined  the piggyback field costs only 1 bit in the frame header it rarely costs more than a few bits however  piggybacking introduces a complication not present with separate acknowledgements how long should the data link layer wait for a packet onto sec 3.4 sliding window protocols 227 / * protocol 3  par  allows unidirectional data flow over an unreliable channel * / # define max seq 1 / * must be 1 for protocol 3 * / typedef enum  frame arrival  cksum err  timeout  event type ; # include " protocol.h " void sender3  void   seq nr next frame to send ; / * seq number of next outgoing frame * / frame s ; / * scratch variable * / packet buffer ; / * buffer for an outbound packet * / event type event ; next frame to send = 0 ; / * initialize outbound sequence numbers * / from network layer  &buffer  ; / * fetch first packet * / while  true   s.info = buffer ; / * construct a frame for transmission * / s.seq = next frame to send ; / * insert sequence number in frame * / to physical layer  &s  ; / * send it on its way * / start timer  s.seq  ; / * if answer takes too long  time out * / wait for event  &event  ; / * frame arrival  cksum err  timeout * / if  event = = frame arrival   from physical layer  &s  ; / * get the acknowledgement * / if  s.ack = = next frame to send   stop timer  s.ack  ; / * turn the timer off * / from network layer  &buffer  ; / * get the next one to send * / inc  next frame to send  ; / * invert next frame to send * /     void receiver3  void   seq nr frame expected ; frame r  s ; event type event ; frame expected = 0 ; while  true   wait for event  &event  ; / * possibilities  frame arrival  cksum err * / if  event = = frame arrival   / * a valid frame has arrived * / from physical layer  &r  ; / * go get the newly arrived frame * / if  r.seq = = frame expected   / * this is what we have been waiting for * / to network layer  &r.info  ; / * pass the data to the network layer * / inc  frame expected  ; / * next time expect the other sequence nr * /  s.ack = 1 ? ? frame expected ; / * tell which frame is being acked * / to physical layer  &s  ; / * send acknowledgement * /    figure 3-14 a positive acknowledgement with retransmission protocol 228 the data link layer chap 3 which to piggyback the acknowledgement ? if the data link layer waits longer than the sender ? s timeout period  the frame will be retransmitted  defeating the whole purpose of having acknowledgements if the data link layer were an oracle and could foretell the future  it would know when the next network layer packet was going to come in and could decide either to wait for it or send a separate acknowledgement immediately  depending on how long the projected wait was going to be of course  the data link layer can not foretell the future  so it must resort to some ad hoc scheme  such as waiting a fixed number of milliseconds if a new packet arrives quickly  the acknowledgement is piggybacked onto it otherwise  if no new packet has arrived by the end of this time period  the data link layer just sends a separate acknowledgement frame the next three protocols are bidirectional protocols that belong to a class called sliding window protocols the three differ among themselves in terms of efficiency  complexity  and buffer requirements  as discussed later in these  as in all sliding window protocols  each outbound frame contains a sequence number  ranging from 0 up to some maximum the maximum is usually 2n ? ? 1 so the sequence number fits exactly in an n-bit field the stop-and-wait sliding window protocol uses n ? ? 1  restricting the sequence numbers to 0 and 1  but more sophisticated versions can use an arbitrary n the essence of all sliding window protocols is that at any instant of time  the sender maintains a set of sequence numbers corresponding to frames it is permitted to send these frames are said to fall within the sending window similarly  the receiver also maintains a receiving window corresponding to the set of frames it is permitted to accept the sender ? s window and the receiver ? s window need not have the same lower and upper limits or even have the same size in some protocols they are fixed in size  but in others they can grow or shrink over the course of time as frames are sent and received although these protocols give the data link layer more freedom about the order in which it may send and receive frames  we have definitely not dropped the requirement that the protocol must deliver packets to the destination network layer in the same order they were passed to the data link layer on the sending machine nor have we changed the requirement that the physical communication channel is ? ? wire-like  ? ? that is  it must deliver all frames in the order sent the sequence numbers within the sender ? s window represent frames that have been sent or can be sent but are as yet not acknowledged whenever a new packet arrives from the network layer  it is given the next highest sequence number  and the upper edge of the window is advanced by one when an acknowledgement comes in  the lower edge is advanced by one in this way the window continuously maintains a list of unacknowledged frames figure 3-15 shows an example since frames currently within the sender ? s window may ultimately be lost or damaged in transit  the sender must keep all of these frames in its memory for possible retransmission thus  if the maximum window size is n  the sender needs n buffers to hold the unacknowledged frames if the window ever grows to its sec 3.4 sliding window protocols 229 sender receiver 7 6 1 5 2 0 4 3 7 6 1 5 2 0 4 3 7 6 1 5 2 0 4 3 7 6 1 5 2 0 4 3 7 6 1 5 2 0 4 3 7 6 1 5 2 0 4 3 7 6 1 5 2 0 4 3 7 6 1 5 2 0 4 3  a   b   c   d  figure 3-15 a sliding window of size 1  with a 3-bit sequence number  a  initially  b  after the first frame has been sent  c  after the first frame has been received  d  after the first acknowledgement has been received maximum size  the sending data link layer must forcibly shut off the network layer until another buffer becomes free the receiving data link layer ? s window corresponds to the frames it may accept any frame falling within the window is put in the receiver ? s buffer when a frame whose sequence number is equal to the lower edge of the window is received  it is passed to the network layer and the window is rotated by one any frame falling outside the window is discarded in all of these cases  a subsequent acknowledgement is generated so that the sender may work out how to proceed note that a window size of 1 means that the data link layer only accepts frames in order  but for larger windows this is not so the network layer  in contrast  is always fed data in the proper order  regardless of the data link layer ? s window size figure 3-15 shows an example with a maximum window size of 1 initially  no frames are outstanding  so the lower and upper edges of the sender ? s window are equal  but as time goes on  the situation progresses as shown unlike the sender ? s window  the receiver ? s window always remains at its initial size  rotating as the next frame is accepted and delivered to the network layer 3.4.1 a one-bit sliding window protocol before tackling the general case  let us examine a sliding window protocol with a window size of 1 such a protocol uses stop-and-wait since the sender transmits a frame and waits for its acknowledgement before sending the next one 230 the data link layer chap 3 figure 3-16 depicts such a protocol like the others  it starts out by defining some variables next frame to send tells which frame the sender is trying to send similarly  frame expected tells which frame the receiver is expecting in both cases  0 and 1 are the only possibilities / * protocol 4  sliding window  is bidirectional * / # define max seq 1 / * must be 1 for protocol 4 * / typedef enum  frame arrival  cksum err  timeout  event type ; # include " protocol.h " void protocol4  void   seq nr next frame to send ; / * 0 or 1 only * / seq nr frame expected ; / * 0 or 1 only * / frame r  s ; / * scratch variables * / packet buffer ; / * current packet being sent * / event type event ; next frame to send = 0 ; / * next frame on the outbound stream * / frame expected = 0 ; / * frame expected next * / from network layer  &buffer  ; / * fetch a packet from the network layer * / s.info = buffer ; / * prepare to send the initial frame * / s.seq = next frame to send ; / * insert sequence number into frame * / s.ack = 1 ? ? frame expected ; / * piggybacked ack * / to physical layer  &s  ; / * transmit the frame * / start timer  s.seq  ; / * start the timer running * / while  true   wait for event  &event  ; / * frame arrival  cksum err  or timeout * / if  event = = frame arrival   / * a frame has arrived undamaged * / from physical layer  &r  ; / * go get it * / if  r.seq = = frame expected   / * handle inbound frame stream * / to network layer  &r.info  ; / * pass packet to network layer * / inc  frame expected  ; / * invert seq number expected next * /  if  r.ack = = next frame to send   / * handle outbound frame stream * / stop timer  r.ack  ; / * turn the timer off * / from network layer  &buffer  ; / * fetch new pkt from network layer * / inc  next frame to send  ; / * invert sender ? s sequence number * /   s.info = buffer ; / * construct outbound frame * / s.seq = next frame to send ; / * insert sequence number into it * / s.ack = 1 ? ? frame expected ; / * seq number of last received frame * / to physical layer  &s  ; / * transmit a frame * / start timer  s.seq  ; / * start the timer running * /   figure 3-16 a 1-bit sliding window protocol sec 3.4 sliding window protocols 231 under normal circumstances  one of the two data link layers goes first and transmits the first frame in other words  only one of the data link layer programs should contain the to physical layer and start timer procedure calls outside the main loop the starting machine fetches the first packet from its network layer  builds a frame from it  and sends it when this  or any  frame arrives  the receiving data link layer checks to see if it is a duplicate  just as in protocol 3 if the frame is the one expected  it is passed to the network layer and the receiver ? s window is slid up the acknowledgement field contains the number of the last frame received without error if this number agrees with the sequence number of the frame the sender is trying to send  the sender knows it is done with the frame stored in buffer and can fetch the next packet from its network layer if the sequence number disagrees  it must continue trying to send the same frame whenever a frame is received  a frame is also sent back now let us examine protocol 4 to see how resilient it is to pathological scenarios assume that computer a is trying to send its frame 0 to computer b and that b is trying to send its frame 0 to a suppose that a sends a frame to b  but a ? s timeout interval is a little too short consequently  a may time out repeatedly  sending a series of identical frames  all with seq ? ? 0 and ack ? ? 1 when the first valid frame arrives at computer b  it will be accepted and frame expected will be set to a value of 1 all the subsequent frames received will be rejected because b is now expecting frames with sequence number 1  not 0 furthermore  since all the duplicates will have ack ? ? 1 and b is still waiting for an acknowledgement of 0  b will not go and fetch a new packet from its network layer after every rejected duplicate comes in  b will send a a frame containing seq ? ? 0 and ack ? ? 0 eventually  one of these will arrive correctly at a  causing a to begin sending the next packet no combination of lost frames or premature timeouts can cause the protocol to deliver duplicate packets to either network layer  to skip a packet  or to deadlock the protocol is correct however  to show how subtle protocol interactions can be  we note that a peculiar situation arises if both sides simultaneously send an initial packet this synchronization difficulty is illustrated by fig 3-17 in part  a   the normal operation of the protocol is shown in  b  the peculiarity is illustrated if b waits for a ? s first frame before sending one of its own  the sequence is as shown in  a   and every frame is accepted however  if a and b simultaneously initiate communication  their first frames cross  and the data link layers then get into situation  b   in  a  each frame arrival brings a new packet for the network layer ; there are no duplicates in  b  half of the frames contain duplicates  even though there are no transmission errors similar situations can occur as a result of premature timeouts  even when one side clearly starts first in fact  if multiple premature timeouts occur  frames may be sent three or more times  wasting valuable bandwidth 232 the data link layer chap 3 a sends  0  1  a0  a gets  0  0  b0  * a sends  1  0  a1  b gets  0  1  a0  * b sends  0  0  b0  b gets  1  0  a1  * b sends  1  1  b1  b gets  0  1  a2  * b sends  0  0  b2  b gets  1  0  a3  * b sends  1  1  b3  a gets  1  1  b1  * a sends  0  1  a2  a gets  0  0  b2  * a sends  1  0  a3  a sends  0  1  a0  a gets  0  1  b0  * a sends  0  0  a0  b gets  0  0  a0  b sends  1  0  b1  b sends  0  1  b0  b gets  0  1  a0  * b sends  0  0  b0  b gets  1  0  a1  * b sends  1  1  b1  b gets  1  1  a1  b sends  0  1  b2  a gets  0  0  b0  a sends  1  0  a1  a gets  1  0  b1  * a sends  1  1  a1  time  a   b  figure 3-17 two scenarios for protocol 4  a  normal case  b  abnormal case the notation is  seq  ack  packet number   an asterisk indicates where a network layer accepts a packet 3.4.2 a protocol using go-back-n until now we have made the tacit assumption that the transmission time required for a frame to arrive at the receiver plus the transmission time for the acknowledgement to come back is negligible sometimes this assumption is clearly false in these situations the long round-trip time can have important implications for the efficiency of the bandwidth utilization as an example  consider a 50-kbps satellite channel with a 500-msec round-trip propagation delay let us imagine trying to use protocol 4 to send 1000-bit frames via the satellite at t ? ? 0 the sender starts sending the first frame at t ? ? 20 msec the frame has been completely sent not until t ? ? 270 msec has the frame fully arrived at the receiver  and not until t ? ? 520 msec has the acknowledgement arrived back at the sender  under the best of circumstances  of no waiting in the receiver and a short acknowledgement frame   this means that the sender was blocked 500/520 or 96 % of the time in other words  only 4 % of the available bandwidth was used clearly  the combination of a long transit time  high bandwidth  and short frame length is disastrous in terms of efficiency the problem described here can be viewed as a consequence of the rule requiring a sender to wait for an acknowledgement before sending another frame if we relax that restriction  much better efficiency can be achieved basically  the solution lies in allowing the sender to transmit up to w frames before blocking  instead of just 1 with a large enough choice of w the sender will be able to continuously transmit frames since the acknowledgements will arrive for previous frames before the window becomes full  preventing the sender from blocking sec 3.4 sliding window protocols 233 to find an appropriate value for w we need to know how many frames can fit inside the channel as they propagate from sender to receiver this capacity is determined by the bandwidth in bits/sec multiplied by the one-way transit time  or the bandwidth-delay product of the link we can divide this quantity by the number of bits in a frame to express it as a number of frames call this quantity bd then w should be set to 2bd ? ? 1 twice the bandwidth-delay is the number of frames that can be outstanding if the sender continuously sends frames when the round-trip time to receive an acknowledgement is considered the ? ? + 1 ? ? is because an acknowledgement frame will not be sent until after a complete frame is received for the example link with a bandwidth of 50 kbps and a one-way transit time of 250 msec  the bandwidth-delay product is 12.5 kbit or 12.5 frames of 1000 bits each 2bd ? ? 1 is then 26 frames assume the sender begins sending frame 0 as before and sends a new frame every 20 msec by the time it has finished sending 26 frames  at t ? ? 520 msec  the acknowledgement for frame 0 will have just arrived thereafter  acknowledgements will arrive every 20 msec  so the sender will always get permission to continue just when it needs it from then onwards  25 or 26 unacknowledged frames will always be outstanding put in other terms  the sender ? s maximum window size is 26 for smaller window sizes  the utilization of the link will be less than 100 % since the sender will be blocked sometimes we can write the utilization as the fraction of time that the sender is not blocked  link utilization ? 1 ? ? 2bd w this value is an upper bound because it does not allow for any frame processing time and treats the acknowledgement frame as having zero length  since it is usually short the equation shows the need for having a large window w whenever the bandwidth-delay product is large if the delay is high  the sender will rapidly exhaust its window even for a moderate bandwidth  as in the satellite example if the bandwidth is high  even for a moderate delay the sender will exhaust its window quickly unless it has a large window  e.g  a 1-gbps link with 1-msec delay holds 1 megabit   with stop-and-wait for which w ? ? 1  if there is even one frame ? s worth of propagation delay the efficiency will be less than 50 %  this technique of keeping multiple frames in flight is an example of pipelining pipelining frames over an unreliable communication channel raises some serious issues first  what happens if a frame in the middle of a long stream is damaged or lost ? large numbers of succeeding frames will arrive at the receiver before the sender even finds out that anything is wrong when a damaged frame arrives at the receiver  it obviously should be discarded  but what should the receiver do with all the correct frames following it ? remember that the receiving data link layer is obligated to hand packets to the network layer in sequence 234 the data link layer chap 3 two basic approaches are available for dealing with errors in the presence of pipelining  both of which are shown in fig 3-18 0 1 0 1 e d d d d d d 2 3 4 5 6 7 8 2 3 4 5 6 7 8 2 3 4 5 6 7 8 9 timeout interval error frames discarded by data link layer frames buffered by data link layer ack0 ack1 time  a   b  0 1 0 1 e 9 10 11 12 13 14 2 3 4 5 2 6 7 8 9 10 11 12 13 14 15 8 error ack 0 ack 1 nak 2 3 4 5 2 6 ack 5 ack 6 7 ack 7 ack 8 ack 9 ack 11 ack 12 ack 13 ack 10 ack 2 ack 3 ack 4 ack 5 ack 6 ack 7 figure 3-18 pipelining and error recovery effect of an error when  a  receiver ? s window size is 1 and  b  receiver ? s window size is large one option  called go-back-n  is for the receiver simply to discard all subsequent frames  sending no acknowledgements for the discarded frames this strategy corresponds to a receive window of size 1 in other words  the data link layer refuses to accept any frame except the next one it must give to the network layer if the sender ? s window fills up before the timer runs out  the pipeline will begin to empty eventually  the sender will time out and retransmit all unacknowledged frames in order  starting with the damaged or lost one this approach can waste a lot of bandwidth if the error rate is high in fig 3-18  b  we see go-back-n for the case in which the receiver ? s window is large frames 0 and 1 are correctly received and acknowledged frame 2  however  is damaged or lost the sender  unaware of this problem  continues to send frames until the timer for frame 2 expires then it backs up to frame 2 and starts over with it  sending 2  3  4  etc all over again the other general strategy for handling errors when frames are pipelined is called selective repeat when it is used  a bad frame that is received is discarded  but any good frames received after it are accepted and buffered when the sender times out  only the oldest unacknowledged frame is retransmitted if that frame sec 3.4 sliding window protocols 235 arrives correctly  the receiver can deliver to the network layer  in sequence  all the frames it has buffered selective repeat corresponds to a receiver window larger than 1 this approach can require large amounts of data link layer memory if the window is large selective repeat is often combined with having the receiver send a negative acknowledgement  nak  when it detects an error  for example  when it receives a checksum error or a frame out of sequence naks stimulate retransmission before the corresponding timer expires and thus improve performance in fig 3-18  b   frames 0 and 1 are again correctly received and acknowledged and frame 2 is lost when frame 3 arrives at the receiver  the data link layer there notices that it has missed a frame  so it sends back a nak for 2 but buffers 3 when frames 4 and 5 arrive  they  too  are buffered by the data link layer instead of being passed to the network layer eventually  the nak 2 gets back to the sender  which immediately resends frame 2 when that arrives  the data link layer now has 2  3  4  and 5 and can pass all of them to the network layer in the correct order it can also acknowledge all frames up to and including 5  as shown in the figure if the nak should get lost  eventually the sender will time out for frame 2 and send it  and only it  of its own accord  but that may be a quite a while later these two alternative approaches are trade-offs between efficient use of bandwidth and data link layer buffer space depending on which resource is scarcer  one or the other can be used figure 3-19 shows a go-back-n protocol in which the receiving data link layer only accepts frames in order ; frames following an error are discarded in this protocol  for the first time we have dropped the assumption that the network layer always has an infinite supply of packets to send when the network layer has a packet it wants to send  it can cause a network layer ready event to happen however  to enforce the flow control limit on the sender window or the number of unacknowledged frames that may be outstanding at any time  the data link layer must be able to keep the network layer from bothering it with more work the library procedures enable network layer and disable network layer do this job the maximum number of frames that may be outstanding at any instant is not the same as the size of the sequence number space for go-back-n  max seq frames may be outstanding at any instant  even though there are max seq ? ? 1 distinct sequence numbers  which are 0  1      max seq   we will see an even tighter restriction for the next protocol  selective repeat to see why this restriction is required  consider the following scenario with max seq ? ? 7  1 the sender sends frames 0 through 7 2 a piggybacked acknowledgement for 7 comes back to the sender 3 the sender sends another eight frames  again with sequence numbers 0 through 7 4 now another piggybacked acknowledgement for frame 7 comes in 236 the data link layer chap 3 / * protocol 5  go-back-n  allows multiple outstanding frames the sender may transmit up to max seq frames without waiting for an ack in addition  unlike in the previous protocols  the network layer is not assumed to have a new packet all the time instead  the network layer causes a network layer ready event when there is a packet to send * / # define max seq 7 typedef enum  frame arrival  cksum err  timeout  network layer ready  event type ; # include " protocol.h " static boolean between  seq nr a  seq nr b  seq nr c   / * return true if a < = b < c circularly ; false otherwise * / if    a < = b  &&  b < c   | |   c < a  &&  a < = b   | |   b < c  &&  c < a    return  true  ; else return  false  ;  static void send data  seq nr frame nr  seq nr frame expected  packet buffer     / * construct and send a data frame * / frame s ; / * scratch variable * / s.info = buffer  frame nr  ; / * insert packet into frame * / s.seq = frame nr ; / * insert sequence number into frame * / s.ack =  frame expected + max seq  %  max seq + 1  ; / * piggyback ack * / to physical layer  &s  ; / * transmit the frame * / start timer  frame nr  ; / * start the timer running * /  void protocol5  void   seq nr next frame to send ; / * max seq > 1 ; used for outbound stream * / seq nr ack expected ; / * oldest frame as yet unacknowledged * / seq nr frame expected ; / * next frame expected on inbound stream * / frame r ; / * scratch variable * / packet buffer  max seq + 1  ; / * buffers for the outbound stream * / seq nr nbuffered ; / * number of output buffers currently in use * / seq nr i ; / * used to index into the buffer array * / event type event ; enable network layer   ; / * allow network layer ready events * / ack expected = 0 ; / * next ack expected inbound * / next frame to send = 0 ; / * next frame going out * / frame expected = 0 ; / * number of frame expected inbound * / nbuffered = 0 ; / * initially no packets are buffered * / while  true   wait for event  &event  ; / * four possibilities  see event type above * / sec 3.4 sliding window protocols 237 switch  event   case network layer ready  / * the network layer has a packet to send * / / * accept  save  and transmit a new frame * / from network layer  &buffer  next frame to send   ; / * fetch new packet * / nbuffered = nbuffered + 1 ; / * expand the sender ? s window * / send data  next frame to send  frame expected  buffer  ; / * transmit the frame * / inc  next frame to send  ; / * advance sender ? s upper window edge * / break ; case frame arrival  / * a data or control frame has arrived * / from physical layer  &r  ; / * get incoming frame from physical layer * / if  r.seq = = frame expected   / * frames are accepted only in order * / to network layer  &r.info  ; / * pass packet to network layer * / inc  frame expected  ; / * advance lower edge of receiver ? s window * /  / * ack n implies n ? ? 1  n ? ? 2  etc check for this * / while  between  ack expected  r.ack  next frame to send    / * handle piggybacked ack * / nbuffered = nbuffered ? ? 1 ; / * one frame fewer buffered * / stop timer  ack expected  ; / * frame arrived intact ; stop timer * / inc  ack expected  ; / * contract sender ? s window * /  break ; case cksum err  break ; / * just ignore bad frames * / case timeout  / * trouble ; retransmit all outstanding frames * / next frame to send = ack expected ; / * start retransmitting here * / for  i = 1 ; i < = nbuffered ; i + +   send data  next frame to send  frame expected  buffer  ; / * resend frame * / inc  next frame to send  ; / * prepare to send the next one * /   if  nbuffered < max seq  enable network layer   ; else disable network layer   ;   figure 3-19 a sliding window protocol using go-back-n the question is this  did all eight frames belonging to the second batch arrive successfully  or did all eight get lost  counting discards following an error as lost  ? in both cases the receiver would be sending frame 7 as the acknowledgement 238 the data link layer chap 3 the sender has no way of telling for this reason the maximum number of outstanding frames must be restricted to max seq although protocol 5 does not buffer the frames arriving after an error  it does not escape the problem of buffering altogether since a sender may have to retransmit all the unacknowledged frames at a future time  it must hang on to all transmitted frames until it knows for sure that they have been accepted by the receiver when an acknowledgement comes in for frame n  frames n ? ? 1  n ? ? 2  and so on are also automatically acknowledged this type of acknowledgement is called a cumulative acknowledgement this property is especially important when some of the previous acknowledgement-bearing frames were lost or garbled whenever any acknowledgement comes in  the data link layer checks to see if any buffers can now be released if buffers can be released  i.e  there is some room available in the window   a previously blocked network layer can now be allowed to cause more network layer ready events for this protocol  we assume that there is always reverse traffic on which to piggyback acknowledgements protocol 4 does not need this assumption since it sends back one frame every time it receives a frame  even if it has already sent that frame in the next protocol we will solve the problem of one-way traffic in an elegant way because protocol 5 has multiple outstanding frames  it logically needs multiple timers  one per outstanding frame each frame times out independently of all the other ones however  all of these timers can easily be simulated in software using a single hardware clock that causes interrupts periodically the pending timeouts form a linked list  with each node of the list containing the number of clock ticks until the timer expires  the frame being timed  and a pointer to the next node 10  00  00.000 10  00  00.005 5 1 8 2 6 3 8 2 6 3 real time pointer to next timeout frame being timed ticks to go  a   b  figure 3-20 simulation of multiple timers in software  a  the queued timeouts  b  the situation after the first timeout has expired as an illustration of how the timers could be implemented  consider the example of fig 3-20  a   assume that the clock ticks once every 1 msec initially  sec 3.4 sliding window protocols 239 the real time is 10  00  00.000 ; three timeouts are pending  at 10  00  00.005  10  00  00.013  and 10  00  00.019 every time the hardware clock ticks  the real time is updated and the tick counter at the head of the list is decremented when the tick counter becomes zero  a timeout is caused and the node is removed from the list  as shown in fig 3-20  b   although this organization requires the list to be scanned when start timer or stop timer is called  it does not require much work per tick in protocol 5  both of these routines have been given a parameter indicating which frame is to be timed 3.4.3 a protocol using selective repeat the go-back-n protocol works well if errors are rare  but if the line is poor it wastes a lot of bandwidth on retransmitted frames an alternative strategy  the selective repeat protocol  is to allow the receiver to accept and buffer the frames following a damaged or lost one in this protocol  both sender and receiver maintain a window of outstanding and acceptable sequence numbers  respectively the sender ? s window size starts out at 0 and grows to some predefined maximum the receiver ? s window  in contrast  is always fixed in size and equal to the predetermined maximum the receiver has a buffer reserved for each sequence number within its fixed window associated with each buffer is a bit  arrived  telling whether the buffer is full or empty whenever a frame arrives  its sequence number is checked by the function between to see if it falls within the window if so and if it has not already been received  it is accepted and stored this action is taken without regard to whether or not the frame contains the next packet expected by the network layer of course  it must be kept within the data link layer and not passed to the network layer until all the lower-numbered frames have already been delivered to the network layer in the correct order a protocol using this algorithm is given in fig 3-21 nonsequential receive introduces further constraints on frame sequence numbers compared to protocols in which frames are only accepted in order we can illustrate the trouble most easily with an example suppose that we have a 3-bit sequence number  so that the sender is permitted to transmit up to seven frames before being required to wait for an acknowledgement initially  the sender ? s and receiver ? s windows are as shown in fig 3-22  a   the sender now transmits frames 0 through 6 the receiver ? s window allows it to accept any frame with a sequence number between 0 and 6 inclusive all seven frames arrive correctly  so the receiver acknowledges them and advances its window to allow receipt of 7  0  1  2  3  4  or 5  as shown in fig 3-22  b   all seven buffers are marked empty it is at this point that disaster strikes in the form of a lightning bolt hitting the telephone pole and wiping out all the acknowledgements the protocol should operate correctly despite this disaster the sender eventually times out and retransmits frame 0 when this frame arrives at the receiver  a check is made to see if it falls within the receiver ? s window unfortunately  in fig 3-22  b  frame 0 is 240 the data link layer chap 3 / * protocol 6  selective repeat  accepts frames out of order but passes packets to the network layer in order associated with each outstanding frame is a timer when the timer expires  only that frame is retransmitted  not all the outstanding frames  as in protocol 5 * / # define max seq 7 / * should be 2 ? n ? ? 1 * / # define nr bufs   max seq + 1  /2  typedef enum  frame arrival  cksum err  timeout  network layer ready  ack timeout  event type ; # include " protocol.h " boolean no nak = true ; / * no nak has been sent yet * / seq nr oldest frame = max seq + 1 ; / * initial value is only for the simulator * / static boolean between  seq nr a  seq nr b  seq nr c   / * same as between in protocol 5  but shorter and more obscure * / return   a < = b  &&  b < c   | |   c < a  &&  a < = b   | |   b < c  &&  c < a   ;  static void send frame  frame kind fk  seq nr frame nr  seq nr frame expected  packet buffer     / * construct and send a data  ack  or nak frame * / frame s ; / * scratch variable * / s.kind = fk ; / * kind = = data  ack  or nak * / if  fk = = data  s.info = buffer  frame nr % nr bufs  ; s.seq = frame nr ; / * only meaningful for data frames * / s.ack =  frame expected + max seq  %  max seq + 1  ; if  fk = = nak  no nak = false ; / * one nak per frame  please * / to physical layer  &s  ; / * transmit the frame * / if  fk = = data  start timer  frame nr % nr bufs  ; stop ack timer   ; / * no need for separate ack frame * /  void protocol6  void   seq nr ack expected ; / * lower edge of sender ? s window * / seq nr next frame to send ; / * upper edge of sender ? s window + 1 * / seq nr frame expected ; / * lower edge of receiver ? s window * / seq nr too far ; / * upper edge of receiver ? s window + 1 * / int i ; / * index into buffer pool * / frame r ; / * scratch variable * / packet out buf  nr bufs  ; / * buffers for the outbound stream * / packet in buf  nr bufs  ; / * buffers for the inbound stream * / boolean arrived  nr bufs  ; / * inbound bit map * / seq nr nbuffered ; / * how many output buffers currently used * / event type event ; enable network layer   ; / * initialize * / ack expected = 0 ; / * next ack expected on the inbound stream * / next frame to send = 0 ; / * number of next outgoing frame * / frame expected = 0 ; too far = nr bufs ; nbuffered = 0 ; / * initially no packets are buffered * / for  i = 0 ; i < nr bufs ; i + +  arrived  i  = false ; sec 3.4 sliding window protocols 241 while  true   wait for event  &event  ; / * five possibilities  see event type above * / switch  event   case network layer ready  / * accept  save  and transmit a new frame * / nbuffered = nbuffered + 1 ; / * expand the window * / from network layer  &out buf  next frame to send % nr bufs   ; / * fetch new packet * / send frame  data  next frame to send  frame expected  out buf  ; / * transmit the frame * / inc  next frame to send  ; / * advance upper window edge * / break ; case frame arrival  / * a data or control frame has arrived * / from physical layer  &r  ; / * fetch incoming frame from physical layer * / if  r.kind = = data   / * an undamaged frame has arrived * / if   r.seq ! = frame expected  && no nak  send frame  nak  0  frame expected  out buf  ; else start ack timer   ; if  between  frame expected,r.seq,too far  &&  arrived  r.seq % nr bufs  = = false    / * frames may be accepted in any order * / arrived  r.seq % nr bufs  = true ; / * mark buffer as full * / in buf  r.seq % nr bufs  = r.info ; / * insert data into buffer * / while  arrived  frame expected % nr bufs    / * pass frames and advance window * / to network layer  &in buf  frame expected % nr bufs   ; no nak = true ; arrived  frame expected % nr bufs  = false ; inc  frame expected  ; / * advance lower edge of receiver ? s window * / inc  too far  ; / * advance upper edge of receiver ? s window * / start ack timer   ; / * to see if a separate ack is needed * /    if   r.kind = = nak  && between  ack expected   r.ack + 1  %  max seq + 1  ,next frame to send   send frame  data   r.ack + 1  %  max seq + 1   frame expected  out buf  ; while  between  ack expected  r.ack  next frame to send    nbuffered = nbuffered ? ? 1 ; / * handle piggybacked ack * / stop timer  ack expected % nr bufs  ; / * frame arrived intact * / inc  ack expected  ; / * advance lower edge of sender ? s window * /  break ; case cksum err  if  no nak  send frame  nak  0  frame expected  out buf  ; / * damaged frame * / break ; case timeout  send frame  data  oldest frame  frame expected  out buf  ; / * we timed out * / break ; case ack timeout  send frame  ack,0,frame expected  out buf  ; / * ack timer expired ; send ack * /  if  nbuffered < nr bufs  enable network layer   ; else disable network layer   ;   figure 3-21 a sliding window protocol using selective repeat 242 the data link layer chap 3 within the new window  so it is accepted as a new frame the receiver also sends a  piggybacked  acknowledgement for frame 6  since 0 through 6 have been received the sender is happy to learn that all its transmitted frames did actually arrive correctly  so it advances its window and immediately sends frames 7  0  1  2  3  4  and 5 frame 7 will be accepted by the receiver and its packet will be passed directly to the network layer immediately thereafter  the receiving data link layer checks to see if it has a valid frame 0 already  discovers that it does  and passes the old buffered packet to the network layer as if it were a new packet consequently  the network layer gets an incorrect packet  and the protocol fails the essence of the problem is that after the receiver advanced its window  the new range of valid sequence numbers overlapped the old one consequently  the following batch of frames might be either duplicates  if all the acknowledgements were lost  or new ones  if all the acknowledgements were received   the poor receiver has no way of distinguishing these two cases the way out of this dilemma lies in making sure that after the receiver has advanced its window there is no overlap with the original window to ensure that there is no overlap  the maximum window size should be at most half the range of the sequence numbers this situation is shown in fig 3-22  c  and fig 3-22  d   with 3 bits  the sequence numbers range from 0 to 7 only four unacknowledged frames should be outstanding at any instant that way  if the receiver has just accepted frames 0 through 3 and advanced its window to permit acceptance of frames 4 through 7  it can unambiguously tell if subsequent frames are retransmissions  0 through 3  or new ones  4 through 7   in general  the window size for protocol 6 will be  max seq ? ? 1  /2 an interesting question is  how many buffers must the receiver have ? under no conditions will it ever accept frames whose sequence numbers are below the lower edge of the window or frames whose sequence numbers are above the upper edge of the window consequently  the number of buffers needed is equal to the window size  not to the range of sequence numbers in the preceding example of a 3-bit sequence number  four buffers  numbered 0 through 3  are needed when frame i arrives  it is put in buffer i mod 4 notice that although i and  i ? ? 4  mod 4 are ? ? competing ? ? for the same buffer  they are never within the window at the same time  because that would imply a window size of at least 5 for the same reason  the number of timers needed is equal to the number of buffers  not to the size of the sequence space effectively  a timer is associated with each buffer when the timer runs out  the contents of the buffer are retransmitted protocol 6 also relaxes the implicit assumption that the channel is heavily loaded we made this assumption in protocol 5 when we relied on frames being sent in the reverse direction on which to piggyback acknowledgements if the reverse traffic is light  the acknowledgements may be held up for a long period of time  which can cause problems in the extreme  if there is a lot of traffic in one sec 3.4 sliding window protocols 243 sender receiver 0 1 2 3 4 5 6 7 0 1 2 3 4 5 6 7 0 1 2 3 4 5 6 7 0 1 2 3 4 5 6 7 0 1 2 3 4 5 6 7 0 1 2 3 4 5 6 7 0 1 2 3 4 5 6 7 0 1 2 3 4 5 6 7  a   b   c   d  figure 3-22  a  initial situation with a window of size7  b  after 7 frames have been sent and received but not acknowledged  c  initial situation with a window size of 4  d  after 4 frames have been sent and received but not acknowledged direction and no traffic in the other direction  the protocol will block when the sender window reaches its maximum to relax this assumption  an auxiliary timer is started by start ack timer after an in-sequence data frame arrives if no reverse traffic has presented itself before this timer expires  a separate acknowledgement frame is sent an interrupt due to the auxiliary timer is called an ack timeout event with this arrangement  traffic flow in only one direction is possible because the lack of reverse data frames onto which acknowledgements can be piggybacked is no longer an obstacle only one auxiliary timer exists  and if start ack timer is called while the timer is running  it has no effect the timer is not reset or extended since its purpose is to provide some minimum rate of acknowledgements it is essential that the timeout associated with the auxiliary timer be appreciably shorter than the timeout used for timing out data frames this condition is required to ensure that a correctly received frame is acknowledged early enough that the frame ? s retransmission timer does not expire and retransmit the frame protocol 6 uses a more efficient strategy than protocol 5 for dealing with errors whenever the receiver has reason to suspect that an error has occurred  it sends a negative acknowledgement  nak  frame back to the sender such a frame is a request for retransmission of the frame specified in the nak in two cases  the receiver should be suspicious  when a damaged frame arrives or a frame other than the expected one arrives  potential lost frame   to avoid making multiple requests for retransmission of the same lost frame  the receiver should keep track of whether a nak has already been sent for a given frame the variable no nak in protocol 6 is true if no nak has been sent yet for frame expected if the nak gets mangled or lost  no real harm is done  since the sender will eventually time out and retransmit the missing frame anyway if the wrong frame arrives after a nak has been sent and lost  no nak will be true and the auxiliary timer will be started when it expires  an ack will be sent to resynchronize the sender to the receiver ? s current status 244 the data link layer chap 3 in some situations  the time required for a frame to propagate to the destination  be processed there  and have the acknowledgement come back is  nearly  constant in these situations  the sender can adjust its timer to be ? ? tight  ? ? just slightly larger than the normal time interval expected between sending a frame and receiving its acknowledgement naks are not useful in this case however  in other situations the time can be highly variable for example  if the reverse traffic is sporadic  the time before acknowledgement will be shorter when there is reverse traffic and longer when there is not the sender is faced with the choice of either setting the interval to a small value  and risking unnecessary retransmissions   or setting it to a large value  and going idle for a long period after an error   both choices waste bandwidth in general  if the standard deviation of the acknowledgement interval is large compared to the interval itself  the timer is set ? ? loose ? ? to be conservative naks can then appreciably speed up retransmission of lost or damaged frames closely related to the matter of timeouts and naks is the question of determining which frame caused a timeout in protocol 5  it is always ack expected  because it is always the oldest in protocol 6  there is no trivial way to determine who timed out suppose that frames 0 through 4 have been transmitted  meaning that the list of outstanding frames is 01234  in order from oldest to youngest now imagine that 0 times out  5  a new frame  is transmitted  1 times out  2 times out  and 6  another new frame  is transmitted at this point the list of outstanding frames is 3405126  from oldest to youngest if all inbound traffic  i.e  acknowledgement bearing frames  is lost for a while  the seven outstanding frames will time out in that order to keep the example from getting even more complicated than it already is  we have not shown the timer administration instead  we just assume that the variable oldest frame is set upon timeout to indicate which frame timed out 3.5 example data link protocols within a single building  lans are widely used for interconnection  but most wide-area network infrastructure is built up from point-to-point lines in chap 4  we will look at lans here we will examine the data link protocols found on point-to-point lines in the internet in two common situations the first situation is when packets are sent over sonet optical fiber links in wide-area networks these links are widely used  for example  to connect routers in the different locations of an isp ? s network the second situation is for adsl links running on the local loop of the telephone network at the edge of the internet these links connect millions of individuals and businesses to the internet the internet needs point-to-point links for these uses  as well as dial-up modems  leased lines  and cable modems  and so on a standard protocol called ppp sec 3.5 example data link protocols 245  point-to-point protocol  is used to send packets over these links ppp is defined in rfc 1661 and further elaborated in rfc 1662 and other rfcs  simpson  1994a  1994b   sonet and adsl links both apply ppp  but in different ways 3.5.1 packet over sonet sonet  which we covered in sec 2.6.4  is the physical layer protocol that is most commonly used over the wide-area optical fiber links that make up the backbone of communications networks  including the telephone system it provides a bitstream that runs at a well-defined rate  for example 2.4 gbps for an oc-48 link this bitstream is organized as fixed-size byte payloads that recur every 125 ? sec  whether or not there is user data to send to carry packets across these links  some framing mechanism is needed to distinguish occasional packets from the continuous bitstream in which they are transported ppp runs on ip routers to provide this mechanism  as shown in fig 3-23 ip sonet ppp optical fiber router ip packet ppp frame sonet payload sonet payload  a   b  ip sonet ppp figure 3-23 packet over sonet  a  a protocol stack  b  frame relationships ppp improves on an earlier  simpler protocol called slip  serial line internet protocol  and is used to handle error detection link configuration  support multiple protocols  permit authentication  and more with a wide set of options  ppp provides three main features  1 a framing method that unambiguously delineates the end of one frame and the start of the next one the frame format also handles error detection 2 a link control protocol for bringing lines up  testing them  negotiating options  and bringing them down again gracefully when they are no longer needed this protocol is called lcp  link control protocol   3 a way to negotiate network-layer options in a way that is independent of the network layer protocol to be used the method chosen is to have a different ncp  network control protocol  for each network layer supported 246 the data link layer chap 3 the ppp frame format was chosen to closely resemble the frame format of hdlc  high-level data link control   a widely used instance of an earlier family of protocols  since there was no need to reinvent the wheel the primary difference between ppp and hdlc is that ppp is byte oriented rather than bit oriented in particular  ppp uses byte stuffing and all frames are an integral number of bytes hdlc uses bit stuffing and allows frames of  say  30.25 bytes there is a second major difference in practice  however hdlc provides reliable transmission with a sliding window  acknowledgements  and timeouts in the manner we have studied ppp can also provide reliable transmission in noisy environments  such as wireless networks ; the exact details are defined in rfc 1663 however  this is rarely done in practice instead  an ? ? unnumbered mode ? ? is nearly always used in the internet to provide connectionless unacknowledged service the ppp frame format is shown in fig 3-24 all ppp frames begin with the standard hdlc flag byte of 0x7e  01111110   the flag byte is stuffed if it occurs within the payload field using the escape byte 0x7d the following byte is the escaped byte xored with 0x20  which flips the 5th bit for example  0x7d 0x5e is the escape sequence for the flag byte 0x7e this means the start and end of frames can be searched for simply by scanning for the byte 0x7e since it will not occur elsewhere the destuffing rule when receiving a frame is to look for 0x7d  remove it  and xor the following byte with 0x20 also  only one flag byte is needed between frames multiple flag bytes can be used to fill the link when there are no frames to be sent after the start-of-frame flag byte comes the address field this field is always set to the binary value 11111111 to indicate that all stations are to accept the frame using this value avoids the issue of having to assign data link addresses flag 01111110 flag 01111110 address 11111111 control protocol 00000011 payload checksum bytes 1 1 1 1 or 2 variable 2 or 4 1 figure 3-24 the ppp full frame format for unnumbered mode operation the address field is followed by the control field  the default value of which is 00000011 this value indicates an unnumbered frame since the address and control fields are always constant in the default configuration  lcp provides the necessary mechanism for the two parties to negotiate an option to omit them altogether and save 2 bytes per frame the fourth ppp field is the protocol field its job is to tell what kind of packet is in the payload field codes starting with a 0 bit are defined for ip version 4  ip version 6  and other network layer protocols that might be used  such as ipx and sec 3.5 example data link protocols 247 appletalk codes starting with a 1 bit are used for ppp configuration protocols  including lcp and a different ncp for each network layer protocol supported the default size of the protocol field is 2 bytes  but it can be negotiated down to 1 byte using lcp the designers were perhaps overly cautious in thinking that someday there might be more than 256 protocols in use the payload field is variable length  up to some negotiated maximum if the length is not negotiated using lcp during line setup  a default length of 1500 bytes is used padding may follow the payload if it is needed after the payload field comes the checksum field  which is normally 2 bytes  but a 4-byte checksum can be negotiated the 4-byte checksum is in fact the same 32-bit crc whose generator polynomial is given at the end of sec 3.2.2 the 2 byte checksum is also an industry-standard crc ppp is a framing mechanism that can carry the packets of multiple protocols over many types of physical layers to use ppp over sonet  the choices to make are spelled out in rfc 2615  malis and simpson  1999   a 4-byte checksum is used  since this is the primary means of detecting transmission errors over the physical  link  and network layers it is recommended that the address  control  and protocol fields not be compressed  since sonet links already run at relatively high rates there is also one unusual feature the ppp payload is scrambled  as described in sec 2.5.1  before it is inserted into the sonet payload scrambling xors the payload with a long pseudorandom sequence before it is transmitted the issue is that the sonet bitstream needs frequent bit transitions for synchronization these transitions come naturally with the variation in voice signals  but in data communication the user chooses the information that is sent and might send a packet with a long run of 0s with scrambling  the likelihood of a user being able to cause problems by sending a long run of 0s is made extremely low before ppp frames can be carried over sonet lines  the ppp link must be established and configured the phases that the link goes through when it is brought up  used  and taken down again are shown in fig 3-25 the link starts in the dead state  which means that there is no connection at the physical layer when a physical layer connection is established  the link moves to establish at this point  the ppp peers exchange a series of lcp packets  each carried in the payload field of a ppp frame  to select the ppp options for the link from the possibilities mentioned above the initiating peer proposes options  and the responding peer either accepts or rejects them  in whole or part the responder can also make alternative proposals if lcp option negotiation is successful  the link reaches the authenticate state now the two parties can check each other ? s identities  if desired if authentication is successful  the network state is entered and a series of ncp packets are sent to configure the network layer it is difficult to generalize about the ncp protocols because each one is specific to some network layer protocol and allows configuration requests to be made that are specific to that protocol 248 the data link layer chap 3 dead network terminate open establish authenticate carrier detected both sides agree on options authentication successful ncp configuration carrier dropped failed failed done figure 3-25 state diagram for bringing a ppp link up and down for ip  for example  the assignment of ip addresses to both ends of the link is the most important possibility once open is reached  data transport can take place it is in this state that ip packets are carried in ppp frames across the sonet line when data transport is finished  the link moves into the terminate state  and from there it moves back to the dead state when the physical layer connection is dropped 3.5.2 adsl  asymmetric digital subscriber loop  adsl connects millions of home subscribers to the internet at megabit/sec rates over the same telephone local loop that is used for plain old telephone service in sec 2.5.3  we described how a device called a dsl modem is added on the home side it sends bits over the local loop to a device called a dslam  dsl access multiplexer   pronounced ? ? dee-slam  ? ? in the telephone company ? s local office now we will explore in more detail how packets are carried over adsl links the overall picture for the protocols and devices used with adsl is shown in fig 3-26 different protocols are deployed in different networks  so we have chosen to show the most popular scenario inside the home  a computer such as a pc sends ip packets to the dsl modem using a link layer like ethernet the dsl modem then sends the ip packets over the local loop to the dslam using the protocols that we are about to study at the dslam  or a router connected to it depending on the implementation  the ip packets are extracted and enter an isp network so that they may reach any destination on the internet the protocols shown over the adsl link in fig 3-26 start at the bottom with the adsl physical layer they are based on a digital modulation scheme called sec 3.5 example data link protocols 249 aal5 adsl local loop atm ppp dslam  with router  aal5 adsl atm ppp dsl modem pc ethernet internet customer ? s home isp ? s office ethernet ip link ip figure 3-26 adsl protocol stacks orthogonal frequency division multiplexing  also known as discrete multitone   as we saw in sec 2.5.3 near the top of the stack  just below the ip network layer  is ppp this protocol is the same ppp that we have just studied for packet over sonet transports it works in the same way to establish and configure the link and carry ip packets in between adsl and ppp are atm and aal5 these are new protocols that we have not seen before atm  asynchronous transfer mode  was designed in the early 1990s and launched with incredible hype it promised a network technology that would solve the world ? s telecommunications problems by merging voice  data  cable television  telegraph  carrier pigeon  tin cans connected by strings  tom toms  and everything else into an integrated system that could do everything for everyone this did not happen in large part  the problems of atm were similar to those we described concerning the osi protocols  that is  bad timing  technology  implementation  and politics nevertheless  atm was much more successful than osi while it has not taken over the world  it remains widely used in niches including broadband access lines such as dsl  and wan links inside telephone networks atm is a link layer that is based on the transmission of fixed-length cells of information the ? ? asynchronous ? ? in its name means that the cells do not always need to be sent in the way that bits are continuously sent over synchronous lines  as in sonet cells only need to be sent when there is information to carry atm is a connection-oriented technology each cell carries a virtual circuit identifier in its header and devices use this identifier to forward cells along the paths of established connections the cells are each 53 bytes long  consisting of a 48-byte payload plus a 5-byte header by using small cells  atm can flexibly divide the bandwidth of a physical layer link among different users in fine slices this ability is useful when  for example  sending both voice and data over one link without having long data packets that would cause large variations in the delay of the voice samples the unusual choice for the cell length  e.g  compared to the more natural choice of a 250 the data link layer chap 3 power of 2  is an indication of just how political the design of atm was the 48-byte size for the payload was a compromise to resolve a deadlock between europe  which wanted 32-byte cells  and the u.s  which wanted 64-byte cells a brief overview of atm is given by siu and jain  1995   to send data over an atm network  it needs to be mapped into a sequence of cells this mapping is done with an atm adaptation layer in a process called segmentation and reassembly several adaptation layers have been defined for different services  ranging from periodic voice samples to packet data the main one used for packet data is aal5  atm adaptation layer 5   an aal5 frame is shown in fig 3-27 instead of a header  it has a trailer that gives the length and has a 4-byte crc for error detection naturally  the crc is the same one used for ppp and ieee 802 lans like ethernet wang and crowcroft  1992  have shown that it is strong enough to detect nontraditional errors such as cell reordering as well as a payload  the aal5 frame has padding this rounds out the overall length to be a multiple of 48 bytes so that the frame can be evenly divided into cells no addresses are needed on the frame as the virtual circuit identifier carried in each cell will get it to the right destination ppp protocol ppp payload pad unused length crc bytes 1 or 2 0 to 47 2 2 4 aal5 trailer variable aal5 payload figure 3-27 aal5 frame carrying ppp data now that we have described atm  we have only to describe how ppp makes use of atm in the case of adsl it is done with yet another standard called pppoa  ppp over atm   this standard is not really a protocol  so it does not appear in fig 3-26  but more a specification of how to work with both ppp and aal5 frames it is described in rfc 2364  gross et al  1998   only the ppp protocol and payload fields are placed in the aal5 payload  as shown in fig 3-27 the protocol field indicates to the dslam at the far end whether the payload is an ip packet or a packet from another protocol such as lcp the far end knows that the cells contain ppp information because an atm virtual circuit is set up for this purpose within the aal5 frame  ppp framing is not needed as it would serve no purpose ; atm and aal5 already provide the framing more framing would be worthless the ppp crc is also not needed because aal5 already includes the very same crc this error detection mechanism supplements the adsl physical layer coding of a reed-solomon code for error correction and a 1-byte crc for the detection of any remaining errors not otherwise caught this scheme has a much more sophisticated error-recovery mechanism than when packets are sent over a sonet line because adsl is a much noisier channel sec 3.6 summary 251 3.6 summary the task of the data link layer is to convert the raw bit stream offered by the physical layer into a stream of frames for use by the network layer the link layer can present this stream with varying levels of reliability  ranging from connectionless  unacknowledged service to reliable  connection-oriented service various framing methods are used  including byte count  byte stuffing  and bit stuffing data link protocols can provide error control to detect or correct damaged frames and to retransmit lost frames to prevent a fast sender from overrunning a slow receiver  the data link protocol can also provide flow control the sliding window mechanism is widely used to integrate error control and flow control in a simple way when the window size is 1 packet  the protocol is stop-and-wait codes for error correction and detection add redundant information to messages by using a variety of mathematical techniques convolutional codes and reed-solomon codes are widely deployed for error correction  with low-density parity check codes increasing in popularity the codes for error detection that are used in practice include cyclic redundancy checks and checksums all these codes can be applied at the link layer  as well as at the physical layer and higher layers we examined a series of protocols that provide a reliable link layer using acknowledgements and retransmissions  or arq  automatic repeat request   under more realistic assumptions starting from an error-free environment in which the receiver can handle any frame sent to it  we introduced flow control  followed by error control with sequence numbers and the stop-and-wait algorithm then we used the sliding window algorithm to allow bidirectional communication and introduce the concept of piggybacking the last two protocols pipeline the transmission of multiple frames to prevent the sender from blocking on a link with a long propagation delay the receiver can either discard all frames other than the next one in sequence  or buffer out-of-order frames and send negative acknowledgements for greater bandwidth efficiency the former strategy is a go-back-n protocol  and the latter strategy is a selective repeat protocol the internet uses ppp as the main data link protocol over point-to-point lines it provides a connectionless unacknowledged service  using flag bytes to delimit frames and a crc for error detection it is used to carry packets across a range of links  including sonet links in wide-area networks and adsl links for the home problems 1 an upper-layer packet is split into 10 frames  each of which has an 80 % chance of arriving undamaged if no error control is done by the data link protocol  how many times must the message be sent on average to get the entire thing through ? 252 the data link layer chap 3 2 the following character encoding is used in a data link protocol  a  01000111 b  11100011 flag  01111110 esc  11100000 show the bit sequence transmitted  in binary  for the four-character frame a b esc flag when each of the following framing methods is used   a  byte count  b  flag bytes with byte stuffing  c  starting and ending flag bytes with bit stuffing 3 the following data fragment occurs in the middle of a data stream for which the bytestuffing algorithm described in the text is used  a b esc c esc flag flag d what is the output after stuffing ? 4 what is the maximum overhead in byte-stuffing algorithm ? 5 one of your classmates  scrooge  has pointed out that it is wasteful to end each frame with a flag byte and then begin the next one with a second flag byte one flag byte could do the job as well  and a byte saved is a byte earned do you agree ? 6 a bit string  0111101111101111110  needs to be transmitted at the data link layer what is the string actually transmitted after bit stuffing ? 7 can you think of any circumstances under which an open-loop protocol  e.g  a hamming code  might be preferable to the feedback-type protocols discussed throughout this chapter ? 8 to provide more reliability than a single parity bit can give  an error-detecting coding scheme uses one parity bit for checking all the odd-numbered bits and a second parity bit for all the even-numbered bits what is the hamming distance of this code ? 9 sixteen-bit messages are transmitted using a hamming code how many check bits are needed to ensure that the receiver can detect and correct single-bit errors ? show the bit pattern transmitted for the message 1101001100110101 assume that even parity is used in the hamming code 10 a 12-bit hamming code whose hexadecimal value is 0xe4f arrives at a receiver what was the original value in hexadecimal ? assume that not more than 1 bit is in error 11 one way of detecting errors is to transmit data as a block of n rows of k bits per row and add parity bits to each row and each column the bitin the lower-right corner is a parity bit that checks its row and its column will this scheme detect all single errors ? double errors ? triple errors ? show that this scheme can not detect some four-bit errors 12 suppose that data are transmitted in blocks of sizes 1000 bits what is the maximum error rate under which error detection and retransmission mechanism  1 parity bit per block  is better than using hamming code ? assume that bit errors are independent of one another and no bit error occurs during retransmission 13 a block of bits with n rows and k columns uses horizontal and vertical parity bits for error detection suppose that exactly 4 bits are inverted due to transmission errors derive an expression for the probability that the error will be undetected chap 3 problems 253 14 using the convolutional coder of fig 3-7  what is the output sequence when the input sequence is 10101010  left to right  and the internal state is initially all zero ? 15 suppose that a message 1001 1100 1010 0011 is transmitted using internet checksum  4-bit word   what is the value of the checksum ? 16 what is the remainder obtained by dividing x 7 ? ? x 5 ? ? 1 by the generator polynomial x 3 ? ? 1 ? 17 a bit stream 10011101 is transmitted using the standard crc method described in the text the generator polynomial is x 3 ? ? 1 show the actual bit string transmitted suppose that the third bit from the left is inverted during transmission show that this error is detected at the receiver ? s end give an example of bit errors in the bit string transmitted that will not be detected by the receiver 18 a 1024-bit message is sent that contains 992 data bits and 32 crc bits crc is computed using the ieee 802 standardized  32-degree crc polynomial for each of the following  explain whether the errors during message transmission will be detected by the receiver   a  there was a single-bit error  b  there were two isolated bit errors  c  there were 18 isolated bit errors  d  there were 47 isolated bit errors  e  there was a 24-bit long burst error  f  there was a 35-bit long burst error 19 in the discussion of arq protocol in section 3.3.3  a scenario was outlined that resulted in the receiver accepting two copies of the same frame due to a loss of acknowledgement frame is it possible that a receiver may accept multiple copies of the same frame when none of the frames  message or acknowledgement  are lost ? 20 a channel has a bit rate of 4 kbps and a propagation delay of 20 msec for what range of frame sizes does stop-and-wait give an efficiency of at least 50 % ? 21 in protocol 3  is it possible for the sender to start the timer when it is already running ? if so  how might this occur ? if not  why is it impossible ? 22 a 3000-km-long t1 trunk is used to transmit 64-byte frames using protocol 5 if the propagation speed is 6 ? sec/km  how many bits should the sequence numbers be ? 23 imagine a sliding window protocol using so many bits for sequence numbers that wraparound never occurs what relations must hold among the four window edges and the window size  which is constant and the same for both the sender and the receiver ? 24 if the procedure between in protocol 5 checked for the condition a ? ? b ? ? c instead of the condition a ? ? b < c  would that have any effect on the protocol ? s correctness or efficiency ? explain your answer 25 in protocol 6  when a data frame arrives  a check is made to see if the sequence number differs from the one expected and no nak is true if both conditions hold  a nak is sent otherwise  the auxiliary timer is started suppose that the else clause were omitted would this change affect the protocol ? s correctness ? 254 the data link layer chap 3 26 suppose that the three-statement while loop near the end of protocol 6 was removed from the code would this affect the correctness of the protocol or just the performance ? explain your answer 27 the distance from earth to a distant planet is approximately 9 ? ? 1010 m what is the channel utilization if a stop-and-wait protocol is used for frame transmission on a 64 mbps point-to-point link ? assume that the frame size is 32 kb and the speed of light is 3 ? ? 108 m/s 28 in the previous problem  suppose a sliding window protocol is used instead for what send window size will the link utilization be 100 % ? you may ignore the protocol processing times at the sender and the receiver 29 in protocol 6  the code for frame arrival has a section used for naks this section is invoked if the incoming frame is a nak and another condition is met give a scenario where the presence of this other condition is essential 30 consider the operation of protocol 6 over a 1-mbps perfect  i.e  error-free  line the maximum frame size is 1000 bits new packets are generated 1 second apart the timeout interval is 10 msec if the special acknowledgement timer were eliminated  unnecessary timeouts would occur how many times would the average message be transmitted ? 31 in protocol 6  max seq ? ? 2n ? ? 1 while this condition is obviously desirable to make efficient use of header bits  we have not demonstrated that it is essential does the protocol work correctly for max seq ? ? 4  for example ? 32 frames of 1000 bits are sent over a 1-mbps channel using a geostationary satellite whose propagation time from the earth is 270 msec acknowledgements are always piggybacked onto data frames the headers are very short three-bit sequence numbers are used what is the maximum achievable channel utilization for  a  stop-and-wait ?  b  protocol 5 ?  c  protocol 6 ? 33 compute the fraction of the bandwidth that is wasted on overhead  headers and retransmissions  for protocol 6 on a heavily loaded 50-kbps satellite channel with data frames consisting of 40 header and 3960 data bits assume that the signal propagation time from the earth to the satellite is 270 msec ack frames never occur nak frames are 40 bits the error rate for data frames is 1 %  and the error rate for nak frames is negligible the sequence numbers are 8 bits 34 consider an error-free 64-kbps satellite channel used to send 512-byte data frames in one direction  with very short acknowledgements coming back the other way what is the maximum throughput for window sizes of 1  7  15  and 127 ? the earth-satellite propagation time is 270 msec 35 a 100-km-long cable runs at the t1 data rate the propagation speed in the cable is 2/3 the speed of light in vacuum how many bits fit in the cable ? 36 give at least one reason why ppp uses byte stuffing instead of bit stuffing to prevent accidental flag bytes within the payload from causing confusion chap 3 problems 255 37 what is the minimum overhead to send an ip packet using ppp ? count only the overhead introduced by ppp itself  not the ip header overhead what is the maximum overhead ? 38 a 100-byte ip packet is transmitted over a local loop using adsl protocol stack how many atm cells will be transmitted ? briefly describe their contents 39 the goal of this lab exercise is to implement an error-detection mechanism using the standard crc algorithm described in the text write two programs  generator and verifier the generator program reads from standard input a line of ascii text containing an n-bit message consisting of a string of 0s and 1s the second line is the kbit polynomial  also in ascii it outputs to standard output a line of ascii text with n ? ? k 0s and 1s representing the message to be transmitted then it outputs the polynomial  just as it read it in the verifier program reads in the output of the generator program and outputs a message indicating whether it is correct or not finally  write a program  alter  that inverts 1 bit on the first line depending on its argument  the bit number counting the leftmost bit as 1  but copies the rest of the two lines correctly by typing generator < file | verifier you should see that the message is correct  but by typing generator < file | alter arg | verifier you should get the error message this page intentionally left blank 4 the medium access control sublayer network links can be divided into two categories  those using point-to-point connections and those using broadcast channels we studied point-to-point links in chap 2 ; this chapter deals with broadcast links and their protocols in any broadcast network  the key issue is how to determine who gets to use the channel when there is competition for it to make this point  consider a conference call in which six people  on six different telephones  are all connected so that each one can hear and talk to all the others it is very likely that when one of them stops speaking  two or more will start talking at once  leading to chaos in a face-to-face meeting  chaos is avoided by external means for example  at a meeting  people raise their hands to request permission to speak when only a single channel is available  it is much harder to determine who should go next many protocols for solving the problem are known they form the contents of this chapter in the literature  broadcast channels are sometimes referred to as multiaccess channels or random access channels the protocols used to determine who goes next on a multiaccess channel belong to a sublayer of the data link layer called the mac  medium access control  sublayer the mac sublayer is especially important in lans  particularly wireless ones because wireless is naturally a broadcast channel wans  in contrast  use point-to-point links  except for satellite networks because multiaccess channels and lans are so closely related  in this chapter we will discuss lans in 257 258 the medium access control sublayer chap 4 general  including a few issues that are not strictly part of the mac sublayer  but the main subject here will be control of the channel technically  the mac sublayer is the bottom part of the data link layer  so logically we should have studied it before examining all the point-to-point protocols in chap 3 nevertheless  for most people  it is easier to understand protocols involving multiple parties after two-party protocols are well understood for that reason we have deviated slightly from a strict bottom-up order of presentation 4.1 the channel allocation problem the central theme of this chapter is how to allocate a single broadcast channel among competing users the channel might be a portion of the wireless spectrum in a geographic region  or a single wire or optical fiber to which multiple nodes are connected it does not matter in both cases  the channel connects each user to all other users and any user who makes full use of the channel interferes with other users who also wish to use the channel we will first look at the shortcomings of static allocation schemes for bursty traffic then  we will lay out the key assumptions used to model the dynamic schemes that we examine in the following sections 4.1.1 static channel allocation the traditional way of allocating a single channel  such as a telephone trunk  among multiple competing users is to chop up its capacity by using one of the multiplexing schemes we described in sec 2.5  such as fdm  frequency division multiplexing   if there are n users  the bandwidth is divided into n equal-sized portions  with each user being assigned one portion since each user has a private frequency band  there is now no interference among users when there is only a small and constant number of users  each of which has a steady stream or a heavy load of traffic  this division is a simple and efficient allocation mechanism a wireless example is fm radio stations each station gets a portion of the fm band and uses it most of the time to broadcast its signal however  when the number of senders is large and varying or the traffic is bursty  fdm presents some problems if the spectrum is cut up into n regions and fewer than n users are currently interested in communicating  a large piece of valuable spectrum will be wasted and if more than n users want to communicate  some of them will be denied permission for lack of bandwidth  even if some of the users who have been assigned a frequency band hardly ever transmit or receive anything even assuming that the number of users could somehow be held constant at n  dividing the single available channel into some number of static subchannels is sec 4.1 the channel allocation problem 259 inherently inefficient the basic problem is that when some users are quiescent  their bandwidth is simply lost they are not using it  and no one else is allowed to use it either a static allocation is a poor fit to most computer systems  in which data traffic is extremely bursty  often with peak traffic to mean traffic ratios of 1000  1 consequently  most of the channels will be idle most of the time the poor performance of static fdm can easily be seen with a simple queueing theory calculation let us start by finding the mean time delay  t  to send a frame onto a channel of capacity c bps we assume that the frames arrive randomly with an average arrival rate of ? ? frames/sec  and that the frames vary in length with an average length of 1/ ? ? bits with these parameters  the service rate of the channel is ? c frames/sec a standard queueing theory result is t ? ? c ? ? ? 1  for the curious  this result is for an ? ? m/m/1 ? ? queue it requires that the randomness of the times between frame arrivals and the frame lengths follow an exponential distribution  or equivalently be the result of a poisson process  in our example  if c is 100 mbps  the mean frame length  1/ ?  is 10,000 bits  and the frame arrival rate  ?  is 5000 frames/sec  then t ? ? 200 ? sec note that if we ignored the queueing delay and just asked how long it takes to send a 10,000 bit frame on a 100-mbps network  we would get the  incorrect  answer of 100 ? sec that result only holds when there is no contention for the channel now let us divide the single channel into n independent subchannels  each with capacity c /n bps the mean input rate on each of the subchannels will now be ? /n recomputing t  we get tn ? ?  c /n  ? ?  ? /n  1 ? ? c ? ? ? n ? ? nt  4-1  the mean delay for the divided channel is n times worse than if all the frames were somehow magically arranged orderly in a big central queue this same result says that a bank lobby full of atm machines is better off having a single queue feeding all the machines than a separate queue in front of each machine precisely the same arguments that apply to fdm also apply to other ways of statically dividing the channel if we were to use time division multiplexing  tdm  and allocate each user every nth time slot  if a user does not use the allocated slot  it would just lie fallow the same would hold if we split up the networks physically using our previous example again  if we were to replace the 100-mbps network with 10 networks of 10 mbps each and statically allocate each user to one of them  the mean delay would jump from 200 ? sec to 2 msec since none of the traditional static channel allocation methods work well at all with bursty traffic  we will now explore dynamic methods 260 the medium access control sublayer chap 4 4.1.2 assumptions for dynamic channel allocation before we get to the first of the many channel allocation methods in this chapter  it is worthwhile to carefully formulate the allocation problem underlying all the work done in this area are the following five key assumptions  1 independent traffic the model consists of n independent stations  e.g  computers  telephones   each with a program or user that generates frames for transmission the expected number of frames generated in an interval of length ? t is ? ? t  where ? ? is a constant  the arrival rate of new frames   once a frame has been generated  the station is blocked and does nothing until the frame has been successfully transmitted 2 single channel a single channel is available for all communication all stations can transmit on it and all can receive from it the stations are assumed to be equally capable  though protocols may assign them different roles  e.g  priorities   3 observable collisions if two frames are transmitted simultaneously  they overlap in time and the resulting signal is garbled this event is called a collision all stations can detect that a collision has occurred a collided frame must be transmitted again later no errors other than those generated by collisions occur 4 continuous or slotted time time may be assumed continuous  in which case frame transmission can begin at any instant alternatively  time may be slotted or divided into discrete intervals  called slots   frame transmissions must then begin at the start of a slot a slot may contain 0  1  or more frames  corresponding to an idle slot  a successful transmission  or a collision  respectively 5 carrier sense or no carrier sense with the carrier sense assumption  stations can tell if the channel is in use before trying to use it no station will attempt to use the channel while it is sensed as busy if there is no carrier sense  stations can not sense the channel before trying to use it they just go ahead and transmit only later can they determine whether the transmission was successful some discussion of these assumptions is in order the first one says that frame arrivals are independent  both across stations and at a particular station  and that frames are generated unpredictably but at a constant rate actually  this assumption is not a particularly good model of network traffic  as it is well known that packets come in bursts over a range of time scales  paxson and floyd  1995 ; and leland et al  1994   nonetheless  poisson models  as they are frequently called  are useful because they are mathematically tractable they help us analyze sec 4.1 the channel allocation problem 261 protocols to understand roughly how performance changes over an operating range and how it compares with other designs the single-channel assumption is the heart of the model no external ways to communicate exist stations can not raise their hands to request that the teacher call on them  so we will have to come up with better solutions the remaining three assumptions depend on the engineering of the system  and we will say which assumptions hold when we examine a particular protocol the collision assumption is basic stations need some way to detect collisions if they are to retransmit frames rather than let them be lost for wired channels  node hardware can be designed to detect collisions when they occur the stations can then terminate their transmissions prematurely to avoid wasting capacity this detection is much harder for wireless channels  so collisions are usually inferred after the fact by the lack of an expected acknowledgement frame it is also possible for some frames involved in a collision to be successfully received  depending on the details of the signals and the receiving hardware however  this situation is not the common case  so we will assume that all frames involved in a collision are lost we will also see protocols that are designed to prevent collisions from occurring in the first place the reason for the two alternative assumptions about time is that slotted time can be used to improve performance however  it requires the stations to follow a master clock or synchronize their actions with each other to divide time into discrete intervals hence  it is not always available we will discuss and analyze systems with both kinds of time for a given system  only one of them holds similarly  a network may have carrier sensing or not have it wired networks will generally have carrier sense wireless networks can not always use it effectively because not every station may be within radio range of every other station similarly  carrier sense will not be available in other settings in which a station can not communicate directly with other stations  for example a cable modem in which stations must communicate via the cable headend note that the word ? ? carrier ? ? in this sense refers to a signal on the channel and has nothing to do with the common carriers  e.g  telephone companies  that date back to the days of the pony express to avoid any misunderstanding  it is worth noting that no multiaccess protocol guarantees reliable delivery even in the absence of collisions  the receiver may have copied some of the frame incorrectly for various reasons other parts of the link layer or higher layers provide reliability 4.2 multiple access protocols many algorithms for allocating a multiple access channel are known in the following sections  we will study a small sample of the more interesting ones and give some examples of how they are commonly used in practice 262 the medium access control sublayer chap 4 4.2.1 aloha the story of our first mac starts out in pristine hawaii in the early 1970s in this case  ? ? pristine ? ? can be interpreted as ? ? not having a working telephone system ? ? this did not make life more pleasant for researcher norman abramson and his colleagues at the university of hawaii who were trying to connect users on remote islands to the main computer in honolulu stringing their own cables under the pacific ocean was not in the cards  so they looked for a different solution the one they found used short-range radios  with each user terminal sharing the same upstream frequency to send frames to the central computer it included a simple and elegant method to solve the channel allocation problem their work has been extended by many researchers since then  schwartz and abramson  2009   although abramson ? s work  called the aloha system  used groundbased radio broadcasting  the basic idea is applicable to any system in which uncoordinated users are competing for the use of a single shared channel we will discuss two versions of aloha here  pure and slotted they differ with respect to whether time is continuous  as in the pure version  or divided into discrete slots into which all frames must fit pure aloha the basic idea of an aloha system is simple  let users transmit whenever they have data to be sent there will be collisions  of course  and the colliding frames will be damaged senders need some way to find out if this is the case in the aloha system  after each station has sent its frame to the central computer  this computer rebroadcasts the frame to all of the stations a sending station can thus listen for the broadcast from the hub to see if its frame has gotten through in other systems  such as wired lans  the sender might be able to listen for collisions while transmitting if the frame was destroyed  the sender just waits a random amount of time and sends it again the waiting time must be random or the same frames will collide over and over  in lockstep systems in which multiple users share a common channel in a way that can lead to conflicts are known as contention systems a sketch of frame generation in an aloha system is given in fig 4-1 we have made the frames all the same length because the throughput of aloha systems is maximized by having a uniform frame size rather than by allowing variable length frames whenever two frames try to occupy the channel at the same time  there will be a collision  as seen in fig 4-1  and both will be garbled if the first bit of a new frame overlaps with just the last bit of a frame that has almost finished  both frames will be totally destroyed  i.e  have incorrect checksums  and both will have to be retransmitted later the checksum does not  and should not  distinguish between a total loss and a near miss bad is bad sec 4.2 multiple access protocols 263 user a b c d e collision time collision figure 4-1 in pure aloha  frames are transmitted at completely arbitrary times an interesting question is  what is the efficiency of an aloha channel ? in other words  what fraction of all transmitted frames escape collisions under these chaotic circumstances ? let us first consider an infinite collection of users typing at their terminals  stations   a user is always in one of two states  typing or waiting initially  all users are in the typing state when a line is finished  the user stops typing  waiting for a response the station then transmits a frame containing the line over the shared channel to the central computer and checks the channel to see if it was successful if so  the user sees the reply and goes back to typing if not  the user continues to wait while the station retransmits the frame over and over until it has been successfully sent let the ? ? frame time ? ? denote the amount of time needed to transmit the standard  fixed-length frame  i.e  the frame length divided by the bit rate   at this point  we assume that the new frames generated by the stations are well modeled by a poisson distribution with a mean of n frames per frame time  the infinitepopulation assumption is needed to ensure that n does not decrease as users become blocked  if n > 1  the user community is generating frames at a higher rate than the channel can handle  and nearly every frame will suffer a collision for reasonable throughput  we would expect 0 < n < 1 in addition to the new frames  the stations also generate retransmissions of frames that previously suffered collisions let us further assume that the old and new frames combined are well modeled by a poisson distribution  with mean of g frames per frame time clearly  g ? ? n at low load  i.e  n ? ? 0   there will be few collisions  hence few retransmissions  so g ? ? n at high load  there will be many collisions  so g > n under all loads  the throughput  s  is just the offered load  g  times the probability  p0  of a transmission succeeding ? that is  s ? ? gp0  where p0 is the probability that a frame does not suffer a collision a frame will not suffer a collision if no other frames are sent within one frame time of its start  as shown in fig 4-2 under what conditions will the 264 the medium access control sublayer chap 4 shaded frame arrive undamaged ? let t be the time required to send one frame if any other user has generated a frame between time t 0 and t 0 ? ? t  the end of that frame will collide with the beginning of the shaded one in fact  the shaded frame ? s fate was already sealed even before the first bit was sent  but since in pure aloha a station does not listen to the channel before transmitting  it has no way of knowing that another frame was already underway similarly  any other frame started between t 0 ? ? t and t 0 ? ? 2t will bump into the end of the shaded frame collides with the start of the shaded frame collides with the end of the shaded frame t t0 t0 + t t0 + 2t t0 + 3t time vulnerable figure 4-2 vulnerable period for the shaded frame the probability that k frames are generated during a given frame time  in which g frames are expected  is given by the poisson distribution pr  k  ? k ! gk e ? g  4-2  so the probability of zero frames is just e ? g in an interval two frame times long  the mean number of frames generated is 2g the probability of no frames being initiated during the entire vulnerable period is thus given by p0 ? ? e ? 2g using s ? ? gp0  we get s ? ? ge ? 2g the relation between the offered traffic and the throughput is shown in fig 4-3 the maximum throughput occurs at g ? ? 0.5  with s ? ? 1/2e  which is about 0.184 in other words  the best we can hope for is a channel utilization of 18 %  this result is not very encouraging  but with everyone transmitting at will  we could hardly have expected a 100 % success rate slotted aloha soon after aloha came onto the scene  roberts  1972  published a method for doubling the capacity of an aloha system his proposal was to divide time into discrete intervals called slots  each interval corresponding to one frame this sec 4.2 multiple access protocols 265 0.40 0.30 0.20 0.10 0 0.5 1.0 1.5 g  attempts per packet time  2.0 3.0 s  throughput per frame time  slotted aloha  s = ge ? g pure aloha  s = ge ? 2g figure 4-3 throughput versus offered traffic for aloha systems approach requires the users to agree on slot boundaries one way to achieve synchronization would be to have one special station emit a pip at the start of each interval  like a clock in roberts ? method  which has come to be known as slotted aloha ? in contrast to abramson ? s pure aloha ? a station is not permitted to send whenever the user types a line instead  it is required to wait for the beginning of the next slot thus  the continuous time aloha is turned into a discrete time one this halves the vulnerable period to see this  look at fig 4-3 and imagine the collisions that are now possible the probability of no other traffic during the same slot as our test frame is then e ? g  which leads to s ? ? ge ? g  4-3  as you can see from fig 4-3  slotted aloha peaks at g = 1  with a throughput of s = 1/e or about 0.368  twice that of pure aloha if the system is operating at g ? ? 1  the probability of an empty slot is 0.368  from eq 4-2   the best we can hope for using slotted aloha is 37 % of the slots empty  37 % successes  and 26 % collisions operating at higher values of g reduces the number of empties but increases the number of collisions exponentially to see how this rapid growth of collisions with g comes about  consider the transmission of a test frame the probability that it will avoid a collision is e ? g  which is the probability that all the other stations are silent in that slot the probability of a collision is then just 1 ? ? e ? g the probability of a transmission requiring exactly k attempts  i.e  k ? ? 1 collisions followed by one success  is pk ? ? e ? g  1 ? ? e ? g  k ? ? 1 the expected number of transmissions  e  per line typed at a terminal is then e ? k ? 1 ? ? ? kpk ? k ? 1 ? ? ? ke ? g  1 ? ? e ? g  k ? ? 1 ? ? eg 266 the medium access control sublayer chap 4 as a result of the exponential dependence of e upon g  small increases in the channel load can drastically reduce its performance slotted aloha is notable for a reason that may not be initially obvious it was devised in the 1970s  used in a few early experimental systems  then almost forgotten when internet access over the cable was invented  all of a sudden there was a problem of how to allocate a shared channel among multiple competing users slotted aloha was pulled out of the garbage can to save the day later  having multiple rfid tags talk to the same rfid reader presented another variation on the same problem slotted aloha  with a dash of other ideas mixed in  again came to the rescue it has often happened that protocols that are perfectly valid fall into disuse for political reasons  e.g  some big company wants everyone to do things its way  or due to ever-changing technology trends then  years later some clever person realizes that a long-discarded protocol solves his current problem for this reason  in this chapter we will study a number of elegant protocols that are not currently in widespread use but might easily be used in future applications  provided that enough network designers are aware of them of course  we will also study many protocols that are in current use as well 4.2.2 carrier sense multiple access protocols with slotted aloha  the best channel utilization that can be achieved is 1/e this low result is hardly surprising  since with stations transmitting at will  without knowing what the other stations are doing there are bound to be many collisions in lans  however  it is often possible for stations to detect what other stations are doing  and thus adapt their behavior accordingly these networks can achieve a much better utilization than 1/e in this section  we will discuss some protocols for improving performance protocols in which stations listen for a carrier  i.e  a transmission  and act accordingly are called carrier sense protocols a number of them have been proposed  and they were long ago analyzed in detail for example  see kleinrock and tobagi  1975   below we will look at several versions of carrier sense protocols persistent and nonpersistent csma the first carrier sense protocol that we will study here is called 1-persistent csma  carrier sense multiple access   that is a bit of a mouthful for the simplest csma scheme when a station has data to send  it first listens to the channel to see if anyone else is transmitting at that moment if the channel is idle  the stations sends its data otherwise  if the channel is busy  the station just waits until it becomes idle then the station transmits a frame if a collision occurs  the sec 4.2 multiple access protocols 267 station waits a random amount of time and starts all over again the protocol is called 1-persistent because the station transmits with a probability of 1 when it finds the channel idle you might expect that this scheme avoids collisions except for the rare case of simultaneous sends  but it in fact it does not if two stations become ready in the middle of a third station ? s transmission  both will wait politely until the transmission ends  and then both will begin transmitting exactly simultaneously  resulting in a collision if they were not so impatient  there would be fewer collisions more subtly  the propagation delay has an important effect on collisions there is a chance that just after a station begins sending  another station will become ready to send and sense the channel if the first station ? s signal has not yet reached the second one  the latter will sense an idle channel and will also begin sending  resulting in a collision this chance depends on the number of frames that fit on the channel  or the bandwidth-delay product of the channel if only a tiny fraction of a frame fits on the channel  which is the case in most lans since the propagation delay is small  the chance of a collision happening is small the larger the bandwidth-delay product  the more important this effect becomes  and the worse the performance of the protocol even so  this protocol has better performance than pure aloha because both stations have the decency to desist from interfering with the third station ? s frame exactly the same holds for slotted aloha a second carrier sense protocol is nonpersistent csma in this protocol  a conscious attempt is made to be less greedy than in the previous one as before  a station senses the channel when it wants to send a frame  and if no one else is sending  the station begins doing so itself however  if the channel is already in use  the station does not continually sense it for the purpose of seizing it immediately upon detecting the end of the previous transmission instead  it waits a random period of time and then repeats the algorithm consequently  this algorithm leads to better channel utilization but longer delays than 1-persistent csma the last protocol is p-persistent csma it applies to slotted channels and works as follows when a station becomes ready to send  it senses the channel if it is idle  it transmits with a probability p with a probability q ? ? 1 ? ? p  it defers until the next slot if that slot is also idle  it either transmits or defers again  with probabilities p and q this process is repeated until either the frame has been transmitted or another station has begun transmitting in the latter case  the unlucky station acts as if there had been a collision  i.e  it waits a random time and starts again   if the station initially senses that the channel is busy  it waits until the next slot and applies the above algorithm ieee 802.11 uses a refinement of p-persistent csma that we will discuss in sec 4.4 figure 4-4 shows the computed throughput versus offered traffic for all three protocols  as well as for pure and slotted aloha 268 the medium access control sublayer chap 4 1.0 0.9 0.8 0.5 0.4 0.3 0.2 0.1 0 0 1 2 3 4 5 6 7 8 9 0.6 0.7 s  throughput per packet time  g  attempts per packet time  pure aloha slotted aloha 1-persistent csma 0.1-persistent csma 0.5-persistent csma nonpersistent csma 0.01-persistent csma figure 4-4 comparison of the channel utilization versus load for various random access protocols csma with collision detection persistent and nonpersistent csma protocols are definitely an improvement over aloha because they ensure that no station begins to transmit while the channel is busy however  if two stations sense the channel to be idle and begin transmitting simultaneously  their signals will still collide another improvement is for the stations to quickly detect the collision and abruptly stop transmitting   rather than finishing them  since they are irretrievably garbled anyway this strategy saves time and bandwidth this protocol  known as csma/cd  csma with collision detection   is the basis of the classic ethernet lan  so it is worth devoting some time to looking at it in detail it is important to realize that collision detection is an analog process the station ? s hardware must listen to the channel while it is transmitting if the signal it reads back is different from the signal it is putting out  it knows that a collision is occurring the implications are that a received signal must not be tiny compared to the transmitted signal  which is difficult for wireless  as received signals may be 1,000,000 times weaker than transmitted signals  and that the modulation must be chosen to allow collisions to be detected  e.g  a collision of two 0 volt signals may well be impossible to detect   csma/cd  as well as many other lan protocols  uses the conceptual model of fig 4-5 at the point marked t 0  a station has finished transmitting its frame any other station having a frame to send may now attempt to do so if two or more stations decide to transmit simultaneously  there will be a collision if a station detects a collision  it aborts its transmission  waits a random period of time  and then tries again  assuming that no other station has started transmitting in the sec 4.2 multiple access protocols 269 meantime   therefore  our model for csma/cd will consist of alternating contention and transmission periods  with idle periods occurring when all stations are quiet  e.g  for lack of work   contention slots contention period transmission period idle period to frame frame frame frame time figure 4-5 csma/cd can be in contention  transmission  or idle state now let us look at the details of the contention algorithm suppose that two stations both begin transmitting at exactly time t 0 how long will it take them to realize that they have collided ? the answer is vital to determining the length of the contention period and hence what the delay and throughput will be the minimum time to detect the collision is just the time it takes the signal to propagate from one station to the other based on this information  you might think that a station that has not heard a collision for a time equal to the full cable propagation time after starting its transmission can be sure it has seized the cable by ? ? seized  ? ? we mean that all other stations know it is transmitting and will not interfere this conclusion is wrong consider the following worst-case scenario let the time for a signal to propagate between the two farthest stations be ?  at t 0  one station begins transmitting at t 0 ? ? ? ? ? ? ?  an instant before the signal arrives at the most distant station  that station also begins transmitting of course  it detects the collision almost instantly and stops  but the little noise burst caused by the collision does not get back to the original station until time 2 ? ? ? ? ?  in other words  in the worst case a station can not be sure that it has seized the channel until it has transmitted for 2 ? without hearing a collision with this understanding  we can think of csma/cd contention as a slotted aloha system with a slot width of 2 ?  on a 1-km long coaxial cable  ? ? ? 5 ? sec the difference for csma/cd compared to slotted aloha is that slots in which only one station transmits  i.e  in which the channel is seized  are followed by the rest of a frame this difference will greatly improve performance if the frame time is much longer than the propagation time 4.2.3 collision-free protocols although collisions do not occur with csma/cd once a station has unambiguously captured the channel  they can still occur during the contention period these collisions adversely affect the system performance  especially when the 270 the medium access control sublayer chap 4 bandwidth-delay product is large  such as when the cable is long  i.e  large ?  and the frames are short not only do collisions reduce bandwidth  but they make the time to send a frame variable  which is not a good fit for real-time traffic such as voice over ip csma/cd is also not universally applicable in this section  we will examine some protocols that resolve the contention for the channel without any collisions at all  not even during the contention period most of these protocols are not currently used in major systems  but in a rapidly changing field  having some protocols with excellent properties available for future systems is often a good thing in the protocols to be described  we assume that there are exactly n stations  each programmed with a unique address from 0 to n ? ? 1 it does not matter that some stations may be inactive part of the time we also assume that propagation delay is negligible the basic question remains  which station gets the channel after a successful transmission ? we continue using the model of fig 4-5 with its discrete contention slots a bit-map protocol in our first collision-free protocol  the basic bit-map method  each contention period consists of exactly n slots if station 0 has a frame to send  it transmits a 1 bit during the slot 0 no other station is allowed to transmit during this slot regardless of what station 0 does  station 1 gets the opportunity to transmit a 1 bit during slot 1  but only if it has a frame queued in general  station j may announce that it has a frame to send by inserting a 1 bit into slot j after all n slots have passed by  each station has complete knowledge of which stations wish to transmit at that point  they begin transmitting frames in numerical order  see fig 4-6   0 1 1 1 1 1 3 7 1 1 1 5 1 2 3 4 5 6 7 0 1 2 3 4 5 6 7 0 1 2 3 4 5 6 7 8 contention slots 1 frames 8 contention slots 2 d figure 4-6 the basic bit-map protocol since everyone agrees on who goes next  there will never be any collisions after the last ready station has transmitted its frame  an event all stations can easily monitor  another n-bit contention period is begun if a station becomes ready just after its bit slot has passed by  it is out of luck and must remain silent until every station has had a chance and the bit map has come around again sec 4.2 multiple access protocols 271 protocols like this in which the desire to transmit is broadcast before the actual transmission are called reservation protocols because they reserve channel ownership in advance and prevent collisions let us briefly analyze the performance of this protocol for convenience  we will measure time in units of the contention bit slot  with data frames consisting of d time units under conditions of low load  the bit map will simply be repeated over and over  for lack of data frames consider the situation from the point of view of a low-numbered station  such as 0 or 1 typically  when it becomes ready to send  the ? ? current ? ? slot will be somewhere in the middle of the bit map on average  the station will have to wait n /2 slots for the current scan to finish and another full n slots for the following scan to run to completion before it may begin transmitting the prospects for high-numbered stations are brighter generally  these will only have to wait half a scan  n /2 bit slots  before starting to transmit highnumbered stations rarely have to wait for the next scan since low-numbered stations must wait on average 1.5n slots and high-numbered stations must wait on average 0.5n slots  the mean for all stations is n slots the channel efficiency at low load is easy to compute the overhead per frame is n bits and the amount of data is d bits  for an efficiency of d /  d ? ? n   at high load  when all the stations have something to send all the time  the nbit contention period is prorated over n frames  yielding an overhead of only 1 bit per frame  or an efficiency of d /  d ? ? 1   the mean delay for a frame is equal to the sum of the time it queues inside its station  plus an additional  n ? ? 1  d ? ? n once it gets to the head of its internal queue this interval is how long it takes to wait for all other stations to have their turn sending a frame and another bitmap token passing the essence of the bit-map protocol is that it lets every station transmit a frame in turn in a predefined order another way to accomplish the same thing is to pass a small message called a token from one station to the next in the same predefined order the token represents permission to send if a station has a frame queued for transmission when it receives the token  it can send that frame before it passes the token to the next station if it has no queued frame  it simply passes the token in a token ring protocol  the topology of the network is used to define the order in which stations send the stations are connected one to the next in a single ring passing the token to the next station then simply consists of receiving the token in from one direction and transmitting it out in the other direction  as seen in fig 4-7 frames are also transmitted in the direction of the token this way they will circulate around the ring and reach whichever station is the destination however  to stop the frame circulating indefinitely  like the token   some station needs 272 the medium access control sublayer chap 4 to remove it from the ring this station may be either the one that originally sent the frame  after it has gone through a complete cycle  or the station that was the intended recipient of the frame direction of transmission station token figure 4-7 token ring note that we do not need a physical ring to implement token passing the channel connecting the stations might instead be a single long bus each station then uses the bus to send the token to the next station in the predefined sequence possession of the token allows a station to use the bus to send one frame  as before this protocol is called token bus the performance of token passing is similar to that of the bit-map protocol  though the contention slots and frames of one cycle are now intermingled after sending a frame  each station must wait for all n stations  including itself  to send the token to their neighbors and the other n ? ? 1 stations to send a frame  if they have one a subtle difference is that  since all positions in the cycle are equivalent  there is no bias for low or high-numbered stations for token ring  each station is also sending the token only as far as its neighboring station before the protocol takes the next step each token does not need to propagate to all stations before the protocol advances to the next step token rings have cropped up as mac protocols with some consistency an early token ring protocol  called ? ? token ring ? ? and standardized as ieee 802.5  was popular in the 1980s as an alternative to classic ethernet in the 1990s  a much faster token ring called fddi  fiber distributed data interface  was beaten out by switched ethernet in the 2000s  a token ring called rpr  resilient packet ring  was defined as ieee 802.17 to standardize the mix of metropolitan area rings in use by isps we wonder what the 2010s will have to offer binary countdown a problem with the basic bit-map protocol  and by extension token passing  is that the overhead is 1 bit per station  so it does not scale well to networks with thousands of stations we can do better than that by using binary station addresses with a channel that combines transmissions a station wanting to use the sec 4.2 multiple access protocols 273 channel now broadcasts its address as a binary bit string  starting with the highorder bit all addresses are assumed to be the same length the bits in each address position from different stations are boolean ored together by the channel when they are sent at the same time we will call this protocol binary countdown it was used in datakit  fraser  1987   it implicitly assumes that the transmission delays are negligible so that all stations see asserted bits essentially instantaneously to avoid conflicts  an arbitration rule must be applied  as soon as a station sees that a high-order bit position that is 0 in its address has been overwritten with a 1  it gives up for example  if stations 0010  0100  1001  and 1010 are all trying to get the channel  in the first bit time the stations transmit 0  0  1  and 1  respectively these are ored together to form a 1 stations 0010 and 0100 see the 1 and know that a higher-numbered station is competing for the channel  so they give up for the current round stations 1001 and 1010 continue the next bit is 0  and both stations continue the next bit is 1  so station 1001 gives up the winner is station 1010 because it has the highest address after winning the bidding  it may now transmit a frame  after which another bidding cycle starts the protocol is illustrated in fig 4-8 it has the property that higher numbered stations have a higher priority than lower-numbered stations  which may be either good or bad  depending on the context 0 0 1 0 0 ? ? ? 0 1 2 3 bit time 0 1 0 0 0 ? ? ? 1 0 0 1 1 0 0 ? 1 0 1 0 1 0 1 0 result 1 0 1 0 stations 0010 and 0100 see this 1 and give up station 1001 sees this 1 and gives up figure 4-8 the binary countdown protocol a dash indicates silence the channel efficiency of this method is d /  d ? ? log2 n   if  however  the frame format has been cleverly chosen so that the sender ? s address is the first field in the frame  even these log2 n bits are not wasted  and the efficiency is 100 %  binary countdown is an example of a simple  elegant  and efficient protocol that is waiting to be rediscovered hopefully  it will find a new home some day 274 the medium access control sublayer chap 4 4.2.4 limited-contention protocols we have now considered two basic strategies for channel acquisition in a broadcast network  contention  as in csma  and collision-free protocols each strategy can be rated as to how well it does with respect to the two important performance measures  delay at low load and channel efficiency at high load under conditions of light load  contention  i.e  pure or slotted aloha  is preferable due to its low delay  since collisions are rare   as the load increases  contention becomes increasingly less attractive because the overhead associated with channel arbitration becomes greater just the reverse is true for the collision-free protocols at low load  they have relatively high delay but as the load increases  the channel efficiency improves  since the overheads are fixed   obviously  it would be nice if we could combine the best properties of the contention and collision-free protocols  arriving at a new protocol that used contention at low load to provide low delay  but used a collision-free technique at high load to provide good channel efficiency such protocols  which we will call limited-contention protocols  do in fact exist  and will conclude our study of carrier sense networks up to now  the only contention protocols we have studied have been symmetric that is  each station attempts to acquire the channel with some probability  p  with all stations using the same p interestingly enough  the overall system performance can sometimes be improved by using a protocol that assigns different probabilities to different stations before looking at the asymmetric protocols  let us quickly review the performance of the symmetric case suppose that k stations are contending for channel access each has a probability p of transmitting during each slot the probability that some station successfully acquires the channel during a given slot is the probability that any one station transmits  with probability p  and all other k ? ? 1 stations defer  each with probability 1 ? ? p this value is kp  1 ? ? p  k ? ? 1 to find the optimal value of p  we differentiate with respect to p  set the result to zero  and solve for p doing so  we find that the best value of p is 1/k substituting p ? ? 1/k  we get pr  success with optimal p  ? ? ? ? k k ? ? 1 ? ? ? k ? ? 1  4-4  this probability is plotted in fig 4-9 for small numbers of stations  the chances of success are good  but as soon as the number of stations reaches even five  the probability has dropped close to its asymptotic value of 1/e from fig 4-9  it is fairly obvious that the probability of some station acquiring the channel can be increased only by decreasing the amount of competition the limited-contention protocols do precisely that they first divide the stations into  not necessarily disjoint  groups only the members of group 0 are permitted sec 4.2 multiple access protocols 275 1.0 0.8 0.6 0.4 0.2 0.0 0 5 10 15 20 25 probability of success number of ready stations figure 4-9 acquisition probability for a symmetric contention channel to compete for slot 0 if one of them succeeds  it acquires the channel and transmits its frame if the slot lies fallow or if there is a collision  the members of group 1 contend for slot 1  etc by making an appropriate division of stations into groups  the amount of contention for each slot can be reduced  thus operating each slot near the left end of fig 4-9 the trick is how to assign stations to slots before looking at the general case  let us consider some special cases at one extreme  each group has but one member such an assignment guarantees that there will never be collisions because at most one station is contending for any given slot we have seen such protocols before  e.g  binary countdown   the next special case is to assign two stations per group the probability that both will try to transmit during a slot is p2  which for a small p is negligible as more and more stations are assigned to the same slot  the probability of a collision grows  but the length of the bit-map scan needed to give everyone a chance shrinks the limiting case is a single group containing all stations  i.e  slotted aloha   what we need is a way to assign stations to slots dynamically  with many stations per slot when the load is low and few  or even just one  station per slot when the load is high the adaptive tree walk protocol one particularly simple way of performing the necessary assignment is to use the algorithm devised by the u.s army for testing soldiers for syphilis during world war ii  dorfman  1943   in short  the army took a blood sample from n soldiers a portion of each sample was poured into a single test tube this mixed sample was then tested for antibodies if none were found  all the soldiers in the group were declared healthy if antibodies were present  two new mixed samples 276 the medium access control sublayer chap 4 were prepared  one from soldiers 1 through n/2 and one from the rest the process was repeated recursively until the infected soldiers were determined for the computerized version of this algorithm  capetanakis  1979   it is convenient to think of the stations as the leaves of a binary tree  as illustrated in fig 4-10 in the first contention slot following a successful frame transmission  slot 0  all stations are permitted to try to acquire the channel if one of them does so  fine if there is a collision  then during slot 1 only those stations falling under node 2 in the tree may compete if one of them acquires the channel  the slot following the frame is reserved for those stations under node 3 if  on the other hand  two or more stations under node 2 want to transmit  there will be a collision during slot 1  in which case it is node 4 ? s turn during slot 2 1 2 3 4 5 6 7 a b c d e f g h stations figure 4-10 the tree for eight stations in essence  if a collision occurs during slot 0  the entire tree is searched  depth first  to locate all ready stations each bit slot is associated with some particular node in the tree if a collision occurs  the search continues recursively with the node ? s left and right children if a bit slot is idle or if only one station transmits in it  the searching of its node can stop because all ready stations have been located  were there more than one  there would have been a collision  when the load on the system is heavy  it is hardly worth the effort to dedicate slot 0 to node 1 because that makes sense only in the unlikely event that precisely one station has a frame to send similarly  one could argue that nodes 2 and 3 should be skipped as well for the same reason put in more general terms  at what level in the tree should the search begin ? clearly  the heavier the load  the farther down the tree the search should begin we will assume that each station has a good estimate of the number of ready stations  q  for example  from monitoring recent traffic to proceed  let us number the levels of the tree from the top  with node 1 in fig 4-10 at level 0  nodes 2 and 3 at level 1  etc notice that each node at level i sec 4.2 multiple access protocols 277 has a fraction 2 ? i of the stations below it if the q ready stations are uniformly distributed  the expected number of them below a specific node at level i is just 2 ? iq intuitively  we would expect the optimal level to begin searching the tree to be the one at which the mean number of contending stations per slot is 1  that is  the level at which 2 ? iq ? ? 1 solving this equation  we find that i ? ? log2 q numerous improvements to the basic algorithm have been discovered and are discussed in some detail by bertsekas and gallager  1992   for example  consider the case of stations g and h being the only ones wanting to transmit at node 1 a collision will occur  so 2 will be tried and discovered idle it is pointless to probe node 3 since it is guaranteed to have a collision  we know that two or more stations under 1 are ready and none of them are under 2  so they must all be under 3   the probe of 3 can be skipped and 6 tried next when this probe also turns up nothing  7 can be skipped and node g tried next 4.2.5 wireless lan protocols a system of laptop computers that communicate by radio can be regarded as a wireless lan  as we discussed in sec 1.5.3 such a lan is an example of a broadcast channel it also has somewhat different properties than a wired lan  which leads to different mac protocols in this section  we will examine some of these protocols in sec 4.4  we will look at 802.11  wifi  in detail a common configuration for a wireless lan is an office building with access points  aps  strategically placed around the building the aps are wired together using copper or fiber and provide connectivity to the stations that talk to them if the transmission power of the aps and laptops is adjusted to have a range of tens of meters  nearby rooms become like a single cell and the entire building becomes like the cellular telephony systems we studied in chap 2  except that each cell only has one channel this channel is shared by all the stations in the cell  including the ap it typically provides megabit/sec bandwidths  up to 600 mbps we have already remarked that wireless systems can not normally detect a collision while it is occurring the received signal at a station may be tiny  perhaps a million times fainter than the signal that is being transmitted finding it is like looking for a ripple on the ocean instead  acknowledgements are used to discover collisions and other errors after the fact there is an even more important difference between wireless lans and wired lans a station on a wireless lan may not be able to transmit frames to or receive frames from all other stations because of the limited radio range of the stations in wired lans  when one station sends a frame  all other stations receive it the absence of this property in wireless lans causes a variety of complications we will make the simplifying assumption that each radio transmitter has some fixed range  represented by a circular coverage region within which another station can sense and receive the station ? s transmission it is important to realize that 278 the medium access control sublayer chap 4 in practice coverage regions are not nearly so regular because the propagation of radio signals depends on the environment walls and other obstacles that attenuate and reflect signals may cause the range to differ markedly in different directions but a simple circular model will do for our purposes a naive approach to using a wireless lan might be to try csma  just listen for other transmissions and only transmit if no one else is doing so the trouble is  this protocol is not really a good way to think about wireless because what matters for reception is interference at the receiver  not at the sender to see the nature of the problem  consider fig 4-11  where four wireless stations are illustrated for our purposes  it does not matter which are aps and which are laptops the radio range is such that a and b are within each other ? s range and can potentially interfere with one another c can also potentially interfere with both b and d  but not with a radio range  a   b  radio range a b c d a b c d figure 4-11 a wireless lan  a  a and c are hidden terminals when transmitting to b  b  b and c are exposed terminals when transmitting to a and d first consider what happens when a and c transmit to b  as depicted in fig 4-11  a   if a sends and then c immediately senses the medium  it will not hear a because a is out of range thus c will falsely conclude that it can transmit to b if c does start transmitting  it will interfere at b  wiping out the frame from a  we assume here that no cdma-type scheme is used to provide multiple channels  so collisions garble the signal and destroy both frames  we want a mac protocol that will prevent this kind of collision from happening because it wastes bandwidth the problem of a station not being able to detect a potential competitor for the medium because the competitor is too far away is called the hidden terminal problem now let us look at a different situation  b transmitting to a at the same time that c wants to transmit to d  as shown in fig 4-11  b   if c senses the medium  it will hear a transmission and falsely conclude that it may not send to d  shown as a dashed line   in fact  such a transmission would cause bad reception only in the zone between b and c  where neither of the intended receivers is located we want a mac protocol that prevents this kind of deferral from happening because it wastes bandwidth the problem is called the exposed terminal problem the difficulty is that  before starting a transmission  a station really wants to know whether there is radio activity around the receiver csma merely tells it sec 4.2 multiple access protocols 279 whether there is activity near the transmitter by sensing the carrier with a wire  all signals propagate to all stations  so this distinction does not exist however  only one transmission can then take place at once anywhere in the system in a system based on short-range radio waves  multiple transmissions can occur simultaneously if they all have different destinations and these destinations are out of range of one another we want this concurrency to happen as the cell gets larger and larger  in the same way that people at a party should not wait for everyone in the room to go silent before they talk ; multiple conversations can take place at once in a large room as long as they are not directed to the same location an early and influential protocol that tackles these problems for wireless lans is maca  multiple access with collision avoidance   karn  1990   the basic idea behind it is for the sender to stimulate the receiver into outputting a short frame  so stations nearby can detect this transmission and avoid transmitting for the duration of the upcoming  large  data frame this technique is used instead of carrier sense maca is illustrated in fig 4-12 let us see how a sends a frame to b a starts by sending an rts  request to send  frame to b  as shown in fig 4-12  a   this short frame  30 bytes  contains the length of the data frame that will eventually follow then b replies with a cts  clear to send  frame  as shown in fig 4-12  b   the cts frame contains the data length  copied from the rts frame   upon receipt of the cts frame  a begins transmission  a   b  range of a 's transmitter a rts e c b d a cts e c b d range of b 's transmitter figure 4-12 the maca protocol  a  a sending an rts to b  b  b responding with a cts to a now let us see how stations overhearing either of these frames react any station hearing the rts is clearly close to a and must remain silent long enough for the cts to be transmitted back to a without conflict any station hearing the cts is clearly close to b and must remain silent during the upcoming data transmission  whose length it can tell by examining the cts frame 280 the medium access control sublayer chap 4 in fig 4-12  c is within range of a but not within range of b therefore  it hears the rts from a but not the cts from b as long as it does not interfere with the cts  it is free to transmit while the data frame is being sent in contrast  d is within range of b but not a it does not hear the rts but does hear the cts hearing the cts tips it off that it is close to a station that is about to receive a frame  so it defers sending anything until that frame is expected to be finished station e hears both control messages and  like d  must be silent until the data frame is complete despite these precautions  collisions can still occur for example  b and c could both send rts frames to a at the same time these will collide and be lost in the event of a collision  an unsuccessful transmitter  i.e  one that does not hear a cts within the expected time interval  waits a random amount of time and tries again later 4.3 ethernet we have now finished our discussion of channel allocation protocols in the abstract  so it is time to see how these principles apply to real systems many of the designs for personal  local  and metropolitan area networks have been standardized under the name of ieee 802 a few have survived but many have not  as we saw in fig 1-38 some people who believe in reincarnation think that charles darwin came back as a member of the ieee standards association to weed out the unfit the most important of the survivors are 802.3  ethernet  and 802.11  wireless lan   bluetooth  wireless pan  is widely deployed but has now been standardized outside of 802.15 with 802.16  wireless man   it is too early to tell please consult the 6th edition of this book to find out we will begin our study of real systems with ethernet  probably the most ubiquitous kind of computer network in the world two kinds of ethernet exist  classic ethernet  which solves the multiple access problem using the techniques we have studied in this chapter ; and switched ethernet  in which devices called switches are used to connect different computers it is important to note that  while they are both referred to as ethernet  they are quite different classic ethernet is the original form and ran at rates from 3 to 10 mbps switched ethernet is what ethernet has become and runs at 100  1000  and 10,000 mbps  in forms called fast ethernet  gigabit ethernet  and 10 gigabit ethernet in practice  only switched ethernet is used nowadays we will discuss these historical forms of ethernet in chronological order showing how they developed since ethernet and ieee 802.3 are identical except for a minor difference  which we will discuss shortly   many people use the terms ? ? ethernet ? ? and ? ? ieee 802.3 ? ? interchangeably we will do so  too for more information about ethernet  see spurgeon  2000   sec 4.3 ethernet 281 4.3.1 classic ethernet physical layer the story of ethernet starts about the same time as that of aloha  when a student named bob metcalfe got his bachelor ? s degree at m.i.t and then moved up the river to get his ph.d at harvard during his studies  he was exposed to abramson ? s work he became so interested in it that after graduating from harvard  he decided to spend the summer in hawaii working with abramson before starting work at xerox parc  palo alto research center   when he got to parc  he saw that the researchers there had designed and built what would later be called personal computers but the machines were isolated using his knowledge of abramson ? s work  he  together with his colleague david boggs  designed and implemented the first local area network  metcalfe and boggs  1976   it used a single long  thick coaxial cable and ran at 3 mbps they called the system ethernet after the luminiferous ether  through which electromagnetic radiation was once thought to propagate  when the 19th-century british physicist james clerk maxwell discovered that electromagnetic radiation could be described by a wave equation  scientists assumed that space must be filled with some ethereal medium in which the radiation was propagating only after the famous michelson-morley experiment in 1887 did physicists discover that electromagnetic radiation could propagate in a vacuum  the xerox ethernet was so successful that dec  intel  and xerox drew up a standard in 1978 for a 10-mbps ethernet  called the dix standard with a minor change  the dix standard became the ieee 802.3 standard in 1983 unfortunately for xerox  it already had a history of making seminal inventions  such as the personal computer  and then failing to commercialize on them  a story told in fumbling the future  smith and alexander  1988   when xerox showed little interest in doing anything with ethernet other than helping standardize it  metcalfe formed his own company  3com  to sell ethernet adapters for pcs it sold many millions of them classic ethernet snaked around the building as a single long cable to which all the computers were attached this architecture is shown in fig 4-13 the first variety  popularly called thick ethernet  resembled a yellow garden hose  with markings every 2.5 meters to show where to attach computers  the 802.3 standard did not actually require the cable to be yellow  but it did suggest it  it was succeeded by thin ethernet  which bent more easily and made connections using industry-standard bnc connectors thin ethernet was much cheaper and easier to install  but it could run for only 185 meters per segment  instead of 500 m with thick ethernet   each of which could handle only 30 machines  instead of 100   each version of ethernet has a maximum cable length per segment  i.e  unamplified length  over which the signal will propagate to allow larger networks  multiple cables can be connected by repeaters a repeater is a physical layer device that receives  amplifies  i.e  regenerates   and retransmits signals in both directions as far as the software is concerned  a series of cable segments 282 the medium access control sublayer chap 4 ether transceiver interface cable figure 4-13 architecture of classic ethernet connected by repeaters is no different from a single cable  except for a small amount of delay introduced by the repeaters   over each of these cables  information was sent using the manchester encoding we studied in sec 2.5 an ethernet could contain multiple cable segments and multiple repeaters  but no two transceivers could be more than 2.5 km apart and no path between any two transceivers could traverse more than four repeaters the reason for this restriction was so that the mac protocol  which we will look at next  would work correctly 4.3.2 classic ethernet mac sublayer protocol the format used to send frames is shown in fig 4-14 first comes a preamble of 8 bytes  each containing the bit pattern 10101010  with the exception of the last byte  in which the last 2 bits are set to 11   this last byte is called the start of frame delimiter for 802.3 the manchester encoding of this pattern produces a 10-mhz square wave for 6.4 ? sec to allow the receiver ? s clock to synchronize with the sender ? s the last two 1 bits tell the receiver that the rest of the frame is about to start  a  preamble bytes type data pad checksum destination address source address 8 6 6 2 0-1500 0-46 4  b  preamble length data pad checksum destination address source address figure 4-14 frame formats  a  ethernet  dix    b  ieee 802.3 next come two addresses  one for the destination and one for the source they are each 6 bytes long the first transmitted bit of the destination address is a 0 for sec 4.3 ethernet 283 ordinary addresses and a 1 for group addresses group addresses allow multiple stations to listen to a single address when a frame is sent to a group address  all the stations in the group receive it sending to a group of stations is called multicasting the special address consisting of all 1 bits is reserved for broadcasting a frame containing all 1s in the destination field is accepted by all stations on the network multicasting is more selective  but it involves group management to define which stations are in the group conversely  broadcasting does not differentiate between stations at all  so it does not require any group management an interesting feature of station source addresses is that they are globally unique  assigned centrally by ieee to ensure that no two stations anywhere in the world have the same address the idea is that any station can uniquely address any other station by just giving the right 48-bit number to do this  the first 3 bytes of the address field are used for an oui  organizationally unique identifier   values for this field are assigned by ieee and indicate a manufacturer manufacturers are assigned blocks of 224 addresses the manufacturer assigns the last 3 bytes of the address and programs the complete address into the nic before it is sold next comes the type or length field  depending on whether the frame is ethernet or ieee 802.3 ethernet uses a type field to tell the receiver what to do with the frame multiple network-layer protocols may be in use at the same time on the same machine  so when an ethernet frame arrives  the operating system has to know which one to hand the frame to the type field specifies which process to give the frame to for example  a type code of 0x0800 means that the data contains an ipv4 packet ieee 802.3  in its wisdom  decided that this field would carry the length of the frame  since the ethernet length was determined by looking inside the data ? a layering violation if ever there was one of course  this meant there was no way for the receiver to figure out what to do with an incoming frame that problem was handled by the addition of another header for the llc  logical link control  protocol within the data it uses 8 bytes to convey the 2 bytes of protocol type information unfortunately  by the time 802.3 was published  so much hardware and software for dix ethernet was already in use that few manufacturers and users were enthusiastic about repackaging the type and length fields in 1997  ieee threw in the towel and said that both ways were fine with it fortunately  all the type fields in use before 1997 had values greater than 1500  then well established as the maximum data size now the rule is that any number there less than or equal to 0x600  1536  can be interpreted as length  and any number greater than 0x600 can be interpreted as type now ieee can maintain that everyone is using its standard and everybody else can keep on doing what they were already doing  not bothering with llc  without feeling guilty about it next come the data  up to 1500 bytes this limit was chosen somewhat arbitrarily at the time the ethernet standard was cast in stone  mostly based on the fact 284 the medium access control sublayer chap 4 that a transceiver needs enough ram to hold an entire frame and ram was expensive in 1978 a larger upper limit would have meant more ram  and hence a more expensive transceiver in addition to there being a maximum frame length  there is also a minimum frame length while a data field of 0 bytes is sometimes useful  it causes a problem when a transceiver detects a collision  it truncates the current frame  which means that stray bits and pieces of frames appear on the cable all the time to make it easier to distinguish valid frames from garbage  ethernet requires that valid frames must be at least 64 bytes long  from destination address to checksum  including both if the data portion of a frame is less than 46 bytes  the pad field is used to fill out the frame to the minimum size another  and more important  reason for having a minimum length frame is to prevent a station from completing the transmission of a short frame before the first bit has even reached the far end of the cable  where it may collide with another frame this problem is illustrated in fig 4-15 at time 0  station a  at one end of the network  sends off a frame let us call the propagation time for this frame to reach the other end ?  just before the frame gets to the other end  i.e  at time ? ? ? ? ?   the most distant station  b  starts transmitting when b detects that it is receiving more power than it is putting out  it knows that a collision has occurred  so it aborts its transmission and generates a 48-bit noise burst to warn all other stations in other words  it jams the ether to make sure the sender does not miss the collision at about time 2 ?  the sender sees the noise burst and aborts its transmission  too it then waits a random time before trying again packet starts a at time 0 b a b packet almost at b at collision at time a b noise burst gets back to a at 2 a b  a   b   c   d  figure 4-15 collision detection can take as long as 2 ?  if a station tries to transmit a very short frame  it is conceivable that a collision will occur  but the transmission will have completed before the noise burst gets back to the station at 2 ?  the sender will then incorrectly conclude that the frame was successfully sent to prevent this situation from occurring  all frames must take more than 2 ? ? to send so that the transmission is still taking place when sec 4.3 ethernet 285 the noise burst gets back to the sender for a 10-mbps lan with a maximum length of 2500 meters and four repeaters  from the 802.3 specification   the round-trip time  including time to propagate through the four repeaters  has been determined to be nearly 50 ? sec in the worst case therefore  the shortest allowed frame must take at least this long to transmit at 10 mbps  a bit takes 100 nsec  so 500 bits is the smallest frame that is guaranteed to work to add some margin of safety  this number was rounded up to 512 bits or 64 bytes the final field is the checksum it is a 32-bit crc of the kind we studied in sec 3.2 in fact  it is defined exactly by the generator polynomial we gave there  which popped up for ppp  adsl  and other links too this crc is an errordetecting code that is used to determine if the bits of the frame have been received correctly it just does error detection  with the frame dropped if an error is detected csma/cd with binary exponential backoff classic ethernet uses the 1-persistent csma/cd algorithm that we studied in sec 4.2 this descriptor just means that stations sense the medium when they have a frame to send and send the frame as soon as the medium becomes idle they monitor the channel for collisions as they send if there is a collision  they abort the transmission with a short jam signal and retransmit after a random interval let us now see how the random interval is determined when a collision occurs  as it is a new method the model is still that of fig 4-5 after a collision  time is divided into discrete slots whose length is equal to the worst-case roundtrip propagation time on the ether  2 ?   to accommodate the longest path allowed by ethernet  the slot time has been set to 512 bit times  or 51.2 ? sec after the first collision  each station waits either 0 or 1 slot times at random before trying again if two stations collide and each one picks the same random number  they will collide again after the second collision  each one picks either 0  1  2  or 3 at random and waits that number of slot times if a third collision occurs  the probability of this happening is 0.25   the next time the number of slots to wait is chosen at random from the interval 0 to 23 ? ? 1 in general  after i collisions  a random number between 0 and 2i ? ? 1 is chosen  and that number of slots is skipped however  after 10 collisions have been reached  the randomization interval is frozen at a maximum of 1023 slots after 16 collisions  the controller throws in the towel and reports failure back to the computer further recovery is up to higher layers this algorithm  called binary exponential backoff  was chosen to dynamically adapt to the number of stations trying to send if the randomization interval for all collisions were 1023  the chance of two stations colliding for a second time would be negligible  but the average wait after a collision would be hundreds of slot times  introducing significant delay on the other hand  if each station always 286 the medium access control sublayer chap 4 delayed for either 0 or 1 slots  then if 100 stations ever tried to send at once they would collide over and over until 99 of them picked 1 and the remaining station picked 0 this might take years by having the randomization interval grow exponentially as more and more consecutive collisions occur  the algorithm ensures a low delay when only a few stations collide but also ensures that the collisions are resolved in a reasonable interval when many stations collide truncating the backoff at 1023 keeps the bound from growing too large if there is no collision  the sender assumes that the frame was probably successfully delivered that is  neither csma/cd nor ethernet provides acknowledgements this choice is appropriate for wired and optical fiber channels that have low error rates any errors that do occur must then be detected by the crc and recovered by higher layers for wireless channels that have more errors  we will see that acknowledgements are used 4.3.3 ethernet performance now let us briefly examine the performance of classic ethernet under conditions of heavy and constant load  that is  with k stations always ready to transmit a rigorous analysis of the binary exponential backoff algorithm is complicated instead  we will follow metcalfe and boggs  1976  and assume a constant retransmission probability in each slot if each station transmits during a contention slot with probability p  the probability a that some station acquires the channel in that slot is a ? ? kp  1 ? ? p  k ? ? 1  4-5  a is maximized when p ? ? 1/k  with a ? ? 1/e as k ? ?  the probability that the contention interval has exactly j slots in it is a  1 ? ? a  j ? ? 1  so the mean number of slots per contention is given by j ? 0 ? ? ? ja  1 ? ? a  j ? ? 1 ? a 1 since each slot has a duration 2 ?  the mean contention interval  w  is 2 ? /a assuming optimal p  the mean number of contention slots is never more than e  so w is at most 2 ? e ? ? 5.4 ?  if the mean frame takes p sec to transmit  when many stations have frames to send  channel efficiency ? p ? ? 2 ? /a p  4-6  here we see where the maximum cable distance between any two stations enters into the performance figures the longer the cable  the longer the contention interval  which is why the ethernet standard specifies a maximum cable length sec 4.3 ethernet 287 it is instructive to formulate eq  4-6  in terms of the frame length  f  the network bandwidth  b  the cable length  l  and the speed of signal propagation  c  for the optimal case of e contention slots per frame with p ? ? f/b  eq  4-6  becomes channel efficiency ? 1 ? ? 2ble /cf 1  4-7  when the second term in the denominator is large  network efficiency will be low more specifically  increasing network bandwidth or distance  the bl product  reduces efficiency for a given frame size unfortunately  much research on network hardware is aimed precisely at increasing this product people want high bandwidth over long distances  fiber optic mans  for example   yet classic ethernet implemented in this manner is not the best system for these applications we will see other ways of implementing ethernet in the next section in fig 4-16  the channel efficiency is plotted versus the number of ready stations for 2 ? ? ? ? 51.2 ? sec and a data rate of 10 mbps  using eq  4-7   with a 64 byte slot time  it is not surprising that 64-byte frames are not efficient on the other hand  with 1024-byte frames and an asymptotic value of e 64-byte slots per contention interval  the contention period is 174 bytes long and the efficiency is 85 %  this result is much better than the 37 % efficiency of slotted aloha 1.0 0.9 0.8 0.7 0.6 0.5 0.4 0.3 0.2 0.1 0 1 2 4 8 16 number of stations trying to send channel efficiency 32 64 128 256 1024-byte frames 512-byte frames 256-byte frames 128-byte frames 64-byte frames figure 4-16 efficiency of ethernet at 10 mbps with 512-bit slot times it is probably worth mentioning that there has been a large amount of theoretical performance analysis of ethernet  and other networks   most of the results should be taken with a grain  or better yet  a metric ton  of salt  for two reasons 288 the medium access control sublayer chap 4 first  virtually all of the theoretical work assumes poisson traffic as researchers have begun looking at real data  it now appears that network traffic is rarely poisson instead  it is self-similar or bursty over a range of time scales  paxson and floyd  1995 ; and leland et al  1994   what this means is that averaging over long periods of time does not smooth out the traffic as well as using questionable models  many of the analyses focus on the ? ? interesting ? ? performance cases of abnormally high load boggs et al  1988  showed by experimentation that ethernet works well in reality  even at moderately high load 4.3.4 switched ethernet ethernet soon began to evolve away from the single long cable architecture of classic ethernet the problems associated with finding breaks or loose connections drove it toward a different kind of wiring pattern  in which each station has a dedicated cable running to a central hub a hub simply connects all the attached wires electrically  as if they were soldered together this configuration is shown in fig 4-17  a   port line hub switch  a   b  port line figure 4-17  a  hub  b  switch the wires were telephone company twisted pairs  since most office buildings were already wired this way and normally plenty of spares were available this reuse was a win  but it did reduce the maximum cable run from the hub to 100 meters  200 meters if high quality category 5 twisted pairs were used   adding or removing a station is simpler in this configuration  and cable breaks can be detected easily with the advantages of being able to use existing wiring and ease of maintenance  twisted-pair hubs quickly became the dominant form of ethernet however  hubs do not increase capacity because they are logically equivalent to the single long cable of classic ethernet as more and more stations are added  each station gets a decreasing share of the fixed capacity eventually  the lan will saturate one way out is to go to a higher speed  say  from 10 mbps to 100 mbps  1 gbps  or even higher speeds but with the growth of multimedia and powerful servers  even a 1-gbps ethernet can become saturated sec 4.3 ethernet 289 fortunately  there is an another way to deal with increased load  switched ethernet the heart of this system is a switch containing a high-speed backplane that connects all of the ports  as shown in fig 4-17  b   from the outside  a switch looks just like a hub they are both boxes  typically with 4 to 48 ports  each with a standard rj-45 connector for a twisted-pair cable each cable connects the switch or hub to a single computer  as shown in fig 4-18 a switch has the same advantages as a hub  too it is easy to add or remove a new station by plugging or unplugging a wire  and it is easy to find most faults since a flaky cable or port will usually affect just one station there is still a shared component that can fail ? the switch itself ? but if all stations lose connectivity the it folks know what to do to fix the problem  replace the whole switch switch twisted pair switch ports hub figure 4-18 an ethernet switch inside the switch  however  something very different is happening switches only output frames to the ports for which those frames are destined when a switch port receives an ethernet frame from a station  the switch checks the ethernet addresses to see which port the frame is destined for this step requires the switch to be able to work out which ports correspond to which addresses  a process that we will describe in sec 4.8 when we get to the general case of switches connected to other switches for now  just assume that the switch knows the frame ? s destination port the switch then forwards the frame over its high-speed backplane to the destination port the backplane typically runs at many gbps  using a proprietary protocol that does not need to be standardized because it is entirely hidden inside the switch the destination port then transmits the frame on the wire so that it reaches the intended station none of the other ports even knows the frame exists what happens if more than one of the stations or ports wants to send a frame at the same time ? again  switches differ from hubs in a hub  all stations are in the same collision domain they must use the csma/cd algorithm to schedule their transmissions in a switch  each port is its own independent collision domain in the common case that the cable is full duplex  both the station and the port can send a frame on the cable at the same time  without worrying about other ports and stations collisions are now impossible and csma/cd is not needed however  if the cable is half duplex  the station and the port must contend for transmission with csma/cd in the usual way 290 the medium access control sublayer chap 4 a switch improves performance over a hub in two ways first  since there are no collisions  the capacity is used more efficiently second  and more importantly  with a switch multiple frames can be sent simultaneously  by different stations   these frames will reach the switch ports and travel over the switch ? s backplane to be output on the proper ports however  since two frames might be sent to the same output port at the same time  the switch must have buffering so that it can temporarily queue an input frame until it can be transmitted to the output port overall  these improvements give a large performance win that is not possible with a hub the total system throughput can often be increased by an order of magnitude  depending on the number of ports and traffic patterns the change in the ports on which frames are output also has security benefits most lan interfaces have a promiscuous mode  in which all frames are given to each computer  not just those addressed to it with a hub  every computer that is attached can see the traffic sent between all of the other computers spies and busybodies love this feature with a switch  traffic is forwarded only to the ports where it is destined this restriction provides better isolation so that traffic will not easily escape and fall into the wrong hands however  it is better to encrypt traffic if security is really needed because the switch just expects standard ethernet frames on each input port  it is possible to use some of the ports as concentrators in fig 4-18  the port in the upper-right corner is connected not to a single station  but to a 12-port hub instead as frames arrive at the hub  they contend for the ether in the usual way  including collisions and binary backoff successful frames make it through the hub to the switch and are treated there like any other incoming frames the switch does not know they had to fight their way in once in the switch  they are sent to the correct output line over the high-speed backplane it is also possible that the correct destination was one on the lines attached to the hub  in which case the frame has already been delivered so the switch just drops it hubs are simpler and cheaper than switches  but due to falling switch prices they have become an endangered species modern networks largely use switched ethernet nevertheless  legacy hubs still exist 4.3.5 fast ethernet at the same time that switches were becoming popular  the speed of 10-mbps ethernet was coming under pressure at first  10 mbps seemed like heaven  just as cable modems seemed like heaven to the users of telephone modems but the novelty wore off quickly as a kind of corollary to parkinson ? s law  ? ? work expands to fill the time available for its completion ? ?   it seemed that data expanded to fill the bandwidth available for their transmission many installations needed more bandwidth and thus had numerous 10-mbps lans connected by a maze of repeaters  hubs  and switches  although to the network managers it sometimes felt that they were being held together by bubble sec 4.3 ethernet 291 gum and chicken wire but even with ethernet switches  the maximum bandwidth of a single computer was limited by the cable that connected it to the switch port it was in this environment that ieee reconvened the 802.3 committee in 1992 with instructions to come up with a faster lan one proposal was to keep 802.3 exactly as it was  but just make it go faster another proposal was to redo it totally and give it lots of new features  such as real-time traffic and digitized voice  but just keep the old name  for marketing reasons   after some wrangling  the committee decided to keep 802.3 the way it was  and just make it go faster this strategy would get the job done before the technology changed and avoid unforeseen problems with a brand new design the new design would also be backwardcompatible with existing ethernet lans the people behind the losing proposal did what any self-respecting computer-industry people would have done under these circumstances  they stomped off and formed their own committee and standardized their lan anyway  eventually as 802.12   it flopped miserably the work was done quickly  by standards committees ? norms   and the result  802.3u  was approved by ieee in june 1995 technically  802.3u is not a new standard  but an addendum to the existing 802.3 standard  to emphasize its backward compatibility   this strategy is used a lot since practically everyone calls it fast ethernet  rather than 802.3u  we will do that  too the basic idea behind fast ethernet was simple  keep all the old frame formats  interfaces  and procedural rules  but reduce the bit time from 100 nsec to 10 nsec technically  it would have been possible to copy 10-mbps classic ethernet and still detect collisions on time by just reducing the maximum cable length by a factor of 10 however  the advantages of twisted-pair wiring were so overwhelming that fast ethernet is based entirely on this design thus  all fast ethernet systems use hubs and switches ; multidrop cables with vampire taps or bnc connectors are not permitted nevertheless  some choices still had to be made  the most important being which wire types to support one contender was category 3 twisted pair the argument for it was that practically every office in the western world had at least four category 3  or better  twisted pairs running from it to a telephone wiring closet within 100 meters sometimes two such cables existed thus  using category 3 twisted pair would make it possible to wire up desktop computers using fast ethernet without having to rewire the building  an enormous advantage for many organizations the main disadvantage of a category 3 twisted pair is its inability to carry 100 mbps over 100 meters  the maximum computer-to-hub distance specified for 10-mbps hubs in contrast  category 5 twisted pair wiring can handle 100 m easily  and fiber can go much farther the compromise chosen was to allow all three possibilities  as shown in fig 4-19  but to pep up the category 3 solution to give it the additional carrying capacity needed the category 3 utp scheme  called 100base-t4  used a signaling speed of 25 mhz  only 25 % faster than standard ethernet ? s 20 mhz  remember that 292 the medium access control sublayer chap 4 name cable max segment advantages 100base-t4 twisted pair 100 m uses category 3 utp 100base-tx twisted pair 100 m full duplex at 100 mbps  cat 5 utp  100base-fx fiber optics 2000 m full duplex at 100 mbps ; long runs figure 4-19 the original fast ethernet cabling manchester encoding  discussed in sec 2.5  requires two clock periods for each of the 10 million bits sent each second  however  to achieve the necessary bit rate  100base-t4 requires four twisted pairs of the four pairs  one is always to the hub  one is always from the hub  and the other two are switchable to the current transmission direction to get 100 mbps out of the three twisted pairs in the transmission direction  a fairly involved scheme is used on each twisted pair it involves sending ternary digits with three different voltage levels this scheme is not likely to win any prizes for elegance  and we will skip the details however  since standard telephone wiring for decades has had four twisted pairs per cable  most offices are able to use the existing wiring plant of course  it means giving up your office telephone  but that is surely a small price to pay for faster email 100base-t4 fell by the wayside as many office buildings were rewired with category 5 utp for 100base-tx ethernet  which came to dominate the market this design is simpler because the wires can handle clock rates of 125 mhz only two twisted pairs per station are used  one to the hub and one from it neither straight binary coding  i.e  nrz  nor manchester coding is used instead  the 4b/5b encoding we described in sec 2.5 is used 4 data bits are encoded as 5 signal bits and sent at 125 mhz to provide 100 mbps this scheme is simple but has sufficient transitions for synchronization and uses the bandwidth of the wire relatively well the 100base-tx system is full duplex ; stations can transmit at 100 mbps on one twisted pair and receive at 100 mbps on another twisted pair at the same time the last option  100base-fx  uses two strands of multimode fiber  one for each direction  so it  too  can run full duplex with 100 mbps in each direction in this setup  the distance between a station and the switch can be up to 2 km fast ethernet allows interconnection by either hubs or switches to ensure that the csma/cd algorithm continues to work  the relationship between the minimum frame size and maximum cable length must be maintained as the network speed goes up from 10 mbps to 100 mbps so  either the minimum frame size of 64 bytes must go up or the maximum cable length of 2500 m must come down  proportionally the easy choice was for the maximum distance between any two stations to come down by a factor of 10  since a hub with 100-m cables falls within this new maximum already however  2-km 100base-fx cables are sec 4.3 ethernet 293 too long to permit a 100-mbps hub with the normal ethernet collision algorithm these cables must instead be connected to a switch and operate in a full-duplex mode so that there are no collisions users quickly started to deploy fast ethernet  but they were not about to throw away 10-mbps ethernet cards on older computers as a consequence  virtually all fast ethernet switches can handle a mix of 10-mbps and 100-mbps stations to make upgrading easy  the standard itself provides a mechanism called autonegotiation that lets two stations automatically negotiate the optimum speed  10 or 100 mbps  and duplexity  half or full   it works well most of the time but is known to lead to duplex mismatch problems when one end of the link autonegotiates but the other end does not and is set to full-duplex mode  shalunov and carlson  2005   most ethernet products use this feature to configure themselves 4.3.6 gigabit ethernet the ink was barely dry on the fast ethernet standard when the 802 committee began working on a yet faster ethernet  quickly dubbed gigabit ethernet ieee ratified the most popular form as 802.3ab in 1999 below we will discuss some of the key features of gigabit ethernet more information is given by spurgeon  2000   the committee ? s goals for gigabit ethernet were essentially the same as the committee ? s goals for fast ethernet  increase performance tenfold while maintaining compatibility with all existing ethernet standards in particular  gigabit ethernet had to offer unacknowledged datagram service with both unicast and broadcast  use the same 48-bit addressing scheme already in use  and maintain the same frame format  including the minimum and maximum frame sizes the final standard met all these goals like fast ethernet  all configurations of gigabit ethernet use point-to-point links in the simplest configuration  illustrated in fig 4-20  a   two computers are directly connected to each other the more common case  however  uses a switch or a hub connected to multiple computers and possibly additional switches or hubs  as shown in fig 4-20  b   in both configurations  each individual ethernet cable has exactly two devices on it  no more and no fewer also like fast ethernet  gigabit ethernet supports two different modes of operation  full-duplex mode and half-duplex mode the ? ? normal ? ? mode is fullduplex mode  which allows traffic in both directions at the same time this mode is used when there is a central switch connected to computers  or other switches  on the periphery in this configuration  all lines are buffered so each computer and switch is free to send frames whenever it wants to the sender does not have to sense the channel to see if anybody else is using it because contention is impossible on the line between a computer and a switch  the computer is the only possible sender to the switch  and the transmission will succeed even if the switch is currently sending a frame to the computer  because the line is full duplex   since 294 the medium access control sublayer chap 4 switch or hub ethernet  a   b  ethernet computer figure 4-20  a  a two-station ethernet  b  a multistation ethernet no contention is possible  the csma/cd protocol is not used  so the maximum length of the cable is determined by signal strength issues rather than by how long it takes for a noise burst to propagate back to the sender in the worst case switch \ % es are free to mix and match speeds autonegotiation is supported just as in fast ethernet  only now the choice is among 10  100  and 1000 mbps the other mode of operation  half-duplex  is used when the computers are connected to a hub rather than a switch a hub does not buffer incoming frames instead  it electrically connects all the lines internally  simulating the multidrop cable used in classic ethernet in this mode  collisions are possible  so the standard csma/cd protocol is required because a 64-byte frame  the shortest allowed  can now be transmitted 100 times faster than in classic ethernet  the maximum cable length must be 100 times less  or 25 meters  to maintain the essential property that the sender is still transmitting when the noise burst gets back to it  even in the worst case with a 2500-meter-long cable  the sender of a 64-byte frame at 1 gbps would be long finished before the frame got even a tenth of the way to the other end  let alone to the end and back this length restriction was painful enough that two features were added to the standard to increase the maximum cable length to 200 meters  which is probably enough for most offices the first feature  called carrier extension  essentially tells the hardware to add its own padding after the normal frame to extend the frame to 512 bytes since this padding is added by the sending hardware and removed by the receiving hardware  the software is unaware of it  meaning that no changes are needed to existing software the downside is that using 512 bytes worth of bandwidth to transmit 46 bytes of user data  the payload of a 64-byte frame  has a line efficiency of only 9 %  the second feature  called frame bursting  allows a sender to transmit a concatenated sequence of multiple frames in a single transmission if the total burst is less than 512 bytes  the hardware pads it again if enough frames are waiting for transmission  this scheme is very efficient and preferred over carrier extension sec 4.3 ethernet 295 in all fairness  it is hard to imagine an organization buying modern computers with gigabit ethernet cards and then connecting them with an old-fashioned hub to simulate classic ethernet with all its collisions gigabit ethernet interfaces and switches used to be expensive  but their prices fell rapidly as sales volumes picked up still  backward compatibility is sacred in the computer industry  so the committee was required to put it in today  most computers ship with an ethernet interface that is capable of 10  100  and 1000-mbps operation and compatible with all of them gigabit ethernet supports both copper and fiber cabling  as listed in fig 4-21 signaling at or near 1 gbps requires encoding and sending a bit every nanosecond this trick was initially accomplished with short  shielded copper cables  the 1000base-cx version  and optical fibers for the optical fibers  two wavelengths are permitted and result in two different versions  0.85 microns  short  for 1000base-sx  and 1.3 microns  long  for 1000base-lx   name cable max segment advantages 1000base-sx fiber optics 550 m multimode fiber  50  62.5 microns  1000base-lx fiber optics 5000 m single  10 ?  or multimode  50  62.5 ?  1000base-cx 2 pairs of stp 25 m shielded twisted pair 1000base-t 4 pairs of utp 100 m standard category 5 utp figure 4-21 gigabit ethernet cabling signaling at the short wavelength can be achieved with cheaper leds it is used with multimode fiber and is useful for connections within a building  as it can run up to 500 m for 50-micron fiber signaling at the long wavelength requires more expensive lasers on the other hand  when combined with singlemode  10-micron  fiber  the cable length can be up to 5 km this limit allows long distance connections between buildings  such as for a campus backbone  as a dedicated point-to-point link later variations of the standard allowed even longer links over single-mode fiber to send bits over these versions of gigabit ethernet  the 8b/10b encoding we described in sec 2.5 was borrowed from another networking technology called fibre channel that scheme encodes 8 bits of data into 10-bit codewords that are sent over the wire or fiber  hence the name 8b/10b the codewords were chosen so that they could be balanced  i.e  have the same number of 0s and 1s  with sufficient transitions for clock recovery sending the coded bits with nrz requires a signaling bandwidth of 25 % more than that required for the uncoded bits  a big improvement over the 100 % expansion of manchester coding however  all of these options required new copper or fiber cables to support the faster signaling none of them made use of the large amount of category 5 utp that had been installed along with fast ethernet within a year  1000base-t 296 the medium access control sublayer chap 4 came along to fill this gap  and it has been the most popular form of gigabit ethernet ever since people apparently dislike rewiring their buildings more complicated signaling is needed to make ethernet run at 1000 mbps over category 5 wires to start  all four twisted pairs in the cable are used  and each pair is used in both directions at the same time by using digital signal processing to separate signals over each wire  five voltage levels that carry 2 bits are used for signaling at 125 msymbols/sec the mapping to produce the symbols from the bits is not straightforward it involves scrambling  for transitions  followed by an error correcting code in which four values are embedded into five signal levels a speed of 1 gbps is quite fast for example  if a receiver is busy with some other task for even 1 msec and does not empty the input buffer on some line  up to 1953 frames may have accumulated in that gap also  when a computer on a gigabit ethernet is shipping data down the line to a computer on a classic ethernet  buffer overruns are very likely as a consequence of these two observations  gigabit ethernet supports flow control the mechanism consists of one end sending a special control frame to the other end telling it to pause for some period of time these pause control frames are normal ethernet frames containing a type of 0x8808 pauses are given in units of the minimum frame time for gigabit ethernet  the time unit is 512 nsec  allowing for pauses as long as 33.6 msec there is one more extension that was introduced along with gigabit ethernet jumbo frames allow for frames to be longer than 1500 bytes  usually up to 9 kb this extension is proprietary it is not recognized by the standard because if it is used then ethernet is no longer compatible with earlier versions  but most vendors support it anyway the rationale is that 1500 bytes is a short unit at gigabit speeds by manipulating larger blocks of information  the frame rate can be decreased  along with the processing associated with it  such as interrupting the processor to say that a frame has arrived  or splitting up and recombining messages that were too long to fit in one ethernet frame 4.3.7 10-gigabit ethernet as soon as gigabit ethernet was standardized  the 802 committee got bored and wanted to get back to work ieee told them to start on 10-gigabit ethernet this work followed much the same pattern as the previous ethernet standards  with standards for fiber and shielded copper cable appearing first in 2002 and 2004  followed by the standard for copper twisted pair in 2006 10 gbps is a truly prodigious speed  1000x faster than the original ethernet where could it be needed ? the answer is inside data centers and exchanges to connect high-end routers  switches  and servers  as well as in long-distance  high bandwidth trunks between offices that are enabling entire metropolitan area networks based on ethernet and fiber the long distance connections use optical fiber  while the short connections may use copper or fiber sec 4.3 ethernet 297 all versions of 10-gigabit ethernet support only full-duplex operation csma/cd is no longer part of the design  and the standards concentrate on the details of physical layers that can run at very high speed compatibility still matters  though  so 10-gigabit ethernet interfaces autonegotiate and fall back to the highest speed supported by both ends of the line the main kinds of 10-gigabit ethernet are listed in fig 4-22 multimode fiber with the 0.85 ? ?  short  wavelength is used for medium distances  and singlemode fiber at 1.3 ? ?  long  and 1.5 ? ?  extended  is used for long distances 10gbase-er can run for distances of 40 km  making it suitable for wide area applications all of these versions send a serial stream of information that is produced by scrambling the data bits  then encoding them with a 64b/66b code this encoding has less overhead than an 8b/10b code name cable max segment advantages 10gbase-sr fiber optics up to 300 m multimode fiber  0.85 ?  10gbase-lr fiber optics 10 km single-mode fiber  1.3 ?  10gbase-er fiber optics 40 km single-mode fiber  1.5 ?  10gbase-cx4 4 pairs of twinax 15 m twinaxial copper 10gbase-t 4 pairs of utp 100 m category 6a utp figure 4-22 10-gigabit ethernet cabling the first copper version defined  10gbase-cx4  uses a cable with four pairs of twinaxial copper wiring each pair uses 8b/10b coding and runs at 3.125 gsymbols/second to reach 10 gbps this version is cheaper than fiber and was early to market  but it remains to be seen whether it will be beat out in the long run by 10-gigabit ethernet over more garden variety twisted pair wiring 10gbase-t is the version that uses utp cables while it calls for category 6a wiring  for shorter runs  it can use lower categories  including category 5  to allow some reuse of installed cabling not surprisingly  the physical layer is quite involved to reach 10 gbps over twisted pair we will only sketch some of the high-level details each of the four twisted pairs is used to send 2500 mbps in both directions this speed is reached using a signaling rate of 800 msymbols/sec with symbols that use 16 voltage levels the symbols are produced by scrambling the data  protecting it with a ldpc  low density parity check  code  and further coding for error correction 10-gigabit ethernet is still shaking out in the market  but the 802.3 committee has already moved on at the end of 2007  ieee created a group to standardize ethernet operating at 40 gbps and 100 gbps this upgrade will let ethernet compete in very high-performance settings  including long-distance connections in backbone networks and short connections over the equipment backplanes the standard is not yet complete  but proprietary products are already available 298 the medium access control sublayer chap 4 4.3.8 retrospective on ethernet ethernet has been around for over 30 years and has no serious competitors in sight  so it is likely to be around for many years to come few cpu architectures  operating systems  or programming languages have been king of the mountain for three decades going on strong clearly  ethernet did something right what ? probably the main reason for its longevity is that ethernet is simple and flexible in practice  simple translates into reliable  cheap  and easy to maintain once the hub and switch architecture was adopted  failures became extremely rare people hesitate to replace something that works perfectly all the time  especially when they know that an awful lot of things in the computer industry work very poorly  so that many so-called ? ? upgrades ? ? are worse than what they replaced simple also translates into cheap twisted-pair wiring is relatively inexpensive as are the hardware components they may start out expensive when there is a transition  for example  new gigabit ethernet nics or switches  but they are merely additions to a well established network  not a replacement of it  and the prices fall quickly as the sales volume picks up ethernet is easy to maintain there is no software to install  other than the drivers  and not much in the way of configuration tables to manage  and get wrong   also  adding new hosts is as simple as just plugging them in another point is that ethernet interworks easily with tcp/ip  which has become dominant ip is a connectionless protocol  so it fits perfectly with ethernet  which is also connectionless ip fits much less well with connection-oriented alternatives such as atm this mismatch definitely hurt atm ? s chances lastly  and perhaps most importantly  ethernet has been able to evolve in certain crucial ways speeds have gone up by several orders of magnitude and hubs and switches have been introduced  but these changes have not required changing the software and have often allowed the existing cabling to be reused for a time when a network salesman shows up at a large installation and says ? ? i have this fantastic new network for you all you have to do is throw out all your hardware and rewrite all your software  ? ? he has a problem many alternative technologies that you have probably not even heard of were faster than ethernet when they were introduced as well as atm  this list includes fddi  fiber distributed data interface  and fibre channel  ? two ringbased optical lans both were incompatible with ethernet neither one made it they were too complicated  which led to complex chips and high prices the lesson that should have been learned here was kiss  keep it simple  stupid   eventually  ethernet caught up with them in terms of speed  often by borrowing some of their technology  for example  the 4b/5b coding from fddi and the 8b/10b coding from fibre channel then they had no advantages left and quietly died off or fell into specialized roles ? it is called ? ? fibre channel ? ? and not ? ? fiber channel ? ? because the document editor was british sec 4.3 ethernet 299 it looks like ethernet will continue to expand in its applications for some time 10-gigabit ethernet has freed it from the distance constraints of csma/cd much effort is being put into carrier-grade ethernet to let network providers offer ethernet-based services to their customers for metropolitan and wide area networks  fouli and maler  2009   this application carries ethernet frames long distances over fiber and calls for better management features to help operators offer reliable  high-quality services very high speed networks are also finding uses in backplanes connecting components in large routers or servers both of these uses are in addition to that of sending frames between computers in offices 4.4 wireless lans wireless lans are increasingly popular  and homes  offices  cafes  libraries  airports  zoos  and other public places are being outfitted with them to connect computers  pdas  and smart phones to the internet wireless lans can also be used to let two or more nearby computers communicate without using the internet the main wireless lan standard is 802.11 we gave some background information on it in sec 1.5.3 now it is time to take a closer look at the technology in the following sections  we will look at the protocol stack  physical-layer radio transmission techniques  the mac sublayer protocol  the frame structure  and the services provided for more information about 802.11  see gast  2005   to get the truth from the mouth of the horse  consult the published standard  ieee 802.11-2007 itself 4.4.1 the 802.11 architecture and protocol stack 802.11 networks can be used in two modes the most popular mode is to connect clients  such as laptops and smart phones  to another network  such as a company intranet or the internet this mode is shown in fig 4-23  a   in infrastructure mode  each client is associated with an ap  access point  that is in turn connected to the other network the client sends and receives its packets via the ap several access points may be connected together  typically by a wired network called a distribution system  to form an extended 802.11 network in this case  clients can send frames to other clients via their aps the other mode  shown in fig 4-23  b   is an ad hoc network this mode is a collection of computers that are associated so that they can directly send frames to each other there is no access point since internet access is the killer application for wireless  ad hoc networks are not very popular now we will look at the protocols all the 802 protocols  including 802.11 and ethernet  have a certain commonality of structure a partial view of the 802.11 protocol stack is given in fig 4-24 the stack is the same for clients and 300 the medium access control sublayer chap 4  a   b  access to network point client figure 4-23 802.11 architecture  a  infrastructure mode  b  ad-hoc mode aps the physical layer corresponds fairly well to the osi physical layer  but the data link layer in all the 802 protocols is split into two or more sublayers in 802.11  the mac  medium access control  sublayer determines how the channel is allocated  that is  who gets to transmit next above it is the llc  logical link control  sublayer  whose job it is to hide the differences between the different 802 variants and make them indistinguishable as far as the network layer is concerned this could have been a significant responsibility  but these days the llc is a glue layer that identifies the protocol  e.g  ip  that is carried within an 802.11 frame 802.11  legacy  frequency hopping and infrared 802.11a ofdm 802.11b spread spectrum 802.11g ofdm 802.11n mimo ofdm logical link layer release date  1997 ? 1999 1999 1999 2003 2009 upper layers data link layer physical layer mac sublayer figure 4-24 part of the 802.11 protocol stack several transmission techniques have been added to the physical layer as 802.11 has evolved since it first appeared in 1997 two of the initial techniques  infrared in the manner of television remote controls and frequency hopping in the 2.4-ghz band  are now defunct the third initial technique  direct sequence spread spectrum at 1 or 2 mbps in the 2.4-ghz band  was extended to run at rates up to 11 mbps and quickly became a hit it is now known as 802.11b sec 4.4 wireless lans 301 to give wireless junkies a much-wanted speed boost  new transmission techniques based on the ofdm  orthogonal frequency division multiplexing  scheme we described in sec 2.5.3 were introduced in 1999 and 2003 the first is called 802.11a and uses a different frequency band  5 ghz the second stuck with 2.4 ghz and compatibility it is called 802.11g both give rates up to 54 mbps most recently  transmission techniques that simultaneously use multiple antennas at the transmitter and receiver for a speed boost were finalized as 802.11n in oct 2009 with four antennas and wider channels  the 802.11 standard now defines rates up to a startling 600 mbps we will now examine each of these transmission techniques briefly we will only cover those that are in use  however  skipping the legacy 802.11 transmission methods technically  these belong to the physical layer and should have been examined in chap 2  but since they are so closely tied to lans in general and the 802.11 lan in particular  we treat them here instead 4.4.2 the 802.11 physical layer each of the transmission techniques makes it possible to send a mac frame over the air from one station to another they differ  however  in the technology used and speeds achievable a detailed discussion of these technologies is far beyond the scope of this book  but a few words on each one will relate the techniques to the material we covered in sec 2.5 and will provide interested readers with the key terms to search for elsewhere for more information all of the 802.11 techniques use short-range radios to transmit signals in either the 2.4-ghz or the 5-ghz ism frequency bands  both described in sec 2.3.3 these bands have the advantage of being unlicensed and hence freely available to any transmitter willing to meet some restrictions  such as radiated power of at most 1 w  though 50 mw is more typical for wireless lan radios   unfortunately  this fact is also known to the manufacturers of garage door openers  cordless phones  microwave ovens  and countless other devices  all of which compete with laptops for the same spectrum the 2.4-ghz band tends to be more crowded than the 5-ghz band  so 5 ghz can be better for some applications even though it has shorter range due to the higher frequency all of the transmission methods also define multiple rates the idea is that different rates can be used depending on the current conditions if the wireless signal is weak  a low rate can be used if the signal is clear  the highest rate can be used this adjustment is called rate adaptation since the rates vary by a factor of 10 or more  good rate adaptation is important for good performance of course  since it is not needed for interoperability  the standards do not say how rate adaptation should be done the first transmission method we shall look at is 802.11b it is a spread-spectrum method that supports rates of 1  2  5.5  and 11 mbps  though in practice the operating rate is nearly always 11 mbps it is similar to the cdma system we 302 the medium access control sublayer chap 4 examined in sec 2.5  except that there is only one spreading code that is shared by all users spreading is used to satisfy the fcc requirement that power be spread over the ism band the spreading sequence used by 201.11b is a barker sequence it has the property that its autocorrelation is low except when the sequences are aligned this property allows a receiver to lock onto the start of a transmission to send at a rate of 1 mbps  the barker sequence is used with bpsk modulation to send 1 bit per 11 chips the chips are transmitted at a rate of 11 mchips/sec to send at 2 mbps  it is used with qpsk modulation to send 2 bits per 11 chips the higher rates are different these rates use a technique called cck  complementary code keying  to construct codes instead of the barker sequence the 5.5-mbps rate sends 4 bits in every 8-chip code  and the 11-mbps rate sends 8 bits in every 8-chip code next we come to 802.11a  which supports rates up to 54 mbps in the 5-ghz ism band you might have expected that 802.11a to come before 802.11b  but that was not the case although the 802.11a group was set up first  the 802.11b standard was approved first and its product got to market well ahead of the 802.11a products  partly because of the difficulty of operating in the higher 5-ghz band the 802.11a method is based on ofdm  orthogonal frequency division multiplexing  because ofdm uses the spectrum efficiently and resists wireless signal degradations such as multipath bits are sent over 52 subcarriers in parallel  48 carrying data and 4 used for synchronization each symbol lasts 4 ? s and sends 1  2  4  or 6 bits the bits are coded for error correction with a binary convolutional code first  so only 1/2  2/3  or 3/4 of the bits are not redundant with different combinations  802.11a can run at eight different rates  ranging from 6 to 54 mbps these rates are significantly faster than 802.11b rates  and there is less interference in the 5-ghz band however  802.11b has a range that is about seven times greater than that of 802.11a  which is more important in many situations even with the greater range  the 802.11b people had no intention of letting this upstart win the speed championship fortunately  in may 2002  the fcc dropped its long-standing rule requiring all wireless communications equipment operating in the ism bands in the u.s to use spread spectrum  so it got to work on 802.11g  which was approved by ieee in 2003 it copies the ofdm modulation methods of 802.11a but operates in the narrow 2.4-ghz ism band along with 802.11b it offers the same rates as 802.11a  6 to 54 mbps  plus of course compatibility with any 802.11b devices that happen to be nearby all of these different choices can be confusing for customers  so it is common for products to support 802.11a/b/g in a single nic not content to stop there  the ieee committee began work on a high-throughput physical layer called 802.11n it was ratified in 2009 the goal for 802.11n was throughput of at least 100 mbps after all the wireless overheads were removed this goal called for a raw speed increase of at least a factor of four to make it happen  the committee doubled the channels from 20 mhz to 40 mhz and sec 4.4 wireless lans 303 reduced framing overheads by allowing a group of frames to be sent together more significantly  however  802.11n uses up to four antennas to transmit up to four streams of information at the same time the signals of the streams interfere at the receiver  but they can be separated using mimo  multiple input multiple output  communications techniques the use of multiple antennas gives a large speed boost  or better range and reliability instead mimo  like ofdm  is one of those clever communications ideas that is changing wireless designs and which we are all likely to hear a lot about in the future for a brief introduction to multiple antennas in 802.11 see halperin et al  2010   4.4.3 the 802.11 mac sublayer protocol let us now return from the land of electrical engineering to the land of computer science the 802.11 mac sublayer protocol is quite different from that of ethernet  due to two factors that are fundamental to wireless communication first  radios are nearly always half duplex  meaning that they can not transmit and listen for noise bursts at the same time on a single frequency the received signal can easily be a million times weaker than the transmitted signal  so it can not be heard at the same time with ethernet  a station just waits until the ether goes silent and then starts transmitting if it does not receive a noise burst back while transmitting the first 64 bytes  the frame has almost assuredly been delivered correctly with wireless  this collision detection mechanism does not work instead  802.11 tries to avoid collisions with a protocol called csma/ca  csma with collision avoidance   this protocol is conceptually similar to ethernet ? s csma/cd  with channel sensing before sending and exponential back off after collisions however  a station that has a frame to send starts with a random backoff  except in the case that it has not used the channel recently and the channel is idle   it does not wait for a collision the number of slots to backoff is chosen in the range 0 to  say  15 in the case of the ofdm physical layer the station waits until the channel is idle  by sensing that there is no signal for a short period of time  called the difs  as we explain below   and counts down idle slots  pausing when frames are sent it sends its frame when the counter reaches 0 if the frame gets through  the destination immediately sends a short acknowledgement lack of an acknowledgement is inferred to indicate an error  whether a collision or otherwise in this case  the sender doubles the backoff period and tries again  continuing with exponential backoff as in ethernet until the frame has been successfully transmitted or the maximum number of retransmissions has been reached an example timeline is shown in fig 4-25 station a is the first to send a frame while a is sending  stations b and c become ready to send they see that the channel is busy and wait for it to become idle shortly after a receives an acknowledgement  the channel goes idle however  rather than sending a frame right away and colliding  b and c both perform a backoff c picks a short backoff  304 the medium access control sublayer chap 4 and thus sends first b pauses its countdown while it senses that c is using the channel  and resumes after c has received an acknowledgement b soon completes its backoff and sends its frame station a b c time data wait for idle backoff rest of backoff ack a sends to d b ready to send d acks a c sends to d d acks c b sends to d d acks b data ack data ack wait for idle wait for idle backoff c ready to send figure 4-25 sending a frame with csma/ca compared to ethernet  there are two main differences first  starting backoffs early helps to avoid collisions this avoidance is worthwhile because collisions are expensive  as the entire frame is transmitted even if one occurs second  acknowledgements are used to infer collisions because collisions can not be detected this mode of operation is called dcf  distributed coordination function  because each station acts independently  without any kind of central control the standard also includes an optional mode of operation called pcf  point coordination function  in which the access point controls all activity in its cell  just like a cellular base station however  pcf is not used in practice because there is normally no way to prevent stations in another nearby network from transmitting competing traffic the second problem is that the transmission ranges of different stations may be different with a wire  the system is engineered so that all stations can hear each other with the complexities of rf propagation this situation does not hold for wireless stations consequently  situations such as the hidden terminal problem mentioned earlier and illustrated again in fig 4-26  a  can arise since not all stations are within radio range of each other  transmissions going on in one part of a cell may not be received elsewhere in the same cell in this example  station c is transmitting to station b if a senses the channel  it will not hear anything and will falsely conclude that it may now start transmitting to b this decision leads to a collision the inverse situation is the exposed terminal problem  illustrated in fig 4 26  b   here  b wants to send to c  so it listens to the channel when it hears a sec 4.4 wireless lans 305 range of c 's radio a b c  a  a c range of a 's radio b  b  a wants to send to b but can not hear that b is busy b wants to send to c but mistakenly thinks the transmission will fail c is transmitting a is transmitting figure 4-26  a  the hidden terminal problem  b  the exposed terminal problem transmission  it falsely concludes that it may not send to c  even though a may in fact be transmitting to d  not shown   this decision wastes a transmission opportunity to reduce ambiguities about which station is sending  802.11 defines channel sensing to consist of both physical sensing and virtual sensing physical sensing simply checks the medium to see if there is a valid signal with virtual sensing  each station keeps a logical record of when the channel is in use by tracking the nav  network allocation vector   each frame carries a nav field that says how long the sequence of which this frame is part will take to complete stations that overhear this frame know that the channel will be busy for the period indicated by the nav  regardless of whether they can sense a physical signal for example  the nav of a data frame includes the time needed to send an acknowledgement all stations that hear the data frame will defer during the acknowledgement period  whether or not they can hear the acknowledgement an optional rts/cts mechanism uses the nav to prevent terminals from sending frames at the same time as hidden terminals it is shown in fig 4-27 in this example  a wants to send to b c is a station within range of a  and possibly within range of b  but that does not matter   d is a station within range of b but not within range of a the protocol starts when a decides it wants to send data to b a begins by sending an rts frame to b to request permission to send it a frame if b receives this request  it answers with a cts frame to indicate that the channel is clear to send upon receipt of the cts  a sends its frame and starts an ack timer upon correct receipt of the data frame  b responds with an ack frame  completing the exchange if a ? s ack timer expires before the ack gets back to it  it is treated as a collision and the whole protocol is run again after a backoff 306 the medium access control sublayer chap 4 a rts data b cts ack c d nav nav time figure 4-27 virtual channel sensing using csma/ca now let us consider this exchange from the viewpoints of c and d c is within range of a  so it may receive the rts frame if it does  it realizes that someone is going to send data soon from the information provided in the rts request  it can estimate how long the sequence will take  including the final ack so  for the good of all  it desists from transmitting anything until the exchange is completed it does so by updating its record of the nav to indicate that the channel is busy  as shown in fig 4-27 d does not hear the rts  but it does hear the cts  so it also updates its nav note that the nav signals are not transmitted ; they are just internal reminders to keep quiet for a certain period of time however  while rts/cts sounds good in theory  it is one of those designs that has proved to be of little value in practice several reasons why it is seldom used are known it does not help for short frames  which are sent in place of the rts  or for the ap  which everyone can hear  by definition   for other situations  it only slows down operation rts/cts in 802.11 is a little different than in the maca protocol we saw in sec 4.2 because everyone hearing the rts or cts remains quiet for the duration to allow the ack to get through without collision because of this  it does not help with exposed terminals as maca did  only with hidden terminals most often there are few hidden terminals  and csma/ca already helps them by slowing down stations that transmit unsuccessfully  whatever the cause  to make it more likely that transmissions will succeed csma/ca with physical and virtual sensing is the core of the 802.11 protocol however  there are several other mechanisms that have been developed to go with it each of these mechanisms was driven by the needs of real operation  so we will look at them briefly the first need we will look at is reliability in contrast to wired networks  wireless networks are noisy and unreliable  in no small part due to interference from other kinds of devices  such as microwave ovens  which also use the unlicensed ism bands the use of acknowledgements and retransmissions is of little help if the probability of getting a frame through is small in the first place sec 4.4 wireless lans 307 the main strategy that is used to increase successful transmissions is to lower the transmission rate slower rates use more robust modulations that are more likely to be received correctly for a given signal-to-noise ratio if too many frames are lost  a station can lower the rate if frames are delivered with little loss  a station can occasionally test a higher rate to see if it should be used another strategy to improve the chance of the frame getting through undamaged is to send shorter frames if the probability of any bit being in error is p  the probability of an n-bit frame being received entirely correctly is  1 ? ? p  n for example  for p ? ? 10 ? 4  the probability of receiving a full ethernet frame  12,144 bits  correctly is less than 30 %  most frames will be lost but if the frames are only a third as long  4048 bits  two thirds of them will be received correctly now most frames will get through and fewer retransmissions will be needed shorter frames can be implemented by reducing the maximum size of the message that is accepted from the network layer alternatively  802.11 allows frames to be split into smaller pieces  called fragments  each with its own checksum the fragment size is not fixed by the standard  but is a parameter that can be adjusted by the ap the fragments are individually numbered and acknowledged using a stop-and-wait protocol  i.e  the sender may not transmit fragment k ? ? 1 until it has received the acknowledgement for fragment k   once the channel has been acquired  multiple fragments are sent as a burst they go one after the other with an acknowledgement  and possibly retransmissions  in between  until either the whole frame has been successfully sent or the transmission time reaches the maximum allowed the nav mechanism keeps other stations quiet only until the next acknowledgement  but another mechanism  see below  is used to allow a burst of fragments to be sent without other stations sending a frame in the middle the second need we will discuss is saving power battery life is always an issue with mobile wireless devices the 802.11 standard pays attention to the issue of power management so that clients need not waste power when they have neither information to send nor to receive the basic mechanism for saving power builds on beacon frames beacons are periodic broadcasts by the ap  e.g  every 100 msec   the frames advertise the presence of the ap to clients and carry system parameters  such as the identifier of the ap  the time  how long until the next beacon  and security settings clients can set a power-management bit in frames that they send to the ap to tell it that they are entering power-save mode in this mode  the client can doze and the ap will buffer traffic intended for it to check for incoming traffic  the client wakes up for every beacon  and checks a traffic map that is sent as part of the beacon this map tells the client if there is buffered traffic if so  the client sends a poll message to the ap  which then sends the buffered traffic the client can then go back to sleep until the next beacon is sent another power-saving mechanism  called apsd  automatic power save delivery   was also added to 802.11 in 2005 with this new mechanism  the ap buffers frames and sends them to a client just after the client sends frames to the 308 the medium access control sublayer chap 4 ap the client can then go to sleep until it has more traffic to send  and receive   this mechanism works well for applications such as voip that have frequent traffic in both directions for example  a voip wireless phone might use it to send and receive frames every 20 msec  much more frequently than the beacon interval of 100 msec  while dozing in between the third and last need we will examine is quality of service when the voip traffic in the preceding example competes with peer-to-peer traffic  the voip traffic will suffer it will be delayed due to contention with the high-bandwidth peer-to-peer traffic  even though the voip bandwidth is low these delays are likely to degrade the voice calls to prevent this degradation  we would like to let the voip traffic go ahead of the peer-to-peer traffic  as it is of higher priority ieee 802.11 has a clever mechanism to provide this kind of quality of service that was introduced as set of extensions under the name 802.11e in 2005 it works by extending csma/ca with carefully defined intervals between frames after a frame has been sent  a certain amount of idle time is required before any station may send a frame to check that the channel is no longer in use the trick is to define different time intervals for different kinds of frames five intervals are depicted in fig 4-28 the interval between regular data frames is called the difs  dcf interframe spacing   any station may attempt to acquire the channel to send a new frame after the medium has been idle for difs the usual contention rules apply  and binary exponential backoff may be needed if a collision occurs the shortest interval is sifs  short interframe spacing   it is used to allow the parties in a single dialog the chance to go first examples include letting the receiver send an ack  other control frame sequences like rts and cts  or letting a sender transmit a burst of fragments sending the next fragment after waiting only sifs is what prevents another station from jumping in with a frame in the middle of the exchange ack sifs aifs1 difs eifs aifs4 control frame or next fragment may be sent here high-priority frame here regular dcf frame here low-priority frame here bad frame recovery done time figure 4-28 interframe spacing in 802.11 the two aifs  arbitration interframe space  intervals show examples of two different priority levels the short interval  aifs1  is smaller than difs but longer than sifs it can be used by the ap to move voice or other high-priority sec 4.4 wireless lans 309 traffic to the head of the line the ap will wait for a shorter interval before it sends the voice traffic  and thus send it before regular traffic the long interval  aifs4  is larger than difs it is used for background traffic that can be deferred until after regular traffic the ap will wait for a longer interval before it sends this traffic  giving regular traffic the opportunity to transmit first the complete quality of service mechanism defines four different priority levels that have different backoff parameters as well as different idle parameters the last time interval  eifs  extended interframe spacing   is used only by a station that has just received a bad or unknown frame  to report the problem the idea is that since the receiver may have no idea of what is going on  it should wait a while to avoid interfering with an ongoing dialog between two stations a further part of the quality of service extensions is the notion of a txop or transmission opportunity the original csma/ca mechanism let stations send one frame at a time this design was fine until the range of rates increased with 802.11a/g  one station might be sending at 6 mbps and another station be sending at 54 mbps they each get to send one frame  but the 6-mbps station takes nine times as long  ignoring fixed overheads  as the 54-mbps station to send its frame this disparity has the unfortunate side effect of slowing down a fast sender who is competing with a slow sender to roughly the rate of the slow sender for example  again ignoring fixed overheads  when sending alone the 6-mbps and 54-mbps senders will get their own rates  but when sending together they will both get 5.4 mbps on average it is a stiff penalty for the fast sender this issue is known as the rate anomaly  heusse et al  2003   with transmission opportunities  each station gets an equal amount of airtime  not an equal number of frames stations that send at a higher rate for their airtime will get higher throughput in our example  when sending together the 6-mbps and 54-mbps senders will now get 3 mbps and 27 mbps  respectively 4.4.4 the 802.11 frame structure the 802.11 standard defines three different classes of frames in the air  data  control  and management each of these has a header with a variety of fields used within the mac sublayer in addition  there are some headers used by the physical layer  but these mostly deal with the modulation techniques used  so we will not discuss them here we will look at the format of the data frame as an example it is shown in fig 4-29 first comes the frame control field  which is made up of 11 subfields the first of these is the protocol version  set to 00 it is there to allow future versions of 802.11 to operate at the same time in the same cell then come the type  data  control  or management  and subtype fields  e.g  rts or cts   for a regular data frame  without quality of service   they are set to 10 and 0000 in binary the to ds and from ds bits are set to indicate whether the frame is going to or coming from the network connected to the aps  which is called the distribution 310 the medium access control sublayer chap 4 system the more fragments bit means that more fragments will follow the retry bit marks a retransmission of a frame sent earlier the power management bit indicates that the sender is going into power-save mode the more data bit indicates that the sender has additional frames for the receiver the protected frame bit indicates that the frame body has been encrypted for security we will discuss security briefly in the next section finally  the order bit tells the receiver that the higher layer expects the sequence of frames to arrive strictly in order bytes 2 2 2 0 ? 2312 address 1 sequence duration  recipient  data frame control check sequence 6 6 6 4 address 2  transmitter  address 3 2 2 1 1 subtype = 0000 type = 10 version = 00 4 1 to ds from ds more frag retry pwr mgt more data protected order bits 1 1 1 1 1 figure 4-29 format of the 802.11 data frame the second field of the data frame  the duration field  tells how long the frame and its acknowledgement will occupy the channel  measured in microseconds it is present in all types of frames  including control frames  and is what stations use to manage the nav mechanism next come addresses data frames sent to or from an ap have three addresses  all in standard ieee 802 format the first address is the receiver  and the second address is the transmitter they are obviously needed  but what is the third address for ? remember that the ap is simply a relay point for frames as they travel between a client and another point on the network  perhaps a distant client or a portal to the internet the third address gives this distant endpoint the sequence field numbers frames so that duplicates can be detected of the 16 bits available  4 identify the fragment and 12 carry a number that is advanced with each new transmission the data field contains the payload  up to 2312 bytes the first bytes of this payload are in a format known as llc  logical link control   this layer is the glue that identifies the higher-layer protocol  e.g  ip  to which the payloads should be passed last comes the frame check sequence  which is the same 32-bit crc we saw in sec 3.2.2 and elsewhere management frames have the same format as data frames  plus a format for the data portion that varies with the subtype  e.g  parameters in beacon frames   control frames are short like all frames  they have the frame control  duration  and frame check sequence fields however  they may have only one address and no data portion most of the key information is conveyed with the subtype field  e.g  ack  rts and cts   sec 4.4 wireless lans 311 4.4.5 services the 802.11 standard defines the services that the clients  the access points  and the network connecting them must be a conformant wireless lan these services cluster into several groups the association service is used by mobile stations to connect themselves to aps typically  it is used just after a station moves within radio range of the ap upon arrival  the station learns the identity and capabilities of the ap  either from beacon frames or by directly asking the ap the capabilities include the data rates supported  security arrangements  power-saving capabilities  quality of service support  and more the station sends a request to associate with the ap the ap may accept or reject the request reassociation lets a station change its preferred ap this facility is useful for mobile stations moving from one ap to another ap in the same extended 802.11 lan  like a handover in the cellular network if it is used correctly  no data will be lost as a consequence of the handover  but 802.11  like ethernet  is just a best-effort service  either the station or the ap may also disassociate  breaking their relationship a station should use this service before shutting down or leaving the network the ap may use it before going down for maintenance stations must also authenticate before they can send frames via the ap  but authentication is handled in different ways depending on the choice of security scheme if the 802.11 network is ? ? open  ? ? anyone is allowed to use it otherwise  credentials are needed to authenticate the recommended scheme  called wpa2  wifi protected access 2   implements security as defined in the 802.11i standard  plain wpa is an interim scheme that implements a subset of 802.11i we will skip it and go straight to the complete scheme  with wpa2  the ap can talk to an authentication server that has a username and password database to determine if the station is allowed to access the network alternatively a pre-shared key  which is a fancy name for a network password  may be configured several frames are exchanged between the station and the ap with a challenge and response that lets the station prove it has the right credentials this exchange happens after association the scheme that was used before wpa is called wep  wired equivalent privacy   for this scheme  authentication with a preshared key happens before association however  its use is discouraged because of design flaws that make wep easy to compromise the first practical demonstration that wep was broken came when adam stubblefield was a summer intern at at&t  stubblefield et al  2002   he was able to code up and test an attack in one week  much of which was spent getting permission from management to buy the wifi cards needed for experiments software to crack wep passwords is now freely available once frames reach the ap  the distribution service determines how to route them if the destination is local to the ap  the frames can be sent out directly over the air otherwise  they will have to be forwarded over the wired network the 312 the medium access control sublayer chap 4 integration service handles any translation that is needed for a frame to be sent outside the 802.11 lan  or to arrive from outside the 802.11 lan the common case here is connecting the wireless lan to the internet data transmission is what it is all about  so 802.11 naturally provides a data delivery service this service lets stations transmit and receive data using the protocols we described earlier in this chapter since 802.11 is modeled on ethernet and transmission over ethernet is not guaranteed to be 100 % reliable  transmission over 802.11 is not guaranteed to be reliable either higher layers must deal with detecting and correcting errors wireless is a broadcast signal for information sent over a wireless lan to be kept confidential  it must be encrypted this goal is accomplished with a privacy service that manages the details of encryption and decryption the encryption algorithm for wpa2 is based on aes  advanced encryption standard   a u.s government standard approved in 2002 the keys that are used for encryption are determined during the authentication procedure to handle traffic with different priorities  there is a qos traffic scheduling service it uses the protocols we described to give voice and video traffic preferential treatment compared to best-effort and background traffic a companion service also provides higher-layer timer synchronization this lets stations coordinate their actions  which may be useful for media processing finally  there are two services that help stations manage their use of the spectrum the transmit power control service gives stations the information they need to meet regulatory limits on transmit power that vary from region to region the dynamic frequency selection service give stations the information they need to avoid transmitting on frequencies in the 5-ghz band that are being used for radar in the proximity with these services  802.11 provides a rich set of functionality for connecting nearby mobile clients to the internet it has been a huge success  and the standard has repeatedly been amended to add more functionality for a perspective on where the standard has been and where it is heading  see hiertz et al  2010   4.5 broadband wireless we have been indoors too long let us go outdoors  where there is quite a bit of interesting networking over the so-called ? ? last mile ? ? with the deregulation of the telephone systems in many countries  competitors to the entrenched telephone companies are now often allowed to offer local voice and high-speed internet service there is certainly plenty of demand the problem is that running fiber or coax to millions of homes and businesses is prohibitively expensive what is a competitor to do ? the answer is broadband wireless erecting a big antenna on a hill just outside of town is much easier and cheaper than digging many trenches and stringing sec 4.5 broadband wireless 313 cables thus  companies have begun to experiment with providing multimegabit wireless communication services for voice  internet  movies on demand  etc to stimulate the market  ieee formed a group to standardize a broadband wireless metropolitan area network the next number available in the 802 numbering space was 802.16  so the standard got this number informally the technology is called wimax  worldwide interoperability for microwave access   we will use the terms 802.16 and wimax interchangeably the first 802.16 standard was approved in december 2001 early versions provided a wireless local loop between fixed points with a line of sight to each other this design soon changed to make wimax a more competitive alternative to cable and dsl for internet access by january 2003  802.16 had been revised to support non-line-of-sight links by using ofdm technology at frequencies between 2 ghz and 10 ghz this change made deployment much easier  though stations were still fixed locations the rise of 3g cellular networks posed a threat by promising high data rates and mobility in response  802.16 was enhanced again to allow mobility at vehicular speeds by december 2005 mobile broadband internet access is the target of the current standard  ieee 802.16-2009 like the other 802 standards  802.16 was heavily influenced by the osi model  including the  sub  layers  terminology  service primitives  and more unfortunately  also like osi  it is fairly complicated in fact  the wimax forum was created to define interoperable subsets of the standard for commercial offerings in the following sections  we will give a brief description of some of the highlights of the common forms of 802.16 air interface  but this treatment is far from complete and leaves out many details for additional information about wimax and broadband wireless in general  see andrews et al  2007   4.5.1 comparison of 802.16 with 802.11 and 3g at this point you may be thinking  why devise a new standard ? why not just use 802.11 or 3g ? in fact  wimax combines aspects of both 802.11 and 3g  making it more like a 4g technology like 802.11  wimax is all about wirelessly connecting devices to the internet at megabit/sec speeds  instead of using cable or dsl the devices may be mobile  or at least portable wimax did not start by adding low-rate data on the side of voice-like cellular networks ; 802.16 was designed to carry ip packets over the air and to connect to an ip-based wired network with a minimum of fuss the packets may carry peer-to-peer traffic  voip calls  or streaming media to support a range of applications also like 802.11  it is based on ofdm technology to ensure good performance in spite of wireless signal degradations such as multipath fading  and on mimo technology to achieve high levels of throughput however  wimax is more like 3g  and thus unlike 802.11  in several key respects the key technical problem is to achieve high capacity by the efficient use of spectrum  so that a large number of subscribers in a coverage area can all get 314 the medium access control sublayer chap 4 high throughput the typical distances are at least 10 times larger than for an 802.11 network consequently  wimax base stations are more powerful than 802.11 access points  aps   to handle weaker signals over larger distances  the base station uses more power and better antennas  and it performs more processing to handle errors to maximize throughput  transmissions are carefully scheduled by the base station for each particular subscriber ; spectrum use is not left to chance with csma/ca  which may waste capacity with collisions licensed spectrum is the expected case for wimax  typically around 2.5 ghz in the u.s the whole system is substantially more optimized than 802.11 this complexity is worth it  considering the large amount of money involved for licensed spectrum unlike 802.11  the result is a managed and reliable service with good support for quality of service with all of these features  802.16 most closely resembles the 4g cellular networks that are now being standardized under the name lte  long term evolution   while 3g cellular networks are based on cdma and support voice and data  4g cellular networks will be based on ofdm with mimo  and they will target data  with voice as just one application it looks like wimax and 4g are on a collision course in terms of technology and applications perhaps this convergence is unsurprising  given that the internet is the killer application and ofdm and mimo are the best-known technologies for efficiently using the spectrum 4.5.2 the 802.16 architecture and protocol stack the 802.16 architecture is shown in fig 4-30 base stations connect directly to the provider ? s backbone network  which is in turn connected to the internet the base stations communicate with stations over the wireless air interface two kinds of stations exist subscriber stations remain in a fixed location  for example  broadband internet access for homes mobile stations can receive service while they are moving  for example  a car equipped with wimax the 802.16 protocol stack that is used across the air interface is shown in fig 4-31 the general structure is similar to that of the other 802 networks  but with more sublayers the bottom layer deals with transmission  and here we have shown only the popular offerings of 802.16  fixed and mobile wimax there is a different physical layer for each offering both layers operate in licensed spectrum below 11 ghz and use ofdm  but in different ways above the physical layer  the data link layer consists of three sublayers the bottom one deals with privacy and security  which is far more crucial for public outdoor networks than for private indoor networks it manages encryption  decryption  and key management next comes the mac common sublayer part this part is where the main protocols  such as channel management  are located the model here is that the base station completely controls the system it can schedule the downlink  i.e  base to subscriber  channels very efficiently and plays a major role in managing sec 4.5 broadband wireless 315 base station mobile stations subscriber stations backbone network  to internet  air interface figure 4-30 the 802.16 architecture ? fixed wimax ? ofdm  802.16a  ? mobile wimax ? scalable ofdma  802.16e  service specific convergence sublayer release date  2003 2005 upper layers data link layer physical layer mac common sublayer security sublayer ip  for example figure 4-31 the 802.16 protocol stack the uplink  i.e  subscriber to base  channels as well an unusual feature of this mac sublayer is that  unlike those of the other 802 protocols  it is completely connection oriented  in order to provide quality of service guarantees for telephony and multimedia communication the service-specific convergence sublayer takes the place of the logical link sublayer in the other 802 protocols its function is to provide an interface to the network layer different convergence layers are defined to integrate seamlessly with different upper layers the important choice is ip  though the standard defines mappings for protocols such as ethernet and atm too since ip is connectionless and the 802.16 mac sublayer is connection-oriented  this layer must map between addresses and connections 316 the medium access control sublayer chap 4 4.5.3 the 802.16 physical layer most wimax deployments use licensed spectrum around either 3.5 ghz or 2.5 ghz as with 3g  finding available spectrum is a key problem to help  the 802.16 standard is designed for flexibility it allows operation from 2 ghz to 11 ghz channels of different sizes are supported  for example  3.5 mhz for fixed wimax and from 1.25 mhz to 20 mhz for mobile wimax transmissions are sent over these channels with ofdm  the technique we described in sec 2.5.3 compared to 802.11  the 802.16 ofdm design is optimized to make the most out of licensed spectrum and wide area transmissions the channel is divided into more subcarriers with a longer symbol duration to tolerate larger wireless signal degradations ; wimax parameters are around 20 times larger than comparable 802.11 parameters for example  in mobile wimax there are 512 subcarriers for a 5-mhz channel and the time to send a symbol on each subcarrier is roughly 100 ? sec symbols on each subcarrier are sent with qpsk  qam-16  or qam-64  modulation schemes we described in sec 2.5.3 when the mobile or subscriber station is near the base station and the received signal has a high signal-to-noise ratio  snr   qam-64 can be used to send 6 bits per symbol to reach distant stations with a low snr  qpsk can be used to deliver 2 bits per symbol the data is first coded for error correction with the convolutional coding  or better schemes  that we described in sec 3.2.1 this coding is common on noisy channels to tolerate some bit errors without needing to send retransmissions in fact  the modulation and coding methods should sound familiar by now as they are used for many networks we have studied  including 802.11 cable  and dsl the net result is that a base station can support up to 12.6 mbps of downlink traffic and 6.2 mbps of uplink traffic per 5-mhz channel and pair of antennas one thing the designers of 802.16 did not like was a certain aspect of the way gsm and damps work both of those systems use equal frequency bands for upstream and downstream traffic that is  they implicitly assume there is as much upstream traffic as downstream traffic for voice  traffic is symmetric for the most part  but for internet access  and certainly web surfing  there is often more downstream traffic than upstream traffic the ratio is often 2  1  3  1  or more  1 so  the designers chose a flexible scheme for dividing the channel between stations  called ofdma  orthogonal frequency division multiple access   with ofdma  different sets of subcarriers can be assigned to different stations  so that more than one station can send or receive at once if this were 802.11  all subcarriers would be used by one station to send at any given moment the added flexibility in how bandwidth is assigned can increase performance because a given subcarrier might be faded at one receiver due to multipath effects but clear at another subcarriers can be assigned to the stations that can use them best as well as having asymmetric traffic  stations usually alternate between sending and receiving this method is called tdd  time division duplex   the sec 4.5 broadband wireless 317 alternative method  in which a station sends and receives at the same time  on different subcarrier frequencies   is called fdd  frequency division duplex   wimax allows both methods  but tdd is preferred because it is easier to implement and more flexible guard ranging burst burst burst burst burst burst burst burst downlink map uplink map preamble time subcarrier downlink uplink next frame last frame figure 4-32 frame structure for ofdma with time division duplexing fig 4-32 shows an example of the frame structure that is repeated over time it starts with a preamble to synchronize all stations  followed by downlink transmissions from the base station first  the base station sends maps that tell all stations how the downlink and uplink subcarriers are assigned over the frame the base station controls the maps  so it can allocate different amounts of bandwidth to stations from frame to frame depending on the needs of each station next  the base station sends bursts of traffic to different subscriber and mobile stations on the subcarriers at the times given in the map the downlink transmissions end with a guard time for stations to switch from receiving to transmitting finally  the subscriber and mobile stations send their bursts of traffic to the base station in the uplink positions that were reserved for them in the map one of these uplink bursts is reserved for ranging  which is the process by which new stations adjust their timing and request initial bandwidth to connect to the base station since no connection is set up at this stage  new stations just transmit and hope there is no collision 4.5.4 the 802.16 mac sublayer protocol the data link layer is divided into three sublayers  as we saw in fig 4-31 since we will not study cryptography until chap 8  it is difficult to explain now how the security sublayer works suffice it to say that encryption is used to keep secret all data transmitted only the frame payloads are encrypted ; the headers 318 the medium access control sublayer chap 4 are not this property means that a snooper can see who is talking to whom but can not tell what they are saying to each other if you already know something about cryptography  what follows is a oneparagraph explanation of the security sublayer if you know nothing about cryptography  you are not likely to find the next paragraph terribly enlightening  but you might consider rereading it after finishing chap 8   when a subscriber connects to a base station  they perform mutual authentication with rsa public-key cryptography using x.509 certificates the payloads themselves are encrypted using a symmetric-key system  either aes  rijndael  or des with cipher block chaining integrity checking uses sha-1 now that was not so bad  was it ? let us now look at the mac common sublayer part the mac sublayer is connection-oriented and point-to-multipoint  which means that one base station communicates with multiple subscriber stations much of this design is borrowed from cable modems  in which one cable headend controls the transmissions of multiple cable modems at the customer premises the downlink direction is fairly straightforward the base station controls the physical-layer bursts that are used to send information to the different subscriber stations the mac sublayer simply packs its frames into this structure to reduce overhead  there are several different options for example  mac frames may be sent individually  or packed back-to-back into a group the uplink channel is more complicated since there are competing subscribers that need access to it its allocation is tied closely to the quality of service issue four classes of service are defined  as follows  1 constant bit rate service 2 real-time variable bit rate service 3 non-real-time variable bit rate service 4 best-effort service all service in 802.16 is connection-oriented each connection gets one of these service classes  determined when the connection is set up this design is different from that of 802.11 or ethernet  which are connectionless in the mac sublayer constant bit rate service is intended for transmitting uncompressed voice this service needs to send a predetermined amount of data at predetermined time intervals it is accommodated by dedicating certain bursts to each connection of this type once the bandwidth has been allocated  the bursts are available automatically  without the need to ask for each one real-time variable bit rate service is for compressed multimedia and other soft real-time applications in which the amount of bandwidth needed at each instant may vary it is accommodated by the base station polling the subscriber at a fixed interval to ask how much bandwidth is needed this time sec 4.5 broadband wireless 319 non-real-time variable bit rate service is for heavy transmissions that are not real time  such as large file transfers for this service  the base station polls the subscriber often  but not at rigidly prescribed time intervals connections with this service can also use best-effort service  described next  to request bandwidth best-effort service is for everything else no polling is done and the subscriber must contend for bandwidth with other best-effort subscribers requests for bandwidth are sent in bursts marked in the uplink map as available for contention if a request is successful  its success will be noted in the next downlink map if it is not successful  the unsuccessful subscriber have to try again later to minimize collisions  the ethernet binary exponential backoff algorithm is used 4.5.5 the 802.16 frame structure all mac frames begin with a generic header the header is followed by an optional payload and an optional checksum  crc   as illustrated in fig 4-33 the payload is not needed in control frames  for example  those requesting channel slots the checksum is  surprisingly  also optional  due to the error correction in the physical layer and the fact that no attempt is ever made to retransmit realtime frames if no retransmissions will be attempted  why even bother with a checksum ? but if there is a checksum  it is the standard ieee 802 crc  and acknowledgements and retransmissions are used for reliability bits  a   b  0 type length 1 0 type bytes needed e ek c c i connection id header data crc crc connection id header crc 1 1 6 16 16 8 1 1 6 1 1 2 1 11 16 8 4 bits figure 4-33  a  a generic frame  b  a bandwidth request frame a quick rundown of the header fields of fig 4-33  a  follows the ec bit tells whether the payload is encrypted the type field identifies the frame type  mostly telling whether packing and fragmentation are present the ci field indicates the presence or absence of the final checksum the ek field tells which of the encryption keys is being used  if any   the length field gives the complete length of the frame  including the header the connection identifier tells which connection this frame belongs to finally  the header crc field is a checksum over the header only  using the polynomial x 8 ? ? x 2 ? ? x ? ? 1 the 802.16 protocol has many kinds of frames an example of a different type of frame  one that is used to request bandwidth  is shown in fig 4-33  b   it 320 the medium access control sublayer chap 4 starts with a 1 bit instead of a 0 bit and is otherwise similar to the generic header except that the second and third bytes form a 16-bit number telling how much bandwidth is needed to carry the specified number of bytes bandwidth request frames do not carry a payload or full-frame crc a great deal more could be said about 802.16  but this is not the place to say it for more information  please consult the ieee 802.16-2009 standard itself 4.6 bluetooth in 1994  the l m ericsson company became interested in connecting its mobile phones to other devices  e.g  laptops  without cables together with four other companies  ibm  intel  nokia  and toshiba   it formed a sig  special interest group  i.e  consortium  in 1998 to develop a wireless standard for interconnecting computing and communication devices and accessories using short-range  low-power  inexpensive wireless radios the project was named bluetooth  after harald blaatand  bluetooth  ii  940 ? 981   a viking king who unified  i.e  conquered  denmark and norway  also without cables bluetooth 1.0 was released in july 1999  and since then the sig has never looked back all manner of consumer electronic devices now use bluetooth  from mobile phones and laptops to headsets  printers  keyboards  mice  gameboxes  watches  music players  navigation units  and more the bluetooth protocols let these devices find and connect to each other  an act called pairing  and securely transfer data the protocols have evolved over the past decade  too after the initial protocols stabilized  higher data rates were added to bluetooth 2.0 in 2004 with the 3.0 release in 2009  bluetooth can be used for device pairing in combination with 802.11 for high-throughput data transfer the 4.0 release in december 2009 specified low-power operation that will be handy for people who do not want to change the batteries regularly in all of those devices around the house we will cover the main aspects of bluetooth below 4.6.1 bluetooth architecture let us start our study of the bluetooth system with a quick overview of what it contains and what it is intended to do the basic unit of a bluetooth system is a piconet  which consists of a master node and up to seven active slave nodes within a distance of 10 meters multiple piconets can exist in the same  large  room and can even be connected via a bridge node that takes part in multiple piconets  as in fig 4-34 an interconnected collection of piconets is called a scatternet in addition to the seven active slave nodes in a piconet  there can be up to 255 parked nodes in the net these are devices that the master has switched to a lowpower state to reduce the drain on their batteries in parked state  a device can not sec 4.6 bluetooth 321 s s s s s s s s s s s m m bridge slave parked slave piconet 1 piconet 2 active slave figure 4-34 two piconets can be connected to form a scatternet do anything except respond to an activation or beacon signal from the master two intermediate power states  hold and sniff  also exist  but these will not concern us here the reason for the master/slave design is that the designers intended to facilitate the implementation of complete bluetooth chips for under $ 5 the consequence of this decision is that the slaves are fairly dumb  basically just doing whatever the master tells them to do at its heart  a piconet is a centralized tdm system  with the master controlling the clock and determining which device gets to communicate in which time slot all communication is between the master and a slave ; direct slave-slave communication is not possible 4.6.2 bluetooth applications most network protocols just provide channels between communicating entities and let application designers figure out what they want to use them for for example  802.11 does not specify whether users should use their notebook computers for reading email  surfing the web  or something else in contrast  the bluetooth sig specifies particular applications to be supported and provides different protocol stacks for each one at the time of writing  there are 25 applications  which are called profiles unfortunately  this approach leads to a very large amount of complexity we will omit the complexity here but will briefly look at the profiles to see more clearly what the bluetooth sig is trying to accomplish six of the profiles are for different uses of audio and video for example  the intercom profile allows two telephones to connect as walkie-talkies the headset and hands-free profiles both provide voice communication between a headset and its base station  as might be used for hands-free telephony while driving a car 322 the medium access control sublayer chap 4 other profiles are for streaming stereo-quality audio and video  say  from a portable music player to headphones  or from a digital camera to a tv the human interface device profile is for connecting keyboards and mice to computers other profiles let a mobile phone or other computer receive images from a camera or send images to a printer perhaps of more interest is a profile to use a mobile phone as a remote control for a  bluetooth-enabled  tv still other profiles enable networking the personal area network profile lets bluetooth devices form an ad hoc network or remotely access another network  such as an 802.11 lan  via an access point the dial-up networking profile was actually the original motivation for the whole project it allows a notebook computer to connect to a mobile phone containing a built-in modem without using wires profiles for higher-layer information exchange have also been defined the synchronization profile is intended for loading data into a mobile phone when it leaves home and collecting data from it when it returns we will skip the rest of the profiles  except to mention that some profiles serve as building blocks on which the above profiles are built the generic access profile  on which all of the other profiles are built  provides a way to establish and maintain secure links  channels  between the master and the slaves the other generic profiles define the basics of object exchange and audio and video transport utility profiles are used widely for functions such as emulating a serial line  which is especially useful for many legacy applications was it really necessary to spell out all these applications in detail and provide different protocol stacks for each one ? probably not  but there were a number of different working groups that devised different parts of the standard  and each one just focused on its specific problem and generated its own profile think of this as conway ? s law in action  in the april 1968 issue of datamation magazine  melvin conway observed that if you assign n people to write a compiler  you will get an n-pass compiler  or more generally  the software structure mirrors the structure of the group that produced it  it would probably have been possible to get away with two protocol stacks instead of 25  one for file transfer and one for streaming real-time communication 4.6.3 the bluetooth protocol stack the bluetooth standard has many protocols grouped loosely into the layers shown in fig 4-35 the first observation to make is that the structure does not follow the osi model  the tcp/ip model  the 802 model  or any other model the bottom layer is the physical radio layer  which corresponds fairly well to the physical layer in the osi and 802 models it deals with radio transmission and modulation many of the concerns here have to do with the goal of making the system inexpensive so that it can become a mass-market item sec 4.6 bluetooth 323 host-controller interface upper layers datalink layer physical radio layer link control  baseband  link manager l2cap service rfcomm discovery applications    profile profile profile figure 4-35 the bluetooth protocol architecture the link control  or baseband  layer is somewhat analogous to the mac sublayer but also includes elements of the physical layer it deals with how the master controls time slots and how these slots are grouped into frames next come two protocols that use the link control protocol the link manager handles the establishment of logical channels between devices  including power management  pairing and encryption  and quality of service it lies below the host controller interface line this interface is a convenience for implementation  typically  the protocols below the line will be implemented on a bluetooth chip  and the protocols above the line will be implemented on the bluetooth device that hosts the chip the link protocol above the line is l2cap  logical link control adaptation protocol   it frames variable-length messages and provides reliability if needed many protocols use l2cap  such as the two utility protocols that are shown the service discovery protocol is used to locate services within the network the rfcomm  radio frequency communication  protocol emulates the standard serial port found on pcs for connecting the keyboard  mouse  and modem  among other devices the top layer is where the applications are located the profiles are represented by vertical boxes because they each define a slice of the protocol stack for a particular purpose specific profiles  such as the headset profile  usually contain only those protocols needed by that application and no others for example  profiles may include l2cap if they have packets to send but skip l2cap if they have only a steady flow of audio samples in the following sections  we will examine the bluetooth radio layer and various link protocols  since these roughly correspond to the physical and mac sublayers in the other procotol stacks we have studied 324 the medium access control sublayer chap 4 4.6.4 the bluetooth radio layer the radio layer moves the bits from master to slave  or vice versa it is a low-power system with a range of 10 meters operating in the same 2.4-ghz ism band as 802.11 the band is divided into 79 channels of 1 mhz each to coexist with other networks using the ism band  frequency hopping spread spectrum is used there can be up to 1600 hops/sec over slots with a dwell time of 625 ? sec all the nodes in a piconet hop frequencies simultaneously  following the slot timing and pseudorandom hop sequence dictated by the master unfortunately  it turned out that early versions of bluetooth and 802.11 interfered enough to ruin each other ? s transmissions some companies responded by banning bluetooth altogether  but eventually a technical solution was devised the solution is for bluetooth to adapt its hop sequence to exclude channels on which there are other rf signals this process reduces the harmful interference it is called adaptive frequency hopping three forms of modulation are used to send bits on a channel the basic scheme is to use frequency shift keying to send a 1-bit symbol every microsecond  giving a gross data rate of 1 mbps enhanced rates were introduced with the 2.0 version of bluetooth these rates use phase shift keying to send either 2 or 3 bits per symbol  for gross data rates of 2 or 3 mbps the enhanced rates are only used in the data portion of frames 4.6.5 the bluetooth link layers the link control  or baseband  layer is the closest thing bluetooth has to a mac sublayer it turns the raw bit stream into frames and defines some key formats in the simplest form  the master in each piconet defines a series of 625 ? sec time slots  with the master ? s transmissions starting in the even slots and the slaves ? transmissions starting in the odd ones this scheme is traditional time division multiplexing  with the master getting half the slots and the slaves sharing the other half frames can be 1  3  or 5 slots long each frame has an overhead of 126 bits for an access code and header  plus a settling time of 250 ? 260 ? sec per hop to allow the inexpensive radio circuits to become stable the payload of the frame can be encrypted for confidentiality with a key that is chosen when the master and slave connect hops only happen between frames  not during a frame the result is that a 5-slot frame is much more efficient than a 1-slot frame because the overhead is constant but more data is sent the link manager protocol sets up logical channels  called links  to carry frames between the master and a slave device that have discovered each other a pairing procedure is followed to make sure that the two devices are allowed to communicate before the link is used the old pairing method is that both devices must be configured with the same four-digit pin  personal identification number   the matching pin is how each device would know that it was connecting to sec 4.6 bluetooth 325 the right remote device however  unimaginative users and devices default to pins such as ? ? 0000 ? ? and ? ? 1234 ? ? meant that this method provided very little security in practice the new secure simple pairing method enables users to confirm that both devices are displaying the same passkey  or to observe the passkey on one device and enter it into the second device this method is more secure because users do not have to choose or set a pin they merely confirm a longer  device-generated passkey of course  it can not be used on some devices with limited input/output  such as a hands-free headset once pairing is complete  the link manager protocol sets up the links two main kinds of links exist to carry user data the first is the sco  synchronous connection oriented  link it is used for real-time data  such as telephone connections this type of link is allocated a fixed slot in each direction a slave may have up to three sco links with its master each sco link can transmit one 64,000-bps pcm audio channel due to the time-critical nature of sco links  frames sent over them are never retransmitted instead  forward error correction can be used to increase reliability the other kind is the acl  asynchronous connectionless  link this type of link is used for packet-switched data that is available at irregular intervals acl traffic is delivered on a best-effort basis no guarantees are given frames can be lost and may have to be retransmitted a slave may have only one acl link to its master the data sent over acl links come from the l2cap layer this layer has four major functions first  it accepts packets of up to 64 kb from the upper layers and breaks them into frames for transmission at the far end  the frames are reassembled into packets second  it handles the multiplexing and demultiplexing of multiple packet sources when a packet has been reassembled  the l2cap layer determines which upper-layer protocol to hand it to  for example  rfcomm or service discovery third  l2cap handles error control and retransmission it detects errors and resends packets that were not acknowledged finally  l2cap enforces quality of service requirements between multiple links 4.6.6 the bluetooth frame structure bluetooth defines several frame formats  the most important of which is shown in two forms in fig 4-36 it begins with an access code that usually identifies the master so that slaves within radio range of two masters can tell which traffic is for them next comes a 54-bit header containing typical mac sublayer fields if the frame is sent at the basic rate  the data field comes next it has up to 2744 bits for a five-slot transmission for a single time slot  the format is the same except that the data field is 240 bits if the frame is sent at the enhanced rate  the data portion may have up to two or three times as many bits because each symbol carries 2 or 3 bits instead of 1 326 the medium access control sublayer chap 4 repeated 3 times bits 72 0 ? 2744 access code data  at 1x rate  54 header  a  basic rate data frame  top access code header guard/sync data  at 2x or 3x rate  trailer bits 72 54 16 0 ? 8184 2  b  enhanced rate data frame  bottom 5 x 675 microsec slots addr type f a s crc 3 4 111 8 figure 4-36 typical bluetooth data frame at  a  basic and  b  enhanced  data rates bit these data are preceded by a guard field and a synchronization pattern that is used to switch to the faster data rate that is  the access code and header are carried at the basic rate and only the data portion is carried at the faster rate enhanced-rate frames end with a short trailer let us take a quick look at the common header the address field identifies which of the eight active devices the frame is intended for the type field identifies the frame type  acl  sco  poll  or null   the type of error correction used in the data field  and how many slots long the frame is the flow bit is asserted by a slave when its buffer is full and can not receive any more data this bit enables a primitive form of flow control the acknowledgement bit is used to piggyback an ack onto a frame the sequence bit is used to number the frames to detect retransmissions the protocol is stop-and-wait  so 1 bit is enough then comes the 8-bit header checksum the entire 18-bit header is repeated three times to form the 54-bit header shown in fig 4-36 on the receiving side  a simple circuit examines all three copies of each bit if all three are the same  the bit is accepted if not  the majority opinion wins thus  54 bits of transmission capacity are used to send 10 bits of header the reason is that to reliably send data in a noisy environment using cheap  low-powered  2.5 mw  devices with little computing capacity  a great deal of redundancy is needed various formats are used for the data field for acl and sco frames the basic-rate sco frames are a simple example to study  the data field is always 240 bits three variants are defined  permitting 80  160  or 240 bits of actual payload  with the rest being used for error correction in the most reliable version  80-bit payload   the contents are just repeated three times  the same as the header we can work out the capacity with this frame as follows since the slave may use only the odd slots  it gets 800 slots/sec  just as the master does with an 80-bit sec 4.6 bluetooth 327 payload  the channel capacity from the slave is 64,000 bps as is the channel capacity from the master this capacity is exactly enough for a single full-duplex pcm voice channel  which is why a hop rate of 1600 hops/sec was chosen   that is  despite a raw bandwidth of 1 mbps  a single full-duplex uncompressed voice channel can completely saturate the piconet the efficiency of 13 % is the result of spending 41 % of the capacity on settling time  20 % on headers  and 26 % on repetition coding this shortcoming highlights the value of the enhanced rates and frames of more than a single slot there is much more to be said about bluetooth  but no more space to say it here for the curious  the bluetooth 4.0 specification contains all the details 4.7 rfid we have looked at mac designs from lans up to mans and down to pans as a last example  we will study a category of low-end wireless devices that people may not recognize as forming a computer network  the rfid  radio frequency identification  tags and readers that we described in sec 1.5.4 rfid technology takes many forms  used in smartcards  implants for pets  passports  library books  and more the form that we will look at was developed in the quest for an epc  electronic product code  that started with the auto-id center at the massachusetts institute of technology in 1999 an epc is a replacement for a barcode that can carry a larger amount of information and is electronically readable over distances up to 10 m  even when it is not visible it is different technology than  for example  the rfid used in passports,which must be placed quite close to a reader to perform a transaction the ability to communicate over a distance makes epcs more relevant to our studies epcglobal was formed in 2003 to commercialize the rfid technology developed by the auto-id center the effort got a boost in 2005 when walmart required its top 100 suppliers to label all shipments with rfid tags widespread deployment has been hampered by the difficulty of competing with cheap printed barcodes  but new uses  such as in drivers licenses  are now growing we will describe the second generation of this technology  which is informally called epc gen 2  epcglobal  2008   4.7.1 epc gen 2 architecture the architecture of an epc gen 2 rfid network is shown in fig 4-37 it has two key components  tags and readers rfid tags are small  inexpensive devices that have a unique 96-bit epc identifier and a small amount of memory that can be read and written by the rfid reader the memory might be used to record the location history of an item  for example  as it moves through the supply chain 328 the medium access control sublayer chap 4 often  the tags look like stickers that can be placed on  for example  pairs of jeans on the shelves in a store most of the sticker is taken up by an antenna that is printed onto it a tiny dot in the middle is the rfid integrated circuit alternatively  the rfid tags can be integrated into an object  such as a driver ? s license in both cases  the tags have no battery and they must gather power from the radio transmissions of a nearby rfid reader to run this kind of tag is called a ? ? class 1 ? ? tag to distinguish it from more capable tags that have batteries rfid reader rfid tag backscatter signal reader signal figure 4-37 rfid architecture the readers are the intelligence in the system  analogous to base stations and access points in cellular and wifi networks readers are much more powerful than tags they have their own power sources  often have multiple antennas  and are in charge of when tags send and receive messages as there will commonly be multiple tags within the reading range  the readers must solve the multiple access problem there may be multiple readers that can contend with each other in the same area  too the main job of the reader is to inventory the tags in the neighborhood  that is  to discover the identifiers of the nearby tags the inventory is accomplished with the physical layer protocol and the tag-identification protocol that are outlined in the following sections 4.7.2 epc gen 2 physical layer the physical layer defines how bits are sent between the rfid reader and tags much of it uses methods for sending wireless signals that we have seen previously in the u.s  transmissions are sent in the unlicensed 902 ? 928 mhz ism band this band falls in the uhf  ultra high frequency  range  so the tags are referred to as uhf rfid tags the reader performs frequency hopping at least every 400 msec to spread its signal across the channel  to limit interference and satisfy regulatory requirements the reader and tags use forms of ask  amplitude shift keying  modulation that we described in sec 2.5.2 to encode bits they take turns to send bits  so the link is half duplex sec 4.7 rfid 329 there are two main differences from other physical layers that we have studied the first is that the reader is always transmitting a signal  regardless of whether it is the reader or tag that is communicating naturally  the reader transmits a signal to send bits to tags for the tags to send bits to the reader  the reader transmits a fixed carrier signal that carries no bits the tags harvest this signal to get the power they need to run ; otherwise  a tag would not be able to transmit in the first place to send data  a tag changes whether it is reflecting the signal from the reader  like a radar signal bouncing off a target  or absorbing it this method is called backscatter it differs from all the other wireless situations we have seen so far  in which the sender and receiver never both transmit at the same time backscatter is a low-energy way for the tag to create a weak signal of its own that shows up at the reader for the reader to decode the incoming signal  it must filter out the outgoing signal that it is transmitting because the tag signal is weak  tags can only send bits to the reader at a low rate  and tags can not receive or even sense transmissions from other tags the second difference is that very simple forms of modulation are used so that they can be implemented on a tag that runs on very little power and costs only a few cents to make to send data to the tags  the reader uses two amplitude levels bits are determined to be either a 0 or a 1  depending on how long the reader waits before a low-power period the tag measures the time between low-power periods and compares this time to a reference measured during a preamble as shown in fig 4-38  1s are longer than 0s tag responses consist of the tag alternating its backscatter state at fixed intervals to create a series of pulses in the signal anywhere from one to eight pulse periods can be used to encode each 0 or 1  depending on the need for reliability 1s have fewer transitions than 0s  as is shown with an example of two-pulse period coding in fig 4-38 time power reader ? 0 ? reader ? 1 ? tag ? 0 ? tag ? 1 ? backscatter figure 4-38 reader and tag backscatter signals 4.7.3 epc gen 2 tag identification layer to inventory the nearby tags  the reader needs to receive a message from each tag that gives the identifier for the tag this situation is a multiple access problem for which the number of tags is unknown in the general case the reader might 330 the medium access control sublayer chap 4 broadcast a query to ask all tags to send their identifiers however  tags that replied right away would then collide in much the same way as stations on a classic ethernet we have seen many ways of tackling the multiple access problem in this chapter the closest protocol for the current situation  in which the tags can not hear each others ? transmissions  is slotted aloha  one of the earliest protocols we studied this protocol is adapted for use in gen 2 rfid the sequence of messages used to identify a tag is shown in fig 4-39 in the first slot  slot 0   the reader sends a query message to start the process each qrepeat message advances to the next slot the reader also tells the tags the range of slots over which to randomize transmissions using a range is necessary because the reader synchronizes tags when it starts the process ; unlike stations on an ethernet  tags do not wake up with a message at a time of their choosing time rfid tag query  slot 0  rn16  slot 2  epc identifier  qrepeat  slot1  ack qrepeat  slot 2  qrepeat  slot n  qrepeat  slot 3  rfid reader figure 4-39 example message exchange to identify a tag tags pick a random slot in which to reply in fig 4-39  the tag replies in slot 2 however  tags do not send their identifiers when they first reply instead  a tag sends a short 16-bit random number in an rn16 message if there is no collision  the reader receives this message and sends an ack message of its own at this stage  the tag has acquired the slot and sends its epc identifier the reason for this exchange is that epc identifiers are long  so collisions on these messages would be expensive instead  a short exchange is used to test whether the tag can safely use the slot to send its identifier once its identifier has been successfully transmitted  the tag temporarily stops responding to new query messages so that all the remaining tags can be identified sec 4.7 rfid 331 a key problem is for the reader to adjust the number of slots to avoid collisions  but without using so many slots that performance suffers this adjustment is analogous to binary exponential backoff in ethernet if the reader sees too many slots with no responses or too many slots with collisions  it can send a qadjust message to decrease or increase the range of slots over which the tags are responding the rfid reader can perform other operations on the tags for example  it can select a subset of tags before running an inventory  allowing it to collect responses from  say  tagged jeans but not tagged shirts the reader can also write data to tags as they are identified this feature could be used to record the point of sale or other relevant information 4.7.4 tag identification message formats the format of the query message is shown in fig 4-40 as an example of a reader-to-tag message the message is compact because the downlink rates are limited  from 27 kbps up to 128 kbps the command field carries the code 1000 to identify the message as a query physical parameters bits 4 1 2 2 1 4 5 command 1000 dr m tr 2 1 sel session target q crc tag selection figure 4-40 format of the query message the next flags  dr  m  and tr  determine the physical layer parameters for reader transmissions and tag responses for example  the response rate may be set to between 5 kbps and 640 kbps we will skip over the details of these flags then come three fields  sel  session  and target  that select the tags to respond as well as the readers being able to select a subset of identifiers  the tags keep track of up to four concurrent sessions and whether they have been identified in those sessions in this way  multiple readers can operate in overlapping coverage areas by using different sessions next is the most important parameter for this command  q this field defines the range of slots over which tags will respond  from 0 to 2q ? 1 finally  there is a crc to protect the message fields at 5 bits  it is shorter than most crcs we have seen  but the query message is much shorter than most packets too tag-to-reader messages are simpler since the reader is in control  it knows what message to expect in response to each of its transmissions the tag responses simply carry data  such as the epc identifier 332 the medium access control sublayer chap 4 originally the tags were just for identification purposes however  they have grown over time to resemble very small computers some research tags have sensors and are able to run small programs to gather and process data  sample et al  2008   one vision for this technology is the ? ? internet of things ? ? that connects objects in the physical world to the internet  welbourne et al  2009 ; and gershenfeld et al  2004   4.8 data link layer switching many organizations have multiple lans and wish to connect them would it not be convenient if we could just join the lans together to make a larger lan ? in fact  we can do this when the connections are made with devices called bridges the ethernet switches we described in sec 4.3.4 are a modern name for bridges ; they provide functionality that goes beyond classic ethernet and ethernet hubs to make it easy to join multiple lans into a larger and faster network we shall use the terms ? ? bridge ? ? and ? ? switch ? ? interchangeably bridges operate in the data link layer  so they examine the data link layer addresses to forward frames since they are not supposed to examine the payload field of the frames they forward  they can handle ip packets as well as other kinds of packets  such as appletalk packets in contrast  routers examine the addresses in packets and route based on them  so they only work with the protocols that they were designed to handle in this section  we will look at how bridges work and are used to join multiple physical lans into a single logical lan we will also look at how to do the reverse and treat one physical lan as multiple logical lans  called vlans  virtual lans   both technologies provide useful flexibility for managing networks for a comprehensive treatment of bridges  switches  and related topics  see seifert and edwards  2008  and perlman  2000   4.8.1 uses of bridges before getting into the technology of bridges  let us take a look at some common situations in which bridges are used we will mention three reasons why a single organization may end up with multiple lans first  many university and corporate departments have their own lans to connect their own personal computers  servers  and devices such as printers since the goals of the various departments differ  different departments may set up different lans  without regard to what other departments are doing sooner or later  though  there is a need for interaction  so bridges are needed in this example  multiple lans come into existence due to the autonomy of their owners sec 4.8 data link layer switching 333 second  the organization may be geographically spread over several buildings separated by considerable distances it may be cheaper to have separate lans in each building and connect them with bridges and a few long-distance fiber optic links than to run all the cables to a single central switch even if laying the cables is easy to do  there are limits on their lengths  e.g  200 m for twisted-pair gigabit ethernet   the network would not work for longer cables due to the excessive signal attenuation or round-trip delay the only solution is to partition the lan and install bridges to join the pieces to increase the total physical distance that can be covered third  it may be necessary to split what is logically a single lan into separate lans  connected by bridges  to accommodate the load at many large universities  for example  thousands of workstations are available for student and faculty computing companies may also have thousands of employees the scale of this system precludes putting all the workstations on a single lan ? there are more computers than ports on any ethernet hub and more stations than allowed on a single classic ethernet even if it were possible to wire all the workstations together  putting more stations on an ethernet hub or classic ethernet would not add capacity all of the stations share the same  fixed amount of bandwidth the more stations there are  the less average bandwidth per station however  two separate lans have twice the capacity of a single lan bridges let the lans be joined together while keeping this capacity the key is not to send traffic onto ports where it is not needed  so that each lan can run at full speed this behavior also increases reliability  since on a single lan a defective node that keeps outputting a continuous stream of garbage can clog up the entire lan by deciding what to forward and what not to forward  bridges act like fire doors in a building  preventing a single node that has gone berserk from bringing down the entire system to make these benefits easily available  ideally bridges should be completely transparent it should be possible to go out and buy bridges  plug the lan cables into the bridges  and have everything work perfectly  instantly there should be no hardware changes required  no software changes required  no setting of address switches  no downloading of routing tables or parameters  nothing at all just plug in the cables and walk away furthermore  the operation of the existing lans should not be affected by the bridges at all as far as the stations are concerned  there should be no observable difference whether or not they are part of a bridged lan it should be as easy to move stations around the bridged lan as it is to move them around a single lan surprisingly enough  it is actually possible to create bridges that are transparent two algorithms are used  a backward learning algorithm to stop traffic being sent where it is not needed ; and a spanning tree algorithm to break loops that may be formed when switches are cabled together willy-nilly let us now take a look at these algorithms in turn to learn how this magic is accomplished 334 the medium access control sublayer chap 4 4.8.2 learning bridges the topology of two lans bridged together is shown in fig 4-41 for two cases on the left-hand side  two multidrop lans  such as classic ethernets  are joined by a special station ? the bridge ? that sits on both lans on the right-hand side  lans with point-to-point cables  including one hub  are joined together the bridges are the devices to which the stations and hub are attached if the lan technology is ethernet  the bridges are better known as ethernet switches  a   b  a d bridge b1 1 2 port b c e g f c bridge b1 b2 a b g d h1 port 1 2 1 3 4 2 4 3 f e hub figure 4-41  a  bridge connecting two multidrop lans  b  bridges  and a hub  connecting seven point-to-point stations bridges were developed when classic ethernets were in use  so they are often shown in topologies with multidrop cables  as in fig 4-41  a   however  all the topologies that are encountered today are comprised of point-to-point cables and switches the bridges work the same way in both settings all of the stations attached to the same port on a bridge belong to the same collision domain  and this is different than the collision domain for other ports if there is more than one station  as in a classic ethernet  a hub  or a half-duplex link  the csma/cd protocol is used to send frames there is a difference  however  in how the bridged lans are built to bridge multidrop lans  a bridge is added as a new station on each of the multidrop lans  as in fig 4-41  a   to bridge point-to-point lans  the hubs are either connected to a bridge or  preferably  replaced with a bridge to increase performance in fig 4-41  b   bridges have replaced all but one hub different kinds of cables can also be attached to one bridge for example  the cable connecting bridge b1 to bridge b2 in fig 4-41  b  might be a long-distance fiber optic link  while the cable connecting the bridges to stations might be a short-haul twisted-pair line this arrangement is useful for bridging lans in different buildings now let us consider what happens inside the bridges each bridge operates in promiscuous mode  that is  it accepts every frame transmitted by the stations sec 4.8 data link layer switching 335 attached to each of its ports the bridge must decide whether to forward or discard each frame  and  if the former  on which port to output the frame this decision is made by using the destination address as an example  consider the topology of fig 4-41  a   if station a sends a frame to station b  bridge b1 will receive the frame on port 1 this frame can be immediately discarded without further ado because it is already on the correct port however  in the topology of fig 4-41  b  suppose that a sends a frame to d bridge b1 will receive the frame on port 1 and output it on port 4 bridge b2 will then receive the frame on its port 4 and output it on its port 1 a simple way to implement this scheme is to have a big  hash  table inside the bridge the table can list each possible destination and which output port it belongs on for example  in fig 4-41  b   the table at b1 would list d as belonging to port 4  since all b1 has to know is which port to put frames on to reach d that  in fact  more forwarding will happen later when the frame hits b2 is not of interest to b1 when the bridges are first plugged in  all the hash tables are empty none of the bridges know where any of the destinations are  so they use a flooding algorithm  every incoming frame for an unknown destination is output on all the ports to which the bridge is connected except the one it arrived on as time goes on  the bridges learn where destinations are once a destination is known  frames destined for it are put only on the proper port ; they are not flooded the algorithm used by the bridges is backward learning as mentioned above  the bridges operate in promiscuous mode  so they see every frame sent on any of their ports by looking at the source addresses  they can tell which machines are accessible on which ports for example  if bridge b1 in fig 4-41  b  sees a frame on port 3 coming from c  it knows that c must be reachable via port 3  so it makes an entry in its hash table any subsequent frame addressed to c coming in to b1 on any other port will be forwarded to port 3 the topology can change as machines and bridges are powered up and down and moved around to handle dynamic topologies  whenever a hash table entry is made  the arrival time of the frame is noted in the entry whenever a frame whose source is already in the table arrives  its entry is updated with the current time thus  the time associated with every entry tells the last time a frame from that machine was seen periodically  a process in the bridge scans the hash table and purges all entries more than a few minutes old in this way  if a computer is unplugged from its lan  moved around the building  and plugged in again somewhere else  within a few minutes it will be back in normal operation  without any manual intervention this algorithm also means that if a machine is quiet for a few minutes  any traffic sent to it will have to be flooded until it next sends a frame itself the routing procedure for an incoming frame depends on the port it arrives on  the source port  and the address to which it is destined  the destination address   the procedure is as follows 336 the medium access control sublayer chap 4 1 if the port for the destination address is the same as the source port  discard the frame 2 if the port for the destination address and the source port are different  forward the frame on to the destination port 3 if the destination port is unknown  use flooding and send the frame on all ports except the source port you might wonder whether the first case can occur with point-to-point links the answer is that it can occur if hubs are used to connect a group of computers to a bridge an example is shown in fig 4-41  b  where stations e and f are connected to hub h1  which is in turn connected to bridge b2 if e sends a frame to f  the hub will relay it to b2 as well as to f that is what hubs do ? they wire all ports together so that a frame input on one port is simply output on all other ports the frame will arrive at b2 on port 4  which is already the right output port to reach the destination bridge b2 need only discard the frame as each frame arrives  this algorithm must be applied  so it is usually implemented with special-purpose vlsi chips the chips do the lookup and update the table entry  all in a few microseconds because bridges only look at the mac addresses to decide how to forward frames  it is possible to start forwarding as soon as the destination header field has come in  before the rest of the frame has arrived  provided the output line is available  of course   this design reduces the latency of passing through the bridge  as well as the number of frames that the bridge must be able to buffer it is referred to as cut-through switching or wormhole routing and is usually handled in hardware we can look at the operation of a bridge in terms of protocol stacks to understand what it means to be a link layer device consider a frame sent from station a to station d in the configuration of fig 4-41  a   in which the lans are ethernet the frame will pass through one bridge the protocol stack view of processing is shown in fig 4-42 the packet comes from a higher layer and descends into the ethernet mac layer it acquires an ethernet header  and also a trailer  not shown in the figure   this unit is passed to the physical layer  goes out over the cable  and is picked up by the bridge in the bridge  the frame is passed up from the physical layer to the ethernet mac layer this layer has extended processing compared to the ethernet mac layer at a station it passes the frame to a relay  still within the mac layer the bridge relay function uses only the ethernet mac header to determine how to handle the frame in this case  it passes the frame to the ethernet mac layer of the port used to reach station d  and the frame continues on its way in the general case  relays at a given layer can rewrite the headers for that layer vlans will provide an example shortly in no case should the bridge look inside the frame and learn that it is carrying an ip packet ; that is irrelevant to the sec 4.8 data link layer switching 337 eth eth packet packet packet relay network ethernet mac physical bridge station a station d wire wire eth eth packet packet packet eth packet eth packet eth packet eth packet figure 4-42 protocol processing at a bridge bridge processing and would violate protocol layering also note that a bridge with k ports will have k instances of mac and physical layers the value of k is 2 for our simple example 4.8.3 spanning tree bridges to increase reliability  redundant links can be used between bridges in the example of fig 4-43  there are two links in parallel between a pair of bridges this design ensures that if one link is cut  the network will not be partitioned into two sets of computers that can not talk to each other frame f0 bridge b1 a b2 redundant links f1 f2 f3 f4 figure 4-43 bridges with two parallel links however  this redundancy introduces some additional problems because it creates loops in the topology an example of these problems can be seen by looking at how a frame sent by a to a previously unobserved destination is handled in fig 4-43 each bridge follows the normal rule for handling unknown destinations  which is to flood the frame call the frame from a that reaches bridge b1 frame f0 the bridge sends copies of this frame out all of its other ports we 338 the medium access control sublayer chap 4 will only consider the bridge ports that connect b1 to b2  though the frame will be sent out the other ports  too   since there are two links from b1 to b2  two copies of the frame will reach b2 they are shown in fig 4-43 as f1 and f2 shortly thereafter  bridge b2 receives these frames however  it does not  and can not  know that they are copies of the same frame  rather than two different frames sent one after the other so bridge b2 takes f1 and sends copies of it out all the other ports  and it also takes f2 and sends copies of it out all the other ports this produces frames f3 and f4 that are sent along the two links back to b1 bridge b1 then sees two new frames with unknown destinations and copies them again this cycle goes on forever the solution to this difficulty is for the bridges to communicate with each other and overlay the actual topology with a spanning tree that reaches every bridge in effect  some potential connections between bridges are ignored in the interest of constructing a fictitious loop-free topology that is a subset of the actual topology for example  in fig 4-44 we see five bridges that are interconnected and also have stations connected to them each station connects to only one bridge there are some redundant connections between the bridges so that frames will be forwarded in loops if all of the links are used this topology can be thought of as a graph in which the bridges are the nodes and the point-to-point links are the edges the graph can be reduced to a spanning tree  which has no cycles by definition  by dropping the links shown as dashed lines in fig 4-44 using this spanning tree  there is exactly one path from every station to every other station once the bridges have agreed on the spanning tree  all forwarding between stations follows the spanning tree since there is a unique path from each source to each destination  loops are impossible bridge station b1 b2 b3 b4 b5 link that is not part of the spanning tree root bridge figure 4-44 a spanning tree connecting five bridges the dashed lines are links that are not part of the spanning tree to build the spanning tree  the bridges run a distributed algorithm each bridge periodically broadcasts a configuration message out all of its ports to its sec 4.8 data link layer switching 339 neighbors and processes the messages it receives from other bridges  as described next these messages are not forwarded  since their purpose is to build the tree  which can then be used for forwarding the bridges must first choose one bridge to be the root of the spanning tree to make this choice  they each include an identifier based on their mac address in the configuration message  as well as the identifier of the bridge they believe to be the root mac addresses are installed by the manufacturer and guaranteed to be unique worldwide  which makes these identifiers convenient and unique the bridges choose the bridge with the lowest identifier to be the root after enough messages have been exchanged to spread the news  all bridges will agree on which bridge is the root in fig 4-44  bridge b1 has the lowest identifier and becomes the root next  a tree of shortest paths from the root to every bridge is constructed in fig 4-44  bridges b2 and b3 can each be reached from bridge b1 directly  in one hop that is a shortest path bridge b4 can be reached in two hops  via either b2 or b3 to break this tie  the path via the bridge with the lowest identifier is chosen  so b4 is reached via b2 bridge b5 can be reached in two hops via b3 to find these shortest paths  bridges include the distance from the root in their configuration messages each bridge remembers the shortest path it finds to the root the bridges then turn off ports that are not part of the shortest path although the tree spans all the bridges  not all the links  or even bridges  are necessarily present in the tree this happens because turning off the ports prunes some links from the network to prevent loops even after the spanning tree has been established  the algorithm continues to run during normal operation to automatically detect topology changes and update the tree the algorithm for constructing the spanning tree was invented by radia perlman her job was to solve the problem of joining lans without loops she was given a week to do it  but she came up with the idea for the spanning tree algorithm in a day fortunately  this left her enough time to write it as a poem  perlman  1985   i think that i shall never see a graph more lovely than a tree a tree whose crucial property is loop-free connectivity a tree which must be sure to span so packets can reach every lan first the root must be selected by id it is elected least cost paths from root are traced in the tree these paths are placed a mesh is made by folks like me then bridges find a spanning tree 340 the medium access control sublayer chap 4 the spanning tree algorithm was then standardized as ieee 802.1d and used for many years in 2001  it was revised to more rapidly find a new spanning tree after a topology change for a detailed treatment of bridges  see perlman  2000   4.8.4 repeaters  hubs  bridges  switches  routers  and gateways so far in this book  we have looked at a variety of ways to get frames and packets from one computer to another we have mentioned repeaters  hubs  bridges  switches  routers  and gateways all of these devices are in common use  but they all differ in subtle and not-so-subtle ways since there are so many of them  it is probably worth taking a look at them together to see what the similarities and differences are the key to understanding these devices is to realize that they operate in different layers  as illustrated in fig 4-45  a   the layer matters because different devices use different pieces of information to decide how to switch in a typical scenario  the user generates some data to be sent to a remote machine those data are passed to the transport layer  which then adds a header  for example  a tcp header  and passes the resulting unit down to the network layer the network layer adds its own header to form a network layer packet  e.g  an ip packet   in fig 4-45  b   we see the ip packet shaded in gray then the packet goes to the data link layer  which adds its own header and checksum  crc  and gives the resulting frame to the physical layer for transmission  for example  over a lan application layer application gateway transport layer transport gateway network layer router frame header packet header tcp header packet  supplied by network layer  frame  built by data link layer   a   b  user data crc data link layer bridge  switch physical layer repeater  hub figure 4-45  a  which device is in which layer  b  frames  packets  and headers now let us look at the switching devices and see how they relate to the packets and frames at the bottom  in the physical layer  we find the repeaters these are analog devices that work with signals on the cables to which they are connected a signal appearing on one cable is cleaned up  amplified  and put out on another cable repeaters do not understand frames  packets  or headers they understand the symbols that encode bits as volts classic ethernet  for example  was sec 4.8 data link layer switching 341 designed to allow four repeaters that would boost the signal to extend the maximum cable length from 500 meters to 2500 meters next we come to the hubs a hub has a number of input lines that it joins electrically frames arriving on any of the lines are sent out on all the others if two frames arrive at the same time  they will collide  just as on a coaxial cable all the lines coming into a hub must operate at the same speed hubs differ from repeaters in that they do not  usually  amplify the incoming signals and are designed for multiple input lines  but the differences are slight like repeaters  hubs are physical layer devices that do not examine the link layer addresses or use them in any way now let us move up to the data link layer  where we find bridges and switches we just studied bridges at some length a bridge connects two or more lans like a hub  a modern bridge has multiple ports  usually enough for 4 to 48 input lines of a certain type unlike in a hub  each port is isolated to be its own collision domain ; if the port has a full-duplex point-to-point line  the csma/cd algorithm is not needed when a frame arrives  the bridge extracts the destination address from the frame header and looks it up in a table to see where to send the frame for ethernet  this address is the 48-bit destination address shown in fig 4-14 the bridge only outputs the frame on the port where it is needed and can forward multiple frames at the same time bridges offer much better performance than hubs  and the isolation between bridge ports also means that the input lines may run at different speeds  possibly even with different network types a common example is a bridge with ports that connect to 10  100  and 1000-mbps ethernet buffering within the bridge is needed to accept a frame on one port and transmit the frame out on a different port if frames come in faster than they can be retransmitted  the bridge may run out of buffer space and have to start discarding frames for example  if a gigabit ethernet is pouring bits into a 10-mbps ethernet at top speed  the bridge will have to buffer them  hoping not to run out of memory this problem still exists even if all the ports run at the same speed because more than one port may be sending frames to a given destination port bridges were originally intended to be able to join different kinds of lans  for example  an ethernet and a token ring lan however  this never worked well because of differences between the lans different frame formats require copying and reformatting  which takes cpu time  requires a new checksum calculation  and introduces the possibility of undetected errors due to bad bits in the bridge ? s memory different maximum frame lengths are also a serious problem with no good solution basically  frames that are too large to be forwarded must be discarded so much for transparency two other areas where lans can differ are security and quality of service some lans have link-layer encryption  for example 802.11  and some do not  for example ethernet some lans have quality of service features such as priorities  for example 802.11  and some do not  for example ethernet consequently  when 342 the medium access control sublayer chap 4 a frame must travel between these lans  the security or quality of service expected by the sender may not be able to be provided for all of these reasons  modern bridges usually work for one network type  and routers  which we will come to soon  are used instead to join networks of different types switches are modern bridges by another name the differences are more to do with marketing than technical issues  but there are a few points worth knowing bridges were developed when classic ethernet was in use  so they tend to join relatively few lans and thus have relatively few ports the term ? ? switch ? ? is more popular nowadays also  modern installations all use point-to-point links  such as twisted-pair cables  so individual computers plug directly into a switch and thus the switch will tend to have many ports finally  ? ? switch ? ? is also used as a general term with a bridge  the functionality is clear on the other hand  a switch may refer to an ethernet switch or a completely different kind of device that makes forwarding decisions  such as a telephone switch so far  we have seen repeaters and hubs  which are actually quite similar  as well as bridges and switches  which are even more similar to each other now we move up to routers  which are different from all of the above when a packet comes into a router  the frame header and trailer are stripped off and the packet located in the frame ? s payload field  shaded in fig 4-45  is passed to the routing software this software uses the packet header to choose an output line for an ip packet  the packet header will contain a 32-bit  ipv4  or 128-bit  ipv6  address  but not a 48-bit ieee 802 address the routing software does not see the frame addresses and does not even know whether the packet came in on a lan or a point-to-point line we will study routers and routing in chap 5 up another layer  we find transport gateways these connect two computers that use different connection-oriented transport protocols for example  suppose a computer using the connection-oriented tcp/ip protocol needs to talk to a computer using a different connection-oriented transport protocol called sctp the transport gateway can copy the packets from one connection to the other  reformatting them as need be finally  application gateways understand the format and contents of the data and can translate messages from one format to another an email gateway could translate internet messages into sms messages for mobile phones  for example like ? ? switch  ? ? ? ? gateway ? ? is somewhat of a general term it refers to a forwarding process that runs at a high layer 4.8.5 virtual lans in the early days of local area networking  thick yellow cables snaked through the cable ducts of many office buildings every computer they passed was plugged in no thought was given to which computer belonged on which lan all the people in adjacent offices were put on the same lan  whether they belonged together or not geography trumped corporate organization charts sec 4.8 data link layer switching 343 with the advent of twisted pair and hubs in the 1990s  all that changed buildings were rewired  at considerable expense  to rip out all the yellow garden hoses and install twisted pairs from every office to central wiring closets at the end of each corridor or in a central machine room  as illustrated in fig 4-46 if the vice president in charge of wiring was a visionary  category 5 twisted pairs were installed ; if he was a bean counter  the existing  category 3  telephone wiring was used  only to be replaced a few years later  when fast ethernet emerged   twisted pair to a hub office switch hub hub corridor cable duct figure 4-46 a building with centralized wiring using hubs and a switch today  the cables have changed and hubs have become switches  but the wiring pattern is still the same this pattern makes it possible to configure lans logically rather than physically for example  if a company wants k lans  it could buy k switches by carefully choosing which connectors to plug into which switches  the occupants of a lan can be chosen in a way that makes organizational sense  without too much regard to geography does it matter who is on which lan ? after all  in nearly all organizations  all the lans are interconnected in short  yes  it often matters network administrators like to group users on lans to reflect the organizational structure rather than the physical layout of the building  for a variety of reasons one issue is security one lan might host web servers and other computers intended for public use another lan might host computers containing the records of the human resources department that are not to be passed outside of the department in such a situation  putting all the computers on a single lan and not letting any of the servers be accessed from off the lan makes sense management tends to frown when hearing that such an arrangement is impossible 344 the medium access control sublayer chap 4 a second issue is load some lans are more heavily used than others and it may be desirable to separate them for example  if the folks in research are running all kinds of nifty experiments that sometimes get out of hand and saturate their lan  the folks in management may not be enthusiastic about donating some of the capacity they were using for videoconferencing to help out then again  this might impress on management the need to install a faster network a third issue is broadcast traffic bridges broadcast traffic when the location of the destination is unknown  and upper-layer protocols use broadcasting as well for example  when a user wants to send a packet to an ip address x  how does it know which mac address to put in the frame ? we will study this question in chap 5  but briefly summarized  the answer is that it broadcasts a frame containing the question ? ? who owns ip address x ? ? ? then it waits for an answer as the number of computers in a lan grows  so does the number of broadcasts each broadcast consumes more of the lan capacity than a regular frame because it is delivered to every computer on the lan by keeping lans no larger than they need to be  the impact of broadcast traffic is reduced related to broadcasts is the problem that once in a while a network interface will break down or be misconfigured and begin generating an endless stream of broadcast frames if the network is really unlucky  some of these frames will elicit responses that lead to ever more traffic the result of this broadcast storm is that  1  the entire lan capacity is occupied by these frames  and  2  all the machines on all the interconnected lans are crippled just processing and discarding all the frames being broadcast at first it might appear that broadcast storms could be limited in scope by separating the lans with bridges or switches  but if the goal is to achieve transparency  i.e  a machine can be moved to a different lan across the bridge without anyone noticing it   then bridges have to forward broadcast frames having seen why companies might want multiple lans with restricted scopes  let us get back to the problem of decoupling the logical topology from the physical topology building a physical topology to reflect the organizational structure can add work and cost  even with centralized wiring and switches for example  if two people in the same department work in different buildings  it may be easier to wire them to different switches that are part of different lans even if this is not the case  a user might be shifted within the company from one department to another without changing offices  or might change offices without changing departments this might result in the user being on the wrong lan until an administrator changes the user ? s connector from one switch to another furthermore  the number of computers that belong to different departments may not be a good match for the number of ports on switches ; some departments may be too small and others so big that they require multiple switches this results in wasted switch ports that are not used in many companies  organizational changes occur all the time  meaning that system administrators spend a lot of time pulling out plugs and pushing them back sec 4.8 data link layer switching 345 in somewhere else also  in some cases  the change can not be made at all because the twisted pair from the user ? s machine is too far from the correct switch  e.g  in the wrong building   or the available switch ports are on the wrong lan in response to customer requests for more flexibility  network vendors began working on a way to rewire buildings entirely in software the resulting concept is called a vlan  virtual lan   it has been standardized by the ieee 802 committee and is now widely deployed in many organizations let us now take a look at it for additional information about vlans  see seifert and edwards  2008   vlans are based on vlan-aware switches to set up a vlan-based network  the network administrator decides how many vlans there will be  which computers will be on which vlan  and what the vlans will be called often the vlans are  informally  named by colors  since it is then possible to print color diagrams showing the physical layout of the machines  with the members of the red lan in red  members of the green lan in green  and so on in this way  both the physical and logical layouts are visible in a single view as an example  consider the bridged lan of fig 4-47  in which nine of the machines belong to the g  gray  vlan and five belong to the w  white  vlan machines from the gray vlan are spread across two switches  including two machines that connect to a switch via a hub gray station b1 b2 hub g w w gw g g g gw g g g g w w white station gray port white port gray and white port bridge figure 4-47 two vlans  gray and white  on a bridged lan to make the vlans function correctly  configuration tables have to be set up in the bridges these tables tell which vlans are accessible via which ports when a frame comes in from  say  the gray vlan  it must be forwarded on all the ports marked with a g this holds for ordinary  i.e  unicast  traffic for which the bridges have not learned the location of the destination  as well as for multicast and broadcast traffic note that a port may be labeled with multiple vlan colors as an example  suppose that one of the gray stations plugged into bridge b1 in fig 4-47 sends a frame to a destination that has not been observed beforehand bridge b1 will receive the frame and see that it came from a machine on the gray 346 the medium access control sublayer chap 4 vlan  so it will flood the frame on all ports labeled g  except the incoming port   the frame will be sent to the five other gray stations attached to b1 as well as over the link from b1 to bridge b2 at bridge b2  the frame is similarly forwarded on all ports labeled g this sends the frame to one further station and the hub  which will transmit the frame to all of its stations   the hub has both labels because it connects to machines from both vlans the frame is not sent on other ports without g in the label because the bridge knows that there are no machines on the gray vlan that can be reached via these ports in our example  the frame is only sent from bridge b1 to bridge b2 because there are machines on the gray vlan that are connected to b2 looking at the white vlan  we can see that the bridge b2 port that connects to bridge b1 is not labeled w this means that a frame on the white vlan will not be forwarded from bridge b2 to bridge b1 this behavior is correct because no stations on the white vlan are connected to b1 the ieee 802.1q standard to implement this scheme  bridges need to know to which vlan an incoming frame belongs without this information  for example  when bridge b2 gets a frame from bridge b1 in fig 4-47  it can not know whether to forward the frame on the gray or white vlan if we were designing a new type of lan  it would be easy enough to just add a vlan field in the header but what to do about ethernet  which is the dominant lan  and did not have any spare fields lying around for the vlan identifier ? the ieee 802 committee had this problem thrown into its lap in 1995 after much discussion  it did the unthinkable and changed the ethernet header the new format was published in ieee standard 802.1q  issued in 1998 the new format contains a vlan tag ; we will examine it shortly not surprisingly  changing something as well established as the ethernet header was not entirely trivial a few questions that come to mind are  1 need we throw out several hundred million existing ethernet cards ? 2 if not  who generates the new fields ? 3 what happens to frames that are already the maximum size ? of course  the 802 committee was  only too painfully  aware of these problems and had to come up with solutions  which it did the key to the solution is to realize that the vlan fields are only actually used by the bridges and switches and not by the user machines thus  in fig 4 47  it is not really essential that they are present on the lines going out to the end stations as long as they are on the line between the bridges also  to use vlans  the bridges have to be vlan aware this fact makes the design feasible sec 4.8 data link layer switching 347 as to throwing out all existing ethernet cards  the answer is no remember that the 802.3 committee could not even get people to change the type field into a length field you can imagine the reaction to an announcement that all existing ethernet cards had to be thrown out however  new ethernet cards are 802.1q compliant and can correctly fill in the vlan fields because there can be computers  and switches  that are not vlan aware  the first vlan-aware bridge to touch a frame adds vlan fields and the last one down the road removes them an example of a mixed topology is shown in fig 4-48 in this figure  vlan-aware computers generate tagged  i.e  802.1q  frames directly  and further switching uses these tags the shaded symbols are vlan-aware and the empty ones are not legacy bridge and host b1 b2 b5 tagged frame b4 b3 b6 vlan-aware host and bridge legacy frame figure 4-48 bridged lan that is only partly vlan aware the shaded symbols are vlan aware the empty ones are not with 802.1q  frames are colored depending on the port on which they are received for this method to work  all machines on a port must belong to the same vlan  which reduces flexibility for example  in fig 4-48  this property holds for all ports where an individual computer connects to a bridge  but not for the port where the hub connects to bridge b2 additionally  the bridge can use the higher-layer protocol to select the color in this way  frames arriving on a port might be placed in different vlans depending on whether they carry ip packets or ppp frames other methods are possible  but they are not supported by 802.1q as one example  the mac address can be used to select the vlan color this might be useful for frames coming in from a nearby 802.11 lan in which laptops send frames via different ports as they move one mac address would then be mapped to a fixed vlan regardless of which port it entered the lan on as to the problem of frames longer than 1518 bytes  802.1q just raised the limit to 1522 bytes luckily  only vlan-aware computers and switches must support these longer frames now let us take a look at the 802.1q frame format it is shown in fig 4-49 the only change is the addition of a pair of 2-byte fields the first one is the 348 the medium access control sublayer chap 4 vlan protocol id it always has the value 0x8100 since this number is greater than 1500  all ethernet cards interpret it as a type rather than a length what a legacy card does with such a frame is moot since such frames are not supposed to be sent to legacy cards 802.3 length data pad checksum destination address source address 802.1q tag length data pad vlan protocol vlan identifier id  0x8100  pri cfi checksum destination address source address figure 4-49 the 802.3  legacy  and 802.1q ethernet frame formats the second 2-byte field contains three subfields the main one is the vlan identifier  occupying the low-order 12 bits this is what the whole thing is about ? the color of the vlan to which the frame belongs the 3-bit priority field has nothing to do with vlans at all  but since changing the ethernet header is a once-in-a-decade event taking three years and featuring a hundred people  why not put in some other good things while you are at it ? this field makes it possible to distinguish hard real-time traffic from soft real-time traffic from timeinsensitive traffic in order to provide better quality of service over ethernet it is needed for voice over ethernet  although in all fairness  ip has had a similar field for a quarter of a century and nobody ever used it   the last field  cfi  canonical format indicator   should have been called the cei  corporate ego indicator   it was originally intended to indicate the order of the bits in the mac addresses  little-endian versus big-endian   but that use got lost in other controversies its presence now indicates that the payload contains a freeze-dried 802.5 frame that is hoping to find another 802.5 lan at the destination while being carried by ethernet in between this whole arrangement  of course  has nothing whatsoever to do with vlans but standards ? committee politics are not unlike regular politics  if you vote for my bit  i will vote for your bit as we mentioned above  when a tagged frame arrives at a vlan-aware switch  the switch uses the vlan identifier as an index into a table to find out which ports to send it on but where does the table come from ? if it is manually constructed  we are back to square zero  manual configuration of bridges the beauty of the transparent bridge is that it is plug-and-play and does not require any manual configuration it would be a terrible shame to lose that property fortunately  vlan-aware bridges can also autoconfigure themselves based on observing the tags that come by if a frame tagged as vlan 4 comes in on port sec 4.8 data link layer switching 349 3  apparently some machine on port 3 is on vlan 4 the 802.1q standard explains how to build the tables dynamically  mostly by referencing appropriate portions of the 802.1d standard before leaving the subject of vlan routing  it is worth making one last observation many people in the internet and ethernet worlds are fanatically in favor of connectionless networking and violently opposed to anything smacking of connections in the data link or network layers yet vlans introduce something that is surprisingly similar to a connection to use vlans properly  each frame carries a new special identifier that is used as an index into a table inside the switch to look up where the frame is supposed to be sent that is precisely what happens in connection-oriented networks in connectionless networks  it is the destination address that is used for routing  not some kind of connection identifier we will see more of this creeping connectionism in chap 5 4.9 summary some networks have a single channel that is used for all communication in these networks  the key design issue is the allocation of this channel among the competing stations wishing to use it fdm and tdm are simple  efficient allocation schemes when the number of stations is small and fixed and the traffic is continuous both are widely used under these circumstances  for example  for dividing up the bandwidth on telephone trunks however  when the number of stations is large and variable or the traffic is fairly bursty ? the common case in computer networks ? fdm and tdm are poor choices numerous dynamic channel allocation algorithms have been devised the aloha protocol  with and without slotting  is used in many derivatives in real systems  for example  cable modems and rfid as an improvement when the state of the channel can be sensed  stations can avoid starting a transmission while another station is transmitting this technique  carrier sensing  has led to a variety of csma protocols for lans and mans it is the basis for classic ethernet and 802.11 networks a class of protocols that eliminates contention altogether  or at least reduces it considerably  is well known the bitmap protocol  topologies such as rings  and the binary countdown protocol completely eliminate contention the tree walk protocol reduces it by dynamically dividing the stations into two disjoint groups of different sizes and allowing contention only within one group ; ideally that group is chosen so that only one station is ready to send when it is permitted to do so wireless lans have the added problems that it is difficult to sense colliding transmissions  and that the coverage regions of stations may differ in the dominant wireless lan  ieee 802.11  stations use csma/ca to mitigate the first problem by leaving small gaps to avoid collisions the stations can also use the rts/cts protocol to combat hidden terminals that arise because of the second 350 the medium access control sublayer chap 4 problem ieee 802.11 is commonly used to connect laptops and other devices to wireless access points  but it can also be used between devices any of several physical layers can be used  including multichannel fdm with and without multiple antennas  and spread spectrum like 802.11  rfid readers and tags use a random access protocol to communicate identifiers other wireless pans and mans have different designs the bluetooth system connects headsets and many kinds of peripherals to computers without wires ieee 802.16 provides a wide area wireless internet data service for stationary and mobile computers both of these networks use a centralized  connection-oriented design in which the bluetooth master and the wimax base station decide when each station may send or receive data for 802.16  this design supports different quality of service for real-time traffic like telephone calls and interactive traffic like web browsing for bluetooth  placing the complexity in the master leads to inexpensive slave devices ethernet is the dominant form of wired lan classic ethernet used csma/cd for channel allocation on a yellow cable the size of a garden hose that snaked from machine to machine the architecture has changed as speeds have risen from 10 mbps to 10 gbps and continue to climb now  point-to-point links such as twisted pair are attached to hubs and switches with modern switches and full-duplex links  there is no contention on the links and the switch can forward frames between different ports in parallel with buildings full of lans  a way is needed to interconnect them all plugand play bridges are used for this purpose the bridges are built with a backward learning algorithm and a spanning tree algorithm since this functionality is built into modern switches  the terms ? ? bridge ? ? and ? ? switch ? ? are used interchangeably to help with the management of bridged lans  vlans let the physical topology be divided into different logical topologies the vlan standard  ieee 802.1q  introduces a new format for ethernet frames problems 1 for this problem  use a formula from this chapter  but first state the formula frames arrive randomly at a 100-mbps channel for transmission if the channel is busy when a frame arrives  it waits its turn in a queue frame length is exponentially distributed with a mean of 10,000 bits/frame for each of the following frame arrival rates  give the delay experienced by the average frame  including both queueing time and transmission time  a  90 frames/sec  b  900 frames/sec  c  9000 frames/sec chap 4 problems 351 2 a group of n stations share a 56-kbps pure aloha channel each station outputs a 1000-bit frame on average once every 100 sec  even if the previous one has not yet been sent  e.g  the stations can buffer outgoing frames   what is the maximum value of n ? 3 consider the delay of pure aloha versus slotted aloha at low load which one is less ? explain your answer 4 a large population of aloha users manages to generate 50 requests/sec  including both originals and retransmissions time is slotted in units of 40 msec  a  what is the chance of success on the first attempt ?  b  what is the probability of exactly k collisions and then a success ?  c  what is the expected number of transmission attempts needed ? 5 in an infinite-population slotted aloha system  the mean number of slots a station waits between a collision and a retransmission is 4 plot the delay versus throughput curve for this system 6 what is the length of a contention slot in csma/cd for  a  a 2-km twin-lead cable  signal propagation speed is 82 % of the signal propagation speed in vacuum  ?  and  b  a 40-km multimode fiber optic cable  signal propagation speed is 65 % of the signal propagation speed in vacuum  ? 7 how long does a station  s  have to wait in the worst case before it can start transmitting its frame over a lan that uses the basic bit-map protocol ? 8 in the binary countdown protocol  explain how a lower-numbered station may be starved from sending a packet 9 sixteen stations  numbered 1 through 16  are contending for the use of a shared channel by using the adaptive tree walk protocol if all the stations whose addresses are prime numbers suddenly become ready at once  how many bit slots are needed to resolve the contention ? 10 consider five wireless stations  a  b  c  d  and e station a can communicate with all other stations b can communicate with a  c and e c can communicate with a  b and d d can communicate with a  c and e e can communicate a  d and b  a  when a is sending to b  what other communications are possible ?  b  when b is sending to a  what other communications are possible ?  c  when b is sending to c  what other communications are possible ? 11 six stations  a through f  communicate using the maca protocol is it possible for two transmissions to take place simultaneously ? explain your answer 12 a seven-story office building has 15 adjacent offices per floor each office contains a wall socket for a terminal in the front wall  so the sockets form a rectangular grid in the vertical plane  with a separation of 4 m between sockets  both horizontally and vertically assuming that it is feasible to run a straight cable between any pair of sockets  horizontally  vertically  or diagonally  how many meters of cable are needed to connect all sockets using  a  a star configuration with a single router in the middle ?  b  a classic 802.3 lan ? 352 the medium access control sublayer chap 4 13 what is the baud rate of classic 10-mbps ethernet ? 14 sketch the manchester encoding on a classic ethernet for the bit stream 0001110101 15 a 1-km-long  10-mbps csma/cd lan  not 802.3  has a propagation speed of 200 m/ ? sec repeaters are not allowed in this system data frames are 256 bits long  including 32 bits of header  checksum  and other overhead the first bit slot after a successful transmission is reserved for the receiver to capture the channel in order to send a 32-bit acknowledgement frame what is the effective data rate  excluding overhead  assuming that there are no collisions ? 16 two csma/cd stations are each trying to transmit long  multiframe  files after each frame is sent  they contend for the channel  using the binary exponential backoff algorithm what is the probability that the contention ends on round k  and what is the mean number of rounds per contention period ? 17 an ip packet to be transmitted by ethernet is 60 bytes long  including all its headers if llc is not in use  is padding needed in the ethernet frame  and if so  how many bytes ? 18 ethernet frames must be at least 64 bytes long to ensure that the transmitter is still going in the event of a collision at the far end of the cable fast ethernet has the same 64-byte minimum frame size but can get the bits out ten times faster how is it possible to maintain the same minimum frame size ? 19 some books quote the maximum size of an ethernet frame as 1522 bytes instead of 1500 bytes are they wrong ? explain your answer 20 how many frames per second can gigabit ethernet handle ? think carefully and take into account all the relevant cases hint  the fact that it is gigabit ethernet matters 21 name two networks that allow frames to be packed back-to-back why is this feature worth having ? 22 in fig 4-27  four stations  a  b  c  and d  are shown which of the last two stations do you think is closest to a and why ? 23 give an example to show that the rts/cts in the 802.11 protocol is a little different than in the maca protocol 24 a wireless lan with one ap has 10 client stations four stations have data rates of 6 mbps  four stations have data rates of 18 mbps  and the last two stations have data rates of 54 mbps what is the data rate experienced by each station when all ten stations are sending data together  and  a  txop is not used ?  b  txop is used ? 25 suppose that an 11-mbps 802.11b lan is transmitting 64-byte frames back-to-back over a radio channel with a bit error rate of 10 ? 7 how many frames per second will be damaged on average ? 26 an 802.16 network has a channel width of 20 mhz how many bits/sec can be sent to a subscriber station ? chap 4 problems 353 27 give two reasons why networks might use an error-correcting code instead of error detection and retransmission 28 list two ways in which wimax is similar to 802.11  and two ways in which it is different from 802.11 29 from fig 4-34  we see that a bluetooth device can be in two piconets at the same time is there any reason why one device can not be the master in both of them at the same time ? 30 what is the maximum size of the data field for a 3-slot bluetooth frame at basic rate ? explain your answer 31 figure 4-24 shows several physical layer protocols which of these is closest to the bluetooth physical layer protocol ? what is the biggest difference between the two ? 32 it is mentioned in section 4.6.6 that the efficiency of a 1-slot frame with repetition encoding is about 13 % at basic data rate what will the efficiency be if a 5-slot frame with repetition encoding is used at basic data rate instead ? 33 beacon frames in the frequency hopping spread spectrum variant of 802.11 contain the dwell time do you think the analogous beacon frames in bluetooth also contain the dwell time ? discuss your answer 34 suppose that there are 10 rfid tags around an rfid reader what is the best value of q ? how likely is it that one tag responds with no collision in a given slot ? 35 list some of the security concerns of an rfid system 36 a switch designed for use with fast ethernet has a backplane that can move 10 gbps how many frames/sec can it handle in the worst case ? 37 briefly describe the difference between store-and-forward and cut-through switches 38 consider the extended lan connected using bridges b1 and b2 in fig 4-41  b   suppose the hash tables in the two bridges are empty list all ports on which a packet will be forwarded for the following sequence of data transmissions   a  a sends a packet to c  b  e sends a packet to f  c  f sends a packet to e  d  g sends a packet to e  e  d sends a packet to a  f  b sends a packet to f 39 store-and-forward switches have an advantage over cut-through switches with respect to damaged frames explain what it is 40 it is mentioned in section 4.8.3 that some bridges may not even be present in the spanning tree outline a scenario where a bridge may not be present in the spanning tree 41 to make vlans work  configuration tables are needed in the bridges what if the vlans of fig 4-47 used hubs rather than switches ? do the hubs need configuration tables  too ? why or why not ? 354 the medium access control sublayer chap 4 42 in fig 4-48  the switch in the legacy end domain on the right is a vlan-aware switch would it be possible to use a legacy switch there ? if so  how would that work ? if not  why not ? 43 write a program to simulate the behavior of the csma/cd protocol over ethernet when there are n stations ready to transmit while a frame is being transmitted your program should report the times when each station successfully starts sending its frame assume that a clock tick occurs once every slot time  51.2 ? sec  and a collision detection and sending of a jamming sequence takes one slot time all frames are the maximum length allowed 5 the network layer the network layer is concerned with getting packets from the source all the way to the destination getting to the destination may require making many hops at intermediate routers along the way this function clearly contrasts with that of the data link layer  which has the more modest goal of just moving frames from one end of a wire to the other thus  the network layer is the lowest layer that deals with end-to-end transmission to achieve its goals  the network layer must know about the topology of the network  i.e  the set of all routers and links  and choose appropriate paths through it  even for large networks it must also take care when choosing routes to avoid overloading some of the communication lines and routers while leaving others idle finally  when the source and destination are in different networks  new problems occur it is up to the network layer to deal with them in this chapter we will study all these issues and illustrate them  primarily using the internet and its network layer protocol  ip 5.1 network layer design issues in the following sections  we will give an introduction to some of the issues that the designers of the network layer must grapple with these issues include the service provided to the transport layer and the internal design of the network 355 356 the network layer chap 5 5.1.1 store-and-forward packet switching before starting to explain the details of the network layer  it is worth restating the context in which the network layer protocols operate this context can be seen in fig 5-1 the major components of the network are the isp ? s equipment  routers connected by transmission lines   shown inside the shaded oval  and the customers ? equipment  shown outside the oval host h1 is directly connected to one of the isp ? s routers  a  perhaps as a home computer that is plugged into a dsl modem in contrast  h2 is on a lan  which might be an office ethernet  with a router  f  owned and operated by the customer this router has a leased line to the isp ? s equipment we have shown f as being outside the oval because it does not belong to the isp for the purposes of this chapter  however  routers on customer premises are considered part of the isp network because they run the same algorithms as the isp ? s routers  and our main concern here is algorithms   d c b a e f packet process p1 host h1 router isp ? s equipment lan h2 p2 figure 5-1 the environment of the network layer protocols this equipment is used as follows a host with a packet to send transmits it to the nearest router  either on its own lan or over a point-to-point link to the isp the packet is stored there until it has fully arrived and the link has finished its processing by verifying the checksum then it is forwarded to the next router along the path until it reaches the destination host  where it is delivered this mechanism is store-and-forward packet switching  as we have seen in previous chapters 5.1.2 services provided to the transport layer the network layer provides services to the transport layer at the network layer/transport layer interface an important question is precisely what kind of services the network layer provides to the transport layer the services need to be carefully designed with the following goals in mind  sec 5.1 network layer design issues 357 1 the services should be independent of the router technology 2 the transport layer should be shielded from the number  type  and topology of the routers present 3 the network addresses made available to the transport layer should use a uniform numbering plan  even across lans and wans given these goals  the designers of the network layer have a lot of freedom in writing detailed specifications of the services to be offered to the transport layer this freedom often degenerates into a raging battle between two warring factions the discussion centers on whether the network layer should provide connectionoriented service or connectionless service one camp  represented by the internet community  argues that the routers ? job is moving packets around and nothing else in this view  based on 40 years of experience with a real computer network   the network is inherently unreliable  no matter how it is designed therefore  the hosts should accept this fact and do error control  i.e  error detection and correction  and flow control themselves this viewpoint leads to the conclusion that the network service should be connectionless  with primitives send packet and receive packet and little else in particular  no packet ordering and flow control should be done  because the hosts are going to do that anyway and there is usually little to be gained by doing it twice this reasoning is an example of the end-to-end argument  a design principle that has been very influential in shaping the internet  saltzer et al  1984   furthermore  each packet must carry the full destination address  because each packet sent is carried independently of its predecessors  if any the other camp  represented by the telephone companies  argues that the network should provide a reliable  connection-oriented service they claim that 100 years of successful experience with the worldwide telephone system is an excellent guide in this view  quality of service is the dominant factor  and without connections in the network  quality of service is very difficult to achieve  especially for real-time traffic such as voice and video even after several decades  this controversy is still very much alive early  widely used data networks  such as x.25 in the 1970s and its successor frame relay in the 1980s  were connection-oriented however  since the days of the arpanet and the early internet  connectionless network layers have grown tremendously in popularity the ip protocol is now an ever-present symbol of success it was undeterred by a connection-oriented technology called atm that was developed to overthrow it in the 1980s ; instead  it is atm that is now found in niche uses and ip that is taking over telephone networks under the covers  however  the internet is evolving connection-oriented features as quality of service becomes more important two examples of connection-oriented technologies are mpls  multiprotocol label switching   which we will describe in this chapter  and vlans  which we saw in chap 4 both technologies are widely used 358 the network layer chap 5 5.1.3 implementation of connectionless service having looked at the two classes of service the network layer can provide to its users  it is time to see how this layer works inside two different organizations are possible  depending on the type of service offered if connectionless service is offered  packets are injected into the network individually and routed independently of each other no advance setup is needed in this context  the packets are frequently called datagrams  in analogy with telegrams  and the network is called a datagram network if connection-oriented service is used  a path from the source router all the way to the destination router must be established before any data packets can be sent this connection is called a vc  virtual circuit   in analogy with the physical circuits set up by the telephone system  and the network is called a virtual-circuit network in this section  we will examine datagram networks ; in the next one  we will examine virtual-circuit networks let us now see how a datagram network works suppose that the process p1 in fig 5-2 has a long message for p2 it hands the message to the transport layer  with instructions to deliver it to process p2 on host h2 the transport layer code runs on h1  typically within the operating system it prepends a transport header to the front of the message and hands the result to the network layer  probably just another procedure within the operating system a ? s table  initially  a ? s table  later  c ? s table e ? s table dest line d c b a e f packet process p1 host h1 router isp ? s equipment lan h2 p2 4 2 3 1 a b b ? c c d b e c f c a b b ? c c d b e b f b a b a a c ? d e e e f e a b d c c c d d e ? f f figure 5-2 routing within a datagram network let us assume for this example that the message is four times longer than the maximum packet size  so the network layer has to break it into four packets  1  2  sec 5.1 network layer design issues 359 3  and 4  and send each of them in turn to router a using some point-to-point protocol  for example  ppp at this point the isp takes over every router has an internal table telling it where to send packets for each of the possible destinations each table entry is a pair consisting of a destination and the outgoing line to use for that destination only directly connected lines can be used for example  in fig 5-2  a has only two outgoing lines ? to b and to c ? so every incoming packet must be sent to one of these routers  even if the ultimate destination is to some other router a ? s initial routing table is shown in the figure under the label ? ? initially ? ? at a  packets 1  2  and 3 are stored briefly  having arrived on the incoming link and had their checksums verified then each packet is forwarded according to a ? s table  onto the outgoing link to c within a new frame packet 1 is then forwarded to e and then to f when it gets to f  it is sent within a frame over the lan to h2 packets 2 and 3 follow the same route however  something different happens to packet 4 when it gets to a it is sent to router b  even though it is also destined for f for some reason  a decided to send packet 4 via a different route than that of the first three packets perhaps it has learned of a traffic jam somewhere along the ace path and updated its routing table  as shown under the label ? ? later ? ? the algorithm that manages the tables and makes the routing decisions is called the routing algorithm routing algorithms are one of the main topics we will study in this chapter there are several different kinds of them  as we will see ip  internet protocol   which is the basis for the entire internet  is the dominant example of a connectionless network service each packet carries a destination ip address that routers use to individually forward each packet the addresses are 32 bits in ipv4 packets and 128 bits in ipv6 packets we will describe ip in much detail later in this chapter 5.1.4 implementation of connection-oriented service for connection-oriented service  we need a virtual-circuit network let us see how that works the idea behind virtual circuits is to avoid having to choose a new route for every packet sent  as in fig 5-2 instead  when a connection is established  a route from the source machine to the destination machine is chosen as part of the connection setup and stored in tables inside the routers that route is used for all traffic flowing over the connection  exactly the same way that the telephone system works when the connection is released  the virtual circuit is also terminated with connection-oriented service  each packet carries an identifier telling which virtual circuit it belongs to as an example  consider the situation shown in fig 5-3 here  host h1 has established connection 1 with host h2 this connection is remembered as the first entry in each of the routing tables the first line of a ? s table says that if a packet 360 the network layer chap 5 bearing connection identifier 1 comes in from h1  it is to be sent to router c and given connection identifier 1 similarly  the first entry at c routes the packet to e  also with connection identifier 1 a ? s table in out d c b e f packet router isp ? s equipment lan h2 p2 2 4 3 1 h1 h3 1 1 process p1 a host h1 p3 h3 c c 2 1 c ? s table a a 2 1 e e 2 1 e ? s table c c 2 1 f f 2 1 figure 5-3 routing within a virtual-circuit network now let us consider what happens if h3 also wants to establish a connection to h2 it chooses connection identifier 1  because it is initiating the connection and this is its only connection  and tells the network to establish the virtual circuit this leads to the second row in the tables note that we have a conflict here because although a can easily distinguish connection 1 packets from h1 from connection 1 packets from h3  c can not do this for this reason  a assigns a different connection identifier to the outgoing traffic for the second connection avoiding conflicts of this kind is why routers need the ability to replace connection identifiers in outgoing packets in some contexts  this process is called label switching an example of a connection-oriented network service is mpls  multiprotocol label switching   it is used within isp networks in the internet  with ip packets wrapped in an mpls header having a 20-bit connection identifier or label mpls is often hidden from customers  with the isp establishing long-term connections for large amounts of traffic  but it is increasingly being used to help when quality of service is important but also with other isp traffic management tasks we will have more to say about mpls later in this chapter sec 5.1 network layer design issues 361 5.1.5 comparison of virtual-circuit and datagram networks both virtual circuits and datagrams have their supporters and their detractors we will now attempt to summarize both sets of arguments the major issues are listed in fig 5-4  although purists could probably find a counterexample for everything in the figure issue datagram network virtual-circuit network circuit setup not needed required addressing each packet contains the full source and destination address each packet contains a short vc number state information routers do not hold state information about connections each vc requires router table space per connection routing each packet is routed independently route chosen when vc is set up ; all packets follow it effect of router failures none  except for packets lost during the crash all vcs that passed through the failed router are terminated quality of service difficult easy if enough resources can be allocated in advance for each vc congestion control difficult easy if enough resources can be allocated in advance for each vc figure 5-4 comparison of datagram and virtual-circuit networks inside the network  several trade-offs exist between virtual circuits and datagrams one trade-off is setup time versus address parsing time using virtual circuits requires a setup phase  which takes time and consumes resources however  once this price is paid  figuring out what to do with a data packet in a virtual-circuit network is easy  the router just uses the circuit number to index into a table to find out where the packet goes in a datagram network  no setup is needed but a more complicated lookup procedure is required to locate the entry for the destination a related issue is that the destination addresses used in datagram networks are longer than circuit numbers used in virtual-circuit networks because they have a global meaning if the packets tend to be fairly short  including a full destination address in every packet may represent a significant amount of overhead  and hence a waste of bandwidth yet another issue is the amount of table space required in router memory a datagram network needs to have an entry for every possible destination  whereas a virtual-circuit network just needs an entry for each virtual circuit however  this 362 the network layer chap 5 advantage is somewhat illusory since connection setup packets have to be routed too  and they use destination addresses  the same as datagrams do virtual circuits have some advantages in guaranteeing quality of service and avoiding congestion within the network because resources  e.g  buffers  bandwidth  and cpu cycles  can be reserved in advance  when the connection is established once the packets start arriving  the necessary bandwidth and router capacity will be there with a datagram network  congestion avoidance is more difficult for transaction processing systems  e.g  stores calling up to verify credit card purchases   the overhead required to set up and clear a virtual circuit may easily dwarf the use of the circuit if the majority of the traffic is expected to be of this kind  the use of virtual circuits inside the network makes little sense on the other hand  for long-running uses such as vpn traffic between two corporate offices  permanent virtual circuits  that are set up manually and last for months or years  may be useful virtual circuits also have a vulnerability problem if a router crashes and loses its memory  even if it comes back up a second later  all the virtual circuits passing through it will have to be aborted in contrast  if a datagram router goes down  only those users whose packets were queued in the router at the time need suffer  and probably not even then since the sender is likely to retransmit them shortly   the loss of a communication line is fatal to virtual circuits using it  but can easily be compensated for if datagrams are used datagrams also allow the routers to balance the traffic throughout the network  since routes can be changed partway through a long sequence of packet transmissions 5.2 routing algorithms the main function of the network layer is routing packets from the source machine to the destination machine in most networks  packets will require multiple hops to make the journey the only notable exception is for broadcast networks  but even here routing is an issue if the source and destination are not on the same network segment the algorithms that choose the routes and the data structures that they use are a major area of network layer design the routing algorithm is that part of the network layer software responsible for deciding which output line an incoming packet should be transmitted on if the network uses datagrams internally  this decision must be made anew for every arriving data packet since the best route may have changed since last time if the network uses virtual circuits internally  routing decisions are made only when a new virtual circuit is being set up thereafter  data packets just follow the already established route the latter case is sometimes called session routing because a route remains in force for an entire session  e.g  while logged in over a vpn   sec 5.2 routing algorithms 363 it is sometimes useful to make a distinction between routing  which is making the decision which routes to use  and forwarding  which is what happens when a packet arrives one can think of a router as having two processes inside it one of them handles each packet as it arrives  looking up the outgoing line to use for it in the routing tables this process is forwarding the other process is responsible for filling in and updating the routing tables that is where the routing algorithm comes into play regardless of whether routes are chosen independently for each packet sent or only when new connections are established  certain properties are desirable in a routing algorithm  correctness  simplicity  robustness  stability  fairness  and efficiency correctness and simplicity hardly require comment  but the need for robustness may be less obvious at first once a major network comes on the air  it may be expected to run continuously for years without system-wide failures during that period there will be hardware and software failures of all kinds hosts  routers  and lines will fail repeatedly  and the topology will change many times the routing algorithm should be able to cope with changes in the topology and traffic without requiring all jobs in all hosts to be aborted imagine the havoc if the network needed to be rebooted every time some router crashed ! stability is also an important goal for the routing algorithm there exist routing algorithms that never converge to a fixed set of paths  no matter how long they run a stable algorithm reaches equilibrium and stays there it should converge quickly too  since communication may be disrupted until the routing algorithm has reached equilibrium fairness and efficiency may sound obvious ? surely no reasonable person would oppose them ? but as it turns out  they are often contradictory goals as a simple example of this conflict  look at fig 5-5 suppose that there is enough traffic between a and a ?  between b and b ?  and between c and c ? ? to saturate the horizontal links to maximize the total flow  the x to x ? ? traffic should be shut off altogether unfortunately  x and x ? ? may not see it that way evidently  some compromise between global efficiency and fairness to individual connections is needed before we can even attempt to find trade-offs between fairness and efficiency  we must decide what it is we seek to optimize minimizing the mean packet delay is an obvious candidate to send traffic through the network effectively  but so is maximizing total network throughput furthermore  these two goals are also in conflict  since operating any queueing system near capacity implies a long queueing delay as a compromise  many networks attempt to minimize the distance a packet must travel  or simply reduce the number of hops a packet must make either choice tends to improve the delay and also reduce the amount of bandwidth consumed per packet  which tends to improve the overall network throughput as well routing algorithms can be grouped into two major classes  nonadaptive and adaptive nonadaptive algorithms do not base their routing decisions on any 364 the network layer chap 5 x x ? a b c a ' b ' c ' figure 5-5 network with a conflict between fairness and efficiency measurements or estimates of the current topology and traffic instead  the choice of the route to use to get from i to j  for all i and j  is computed in advance  offline  and downloaded to the routers when the network is booted this procedure is sometimes called static routing because it does not respond to failures  static routing is mostly useful for situations in which the routing choice is clear for example  router f in fig 5-3 should send packets headed into the network to router e regardless of the ultimate destination adaptive algorithms  in contrast  change their routing decisions to reflect changes in the topology  and sometimes changes in the traffic as well these dynamic routing algorithms differ in where they get their information  e.g  locally  from adjacent routers  or from all routers   when they change the routes  e.g  when the topology changes  or every ? t seconds as the load changes   and what metric is used for optimization  e.g  distance  number of hops  or estimated transit time   in the following sections  we will discuss a variety of routing algorithms the algorithms cover delivery models besides sending a packet from a source to a destination sometimes the goal is to send the packet to multiple  all  or one of a set of destinations all of the routing algorithms we describe here make decisions based on the topology ; we defer the possibility of decisions based on the traffic levels to sec 5.3 5.2.1 the optimality principle before we get into specific algorithms  it may be helpful to note that one can make a general statement about optimal routes without regard to network topology or traffic this statement is known as the optimality principle  bellman  1957   it states that if router j is on the optimal path from router i to router k  sec 5.2 routing algorithms 365 then the optimal path from j to k also falls along the same route to see this  call the part of the route from i to j r1 and the rest of the route r 2 if a route better than r 2 existed from j to k  it could be concatenated with r 1 to improve the route from i to k  contradicting our statement that r 1r 2 is optimal as a direct consequence of the optimality principle  we can see that the set of optimal routes from all sources to a given destination form a tree rooted at the destination such a tree is called a sink tree and is illustrated in fig 5-6  b   where the distance metric is the number of hops the goal of all routing algorithms is to discover and use the sink trees for all routers b a f d e c j n o i h g l m k  a  b a f d e c j n o i h g l m k  b  figure 5-6  a  a network  b  a sink tree for router b note that a sink tree is not necessarily unique ; other trees with the same path lengths may exist if we allow all of the possible paths to be chosen  the tree becomes a more general structure called a dag  directed acyclic graph   dags have no loops we will use sink trees as a convenient shorthand for both cases both cases also depend on the technical assumption that the paths do not interfere with each other so  for example  a traffic jam on one path will not cause another path to divert since a sink tree is indeed a tree  it does not contain any loops  so each packet will be delivered within a finite and bounded number of hops in practice  life is not quite this easy links and routers can go down and come back up during operation  so different routers may have different ideas about the current topology also  we have quietly finessed the issue of whether each router has to individually acquire the information on which to base its sink tree computation or whether this information is collected by some other means we will come back to these issues shortly nevertheless  the optimality principle and the sink tree provide a benchmark against which other routing algorithms can be measured 366 the network layer chap 5 5.2.2 shortest path algorithm let us begin our study of routing algorithms with a simple technique for computing optimal paths given a complete picture of the network these paths are the ones that we want a distributed routing algorithm to find  even though not all routers may know all of the details of the network the idea is to build a graph of the network  with each node of the graph representing a router and each edge of the graph representing a communication line  or link to choose a route between a given pair of routers  the algorithm just finds the shortest path between them on the graph the concept of a shortest path deserves some explanation one way of measuring path length is the number of hops using this metric  the paths abc and abe in fig 5-7 are equally long another metric is the geographic distance in kilometers  in which case abc is clearly much longer than abe  assuming the figure is drawn to scale   a 1 d 2 6 g 4  a  f  ? ? ? ?  d  ? ? ?  b 7 c 2 h 3 3 2 e 2 f 2 a  c  b  2  a  c  9  b  h  ? ? ? ?  e  4  b  g  6  a  a f  6  e  d  ? ? ?   e  b  2  a  c  9  b  h  9  g  e  4  b  g  5  e  a f  6,e  d  ? ? ?   f  b  2  a  c  9  b  h  8  f  e  4  b  g  5  e  a f  6  e  d  ? ? 1   d  b  2  a  c  9  b  h  ? ? ? ?  e  4  b  g  5  e  a f  ? ? ? ?  d  ? ? ? ?   b  b  2  a  c  ? ? ? ?  h  ? ? ? ?  e  ? ? ? ?  g  6  a  figure 5-7 the first six steps used in computing the shortest path from a to d the arrows indicate the working node sec 5.2 routing algorithms 367 however  many other metrics besides hops and physical distance are also possible for example  each edge could be labeled with the mean delay of a standard test packet  as measured by hourly runs with this graph labeling  the shortest path is the fastest path rather than the path with the fewest edges or kilometers in the general case  the labels on the edges could be computed as a function of the distance  bandwidth  average traffic  communication cost  measured delay  and other factors by changing the weighting function  the algorithm would then compute the ? ? shortest ? ? path measured according to any one of a number of criteria or to a combination of criteria several algorithms for computing the shortest path between two nodes of a graph are known this one is due to dijkstra  1959  and finds the shortest paths between a source and all destinations in the network each node is labeled  in parentheses  with its distance from the source node along the best known path the distances must be non-negative  as they will be if they are based on real quantities like bandwidth and delay initially  no paths are known  so all nodes are labeled with infinity as the algorithm proceeds and paths are found  the labels may change  reflecting better paths a label may be either tentative or permanent initially  all labels are tentative when it is discovered that a label represents the shortest possible path from the source to that node  it is made permanent and never changed thereafter to illustrate how the labeling algorithm works  look at the weighted  undirected graph of fig 5-7  a   where the weights represent  for example  distance we want to find the shortest path from a to d we start out by marking node a as permanent  indicated by a filled-in circle then we examine  in turn  each of the nodes adjacent to a  the working node   relabeling each one with the distance to a whenever a node is relabeled  we also label it with the node from which the probe was made so that we can reconstruct the final path later if the network had more than one shortest path from a to d and we wanted to find all of them  we would need to remember all of the probe nodes that could reach a node with the same distance having examined each of the nodes adjacent to a  we examine all the tentatively labeled nodes in the whole graph and make the one with the smallest label permanent  as shown in fig 5-7  b   this one becomes the new working node we now start at b and examine all nodes adjacent to it if the sum of the label on b and the distance from b to the node being considered is less than the label on that node  we have a shorter path  so the node is relabeled after all the nodes adjacent to the working node have been inspected and the tentative labels changed if possible  the entire graph is searched for the tentatively labeled node with the smallest value this node is made permanent and becomes the working node for the next round figure 5-7 shows the first six steps of the algorithm to see why the algorithm works  look at fig 5-7  c   at this point we have just made e permanent suppose that there were a shorter path than abe  say 368 the network layer chap 5 axyze  for some x and y   there are two possibilities  either node z has already been made permanent  or it has not been if it has  then e has already been probed  on the round following the one when z was made permanent   so the axyze path has not escaped our attention and thus can not be a shorter path now consider the case where z is still tentatively labeled if the label at z is greater than or equal to that at e  then axyze can not be a shorter path than abe if the label is less than that of e  then z and not e will become permanent first  allowing e to be probed from z this algorithm is given in fig 5-8 the global variables n and dist describe the graph and are initialized before shortest path is called the only difference between the program and the algorithm described above is that in fig 5-8  we compute the shortest path starting at the terminal node  t  rather than at the source node  s since the shortest paths from t to s in an undirected graph are the same as the shortest paths from s to t  it does not matter at which end we begin the reason for searching backward is that each node is labeled with its predecessor rather than its successor when the final path is copied into the output variable  path  the path is thus reversed the two reversal effects cancel  and the answer is produced in the correct order 5.2.3 flooding when a routing algorithm is implemented  each router must make decisions based on local knowledge  not the complete picture of the network a simple local technique is flooding  in which every incoming packet is sent out on every outgoing line except the one it arrived on flooding obviously generates vast numbers of duplicate packets  in fact  an infinite number unless some measures are taken to damp the process one such measure is to have a hop counter contained in the header of each packet that is decremented at each hop  with the packet being discarded when the counter reaches zero ideally  the hop counter should be initialized to the length of the path from source to destination if the sender does not know how long the path is  it can initialize the counter to the worst case  namely  the full diameter of the network flooding with a hop count can produce an exponential number of duplicate packets as the hop count grows and routers duplicate packets they have seen before a better technique for damming the flood is to have routers keep track of which packets have been flooded  to avoid sending them out a second time one way to achieve this goal is to have the source router put a sequence number in each packet it receives from its hosts each router then needs a list per source router telling which sequence numbers originating at that source have already been seen if an incoming packet is on the list  it is not flooded sec 5.2 routing algorithms 369 # define max nodes 1024 / * maximum number of nodes * / # define infinity 1000000000 / * a number larger than every maximum path * / int n  dist  max nodes   max nodes  ; / * dist  i   j  is the distance from i to j * / void shortest path  int s  int t  int path     struct state  / * the path being worked on * / int predecessor ; / * previous node * / int length ; / * length from source to this node * / enum  permanent  tentative  label ; / * label state * /  state  max nodes  ; int i  k  min ; struct state * p ; for  p = &state  0  ; p < &state  n  ; p + +   / * initialize state * / p > predecessor = ? 1 ; p > length = infinity ; p > label = tentative ;  state  t  .length = 0 ; state  t  .label = permanent ; k = t ; / * k is the initial working node * / do  / * is there a better path from k ? * / for  i = 0 ; i < n ; i + +  / * this graph has n nodes * / if  dist  k   i  ! = 0 && state  i  .label = = tentative   if  state  k  .length + dist  k   i  < state  i  .length   state  i  .predecessor = k ; state  i  .length = state  k  .length + dist  k   i  ;   / * find the tentatively labeled node with the smallest label * / k = 0 ; min = infinity ; for  i = 0 ; i < n ; i + +  if  state  i  .label = = tentative && state  i  .length < min   min = state  i  .length ; k = i ;  state  k  .label = permanent ;  while  k ! = s  ; / * copy the path into the output array * / i = 0 ; k = s ; do  path  i + +  = k ; k = state  k  .predecessor ;  while  k > = 0  ;  figure 5-8 dijkstra ? s algorithm to compute the shortest path through a graph to prevent the list from growing without bound  each list should be augmented by a counter  k  meaning that all sequence numbers through k have been seen when a packet comes in  it is easy to check if the packet has already been 370 the network layer chap 5 flooded  by comparing its sequence number to k ; if so  it is discarded furthermore  the full list below k is not needed  since k effectively summarizes it flooding is not practical for sending most packets  but it does have some important uses first  it ensures that a packet is delivered to every node in the network this may be wasteful if there is a single destination that needs the packet  but it is effective for broadcasting information in wireless networks  all messages transmitted by a station can be received by all other stations within its radio range  which is  in fact  flooding  and some algorithms utilize this property second  flooding is tremendously robust even if large numbers of routers are blown to bits  e.g  in a military network located in a war zone   flooding will find a path if one exists  to get a packet to its destination flooding also requires little in the way of setup the routers only need to know their neighbors this means that flooding can be used as a building block for other routing algorithms that are more efficient but need more in the way of setup flooding can also be used as a metric against which other routing algorithms can be compared flooding always chooses the shortest path because it chooses every possible path in parallel consequently  no other algorithm can produce a shorter delay  if we ignore the overhead generated by the flooding process itself   5.2.4 distance vector routing computer networks generally use dynamic routing algorithms that are more complex than flooding  but more efficient because they find shortest paths for the current topology two dynamic algorithms in particular  distance vector routing and link state routing  are the most popular in this section  we will look at the former algorithm in the following section  we will study the latter algorithm a distance vector routing algorithm operates by having each router maintain a table  i.e  a vector  giving the best known distance to each destination and which link to use to get there these tables are updated by exchanging information with the neighbors eventually  every router knows the best link to reach each destination the distance vector routing algorithm is sometimes called by other names  most commonly the distributed bellman-ford routing algorithm  after the researchers who developed it  bellman  1957 ; and ford and fulkerson  1962   it was the original arpanet routing algorithm and was also used in the internet under the name rip in distance vector routing  each router maintains a routing table indexed by  and containing one entry for each router in the network this entry has two parts  the preferred outgoing line to use for that destination and an estimate of the distance to that destination the distance might be measured as the number of hops or using another metric  as we discussed for computing shortest paths the router is assumed to know the ? ? distance ? ? to each of its neighbors if the metric is hops  the distance is just one hop if the metric is propagation delay  the sec 5.2 routing algorithms 371 router can measure it directly with special echo packets that the receiver just timestamps and sends back as fast as it can as an example  assume that delay is used as a metric and that the router knows the delay to each of its neighbors once every t msec  each router sends to each neighbor a list of its estimated delays to each destination it also receives a similar list from each neighbor imagine that one of these tables has just come in from neighbor x  with xi being x ? s estimate of how long it takes to get to router i if the router knows that the delay to x is m msec  it also knows that it can reach router i via x in xi ? ? m msec by performing this calculation for each neighbor  a router can find out which estimate seems the best and use that estimate and the corresponding link in its new routing table note that the old routing table is not used in the calculation this updating process is illustrated in fig 5-9 part  a  shows a network the first four columns of part  b  show the delay vectors received from the neighbors of router j a claims to have a 12-msec delay to b  a 25-msec delay to c  a 40 msec delay to d  etc suppose that j has measured or estimated its delay to its neighbors  a  i  h  and k  as 8  10  12  and 6 msec  respectively  a  a b c d e i j k l f g h router 0 12 25 40 14 23 18 17 21 9 24 29 24 36 18 27 7 20 31 20 0 11 22 33 20 31 19 8 30 19 6 0 14 7 22 9 21 28 36 24 22 40 31 19 22 10 0 9 8 20 28 20 17 30 18 12 10 0 6 15 a a i h i i h h i ? k k to a i h k line new estimated delay from j a b c de f g h i j k l ja ji jh jk delay delay delay delay is is is is 8 10 12 6 new routing table for j vectors received from j 's four neighbors  b  figure 5-9  a  a network  b  input from a  i  h  k  and the new routing table for j consider how j computes its new route to router g it knows that it can get to a in 8 msec  and furthermore a claims to be able to get to g in 18 msec  so j knows it can count on a delay of 26 msec to g if it forwards packets bound for g 372 the network layer chap 5 to a similarly  it computes the delay to g via i  h  and k as 41  31 + 10   18  6 + 12   and 37  31 + 6  msec  respectively the best of these values is 18  so it makes an entry in its routing table that the delay to g is 18 msec and that the route to use is via h the same calculation is performed for all the other destinations  with the new routing table shown in the last column of the figure the count-to-infinity problem the settling of routes to best paths across the network is called convergence distance vector routing is useful as a simple technique by which routers can collectively compute shortest paths  but it has a serious drawback in practice  although it converges to the correct answer  it may do so slowly in particular  it reacts rapidly to good news  but leisurely to bad news consider a router whose best route to destination x is long if  on the next exchange  neighbor a suddenly reports a short delay to x  the router just switches over to using the line to a to send traffic to x in one vector exchange  the good news is processed to see how fast good news propagates  consider the five-node  linear  network of fig 5-10  where the delay metric is the number of hops suppose a is down initially and all the other routers know this in other words  they have all recorded the delay to a as infinity a b c d e ? ? ? ? ? ? ? ? ? ? ? ? ? ? ? ? 4 1 1 1 1 2 2 2 3 3 initially after 1 exchange after 2 exchanges after 3 exchanges after 4 exchanges a b c d e 1 2 3 4 ? ? ? ? ? ? ? 2 3 4 3 4 4 6 3 3 5 5 4 4 6 5 5 7 6 7 6 7 8 7 8 initially after 1 exchange after 2 exchanges after 3 exchanges after 4 exchanges after 5 exchanges after 6 exchanges   a   b  figure 5-10 the count-to-infinity problem when a comes up  the other routers learn about it via the vector exchanges for simplicity  we will assume that there is a gigantic gong somewhere that is struck periodically to initiate a vector exchange at all routers simultaneously at the time of the first exchange  b learns that its left-hand neighbor has zero delay to a b now makes an entry in its routing table indicating that a is one hop away to the left all the other routers still think that a is down at this point  the routing table entries for a are as shown in the second row of fig 5-10  a   on the next sec 5.2 routing algorithms 373 exchange  c learns that b has a path of length 1 to a  so it updates its routing table to indicate a path of length 2  but d and e do not hear the good news until later clearly  the good news is spreading at the rate of one hop per exchange in a network whose longest path is of length n hops  within n exchanges everyone will know about newly revived links and routers now let us consider the situation of fig 5-10  b   in which all the links and routers are initially up routers b  c  d  and e have distances to a of 1  2  3  and 4 hops  respectively suddenly  either a goes down or the link between a and b is cut  which is effectively the same thing from b ? s point of view   at the first packet exchange  b does not hear anything from a fortunately  c says ? ? do not worry ; i have a path to a of length 2 ? ? little does b suspect that c ? s path runs through b itself for all b knows  c might have ten links all with separate paths to a of length 2 as a result  b thinks it can reach a via c  with a path length of 3 d and e do not update their entries for a on the first exchange on the second exchange  c notices that each of its neighbors claims to have a path to a of length 3 it picks one of them at random and makes its new distance to a 4  as shown in the third row of fig 5-10  b   subsequent exchanges produce the history shown in the rest of fig 5-10  b   from this figure  it should be clear why bad news travels slowly  no router ever has a value more than one higher than the minimum of all its neighbors gradually  all routers work their way up to infinity  but the number of exchanges required depends on the numerical value used for infinity for this reason  it is wise to set infinity to the longest path plus 1 not entirely surprisingly  this problem is known as the count-to-infinity problem there have been many attempts to solve it  for example  preventing routers from advertising their best paths back to the neighbors from which they heard them with the split horizon with poisoned reverse rule discussed in rfc 1058 however  none of these heuristics work well in practice despite the colorful names the core of the problem is that when x tells y that it has a path somewhere  y has no way of knowing whether it itself is on the path 5.2.5 link state routing distance vector routing was used in the arpanet until 1979  when it was replaced by link state routing the primary problem that caused its demise was that the algorithm often took too long to converge after the network topology changed  due to the count-to-infinity problem   consequently  it was replaced by an entirely new algorithm  now called link state routing variants of link state routing called is-is and ospf are the routing algorithms that are most widely used inside large networks and the internet today the idea behind link state routing is fairly simple and can be stated as five parts each router must do the following things to make it work  374 the network layer chap 5 1 discover its neighbors and learn their network addresses 2 set the distance or cost metric to each of its neighbors 3 construct a packet telling all it has just learned 4 send this packet to and receive packets from all other routers 5 compute the shortest path to every other router in effect  the complete topology is distributed to every router then dijkstra ? s algorithm can be run at each router to find the shortest path to every other router below we will consider each of these five steps in more detail learning about the neighbors when a router is booted  its first task is to learn who its neighbors are it accomplishes this goal by sending a special hello packet on each point-to-point line the router on the other end is expected to send back a reply giving its name these names must be globally unique because when a distant router later hears that three routers are all connected to f  it is essential that it can determine whether all three mean the same f when two or more routers are connected by a broadcast link  e.g  a switch  ring  or classic ethernet   the situation is slightly more complicated fig 5-11  a  illustrates a broadcast lan to which three routers  a  c  and f  are directly connected each of these routers is connected to one or more additional routers  as shown router a b c d e c d e h i f g g h f i n a b lan  a   b  figure 5-11  a  nine routers and a broadcast lan  b  a graph model of  a   the broadcast lan provides connectivity between each pair of attached routers however  modeling the lan as many point-to-point links increases the size sec 5.2 routing algorithms 375 of the topology and leads to wasteful messages a better way to model the lan is to consider it as a node itself  as shown in fig 5-11  b   here  we have introduced a new  artificial node  n  to which a  c  and f are connected one designated router on the lan is selected to play the role of n in the routing protocol the fact that it is possible to go from a to c on the lan is represented by the path anc here setting link costs the link state routing algorithm requires each link to have a distance or cost metric for finding shortest paths the cost to reach neighbors can be set automatically  or configured by the network operator a common choice is to make the cost inversely proportional to the bandwidth of the link for example  1-gbps ethernet may have a cost of 1 and 100-mbps ethernet a cost of 10 this makes higher-capacity paths better choices if the network is geographically spread out  the delay of the links may be factored into the cost so that paths over shorter links are better choices the most direct way to determine this delay is to send over the line a special echo packet that the other side is required to send back immediately by measuring the round-trip time and dividing it by two  the sending router can get a reasonable estimate of the delay building link state packets once the information needed for the exchange has been collected  the next step is for each router to build a packet containing all the data the packet starts with the identity of the sender  followed by a sequence number and age  to be described later  and a list of neighbors the cost to each neighbor is also given an example network is presented in fig 5-12  a  with costs shown as labels on the lines the corresponding link state packets for all six routers are shown in fig 5 12  b   b c e f a d 1 6 2 8 5 7 4 3  a  a seq age b c d e f b 4 e 5 seq age a 4 c 2 seq age b 2 d 3 seq age c 3 f 7 seq age a 5 c 1 seq age b 6 d 7 f 6 e 1 f 8 e 8 link state packets  b  figure 5-12  a  a network  b  the link state packets for this network 376 the network layer chap 5 building the link state packets is easy the hard part is determining when to build them one possibility is to build them periodically  that is  at regular intervals another possibility is to build them when some significant event occurs  such as a line or neighbor going down or coming back up again or changing its properties appreciably distributing the link state packets the trickiest part of the algorithm is distributing the link state packets all of the routers must get all of the link state packets quickly and reliably if different routers are using different versions of the topology  the routes they compute can have inconsistencies such as loops  unreachable machines  and other problems first  we will describe the basic distribution algorithm after that we will give some refinements the fundamental idea is to use flooding to distribute the link state packets to all routers to keep the flood in check  each packet contains a sequence number that is incremented for each new packet sent routers keep track of all the  source router  sequence  pairs they see when a new link state packet comes in  it is checked against the list of packets already seen if it is new  it is forwarded on all lines except the one it arrived on if it is a duplicate  it is discarded if a packet with a sequence number lower than the highest one seen so far ever arrives  it is rejected as being obsolete as the router has more recent data this algorithm has a few problems  but they are manageable first  if the sequence numbers wrap around  confusion will reign the solution here is to use a 32-bit sequence number with one link state packet per second  it would take 137 years to wrap around  so this possibility can be ignored second  if a router ever crashes  it will lose track of its sequence number if it starts again at 0  the next packet it sends will be rejected as a duplicate third  if a sequence number is ever corrupted and 65,540 is received instead of 4  a 1-bit error   packets 5 through 65,540 will be rejected as obsolete  since the current sequence number will be thought to be 65,540 the solution to all these problems is to include the age of each packet after the sequence number and decrement it once per second when the age hits zero  the information from that router is discarded normally  a new packet comes in  say  every 10 sec  so router information only times out when a router is down  or six consecutive packets have been lost  an unlikely event   the age field is also decremented by each router during the initial flooding process  to make sure no packet can get lost and live for an indefinite period of time  a packet whose age is zero is discarded   some refinements to this algorithm make it more robust when a link state packet comes in to a router for flooding  it is not queued for transmission immediately instead  it is put in a holding area to wait a short while in case more links are coming up or going down if another link state packet from the same source comes in before the first packet is transmitted  their sequence numbers are sec 5.2 routing algorithms 377 compared if they are equal  the duplicate is discarded if they are different  the older one is thrown out to guard against errors on the links  all link state packets are acknowledged the data structure used by router b for the network shown in fig 5-12  a  is depicted in fig 5-13 each row here corresponds to a recently arrived  but as yet not fully processed  link state packet the table records where the packet originated  its sequence number and age  and the data in addition  there are send and acknowledgement flags for each of b ? s three links  to a  c  and f  respectively   the send flags mean that the packet must be sent on the indicated link the acknowledgement flags mean that it must be acknowledged there d 21 59 1 0 0 0 1 1 c 20 60 1 0 1 0 1 0 e 21 59 0 1 0 1 0 1 f 21 60 1 1 0 0 0 1 a 21 60 0 1 1 1 0 0 source seq age a c f a c f data send flags ack flags figure 5-13 the packet buffer for router b in fig 5-12  a   in fig 5-13  the link state packet from a arrives directly  so it must be sent to c and f and acknowledged to a  as indicated by the flag bits similarly  the packet from f has to be forwarded to a and c and acknowledged to f however  the situation with the third packet  from e  is different it arrives twice  once via eab and once via efb consequently  it has to be sent only to c but must be acknowledged to both a and f  as indicated by the bits if a duplicate arrives while the original is still in the buffer  bits have to be changed for example  if a copy of c ? s state arrives from f before the fourth entry in the table has been forwarded  the six bits will be changed to 100011 to indicate that the packet must be acknowledged to f but not sent there computing the new routes once a router has accumulated a full set of link state packets  it can construct the entire network graph because every link is represented every link is  in fact  represented twice  once for each direction the different directions may even have different costs the shortest-path computations may then find different paths from router a to b than from router b to a now dijkstra ? s algorithm can be run locally to construct the shortest paths to all possible destinations the results of this algorithm tell the router which link to 378 the network layer chap 5 use to reach each destination this information is installed in the routing tables  and normal operation is resumed compared to distance vector routing  link state routing requires more memory and computation for a network with n routers  each of which has k neighbors  the memory required to store the input data is proportional to kn  which is at least as large as a routing table listing all the destinations also  the computation time grows faster than kn  even with the most efficient data structures  an issue in large networks nevertheless  in many practical situations  link state routing works well because it does not suffer from slow convergence problems link state routing is widely used in actual networks  so a few words about some example protocols are in order many isps use the is-is  intermediate system-intermediate system  link state protocol  oran  1990   it was designed for an early network called decnet  later adopted by iso for use with the osi protocols and then modified to handle other protocols as well  most notably  ip ospf  open shortest path first  is the other main link state protocol it was designed by ietf several years after is-is and adopted many of the innovations designed for is-is these innovations include a self-stabilizing method of flooding link state updates  the concept of a designated router on a lan  and the method of computing and supporting path splitting and multiple metrics as a consequence  there is very little difference between is-is and ospf the most important difference is that is-is can carry information about multiple network layer protocols at the same time  e.g  ip  ipx  and appletalk   ospf does not have this feature  and it is an advantage in large multiprotocol environments we will go over ospf in sec 5.6.6 a general comment on routing algorithms is also in order link state  distance vector  and other algorithms rely on processing at all the routers to compute routes problems with the hardware or software at even a small number of routers can wreak havoc across the network for example  if a router claims to have a link it does not have or forgets a link it does have  the network graph will be incorrect if a router fails to forward packets or corrupts them while forwarding them  the route will not work as expected finally  if it runs out of memory or does the routing calculation wrong  bad things will happen as the network grows into the range of tens or hundreds of thousands of nodes  the probability of some router failing occasionally becomes nonnegligible the trick is to try to arrange to limit the damage when the inevitable happens perlman  1988  discusses these problems and their possible solutions in detail 5.2.6 hierarchical routing as networks grow in size  the router routing tables grow proportionally not only is router memory consumed by ever-increasing tables  but more cpu time is needed to scan them and more bandwidth is needed to send status reports about them at a certain point  the network may grow to the point where it is no longer sec 5.2 routing algorithms 379 feasible for every router to have an entry for every other router  so the routing will have to be done hierarchically  as it is in the telephone network when hierarchical routing is used  the routers are divided into what we will call regions each router knows all the details about how to route packets to destinations within its own region but knows nothing about the internal structure of other regions when different networks are interconnected  it is natural to regard each one as a separate region to free the routers in one network from having to know the topological structure of the other ones for huge networks  a two-level hierarchy may be insufficient ; it may be necessary to group the regions into clusters  the clusters into zones  the zones into groups  and so on  until we run out of names for aggregations as an example of a multilevel hierarchy  consider how a packet might be routed from berkeley  california  to malindi  kenya the berkeley router would know the detailed topology within california but would send all out-of-state traffic to the los angeles router the los angeles router would be able to route traffic directly to other domestic routers but would send all foreign traffic to new york the new york router would be programmed to direct all traffic to the router in the destination country responsible for handling foreign traffic  say  in nairobi finally  the packet would work its way down the tree in kenya until it got to malindi figure 5-14 gives a quantitative example of routing in a two-level hierarchy with five regions the full routing table for router 1a has 17 entries  as shown in fig 5-14  b   when routing is done hierarchically  as in fig 5-14  c   there are entries for all the local routers  as before  but all other regions are condensed into a single router  so all traffic for region 2 goes via the 1b-2a line  but the rest of the remote traffic goes via the 1c-3b line hierarchical routing has reduced the table from 17 to 7 entries as the ratio of the number of regions to the number of routers per region grows  the savings in table space increase unfortunately  these gains in space are not free there is a penalty to be paid  increased path length for example  the best route from 1a to 5c is via region 2  but with hierarchical routing all traffic to region 5 goes via region 3  because that is better for most destinations in region 5 when a single network becomes very large  an interesting question is ? ? how many levels should the hierarchy have ? ? ? for example  consider a network with 720 routers if there is no hierarchy  each router needs 720 routing table entries if the network is partitioned into 24 regions of 30 routers each  each router needs 30 local entries plus 23 remote entries for a total of 53 entries if a three-level hierarchy is chosen  with 8 clusters each containing 9 regions of 10 routers  each router needs 10 entries for local routers  8 entries for routing to other regions within its own cluster  and 7 entries for distant clusters  for a total of 25 entries kamoun and kleinrock  1979  discovered that the optimal number of levels for an n router network is ln n  requiring a total of e ln n entries per router they have also shown that the increase in effective mean path length caused by hierarchical routing is sufficiently small that it is usually acceptable 380 the network layer chap 5 region 1 region 2 region 3 region 4 region 5 1b 1a 1c 2a 2b 2c 5b 5c 5a 5e 5d 2d 4a 4b 4c 3a 3b 1b 1 1c 1 1b 2 1b 3 1b 3 1b 4 1c 3 1c 2 1c 3 1c 4 1c 4 1c 4 1c 5 1b 5 1c 6 1c 5 1a ? ? 1c 2a 2b 2c 2d 3a 3b 4a 4b 4c 5a 5b 5c 5d 5e 1b dest line hops full table for 1a 1a 1c 2 3 4 5 1b dest line hops hierarchical table for 1a 1b 1 1c 1 1b 2 1c 2 1c 3 1c 4 ? ?  a   b   c  figure 5-14 hierarchical routing 5.2.7 broadcast routing in some applications  hosts need to send messages to many or all other hosts for example  a service distributing weather reports  stock market updates  or live radio programs might work best by sending to all machines and letting those that are interested read the data sending a packet to all destinations simultaneously is called broadcasting various methods have been proposed for doing it one broadcasting method that requires no special features from the network is for the source to simply send a distinct packet to each destination not only is the method wasteful of bandwidth and slow  but it also requires the source to have a complete list of all destinations this method is not desirable in practice  even though it is widely applicable an improvement is multidestination routing  in which each packet contains either a list of destinations or a bit map indicating the desired destinations when a packet arrives at a router  the router checks all the destinations to determine the set of output lines that will be needed  an output line is needed if it is the best route to at least one of the destinations  the router generates a new copy of the packet for each output line to be used and includes in each packet only those destinations that are to use the line in effect  the destination set is partitioned among sec 5.2 routing algorithms 381 the output lines after a sufficient number of hops  each packet will carry only one destination like a normal packet multidestination routing is like using separately addressed packets  except that when several packets must follow the same route  one of them pays full fare and the rest ride free the network bandwidth is therefore used more efficiently however  this scheme still requires the source to know all the destinations  plus it is as much work for a router to determine where to send one multidestination packet as it is for multiple distinct packets we have already seen a better broadcast routing technique  flooding when implemented with a sequence number per source  flooding uses links efficiently with a decision rule at routers that is relatively simple although flooding is illsuited for ordinary point-to-point communication  it rates serious consideration for broadcasting however  it turns out that we can do better still once the shortest path routes for regular packets have been computed the idea for reverse path forwarding is elegant and remarkably simple once it has been pointed out  dalal and metcalfe  1978   when a broadcast packet arrives at a router  the router checks to see if the packet arrived on the link that is normally used for sending packets toward the source of the broadcast if so  there is an excellent chance that the broadcast packet itself followed the best route from the router and is therefore the first copy to arrive at the router this being the case  the router forwards copies of it onto all links except the one it arrived on if  however  the broadcast packet arrived on a link other than the preferred one for reaching the source  the packet is discarded as a likely duplicate i f h j n a d e k g o m o c g d n h b l l b a e h b c d f j g o m k l n i  a  a b c d g j o f i e h k l m n  b   c  e k h figure 5-15 reverse path forwarding  a  a network  b  a sink tree  c  the tree built by reverse path forwarding an example of reverse path forwarding is shown in fig 5-15 part  a  shows a network  part  b  shows a sink tree for router i of that network  and part  c  shows how the reverse path algorithm works on the first hop  i sends packets to f  h  j  and n  as indicated by the second row of the tree each of these packets arrives on the preferred path to i  assuming that the preferred path falls along the sink tree  and is so indicated by a circle around the letter on the second hop  382 the network layer chap 5 eight packets are generated  two by each of the routers that received a packet on the first hop as it turns out  all eight of these arrive at previously unvisited routers  and five of these arrive along the preferred line of the six packets generated on the third hop  only three arrive on the preferred path  at c  e  and k  ; the others are duplicates after five hops and 24 packets  the broadcasting terminates  compared with four hops and 14 packets had the sink tree been followed exactly the principal advantage of reverse path forwarding is that it is efficient while being easy to implement it sends the broadcast packet over each link only once in each direction  just as in flooding  yet it requires only that routers know how to reach all destinations  without needing to remember sequence numbers  or use other mechanisms to stop the flood  or list all destinations in the packet our last broadcast algorithm improves on the behavior of reverse path forwarding it makes explicit use of the sink tree ? or any other convenient spanning tree ? for the router initiating the broadcast a spanning tree is a subset of the network that includes all the routers but contains no loops sink trees are spanning trees if each router knows which of its lines belong to the spanning tree  it can copy an incoming broadcast packet onto all the spanning tree lines except the one it arrived on this method makes excellent use of bandwidth  generating the absolute minimum number of packets necessary to do the job in fig 5-15  for example  when the sink tree of part  b  is used as the spanning tree  the broadcast packet is sent with the minimum 14 packets the only problem is that each router must have knowledge of some spanning tree for the method to be applicable sometimes this information is available  e.g  with link state routing  all routers know the complete topology  so they can compute a spanning tree  but sometimes it is not  e.g  with distance vector routing   5.2.8 multicast routing some applications  such as a multiplayer game or live video of a sports event streamed to many viewing locations  send packets to multiple receivers unless the group is very small  sending a distinct packet to each receiver is expensive on the other hand  broadcasting a packet is wasteful if the group consists of  say  1000 machines on a million-node network  so that most receivers are not interested in the message  or worse yet  they are definitely interested but are not supposed to see it   thus  we need a way to send messages to well-defined groups that are numerically large in size but small compared to the network as a whole sending a message to such a group is called multicasting  and the routing algorithm used is called multicast routing all multicasting schemes require some way to create and destroy groups and to identify which routers are members of a group how these tasks are accomplished is not of concern to the routing algorithm for now  we will assume that each group is identified by a multicast address and that routers know the groups to which they belong we will revisit group membership when we describe the network layer of the internet in sec 5.6 sec 5.2 routing algorithms 383 multicast routing schemes build on the broadcast routing schemes we have already studied  sending packets along spanning trees to deliver the packets to the members of the group while making efficient use of bandwidth however  the best spanning tree to use depends on whether the group is dense  with receivers scattered over most of the network  or sparse  with much of the network not belonging to the group in this section we will consider both cases if the group is dense  broadcast is a good start because it efficiently gets the packet to all parts of the network but broadcast will reach some routers that are not members of the group  which is wasteful the solution explored by deering and cheriton  1990  is to prune the broadcast spanning tree by removing links that do not lead to members the result is an efficient multicast spanning tree as an example  consider the two groups  1 and 2  in the network shown in fig 5-16  a   some routers are attached to hosts that belong to one or both of these groups  as indicated in the figure a spanning tree for the leftmost router is shown in fig 5-16  b   this tree can be used for broadcast but is overkill for multicast  as can be seen from the two pruned versions that are shown next in fig 5-16  c   all the links that do not lead to hosts that are members of group 1 have been removed the result is the multicast spanning tree for the leftmost router to send to group 1 packets are forwarded only along this spanning tree  which is more efficient than the broadcast tree because there are 7 links instead of 10 fig 5-16  d  shows the multicast spanning tree after pruning for group 2 it is efficient too  with only five links this time it also shows that different multicast groups have different spanning trees various ways of pruning the spanning tree are possible the simplest one can be used if link state routing is used and each router is aware of the complete topology  including which hosts belong to which groups each router can then construct its own pruned spanning tree for each sender to the group in question by constructing a sink tree for the sender as usual and then removing all links that do not connect group members to the sink node mospf  multicast ospf  is an example of a link state protocol that works in this way  moy  1994   with distance vector routing  a different pruning strategy can be followed the basic algorithm is reverse path forwarding however  whenever a router with no hosts interested in a particular group and no connections to other routers receives a multicast message for that group  it responds with a prune message  telling the neighbor that sent the message not to send it any more multicasts from the sender for that group when a router with no group members among its own hosts has received such messages on all the lines to which it sends the multicast  it  too  can respond with a prune message in this way  the spanning tree is recursively pruned dvmrp  distance vector multicast routing protocol  is an example of a multicast routing protocol that works this way  waitzman et al  1988   pruning results in efficient spanning trees that use only the links that are actually needed to reach members of the group one potential disadvantage is that it is lots of work for routers  especially for large networks suppose that a network 384 the network layer chap 5 1  2 1 1  2 2 1 2 1 2 1 2 1  2 1  2 2 2 1 1 1 1 1 1 1 2 2 2 2 2  a   b   c   d  figure 5-16  a  a network  b  a spanning tree for the leftmost router  c  a multicast tree for group 1  d  a multicast tree for group 2 has n groups  each with an average of m nodes at each router and for each group  m pruned spanning trees must be stored  for a total of mn trees for example  fig 5-16  c  gives the spanning tree for the leftmost router to send to group 1 the spanning tree for the rightmost router to send to group 1  not shown  will look quite different  as packets will head directly for group members rather than via the left side of the graph this in turn means that routers must forward packets destined to group 1 in different directions depending on which node is sending to the group when many large groups with many senders exist  considerable storage is needed to store all the trees an alternative design uses core-based trees to compute a single spanning tree for the group  ballardie et al  1993   all of the routers agree on a root  called the core or rendezvous point  and build the tree by sending a packet from each member to the root the tree is the union of the paths traced by these packets fig 5-17  a  shows a core-based tree for group 1 to send to this group  a sender sends a packet to the core when the packet reaches the core  it is forwarded down the tree this is shown in fig 5-17  b  for the sender on the righthand side of the network as a performance optimization  packets destined for the group do not need to reach the core before they are multicast as soon as a packet reaches the sec 5.2 routing algorithms 385 tree  it can be forwarded up toward the root  as well as down all the other branches this is the case for the sender at the top of fig 5-17  b   1 1 1 1 1 1 1 1 1 1 core core sender sender  a   b  figure 5-17  a  core-based tree for group 1  b  sending to group 1 having a shared tree is not optimal for all sources for example  in fig 5 17  b   the packet from the sender on the righthand side reaches the top-right group member via the core in three hops  instead of directly the inefficiency depends on where the core and senders are located  but often it is reasonable when the core is in the middle of the senders when there is only a single sender  as in a video that is streamed to a group  using the sender as the core is optimal also of note is that shared trees can be a major savings in storage costs  messages sent  and computation each router has to keep only one tree per group  instead of m trees further  routers that are not part of the tree do no work at all to support the group for this reason  shared tree approaches like core-based trees are used for multicasting to sparse groups in the internet as part of popular protocols such as pim  protocol independent multicast   fenner et al  2006   5.2.9 anycast routing so far  we have covered delivery models in which a source sends to a single destination  called unicast   to all destinations  called broadcast   and to a group of destinations  called multicast   another delivery model  called anycast is sometimes also useful in anycast  a packet is delivered to the nearest member of a group  partridge et al  1993   schemes that find these paths are called anycast routing why would we want anycast ? sometimes nodes provide a service  such as time of day or content distribution for which it is getting the right information all that matters  not the node that is contacted ; any node will do for example  anycast is used in the internet as part of dns  as we will see in chap 7 luckily  we will not have to devise new routing schemes for anycast because regular distance vector and link state routing can produce anycast routes suppose 386 the network layer chap 5 we want to anycast to the members of group 1 they will all be given the address ? ? 1  ? ? instead of different addresses distance vector routing will distribute vectors as usual  and nodes will choose the shortest path to destination 1 this will result in nodes sending to the nearest instance of destination 1 the routes are shown in fig 5-18  a   this procedure works because the routing protocol does not realize that there are multiple instances of destination 1 that is  it believes that all the instances of node 1 are the same node  as in the topology shown in fig 5-18  b   1 1 1 1 1 1  a   b  figure 5-18  a  anycast routes to group 1  b  topology seen by the routing protocol this procedure works for link state routing as well  although there is the added consideration that the routing protocol must not find seemingly short paths that pass through node 1 this would result in jumps through hyperspace  since the instances of node 1 are really nodes located in different parts of the network however  link state protocols already make this distinction between routers and hosts we glossed over this fact earlier because it was not needed for our discussion 5.2.10 routing for mobile hosts millions of people use computers while on the go  from truly mobile situations with wireless devices in moving cars  to nomadic situations in which laptop computers are used in a series of different locations we will use the term mobile hosts to mean either category  as distinct from stationary hosts that never move increasingly  people want to stay connected wherever in the world they may be  as easily as if they were at home these mobile hosts introduce a new complication  to route a packet to a mobile host  the network first has to find it the model of the world that we will consider is one in which all hosts are assumed to have a permanent home location that never changes each hosts also has a permanent home address that can be used to determine its home location  analogous to the way the telephone number 1-212-5551212 indicates the united states  country code 1  and manhattan  212   the routing goal in systems with sec 5.2 routing algorithms 387 mobile hosts is to make it possible to send packets to mobile hosts using their fixed home addresses and have the packets efficiently reach them wherever they may be the trick  of course  is to find them some discussion of this model is in order a different model would be to recompute routes as the mobile host moves and the topology changes we could then simply use the routing schemes described earlier in this section however  with a growing number of mobile hosts  this model would soon lead to the entire network endlessly computing new routes using the home addresses greatly reduces this burden another alternative would be to provide mobility above the network layer  which is what typically happens with laptops today when they are moved to new internet locations  laptops acquire new network addresses there is no association between the old and new addresses ; the network does not know that they belonged to the same laptop in this model  a laptop can be used to browse the web  but other hosts can not send packets to it  for example  for an incoming call   without building a higher layer location service  for example  signing into skype again after moving moreover  connections can not be maintained while the host is moving ; new connections must be started up instead network-layer mobility is useful to fix these problems the basic idea used for mobile routing in the internet and cellular networks is for the mobile host to tell a host at the home location where it is now this host  which acts on behalf of the mobile host  is called the home agent once it knows where the mobile host is currently located  it can forward packets so that they are delivered fig 5-19 shows mobile routing in action a sender in the northwest city of seattle wants to send a packet to a host normally located across the united states in new york the case of interest to us is when the mobile host is not at home instead  it is temporarily in san diego the mobile host in san diego must acquire a local network address before it can use the network this happens in the normal way that hosts obtain network addresses ; we will cover how this works for the internet later in this chapter the local address is called a care of address once the mobile host has this address  it can tell its home agent where it is now it does this by sending a registration message to the home agent  step 1  with the care of address the message is shown with a dashed line in fig 5-19 to indicate that it is a control message  not a data message next  the sender sends a data packet to the mobile host using its permanent address  step 2   this packet is routed by the network to the host ? s home location because that is where the home address belongs in new york  the home agent intercepts this packet because the mobile host is away from home it then wraps or encapsulates the packet with a new header and sends this bundle to the care of address  step 3   this mechanism is called tunneling it is very important in the internet so we will look at it in more detail later 388 the network layer chap 5 mobile host at care of address 3  tunnel to care of address 1  register care of address 2  send to home address home agent at home address sender 4  reply 5  tunnel to sender to care of address figure 5-19 packet routing for mobile hosts when the encapsulated packet arrives at the care of address  the mobile host unwraps it and retrieves the packet from the sender the mobile host then sends its reply packet directly to the sender  step 4   the overall route is called triangle routing because it may be circuitous if the remote location is far from the home location as part of step 4  the sender may learn the current care of address subsequent packets can be routed directly to the mobile host by tunneling them to the care of address  step 5   bypassing the home location entirely if connectivity is lost for any reason as the mobile moves  the home address can always be used to reach the mobile an important aspect that we have omitted from this description is security in general  when a host or router gets a message of the form ? ? starting right now  please send all of stephany ? s mail to me  ? ? it might have a couple of questions about whom it is talking to and whether this is a good idea security information is included in the messages so that their validity can be checked with cryptographic protocols that we will study in chap 8 there are many variations on mobile routing the scheme above is modeled on ipv6 mobility  the form of mobility used in the internet  johnson et al  2004  and as part of ip-based cellular networks such as umts we showed the sender to be a stationary node for simplicity  but the designs let both nodes be mobile hosts alternatively  the host may be part of a mobile network  for example a computer in a plane extensions of the basic scheme support mobile networks with no work on the part of the hosts  devarapalli et al  2005   some schemes make use of a foreign  i.e  remote  agent  similar to the home agent but at the foreign location  or analogous to the vlr  visitor location register  in cellular networks however  in more recent schemes  the foreign agent is not needed ; mobile hosts act as their own foreign agents in either case  knowledge of the temporary location of the mobile host is limited to a small number of sec 5.2 routing algorithms 389 hosts  e.g  the mobile  home agent  and senders  so that the many routers in a large network do not need to recompute routes for more information about mobile routing  see also perkins  1998  2002  and snoeren and balakrishnan  2000   5.2.11 routing in ad hoc networks we have now seen how to do routing when the hosts are mobile but the routers are fixed an even more extreme case is one in which the routers themselves are mobile among the possibilities are emergency workers at an earthquake site  military vehicles on a battlefield  a fleet of ships at sea  or a gathering of people with laptop computers in an area lacking 802.11 in all these cases  and others  each node communicates wirelessly and acts as both a host and a router networks of nodes that just happen to be near each other are called ad hoc networks or manets  mobile ad hoc networks   let us now examine them briefly more information can be found in perkins  2001   what makes ad hoc networks different from wired networks is that the topology is suddenly tossed out the window nodes can come and go or appear in new places at the drop of a bit with a wired network  if a router has a valid path to some destination  that path continues to be valid barring failures  which are hopefully rare with an ad hoc network  the topology may be changing all the time  so the desirability and even the validity of paths can change spontaneously without warning needless to say  these circumstances make routing in ad hoc networks more challenging than routing in their fixed counterparts many  many routing algorithms for ad hoc networks have been proposed however  since ad hoc networks have been little used in practice compared to mobile networks  it is unclear which of these protocols are most useful as an example  we will look at one of the most popular routing algorithms  aodv  ad hoc on-demand distance vector   perkins and royer  1999   it is a relative of the distance vector algorithm that has been adapted to work in a mobile environment  in which nodes often have limited bandwidth and battery lifetimes let us now see how it discovers and maintains routes route discovery in aodv  routes to a destination are discovered on demand  that is  only when a somebody wants to send a packet to that destination this saves much work that would otherwise be wasted when the topology changes before the route is used at any instant  the topology of an ad hoc network can be described by a graph of connected nodes two nodes are connected  i.e  have an arc between them in the graph  if they can communicate directly using their radios a basic but adequate model that is sufficient for our purposes is that each node can communicate with all other nodes that lie within its coverage circle real networks are 390 the network layer chap 5 more complicated  with buildings  hills  and other obstacles that block communication  and nodes for which a is connected to b but b is not connected to a because a has a more powerful transmitter than b however  for simplicity  we will assume all connections are symmetric to describe the algorithm  consider the newly formed ad hoc network of fig 5-20 suppose that a process at node a wants to send a packet to node i the aodv algorithm maintains a distance vector table at each node  keyed by destination  giving information about that destination  including the neighbor to which to send packets to reach the destination first  a looks in its table and does not find an entry for i it now has to discover a route to i this property of discovering routes only when they are needed is what makes this algorithm ? ? on demand ? ? a b c range of a ? s broadcast a d b c e f f h i h i g g e e d d b c b c a a g h i f d e g h i  a   b   c   d  f figure 5-20  a  range of a ? s broadcast  b  after b and d receive it  c  after c  f  and g receive it  d  after e  h  and i receive it the shaded nodes are new recipients the dashed lines show possible reverse routes the solid lines show the discovered route to locate i  a constructs a route request packet and broadcasts it using flooding  as described in sec 5.2.3 the transmission from a reaches b and d  as illustrated in fig 5-20  a   each node rebroadcasts the request  which continues to reach nodes f  g  and c in fig 5-20  c  and nodes h  e  and i in fig 5-20  d   a sequence number set at the source is used to weed out duplicates during the flood for example  d discards the transmission from b in fig 5-20  c  because it has already forwarded the request eventually  the request reaches node i  which constructs a route reply packet this packet is unicast to the sender along the reverse of the path followed by the request for this to work  each intermediate node must remember the node that sent it the request the arrows in fig 5-20  b  ?  d  show the reverse route information that is stored each intermediate node also increments a hop count as it forwards the reply this tells the nodes how far they are from the destination the replies tell each intermediate node which neighbor to use to reach the destination  it is the node that sent them the reply intermediate nodes g and d put the sec 5.2 routing algorithms 391 best route they hear into their routing tables as they process the reply when the reply reaches a  a new route  adgi  has been created in a large network  the algorithm generates many broadcasts  even for destinations that are close by to reduce overhead  the scope of the broadcasts is limited using the ip packet ? s time to live field this field is initialized by the sender and decremented on each hop if it hits 0  the packet is discarded instead of being broadcast the route discovery process is then modified as follows to locate a destination  the sender broadcasts a route request packet with time to live set to 1 if no response comes back within a reasonable time  another one is sent  this time with time to live set to 2 subsequent attempts use 3  4  5  etc in this way  the search is first attempted locally  then in increasingly wider rings route maintenance because nodes can move or be switched off  the topology can change spontaneously for example  in fig 5-20  if g is switched off  a will not realize that the route it was using to i  adgi  is no longer valid the algorithm needs to be able to deal with this periodically  each node broadcasts a hello message each of its neighbors is expected to respond to it if no response is forthcoming  the broadcaster knows that that neighbor has moved out of range or failed and is no longer connected to it similarly  if it tries to send a packet to a neighbor that does not respond  it learns that the neighbor is no longer available this information is used to purge routes that no longer work for each possible destination  each node  n  keeps track of its active neighbors that have fed it a packet for that destination during the last ? t seconds when any of n ? s neighbors becomes unreachable  it checks its routing table to see which destinations have routes using the now-gone neighbor for each of these routes  the active neighbors are informed that their route via n is now invalid and must be purged from their routing tables in our example  d purges its entries for g and i from its routing table and notifies a  which purges its entry for i in the general case  the active neighbors tell their active neighbors  and so on  recursively  until all routes depending on the now-gone node are purged from all routing tables at this stage  the invalid routes have been purged from the network  and senders can find new  valid routes by using the discovery mechanism that we described however  there is a complication recall that distance vector protocols can suffer from slow convergence or count-to-infinity problems after a topology change in which they confuse old  invalid routes with new  valid routes to ensure rapid convergence  routes include a sequence number that is controlled by the destination the destination sequence number is like a logical clock the destination increments it every time that it sends a fresh route reply senders ask for a fresh route by including in the route request the destination sequence number of the last route they used  which will either be the sequence number of the route that was just purged  or 0 as an initial value the 392 the network layer chap 5 request will be broadcast until a route with a higher sequence number is found intermediate nodes store the routes that have a higher sequence number  or the fewest hops for the current sequence number in the spirit of an on demand protocol  intermediate nodes only store the routes that are in use other route information learned during broadcasts is timed out after a short delay discovering and storing only the routes that are used helps to save bandwidth and battery life compared to a standard distance vector protocol that periodically broadcasts updates so far  we have considered only a single route  from a to i to further save resources  route discovery and maintenance are shared when routes overlap for instance  if b also wants to send packets to i  it will perform route discovery however  in this case the request will first reach d  which already has a route to i node d can then generate a reply to tell b the route without any additional work being required there are many other ad hoc routing schemes another well-known on demand scheme is dsr  dynamic source routing   johnson et al  2001   a different strategy based on geography is explored by gpsr  greedy perimeter stateless routing   karp and kung  2000   if all nodes know their geographic positions  forwarding to a destination can proceed without route computation by simply heading in the right direction and circling back to escape any dead ends which protocols win out will depend on the kinds of ad hoc networks that prove useful in practice 5.3 congestion control algorithms too many packets present in  a part of  the network causes packet delay and loss that degrades performance this situation is called congestion the network and transport layers share the responsibility for handling congestion since congestion occurs within the network  it is the network layer that directly experiences it and must ultimately determine what to do with the excess packets however  the most effective way to control congestion is to reduce the load that the transport layer is placing on the network this requires the network and transport layers to work together in this chapter we will look at the network aspects of congestion in chap 6  we will complete the topic by covering the transport aspects of congestion figure 5-21 depicts the onset of congestion when the number of packets hosts send into the network is well within its carrying capacity  the number delivered is proportional to the number sent if twice as many are sent  twice as many are delivered however  as the offered load approaches the carrying capacity  bursts of traffic occasionally fill up the buffers inside routers and some packets are lost these lost packets consume some of the capacity  so the number of delivered packets falls below the ideal curve the network is now congested sec 5.3 congestion control algorithms 393 ideal goodput  packets/sec  desirable response capacity of the network congestion collapse offered load  packet/sec  onset of congestion figure 5-21 with too much traffic  performance drops sharply unless the network is well designed  it may experience a congestion collapse  in which performance plummets as the offered load increases beyond the capacity this can happen because packets can be sufficiently delayed inside the network that they are no longer useful when they leave the network for example  in the early internet  the time a packet spent waiting for a backlog of packets ahead of it to be sent over a slow 56-kbps link could reach the maximum time it was allowed to remain in the network it then had to be thrown away a different failure mode occurs when senders retransmit packets that are greatly delayed  thinking that they have been lost in this case  copies of the same packet will be delivered by the network  again wasting its capacity to capture these factors  the y-axis of fig 5-21 is given as goodput  which is the rate at which useful packets are delivered by the network we would like to design networks that avoid congestion where possible and do not suffer from congestion collapse if they do become congested unfortunately  congestion can not wholly be avoided if all of a sudden  streams of packets begin arriving on three or four input lines and all need the same output line  a queue will build up if there is insufficient memory to hold all of them  packets will be lost adding more memory may help up to a point  but nagle  1987  realized that if routers have an infinite amount of memory  congestion gets worse  not better this is because by the time packets get to the front of the queue  they have already timed out  repeatedly  and duplicates have been sent this makes matters worse  not better ? it leads to congestion collapse low-bandwidth links or routers that process packets more slowly than the line rate can also become congested in this case  the situation can be improved by directing some of the traffic away from the bottleneck to other parts of the network eventually  however  all regions of the network will be congested in this situation  there is no alternative but to shed load or build a faster network it is worth pointing out the difference between congestion control and flow control  as the relationship is a very subtle one congestion control has to do with 394 the network layer chap 5 making sure the network is able to carry the offered traffic it is a global issue  involving the behavior of all the hosts and routers flow control  in contrast  relates to the traffic between a particular sender and a particular receiver its job is to make sure that a fast sender can not continually transmit data faster than the receiver is able to absorb it to see the difference between these two concepts  consider a network made up of 100-gbps fiber optic links on which a supercomputer is trying to force feed a large file to a personal computer that is capable of handling only 1 gbps although there is no congestion  the network itself is not in trouble   flow control is needed to force the supercomputer to stop frequently to give the personal computer a chance to breathe at the other extreme  consider a network with 1-mbps lines and 1000 large computers  half of which are trying to transfer files at 100 kbps to the other half here  the problem is not that of fast senders overpowering slow receivers  but that the total offered traffic exceeds what the network can handle the reason congestion control and flow control are often confused is that the best way to handle both problems is to get the host to slow down thus  a host can get a ? ? slow down ? ? message either because the receiver can not handle the load or because the network can not handle it we will come back to this point in chap 6 we will start our study of congestion control by looking at the approaches that can be used at different time scales then we will look at approaches to preventing congestion from occurring in the first place  followed by approaches for coping with it once it has set in 5.3.1 approaches to congestion control the presence of congestion means that the load is  temporarily  greater than the resources  in a part of the network  can handle two solutions come to mind  increase the resources or decrease the load as shown in fig 5-22  these solutions are usually applied on different time scales to either prevent congestion or react to it once it has occurred traffic-aware routing network provisioning traffic throttling admission control load shedding slower  preventative  faster  reactive  figure 5-22 timescales of approaches to congestion control the most basic way to avoid congestion is to build a network that is well matched to the traffic that it carries if there is a low-bandwidth link on the path along which most traffic is directed  congestion is likely sometimes resources sec 5.3 congestion control algorithms 395 can be added dynamically when there is serious congestion  for example  turning on spare routers or enabling lines that are normally used only as backups  to make the system fault tolerant  or purchasing bandwidth on the open market more often  links and routers that are regularly heavily utilized are upgraded at the earliest opportunity this is called provisioning and happens on a time scale of months  driven by long-term traffic trends to make the most of the existing network capacity  routes can be tailored to traffic patterns that change during the day as network users wake and sleep in different time zones for example  routes may be changed to shift traffic away from heavily used paths by changing the shortest path weights some local radio stations have helicopters flying around their cities to report on road congestion to make it possible for their mobile listeners to route their packets  cars  around hotspots this is called traffic-aware routing splitting traffic across multiple paths is also helpful however  sometimes it is not possible to increase capacity the only way then to beat back the congestion is to decrease the load in a virtual-circuit network  new connections can be refused if they would cause the network to become congested this is called admission control at a finer granularity  when congestion is imminent the network can deliver feedback to the sources whose traffic flows are responsible for the problem the network can request these sources to throttle their traffic  or it can slow down the traffic itself two difficulties with this approach are how to identify the onset of congestion  and how to inform the source that needs to slow down to tackle the first issue  routers can monitor the average load  queueing delay  or packet loss in all cases  rising numbers indicate growing congestion to tackle the second issue  routers must participate in a feedback loop with the sources for a scheme to work correctly  the time scale must be adjusted carefully if every time two packets arrive in a row  a router yells stop and every time a router is idle for 20 ? sec  it yells go  the system will oscillate wildly and never converge on the other hand  if it waits 30 minutes to make sure before saying anything  the congestion-control mechanism will react too sluggishly to be of any use delivering timely feedback is a nontrivial matter an added concern is having routers send more messages when the network is already congested finally  when all else fails  the network is forced to discard packets that it can not deliver the general name for this is load shedding a good policy for choosing which packets to discard can help to prevent congestion collapse 5.3.2 traffic-aware routing the first approach we will examine is traffic-aware routing the routing schemes we looked at in sec 5.2 used fixed link weights these schemes adapted to changes in topology  but not to changes in load the goal in taking load into 396 the network layer chap 5 account when computing routes is to shift traffic away from hotspots that will be the first places in the network to experience congestion the most direct way to do this is to set the link weight to be a function of the  fixed  link bandwidth and propagation delay plus the  variable  measured load or average queuing delay least-weight paths will then favor paths that are more lightly loaded  all else being equal traffic-aware routing was used in the early internet according to this model  khanna and zinky  1989   however  there is a peril consider the network of fig 5-23  which is divided into two parts  east and west  connected by two links  cf and ei suppose that most of the traffic between east and west is using link cf  and  as a result  this link is heavily loaded with long delays including queueing delay in the weight used for the shortest path calculation will make ei more attractive after the new routing tables have been installed  most of the east-west traffic will now go over ei  loading this link consequently  in the next update  cf will appear to be the shortest path as a result  the routing tables may oscillate wildly  leading to erratic routing and many potential problems west east b a d e c f g h j i figure 5-23 a network in which the east and west parts are connected by two links if load is ignored and only bandwidth and propagation delay are considered  this problem does not occur attempts to include load but change weights within a narrow range only slow down routing oscillations two techniques can contribute to a successful solution the first is multipath routing  in which there can be multiple paths from a source to a destination in our example this means that the traffic can be spread across both of the east to west links the second one is for the routing scheme to shift traffic across routes slowly enough that it is able to converge  as in the scheme of gallagher  1977   given these difficulties  in the internet routing protocols do not generally adjust their routes depending on the load instead  adjustments are made outside the routing protocol by slowly changing its inputs this is called traffic engineering sec 5.3 congestion control algorithms 397 5.3.3 admission control one technique that is widely used in virtual-circuit networks to keep congestion at bay is admission control the idea is simple  do not set up a new virtual circuit unless the network can carry the added traffic without becoming congested thus  attempts to set up a virtual circuit may fail this is better than the alternative  as letting more people in when the network is busy just makes matters worse by analogy  in the telephone system  when a switch gets overloaded it practices admission control by not giving dial tones the trick with this approach is working out when a new virtual circuit will lead to congestion the task is straightforward in the telephone network because of the fixed bandwidth of calls  64 kbps for uncompressed audio   however  virtual circuits in computer networks come in all shapes and sizes thus  the circuit must come with some characterization of its traffic if we are to apply admission control traffic is often described in terms of its rate and shape the problem of how to describe it in a simple yet meaningful way is difficult because traffic is typically bursty ? the average rate is only half the story for example  traffic that varies while browsing the web is more difficult to handle than a streaming movie with the same long-term throughput because the bursts of web traffic are more likely to congest routers in the network a commonly used descriptor that captures this effect is the leaky bucket or token bucket a leaky bucket has two parameters that bound the average rate and the instantaneous burst size of traffic since leaky buckets are widely used for quality of service  we will go over them in detail in sec 5.4 armed with traffic descriptions  the network can decide whether to admit the new virtual circuit one possibility is for the network to reserve enough capacity along the paths of each of its virtual circuits that congestion will not occur in this case  the traffic description is a service agreement for what the network will guarantee its users we have prevented congestion but veered into the related topic of quality of service a little too early ; we will return to it in the next section even without making guarantees  the network can use traffic descriptions for admission control the task is then to estimate how many circuits will fit within the carrying capacity of the network without congestion suppose that virtual circuits that may blast traffic at rates up to 10 mbps all pass through the same 100 mbps physical link how many circuits should be admitted ? clearly  10 circuits can be admitted without risking congestion  but this is wasteful in the normal case since it may rarely happen that all 10 are transmitting full blast at the same time in real networks  measurements of past behavior that capture the statistics of transmissions can be used to estimate the number of circuits to admit  to trade better performance for acceptable risk admission control can also be combined with traffic-aware routing by considering routes around traffic hotspots as part of the setup procedure for example  398 the network layer chap 5 consider the network illustrated in fig 5-24  a   in which two routers are congested  as indicated a congestion virtual circuit congestion b a b  a   b  figure 5-24  a  a congested network  b  the portion of the network that is not congested a virtual circuit from a to b is also shown suppose that a host attached to router a wants to set up a connection to a host attached to router b normally  this connection would pass through one of the congested routers to avoid this situation  we can redraw the network as shown in fig 5-24  b   omitting the congested routers and all of their lines the dashed line shows a possible route for the virtual circuit that avoids the congested routers shaikh et al  1999  give a design for this kind of load-sensitive routing 5.3.4 traffic throttling in the internet and many other computer networks  senders adjust their transmissions to send as much traffic as the network can readily deliver in this setting  the network aims to operate just before the onset of congestion when congestion is imminent  it must tell the senders to throttle back their transmissions and slow down this feedback is business as usual rather than an exceptional situation the term congestion avoidance is sometimes used to contrast this operating point with the one in which the network has become  overly  congested let us now look at some approaches to throttling traffic that can be used in both datagram networks and virtual-circuit networks each approach must solve two problems first  routers must determine when congestion is approaching  ideally before it has arrived to do so  each router can continuously monitor the resources it is using three possibilities are the utilization of the output links  the buffering of queued packets inside the router  and the number of packets that are lost due to insufficient buffering of these possibilities  the second one is the most useful averages of utilization do not directly account for the burstiness of sec 5.3 congestion control algorithms 399 most traffic ? a utilization of 50 % may be low for smooth traffic and too high for highly variable traffic counts of packet losses come too late congestion has already set in by the time that packets are lost the queueing delay inside routers directly captures any congestion experienced by packets it should be low most of time  but will jump when there is a burst of traffic that generates a backlog to maintain a good estimate of the queueing delay  d  a sample of the instantaneous queue length  s  can be made periodically and d updated according to dnew ? ? ? dold ? ?  1 ? ? ?  s where the constant ? ? determines how fast the router forgets recent history this is called an ewma  exponentially weighted moving average   it smoothes out fluctuations and is equivalent to a low-pass filter whenever d moves above the threshold  the router notes the onset of congestion the second problem is that routers must deliver timely feedback to the senders that are causing the congestion congestion is experienced in the network  but relieving congestion requires action on behalf of the senders that are using the network to deliver feedback  the router must identify the appropriate senders it must then warn them carefully  without sending many more packets into the already congested network different schemes use different feedback mechanisms  as we will now describe choke packets the most direct way to notify a sender of congestion is to tell it directly in this approach  the router selects a congested packet and sends a choke packet back to the source host  giving it the destination found in the packet the original packet may be tagged  a header bit is turned on  so that it will not generate any more choke packets farther along the path and then forwarded in the usual way to avoid increasing load on the network during a time of congestion  the router may only send choke packets at a low rate when the source host gets the choke packet  it is required to reduce the traffic sent to the specified destination  for example  by 50 %  in a datagram network  simply picking packets at random when there is congestion is likely to cause choke packets to be sent to fast senders  because they will have the most packets in the queue the feedback implicit in this protocol can help prevent congestion yet not throttle any sender unless it causes trouble for the same reason  it is likely that multiple choke packets will be sent to a given host and destination the host should ignore these additional chokes for the fixed time interval until its reduction in traffic takes effect after that period  further choke packets indicate that the network is still congested an example of a choke packet used in the early internet is the sourcequench message  postel  1981   it never caught on  though  partly because the 400 the network layer chap 5 circumstances in which it was generated and the effect it had were not clearly specified the modern internet uses an alternative notification design that we will describe next explicit congestion notification instead of generating additional packets to warn of congestion  a router can tag any packet it forwards  by setting a bit in the packet ? s header  to signal that it is experiencing congestion when the network delivers the packet  the destination can note that there is congestion and inform the sender when it sends a reply packet the sender can then throttle its transmissions as before this design is called ecn  explicit congestion notification  and is used in the internet  ramakrishnan et al  2001   it is a refinement of early congestion signaling protocols  notably the binary feedback scheme of ramakrishnan and jain  1988  that was used in the decnet architecture two bits in the ip packet header are used to record whether the packet has experienced congestion packets are unmarked when they are sent  as illustrated in fig 5-25 if any of the routers they pass through is congested  that router will then mark the packet as having experienced congestion as it is forwarded the destination will then echo any marks back to the sender as an explicit congestion signal in its next reply packet this is shown with a dashed line in the figure to indicate that it happens above the ip level  e.g  in tcp   the sender must then throttle its transmissions  as in the case of choke packets congestion signal host marked packet host packet congested router figure 5-25 explicit congestion notification hop-by-hop backpressure at high speeds or over long distances  many new packets may be transmitted after congestion has been signaled because of the delay before the signal takes effect consider  for example  a host in san francisco  router a in fig 5-26  that is sending traffic to a host in new york  router d in fig 5-26  at the oc-3 speed of 155 mbps if the new york host begins to run out of buffers  it will take about 40 msec for a choke packet to get back to san francisco to tell it to slow down an ecn indication will take even longer because it is delivered via the destination choke packet propagation is illustrated as the second  third  and fourth steps in sec 5.3 congestion control algorithms 401 fig 5-26  a   in those 40 msec  another 6.2 megabits will have been sent even if the host in san francisco completely shuts down immediately  the 6.2 megabits in the pipe will continue to pour in and have to be dealt with only in the seventh diagram in fig 5-26  a  will the new york router notice a slower flow an alternative approach is to have the choke packet take effect at every hop it passes through  as shown in the sequence of fig 5-26  b   here  as soon as the choke packet reaches f  f is required to reduce the flow to d doing so will require f to devote more buffers to the connection  since the source is still sending away at full blast  but it gives d immediate relief  like a headache remedy in a television commercial in the next step  the choke packet reaches e  which tells e to reduce the flow to f this action puts a greater demand on e ? s buffers but gives f immediate relief finally  the choke packet reaches a and the flow genuinely slows down the net effect of this hop-by-hop scheme is to provide quick relief at the point of congestion  at the price of using up more buffers upstream in this way  congestion can be nipped in the bud without losing any packets the idea is discussed in detail by mishra et al  1996   5.3.5 load shedding when none of the above methods make the congestion disappear  routers can bring out the heavy artillery  load shedding load shedding is a fancy way of saying that when routers are being inundated by packets that they can not handle  they just throw them away the term comes from the world of electrical power generation  where it refers to the practice of utilities intentionally blacking out certain areas to save the entire grid from collapsing on hot summer days when the demand for electricity greatly exceeds the supply the key question for a router drowning in packets is which packets to drop the preferred choice may depend on the type of applications that use the network for a file transfer  an old packet is worth more than a new one this is because dropping packet 6 and keeping packets 7 through 10  for example  will only force the receiver to do more work to buffer data that it can not yet use in contrast  for real-time media  a new packet is worth more than an old one this is because packets become useless if they are delayed and miss the time at which they must be played out to the user the former policy  old is better than new  is often called wine and the latter  new is better than old  is often called milk because most people would rather drink new milk and old wine than the alternative more intelligent load shedding requires cooperation from the senders an example is packets that carry routing information these packets are more important than regular data packets because they establish routes ; if they are lost  the network may lose connectivity another example is that algorithms for compressing video  like mpeg  periodically transmit an entire frame and then send subsequent 402 the network layer chap 5  a   b  choke choke b c a d e f choke reduced flow flow is still at maximum rate flow is reduced b c a d e f heavy flow choke choke choke reduced flow figure 5-26  a  a choke packet that affects only the source  b  a choke packet that affects each hop it passes through sec 5.3 congestion control algorithms 403 frames as differences from the last full frame in this case  dropping a packet that is part of a difference is preferable to dropping one that is part of a full frame because future packets depend on the full frame to implement an intelligent discard policy  applications must mark their packets to indicate to the network how important they are then  when packets have to be discarded  routers can first drop packets from the least important class  then the next most important class  and so on of course  unless there is some significant incentive to avoid marking every packet as very important ? never  ever discard  nobody will do it often accounting and money are used to discourage frivolous marking for example  the network might let senders send faster than the service they purchased allows if they mark excess packets as low priority such a strategy is actually not a bad idea because it makes more efficient use of idle resources  allowing hosts to use them as long as nobody else is interested  but without establishing a right to them when times get tough random early detection dealing with congestion when it first starts is more effective than letting it gum up the works and then trying to deal with it this observation leads to an interesting twist on load shedding  which is to discard packets before all the buffer space is really exhausted the motivation for this idea is that most internet hosts do not yet get congestion signals from routers in the form of ecn instead  the only reliable indication of congestion that hosts get from the network is packet loss after all  it is difficult to build a router that does not drop packets when it is overloaded transport protocols such as tcp are thus hardwired to react to loss as congestion  slowing down the source in response the reasoning behind this logic is that tcp was designed for wired networks and wired networks are very reliable  so lost packets are mostly due to buffer overruns rather than transmission errors wireless links must recover transmission errors at the link layer  so they are not seen at the network layer  to work well with tcp this situation can be exploited to help reduce congestion by having routers drop packets early  before the situation has become hopeless  there is time for the source to take action before it is too late a popular algorithm for doing this is called red  random early detection   floyd and jacobson  1993   to determine when to start discarding  routers maintain a running average of their queue lengths when the average queue length on some link exceeds a threshold  the link is said to be congested and a small fraction of the packets are dropped at random picking packets at random makes it more likely that the fastest senders will see a packet drop ; this is the best option since the router can not tell which source is causing the most trouble in a datagram network the affected sender will notice the loss when there is no acknowledgement  and then the transport protocol 404 the network layer chap 5 will slow down the lost packet is thus delivering the same message as a choke packet  but implicitly  without the router sending any explicit signal red routers improve performance compared to routers that drop packets only when their buffers are full  though they may require tuning to work well for example  the ideal number of packets to drop depends on how many senders need to be notified of congestion however  ecn is the preferred option if it is available it works in exactly the same manner  but delivers a congestion signal explicitly rather than as a loss ; red is used when hosts can not receive explicit signals 5.4 quality of service the techniques we looked at in the previous sections are designed to reduce congestion and improve network performance however  there are applications  and customers  that demand stronger performance guarantees from the network than ? ? the best that could be done under the circumstances ? ? multimedia applications in particular  often need a minimum throughput and maximum latency to work in this section  we will continue our study of network performance  but now with a sharper focus on ways to provide quality of service that is matched to application needs this is an area in which the internet is undergoing a long-term upgrade an easy solution to provide good quality of service is to build a network with enough capacity for whatever traffic will be thrown at it the name for this solution is overprovisioning the resulting network will carry application traffic without significant loss and  assuming a decent routing scheme  will deliver packets with low latency performance doesn ? t get any better than this to some extent  the telephone system is overprovisioned because it is rare to pick up a telephone and not get a dial tone instantly there is simply so much capacity available that demand can almost always be met the trouble with this solution is that it is expensive it is basically solving a problem by throwing money at it quality of service mechanisms let a network with less capacity meet application requirements just as well at a lower cost moreover  overprovisioning is based on expected traffic all bets are off if the traffic pattern changes too much with quality of service mechanisms  the network can honor the performance guarantees that it makes even when traffic spikes  at the cost of turning down some requests four issues must be addressed to ensure quality of service  1 what applications need from the network 2 how to regulate the traffic that enters the network 3 how to reserve resources at routers to guarantee performance 4 whether the network can safely accept more traffic sec 5.4 quality of service 405 no single technique deals efficiently with all these issues instead  a variety of techniques have been developed for use at the network  and transport  layer practical quality-of-service solutions combine multiple techniques to this end  we will describe two versions of quality of service for the internet called integrated services and differentiated services 5.4.1 application requirements a stream of packets from a source to a destination is called a flow  clark  1988   a flow might be all the packets of a connection in a connection-oriented network  or all the packets sent from one process to another process in a connectionless network the needs of each flow can be characterized by four primary parameters  bandwidth  delay  jitter  and loss together  these determine the qos  quality of service  the flow requires several common applications and the stringency of their network requirements are listed in fig 5-27 note that network requirements are less demanding than application requirements in those cases that the application can improve on the service provided by the network in particular  networks do not need to be lossless for reliable file transfer  and they do not need to deliver packets with identical delays for audio and video playout some amount of loss can be repaired with retransmissions  and some amount of jitter can be smoothed by buffering packets at the receiver however  there is nothing applications can do to remedy the situation if the network provides too little bandwidth or too much delay application bandwidth delay jitter loss email low low low medium file sharing high low low medium web access medium medium low medium remote login low medium medium medium audio on demand low low high low video on demand high low high low telephony low high high low videoconferencing high high high low figure 5-27 stringency of applications ? quality-of-service requirements the applications differ in their bandwidth needs  with email  audio in all forms  and remote login not needing much  but file sharing and video in all forms needing a great deal more interesting are the delay requirements file transfer applications  including email and video  are not delay sensitive if all packets are delayed uniformly by a few seconds  no harm is done interactive applications  such as web 406 the network layer chap 5 surfing and remote login  are more delay sensitive real-time applications  such as telephony and videoconferencing  have strict delay requirements if all the words in a telephone call are each delayed by too long  the users will find the connection unacceptable on the other hand  playing audio or video files from a server does not require low delay the variation  i.e  standard deviation  in the delay or packet arrival times is called jitter the first three applications in fig 5-27 are not sensitive to the packets arriving with irregular time intervals between them remote login is somewhat sensitive to that  since updates on the screen will appear in little bursts if the connection suffers much jitter video and especially audio are extremely sensitive to jitter if a user is watching a video over the network and the frames are all delayed by exactly 2.000 seconds  no harm is done but if the transmission time varies randomly between 1 and 2 seconds  the result will be terrible unless the application hides the jitter for audio  a jitter of even a few milliseconds is clearly audible the first four applications have more stringent requirements on loss than audio and video because all bits must be delivered correctly this goal is usually achieved with retransmissions of packets that are lost in the network by the transport layer this is wasted work ; it would be better if the network refused packets it was likely to lose in the first place audio and video applications can tolerate some lost packets without retransmission because people do not notice short pauses or occasional skipped frames to accommodate a variety of applications  networks may support different categories of qos an influential example comes from atm networks  which were once part of a grand vision for networking but have since become a niche technology they support  1 constant bit rate  e.g  telephony   2 real-time variable bit rate  e.g  compressed videoconferencing   3 non-real-time variable bit rate  e.g  watching a movie on demand   4 available bit rate  e.g  file transfer   these categories are also useful for other purposes and other networks constant bit rate is an attempt to simulate a wire by providing a uniform bandwidth and a uniform delay variable bit rate occurs when video is compressed  with some frames compressing more than others sending a frame with a lot of detail in it may require sending many bits  whereas a shot of a white wall may compress extremely well movies on demand are not actually real time because a few seconds of video can easily be buffered at the receiver before playback starts  so jitter on the network merely causes the amount of stored-but-not-played video to vary available bit rate is for applications such as email that are not sensitive to delay or jitter and will take what bandwidth they can get sec 5.4 quality of service 407 5.4.2 traffic shaping before the network can make qos guarantees  it must know what traffic is being guaranteed in the telephone network  this characterization is simple for example  a voice call  in uncompressed format  needs 64 kbps and consists of one 8-bit sample every 125 ? sec however  traffic in data networks is bursty it typically arrives at nonuniform rates as the traffic rate varies  e.g  videoconferencing with compression   users interact with applications  e.g  browsing a new web page   and computers switch between tasks bursts of traffic are more difficult to handle than constant-rate traffic because they can fill buffers and cause packets to be lost traffic shaping is a technique for regulating the average rate and burstiness of a flow of data that enters the network the goal is to allow applications to transmit a wide variety of traffic that suits their needs  including some bursts  yet have a simple and useful way to describe the possible traffic patterns to the network when a flow is set up  the user and the network  i.e  the customer and the provider  agree on a certain traffic pattern  i.e  shape  for that flow in effect  the customer says to the provider ? ? my transmission pattern will look like this ; can you handle it ? ? ? sometimes this agreement is called an sla  service level agreement   especially when it is made over aggregate flows and long periods of time  such as all of the traffic for a given customer as long as the customer fulfills her part of the bargain and only sends packets according to the agreed-on contract  the provider promises to deliver them all in a timely fashion traffic shaping reduces congestion and thus helps the network live up to its promise however  to make it work  there is also the issue of how the provider can tell if the customer is following the agreement and what to do if the customer is not packets in excess of the agreed pattern might be dropped by the network  or they might be marked as having lower priority monitoring a traffic flow is called traffic policing shaping and policing are not so important for peer-to-peer and other transfers that will consume any and all available bandwidth  but they are of great importance for real-time data  such as audio and video connections  which have stringent quality-of-service requirements leaky and token buckets we have already seen one way to limit the amount of data an application sends  the sliding window  which uses one parameter to limit how much data is in transit at any given time  which indirectly limits the rate now we will look at a more general way to characterize traffic  with the leaky bucket and token bucket algorithms the formulations are slightly different but give an equivalent result 408 the network layer chap 5 try to imagine a bucket with a small hole in the bottom  as illustrated in fig 5-28  b   no matter the rate at which water enters the bucket  the outflow is at a constant rate  r  when there is any water in the bucket and zero when the bucket is empty also  once the bucket is full to capacity b  any additional water entering it spills over the sides and is lost check bucket here host packets rate r b b rate r take out water/tokens put in water network  a   b   c  figure 5-28  a  shaping packets  b  a leaky bucket  c  a token bucket this bucket can be used to shape or police packets entering the network  as shown in fig 5-28  a   conceptually  each host is connected to the network by an interface containing a leaky bucket to send a packet into the network  it must be possible to put more water into the bucket if a packet arrives when the bucket is full  the packet must either be queued until enough water leaks out to hold it or be discarded the former might happen at a host shaping its traffic for the network as part of the operating system the latter might happen in hardware at a provider network interface that is policing traffic entering the network this technique was proposed by turner  1986  and is called the leaky bucket algorithm a different but equivalent formulation is to imagine the network interface as a bucket that is being filled  as shown in fig 5-28  c   the tap is running at rate r and the bucket has a capacity of b  as before now  to send a packet we must be able to take water  or tokens  as the contents are commonly called  out of the bucket  rather than putting water into the bucket   no more than a fixed number of tokens  b  can accumulate in the bucket  and if the bucket is empty  we must wait until more tokens arrive before we can send another packet this algorithm is called the token bucket algorithm leaky and token buckets limit the long-term rate of a flow but allow shortterm bursts up to a maximum regulated length to pass through unaltered and without suffering any artificial delays large bursts will be smoothed by a leaky bucket traffic shaper to reduce congestion in the network as an example  imagine that a computer can produce data at up to 1000 mbps  125 million bytes/sec  and that the first link of the network also runs at this speed the pattern of traffic the host generates is shown in fig 5-29  a   this pattern is bursty the average sec 5.4 quality of service 409 rate over one second is 200 mbps  even though the host sends a burst of 16,000 kb at the top speed of 1000 mbps  for 1/8 of the second   25 mb/s for 250 msec 125 mb/s for 125 msec time  msec  16000 1000 rate  mbps   a   d   b   e   c   f  1000 bucket  kb  with r = 25 mb/s  b = 0 with r = 25 mb/s  b = 9600 kb bucket always empty bucket empties  traffic delayed time  msec  1000 9600 0 figure 5-29  a  traffic from a host output shaped by a token bucket of rate 200 mbps and capacity  b  9600 kb and  c  0 kb token bucket level for shaping with rate 200 mbps and capacity  d  16,000 kb   e  9600 kb  and  f  0 kb now suppose that the routers can accept data at the top speed only for short intervals  until their buffers fill up the buffer size is 9600 kb  smaller than the traffic burst for long intervals  the routers work best at rates not exceeding 200 mbps  say  because this is all the bandwidth given to the customer   the implication is that if traffic is sent in this pattern  some of it will be dropped in the network because it does not fit into the buffers at routers to avoid this packet loss  we can shape the traffic at the host with a token bucket if we use a rate  r  of 200 mbps and a capacity  b  of 9600 kb  the traffic will fall within what the network can handle the output of this token bucket is shown in fig 5-29  b   the host can send full throttle at 1000 mbps for a short while until it has drained the bucket then it has to cut back to 200 mbps until the burst has been sent the effect is to spread out the burst over time because it was too large to handle all at once the level of the token bucket is shown in fig 5 29  e   it starts off full and is depleted by the initial burst when it reaches zero  new packets can be sent only at the rate at which the buffer is filling ; there can be no more bursts until the bucket has recovered the bucket fills when no traffic is being sent and stays flat when traffic is being sent at the fill rate we can also shape the traffic to be less bursty fig 5-29  c  shows the output of a token bucket with r ? ? 200 mbps and a capacity of 0 this is the extreme case 410 the network layer chap 5 in which the traffic has been completely smoothed no bursts are allowed  and the traffic enters the network at a steady rate the corresponding bucket level  shown in fig 5-29  f   is always empty traffic is being queued on the host for release into the network and there is always a packet waiting to be sent when it is allowed finally  fig 5-29  d  shows the bucket level for a token bucket with r ? ? 200 mbps and a capacity of b ? ? 16,000 kb this is the smallest token bucket through which the traffic passes unaltered it might be used at a router in the network to police the traffic that the host sends if the host is sending traffic that conforms to the token bucket on which it has agreed with the network  the traffic will fit through that same token bucket run at the router at the edge of the network if the host sends at a faster or burstier rate  the token bucket will run out of water if this happens  a traffic policer will know that the traffic is not as described it will then either drop the excess packets or lower their priority  depending on the design of the network in our example  the bucket empties only momentarily  at the end of the initial burst  then recovers enough for the next burst leaky and token buckets are easy to implement we will now describe the operation of a token bucket even though we have described water flowing continuously into and out of the bucket  real implementations must work with discrete quantities a token bucket is implemented with a counter for the level of the bucket the counter is advanced by r / ? t units at every clock tick of ? t seconds this would be 200 kbit every 1 msec in our example above every time a unit of traffic is sent into the network  the counter is decremented  and traffic may be sent until the counter reaches zero when the packets are all the same size  the bucket level can just be counted in packets  e.g  200 mbit is 20 packets of 1250 bytes   however  often variablesized packets are being used in this case  the bucket level is counted in bytes if the residual byte count is too low to send a large packet  the packet must wait until the next tick  or even longer  if the fill rate is small   calculating the length of the maximum burst  until the bucket empties  is slightly tricky it is longer than just 9600 kb divided by 125 mb/sec because while the burst is being output  more tokens arrive if we call the burst length s sec  the maximum output rate m bytes/sec  the token bucket capacity b bytes  and the token arrival rate r bytes/sec  we can see that an output burst contains a maximum of b ? ? rs bytes we also know that the number of bytes in a maximumspeed burst of length s seconds is ms hence  we have b ? ? rs ? ? ms we can solve this equation to get s ? ? b /  m ? ? r   for our parameters of b ? ? 9600 kb  m ? ? 125 mb/sec  and r ? ? 25 mb/sec  we get a burst time of about 94 msec a potential problem with the token bucket algorithm is that it reduces large bursts down to the long-term rate r it is frequently desirable to reduce the peak rate  but without going down to the long-term rate  and also without raising the sec 5.4 quality of service 411 long-term rate to allow more traffic into the network   one way to get smoother traffic is to insert a second token bucket after the first one the rate of the second bucket should be much higher than the first one basically  the first bucket characterizes the traffic  fixing its average rate but allowing some bursts the second bucket reduces the peak rate at which the bursts are sent into the network for example  if the rate of the second token bucket is set to be 500 mbps and the capacity is set to 0  the initial burst will enter the network at a peak rate of 500 mbps  which is lower than the 1000 mbps rate we had previously using all of these buckets can be a bit tricky when token buckets are used for traffic shaping at hosts  packets are queued and delayed until the buckets permit them to be sent when token buckets are used for traffic policing at routers in the network  the algorithm is simulated to make sure that no more packets are sent than permitted nevertheless  these tools provide ways to shape the network traffic into more manageable forms to assist in meeting quality-of-service requirements 5.4.3 packet scheduling being able to regulate the shape of the offered traffic is a good start however  to provide a performance guarantee  we must reserve sufficient resources along the route that the packets take through the network to do this  we are assuming that the packets of a flow follow the same route spraying them over routers at random makes it hard to guarantee anything as a consequence  something similar to a virtual circuit has to be set up from the source to the destination  and all the packets that belong to the flow must follow this route algorithms that allocate router resources among the packets of a flow and between competing flows are called packet scheduling algorithms three different kinds of resources can potentially be reserved for different flows  1 bandwidth 2 buffer space 3 cpu cycles the first one  bandwidth  is the most obvious if a flow requires 1 mbps and the outgoing line has a capacity of 2 mbps  trying to direct three flows through that line is not going to work thus  reserving bandwidth means not oversubscribing any output line a second resource that is often in short supply is buffer space when a packet arrives  it is buffered inside the router until it can be transmitted on the chosen outgoing line the purpose of the buffer is to absorb small bursts of traffic as the flows contend with each other if no buffer is available  the packet has to be discarded since there is no place to put it for good quality of service  some buffers might be reserved for a specific flow so that flow does not have to compete for 412 the network layer chap 5 buffers with other flows up to some maximum value  there will always be a buffer available when the flow needs one finally  cpu cycles may also be a scarce resource it takes router cpu time to process a packet  so a router can process only a certain number of packets per second while modern routers are able to process most packets quickly  some kinds of packets require greater cpu processing  such as the icmp packets we will describe in sec 5.6 making sure that the cpu is not overloaded is needed to ensure timely processing of these packets packet scheduling algorithms allocate bandwidth and other router resources by determining which of the buffered packets to send on the output line next we already described the most straightforward scheduler when explaining how routers work each router buffers packets in a queue for each output line until they can be sent  and they are sent in the same order that they arrived this algorithm is known as fifo  first-in first-out   or equivalently fcfs  first-come first-serve   fifo routers usually drop newly arriving packets when the queue is full since the newly arrived packet would have been placed at the end of the queue  this behavior is called tail drop it is intuitive  and you may be wondering what alternatives exist in fact  the red algorithm we described in sec 5.3.5 chose a newly arriving packet to drop at random when the average queue length grew large the other scheduling algorithms that we will describe also create other opportunities for deciding which packet to drop when the buffers are full fifo scheduling is simple to implement  but it is not suited to providing good quality of service because when there are multiple flows  one flow can easily affect the performance of the other flows if the first flow is aggressive and sends large bursts of packets  they will lodge in the queue processing packets in the order of their arrival means that the aggressive sender can hog most of the capacity of the routers its packets traverse  starving the other flows and reducing their quality of service to add insult to injury  the packets of the other flows that do get through are likely to be delayed because they had to sit in the queue behind many packets from the aggressive sender many packet scheduling algorithms have been devised that provide stronger isolation between flows and thwart attempts at interference  bhatti and crowcroft  2000   one of the first ones was the fair queueing algorithm devised by nagle  1987   the essence of this algorithm is that routers have separate queues  one for each flow for a given output line when the line becomes idle  the router scans the queues round-robin  as shown in fig 5-30 it then takes the first packet on the next queue in this way  with n hosts competing for the output line  each host gets to send one out of every n packets it is fair in the sense that all flows get to send packets at the same rate sending more packets will not improve this rate although a start  the algorithm has a flaw  it gives more bandwidth to hosts that use large packets than to hosts that use small packets demers et al  1990  suggested an improvement in which the round-robin is done in such a way as to sec 5.4 quality of service 413 input queues round-robin service 1 2 3 3 2 1 3 2 1 output line figure 5-30 round-robin fair queueing simulate a byte-by-byte round-robin  instead of a packet-by-packet round-robin the trick is to compute a virtual time that is the number of the round at which each packet would finish being sent each round drains a byte from all of the queues that have data to send the packets are then sorted in order of their finishing times and sent in that order this algorithm and an example of finish times for packets arriving in three flows are illustrated in fig 5-31 if a packet has length l  the round at which it will finish is simply l rounds after the start time the start time is either the finish time of the previous packet  or the arrival time of the packet  if the queue is empty when it arrives input queues fair queueing packet arrival time length finish time output order a 0 8 8 1 b 5 6 11 3 c 5 10 10 2 d 8 9 20 7 e 8 8 14 4 f 10 6 16 5 g 11 10 19 6 h 20 8 28 8 a b g e c d f h arrives late  a   b  arrives after d but goes first weight is 2 2x figure 5-31  a  weighted fair queueing  b  finishing times for the packets from the table in fig 5-32  b   and looking only at the first two packets in the top two queues  packets arrive in the order a  b  d  and f packet a arrives at round 0 and is 8 bytes long  so its finish time is round 8 similarly the finish time for packet b is 11 packet d arrives while b is being sent its finish time is 9 byte-rounds after it starts when b finishes  or 20 similarly  the finish time for f is 16 in the absence of new arrivals  the relative sending order is a  b  f  d  even though f arrived after d it is possible that another small packet will arrive on the top flow and obtain a finish time before d it will only jump ahead of d if the 414 the network layer chap 5 transmission of that packet has not started fair queueing does not preempt packets that are currently being transmitted because packets are sent in their entirety  fair queueing is only an approximation of the ideal byte-by-byte scheme but it is a very good approximation  staying within one packet transmission of the ideal scheme at all times one shortcoming of this algorithm in practice is that it gives all hosts the same priority in many situations  it is desirable to give  for example  video servers more bandwidth than  say  file servers this is easily possible by giving the video server two or more bytes per round this modified algorithm is called wfq  weighted fair queueing   letting the number of bytes per round be the weight of a flow  w  we can now give the formula for computing the finish time  fi ? ? max  ai ,fi ? 1  ? li /w where ai is the arrival time  fi is the finish time  and li is the length of packet i the bottom queue of fig 5-31  a  has a weight of 2  so its packets are sent more quickly as you can see in the finish times given in fig 5-31  b   another practical consideration is implementation complexity wfq requires that packets be inserted by their finish time into a sorted queue with n flows  this is at best an o  logn  operation per packet  which is difficult to achieve for many flows in high-speed routers shreedhar and varghese  1995  describe an approximation called deficit round robin that can be implemented very efficiently  with only o  1  operations per packet wfq is widely used given this approximation other kinds of scheduling algorithms exist  too a simple example is priority scheduling  in which each packet is marked with a priority high-priority packets are always sent before any low-priority packets that are buffered within a priority  packets are sent in fifo order however  priority scheduling has the disadvantage that a burst of high-priority packets can starve low-priority packets  which may have to wait indefinitely wfq often provides a better alternative by giving the high-priority queue a large weight  say 3  high-priority packets will often go through a short line  as relatively few packets should be high priority  yet some fraction of low priority packets will continue to be sent even when there is high priority traffic a high and low priority system is essentially a two-queue wfq system in which the high priority has infinite weight as a final example of a scheduler  packets might carry timestamps and be sent in timestamp order clark et al  1992  describe a design in which the timestamp records how far the packet is behind or ahead of schedule as it is sent through a sequence of routers on the path packets that have been queued behind other packets at a router will tend to be behind schedule  and the packets that have been serviced first will tend to be ahead of schedule sending packets in order of their timestamps has the beneficial effect of speeding up slow packets while at the same time slowing down fast packets the result is that all packets are delivered by the network with a more consistent delay sec 5.4 quality of service 415 5.4.4 admission control we have now seen all the necessary elements for qos and it is time to put them together to actually provide it qos guarantees are established through the process of admission control we first saw admission control used to control congestion  which is a performance guarantee  albeit a weak one the guarantees we are considering now are stronger  but the model is the same the user offers a flow with an accompanying qos requirement to the network the network then decides whether to accept or reject the flow based on its capacity and the commitments it has made to other flows if it accepts  the network reserves capacity in advance at routers to guarantee qos when traffic is sent on the new flow the reservations must be made at all of the routers along the route that the packets take through the network any routers on the path without reservations might become congested  and a single congested router can break the qos guarantee many routing algorithms find the single best path between each source and each destination and send all traffic over the best path this may cause some flows to be rejected if there is not enough spare capacity along the best path qos guarantees for new flows may still be accommodated by choosing a different route for the flow that has excess capacity this is called qos routing chen and nahrstedt  1998  give an overview of these techniques it is also possible to split the traffic for each destination over multiple paths to more easily find excess capacity a simple method is for routers to choose equal-cost paths and to divide the traffic equally or in proportion to the capacity of the outgoing links however  more sophisticated algorithms are also available  nelakuditi and zhang  2002   given a path  the decision to accept or reject a flow is not a simple matter of comparing the resources  bandwidth  buffers  cycles  requested by the flow with the router ? s excess capacity in those three dimensions it is a little more complicated than that to start with  although some applications may know about their bandwidth requirements  few know about buffers or cpu cycles  so at the minimum  a different way is needed to describe flows and translate this description to router resources we will get to this shortly next  some applications are far more tolerant of an occasional missed deadline than others the applications must choose from the type of guarantees that the network can make  whether hard guarantees or behavior that will hold most of the time all else being equal  everyone would like hard guarantees  but the difficulty is that they are expensive because they constrain worst case behavior guarantees for most of the packets are often sufficient for applications  and more flows with this guarantee can be supported for a fixed capacity finally  some applications may be willing to haggle about the flow parameters and others may not for example  a movie viewer that normally runs at 30 frames/sec may be willing to drop back to 25 frames/sec if there is not enough free bandwidth to support 30 frames/sec similarly  the number of pixels per frame  audio bandwidth  and other properties may be adjustable 416 the network layer chap 5 because many parties may be involved in the flow negotiation  the sender  the receiver  and all the routers along the path between them   flows must be described accurately in terms of specific parameters that can be negotiated a set of such parameters is called a flow specification typically  the sender  e.g  the video server  produces a flow specification proposing the parameters it would like to use as the specification propagates along the route  each router examines it and modifies the parameters as need be the modifications can only reduce the flow  not increase it  e.g  a lower data rate  not a higher one   when it gets to the other end  the parameters can be established as an example of what can be in a flow specification  consider the example of fig 5-32 this is based on rfcs 2210 and 2211 for integrated services  a qos design we will cover in the next section it has five parameters the first two parameters  the token bucket rate and token bucket size  use a token bucket to give the maximum sustained rate the sender may transmit  averaged over a long time interval  and the largest burst it can send over a short time interval parameter unit token bucket rate bytes/sec token bucket size bytes peak data rate bytes/sec minimum packet size bytes maximum packet size bytes figure 5-32 an example flow specification the third parameter  the peak data rate  is the maximum transmission rate tolerated  even for brief time intervals the sender must never exceed this rate even for short bursts the last two parameters specify the minimum and maximum packet sizes  including the transport and network layer headers  e.g  tcp and ip   the minimum size is useful because processing each packet takes some fixed time  no matter how short a router may be prepared to handle 10,000 packets/sec of 1 kb each  but not be prepared to handle 100,000 packets/sec of 50 bytes each  even though this represents a lower data rate the maximum packet size is important due to internal network limitations that may not be exceeded for example  if part of the path goes over an ethernet  the maximum packet size will be restricted to no more than 1500 bytes no matter what the rest of the network can handle an interesting question is how a router turns a flow specification into a set of specific resource reservations at first glance  it might appear that if a router has a link that runs at  say  1 gbps and the average packet is 1000 bits  it can process 1 million packets/sec this observation is not the case  though  because there will always be idle periods on the link due to statistical fluctuations in the load if the sec 5.4 quality of service 417 link needs every bit of capacity to get its work done  idling for even a few bits creates a backlog it can never get rid of even with a load slightly below the theoretical capacity  queues can build up and delays can occur consider a situation in which packets arrive at random with a mean arrival rate of ? ? packets/sec the packets have random lengths and can be sent on the link with a mean service rate of ? ? packets/sec under the assumption that both the arrival and service distributions are poisson distributions  what is called an m/m/1 queueing system  where ? ? m ? ? stands for markov  i.e  poisson   it can be proven using queueing theory that the mean delay experienced by a packet  t  is t ? ? 1 ? 1 ? ? ? / ? 1 ? ? 1 ? 1 ? ? ? 1 where ? ? ? ? ? / ? ? is the cpu utilization the first factor  1/ ?  is what the service time would be in the absence of competition the second factor is the slowdown due to competition with other flows for example  if ? ? ? ? 950,000 packets/sec and ? ? ? ? 1,000,000 packets/sec  then ? ? ? ? 0.95 and the mean delay experienced by each packet will be 20 ? sec instead of 1 ? sec this time accounts for both the queueing time and the service time  as can be seen when the load is very low  ? / ? ? ? 0   if there are  say  30 routers along the flow ? s route  queueing delay alone will account for 600 ? sec of delay one method of relating flow specifications to router resources that correspond to bandwidth and delay performance guarantees is given by parekh and gallagher  1993  1994   it is based on traffic sources shaped by  r  b  token buckets and wfq at routers each flow is given a wfq weight w large enough to drain its token bucket rate r as shown in fig 5-33 for example  if the flow has a rate of 1 mbps and the router and output link have a capacity of 1 gbps  the weight for the flow must be greater than 1/1000th of the total of the weights for all of the flows at that router for the output link this guarantees the flow a minimum bandwidth if it can not be given a large enough rate  the flow can not be admitted weighted fair queue  r  b  traffic source router capacity c w wi wi r < w x c weights figure 5-33 bandwidth and delay guarantees with token buckets and wfq the largest queueing delay the flow will see is a function of the burst size of the token bucket consider the two extreme cases if the traffic is smooth  without 418 the network layer chap 5 any bursts  packets will be drained from the router just as quickly as they arrive there will be no queueing delay  ignoring packetization effects   on the other hand  if the traffic is saved up in bursts  then a maximum-size burst  b  may arrive at the router all at once in this case the maximum queueing delay  d  will be the time taken to drain this burst at the guaranteed bandwidth  or b/r  again  ignoring packetization effects   if this delay is too large  the flow must request more bandwidth from the network these guarantees are hard the token buckets bound the burstiness of the source  and fair queueing isolates the bandwidth given to different flows this means that the flow will meet its bandwidth and delay guarantees regardless of how the other competing flows behave at the router those other flows can not break the guarantee even by saving up traffic and all sending at once moreover  the result holds for a path through multiple routers in any network topology each flow gets a minimum bandwidth because that bandwidth is guaranteed at each router the reason each flow gets a maximum delay is more subtle in the worst case that a burst of traffic hits the first router and competes with the traffic of other flows  it will be delayed up to the maximum delay of d however  this delay will also smooth the burst in turn  this means that the burst will incur no further queueing delays at later routers the overall queueing delay will be at most d 5.4.5 integrated services between 1995 and 1997  ietf put a lot of effort into devising an architecture for streaming multimedia this work resulted in over two dozen rfcs  starting with rfcs 2205 ? 2212 the generic name for this work is integrated services it was aimed at both unicast and multicast applications an example of the former is a single user streaming a video clip from a news site an example of the latter is a collection of digital television stations broadcasting their programs as streams of ip packets to many receivers at various locations below we will concentrate on multicast  since unicast is a special case of multicast in many multicast applications  groups can change membership dynamically  for example  as people enter a video conference and then get bored and switch to a soap opera or the croquet channel under these conditions  the approach of having the senders reserve bandwidth in advance does not work well  since it would require each sender to track all entries and exits of its audience for a system designed to transmit television with millions of subscribers  it would not work at all rsvp ? the resource reservation protocol the main part of the integrated services architecture that is visible to the users of the network is rsvp it is described in rfcs 2205 ? 2210 this protocol is used for making the reservations ; other protocols are used for sending the data sec 5.4 quality of service 419 rsvp allows multiple senders to transmit to multiple groups of receivers  permits individual receivers to switch channels freely  and optimizes bandwidth use while at the same time eliminating congestion in its simplest form  the protocol uses multicast routing using spanning trees  as discussed earlier each group is assigned a group address to send to a group  a sender puts the group ? s address in its packets the standard multicast routing algorithm then builds a spanning tree covering all group members the routing algorithm is not part of rsvp the only difference from normal multicasting is a little extra information that is multicast to the group periodically to tell the routers along the tree to maintain certain data structures in their memories as an example  consider the network of fig 5-34  a   hosts 1 and 2 are multicast senders  and hosts 3  4  and 5 are multicast receivers in this example  the senders and receivers are disjoint  but in general  the two sets may overlap the multicast trees for hosts 1 and 2 are shown in fig 5-34  b  and fig 5-34  c   respectively a d g j c f i l b k h e 1 2 3 4 5 receivers senders a d g j c f i l b k h e 1 2 3 4 5 1 2 3 4 5 a d g j c f i l b k h e  a   b   c  figure 5-34  a  a network  b  the multicast spanning tree for host 1  c  the multicast spanning tree for host 2 to get better reception and eliminate congestion  any of the receivers in a group can send a reservation message up the tree to the sender the message is propagated using the reverse path forwarding algorithm discussed earlier at each 420 the network layer chap 5 hop  the router notes the reservation and reserves the necessary bandwidth we saw in the previous section how a weighted fair queueing scheduler can be used to make this reservation if insufficient bandwidth is available  it reports back failure by the time the message gets back to the source  bandwidth has been reserved all the way from the sender to the receiver making the reservation request along the spanning tree an example of such a reservation is shown in fig 5-35  a   here host 3 has requested a channel to host 1 once it has been established  packets can flow from 1 to 3 without congestion now consider what happens if host 3 next reserves a channel to the other sender  host 2  so the user can watch two television programs at once a second path is reserved  as illustrated in fig 5-35  b   note that two separate channels are needed from host 3 to router e because two independent streams are being transmitted a d g j c f bandwidth reserved for source 1 bandwidth reserved for source 2 i l b k h e 1 2 3 4 5 a d g j c f i l b k h e 1 2 2 3 4 5 a d g j c f i l b k h e  a   b   c  3 4 5 1 figure 5-35  a  host 3 requests a channel to host 1  b  host 3 then requests a second channel  to host 2  c  host 5 requests a channel to host 1 finally  in fig 5-35  c   host 5 decides to watch the program being transmitted by host 1 and also makes a reservation first  dedicated bandwidth is reserved as far as router h however  this router sees that it already has a feed from host 1  so if the necessary bandwidth has already been reserved  it does not have to reserve any more note that hosts 3 and 5 might have asked for different amounts of bandwidth  e.g  if host 3 is playing on a small screen and only wants the lowresolution information   so the capacity reserved must be large enough to satisfy the greediest receiver when making a reservation  a receiver can  optionally  specify one or more sources that it wants to receive from it can also specify whether these choices sec 5.4 quality of service 421 are fixed for the duration of the reservation or whether the receiver wants to keep open the option of changing sources later the routers use this information to optimize bandwidth planning in particular  two receivers are only set up to share a path if they both agree not to change sources later on the reason for this strategy in the fully dynamic case is that reserved bandwidth is decoupled from the choice of source once a receiver has reserved bandwidth  it can switch to another source and keep that portion of the existing path that is valid for the new source if host 2 is transmitting several video streams in real time  for example a tv broadcaster with multiple channels  host 3 may switch between them at will without changing its reservation  the routers do not care what program the receiver is watching 5.4.6 differentiated services flow-based algorithms have the potential to offer good quality of service to one or more flows because they reserve whatever resources are needed along the route however  they also have a downside they require an advance setup to establish each flow  something that does not scale well when there are thousands or millions of flows also  they maintain internal per-flow state in the routers  making them vulnerable to router crashes finally  the changes required to the router code are substantial and involve complex router-to-router exchanges for setting up the flows as a consequence  while work continues to advance integrated services  few deployments of it or anything like it exist yet for these reasons  ietf has also devised a simpler approach to quality of service  one that can be largely implemented locally in each router without advance setup and without having the whole path involved this approach is known as class-based  as opposed to flow-based  quality of service ietf has standardized an architecture for it  called differentiated services  which is described in rfcs 2474  2475  and numerous others we will now describe it differentiated services can be offered by a set of routers forming an administrative domain  e.g  an isp or a telco   the administration defines a set of service classes with corresponding forwarding rules if a customer subscribes to differentiated services  customer packets entering the domain are marked with the class to which they belong this information is carried in the differentiated services field of ipv4 and ipv6 packets  described in sec 5.6   the classes are defined as per hop behaviors because they correspond to the treatment the packet will receive at each router  not a guarantee across the network better service is provided to packets with some per-hop behaviors  e.g  premium service  than to others  e.g  regular service   traffic within a class may be required to conform to some specific shape  such as a leaky bucket with some specified drain rate an operator with a nose for business might charge extra for each premium packet transported or might allow up to n premium packets per month for a fixed additional monthly fee note that this scheme requires no advance setup  no resource 422 the network layer chap 5 reservation  and no time-consuming end-to-end negotiation for each flow  as with integrated services this makes differentiated services relatively easy to implement class-based service also occurs in other industries for example  package delivery companies often offer overnight  two-day  and three-day service airlines offer first class  business class  and cattle-class service long-distance trains often have multiple service classes even the paris subway has two different service classes for packets  the classes may differ in terms of delay  jitter  and probability of being discarded in the event of congestion  among other possibilities  but probably not roomier ethernet frames   to make the difference between flow-based quality of service and class-based quality of service clearer  consider an example  internet telephony with a flowbased scheme  each telephone call gets its own resources and guarantees with a class-based scheme  all the telephone calls together get the resources reserved for the class telephony these resources can not be taken away by packets from the web browsing class or other classes  but no telephone call gets any private resources reserved for it alone expedited forwarding the choice of service classes is up to each operator  but since packets are often forwarded between networks run by different operators  ietf has defined some network-independent service classes the simplest class is expedited forwarding  so let us start with that one it is described in rfc 3246 the idea behind expedited forwarding is very simple two classes of service are available  regular and expedited the vast majority of the traffic is expected to be regular  but a limited fraction of the packets are expedited the expedited packets should be able to transit the network as though no other packets were present in this way they will get low loss  low delay and low jitter service ? just what is needed for voip a symbolic representation of this ? ? two-tube ? ? system is given in fig 5-36 note that there is still just one physical line the two logical pipes shown in the figure represent a way to reserve bandwidth for different classes of service  not a second physical line one way to implement this strategy is as follows packets are classified as expedited or regular and marked accordingly this step might be done on the sending host or in the ingress  first  router the advantage of doing classification on the sending host is that more information is available about which packets belong to which flows this task may be performed by networking software or even the operating system  to avoid having to change existing applications for example  it is becoming common for voip packets to be marked for expedited service by hosts if the packets pass through a corporate network or isp that supports expedited service  they will receive preferential treatment if the network does not support expedited service  no harm is done sec 5.4 quality of service 423 regular packets expedited packets figure 5-36 expedited packets experience a traffic-free network of course  if the marking is done by the host  the ingress router is likely to police the traffic to make sure that customers are not sending more expedited traffic than they have paid for within the network  the routers may have two output queues for each outgoing line  one for expedited packets and one for regular packets when a packet arrives  it is queued accordingly the expedited queue is given priority over the regular one  for example  by using a priority scheduler in this way  expedited packets see an unloaded network  even when there is  in fact  a heavy load of regular traffic assured forwarding a somewhat more elaborate scheme for managing the service classes is called assured forwarding it is described in rfc 2597 assured forwarding specifies that there shall be four priority classes  each class having its own resources the top three classes might be called gold  silver  and bronze in addition  it defines three discard classes for packets that are experiencing congestion  low  medium  and high taken together  these two factors define 12 service classes figure 5-37 shows one way packets might be processed under assured forwarding the first step is to classify the packets into one of the four priority classes as before  this step might be done on the sending host  as shown in the figure  or in the ingress router  and the rate of higher-priority packets may be limited by the operator as part of the service offering the next step is to determine the discard class for each packet this is done by passing the packets of each priority class through a traffic policer such as a token bucket the policer lets all of the traffic through  but it identifies packets that fit within small bursts as low discard  packets that exceed small bursts as medium discard  and packets that exceed large bursts as high discard the combination of priority and discard class is then encoded in each packet finally  the packets are processed by routers in the network with a packet scheduler that distinguishes the different classes a common choice is to use 424 the network layer chap 5 weighted fair queues router silver gold bronze packet source four priority classes classifier policer twelve priority/drop classes packets with diffserv mark figure 5-37 a possible implementation of assured forwarding weighted fair queueing for the four priority classes  with higher classes given higher weights in this way  the higher classes will get most of the bandwidth  but the lower classes will not be starved of bandwidth entirely for example  if the weights double from one class to the next higher class  the higher class will get twice the bandwidth within a priority class  packets with a higher discard class can be preferentially dropped by running an algorithm such as red  random early detection   which we saw in sec 5.3.5 red will start to drop packets as congestion builds but before the router has run out of buffer space at this stage  there is still buffer space with which to accept low discard packets while dropping high discard packets 5.5 internetworking until now  we have implicitly assumed that there is a single homogeneous network  with each machine using the same protocol in each layer unfortunately  this assumption is wildly optimistic many different networks exist  including pans  lans  mans  and wans we have described ethernet  internet over cable  the fixed and mobile telephone networks  802.11  802.16  and more numerous protocols are in widespread use across these networks in every layer in the following sections  we will take a careful look at the issues that arise when two or more networks are connected to form an internetwork  or more simply an internet it would be much simpler to join networks together if everyone used a single networking technology  and it is often the case that there is a dominant kind of network  such as ethernet some pundits speculate that the multiplicity of technologies will go away as soon as everyone realizes how wonderful  fill in your favorite network  is do not count on it history shows this to be wishful thinking different kinds of networks grapple with different problems  so  for example  ethernet and satellite networks are always likely to differ reusing existing systems  such as running data networks on top of cable  the telephone network  and power sec 5.5 internetworking 425 lines  adds constraints that cause the features of the networks to diverge heterogeneity is here to stay if there will always be different networks  it would be simpler if we did not need to interconnect them this also is unlikely bob metcalfe postulated that the value of a network with n nodes is the number of connections that may be made between the nodes  or n2  gilder  1993   this means that large networks are much more valuable than small networks because they allow many more connections  so there always will be an incentive to combine smaller networks the internet is the prime example of this interconnection  we will write internet with a capital ? ? i ? ? to distinguish it from other internets  or connected networks  the purpose of joining all these networks is to allow users on any of them to communicate with users on all the other ones when you pay an isp for internet service  you may be charged depending on the bandwidth of your line  but what you are really paying for is the ability to exchange packets with any other host that is also connected to the internet after all  the internet would not be very popular if you could only send packets to other hosts in the same city since networks often differ in important ways  getting packets from one network to another is not always so easy we must address problems of heterogeneity  and also problems of scale as the resulting internet grows very large we will begin by looking at how networks can differ to see what we are up against then we shall see the approach used so successfully by ip  internet protocol   the network layer protocol of the internet  including techniques for tunneling through networks  routing in internetworks  and packet fragmentation 5.5.1 how networks differ networks can differ in many ways some of the differences  such as different modulation techniques or frame formats  are internal to the physical and data link layers these differences will not concern us here instead  in fig 5-38 we list some of the differences that can be exposed to the network layer it is papering over these differences that makes internetworking more difficult than operating within a single network when packets sent by a source on one network must transit one or more foreign networks before reaching the destination network  many problems can occur at the interfaces between networks to start with  the source needs to be able to address the destination what do we do if the source is on an ethernet network and the destination is on a wimax network ? assuming we can even specify a wimax destination from an ethernet network  packets would cross from a connectionless network to a connection-oriented one this may require that a new connection be set up on short notice  which injects a delay  and much overhead if the connection is not used for many more packets many specific differences may have to be accommodated as well how do we multicast a packet to a group with some members on a network that does not 426 the network layer chap 5 item some possibilities service offered connectionless versus connection oriented addressing different sizes  flat or hierarchical broadcasting present or absent  also multicast  packet size every network has its own maximum ordering ordered and unordered delivery quality of service present or absent ; many different kinds reliability different levels of loss security privacy rules  encryption  etc parameters different timeouts  flow specifications  etc accounting by connect time  packet  byte  or not at all figure 5-38 some of the many ways networks can differ support multicast ? the differing max packet sizes used by different networks can be a major nuisance  too how do you pass an 8000-byte packet through a network whose maximum size is 1500 bytes ? if packets on a connection-oriented network transit a connectionless network  they may arrive in a different order than they were sent that is something the sender likely did not expect  and it might come as an  unpleasant  surprise to the receiver as well these kinds of differences can be papered over  with some effort for example  a gateway joining two networks might generate separate packets for each destination in lieu of better network support for multicasting a large packet might be broken up  sent in pieces  and then joined back together receivers might buffer packets and deliver them in order networks also can differ in large respects that are more difficult to reconcile the clearest example is quality of service if one network has strong qos and the other offers best effort service  it will be impossible to make bandwidth and delay guarantees for real-time traffic end to end in fact  they can likely only be made while the best-effort network is operated at a low utilization  or hardly used  which is unlikely to be the goal of most isps security mechanisms are problematic  but at least encryption for confidentiality and data integrity can be layered on top of networks that do not already include it finally  differences in accounting can lead to unwelcome bills when normal usage suddenly becomes expensive  as roaming mobile phone users with data plans have discovered 5.5.2 how networks can be connected there are two basic choices for connecting different networks  we can build devices that translate or convert packets from each kind of network into packets for each other network  or  like good computer scientists  we can try to solve the sec 5.5 internetworking 427 problem by adding a layer of indirection and building a common layer on top of the different networks in either case  the devices are placed at the boundaries between networks early on  cerf and kahn  1974  argued for a common layer to hide the differences of existing networks this approach has been tremendously successful  and the layer they proposed was eventually separated into the tcp and ip protocols almost four decades later  ip is the foundation of the modern internet for this accomplishment  cerf and kahn were awarded the 2004 turing award  informally known as the nobel prize of computer science ip provides a universal packet format that all routers recognize and that can be passed through almost every network ip has extended its reach from computer networks to take over the telephone network it also runs on sensor networks and other tiny devices that were once presumed too resource-constrained to support it we have discussed several different devices that connect networks  including repeaters  hubs  switches  bridges  routers  and gateways repeaters and hubs just move bits from one wire to another they are mostly analog devices and do not understand anything about higher layer protocols bridges and switches operate at the link layer they can be used to build networks  but only with minor protocol translation in the process  for example  between 10  100 and 1000 mbps ethernet switches our focus in this section is interconnection devices that operate at the network layer  namely the routers we will leave gateways  which are higherlayer interconnection devices  until later let us first explore at a high level how interconnection with a common network layer can be used to interconnect dissimilar networks an internet comprised of 802.11  mpls  and ethernet networks is shown in fig 5-39  a   suppose that the source machine on the 802.11 network wants to send a packet to the destination machine on the ethernet network since these technologies are different  and they are further separated by another kind of network  mpls   some added processing is needed at the boundaries between the networks because different networks may  in general  have different forms of addressing  the packet carries a network layer address that can identify any host across the three networks the first boundary the packet reaches is when it transitions from an 802.11 network to an mpls network 802.11 provides a connectionless service  but mpls provides a connection-oriented service this means that a virtual circuit must be set up to cross that network once the packet has traveled along the virtual circuit  it will reach the ethernet network at this boundary  the packet may be too large to be carried  since 802.11 can work with larger frames than ethernet to handle this problem  the packet is divided into fragments  and each fragment is sent separately when the fragments reach the destination  they are reassembled then the packet has completed its journey the protocol processing for this journey is shown in fig 5-39  b   the source accepts data from the transport layer and generates a packet with the common network layer header  which is ip in this example the network header contains the 428 the network layer chap 5 802.11 mpls ethernet source destination packet virtual circuit 802.11 ip ip router router 802.11 ip ip mplsip eth ip mpls ip ip ip eth ip physical  a   b  data from transport layer figure 5-39  a  a packet crossing different networks  b  network and link layer protocol processing ultimate destination address  which is used to determine that the packet should be sent via the first router so the packet is encapsulated in an 802.11 frame whose destination is the first router and transmitted at the router  the packet is removed from the frame ? s data field and the 802.11 frame header is discarded the router now examines the ip address in the packet and looks up this address in its routing table based on this address  it decides to send the packet to the second router next for this part of the path  an mpls virtual circuit must be established to the second router and the packet must be encapsulated with mpls headers that travel this circuit at the far end  the mpls header is discarded and the network address is again consulted to find the next network layer hop it is the destination itself since the packet is too long to be sent over ethernet  it is split into two portions each of these portions is put into the data field of an ethernet frame and sent to the ethernet address of the destination at the destination  the ethernet header is stripped from each of the frames  and the contents are reassembled the packet has finally reached its destination observe that there is an essential difference between the routed case and the switched  or bridged  case with a router  the packet is extracted from the frame and the network address in the packet is used for deciding where to send it with a switch  or bridge   the entire frame is transported on the basis of its mac address switches do not have to understand the network layer protocol being used to switch packets routers do unfortunately  internetworking is not as easy as we have made it sound in fact  when bridges were introduced  it was intended that they would join different types of networks  or at least different types of lans they were to do this by translating frames from one lan into frames from another lan however  this sec 5.5 internetworking 429 did not work well  for the same reason that internetworking is difficult  the differences in the features of lans  such as different maximum packet sizes and lans with and without priority classes  are hard to mask today  bridges are predominantly used to connect the same kind of network at the link layer  and routers connect different networks at the network layer internetworking has been very successful at building large networks  but it only works when there is a common network layer there have  in fact  been many network protocols over time getting everybody to agree on a single format is difficult when companies perceive it to their commercial advantage to have a proprietary format that they control examples besides ip  which is now the near-universal network protocol  were ipx  sna  and appletalk none of these protocols are still in widespread use  but there will always be other protocols the most relevant example now is probably ipv4 and ipv6 while these are both versions of ip  they are not compatible  or it would not have been necessary to create ipv6   a router that can handle multiple network protocols is called a multiprotocol router it must either translate the protocols  or leave connection for a higher protocol layer neither approach is entirely satisfactory connection at a higher layer  say  by using tcp  requires that all the networks implement tcp  which may not be the case   then  it limits usage across the networks to applications that use tcp  which does not include many real-time applications   the alternative is to translate packets between the networks however  unless the packet formats are close relatives with the same information fields  such conversions will always be incomplete and often doomed to failure for example  ipv6 addresses are 128 bits long they will not fit in a 32-bit ipv4 address field  no matter how hard the router tries getting ipv4 and ipv6 to run in the same network has proven to be a major obstacle to the deployment of ipv6  to be fair  so has getting customers to understand why they should want ipv6 in the first place  greater problems can be expected when translating between fundamentally different protocols  such as connectionless and connection-oriented network protocols given these difficulties  conversion is only rarely attempted arguably  even ip has only worked so well by serving as a kind of lowest common denominator it requires little of the networks on which it runs  but offers only best-effort service as a result 5.5.3 tunneling handling the general case of making two different networks interwork is exceedingly difficult however  there is a common special case that is manageable even for different network protocols this case is where the source and destination hosts are on the same type of network  but there is a different network in between as an example  think of an international bank with an ipv6 network 430 the network layer chap 5 in paris  an ipv6 network in london and connectivity between the offices via the ipv4 internet this situation is shown in fig 5-40 ipv6 ipv4 ipv6 paris london tunnel router router ipv6 packet ipv4 ipv6 packet ipv6 packet figure 5-40 tunneling a packet from paris to london the solution to this problem is a technique called tunneling to send an ip packet to a host in the london office  a host in the paris office constructs the packet containing an ipv6 address in london  and sends it to the multiprotocol router that connects the paris ipv6 network to the ipv4 internet when this router gets the ipv6 packet  it encapsulates the packet with an ipv4 header addressed to the ipv4 side of the multiprotocol router that connects to the london ipv6 network that is  the router puts a  ipv6  packet inside a  ipv4  packet when this wrapped packet arrives  the london router removes the original ipv6 packet and sends it onward to the destination host the path through the ipv4 internet can be seen as a big tunnel extending from one multiprotocol router to the other the ipv6 packet just travels from one end of the tunnel to the other  snug in its nice box it does not have to worry about dealing with ipv4 at all neither do the hosts in paris or london only the multiprotocol routers have to understand both ipv4 and ipv6 packets in effect  the entire trip from one multiprotocol router to the other is like a hop over a single link an analogy may make tunneling clearer consider a person driving her car from paris to london within france  the car moves under its own power  but when it hits the english channel  it is loaded onto a high-speed train and transported to england through the chunnel  cars are not permitted to drive through the chunnel   effectively  the car is being carried as freight  as depicted in fig 5-41 at the far end  the car is let loose on the english roads and once again continues to move under its own power tunneling of packets through a foreign network works the same way tunneling is widely used to connect isolated hosts and networks using other networks the network that results is called an overlay since it has effectively been overlaid on the base network deployment of a network protocol with a new feature is a common reason  as our ? ? ipv6 over ipv4 ? ? example shows the disadvantage of tunneling is that none of the hosts on the network that is tunneled over can be reached because the packets can not escape in the middle of the tunnel sec 5.5 internetworking 431 car english channel paris london railroad track railroad carriage figure 5-41 tunneling a car from france to england however  this limitation of tunnels is turned into an advantage with vpns  virtual private networks   a vpn is simply an overlay that is used to provide a measure of security we will explore vpns when we get to chap 8 5.5.4 internetwork routing routing through an internet poses the same basic problem as routing within a single network  but with some added complications to start  the networks may internally use different routing algorithms for example  one network may use link state routing and another distance vector routing since link state algorithms need to know the topology but distance vector algorithms do not  this difference alone would make it unclear how to find the shortest paths across the internet networks run by different operators lead to bigger problems first  the operators may have different ideas about what is a good path through the network one operator may want the route with the least delay  while another may want the most inexpensive route this will lead the operators to use different quantities to set the shortest-path costs  e.g  milliseconds of delay vs monetary cost   the weights will not be comparable across networks  so shortest paths on the internet will not be well defined worse yet  one operator may not want another operator to even know the details of the paths in its network  perhaps because the weights and paths may reflect sensitive information  such as the monetary cost  that represents a competitive business advantage finally  the internet may be much larger than any of the networks that comprise it it may therefore require routing algorithms that scale well by using a hierarchy  even if none of the individual networks need to use a hierarchy all of these considerations lead to a two-level routing algorithm within each network  an intradomain or interior gateway protocol is used for routing  ? ? gateway ? ? is an older term for ? ? router ? ?  it might be a link state protocol of the kind we have already described across the networks that make up the internet  an interdomain or exterior gateway protocol is used the networks may all use different intradomain protocols  but they must use the same interdomain protocol 432 the network layer chap 5 in the internet  the interdomain routing protocol is called bgp  border gateway protocol   we will describe it in the next section there is one more important term to introduce since each network is operated independently of all the others  it is often referred to as an as  autonomous system   a good mental model for an as is an isp network in fact  an isp network may be comprised of more than one as  if it is managed  or  has been acquired  as multiple networks but the difference is usually not significant the two levels are usually not strictly hierarchical  as highly suboptimal paths might result if a large international network and a small regional network were both abstracted to be a single network however  relatively little information about routes within the networks is exposed to find routes across the internetwork this helps to address all of the complications it improves scaling and lets operators freely select routes within their own networks using a protocol of their choosing it also does not require weights to be compared across networks or expose sensitive information outside of networks however  we have said little so far about how the routes across the networks of the internet are determined in the internet  a large determining factor is the business arrangements between isps each isp may charge or receive money from the other isps for carrying traffic another factor is that if internetwork routing requires crossing international boundaries  various laws may suddenly come into play  such as sweden ? s strict privacy laws about exporting personal data about swedish citizens from sweden all of these nontechnical factors are wrapped up in the concept of a routing policy that governs the way autonomous networks select the routes that they use we will return to routing policies when we describe bgp 5.5.5 packet fragmentation each network or link imposes some maximum size on its packets these limits have various causes  among them 1 hardware  e.g  the size of an ethernet frame   2 operating system  e.g  all buffers are 512 bytes   3 protocols  e.g  the number of bits in the packet length field   4 compliance with some  inter  national standard 5 desire to reduce error-induced retransmissions to some level 6 desire to prevent one packet from occupying the channel too long the result of all these factors is that the network designers are not free to choose any old maximum packet size they wish maximum payloads for some common sec 5.5 internetworking 433 technologies are 1500 bytes for ethernet and 2272 bytes for 802.11 ip is more generous  allows for packets as big as 65,515 bytes hosts usually prefer to transmit large packets because this reduces packet overheads such as bandwidth wasted on header bytes an obvious internetworking problem appears when a large packet wants to travel through a network whose maximum packet size is too small this nuisance has been a persistent issue  and solutions to it have evolved along with much experience gained on the internet one solution is to make sure the problem does not occur in the first place however  this is easier said than done a source does not usually know the path a packet will take through the network to a destination  so it certainly does not know how small packets must be to get there this packet size is called the path mtu  path maximum transmission unit   even if the source did know the path mtu  packets are routed independently in a connectionless network such as the internet this routing means that paths may suddenly change  which can unexpectedly change the path mtu the alternative solution to the problem is to allow routers to break up packets into fragments  sending each fragment as a separate network layer packet however  as every parent of a small child knows  converting a large object into small fragments is considerably easier than the reverse process  physicists have even given this effect a name  the second law of thermodynamics  packet-switching networks  too  have trouble putting the fragments back together again two opposing strategies exist for recombining the fragments back into the original packet the first strategy is to make fragmentation caused by a ? ? smallpacket ? ? network transparent to any subsequent networks through which the packet must pass on its way to the ultimate destination this option is shown in fig 5 42  a   in this approach  when an oversized packet arrives at g1  the router breaks it up into fragments each fragment is addressed to the same exit router  g2  where the pieces are recombined in this way  passage through the small-packet network is made transparent subsequent networks are not even aware that fragmentation has occurred transparent fragmentation is straightforward but has some problems for one thing  the exit router must know when it has received all the pieces  so either a count field or an ? ? end of packet ? ? bit must be provided also  because all packets must exit via the same router so that they can be reassembled  the routes are constrained by not allowing some fragments to follow one route to the ultimate destination and other fragments a disjoint route  some performance may be lost more significant is the amount of work that the router may have to do it may need to buffer the fragments as they arrive  and decide when to throw them away if not all of the fragments arrive some of this work may be wasteful  too  as the packet may pass through a series of small packet networks and need to be repeatedly fragmented and reassembled the other fragmentation strategy is to refrain from recombining fragments at any intermediate routers once a packet has been fragmented  each fragment is 434 the network layer chap 5 g1 g2 g3 g4 g1 g2 g3 g4 packet network 1 g1 fragments a large packet g2 reassembles the fragments g3 fragments again g4 reassembles again network 2  a  packet g1 fragments a large packet the fragments are not reassembled until the final destination  a host  is reached  b  figure 5-42  a  transparent fragmentation  b  nontransparent fragmentation treated as though it were an original packet the routers pass the fragments  as shown in fig 5-42  b   and reassembly is performed only at the destination host the main advantage of nontransparent fragmentation is that it requires routers to do less work ip works this way a complete design requires that the fragments be numbered in such a way that the original data stream can be reconstructed the design used by ip is to give every fragment a packet number  carried on all packets   an absolute byte offset within the packet  and a flag indicating whether it is the end of the packet an example is shown in fig 5-43 while simple  this design has some attractive properties fragments can be placed in a buffer at the destination in the right place for reassembly  even if they arrive out of order fragments can also be fragmented if they pass over a network with a yet smaller mtu this is shown in fig 5-43  c   retransmissions of the packet  if all fragments were not received  can be fragmented into different pieces finally  fragments can be of arbitrary size  down to a single byte plus the packet header in all cases  the destination simply uses the packet number and fragment offset to place the data in the right position  and the end-of-packet flag to determine when it has the complete packet unfortunately  this design still has problems the overhead can be higher than with transparent fragmentation because fragment headers are now carried over some links where they may not be needed but the real problem is the existence of fragments in the first place kent and mogul  1987  argued that fragmentation is detrimental to performance because  as well as the header overheads  a whole packet is lost if any of its fragments are lost  and because fragmentation is more of a burden for hosts than was originally realized sec 5.5 internetworking 435 number of the first elementary fragment in this packet packet number end of packet bit 27 0 1 a b c d e f g h i j 27 0 0 a b c d e f g h 27 8 1 i j 27 0 0 a b c d e 27 5 0 f g h 27 8 1 i j header 1 byte header header header header header  a   b   c  figure 5-43 fragmentation when the elementary data size is 1 byte  a  original packet  containing 10 data bytes  b  fragments after passing through a network with maximum packet size of 8 payload bytes plus header  c  fragments after passing through a size 5 gateway this leads us back to the original solution of getting rid of fragmentation in the network  the strategy used in the modern internet the process is called path mtu discovery  mogul and deering  1990   it works as follows each ip packet is sent with its header bits set to indicate that no fragmentation is allowed to be performed if a router receives a packet that is too large  it generates an error packet  returns it to the source  and drops the packet this is shown in fig 5-44 when the source receives the error packet  it uses the information inside to refragment the packet into pieces that are small enough for the router to handle if a router further down the path has an even smaller mtu  the process is repeated source destination packet  with length  ? try 1200 ? ? try 900 ? 1400 1200 900 figure 5-44 path mtu discovery 436 the network layer chap 5 the advantage of path mtu discovery is that the source now knows what length packet to send if the routes and path mtu change  new error packets will be triggered and the source will adapt to the new path however  fragmentation is still needed between the source and the destination unless the higher layers learn the path mtu and pass the right amount of data to ip tcp and ip are typically implemented together  as ? ? tcp/ip ? ?  to be able to pass this sort of information even if this is not done for other protocols  fragmentation has still been moved out of the network and into the hosts the disadvantage of path mtu discovery is that there may be added startup delays simply to send a packet more than one round-trip delay may be needed to probe the path and find the mtu before any data is delivered to the destination this begs the question of whether there are better designs the answer is probably ? ? yes ? ? consider the design in which each router simply truncates packets that exceed its mtu this would ensure that the destination learns the mtu as rapidly as possible  from the amount of data that was delivered  and receives some of the data 5.6 the network layer in the internet it is now time to discuss the network layer of the internet in detail but before getting into specifics  it is worth taking a look at the principles that drove its design in the past and made it the success that it is today all too often  nowadays  people seem to have forgotten them these principles are enumerated and discussed in rfc 1958  which is well worth reading  and should be mandatory for all protocol designers ? with a final exam at the end   this rfc draws heavily on ideas put forth by clark  1988  and saltzer et al  1984   we will now summarize what we consider to be the top 10 principles  from most important to least important   1 make sure it works do not finalize the design or standard until multiple prototypes have successfully communicated with each other all too often  designers first write a 1000-page standard  get it approved  then discover it is deeply flawed and does not work then they write version 1.1 of the standard this is not the way to go 2 keep it simple when in doubt  use the simplest solution william of occam stated this principle  occam ? s razor  in the 14th century put in modern terms  fight features if a feature is not absolutely essential  leave it out  especially if the same effect can be achieved by combining other features 3 make clear choices if there are several ways of doing the same thing  choose one having two or more ways to do the same thing is looking for trouble standards often have multiple options or modes sec 5.6 the network layer in the internet 437 or parameters because several powerful parties insist that their way is best designers should strongly resist this tendency just say no 4 exploit modularity this principle leads directly to the idea of having protocol stacks  each of whose layers is independent of all the other ones in this way  if circumstances require one module or layer to be changed  the other ones will not be affected 5 expect heterogeneity different types of hardware  transmission facilities  and applications will occur on any large network to handle them  the network design must be simple  general  and flexible 6 avoid static options and parameters if parameters are unavoidable  e.g  maximum packet size   it is best to have the sender and receiver negotiate a value rather than defining fixed choices 7 look for a good design ; it need not be perfect often  the designers have a good design but it can not handle some weird special case rather than messing up the design  the designers should go with the good design and put the burden of working around it on the people with the strange requirements 8 be strict when sending and tolerant when receiving in other words  send only packets that rigorously comply with the standards  but expect incoming packets that may not be fully conformant and try to deal with them 9 think about scalability if the system is to handle millions of hosts and billions of users effectively  no centralized databases of any kind are tolerable and load must be spread as evenly as possible over the available resources 10 consider performance and cost if a network has poor performance or outrageous costs  nobody will use it let us now leave the general principles and start looking at the details of the internet ? s network layer in the network layer  the internet can be viewed as a collection of networks or ases  autonomous systems  that are interconnected there is no real structure  but several major backbones exist these are constructed from high-bandwidth lines and fast routers the biggest of these backbones  to which everyone else connects to reach the rest of the internet  are called tier 1 networks attached to the backbones are isps  internet service providers  that provide internet access to homes and businesses  data centers and colocation facilities full of server machines  and regional  mid-level  networks the data centers serve much of the content that is sent over the internet attached 438 the network layer chap 5 to the regional networks are more isps  lans at many universities and companies  and other edge networks a sketch of this quasihierarchical organization is given in fig 5-45 leased lines to asia a u.s backbone leased transatlantic lines a european backbone national network company network ethernet ip router mobile network wimax cable home network regional network figure 5-45 the internet is an interconnected collection of many networks the glue that holds the whole internet together is the network layer protocol  ip  internet protocol   unlike most older network layer protocols  ip was designed from the beginning with internetworking in mind a good way to think of the network layer is this  its job is to provide a best-effort  i.e  not guaranteed  way to transport packets from source to destination  without regard to whether these machines are on the same network or whether there are other networks in between them communication in the internet works as follows the transport layer takes data streams and breaks them up so that they may be sent as ip packets in theory  packets can be up to 64 kb each  but in practice they are usually not more than 1500 bytes  so they fit in one ethernet frame   ip routers forward each packet through the internet  along a path from one router to the next  until the destination is reached at the destination  the network layer hands the data to the transport layer  which gives it to the receiving process when all the pieces finally get to the destination machine  they are reassembled by the network layer into the original datagram this datagram is then handed to the transport layer in the example of fig 5-45  a packet originating at a host on the home network has to traverse four networks and a large number of ip routers before even getting to the company network on which the destination host is located this is sec 5.6 the network layer in the internet 439 not unusual in practice  and there are many longer paths there is also much redundant connectivity in the internet  with backbones and isps connecting to each other in multiple locations this means that there are many possible paths between two hosts it is the job of the ip routing protocols to decide which paths to use 5.6.1 the ip version 4 protocol an appropriate place to start our study of the network layer in the internet is with the format of the ip datagrams themselves an ipv4 datagram consists of a header part and a body or payload part the header has a 20-byte fixed part and a variable-length optional part the header format is shown in fig 5-46 the bits are transmitted from left to right and top to bottom  with the high-order bit of the version field going first  this is a ? ? big-endian ? ? network byte order on littleendian machines  such as intel x86 computers  a software conversion is required on both transmission and reception  in retrospect  little endian would have been a better choice  but at the time ip was designed  no one knew it would come to dominate computing version ihl total length time to live protocol differentiated services identification header checksum fragment offset source address destination address options  0 or more words  df mf 32 bits figure 5-46 the ipv4  internet protocol  header the version field keeps track of which version of the protocol the datagram belongs to version 4 dominates the internet today  and that is where we have started our discussion by including the version at the start of each datagram  it becomes possible to have a transition between versions over a long period of time in fact  ipv6  the next version of ip  was defined more than a decade ago  yet is only just beginning to be deployed we will describe it later in this section its use will eventually be forced when each of china ? s almost 231 people has a desktop pc  a laptop  and an ip phone as an aside on numbering  ipv5 was an experimental real-time stream protocol that was never widely used 440 the network layer chap 5 since the header length is not constant  a field in the header  ihl  is provided to tell how long the header is  in 32-bit words the minimum value is 5  which applies when no options are present the maximum value of this 4-bit field is 15  which limits the header to 60 bytes  and thus the options field to 40 bytes for some options  such as one that records the route a packet has taken  40 bytes is far too small  making those options useless the differentiated services field is one of the few fields that has changed its meaning  slightly  over the years originally  it was called the type of service field it was and still is intended to distinguish between different classes of service various combinations of reliability and speed are possible for digitized voice  fast delivery beats accurate delivery for file transfer  error-free transmission is more important than fast transmission the type of service field provided 3 bits to signal priority and 3 bits to signal whether a host cared more about delay  throughput  or reliability however  no one really knew what to do with these bits at routers  so they were left unused for many years when differentiated services were designed  ietf threw in the towel and reused this field now  the top 6 bits are used to mark the packet with its service class ; we described the expedited and assured services earlier in this chapter the bottom 2 bits are used to carry explicit congestion notification information  such as whether the packet has experienced congestion ; we described explicit congestion notification as part of congestion control earlier in this chapter the total length includes everything in the datagram ? both header and data the maximum length is 65,535 bytes at present  this upper limit is tolerable  but with future networks  larger datagrams may be needed the identification field is needed to allow the destination host to determine which packet a newly arrived fragment belongs to all the fragments of a packet contain the same identification value next comes an unused bit  which is surprising  as available real estate in the ip header is extremely scarce as an april fool ? s joke  bellovin  2003  proposed using this bit to detect malicious traffic this would greatly simplify security  as packets with the ? ? evil ? ? bit set would be known to have been sent by attackers and could just be discarded unfortunately  network security is not this simple then come two 1-bit fields related to fragmentation df stands for don ? t fragment it is an order to the routers not to fragment the packet originally  it was intended to support hosts incapable of putting the pieces back together again now it is used as part of the process to discover the path mtu  which is the largest packet that can travel along a path without being fragmented by marking the datagram with the df bit  the sender knows it will either arrive in one piece  or an error message will be returned to the sender mf stands for more fragments all fragments except the last one have this bit set it is needed to know when all fragments of a datagram have arrived the fragment offset tells where in the current packet this fragment belongs all fragments except the last one in a datagram must be a multiple of 8 bytes  the sec 5.6 the network layer in the internet 441 elementary fragment unit since 13 bits are provided  there is a maximum of 8192 fragments per datagram  supporting a maximum packet length up to the limit of the total length field working together  the identification  mf  and fragment offset fields are used to implement fragmentation as described in sec 5.5.5 the ttl  time to live  field is a counter used to limit packet lifetimes it was originally supposed to count time in seconds  allowing a maximum lifetime of 255 sec it must be decremented on each hop and is supposed to be decremented multiple times when a packet is queued for a long time in a router in practice  it just counts hops when it hits zero  the packet is discarded and a warning packet is sent back to the source host this feature prevents packets from wandering around forever  something that otherwise might happen if the routing tables ever become corrupted when the network layer has assembled a complete packet  it needs to know what to do with it the protocol field tells it which transport process to give the packet to tcp is one possibility  but so are udp and some others the numbering of protocols is global across the entire internet protocols and other assigned numbers were formerly listed in rfc 1700  but nowadays they are contained in an online database located at www.iana.org since the header carries vital information such as addresses  it rates its own checksum for protection  the header checksum the algorithm is to add up all the 16-bit halfwords of the header as they arrive  using one ? s complement arithmetic  and then take the one ? s complement of the result for purposes of this algorithm  the header checksum is assumed to be zero upon arrival such a checksum is useful for detecting errors while the packet travels through the network note that it must be recomputed at each hop because at least one field always changes  the time to live field   but tricks can be used to speed up the computation the source address and destination address indicate the ip address of the source and destination network interfaces we will discuss internet addresses in the next section the options field was designed to provide an escape to allow subsequent versions of the protocol to include information not present in the original design  to permit experimenters to try out new ideas  and to avoid allocating header bits to information that is rarely needed the options are of variable length each begins with a 1-byte code identifying the option some options are followed by a 1-byte option length field  and then one or more data bytes the options field is padded out to a multiple of 4 bytes originally  the five options listed in fig 5-47 were defined the security option tells how secret the information is in theory  a military router might use this field to specify not to route packets through certain countries the military considers to be ? ? bad guys ? ? in practice  all routers ignore it  so its only practical function is to help spies find the good stuff more easily the strict source routing option gives the complete path from source to destination as a sequence of ip addresses the datagram is required to follow that 442 the network layer chap 5 option description security specifies how secret the datagram is strict source routing gives the complete path to be followed loose source routing gives a list of routers not to be missed record route makes each router append its ip address timestamp makes each router append its address and timestamp figure 5-47 some of the ip options exact route it is most useful for system managers who need to send emergency packets when the routing tables have been corrupted  or for making timing measurements the loose source routing option requires the packet to traverse the list of routers specified  in the order specified  but it is allowed to pass through other routers on the way normally  this option will provide only a few routers  to force a particular path for example  to force a packet from london to sydney to go west instead of east  this option might specify routers in new york  los angeles  and honolulu this option is most useful when political or economic considerations dictate passing through or avoiding certain countries the record route option tells each router along the path to append its ip address to the options field this allows system managers to track down bugs in the routing algorithms  ? ? why are packets from houston to dallas visiting tokyo first ? ? ?   when the arpanet was first set up  no packet ever passed through more than nine routers  so 40 bytes of options was plenty as mentioned above  now it is too small finally  the timestamp option is like the record route option  except that in addition to recording its 32-bit ip address  each router also records a 32-bit timestamp this option  too  is mostly useful for network measurement today  ip options have fallen out of favor many routers ignore them or do not process them efficiently  shunting them to the side as an uncommon case that is  they are only partly supported and they are rarely used 5.6.2 ip addresses a defining feature of ipv4 is its 32-bit addresses every host and router on the internet has an ip address that can be used in the source address and destination address fields of ip packets it is important to note that an ip address does not actually refer to a host it really refers to a network interface  so if a host is on two networks  it must have two ip addresses however  in practice  most hosts are on one network and thus have one ip address in contrast  routers have multiple interfaces and thus multiple ip addresses sec 5.6 the network layer in the internet 443 prefixes ip addresses are hierarchical  unlike ethernet addresses each 32-bit address is comprised of a variable-length network portion in the top bits and a host portion in the bottom bits the network portion has the same value for all hosts on a single network  such as an ethernet lan this means that a network corresponds to a contiguous block of ip address space this block is called a prefix ip addresses are written in dotted decimal notation in this format  each of the 4 bytes is written in decimal  from 0 to 255 for example  the 32-bit hexadecimal address 80d00297 is written as 128.208.2.151 prefixes are written by giving the lowest ip address in the block and the size of the block the size is determined by the number of bits in the network portion ; the remaining bits in the host portion can vary this means that the size must be a power of two by convention  it is written after the prefix ip address as a slash followed by the length in bits of the network portion in our example  if the prefix contains 28 addresses and so leaves 24 bits for the network portion  it is written as 128.208.0.0/24 since the prefix length can not be inferred from the ip address alone  routing protocols must carry the prefixes to routers sometimes prefixes are simply described by their length  as in a ? ? /16 ? ? which is pronounced ? ? slash 16 ? ? the length of the prefix corresponds to a binary mask of 1s in the network portion when written out this way  it is called a subnet mask it can be anded with the ip address to extract only the network portion for our example  the subnet mask is 255.255.255.0 fig 5-48 shows a prefix and a subnet mask 32 bits network prefix length = l bits host subnet mask 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 0 0 0 0 0 0 0 0 32 ? l bits figure 5-48 an ip prefix and a subnet mask hierarchical addresses have significant advantages and disadvantages the key advantage of prefixes is that routers can forward packets based on only the network portion of the address  as long as each of the networks has a unique address block the host portion does not matter to the routers because all hosts on the same network will be sent in the same direction it is only when the packets reach the network for which they are destined that they are forwarded to the correct host this makes the routing tables much smaller than they would otherwise be consider that the number of hosts on the internet is approaching one billion that would be a very large table for every router to keep however  by using a hierarchy  routers need to keep routes for only around 300,000 prefixes 444 the network layer chap 5 while using a hierarchy lets internet routing scale  it has two disadvantages first  the ip address of a host depends on where it is located in the network an ethernet address can be used anywhere in the world  but every ip address belongs to a specific network  and routers will only be able to deliver packets destined to that address to the network designs such as mobile ip are needed to support hosts that move between networks but want to keep the same ip addresses the second disadvantage is that the hierarchy is wasteful of addresses unless it is carefully managed if addresses are assigned to networks in  too  large blocks  there will be  many  addresses that are allocated but not in use this allocation would not matter much if there were plenty of addresses to go around however  it was realized more than two decades ago that the tremendous growth of the internet was rapidly depleting the free address space ipv6 is the solution to this shortage  but until it is widely deployed there will be great pressure to allocate ip addresses so that they are used very efficiently subnets network numbers are managed by a nonprofit corporation called icann  internet corporation for assigned names and numbers   to avoid conflicts in turn  icann has delegated parts of the address space to various regional authorities  which dole out ip addresses to isps and other companies this is the process by which a company is allocated a block of ip addresses however  this process is only the start of the story  as ip address assignment is ongoing as companies grow we have said that routing by prefix requires all the hosts in a network to have the same network number this property can cause problems as networks grow for example  consider a university that started out with our example /16 prefix for use by the computer science dept for the computers on its ethernet a year later  the electrical engineering dept wants to get on the internet the art dept soon follows suit what ip addresses should these departments use ? getting further blocks requires going outside the university and may be expensive or inconvenient moreover  the /16 already allocated has enough addresses for over 60,000 hosts it might be intended to allow for significant growth  but until that happens  it is wasteful to allocate further blocks of ip addresses to the same university a different organization is required the solution is to allow the block of addresses to be split into several parts for internal use as multiple networks  while still acting like a single network to the outside world this is called subnetting and the networks  such as ethernet lans  that result from dividing up a larger network are called subnets as we mentioned in chap 1  you should be aware that this new usage of the term conflicts with older usage of ? ? subnet ? ? to mean the set of all routers and communication lines in a network fig 5-49 shows how subnets can help with our example the single /16 has been split into pieces this split does not need to be even  but each piece must be sec 5.6 the network layer in the internet 445 aligned so that any bits can be used in the lower host portion in this case  half of the block  a /17  is allocated to the computer science dept  a quarter is allocated to the electrical engineering dept  a /18   and one eighth  a /19  to the art dept the remaining eighth is unallocated a different way to see how the block was divided is to look at the resulting prefixes when written in binary notation  computer science  10000000 11010000 1 | xxxxxxx xxxxxxxx electrical eng  10000000 11010000 00 | xxxxxx xxxxxxxx art  10000000 11010000 011 | xxxxx xxxxxxxx here  the vertical bar  |  shows the boundary between the subnet number and the host portion art 128.208.0.0/16  to internet  128.208.96.0/19 ee cs 128.208.128.0/17 128.208.0.0/18 figure 5-49 splitting an ip prefix into separate networks with subnetting when a packet comes into the main router  how does the router know which subnet to give it to ? this is where the details of our prefixes come in one way would be for each router to have a table with 65,536 entries telling it which outgoing line to use for each host on campus but this would undermine the main scaling benefit we get from using a hierarchy instead  the routers simply need to know the subnet masks for the networks on campus when a packet arrives  the router looks at the destination address of the packet and checks which subnet it belongs to the router can do this by anding the destination address with the mask for each subnet and checking to see if the result is the corresponding prefix for example  consider a packet destined for ip address 128.208.2.151 to see if it is for the computer science dept  we and with 255.255.128.0 to take the first 17 bits  which is 128.208.0.0  and see if they match the prefix address  which is 128.208.128.0   they do not match checking the first 18 bits for the electrical engineering dept  we get 128.208.0.0 when anding with the subnet mask this does match the prefix address  so the packet is forwarded onto the interface which leads to the electrical engineering network 446 the network layer chap 5 the subnet divisions can be changed later if necessary  by updating all subnet masks at routers inside the university outside the network  the subnetting is not visible  so allocating a new subnet does not require contacting icann or changing any external databases cidr ? classless interdomain routing even if blocks of ip addresses are allocated so that the addresses are used efficiently  there is still a problem that remains  routing table explosion routers in organizations at the edge of a network  such as a university  need to have an entry for each of their subnets  telling the router which line to use to get to that network for routes to destinations outside of the organization  they can use the simple default rule of sending the packets on the line toward the isp that connects the organization to the rest of the internet the other destination addresses must all be out there somewhere routers in isps and backbones in the middle of the internet have no such luxury they must know which way to go to get to every network and no simple default will work these core routers are said to be in the default-free zone of the internet no one really knows how many networks are connected to the internet any more  but it is a large number  probably at least a million this can make for a very large table it may not sound large by computer standards  but realize that routers must perform a lookup in this table to forward every packet  and routers at large isps may forward up to millions of packets per second specialized hardware and fast memory are needed to process packets at these rates  not a generalpurpose computer in addition  routing algorithms require each router to exchange information about the addresses it can reach with other routers the larger the tables  the more information needs to be communicated and processed the processing grows at least linearly with the table size greater communication increases the likelihood that some parts will get lost  at least temporarily  possibly leading to routing instabilities the routing table problem could have been solved by going to a deeper hierarchy  like the telephone network for example  having each ip address contain a country  state/province  city  network  and host field might work then  each router would only need to know how to get to each country  the states or provinces in its own country  the cities in its state or province  and the networks in its city unfortunately  this solution would require considerably more than 32 bits for ip addresses and would use addresses inefficiently  and liechtenstein would have as many bits in its addresses as the united states   fortunately  there is something we can do to reduce routing table sizes we can apply the same insight as subnetting  routers at different locations can know about a given ip address as belonging to prefixes of different sizes however  instead of splitting an address block into subnets  here we combine multiple small sec 5.6 the network layer in the internet 447 prefixes into a single larger prefix this process is called route aggregation the resulting larger prefix is sometimes called a supernet  to contrast with subnets as the division of blocks of addresses with aggregation  ip addresses are contained in prefixes of varying sizes the same ip address that one router treats as part of a /22  a block containing 210 addresses  may be treated by another router as part of a larger /20  which contains 212 addresses   it is up to each router to have the corresponding prefix information this design works with subnetting and is called cidr  classless inter domain routing   which is pronounced ? ? cider  ? ? as in the drink the most recent version of it is specified in rfc 4632  fuller and li  2006   the name highlights the contrast with addresses that encode hierarchy with classes  which we will describe shortly to make cidr easier to understand  let us consider an example in which a block of 8192 ip addresses is available starting at 194.24.0.0 suppose that cambridge university needs 2048 addresses and is assigned the addresses 194.24.0.0 through 194.24.7.255  along with mask 255.255.248.0 this is a /21 prefix next  oxford university asks for 4096 addresses since a block of 4096 addresses must lie on a 4096-byte boundary  oxford can not be given addresses starting at 194.24.8.0 instead  it gets 194.24.16.0 through 194.24.31.255  along with subnet mask 255.255.240.0 finally  the university of edinburgh asks for 1024 addresses and is assigned addresses 194.24.8.0 through 194.24.11.255 and mask 255.255.252.0 these assignments are summarized in fig 5-50 university first address last address how many prefix cambridge 194.24.0.0 194.24.7.255 2048 194.24.0.0/21 edinburgh 194.24.8.0 194.24.11.255 1024 194.24.8.0/22  available  194.24.12.0 194.24.15.255 1024 194.24.12.0/22 oxford 194.24.16.0 194.24.31.255 4096 194.24.16.0/20 figure 5-50 a set of ip address assignments all of the routers in the default-free zone are now told about the ip addresses in the three networks routers close to the universities may need to send on a different outgoing line for each of the prefixes  so they need an entry for each of the prefixes in their routing tables an example is the router in london in fig 5-51 now let us look at these three universities from the point of view of a distant router in new york all of the ip addresses in the three prefixes should be sent from new york  or the u.s in general  to london the routing process in london notices this and combines the three prefixes into a single aggregate entry for the prefix 194.24.0.0/19 that it passes to the new york router this prefix contains 8k addresses and covers the three universities and the otherwise unallocated 1024 addresses by using aggregation  three prefixes have been reduced to one  reducing 448 the network layer chap 5 edinburgh 192.24.0.0/19  1 aggregate prefix  192.24.8.0/22 cambridge oxford 192.24.16.0/20 192.24.0.0/21 new york london  3 prefixes  figure 5-51 aggregation of ip prefixes the prefixes that the new york router must be told about and the routing table entries in the new york router when aggregation is turned on  it is an automatic process it depends on which prefixes are located where in the internet not on the actions of an administrator assigning addresses to networks aggregation is heavily used throughout the internet and can reduce the size of router tables to around 200,000 prefixes as a further twist  prefixes are allowed to overlap the rule is that packets are sent in the direction of the most specific route  or the longest matching prefix that has the fewest ip addresses longest matching prefix routing provides a useful degree of flexibility  as seen in the behavior of the router at new york in fig 5-52 this router still uses a single aggregate prefix to send traffic for the three universities to london however  the previously available block of addresses within this prefix has now been allocated to a network in san francisco one possibility is for the new york router to keep four prefixes  sending packets for three of them to london and packets for the fourth to san francisco instead  longest matching prefix routing can handle this forwarding with the two prefixes that are shown one overall prefix is used to direct traffic for the entire block to london one more specific prefix is also used to direct a portion of the larger prefix to san francisco with the longest matching prefix rule  ip addresses within the san francisco network will be sent on the outgoing line to san francisco  and all other ip addresses in the larger prefix will be sent to london conceptually  cidr works as follows when a packet comes in  the routing table is scanned to determine if the destination lies within the prefix it is possible that multiple entries with different prefix lengths will match  in which case the entry with the longest prefix is used thus  if there is a match for a /20 mask and a /24 mask  the /24 entry is used to look up the outgoing line for the packet however  this process would be tedious if the table were really scanned entry by entry sec 5.6 the network layer in the internet 449 192.24.0.0/19 192.24.8.0/22 192.24.16.0/20 192.24.0.0/21 new york london 192.24.12.0/22 san francisco 192.24.12.0/22 figure 5-52 longest matching prefix routing at the new york router instead  complex algorithms have been devised to speed up the address matching process  ruiz-sanchez et al  2001   commercial routers use custom vlsi chips with these algorithms embedded in hardware classful and special addressing to help you better appreciate why cidr is so useful  we will briefly relate the design that predated it before 1993  ip addresses were divided into the five categories listed in fig 5-53 this allocation has come to be called classful addressing 32 bits range of host addresses 1.0.0.0 to 127.255.255.255 128.0.0.0 to 191.255.255.255 192.0.0.0 to 223.255.255.255 224.0.0.0 to 239.255.255.255 240.0.0.0 to 255.255.255.255 class 0 network host 10 network host 110 network host 1110 multicast address 1111 reserved for future use a b c d e figure 5-53 ip address formats the class a  b  and c formats allow for up to 128 networks with 16 million hosts each  16,384 networks with up to 65,536 hosts each  and 2 million networks  e.g  lans  with up to 256 hosts each  although a few of these are special   also supported is multicast  the class d format   in which a datagram is directed to multiple hosts addresses beginning with 1111 are reserved for use in the future they would be valuable to use now given the depletion of the ipv4 address space 450 the network layer chap 5 unfortunately  many hosts will not accept these addresses as valid because they have been off-limits for so long and it is hard to teach old hosts new tricks this is a hierarchical design  but unlike cidr the sizes of the address blocks are fixed over 2 billion addresses exist  but organizing the address space by classes wastes millions of them in particular  the real villain is the class b network for most organizations  a class a network  with 16 million addresses  is too big  and a class c network  with 256 addresses is too small a class b network  with 65,536  is just right in internet folklore  this situation is known as the three bears problem  as in goldilocks and the three bears  southey  1848    in reality  though  a class b address is far too large for most organizations studies have shown that more than half of all class b networks have fewer than 50 hosts a class c network would have done the job  but no doubt every organization that asked for a class b address thought that one day it would outgrow the 8 bit host field in retrospect  it might have been better to have had class c networks use 10 bits instead of 8 for the host number  allowing 1022 hosts per network had this been the case  most organizations would probably have settled for a class c network  and there would have been half a million of them  versus only 16,384 class b networks   it is hard to fault the internet ? s designers for not having provided more  and smaller  class b addresses at the time the decision was made to create the three classes  the internet was a research network connecting the major research universities in the u.s  plus a very small number of companies and military sites doing networking research   no one then perceived the internet becoming a massmarket communication system rivaling the telephone network at the time  someone no doubt said  ? ? the u.s has about 2000 colleges and universities even if all of them connect to the internet and many universities in other countries join  too  we are never going to hit 16,000  since there are not that many universities in the whole world furthermore  having the host number be an integral number of bytes speeds up packet processing ? ?  which was then done entirely in software   perhaps some day people will look back and fault the folks who designed the telephone number scheme and say  ? ? what idiots why didn ? t they include the planet number in the phone number ? ? ? but at the time  it did not seem necessary to handle these problems  subnets were introduced to flexibly assign blocks of addresses within an organization later  cidr was added to reduce the size of the global routing table today  the bits that indicate whether an ip address belongs to class a  b  or c network are no longer used  though references to these classes in the literature are still common to see how dropping the classes made forwarding more complicated  consider how simple it was in the old classful system when a packet arrived at a router  a copy of the ip address was shifted right 28 bits to yield a 4-bit class number a 16-way branch then sorted packets into a  b  c  and d and e  classes  with eight of the cases for class a  four of the cases for class b  and two of the cases for class c the code for each class then masked off the 8  16  or 24-bit network sec 5.6 the network layer in the internet 451 number and right aligned it in a 32-bit word the network number was then looked up in the a  b  or c table  usually by indexing for a and b networks and hashing for c networks once the entry was found  the outgoing line could be looked up and the packet forwarded this is much simpler than the longest matching prefix operation  which can no longer use a simple table lookup because an ip address may have any length prefix class d addresses continue to be used in the internet for multicast actually  it might be more accurate to say that they are starting to be used for multicast  since internet multicast has not been widely deployed in the past there are also several other addresses that have special meanings  as shown in fig 5-54 the ip address 0.0.0.0  the lowest address  is used by hosts when they are being booted it means ? ? this network ? ? or ? ? this host ? ? ip addresses with 0 as the network number refer to the current network these addresses allow machines to refer to their own network without knowing its number  but they have to know the network mask to know how many 0s to include   the address consisting of all 1s  or 255.255.255.255 ? the highest address ? is used to mean all hosts on the indicated network it allows broadcasting on the local network  typically a lan the addresses with a proper network number and all 1s in the host field allow machines to send broadcast packets to distant lans anywhere in the internet however  many network administrators disable this feature as it is mostly a security hazard finally  all addresses of the form 127.xx.yy.zz are reserved for loopback testing packets sent to that address are not put out onto the wire ; they are processed locally and treated as incoming packets this allows packets to be sent to the host without the sender knowing its number  which is useful for testing this host a host on this network broadcast on the local network 0 host network 127  anything  broadcast on a distant network loopback 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 0 0    0 0 1 1 1 1    1 1 1 1 figure 5-54 special ip addresses nat ? network address translation ip addresses are scarce an isp might have a /16 address  giving it 65,534 usable host numbers if it has more customers than that  it has a problem 452 the network layer chap 5 this scarcity has led to techniques to use ip addresses sparingly one approach is to dynamically assign an ip address to a computer when it is on and using the network  and to take the ip address back when the host becomes inactive the ip address can then be assigned to another computer that becomes active in this way  a single /16 address can handle up to 65,534 active users this strategy works well in some cases  for example  for dialup networking and mobile and other computers that may be temporarily absent or powered off however  it does not work very well for business customers many pcs in businesses are expected to be on continuously some are employee machines  backed up at night  and some are servers that may have to serve a remote request at a moment ? s notice these businesses have an access line that always provides connectivity to the rest of the internet increasingly  this situation also applies to home users subscribing to adsl or internet over cable  since there is no connection charge  just a monthly flat rate charge   many of these users have two or more computers at home  often one for each family member  and they all want to be online all the time the solution is to connect all the computers into a home network via a lan and put a  wireless  router on it the router then connects to the isp from the isp ? s point of view  the family is now the same as a small business with a handful of computers welcome to jones  inc with the techniques we have seen so far  each computer must have its own ip address all day long for an isp with many thousands of customers  particularly business customers and families that are just like small businesses  the demand for ip addresses can quickly exceed the block that is available the problem of running out of ip addresses is not a theoretical one that might occur at some point in the distant future it is happening right here and right now the long-term solution is for the whole internet to migrate to ipv6  which has 128-bit addresses this transition is slowly occurring  but it will be years before the process is complete to get by in the meantime  a quick fix was needed the quick fix that is widely used today came in the form of nat  network address translation   which is described in rfc 3022 and which we will summarize below for additional information  see dutcher  2001   the basic idea behind nat is for the isp to assign each home or business a single ip address  or at most  a small number of them  for internet traffic within the customer network  every computer gets a unique ip address  which is used for routing intramural traffic however  just before a packet exits the customer network and goes to the isp  an address translation from the unique internal ip address to the shared public ip address takes place this translation makes use of three ranges of ip addresses that have been declared as private networks may use them internally as they wish the only rule is that no packets containing these addresses may appear on the internet itself the three reserved ranges are  10.0.0.0 ? 10.255.255.255/8  16,777,216 hosts  172.16.0.0 ? 172.31.255.255/12  1,048,576 hosts  192.168.0.0 ? 192.168.255.255/16  65,536 hosts  sec 5.6 the network layer in the internet 453 the first range provides for 16,777,216 addresses  except for all 0s and all 1s  as usual  and is the usual choice  even if the network is not large the operation of nat is shown in fig 5-55 within the customer premises  every machine has a unique address of the form 10.x.y.z however  before a packet leaves the customer premises  it passes through a nat box that converts the internal ip source address  10.0.0.1 in the figure  to the customer ? s true ip address  198.60.42.12 in this example the nat box is often combined in a single device with a firewall  which provides security by carefully controlling what goes into the customer network and what comes out of it we will study firewalls in chap 8 it is also possible to integrate the nat box into a router or adsl modem packet after translation boundary of customer premises nat box/firewall isp router ip = 198.60.42.12 port = 3344 ip = 10.0.0.1 port = 5544  to internet  packet before translation customer router and lan figure 5-55 placement and operation of a nat box so far  we have glossed over one tiny but crucial detail  when the reply comes back  e.g  from a web server   it is naturally addressed to 198.60.42.12  so how does the nat box know which internal address to replace it with ? herein lies the problem with nat if there were a spare field in the ip header  that field could be used to keep track of who the real sender was  but only 1 bit is still unused in principle  a new option could be created to hold the true source address  but doing so would require changing the ip code on all the machines on the entire internet to handle the new option this is not a promising alternative for a quick fix what actually happens is as follows the nat designers observed that most ip packets carry either tcp or udp payloads when we study tcp and udp in chap 6  we will see that both of these have headers containing a source port and a destination port below we will just discuss tcp ports  but exactly the same story holds for udp ports the ports are 16-bit integers that indicate where the tcp connection begins and ends these ports provide the field needed to make nat work when a process wants to establish a tcp connection with a remote process  it attaches itself to an unused tcp port on its own machine this is called the source port and tells the tcp code where to send incoming packets belonging to this connection the process also supplies a destination port to tell who to give 454 the network layer chap 5 the packets to on the remote side ports 0 ? 1023 are reserved for well-known services for example  port 80 is the port used by web servers  so remote clients can locate them each outgoing tcp message contains both a source port and a destination port together  these ports serve to identify the processes using the connection on both ends an analogy may make the use of ports clearer imagine a company with a single main telephone number when people call the main number  they reach an operator who asks which extension they want and then puts them through to that extension the main number is analogous to the customer ? s ip address and the extensions on both ends are analogous to the ports ports are effectively an extra 16 bits of addressing that identify which process gets which incoming packet using the source port field  we can solve our mapping problem whenever an outgoing packet enters the nat box  the 10.x.y.z source address is replaced by the customer ? s true ip address in addition  the tcp source port field is replaced by an index into the nat box ? s 65,536-entry translation table this table entry contains the original ip address and the original source port finally  both the ip and tcp header checksums are recomputed and inserted into the packet it is necessary to replace the source port because connections from machines 10.0.0.1 and 10.0.0.2 may both happen to use port 5000  for example  so the source port alone is not enough to identify the sending process when a packet arrives at the nat box from the isp  the source port in the tcp header is extracted and used as an index into the nat box ? s mapping table from the entry located  the internal ip address and original tcp source port are extracted and inserted into the packet then  both the ip and tcp checksums are recomputed and inserted into the packet the packet is then passed to the customer router for normal delivery using the 10.x.y.z address although this scheme sort of solves the problem  networking purists in the ip community have a tendency to regard it as an abomination-on-the-face-of-theearth briefly summarized  here are some of the objections first  nat violates the architectural model of ip  which states that every ip address uniquely identifies a single machine worldwide the whole software structure of the internet is built on this fact with nat  thousands of machines may  and do  use address 10.0.0.1 second  nat breaks the end-to-end connectivity model of the internet  which says that any host can send a packet to any other host at any time since the mapping in the nat box is set up by outgoing packets  incoming packets can not be accepted until after outgoing ones in practice  this means that a home user with nat can make tcp/ip connections to a remote web server  but a remote user can not make connections to a game server on the home network special configuration or nat traversal techniques are needed to support this kind of situation third  nat changes the internet from a connectionless network to a peculiar kind of connection-oriented network the problem is that the nat box must maintain information  i.e  the mapping  for each connection passing through it sec 5.6 the network layer in the internet 455 having the network maintain connection state is a property of connection-oriented networks  not connectionless ones if the nat box crashes and its mapping table is lost  all its tcp connections are destroyed in the absence of nat  a router can crash and restart with no long-term effect on tcp connections the sending process just times out within a few seconds and retransmits all unacknowledged packets with nat  the internet becomes as vulnerable as a circuit-switched network fourth  nat violates the most fundamental rule of protocol layering  layer k may not make any assumptions about what layer k ? ? 1 has put into the payload field this basic principle is there to keep the layers independent if tcp is later upgraded to tcp-2  with a different header layout  e.g  32-bit ports   nat will fail the whole idea of layered protocols is to ensure that changes in one layer do not require changes in other layers nat destroys this independence fifth  processes on the internet are not required to use tcp or udp if a user on machine a decides to use some new transport protocol to talk to a user on machine b  for example  for a multimedia application   introduction of a nat box will cause the application to fail because the nat box will not be able to locate the tcp source port correctly a sixth and related problem is that some applications use multiple tcp/ip connections or udp ports in prescribed ways for example  ftp  the standard file transfer protocol  inserts ip addresses in the body of packet for the receiver to extract and use since nat knows nothing about these arrangements  it can not rewrite the ip addresses or otherwise account for them this lack of understanding means that ftp and other applications such as the h.323 internet telephony protocol  which we will study in chap 7  will fail in the presence of nat unless special precautions are taken it is often possible to patch nat for these cases  but having to patch the code in the nat box every time a new application comes along is not a good idea finally  since the tcp source port field is 16 bits  at most 65,536 machines can be mapped onto an ip address actually  the number is slightly less because the first 4096 ports are reserved for special uses however  if multiple ip addresses are available  each one can handle up to 61,440 machines a view of these and other problems with nat is given in rfc 2993 despite the issues  nat is widely used in practice  especially for home and small business networks  as the only expedient technique to deal with the ip address shortage it has become wrapped up with firewalls and privacy because it blocks unsolicited incoming packets by default for this reason  it is unlikely to go away even when ipv6 is widely deployed 5.6.3 ip version 6 ip has been in heavy use for decades it has worked extremely well  as demonstrated by the exponential growth of the internet unfortunately  ip has become a victim of its own popularity  it is close to running out of addresses even 456 the network layer chap 5 with cidr and nat using addresses more sparingly  the last ipv4 addresses are expected to be assigned by icann before the end of 2012 this looming disaster was recognized almost two decades ago  and it sparked a great deal of discussion and controversy within the internet community about what to do about it in this section  we will describe both the problem and several proposed solutions the only long-term solution is to move to larger addresses ipv6  ip version 6  is a replacement design that does just that it uses 128-bit addresses ; a shortage of these addresses is not likely any time in the foreseeable future however  ipv6 has proved very difficult to deploy it is a different network layer protocol that does not really interwork with ipv4  despite many similarities also  companies and users are not really sure why they should want ipv6 in any case the result is that ipv6 is deployed and used on only a tiny fraction of the internet  estimates are 1 %  despite having been an internet standard since 1998 the next several years will be an interesting time  as the few remaining ipv4 addresses are allocated will people start to auction off their ipv4 addresses on ebay ? will a black market in them spring up ? who knows in addition to the address problems  other issues loom in the background in its early years  the internet was largely used by universities  high-tech industries  and the u.s government  especially the dept of defense   with the explosion of interest in the internet starting in the mid-1990s  it began to be used by a different group of people  often with different requirements for one thing  numerous people with smart phones use it to keep in contact with their home bases for another  with the impending convergence of the computer  communication  and entertainment industries  it may not be that long before every telephone and television set in the world is an internet node  resulting in a billion machines being used for audio and video on demand under these circumstances  it became apparent that ip had to evolve and become more flexible seeing these problems on the horizon  in 1990 ietf started work on a new version of ip  one that would never run out of addresses  would solve a variety of other problems  and be more flexible and efficient as well its major goals were  1 support billions of hosts  even with inefficient address allocation 2 reduce the size of the routing tables 3 simplify the protocol  to allow routers to process packets faster 4 provide better security  authentication and privacy   5 pay more attention to the type of service  particularly for real-time data 6 aid multicasting by allowing scopes to be specified 7 make it possible for a host to roam without changing its address 8 allow the protocol to evolve in the future 9 permit the old and new protocols to coexist for years sec 5.6 the network layer in the internet 457 the design of ipv6 presented a major opportunity to improve all of the features in ipv4 that fall short of what is now wanted to develop a protocol that met all these requirements  ietf issued a call for proposals and discussion in rfc 1550 twenty-one responses were initially received by december 1992  seven serious proposals were on the table they ranged from making minor patches to ip  to throwing it out altogether and replacing it with a completely different protocol one proposal was to run tcp over clnp  the network layer protocol designed for osi with its 160-bit addresses  clnp would have provided enough address space forever as it could give every molecule of water in the oceans enough addresses  roughly 25  to set up a small network this choice would also have unified two major network layer protocols however  many people felt that this would have been an admission that something in the osi world was actually done right  a statement considered politically incorrect in internet circles clnp was patterned closely on ip  so the two are not really that different in fact  the protocol ultimately chosen differs from ip far more than clnp does another strike against clnp was its poor support for service types  something required to transmit multimedia efficiently three of the better proposals were published in ieee network  deering  1993 ; francis  1993 ; and katz and ford  1993   after much discussion  revision  and jockeying for position  a modified combined version of the deering and francis proposals  by now called sipp  simple internet protocol plus  was selected and given the designation ipv6 ipv6 meets ietf ? s goals fairly well it maintains the good features of ip  discards or deemphasizes the bad ones  and adds new ones where needed in general  ipv6 is not compatible with ipv4  but it is compatible with the other auxiliary internet protocols  including tcp  udp  icmp  igmp  ospf  bgp  and dns  with small modifications being required to deal with longer addresses the main features of ipv6 are discussed below more information about it can be found in rfcs 2460 through 2466 first and foremost  ipv6 has longer addresses than ipv4 they are 128 bits long  which solves the problem that ipv6 set out to solve  providing an effectively unlimited supply of internet addresses we will have more to say about addresses shortly the second major improvement of ipv6 is the simplification of the header it contains only seven fields  versus 13 in ipv4   this change allows routers to process packets faster and thus improves throughput and delay we will discuss the header shortly  too the third major improvement is better support for options this change was essential with the new header because fields that previously were required are now optional  because they are not used so often   in addition  the way options are represented is different  making it simple for routers to skip over options not intended for them this feature speeds up packet processing time 458 the network layer chap 5 a fourth area in which ipv6 represents a big advance is in security ietf had its fill of newspaper stories about precocious 12-year-olds using their personal computers to break into banks and military bases all over the internet there was a strong feeling that something had to be done to improve security authentication and privacy are key features of the new ip these were later retrofitted to ipv4  however  so in the area of security the differences are not so great any more finally  more attention has been paid to quality of service various halfhearted efforts to improve qos have been made in the past  but now  with the growth of multimedia on the internet  the sense of urgency is greater the main ipv6 header the ipv6 header is shown in fig 5-56 the version field is always 6 for ipv6  and 4 for ipv4   during the transition period from ipv4  which has already taken more than a decade  routers will be able to examine this field to tell what kind of packet they have as an aside  making this test wastes a few instructions in the critical path  given that the data link header usually indicates the network protocol for demultiplexing  so some routers may skip the check for example  the ethernet type field has different values to indicate an ipv4 or an ipv6 payload the discussions between the ? ? do it right ? ? and ? ? make it fast ? ? camps will no doubt be lengthy and vigorous 32 bits version diff services flow label payload length next header hop limit source address  16 bytes  destination address  16 bytes  figure 5-56 the ipv6 fixed header  required   the differentiated services field  originally called traffic class  is used to distinguish the class of service for packets with different real-time delivery sec 5.6 the network layer in the internet 459 requirements it is used with the differentiated service architecture for quality of service in the same manner as the field of the same name in the ipv4 packet also  the low-order 2 bits are used to signal explicit congestion indications  again in the same way as with ipv4 the flow label field provides a way for a source and destination to mark groups of packets that have the same requirements and should be treated in the same way by the network  forming a pseudoconnection for example  a stream of packets from one process on a certain source host to a process on a specific destination host might have stringent delay requirements and thus need reserved bandwidth the flow can be set up in advance and given an identifier when a packet with a nonzero flow label shows up  all the routers can look it up in internal tables to see what kind of special treatment it requires in effect  flows are an attempt to have it both ways  the flexibility of a datagram network and the guarantees of a virtual-circuit network each flow for quality of service purposes is designated by the source address  destination address  and flow number this design means that up to 220 flows may be active at the same time between a given pair of ip addresses it also means that even if two flows coming from different hosts but with the same flow label pass through the same router  the router will be able to tell them apart using the source and destination addresses it is expected that flow labels will be chosen randomly  rather than assigned sequentially starting at 1  so routers are expected to hash them the payload length field tells how many bytes follow the 40-byte header of fig 5-56 the name was changed from the ipv4 total length field because the meaning was changed slightly  the 40 header bytes are no longer counted as part of the length  as they used to be   this change means the payload can now be 65,535 bytes instead of a mere 65,515 bytes the next header field lets the cat out of the bag the reason the header could be simplified is that there can be additional  optional  extension headers this field tells which of the  currently  six extension headers  if any  follow this one if this header is the last ip header  the next header field tells which transport protocol handler  e.g  tcp  udp  to pass the packet to the hop limit field is used to keep packets from living forever it is  in practice  the same as the time to live field in ipv4  namely  a field that is decremented on each hop in theory  in ipv4 it was a time in seconds  but no router used it that way  so the name was changed to reflect the way it is actually used next come the source address and destination address fields deering ? s original proposal  sip  used 8-byte addresses  but during the review process many people felt that with 8-byte addresses ipv6 would run out of addresses within a few decades  whereas with 16-byte addresses it would never run out other people argued that 16 bytes was overkill  whereas still others favored using 20-byte addresses to be compatible with the osi datagram protocol still another faction wanted variable-sized addresses after much debate and more than a few words 460 the network layer chap 5 unprintable in an academic textbook  it was decided that fixed-length 16-byte addresses were the best compromise a new notation has been devised for writing 16-byte addresses they are written as eight groups of four hexadecimal digits with colons between the groups  like this  8000  0000  0000  0000  0123  4567  89ab  cdef since many addresses will have many zeros inside them  three optimizations have been authorized first  leading zeros within a group can be omitted  so 0123 can be written as 123 second  one or more groups of 16 zero bits can be replaced by a pair of colons thus  the above address now becomes 8000   123  4567  89ab  cdef finally  ipv4 addresses can be written as a pair of colons and an old dotted decimal number  for example    192.31.20.46 perhaps it is unnecessary to be so explicit about it  but there are a lot of 16 byte addresses specifically  there are 2128 of them  which is approximately 3 ? ? 1038 if the entire earth  land and water  were covered with computers  ipv6 would allow 7 ? ? 1023 ip addresses per square meter students of chemistry will notice that this number is larger than avogadro ? s number while it was not the intention to give every molecule on the surface of the earth its own ip address  we are not that far off in practice  the address space will not be used efficiently  just as the telephone number address space is not  the area code for manhattan  212  is nearly full  but that for wyoming  307  is nearly empty   in rfc 3194  durand and huitema calculated that  using the allocation of telephone numbers as a guide  even in the most pessimistic scenario there will still be well over 1000 ip addresses per square meter of the entire earth ? s surface  land and water   in any likely scenario  there will be trillions of them per square meter in short  it seems unlikely that we will run out in the foreseeable future it is instructive to compare the ipv4 header  fig 5-46  with the ipv6 header  fig 5-56  to see what has been left out in ipv6 the ihl field is gone because the ipv6 header has a fixed length the protocol field was taken out because the next header field tells what follows the last ip header  e.g  a udp or tcp segment   all the fields relating to fragmentation were removed because ipv6 takes a different approach to fragmentation to start with  all ipv6-conformant hosts are expected to dynamically determine the packet size to use they do this using the path mtu discovery procedure we described in sec 5.5.5 in brief  when a host sends an ipv6 packet that is too large  instead of fragmenting it  the router that is unable to forward it drops the packet and sends an error message back to the sec 5.6 the network layer in the internet 461 sending host this message tells the host to break up all future packets to that destination having the host send packets that are the right size in the first place is ultimately much more efficient than having the routers fragment them on the fly also  the minimum-size packet that routers must be able to forward has been raised from 576 to 1280 bytes to allow 1024 bytes of data and many headers finally  the checksum field is gone because calculating it greatly reduces performance with the reliable networks now used  combined with the fact that the data link layer and transport layers normally have their own checksums  the value of yet another checksum was deemed not worth the performance price it extracted removing all these features has resulted in a lean and mean network layer protocol thus  the goal of ipv6 ? a fast  yet flexible  protocol with plenty of address space ? is met by this design extension headers some of the missing ipv4 fields are occasionally still needed  so ipv6 introduces the concept of  optional  extension headers these headers can be supplied to provide extra information  but encoded in an efficient way six kinds of extension headers are defined at present  as listed in fig 5-57 each one is optional  but if more than one is present they must appear directly after the fixed header  and preferably in the order listed extension header description hop-by-hop options miscellaneous information for routers destination options additional information for the destination routing loose list of routers to visit fragmentation management of datagram fragments authentication verification of the sender ? s identity encrypted security payload information about the encrypted contents figure 5-57 ipv6 extension headers some of the headers have a fixed format ; others contain a variable number of variable-length options for these  each item is encoded as a  type  length  value  tuple the type is a 1-byte field telling which option this is the type values have been chosen so that the first 2 bits tell routers that do not know how to process the option what to do the choices are  skip the option ; discard the packet ; discard the packet and send back an icmp packet ; and discard the packet but do not send icmp packets for multicast addresses  to prevent one bad multicast packet from generating millions of icmp reports   the length is also a 1-byte field it tells how long the value is  0 to 255 bytes   the value is any information required  up to 255 bytes 462 the network layer chap 5 the hop-by-hop header is used for information that all routers along the path must examine so far  one option has been defined  support of datagrams exceeding 64 kb the format of this header is shown in fig 5-58 when it is used  the payload length field in the fixed header is set to 0 next header jumbo payload length 0 194 4 figure 5-58 the hop-by-hop extension header for large datagrams  jumbograms   as with all extension headers  this one starts with a byte telling what kind of header comes next this byte is followed by one telling how long the hop-by-hop header is in bytes  excluding the first 8 bytes  which are mandatory all extensions begin this way the next 2 bytes indicate that this option defines the datagram size  code 194  and that the size is a 4-byte number the last 4 bytes give the size of the datagram sizes less than 65,536 bytes are not permitted and will result in the first router discarding the packet and sending back an icmp error message datagrams using this header extension are called jumbograms the use of jumbograms is important for supercomputer applications that must transfer gigabytes of data efficiently across the internet the destination options header is intended for fields that need only be interpreted at the destination host in the initial version of ipv6  the only options defined are null options for padding this header out to a multiple of 8 bytes  so initially it will not be used it was included to make sure that new routing and host software can handle it  in case someone thinks of a destination option some day the routing header lists one or more routers that must be visited on the way to the destination it is very similar to the ipv4 loose source routing in that all addresses listed must be visited in order  but other routers not listed may be visited in between the format of the routing header is shown in fig 5-59 next header header extension length routing type segments left type-specific data figure 5-59 the extension header for routing sec 5.6 the network layer in the internet 463 the first 4 bytes of the routing extension header contain four 1-byte integers the next header and header extension length fields were described above the routing type field gives the format of the rest of the header type 0 says that a reserved 32-bit word follows the first word  followed by some number of ipv6 addresses other types may be invented in the future  as needed finally  the segments left field keeps track of how many of the addresses in the list have not yet been visited it is decremented every time one is visited when it hits 0  the packet is on its own with no more guidance about what route to follow usually  at this point it is so close to the destination that the best route is obvious the fragment header deals with fragmentation similarly to the way ipv4 does the header holds the datagram identifier  fragment number  and a bit telling whether more fragments will follow in ipv6  unlike in ipv4  only the source host can fragment a packet routers along the way may not do this this change is a major philosophical break with the original ip  but in keeping with current practice for ipv4 plus  it simplifies the routers ? work and makes routing go faster as mentioned above  if a router is confronted with a packet that is too big  it discards the packet and sends an icmp error packet back to the source this information allows the source host to fragment the packet into smaller pieces using this header and try again the authentication header provides a mechanism by which the receiver of a packet can be sure of who sent it the encrypted security payload makes it possible to encrypt the contents of a packet so that only the intended recipient can read it these headers use the cryptographic techniques that we will describe in chap 8 to accomplish their missions controversies given the open design process and the strongly held opinions of many of the people involved  it should come as no surprise that many choices made for ipv6 were highly controversial  to say the least we will summarize a few of these briefly below for all the gory details  see the rfcs we have already mentioned the argument about the address length the result was a compromise  16-byte fixed-length addresses another fight developed over the length of the hop limit field one camp felt strongly that limiting the maximum number of hops to 255  implicit in using an 8-bit field  was a gross mistake after all  paths of 32 hops are common now  and 10 years from now much longer paths may be common these people argued that using a huge address size was farsighted but using a tiny hop count was shortsighted in their view  the greatest sin a computer scientist can commit is to provide too few bits somewhere the response was that arguments could be made to increase every field  leading to a bloated header also  the function of the hop limit field is to keep packets from wandering around for too long a time and 65,535 hops is far  far too long 464 the network layer chap 5 finally  as the internet grows  more and more long-distance links will be built  making it possible to get from any country to any other country in half a dozen hops at most if it takes more than 125 hops to get from the source and the destination to their respective international gateways  something is wrong with the national backbones the 8-bitters won this one another hot potato was the maximum packet size the supercomputer community wanted packets in excess of 64 kb when a supercomputer gets started transferring  it really means business and does not want to be interrupted every 64 kb the argument against large packets is that if a 1-mb packet hits a 1.5-mbps t1 line  that packet will tie the line up for over 5 seconds  producing a very noticeable delay for interactive users sharing the line a compromise was reached here  normal packets are limited to 64 kb  but the hop-by-hop extension header can be used to permit jumbograms a third hot topic was removing the ipv4 checksum some people likened this move to removing the brakes from a car doing so makes the car lighter so it can go faster  but if an unexpected event happens  you have a problem the argument against checksums was that any application that really cares about data integrity has to have a transport layer checksum anyway  so having another one in ip  in addition to the data link layer checksum  is overkill furthermore  experience showed that computing the ip checksum was a major expense in ipv4 the antichecksum camp won this one  and ipv6 does not have a checksum mobile hosts were also a point of contention if a portable computer flies halfway around the world  can it continue operating there with the same ipv6 address  or does it have to use a scheme with home agents ? some people wanted to build explicit support for mobile hosts into ipv6 that effort failed when no consensus could be found for any specific proposal probably the biggest battle was about security everyone agreed it was essential the war was about where to put it and how first where the argument for putting it in the network layer is that it then becomes a standard service that all applications can use without any advance planning the argument against it is that really secure applications generally want nothing less than end-to-end encryption  where the source application does the encryption and the destination application undoes it with anything less  the user is at the mercy of potentially buggy network layer implementations over which he has no control the response to this argument is that these applications can just refrain from using the ip security features and do the job themselves the rejoinder to that is that the people who do not trust the network to do it right do not want to pay the price of slow  bulky ip implementations that have this capability  even if it is disabled another aspect of where to put security relates to the fact that many  but not all  countries have very stringent export laws concerning cryptography some  notably france and iraq  also restrict its use domestically  so that people can not have secrets from the government as a result  any ip implementation that used a sec 5.6 the network layer in the internet 465 cryptographic system strong enough to be of much value could not be exported from the united states  and many other countries  to customers worldwide having to maintain two sets of software  one for domestic use and one for export  is something most computer vendors vigorously oppose one point on which there was no controversy is that no one expects the ipv4 internet to be turned off on a sunday evening and come back up as an ipv6 internet monday morning instead  isolated ? ? islands ? ? of ipv6 will be converted  initially communicating via tunnels  as we showed in sec 5.5.3 as the ipv6 islands grow  they will merge into bigger islands eventually  all the islands will merge  and the internet will be fully converted at least  that was the plan deployment has proved the achilles heel of ipv6 it remains little used  even though all major operating systems fully support it most deployments are new situations in which a network operator ? for example  a mobile phone operator ? needs a large number of ip addresses many strategies have been defined to help ease the transition among them are ways to automatically configure the tunnels that carry ipv6 over the ipv4 internet  and ways for hosts to automatically find the tunnel endpoints dual-stack hosts have an ipv4 and an ipv6 implementation so that they can select which protocol to use depending on the destination of the packet these strategies will streamline the substantial deployment that seems inevitable when ipv4 addresses are exhausted for more information about ipv6  see davies  2008   5.6.4 internet control protocols in addition to ip  which is used for data transfer  the internet has several companion control protocols that are used in the network layer they include icmp  arp  and dhcp in this section  we will look at each of these in turn  describing the versions that correspond to ipv4 because they are the protocols that are in common use icmp and dhcp have similar versions for ipv6 ; the equivalent of arp is called ndp  neighbor discovery protocol  for ipv6 imcp ? the internet control message protocol the operation of the internet is monitored closely by the routers when something unexpected occurs during packet processing at a router  the event is reported to the sender by the icmp  internet control message protocol   icmp is also used to test the internet about a dozen types of icmp messages are defined each icmp message type is carried encapsulated in an ip packet the most important ones are listed in fig 5-60 the destination unreachable message is used when the router can not locate the destination or when a packet with the df bit can not be delivered because a ? ? small-packet ? ? network stands in the way 466 the network layer chap 5 message type description destination unreachable packet could not be delivered time exceeded time to live field hit 0 parameter problem invalid header field source quench choke packet redirect teach a router about geography echo and echo reply check if a machine is alive timestamp request/reply same as echo  but with timestamp router advertisement/solicitation find a nearby router figure 5-60 the principal icmp message types the time exceeded message is sent when a packet is dropped because its ttl  time to live  counter has reached zero this event is a symptom that packets are looping  or that the counter values are being set too low one clever use of this error message is the traceroute utility that was developed by van jacobson in 1987 traceroute finds the routers along the path from the host to a destination ip address it finds this information without any kind of privileged network support the method is simply to send a sequence of packets to the destination  first with a ttl of 1  then a ttl of 2  3  and so on the counters on these packets will reach zero at successive routers along the path these routers will each obediently send a time exceeded message back to the host from those messages  the host can determine the ip addresses of the routers along the path  as well as keep statistics and timings on parts of the path it is not what the time exceeded message was intended for  but it is perhaps the most useful network debugging tool of all time the parameter problem message indicates that an illegal value has been detected in a header field this problem indicates a bug in the sending host ? s ip software or possibly in the software of a router transited the source quench message was long ago used to throttle hosts that were sending too many packets when a host received this message  it was expected to slow down it is rarely used anymore because when congestion occurs  these packets tend to add more fuel to the fire and it is unclear how to respond to them congestion control in the internet is now done largely by taking action in the transport layer  using packet losses as a congestion signal ; we will study it in detail in chap 6 the redirect message is used when a router notices that a packet seems to be routed incorrectly it is used by the router to tell the sending host to update to a better route the echo and echo reply messages are sent by hosts to see if a given destination is reachable and currently alive upon receiving the echo message  sec 5.6 the network layer in the internet 467 the destination is expected to send back an echo reply message these messages are used in the ping utility that checks if a host is up and on the internet the timestamp request and timestamp reply messages are similar  except that the arrival time of the message and the departure time of the reply are recorded in the reply this facility can be used to measure network performance the router advertisement and router solicitation messages are used to let hosts find nearby routers a host needs to learn the ip address of at least one router to be able to send packets off the local network in addition to these messages  others have been defined the online list is now kept at www.iana.org/assignments/icmp-parameters arp ? the address resolution protocol although every machine on the internet has one or more ip addresses  these addresses are not sufficient for sending packets data link layer nics  network interface cards  such as ethernet cards do not understand internet addresses in the case of ethernet  every nic ever manufactured comes equipped with a unique 48-bit ethernet address manufacturers of ethernet nics request a block of ethernet addresses from ieee to ensure that no two nics have the same address  to avoid conflicts should the two nics ever appear on the same lan   the nics send and receive frames based on 48-bit ethernet addresses they know nothing at all about 32-bit ip addresses the question now arises  how do ip addresses get mapped onto data link layer addresses  such as ethernet ? to explain how this works  let us use the example of fig 5-61  in which a small university with two /24 networks is illustrated one network  cs  is a switched ethernet in the computer science dept it has the prefix 192.32.65.0/24 the other lan  ee   also switched ethernet  is in electrical engineering and has the prefix 192.32.63.0/24 the two lans are connected by an ip router each machine on an ethernet and each interface on the router has a unique ethernet address  labeled e1 through e6  and a unique ip address on the cs or ee network let us start out by seeing how a user on host 1 sends a packet to a user on host 2 on the cs network let us assume the sender knows the name of the intended receiver  possibly something like eagle.cs.uni.edu the first step is to find the ip address for host 2 this lookup is performed by dns  which we will study in chap 7 for the moment  we will just assume that dns returns the ip address for host 2  192.32.65.5   the upper layer software on host 1 now builds a packet with 192.32.65.5 in the destination address field and gives it to the ip software to transmit the ip software can look at the address and see that the destination is on the cs network   i.e  its own network   however  it still needs some way to find the destination ? s ethernet address to send the frame one solution is to have a configuration file somewhere in the system that maps ip addresses onto ethernet addresses while 468 the network layer chap 5 ethernet switch e3 cs network 192.32.65.0/24 ip1 = 192.32.65.7 e2 e1 e5 e4 e6 192.32.65.1 ip2 = 192.32.65.5 192.32.63.1 ip4 = 192.32.63.8 ip3 = 192.32.63.3 ee network 192.32.63.0/24 router host 1 host 2 host 3 host 4 frame source ip source eth destination ip destination eth host 1 to 2  on cs net ip1 e1 ip2 e2 host 1 to 4  on cs net ip1 e1 ip4 e3 host 1 to 4  on ee net ip1 e4 ip4 e6 figure 5-61 two switched ethernet lans joined by a router this solution is certainly possible  for organizations with thousands of machines keeping all these files up to date is an error-prone  time-consuming job a better solution is for host 1 to output a broadcast packet onto the ethernet asking who owns ip address 192.32.65.5 the broadcast will arrive at every machine on the cs ethernet  and each one will check its ip address host 2 alone will respond with its ethernet address  e2   in this way host 1 learns that ip address 192.32.65.5 is on the host with ethernet address e2 the protocol used for asking this question and getting the reply is called arp  address resolution protocol   almost every machine on the internet runs it arp is defined in rfc 826 the advantage of using arp over configuration files is the simplicity the system manager does not have to do much except assign each machine an ip address and decide about subnet masks arp does the rest at this point  the ip software on host 1 builds an ethernet frame addressed to e2  puts the ip packet  addressed to 192.32.65.5  in the payload field  and dumps it onto the ethernet the ip and ethernet addresses of this packet are given in fig 5-61 the ethernet nic of host 2 detects this frame  recognizes it as a frame for itself  scoops it up  and causes an interrupt the ethernet driver extracts the ip packet from the payload and passes it to the ip software  which sees that it is correctly addressed and processes it various optimizations are possible to make arp work more efficiently to start with  once a machine has run arp  it caches the result in case it needs to contact the same machine shortly next time it will find the mapping in its own cache  thus eliminating the need for a second broadcast in many cases  host 2 sec 5.6 the network layer in the internet 469 will need to send back a reply  forcing it  too  to run arp to determine the sender ? s ethernet address this arp broadcast can be avoided by having host 1 include its ip-to-ethernet mapping in the arp packet when the arp broadcast arrives at host 2  the pair  192.32.65.7  e1  is entered into host 2 ? s arp cache in fact  all machines on the ethernet can enter this mapping into their arp caches to allow mappings to change  for example  when a host is configured to use a new ip address  but keeps its old ethernet address   entries in the arp cache should time out after a few minutes a clever way to help keep the cached information current and to optimize performance is to have every machine broadcast its mapping when it is configured this broadcast is generally done in the form of an arp looking for its own ip address there should not be a response  but a side effect of the broadcast is to make or update an entry in everyone ? s arp cache this is known as a gratuitous arp if a response does  unexpectedly  arrive  two machines have been assigned the same ip address the error must be resolved by the network manager before both machines can use the network now let us look at fig 5-61 again  only this time assume that host 1 wants to send a packet to host 4  192.32.63.8  on the ee network host 1 will see that the destination ip address is not on the cs network it knows to send all such off-network traffic to the router  which is also known as the default gateway by convention  the default gateway is the lowest address on the network  198.31.65.1   to send a frame to the router  host 1 must still know the ethernet address of the router interface on the cs network it discovers this by sending an arp broadcast for 198.31.65.1  from which it learns e3 it then sends the frame the same lookup mechanisms are used to send a packet from one router to the next over a sequence of routers in an internet path when the ethernet nic of the router gets this frame  it gives the packet to the ip software it knows from the network masks that the packet should be sent onto the ee network where it will reach host 4 if the router does not know the ethernet address for host 4  then it will use arp again the table in fig 5-61 lists the source and destination ethernet and ip addresses that are present in the frames as observed on the cs and ee networks observe that the ethernet addresses change with the frame on each network while the ip addresses remain constant  because they indicate the endpoints across all of the interconnected networks   it is also possible to send a packet from host 1 to host 4 without host 1 knowing that host 4 is on a different network the solution is to have the router answer arps on the cs network for host 4 and give its ethernet address  e3  as the response it is not possible to have host 4 reply directly because it will not see the arp request  as routers do not forward ethernet-level broadcasts   the router will then receive frames sent to 192.32.63.8 and forward them onto the ee network this solution is called proxy arp it is used in special cases in which a host wants to appear on a network even though it actually resides on another network a common situation  for example  is a mobile computer that wants some other node to pick up packets for it when it is not on its home network 470 the network layer chap 5 dhcp ? the dynamic host configuration protocol arp  as well as other internet protocols  makes the assumption that hosts are configured with some basic information  such as their own ip addresses how do hosts get this information ? it is possible to manually configure each computer  but that is tedious and error-prone there is a better way  and it is called dhcp  dynamic host configuration protocol   with dhcp  every network must have a dhcp server that is responsible for configuration when a computer is started  it has a built-in ethernet or other link layer address embedded in the nic  but no ip address much like arp  the computer broadcasts a request for an ip address on its network it does this by using a dhcp discover packet this packet must reach the dhcp server if that server is not directly attached to the network  the router will be configured to receive dhcp broadcasts and relay them to the dhcp server  wherever it is located when the server receives the request  it allocates a free ip address and sends it to the host in a dhcp offer packet  which again may be relayed via the router   to be able to do this work even when hosts do not have ip addresses  the server identifies a host using its ethernet address  which is carried in the dhcp discover packet  an issue that arises with automatic assignment of ip addresses from a pool is for how long an ip address should be allocated if a host leaves the network and does not return its ip address to the dhcp server  that address will be permanently lost after a period of time  many addresses may be lost to prevent that from happening  ip address assignment may be for a fixed period of time  a technique called leasing just before the lease expires  the host must ask for a dhcp renewal if it fails to make a request or the request is denied  the host may no longer use the ip address it was given earlier dhcp is described in rfcs 2131 and 2132 it is widely used in the internet to configure all sorts of parameters in addition to providing hosts with ip addresses as well as in business and home networks  dhcp is used by isps to set the parameters of devices over the internet access link  so that customers do not need to phone their isps to get this information common examples of the information that is configured include the network mask  the ip address of the default gateway  and the ip addresses of dns and time servers dhcp has largely replaced earlier protocols  called rarp and bootp  with more limited functionality 5.6.5 label switching and mpls so far  on our tour of the network layer of the internet  we have focused exclusively on packets as datagrams that are forwarded by ip routers there is also another kind of technology that is starting to be widely used  especially by isps  in order to move internet traffic across their networks this technology is sec 5.6 the network layer in the internet 471 called mpls  multiprotocol label switching  and it is perilously close to circuit switching despite the fact that many people in the internet community have an intense dislike for connection-oriented networking  the idea seems to keep coming back as yogi berra once put it  it is like deja vu all over again however  there are essential differences between the way the internet handles route construction and the way connection-oriented networks do it  so the technique is certainly not traditional circuit switching mpls adds a label in front of each packet  and forwarding is based on the label rather than on the destination address making the label an index into an internal table makes finding the correct output line just a matter of table lookup using this technique  forwarding can be done very quickly this advantage was the original motivation behind mpls  which began as proprietary technology known by various names including tag switching eventually  ietf began to standardize the idea it is described in rfc 3031 and many other rfcs the main benefits over time have come to be routing that is flexible and forwarding that is suited to quality of service as well as fast the first question to ask is where does the label go ? since ip packets were not designed for virtual circuits  there is no field available for virtual-circuit numbers within the ip header for this reason  a new mpls header had to be added in front of the ip header on a router-to-router line using ppp as the framing protocol  the frame format  including the ppp  mpls  ip  and tcp headers  is as shown in fig 5-62 ppp mpls ip label qos s ttl bits 20 headers 3 1 8 tcp user data crc figure 5-62 transmitting a tcp segment using ip  mpls  and ppp the generic mpls header is 4 bytes long and has four fields most important is the label field  which holds the index the qos field indicates the class of service the s field relates to stacking multiple labels  which is discussed below   the ttl field indicates how many more times the packet may be forwarded it is decremented at each router  and if it hits 0  the packet is discarded this feature prevents infinite looping in the case of routing instability mpls falls between the ip network layer protocol and the ppp link layer protocol it is not really a layer 3 protocol because it depends on ip or other network 472 the network layer chap 5 layer addresses to set up label paths it is not really a layer 2 protocol either because it forwards packets across multiple hops  not a single link for this reason  mpls is sometimes described as a layer 2.5 protocol it is an illustration that real protocols do not always fit neatly into our ideal layered protocol model on the brighter side  because the mpls headers are not part of the network layer packet or the data link layer frame  mpls is to a large extent independent of both layers among other things  this property means it is possible to build mpls switches that can forward both ip packets and non-ip packets  depending on what shows up this feature is where the ? ? multiprotocol ? ? in the name mpls came from mpls can also carry ip packets over non-ip networks when an mpls-enhanced packet arrives at a lsr  label switched router   the label is used as an index into a table to determine the outgoing line to use and also the new label to use this label swapping is used in all virtual-circuit networks labels have only local significance and two different routers can feed unrelated packets with the same label into another router for transmission on the same outgoing line to be distinguishable at the other end  labels have to be remapped at every hop we saw this mechanism in action in fig 5-3 mpls uses the same technique as an aside  some people distinguish between forwarding and switching forwarding is the process of finding the best match for a destination address in a table to decide where to send packets an example is the longest matching prefix algorithm used for ip forwarding in contrast  switching uses a label taken from the packet as an index into a forwarding table it is simpler and faster these definitions are far from universal  however since most hosts and routers do not understand mpls  we should also ask when and how the labels are attached to packets this happens when an ip packet reaches the edge of an mpls network the ler  label edge router  inspects the destination ip address and other fields to see which mpls path the packet should follow  and puts the right label on the front of the packet within the mpls network  this label is used to forward the packet at the other edge of the mpls network  the label has served its purpose and is removed  revealing the ip packet again for the next network this process is shown in fig 5-63 one difference from traditional virtual circuits is the level of aggregation it is certainly possible for each flow to have its own set of labels through the mpls network however  it is more common for routers to group multiple flows that end at a particular router or lan and use a single label for them the flows that are grouped together under a single label are said to belong to the same fec  forwarding equivalence class   this class covers not only where the packets are going  but also their service class  in the differentiated services sense  because all the packets are treated the same way for forwarding purposes with traditional virtual-circuit routing  it is not possible to group several distinct paths with different endpoints onto the same virtual-circuit identifier because there would be no way to distinguish them at the final destination with mpls  sec 5.6 the network layer in the internet 473 switching on label only label switch router ip ip label ip label edge router add label remove label  to next network  label label figure 5-63 forwarding an ip packet through an mpls network the packets still contain their final destination address  in addition to the label at the end of the labeled route  the label header can be removed and forwarding can continue the usual way  using the network layer destination address actually  mpls goes even further it can operate at multiple levels at once by adding more than one label to the front of a packet for example  suppose that there are many packets that already have different labels  because we want to treat the packets differently somewhere in the network  that should follow a common path to some destination instead of setting up many label switching paths  one for each of the different labels  we can set up a single path when the already labeled packets reach the start of this path  another label is added to the front this is called a stack of labels the outermost label guides the packets along the path it is removed at the end of the path  and the labels revealed  if any  are used to forward the packet further the s bit in fig 5-62 allows a router removing a label to know if there are any additional labels left it is set to 1 for the bottom label and 0 for all the other labels the final question we will ask is how the label forwarding tables are set up so that packets follow them this is one area of major difference between mpls and conventional virtual-circuit designs in traditional virtual-circuit networks  when a user wants to establish a connection  a setup packet is launched into the network to create the path and make the forwarding table entries mpls does not involve users in the setup phase requiring users to do anything other than send a datagram would break too much existing internet software instead  the forwarding information is set up by protocols that are a combination of routing protocols and connection setup protocols these control protocols are cleanly separated from label forwarding  which allows multiple  different control protocols to be used one of the variants works like this when a router is booted  it checks to see which routes it is the final destination for  e.g  which prefixes belong to its interfaces   it then creates one or more fecs for them  allocates a label for each one  and passes the labels to its neighbors they  in turn  enter the labels in their forwarding tables and send new labels to their neighbors  until all the routers have acquired the path resources can also be reserved as the 474 the network layer chap 5 path is constructed to guarantee an appropriate quality of service other variants can set up different paths  such as traffic engineering paths that take unused capacity into account  and create paths on-demand to support service offerings such as quality of service although the basic ideas behind mpls are straightforward  the details are complicated  with many variations and use cases that are being actively developed for more information  see davie and farrel  2008  and davie and rekhter  2000   5.6.6 ospf ? an interior gateway routing protocol we have now finished our study of how packets are forwarded in the internet it is time to move on to the next topic  routing in the internet as we mentioned earlier  the internet is made up of a large number of independent networks or ases  autonomous systems  that are operated by different organizations  usually a company  university  or isp inside of its own network  an organization can use its own algorithm for internal routing  or intradomain routing  as it is more commonly known nevertheless  there are only a handful of standard protocols that are popular in this section  we will study the problem of intradomain routing and look at the ospf protocol that is widely used in practice an intradomain routing protocol is also called an interior gateway protocol in the next section  we will study the problem of routing between independently operated networks  or interdomain routing for that case  all networks must use the same interdomain routing protocol or exterior gateway protocol the protocol that is used in the internet is bgp  border gateway protocol   early intradomain routing protocols used a distance vector design  based on the distributed bellman-ford algorithm inherited from the arpanet rip  routing information protocol  is the main example that is used to this day it works well in small systems  but less well as networks get larger it also suffers from the count-to-infinity problem and generally slow convergence the arpanet switched over to a link state protocol in may 1979 because of these problems  and in 1988 ietf began work on a link state protocol for intradomain routing that protocol  called ospf  open shortest path first   became a standard in 1990 it drew on a protocol called is-is  intermediate-system to intermediate-system   which became an iso standard because of their shared heritage  the two protocols are much more alike than different for the complete story  see rfc 2328 they are the dominant intradomain routing protocols  and most router vendors now support both of them ospf is more widely used in company networks  and is-is is more widely used in isp networks of the two  we will give a sketch of how ospf works given the long experience with other routing protocols  the group designing ospf had a long list of requirements that had to be met first  the algorithm had to be published in the open literature  hence the ? ? o ? ? in ospf a proprietary sec 5.6 the network layer in the internet 475 solution owned by one company would not do second  the new protocol had to support a variety of distance metrics  including physical distance  delay  and so on third  it had to be a dynamic algorithm  one that adapted to changes in the topology automatically and quickly fourth  and new for ospf  it had to support routing based on type of service the new protocol had to be able to route real-time traffic one way and other traffic a different way at the time  ip had a type of service field  but no existing routing protocol used it this field was included in ospf but still nobody used it  and it was eventually removed perhaps this requirement was ahead of its time  as it preceded ietf ? s work on differentiated services  which has rejuvenated classes of service fifth  and related to the above  ospf had to do load balancing  splitting the load over multiple lines most previous protocols sent all packets over a single best route  even if there were two routes that were equally good the other route was not used at all in many cases  splitting the load over multiple routes gives better performance sixth  support for hierarchical systems was needed by 1988  some networks had grown so large that no router could be expected to know the entire topology ospf had to be designed so that no router would have to seventh  some modicum of security was required to prevent fun-loving students from spoofing routers by sending them false routing information finally  provision was needed for dealing with routers that were connected to the internet via a tunnel previous protocols did not handle this well ospf supports both point-to-point links  e.g  sonet  and broadcast networks  e.g  most lans   actually  it is able to support networks with multiple routers  each of which can communicate directly with the others  called multiaccess networks  even if they do not have broadcast capability earlier protocols did not handle this case well an example of an autonomous system network is given in fig 5-64  a   hosts are omitted because they do not generally play a role in ospf  while routers and networks  which may contain hosts  do most of the routers in fig 5-64  a  are connected to other routers by point-to-point links  and to networks to reach the hosts on those networks however  routers r3  r4  and r5 are connected by a broadcast lan such as switched ethernet ospf operates by abstracting the collection of actual networks  routers  and links into a directed graph in which each arc is assigned a weight  distance  delay  etc   a point-to-point connection between two routers is represented by a pair of arcs  one in each direction their weights may be different a broadcast network is represented by a node for the network itself  plus a node for each router the arcs from that network node to the routers have weight 0 they are important nonetheless  as without them there is no path through the network other networks  which have only hosts  have only an arc reaching them and not one returning this structure gives routes to hosts  but not through them 476 the network layer chap 5 lan 1 lan 2 lan 4 lan 3 r2 r4 r1 r3 r5 r4 r2 r1 r3 r5 lan 1 lan 2 lan 1 lan 4  a   b  0 0 3 0 3 4 5 8 7 5 5 4 4 1 1 figure 5-64  a  an autonomous system  b  a graph representation of  a   figure 5-64  b  shows the graph representation of the network of fig 5-64  a   what ospf fundamentally does is represent the actual network as a graph like this and then use the link state method to have every router compute the shortest path from itself to all other nodes multiple paths may be found that are equally short in this case  ospf remembers the set of shortest paths and during packet forwarding  traffic is split across them this helps to balance load it is called ecmp  equal cost multipath   many of the ases in the internet are themselves large and nontrivial to manage to work at this scale  ospf allows an as to be divided into numbered areas  where an area is a network or a set of contiguous networks areas do not overlap but need not be exhaustive  that is  some routers may belong to no area routers that lie wholly within an area are called internal routers an area is a generalization of an individual network outside an area  its destinations are visible but not its topology this characteristic helps routing to scale every as has a backbone area  called area 0 the routers in this area are called backbone routers all areas are connected to the backbone  possibly by tunnels  so it is possible to go from any area in the as to any other area in the as via the backbone a tunnel is represented in the graph as just another arc with a cost as with other areas  the topology of the backbone is not visible outside the backbone each router that is connected to two or more areas is called an area border router it must also be part of the backbone the job of an area border router is to summarize the destinations in one area and to inject this summary into the other sec 5.6 the network layer in the internet 477 areas to which it is connected this summary includes cost information but not all the details of the topology within an area passing cost information allows hosts in other areas to find the best area border router to use to enter an area not passing topology information reduces traffic and simplifies the shortest-path computations of routers in other areas however  if there is only one border router out of an area  even the summary does not need to be passed routes to destinations out of the area always start with the instruction ? ? go to the border router ? ? this kind of area is called a stub area the last kind of router is the as boundary router it injects routes to external destinations on other ases into the area the external routes then appear as destinations that can be reached via the as boundary router with some cost an external route can be injected at one or more as boundary routers the relationship between ases  areas  and the various kinds of routers is shown in fig 5-65 one router may play multiple roles  for example  a border router is also a backbone router area 2  stub  area 0  backbone  area 1 backbone router as boundary router internal router area border router one autonomous system figure 5-65 the relation between ases  backbones  and areas in ospf during normal operation  each router within an area has the same link state database and runs the same shortest path algorithm its main job is to calculate the shortest path from itself to every other router and network in the entire as an area border router needs the databases for all the areas to which it is connected and must run the shortest path algorithm for each area separately for a source and destination in the same area  the best intra-area route  that lies wholly within the area  is chosen for a source and destination in different areas  the inter-area route must go from the source to the backbone  across the backbone to the destination area  and then to the destination this algorithm forces a star configuration on ospf  with the backbone being the hub and the other areas being spokes because the route with the lowest cost is chosen  routers in different parts of the network may use different area border routers to enter the backbone and destination area packets are routed from source to destination ? ? as is ? ? they are not encapsulated or tunneled  unless going to an area whose 478 the network layer chap 5 only connection to the backbone is a tunnel   also  routes to external destinations may include the external cost from the as boundary router over the external path  if desired  or just the cost internal to the as when a router boots  it sends hello messages on all of its point-to-point lines and multicasts them on lans to the group consisting of all the other routers from the responses  each router learns who its neighbors are routers on the same lan are all neighbors ospf works by exchanging information between adjacent routers  which is not the same as between neighboring routers in particular  it is inefficient to have every router on a lan talk to every other router on the lan to avoid this situation  one router is elected as the designated router it is said to be adjacent to all the other routers on its lan  and exchanges information with them in effect  it is acting as the single node that represents the lan neighboring routers that are not adjacent do not exchange information with each other a backup designated router is always kept up to date to ease the transition should the primary designated router crash and need to be replaced immediately during normal operation  each router periodically floods link state update messages to each of its adjacent routers these messages gives its state and provide the costs used in the topological database the flooding messages are acknowledged  to make them reliable each message has a sequence number  so a router can see whether an incoming link state update is older or newer than what it currently has routers also send these messages when a link goes up or down or its cost changes database description messages give the sequence numbers of all the link state entries currently held by the sender by comparing its own values with those of the sender  the receiver can determine who has the most recent values these messages are used when a link is brought up either partner can request link state information from the other one by using link state request messages the result of this algorithm is that each pair of adjacent routers checks to see who has the most recent data  and new information is spread throughout the area this way all these messages are sent directly in ip packets the five kinds of messages are summarized in fig 5-66 message type description hello used to discover who the neighbors are link state update provides the sender ? s costs to its neighbors link state ack acknowledges link state update database description announces which updates the sender has link state request requests information from the partner figure 5-66 the five types of ospf messages sec 5.6 the network layer in the internet 479 finally  we can put all the pieces together using flooding  each router informs all the other routers in its area of its links to other routers and networks and the cost of these links this information allows each router to construct the graph for its area  s  and compute the shortest paths the backbone area does this work  too in addition  the backbone routers accept information from the area border routers in order to compute the best route from each backbone router to every other router this information is propagated back to the area border routers  which advertise it within their areas using this information  internal routers can select the best route to a destination outside their area  including the best exit router to the backbone 5.6.7 bgp ? the exterior gateway routing protocol within a single as  ospf and is-is are the protocols that are commonly used between ases  a different protocol  called bgp  border gateway protocol   is used a different protocol is needed because the goals of an intradomain protocol and an interdomain protocol are not the same all an intradomain protocol has to do is move packets as efficiently as possible from the source to the destination it does not have to worry about politics in contrast  interdomain routing protocols have to worry about politics a great deal  metz  2001   for example  a corporate as might want the ability to send packets to any internet site and receive packets from any internet site however  it might be unwilling to carry transit packets originating in a foreign as and ending in a different foreign as  even if its own as is on the shortest path between the two foreign ases  ? ? that ? s their problem  not ours ? ?   on the other hand  it might be willing to carry transit traffic for its neighbors  or even for specific other ases that paid it for this service telephone companies  for example  might be happy to act as carriers for their customers  but not for others exterior gateway protocols in general  and bgp in particular  have been designed to allow many kinds of routing policies to be enforced in the interas traffic typical policies involve political  security  or economic considerations a few examples of possible routing constraints are  1 do not carry commercial traffic on the educational network 2 never send traffic from the pentagon on a route through iraq 3 use teliasonera instead of verizon because it is cheaper 4 don ? t use at&t in australia because performance is poor 5 traffic starting or ending at apple should not transit google as you might imagine from this list  routing policies can be highly individual they are often proprietary because they contain sensitive business information 480 the network layer chap 5 however  we can describe some patterns that capture the reasoning of the company above and that are often used as a starting point a routing policy is implemented by deciding what traffic can flow over which of the links between ases one common policy is that a customer isp pays another provider isp to deliver packets to any other destination on the internet and receive packets sent from any other destination the customer isp is said to buy transit service from the provider isp this is just like a customer at home buying internet access service from an isp to make it work  the provider should advertise routes to all destinations on the internet to the customer over the link that connects them in this way  the customer will have a route to use to send packets anywhere conversely  the customer should advertise routes only to the destinations on its network to the provider this will let the provider send traffic to the customer only for those addresses ; the customer does not want to handle traffic intended for other destinations we can see an example of transit service in fig 5-67 there are four ases that are connected the connection is often made with a link at ixps  internet exchange points   facilities to which many isps have a link for the purpose of connecting with other isps as2  as3  and as4 are customers of as1 they buy transit service from it thus  when source a sends to destination c  the packets travel from as2 to as1 and finally to as4 the routing advertisements travel in the opposite direction to the packets as4 advertises c as a destination to its transit provider  as1  to let sources reach c via as1 later  as1 advertises a route to c to its other customers  including as2  to let the customers know that they can send traffic to c via as1 tr as1 as2 as3 as4 a pe cu pe cu cu tr tr path of bgp routing advertisements  dash  path of ip packets  solid  routing policy  tr = transit cu = customer pe = peer b c figure 5-67 routing policies between four autonomous systems in fig 5-67  all of the other ases buy transit service from as1 this provides them with connectivity so they can interact with any host on the internet however  they have to pay for this privilege suppose that as2 and as3 exchange a lot of traffic given that their networks are connected already  if they want to  they sec 5.6 the network layer in the internet 481 can use a different policy ? they can send traffic directly to each other for free this will reduce the amount of traffic they must have as1 deliver on their behalf  and hopefully it will reduce their bills this policy is called peering to implement peering  two ases send routing advertisements to each other for the addresses that reside in their networks doing so makes it possible for as2 to send as3 packets from a destined to b and vice versa however  note that peering is not transitive in fig 5-67  as3 and as4 also peer with each other this peering allows traffic from c destined for b to be sent directly to as4 what happens if c sends a packet to a ? as3 is only advertising a route to b to as4 it is not advertising a route to a the consequence is that traffic will not pass from as4 to as3 to as2  even though a physical path exists this restriction is exactly what as3 wants it peers with as4 to exchange traffic  but does not want to carry traffic from as4 to other parts of the internet since it is not being paid to so do instead  as4 gets transit service from as1 thus  it is as1 who will carry the packet from c to a now that we know about transit and peering  we can also see that a  b  and c have transit arrangements for example  a must buy internet access from as2 a might be a single home computer or a company network with many lans however  it does not need to run bgp because it is a stub network that is connected to the rest of the internet by only one link so the only place for it to send packets destined outside of the network is over the link to as2 there is nowhere else to go this path can be arranged simply by setting up a default route for this reason  we have not shown a  b  and c as ases that participate in interdomain routing on the other hand  some company networks are connected to multiple isps this technique is used to improve reliability  since if the path through one isp fails  the company can use the path via the other isp this technique is called multihoming in this case  the company network is likely to run an interdomain routing protocol  e.g  bgp  to tell other ases which addresses should be reached via which isp links many variations on these transit and peering policies are possible  but they already illustrate how business relationships and control over where route advertisements go can implement different kinds of policies now we will consider in more detail how routers running bgp advertise routes to each other and select paths over which to forward packets bgp is a form of distance vector protocol  but it is quite unlike intradomain distance vector protocols such as rip we have already seen that policy  instead of minimum distance  is used to pick which routes to use another large difference is that instead of maintaining just the cost of the route to each destination  each bgp router keeps track of the path used this approach is called a path vector protocol the path consists of the next hop router  which may be on the other side of the isp  not adjacent  and the sequence of ases  or as path  that the route has followed  given in reverse order   finally  pairs of bgp routers communicate 482 the network layer chap 5 with each other by establishing tcp connections operating this way provides reliable communication and also hides all the details of the network being passed through an example of how bgp routes are advertised is shown in fig 5-68 there are three ases and the middle one is providing transit to the left and right isps a route advertisement to prefix c starts in as3 when it is propagated across the link to r2c at the top of the figure  it has the as path of simply as3 and the next hop router of r3a at the bottom  it has the same as path but a different next hop because it came across a different link this advertisement continues to propagate and crosses the boundary into as1 at router r1a  at the top of the figure  the as path is as2  as3 and the next hop is r2a r3a prefix a b c as1 as2 as3 path of packets r3b r2c r2d r2a r2b r1a r1b c  as2  as3  r2a c  as3  r3a c  as2  as3  r2b c  as2  as3  r1a c  as2  as3  r1b as path next hop c  as3  r3b figure 5-68 propagation of bgp route advertisements carrying the complete path with the route makes it easy for the receiving router to detect and break routing loops the rule is that each router that sends a route outside of the as prepends its own as number to the route  this is why the list is in reverse order  when a router receives a route  it checks to see if its own as number is already in the as path if it is  a loop has been detected and the advertisement is discarded however  and somewhat ironically  it was realized in the late 1990s that despite this precaution bgp suffers from a version of the count-to-infinity problem  labovitz et al  2001   there are no long-lived loops  but routes can sometimes be slow to converge and have transient loops giving a list of ases is a very coarse way to specify a path an as might be a small company  or an international backbone network there is no way of telling from the route bgp does not even try because different ases may use different intradomain protocols whose costs can not be compared even if they could be compared  an as may not want to reveal its internal metrics this is one of the ways that interdomain routing protocols differ from intradomain protocols sec 5.6 the network layer in the internet 483 so far we have seen how a route advertisement is sent across the link between two isps we still need some way to propagate bgp routes from one side of the isp to the other  so they can be sent on to the next isp this task could be handled by the intradomain protocol  but because bgp is very good at scaling to large networks  a variant of bgp is often used it is called ibgp  internal bgp  to distinguish it from the regular use of bgp as ebgp  external bgp   the rule for propagating routes inside an isp is that every router at the boundary of the isp learns of all the routes seen by all the other boundary routers  for consistency if one boundary router on the isp learns of a prefix to ip 128.208.0.0/16  all the other routers will learn of this prefix the prefix will then be reachable from all parts of the isp  no matter how packets enter the isp from other ases we have not shown this propagation in fig 5-68 to avoid clutter  but  for example  router r2b will know that it can reach c via either router r2c at top or router r2d at bottom the next hop is updated as the route crosses within the isp so that routers on the far side of the isp know which router to use to exit the isp on the other side this can be seen in the leftmost routes in which the next hop points to a router in the same isp and not a router in the next isp we can now describe the key missing piece  which is how bgp routers choose which route to use for each destination each bgp router may learn a route for a given destination from the router it is connected to in the next isp and from all of the other boundary routers  which have heard different routes from the routers they are connected to in other isps   each router must decide which route in this set of routes is the best one to use ultimately the answer is that it is up to the isp to write some policy to pick the preferred route however  this explanation is very general and not at all satisfying  so we can at least describe some common strategies the first strategy is that routes via peered networks are chosen in preference to routes via transit providers the former are free ; the latter cost money a similar strategy is that customer routes are given the highest preference it is only good business to send traffic directly to the paying customers a different kind of strategy is the default rule that shorter as paths are better this is debatable given that an as could be a network of any size  so a path through three small ases could actually be shorter than a path through one big as however  shorter tends to be better on average  and this rule is a common tiebreaker the final strategy is to prefer the route that has the lowest cost within the isp this is the strategy implemented in fig 5-68 packets sent from a to c exit as1 at the top router  r1a packets sent from b exit via the bottom router  r1b the reason is that both a and b are taking the lowest-cost path or quickest route out of as1 because they are located in different parts of the isp  the quickest exit for each one is different the same thing happens as the packets pass through as2 on the last leg  as3 has to carry the packet from b through its own network 484 the network layer chap 5 this strategy is known as early exit or hot-potato routing it has the curious side effect of tending to make routes asymmetric for example  consider the path taken when c sends a packet back to b the packet will exit as3 quickly  at the top router  to avoid wasting its resources similarly  it will stay at the top when as2 passes it to as1 as quickly as possible then the packet will have a longer journey in as1 this is a mirror image of the path taken from b to c the above discussion should make clear that each bgp router chooses its own best route from the known possibilities it is not the case  as might naively be expected  that bgp chooses a path to follow at the as level and ospf chooses paths within each of the ases bgp and the interior gateway protocol are integrated much more deeply this means that  for example  bgp can find the best exit point from one isp to the next and this point will vary across the isp  as in the case of the hot-potato policy it also means that bgp routers in different parts of one as may choose different as paths to reach the same destination care must be exercised by the isp to configure all of the bgp routers to make compatible choices given all of this freedom  but this can be done in practice amazingly  we have only scratched the surface of bgp for more information  see the bgp version 4 specification in rfc 4271 and related rfcs however  realize that much of its complexity lies with policies  which are not described in the specification of the bgp protocol 5.6.8 internet multicasting normal ip communication is between one sender and one receiver however  for some applications  it is useful for a process to be able to send to a large number of receivers simultaneously examples are streaming a live sports event to many viewers  delivering program updates to a pool of replicated servers  and handling digital conference  i.e  multiparty  telephone calls ip supports one-to-many communication  or multicasting  using class d ip addresses each class d address identifies a group of hosts twenty-eight bits are available for identifying groups  so over 250 million groups can exist at the same time when a process sends a packet to a class d address  a best-effort attempt is made to deliver it to all the members of the group addressed  but no guarantees are given some members may not get the packet the range of ip addresses 224.0.0.0/24 is reserved for multicast on the local network in this case  no routing protocol is needed the packets are multicast by simply broadcasting them on the lan with a multicast address all hosts on the lan receive the broadcasts  and hosts that are members of the group process the packet routers do not forward the packet off the lan some examples of local multicast addresses are  224.0.0.1 all systems on a lan 224.0.0.2 all routers on a lan 224.0.0.5 all ospf routers on a lan 224.0.0.251 all dns servers on a lan sec 5.6 the network layer in the internet 485 other multicast addresses may have members on different networks in this case  a routing protocol is needed but first the multicast routers need to know which hosts are members of a group a process asks its host to join in a specific group it can also ask its host to leave the group each host keeps track of which groups its processes currently belong to when the last process on a host leaves a group  the host is no longer a member of that group about once a minute  each multicast router sends a query packet to all the hosts on its lan  using the local multicast address of 224.0.0.1  of course  asking them to report back on the groups to which they currently belong the multicast routers may or may not be colocated with the standard routers each host sends back responses for all the class d addresses it is interested in these query and response packets use a protocol called igmp  internet group management protocol   it is described in rfc 3376 any of several multicast routing protocols may be used to build multicast spanning trees that give paths from senders to all of the members of the group the algorithms that are used are the ones we described in sec 5.2.8 within an as  the main protocol used is pim  protocol independent multicast   pim comes in several flavors in dense mode pim  a pruned reverse path forwarding tree is created this is suited to situations in which members are everywhere in the network  such as distributing files to many servers within a data center network in sparse mode pim  spanning trees that are built are similar to core-based trees this is suited to situations such as a content provider multicasting tv to subscribers on its ip network a variant of this design  called source-specific multicast pim  is optimized for the case that there is only one sender to the group finally  multicast extensions to bgp or tunnels need to be used to create multicast routes when the group members are in more than one as 5.6.9 mobile ip many users of the internet have mobile computers and want to stay connected when they are away from home and even on the road in between unfortunately  the ip addressing system makes working far from home easier said than done  as we will describe shortly when people began demanding the ability anyway  ietf set up a working group to find a solution the working group quickly formulated a number of goals considered desirable in any solution the major ones were  1 each mobile host must be able to use its home ip address anywhere 2 software changes to the fixed hosts were not permitted 3 changes to the router software and tables were not permitted 4 most packets for mobile hosts should not make detours on the way 5 no overhead should be incurred when a mobile host is at home 486 the network layer chap 5 the solution chosen was the one described in sec 5.2.10 in brief  every site that wants to allow its users to roam has to create a helper at the site called a home agent when a mobile host shows up at a foreign site  it obtains a new ip address  called a care-of address  at the foreign site the mobile then tells the home agent where it is now by giving it the care-of address when a packet for the mobile arrives at the home site and the mobile is elsewhere  the home agent grabs the packet and tunnels it to the mobile at the current care-of address the mobile can send reply packets directly to whoever it is communicating with  but still using its home address as the source address this solution meets all the requirements stated above except that packets for mobile hosts do make detours now that we have covered the network layer of the internet  we can go into the solution in more detail the need for mobility support in the first place comes from the ip addressing scheme itself every ip address contains a network number and a host number for example  consider the machine with ip address 160.80.40.20/16 the 160.80 gives the network number ; the 40.20 is the host number routers all over the world have routing tables telling which link to use to get to network 160.80 whenever a packet comes in with a destination ip address of the form 160.80.xxx.yyy  it goes out on that line if all of a sudden  the machine with that address is carted off to some distant site  the packets for it will continue to be routed to its home lan  or router   at this stage  there are two options ? both unattractive the first is that we could create a route to a more specific prefix that is  if the distant site advertises a route to 160.80.40.20/32  packets sent to the destination will start arriving in the right place again this option depends on the longest matching prefix algorithm that is used at routers however  we have added a route to an ip prefix with a single ip address in it all isps in the world will learn about this prefix if everyone changes global ip routes in this way when they move their computer  each router would have millions of table entries  at astronomical cost to the internet this option is not workable the second option is to change the ip address of the mobile true  packets sent to the home ip address will no longer be delivered until all the relevant people  programs  and databases are informed of the change but the mobile can still use the internet at the new location to browse the web and run other applications this option handles mobility at a higher layer it is what typically happens when a user takes a laptop to a coffee store and uses the internet via the local wireless network the disadvantage is that it breaks some applications  and it does not keep connectivity as the mobile moves around as an aside  mobility can also be handled at a lower layer  the link layer this is what happens when using a laptop on a single 802.11 wireless network the ip address of the mobile does not change and the network path remains the same it is the wireless link that is providing mobility however  the degree of mobility is limited if the laptop moves too far  it will have to connect to the internet via another network with a different ip address sec 5.6 the network layer in the internet 487 the mobile ip solution for ipv4 is given in rfc 3344 it works with the existing internet routing and allows hosts to stay connected with their own ip addresses as they move about for it to work  the mobile must be able to discover when it has moved this is accomplished with icmp router advertisement and solicitation messages mobiles listen for periodic router advertisements or send a solicitation to discover the nearest router if this router is not the usual address of the router when the mobile is at home  it must be on a foreign network if this router has changed since last time  the mobile has moved to another foreign network this same mechanism lets mobile hosts find their home agents to get a care-of ip address on the foreign network  a mobile can simply use dhcp alternatively  if ipv4 addresses are in short supply  the mobile can send and receive packets via a foreign agent that already has an ip address on the network the mobile host finds a foreign agent using the same icmp mechanism used to find the home agent after the mobile obtains an ip address or finds a foreign agent  it is able to use the network to send a message to its home agent  informing the home agent of its current location the home agent needs a way to intercept packets sent to the mobile only when the mobile is not at home arp provides a convenient mechanism to send a packet over an ethernet to an ip host  the router needs to know the ethernet address of the host the usual mechanism is for the router to send an arp query to ask  for example  what is the ethernet address of 160.80.40.20 when the mobile is at home  it answers arp queries for its ip address with its own ethernet address when the mobile is away  the home agent responds to this query by giving its ethernet address the router then sends packets for 160.80.40.20 to the home agent recall that this is called a proxy arp to quickly update arp mappings back and forth when the mobile leaves home or arrives back home  another arp technique called a gratuitous arp can be used basically  the mobile or home agent send themselves an arp query for the mobile ip address that supplies the right answer so that the router notices and updates its mapping tunneling to send a packet between the home agent and the mobile host at the care-of address is done by encapsulating the packet with another ip header destined for the care-of address when the encapsulated packet arrives at the care-of address  the outer ip header is removed to reveal the packet as with many internet protocols  the devil is in the details  and most often the details of compatibility with other protocols that are deployed there are two complications first  nat boxes depend on peeking past the ip header to look at the tcp or udp header the original form of tunneling for mobile ip did not use these headers  so it did not work with nat boxes the solution was to change the encapsulation to include a udp header the second complication is that some isps check the source ip addresses of packets to see that they match where the routing protocol believes the source should be located this technique is called ingress filtering  and it is a security 488 the network layer chap 5 measure intended to discard traffic with seemingly incorrect addresses that may be malicious however  packets sent from the mobile to other internet hosts when it is on a foreign network will have a source ip address that is out of place  so they will be discarded to get around this problem  the mobile can use the care-of address as a source to tunnel the packets back to the home agent from here  they are sent into the internet from what appears to be the right location the cost is that the route is more roundabout another issue we have not discussed is security when a home agent gets a message asking it to please forward all of roberta ? s packets to some ip address  it had better not comply unless it is convinced that roberta is the source of this request  and not somebody trying to impersonate her cryptographic authentication protocols are used for this purpose we will study such protocols in chap 8 mobility protocols for ipv6 build on the ipv4 foundation the scheme above suffers from the triangle routing problem in which packets sent to the mobile take a dogleg through a distant home agent in ipv6  route optimization is used to follow a direct path between the mobile and other ip addresses after the initial packets have followed the long route mobile ipv6 is defined in rfc 3775 there is another kind of mobility that is also being defined for the internet some airplanes have built-in wireless networking that passengers can use to connect their laptops to the internet the plane has a router that connects to the rest of the internet via a wireless link  did you expect a wired link ?  so now we have a flying router  which means that the whole network is mobile network mobility designs support this situation without the laptops realizing that the plane is mobile as far as they are concerned  it is just another network of course  some of the laptops may be using mobile ip to keep their home addresses while they are on the plane  so we have two levels of mobility network mobility is defined for ipv6 in rfc 3963 5.7 summary the network layer provides services to the transport layer it can be based on either datagrams or virtual circuits in both cases  its main job is routing packets from the source to the destination in datagram networks  a routing decision is made on every packet in virtual-circuit networks  it is made when the virtual circuit is set up many routing algorithms are used in computer networks flooding is a simple algorithm to send a packet along all paths most algorithms find the shortest path and adapt to changes in the network topology the main algorithms are distance vector routing and link state routing most actual networks use one of these other important routing topics are the use of hierarchy in large networks  routing for mobile hosts  and broadcast  multicast  and anycast routing sec 5.7 summary 489 networks can easily become congested  leading to increased delay and lost packets network designers attempt to avoid congestion by designing the network to have enough capacity  choosing uncongested routes  refusing to accept more traffic  signaling sources to slow down  and shedding load the next step beyond just dealing with congestion is to actually try to achieve a promised quality of service some applications care more about throughput whereas others care more about delay and jitter the methods that can be used to provide different qualities of service include a combination of traffic shaping  reserving resources at routers  and admission control approaches that have been designed for good quality of service include ietf integrated services  including rsvp  and differentiated services networks differ in various ways  so when multiple networks are interconnected  problems can occur when different networks have different maximum packet sizes  fragmentation may be needed different networks may run different routing protocols internally but need to run a common protocol externally sometimes the problems can be finessed by tunneling a packet through a hostile network  but if the source and destination networks are different  this approach fails the internet has a rich variety of protocols related to the network layer these include the datagram protocol  ip  and associated control protocols such as icmp  arp  and dhcp a connection-oriented protocol called mpls carries ip packets across some networks one of the main routing protocols used within networks is ospf  and the routing protocol used across networks is bgp the internet is rapidly running out of ip addresses  so a new version of ip  ipv6  has been developed and is ever-so-slowly being deployed problems 1 give two example computer applications for which connection-oriented service is appropriate now give two examples for which connectionless service is best 2 datagram networks route each packet as a separate unit  independent of all others virtual-circuit networks do not have to do this  since each data packet follows a predetermined route does this observation mean that virtual-circuit networks do not need the capability to route isolated packets from an arbitrary source to an arbitrary destination ? explain your answer 3 give three examples of protocol parameters that might be negotiated when a connection is set up 4 assuming that all routers and hosts are working properly and that all software in both is free of all errors  is there any chance  however small  that a packet will be delivered to the wrong destination ? 490 the network layer chap 5 5 give a simple heuristic for finding two paths through a network from a given source to a given destination that can survive the loss of any communication line  assuming two such paths exist   the routers are considered reliable enough  so it is not necessary to worry about the possibility of router crashes 6 consider the network of fig 5-12  a   distance vector routing is used  and the following vectors have just come in to router c  from b   5  0  8  12  6  2  ; from d   16  12  6  0  9  10  ; and from e   7  6  3  9  0  4   the cost of the links from c to b  d  and e  are 6  3  and 5  respectively what is c ? s new routing table ? give both the outgoing line to use and the cost 7 if costs are recorded as 8-bit numbers in a 50-router network  and distance vectors are exchanged twice a second  how much bandwidth per  full-duplex  line is chewed up by the distributed routing algorithm ? assume that each router has three lines to other routers 8 in fig 5-13 the boolean or of the two sets of acf bits are 111 in every row is this just an accident here  or does it hold for all networks under all circumstances ? 9 for hierarchical routing with 4800 routers  what region and cluster sizes should be chosen to minimize the size of the routing table for a three-layer hierarchy ? a good starting place is the hypothesis that a solution with k clusters of k regions of k routers is close to optimal  which means that k is about the cube root of 4800  around 16   use trial and error to check out combinations where all three parameters are in the general vicinity of 16 10 in the text it was stated that when a mobile host is not at home  packets sent to its home lan are intercepted by its home agent on that lan for an ip network on an 802.3 lan  how does the home agent accomplish this interception ? 11 looking at the network of fig 5-6  how many packets are generated by a broadcast from b  using  a  reverse path forwarding ?  b  the sink tree ? 12 consider the network of fig 5-15  a   imagine that one new line is added  between f and g  but the sink tree of fig 5-15  b  remains unchanged what changes occur to fig 5-15  c  ? 13 compute a multicast spanning tree for router c in the following network for a group with members at routers a  b  c  d  e  f  i  and k a g h i l d k b c f e j chap 5 problems 491 14 suppose that node b in fig 5-20 has just rebooted and has no routing information in its tables it suddenly needs a route to h it sends out broadcasts with ttl set to 1  2  3  and so on how many rounds does it take to find a route ? 15 as a possible congestion control mechanism in a network using virtual circuits internally  a router could refrain from acknowledging a received packet until  1  it knows its last transmission along the virtual circuit was received successfully and  2  it has a free buffer for simplicity  assume that the routers use a stop-and-wait protocol and that each virtual circuit has one buffer dedicated to it for each direction of traffic if it takes t sec to transmit a packet  data or acknowledgement  and there are n routers on the path  what is the rate at which packets are delivered to the destination host ? assume that transmission errors are rare and that the host-router connection is infinitely fast 16 a datagram network allows routers to drop packets whenever they need to the probability of a router discarding a packet is p consider the case of a source host connected to the source router  which is connected to the destination router  and then to the destination host if either of the routers discards a packet  the source host eventually times out and tries again if both host-router and router-router lines are counted as hops  what is the mean number of  a  hops a packet makes per transmission ?  b  transmissions a packet makes ?  c  hops required per received packet ? 17 describe two major differences between the ecn method and the red method of congestion avoidance 18 a token bucket scheme is used for traffic shaping a new token is put into the bucket every 5 ? sec each token is good for one short packet  which contains 48 bytes of data what is the maximum sustainable data rate ? 19 a computer on a 6-mbps network is regulated by a token bucket the token bucket is filled at a rate of 1 mbps it is initially filled to capacity with 8 megabits how long can the computer transmit at the full 6 mbps ? 20 the network of fig 5-34 uses rsvp with multicast trees for hosts 1 and 2 as shown suppose that host 3 requests a channel of bandwidth 2 mb/sec for a flow from host 1 and another channel of bandwidth 1 mb/sec for a flow from host 2 at the same time  host 4 requests a channel of bandwidth 2 mb/sec for a flow from host 1 and host 5 requests a channel of bandwidth 1 mb/sec for a flow from host 2 how much total bandwidth will be reserved for these requests at routers a  b  c  e  h  j  k  and l ? 21 a router can process 2 million packets/sec the load offered to it is 1.5 million packets/ sec on average if a route from source to destination contains 10 routers  how much time is spent being queued and serviced by the router ? 22 consider the user of differentiated services with expedited forwarding is there a guarantee that expedited packets experience a shorter delay than regular packets ? why or why not ? 492 the network layer chap 5 23 suppose that host a is connected to a router r 1  r 1 is connected to another router  r 2  and r 2 is connected to host b suppose that a tcp message that contains 900 bytes of data and 20 bytes of tcp header is passed to the ip code at host a for delivery to b show the total length  identification  df  mf  and fragment offset fields of the ip header in each packet transmitted over the three links assume that link a-r1 can support a maximum frame size of 1024 bytes including a 14-byte frame header  link r1-r2 can support a maximum frame size of 512 bytes  including an 8-byte frame header  and link r2-b can support a maximum frame size of 512 bytes including a 12-byte frame header 24 a router is blasting out ip packets whose total length  data plus header  is 1024 bytes assuming that packets live for 10 sec  what is the maximum line speed the router can operate at without danger of cycling through the ip datagram id number space ? 25 an ip datagram using the strict source routing option has to be fragmented do you think the option is copied into each fragment  or is it sufficient to just put it in the first fragment ? explain your answer 26 suppose that instead of using 16 bits for the network part of a class b address originally  20 bits had been used how many class b networks would there have been ? 27 convert the ip address whose hexadecimal representation is c22f1582 to dotted decimal notation 28 a network on the internet has a subnet mask of 255.255.240.0 what is the maximum number of hosts it can handle ? 29 while ip addresses are tried to specific networks  ethernet addresses are not can you think of a good reason why they are not ? 30 a large number of consecutive ip addresses are available starting at 198.16.0.0 suppose that four organizations  a  b  c  and d  request 4000  2000  4000  and 8000 addresses  respectively  and in that order for each of these  give the first ip address assigned  the last ip address assigned  and the mask in the w.x.y.z/s notation 31 a router has just received the following new ip addresses  57.6.96.0/21  57.6.104.0/21  57.6.112.0/21  and 57.6.120.0/21 if all of them use the same outgoing line  can they be aggregated ? if so  to what ? if not  why not ? 32 the set of ip addresses from 29.18.0.0 to 19.18.128.255 has been aggregated to 29.18.0.0/17 however  there is a gap of 1024 unassigned addresses from 29.18.60.0 to 29.18.63.255 that are now suddenly assigned to a host using a different outgoing line is it now necessary to split up the aggregate address into its constituent blocks  add the new block to the table  and then see if any reaggregation is possible ? if not  what can be done instead ? 33 a router has the following  cidr  entries in its routing table  address/mask next hop 135.46.56.0/22 interface 0 135.46.60.0/22 interface 1 192.53.40.0/23 router 1 default router 2 chap 5 problems 493 for each of the following ip addresses  what does the router do if a packet with that address arrives ?  a  135.46.63.10  b  135.46.57.14  c  135.46.52.2  d  192.53.40.7  e  192.53.56.7 34 many companies have a policy of having two  or more  routers connecting the company to the internet to provide some redundancy in case one of them goes down is this policy still possible with nat ? explain your answer 35 you have just explained the arp protocol to a friend when you are all done  he says  ? ? i ? ve got it arp provides a service to the network layer  so it is part of the data link layer ? ? what do you say to him ? 36 describe a way to reassemble ip fragments at the destination 37 most ip datagram reassembly algorithms have a timer to avoid having a lost fragment tie up reassembly buffers forever suppose that a datagram is fragmented into four fragments the first three fragments arrive  but the last one is delayed eventually  the timer goes off and the three fragments in the receiver ? s memory are discarded a little later  the last fragment stumbles in what should be done with it ? 38 in ip  the checksum covers only the header and not the data why do you suppose this design was chosen ? 39 a person who lives in boston travels to minneapolis  taking her portable computer with her to her surprise  the lan at her destination in minneapolis is a wireless ip lan  so she does not have to plug in is it still necessary to go through the entire business with home agents and foreign agents to make email and other traffic arrive correctly ? 40 ipv6 uses 16-byte addresses if a block of 1 million addresses is allocated every picosecond  how long will the addresses last ? 41 the protocol field used in the ipv4 header is not present in the fixed ipv6 header why not ? 42 when the ipv6 protocol is introduced  does the arp protocol have to be changed ? if so  are the changes conceptual or technical ? 43 write a program to simulate routing using flooding each packet should contain a counter that is decremented on each hop when the counter gets to zero  the packet is discarded time is discrete  with each line handling one packet per time interval make three versions of the program  all lines are flooded  all lines except the input line are flooded  and only the  statically chosen  best k lines are flooded compare flooding with deterministic routing  k ? ? 1  in terms of both delay and the bandwidth used 44 write a program that simulates a computer network using discrete time the first packet on each router queue makes one hop per time interval each router has only a finite number of buffers if a packet arrives and there is no room for it  it is discarded 494 the network layer chap 5 and not retransmitted instead  there is an end-to-end protocol  complete with timeouts and acknowledgement packets  that eventually regenerates the packet from the source router plot the throughput of the network as a function of the end-to-end timeout interval  parameterized by error rate 45 write a function to do forwarding in an ip router the procedure has one parameter  an ip address it also has access to a global table consisting of an array of triples each triple contains three integers  an ip address  a subnet mask  and the outline line to use the function looks up the ip address in the table using cidr and returns the line to use as its value 46 use the traceroute  unix  or tracert  windows  programs to trace the route from your computer to various universities on other continents make a list of transoceanic links you have discovered some sites to try are www.berkeley.edu  california  www.mit.edu  massachusetts  www.vu.nl  amsterdam  www.ucl.ac.uk  london  www.usyd.edu.au  sydney  www.u-tokyo.ac.jp  tokyo  www.uct.ac.za  cape town  6 the transport layer together with the network layer  the transport layer is the heart of the protocol hierarchy the network layer provides end-to-end packet delivery using datagrams or virtual circuits the transport layer builds on the network layer to provide data transport from a process on a source machine to a process on a destination machine with a desired level of reliability that is independent of the physical networks currently in use it provides the abstractions that applications need to use the network without the transport layer  the whole concept of layered protocols would make little sense in this chapter  we will study the transport layer in detail  including its services and choice of api design to tackle issues of reliability  connections and congestion control  protocols such as tcp and udp  and performance 6.1 the transport service in the following sections  we will provide an introduction to the transport service we look at what kind of service is provided to the application layer to make the issue of transport service more concrete  we will examine two sets of transport layer primitives first comes a simple  but hypothetical  one to show the basic ideas then comes the interface commonly used in the internet 495 496 the transport layer chap 6 6.1.1 services provided to the upper layers the ultimate goal of the transport layer is to provide efficient  reliable  and cost-effective data transmission service to its users  normally processes in the application layer to achieve this  the transport layer makes use of the services provided by the network layer the software and/or hardware within the transport layer that does the work is called the transport entity the transport entity can be located in the operating system kernel  in a library package bound into network applications  in a separate user process  or even on the network interface card the first two options are most common on the internet the  logical  relationship of the network  transport  and application layers is illustrated in fig 6-1 application/transport interface transport/network interface application  or session  layer transport entity transport address network address network layer application  or session  layer transport entity network layer segment transport protocol host 1 host 2 figure 6-1 the network  transport  and application layers just as there are two types of network service  connection-oriented and connectionless  there are also two types of transport service the connection-oriented transport service is similar to the connection-oriented network service in many ways in both cases  connections have three phases  establishment  data transfer  and release addressing and flow control are also similar in both layers furthermore  the connectionless transport service is also very similar to the connectionless network service however  note that it can be difficult to provide a connectionless transport service on top of a connection-oriented network service  since it is inefficient to set up a connection to send a single packet and then tear it down immediately afterwards the obvious question is this  if the transport layer service is so similar to the network layer service  why are there two distinct layers ? why is one layer not sec 6.1 the transport service 497 adequate ? the answer is subtle  but crucial the transport code runs entirely on the users ? machines  but the network layer mostly runs on the routers  which are operated by the carrier  at least for a wide area network   what happens if the network layer offers inadequate service ? what if it frequently loses packets ? what happens if routers crash from time to time ? problems occur  that ? s what the users have no real control over the network layer  so they can not solve the problem of poor service by using better routers or putting more error handling in the data link layer because they don ? t own the routers the only possibility is to put on top of the network layer another layer that improves the quality of the service if  in a connectionless network  packets are lost or mangled  the transport entity can detect the problem and compensate for it by using retransmissions if  in a connection-oriented network  a transport entity is informed halfway through a long transmission that its network connection has been abruptly terminated  with no indication of what has happened to the data currently in transit  it can set up a new network connection to the remote transport entity using this new network connection  it can send a query to its peer asking which data arrived and which did not  and knowing where it was  pick up from where it left off in essence  the existence of the transport layer makes it possible for the transport service to be more reliable than the underlying network furthermore  the transport primitives can be implemented as calls to library procedures to make them independent of the network primitives the network service calls may vary considerably from one network to another  e.g  calls based on a connectionless ethernet may be quite different from calls on a connection-oriented wimax network   hiding the network service behind a set of transport service primitives ensures that changing the network merely requires replacing one set of library procedures with another one that does the same thing with a different underlying service thanks to the transport layer  application programmers can write code according to a standard set of primitives and have these programs work on a wide variety of networks  without having to worry about dealing with different network interfaces and levels of reliability if all real networks were flawless and all had the same service primitives and were guaranteed never  ever to change  the transport layer might not be needed however  in the real world it fulfills the key function of isolating the upper layers from the technology  design  and imperfections of the network for this reason  many people have made a qualitative distinction between layers 1 through 4 on the one hand and layer  s  above 4 on the other the bottom four layers can be seen as the transport service provider  whereas the upper layer  s  are the transport service user this distinction of provider versus user has a considerable impact on the design of the layers and puts the transport layer in a key position  since it forms the major boundary between the provider and user of the reliable data transmission service it is the level that applications see 498 the transport layer chap 6 6.1.2 transport service primitives to allow users to access the transport service  the transport layer must provide some operations to application programs  that is  a transport service interface each transport service has its own interface in this section  we will first examine a simple  hypothetical  transport service and its interface to see the bare essentials in the following section  we will look at a real example the transport service is similar to the network service  but there are also some important differences the main difference is that the network service is intended to model the service offered by real networks  warts and all real networks can lose packets  so the network service is generally unreliable the connection-oriented transport service  in contrast  is reliable of course  real networks are not error-free  but that is precisely the purpose of the transport layer ? to provide a reliable service on top of an unreliable network as an example  consider two processes on a single machine connected by a pipe in unix  or any other interprocess communication facility   they assume the connection between them is 100 % perfect they do not want to know about acknowledgements  lost packets  congestion  or anything at all like that what they want is a 100 % reliable connection process a puts data into one end of the pipe  and process b takes it out of the other this is what the connection-oriented transport service is all about ? hiding the imperfections of the network service so that user processes can just assume the existence of an error-free bit stream even when they are on different machines as an aside  the transport layer can also provide unreliable  datagram  service however  there is relatively little to say about that besides ? ? it ? s datagrams  ? ? so we will mainly concentrate on the connection-oriented transport service in this chapter nevertheless  there are some applications  such as client-server computing and streaming multimedia  that build on a connectionless transport service  and we will say a little bit about that later on a second difference between the network service and transport service is whom the services are intended for the network service is used only by the transport entities few users write their own transport entities  and thus few users or programs ever see the bare network service in contrast  many programs  and thus programmers  see the transport primitives consequently  the transport service must be convenient and easy to use to get an idea of what a transport service might be like  consider the five primitives listed in fig 6-2 this transport interface is truly bare bones  but it gives the essential flavor of what a connection-oriented transport interface has to do it allows application programs to establish  use  and then release connections  which is sufficient for many applications to see how these primitives might be used  consider an application with a server and a number of remote clients to start with  the server executes a listen primitive  typically by calling a library procedure that makes a system call that sec 6.1 the transport service 499 primitive packet sent meaning listen  none  block until some process tries to connect connect connection req actively attempt to establish a connection send data send information receive  none  block until a data packet arrives disconnect disconnection req request a release of the connection figure 6-2 the primitives for a simple transport service blocks the server until a client turns up when a client wants to talk to the server  it executes a connect primitive the transport entity carries out this primitive by blocking the caller and sending a packet to the server encapsulated in the payload of this packet is a transport layer message for the server ? s transport entity a quick note on terminology is now in order for lack of a better term  we will use the term segment for messages sent from transport entity to transport entity tcp  udp and other internet protocols use this term some older protocols used the ungainly name tpdu  transport protocol data unit   that term is not used much any more now but you may see it in older papers and books thus  segments  exchanged by the transport layer  are contained in packets  exchanged by the network layer   in turn  these packets are contained in frames  exchanged by the data link layer   when a frame arrives  the data link layer processes the frame header and  if the destination address matches for local delivery  passes the contents of the frame payload field up to the network entity the network entity similarly processes the packet header and then passes the contents of the packet payload up to the transport entity this nesting is illustrated in fig 6-3 frame header packet header segment header segment payload frame payload packet payload figure 6-3 nesting of segments  packets  and frames getting back to our client-server example  the client ? s connect call causes a connection request segment to be sent to the server when it arrives  the 500 the transport layer chap 6 transport entity checks to see that the server is blocked on a listen  i.e  is interested in handling requests   if so  it then unblocks the server and sends a connection accepted segment back to the client when this segment arrives  the client is unblocked and the connection is established data can now be exchanged using the send and receive primitives in the simplest form  either party can do a  blocking  receive to wait for the other party to do a send when the segment arrives  the receiver is unblocked it can then process the segment and send a reply as long as both sides can keep track of whose turn it is to send  this scheme works fine note that in the transport layer  even a simple unidirectional data exchange is more complicated than at the network layer every data packet sent will also be acknowledged  eventually   the packets bearing control segments are also acknowledged  implicitly or explicitly these acknowledgements are managed by the transport entities  using the network layer protocol  and are not visible to the transport users similarly  the transport entities need to worry about timers and retransmissions none of this machinery is visible to the transport users to the transport users  a connection is a reliable bit pipe  one user stuffs bits in and they magically appear in the same order at the other end this ability to hide complexity is the reason that layered protocols are such a powerful tool when a connection is no longer needed  it must be released to free up table space within the two transport entities disconnection has two variants  asymmetric and symmetric in the asymmetric variant  either transport user can issue a disconnect primitive  which results in a disconnect segment being sent to the remote transport entity upon its arrival  the connection is released in the symmetric variant  each direction is closed separately  independently of the other one when one side does a disconnect  that means it has no more data to send but it is still willing to accept data from its partner in this model  a connection is released when both sides have done a disconnect a state diagram for connection establishment and release for these simple primitives is given in fig 6-4 each transition is triggered by some event  either a primitive executed by the local transport user or an incoming packet for simplicity  we assume here that each segment is separately acknowledged we also assume that a symmetric disconnection model is used  with the client going first please note that this model is quite unsophisticated we will look at more realistic models later on when we describe how tcp works 6.1.3 berkeley sockets let us now briefly inspect another set of transport primitives  the socket primitives as they are used for tcp sockets were first released as part of the berkeley unix 4.2bsd software distribution in 1983 they quickly became popular the primitives are now widely used for internet programming on many operating sec 6.1 the transport service 501 active establishment pending passive establishment pending passive disconnect pending active disconnect pending idle idle established disconnection request segment received disconnect primitive executed disconnect primitive executed disconnection request segment received connection request segment received connection accepted segment received connect primitive executed connect primitive executed figure 6-4 a state diagram for a simple connection management scheme transitions labeled in italics are caused by packet arrivals the solid lines show the client ? s state sequence the dashed lines show the server ? s state sequence systems  especially unix-based systems  and there is a socket-style api for windows called ? ? winsock ? ? the primitives are listed in fig 6-5 roughly speaking  they follow the model of our first example but offer more features and flexibility we will not look at the corresponding segments here that discussion will come later primitive meaning socket create a new communication endpoint bind associate a local address with a socket listen announce willingness to accept connections ; give queue size accept passively establish an incoming connection connect actively attempt to establish a connection send send some data over the connection receive receive some data from the connection close release the connection figure 6-5 the socket primitives for tcp 502 the transport layer chap 6 the first four primitives in the list are executed in that order by servers the socket primitive creates a new endpoint and allocates table space for it within the transport entity the parameters of the call specify the addressing format to be used  the type of service desired  e.g  reliable byte stream   and the protocol a successful socket call returns an ordinary file descriptor for use in succeeding calls  the same way an open call on a file does newly created sockets do not have network addresses these are assigned using the bind primitive once a server has bound an address to a socket  remote clients can connect to it the reason for not having the socket call create an address directly is that some processes care about their addresses  e.g  they have been using the same address for years and everyone knows this address   whereas others do not next comes the listen call  which allocates space to queue incoming calls for the case that several clients try to connect at the same time in contrast to listen in our first example  in the socket model listen is not a blocking call to block waiting for an incoming connection  the server executes an accept primitive when a segment asking for a connection arrives  the transport entity creates a new socket with the same properties as the original one and returns a file descriptor for it the server can then fork off a process or thread to handle the connection on the new socket and go back to waiting for the next connection on the original socket accept returns a file descriptor  which can be used for reading and writing in the standard way  the same as for files now let us look at the client side here  too  a socket must first be created using the socket primitive  but bind is not required since the address used does not matter to the server the connect primitive blocks the caller and actively starts the connection process when it completes  i.e  when the appropriate segment is received from the server   the client process is unblocked and the connection is established both sides can now use send and receive to transmit and receive data over the full-duplex connection the standard unix read and write system calls can also be used if none of the special options of send and receive are required connection release with sockets is symmetric when both sides have executed a close primitive  the connection is released sockets have proved tremendously popular and are the de facto standard for abstracting transport services to applications the socket api is often used with the tcp protocol to provide a connection-oriented service called a reliable byte stream  which is simply the reliable bit pipe that we described however  other protocols could be used to implement this service using the same api it should all be the same to the transport service users a strength of the socket api is that is can be used by an application for other transport services for instance  sockets can be used with a connectionless transport service in this case  connect sets the address of the remote transport peer and send and receive send and receive datagrams to and from the remote peer sec 6.1 the transport service 503  it is also common to use an expanded set of calls  for example  sendto and receivefrom  that emphasize messages and do not limit an application to a single transport peer  sockets can also be used with transport protocols that provide a message stream rather than a byte stream and that do or do not have congestion control for example  dccp  datagram congestion controlled protocol  is a version of udp with congestion control  kohler et al  2006   it is up to the transport users to understand what service they are getting however  sockets are not likely to be the final word on transport interfaces for example  applications often work with a group of related streams  such as a web browser that requests several objects from the same server with sockets  the most natural fit is for application programs to use one stream per object this structure means that congestion control is applied separately for each stream  not across the group  which is suboptimal it punts to the application the burden of managing the set newer protocols and interfaces have been devised that support groups of related streams more effectively and simply for the application two examples are sctp  stream control transmission protocol  defined in rfc 4960 and sst  structured stream transport   ford  2007   these protocols must change the socket api slightly to get the benefits of groups of related streams  and they also support features such as a mix of connection-oriented and connectionless traffic and even multiple network paths time will tell if they are successful 6.1.4 an example of socket programming  an internet file server as an example of the nitty-gritty of how real socket calls are made  consider the client and server code of fig 6-6 here we have a very primitive internet file server along with an example client that uses it the code has many limitations  discussed below   but in principle the server code can be compiled and run on any unix system connected to the internet the client code can be compiled and run on any other unix machine on the internet  anywhere in the world the client code can be executed with appropriate parameters to fetch any file to which the server has access on its machine the file is written to standard output  which  of course  can be redirected to a file or pipe let us look at the server code first it starts out by including some standard headers  the last three of which contain the main internet-related definitions and data structures next comes a definition of server port as 12345 this number was chosen arbitrarily any number between 1024 and 65535 will work just as well  as long as it is not in use by some other process ; ports below 1023 are reserved for privileged users the next two lines in the server define two constants needed the first one determines the chunk size in bytes used for the file transfer the second one determines how many pending connections can be held before additional ones are discarded upon arrival 504 the transport layer chap 6 / * this page contains a client program that can request a file from the server program * on the next page the server responds by sending the whole file * / # include < sys/types.h > # include < sys/socket.h > # include < netinet/in.h > # include < netdb.h > # define server port 12345 / * arbitrary  but client & server must agree * / # define buf size 4096 / * block transfer size * / int main  int argc  char * * argv   int c  s  bytes ; char buf  buf size  ; / * buffer for incoming file * / struct hostent * h ; / * info about server * / struct sockaddr in channel ; / * holds ip address * / if  argc ! = 3  fatal  " usage  client server-name file-name "  ; h = gethostbyname  argv  1   ; / * look up host ? s ip address * / if  ! h  fatal  " gethostbyname failed "  ; s = socket  pf inet  sock stream  ipproto tcp  ; if  s < 0  fatal  " socket "  ; memset  &channel  0  sizeof  channel   ; channel.sin family = af inet ; memcpy  &channel.sin addr.s addr  h > h addr  h > h length  ; channel.sin port = htons  server port  ; c = connect  s   struct sockaddr *  &channel  sizeof  channel   ; if  c < 0  fatal  " connect failed "  ; / * connection is now established send file name including 0 byte at end * / write  s  argv  2   strlen  argv  2   + 1  ; / * go get the file and write it to standard output * / while  1   bytes = read  s  buf  buf size  ; / * read from socket * / if  bytes < = 0  exit  0  ; / * check for end of file * / write  1  buf  bytes  ; / * write to standard output * /   fatal  char * string   printf  " % s \ n "  string  ; exit  1  ;  figure 6-6 client code using sockets the server code is on the next page sec 6.1 the transport service 505 # include < sys/types.h > / * this is the server code * / # include < sys/fcntl.h > # include < sys/socket.h > # include < netinet/in.h > # include < netdb.h > # define server port 12345 / * arbitrary  but client & server must agree * / # define buf size 4096 / * block transfer size * / # define queue size 10 int main  int argc  char * argv     int s  b  l  fd  sa  bytes  on = 1 ; char buf  buf size  ; / * buffer for outgoing file * / struct sockaddr in channel ; / * holds ip address * / / * build address structure to bind to socket * / memset  &channel  0  sizeof  channel   ; / * zero channel * / channel.sin family = af inet ; channel.sin addr.s addr = htonl  inaddr any  ; channel.sin port = htons  server port  ; / * passive open wait for connection * / s = socket  af inet  sock stream  ipproto tcp  ; / * create socket * / if  s < 0  fatal  " socket failed "  ; setsockopt  s  sol socket  so reuseaddr   char *  &on  sizeof  on   ; b = bind  s   struct sockaddr *  &channel  sizeof  channel   ; if  b < 0  fatal  " bind failed "  ; l = listen  s  queue size  ; / * specify queue size * / if  l < 0  fatal  " listen failed "  ; / * socket is now set up and bound wait for connection and process it * / while  1   sa = accept  s  0  0  ; / * block for connection request * / if  sa < 0  fatal  " accept failed "  ; read  sa  buf  buf size  ; / * read file name from socket * / / * get and return the file * / fd = open  buf  o rdonly  ; / * open the file to be sent back * / if  fd < 0  fatal  " open failed "  ; while  1   bytes = read  fd  buf  buf size  ; / * read from file * / if  bytes < = 0  break ; / * check for end of file * / write  sa  buf  bytes  ; / * write bytes to socket * /  close  fd  ; / * close file * / close  sa  ; / * close connection * /   506 the transport layer chap 6 after the declarations of local variables  the server code begins it starts out by initializing a data structure that will hold the server ? s ip address this data structure will soon be bound to the server ? s socket the call to memset sets the data structure to all 0s the three assignments following it fill in three of its fields the last of these contains the server ? s port the functions htonl and htons have to do with converting values to a standard format so the code runs correctly on both little-endian machines  e.g  intel x86  and big-endian machines  e.g  the sparc   their exact semantics are not relevant here next  the server creates a socket and checks for errors  indicated by s < 0   in a production version of the code  the error message could be a trifle more explanatory the call to setsockopt is needed to allow the port to be reused so the server can run indefinitely  fielding request after request now the ip address is bound to the socket and a check is made to see if the call to bind succeeded the final step in the initialization is the call to listen to announce the server ? s willingness to accept incoming calls and tell the system to hold up to queue size of them in case new requests arrive while the server is still processing the current one if the queue is full and additional requests arrive  they are quietly discarded at this point  the server enters its main loop  which it never leaves the only way to stop it is to kill it from outside the call to accept blocks the server until some client tries to establish a connection with it if the accept call succeeds  it returns a socket descriptor that can be used for reading and writing  analogous to how file descriptors can be used to read from and write to pipes however  unlike pipes  which are unidirectional  sockets are bidirectional  so sa  the accepted socket  can be used for reading from the connection and also for writing to it a pipe file descriptor is for reading or writing but not both after the connection is established  the server reads the file name from it if the name is not yet available  the server blocks waiting for it after getting the file name  the server opens the file and enters a loop that alternately reads blocks from the file and writes them to the socket until the entire file has been copied then the server closes the file and the connection and waits for the next connection to show up it repeats this loop forever now let us look at the client code to understand how it works  it is necessary to understand how it is invoked assuming it is called client  a typical call is client flits.cs.vu.nl /usr/tom/filename > f this call only works if the server is already running on flits.cs.vu.nl and the file /usr/tom/filename exists and the server has read access to it if the call is successful  the file is transferred over the internet and written to f  after which the client program exits since the server continues after a transfer  the client can be started again and again to get other files the client code starts with some includes and declarations execution begins by checking to see if it has been called with the right number of arguments  argc = 3 means the program name plus two arguments   note that argv  1  contains the sec 6.1 the transport service 507 name of the server  e.g  flits.cs.vu.nl  and is converted to an ip address by gethostbyname this function uses dns to look up the name we will study dns in chap 7 next  a socket is created and initialized after that  the client attempts to establish a tcp connection to the server  using connect if the server is up and running on the named machine and attached to server port and is either idle or has room in its listen queue  the connection will  eventually  be established using the connection  the client sends the name of the file by writing on the socket the number of bytes sent is one larger than the name proper  since the 0 byte terminating the name must also be sent to tell the server where the name ends now the client enters a loop  reading the file block by block from the socket and copying it to standard output when it is done  it just exits the procedure fatal prints an error message and exits the server needs the same procedure  but it was omitted due to lack of space on the page since the client and server are compiled separately and normally run on different computers  they can not share the code of fatal these two programs  as well as other material related to this book  can be fetched from the book ? s web site http  //www.pearsonhighered.com/tanenbaum just for the record  this server is not the last word in serverdom its error checking is meager and its error reporting is mediocre since it handles all requests strictly sequentially  because it has only a single thread   its performance is poor it has clearly never heard about security  and using bare unix system calls is not the way to gain platform independence it also makes some assumptions that are technically illegal  such as assuming that the file name fits in the buffer and is transmitted atomically these shortcomings notwithstanding  it is a working internet file server in the exercises  the reader is invited to improve it for more information about programming with sockets  see donahoo and calvert  2008  2009   6.2 elements of transport protocols the transport service is implemented by a transport protocol used between the two transport entities in some ways  transport protocols resemble the data link protocols we studied in detail in chap 3 both have to deal with error control  sequencing  and flow control  among other issues however  significant differences between the two also exist these differences are due to major dissimilarities between the environments in which the two protocols operate  as shown in fig 6-7 at the data link layer  two routers 508 the transport layer chap 6 communicate directly via a physical channel  whether wired or wireless  whereas at the transport layer  this physical channel is replaced by the entire network this difference has many important implications for the protocols router router physical communication channel host  a   b  network figure 6-7  a  environment of the data link layer  b  environment of the transport layer for one thing  over point-to-point links such as wires or optical fiber  it is usually not necessary for a router to specify which router it wants to talk to ? each outgoing line leads directly to a particular router in the transport layer  explicit addressing of destinations is required for another thing  the process of establishing a connection over the wire of fig 6-7  a  is simple  the other end is always there  unless it has crashed  in which case it is not there   either way  there is not much to do even on wireless links  the process is not much different just sending a message is sufficient to have it reach all other destinations if the message is not acknowledged due to an error  it can be resent in the transport layer  initial connection establishment is complicated  as we will see another  exceedingly annoying  difference between the data link layer and the transport layer is the potential existence of storage capacity in the network when a router sends a packet over a link  it may arrive or be lost  but it can not bounce around for a while  go into hiding in a far corner of the world  and suddenly emerge after other packets that were sent much later if the network uses datagrams  which are independently routed inside  there is a nonnegligible probability that a packet may take the scenic route and arrive late and out of the expected order  or even that duplicates of the packet will arrive the consequences of the network ? s ability to delay and duplicate packets can sometimes be disastrous and can require the use of special protocols to correctly transport information a final difference between the data link and transport layers is one of degree rather than of kind buffering and flow control are needed in both layers  but the presence in the transport layer of a large and varying number of connections with bandwidth that fluctuates as the connections compete with each other may require a different approach than we used in the data link layer some of the protocols discussed in chap 3 allocate a fixed number of buffers to each line  so that when a frame arrives a buffer is always available in the transport layer  the larger number of connections that must be managed and variations in the bandwidth each sec 6.2 elements of transport protocols 509 connection may receive make the idea of dedicating many buffers to each one less attractive in the following sections  we will examine all of these important issues  and others 6.2.1 addressing when an application  e.g  a user  process wishes to set up a connection to a remote application process  it must specify which one to connect to  connectionless transport has the same problem  to whom should each message be sent ?  the method normally used is to define transport addresses to which processes can listen for connection requests in the internet  these endpoints are called ports we will use the generic term tsap  transport service access point  to mean a specific endpoint in the transport layer the analogous endpoints in the network layer  i.e  network layer addresses  are not-surprisingly called nsaps  network service access points   ip addresses are examples of nsaps figure 6-8 illustrates the relationship between the nsaps  the tsaps  and a transport connection application processes  both clients and servers  can attach themselves to a local tsap to establish a connection to a remote tsap these connections run through nsaps on each host  as shown the purpose of having tsaps is that in some networks  each computer has a single nsap  so some way is needed to distinguish multiple transport endpoints that share that nsap application process application layer transport connection tsap 1522 tsap 1208 nsap nsap transport layer network layer data link layer physical layer server 1 host 1 host 2 server 2 tsap1836 figure 6-8 tsaps  nsaps  and transport connections 510 the transport layer chap 6 a possible scenario for a transport connection is as follows  1 a mail server process attaches itself to tsap 1522 on host 2 to wait for an incoming call how a process attaches itself to a tsap is outside the networking model and depends entirely on the local operating system a call such as our listen might be used  for example 2 an application process on host 1 wants to send an email message  so it attaches itself to tsap 1208 and issues a connect request the request specifies tsap 1208 on host 1 as the source and tsap 1522 on host 2 as the destination this action ultimately results in a transport connection being established between the application process and the server 3 the application process sends over the mail message 4 the mail server responds to say that it will deliver the message 5 the transport connection is released note that there may well be other servers on host 2 that are attached to other tsaps and are waiting for incoming connections that arrive over the same nsap the picture painted above is fine  except we have swept one little problem under the rug  how does the user process on host 1 know that the mail server is attached to tsap 1522 ? one possibility is that the mail server has been attaching itself to tsap 1522 for years and gradually all the network users have learned this in this model  services have stable tsap addresses that are listed in files in well-known places for example  the /etc/services file on unix systems lists which servers are permanently attached to which ports  including the fact that the mail server is found on tcp port 25 while stable tsap addresses work for a small number of key services that never change  e.g  the web server   user processes  in general  often want to talk to other user processes that do not have tsap addresses that are known in advance  or that may exist for only a short time to handle this situation  an alternative scheme can be used in this scheme  there exists a special process called a portmapper to find the tsap address corresponding to a given service name  such as ? ? bittorrent  ? ? a user sets up a connection to the portmapper  which listens to a well-known tsap   the user then sends a message specifying the service name  and the portmapper sends back the tsap address then the user releases the connection with the portmapper and establishes a new one with the desired service in this model  when a new service is created  it must register itself with the portmapper  giving both its service name  typically  an ascii string  and its tsap the portmapper records this information in its internal database so that when queries come in later  it will know the answers sec 6.2 elements of transport protocols 511 the function of the portmapper is analogous to that of a directory assistance operator in the telephone system ? it provides a mapping of names onto numbers just as in the telephone system  it is essential that the address of the well-known tsap used by the portmapper is indeed well known if you do not know the number of the information operator  you can not call the information operator to find it out if you think the number you dial for information is obvious  try it in a foreign country sometime many of the server processes that can exist on a machine will be used only rarely it is wasteful to have each of them active and listening to a stable tsap address all day long an alternative scheme is shown in fig 6-9 in a simplified form it is known as the initial connection protocol instead of every conceivable server listening at a well-known tsap  each machine that wishes to offer services to remote users has a special process server that acts as a proxy for less heavily used servers this server is called inetd on unix systems it listens to a set of ports at the same time  waiting for a connection request potential users of a service begin by doing a connect request  specifying the tsap address of the service they want if no server is waiting for them  they get a connection to the process server  as shown in fig 6-9  a   layer 4 tsap mail server  a   b  host 1 host 2 host 1 host 2 process server user process user server figure 6-9 how a user process in host 1 establishes a connection with a mail server in host 2 via a process server after it gets the incoming request  the process server spawns the requested server  allowing it to inherit the existing connection with the user the new server 512 the transport layer chap 6 does the requested work  while the process server goes back to listening for new requests  as shown in fig 6-9  b   this method is only applicable when servers can be created on demand 6.2.2 connection establishment establishing a connection sounds easy  but it is actually surprisingly tricky at first glance  it would seem sufficient for one transport entity to just send a connection request segment to the destination and wait for a connection accepted reply the problem occurs when the network can lose  delay  corrupt  and duplicate packets this behavior causes serious complications imagine a network that is so congested that acknowledgements hardly ever get back in time and each packet times out and is retransmitted two or three times suppose that the network uses datagrams inside and that every packet follows a different route some of the packets might get stuck in a traffic jam inside the network and take a long time to arrive that is  they may be delayed in the network and pop out much later  when the sender thought that they had been lost the worst possible nightmare is as follows a user establishes a connection with a bank  sends messages telling the bank to transfer a large amount of money to the account of a not-entirely-trustworthy person unfortunately  the packets decide to take the scenic route to the destination and go off exploring a remote corner of the network the sender then times out and sends them all again this time the packets take the shortest route and are delivered quickly so the sender releases the connection unfortunately  eventually the initial batch of packets finally come out of hiding and arrive at the destination in order  asking the bank to establish a new connection and transfer money  again   the bank has no way of telling that these are duplicates it must assume that this is a second  independent transaction  and transfers the money again this scenario may sound unlikely  or even implausible but the point is this  protocols must be designed to be correct in all cases only the common cases need be implemented efficiently to obtain good network performance  but the protocol must be able to cope with the uncommon cases without breaking if it can not  we have built a fair-weather network that can fail without warning when the conditions get tough for the remainder of this section  we will study the problem of delayed duplicates  with emphasis on algorithms for establishing connections in a reliable way  so that nightmares like the one above can not happen the crux of the problem is that the delayed duplicates are thought to be new packets we can not prevent packets from being duplicated and delayed but if and when this happens  the packets must be rejected as duplicates and not processed as fresh packets the problem can be attacked in various ways  none of them very satisfactory one way is to use throwaway transport addresses in this approach  each time a sec 6.2 elements of transport protocols 513 transport address is needed  a new one is generated when a connection is released  the address is discarded and never used again delayed duplicate packets then never find their way to a transport process and can do no damage however  this approach makes it more difficult to connect with a process in the first place another possibility is to give each connection a unique identifier  i.e  a sequence number incremented for each connection established  chosen by the initiating party and put in each segment  including the one requesting the connection after each connection is released  each transport entity can update a table listing obsolete connections as  peer transport entity  connection identifier  pairs whenever a connection request comes in  it can be checked against the table to see if it belongs to a previously released connection unfortunately  this scheme has a basic flaw  it requires each transport entity to maintain a certain amount of history information indefinitely this history must persist at both the source and destination machines otherwise  if a machine crashes and loses its memory  it will no longer know which connection identifiers have already been used by its peers instead  we need to take a different tack to simplify the problem rather than allowing packets to live forever within the network  we devise a mechanism to kill off aged packets that are still hobbling about with this restriction  the problem becomes somewhat more manageable packet lifetime can be restricted to a known maximum using one  or more  of the following techniques  1 restricted network design 2 putting a hop counter in each packet 3 timestamping each packet the first technique includes any method that prevents packets from looping  combined with some way of bounding delay including congestion over the  now known  longest possible path it is difficult  given that internets may range from a single city to international in scope the second method consists of having the hop count initialized to some appropriate value and decremented each time the packet is forwarded the network protocol simply discards any packet whose hop counter becomes zero the third method requires each packet to bear the time it was created  with the routers agreeing to discard any packet older than some agreed-upon time this latter method requires the router clocks to be synchronized  which itself is a nontrivial task  and in practice a hop counter is a close enough approximation to age in practice  we will need to guarantee not only that a packet is dead  but also that all acknowledgements to it are dead  too  so we will now introduce a period t  which is some small multiple of the true maximum packet lifetime the maximum packet lifetime is a conservative constant for a network ; for the internet  it is somewhat arbitrarily taken to be 120 seconds the multiple is protocol dependent 514 the transport layer chap 6 and simply has the effect of making t longer if we wait a time t secs after a packet has been sent  we can be sure that all traces of it are now gone and that neither it nor its acknowledgements will suddenly appear out of the blue to complicate matters with packet lifetimes bounded  it is possible to devise a practical and foolproof way to reject delayed duplicate segments the method described below is due to tomlinson  1975   as refined by sunshine and dalal  1978   variants of it are widely used in practice  including in tcp the heart of the method is for the source to label segments with sequence numbers that will not be reused within t secs the period  t  and the rate of packets per second determine the size of the sequence numbers in this way  only one packet with a given sequence number may be outstanding at any given time duplicates of this packet may still occur  and they must be discarded by the destination however  it is no longer the case that a delayed duplicate of an old packet may beat a new packet with the same sequence number and be accepted by the destination in its stead to get around the problem of a machine losing all memory of where it was after a crash  one possibility is to require transport entities to be idle for t secs after a recovery the idle period will let all old segments die off  so the sender can start again with any sequence number however  in a complex internetwork  t may be large  so this strategy is unattractive instead  tomlinson proposed equipping each host with a time-of-day clock the clocks at different hosts need not be synchronized each clock is assumed to take the form of a binary counter that increments itself at uniform intervals furthermore  the number of bits in the counter must equal or exceed the number of bits in the sequence numbers last  and most important  the clock is assumed to continue running even if the host goes down when a connection is set up  the low-order k bits of the clock are used as the k-bit initial sequence number thus  unlike our protocols of chap 3  each connection starts numbering its segments with a different initial sequence number the sequence space should be so large that by the time sequence numbers wrap around  old segments with the same sequence number are long gone this linear relation between time and initial sequence numbers is shown in fig 6-10  a   the forbidden region shows the times for which segment sequence numbers are illegal leading up to their use if any segment is sent with a sequence number in this region  it could be delayed and impersonate a different packet with the same sequence number that will be issued slightly later for example  if the host crashes and restarts at time 70 seconds  it will use initial sequence numbers based on the clock to pick up after it left off ; the host does not start with a lower sequence number in the forbidden region once both transport entities have agreed on the initial sequence number  any sliding window protocol can be used for data flow control this window protocol will correctly find and discard duplicates of packets after they have already been sec 6.2 elements of transport protocols 515 120 80 70 60 0 30 60 90 time  a  time  b  0 120 150 180 sequence numbers sequence numbers restart after crash with 70 t t actual sequence numbers used 2k ? 1 forbidden region figure 6-10  a  segments may not enter the forbidden region  b  the resynchronization problem accepted in reality  the initial sequence number curve  shown by the heavy line  is not linear  but a staircase  since the clock advances in discrete steps for simplicity  we will ignore this detail to keep packet sequence numbers out of the forbidden region  we need to take care in two respects we can get into trouble in two distinct ways if a host sends too much data too fast on a newly opened connection  the actual sequence number versus time curve may rise more steeply than the initial sequence number versus time curve  causing the sequence number to enter the forbidden region to prevent this from happening  the maximum data rate on any connection is one segment per clock tick this also means that the transport entity must wait until the clock ticks before opening a new connection after a crash restart  lest the same number be used twice both of these points argue in favor of a short clock tick  1 ? sec or less   but the clock can not tick too fast relative to the sequence number for a clock rate of c and a sequence number space of size s  we must have s/c > t so that the sequence numbers can not wrap around too quickly entering the forbidden region from underneath by sending too fast is not the only way to get into trouble from fig 6-10  b   we see that at any data rate less than the clock rate  the curve of actual sequence numbers used versus time will eventually run into the forbidden region from the left as the sequence numbers wrap around the greater the slope of the actual sequence numbers  the longer this event will be delayed avoiding this situation limits how slowly sequence numbers can advance on a connection  or how long the connections may last   the clock-based method solves the problem of not being able to distinguish delayed duplicate segments from new segments however  there is a practical snag for using it for establishing connections since we do not normally remember sequence numbers across connections at the destination  we still have no way of 516 the transport layer chap 6 knowing if a connection request segment containing an initial sequence number is a duplicate of a recent connection this snag does not exist during a connection because the sliding window protocol does remember the current sequence number to solve this specific problem  tomlinson  1975  introduced the three-way handshake this establishment protocol involves one peer checking with the other that the connection request is indeed current the normal setup procedure when host 1 initiates is shown in fig 6-11  a   host 1 chooses a sequence number  x  and sends a connection request segment containing it to host 2 host 2 replies with an ack segment acknowledging x and announcing its own initial sequence number  y finally  host 1 acknowledges host 2 ? s choice of an initial sequence number in the first data segment that it sends now let us see how the three-way handshake works in the presence of delayed duplicate control segments in fig 6-11  b   the first segment is a delayed duplicate connection request from an old connection this segment arrives at host 2 without host 1 ? s knowledge host 2 reacts to this segment by sending host 1 an ack segment  in effect asking for verification that host 1 was indeed trying to set up a new connection when host 1 rejects host 2 ? s attempt to establish a connection  host 2 realizes that it was tricked by a delayed duplicate and abandons the connection in this way  a delayed duplicate does no damage the worst case is when both a delayed connection request and an ack are floating around in the subnet this case is shown in fig 6-11  c   as in the previous example  host 2 gets a delayed connection request and replies to it at this point  it is crucial to realize that host 2 has proposed using y as the initial sequence number for host 2 to host 1 traffic  knowing full well that no segments containing sequence number y or acknowledgements to y are still in existence when the second delayed segment arrives at host 2  the fact that z has been acknowledged rather than y tells host 2 that this  too  is an old duplicate the important thing to realize here is that there is no combination of old segments that can cause the protocol to fail and have a connection set up by accident when no one wants it tcp uses this three-way handshake to establish connections within a connection  a timestamp is used to extend the 32-bit sequence number so that it will not wrap within the maximum packet lifetime  even for gigabit-per-second connections this mechanism is a fix to tcp that was needed as it was used on faster and faster links it is described in rfc 1323 and called paws  protection against wrapped sequence numbers   across connections  for the initial sequence numbers and before paws can come into play  tcp originally used the clock-based scheme just described however  this turned out to have a security vulnerability the clock made it easy for an attacker to predict the next initial sequence number and send packets that tricked the three-way handshake and established a forged connection to close this hole  pseudorandom initial sequence numbers are used for connections in practice however  it remains important that sec 6.2 elements of transport protocols 517 time time time data  seq = x  ack = y  ack  seq = y  ack = x  cr  seq = x  host 1 host 2 reject  ack = y  data  seq = x  ack = z  ack  seq = y  ack = x  cr  seq = x  host 1 host 2 reject  ack = y  ack  seq = y  ack = x  cr  seq = x  host 1 host 2 old duplicate old duplicate old duplicate  a   b   c  figure 6-11 three protocol scenarios for establishing a connection using a three-way handshake cr denotes connection request  a  normal operation  b  old duplicate connection request appearing out of nowhere  c  duplicate connection request and duplicate ack the initial sequence numbers not repeat for an interval even though they appear random to an observer otherwise  delayed duplicates can wreak havoc 6.2.3 connection release releasing a connection is easier than establishing one nevertheless  there are more pitfalls than one might expect here as we mentioned earlier  there are two styles of terminating a connection  asymmetric release and symmetric release 518 the transport layer chap 6 asymmetric release is the way the telephone system works  when one party hangs up  the connection is broken symmetric release treats the connection as two separate unidirectional connections and requires each one to be released separately asymmetric release is abrupt and may result in data loss consider the scenario of fig 6-12 after the connection is established  host 1 sends a segment that arrives properly at host 2 then host 1 sends another segment unfortunately  host 2 issues a disconnect before the second segment arrives the result is that the connection is released and data are lost time cr data data host 1 host 2 ack dr no data are delivered after a disconnect request figure 6-12 abrupt disconnection with loss of data clearly  a more sophisticated release protocol is needed to avoid data loss one way is to use symmetric release  in which each direction is released independently of the other one here  a host can continue to receive data even after it has sent a disconnect segment symmetric release does the job when each process has a fixed amount of data to send and clearly knows when it has sent it in other situations  determining that all the work has been done and the connection should be terminated is not so obvious one can envision a protocol in which host 1 says ? ? i am done are you done too ? ? ? if host 2 responds  ? ? i am done too goodbye  the connection can be safely released ? ? unfortunately  this protocol does not always work there is a famous problem that illustrates this issue it is called the two-army problem imagine that a white army is encamped in a valley  as shown in fig 6-13 on both of the surrounding hillsides are blue armies the white army is larger than either of the blue armies alone  but together the blue armies are larger than the white army if either blue army attacks by itself  it will be defeated  but if the two blue armies attack simultaneously  they will be victorious the blue armies want to synchronize their attacks however  their only communication medium is to send messengers on foot down into the valley  where sec 6.2 elements of transport protocols 519 w b b white army blue army # 1 blue army # 2 figure 6-13 the two-army problem they might be captured and the message lost  i.e  they have to use an unreliable communication channel   the question is  does a protocol exist that allows the blue armies to win ? suppose that the commander of blue army # 1 sends a message reading  ? ? i propose we attack at dawn on march 29 how about it ? ? ? now suppose that the message arrives  the commander of blue army # 2 agrees  and his reply gets safely back to blue army # 1 will the attack happen ? probably not  because commander # 2 does not know if his reply got through if it did not  blue army # 1 will not attack  so it would be foolish for him to charge into battle now let us improve the protocol by making it a three-way handshake the initiator of the original proposal must acknowledge the response assuming no messages are lost  blue army # 2 will get the acknowledgement  but the commander of blue army # 1 will now hesitate after all  he does not know if his acknowledgement got through  and if it did not  he knows that blue army # 2 will not attack we could now make a four-way handshake protocol  but that does not help either in fact  it can be proven that no protocol exists that works suppose that some protocol did exist either the last message of the protocol is essential  or it is not if it is not  we can remove it  and any other unessential messages  until we are left with a protocol in which every message is essential what happens if the final message does not get through ? we just said that it was essential  so if it is lost  the attack does not take place since the sender of the final message can never be sure of its arrival  he will not risk attacking worse yet  the other blue army knows this  so it will not attack either to see the relevance of the two-army problem to releasing connections  rather than to military affairs  just substitute ? ? disconnect ? ? for ? ? attack ? ? if neither side is 520 the transport layer chap 6 prepared to disconnect until it is convinced that the other side is prepared to disconnect too  the disconnection will never happen in practice  we can avoid this quandary by foregoing the need for agreement and pushing the problem up to the transport user  letting each side independently decide when it is done this is an easier problem to solve figure 6-14 illustrates four scenarios of releasing using a three-way handshake while this protocol is not infallible  it is usually adequate in fig 6-14  a   we see the normal case in which one of the users sends a dr  disconnection request  segment to initiate the connection release when it arrives  the recipient sends back a dr segment and starts a timer  just in case its dr is lost when this dr arrives  the original sender sends back an ack segment and releases the connection finally  when the ack segment arrives  the receiver also releases the connection releasing a connection means that the transport entity removes the information about the connection from its table of currently open connections and signals the connection ? s owner  the transport user  somehow this action is different from a transport user issuing a disconnect primitive if the final ack segment is lost  as shown in fig 6-14  b   the situation is saved by the timer when the timer expires  the connection is released anyway now consider the case of the second dr being lost the user initiating the disconnection will not receive the expected response  will time out  and will start all over again in fig 6-14  c   we see how this works  assuming that the second time no segments are lost and all segments are delivered correctly and on time our last scenario  fig 6-14  d   is the same as fig 6-14  c  except that now we assume all the repeated attempts to retransmit the dr also fail due to lost segments after n retries  the sender just gives up and releases the connection meanwhile  the receiver times out and also exits while this protocol usually suffices  in theory it can fail if the initial dr and n retransmissions are all lost the sender will give up and release the connection  while the other side knows nothing at all about the attempts to disconnect and is still fully active this situation results in a half-open connection we could have avoided this problem by not allowing the sender to give up after n retries and forcing it to go on forever until it gets a response however  if the other side is allowed to time out  the sender will indeed go on forever  because no response will ever be forthcoming if we do not allow the receiving side to time out  the protocol hangs in fig 6-14  d   one way to kill off half-open connections is to have a rule saying that if no segments have arrived for a certain number of seconds  the connection is automatically disconnected that way  if one side ever disconnects  the other side will detect the lack of activity and also disconnect this rule also takes care of the case where the connection is broken  because the network can no longer deliver packets between the hosts  without either end disconnecting first of course  if this rule is introduced  it is necessary for each transport entity to have a timer that is stopped and then restarted whenever a segment is sent if this timer expires  a sec 6.2 elements of transport protocols 521 dr ack ack host 1 host 2 dr dr send dr + start timer send dr + start timer send ack release connection  timeout  release connection  timeout  release connection  n timeouts  release connection  timeout  send dr + start timer release connection dr dr host 1 host 2 dr send dr + start timer send dr & start timer send dr & start timer send dr & start timer send ack release connection release connection dr ack host 1 host 2 dr send dr + start timer send dr + start timer send ack release connection lost lost  timeout  send dr + start timer dr host 1 host 2 send dr + start timer lost lost  a   b   c   d  figure 6-14 four protocol scenarios for releasing a connection  a  normal case of three-way handshake  b  final ack lost  c  response lost  d  response lost and subsequent drs lost dummy segment is transmitted  just to keep the other side from disconnecting on the other hand  if the automatic disconnect rule is used and too many dummy segments in a row are lost on an otherwise idle connection  first one side  then the other will automatically disconnect we will not belabor this point any more  but by now it should be clear that releasing a connection without data loss is not nearly as simple as it first appears the lesson here is that the transport user must be involved in deciding when to 522 the transport layer chap 6 disconnect ? the problem can not be cleanly solved by the transport entities themselves to see the importance of the application  consider that while tcp normally does a symmetric close  with each side independently closing its half of the connection with a fin packet when it has sent its data   many web servers send the client a rst packet that causes an abrupt close of the connection that is more like an asymmetric close this works only because the web server knows the pattern of data exchange first it receives a request from the client  which is all the data the client will send  and then it sends a response to the client when the web server is finished with its response  all of the data has been sent in either direction the server can send the client a warning and abruptly shut the connection if the client gets this warning  it will release its connection state then and there if the client does not get the warning  it will eventually realize that the server is no longer talking to it and release the connection state the data has been successfully transferred in either case 6.2.4 error control and flow control having examined connection establishment and release in some detail  let us now look at how connections are managed while they are in use the key issues are error control and flow control error control is ensuring that the data is delivered with the desired level of reliability  usually that all of the data is delivered without any errors flow control is keeping a fast transmitter from overrunning a slow receiver both of these issues have come up before  when we studied the data link layer the solutions that are used at the transport layer are the same mechanisms that we studied in chap 3 as a very brief recap  1 a frame carries an error-detecting code  e.g  a crc or checksum  that is used to check if the information was correctly received 2 a frame carries a sequence number to identify itself and is retransmitted by the sender until it receives an acknowledgement of successful receipt from the receiver this is called arq  automatic repeat request   3 there is a maximum number of frames that the sender will allow to be outstanding at any time  pausing if the receiver is not acknowledging frames quickly enough if this maximum is one packet the protocol is called stop-and-wait larger windows enable pipelining and improve performance on long  fast links 4 the sliding window protocol combines these features and is also used to support bidirectional data transfer given that these mechanisms are used on frames at the link layer  it is natural to wonder why they would be used on segments at the transport layer as well sec 6.2 elements of transport protocols 523 however  there is little duplication between the link and transport layers in practice even though the same mechanisms are used  there are differences in function and degree for a difference in function  consider error detection the link layer checksum protects a frame while it crosses a single link the transport layer checksum protects a segment while it crosses an entire network path it is an end-to-end check  which is not the same as having a check on every link saltzer et al  1984  describe a situation in which packets were corrupted inside a router the link layer checksums protected the packets only while they traveled across a link  not while they were inside the router thus  packets were delivered incorrectly even though they were correct according to the checks on every link this and other examples led saltzer et al to articulate the end-to-end argument according to this argument  the transport layer check that runs end-to-end is essential for correctness  and the link layer checks are not essential but nonetheless valuable for improving performance  since without them a corrupted packet can be sent along the entire path unnecessarily   as a difference in degree  consider retransmissions and the sliding window protocol most wireless links  other than satellite links  can have only a single frame outstanding from the sender at a time that is  the bandwidth-delay product for the link is small enough that not even a whole frame can be stored inside the link in this case  a small window size is sufficient for good performance for example  802.11 uses a stop-and-wait protocol  transmitting or retransmitting each frame and waiting for it to be acknowledged before moving on to the next frame having a window size larger than one frame would add complexity without improving performance for wired and optical fiber links  such as  switched  ethernet or isp backbones  the error-rate is low enough that link-layer retransmissions can be omitted because the end-to-end retransmissions will repair the residual frame loss on the other hand  many tcp connections have a bandwidth-delay product that is much larger than a single segment consider a connection sending data across the u.s at 1 mbps with a round-trip time of 100 msec even for this slow connection  200 kbit of data will be stored at the receiver in the time it takes to send a segment and receive an acknowledgement for these situations  a large sliding window must be used stop-and-wait will cripple performance in our example it would limit performance to one segment every 200 msec  or 5 segments/ sec no matter how fast the network really is given that transport protocols generally use larger sliding windows  we will look at the issue of buffering data more carefully since a host may have many connections  each of which is treated separately  it may need a substantial amount of buffering for the sliding windows the buffers are needed at both the sender and the receiver certainly they are needed at the sender to hold all transmitted but as yet unacknowledged segments they are needed there because these segments may be lost and need to be retransmitted 524 the transport layer chap 6 however  since the sender is buffering  the receiver may or may not dedicate specific buffers to specific connections  as it sees fit the receiver may  for example  maintain a single buffer pool shared by all connections when a segment comes in  an attempt is made to dynamically acquire a new buffer if one is available  the segment is accepted ; otherwise  it is discarded since the sender is prepared to retransmit segments lost by the network  no permanent harm is done by having the receiver drop segments  although some resources are wasted the sender just keeps trying until it gets an acknowledgement the best trade-off between source buffering and destination buffering depends on the type of traffic carried by the connection for low-bandwidth bursty traffic  such as that produced by an interactive terminal  it is reasonable not to dedicate any buffers  but rather to acquire them dynamically at both ends  relying on buffering at the sender if segments must occasionally be discarded on the other hand  for file transfer and other high-bandwidth traffic  it is better if the receiver does dedicate a full window of buffers  to allow the data to flow at maximum speed this is the strategy that tcp uses there still remains the question of how to organize the buffer pool if most segments are nearly the same size  it is natural to organize the buffers as a pool of identically sized buffers  with one segment per buffer  as in fig 6-15  a   however  if there is wide variation in segment size  from short requests for web pages to large packets in peer-to-peer file transfers  a pool of fixed-sized buffers presents problems if the buffer size is chosen to be equal to the largest possible segment  space will be wasted whenever a short segment arrives if the buffer size is chosen to be less than the maximum segment size  multiple buffers will be needed for long segments  with the attendant complexity another approach to the buffer size problem is to use variable-sized buffers  as in fig 6-15  b   the advantage here is better memory utilization  at the price of more complicated buffer management a third possibility is to dedicate a single large circular buffer per connection  as in fig 6-15  c   this system is simple and elegant and does not depend on segment sizes  but makes good use of memory only when the connections are heavily loaded as connections are opened and closed and as the traffic pattern changes  the sender and receiver need to dynamically adjust their buffer allocations consequently  the transport protocol should allow a sending host to request buffer space at the other end buffers could be allocated per connection  or collectively  for all the connections running between the two hosts alternatively  the receiver  knowing its buffer situation  but not knowing the offered traffic  could tell the sender ? ? i have reserved x buffers for you ? ? if the number of open connections should increase  it may be necessary for an allocation to be reduced  so the protocol should provide for this possibility a reasonably general way to manage dynamic buffer allocation is to decouple the buffering from the acknowledgements  in contrast to the sliding window protocols of chap 3 dynamic buffer management means  in effect  a variable-sized sec 6.2 elements of transport protocols 525 segment 1 segment 2 segment 3 segment 4  a   b   c  unused space figure 6-15  a  chained fixed-size buffers  b  chained variable-sized buffers  c  one large circular buffer per connection window initially  the sender requests a certain number of buffers  based on its expected needs the receiver then grants as many of these as it can afford every time the sender transmits a segment  it must decrement its allocation  stopping altogether when the allocation reaches zero the receiver separately piggybacks both acknowledgements and buffer allocations onto the reverse traffic tcp uses this scheme  carrying buffer allocations in a header field called window size figure 6-16 shows an example of how dynamic window management might work in a datagram network with 4-bit sequence numbers in this example  data flows in segments from host a to host b and acknowledgements and buffer allocations flow in segments in the reverse direction initially  a wants eight buffers  but it is granted only four of these it then sends three segments  of which the third is lost segment 6 acknowledges receipt of all segments up to and including sequence number 1  thus allowing a to release those buffers  and furthermore informs a that it has permission to send three more segments starting beyond 1  i.e  segments 2  3  and 4   a knows that it has already sent number 2  so it thinks that it may send segments 3 and 4  which it proceeds to do at this point it is blocked and must wait for more buffer allocation timeout-induced retransmissions  line 9   however  may occur while blocked  since they use buffers that have already been allocated in line 10  b acknowledges receipt of all segments up to and including 4 but refuses to let a continue such a situation is impossible with the fixed-window protocols of chap 3 the next segment from b to a allocates 526 the transport layer chap 6 another buffer and allows a to continue this will happen when b has buffer space  likely because the transport user has accepted more segment data 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 < request 8 buffers > < ack = 15  buf = 4 > < seq = 0  data = m0 > < seq = 1  data = m1 > < seq = 2  data = m2 > < ack = 1  buf = 3 > < seq = 3  data = m3 > < seq = 4  data = m4 > < seq = 2  data = m2 > < ack = 4  buf = 0 > < ack = 4  buf = 1 > < ack = 4  buf = 2 > < seq = 5  data = m5 > < seq = 6  data = m6 > < ack = 6  buf = 0 > < ack = 6  buf = 4 > a wants 8 buffers b grants messages 0-3 only a has 3 buffers left now a has 2 buffers left now message lost but a thinks it has 1 left b acknowledges 0 and 1  permits 2-4 a has 1 buffer left a has 0 buffers left  and must stop a times out and retransmits everything acknowledged  but a still blocked a may now send 5 b found a new buffer somewhere a has 1 buffer left a is now blocked again a is still blocked potential deadlock a message b comments figure 6-16 dynamic buffer allocation the arrows show the direction of transmission an ellipsis    indicates a lost segment problems with buffer allocation schemes of this kind can arise in datagram networks if control segments can get lost ? which they most certainly can look at line 16 b has now allocated more buffers to a  but the allocation segment was lost oops since control segments are not sequenced or timed out  a is now deadlocked to prevent this situation  each host should periodically send control segments giving the acknowledgement and buffer status on each connection that way  the deadlock will be broken  sooner or later until now we have tacitly assumed that the only limit imposed on the sender ? s data rate is the amount of buffer space available in the receiver this is often not the case memory was once expensive but prices have fallen dramatically hosts may be equipped with sufficient memory that the lack of buffers is rarely  if ever  a problem  even for wide area connections of course  this depends on the buffer size being set to be large enough  which has not always been the case for tcp  zhang et al  2002   when buffer space no longer limits the maximum flow  another bottleneck will appear  the carrying capacity of the network if adjacent routers can exchange at most x packets/sec and there are k disjoint paths between a pair of hosts  there is no way that those hosts can exchange more than kx segments/sec  no matter how much buffer space is available at each end if the sender pushes too hard sec 6.2 elements of transport protocols 527  i.e  sends more than kx segments/sec   the network will become congested because it will be unable to deliver segments as fast as they are coming in what is needed is a mechanism that limits transmissions from the sender based on the network ? s carrying capacity rather than on the receiver ? s buffering capacity belsnes  1975  proposed using a sliding window flow-control scheme in which the sender dynamically adjusts the window size to match the network ? s carrying capacity this means that a dynamic sliding window can implement both flow control and congestion control if the network can handle c segments/sec and the round-trip time  including transmission  propagation  queueing  processing at the receiver  and return of the acknowledgement  is r  the sender ? s window should be cr with a window of this size  the sender normally operates with the pipeline full any small decrease in network performance will cause it to block since the network capacity available to any given flow varies over time  the window size should be adjusted frequently  to track changes in the carrying capacity as we will see later  tcp uses a similar scheme 6.2.5 multiplexing multiplexing  or sharing several conversations over connections  virtual circuits  and physical links plays a role in several layers of the network architecture in the transport layer  the need for multiplexing can arise in a number of ways for example  if only one network address is available on a host  all transport connections on that machine have to use it when a segment comes in  some way is needed to tell which process to give it to this situation  called multiplexing  is shown in fig 6-17  a   in this figure  four distinct transport connections all use the same network connection  e.g  ip address  to the remote host multiplexing can also be useful in the transport layer for another reason suppose  for example  that a host has multiple network paths that it can use if a user needs more bandwidth or more reliability than one of the network paths can provide  a way out is to have a connection that distributes the traffic among multiple network paths on a round-robin basis  as indicated in fig 6-17  b   this modus operandi is called inverse multiplexing with k network connections open  the effective bandwidth might be increased by a factor of k an example of inverse multiplexing is sctp  stream control transmission protocol   which can run a connection using multiple network interfaces in contrast  tcp uses a single network endpoint inverse multiplexing is also found at the link layer  when several low-rate links are used in parallel as one high-rate link 6.2.6 crash recovery if hosts and routers are subject to crashes or connections are long-lived  e.g  large software or media downloads   recovery from these crashes becomes an issue if the transport entity is entirely within the hosts  recovery from network 528 the transport layer chap 6 layer 4 3 2 1 to router router lines transport address network address  a   b  figure 6-17  a  multiplexing  b  inverse multiplexing and router crashes is straightforward the transport entities expect lost segments all the time and know how to cope with them by using retransmissions a more troublesome problem is how to recover from host crashes in particular  it may be desirable for clients to be able to continue working when servers crash and quickly reboot to illustrate the difficulty  let us assume that one host  the client  is sending a long file to another host  the file server  using a simple stop-and-wait protocol the transport layer on the server just passes the incoming segments to the transport user  one by one partway through the transmission  the server crashes when it comes back up  its tables are reinitialized  so it no longer knows precisely where it was in an attempt to recover its previous status  the server might send a broadcast segment to all other hosts  announcing that it has just crashed and requesting that its clients inform it of the status of all open connections each client can be in one of two states  one segment outstanding  s1  or no segments outstanding  s0 based on only this state information  the client must decide whether to retransmit the most recent segment at first glance  it would seem obvious  the client should retransmit if and only if it has an unacknowledged segment outstanding  i.e  is in state s1  when it learns of the crash however  a closer inspection reveals difficulties with this naive approach consider  for example  the situation in which the server ? s transport entity first sends an acknowledgement and then  when the acknowledgement has been sent  writes to the application process writing a segment onto the output stream and sending an acknowledgement are two distinct events that can not be done simultaneously if a crash occurs after the acknowledgement has been sent but before the write has been fully completed  the client will receive the sec 6.2 elements of transport protocols 529 acknowledgement and thus be in state s0 when the crash recovery announcement arrives the client will therefore not retransmit   incorrectly  thinking that the segment has arrived this decision by the client leads to a missing segment at this point you may be thinking  ? ? that problem can be solved easily all you have to do is reprogram the transport entity to first do the write and then send the acknowledgement ? ? try again imagine that the write has been done but the crash occurs before the acknowledgement can be sent the client will be in state s1 and thus retransmit  leading to an undetected duplicate segment in the output stream to the server application process no matter how the client and server are programmed  there are always situations where the protocol fails to recover properly the server can be programmed in one of two ways  acknowledge first or write first the client can be programmed in one of four ways  always retransmit the last segment  never retransmit the last segment  retransmit only in state s0  or retransmit only in state s1 this gives eight combinations  but as we shall see  for each combination there is some set of events that makes the protocol fail three events are possible at the server  sending an acknowledgement  a   writing to the output process  w   and crashing  c   the three events can occur in six different orderings  ac  w   awc  c  aw   c  wa   wac  and wc  a   where the parentheses are used to indicate that neither a nor w can follow c  i.e  once it has crashed  it has crashed   figure 6-18 shows all eight combinations of client and server strategies and the valid event sequences for each one notice that for each strategy there is some sequence of events that causes the protocol to fail for example  if the client always retransmits  the awc event will generate an undetected duplicate  even though the other two events work properly always retransmit ok dup ok lost ok lost ok dup lost lost ok ok never retransmit retransmit in s0 retransmit in s1 ac  w  strategy used by sending host awc first ack  then write first write  then ack c  aw  ok dup dup lost ok ok lost dup ok ok ok dup c  wa  w ac wc  a  ok = protocol functions correctly dup = protocol generates a duplicate message lost = protocol loses a message strategy used by receiving host figure 6-18 different combinations of client and server strategies 530 the transport layer chap 6 making the protocol more elaborate does not help even if the client and server exchange several segments before the server attempts to write  so that the client knows exactly what is about to happen  the client has no way of knowing whether a crash occurred just before or just after the write the conclusion is inescapable  under our ground rules of no simultaneous events ? that is  separate events happen one after another not at the same time ? host crash and recovery can not be made transparent to higher layers put in more general terms  this result can be restated as ? ? recovery from a layer n crash can only be done by layer n ? ? 1  ? ? and then only if the higher layer retains enough status information to reconstruct where it was before the problem occurred this is consistent with the case mentioned above that the transport layer can recover from failures in the network layer  provided that each end of a connection keeps track of where it is this problem gets us into the issue of what a so-called end-to-end acknowledgement really means in principle  the transport protocol is end-to-end and not chained like the lower layers now consider the case of a user entering requests for transactions against a remote database suppose that the remote transport entity is programmed to first pass segments to the next layer up and then acknowledge even in this case  the receipt of an acknowledgement back at the user ? s machine does not necessarily mean that the remote host stayed up long enough to actually update the database a truly end-to-end acknowledgement  whose receipt means that the work has actually been done and lack thereof means that it has not  is probably impossible to achieve this point is discussed in more detail by saltzer et al  1984   6.3 congestion control if the transport entities on many machines send too many packets into the network too quickly  the network will become congested  with performance degraded as packets are delayed and lost controlling congestion to avoid this problem is the combined responsibility of the network and transport layers congestion occurs at routers  so it is detected at the network layer however  congestion is ultimately caused by traffic sent into the network by the transport layer the only effective way to control congestion is for the transport protocols to send packets into the network more slowly in chap 5  we studied congestion control mechanisms in the network layer in this section  we will study the other half of the problem  congestion control mechanisms in the transport layer after describing the goals of congestion control  we will describe how hosts can regulate the rate at which they send packets into the network the internet relies heavily on the transport layer for congestion control  and specific algorithms are built into tcp and other protocols sec 6.3 congestion control 531 6.3.1 desirable bandwidth allocation before we describe how to regulate traffic  we must understand what we are trying to achieve by running a congestion control algorithm that is  we must specify the state in which a good congestion control algorithm will operate the network the goal is more than to simply avoid congestion it is to find a good allocation of bandwidth to the transport entities that are using the network a good allocation will deliver good performance because it uses all the available bandwidth but avoids congestion  it will be fair across competing transport entities  and it will quickly track changes in traffic demands we will make each of these criteria more precise in turn efficiency and power an efficient allocation of bandwidth across transport entities will use all of the network capacity that is available however  it is not quite right to think that if there is a 100-mbps link  five transport entities should get 20 mbps each they should usually get less than 20 mbps for good performance the reason is that the traffic is often bursty recall that in sec 5.3 we described the goodput  or rate of useful packets arriving at the receiver  as a function of the offered load this curve and a matching curve for the delay as a function of the offered load are given in fig 6-19 capacity  a  offered load  packets/sec  congestion collapse offered load  packets/sec  goodput  packets/sec  desired response delay  seconds   b  onset of congestion figure 6-19  a  goodput and  b  delay as a function of offered load as the load increases in fig 6-19  a  goodput initially increases at the same rate  but as the load approaches the capacity  goodput rises more gradually this falloff is because bursts of traffic can occasionally mount up and cause some losses at buffers inside the network if the transport protocol is poorly designed and retransmits packets that have been delayed but not lost  the network can enter congestion collapse in this state  senders are furiously sending packets  but increasingly little useful work is being accomplished 532 the transport layer chap 6 the corresponding delay is given in fig 6-19  b  initially the delay is fixed  representing the propagation delay across the network as the load approaches the capacity  the delay rises  slowly at first and then much more rapidly this is again because of bursts of traffic that tend to mound up at high load the delay can not really go to infinity  except in a model in which the routers have infinite buffers instead  packets will be lost after experiencing the maximum buffering delay for both goodput and delay  performance begins to degrade at the onset of congestion intuitively  we will obtain the best performance from the network if we allocate bandwidth up until the delay starts to climb rapidly this point is below the capacity to identify it  kleinrock  1979  proposed the metric of power  where power ? delay load power will initially rise with offered load  as delay remains small and roughly constant  but will reach a maximum and fall as delay grows rapidly the load with the highest power represents an efficient load for the transport entity to place on the network max-min fairness in the preceding discussion  we did not talk about how to divide bandwidth between different transport senders this sounds like a simple question to answer ? give all the senders an equal fraction of the bandwidth ? but it involves several considerations perhaps the first consideration is to ask what this problem has to do with congestion control after all  if the network gives a sender some amount of bandwidth to use  the sender should just use that much bandwidth however  it is often the case that networks do not have a strict bandwidth reservation for each flow or connection they may for some flows if quality of service is supported  but many connections will seek to use whatever bandwidth is available or be lumped together by the network under a common allocation for example  ietf ? s differentiated services separates traffic into two classes and connections compete for bandwidth within each class ip routers often have all connections competing for the same bandwidth in this situation  it is the congestion control mechanism that is allocating bandwidth to the competing connections a second consideration is what a fair portion means for flows in a network it is simple enough if n flows use a single link  in which case they can all have 1/n of the bandwidth  although efficiency will dictate that they use slightly less if the traffic is bursty   but what happens if the flows have different  but overlapping  network paths ? for example  one flow may cross three links  and the other flows may cross one link the three-link flow consumes more network resources it might be fairer in some sense to give it less bandwidth than the one-link flows it sec 6.3 congestion control 533 should certainly be possible to support more one-link flows by reducing the bandwidth of the three-link flow this point demonstrates an inherent tension between fairness and efficiency however  we will adopt a notion of fairness that does not depend on the length of the network path even with this simple model  giving connections an equal fraction of bandwidth is a bit complicated because different connections will take different paths through the network and these paths will themselves have different capacities in this case  it is possible for a flow to be bottlenecked on a downstream link and take a smaller portion of an upstream link than other flows ; reducing the bandwidth of the other flows would slow them down but would not help the bottlenecked flow at all the form of fairness that is often desired for network usage is max-min fairness an allocation is max-min fair if the bandwidth given to one flow can not be increased without decreasing the bandwidth given to another flow with an allocation that is no larger that is  increasing the bandwidth of a flow will only make the situation worse for flows that are less well off let us see an example a max-min fair allocation is shown for a network with four flows  a  b  c  and d  in fig 6-20 each of the links between routers has the same capacity  taken to be 1 unit  though in the general case the links will have different capacities three flows compete for the bottom-left link between routers r4 and r5 each of these flows therefore gets 1/3 of the link the remaining flow  a  competes with b on the link from r2 to r3 since b has an allocation of 1/3  a gets the remaining 2/3 of the link notice that all of the other links have spare capacity however  this capacity can not be given to any of the flows without decreasing the capacity of another  lower flow for example  if more of the bandwidth on the link between r2 and r3 is given to flow b  there will be less for flow a this is reasonable as flow a already has more bandwidth however  the capacity of flow c or d  or both  must be decreased to give more bandwidth to b  and these flows will have less bandwidth than b thus  the allocation is max-min fair 1/3 r1 r2 d c b a 1/3 2/3 1/3 1/3 1/3 1/3 d c b a r4 r3 r5 r6 2/3 1/3 figure 6-20 max-min bandwidth allocation for four flows max-min allocations can be computed given a global knowledge of the network an intuitive way to think about them is to imagine that the rate for all of the 534 the transport layer chap 6 flows starts at zero and is slowly increased when the rate reaches a bottleneck for any flow  then that flow stops increasing the other flows all continue to increase  sharing equally in the available capacity  until they too reach their respective bottlenecks a third consideration is the level over which to consider fairness a network could be fair at the level of connections  connections between a pair of hosts  or all connections per host we examined this issue when we were discussing wfq  weighted fair queueing  in sec 5.4 and concluded that each of these definitions has its problems for example  defining fairness per host means that a busy server will fare no better than a mobile phone  while defining fairness per connection encourages hosts to open more connections given that there is no clear answer  fairness is often considered per connection  but precise fairness is usually not a concern it is more important in practice that no connection be starved of bandwidth than that all connections get precisely the same amount of bandwidth in fact  with tcp it is possible to open multiple connections and compete for bandwidth more aggressively this tactic is used by bandwidth-hungry applications such as bittorrent for peer-to-peer file sharing convergence a final criterion is that the congestion control algorithm converge quickly to a fair and efficient allocation of bandwidth the discussion of the desirable operating point above assumes a static network environment however  connections are always coming and going in a network  and the bandwidth needed by a given connection will vary over time too  for example  as a user browses web pages and occasionally downloads large videos because of the variation in demand  the ideal operating point for the network varies over time a good congestion control algorithm should rapidly converge to the ideal operating point  and it should track that point as it changes over time if the convergence is too slow  the algorithm will never be close to the changing operating point if the algorithm is not stable  it may fail to converge to the right point in some cases  or even oscillate around the right point an example of a bandwidth allocation that changes over time and converges quickly is shown in fig 6-21 initially  flow 1 has all of the bandwidth one second later  flow 2 starts it needs bandwidth as well the allocation quickly changes to give each of these flows half the bandwidth at 4 seconds  a third flow joins however  this flow uses only 20 % of the bandwidth  which is less than its fair share  which is a third   flows 1 and 2 quickly adjust  dividing the available bandwidth to each have 40 % of the bandwidth at 9 seconds  the second flow leaves  and the third flow remains unchanged the first flow quickly captures 80 % of the bandwidth at all times  the total allocated bandwidth is approximately 100 %  so that the network is fully used  and competing flows get equal treatment  but do not have to use more bandwidth than they need   sec 6.3 congestion control 535 flow 1 0.5 time  secs  bandwidth allocation 0 1 1 4 9 flow 3 flow 2 stops flow 2 starts figure 6-21 changing bandwidth allocation over time 6.3.2 regulating the sending rate now it is time for the main course how do we regulate the sending rates to obtain a desirable bandwidth allocation ? the sending rate may be limited by two factors the first is flow control  in the case that there is insufficient buffering at the receiver the second is congestion  in the case that there is insufficient capacity in the network in fig 6-22  we see this problem illustrated hydraulically in fig 6-22  a   we see a thick pipe leading to a small-capacity receiver this is a flow-control limited situation as long as the sender does not send more water than the bucket can contain  no water will be lost in fig 6-22  b   the limiting factor is not the bucket capacity  but the internal carrying capacity of the network if too much water comes in too fast  it will back up and some will be lost  in this case  by overflowing the funnel   these cases may appear similar to the sender  as transmitting too fast causes packets to be lost however  they have different causes and call for different solutions we have already talked about a flow-control solution with a variable-sized window now we will consider a congestion control solution since either of these problems can occur  the transport protocol will in general need to run both solutions and slow down if either problem occurs the way that a transport protocol should regulate the sending rate depends on the form of the feedback returned by the network different network layers may return different kinds of feedback the feedback may be explicit or implicit  and it may be precise or imprecise an example of an explicit  precise design is when routers tell the sources the rate at which they may send designs in the literature such as xcp  explicit congestion protocol  operate in this manner  katabi et al  2002   an explicit  imprecise design is the use of ecn  explicit congestion notification  with tcp in this design  routers set bits on packets that experience congestion to warn the senders to slow down  but they do not tell them how much to slow down 536 the transport layer chap 6 transmission rate adjustment transmission network internal congestion small-capacity receiver large-capacity receiver  a   b  figure 6-22  a  a fast network feeding a low-capacity receiver  b  a slow network feeding a high-capacity receiver in other designs  there is no explicit signal fast tcp measures the roundtrip delay and uses that metric as a signal to avoid congestion  wei et al  2006   finally  in the form of congestion control most prevalent in the internet today  tcp with drop-tail or red routers  packet loss is inferred and used to signal that the network has become congested there are many variants of this form of tcp  including cubic tcp  which is used in linux  ha et al  2008   combinations are also possible for example  windows includes compound tcp that uses both packet loss and delay as feedback signals  tan et al  2006   these designs are summarized in fig 6-23 if an explicit and precise signal is given  the transport entity can use that signal to adjust its rate to the new operating point for example  if xcp tells senders the rate to use  the senders may simply use that rate in the other cases  however  some guesswork is involved in the absence of a congestion signal  the senders should decrease their rates when a congestion signal is given  the senders should decrease their rates the way in which the rates are increased or decreased is given by a control law these laws have a major effect on performance sec 6.3 congestion control 537 protocol signal explicit ? precise ? xcp rate to use yes yes tcp with ecn congestion warning yes no fast tcp end-to-end delay no yes compound tcp packet loss & end-to-end delay no yes cubic tcp packet loss no no tcp packet loss no no figure 6-23 signals of some congestion control protocols chiu and jain  1989  studied the case of binary congestion feedback and concluded that aimd  additive increase multiplicative decrease  is the appropriate control law to arrive at the efficient and fair operating point to argue this case  they constructed a graphical argument for the simple case of two connections competing for the bandwidth of a single link the graph in fig 6-24 shows the bandwidth allocated to user 1 on the x-axis and to user 2 on the y-axis when the allocation is fair  both users will receive the same amount of bandwidth this is shown by the dotted fairness line when the allocations sum to 100 %  the capacity of the link  the allocation is efficient this is shown by the dotted efficiency line a congestion signal is given by the network to both users when the sum of their allocations crosses this line the intersection of these lines is the desired operating point  when both users have the same bandwidth and all of the network bandwidth is used additive increase and decrease user 1 ? s bandwidth fairness line efficiency line optimal point user 2 ? s bandwidth 0 multiplicative increase and decrease 100 % 100 % figure 6-24 additive and multiplicative bandwidth adjustments consider what happens from some starting allocation if both user 1 and user 2 additively increase their respective bandwidths over time for example  the users may each increase their sending rate by 1 mbps every second eventually  the 538 the transport layer chap 6 operating point crosses the efficiency line and both users receive a congestion signal from the network at this stage  they must reduce their allocations however  an additive decrease would simply cause them to oscillate along an additive line this situation is shown in fig 6-24 the behavior will keep the operating point close to efficient  but it will not necessarily be fair similarly  consider the case when both users multiplicatively increase their bandwidth over time until they receive a congestion signal for example  the users may increase their sending rate by 10 % every second if they then multiplicatively decrease their sending rates  the operating point of the users will simply oscillate along a multiplicative line this behavior is also shown in fig 6-24 the multiplicative line has a different slope than the additive line  it points to the origin  while the additive line has an angle of 45 degrees  but it is otherwise no better in neither case will the users converge to the optimal sending rates that are both fair and efficient now consider the case that the users additively increase their bandwidth allocations and then multiplicatively decrease them when congestion is signaled this behavior is the aimd control law  and it is shown in fig 6-25 it can be seen that the path traced by this behavior does converge to the optimal point that is both fair and efficient this convergence happens no matter what the starting point  making aimd broadly useful by the same argument  the only other combination  multiplicative increase and additive decrease  would diverge from the optimal point start user 1 ? s bandwidth 100 % fairness line efficiency line optimal point user 2 ? s bandwidth = additive increase  up at 45  = multiplicative decrease  line points to origin  legend  100 % 0 0 figure 6-25 additive increase multiplicative decrease  aimd  control law aimd is the control law that is used by tcp  based on this argument and another stability argument  that it is easy to drive the network into congestion and difficult to recover  so the increase policy should be gentle and the decrease policy aggressive   it is not quite fair  since tcp connections adjust their window size by a given amount every round-trip time different connections will have different round-trip times this leads to a bias in which connections to closer hosts receive more bandwidth than connections to distant hosts  all else being equal sec 6.3 congestion control 539 in sec 6.5  we will describe in detail how tcp implements an aimd control law to adjust the sending rate and provide congestion control this task is more difficult than it sounds because rates are measured over some interval and traffic is bursty instead of adjusting the rate directly  a strategy that is often used in practice is to adjust the size of a sliding window tcp uses this strategy if the window size is w and the round-trip time is rtt  the equivalent rate is w/rtt this strategy is easy to combine with flow control  which already uses a window  and has the advantage that the sender paces packets using acknowledgements and hence slows down in one rtt if it stops receiving reports that packets are leaving the network as a final issue  there may be many different transport protocols that send traffic into the network what will happen if the different protocols compete with different control laws to avoid congestion ? unequal bandwidth allocations  that is what since tcp is the dominant form of congestion control in the internet  there is significant community pressure for new transport protocols to be designed so that they compete fairly with it the early streaming media protocols caused problems by excessively reducing tcp throughput because they did not compete fairly this led to the notion of tcp-friendly congestion control in which tcp and non-tcp transport protocols can be freely mixed with no ill effects  floyd et al  2000   6.3.3 wireless issues transport protocols such as tcp that implement congestion control should be independent of the underlying network and link layer technologies that is a good theory  but in practice there are issues with wireless networks the main issue is that packet loss is often used as a congestion signal  including by tcp as we have just discussed wireless networks lose packets all the time due to transmission errors with the aimd control law  high throughput requires very small levels of packet loss analyses by padhye et al  1998  show that the throughput goes up as the inverse square-root of the packet loss rate what this means in practice is that the loss rate for fast tcp connections is very small ; 1 % is a moderate loss rate  and by the time the loss rate reaches 10 % the connection has effectively stopped working however  for wireless networks such as 802.11 lans  frame loss rates of at least 10 % are common this difference means that  absent protective measures  congestion control schemes that use packet loss as a signal will unnecessarily throttle connections that run over wireless links to very low rates to function well  the only packet losses that the congestion control algorithm should observe are losses due to insufficient bandwidth  not losses due to transmission errors one solution to this problem is to mask the wireless losses by using retransmissions over the wireless link for example  802.11 uses a stopand wait protocol to deliver each frame  retrying transmissions multiple times if 540 the transport layer chap 6 need be before reporting a packet loss to the higher layer in the normal case  each packet is delivered despite transient transmission errors that are not visible to the higher layers fig 6-26 shows a path with a wired and wireless link for which the masking strategy is used there are two aspects to note first  the sender does not necessarily know that the path includes a wireless link  since all it sees is the wired link to which it is attached internet paths are heterogeneous and there is no general method for the sender to tell what kind of links comprise the path this complicates the congestion control problem  as there is no easy way to use one protocol for wireless links and another protocol for wired links wired link sender receiver transport with end-to-end congestion control  loss = congestion  link layer retransmission  loss = transmission error  wireless link figure 6-26 congestion control over a path with a wireless link the second aspect is a puzzle the figure shows two mechanisms that are driven by loss  link layer frame retransmissions  and transport layer congestion control the puzzle is how these two mechanisms can co-exist without getting confused after all  a loss should cause only one mechanism to take action because it is either a transmission error or a congestion signal it can not be both if both mechanisms take action  by retransmitting the frame and slowing down the sending rate  then we are back to the original problem of transports that run far too slowly over wireless links consider this puzzle for a moment and see if you can solve it the solution is that the two mechanisms act at different timescales link layer retransmissions happen on the order of microseconds to milliseconds for wireless links such as 802.11 loss timers in transport protocols fire on the order of milliseconds to seconds the difference is three orders of magnitude this allows wireless links to detect frame losses and retransmit frames to repair transmission errors long before packet loss is inferred by the transport entity the masking strategy is sufficient to let most transport protocols run well across most wireless links however  it is not always a fitting solution some wireless links have long round-trip times  such as satellites for these links other techniques must be used to mask loss  such as fec  forward error correction   or the transport protocol must use a non-loss signal for congestion control sec 6.3 congestion control 541 a second issue with congestion control over wireless links is variable capacity that is  the capacity of a wireless link changes over time  sometimes abruptly  as nodes move and the signal-to-noise ratio varies with the changing channel conditions this is unlike wired links whose capacity is fixed the transport protocol must adapt to the changing capacity of wireless links  otherwise it will either congest the network or fail to use the available capacity one possible solution to this problem is simply not to worry about it this strategy is feasible because congestion control algorithms must already handle the case of new users entering the network or existing users changing their sending rates even though the capacity of wired links is fixed  the changing behavior of other users presents itself as variability in the bandwidth that is available to a given user thus it is possible to simply run tcp over a path with an 802.11 wireless link and obtain reasonable performance however  when there is much wireless variability  transport protocols designed for wired links may have trouble keeping up and deliver poor performance the solution in this case is a transport protocol that is designed for wireless links a particularly challenging setting is a wireless mesh network in which multiple  interfering wireless links must be crossed  routes change due to mobility  and there is lots of loss research in this area is ongoing see li et al  2009  for an example of wireless transport protocol design 6.4 the internet transport protocols  udp the internet has two main protocols in the transport layer  a connectionless protocol and a connection-oriented one the protocols complement each other the connectionless protocol is udp it does almost nothing beyond sending packets between applications  letting applications build their own protocols on top as needed the connection-oriented protocol is tcp it does almost everything it makes connections and adds reliability with retransmissions  along with flow control and congestion control  all on behalf of the applications that use it in the following sections  we will study udp and tcp we will start with udp because it is simplest we will also look at two uses of udp since udp is a transport layer protocol that typically runs in the operating system and protocols that use udp typically run in user space  these uses might be considered applications however  the techniques they use are useful for many applications and are better considered to belong to a transport service  so we will cover them here 6.4.1 introduction to udp the internet protocol suite supports a connectionless transport protocol called udp  user datagram protocol   udp provides a way for applications to send encapsulated ip datagrams without having to establish a connection udp is described in rfc 768 542 the transport layer chap 6 udp transmits segments consisting of an 8-byte header followed by the payload the header is shown in fig 6-27 the two ports serve to identify the endpoints within the source and destination machines when a udp packet arrives  its payload is handed to the process attached to the destination port this attachment occurs when the bind primitive or something similar is used  as we saw in fig 6-6 for tcp  the binding process is the same for udp   think of ports as mailboxes that applications can rent to receive packets we will have more to say about them when we describe tcp  which also uses ports in fact  the main value of udp over just using raw ip is the addition of the source and destination ports without the port fields  the transport layer would not know what to do with each incoming packet with them  it delivers the embedded segment to the correct application 32 bits source port udp length destination port udp checksum figure 6-27 the udp header the source port is primarily needed when a reply must be sent back to the source by copying the source port field from the incoming segment into the destination port field of the outgoing segment  the process sending the reply can specify which process on the sending machine is to get it the udp length field includes the 8-byte header and the data the minimum length is 8 bytes  to cover the header the maximum length is 65,515 bytes  which is lower than the largest number that will fit in 16 bits because of the size limit on ip packets an optional checksum is also provided for extra reliability it checksums the header  the data  and a conceptual ip pseudoheader when performing this computation  the checksum field is set to zero and the data field is padded out with an additional zero byte if its length is an odd number the checksum algorithm is simply to add up all the 16-bit words in one ? s complement and to take the one ? s complement of the sum as a consequence  when the receiver performs the calculation on the entire segment  including the checksum field  the result should be 0 if the checksum is not computed  it is stored as a 0  since by a happy coincidence of one ? s complement arithmetic a true computed 0 is stored as all 1s however  turning it off is foolish unless the quality of the data does not matter  e.g  for digitized speech   the pseudoheader for the case of ipv4 is shown in fig 6-28 it contains the 32-bit ipv4 addresses of the source and destination machines  the protocol number for udp  17   and the byte count for the udp segment  including the header   it sec 6.4 the internet transport protocols  udp 543 is different but analogous for ipv6 including the pseudoheader in the udp checksum computation helps detect misdelivered packets  but including it also violates the protocol hierarchy since the ip addresses in it belong to the ip layer  not to the udp layer tcp uses the same pseudoheader for its checksum 32 bits source address destination address 0 0 0 0 0 0 0 0 protocol = 17 udp length figure 6-28 the ipv4 pseudoheader included in the udp checksum it is probably worth mentioning explicitly some of the things that udp does not do it does not do flow control  congestion control  or retransmission upon receipt of a bad segment all of that is up to the user processes what it does do is provide an interface to the ip protocol with the added feature of demultiplexing multiple processes using the ports and optional end-to-end error detection that is all it does for applications that need to have precise control over the packet flow  error control  or timing  udp provides just what the doctor ordered one area where it is especially useful is in client-server situations often  the client sends a short request to the server and expects a short reply back if either the request or the reply is lost  the client can just time out and try again not only is the code simple  but fewer messages are required  one in each direction  than with a protocol requiring an initial setup like tcp an application that uses udp this way is dns  domain name system   which we will study in chap 7 in brief  a program that needs to look up the ip address of some host name  for example  www.cs.berkeley.edu  can send a udp packet containing the host name to a dns server the server replies with a udp packet containing the host ? s ip address no setup is needed in advance and no release is needed afterward just two messages go over the network 6.4.2 remote procedure call in a certain sense  sending a message to a remote host and getting a reply back is a lot like making a function call in a programming language in both cases  you start with one or more parameters and you get back a result this observation has led people to try to arrange request-reply interactions on networks to be cast in the 544 the transport layer chap 6 form of procedure calls such an arrangement makes network applications much easier to program and more familiar to deal with for example  just imagine a procedure named get ip address  host name  that works by sending a udp packet to a dns server and waiting for the reply  timing out and trying again if one is not forthcoming quickly enough in this way  all the details of networking can be hidden from the programmer the key work in this area was done by birrell and nelson  1984   in a nutshell  what birrell and nelson suggested was allowing programs to call procedures located on remote hosts when a process on machine 1 calls a procedure on machine 2  the calling process on 1 is suspended and execution of the called procedure takes place on 2 information can be transported from the caller to the callee in the parameters and can come back in the procedure result no message passing is visible to the application programmer this technique is known as rpc  remote procedure call  and has become the basis for many networking applications traditionally  the calling procedure is known as the client and the called procedure is known as the server  and we will use those names here too the idea behind rpc is to make a remote procedure call look as much as possible like a local one in the simplest form  to call a remote procedure  the client program must be bound with a small library procedure  called the client stub  that represents the server procedure in the client ? s address space similarly  the server is bound with a procedure called the server stub these procedures hide the fact that the procedure call from the client to the server is not local the actual steps in making an rpc are shown in fig 6-29 step 1 is the client calling the client stub this call is a local procedure call  with the parameters pushed onto the stack in the normal way step 2 is the client stub packing the parameters into a message and making a system call to send the message packing the parameters is called marshaling step 3 is the operating system sending the message from the client machine to the server machine step 4 is the operating system passing the incoming packet to the server stub finally  step 5 is the server stub calling the server procedure with the unmarshaled parameters the reply traces the same path in the other direction the key item to note here is that the client procedure  written by the user  just makes a normal  i.e  local  procedure call to the client stub  which has the same name as the server procedure since the client procedure and client stub are in the same address space  the parameters are passed in the usual way similarly  the server procedure is called by a procedure in its address space with the parameters it expects to the server procedure  nothing is unusual in this way  instead of i/o being done on sockets  network communication is done by faking a normal procedure call despite the conceptual elegance of rpc  there are a few snakes hiding under the grass a big one is the use of pointer parameters normally  passing a pointer to a procedure is not a problem the called procedure can use the pointer in the same way the caller can because both procedures live in the same virtual address sec 6.4 the internet transport protocols  udp 545 client cpu client stub client 2 1 operating system server cpu server stub 4 3 5 operating system server network figure 6-29 steps in making a remote procedure call the stubs are shaded space with rpc  passing pointers is impossible because the client and server are in different address spaces in some cases  tricks can be used to make it possible to pass pointers suppose that the first parameter is a pointer to an integer  k the client stub can marshal k and send it along to the server the server stub then creates a pointer to k and passes it to the server procedure  just as it expects when the server procedure returns control to the server stub  the latter sends k back to the client  where the new k is copied over the old one  just in case the server changed it in effect  the standard calling sequence of call-by-reference has been replaced by call-bycopy restore unfortunately  this trick does not always work  for example  if the pointer points to a graph or other complex data structure for this reason  some restrictions must be placed on parameters to procedures called remotely  as we shall see a second problem is that in weakly typed languages  like c  it is perfectly legal to write a procedure that computes the inner product of two vectors  arrays   without specifying how large either one is each could be terminated by a special value known only to the calling and called procedures under these circumstances  it is essentially impossible for the client stub to marshal the parameters  it has no way of determining how large they are a third problem is that it is not always possible to deduce the types of the parameters  not even from a formal specification or the code itself an example is printf  which may have any number of parameters  at least one   and the parameters can be an arbitrary mixture of integers  shorts  longs  characters  strings  floating point numbers of various lengths  and other types trying to call printf as a remote procedure would be practically impossible because c is so permissive however  a rule saying that rpc can be used provided that you do not program in c  or c + +  would not be popular with a lot of programmers 546 the transport layer chap 6 a fourth problem relates to the use of global variables normally  the calling and called procedure can communicate by using global variables  in addition to communicating via parameters but if the called procedure is moved to a remote machine  the code will fail because the global variables are no longer shared these problems are not meant to suggest that rpc is hopeless in fact  it is widely used  but some restrictions are needed to make it work well in practice in terms of transport layer protocols  udp is a good base on which to implement rpc both requests and replies may be sent as a single udp packet in the simplest case and the operation can be fast however  an implementation must include other machinery as well because the request or the reply may be lost  the client must keep a timer to retransmit the request note that a reply serves as an implicit acknowledgement for a request  so the request need not be separately acknowledged sometimes the parameters or results may be larger than the maximum udp packet size  in which case some protocol is needed to deliver large messages if multiple requests and replies can overlap  as in the case of concurrent programming   an identifier is needed to match the request with the reply a higher-level concern is that the operation may not be idempotent  i.e  safe to repeat   the simple case is idempotent operations such as dns requests and replies the client can safely retransmit these requests again and again if no replies are forthcoming it does not matter whether the server never received the request  or it was the reply that was lost the answer  when it finally arrives  will be the same  assuming the dns database is not updated in the meantime   however  not all operations are idempotent  for example  because they have important side-effects such as incrementing a counter rpc for these operations requires stronger semantics so that when the programmer calls a procedure it is not executed multiple times in this case  it may be necessary to set up a tcp connection and send the request over it rather than using udp 6.4.3 real-time transport protocols client-server rpc is one area in which udp is widely used another one is for real-time multimedia applications in particular  as internet radio  internet telephony  music-on-demand  videoconferencing  video-on-demand  and other multimedia applications became more commonplace  people have discovered that each application was reinventing more or less the same real-time transport protocol it gradually became clear that having a generic real-time transport protocol for multiple applications would be a good idea thus was rtp  real-time transport protocol  born it is described in rfc 3550 and is now in widespread use for multimedia applications we will describe two aspects of real-time transport the first is the rtp protocol for transporting audio and video data in packets the second is the processing that takes place  mostly at the receiver  to play out the audio and video at the right time these functions fit into the protocol stack as shown in fig 6-30 sec 6.4 the internet transport protocols  udp 547 multimedia application rtp socket interface udp ip ethernet  a   b  ethernet header ip header udp header rtp header rtp payload udp payload ip payload ethernet payload user space os kernel figure 6-30  a  the position of rtp in the protocol stack  b  packet nesting rtp normally runs in user space over udp  in the operating system   it operates as follows the multimedia application consists of multiple audio  video  text  and possibly other streams these are fed into the rtp library  which is in user space along with the application this library multiplexes the streams and encodes them in rtp packets  which it stuffs into a socket on the operating system side of the socket  udp packets are generated to wrap the rtp packets and handed to ip for transmission over a link such as ethernet the reverse process happens at the receiver the multimedia application eventually receives multimedia data from the rtp library it is responsible for playing out the media the protocol stack for this situation is shown in fig 6-30  a   the packet nesting is shown in fig 6-30  b   as a consequence of this design  it is a little hard to say which layer rtp is in since it runs in user space and is linked to the application program  it certainly looks like an application protocol on the other hand  it is a generic  applicationindependent protocol that just provides transport facilities  so it also looks like a transport protocol probably the best description is that it is a transport protocol that just happens to be implemented in the application layer  which is why we are covering it in this chapter rtp ? the real-time transport protocol the basic function of rtp is to multiplex several real-time data streams onto a single stream of udp packets the udp stream can be sent to a single destination  unicasting  or to multiple destinations  multicasting   because rtp just uses normal udp  its packets are not treated specially by the routers unless some normal ip quality-of-service features are enabled in particular  there are no special guarantees about delivery  and packets may be lost  delayed  corrupted  etc the rtp format contains several features to help receivers work with multimedia information each packet sent in an rtp stream is given a number one 548 the transport layer chap 6 higher than its predecessor this numbering allows the destination to determine if any packets are missing if a packet is missing  the best action for the destination to take is up to the application it may be to skip a video frame if the packets are carrying video data  or to approximate the missing value by interpolation if the packets are carrying audio data retransmission is not a practical option since the retransmitted packet would probably arrive too late to be useful as a consequence  rtp has no acknowledgements  and no mechanism to request retransmissions each rtp payload may contain multiple samples  and they may be coded any way that the application wants to allow for interworking  rtp defines several profiles  e.g  a single audio stream   and for each profile  multiple encoding formats may be allowed for example  a single audio stream may be encoded as 8 bit pcm samples at 8 khz using delta encoding  predictive encoding  gsm encoding  mp3 encoding  and so on rtp provides a header field in which the source can specify the encoding but is otherwise not involved in how encoding is done another facility many real-time applications need is timestamping the idea here is to allow the source to associate a timestamp with the first sample in each packet the timestamps are relative to the start of the stream  so only the differences between timestamps are significant the absolute values have no meaning as we will describe shortly  this mechanism allows the destination to do a small amount of buffering and play each sample the right number of milliseconds after the start of the stream  independently of when the packet containing the sample arrived not only does timestamping reduce the effects of variation in network delay  but it also allows multiple streams to be synchronized with each other for example  a digital television program might have a video stream and two audio streams the two audio streams could be for stereo broadcasts or for handling films with an original language soundtrack and a soundtrack dubbed into the local language  giving the viewer a choice each stream comes from a different physical device  but if they are timestamped from a single counter  they can be played back synchronously  even if the streams are transmitted and/or received somewhat erratically the rtp header is illustrated in fig 6-31 it consists of three 32-bit words and potentially some extensions the first word contains the version field  which is already at 2 let us hope this version is very close to the ultimate version since there is only one code point left  although 3 could be defined as meaning that the real version was in an extension word   the p bit indicates that the packet has been padded to a multiple of 4 bytes the last padding byte tells how many bytes were added the x bit indicates that an extension header is present the format and meaning of the extension header are not defined the only thing that is defined is that the first word of the extension gives the length this is an escape hatch for any unforeseen requirements sec 6.4 the internet transport protocols  udp 549 32 bits ver p x m payload type sequence number timestamp synchronization source identifier contributing source identifier cc figure 6-31 the rtp header the cc field tells how many contributing sources are present  from 0 to 15  see below   the m bit is an application-specific marker bit it can be used to mark the start of a video frame  the start of a word in an audio channel  or something else that the application understands the payload type field tells which encoding algorithm has been used  e.g  uncompressed 8-bit audio  mp3  etc   since every packet carries this field  the encoding can change during transmission the sequence number is just a counter that is incremented on each rtp packet sent it is used to detect lost packets the timestamp is produced by the stream ? s source to note when the first sample in the packet was made this value can help reduce timing variability called jitter at the receiver by decoupling the playback from the packet arrival time the synchronization source identifier tells which stream the packet belongs to it is the method used to multiplex and demultiplex multiple data streams onto a single stream of udp packets finally  the contributing source identifiers  if any  are used when mixers are present in the studio in that case  the mixer is the synchronizing source  and the streams being mixed are listed here rtcp ? the real-time transport control protocol rtp has a little sister protocol  little sibling protocol ?  called rtcp  realtime transport control protocol   it is defined along with rtp in rfc 3550 and handles feedback  synchronization  and the user interface it does not transport any media samples the first function can be used to provide feedback on delay  variation in delay or jitter  bandwidth  congestion  and other network properties to the sources this information can be used by the encoding process to increase the data rate  and give better quality  when the network is functioning well and to cut back the data 550 the transport layer chap 6 rate when there is trouble in the network by providing continuous feedback  the encoding algorithms can be continuously adapted to provide the best quality possible under the current circumstances for example  if the bandwidth increases or decreases during the transmission  the encoding may switch from mp3 to 8-bit pcm to delta encoding as required the payload type field is used to tell the destination what encoding algorithm is used for the current packet  making it possible to vary it on demand an issue with providing feedback is that the rtcp reports are sent to all participants for a multicast application with a large group  the bandwidth used by rtcp would quickly grow large to prevent this from happening  rtcp senders scale down the rate of their reports to collectively consume no more than  say  5 % of the media bandwidth to do this  each participant needs to know the media bandwidth  which it learns from the sender  and the number of participants  which it estimates by listening to other rtcp reports rtcp also handles interstream synchronization the problem is that different streams may use different clocks  with different granularities and different drift rates rtcp can be used to keep them in sync finally  rtcp provides a way for naming the various sources  e.g  in ascii text   this information can be displayed on the receiver ? s screen to indicate who is talking at the moment more information about rtp can be found in perkins  2003   playout with buffering and jitter control once the media information reaches the receiver  it must be played out at the right time in general  this will not be the time at which the rtp packet arrived at the receiver because packets will take slightly different amounts of time to transit the network even if the packets are injected with exactly the right intervals between them at the sender  they will reach the receiver with different relative times this variation in delay is called jitter even a small amount of packet jitter can cause distracting media artifacts  such as jerky video frames and unintelligible audio  if the media is simply played out as it arrives the solution to this problem is to buffer packets at the receiver before they are played out to reduce the jitter as an example  in fig 6-32 we see a stream of packets being delivered with a substantial amount of jitter packet 1 is sent from the server at t ? ? 0 sec and arrives at the client at t ? ? 1 sec packet 2 undergoes more delay and takes 2 sec to arrive as the packets arrive  they are buffered on the client machine at t ? ? 10 sec  playback begins at this time  packets 1 through 6 have been buffered so that they can be removed from the buffer at uniform intervals for smooth play in the general case  it is not necessary to use uniform intervals because the rtp timestamps tell when the media should be played sec 6.4 the internet transport protocols  udp 551 0 5 1 2 3 4 5 6 7 8 10 time  sec  time in buffer 15 20 gap in playback 1 packet removed from buffer packet arrives at buffer 2 3 4 5 6 7 8 packet departs source 1 2 3 4 5 6 7 8 figure 6-32 smoothing the output stream by buffering packets unfortunately  we can see that packet 8 has been delayed so much that it is not available when its play slot comes up there are two options packet 8 can be skipped and the player can move on to subsequent packets alternatively  playback can stop until packet 8 arrives  creating an annoying gap in the music or movie in a live media application like a voice-over-ip call  the packet will typically be skipped live applications do not work well on hold in a streaming media application  the player might pause this problem can be alleviated by delaying the starting time even more  by using a larger buffer for a streaming audio or video player  buffers of about 10 seconds are often used to ensure that the player receives all of the packets  that are not dropped in the network  in time for live applications like videoconferencing  short buffers are needed for responsiveness a key consideration for smooth playout is the playback point  or how long to wait at the receiver for media before playing it out deciding how long to wait depends on the jitter the difference between a low-jitter and high-jitter connection is shown in fig 6-33 the average delay may not differ greatly between the two  but if there is high jitter the playback point may need to be much further out to capture 99 % of the packets than if there is low jitter to pick a good playback point  the application can measure the jitter by looking at the difference between the rtp timestamps and the arrival time each difference gives a sample of the delay  plus an arbitrary  fixed offset   however  the delay can change over time due to other  competing traffic and changing routes to accommodate this change  applications can adapt their playback point while they are running however  if not done well  changing the playback point can produce an observable glitch to the user one way to avoid this problem for audio is to adapt the playback point between talkspurts  in the gaps in a conversation no one will notice the difference between a short and slightly longer silence rtp lets applications set the m marker bit to indicate the start of a new talkspurt for this purpose if the absolute delay until media is played out is too long  live applications will suffer nothing can be done to reduce the propagation delay if a direct path is 552 the transport layer chap 6 high jitter low jitter minimum delay  due to speed of light  delay  a  fraction of packets fraction of packets delay  b  figure 6-33  a  high jitter  b  low jitter already being used the playback point can be pulled in by simply accepting that a larger fraction of packets will arrive too late to be played if this is not acceptable  the only way to pull in the playback point is to reduce the jitter by using a better quality of service  for example  the expedited forwarding differentiated service that is  a better network is needed 6.5 the internet transport protocols  tcp udp is a simple protocol and it has some very important uses  such as clientserver interactions and multimedia  but for most internet applications  reliable  sequenced delivery is needed udp can not provide this  so another protocol is required it is called tcp and is the main workhorse of the internet let us now study it in detail 6.5.1 introduction to tcp tcp  transmission control protocol  was specifically designed to provide a reliable end-to-end byte stream over an unreliable internetwork an internetwork differs from a single network because different parts may have wildly different topologies  bandwidths  delays  packet sizes  and other parameters tcp was designed to dynamically adapt to properties of the internetwork and to be robust in the face of many kinds of failures tcp was formally defined in rfc 793 in september 1981 as time went on  many improvements have been made  and various errors and inconsistencies have been fixed to give you a sense of the extent of tcp  the important rfcs are sec 6.5 the internet transport protocols  tcp 553 now rfc 793 plus  clarifications and bug fixes in rfc 1122 ; extensions for high-performance in rfc 1323 ; selective acknowledgements in rfc 2018 ; congestion control in rfc 2581 ; repurposing of header fields for quality of service in rfc 2873 ; improved retransmission timers in rfc 2988 ; and explicit congestion notification in rfc 3168 the full collection is even larger  which led to a guide to the many rfcs  published of course as another rfc document  rfc 4614 each machine supporting tcp has a tcp transport entity  either a library procedure  a user process  or most commonly part of the kernel in all cases  it manages tcp streams and interfaces to the ip layer a tcp entity accepts user data streams from local processes  breaks them up into pieces not exceeding 64 kb  in practice  often 1460 data bytes in order to fit in a single ethernet frame with the ip and tcp headers   and sends each piece as a separate ip datagram when datagrams containing tcp data arrive at a machine  they are given to the tcp entity  which reconstructs the original byte streams for simplicity  we will sometimes use just ? ? tcp ? ? to mean the tcp transport entity  a piece of software  or the tcp protocol  a set of rules   from the context it will be clear which is meant for example  in ? ? the user gives tcp the data  ? ? the tcp transport entity is clearly intended the ip layer gives no guarantee that datagrams will be delivered properly  nor any indication of how fast datagrams may be sent it is up to tcp to send datagrams fast enough to make use of the capacity but not cause congestion  and to time out and retransmit any datagrams that are not delivered datagrams that do arrive may well do so in the wrong order ; it is also up to tcp to reassemble them into messages in the proper sequence in short  tcp must furnish good performance with the reliability that most applications want and that ip does not provide 6.5.2 the tcp service model tcp service is obtained by both the sender and the receiver creating end points  called sockets  as discussed in sec 6.1.3 each socket has a socket number  address  consisting of the ip address of the host and a 16-bit number local to that host  called a port a port is the tcp name for a tsap for tcp service to be obtained  a connection must be explicitly established between a socket on one machine and a socket on another machine the socket calls are listed in fig 6-5 a socket may be used for multiple connections at the same time in other words  two or more connections may terminate at the same socket connections are identified by the socket identifiers at both ends  that is   socket1  socket2   no virtual circuit numbers or other identifiers are used port numbers below 1024 are reserved for standard services that can usually only be started by privileged users  e.g  root in unix systems   they are called well-known ports for example  any process wishing to remotely retrieve mail from a host can connect to the destination host ? s port 143 to contact its imap 554 the transport layer chap 6 daemon the list of well-known ports is given at www.iana.org over 700 have been assigned a few of the better-known ones are listed in fig 6-34 port protocol use 20  21 ftp file transfer 22 ssh remote login  replacement for telnet 25 smtp email 80 http world wide web 110 pop-3 remote email access 143 imap remote email access 443 https secure web  http over ssl/tls  543 rtsp media player control 631 ipp printer sharing figure 6-34 some assigned ports other ports from 1024 through 49151 can be registered with iana for use by unprivileged users  but applications can and do choose their own ports for example  the bittorrent peer-to-peer file-sharing application  unofficially  uses ports 6881 ? 6887  but may run on other ports as well it would certainly be possible to have the ftp daemon attach itself to port 21 at boot time  the ssh daemon attach itself to port 22 at boot time  and so on however  doing so would clutter up memory with daemons that were idle most of the time instead  what is commonly done is to have a single daemon  called inetd  internet daemon  in unix  attach itself to multiple ports and wait for the first incoming connection when that occurs  inetd forks off a new process and executes the appropriate daemon in it  letting that daemon handle the request in this way  the daemons other than inetd are only active when there is work for them to do inetd learns which ports it is to use from a configuration file consequently  the system administrator can set up the system to have permanent daemons on the busiest ports  e.g  port 80  and inetd on the rest all tcp connections are full duplex and point-to-point full duplex means that traffic can go in both directions at the same time point-to-point means that each connection has exactly two end points tcp does not support multicasting or broadcasting a tcp connection is a byte stream  not a message stream message boundaries are not preserved end to end for example  if the sending process does four 512-byte writes to a tcp stream  these data may be delivered to the receiving process as four 512-byte chunks  two 1024-byte chunks  one 2048-byte chunk  see fig 6-35   or some other way there is no way for the receiver to detect the unit  s  in which the data were written  no matter how hard it tries sec 6.5 the internet transport protocols  tcp 555 a b c d ab c d ip header tcp header  a   b  figure 6-35  a  four 512-byte segments sent as separate ip datagrams  b  the 2048 bytes of data delivered to the application in a single read call files in unix have this property too the reader of a file can not tell whether the file was written a block at a time  a byte at a time  or all in one blow as with a unix file  the tcp software has no idea of what the bytes mean and no interest in finding out a byte is just a byte when an application passes data to tcp  tcp may send it immediately or buffer it  in order to collect a larger amount to send at once   at its discretion however  sometimes the application really wants the data to be sent immediately for example  suppose a user of an interactive game wants to send a stream of updates it is essential that the updates be sent immediately  not buffered until there is a collection of them to force data out  tcp has the notion of a push flag that is carried on packets the original intent was to let applications tell tcp implementations via the push flag not to delay the transmission however  applications can not literally set the push flag when they send data instead  different operating systems have evolved different options to expedite transmission  e.g  tcp nodelay in windows and linux   for internet archaeologists  we will also mention one interesting feature of tcp service that remains in the protocol but is rarely used  urgent data when an application has high priority data that should be processed immediately  for example  if an interactive user hits the ctrl-c key to break off a remote computation that has already begun  the sending application can put some control information in the data stream and give it to tcp along with the urgent flag this event causes tcp to stop accumulating data and transmit everything it has for that connection immediately when the urgent data are received at the destination  the receiving application is interrupted  e.g  given a signal in unix terms  so it can stop whatever it was doing and read the data stream to find the urgent data the end of the urgent data is marked so the application knows when it is over the start of the urgent data is not marked it is up to the application to figure that out this scheme provides a crude signaling mechanism and leaves everything else up to the application however  while urgent data is potentially useful  it found no compelling application early on and fell into disuse its use is now discouraged because of implementation differences  leaving applications to handle their own signaling perhaps future transport protocols will provide better signaling 556 the transport layer chap 6 6.5.3 the tcp protocol in this section  we will give a general overview of the tcp protocol in the next one  we will go over the protocol header  field by field a key feature of tcp  and one that dominates the protocol design  is that every byte on a tcp connection has its own 32-bit sequence number when the internet began  the lines between routers were mostly 56-kbps leased lines  so a host blasting away at full speed took over 1 week to cycle through the sequence numbers at modern network speeds  the sequence numbers can be consumed at an alarming rate  as we will see later separate 32-bit sequence numbers are carried on packets for the sliding window position in one direction and for acknowledgements in the reverse direction  as discussed below the sending and receiving tcp entities exchange data in the form of segments a tcp segment consists of a fixed 20-byte header  plus an optional part  followed by zero or more data bytes the tcp software decides how big segments should be it can accumulate data from several writes into one segment or can split data from one write over multiple segments two limits restrict the segment size first  each segment  including the tcp header  must fit in the 65,515 byte ip payload second  each link has an mtu  maximum transfer unit   each segment must fit in the mtu at the sender and receiver so that it can be sent and received in a single  unfragmented packet in practice  the mtu is generally 1500 bytes  the ethernet payload size  and thus defines the upper bound on segment size however  it is still possible for ip packets carrying tcp segments to be fragmented when passing over a network path for which some link has a small mtu if this happens  it degrades performance and causes other problems  kent and mogul  1987   instead  modern tcp implementations perform path mtu discovery by using the technique outlined in rfc 1191 that we described in sec 5.5.5 this technique uses icmp error messages to find the smallest mtu for any link on the path tcp then adjusts the segment size downwards to avoid fragmentation the basic protocol used by tcp entities is the sliding window protocol with a dynamic window size when a sender transmits a segment  it also starts a timer when the segment arrives at the destination  the receiving tcp entity sends back a segment  with data if any exist  and otherwise without  bearing an acknowledgement number equal to the next sequence number it expects to receive and the remaining window size if the sender ? s timer goes off before the acknowledgement is received  the sender transmits the segment again although this protocol sounds simple  there are many sometimes subtle ins and outs  which we will cover below segments can arrive out of order  so bytes 3072 ? 4095 can arrive but can not be acknowledged because bytes 2048 ? 3071 have not turned up yet segments can also be delayed so long in transit that the sender times out and retransmits them the retransmissions may include different byte sec 6.5 the internet transport protocols  tcp 557 ranges than the original transmission  requiring careful administration to keep track of which bytes have been correctly received so far however  since each byte in the stream has its own unique offset  it can be done tcp must be prepared to deal with these problems and solve them in an efficient way a considerable amount of effort has gone into optimizing the performance of tcp streams  even in the face of network problems a number of the algorithms used by many tcp implementations will be discussed below 6.5.4 the tcp segment header figure 6-36 shows the layout of a tcp segment every segment begins with a fixed-format  20-byte header the fixed header may be followed by header options after the options  if any  up to 65,535 ? ? 20 ? ? 20 ? ? 65,495 data bytes may follow  where the first 20 refer to the ip header and the second to the tcp header segments without any data are legal and are commonly used for acknowledgements and control messages 32 bits source port destination port sequence number acknowledgement number tcp header length urg ack psh rst syn fin window size checksum urgent pointer options  0 or more 32-bit words  data  optional  ece cwr figure 6-36 the tcp header let us dissect the tcp header field by field the source port and destination port fields identify the local end points of the connection a tcp port plus its host ? s ip address forms a 48-bit unique end point the source and destination end points together identify the connection this connection identifier is called a 5 tuple because it consists of five pieces of information  the protocol  tcp   source ip and source port  and destination ip and destination port 558 the transport layer chap 6 the sequence number and acknowledgement number fields perform their usual functions note that the latter specifies the next in-order byte expected  not the last byte correctly received it is a cumulative acknowledgement because it summarizes the received data with a single number it does not go beyond lost data both are 32 bits because every byte of data is numbered in a tcp stream the tcp header length tells how many 32-bit words are contained in the tcp header this information is needed because the options field is of variable length  so the header is  too technically  this field really indicates the start of the data within the segment  measured in 32-bit words  but that number is just the header length in words  so the effect is the same next comes a 4-bit field that is not used the fact that these bits have remained unused for 30 years  as only 2 of the original reserved 6 bits have been reclaimed  is testimony to how well thought out tcp is lesser protocols would have needed these bits to fix bugs in the original design now come eight 1-bit flags cwr and ece are used to signal congestion when ecn  explicit congestion notification  is used  as specified in rfc 3168 ece is set to signal an ecn-echo to a tcp sender to tell it to slow down when the tcp receiver gets a congestion indication from the network cwr is set to signal congestion window reduced from the tcp sender to the tcp receiver so that it knows the sender has slowed down and can stop sending the ecn-echo we discuss the role of ecn in tcp congestion control in sec 6.5.10 urg is set to 1 if the urgent pointer is in use the urgent pointer is used to indicate a byte offset from the current sequence number at which urgent data are to be found this facility is in lieu of interrupt messages as we mentioned above  this facility is a bare-bones way of allowing the sender to signal the receiver without getting tcp itself involved in the reason for the interrupt  but it is seldom used the ack bit is set to 1 to indicate that the acknowledgement number is valid this is the case for nearly all packets if ack is 0  the segment does not contain an acknowledgement  so the acknowledgement number field is ignored the psh bit indicates pushed data the receiver is hereby kindly requested to deliver the data to the application upon arrival and not buffer it until a full buffer has been received  which it might otherwise do for efficiency   the rst bit is used to abruptly reset a connection that has become confused due to a host crash or some other reason it is also used to reject an invalid segment or refuse an attempt to open a connection in general  if you get a segment with the rst bit on  you have a problem on your hands the syn bit is used to establish connections the connection request has syn ? ? 1 and ack ? ? 0 to indicate that the piggyback acknowledgement field is not in use the connection reply does bear an acknowledgement  however  so it has syn ? ? 1 and ack ? ? 1 in essence  the syn bit is used to denote both connection request and connection accepted  with the ack bit used to distinguish between those two possibilities sec 6.5 the internet transport protocols  tcp 559 the fin bit is used to release a connection it specifies that the sender has no more data to transmit however  after closing a connection  the closing process may continue to receive data indefinitely both syn and fin segments have sequence numbers and are thus guaranteed to be processed in the correct order flow control in tcp is handled using a variable-sized sliding window the window size field tells how many bytes may be sent starting at the byte acknowledged a window size field of 0 is legal and says that the bytes up to and including acknowledgement number ? ? 1 have been received  but that the receiver has not had a chance to consume the data and would like no more data for the moment  thank you the receiver can later grant permission to send by transmitting a segment with the same acknowledgement number and a nonzero window size field in the protocols of chap 3  acknowledgements of frames received and permission to send new frames were tied together this was a consequence of a fixed window size for each protocol in tcp  acknowledgements and permission to send additional data are completely decoupled in effect  a receiver can say  ? ? i have received bytes up through k but i do not want any more just now  thank you ? ? this decoupling  in fact  a variable-sized window  gives additional flexibility we will study it in detail below a checksum is also provided for extra reliability it checksums the header  the data  and a conceptual pseudoheader in exactly the same way as udp  except that the pseudoheader has the protocol number for tcp  6  and the checksum is mandatory please see sec 6.4.1 for details the options field provides a way to add extra facilities not covered by the regular header many options have been defined and several are commonly used the options are of variable length  fill a multiple of 32 bits by using padding with zeros  and may extend to 40 bytes to accommodate the longest tcp header that can be specified some options are carried when a connection is established to negotiate or inform the other side of capabilities other options are carried on packets during the lifetime of the connection each option has a type-length-value encoding a widely used option is the one that allows each host to specify the mss  maximum segment size  it is willing to accept using large segments is more efficient than using small ones because the 20-byte header can be amortized over more data  but small hosts may not be able to handle big segments during connection setup  each side can announce its maximum and see its partner ? s if a host does not use this option  it defaults to a 536-byte payload all internet hosts are required to accept tcp segments of 536 ? ? 20 ? ? 556 bytes the maximum segment size in the two directions need not be the same for lines with high bandwidth  high delay  or both  the 64-kb window corresponding to a 16-bit field is a problem for example  on an oc-12 line  of roughly 600 mbps   it takes less than 1 msec to output a full 64-kb window if the round-trip propagation delay is 50 msec  which is typical for a transcontinental 560 the transport layer chap 6 fiber   the sender will be idle more than 98 % of the time waiting for acknowledgements a larger window size would allow the sender to keep pumping data out the window scale option allows the sender and receiver to negotiate a window scale factor at the start of a connection both sides use the scale factor to shift the window size field up to 14 bits to the left  thus allowing windows of up to 230 bytes most tcp implementations support this option the timestamp option carries a timestamp sent by the sender and echoed by the receiver it is included in every packet  once its use is established during connection setup  and used to compute round-trip time samples that are used to estimate when a packet has been lost it is also used as a logical extension of the 32 bit sequence number on a fast connection  the sequence number may wrap around quickly  leading to possible confusion between old and new data the paws  protection against wrapped sequence numbers  scheme discards arriving segments with old timestamps to prevent this problem finally  the sack  selective acknowledgement  option lets a receiver tell a sender the ranges of sequence numbers that it has received it supplements the acknowledgement number and is used after a packet has been lost but subsequent  or duplicate  data has arrived the new data is not reflected by the acknowledgement number field in the header because that field gives only the next in-order byte that is expected with sack  the sender is explicitly aware of what data the receiver has and hence can determine what data should be retransmitted sack is defined in rfc 2108 and rfc 2883 and is increasingly used we describe the use of sack along with congestion control in sec 6.5.10 6.5.5 tcp connection establishment connections are established in tcp by means of the three-way handshake discussed in sec 6.2.2 to establish a connection  one side  say  the server  passively waits for an incoming connection by executing the listen and accept primitives in that order  either specifying a specific source or nobody in particular the other side  say  the client  executes a connect primitive  specifying the ip address and port to which it wants to connect  the maximum tcp segment size it is willing to accept  and optionally some user data  e.g  a password   the connect primitive sends a tcp segment with the syn bit on and ack bit off and waits for a response when this segment arrives at the destination  the tcp entity there checks to see if there is a process that has done a listen on the port given in the destination port field if not  it sends a reply with the rst bit on to reject the connection if some process is listening to the port  that process is given the incoming tcp segment it can either accept or reject the connection if it accepts  an acknowledgement segment is sent back the sequence of tcp segments sent in the normal case is shown in fig 6-37  a   note that a syn segment consumes 1 byte of sequence space so that it can be acknowledged unambiguously sec 6.5 the internet transport protocols  tcp 561 time host 1 host 2 syn  seq = y  ack = x + 1  syn  seq = x   seq = x + 1  ack = y + 1  host 1 host 2 syn  seq = y  ack = x + 1  syn  seq = x  syn  seq = y  syn  seq = x  ack = y + 1   a   b  figure 6-37  a  tcp connection establishment in the normal case  b  simultaneous connection establishment on both sides in the event that two hosts simultaneously attempt to establish a connection between the same two sockets  the sequence of events is as illustrated in fig 6 37  b   the result of these events is that just one connection is established  not two  because connections are identified by their end points if the first setup results in a connection identified by  x  y  and the second one does too  only one table entry is made  namely  for  x  y   recall that the initial sequence number chosen by each host should cycle slowly  rather than be a constant such as 0 this rule is to protect against delayed duplicate packets  as we discussed in sec 6.2.2 originally this was accomplished with a clock-based scheme in which the clock ticked every 4 ? sec however  a vulnerability with implementing the three-way handshake is that the listening process must remember its sequence number as soon it responds with its own syn segment this means that a malicious sender can tie up resources on a host by sending a stream of syn segments and never following through to complete the connection this attack is called a syn flood  and it crippled many web servers in the 1990s one way to defend against this attack is to use syn cookies instead of remembering the sequence number  a host chooses a cryptographically generated sequence number  puts it on the outgoing segment  and forgets it if the three-way handshake completes  this sequence number  plus 1  will be returned to the host it can then regenerate the correct sequence number by running the same cryptographic function  as long as the inputs to that function are known  for example  the other host ? s ip address and port  and a local secret this procedure allows the host to check that an acknowledged sequence number is correct without having to 562 the transport layer chap 6 remember the sequence number separately there are some caveats  such as the inability to handle tcp options  so syn cookies may be used only when the host is subject to a syn flood however  they are an interesting twist on connection establishment for more information  see rfc 4987 and lemon  2002   6.5.6 tcp connection release although tcp connections are full duplex  to understand how connections are released it is best to think of them as a pair of simplex connections each simplex connection is released independently of its sibling to release a connection  either party can send a tcp segment with the fin bit set  which means that it has no more data to transmit when the fin is acknowledged  that direction is shut down for new data data may continue to flow indefinitely in the other direction  however when both directions have been shut down  the connection is released normally  four tcp segments are needed to release a connection  one fin and one ack for each direction however  it is possible for the first ack and the second fin to be contained in the same segment  reducing the total count to three just as with telephone calls in which both people say goodbye and hang up the phone simultaneously  both ends of a tcp connection may send fin segments at the same time these are each acknowledged in the usual way  and the connection is shut down there is  in fact  no essential difference between the two hosts releasing sequentially or simultaneously to avoid the two-army problem  discussed in sec 6.2.3   timers are used if a response to a fin is not forthcoming within two maximum packet lifetimes  the sender of the fin releases the connection the other side will eventually notice that nobody seems to be listening to it anymore and will time out as well while this solution is not perfect  given the fact that a perfect solution is theoretically impossible  it will have to do in practice  problems rarely arise 6.5.7 tcp connection management modeling the steps required to establish and release connections can be represented in a finite state machine with the 11 states listed in fig 6-38 in each state  certain events are legal when a legal event happens  some action may be taken if some other event happens  an error is reported each connection starts in the closed state it leaves that state when it does either a passive open  listen  or an active open  connect   if the other side does the opposite one  a connection is established and the state becomes established connection release can be initiated by either side when it is complete  the state returns to closed the finite state machine itself is shown in fig 6-39 the common case of a client actively connecting to a passive server is shown with heavy lines ? solid for the client  dotted for the server the lightface lines are unusual event sequences sec 6.5 the internet transport protocols  tcp 563 state description closed no connection is active or pending listen the server is waiting for an incoming call syn rcvd a connection request has arrived ; wait for ack syn sent the application has started to open a connection established the normal data transfer state fin wait 1 the application has said it is finished fin wait 2 the other side has agreed to release time wait wait for all packets to die off closing both sides have tried to close simultaneously close wait the other side has initiated a release last ack wait for all packets to die off figure 6-38 the states used in the tcp connection management finite state machine each line in fig 6-39 is marked by an event/action pair the event can either be a user-initiated system call  connect  listen  send  or close   a segment arrival  syn  fin  ack  or rst   or  in one case  a timeout of twice the maximum packet lifetime the action is the sending of a control segment  syn  fin  or rst  or nothing  indicated by ?  comments are shown in parentheses one can best understand the diagram by first following the path of a client  the heavy solid line   then later following the path of a server  the heavy dashed line   when an application program on the client machine issues a connect request  the local tcp entity creates a connection record  marks it as being in the syn sent state  and shoots off a syn segment note that many connections may be open  or being opened  at the same time on behalf of multiple applications  so the state is per connection and recorded in the connection record when the syn + ack arrives  tcp sends the final ack of the three-way handshake and switches into the established state data can now be sent and received when an application is finished  it executes a close primitive  which causes the local tcp entity to send a fin segment and wait for the corresponding ack  dashed box marked ? ? active close ? ?   when the ack arrives  a transition is made to the state fin wait 2 and one direction of the connection is closed when the other side closes  too  a fin comes in  which is acknowledged now both sides are closed  but tcp waits a time equal to twice the maximum packet lifetime to guarantee that all packets from the connection have died off  just in case the acknowledgement was lost when the timer goes off  tcp deletes the connection record now let us examine connection management from the server ? s viewpoint the server does a listen and settles down to see who turns up when a syn 564 the transport layer chap 6 closed listen established closing close wait  start  connect/syn  step 1 of the 3-way handshake  listen/ ? syn/syn + ack syn rcvd fin wait 1 time wait last ack fin wait 2 syn sent rst/ ? ack/ ?  active close  fin/ack fin + ack/ack fin/ack ack/ ? ack/ ? ack/ ? send/syn syn/syn + ack  simultaneous open   data transfer state  syn + ack/ack  step 3 of the 3-way handshake  close/fin close/fin fin/ack close/ ? close/ ? close/fin closed  passive close   timeout/   go back to start   step 2 of the 3-way handshake  figure 6-39 tcp connection management finite state machine the heavy solid line is the normal path for a client the heavy dashed line is the normal path for a server the light lines are unusual events each transition is labeled with the event causing it and the action resulting from it  separated by a slash comes in  it is acknowledged and the server goes to the syn rcvd state when the server ? s syn is itself acknowledged  the three-way handshake is complete and the server goes to the established state data transfer can now occur when the client is done transmitting its data  it does a close  which causes a fin to arrive at the server  dashed box marked ? ? passive close ? ?   the server is then signaled when it  too  does a close  a fin is sent to the client when the sec 6.5 the internet transport protocols  tcp 565 client ? s acknowledgement shows up  the server releases the connection and deletes the connection record 6.5.8 tcp sliding window as mentioned earlier  window management in tcp decouples the issues of acknowledgement of the correct receipt of segments and receiver buffer allocation for example  suppose the receiver has a 4096-byte buffer  as shown in fig 6-40 if the sender transmits a 2048-byte segment that is correctly received  the receiver will acknowledge the segment however  since it now has only 2048 bytes of buffer space  until the application removes some data from the buffer   it will advertise a window of 2048 starting at the next byte expected application does a 2-kb write application does a 2-kb write application reads 2 kb sender is blocked sender may send up to 2-kb receiver ? s buffer 0 4kb 2 kb 2 kb empty full 2 kb seq = 0 2 kb seq = 2048 1 kb seq = 4096 ack = 2048 win = 2048 ack = 4096 win = 0 ack = 4096 win = 2048 1 kb 2 kb sender receiver figure 6-40 window management in tcp now the sender transmits another 2048 bytes  which are acknowledged  but the advertised window is of size 0 the sender must stop until the application 566 the transport layer chap 6 process on the receiving host has removed some data from the buffer  at which time tcp can advertise a larger window and more data can be sent when the window is 0  the sender may not normally send segments  with two exceptions first  urgent data may be sent  for example  to allow the user to kill the process running on the remote machine second  the sender may send a 1-byte segment to force the receiver to reannounce the next byte expected and the window size this packet is called a window probe the tcp standard explicitly provides this option to prevent deadlock if a window update ever gets lost senders are not required to transmit data as soon as they come in from the application neither are receivers required to send acknowledgements as soon as possible for example  in fig 6-40  when the first 2 kb of data came in  tcp  knowing that it had a 4-kb window  would have been completely correct in just buffering the data until another 2 kb came in  to be able to transmit a segment with a 4-kb payload this freedom can be used to improve performance consider a connection to a remote terminal  for example using ssh or telnet  that reacts on every keystroke in the worst case  whenever a character arrives at the sending tcp entity  tcp creates a 21-byte tcp segment  which it gives to ip to send as a 41-byte ip datagram at the receiving side  tcp immediately sends a 40-byte acknowledgement  20 bytes of tcp header and 20 bytes of ip header   later  when the remote terminal has read the byte  tcp sends a window update  moving the window 1 byte to the right this packet is also 40 bytes finally  when the remote terminal has processed the character  it echoes the character for local display using a 41-byte packet in all  162 bytes of bandwidth are used and four segments are sent for each character typed when bandwidth is scarce  this method of doing business is not desirable one approach that many tcp implementations use to optimize this situation is called delayed acknowledgements the idea is to delay acknowledgements and window updates for up to 500 msec in the hope of acquiring some data on which to hitch a free ride assuming the terminal echoes within 500 msec  only one 41-byte packet now need be sent back by the remote side  cutting the packet count and bandwidth usage in half although delayed acknowledgements reduce the load placed on the network by the receiver  a sender that sends multiple short packets  e.g  41-byte packets containing 1 byte of data  is still operating inefficiently a way to reduce this usage is known as nagle ? s algorithm  nagle  1984   what nagle suggested is simple  when data come into the sender in small pieces  just send the first piece and buffer all the rest until the first piece is acknowledged then send all the buffered data in one tcp segment and start buffering again until the next segment is acknowledged that is  only one short packet can be outstanding at any time if many pieces of data are sent by the application in one round-trip time  nagle ? s algorithm will put the many pieces in one segment  greatly reducing the bandwidth used the algorithm additionally says that a new segment should be sent if enough data have trickled in to fill a maximum segment sec 6.5 the internet transport protocols  tcp 567 nagle ? s algorithm is widely used by tcp implementations  but there are times when it is better to disable it in particular  in interactive games that are run over the internet  the players typically want a rapid stream of short update packets gathering the updates to send them in bursts makes the game respond erratically  which makes for unhappy users a more subtle problem is that nagle ? s algorithm can sometimes interact with delayed acknowledgements to cause a temporary deadlock  the receiver waits for data on which to piggyback an acknowledgement  and the sender waits on the acknowledgement to send more data this interaction can delay the downloads of web pages because of these problems  nagle ? s algorithm can be disabled  which is called the tcp nodelay option   mogul and minshall  2001  discuss this and other solutions another problem that can degrade tcp performance is the silly window syndrome  clark  1982   this problem occurs when data are passed to the sending tcp entity in large blocks  but an interactive application on the receiving side reads data only 1 byte at a time to see the problem  look at fig 6-41 initially  the tcp buffer on the receiving side is full  i.e  it has a window of size 0  and the sender knows this then the interactive application reads one character from the tcp stream this action makes the receiving tcp happy  so it sends a window update to the sender saying that it is all right to send 1 byte the sender obliges and sends 1 byte the buffer is now full  so the receiver acknowledges the 1-byte segment and sets the window to 0 this behavior can go on forever clark ? s solution is to prevent the receiver from sending a window update for 1 byte instead  it is forced to wait until it has a decent amount of space available and advertise that instead specifically  the receiver should not send a window update until it can handle the maximum segment size it advertised when the connection was established or until its buffer is half empty  whichever is smaller furthermore  the sender can also help by not sending tiny segments instead  it should wait until it can send a full segment  or at least one containing half of the receiver ? s buffer size nagle ? s algorithm and clark ? s solution to the silly window syndrome are complementary nagle was trying to solve the problem caused by the sending application delivering data to tcp a byte at a time clark was trying to solve the problem of the receiving application sucking the data up from tcp a byte at a time both solutions are valid and can work together the goal is for the sender not to send small segments and the receiver not to ask for them the receiving tcp can go further in improving performance than just doing window updates in large units like the sending tcp  it can also buffer data  so it can block a read request from the application until it has a large chunk of data for it doing so reduces the number of calls to tcp  and the overhead   it also increases the response time  but for noninteractive applications like file transfer  efficiency may be more important than response time to individual requests another issue that the receiver must handle is that segments may arrive out of order the receiver will buffer the data until it can be passed up to the application 568 the transport layer chap 6 application reads 1 byte window update segment sent new byte arrives header header receiver 's buffer is full receiver 's buffer is full room for one more byte 1 byte figure 6-41 silly window syndrome in order actually  nothing bad would happen if out-of-order segments were discarded  since they would eventually be retransmitted by the sender  but it would be wasteful acknowledgements can be sent only when all the data up to the byte acknowledged have been received this is called a cumulative acknowledgement if the receiver gets segments 0  1  2  4  5  6  and 7  it can acknowledge everything up to and including the last byte in segment 2 when the sender times out  it then retransmits segment 3 as the receiver has buffered segments 4 through 7  upon receipt of segment 3 it can acknowledge all bytes up to the end of segment 7 6.5.9 tcp timer management tcp uses multiple timers  at least conceptually  to do its work the most important of these is the rto  retransmission timeout   when a segment is sent  a retransmission timer is started if the segment is acknowledged before the timer expires  the timer is stopped if  on the other hand  the timer goes off before the acknowledgement comes in  the segment is retransmitted  and the timer os started again   the question that arises is  how long should the timeout be ? this problem is much more difficult in the transport layer than in data link protocols such as 802.11 in the latter case  the expected delay is measured in sec 6.5 the internet transport protocols  tcp 569 microseconds and is highly predictable  i.e  has a low variance   so the timer can be set to go off just slightly after the acknowledgement is expected  as shown in fig 6-42  a   since acknowledgements are rarely delayed in the data link layer  due to lack of congestion   the absence of an acknowledgement at the expected time generally means either the frame or the acknowledgement has been lost 0.3 t t1 t2 0.2 0.1 0 0 10 20 round-trip time  microseconds   a   b  probability 0.3 0.2 0.1 0 probability 30 40 50 0 10 20 round-trip time  milliseconds  30 40 50 figure 6-42  a  probability density of acknowledgement arrival times in the data link layer  b  probability density of acknowledgement arrival times for tcp tcp is faced with a radically different environment the probability density function for the time it takes for a tcp acknowledgement to come back looks more like fig 6-42  b  than fig 6-42  a   it is larger and more variable determining the round-trip time to the destination is tricky even when it is known  deciding on the timeout interval is also difficult if the timeout is set too short  say  t1 in fig 6-42  b   unnecessary retransmissions will occur  clogging the internet with useless packets if it is set too long  e.g  t2   performance will suffer due to the long retransmission delay whenever a packet is lost furthermore  the mean and variance of the acknowledgement arrival distribution can change rapidly within a few seconds as congestion builds up or is resolved the solution is to use a dynamic algorithm that constantly adapts the timeout interval  based on continuous measurements of network performance the algorithm generally used by tcp is due to jacobson  1988  and works as follows for each connection  tcp maintains a variable  srtt  smoothed round-trip time   that is the best current estimate of the round-trip time to the destination in question when a segment is sent  a timer is started  both to see how long the acknowledgement takes and also to trigger a retransmission if it takes too long if 570 the transport layer chap 6 the acknowledgement gets back before the timer expires  tcp measures how long the acknowledgement took  say  r it then updates srtt according to the formula srtt ? ? ? ? srtt ? ?  1 ? ? ?  r where ? ? is a smoothing factor that determines how quickly the old values are forgotten typically  ? ? ? ? 7/8 this kind of formula is an ewma  exponentially weighted moving average  or low-pass filter that discards noise in the samples even given a good value of srtt  choosing a suitable retransmission timeout is a nontrivial matter initial implementations of tcp used 2xrtt  but experience showed that a constant value was too inflexible because it failed to respond when the variance went up in particular  queueing models of random  i.e  poisson  traffic predict that when the load approaches capacity  the delay becomes large and highly variable this can lead to the retransmission timer firing and a copy of the packet being retransmitted although the original packet is still transiting the network it is all the more likely to happen under conditions of high load  which is the worst time at which to send additional packets into the network to fix this problem  jacobson proposed making the timeout value sensitive to the variance in round-trip times as well as the smoothed round-trip time this change requires keeping track of another smoothed variable  rttvar  round trip time variation  that is updated using the formula rttvar ? ? ? ? rttvar ? ?  1 ? ? ?  | srtt ? ? r | this is an ewma as before  and typically ? ? ? ? 3/4 the retransmission timeout  rto  is set to be rto ? ? srtt ? ? 4 ? ? rttvar the choice of the factor 4 is somewhat arbitrary  but multiplication by 4 can be done with a single shift  and less than 1 % of all packets come in more than four standard deviations late note that rttvar is not exactly the same as the standard deviation  it is really the mean deviation   but it is close enough in practice jacobson ? s paper is full of clever tricks to compute timeouts using only integer adds  subtracts  and shifts this economy is not needed for modern hosts  but it has become part of the culture that allows tcp to run on all manner of devices  from supercomputers down to tiny devices so far nobody has put it on an rfid chip  but someday ? who knows more details of how to compute this timeout  including initial settings of the variables  are given in rfc 2988 the retransmission timer is also held to a minimum of 1 second  regardless of the estimates this is a conservative value chosen to prevent spurious retransmissions based on measurements  allman and paxson  1999   one problem that occurs with gathering the samples  r  of the round-trip time is what to do when a segment times out and is sent again when the acknowledgement comes in  it is unclear whether the acknowledgement refers to the first sec 6.5 the internet transport protocols  tcp 571 transmission or a later one guessing wrong can seriously contaminate the retransmission timeout phil karn discovered this problem the hard way karn is an amateur radio enthusiast interested in transmitting tcp/ip packets by ham radio  a notoriously unreliable medium he made a simple proposal  do not update estimates on any segments that have been retransmitted additionally  the timeout is doubled on each successive retransmission until the segments get through the first time this fix is called karn ? s algorithm  karn and partridge  1987   most tcp implementations use it the retransmission timer is not the only timer tcp uses a second timer is the persistence timer it is designed to prevent the following deadlock the receiver sends an acknowledgement with a window size of 0  telling the sender to wait later  the receiver updates the window  but the packet with the update is lost now the sender and the receiver are each waiting for the other to do something when the persistence timer goes off  the sender transmits a probe to the receiver the response to the probe gives the window size if it is still 0  the persistence timer is set again and the cycle repeats if it is nonzero  data can now be sent a third timer that some implementations use is the keepalive timer when a connection has been idle for a long time  the keepalive timer may go off to cause one side to check whether the other side is still there if it fails to respond  the connection is terminated this feature is controversial because it adds overhead and may terminate an otherwise healthy connection due to a transient network partition the last timer used on each tcp connection is the one used in the time wait state while closing it runs for twice the maximum packet lifetime to make sure that when a connection is closed  all packets created by it have died off 6.5.10 tcp congestion control we have saved one of the key functions of tcp for last  congestion control when the load offered to any network is more than it can handle  congestion builds up the internet is no exception the network layer detects congestion when queues grow large at routers and tries to manage it  if only by dropping packets it is up to the transport layer to receive congestion feedback from the network layer and slow down the rate of traffic that it is sending into the network in the internet  tcp plays the main role in controlling congestion  as well as the main role in reliable transport that is why it is such a special protocol we covered the general situation of congestion control in sec 6.3 one key takeaway was that a transport protocol using an aimd  additive increase multiplicative decrease  control law in response to binary congestion signals from the network would converge to a fair and efficient bandwidth allocation tcp congestion control is based on implementing this approach using a window and with packet loss as the binary signal to do so  tcp maintains a congestion window 572 the transport layer chap 6 whose size is the number of bytes the sender may have in the network at any time the corresponding rate is the window size divided by the round-trip time of the connection tcp adjusts the size of the window according to the aimd rule recall that the congestion window is maintained in addition to the flow control window  which specifies the number of bytes that the receiver can buffer both windows are tracked in parallel  and the number of bytes that may be sent is the smaller of the two windows thus  the effective window is the smaller of what the sender thinks is all right and what the receiver thinks is all right it takes two to tango tcp will stop sending data if either the congestion or the flow control window is temporarily full if the receiver says ? ? send 64 kb ? ? but the sender knows that bursts of more than 32 kb clog the network  it will send 32 kb on the other hand  if the receiver says ? ? send 64 kb ? ? and the sender knows that bursts of up to 128 kb get through effortlessly  it will send the full 64 kb requested the flow control window was described earlier  and in what follows we will only describe the congestion window modern congestion control was added to tcp largely through the efforts of van jacobson  1988   it is a fascinating story starting in 1986  the growing popularity of the early internet led to the first occurrence of what became known as a congestion collapse  a prolonged period during which goodput dropped precipitously  i.e  by more than a factor of 100  due to congestion in the network jacobson  and many others  set out to understand what was happening and remedy the situation the high-level fix that jacobson implemented was to approximate an aimd congestion window the interesting part  and much of the complexity of tcp congestion control  is how he added this to an existing implementation without changing any of the message formats  which made it instantly deployable to start  he observed that packet loss is a suitable signal of congestion this signal comes a little late  as the network is already congested  but it is quite dependable after all  it is difficult to build a router that does not drop packets when it is overloaded this fact is unlikely to change even when terabyte memories appear to buffer vast numbers of packets  we will probably have terabit/sec networks to fill up those memories however  using packet loss as a congestion signal depends on transmission errors being relatively rare this is not normally the case for wireless links such as 802.11  which is why they include their own retransmission mechanism at the link layer because of wireless retransmissions  network layer packet loss due to transmission errors is normally masked on wireless networks it is also rare on other links because wires and optical fibers typically have low bit-error rates all the internet tcp algorithms assume that lost packets are caused by congestion and monitor timeouts and look for signs of trouble the way miners watch their canaries a good retransmission timer is needed to detect packet loss signals accurately and in a timely manner we have already discussed how the tcp retransmission timer includes estimates of the mean and variation in round-trip sec 6.5 the internet transport protocols  tcp 573 times fixing this timer  by including the variation factor  was an important step in jacobson ? s work given a good retransmission timeout  the tcp sender can track the outstanding number of bytes  which are loading the network it simply looks at the difference between the sequence numbers that are transmitted and acknowledged now it seems that our task is easy all we need to do is to track the congestion window  using sequence and acknowledgement numbers  and adjust the congestion window using an aimd rule as you might have expected  it is more complicated than that a first consideration is that the way packets are sent into the network  even over short periods of time  must be matched to the network path otherwise the traffic will cause congestion for example  consider a host with a congestion window of 64 kb attached to a 1-gbps switched ethernet if the host sends the entire window at once  this burst of traffic may travel over a slow 1-mbps adsl line further along the path the burst that took only half a millisecond on the 1-gbps line will clog the 1-mbps line for half a second  completely disrupting protocols such as voice over ip this behavior might be a good idea for a protocol designed to cause congestion  but not for a protocol to control it however  it turns out that we can use small bursts of packets to our advantage fig 6-43 shows what happens when a sender on a fast network  the 1-gbps link  sends a small burst of four packets to a receiver on a slow network  the 1 mbps link  that is the bottleneck or slowest part of the path initially the four packets travel over the link as quickly as they can be sent by the sender at the router  they are queued while being sent because it takes longer to send a packet over the slow link than to receive the next packet over the fast link but the queue is not large because only a small number of packets were sent at once note the increased length of the packets on the slow link the same packet  of 1 kb say  is now longer because it takes more time to send it on a slow link than on a fast one fast link slow link  bottleneck  1  burst of packets sent on fast link 2  burst queues at router and drains onto slow link 3  receive acks packets at slow link rate 4  acks preserve slow link timing at sender ack clock sender receiver                   figure 6-43 a burst of packets from a sender and the returning ack clock eventually the packets get to the receiver  where they are acknowledged the times for the acknowledgements reflect the times at which the packets arrived at the receiver after crossing the slow link they are spread out compared to the original packets on the fast link as these acknowledgements travel over the network and back to the sender they preserve this timing 574 the transport layer chap 6 the key observation is this  the acknowledgements return to the sender at about the rate that packets can be sent over the slowest link in the path this is precisely the rate that the sender wants to use if it injects new packets into the network at this rate  they will be sent as fast as the slow link permits  but they will not queue up and congest any router along the path this timing is known as an ack clock it is an essential part of tcp by using an ack clock  tcp smoothes out traffic and avoids unnecessary queues at routers a second consideration is that the aimd rule will take a very long time to reach a good operating point on fast networks if the congestion window is started from a small size consider a modest network path that can support 10 mbps with an rtt of 100 msec the appropriate congestion window is the bandwidth-delay product  which is 1 mbit or 100 packets of 1250 bytes each if the congestion window starts at 1 packet and increases by 1 packet every rtt  it will be 100 rtts or 10 seconds before the connection is running at about the right rate that is a long time to wait just to get to the right speed for a transfer we could reduce this startup time by starting with a larger initial window  say of 50 packets but this window would be far too large for slow or short links it would cause congestion if used all at once  as we have just described instead  the solution jacobson chose to handle both of these considerations is a mix of linear and multiplicative increase when a connection is established  the sender initializes the congestion window to a small initial value of at most four segments ; the details are described in rfc 3390  and the use of four segments is an increase from an earlier initial value of one segment based on experience the sender then sends the initial window the packets will take a round-trip time to be acknowledged for each segment that is acknowledged before the retransmission timer goes off  the sender adds one segment ? s worth of bytes to the congestion window plus  as that segment has been acknowledged  there is now one less segment in the network the upshot is that every acknowledged segment allows two more segments to be sent the congestion window is doubling every roundtrip time this algorithm is called slow start  but it is not slow at all ? it is exponential growth ? except in comparison to the previous algorithm that let an entire flow control window be sent all at once slow start is shown in fig 6-44 in the first round-trip time  the sender injects one packet into the network  and the receiver receives one packet   two packets are sent in the next round-trip time  then four packets in the third round-trip time slow-start works well over a range of link speeds and round-trip times  and uses an ack clock to match the rate of sender transmissions to the network path take a look at the way acknowledgements return from the sender to the receiver in fig 6-44 when the sender gets an acknowledgement  it increases the congestion window by one and immediately sends two packets into the network  one packet is the increase by one ; the other packet is a replacement for the packet that has been acknowledged and left the network at all times  the number of sec 6.5 the internet transport protocols  tcp 575 cwnd = 1 1 rtt  1 packet cwnd = 2 cwnd = 3 cwnd = 4 cwnd = 5 cwnd = 6 cwnd = 7 cwnd = 8 1 rtt  2 packets 1 rtt  4 packets 1 rtt  4 packets  pipe is full  data acknowledgement tcp sender tcp receiver figure 6-44 slow start from an initial congestion window of one segment unacknowledged packets is given by the congestion window  however  these two packets will not necessarily arrive at the receiver as closely spaced as when they were sent for example  suppose the sender is on a 100-mbps ethernet each packet of 1250 bytes takes 100 ? sec to send so the delay between the packets can be as small as 100 ? sec the situation changes if these packets go across a 1 mbps adsl link anywhere along the path it now takes 10 msec to send the same packet this means that the minimum spacing between the two packets has grown by a factor of 100 unless the packets have to wait together in a queue on a later link  the spacing will remain large in fig 6-44  this effect is shown by enforcing a minimum spacing between data packets arriving at the receiver the same spacing is kept when the receiver sends acknowledgements  and thus when the sender receives the acknowledgements if the network path is slow  acknowledgements will come in slowly  after a delay of an rtt   if the network path is fast  acknowledgements will come in quickly  again  after the rtt   all the sender has to do is follow the timing of the ack clock as it injects new packets  which is what slow start does because slow start causes exponential growth  eventually  and sooner rather than later  it will send too many packets into the network too quickly when this happens  queues will build up in the network when the queues are full  one or more packets will be lost after this happens  the tcp sender will time out when an acknowledgement fails to arrive in time there is evidence of slow start growing too fast in fig 6-44 after three rtts  four packets are in the network these four packets take an entire rtt to arrive at the receiver that is  a congestion window of four packets is the right size for this connection however  as these packets are acknowledged  slow start continues to grow the congestion window  reaching eight packets in another rtt only four of these packets can reach the receiver in one rtt  no matter how many are sent that is  the network pipe is full additional packets placed into the network by the sender will build up in 576 the transport layer chap 6 router queues  since they can not be delivered to the receiver quickly enough congestion and packet loss will occur soon to keep slow start under control  the sender keeps a threshold for the connection called the slow start threshold initially this value is set arbitrarily high  to the size of the flow control window  so that it will not limit the connection tcp keeps increasing the congestion window in slow start until a timeout occurs or the congestion window exceeds the threshold  or the receiver ? s window is filled   whenever a packet loss is detected  for example  by a timeout  the slow start threshold is set to be half of the congestion window and the entire process is restarted the idea is that the current window is too large because it caused congestion previously that is only now detected by a timeout half of the window  which was used successfully at an earlier time  is probably a better estimate for a congestion window that is close to the path capacity but will not cause loss in our example in fig 6-44  growing the congestion window to eight packets may cause loss  while the congestion window of four packets in the previous rtt was the right value the congestion window is then reset to its small initial value and slow start resumes whenever the slow start threshold is crossed  tcp switches from slow start to additive increase in this mode  the congestion window is increased by one segment every round-trip time like slow start  this is usually implemented with an increase for every segment that is acknowledged  rather than an increase once per rtt call the congestion window cwnd and the maximum segment size mss a common approximation is to increase cwnd by  mss ? ? mss  /cwnd for each of the cwnd /mss packets that may be acknowledged this increase does not need to be fast the whole idea is for a tcp connection to spend a lot of time with its congestion window close to the optimum value ? not so small that throughput will be low  and not so large that congestion will occur additive increase is shown in fig 6-45 for the same situation as slow start at the end of every rtt  the sender ? s congestion window has grown enough that it can inject an additional packet into the network compared to slow start  the linear rate of growth is much slower it makes little difference for small congestion windows  as is the case here  but a large difference in the time taken to grow the congestion window to 100 segments  for example there is something else that we can do to improve performance too the defect in the scheme so far is waiting for a timeout timeouts are relatively long because they must be conservative after a packet is lost  the receiver can not acknowledge past it  so the acknowledgement number will stay fixed  and the sender will not be able to send any new packets into the network because its congestion window remains full this condition can continue for a relatively long period until the timer fires and the lost packet is retransmitted at that stage  tcp slow starts again there is a quick way for the sender to recognize that one of its packets has been lost as packets beyond the lost packet arrive at the receiver  they trigger sec 6.5 the internet transport protocols  tcp 577 cwnd = 2 1 rtt  2 packets cwnd = 3 cwnd = 4 cwnd = 5 1 rtt  3 packets 1 rtt  4 packets 1 rtt  4 packets  pipe is full  data acknowledgement tcp sender tcp receiver cwnd = 1 1 rtt  1 packet figure 6-45 additive increase from an initial congestion window of one segment acknowledgements that return to the sender these acknowledgements bear the same acknowledgement number they are called duplicate acknowledgements each time the sender receives a duplicate acknowledgement  it is likely that another packet has arrived at the receiver and the lost packet still has not shown up because packets can take different paths through the network  they can arrive out of order this will trigger duplicate acknowledgements even though no packets have been lost however  this is uncommon in the internet much of the time when there is reordering across multiple paths  the received packets are usually not reordered too much thus  tcp somewhat arbitrarily assumes that three duplicate acknowledgements imply that a packet has been lost the identity of the lost packet can be inferred from the acknowledgement number as well it is the very next packet in sequence this packet can then be retransmitted right away  before the retransmission timeout fires this heuristic is called fast retransmission after it fires  the slow start threshold is still set to half the current congestion window  just as with a timeout slow start can be restarted by setting the congestion window to one packet with this window size  a new packet will be sent after the one round-trip time that it takes to acknowledge the retransmitted packet along with all data that had been sent before the loss was detected an illustration of the congestion algorithm we have built up so far is shown in fig 6-46 this version of tcp is called tcp tahoe after the 4.2bsd tahoe release in 1988 in which it was included the maximum segment size here is 1 kb initially  the congestion window was 64 kb  but a timeout occurred  so the threshold is set to 32 kb and the congestion window to 1 kb for transmission 0 the congestion window grows exponentially until it hits the threshold  32 kb   the 578 the transport layer chap 6 window is increased every time a new acknowledgement arrives rather than continuously  which leads to the discrete staircase pattern after the threshold is passed  the window grows linearly it is increased by one segment every rtt 5 transmission round  rtts  additive increase threshold 32kb packet loss congestion window  kb or packets  10 15 20 30 35 40 25 2 4 6 8 10 12 14 16 18 20 22 24 slow start 0 threshold 20kb figure 6-46 slow start followed by additive increase in tcp tahoe the transmissions in round 13 are unlucky  they should have known   and one of them is lost in the network this is detected when three duplicate acknowledgements arrive at that time  the lost packet is retransmitted  the threshold is set to half the current window  by now 40 kb  so half is 20 kb   and slow start is initiated all over again restarting with a congestion window of one packet takes one round-trip time for all of the previously transmitted data to leave the network and be acknowledged  including the retransmitted packet the congestion window grows with slow start as it did previously  until it reaches the new threshold of 20 kb at that time  the growth becomes linear again it will continue in this fashion until another packet loss is detected via duplicate acknowledgements or a timeout  or the receiver ? s window becomes the limit   tcp tahoe  which included good retransmission timers  provided a working congestion control algorithm that solved the problem of congestion collapse jacobson realized that it is possible to do even better at the time of the fast retransmission  the connection is running with a congestion window that is too large  but it is still running with a working ack clock every time another duplicate acknowledgement arrives  it is likely that another packet has left the network using duplicate acknowledgements to count the packets in the network  makes it possible to let some packets exit the network and continue to send a new packet for each additional duplicate acknowledgement fast recovery is the heuristic that implements this behavior it is a temporary mode that aims to maintain the ack clock running with a congestion window that is the new threshold  or half the value of the congestion window at the time of the sec 6.5 the internet transport protocols  tcp 579 fast retransmission to do this  duplicate acknowledgements are counted  including the three that triggered fast retransmission  until the number of packets in the network has fallen to the new threshold this takes about half a round-trip time from then on  a new packet can be sent for each duplicate acknowledgement that is received one round-trip time after the fast retransmission  the lost packet will have been acknowledged at that time  the stream of duplicate acknowledgements will cease and fast recovery mode will be exited the congestion window will be set to the new slow start threshold and grows by linear increase the upshot of this heuristic is that tcp avoids slow start  except when the connection is first started and when a timeout occurs the latter can still happen when more than one packet is lost and fast retransmission does not recover adequately instead of repeated slow starts  the congestion window of a running connection follows a sawtooth pattern of additive increase  by one segment every rtt  and multiplicative decrease  by half in one rtt   this is exactly the aimd rule that we sought to implement this sawtooth behavior is shown in fig 6-47 it is produced by tcp reno  named after the 4.3bsd reno release in 1990 in which it was included tcp reno is essentially tcp tahoe plus fast recovery after an initial slow start  the congestion window climbs linearly until a packet loss is detected by duplicate acknowledgements the lost packet is retransmitted and fast recovery is used to keep the ack clock running until the retransmission is acknowledged at that time  the congestion window is resumed from the new slow start threshold  rather than from 1 this behavior continues indefinitely  and the connection spends most of the time with its congestion window close to the optimum value of the bandwidth delay product 5 transmission round  rtts  additive packet increase loss congestion window  kb or packets  10 15 20 30 35 40 25 4 8 12 16 20 24 28 32 36 40 44 48 slow start 0 thresh threshold fast recovery multiplicative decrease threshold figure 6-47 fast recovery and the sawtooth pattern of tcp reno tcp reno with its mechanisms for adjusting the congestion window has formed the basis for tcp congestion control for more than two decades most of 580 the transport layer chap 6 the changes in the intervening years have adjusted these mechanisms in minor ways  for example  by changing the choices of the initial window and removing various ambiguities some improvements have been made for recovering from two or more losses in a window of packets for example  the tcp newreno version uses a partial advance of the acknowledgement number after a retransmission to find and repair another loss  hoe  1996   as described in rfc 3782 since the mid-1990s  several variations have emerged that follow the principles we have described but use slightly different control laws for example  linux uses a variant called cubic tcp  ha et al  2008  and windows includes a variant called compound tcp  tan et al  2006   two larger changes have also affected tcp implementations first  much of the complexity of tcp comes from inferring from a stream of duplicate acknowledgements which packets have arrived and which packets have been lost the cumulative acknowledgement number does not provide this information a simple fix is the use of sack  selective acknowledgements   which lists up to three ranges of bytes that have been received with this information  the sender can more directly decide what packets to retransmit and track the packets in flight to implement the congestion window when the sender and receiver set up a connection  they each send the sack permitted tcp option to signal that they understand selective acknowledgements once sack is enabled for a connection  it works as shown in fig 6-48 a receiver uses the tcp acknowledgement number field in the normal manner  as a cumulative acknowledgement of the highest in-order byte that has been received when it receives packet 3 out of order  because packet 2 was lost   it sends a sack option for the received data along with the  duplicate  cumulative acknowledgement for packet 1 the sack option gives the byte ranges that have been received above the number given by the cumulative acknowledgement the first range is the packet that triggered the duplicate acknowledgement the next ranges  if present  are older blocks up to three ranges are commonly used by the time packet 6 is received  two sack byte ranges are used to indicate that packet 6 and packets 3 to 4 have been received  in addition to all packets up to packet 1 from the information in each sack option that it receives  the sender can decide which packets to retransmit in this case  retransmitting packets 2 and 5 would be a good idea sack is strictly advisory information the actual detection of loss using duplicate acknowledgements and adjustments to the congestion window proceed just as before however  with sack  tcp can recover more easily from situations in which multiple packets are lost at roughly the same time  since the tcp sender knows which packets have not been received sack is now widely deployed it is described in rfc 2883  and tcp congestion control using sack is described in rfc 3517 the second change is the use of ecn  explicit congestion notification  in addition to packet loss as a congestion signal ecn is an ip layer mechanism to sec 6.5 the internet transport protocols  tcp 581 6 5 4 3 2 1 lost packets ack  1 ack  1 sack  3 ack  1 sack  3-4 ack  1 sack  6  3-4 sender receiver retransmit 2 and 5 ! figure 6-48 selective acknowledgements notify hosts of congestion that we described in sec 5.3.4 with it  the tcp receiver can receive congestion signals from ip the use of ecn is enabled for a tcp connection when both the sender and receiver indicate that they are capable of using ecn by setting the ece and cwr bits during connection establishment if ecn is used  each packet that carries a tcp segment is flagged in the ip header to show that it can carry an ecn signal routers that support ecn will set a congestion signal on packets that can carry ecn flags when congestion is approaching  instead of dropping those packets after congestion has occurred the tcp receiver is informed if any packet that arrives carries an ecn congestion signal the receiver then uses the ece  ecn echo  flag to signal the tcp sender that its packets have experienced congestion the sender tells the receiver that it has heard the signal by using the cwr  congestion window reduced  flag the tcp sender reacts to these congestion notifications in exactly the same way as it does to packet loss that is detected via duplicate acknowledgements however  the situation is strictly better congestion has been detected and no packet was harmed in any way ecn is described in rfc 3168 it requires both host and router support  and is not yet widely used on the internet for more information on the complete set of congestion control behaviors that are implemented in tcp  see rfc 5681 6.5.11 the future of tcp as the workhorse of the internet  tcp has been used for many applications and extended over time to give good performance over a wide range of networks many versions are deployed with slightly different implementations than the classic algorithms we have described  especially for congestion control and robustness against attacks it is likely that tcp will continue to evolve with the internet we will mention two particular issues the first one is that tcp does not provide the transport semantics that all applications want for example  some applications want to send messages or records whose boundaries need to be preserved other applications work with a group of 582 the transport layer chap 6 related conversations  such as a web browser that transfers several objects from the same server still other applications want better control over the network paths that they use tcp with its standard sockets interface does not meet these needs well essentially  the application has the burden of dealing with any problem not solved by tcp this has led to proposals for new protocols that would provide a slightly different interface two examples are sctp  stream control transmission protocol   defined in rfc 4960  and sst  structured stream transport   ford  2007   however  whenever someone proposes changing something that has worked so well for so long  there is always a huge battle between the ? ? users are demanding more features ? ? and ? ? if it ain ? t broke  don ? t fix it ? ? camps the second issue is congestion control you may have expected that this is a solved problem after our deliberations and the mechanisms that have been developed over time not so the form of tcp congestion control that we described  and which is widely used  is based on packet losses as a signal of congestion when padhye et al  1998  modeled tcp throughput based on the sawtooth pattern  they found that the packet loss rate must drop off rapidly with increasing speed to reach a throughput of 1 gbps with a round-trip time of 100 ms and 1500 byte packets  one packet can be lost approximately every 10 minutes that is a packet loss rate of 2 ? ? 10 ? 8  which is incredibly small it is too infrequent to serve as a good congestion signal  and any other source of loss  e.g  packet transmission error rates of 10 ? 7  can easily dominate it  limiting the throughput this relationship has not been a problem in the past  but networks are getting faster and faster  leading many people to revisit congestion control one possibility is to use an alternate congestion control in which the signal is not packet loss at all we gave several examples in sec 6.2 the signal might be round-trip time  which grows when the network becomes congested  as is used by fast tcp  wei et al  2006   other approaches are possible too  and time will tell which is the best 6.6 performance issues performance issues are very important in computer networks when hundreds or thousands of computers are interconnected  complex interactions  with unforeseen consequences  are common frequently  this complexity leads to poor performance and no one knows why in the following sections  we will examine many issues related to network performance to see what kinds of problems exist and what can be done about them unfortunately  understanding network performance is more an art than a science there is little underlying theory that is actually of any use in practice the best we can do is give some rules of thumb gained from hard experience and present examples taken from the real world we have delayed this discussion until we studied the transport layer because the performance that applications receive sec 6.6 performance issues 583 depends on the combined performance of the transport  network and link layers  and to be able to use tcp as an example in various places in the next sections  we will look at six aspects of network performance  1 performance problems 2 measuring network performance 3 host design for fast networks 4 fast segment processing 5 header compression 6 protocols for ? ? long fat ? ? networks these aspects consider network performance both at the host and across the network  and as networks are increased in speed and size 6.6.1 performance problems in computer networks some performance problems  such as congestion  are caused by temporary resource overloads if more traffic suddenly arrives at a router than the router can handle  congestion will build up and performance will suffer we studied congestion in detail in this and the previous chapter performance also degrades when there is a structural resource imbalance for example  if a gigabit communication line is attached to a low-end pc  the poor host will not be able to process the incoming packets fast enough and some will be lost these packets will eventually be retransmitted  adding delay  wasting bandwidth  and generally reducing performance overloads can also be synchronously triggered as an example  if a segment contains a bad parameter  e.g  the port for which it is destined   in many cases the receiver will thoughtfully send back an error notification now consider what could happen if a bad segment is broadcast to 1000 machines  each one might send back an error message the resulting broadcast storm could cripple the network udp suffered from this problem until the icmp protocol was changed to cause hosts to refrain from responding to errors in udp segments sent to broadcast addresses wireless networks must be particularly careful to avoid unchecked broadcast responses because broadcast occurs naturally and the wireless bandwidth is limited a second example of synchronous overload is what happens after an electrical power failure when the power comes back on  all the machines simultaneously start rebooting a typical reboot sequence might require first going to some  dhcp  server to learn one ? s true identity  and then to some file server to get a copy of the operating system if hundreds of machines in a data center all do this at once  the server will probably collapse under the load 584 the transport layer chap 6 even in the absence of synchronous overloads and the presence of sufficient resources  poor performance can occur due to lack of system tuning for example  if a machine has plenty of cpu power and memory but not enough of the memory has been allocated for buffer space  flow control will slow down segment reception and limit performance this was a problem for many tcp connections as the internet became faster but the default size of the flow control window stayed fixed at 64 kb another tuning issue is setting timeouts when a segment is sent  a timer is set to guard against loss of the segment if the timeout is set too short  unnecessary retransmissions will occur  clogging the wires if the timeout is set too long  unnecessary delays will occur after a segment is lost other tunable parameters include how long to wait for data on which to piggyback before sending a separate acknowledgement  and how many retransmissions to make before giving up another performance problem that occurs with real-time applications like audio and video is jitter having enough bandwidth on average is not sufficient for good performance short transmission delays are also required consistently achieving short delays demands careful engineering of the load on the network  quality-of-service support at the link and network layers  or both 6.6.2 network performance measurement when a network performs poorly  its users often complain to the folks running it  demanding improvements to improve the performance  the operators must first determine exactly what is going on to find out what is really happening  the operators must make measurements in this section  we will look at network performance measurements much of the discussion below is based on the seminal work of mogul  1993   measurements can be made in different ways and at many locations  both in the protocol stack and physically   the most basic kind of measurement is to start a timer when beginning some activity and see how long that activity takes for example  knowing how long it takes for a segment to be acknowledged is a key measurement other measurements are made with counters that record how often some event has happened  e.g  number of lost segments   finally  one is often interested in knowing the amount of something  such as the number of bytes processed in a certain time interval measuring network performance and parameters has many potential pitfalls we list a few of them here any systematic attempt to measure network performance should be careful to avoid these make sure that the sample size is large enough do not measure the time to send one segment  but repeat the measurement  say  one million times and take the average startup effects  such as the 802.16 nic or cable modem getting a bandwidth reservation after an idle period  can sec 6.6 performance issues 585 slow the first segment  and queueing introduces variability having a large sample will reduce the uncertainty in the measured mean and standard deviation this uncertainty can be computed using standard statistical formulas make sure that the samples are representative ideally  the whole sequence of one million measurements should be repeated at different times of the day and the week to see the effect of different network conditions on the measured quantity measurements of congestion  for example  are of little use if they are made at a moment when there is no congestion sometimes the results may be counterintuitive at first  such as heavy congestion at 11 a.m  and 1 p.m  but no congestion at noon  when all the users are at lunch   with wireless networks  location is an important variable because of signal propagation even a measurement node placed close to a wireless client may not observe the same packets as the client due to differences in the antennas it is best to take measurements from the wireless client under study to see what it sees failing that  it is possible to use techniques to combine the wireless measurements taken at different vantage points to gain a more complete picture of what is going on  mahajan et al  2006   caching can wreak havoc with measurements repeating a measurement many times will return an unexpectedly fast answer if the protocols use caching mechanisms for instance  fetching a web page or looking up a dns name  to find the ip address  may involve a network exchange the first time  and then return the answer from a local cache without sending any packets over the network the results from such a measurement are essentially worthless  unless you want to measure cache performance   buffering can have a similar effect tcp/ip performance tests have been known to report that udp can achieve a performance substantially higher than the network allows how does this occur ? a call to udp normally returns control as soon as the message has been accepted by the kernel and added to the transmission queue if there is sufficient buffer space  timing 1000 udp calls does not mean that all the data have been sent most of them may still be in the kernel  but the performance test program thinks they have all been transmitted caution is advised to be absolutely sure that you understand how data can be cached and buffered as part of a network operation be sure that nothing unexpected is going on during your tests making measurements at the same time that some user has decided to run a video conference over your network will often give different results than if there is no video conference it is best to run tests on an idle network and create the 586 the transport layer chap 6 entire workload yourself even this approach has pitfalls  though while you might think nobody will be using the network at 3 a.m  that might be when the automatic backup program begins copying all the disks to tape or  there might be heavy traffic for your wonderful web pages from distant time zones wireless networks are challenging in this respect because it is often not possible to separate them from all sources of interference even if there are no other wireless networks sending traffic nearby  someone may microwave popcorn and inadvertently cause interference that degrades 802.11 performance for these reasons  it is a good practice to monitor the overall network activity so that you can at least realize when something unexpected does happen be careful when using a coarse-grained clock computer clocks function by incrementing some counter at regular intervals for example  a millisecond timer adds 1 to a counter every 1 msec using such a timer to measure an event that takes less than 1 msec is possible but requires some care some computers have more accurate clocks  of course  but there are always shorter events to measure too note that clocks are not always as accurate as the precision with which the time is returned when they are read to measure the time to make a tcp connection  for example  the clock  say  in milliseconds  should be read out when the transport layer code is entered and again when it is exited if the true connection setup time is 300 ? sec  the difference between the two readings will be either 0 or 1  both wrong however  if the measurement is repeated one million times and the total of all measurements is added up and divided by one million  the mean time will be accurate to better than 1 ? sec be careful about extrapolating the results suppose that you make measurements with simulated network loads running from 0  idle  to 0.4  40 % of capacity   for example  the response time to send a voice-over-ip packet over an 802.11 network might be as shown by the data points and solid line through them in fig 6-49 it may be tempting to extrapolate linearly  as shown by the dotted line however  many queueing results involve a factor of 1/  1 ? ? ?   where ? ? is the load  so the true values may look more like the dashed line  which rises much faster than linearly when the load gets high that is  beware contention effects that become much more pronounced at high load 6.6.3 host design for fast networks measuring and tinkering can improve performance considerably  but they can not substitute for good design in the first place a poorly designed network can be improved only so much beyond that  it has to be redesigned from scratch sec 6.6 performance issues 587 5 4 3 2 1 0 response time 0 0.1 0.2 0.3 0.4 0.5 1.0 load 0.6 0.7 0.8 0.9 figure 6-49 response as a function of load in this section  we will present some rules of thumb for software implementation of network protocols on hosts surprisingly  experience shows that this is often a performance bottleneck on otherwise fast networks  for two reasons first  nics  network interface cards  and routers have already been engineered  with hardware support  to run at ? ? wire speed ? ? this means that they can process packets as quickly as the packets can possibly arrive on the link second  the relevant performance is that which applications obtain it is not the link capacity  but the throughput and delay after network and transport processing reducing software overheads improves performance by increasing throughput and decreasing delay it can also reduce the energy that is spent on networking  which is an important consideration for mobile computers most of these ideas have been common knowledge to network designers for years they were first stated explicitly by mogul  1993  ; our treatment largely follows his another relevant source is metcalfe  1993   host speed is more important than network speed long experience has shown that in nearly all fast networks  operating system and protocol overhead dominate actual time on the wire for example  in theory  the minimum rpc time on a 1-gbps ethernet is 1 ? sec  corresponding to a minimum  512-byte  request followed by a minimum  512-byte  reply in practice  overcoming the software overhead and getting the rpc time anywhere near there is a substantial achievement it rarely happens in practice 588 the transport layer chap 6 similarly  the biggest problem in running at 1 gbps is often getting the bits from the user ? s buffer out onto the network fast enough and having the receiving host process them as fast as they come in if you double the host  cpu and memory  speed  you often can come close to doubling the throughput doubling the network capacity has no effect if the bottleneck is in the hosts reduce packet count to reduce overhead each segment has a certain amount of overhead  e.g  the header  as well as data  e.g  the payload   bandwidth is required for both components processing is also required for both components  e.g  header processing and doing the checksum   when 1 million bytes are being sent  the data cost is the same no matter what the segment size is however  using 128-byte segments means 32 times as much per-segment overhead as using 4-kb segments the bandwidth and processing overheads add up fast to reduce throughput per-packet overhead in the lower layers amplifies this effect each arriving packet causes a fresh interrupt if the host is keeping up on a modern pipelined processor  each interrupt breaks the cpu pipeline  interferes with the cache  requires a change to the memory management context  voids the branch prediction table  and forces a substantial number of cpu registers to be saved an n-fold reduction in segments sent thus reduces the interrupt and packet overhead by a factor of n you might say that both people and computers are poor at multitasking this observation underlies the desire to send mtu packets that are as large as will pass along the network path without fragmentation mechanisms such as nagle ? s algorithm and clark ? s solution are also attempts to avoid sending small packets minimize data touching the most straightforward way to implement a layered protocol stack is with one module for each layer unfortunately  this leads to copying  or at least accessing the data on multiple passes  as each layer does its own work for example  after a packet is received by the nic  it is typically copied to a kernel buffer from there  it is copied to a network layer buffer for network layer processing  then to a transport layer buffer for transport layer processing  and finally to the receiving application process it is not unusual for an incoming packet to be copied three or four times before the segment enclosed in it is delivered all this copying can greatly degrade performance because memory operations are an order of magnitude slower than register ? register instructions for example  if 20 % of the instructions actually go to memory  i.e  are cache misses   which is likely when touching incoming packets  the average instruction execution time is slowed down by a factor of 2.8  0.8 ? ? 1 ? ? 0.2 ? ? 10   hardware assistance will not help here the problem is too much copying by the operating system sec 6.6 performance issues 589 a clever operating system will minimize copying by combining the processing of multiple layers for example  tcp and ip are usually implemented together  as ? ? tcp/ip ? ?  so that it is not necessary to copy the payload of the packet as processing switches from network to transport layer another common trick is to perform multiple operations within a layer in a single pass over the data for example  checksums are often computed while copying the data  when it has to be copied  and the newly computed checksum is appended to the end minimize context switches a related rule is that context switches  e.g  from kernel mode to user mode  are deadly they have the bad properties of interrupts and copying combined this cost is why transport protocols are often implemented in the kernel like reducing packet count  context switches can be reduced by having the library procedure that sends data do internal buffering until it has a substantial amount of them similarly  on the receiving side  small incoming segments should be collected together and passed to the user in one fell swoop instead of individually  to minimize context switches in the best case  an incoming packet causes a context switch from the current user to the kernel  and then a switch to the receiving process to give it the newly arrived data unfortunately  with some operating systems  additional context switches happen for example  if the network manager runs as a special process in user space  a packet arrival is likely to cause a context switch from the current user to the kernel  then another one from the kernel to the network manager  followed by another one back to the kernel  and finally one from the kernel to the receiving process this sequence is shown in fig 6-50 all these context switches on each packet are wasteful of cpu time and can have a devastating effect on network performance user space kernel space 1 2 3 4 user process running at the time of the packet arrival network manager receiving process figure 6-50 four context switches to handle one packet with a user-space network manager 590 the transport layer chap 6 avoiding congestion is better than recovering from it the old maxim that an ounce of prevention is worth a pound of cure certainly holds for network congestion when a network is congested  packets are lost  bandwidth is wasted  useless delays are introduced  and more all of these costs are unnecessary  and recovering from congestion takes time and patience not having it occur in the first place is better congestion avoidance is like getting your dtp vaccination  it hurts a little at the time you get it  but it prevents something that would hurt a lot more in the future avoid timeouts timers are necessary in networks  but they should be used sparingly and timeouts should be minimized when a timer goes off  some action is generally repeated if it is truly necessary to repeat the action  so be it  but repeating it unnecessarily is wasteful the way to avoid extra work is to be careful that timers are set a little bit on the conservative side a timer that takes too long to expire adds a small amount of extra delay to one connection in the  unlikely  event of a segment being lost a timer that goes off when it should not have uses up host resources  wastes bandwidth  and puts extra load on perhaps dozens of routers for no good reason 6.6.4 fast segment processing now that we have covered general rules  we will look at some specific methods for speeding up segment processing for more information  see clark et al  1989   and chase et al  2001   segment processing overhead has two components  overhead per segment and overhead per byte both must be attacked the key to fast segment processing is to separate out the normal  successful case  one-way data transfer  and handle it specially many protocols tend to emphasize what to do when something goes wrong  e.g  a packet getting lost   but to make the protocols run fast  the designer should aim to minimize processing time when everything goes right minimizing processing time when an error occurs is secondary although a sequence of special segments is needed to get into the established state  once there  segment processing is straightforward until one side starts to close the connection let us begin by examining the sending side in the established state when there are data to be transmitted for the sake of clarity  we assume here that the transport entity is in the kernel  although the same ideas apply if it is a user-space process or a library inside the sending process in fig 6-51  the sending process traps into the kernel to do the send the first thing the transport entity does is test to see if this is the normal case  the state is established  neither side is trying to close the connection  a regular  i.e  not an sec 6.6 performance issues 591 out-of-band  full segment is being sent  and enough window space is available at the receiver if all conditions are met  no further tests are needed and the fast path through the sending transport entity can be taken typically  this path is taken most of the time trap into the kernel to send segment test segment passed to the receiving process test s s sending process receiving process network figure 6-51 the fast path from sender to receiver is shown with a heavy line the processing steps on this path are shaded in the usual case  the headers of consecutive data segments are almost the same to take advantage of this fact  a prototype header is stored within the transport entity at the start of the fast path  it is copied as fast as possible to a scratch buffer  word by word those fields that change from segment to segment are overwritten in the buffer frequently  these fields are easily derived from state variables  such as the next sequence number a pointer to the full segment header plus a pointer to the user data are then passed to the network layer here  the same strategy can be followed  not shown in fig 6-51   finally  the network layer gives the resulting packet to the data link layer for transmission as an example of how this principle works in practice  let us consider tcp/ip fig 6-52  a  shows the tcp header the fields that are the same between consecutive segments on a one-way flow are shaded all the sending transport entity has to do is copy the five words from the prototype header into the output buffer  fill in the next sequence number  by copying it from a word in memory   compute the checksum  and increment the sequence number in memory it can then hand the header and data to a special ip procedure for sending a regular  maximum segment ip then copies its five-word prototype header  see fig 6-52  b   into the buffer  fills in the identification field  and computes its checksum the packet is now ready for transmission now let us look at fast path processing on the receiving side of fig 6-51 step 1 is locating the connection record for the incoming segment for tcp  the 592 the transport layer chap 6 sequence number  a   b  header checksum identification source port acknowledgement number len unused window size checksum urgent pointer destination port fragment offset ver ihl diff serv total length ttl protocol source address destination address diff serv figure 6-52  a  tcp header  b  ip header in both cases  they are taken from the prototype without change connection record can be stored in a hash table for which some simple function of the two ip addresses and two ports is the key once the connection record has been located  both addresses and both ports must be compared to verify that the correct record has been found an optimization that often speeds up connection record lookup even more is to maintain a pointer to the last one used and try that one first clark et al  1989  tried this and observed a hit rate exceeding 90 %  the segment is checked to see if it is a normal one  the state is established  neither side is trying to close the connection  the segment is a full one  no special flags are set  and the sequence number is the one expected these tests take just a handful of instructions if all conditions are met  a special fast path tcp procedure is called the fast path updates the connection record and copies the data to the user while it is copying  it also computes the checksum  eliminating an extra pass over the data if the checksum is correct  the connection record is updated and an acknowledgement is sent back the general scheme of first making a quick check to see if the header is what is expected and then having a special procedure handle that case is called header prediction many tcp implementations use it when this optimization and all the other ones discussed in this chapter are used together  it is possible to get tcp to run at 90 % of the speed of a local memory-to-memory copy  assuming the network itself is fast enough two other areas where major performance gains are possible are buffer management and timer management the issue in buffer management is avoiding unnecessary copying  as mentioned above timer management is important because nearly all timers set do not expire they are set to guard against segment loss  but most segments and their acknowledgements arrive correctly hence  it is important to optimize timer management for the case of timers rarely expiring a common scheme is to use a linked list of timer events sorted by expiration time the head entry contains a counter telling how many ticks away from expiry it is each successive entry contains a counter telling how many ticks after the sec 6.6 performance issues 593 previous entry it is thus  if timers expire in 3  10  and 12 ticks  respectively  the three counters are 3  7  and 2  respectively at every clock tick  the counter in the head entry is decremented when it hits zero  its event is processed and the next item on the list becomes the head its counter does not have to be changed this way  inserting and deleting timers are expensive operations  with execution times proportional to the length of the list a much more efficient approach can be used if the maximum timer interval is bounded and known in advance here  an array called a timing wheel can be used  as shown in fig 6-53 each slot corresponds to one clock tick the current time shown is t ? ? 4 timers are scheduled to expire at 3  10  and 12 ticks from now if a new timer suddenly is set to expire in seven ticks  an entry is just made in slot 11 similarly  if the timer set for t ? ? 10 has to be canceled  the list starting in slot 14 has to be searched and the required entry removed note that the array of fig 6-53 can not accommodate timers beyond t ? ? 15 0 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 slot 0 0 0 0 0 0 0 0 0 0 0 0 0 pointer to list of timers for t + 12 pointer to list of timers for t + 3 pointer to list of timers for t + 10 current time  t figure 6-53 a timing wheel when the clock ticks  the current time pointer is advanced by one slot  circularly   if the entry now pointed to is nonzero  all of its timers are processed many variations on the basic idea are discussed by varghese and lauck  1987   6.6.5 header compression we have been looking at fast networks for too long there is more out there let us now consider performance on wireless and other networks in which bandwidth is limited reducing software overhead can help mobile computers run 594 the transport layer chap 6 more efficiently  but it does nothing to improve performance when the network links are the bottleneck to use bandwidth well  protocol headers and payloads should be carried with the minimum of bits for payloads  this means using compact encodings of information  such as images that are in jpeg format rather than a bitmap  or document formats such as pdf that include compression it also means application-level caching mechanisms  such as web caches that reduce transfers in the first place what about for protocol headers ? at the link layer  headers for wireless networks are typically compact because they were designed with scarce bandwidth in mind for example  802.16 headers have short connection identifiers instead of longer addresses however  higher layer protocols such as ip  tcp and udp come in one version for all link layers  and they are not designed with compact headers in fact  streamlined processing to reduce software overhead often leads to headers that are not as compact as they could otherwise be  e.g  ipv6 has a more loosely packed headers than ipv4   the higher-layer headers can be a significant performance hit consider  for example  voice-over-ip data that is being carried with the combination of ip  udp  and rtp these protocols require 40 bytes of header  20 for ipv4  8 for udp  and 12 for rtp   with ipv6 the situation is even worse  60 bytes  including the 40-byte ipv6 header the headers can wind up as the majority of the transmitted data and consume more than half the bandwidth header compression is used to reduce the bandwidth taken over links by higher-layer protocol headers specially designed schemes are used instead of general purpose methods this is because headers are short  so they do not compress well individually  and decompression requires all prior data to be received this will not be the case if a packet is lost header compression obtains large gains by using knowledge of the protocol format one of the first schemes was designed by van jacobson  1990  for compressing tcp/ip headers over slow serial links it is able to compress a typical tcp/ip header of 40 bytes down to an average of 3 bytes the trick to this method is hinted at in fig 6-52 many of the header fields do not change from packet to packet there is no need  for example  to send the same ip ttl or the same tcp port numbers in each and every packet they can be omitted on the sending side of the link and filled in on the receiving side similarly  other fields change in a predictable manner for example  barring loss  the tcp sequence number advances with the data in these cases  the receiver can predict the likely value the actual number only needs to be carried when it differs from what is expected even then  it may be carried as a small change from the previous value  as when the acknowledgement number increases when new data is received in the reverse direction with header compression  it is possible to have simple headers in higher-layer protocols and compact encodings over low bandwidth links rohc  robust header compression  is a modern version of header compression that is defined sec 6.6 performance issues 595 as a framework in rfc 5795 it is designed to tolerate the loss that can occur on wireless links there is a profile for each set of protocols to be compressed  such as ip/udp/rtp compressed headers are carried by referring to a context  which is essentially a connection ; header fields may easily be predicted for packets of the same connection  but not for packets of different connections in typical operation  rohc reduces ip/udp/rtp headers from 40 bytes to 1 to 3 bytes while header compression is mainly targeted at reducing bandwidth needs  it can also be useful for reducing delay delay is comprised of propagation delay  which is fixed given a network path  and transmission delay  which depends on the bandwidth and amount of data to be sent for example  a 1-mbps link sends 1 bit in 1 ? sec in the case of media over wireless networks  the network is relatively slow so transmission delay may be an important factor in overall delay and consistently low delay is important for quality of service header compression can help by reducing the amount of data that is sent  and hence reducing transmission delay the same effect can be achieved by sending smaller packets this will trade increased software overhead for decreased transmission delay note that another potential source of delay is queueing delay to access the wireless link this can also be significant because wireless links are often heavily used as the limited resource in a network in this case  the wireless link must have quality-of-service mechanisms that give low delay to real-time packets header compression alone is not sufficient 6.6.6 protocols for long fat networks since the 1990s  there have been gigabit networks that transmit data over large distances because of the combination of a fast network  or ? ? fat pipe  ? ? and long delay  these networks are called long fat networks when these networks arose  people ? s first reaction was to use the existing protocols on them  but various problems quickly arose in this section  we will discuss some of the problems with scaling up the speed and delay of network protocols the first problem is that many protocols use 32-bit sequence numbers when the internet began  the lines between routers were mostly 56-kbps leased lines  so a host blasting away at full speed took over 1 week to cycle through the sequence numbers to the tcp designers  232 was a pretty decent approximation of infinity because there was little danger of old packets still being around a week after they were transmitted with 10-mbps ethernet  the wrap time became 57 minutes  much shorter  but still manageable with a 1-gbps ethernet pouring data out onto the internet  the wrap time is about 34 seconds  well under the 120-sec maximum packet lifetime on the internet all of a sudden  232 is not nearly as good an approximation to infinity since a fast sender can cycle through the sequence space while old packets still exist the problem is that many protocol designers simply assumed  without stating it  that the time required to use up the entire sequence space would greatly exceed 596 the transport layer chap 6 the maximum packet lifetime consequently  there was no need to even worry about the problem of old duplicates still existing when the sequence numbers wrapped around at gigabit speeds  that unstated assumption fails fortunately  it proved possible to extend the effective sequence number by treating the timestamp that can be carried as an option in the tcp header of each packet as the high-order bits this mechanism is called paws  protection against wrapped sequence numbers  and is described in rfc 1323 a second problem is that the size of the flow control window must be greatly increased consider  for example  sending a 64-kb burst of data from san diego to boston in order to fill the receiver ? s 64-kb buffer suppose that the link is 1 gbps and the one-way speed-of-light-in-fiber delay is 20 msec initially  at t ? ? 0  the pipe is empty  as illustrated in fig 6-54  a   only 500 ? sec later  in fig 6 54  b   all the segments are out on the fiber the lead segment will now be somewhere in the vicinity of brawley  still deep in southern california however  the transmitter must stop until it gets a window update  a   b   c   d  data acknowledgements figure 6-54 the state of transmitting 1 mbit from san diego to boston  a  at t = 0  b  after 500 ? sec  c  after 20 msec  d  after 40 msec after 20 msec  the lead segment hits boston  as shown in fig 6-54  c   and is acknowledged finally  40 msec after starting  the first acknowledgement gets sec 6.6 performance issues 597 back to the sender and the second burst can be transmitted since the transmission line was used for 1.25 msec out of 100  the efficiency is about 1.25 %  this situation is typical of an older protocols running over gigabit lines a useful quantity to keep in mind when analyzing network performance is the bandwidth-delay product it is obtained by multiplying the bandwidth  in bits/sec  by the round-trip delay time  in sec   the product is the capacity of the pipe from the sender to the receiver and back  in bits   for the example of fig 6-54  the bandwidth-delay product is 40 million bits in other words  the sender would have to transmit a burst of 40 million bits to be able to keep going full speed until the first acknowledgement came back it takes this many bits to fill the pipe  in both directions   this is why a burst of half a million bits only achieves a 1.25 % efficiency  it is only 1.25 % of the pipe ? s capacity the conclusion that can be drawn here is that for good performance  the receiver ? s window must be at least as large as the bandwidth-delay product  and preferably somewhat larger since the receiver may not respond instantly for a transcontinental gigabit line  at least 5 mb are required a third and related problem is that simple retransmission schemes  such as the go-back-n protocol  perform poorly on lines with a large bandwidth-delay product consider  the 1-gbps transcontinental link with a round-trip transmission time of 40 msec a sender can transmit 5 mb in one round trip if an error is detected  it will be 40 msec before the sender is told about it if go-back-n is used  the sender will have to retransmit not just the bad packet  but also the 5 mb worth of packets that came afterward clearly  this is a massive waste of resources more complex protocols such as selective-repeat are needed a fourth problem is that gigabit lines are fundamentally different from megabit lines in that long gigabit lines are delay limited rather than bandwidth limited in fig 6-55 we show the time it takes to transfer a 1-mbit file 4000 km at various transmission speeds at speeds up to 1 mbps  the transmission time is dominated by the rate at which the bits can be sent by 1 gbps  the 40-msec round-trip delay dominates the 1 msec it takes to put the bits on the fiber further increases in bandwidth have hardly any effect at all figure 6-55 has unfortunate implications for network protocols it says that stop-and-wait protocols  such as rpc  have an inherent upper bound on their performance this limit is dictated by the speed of light no amount of technological progress in optics will ever improve matters  new laws of physics would help  though   unless some other use can be found for a gigabit line while a host is waiting for a reply  the gigabit line is no better than a megabit line  just more expensive a fifth problem is that communication speeds have improved faster than computing speeds  note to computer engineers  go out and beat those communication engineers ! we are counting on you  in the 1970s  the arpanet ran at 56 kbps and had computers that ran at about 1 mips compare these numbers to 598 the transport layer chap 6 1000 sec 100 sec 10 sec 1 sec 100 msec 10 msec 1 msec file transfer time data rate  bps  103 104 105 106 107 108 109 1010 1011 1012 figure 6-55 time to transfer and acknowledge a 1-mbit file over a 4000-km line 1000-mips computers exchanging packets over a 1-gbps line the number of instructions per byte has decreased by more than a factor of 10 the exact numbers are debatable depending on dates and scenarios  but the conclusion is this  there is less time available for protocol processing than there used to be  so protocols must become simpler let us now turn from the problems to ways of dealing with them the basic principle that all high-speed network designers should learn by heart is  design for speed  not for bandwidth optimization old protocols were often designed to minimize the number of bits on the wire  frequently by using small fields and packing them together into bytes and words this concern is still valid for wireless networks  but not for gigabit networks protocol processing is the problem  so protocols should be designed to minimize it the ipv6 designers clearly understood this principle a tempting way to go fast is to build fast network interfaces in hardware the difficulty with this strategy is that unless the protocol is exceedingly simple  hardware just means a plug-in board with a second cpu and its own program to make sure the network coprocessor is cheaper than the main cpu  it is often a slower chip the consequence of this design is that much of the time the main  fast  cpu is idle waiting for the second  slow  cpu to do the critical work it is a myth to think that the main cpu has other work to do while waiting furthermore  when two general-purpose cpus communicate  race conditions can occur  so elaborate protocols are needed between the two processors to synchronize sec 6.6 performance issues 599 them correctly and avoid races usually  the best approach is to make the protocols simple and have the main cpu do the work packet layout is an important consideration in gigabit networks the header should contain as few fields as possible  to reduce processing time  and these fields should be big enough to do the job and be word-aligned for fast processing in this context  ? ? big enough ? ? means that problems such as sequence numbers wrapping around while old packets still exist  receivers being unable to advertise enough window space because the window field is too small  etc do not occur the maximum data size should be large  to reduce software overhead and permit efficient operation 1500 bytes is too small for high-speed networks  which is why gigabit ethernet supports jumbo frames of up to 9 kb and ipv6 supports jumbogram packets in excess of 64 kb let us now look at the issue of feedback in high-speed protocols due to the  relatively  long delay loop  feedback should be avoided  it takes too long for the receiver to signal the sender one example of feedback is governing the transmission rate by using a sliding window protocol future protocols may switch to rate-based protocols to avoid the  long  delays inherent in the receiver sending window updates to the sender in such a protocol  the sender can send all it wants to  provided it does not send faster than some rate the sender and receiver have agreed upon in advance a second example of feedback is jacobson ? s slow start algorithm this algorithm makes multiple probes to see how much the network can handle with high-speed networks  making half a dozen or so small probes to see how the network responds wastes a huge amount of bandwidth a more efficient scheme is to have the sender  receiver  and network all reserve the necessary resources at connection setup time reserving resources in advance also has the advantage of making it easier to reduce jitter in short  going to high speeds inexorably pushes the design toward connection-oriented operation  or something fairly close to it another valuable feature is the ability to send a normal amount of data along with the connection request in this way  one round-trip time can be saved 6.7 delay-tolerant networking we will finish this chapter by describing a new kind of transport that may one day be an important component of the internet tcp and most other transport protocols are based on the assumption that the sender and the receiver are continuously connected by some working path  or else the protocol fails and data can not be delivered in some networks there is often no end-to-end path an example is a space network as leo  low-earth orbit  satellites pass in and out of range of ground stations a given satellite may be able to communicate to a ground station only at particular times  and two satellites may never be able to communicate with each other at any time  even via a ground station  because one of the satellites 600 the transport layer chap 6 may always be out of range other example networks involve submarines  buses  mobile phones  and other devices with computers for which there is intermittent connectivity due to mobility or extreme conditions in these occasionally connected networks  data can still be communicated by storing them at nodes and forwarding them later when there is a working link this technique is called message switching eventually the data will be relayed to the destination a network whose architecture is based on this approach is called a dtn  delay-tolerant network  or a disruption-tolerant network   work on dtns started in 2002 when ietf set up a research group on the topic the inspiration for dtns came from an unlikely source  efforts to send packets in space space networks must deal with intermittent communication and very long delays kevin fall observed that the ideas for these interplanetary internets could be applied to networks on earth in which intermittent connectivity was the norm  fall  2003   this model gives a useful generalization of the internet in which storage and delays can occur during communication data delivery is akin to delivery in the postal system  or electronic mail  rather than packet switching at routers since 2002  the dtn architecture has been refined  and the applications of the dtn model have grown as a mainstream application  consider large datasets of many terabytes that are produced by scientific experiments  media events  or web-based services and need to be copied to datacenters at different locations around the world operators would like to send this bulk traffic at off-peak times to make use of bandwidth that has already been paid for but is not being used  and are willing to tolerate some delay it is like doing the backups at night when other applications are not making heavy use of the network the problem is that  for global services  the off-peak times are different at locations around the world there may be little overlap in the times when datacenters in boston and perth have off-peak network bandwidth because night for one city is day for the other however  dtn models allow for storage and delays during transfer with this model  it becomes possible to send the dataset from boston to amsterdam using off-peak bandwidth  as the cities have time zones that are only 6 hours apart the dataset is then stored in amsterdam until there is off-peak bandwidth between amsterdam and perth it is then sent to perth to complete the transfer laoutaris et al  2009  have studied this model and find that it can provide substantial capacity at little cost  and that the use of a dtn model often doubles that capacity compared with a traditional end-to-end model in what follows  we will describe the ietf dtn architecture and protocols 6.7.1 dtn architecture the main assumption in the internet that dtns seek to relax is that an endto end path between a source and a destination exists for the entire duration of a communication session when this is not the case  the normal internet protocols sec 6.7 delay-tolerant networking 601 fail dtns get around the lack of end-to-end connectivity with an architecture that is based on message switching  as shown in fig 6-56 it is also intended to tolerate links with low reliability and large delays the architecture is specified in rfc 4838 contact  working link  stored bundle source storage sent bundle dtn node intermittent link  not working  destination figure 6-56 delay-tolerant networking architecture in dtn terminology  a message is called a bundle dtn nodes are equipped with storage  typically persistent storage such as a disk or flash memory they store bundles until links become available and then forward the bundles the links work intermittently fig 6-56 shows five intermittent links that are not currently working  and two links that are working a working link is called a contact fig 6-56 also shows bundles stored at two dtn nodes awaiting contacts to send the bundles onward in this way  the bundles are relayed via contacts from the source to their destination the storing and forwarding of bundles at dtn nodes sounds similar to the queueing and forwarding of packets at routers  but there are qualitative differences in routers in the internet  queueing occurs for milliseconds or at most seconds at dtn nodes  bundles may be stored for hours  until a bus arrives in town  while an airplane completes a flight  until a sensor node harvests enough solar energy to run  until a sleeping computer wakes up  and so forth these examples also point to a second difference  which is that nodes may move  with a bus or plane  while they hold stored data  and this movement may even be a key part of data delivery routers in the internet are not allowed to move the whole process of moving bundles might be better known as ? ? store-carry-forward ? ? as an example  consider the scenario shown in fig 6-57 that was the first use of dtn protocols in space  wood et al  2008   the source of bundles is an leo satellite that is recording earth images as part of the disaster monitoring constellation of satellites the images must be returned to the collection point however  the satellite has only intermittent contact with three ground stations as it orbits the earth it comes into contact with each ground station in turn each of the satellite  ground stations  and collection point act as a dtn node at each contact  a 602 the transport layer chap 6 bundle  or a portion of a bundle  is sent to a ground station the bundles are then sent over a backhaul terrestrial network to the collection point to complete the transfer intermittent link  not working  storage at dtn nodes satellite contact bundle  working link  ground station collection point figure 6-57 use of a dtn in space the primary advantage of the dtn architecture in this example is that it naturally fits the situation of the satellite needing to store images because there is no connectivity at the time the image is taken there are two further advantages first  there may be no single contact long enough to send the images however  they can be spread across the contacts with three ground stations second  the use of the link between the satellite and ground station is decoupled from the link over the backhaul network this means that the satellite download is not limited by a slow terrestrial link it can proceed at full speed  with the bundle stored at the ground station until it can be relayed to the collection point an important issue that is not specified by the architecture is how to find good routes via dtn nodes a route in this path to use good routes depend on the nature of the architecture describes when to send data  and also which contacts some contacts are known ahead of time a good example is the motion of heavenly bodies in the space example for the space experiment  it was known ahead of time when contacts would occur  that the contact intervals ranged from 5 to 14 minutes per pass with each ground station  and that the downlink capacity was 8.134 mbps given this knowledge  the transport of a bundle of images can be planned ahead of time in other cases  the contacts can be predicted  but with less certainty examples include buses that make contact with each other in mostly regular ways  due to a timetable  yet with some variation  and the times and amount of off-peak bandwidth in isp networks  which are predicted from past data at the other extreme  the contacts are occasional and random one example is carrying data from user sec 6.7 delay-tolerant networking 603 to user on mobile phones depending on which users make contact with each other during the day when there is unpredictability in contacts  one routing strategy is to send copies of the bundle along different paths in the hope that one of the copies is delivered to the destination before the lifetime is reached 6.7.2 the bundle protocol to take a closer look at the operation of dtns  we will now look at the ietf protocols dtns are an emerging kind of network  and experimental dtns have used different protocols  as there is no requirement that the ietf protocols be used however  they are at least a good place to start and highlight many of the key issues the dtn protocol stack is shown in fig 6-58 the key protocol is the bundle protocol  which is specified in rfc 5050 it is responsible for accepting messages from the application and sending them as one or more bundles via storecarry forward operations to the destination dtn node it is also apparent from fig 6-58 that the bundle protocol runs above the level of tcp/ip in other words  tcp/ip may be used over each contact to move bundles between dtn nodes this positioning raises the issue of whether the bundle protocol is a transport layer protocol or an application layer protocol just as with rtp  we take the position that  despite running over a transport protocol  the bundle protocol is providing a transport service to many different applications  and so we cover dtns in this chapter application bundle protocol convergence layer tcp/ip internet     other internet convergence layer upper layers dtn layer lower layers figure 6-58 delay-tolerant networking protocol stack in fig 6-58  we see that the bundle protocol may be run over other kinds of protocols such as udp  or even other kinds of internets for example  in a space network the links may have very long delays the round-trip time between earth and mars can easily be 20 minutes depending on the relative position of the planets imagine how well tcp acknowledgements and retransmissions will work over that link  especially for relatively short messages not well at all instead  604 the transport layer chap 6 another protocol that uses error-correcting codes might be used or in sensor networks that are very resource constrained  a more lightweight protocol than tcp may be used since the bundle protocol is fixed  yet it is intended to run over a variety of transports  there is must be a gap in functionality between the protocols that gap is the reason for the inclusion of a convergence layer in fig 6-58 the convergence layer is just a glue layer that matches the interfaces of the protocols that it joins by definition there is a different convergence layer for each different lower layer transport convergence layers are commonly found in standards to join new and existing protocols the format of bundle protocol messages is shown in fig 6-59 the different fields in these messages tell us some of the key issues that are handled by the bundle protocol bits 7 7 type primary block payload block optional blocks ver flags dest source report custodian creation lifetime dictionary flags length data variable 8 status report class of service general bits 8 6 20 6 variable figure 6-59 bundle protocol message format each message consists of a primary block  which can be thought of as a header  a payload block for the data  and optionally other blocks  for example to carry security parameters the primary block begins with a version field  currently 6  followed by a flags field among other functions  the flags encode a class of service to let a source mark its bundles as higher or lower priority  and other handling requests such as whether the destination should acknowledge the bundle then come addresses  which highlight three interesting parts of the design as well as a destination and source identifier field  there is a custodian identifier the custodian is the party responsible for seeing that the bundle is delivered in the internet  the source node is usually the custodian  as it is the node that retransmits if the data is not ultimately delivered to the destination however  in a dtn  the source node may not always be connected and may have no way of knowing whether the data has been delivered dtns deal with this problem using the notion of custody transfer  in which another node  closer to the destination  can assume responsibility for seeing the data safely delivered for example  if a bundle is stored on an airplane for forwarding at a later time and location  the airplane may become the custodian of the bundle sec 6.7 delay-tolerant networking 605 the second interesting aspect is that these identifiers are not ip addresses because the bundle protocol is intended to work across a variety of transports and internets  it defines its own identifiers these identifiers are really more like high-level names  such as web page urls  than low-level addresses  such as ip addresses they give dtns an aspect of application-level routing  such as email delivery or the distribution of software updates the third interesting aspect is the way the identifiers are encoded there is also a report identifier for diagnostic messages all of the identifiers are encoded as references to a variable length dictionary field this provides compression when the custodian or report nodes are the same as the source or the destination in fact  much of the message format has been designed with both extensibility and efficiency in mind by using a compact representation of variable length fields the compact representation is important for wireless links and resourceconstrained nodes such as in a sensor network next comes a creation field carrying the time at which the bundle was created  along with a sequence number from the source for ordering  plus a lifetime field that tells the time at which the bundle data is no longer useful these fields exist because data may be stored for a long period at dtn nodes and there must be some way to remove stale data from the network unlike the internet  they require that dtn nodes have loosely synchronized clocks the primary block is completed with the dictionary field then comes the payload block this block starts with a short type field that identifies it as a payload  followed by a small set of flags that describe processing options then comes the data field  preceded by a length field finally  there may be other  optional blocks  such as a block that carries security parameters many aspects of dtns are being explored in the research community good strategies for routing depend on the nature of the contacts  as was mentioned above storing data inside the network raises other issues now congestion control must consider storage at nodes as another kind of resource that can be depleted the lack of end-to-end communication also exacerbates security problems before a dtn node takes custody of a bundle  it may want to know that the sender is authorized to use the network and that the bundle is probably wanted by the destination solutions to these problems will depend on the kind of dtn  as space networks are different from sensor networks 6.8 summary the transport layer is the key to understanding layered protocols it provides various services  the most important of which is an end-to-end  reliable  connection oriented byte stream from sender to receiver it is accessed through service primitives that permit the establishment  use  and release of connections a common transport layer interface is the one provided by berkeley sockets 606 the transport layer chap 6 transport protocols must be able to do connection management over unreliable networks connection establishment is complicated by the existence of delayed duplicate packets that can reappear at inopportune moments to deal with them  three-way handshakes are needed to establish connections releasing a connection is easier than establishing one but is still far from trivial due to the two-army problem even when the network layer is completely reliable  the transport layer has plenty of work to do it must handle all the service primitives  manage connections and timers  allocate bandwidth with congestion control  and run a variablesized sliding window for flow control congestion control should allocate all of the available bandwidth between competing flows fairly  and it should track changes in the usage of the network the aimd control law converges to a fair and efficient allocation the internet has two main transport protocols  udp and tcp udp is a connectionless protocol that is mainly a wrapper for ip packets with the additional feature of multiplexing and demultiplexing multiple processes using a single ip address udp can be used for client-server interactions  for example  using rpc it can also be used for building real-time protocols such as rtp the main internet transport protocol is tcp it provides a reliable  bidirectional  congestion-controlled byte stream with a 20-byte header on all segments a great deal of work has gone into optimizing tcp performance  using algorithms from nagle  clark  jacobson  karn  and others network performance is typically dominated by protocol and segment processing overhead  and this situation gets worse at higher speeds protocols should be designed to minimize the number of segments and work for large bandwidthdelay paths for gigabit networks  simple protocols and streamlined processing are called for delay-tolerant networking provides a delivery service across networks that have occasional connectivity or long delays across links intermediate nodes store  carry  and forward bundles of information so that it is eventually delivered  even if there is no working path from sender to receiver at any time problems 1 in our example transport primitives of fig 6-2  listen is a blocking call is this strictly necessary ? if not  explain how a nonblocking primitive could be used what advantage would this have over the scheme described in the text ? 2 primitives of transport service assume asymmetry between the two end points during connection establishment  one end  server  executes listen while the other end  client  executes connect however  in peer to peer applications such file sharing chap 6 problems 607 systems  e.g bittorrent  all end points are peers there is no server or client functionality how can transport service primitives may be used to build such peer to peer applications ? 3 in the underlying model of fig 6-4  it is assumed that packets may be lost by the network layer and thus must be individually acknowledged suppose that the network layer is 100 percent reliable and never loses packets what changes  if any  are needed to fig 6-4 ? 4 in both parts of fig 6-6  there is a comment that the value of server port must be the same in both client and server why is this so important ? 5 in the internet file server example  figure 6-6   can the connect   system call on the client fail for any reason other than listen queue being full on the server ? assume that the network is perfect 6 one criteria for deciding whether to have a server active all the time or have it start on demand using a process server is how frequently the service provided is used can you think of any other criteria for making this decision ? 7 suppose that the clock-driven scheme for generating initial sequence numbers is used with a 15-bit wide clock counter the clock ticks once every 100 msec  and the maximum packet lifetime is 60 sec how often need resynchronization take place  a  in the worst case ?  b  when the data consumes 240 sequence numbers/min ? 8 why does the maximum packet lifetime  t  have to be large enough to ensure that not only the packet but also its acknowledgements have vanished ? 9 imagine that a two-way handshake rather than a three-way handshake were used to set up connections in other words  the third message was not required are deadlocks now possible ? give an example or show that none exist 10 imagine a generalized n-army problem  in which the agreement of any two of the blue armies is sufficient for victory does a protocol exist that allows blue to win ? 11 consider the problem of recovering from host crashes  i.e  fig 6-18   if the interval between writing and sending an acknowledgement  or vice versa  can be made relatively small  what are the two best sender-receiver strategies for minimizing the chance of a protocol failure ? 12 in figure 6-20  suppose a new flow e is added that takes a path from r1 to r2 to r6 how does the max-min bandwidth allocation change for the five flows ? 13 discuss the advantages and disadvantages of credits versus sliding window protocols 14 some other policies for fairness in congestion control are additive increase additive decrease  aiad   multiplicative increase additive decrease  miad   and multiplicative increase multiplicative decrease  mimd   discuss these three policies in terms of convergence and stability 15 why does udp exist ? would it not have been enough to just let user processes send raw ip packets ? 608 the transport layer chap 6 16 consider a simple application-level protocol built on top of udp that allows a client to retrieve a file from a remote server residing at a well-known address the client first sends a request with a file name  and the server responds with a sequence of data packets containing different parts of the requested file to ensure reliability and sequenced delivery  client and server use a stop-and-wait protocol ignoring the obvious performance issue  do you see a problem with this protocol ? think carefully about the possibility of processes crashing 17 a client sends a 128-byte request to a server located 100 km away over a 1-gigabit optical fiber what is the efficiency of the line during the remote procedure call ? 18 consider the situation of the previous problem again compute the minimum possible response time both for the given 1-gbps line and for a 1-mbps line what conclusion can you draw ? 19 both udp and tcp use port numbers to identify the destination entity when delivering a message give two reasons why these protocols invented a new abstract id  port numbers   instead of using process ids  which already existed when these protocols were designed 20 several rpc implementations provide an option to the client to use rpc implemented over udp or rpc implemented over tcp under what conditions will a client prefer to use rpc over udp and under what conditions will he prefer to use rpc over tcp ? 21 consider two networks  n1 and n2  that have the same average delay between a source a and a destination d in n1  the delay experienced by different packets is unformly distributed with maximum delay being 10 seconds  while in n2  99 % of the packets experience less than one second delay with no limit on maximum delay discuss how rtp may be used in these two cases to transmit live audio/video stream 22 what is the total size of the minimum tcp mtu  including tcp and ip overhead but not including data link layer overhead ? 23 datagram fragmentation and reassembly are handled by ip and are invisible to tcp does this mean that tcp does not have to worry about data arriving in the wrong order ? 24 rtp is used to transmit cd-quality audio  which makes a pair of 16-bit samples 44,100 times/sec  one sample for each of the stereo channels how many packets per second must rtp transmit ? 25 would it be possible to place the rtp code in the operating system kernel  along with the udp code ? explain your answer 26 a process on host 1 has been assigned port p  and a process on host 2 has been assigned port q is it possible for there to be two or more tcp connections between these two ports at the same time ? 27 in fig 6-36 we saw that in addition to the 32-bit acknowledgement field  there is an ack bit in the fourth word does this really add anything ? why or why not ? 28 the maximum payload of a tcp segment is 65,495 bytes why was such a strange number chosen ? chap 6 problems 609 29 describe two ways to get into the syn rcvd state of fig 6-39 30 consider the effect of using slow start on a line with a 10-msec round-trip time and no congestion the receive window is 24 kb and the maximum segment size is 2 kb how long does it take before the first full window can be sent ? 31 suppose that the tcp congestion window is set to 18 kb and a timeout occurs how big will the window be if the next four transmission bursts are all successful ? assume that the maximum segment size is 1 kb 32 if the tcp round-trip time  rtt  is currently 30 msec and the following acknowledgements come in after 26  32  and 24 msec  respectively  what is the new rtt estimate using the jacobson algorithm ? use ? ? ? ? 0.9 33 a tcp machine is sending full windows of 65,535 bytes over a 1-gbps channel that has a 10-msec one-way delay what is the maximum throughput achievable ? what is the line efficiency ? 34 what is the fastest line speed at which a host can blast out 1500-byte tcp payloads with a 120-sec maximum packet lifetime without having the sequence numbers wrap around ? take tcp  ip  and ethernet overhead into consideration assume that ethernet frames may be sent continuously 35 to address the limitations of ip version 4  a major effort had to be undertaken via ietf that resulted in the design of ip version 6 and there are still is significant reluctance in the adoption of this new version however  no such major effort is needed to address the limitations of tcp explain why this is the case 36 in a network whose max segment is 128 bytes  max segment lifetime is 30 sec  and has 8-bit sequence numbers  what is the maximum data rate per connection ? 37 suppose that you are measuring the time to receive a segment when an interrupt occurs  you read out the system clock in milliseconds when the segment is fully processed  you read out the clock again you measure 0 msec 270,000 times and 1 msec 730,000 times how long does it take to receive a segment ? 38 a cpu executes instructions at the rate of 1000 mips data can be copied 64 bits at a time  with each word copied costing 10 instructions if an coming packet has to be copied four times  can this system handle a 1-gbps line ? for simplicity  assume that all instructions  even those instructions that read or write memory  run at the full 1000-mips rate 39 to get around the problem of sequence numbers wrapping around while old packets still exist  one could use 64-bit sequence numbers however  theoretically  an optical fiber can run at 75 tbps what maximum packet lifetime is required to make sure that future 75-tbps networks do not have wraparound problems even with 64-bit sequence numbers ? assume that each byte has its own sequence number  as tcp does 40 in sec 6.6.5  we calculated that a gigabit line dumps 80,000 packets/sec on the host  giving it only 6250 instructions to process it and leaving half the cpu time for applications this calculation assumed a 1500-byte packet redo the calculation for an arpanet-sized packet  128 bytes   in both cases  assume that the packet sizes given include all overhead 610 the transport layer chap 6 41 for a 1-gbps network operating over 4000 km  the delay is the limiting factor  not the bandwidth consider a man with the average source and destination 20 km apart at what data rate does the round-trip delay due to the speed of light equal the transmission delay for a 1-kb packet ? 42 calculate the bandwidth-delay product for the following networks   1  t1  1.5 mbps    2  ethernet  10 mbps    3  t3  45 mbps   and  4  sts-3  155 mbps   assume an rtt of 100 msec recall that a tcp header has 16 bits reserved for window size what are its implications in light of your calculations ? 43 what is the bandwidth-delay product for a 50-mbps channel on a geostationary satellite ? if the packets are all 1500 bytes  including overhead   how big should the window be in packets ? 44 the file server of fig 6-6 is far from perfect and could use a few improvements make the following modifications  a  give the client a third argument that specifies a byte range  b  add a client flag ? w that allows the file to be written to the server 45 one common function that all network protocols need is to manipulate messages recall that protocols manipulate messages by adding/striping headers some protocols may break a single message into multiple fragments  and later join these multiple fragments back into a single message to this end  design and implement a message management library that provides support for creating a new message  attaching a header to a message  stripping a header from a message  breaking a message into two messages  combining two messages into a single message  and saving a copy of a message your implementation must minimize data copying from one buffer to another as much as possible it is critical that the operations that manipulate messages do not touch the data in a message  but rather  only manipulate pointers 46 design and implement a chat system that allows multiple groups of users to chat a chat coordinator resides at a well-known network address  uses udp for communication with chat clients  sets up chat servers for each chat session  and maintains a chat session directory there is one chat server per chat session a chat server uses tcp for communication with clients a chat client allows users to start  join  and leave a chat session design and implement the coordinator  server  and client code 7 the application layer having finished all the preliminaries  we now come to the layer where all the applications are found the layers below the application layer are there to provide transport services  but they do not do real work for users in this chapter  we will study some real network applications however  even in the application layer there is a need for support protocols  to allow the applications to function accordingly  we will look at an important one of these before starting with the applications themselves the item in question is dns  which handles naming within the internet after that  we will examine three real applications  electronic mail  the world wide web  and multimedia we will finish the chapter by saying more about content distribution  including by peer-to-peer networks 7.1 dns ? the domain name system although programs theoretically could refer to web pages  mailboxes  and other resources by using the network  e.g  ip  addresses of the computers on which they are stored  these addresses are hard for people to remember also  browsing a company ? s web pages from 128.111.24.41 means that if the company moves the web server to a different machine with a different ip address  everyone needs to be told the new ip address consequently  high-level  readable names were introduced in order to decouple machine names from machine addresses in 611 612 the application layer chap 7 this way  the company ? s web server might be known as www.cs.washington.edu regardless of its ip address nevertheless  since the network itself understands only numerical addresses  some mechanism is required to convert the names to network addresses in the following sections  we will study how this mapping is accomplished in the internet way back in the arpanet days  there was simply a file  hosts.txt  that listed all the computer names and their ip addresses every night  all the hosts would fetch it from the site at which it was maintained for a network of a few hundred large timesharing machines  this approach worked reasonably well however  well before many millions of pcs were connected to the internet  everyone involved with it realized that this approach could not continue to work forever for one thing  the size of the file would become too large however  even more importantly  host name conflicts would occur constantly unless names were centrally managed  something unthinkable in a huge international network due to the load and latency to solve these problems  dns  domain name system  was invented in 1983 it has been a key part of the internet ever since the essence of dns is the invention of a hierarchical  domain-based naming scheme and a distributed database system for implementing this naming scheme it is primarily used for mapping host names to ip addresses but can also be used for other purposes dns is defined in rfcs 1034  1035  2181  and further elaborated in many others very briefly  the way dns is used is as follows to map a name onto an ip address  an application program calls a library procedure called the resolver  passing it the name as a parameter we saw an example of a resolver  gethostbyname  in fig 6-6 the resolver sends a query containing the name to a local dns server  which looks up the name and returns a response containing the ip address to the resolver  which then returns it to the caller the query and response messages are sent as udp packets armed with the ip address  the program can then establish a tcp connection with the host or send it udp packets 7.1.1 the dns name space managing a large and constantly changing set of names is a nontrivial problem in the postal system  name management is done by requiring letters to specify  implicitly or explicitly  the country  state or province  city  street address  and name of the addressee using this kind of hierarchical addressing ensures that there is no confusion between the marvin anderson on main st in white plains  n.y and the marvin anderson on main st in austin  texas dns works the same way for the internet  the top of the naming hierarchy is managed by an organization called icann  internet corporation for assigned names and numbers   icann was created for this purpose in 1998  as part of the maturing of the internet to a worldwide  economic concern conceptually  the internet is divided into sec 7.1 dns ? the domain name system 613 over 250 top-level domains  where each domain covers many hosts each domain is partitioned into subdomains  and these are further partitioned  and so on all these domains can be represented by a tree  as shown in fig 7-1 the leaves of the tree represent domains that have no subdomains  but do contain machines  of course   a leaf domain may contain a single host  or it may represent a company and contain thousands of hosts    eng cisco acm ieee eng washington cs robot jack jill ac co csl nec cs uwa keio edu vu oce cs law aero com edu gov museum org net au jp uk us nl generic countries    filts fluit figure 7-1 a portion of the internet domain name space the top-level domains come in two flavors  generic and countries the generic domains  listed in fig 7-2  include original domains from the 1980s and domains introduced via applications to icann other generic top-level domains will be added in the future the country domains include one entry for every country  as defined in iso 3166 internationalized country domain names that use non-latin alphabets were introduced in 2010 these domains let people name hosts in arabic  cyrillic  chinese  or other languages getting a second-level domain  such as name-of-company.com  is easy the top-level domains are run by registrars appointed by icann getting a name merely requires going to a corresponding registrar  for com in this case  to check if the desired name is available and not somebody else ? s trademark if there are no problems  the requester pays the registrar a small annual fee and gets the name however  as the internet has become more commercial and more international  it has also become more contentious  especially in matters related to naming this controversy includes icann itself for example  the creation of the xxx domain took several years and court cases to resolve is voluntarily placing adult content in its own domain a good or a bad thing ?  some people did not want adult content available at all on the internet while others wanted to put it all in one domain so nanny filters could easily find and block it from children   some of the domains self-organize  while others have restrictions on who can obtain a name  as noted in fig 7-2 but what restrictions are appropriate ? take the pro domain  614 the application layer chap 7 domain intended use start date restricted ? com commercial 1985 no edu educational institutions 1985 yes gov government 1985 yes int international organizations 1988 yes mil military 1985 yes net network providers 1985 no org non-profit organizations 1985 no aero air transport 2001 yes biz businesses 2001 no coop cooperatives 2001 yes info informational 2002 no museum museums 2002 yes name people 2002 no pro professionals 2002 yes cat catalan 2005 yes jobs employment 2005 yes mobi mobile devices 2005 yes tel contact details 2005 yes travel travel industry 2005 yes xxx sex industry 2010 no figure 7-2 generic top-level domains for example it is for qualified professionals but who is a professional ? doctors and lawyers clearly are professionals but what about freelance photographers  piano teachers  magicians  plumbers  barbers  exterminators  tattoo artists  mercenaries  and prostitutes ? are these occupations eligible ? according to whom ? there is also money in names tuvalu  the country  sold a lease on its tv domain for $ 50 million  all because the country code is well-suited to advertising television sites virtually every common  english  word has been taken in the com domain  along with the most common misspellings try household articles  animals  plants  body parts  etc the practice of registering a domain only to turn around and sell it off to an interested party at a much higher price even has a name it is called cybersquatting many companies that were slow off the mark when the internet era began found their obvious domain names already taken when they tried to acquire them in general  as long as no trademarks are being violated and no fraud is involved  it is first-come  first-served with names nevertheless  policies to resolve naming disputes are still being refined sec 7.1 dns ? the domain name system 615 each domain is named by the path upward from it to the  unnamed  root the components are separated by periods  pronounced ? ? dot ? ?   thus  the engineering department at cisco might be eng.cisco.com  rather than a unix-style name such as /com/cisco/eng notice that this hierarchical naming means that eng.cisco.com does not conflict with a potential use of eng in eng.washington.edu  which might be used by the english department at the university of washington domain names can be either absolute or relative an absolute domain name always ends with a period  e.g  eng.cisco.com   whereas a relative one does not relative names have to be interpreted in some context to uniquely determine their true meaning in both cases  a named domain refers to a specific node in the tree and all the nodes under it domain names are case-insensitive  so edu  edu  and edu mean the same thing component names can be up to 63 characters long  and full path names must not exceed 255 characters in principle  domains can be inserted into the tree in either generic or country domains for example  cs.washington.edu could equally well be listed under the us country domain as cs.washington.wa.us in practice  however  most organizations in the united states are under generic domains  and most outside the united states are under the domain of their country there is no rule against registering under multiple top-level domains large companies often do so  e.g  sony.com  sony.net  and sony.nl   each domain controls how it allocates the domains under it for example  japan has domains ac.jp and co.jp that mirror edu and com the netherlands does not make this distinction and puts all organizations directly under nl thus  all three of the following are university computer science departments  1 cs.washington.edu  university of washington  in the u.s   2 cs.vu.nl  vrije universiteit  in the netherlands   3 cs.keio.ac.jp  keio university  in japan   to create a new domain  permission is required of the domain in which it will be included for example  if a vlsi group is started at the university of washington and wants to be known as vlsi.cs.washington.edu  it has to get permission from whoever manages cs.washington.edu similarly  if a new university is chartered  say  the university of northern south dakota  it must ask the manager of the edu domain to assign it unsd.edu  if that is still available   in this way  name conflicts are avoided and each domain can keep track of all its subdomains once a new domain has been created and registered  it can create subdomains  such as cs.unsd.edu  without getting permission from anybody higher up the tree naming follows organizational boundaries  not physical networks for example  if the computer science and electrical engineering departments are located in the same building and share the same lan  they can nevertheless have distinct 616 the application layer chap 7 domains similarly  even if computer science is split over babbage hall and turing hall  the hosts in both buildings will normally belong to the same domain 7.1.2 domain resource records every domain  whether it is a single host or a top-level domain  can have a set of resource records associated with it these records are the dns database for a single host  the most common resource record is just its ip address  but many other kinds of resource records also exist when a resolver gives a domain name to dns  what it gets back are the resource records associated with that name thus  the primary function of dns is to map domain names onto resource records a resource record is a five-tuple although they are encoded in binary for efficiency  in most expositions resource records are presented as ascii text  one line per resource record the format we will use is as follows  domain name time to live class type value the domain name tells the domain to which this record applies normally  many records exist for each domain and each copy of the database holds information about multiple domains this field is thus the primary search key used to satisfy queries the order of the records in the database is not significant the time to live field gives an indication of how stable the record is information that is highly stable is assigned a large value  such as 86400  the number of seconds in 1 day   information that is highly volatile is assigned a small value  such as 60  1 minute   we will come back to this point later when we have discussed caching the third field of every resource record is the class for internet information  it is always in for non-internet information  other codes can be used  but in practice these are rarely seen the type field tells what kind of record this is there are many kinds of dns records the important types are listed in fig 7-3 an soa record provides the name of the primary source of information about the name server ? s zone  described below   the email address of its administrator  a unique serial number  and various flags and timeouts the most important record type is the a  address  record it holds a 32-bit ipv4 address of an interface for some host the corresponding aaaa  or ? ? quad a  ? ? record holds a 128-bit ipv6 address every internet host must have at least one ip address so that other machines can communicate with it some hosts have two or more network interfaces  in which case they will have two or more type a or aaaa resource records consequently  dns can return multiple addresses for a single name a common record type is the mx record it specifies the name of the host prepared to accept email for the specified domain it is used because not every sec 7.1 dns ? the domain name system 617 type meaning value soa start of authority parameters for this zone a ipv4 address of a host 32-bit integer aaaa ipv6 address of a host 128-bit integer mx mail exchange priority  domain willing to accept email ns name server name of a server for this domain cname canonical name domain name ptr pointer alias for an ip address spf sender policy framework text encoding of mail sending policy srv service host that provides it txt text descriptive ascii text figure 7-3 the principal dns resource record types machine is prepared to accept email if someone wants to send email to  for example  bill @ microsoft.com  the sending host needs to find some mail server located at microsoft.com that is willing to accept email the mx record can provide this information another important record type is the ns record it specifies a name server for the domain or subdomain this is a host that has a copy of the database for a domain it is used as part of the process to look up names  which we will describe shortly cname records allow aliases to be created for example  a person familiar with internet naming in general and wanting to send a message to user paul in the computer science department at m.i.t might guess that paul @ cs.mit.edu will work actually  this address will not work  because the domain for m.i.t ? s computer science department is csail.mit.edu however  as a service to people who do not know this  m.i.t could create a cname entry to point people and programs in the right direction an entry like this one might do the job  cs.mit.edu 86400 in cname csail.mit.edu like cname  ptr points to another name however  unlike cname  which is really just a macro definition  i.e  a mechanism to replace one string by another   ptr is a regular dns data type whose interpretation depends on the context in which it is found in practice  it is nearly always used to associate a name with an ip address to allow lookups of the ip address and return the name of the corresponding machine these are called reverse lookups srv is a newer type of record that allows a host to be identified for a given service in a domain for example  the web server for cs.washington.edu could be identified as cockatoo.cs.washington.edu this record generalizes the mx record that performs the same task but it is just for mail servers 618 the application layer chap 7 spf is also a newer type of record it lets a domain encode information about what machines in the domain will send mail to the rest of the internet this helps receiving machines check that mail is valid if mail is being received from a machine that calls itself dodgy but the domain records say that mail will only be sent out of the domain by a machine called smtp  chances are that the mail is forged junk mail last on the list  txt records were originally provided to allow domains to identify themselves in arbitrary ways nowadays  they usually encode machinereadable information  typically the spf information finally  we have the value field this field can be a number  a domain name  or an ascii string the semantics depend on the record type a short description of the value fields for each of the principal record types is given in fig 7-3 for an example of the kind of information one might find in the dns database of a domain  see fig 7-4 this figure depicts part of a  hypothetical  database for the cs.vu.nl domain shown in fig 7-1 the database contains seven types of resource records ; authoritative data for cs.vu.nl cs.vu.nl 86400 in soa star boss  9527,7200,7200,241920,86400  cs.vu.nl 86400 in mx 1 zephyr cs.vu.nl 86400 in mx 2 top cs.vu.nl 86400 in ns star star 86400 in a 130.37.56.205 zephyr 86400 in a 130.37.20.10 top 86400 in a 130.37.20.11 www 86400 in cname star.cs.vu.nl ftp 86400 in cname zephyr.cs.vu.nl flits 86400 in a 130.37.16.112 flits 86400 in a 192.31.231.165 flits 86400 in mx 1 flits flits 86400 in mx 2 zephyr flits 86400 in mx 3 top rowboat in a 130.37.56.201 in mx 1 rowboat in mx 2 zephyr little-sister in a 130.37.62.23 laserjet in a 192.31.231.216 figure 7-4 a portion of a possible dns database for cs.vu.nl the first noncomment line of fig 7-4 gives some basic information about the domain  which will not concern us further then come two entries giving the first sec 7.1 dns ? the domain name system 619 and second places to try to deliver email sent to person @ cs.vu.nl the zephyr  a specific machine  should be tried first if that fails  the top should be tried as the next choice the next line identifies the name server for the domain as star after the blank line  added for readability  come lines giving the ip addresses for the star  zephyr  and top these are followed by an alias  www.cs.vu.nl  so that this address can be used without designating a specific machine creating this alias allows cs.vu.nl to change its world wide web server without invalidating the address people use to get to it a similar argument holds for ftp.cs.vu.nl the section for the machine flits lists two ip addresses and three choices are given for handling email sent to flits.cs.vu.nl first choice is naturally the flits itself  but if it is down  the zephyr and top are the second and third choices the next three lines contain a typical entry for a computer  in this case  rowboat.cs.vu.nl the information provided contains the ip address and the primary and secondary mail drops then comes an entry for a computer that is not capable of receiving mail itself  followed by an entry that is likely for a printer that is connected to the internet 7.1.3 name servers in theory at least  a single name server could contain the entire dns database and respond to all queries about it in practice  this server would be so overloaded as to be useless furthermore  if it ever went down  the entire internet would be crippled to avoid the problems associated with having only a single source of information  the dns name space is divided into nonoverlapping zones one possible way to divide the name space of fig 7-1 is shown in fig 7-5 each circled zone contains some part of the tree    eng cisco acm ieee eng washington cs robot jack jill ac co csl nec cs uwa keio edu vu oce cs law aero com edu gov museum org net au jp uk us nl generic countries    flits fluit figure 7-5 part of the dns name space divided into zones  which are circled   620 the application layer chap 7 where the zone boundaries are placed within a zone is up to that zone ? s administrator this decision is made in large part based on how many name servers are desired  and where for example  in fig 7-5  the university of washington has a zone for washington.edu that handles eng.washington.edu but does not handle cs.washington.edu that is a separate zone with its own name servers such a decision might be made when a department such as english does not wish to run its own name server  but a department such as computer science does each zone is also associated with one or more name servers these are hosts that hold the database for the zone normally  a zone will have one primary name server  which gets its information from a file on its disk  and one or more secondary name servers  which get their information from the primary name server to improve reliability  some of the name servers can be located outside the zone the process of looking up a name and finding an address is called name resolution when a resolver has a query about a domain name  it passes the query to a local name server if the domain being sought falls under the jurisdiction of the name server  such as top.cs.vu.nl falling under cs.vu.nl  it returns the authoritative resource records an authoritative record is one that comes from the authority that manages the record and is thus always correct authoritative records are in contrast to cached records  which may be out of date what happens when the domain is remote  such as when flits.cs.vu.nl wants to find the ip address of robot.cs.washington.edu at uw  university of washington  ? in this case  and if there is no cached information about the domain available locally  the name server begins a remote query this query follows the process shown in fig 7-6 step 1 shows the query that is sent to the local name server the query contains the domain name sought  the type  a   and the class  in   10  robot.cs.washington.edu 1  query 2  query 3  edu 5  washington.edu 4  query 6  query 7  cs.washington.edu 9  robot.cs.washington.edu 8  query local  cs.vu.nl  name server uwcs name server uw name server edu name server  a.edu-servers.net  root name server  a.root-servers.net  filts.cs.vu.nl originator figure 7-6 example of a resolver looking up a remote name in 10 steps the next step is to start at the top of the name hierarchy by asking one of the root name servers these name servers have information about each top-level sec 7.1 dns ? the domain name system 621 domain this is shown as step 2 in fig 7-6 to contact a root server  each name server must have information about one or more root name servers this information is normally present in a system configuration file that is loaded into the dns cache when the dns server is started it is simply a list of ns records for the root and the corresponding a records there are 13 root dns servers  unimaginatively called a-root-servers.net through m.root-servers.net each root server could logically be a single computer however  since the entire internet depends on the root servers  they are powerful and heavily replicated computers most of the servers are present in multiple geographical locations and reached using anycast routing  in which a packet is delivered to the nearest instance of a destination address ; we described anycast in chap 5 the replication improves reliability and performance the root name server is unlikely to know the address of a machine at uw  and probably does not know the name server for uw either but it must know the name server for the edu domain  in which cs.washington.edu is located it returns the name and ip address for that part of the answer in step 3 the local name server then continues its quest it sends the entire query to the edu name server  a.edu-servers.net   that name server returns the name server for uw this is shown in steps 4 and 5 closer now  the local name server sends the query to the uw name server  step 6   if the domain name being sought was in the english department  the answer would be found  as the uw zone includes the english department but the computer science department has chosen to run its own name server the query returns the name and ip address of the uw computer science name server  step 7   finally  the local name server queries the uw computer science name server  step 8   this server is authoritative for the domain cs.washington.edu  so it must have the answer it returns the final answer  step 9   which the local name server forwards as a response to flits.cs.vu.nl  step 10   the name has been resolved you can explore this process using standard tools such as the dig program that is installed on most unix systems for example  typing dig @ a.edu-servers.net robot.cs.washington.edu will send a query for robot.cs.washington.edu to the a.edu-servers.net name server and print out the result this will show you the information obtained in step 4 in the example above  and you will learn the name and ip address of the uw name servers there are three technical points to discuss about this long scenario first  two different query mechanisms are at work in fig 7-6 when the host flits.cs.vu.nl sends its query to the local name server  that name server handles the resolution on behalf of flits until it has the desired answer to return it does not return partial answers they might be helpful  but they are not what the query was seeking this mechanism is called a recursive query 622 the application layer chap 7 on the other hand  the root name server  and each subsequent name server  does not recursively continue the query for the local name server it just returns a partial answer and moves on to the next query the local name server is responsible for continuing the resolution by issuing further queries this mechanism is called an iterative query one name resolution can involve both mechanisms  as this example showed a recursive query may always seem preferable  but many name servers  especially the root  will not handle them they are too busy iterative queries put the burden on the originator the rationale for the local name server supporting a recursive query is that it is providing a service to hosts in its domain those hosts do not have to be configured to run a full name server  just to reach the local one the second point is caching all of the answers  including all the partial answers returned  are cached in this way  if another cs.vu.nl host queries for robot.cs.washington.edu the answer will already be known even better  if a host queries for a different host in the same domain  say galah.cs.washington.edu  the query can be sent directly to the authoritative name server similarly  queries for other domains in washington.edu can start directly from the washington.edu name server using cached answers greatly reduces the steps in a query and improves performance the original scenario we sketched is in fact the worst case that occurs when no useful information is cached however  cached answers are not authoritative  since changes made at cs.washington.edu will not be propagated to all the caches in the world that may know about it for this reason  cache entries should not live too long this is the reason that the time to live field is included in each resource record it tells remote name servers how long to cache records if a certain machine has had the same ip address for years  it may be safe to cache that information for 1 day for more volatile information  it might be safer to purge the records after a few seconds or a minute the third issue is the transport protocol that is used for the queries and responses it is udp dns messages are sent in udp packets with a simple format for queries  answers  and name servers that can be used to continue the resolution we will not go into the details of this format if no response arrives within a short time  the dns client repeats the query  trying another server for the domain after a small number of retries this process is designed to handle the case of the server being down as well as the query or response packet getting lost a 16-bit identifier is included in each query and copied to the response so that a name server can match answers to the corresponding query  even if multiple queries are outstanding at the same time even though its purpose is simple  it should be clear that dns is a large and complex distributed system that is comprised of millions of name servers that work together it forms a key link between human-readable domain names and the ip addresses of machines it includes replication and caching for performance and reliability and is designed to be highly robust sec 7.1 dns ? the domain name system 623 we have not covered security  but as you might imagine  the ability to change the name-to-address mapping can have devastating consequences if done maliciously for that reason  security extensions called dnssec have been developed for dns we will describe them in chap 8 there is also application demand to use names in more flexible ways  for example  by naming content and resolving to the ip address of a nearby host that has the content this fits the model of searching for and downloading a movie it is the movie that matters  not the computer that has a copy of it  so all that is wanted is the ip address of any nearby computer that has a copy of the movie content distribution networks are one way to accomplish this mapping we will describe how they build on the dns later in this chapter  in sec 7.5 7.2 electronic mail electronic mail  or more commonly email  has been around for over three decades faster and cheaper than paper mail  email has been a popular application since the early days of the internet before 1990  it was mostly used in academia during the 1990s  it became known to the public at large and grew exponentially  to the point where the number of emails sent per day now is vastly more than the number of snail mail  i.e  paper  letters other forms of network communication  such as instant messaging and voice-over-ip calls have expanded greatly in use over the past decade  but email remains the workhorse of internet communication it is widely used within industry for intracompany communication  for example  to allow far-flung employees all over the world to cooperate on complex projects unfortunately  like paper mail  the majority of email ? some 9 out of 10 messages ? is junk mail or spam  mcafee  2010   email  like most other forms of communication  has developed its own conventions and styles it is very informal and has a low threshold of use people who would never dream of calling up or even writing a letter to a very important person do not hesitate for a second to send a sloppily written email to him or her by eliminating most cues associated with rank  age  and gender  email debates often focus on content  not status with email  a brilliant idea from a summer student can have more impact than a dumb one from an executive vice president email is full of jargon such as btw  by the way   rotfl  rolling on the floor laughing   and imho  in my humble opinion   many people also use little ascii symbols called smileys  starting with the ubiquitous ? ?    ? ?  rotate the book 90 degrees clockwise if this symbol is unfamiliar this symbol and other emoticons help to convey the tone of the message they have spread to other terse forms of communication  such as instant messaging the email protocols have evolved during the period of their use  too the first email systems simply consisted of file transfer protocols  with the convention that the first line of each message  i.e  file  contained the recipient ? s address as time 624 the application layer chap 7 went on  email diverged from file transfer and many features were added  such as the ability to send one message to a list of recipients multimedia capabilities became important in the 1990s to send messages with images and other non-text material programs for reading email became much more sophisticated too  shifting from text-based to graphical user interfaces and adding the ability for users to access their mail from their laptops wherever they happen to be finally  with the prevalence of spam  mail readers and the mail transfer protocols must now pay attention to finding and removing unwanted email in our description of email  we will focus on the way that mail messages are moved between users  rather than the look and feel of mail reader programs nevertheless  after describing the overall architecture  we will begin with the user-facing part of the email system  as it is familiar to most readers 7.2.1 architecture and services in this section  we will provide an overview of how email systems are organized and what they can do the architecture of the email system is shown in fig 7-7 it consists of two kinds of subsystems  the user agents  which allow people to read and send email  and the message transfer agents  which move the messages from the source to the destination we will also refer to message transfer agents informally as mail servers message transfer agent message transfer agent smtp sender user agent mailbox receiver user agent email 1  mail submission 2  message transfer 3  final delivery figure 7-7 architecture of the email system the user agent is a program that provides a graphical interface  or sometimes a text and command-based interface that lets users interact with the email system it includes a means to compose messages and replies to messages  display incoming messages  and organize messages by filing  searching  and discarding them the act of sending new messages into the mail system for delivery is called mail submission some of the user agent processing may be done automatically  anticipating what the user wants for example  incoming mail may be filtered to extract or sec 7.2 electronic mail 625 deprioritize messages that are likely spam some user agents include advanced features  such as arranging for automatic email responses  ? ? i ? m having a wonderful vacation and it will be a while before i get back to you ? ?   a user agent runs on the same computer on which a user reads her mail it is just another program and may be run only some of the time the message transfer agents are typically system processes they run in the background on mail server machines and are intended to be always available their job is to automatically move email through the system from the originator to the recipient with smtp  simple mail transfer protocol   this is the message transfer step smtp was originally specified as rfc 821 and revised to become the current rfc 5321 it sends mail over connections and reports back the delivery status and any errors numerous applications exist in which confirmation of delivery is important and may even have legal significance  ? ? well  your honor  my email system is just not very reliable  so i guess the electronic subpoena just got lost somewhere ? ?   message transfer agents also implement mailing lists  in which an identical copy of a message is delivered to everyone on a list of email addresses other advanced features are carbon copies  blind carbon copies  high-priority email  secret  i.e  encrypted  email  alternative recipients if the primary one is not currently available  and the ability for assistants to read and answer their bosses ? email linking user agents and message transfer agents are the concepts of mailboxes and a standard format for email messages mailboxes store the email that is received for a user they are maintained by mail servers user agents simply present users with a view of the contents of their mailboxes to do this  the user agents send the mail servers commands to manipulate the mailboxes  inspecting their contents  deleting messages  and so on the retrieval of mail is the final delivery  step 3  in fig 7-7 with this architecture  one user may use different user agents on multiple computers to access one mailbox mail is sent between message transfer agents in a standard format the original format  rfc 822  has been revised to the current rfc 5322 and extended with support for multimedia content and international text this scheme is called mime and will be discussed later people still refer to internet email as rfc 822  though a key idea in the message format is the distinction between the envelope and its contents the envelope encapsulates the message it contains all the information needed for transporting the message  such as the destination address  priority  and security level  all of which are distinct from the message itself the message transport agents use the envelope for routing  just as the post office does the message inside the envelope consists of two separate parts  the header and the body the header contains control information for the user agents the body is entirely for the human recipient none of the agents care much about it envelopes and messages are illustrated in fig 7-8 626 the application layer chap 7 mr daniel dumkopf 18 willow lane white plains  ny 10604 united gizmo 180 main st boston  ma 02120 sept 1  2010 yours truly united gizmo yours truly united gizmo subject  invoice 1081 dear mr dumkopf  our computer records show that you still have not paid the above invoice of $ 0.00 please send us a check for $ 0.00 promptly dear mr dumkopf  our computer records show that you still have not paid the above invoice of $ 0.00 please send us a check for $ 0.00 promptly name  mr daniel dumkopf street  18 willow lane city  white plains state  ny zip code  10604 priority  urgent encryption  none from  united gizmo address  180 main st location  boston  ma 02120 date  sept 1  2010 subject  invoice 1081 envelope message  a   b  body header envelope 44 ? figure 7-8 envelopes and messages  a  paper mail  b  electronic mail we will examine the pieces of this architecture in more detail by looking at the steps that are involved in sending email from one user to another this journey starts with the user agent 7.2.2 the user agent a user agent is a program  sometimes called an email reader  that accepts a variety of commands for composing  receiving  and replying to messages  as well as for manipulating mailboxes there are many popular user agents  including google gmail  microsoft outlook  mozilla thunderbird  and apple mail they can vary greatly in their appearance most user agents have a menu or icondriven graphical interface that requires a mouse  or a touch interface on smaller mobile devices older user agents  such as elm  mh  and pine  provide text-based interfaces and expect one-character commands from the keyboard functionally  these are the same  at least for text messages the typical elements of a user agent interface are shown in fig 7-9 your mail reader is likely to be much flashier  but probably has equivalent functions sec 7.2 electronic mail 627 when a user agent is started  it will usually present a summary of the messages in the user ? s mailbox often  the summary will have one line for each message in some sorted order it highlights key fields of the message that are extracted from the message envelope or header mail folders all items inbox networks travel junk mail message summary from trudy andy djw amy n.wong guido lazowska lazowska                subject not all trudys are nasty material on rfid privacy have you seen this ? request for information re  paper acceptance more on that new report out received today today mar 4 mar 3 mar 3 mar 2 mar 2 mailbox search ! a student dear professor  i recently completed my undergraduate studies with distinction at an excellent university i will be visiting your message folders search graduate studies ? mar 1 message figure 7-9 typical elements of the user agent interface seven summary lines are shown in the example of fig 7-9 the lines use the from  subject  and received fields  in that order  to display who sent the message  what it is about  and when it was received all the information is formatted in a user-friendly way rather than displaying the literal contents of the message fields  but it is based on the message fields thus  people who fail to include a subject field often discover that responses to their emails tend not to get the highest priority many other fields or indications are possible the icons next to the message subjects in fig 7-9 might indicate  for example  unread mail  the envelope   attached material  the paperclip   and important mail  at least as judged by the sender  the exclamation point   many sorting orders are also possible the most common is to order messages based on the time that they were received  most recent first  with some indication as to whether the message is new or has already been read by the user the fields in the summary and the sort order can be customized by the user according to her preferences user agents must also be able to display incoming messages as needed so that people can read their email often a short preview of a message is provided  as in fig 7-9  to help users decide when to read further previews may use small icons or images to describe the contents of the message other presentation processing 628 the application layer chap 7 includes reformatting messages to fit the display  and translating or converting contents to more convenient formats  e.g  digitized speech to recognized text   after a message has been read  the user can decide what to do with it this is called message disposition options include deleting the message  sending a reply  forwarding the message to another user  and keeping the message for later reference most user agents can manage one mailbox for incoming mail with multiple folders for saved mail the folders allow the user to save message according to sender  topic  or some other category filing can be done automatically by the user agent as well  before the user reads the messages a common example is that the fields and contents of messages are inspected and used  along with feedback from the user about previous messages  to determine if a message is likely to be spam many isps and companies run software that labels mail as important or spam so that the user agent can file it in the corresponding mailbox the isp and company have the advantage of seeing mail for many users and may have lists of known spammers if hundreds of users have just received a similar message  it is probably spam by presorting incoming mail as ? ? probably legitimate ? ? and ? ? probably spam  ? ? the user agent can save users a fair amount of work separating the good stuff from the junk and the most popular spam ? it is generated by collections of compromised computers called botnets and its content depends on where you live fake diplomas are topical in asia  and cheap drugs and other dubious product offers are topical in the u.s unclaimed nigerian bank accounts still abound pills for enlarging various body parts are common everywhere other filing rules can be constructed by users each rule specifies a condition and an action for example  a rule could say that any message received from the boss goes to one folder for immediate reading and any message from a particular mailing list goes to another folder for later reading several folders are shown in fig 7-9 the most important folders are the inbox  for incoming mail not filed elsewhere  and junk mail  for messages that are thought to be spam as well as explicit constructs like folders  user agents now provide rich capabilities to search the mailbox this feature is also shown in fig 7-9 search capabilities let users find messages quickly  such as the message about ? ? where to buy vegemite ? ? that someone sent in the last month email has come a long way from the days when it was just file transfer providers now routinely support mailboxes with up to 1 gb of stored mail that details a user ? s interactions over a long period of time the sophisticated mail handling of user agents with search and automatic forms of processing is what makes it possible to manage these large volumes of email for people who send and receive thousands of messages a year  these tools are invaluable another useful feature is the ability to automatically respond to messages in some way one response is to forward incoming email to a different address  for example  a computer operated by a commercial paging service that pages the user sec 7.2 electronic mail 629 by using radio or satellite and displays the subject  line on his pager these autoresponders must run in the mail server because the user agent may not run all the time and may only occasionally retrieve email because of these factors  the user agent can not provide a true automatic response however  the interface for automatic responses is usually presented by the user agent a different example of an automatic response is a vacation agent this is a program that examines each incoming message and sends the sender an insipid reply such as  ? ? hi i ? m on vacation i ? ll be back on the 24th of august talk to you then ? ? such replies can also specify how to handle urgent matters in the interim  other people to contact for specific problems  etc most vacation agents keep track of whom they have sent canned replies to and refrain from sending the same person a second reply there are pitfalls with these agents  however for example  it is not advisable to send a canned reply to a large mailing list let us now turn to the scenario of one user sending a message to another user one of the basic features user agents support that we have not yet discussed is mail composition it involves creating messages and answers to messages and sending these messages into the rest of the mail system for delivery although any text editor can be used to create the body of the message  editors are usually integrated with the user agent so that it can provide assistance with addressing and the numerous header fields attached to each message for example  when answering a message  the email system can extract the originator ? s address from the incoming email and automatically insert it into the proper place in the reply other common features are appending a signature block to the bottom of a message  correcting spelling  and computing digital signatures that show the message is valid messages that are sent into the mail system have a standard format that must be created from the information supplied to the user agent the most important part of the message for transfer is the envelope  and the most important part of the envelope is the destination address this address must be in a format that the message transfer agents can deal with the expected form of an address is user @ dns-address since we studied dns earlier in this chapter  we will not repeat that material here however  it is worth noting that other forms of addressing exist in particular  x.400 addresses look radically different from dns addresses x.400 is an iso standard for message-handling systems that was at one time a competitor to smtp smtp won out handily  though x.400 systems are still used  mostly outside of the u.s x.400 addresses are composed of attribute = value pairs separated by slashes  for example  /c = us/st = massachusetts/l = cambridge/pa = 360 memorial dr./cn = ken smith/ this address specifies a country  state  locality  personal address  and common name  ken smith   many other attributes are possible  so you can send email to 630 the application layer chap 7 someone whose exact email address you do not know  provided you know enough other attributes  e.g  company and job title   although x.400 names are considerably less convenient than dns names  the issue is moot for user agents because they have user-friendly aliases  sometimes called nicknames  that allow users to enter or select a person ? s name and get the correct email address consequently  it is usually not necessary to actually type in these strange strings a final point we will touch on for sending mail is mailing lists  which let users send the same message to a list of people with a single command there are two choices for how the mailing list is maintained it might be maintained locally  by the user agent in this case  the user agent can just send a separate message to each intended recipient alternatively  the list may be maintained remotely at a message transfer agent messages will then be expanded in the message transfer system  which has the effect of allowing multiple users to send to the list for example  if a group of bird watchers has a mailing list called birders installed on the transfer agent meadowlark.arizona.edu  any message sent to birders @ meadowlark.arizona.edu will be routed to the university of arizona and expanded into individual messages to all the mailing list members  wherever in the world they may be users of this mailing list can not tell that it is a mailing list it could just as well be the personal mailbox of prof gabriel o birders 7.2.3 message formats now we turn from the user interface to the format of the email messages themselves messages sent by the user agent must be placed in a standard format to be handled by the message transfer agents first we will look at basic ascii email using rfc 5322  which is the latest revision of the original internet message format as described in rfc 822 after that  we will look at multimedia extensions to the basic format rfc 5322 ? the internet message format messages consist of a primitive envelope  described as part of smtp in rfc 5321   some number of header fields  a blank line  and then the message body each header field  logically  consists of a single line of ascii text containing the field name  a colon  and  for most fields  a value the original rfc 822 was designed decades ago and did not clearly distinguish the envelope fields from the header fields although it has been revised to rfc 5322  completely redoing it was not possible due to its widespread usage in normal usage  the user agent builds a message and passes it to the message transfer agent  which then uses some of the header fields to construct the actual envelope  a somewhat oldfashioned mixing of message and envelope sec 7.2 electronic mail 631 the principal header fields related to message transport are listed in fig 7-10 the to  field gives the dns address of the primary recipient having multiple recipients is also allowed the cc  field gives the addresses of any secondary recipients in terms of delivery  there is no distinction between the primary and secondary recipients it is entirely a psychological difference that may be important to the people involved but is not important to the mail system the term cc   carbon copy  is a bit dated  since computers do not use carbon paper  but it is well established the bcc   blind carbon copy  field is like the cc  field  except that this line is deleted from all the copies sent to the primary and secondary recipients this feature allows people to send copies to third parties without the primary and secondary recipients knowing this header meaning to  email address  es  of primary recipient  s  cc  email address  es  of secondary recipient  s  bcc  email address  es  for blind carbon copies from  person or people who created the message sender  email address of the actual sender received  line added by each transfer agent along the route return-path  can be used to identify a path back to the sender figure 7-10 rfc 5322 header fields related to message transport the next two fields  from  and sender   tell who wrote and sent the message  respectively these need not be the same for example  a business executive may write a message  but her assistant may be the one who actually transmits it in this case  the executive would be listed in the from  field and the assistant in the sender  field the from  field is required  but the sender  field may be omitted if it is the same as the from  field these fields are needed in case the message is undeliverable and must be returned to the sender a line containing received  is added by each message transfer agent along the way the line contains the agent ? s identity  the date and time the message was received  and other information that can be used for debugging the routing system the return-path  field is added by the final message transfer agent and was intended to tell how to get back to the sender in theory  this information can be gathered from all the received  headers  except for the name of the sender ? s mailbox   but it is rarely filled in as such and typically just contains the sender ? s address in addition to the fields of fig 7-10  rfc 5322 messages may also contain a variety of header fields used by the user agents or human recipients the most common ones are listed in fig 7-11 most of these are self-explanatory  so we will not go into all of them in much detail 632 the application layer chap 7 header meaning date  the date and time the message was sent reply-to  email address to which replies should be sent message-id  unique number for referencing this message later in-reply-to  message-id of the message to which this is a reply references  other relevant message-ids keywords  user-chosen keywords subject  short summary of the message for the one-line display figure 7-11 some fields used in the rfc 5322 message header the reply-to  field is sometimes used when neither the person composing the message nor the person sending the message wants to see the reply for example  a marketing manager may write an email message telling customers about a new product the message is sent by an assistant  but the reply-to  field lists the head of the sales department  who can answer questions and take orders this field is also useful when the sender has two email accounts and wants the reply to go to the other one the message-id  is an automatically generated number that is used to link messages together  e.g  when used in the in-reply-to  field  and to prevent duplicate delivery the rfc 5322 document explicitly says that users are allowed to invent optional headers for their own private use by convention since rfc 822  these headers start with the string x it is guaranteed that no future headers will use names starting with x  to avoid conflicts between official and private headers sometimes wiseguy undergraduates make up fields like x-fruit-of-the-day  or x-disease-of-the-week   which are legal  although not always illuminating after the headers comes the message body users can put whatever they want here some people terminate their messages with elaborate signatures  including quotations from greater and lesser authorities  political statements  and disclaimers of all kinds  e.g  the xyz corporation is not responsible for my opinions ; in fact  it can not even comprehend them   mime ? the multipurpose internet mail extensions in the early days of the arpanet  email consisted exclusively of text messages written in english and expressed in ascii for this environment  the early rfc 822 format did the job completely  it specified the headers but left the content entirely up to the users in the 1990s  the worldwide use of the internet and demand to send richer content through the mail system meant that this approach was no longer adequate the problems included sending and receiving messages sec 7.2 electronic mail 633 in languages with accents  e.g  french and german   non-latin alphabets  e.g  hebrew and russian   or no alphabets  e.g  chinese and japanese   as well as sending messages not containing text at all  e.g  audio  images  or binary documents and programs   the solution was the development of mime  multipurpose internet mail extensions   it is widely used for mail messages that are sent across the internet  as well as to describe content for other applications such as web browsing mime is described in rfcs 2045 ? 2047  4288  4289  and 2049 the basic idea of mime is to continue to use the rfc 822 format  the precursor to rfc 5322 the time mime was proposed  but to add structure to the message body and define encoding rules for the transfer of non-ascii messages not deviating from rfc 822 allowed mime messages to be sent using the existing mail transfer agents and protocols  based on rfc 821 then  and rfc 5321 now   all that had to be changed were the sending and receiving programs  which users could do for themselves mime defines five new message headers  as shown in fig 7-12 the first of these simply tells the user agent receiving the message that it is dealing with a mime message  and which version of mime it uses any message not containing a mime-version  header is assumed to be an english plaintext message  or at least one using only ascii characters  and is processed as such header meaning mime-version  identifies the mime version content-description  human-readable string telling what is in the message content-id  unique identifier content-transfer-encoding  how the body is wrapped for transmission content-type  type and format of the content figure 7-12 message headers added by mime the content-description  header is an ascii string telling what is in the message this header is needed so the recipient will know whether it is worth decoding and reading the message if the string says ? ? photo of barbara ? s hamster ? ? and the person getting the message is not a big hamster fan  the message will probably be discarded rather than decoded into a high-resolution color photograph the content-id  header identifies the content it uses the same format as the standard message-id  header the content-transfer-encoding  tells how the body is wrapped for transmission through the network a key problem at the time mime was developed was that the mail transfer  smtp  protocols expected ascii messages in which no line exceeded 1000 characters ascii characters use 7 bits out of each 8-bit byte binary data such as executable programs and images use all 8 bits of each byte  as 634 the application layer chap 7 do extended character sets there was no guarantee this data would be transferred safely hence  some method of carrying binary data that made it look like a regular ascii mail message was needed extensions to smtp since the development of mime do allow 8-bit binary data to be transferred  though even today binary data may not always go through the mail system correctly if unencoded mime provides five transfer encoding schemes  plus an escape to new schemes ? just in case the simplest scheme is just ascii text messages ascii characters use 7 bits and can be carried directly by the email protocol  provided that no line exceeds 1000 characters the next simplest scheme is the same thing  but using 8-bit characters  that is  all values from 0 up to and including 255 are allowed messages using the 8-bit encoding must still adhere to the standard maximum line length then there are messages that use a true binary encoding these are arbitrary binary files that not only use all 8 bits but also do not adhere to the 1000-character line limit executable programs fall into this category nowadays  mail servers can negotiate to send data in binary  or 8-bit  encoding  falling back to ascii if both ends do not support the extension the ascii encoding of binary data is called base64 encoding in this scheme  groups of 24 bits are broken up into four 6-bit units  with each unit being sent as a legal ascii character the coding is ? ? a ? ? for 0  ? ? b ? ? for 1  and so on  followed by the 26 lowercase letters  the 10 digits  and finally + and / for 62 and 63  respectively the = = and = sequences indicate that the last group contained only 8 or 16 bits  respectively carriage returns and line feeds are ignored  so they can be inserted at will in the encoded character stream to keep the lines short enough arbitrary binary text can be sent safely using this scheme  albeit inefficiently this encoding was very popular before binary-capable mail servers were widely deployed it is still commonly seen for messages that are almost entirely ascii but with a few non-ascii characters  base64 encoding is somewhat inefficient instead  an encoding known as quoted-printable encoding is used this is just 7-bit ascii  with all the characters above 127 encoded as an equals sign followed by the character ? s value as two hexadecimal digits control characters  some punctuation marks and math symbols  as well as trailing spaces are also so encoded finally  when there are valid reasons not to use one of these schemes  it is possible to specify a user-defined encoding in the content-transfer-encoding  header the last header shown in fig 7-12 is really the most interesting one it specifies the nature of the message body and has had an impact well beyond email for instance  content downloaded from the web is labeled with mime types so that the browser knows how to present it so is content sent over streaming media and real-time transports such as voice over ip initially  seven mime types were defined in rfc 1521 each type has one or more available subtypes the type and subtype are separated by a slash  as in sec 7.2 electronic mail 635 ? ? content-type  video/mpeg ? ?  since then  hundreds of subtypes have been added  along with another type additional entries are being added all the time as new types of content are developed the list of assigned types and subtypes is maintained online by iana at www.iana.org/assignments/media-types the types  along with examples of commonly used subtypes  are given in fig 7-13 let us briefly go through them  starting with text the text/plain combination is for ordinary messages that can be displayed as received  with no encoding and no further processing this option allows ordinary messages to be transported in mime with only a few extra headers the text/html subtype was added when the web became popular  in rfc 2854  to allow web pages to be sent in rfc 822 email a subtype for the extensible markup language  text/xml  is defined in rfc 3023 xml documents have proliferated with the development of the web we will study html and xml in sec 7.3 type example subtypes description text plain  html  xml  css text in various formats image gif  jpeg  tiff pictures audio basic  mpeg  mp4 sounds video mpeg  mp4  quicktime movies model vrml 3d model application octet-stream  pdf  javascript  zip data produced by applications message http  rfc822 encapsulated message multipart mixed  alternative  parallel  digest combination of multiple types figure 7-13 mime content types and example subtypes the next mime type is image  which is used to transmit still pictures many formats are widely used for storing and transmitting images nowadays  both with and without compression several of these  including gif  jpeg  and tiff  are built into nearly all browsers many other formats and corresponding subtypes exist as well the audio and video types are for sound and moving pictures  respectively please note that video may include only the visual information  not the sound if a movie with sound is to be transmitted  the video and audio portions may have to be transmitted separately  depending on the encoding system used the first video format defined was the one devised by the modestly named moving picture experts group  mpeg   but others have been added since in addition to audio/basic  a new audio type  audio/mpeg  was added in rfc 3003 to allow people to email mp3 audio files the video/mp4 and audio/mp4 types signal video and audio data that are stored in the newer mpeg 4 format the model type was added after the other content types it is intended for describing 3d model data however  it has not been widely used to date 636 the application layer chap 7 the application type is a catchall for formats that are not covered by one of the other types and that require an application to interpret the data we have listed the subtypes pdf  javascript  and zip as examples for pdf documents  java script programs  and zip archives  respectively user agents that receive this content use a third-party library or external program to display the content ; the display may or may not appear to be integrated with the user agent by using mime types  user agents gain the extensibility to handle new types of application content as it is developed this is a significant benefit on the other hand  many of the new forms of content are executed or interpreted by applications  which presents some dangers obviously  running an arbitrary executable program that has arrived via the mail system from ? ? friends ? ? poses a security hazard the program may do all sorts of nasty damage to the parts of the computer to which it has access  especially if it can read and write files and use the network less obviously  document formats can pose the same hazards this is because formats such as pdf are full-blown programming languages in disguise while they are interpreted and restricted in scope  bugs in the interpreter often allow devious documents to escape the restrictions besides these examples  there are many more application subtypes because there are many more applications as a fallback to be used when no other subtype is known to be more fitting  the octet-stream subtype denotes a sequence of uninterpreted bytes upon receiving such a stream  it is likely that a user agent will display it by suggesting to the user that it be copied to a file subsequent processing is then up to the user  who presumably knows what kind of content it is the last two types are useful for composing and manipulating messages themselves the message type allows one message to be fully encapsulated inside another this scheme is useful for forwarding email  for example when a complete rfc 822 message is encapsulated inside an outer message  the rfc822 subtype should be used similarly  it is common for html documents to be encapsulated and the partial subtype makes it possible to break an encapsulated message into pieces and send them separately  for example  if the encapsulated message is too long   parameters make it possible to reassemble all the parts at the destination in the correct order finally  the multipart type allows a message to contain more than one part  with the beginning and end of each part being clearly delimited the mixed subtype allows each part to be a different type  with no additional structure imposed many email programs allow the user to provide one or more attachments to a text message these attachments are sent using the multipart type in contrast to mixed  the alternative subtype allows the same message to be included multiple times but expressed in two or more different media for example  a message could be sent in plain ascii  in hmtl  and in pdf a properly designed user agent getting such a message would display it according to user preferences likely pdf would be the first choice  if that is possible the second choice would be html if neither of these were possible  then the flat ascii sec 7.2 electronic mail 637 text would be displayed the parts should be ordered from simplest to most complex to help recipients with pre-mime user agents make some sense of the message  e.g  even a pre-mime user can read flat ascii text   the alternative subtype can also be used for multiple languages in this context  the rosetta stone can be thought of as an early multipart/alternative message of the other two example subtypes  the parallel subtype is used when all parts must be ? ? viewed ? ? simultaneously for example  movies often have an audio channel and a video channel movies are more effective if these two channels are played back in parallel  instead of consecutively the digest subtype is used when multiple messages are packed together into a composite message for example  some discussion groups on the internet collect messages from subscribers and then send them out to the group periodically as a single multipart/digest message as an example of how mime types may be used for email messages  a multimedia message is shown in fig 7-14 here  a birthday greeting is transmitted in alternative forms as html and as an audio file assuming the receiver has audio capability  the user agent there will play the sound file in this example  the sound is carried by reference as a message/external-body subtype  so first the user agent must fetch the sound file birthday.snd using ftp if the user agent has no audio capability  the lyrics are displayed on the screen in stony silence the two parts are delimited by two hyphens followed by a  software-generated  string specified in the boundary parameter note that the content-type header occurs in three positions within this example at the top level  it indicates that the message has multiple parts within each part  it gives the type and subtype of that part finally  within the body of the second part  it is required to tell the user agent what kind of external file it is to fetch to indicate this slight difference in usage  we have used lowercase letters here  although all headers are case insensitive the content-transfer-encoding is similarly required for any external body that is not encoded as 7-bit ascii 7.2.4 message transfer now that we have described user agents and mail messages  we are ready to look at how the message transfer agents relay messages from the originator to the recipient the mail transfer is done with the smtp protocol the simplest way to move messages is to establish a transport connection from the source machine to the destination machine and then just transfer the message this is how smtp originally worked over the years  however  two different uses of smtp have been differentiated the first use is mail submission  step 1 in the email architecture of fig 7-7 this is the means by which user agents send messages into the mail system for delivery the second use is to transfer messages between message transfer agents  step 2 in fig 7-7   this 638 the application layer chap 7 from  alice @ cs.washington.edu to  bob @ ee.uwa.edu.au mime-version  1.0 message-id  < 0704760941.aa00747 @ cs.washington.edu > content-type  multipart/alternative ; boundary = qwertyuiopasdfghjklzxcvbnm subject  earth orbits sun integral number of times this is the preamble the user agent ignores it have a nice day --qwertyuiopasdfghjklzxcvbnm content-type  text/html < p > happy birthday to you < br > happy birthday to you < br > happy birthday dear < b > bob < /b > < br > happy birthday to you < /p > --qwertyuiopasdfghjklzxcvbnm content-type  message/external-body ; access-type = " anon-ftp " ; site = " bicycle.cs.washington.edu " ; directory = " pub " ; name = " birthday.snd " content-type  audio/basic content-transfer-encoding  base64 --qwertyuiopasdfghjklzxcvbnm figure 7-14 a multipart message containing html and audio alternatives sequence delivers mail all the way from the sending to the receiving message transfer agent in one hop final delivery is accomplished with different protocols that we will describe in the next section in this section  we will describe the basics of the smtp protocol and its extension mechanism then we will discuss how it is used differently for mail submission and message transfer smtp  simple mail transfer protocol  and extensions within the internet  email is delivered by having the sending computer establish a tcp connection to port 25 of the receiving computer listening to this port is a mail server that speaks smtp  simple mail transfer protocol   this server accepts incoming connections  subject to some security checks  and accepts messages for delivery if a message can not be delivered  an error report containing the first part of the undeliverable message is returned to the sender smtp is a simple ascii protocol this is not a weakness but a feature using ascii text makes protocols easy to develop  test  and debug they can be sec 7.2 electronic mail 639 tested by sending commands manually  and records of the messages are easy to read most application-level internet protocols now work this way  e.g  http   we will walk through a simple message transfer between mail servers that delivers a message after establishing the tcp connection to port 25  the sending machine  operating as the client  waits for the receiving machine  operating as the server  to talk first the server starts by sending a line of text giving its identity and telling whether it is prepared to receive mail if it is not  the client releases the connection and tries again later if the server is willing to accept email  the client announces whom the email is coming from and whom it is going to if such a recipient exists at the destination  the server gives the client the go-ahead to send the message then the client sends the message and the server acknowledges it no checksums are needed because tcp provides a reliable byte stream if there is more email  that is now sent when all the email has been exchanged in both directions  the connection is released a sample dialog for sending the message of fig 7-14  including the numerical codes used by smtp  is shown in fig 7-15 the lines sent by the client  i.e  the sender  are marked c   those sent by the server  i.e  the receiver  are marked s   the first command from the client is indeed meant to be helo of the various four-character abbreviations for hello  this one has numerous advantages over its biggest competitor why all the commands had to be four characters has been lost in the mists of time in fig 7-15  the message is sent to only one recipient  so only one rcpt command is used such commands are allowed to send a single message to multiple receivers each one is individually acknowledged or rejected even if some recipients are rejected  because they do not exist at the destination   the message can be sent to the other ones finally  although the syntax of the four-character commands from the client is rigidly specified  the syntax of the replies is less rigid only the numerical code really counts each implementation can put whatever string it wants after the code the basic smtp works well  but it is limited in several respects it does not include authentication this means that the from command in the example could give any sender address that it pleases this is quite useful for sending spam another limitation is that smtp transfers ascii messages  not binary data this is why the base64 mime content transfer encoding was needed however  with that encoding the mail transmission uses bandwidth inefficiently  which is an issue for large messages a third limitation is that smtp sends messages in the clear it has no encryption to provide a measure of privacy against prying eyes to allow these and many other problems related to message processing to be addressed  smtp was revised to have an extension mechanism this mechanism is a mandatory part of the rfc 5321 standard the use of smtp with extensions is called esmtp  extended smtp   640 the application layer chap 7 s  220 ee.uwa.edu.au smtp service ready c  helo abcd.com s  250 cs.washington.edu says hello to ee.uwa.edu.au c  mail from  < alice @ cs.washington.edu > s  250 sender ok c  rcpt to  < bob @ ee.uwa.edu.au > s  250 recipient ok c  data s  354 send mail ; end with "  " on a line by itself c  from  alice @ cs.washington.edu c  to  bob @ ee.uwa.edu.au c  mime-version  1.0 c  message-id  < 0704760941.aa00747 @ ee.uwa.edu.au > c  content-type  multipart/alternative ; boundary = qwertyuiopasdfghjklzxcvbnm c  subject  earth orbits sun integral number of times c  c  this is the preamble the user agent ignores it have a nice day c  c  --qwertyuiopasdfghjklzxcvbnm c  content-type  text/html c  c  < p > happy birthday to you c  happy birthday to you c  happy birthday dear < bold > bob < /bold > c  happy birthday to you c  c  --qwertyuiopasdfghjklzxcvbnm c  content-type  message/external-body ; c  access-type = " anon-ftp " ; c  site = " bicycle.cs.washington.edu " ; c  directory = " pub " ; c  name = " birthday.snd " c  c  content-type  audio/basic c  content-transfer-encoding  base64 c  --qwertyuiopasdfghjklzxcvbnm c   s  250 message accepted c  quit s  221 ee.uwa.edu.au closing connection figure 7-15 sending a message from alice @ cs.washington.edu to bob @ ee.uwa.edu.au clients wanting to use an extension send an ehlo message instead of helo initially if this is rejected  the server is a regular smtp server  and the client should proceed in the usual way if the ehlo is accepted  the server replies with the extensions that it supports the client may then use any of these extensions several common extensions are shown in fig 7-16 the figure gives the keyword sec 7.2 electronic mail 641 as used in the extension mechanism  along with a description of the new functionality we will not go into extensions in further detail keyword description auth client authentication binarymime server accepts binary messages chunking server accepts large messages in chunks size check message size before trying to send starttls switch to secure transport  tls ; see chap 8  utf8smtp internationalized addresses figure 7-16 some smtp extensions to get a better feel for how smtp and some of the other protocols described in this chapter work  try them out in all cases  first go to a machine connected to the internet on a unix  or linux  system  in a shell  type telnet mail.isp.com 25 substituting the dns name of your isp ? s mail server for mail.isp.com on a windows xp system  click on start  then run  and type the command in the dialog box on a vista or windows 7 machine  you may have to first install the telnet program  or equivalent  and then start it yourself this command will establish a telnet  i.e  tcp  connection to port 25 on that machine port 25 is the smtp port ; see fig 6-34 for the ports for other common protocols you will probably get a response something like this  trying 192.30.200.66 connected to mail.isp.com escape character is ? ?  ?  220 mail.isp.com smail # 74 ready at thu  25 sept 2002 13  26 + 0200 the first three lines are from telnet  telling you what it is doing the last line is from the smtp server on the remote machine  announcing its willingness to talk to you and accept email to find out what commands it accepts  type help from this point on  a command sequence such as the one in fig 7-16 is possible if the server is willing to accept mail from you mail submission originally  user agents ran on the same computer as the sending message transfer agent in this setting  all that is required to send a message is for the user agent to talk to the local mail server  using the dialog that we have just described however  this setting is no longer the usual case 642 the application layer chap 7 user agents often run on laptops  home pcs  and mobile phones they are not always connected to the internet mail transfer agents run on isp and company servers they are always connected to the internet this difference means that a user agent in boston may need to contact its regular mail server in seattle to send a mail message because the user is traveling by itself  this remote communication poses no problem it is exactly what the tcp/ip protocols are designed to support however  an isp or company usually does not want any remote user to be able to submit messages to its mail server to be delivered elsewhere the isp or company is not running the server as a public service in addition  this kind of open mail relay attracts spammers this is because it provides a way to launder the original sender and thus make the message more difficult to identify as spam given these considerations  smtp is normally used for mail submission with the auth extension this extension lets the server check the credentials  username and password  of the client to confirm that the server should be providing mail service there are several other differences in the way smtp is used for mail submission for example  port 587 is used in preference to port 25 and the smtp server can check and correct the format of the messages sent by the user agent for more information about the restricted use of smtp for mail submission  please see rfc 4409 message transfer once the sending mail transfer agent receives a message from the user agent  it will deliver it to the receiving mail transfer agent using smtp to do this  the sender uses the destination address consider the message in fig 7-15  addressed to bob @ ee.uwa.edu.au to what mail server should the message be delivered ? to determine the correct mail server to contact  dns is consulted in the previous section  we described how dns contains multiple types of records  including the mx  or mail exchanger  record in this case  a dns query is made for the mx records of the domain ee.uwa.edu.au this query returns an ordered list of the names and ip addresses of one or more mail servers the sending mail transfer agent then makes a tcp connection on port 25 to the ip address of the mail server to reach the receiving mail transfer agent  and uses smtp to relay the message the receiving mail transfer agent will then place mail for the user bob in the correct mailbox for bob to read it at a later time this local delivery step may involve moving the message among computers if there is a large mail infrastructure with this delivery process  mail travels from the initial to the final mail transfer agent in a single hop there are no intermediate servers in the message transfer stage it is possible  however  for this delivery process to occur multiple times one example that we have described already is when a message transfer agent sec 7.2 electronic mail 643 implements a mailing list in this case  a message is received for the list it is then expanded as a message to each member of the list that is sent to the individual member addresses as another example of relaying  bob may have graduated from m.i.t and also be reachable via the address bob @ alum.mit.edu rather than reading mail on multiple accounts  bob can arrange for mail sent to this address to be forwarded to bob @ ee.uwa.edu in this case  mail sent to bob @ alum.mit.edu will undergo two deliveries first  it will be sent to the mail server for alum.mit.edu then  it will be sent to the mail server for ee.uwa.edu.au each of these legs is a complete and separate delivery as far as the mail transfer agents are concerned another consideration nowadays is spam nine out of ten messages sent today are spam  mcafee  2010   few people want more spam  but it is hard to avoid because it masquerades as regular mail before accepting a message  additional checks may be made to reduce the opportunities for spam the message for bob was sent from alice @ cs.washington.edu the receiving mail transfer agent can look up the sending mail transfer agent in dns this lets it check that the ip address of the other end of the tcp connection matches the dns name more generally  the receiving agent may look up the sending domain in dns to see if it has a mail sending policy this information is often given in the txt and spf records it may indicate that other checks can be made for example  mail sent from cs.washington.edu may always be sent from the host june.cs.washington.edu if the sending mail transfer agent is not june  there is a problem if any of these checks fail  the mail is probably being forged with a fake sending address in this case  it is discarded however  passing these checks does not imply that mail is not spam the checks merely ensure that the mail seems to be coming from the region of the network that it purports to come from the idea is that spammers should be forced to use the correct sending address when they send mail this makes spam easier to recognize and delete when it is unwanted 7.2.5 final delivery our mail message is almost delivered it has arrived at bob ? s mailbox all that remains is to transfer a copy of the message to bob ? s user agent for display this is step 3 in the architecture of fig 7-7 this task was straightforward in the early internet  when the user agent and mail transfer agent ran on the same machine as different processes the mail transfer agent simply wrote new messages to the end of the mailbox file  and the user agent simply checked the mailbox file for new mail nowadays  the user agent on a pc  laptop  or mobile  is likely to be on a different machine than the isp or company mail server users want to be able to access their mail remotely  from wherever they are they want to access email from work  from their home pcs  from their laptops when on business trips  and from cybercafes when on so-called vacation they also want to be able to work offline  644 the application layer chap 7 then reconnect to receive incoming mail and send outgoing mail moreover  each user may run several user agents depending on what computer it is convenient to use at the moment several user agents may even be running at the same time in this setting  the job of the user agent is to present a view of the contents of the mailbox  and to allow the mailbox to be remotely manipulated several different protocols can be used for this purpose  but smtp is not one of them smtp is a push-based protocol it takes a message and connects to a remote server to transfer the message final delivery can not be achieved in this manner both because the mailbox must continue to be stored on the mail transfer agent and because the user agent may not be connected to the internet at the moment that smtp attempts to relay messages imap ? the internet message access protocol one of the main protocols that is used for final delivery is imap  internet message access protocol   version 4 of the protocol is defined in rfc 3501 to use imap  the mail server runs an imap server that listens to port 143 the user agent runs an imap client the client connects to the server and begins to issue commands from those listed in fig 7-17 first  the client will start a secure transport if one is to be used  in order to keep the messages and commands confidential   and then log in or otherwise authenticate itself to the server once logged in  there are many commands to list folders and messages  fetch messages or even parts of messages  mark messages with flags for later deletion  and organize messages into folders to avoid confusion  please note that we use the term ? ? folder ? ? here to be consistent with the rest of the material in this section  in which a user has a single mailbox made up of multiple folders however  in the imap specification  the term mailbox is used instead one user thus has many imap mailboxes  each of which is typically presented to the user as a folder imap has many other features  too it has the ability to address mail not by message number  but by using attributes  e.g  give me the first message from alice   searches can be performed on the server to find the messages that satisfy certain criteria so that only those messages are fetched by the client imap is an improvement over an earlier final delivery protocol  pop3  post office protocol  version 3   which is specified in rfc 1939 pop3 is a simpler protocol but supports fewer features and is less secure in typical usage mail is usually downloaded to the user agent computer  instead of remaining on the mail server this makes life easier on the server  but harder on the user it is not easy to read mail on multiple computers  plus if the user agent computer breaks  all email may be lost permanently nonetheless  you will still find pop3 in use proprietary protocols can also be used because the protocol runs between a mail server and user agent that can be supplied by the same company microsoft exchange is a mail system with a proprietary protocol sec 7.2 electronic mail 645 command description capability list server capabilities starttls start secure transport  tls ; see chap 8  login log on to server authenticate log on with other method select select a folder examine select a read-only folder create create a folder delete delete a folder rename rename a folder subscribe add folder to active set unsubscribe remove folder from active set list list the available folders lsub list the active folders status get the status of a folder append add a message to a folder check get a checkpoint of a folder fetch get messages from a folder search find messages in a folder store alter message flags copy make a copy of a message in a folder expunge remove messages flagged for deletion uid issue commands using unique identifiers noop do nothing close remove flagged messages and close folder logout log out and close connection figure 7-17 imap  version 4  commands webmail an increasingly popular alternative to imap and smtp for providing email service is to use the web as an interface for sending and receiving mail widely used webmail systems include google gmail  microsoft hotmail and yahoo ! mail webmail is one example of software  in this case  a mail user agent  that is provided as a service using the web in this architecture  the provider runs mail servers as usual to accept messages for users with smtp on port 25 however  the user agent is different instead of 646 the application layer chap 7 being a standalone program  it is a user interface that is provided via web pages this means that users can use any browser they like to access their mail and send new messages we have not yet studied the web  but a brief description that you might come back to is as follows when the user goes to the email web page of the provider  a form is presented in which the user is asked for a login name and password the login name and password are sent to the server  which then validates them if the login is successful  the server finds the user ? s mailbox and builds a web page listing the contents of the mailbox on the fly the web page is then sent to the browser for display many of the items on the page showing the mailbox are clickable  so messages can be read  deleted  and so on to make the interface responsive  the web pages will often include javascript programs these programs are run locally on the client in response to local events  e.g  mouse clicks  and can also download and upload messages in the background  to prepare the next message for display or a new message for submission in this model  mail submission happens using the normal web protocols by posting data to a url the web server takes care of injecting messages into the traditional mail delivery system that we have described for security  the standard web protocols can be used as well these protocols concern themselves with encrypting web pages  not whether the content of the web page is a mail message 7.3 the world wide web the web  as the world wide web is popularly known  is an architectural framework for accessing linked content spread out over millions of machines all over the internet in 10 years it went from being a way to coordinate the design of high-energy physics experiments in switzerland to the application that millions of people think of as being ? ? the internet ? ? its enormous popularity stems from the fact that it is easy for beginners to use and provides access with a rich graphical interface to an enormous wealth of information on almost every conceivable subject  from aardvarks to zulus the web began in 1989 at cern  the european center for nuclear research the initial idea was to help large teams  often with members in half a dozen or more countries and time zones  collaborate using a constantly changing collection of reports  blueprints  drawings  photos  and other documents produced by experiments in particle physics the proposal for a web of linked documents came from cern physicist tim berners-lee the first  text-based  prototype was operational 18 months later a public demonstration given at the hypertext ? 91 conference caught the attention of other researchers  which led marc andreessen at the university of illinois to develop the first graphical browser it was called mosaic and released in february 1993 sec 7.3 the world wide web 647 the rest  as they say  is now history mosaic was so popular that a year later andreessen left to form a company  netscape communications corp  whose goal was to develop web software for the next three years  netscape navigator and microsoft ? s internet explorer engaged in a ? ? browser war  ? ? each one trying to capture a larger share of the new market by frantically adding more features  and thus more bugs  than the other one through the 1990s and 2000s  web sites and web pages  as web content is called  grew exponentially until there were millions of sites and billions of pages a small number of these sites became tremendously popular those sites and the companies behind them largely define the web as people experience it today examples include  a bookstore  amazon  started in 1994  market capitalization $ 50 billion   a flea market  ebay  1995  $ 30b   search  google  1998  $ 150b   and social networking  facebook  2004  private company valued at more than $ 15b   the period through 2000  when many web companies became worth hundreds of millions of dollars overnight  only to go bust practically the next day when they turned out to be hype  even has a name it is called the dot com era new ideas are still striking it rich on the web many of them come from students for example  mark zuckerberg was a harvard student when he started facebook  and sergey brin and larry page were students at stanford when they started google perhaps you will come up with the next big thing in 1994  cern and m.i.t signed an agreement setting up the w3c  world wide web consortium   an organization devoted to further developing the web  standardizing protocols  and encouraging interoperability between sites berners lee became the director since then  several hundred universities and companies have joined the consortium although there are now more books about the web than you can shake a stick at  the best place to get up-to-date information about the web is  naturally  on the web itself the consortium ? s home page is at www.w3.org interested readers are referred there for links to pages covering all of the consortium ? s numerous documents and activities 7.3.1 architectural overview from the users ? point of view  the web consists of a vast  worldwide collection of content in the form of web pages  often just called pages for short each page may contain links to other pages anywhere in the world users can follow a link by clicking on it  which then takes them to the page pointed to this process can be repeated indefinitely the idea of having one page point to another  now called hypertext  was invented by a visionary m.i.t professor of electrical engineering  vannevar bush  in 1945  bush  1945   this was long before the internet was invented in fact  it was before commercial computers existed although several universities had produced crude prototypes that filled large rooms and had less power than a modern pocket calculator 648 the application layer chap 7 pages are generally viewed with a program called a browser firefox  internet explorer  and chrome are examples of popular browsers the browser fetches the page requested  interprets the content  and displays the page  properly formatted  on the screen the content itself may be a mix of text  images  and formatting commands  in the manner of a traditional document  or other forms of content such as video or programs that produce a graphical interface with which users can interact a picture of a page is shown on the top-left side of fig 7-18 it is the page for the computer science & engineering department at the university of washington this page shows text and graphical elements  that are mostly too small to read   some parts of the page are associated with links to other pages a piece of text  icon  image  and so on associated with another page is called a hyperlink to follow a link  the user places the mouse cursor on the linked portion of the page area  which causes the cursor to change shape  and clicks following a link is simply a way of telling the browser to fetch another page in the early days of the web  links were highlighted with underlining and colored text so that they would stand out nowadays  the creators of web pages have ways to control the look of linked regions  so a link might appear as an icon or change its appearance when the mouse passes over it it is up to the creators of the page to make the links visually distinct  to provide a usable interface http request database web page hyperlink web browser document www.cs.washington.edu program http response web server youtube.com google-analytics.com figure 7-18 architecture of the web sec 7.3 the world wide web 649 students in the department can learn more by following a link to a page with information especially for them this link is accessed by clicking in the circled area the browser then fetches the new page and displays it  as partially shown in the bottom left of fig 7-18 dozens of other pages are linked off the first page besides this example every other page can be comprised of content on the same machine  s  as the first page  or on machines halfway around the globe the user can not tell page fetching is done by the browser  without any help from the user thus  moving between machines while viewing content is seamless the basic model behind the display of pages is also shown in fig 7-18 the browser is displaying a web page on the client machine each page is fetched by sending a request to one or more servers  which respond with the contents of the page the request-response protocol for fetching pages is a simple text-based protocol that runs over tcp  just as was the case for smtp it is called http  hypertext transfer protocol   the content may simply be a document that is read off a disk  or the result of a database query and program execution the page is a static page if it is a document that is the same every time it is displayed in contrast  if it was generated on demand by a program or contains a program it is a dynamic page a dynamic page may present itself differently each time it is displayed for example  the front page for an electronic store may be different for each visitor if a bookstore customer has bought mystery novels in the past  upon visiting the store ? s main page  the customer is likely to see new thrillers prominently displayed  whereas a more culinary-minded customer might be greeted with new cookbooks how the web site keeps track of who likes what is a story to be told shortly but briefly  the answer involves cookies  even for culinarily challenged visitors   in the figure  the browser contacts three servers to fetch the two pages  cs.washington.edu  youtube.com  and google-analytics.com the content from these different servers is integrated for display by the browser display entails a range of processing that depends on the kind of content besides rendering text and graphics  it may involve playing a video or running a script that presents its own user interface as part of the page in this case  the cs.washington.edu server supplies the main page  the youtube.com server supplies an embedded video  and the google-analytics.com server supplies nothing that the user can see but tracks visitors to the site we will have more to say about trackers later the client side let us now examine the web browser side in fig 7-18 in more detail in essence  a browser is a program that can display a web page and catch mouse clicks to items on the displayed page when an item is selected  the browser follows the hyperlink and fetches the page selected 650 the application layer chap 7 when the web was first created  it was immediately apparent that having one page point to another web page required mechanisms for naming and locating pages in particular  three questions had to be answered before a selected page could be displayed  1 what is the page called ? 2 where is the page located ? 3 how can the page be accessed ? if every page were somehow assigned a unique name  there would not be any ambiguity in identifying pages nevertheless  the problem would not be solved consider a parallel between people and pages in the united states  almost everyone has a social security number  which is a unique identifier  as no two people are supposed to have the same one nevertheless  if you are armed only with a social security number  there is no way to find the owner ? s address  and certainly no way to tell whether you should write to the person in english  spanish  or chinese the web has basically the same problems the solution chosen identifies pages in a way that solves all three problems at once each page is assigned a url  uniform resource locator  that effectively serves as the page ? s worldwide name urls have three parts  the protocol  also known as the scheme   the dns name of the machine on which the page is located  and the path uniquely indicating the specific page  a file to read or program to run on the machine   in the general case  the path has a hierarchical name that models a file directory structure however  the interpretation of the path is up to the server ; it may or may not reflect the actual directory structure as an example  the url of the page shown in fig 7-18 is http  //www.cs.washington.edu/index.html this url consists of three parts  the protocol  http   the dns name of the host  www.cs.washington.edu   and the path name  index.html   when a user clicks on a hyperlink  the browser carries out a series of steps in order to fetch the page pointed to let us trace the steps that occur when our example link is selected  1 the browser determines the url  by seeing what was selected   2 the browser asks dns for the ip address of the server www.cs.washington.edu 3 dns replies with 128.208.3.88 4 the browser makes a tcp connection to 128.208.3.88 on port 80  the well-known port for the http protocol 5 it sends over an http request asking for the page /index.html sec 7.3 the world wide web 651 6 the www.cs.washington.edu server sends the page as an http response  for example  by sending the file /index.html 7 if the page includes urls that are needed for display  the browser fetches the other urls using the same process in this case  the urls include multiple embedded images also fetched from www.cs.washington.edu  an embedded video from youtube.com  and a script from google-analytics.com 8 the browser displays the page /index.html as it appears in fig 7-18 9 the tcp connections are released if there are no other requests to the same servers for a short period many browsers display which step they are currently executing in a status line at the bottom of the screen in this way  when the performance is poor  the user can see if it is due to dns not responding  a server not responding  or simply page transmission over a slow or congested network the url design is open-ended in the sense that it is straightforward to have browsers use multiple protocols to get at different kinds of resources in fact  urls for various other protocols have been defined slightly simplified forms of the common ones are listed in fig 7-19 name used for example http hypertext  html  http  //www.ee.uwa.edu/ ~ rob/ https hypertext with security https  //www.bank.com/accounts/ ftp ftp ftp  //ftp.cs.vu.nl/pub/minix/readme file local file file  ///usr/suzanne/prog.c mailto sending email mailto  johnuser @ acm.org rtsp streaming media rtsp  //youtube.com/montypython.mpg sip multimedia calls sip  eve @ adversary.com about browser information about  plugins figure 7-19 some common url schemes let us briefly go over the list the http protocol is the web ? s native language  the one spoken by web servers http stands for hypertext transfer protocol we will examine it in more detail later in this section the ftp protocol is used to access files by ftp  the internet ? s file transfer protocol ftp predates the web and has been in use for more than three decades the web makes it easy to obtain files placed on numerous ftp servers throughout the world by providing a simple  clickable interface instead of a command line interface this improved access to information is one reason for the spectacular growth of the web 652 the application layer chap 7 it is possible to access a local file as a web page by using the file protocol  or more simply  by just naming it this approach does not require having a server of course  it works only for local files  not remote ones the mailto protocol does not really have the flavor of fetching web pages  but is useful anyway it allows users to send email from a web browser most browsers will respond when a mailto link is followed by starting the user ? s mail agent to compose a message with the address field already filled in the rtsp and sip protocols are for establishing streaming media sessions and audio and video calls finally  the about protocol is a convention that provides information about the browser for example  following the about  plugins link will cause most browsers to show a page that lists the mime types that they handle with browser extensions called plug-ins in short  the urls have been designed not only to allow users to navigate the web  but to run older protocols such as ftp and email as well as newer protocols for audio and video  and to provide convenient access to local files and browser information this approach makes all the specialized user interface programs for those other services unnecessary and integrates nearly all internet access into a single program  the web browser if it were not for the fact that this idea was thought of by a british physicist working a research lab in switzerland  it could easily pass for a plan dreamed up by some software company ? s advertising department despite all these nice properties  the growing use of the web has turned up an inherent weakness in the url scheme a url points to one specific host  but sometimes it is useful to reference a page without simultaneously telling where it is for example  for pages that are heavily referenced  it is desirable to have multiple copies far apart  to reduce the network traffic there is no way to say  ? ? i want page xyz  but i do not care where you get it ? ? to solve this kind of problem  urls have been generalized into uris  uniform resource identifiers   some uris tell how to locate a resource these are the urls other uris tell the name of a resource but not where to find it these uris are called urns  uniform resource names   the rules for writing uris are given in rfc 3986  while the different uri schemes in use are tracked by iana there are many different kinds of uris besides the schemes listed in fig 7-19  but those schemes dominate the web as it is used today mime types to be able to display the new page  or any page   the browser has to understand its format to allow all browsers to understand all web pages  web pages are written in a standardized language called html it is the lingua franca of the web  for now   we will discuss it in detail later in this chapter sec 7.3 the world wide web 653 although a browser is basically an html interpreter  most browsers have numerous buttons and features to make it easier to navigate the web most have a button for going back to the previous page  a button for going forward to the next page  only operative after the user has gone back from it   and a button for going straight to the user ? s preferred start page most browsers have a button or menu item to set a bookmark on a given page and another one to display the list of bookmarks  making it possible to revisit any of them with only a few mouse clicks as our example shows  html pages can contain rich content elements and not simply text and hypertext for added generality  not all pages need contain html a page may consist of a video in mpeg format  a document in pdf format  a photograph in jpeg format  a song in mp3 format  or any one of hundreds of other file types since standard html pages may link to any of these  the browser has a problem when it hits a page it does not know how to interpret rather than making the browsers larger and larger by building in interpreters for a rapidly growing collection of file types  most browsers have chosen a more general solution when a server returns a page  it also returns some additional information about the page this information includes the mime type of the page  see fig 7-13   pages of type text/html are just displayed directly  as are pages in a few other built-in types if the mime type is not one of the built-in ones  the browser consults its table of mime types to determine how to display the page this table associates mime types with viewers there are two possibilities  plug-ins and helper applications a plug-in is a third-party code module that is installed as an extension to the browser  as illustrated in fig 7-20  a   common examples are plug-ins for pdf  flash  and quicktime to render documents and play audio and video because plug-ins run inside the browser  they have access to the current page and can modify its appearance process helper browser plug-in browser application process process  a   b  figure 7-20  a  a browser plug-in  b  a helper application each browser has a set of procedures that all plug-ins must implement so the browser can call the plug-ins for example  there is typically a procedure the 654 the application layer chap 7 browser ? s base code calls to supply the plug-in with data to display this set of procedures is the plug-in ? s interface and is browser specific in addition  the browser makes a set of its own procedures available to the plug-in  to provide services to plug-ins typical procedures in the browser interface are for allocating and freeing memory  displaying a message on the browser ? s status line  and querying the browser about parameters before a plug-in can be used  it must be installed the usual installation procedure is for the user to go to the plug-in ? s web site and download an installation file executing the installation file unpacks the plug-in and makes the appropriate calls to register the plug-in ? s mime type with the browser and associate the plug-in with it browsers usually come preloaded with popular plug-ins the other way to extend a browser is make use of a helper application this is a complete program  running as a separate process it is illustrated in fig 7 20  b   since the helper is a separate program  the interface is at arm ? s length from the browser it usually just accepts the name of a scratch file where the content file has been stored  opens the file  and displays the contents typically  helpers are large programs that exist independently of the browser  for example  microsoft word or powerpoint many helper applications use the mime type application as a consequence  a considerable number of subtypes have been defined for them to use  for example  application/vnd.ms-powerpoint for powerpoint files vnd denotes vendor-specific formats in this way  a url can point directly to a powerpoint file  and when the user clicks on it  powerpoint is automatically started and handed the content to be displayed helper applications are not restricted to using the application mime type adobe photoshop uses image/x-photoshop  for example consequently  browsers can be configured to handle a virtually unlimited number of document types with no changes to themselves modern web servers are often configured with hundreds of type/subtype combinations and new ones are often added every time a new program is installed a source of conflicts is that multiple plug-ins and helper applications are available for some subtypes  such as video/mpeg what happens is that the last one to register overwrites the existing association with the mime type  capturing the type for itself as a consequence  installing a new program may change the way a browser handles existing types browsers can also open local files  with no network in sight  rather than fetching them from remote web servers however  the browser needs some way to determine the mime type of the file the standard method is for the operating system to associate a file extension with a mime type in a typical configuration  opening foo.pdf will open it in the browser using an application/pdf plug-in and opening bar.doc will open it in word as the application/msword helper here  too  conflicts can arise  since many programs are willing ? no  make that eager ? to handle  say  mpg during installation  programs intended for sophisticated users often display checkboxes for the mime types and extensions sec 7.3 the world wide web 655 they are prepared to handle to allow the user to select the appropriate ones and thus not overwrite existing associations by accident programs aimed at the consumer market assume that the user does not have a clue what a mime type is and simply grab everything they can without regard to what previously installed programs have done the ability to extend the browser with a large number of new types is convenient but can also lead to trouble when a browser on a windows pc fetches a file with the extension exe  it realizes that this file is an executable program and therefore has no helper the obvious action is to run the program however  this could be an enormous security hole all a malicious web site has to do is produce a web page with pictures of  say  movie stars or sports heroes  all of which are linked to a virus a single click on a picture then causes an unknown and potentially hostile executable program to be fetched and run on the user ? s machine to prevent unwanted guests like this  firefox and other browsers come configured to be cautious about running unknown programs automatically  but not all users understand what choices are safe rather than convenient the server side so much for the client side now let us take a look at the server side as we saw above  when the user types in a url or clicks on a line of hypertext  the browser parses the url and interprets the part between http  // and the next slash as a dns name to look up armed with the ip address of the server  the browser establishes a tcp connection to port 80 on that server then it sends over a command containing the rest of the url  which is the path to the page on that server the server then returns the page for the browser to display to a first approximation  a simple web server is similar to the server of fig 6-6 that server is given the name of a file to look up and return via the network in both cases  the steps that the server performs in its main loop are  1 accept a tcp connection from a client  a browser   2 get the path to the page  which is the name of the file requested 3 get the file  from disk   4 send the contents of the file to the client 5 release the tcp connection modern web servers have more features  but in essence  this is what a web server does for the simple case of content that is contained in a file for dynamic content  the third step may be replaced by the execution of a program  determined from the path  that returns the contents however  web servers are implemented with a different design to serve many requests per second one problem with the simple design is that accessing files is 656 the application layer chap 7 often the bottleneck disk reads are very slow compared to program execution  and the same files may be read repeatedly from disk using operating system calls another problem is that only one request is processed at a time the file may be large  and other requests will be blocked while it is transferred one obvious improvement  used by all web servers  is to maintain a cache in memory of the n most recently read files or a certain number of gigabytes of content before going to disk to get a file  the server checks the cache if the file is there  it can be served directly from memory  thus eliminating the disk access although effective caching requires a large amount of main memory and some extra processing time to check the cache and manage its contents  the savings in time are nearly always worth the overhead and expense to tackle the problem of serving a single request at a time  one strategy is to make the server multithreaded in one design  the server consists of a front-end module that accepts all incoming requests and k processing modules  as shown in fig 7-21 the k ? ? 1 threads all belong to the same process  so the processing modules all have access to the cache within the process ? address space when a request comes in  the front end accepts it and builds a short record describing it it then hands the record to one of the processing modules processing module  thread  front end cache disk request client response server figure 7-21 a multithreaded web server with a front end and processing modules the processing module first checks the cache to see if the file needed is there if so  it updates the record to include a pointer to the file in the record if it is not there  the processing module starts a disk operation to read it into the cache  possibly discarding some other cached file  s  to make room for it   when the file comes in from the disk  it is put in the cache and also sent back to the client the advantage of this scheme is that while one or more processing modules are blocked waiting for a disk or network operation to complete  and thus consuming no cpu time   other modules can be actively working on other requests with k processing modules  the throughput can be as much as k times higher than with a single-threaded server of course  when the disk or network is the limiting sec 7.3 the world wide web 657 factor  it is necessary to have multiple disks or a faster network to get any real improvement over the single-threaded model modern web servers do more than just accept path names and return files in fact  the actual processing of each request can get quite complicated for this reason  in many servers each processing module performs a series of steps the front end passes each incoming request to the first available module  which then carries it out using some subset of the following steps  depending on which ones are needed for that particular request these steps occur after the tcp connection and any secure transport mechanism  such as ssl/tls  which will be described in chap 8  have been established 1 resolve the name of the web page requested 2 perform access control on the web page 3 check the cache 4 fetch the requested page from disk or run a program to build it 5 determine the rest of the response  e.g  the mime type to send   6 return the response to the client 7 make an entry in the server log step 1 is needed because the incoming request may not contain the actual name of a file or program as a literal string it may contain built-in shortcuts that need to be translated as a simple example  the url http  //www.cs.vu.nl/ has an empty file name it has to be expanded to some default file name that is usually index.html another common rule is to map ~ user/ onto user ? s web directory these rules can be used together thus  the home page of one of the authors  ast  can be reached at http  //www.cs.vu.nl/ ~ ast/ even though the actual file name is index.html in a certain default directory also  modern browsers can specify configuration information such as the browser software and the user ? s default language  e.g  italian or english   this makes it possible for the server to select a web page with small pictures for a mobile device and in the preferred language  if available in general  name expansion is not quite so trivial as it might at first appear  due to a variety of conventions about how to map paths to the file directory and programs step 2 checks to see if any access restrictions associated with the page are met not all pages are available to the general public determining whether a client can fetch a page may depend on the identity of the client  e.g  as given by usernames and passwords  or the location of the client in the dns or ip space for example  a page may be restricted to users inside a company how this is 658 the application layer chap 7 accomplished depends on the design of the server for the popular apache server  for instance  the convention is to place a file called .htaccess that lists the access restrictions in the directory where the restricted page is located steps 3 and 4 involve getting the page whether it can be taken from the cache depends on processing rules for example  pages that are created by running programs can not always be cached because they might produce a different result each time they are run even files should occasionally be checked to see if their contents have changed so that the old contents can be removed from the cache if the page requires a program to be run  there is also the issue of setting the program parameters or input these data come from the path or other parts of the request step 5 is about determining other parts of the response that accompany the contents of the page the mime type is one example it may come from the file extension  the first few words of the file or program output  a configuration file  and possibly other sources step 6 is returning the page across the network to increase performance  a single tcp connection may be used by a client and server for multiple page fetches this reuse means that some logic is needed to map a request to a shared connection and to return each response so that it is associated with the correct request step 7 makes an entry in the system log for administrative purposes  along with keeping any other important statistics such logs can later be mined for valuable information about user behavior  for example  the order in which people access the pages cookies navigating the web as we have described it so far involves a series of independent page fetches there is no concept of a login session the browser sends a request to a server and gets back a file then the server forgets that it has ever seen that particular client this model is perfectly adequate for retrieving publicly available documents  and it worked well when the web was first created however  it is not suited for returning different pages to different users depending on what they have already done with the server this behavior is needed for many ongoing interactions with web sites for example  some web sites  e.g  newspapers  require clients to register  and possibly pay money  to use them this raises the question of how servers can distinguish between requests from users who have previously registered and everyone else a second example is from e-commerce if a user wanders around an electronic store  tossing items into her virtual shopping cart from time to time  how does the server keep track of the contents of the cart ? a third example is customized web portals such as yahoo !  users can set up a personalized sec 7.3 the world wide web 659 detailed initial page with only the information they want  e.g  their stocks and their favorite sports teams   but how can the server display the correct page if it does not know who the user is ? at first glance  one might think that servers could track users by observing their ip addresses however  this idea does not work many users share computers  especially at home  and the ip address merely identifies the computer  not the user even worse  many companies use nat  so that outgoing packets bear the same ip address for all users that is  all of the computers behind the nat box look the same to the server and many isps assign ip addresses to customers with dhcp the ip addresses change over time  so to a server you might suddenly look like your neighbor for all of these reasons  the server can not use ip addresses to track users this problem is solved with an oft-critized mechanism called cookies the name derives from ancient programmer slang in which a program calls a procedure and gets something back that it may need to present later to get some work done in this sense  a unix file descriptor or a windows object handle can be considered to be a cookie cookies were first implemented in the netscape browser in 1994 and are now specified in rfc 2109 when a client requests a web page  the server can supply additional information in the form of a cookie along with the requested page the cookie is a rather small  named string  of at most 4 kb  that the server can associate with a browser this association is not the same thing as a user  but it is much closer and more useful than an ip address browsers store the offered cookies for an interval  usually in a cookie directory on the client ? s disk so that the cookies persist across browser invocations  unless the user has disabled cookies cookies are just strings  not executable programs in principle  a cookie could contain a virus  but since cookies are treated as data  there is no official way for the virus to actually run and do damage however  it is always possible for some hacker to exploit a browser bug to cause activation a cookie may contain up to five fields  as shown in fig 7-22 the domain tells where the cookie came from browsers are supposed to check that servers are not lying about their domain each domain should store no more than 20 cookies per client the path is a path in the server ? s directory structure that identifies which parts of the server ? s file tree may use the cookie it is often /  which means the whole tree the content field takes the form name = value both name and value can be anything the server wants this field is where the cookie ? s content is stored the expires field specifies when the cookie expires if this field is absent  the browser discards the cookie when it exits such a cookie is called a nonpersistent cookie if a time and date are supplied  the cookie is said to be a persistent cookie and is kept until it expires expiration times are given in greenwich mean time to remove a cookie from a client ? s hard disk  a server just sends it again  but with an expiration time in the past 660 the application layer chap 7 domain path content expires secure toms-casino.com / customerid = 297793521 15-10-10 17  00 yes jills-store.com / cart = 1-00501 ; 1-07031 ; 2-13721 11-1-11 14  22 no aportal.com / prefs = stk  csco + orcl ; spt  jets 31-12-20 23  59 no sneaky.com / userid = 4627239101 31-12-19 23  59 no figure 7-22 some examples of cookies finally  the secure field can be set to indicate that the browser may only return the cookie to a server using a secure transport  namely ssl/tls  which we will describe in chap 8   this feature is used for e-commerce  banking  and other secure applications we have now seen how cookies are acquired  but how are they used ? just before a browser sends a request for a page to some web site  it checks its cookie directory to see if any cookies there were placed by the domain the request is going to if so  all the cookies placed by that domain  and only that domain  are included in the request message when the server gets them  it can interpret them any way it wants to let us examine some possible uses for cookies in fig 7-22  the first cookie was set by toms-casino.com and is used to identify the customer when the client returns next week to throw away some more money  the browser sends over the cookie so the server knows who it is armed with the customer id  the server can look up the customer ? s record in a database and use this information to build an appropriate web page to display depending on the customer ? s known gambling habits  this page might consist of a poker hand  a listing of today ? s horse races  or a slot machine the second cookie came from jills-store.com the scenario here is that the client is wandering around the store  looking for good things to buy when she finds a bargain and clicks on it  the server adds it to her shopping cart  maintained on the server  and also builds a cookie containing the product code of the item and sends the cookie back to the client as the client continues to wander around the store by clicking on new pages  the cookie is returned to the server on every new page request as more purchases accumulate  the server adds them to the cookie finally  when the client clicks on proceed to checkout  the cookie  now containing the full list of purchases  is sent along with the request in this way  the server knows exactly what the customer wants to buy the third cookie is for a web portal when the customer clicks on a link to the portal  the browser sends over the cookie this tells the portal to build a page containing the stock prices for cisco and oracle  and the new york jets ? football results since a cookie can be up to 4 kb  there is plenty of room for more detailed preferences concerning newspaper headlines  local weather  special offers  etc sec 7.3 the world wide web 661 a more controversial use of cookies is to track the online behavior of users this lets web site operators understand how users navigate their sites  and advertisers build up profiles of the ads or sites a particular user has viewed the controversy is that users are typically unaware that their activity is being tracked  even with detailed profiles and across seemingly unrelated web sites nonetheless  web tracking is big business doubleclick  which provides and tracks ads  is ranked among the 100 busiest web sites in the world by the web monitoring company alexa google analytics  which tracks site usage for operators  is used by more than half of the busiest 100,000 sites on the web it is easy for a server to track user activity with cookies suppose a server wants to keep track of how many unique visitors it has had and how many pages each visitor looked at before leaving the site when the first request comes in  there will be no accompanying cookie  so the server sends back a cookie containing counter = 1 subsequent page views on that site will send the cookie back to the server each time the counter is incremented and sent back to the client by keeping track of the counters  the server can see how many people give up after seeing the first page  how many look at two pages  and so on tracking the browsing behavior of users across sites is only slightly more complicated it works like this an advertising agency  say  sneaky ads  contacts major web sites and places ads for its clients ? products on their pages  for which it pays the site owners a fee instead  of giving the sites the ad as a gif file to place on each page  it gives them a url to add to each page each url it hands out contains a unique number in the path  such as http  //www.sneaky.com/382674902342.gif when a user first visits a page  p  containing such an ad  the browser fetches the html file then the browser inspects the html file and sees the link to the image file at www.sneaky.com  so it sends a request there for the image a gif file containing an ad is returned  along with a cookie containing a unique user id  4627239101 in fig 7-22 sneaky records the fact that the user with this id visited page p this is easy to do since the path requested  382674902342.gif  is referenced only on page p of course  the actual ad may appear on thousands of pages  but each time with a different name sneaky probably collects a fraction of a penny from the product manufacturer each time it ships out the ad later  when the user visits another web page containing any of sneaky ? s ads  the browser first fetches the html file from the server then it sees the link to  say  http  //www.sneaky.com/193654919923.gif on the page and requests that file since it already has a cookie from the domain sneaky.com  the browser includes sneaky ? s cookie containing the user ? s id sneaky now knows a second page the user has visited in due course  sneaky can build up a detailed profile of the user ? s browsing habits  even though the user has never clicked on any of the ads of course  it does not yet have the user ? s name  although it does have his ip address  which 662 the application layer chap 7 may be enough to deduce the name from other databases   however  if the user ever supplies his name to any site cooperating with sneaky  a complete profile along with a name will be available for sale to anyone who wants to buy it the sale of this information may be profitable enough for sneaky to place more ads on more web sites and thus collect more information and if sneaky wants to be supersneaky  the ad need not be a classical banner ad an ? ? ad ? ? consisting of a single pixel in the background color  and thus invisible  has exactly the same effect as a banner ad  it requires the browser to go fetch the 1 ? ? 1-pixel gif image and send it all cookies originating at the pixel ? s domain cookies have become a focal point for the debate over online privacy because of tracking behavior like the above the most insidious part of the whole business is that many users are completely unaware of this information collection and may even think they are safe because they do not click on any of the ads for this reason  cookies that track users across sites are considered by many to be spyware have a look at the cookies that are already stored by your browser most browsers will display this information along with the current privacy preferences you might be surprised to find names  email addresses  or passwords as well as opaque identifiers hopefully  you will not find credit card numbers  but the potential for abuse is clear to maintain a semblance of privacy  some users configure their browsers to reject all cookies however  this can cause problems because many web sites will not work properly without cookies alternatively  most browsers let users block third-party cookies a third-party cookie is one from a different site than the main page that is being fetched  for example  the sneaky.com cookie that is used when interacting with page p on a completely different web site blocking these cookies helps to prevent tracking across web sites browser extensions can also be installed to provide fine-grained control over how cookies are used  or  rather  not used   as the debate continues  many companies are developing privacy policies that limit how they will share information to prevent abuse of course  the policies are simply how the companies say they will handle information for example  ? ? we may use the information collected from you in the conduct of our business ? ? ? which might be selling the information 7.3.2 static web pages the basis of the web is transferring web pages from server to client in the simplest form  web pages are static that is  they are just files sitting on some server that present themselves in the same way each time they are fetched and viewed just because they are static does not mean that the pages are inert at the browser  however a page containing a video can be a static web page as mentioned earlier  the lingua franca of the web  in which most pages are written  is html the home pages of teachers are usually static html pages sec 7.3 the world wide web 663 the home pages of companies are usually dynamic pages put together by a web design company in this section  we will take a brief look at static html pages as a foundation for later material readers already familiar with html can skip ahead to the next section  where we describe dynamic content and web services html ? the hypertext markup language html  hypertext markup language  was introduced with the web it allows users to produce web pages that include text  graphics  video  pointers to other web pages  and more html is a markup language  or language for describing how documents are to be formatted the term ? ? markup ? ? comes from the old days when copyeditors actually marked up documents to tell the printer ? in those days  a human being ? which fonts to use  and so on markup languages thus contain explicit commands for formatting for example  in html  < b > means start boldface mode  and < /b > means leave boldface mode latex and tex are other examples of markup languages that are well known to most academic authors the key advantage of a markup language over one with no explicit markup is that it separates content from how it should be presented writing a browser is then straightforward  the browser simply has to understand the markup commands and apply them to the content embedding all the markup commands within each html file and standardizing them makes it possible for any web browser to read and reformat any web page that is crucial because a page may have been produced in a 1600 ? ? 1200 window with 24-bit color on a high-end computer but may have to be displayed in a 640 ? ? 320 window on a mobile phone while it is certainly possible to write documents like this with any plain text editor  and many people do  it is also possible to use word processors or special html editors that do most of the work  but correspondingly give the user less direct control over the details of the final result   a simple web page written in html and its presentation in a browser are given in fig 7-23 a web page consists of a head and a body  each enclosed by < html > and < /html > tags  formatting commands   although most browsers do not complain if these tags are missing as can be seen in fig 7-23  a   the head is bracketed by the < head > and < /head > tags and the body is bracketed by the < body > and < /body > tags the strings inside the tags are called directives most  but not all  html tags have this format that is  they use < something > to mark the beginning of something and < /something > to mark its end tags can be in either lowercase or uppercase thus  < head > and < head > mean the same thing  but lower case is best for compatibility actual layout of the html document is irrelevant html parsers ignore extra spaces and carriage returns since they have to reformat the text to make it fit the current display area consequently  white space can be added at will to make html documents more 664 the application layer chap 7 readable  something most of them are badly in need of as another consequence  blank lines can not be used to separate paragraphs  as they are simply ignored an explicit tag is required some tags have  named  parameters  called attributes for example  the < img > tag in fig 7-23 is used for including an image inline with the text it has two attributes  src and alt the first attribute gives the url for the image the html standard does not specify which image formats are permitted in practice  all browsers support gif and jpeg files browsers are free to support other formats  but this extension is a two-edged sword if a user is accustomed to a browser that supports  say  tiff files  he may include these in his web pages and later be surprised when other browsers just ignore all of his wonderful art the second attribute gives alternate text to use if the image can not be displayed for each tag  the html standard gives a list of what the permitted parameters  if any  are  and what they mean because each parameter is named  the order in which the parameters are given is not significant technically  html documents are written in the iso 8859-1 latin-1 character set  but for users whose keyboards support only ascii  escape sequences are present for the special characters  such as e `  the list of special characters is given in the standard all of them begin with an ampersand and end with a semicolon for example  &nbsp ; produces a space  &egrave ; produces e ` and &eacute ; produces e ?  since <  >  and & have special meanings  they can be expressed only with their escape sequences  &lt ;  &gt ;  and &amp ;  respectively the main item in the head is the title  delimited by < title > and < /title >  certain kinds of metainformation may also be present  though none are present in our example the title itself is not displayed on the page some browsers use it to label the page ? s window several headings are used in fig 7-23 each heading is generated by an < hn > tag  where n is a digit in the range 1 to 6 thus  < h1 > is the most important heading ; < h6 > is the least important one it is up to the browser to render these appropriately on the screen typically  the lower-numbered headings will be displayed in a larger and heavier font the browser may also choose to use different colors for each level of heading usually  < h1 > headings are large and boldface with at least one blank line above and below in contrast  < h2 > headings are in a smaller font with less space above and below the tags < b > and < i > are used to enter boldface and italics mode  respectively the < hr > tag forces a break and draws a horizontal line across the display the < p > tag starts a paragraph the browser might display this by inserting a blank line and some indentation  for example interestingly  the < /p > tag that exists to mark the end of a paragraph is often omitted by lazy html programmers html provides various mechanisms for making lists  including nested lists unordered lists  like the ones in fig 7-23 are started with < ul >  with < li > used to mark the start of items there is also an < ol > tag to starts an ordered list the sec 7.3 the world wide web 665 < html > < head > < title > amalgamated widget  inc < /title > < /head > < body > < h1 > welcome to awi ? s home page < /h1 > < img src = " http  //www.widget.com/images/logo.gif " alt = " awi logo " > < br > we are so happy that you have chosen to visit < b > amalgamated widget ? s < /b > home page we hope < i > you < /i > will find all the information you need here < p > below we have links to information about our many fine products you can order electronically  by www   by telephone  or by email < /p > < hr > < h2 > product information < /h2 > < ul > < li > < a href = " http  //widget.com/products/big " > big widgets < /a > < /li > < li > < a href = " http  //widget.com/products/little " > little widgets < /a > < /li > < /ul > < h2 > contact information < /h2 > < ul > < li > by telephone  1-800-widgets < /li > < li > by email  info @ amalgamated-widget.com < /li > < /ul > < /body > < /html >  a  welcome to awi 's home page we are so happy that you have chosen to visit amalgamated widget 's home page we hope you will find all the information you need here below we have links to information about our many fine products you can order electronically  by www   by telephone  or by email product information  big widgets  little widgets contact information  by telephone  1-800-widgets  by email  info @ amalgamated-widget.com  b  figure 7-23  a  the html for a sample web page  b  the formatted page 666 the application layer chap 7 individual items in unordered lists often appear with bullets   in front of them items in ordered lists are numbered by the browser finally  we come to hyperlinks examples of these are seen in fig 7-23 using the < a >  anchor  and < /a > tags the < a > tag has various parameters  the most important of which is href the linked url the text between the < a > and < /a > is displayed if it is selected  the hyperlink is followed to a new page it is also permitted to link other elements for example  an image can be given between the < a > and < /a > tags using < img >  in this case  the image is displayed and clicking on it activates the hyperlink there are many other html tags and attributes that we have not seen in this simple example for instance  the < a > tag can take a parameter name to plant a hyperlink  allowing a hyperlink to point to the middle of a page this is useful  for example  for web pages that start out with a clickable table of contents by clicking on an item in the table of contents  the user jumps to the corresponding section of the same page an example of a different tag is < br >  it forces the browser to break and start a new line probably the best way to understand tags is to look at them in action to do this  you can pick a web page and look at the html in your browser to see how the page was put together most browsers have a view source menu item  or something similar   selecting this item displays the current page ? s html source  instead of its formatted output we have sketched the tags that have existed from the early web html keeps evolving fig 7-24 shows some of the features that have been added with successive versions of html html 1.0 refers to the version of html used with the introduction of the web html versions 2.0  3.0  and 4.0 appeared in rapid succession in the space of only a few years as the web exploded after html 4.0  a period of almost ten years passed before the path to standarization of the next major version  html 5.0  became clear because it is a major upgrade that consolidates the ways that browsers handle rich content  the html 5.0 effort is ongoing and not expected to produce a standard before 2012 at the earliest standards notwithstanding  the major browsers already support html 5.0 functionality the progression through html versions is all about adding new features that people wanted but had to handle in nonstandard ways  e.g  plug-ins  until they became standard for example  html 1.0 and html 2.0 did not have tables they were added in html 3.0 an html table consists of one or more rows  each consisting of one or more table cells that can contain a wide range of material  e.g  text  images  other tables   before html 3.0  authors needing a table had to resort to ad hoc methods  such as including an image showing the table in html 4.0  more new features were added these included accessibility features for handicapped users  object embedding  a generalization of the < img > tag so other objects can also be embedded in pages   support for scripting languages  to allow dynamic content   and more sec 7.3 the world wide web 667 item html 1.0 html 2.0 html 3.0 html 4.0 html 5.0 hyperlinks x x x x x images x x x x x lists x x x x x active maps & images x x x x forms x x x x equations x x x toolbars x x x tables x x x accessibility features x x object embedding x x style sheets x x scripting x x video and audio x inline vector graphics x xml representation x background threads x browser storage x drawing canvas x figure 7-24 some differences between html versions html 5.0 includes many features to handle the rich media that are now routinely used on the web video and audio can be included in pages and played by the browser without requiring the user to install plug-ins drawings can be built up in the browser as vector graphics  rather than using bitmap image formats  like jpeg and gif  there is also more support for running scripts in browsers  such as background threads of computation and access to storage all of these features help to support web pages that are more like traditional applications with a user interface than documents this is the direction the web is heading input and forms there is one important capability that we have not discussed yet  input html 1.0 was basically one-way users could fetch pages from information providers  but it was difficult to send information back the other way it quickly became apparent that there was a need for two-way traffic to allow orders for products to be placed via web pages  registration cards to be filled out online  search terms to be entered  and much  much more 668 the application layer chap 7 sending input from the user to the server  via the browser  requires two kinds of support first  it requires that http be able to carry data in that direction we describe how this is done in a later section ; it uses the post method the second requirement is to be able to present user interface elements that gather and package up the input forms were included with this functionality in html 2.0 forms contain boxes or buttons that allow users to fill in information or make choices and then send the information back to the page ? s owner forms are written just like other parts of html  as seen in the example of fig 7-25 note that forms are still static content they exhibit the same behavior regardless of who is using them dynamic content  which we will cover later  provides more sophisticated ways to gather input by sending a program whose behavior may depend on the browser environment like all forms  this one is enclosed between the < form > and < /form > tags the attributes of this tag tell what to do with the data that are input  in this case using the post method to send the data to the specified url text not enclosed in a tag is just displayed all the usual tags  e.g  < b >  are allowed in a form to let the author of the page control the look of the form on the screen three kinds of input boxes are used in this form  each of which uses the < input > tag it has a variety of parameters for determining the size  nature  and usage of the box displayed the most common forms are blank fields for accepting user text  boxes that can be checked  and submit buttons that cause the data to be returned to the server the first kind of input box is a text box that follows the text ? ? name ? ?  the box is 46 characters wide and expects the user to type in a string  which is then stored in the variable customer the next line of the form asks for the user ? s street address  40 characters wide then comes a line asking for the city  state  and country since no < p > tags are used between these fields  the browser displays them all on one line  instead of as separate paragraphs  if they will fit as far as the browser is concerned  the one paragraph contains just six items  three strings alternating with three boxes the next line asks for the credit card number and expiration date transmitting credit card numbers over the internet should only be done when adequate security measures have been taken we will discuss some of these in chap 8 following the expiration date  we encounter a new feature  radio buttons these are used when a choice must be made among two or more alternatives the intellectual model here is a car radio with half a dozen buttons for choosing stations clicking on one button turns off all the other ones in the same group the visual presentation is up to the browser widget size also uses two radio buttons the two groups are distinguished by their name parameter  not by static scoping using something like < radiobutton >  < /radiobutton >  the value parameters are used to indicate which radio button was pushed for example  depending on which credit card options the user has chosen  the variable cc will be set to either the string ? ? mastercard ? ? or the string ? ? visacard ? ?  sec 7.3 the world wide web 669 < html > < head > < title > awi customer ordering form < /title > < /head > < body > < h1 > widget order form < /h1 > < form action = " http  //widget.com/cgi-bin/order.cgi " method = post > < p > name < input name = " customer " size = 46 > < /p > < p > street address < input name = " address " size = 40 > < /p > < p > city < input name = " city " size = 20 > state < input name = " state " size = 4 > country < input name = " country " size = 10 > < /p > < p > credit card # < input name = " cardno " size = 10 > expires < input name = " expires " size = 4 > m/c < input name = " cc " type = radio value = " mastercard " > visa < input name = " cc " type = radio value = " visacard " > < /p > < p > widget size big < input name = " product " type = radio value = " expensive " > little < input name = " product " type = radio value = " cheap " > ship by express courier < input name = " express " type = checkbox > < /p > < p > < input type = submit value = " submit order " > < /p > thank you for ordering an awi widget  the best widget money can buy ! < /form > < /body > < /html >  a  widget order form name street address city credit card # widget size big thank you for ordering an awi widget  the best widget money can buy ! little ship by express courier expires m/c visa state country submit order  b  figure 7-25  a  the html for an order form  b  the formatted page after the two sets of radio buttons  we come to the shipping option  represented by a box of type checkbox it can be either on or off unlike radio buttons  where exactly one out of the set must be chosen  each box of type checkbox can be on or off  independently of all the others 670 the application layer chap 7 finally  we come to the submit button the value string is the label on the button and is displayed when the user clicks the submit button  the browser packages the collected information into a single long line and sends it back to the server to the url provided as part of the < form > tag a simple encoding is used the & is used to separate fields and + is used to represent space for our example form  the line might look like the contents of fig 7-26 customer = john + doe&address = 100 + main + st.&city = white + plains& state = ny&country = usa&cardno = 1234567890&expires = 6/14&cc = mastercard& product = cheap&express = on figure 7-26 a possible response from the browser to the server with information filled in by the user the string is sent back to the server as one line  it is broken into three lines here because the page is not wide enough  it is up to the server to make sense of this string  most likely by passing the information to a program that will process it we will discuss how this can be done in the next section there are also other types of input that are not shown in this simple example two other types are password and textarea a password box is the same as a text box  the default type that need not be named   except that the characters are not displayed as they are typed a textarea box is also the same as a text box  except that it can contain multiple lines for long lists from which a choice must be made  the < select > and < /select > tags are provided to bracket a list of alternatives this list is often rendered as a drop-down menu the semantics are those of radio buttons unless the multiple parameter is given  in which case the semantics are those of checkboxes finally  there are ways to indicate default or initial values that the user can change for example  if a text box is given a value field  the contents are displayed in the form for the user to edit or erase css ? cascading style sheets the original goal of html was to specify the structure of the document  not its appearance for example  < h1 > deborah ? s photos < /h1 > instructs the browser to emphasize the heading  but does not say anything about the typeface  point size  or color that is left up to the browser  which knows the properties of the display  e.g  how many pixels it has   however  many web page designers wanted absolute control over how their pages appeared  so new tags were added to html to control appearance  such as < font face = " helvetica " size = " 24 " color = " red " > deborah ? s photos < /font > sec 7.3 the world wide web 671 also  ways were added to control positioning on the screen accurately the trouble with this approach is that it is tedious and produces bloated html that is not portable although a page may render perfectly in the browser it is developed on  it may be a complete mess in another browser or another release of the same browser or at a different screen resolution a better alternative is the use of style sheets style sheets in text editors allow authors to associate text with a logical style instead of a physical style  for example  ? ? initial paragraph ? ? instead of ? ? italic text ? ? the appearance of each style is defined separately in this way  if the author decides to change the initial paragraphs from 14-point italics in blue to 18-point boldface in shocking pink  all it requires is changing one definition to convert the entire document css  cascading style sheets  introduced style sheets to the web with html 4.0  though widespread use and browser support did not take off until 2000 css defines a simple language for describing rules that control the appearance of tagged content let us look at an example suppose that awi wants snazzy web pages with navy text in the arial font on an off-white background  and level headings that are an extra 100 % and 50 % larger than the text for each level  respectively the css definition in fig 7-27 gives these rules body  background-color  linen ; color  navy ; font-family  arial ;  h1  font-size  200 % ;  h2  font-size  150 % ;  figure 7-27 css example as can be seen  the style definitions can be compact each line selects an element to which it applies and gives the values of properties the properties of an element apply as defaults to all other html elements that it contains thus  the style for body sets the style for paragraphs of text in the body there are also convenient shorthands for color names  e.g  red   any style parameters that are not defined are filled with defaults by the browser this behavior makes style sheet definitions optional ; some reasonable presentation will occur without them style sheets can be placed in an html file  e.g  using the < style > tag   but it is more common to place them in a separate file and reference them for example  the < head > tag of the awi page can be modified to refer to a style sheet in the file awistyle.css as shown in fig 7-28 the example also shows the mime type of css files to be text/css < head > < title > amalgamated widget  inc < /title > < link rel = " stylesheet " type = " text/css " href = " awistyle.css " / > < /head > figure 7-28 including a css style sheet 672 the application layer chap 7 this strategy has two advantages first  it lets one set of styles be applied to many pages on a web site this organization lends a consistent appearance to pages even if they were developed by different authors at different times  and allows the look of the entire site to be changed by editing one css file and not the html this method can be compared to an # include file in a c program  changing one macro definition there changes it in all the program files that include the header the second advantage is that the html files that are downloaded are kept small this is because the browser can download one copy of the css file for all pages that reference it it does not need to download a new copy of the definitions along with each web page 7.3.3 dynamic web pages and web applications the static page model we have used so far treats pages as multimedia documents that are conveniently linked together it was a fitting model in the early days of the web  as vast amounts of information were put online nowadays  much of the excitement around the web is using it for applications and services examples include buying products on e-commerce sites  searching library catalogs  exploring maps  reading and sending email  and collaborating on documents these new uses are like traditional application software  e.g  mail readers and word processors   the twist is that these applications run inside the browser  with user data stored on servers in internet data centers they use web protocols to access information via the internet  and the browser to display a user interface the advantage of this approach is that users do not need to install separate application programs  and user data can be accessed from different computers and backed up by the service operator it is proving so successful that it is rivaling traditional application software of course  the fact that these applications are offered for free by large providers helps this model is the prevalent form of cloud computing  in which computing moves off individual desktop computers and into shared clusters of servers in the internet to act as applications  web pages can no longer be static dynamic content is needed for example  a page of the library catalog should reflect which books are currently available and which books are checked out and are thus not available similarly  a useful stock market page would allow the user to interact with the page to see stock prices over different periods of time and compute profits and losses as these examples suggest  dynamic content can be generated by programs running on the server or in the browser  or in both places   in this section  we will examine each of these two cases in turn the general situation is as shown in fig 7-29 for example  consider a map service that lets the user enter a street address and presents a corresponding map of the location given a request for a location  the web server must use a program to create a page that shows the map for the location from a database of streets and other geographic information this action is shown as steps 1 through 3 the request  step sec 7.3 the world wide web 673 1  causes a program to run on the server the program consults a database to generate the appropriate page  step 2  and returns it to the browser  step 3   1 program program web browser web server 3 5 7 2 6 web page 4 program db figure 7-29 dynamic pages there is more to dynamic content  however the page that is returned may itself contain programs that run in the browser in our map example  the program would let the user find routes and explore nearby areas at different levels of detail it would update the page  zooming in or out as directed by the user  step 4   to handle some interactions  the program may need more data from the server in this case  the program will send a request to the server  step 5  that will retrieve more information from the database  step 6  and return a response  step 7   the program will then continue updating the page  step 4   the requests and responses happen in the background ; the user may not even be aware of them because the page url and title typically do not change by including client-side programs  the page can present a more responsive interface than with server-side programs alone server-side dynamic web page generation let us look at the case of server-side content generation in more detail a simple situation in which server-side processing is necessary is the use of forms consider the user filling out the awi order form of fig 7-25  b  and clicking the submit order button when the user clicks  a request is sent to the server at the url specified with the form  a post to http  //widget.com/cgi-bin/order.cgi in this case  along with the contents of the form as filled in by the user these data must be given to a program or script to process thus  the url identifies the program to run ; the data are provided to the program as input in this case  processing would involve entering the order in awi ? s internal system  updating customer records  and charging the credit card the page returned by this request will depend on what happens during the processing it is not fixed like a static page if the order succeeds  the page returned might give the expected shipping date if it is unsuccessful  the returned page might say that widgets requested are out of stock or the credit card was not valid for some reason 674 the application layer chap 7 exactly how the server runs a program instead of retrieving a file depends on the design of the web server it is not specified by the web protocols themselves this is because the interface can be proprietary and the browser does not need to know the details as far as the browser is concerned  it is simply making a request and fetching a page nonetheless  standard apis have been developed for web servers to invoke programs the existence of these interfaces makes it easier for developers to extend different servers with web applications we will briefly look at two apis to give you a sense of what they entail the first api is a method for handling dynamic page requests that has been available since the beginning of the web it is called the cgi  common gateway interface  and is defined in rfc 3875 cgi provides an interface to allow web servers to talk to back-end programs and scripts that can accept input  e.g  from forms  and generate html pages in response these programs may be written in whatever language is convenient for the developer  usually a scripting language for ease of development pick python  ruby  perl or your favorite language by convention  programs invoked via cgi live in a directory called cgi-bin  which is visible in the url the server maps a request to this directory to a program name and executes that program as a separate process it provides any data sent with the request as input to the program the output of the program gives a web page that is returned to the browser in our example  the program order.cgi is invoked with input from the form encoded as shown in fig 7-26 it will parse the parameters and process the order a useful convention is that the program will return the html for the order form if no form input is provided in this way  the program will be sure to know the representation of the form the second api we will look at is quite different the approach here is to embed little scripts inside html pages and have them be executed by the server itself to generate the page a popular language for writing these scripts is php  php  hypertext preprocessor   to use it  the server has to understand php  just as a browser has to understand css to interpret web pages with style sheets usually  servers identify web pages containing php from the file extension php rather than html or htm php is simpler to use than cgi as an example of how it works with forms  see the example in fig 7-30  a   the top part of this figure contains a normal html page with a simple form in it this time  the < form > tag specifies that action php is to be invoked to handle the parameters when the user submits the form the page displays two text boxes  one with a request for a name and one with a request for an age after the two boxes have been filled in and the form submitted  the server parses the fig 7-26-type string sent back  putting the name in the name variable and the age in the age variable it then starts to process the action php file  shown in fig 7-30  b   as a reply during the processing of this file  sec 7.3 the world wide web 675 the php commands are executed if the user filled in ? ? barbara ? ? and ? ? 24 ? ? in the boxes  the html file sent back will be the one given in fig 7-30  c   thus  handling forms becomes extremely simple using php < html > < body > < form action = " action.php " method = " post " > < p > please enter your name  < input type = " text " name = " name " > < /p > < p > please enter your age  < input type = " text " name = " age " > < /p > < input type = " submit " > < /form > < /body > < /html >  a  < html > < body > < h1 > reply  < /h1 > hello < ? php echo $ name ; ? >  prediction  next year you will be < ? php echo $ age + 1 ; ? > < /body > < /html >  b  < html > < body > < h1 > reply  < /h1 > hello barbara prediction  next year you will be 33 < /body > < /html >  c  figure 7-30  a  a web page containing a form  b  a php script for handling the output of the form  c  output from the php script when the inputs are ? ? barbara ? ? and ? ? 32 ? ?  respectively although php is easy to use  it is actually a powerful programming language for interfacing the web and a server database it has variables  strings  arrays  and most of the control structures found in c  but much more powerful i/o than just printf php is open source code  freely available  and widely used it was designed specifically to work well with apache  which is also open source and is the world ? s most widely used web server for more information about php  see valade  2009   we have now seen two different ways to generate dynamic html pages  cgi scripts and embedded php there are several others to choose from jsp  javaserver pages  is similar to php  except that the dynamic part is written in 676 the application layer chap 7 the java programming language instead of in php pages using this technique have the file extension .jsp asp.net  active server pages .net  is microsoft ? s version of php and javaserver pages it uses programs written in microsoft ? s proprietary .net networked application framework for generating the dynamic content pages using this technique have the extension .aspx the choice among these three techniques usually has more to do with politics  open source vs microsoft  than with technology  since the three languages are roughly comparable client-side dynamic web page generation php and cgi scripts solve the problem of handling input and interactions with databases on the server they can all accept incoming information from forms  look up information in one or more databases  and generate html pages with the results what none of them can do is respond to mouse movements or interact with users directly for this purpose  it is necessary to have scripts embedded in html pages that are executed on the client machine rather than the server machine starting with html 4.0  such scripts are permitted using the tag < script >  the technologies used to produce these interactive web pages are broadly referred to as dynamic html the most popular scripting language for the client side is javascript  so we will now take a quick look at it despite the similarity in names  javascript has almost nothing to do with the java programming language like other scripting languages  it is a very high-level language for example  in a single line of javascript it is possible to pop up a dialog box  wait for text input  and store the resulting string in a variable high-level features like this make javascript ideal for designing interactive web pages on the other hand  the fact that it is mutating faster than a fruit fly trapped in an x-ray machine makes it extremely difficult to write javascript programs that work on all platforms  but maybe some day it will stabilize as an example of a program in javascript  consider that of fig 7-31 like that of fig 7-30  it displays a form asking for a name and age  and then predicts how old the person will be next year the body is almost the same as the php example  the main difference being the declaration of the submit button and the assignment statement in it this assignment statement tells the browser to invoke the response script on a button click and pass it the form as a parameter what is completely new here is the declaration of the javascript function response in the head of the html file  an area normally reserved for titles  background colors  and so on this function extracts the value of the name field from the form and stores it in the variable person as a string it also extracts the value of the age field  converts it to an integer by using the eval function  adds 1 to it  and stores the result in years then it opens a document for output  does four sec 7.3 the world wide web 677 < html > < head > < script language = " javascript " type = " text/javascript " > function response  test form   var person = test form.name.value ; var years = eval  test form.age.value  + 1 ; document.open   ; document.writeln  " < html > < body > "  ; document.writeln  " hello " + person + "  < br > "  ; document.writeln  " prediction  next year you will be " + years + "  "  ; document.writeln  " < /body > < /html > "  ; document.close   ;  < /script > < /head > < body > < form > please enter your name  < input type = " text " name = " name " > < p > please enter your age  < input type = " text " name = " age " > < p > < input type = " button " value = " submit " onclick = " response  this.form  " > < /form > < /body > < /html > figure 7-31 use of javascript for processing a form writes to it using the writeln method  and closes the document the document is an html file  as can be seen from the various html tags in it the browser then displays the document on the screen it is very important to understand that while php and javascript look similar in that they both embed code in html files  they are processed totally differently in the php example of fig 7-30  after the user has clicked on the submit button  the browser collects the information into a long string and sends it off to the server as a request for a php page the server loads the php file and executes the php script that is embedded in to produce a new html page that page is sent back to the browser for display the browser can not even be sure that it was produced by a program this processing is shown as steps 1 to 4 in fig 7 32  a   in the javascript example of fig 7-31  when the submit button is clicked the browser interprets a javascript function contained on the page all the work is done locally  inside the browser there is no contact with the server this processing is shown as steps 1 and 2 in fig 7-32  b   as a consequence  the result is displayed virtually instantaneously  whereas with php there can be a delay of several seconds before the resulting html arrives at the client 678 the application layer chap 7 server  a  php module browser user 1 4 2 3 server  b  browser user 1 2 javascript figure 7-32  a  server-side scripting with php  b  client-side scripting with javascript this difference does not mean that javascript is better than php their uses are completely different php  and  by implication  jsp and asp  is used when interaction with a database on the server is needed javascript  and other clientside languages we will mention  such as vbscript  is used when the interaction is with the user at the client computer it is certainly possible to combine them  as we will see shortly javascript is not the only way to make web pages highly interactive an alternative on windows platforms is vbscript  which is based on visual basic another popular method across platforms is the use of applets these are small java programs that have been compiled into machine instructions for a virtual computer called the jvm  java virtual machine   applets can be embedded in html pages  between < applet > and < /applet >  and interpreted by jvm-capable browsers because java applets are interpreted rather than directly executed  the java interpreter can prevent them from doing bad things at least in theory in practice  applet writers have found a nearly endless stream of bugs in the java i/o libraries to exploit microsoft ? s answer to sun ? s java applets was allowing web pages to hold activex controls  which are programs compiled to x86 machine language and executed on the bare hardware this feature makes them vastly faster and more flexible than interpreted java applets because they can do anything a program can do when internet explorer sees an activex control in a web page  it downloads it  verifies its identity  and executes it however  downloading and running foreign programs raises enormous security issues  which we will discuss in chap 8 since nearly all browsers can interpret both java programs and javascript  a designer who wants to make a highly interactive web page has a choice of at least two techniques  and if portability to multiple platforms is not an issue  activex in addition as a general rule  javascript programs are easier to write  java applets execute faster  and activex controls run fastest of all also  since all browsers implement exactly the same jvm but no two browsers implement the same version of javascript  java applets are more portable than javascript programs for more information about javascript  there are many books  each with many  often with more than 1000  pages see  for example  flanagan  2010   sec 7.3 the world wide web 679 ajax ? asynchronous javascript and xml compelling web applications need responsive user interfaces and seamless access to data stored on remote web servers scripting on the client  e.g  with javascript  and the server  e.g  with php  are basic technologies that provide pieces of the solution these technologies are commonly used with several other key technologies in a combination called ajax  asynchronous javascript and xml   many full-featured web applications  such as google ? s gmail  maps  and docs  are written with ajax ajax is somewhat confusing because it is not a language it is a set of technologies that work together to enable web applications that are every bit as responsive and powerful as traditional desktop applications the technologies are  1 html and css to present information as pages 2 dom  document object model  to change parts of pages while they are viewed 3 xml  extensible markup language  to let programs exchange application data with the server 4 an asynchronous way for programs to send and retrieve xml data 5 javascript as a language to bind all this functionality together as this is quite a collection  we will go through each piece to see what it contributes we have already seen html and css they are standards for describing content and how it should be displayed any program that can produce html and css can use a web browser as a display engine dom  document object model  is a representation of an html page that is accessible to programs this representation is structured as a tree that reflects the structure of the html elements for instance  the dom tree of the html in fig 7-30  a  is given in fig 7-33 at the root is an html element that represents the entire html block this element is the parent of the body element  which is in turn parent to a form element the form has two attributes that are drawn to the right-hand side  one for the form method  a post  and one for the form action  the url to request   this element has three children  reflecting the two paragraph tags and one input tag that are contained within the form at the bottom of the tree are leaves that contain either elements or literals  such as text strings the significance of the dom model is that it provides programs with a straightforward way to change parts of the page there is no need to rewrite the entire page only the node that contains the change needs to be replaced when this change is made  the browser will correspondingly update the display for example  if an image on part of the page is changed in dom  the browser will update that image without changing the other parts of the page we have already seen dom in action when the javascript example of fig 7-31 added lines to the 680 the application layer chap 7 html body attributes to the right form action = ? action.php ? method = ? post ? p p ? please enter your name  ? type = ? submit ? input input type = ? txt ? name = ? age ? child elements below elements ? please enter your age  ? input type = ? txt ? name = ? age ? figure 7-33 the dom tree for the html in fig 7-30  a   document element to cause new lines of text to appear at the bottom of the browser window the dom is a powerful method for producing pages that can evolve the third technology  xml  extensible markup language   is a language for specifying structured content html mixes content with formatting because it is concerned with the presentation of information however  as web applications become more common  there is an increasing need to separate structured content from its presentation for example  consider a program that searches the web for the best price for some book it needs to analyze many web pages looking for the item ? s title and price with web pages in html  it is very difficult for a program to figure out where the title is and where the price is for this reason  the w3c developed xml  bray et al  2006  to allow web content to be structured for automated processing unlike html  there are no defined tags for xml each user can define her own tags a simple example of an xml document is given in fig 7-34 it defines a structure called book list  which is a list of books each book has three fields  the title  author  and year of publication these structures are extremely simple it is permitted to have structures with repeated fields  e.g  multiple authors   optional fields  e.g  url of the audio book   and alternative fields  e.g  url of a bookstore if it is in print or url of an auction site if it is out of print   in this example  each of the three fields is an indivisible entity  but it is also permitted to further subdivide the fields for example  the author field could have been done as follows to give finer-grained control over searching and formatting  < author > < first name > george < /first name > < last name > zipf < /last name > < /author > each field can be subdivided into subfields and subsubfields  arbitrarily deeply sec 7.3 the world wide web 681 < ? xml version = " 1.0 " ? > < book list > < book > < title > human behavior and the principle of least effort < /title > < author > george zipf < /author > < year > 1949 < /year > < /book > < book > < title > the mathematical theory of communication < /title > < author > claude e shannon < /author > < author > warren weaver < /author > < year > 1949 < /year > < /book > < book > < title > nineteen eighty-four < /title > < author > george orwell < /author > < year > 1949 < /year > < /book > < /book list > figure 7-34 a simple xml document all the file of fig 7-34 does is define a book list containing three books it is well suited for transporting information between programs running in browsers and servers  but it says nothing about how to display the document as a web page to do that  a program that consumes the information and judges 1949 to be a fine year for books might output html in which the titles are marked up as italic text alternatively  a language called xslt  extensible stylesheet language transformations   can be used to define how xml should be transformed into html xslt is like css  but much more powerful we will spare you the details the other advantage of expressing data in xml  instead of html  is that it is easier for programs to analyze html was originally written manually  and often is still  so a lot of it is a bit sloppy sometimes the closing tags  like < /p >  are left out other tags do not have a matching closing tag  like < br >  still other tags may be nested improperly  and the case of tag and attribute names can vary most browsers do their best to work out what was probably intended xml is stricter and cleaner in its definition tag names and attributes are always lowercase  tags must always be closed in the reverse of the order that they were opened  or indicate clearly if they are an empty tag with no corresponding close   and attribute values must be enclosed in quotation marks this precision makes parsing easier and unambiguous html is even being defined in terms of xml this approach is called xhtml  extended hypertext markup language   basically  it is a very 682 the application layer chap 7 picky version of html xhtml pages must strictly conform to the xml rules  otherwise they are not accepted by the browser no more shoddy web pages and inconsistencies across browsers as with xml  the intent is to produce pages that are better for programs  in this case web applications  to process while xhtml has been around since 1998  it has been slow to catch on people who produce html do not see why they need xhtml  and browser support has lagged now html 5.0 is being defined so that a page can be represented as either html or xhtml to aid the transition eventually  xhtml should replace html  but it will be a long time before this transition is complete xml has also proved popular as a language for communication between programs when this communication is carried by the http protocol  described in the next section  it is called a web service in particular  soap  simple object access protocol  is a way of implementing web services that performs rpc between programs in a language and system-independent way the client just constructs the request as an xml message and sends it to the server  using the http protocol the server sends back a reply as an xml-formatted message in this way  applications on heterogeneous platforms can communicate getting back to ajax  our point is simply that xml is a useful format to exchange data between programs running in the browser and the server however  to provide a responsive interface in the browser while sending or receiving data  it must be possible for scripts to perform asynchronous i/o that does not block the display while awaiting the response to a request for example  consider a map that can be scrolled in the browser when it is notified of the scroll action  the script on the map page may request more map data from the server if the view of the map is near the edge of the data the interface should not freeze while those data are fetched such an interface would win no user awards instead  the scrolling should continue smoothly when the data arrive  the script is notified so that it can use the data if all goes well  new map data will be fetched before it is needed modern browsers have support for this model of communication the final piece of the puzzle is a scripting language that holds ajax together by providing access to the above list of technologies in most cases  this language is javascript  but there are alternatives such as vbscript we presented a simple example of javascript earlier do not be fooled by this simplicity javascript has many quirks  but it is a full-blown programming language  with all the power of c or java it has variables  strings  arrays  objects  functions  and all the usual control structures it also has interfaces specific to the browser and web pages javascript can track mouse motion over objects on the screen  which makes it easy to make a menu suddenly appear and leads to lively web pages it can use dom to access pages  manipulate html and xml  and perform asynchronous http communication before leaving the subject of dynamic pages  let us briefly summarize the technologies we have covered so far by relating them on a single figure complete web pages can be generated on the fly by various scripts on the server sec 7.3 the world wide web 683 machine the scripts can be written in server extension languages like php  jsp  or asp.net  or run as separate cgi processes and thus be written in any language these options are shown in fig 7-35 server machine cgi script helper application client machine web browser process php asp jsp java script plug-ins interpreter html / css / xml interpreter java virtual machine vb script interpreter xml html/css etc web browser process figure 7-35 various technologies used to generate dynamic pages once these web pages are received by the browser  they are treated as normal pages in html  css and other mime types and just displayed plug-ins that run in the browser and helper applications that run outside of the browser can be installed to extend the mime types that are supported by the browser dynamic content generation is also possible on the client side the programs that are embedded in web pages can be written in javascript  vbscript  java  and other languages these programs can perform arbitrary computations and update the display with ajax  programs in web pages can asynchronously exchange xml and other kinds of data with the server this model supports rich web applications that look just like traditional applications  except that they run inside the browser and access information that is stored at servers on the internet 7.3.4 http ? the hypertext transfer protocol now that we have an understanding of web content and applications  it is time to look at the protocol that is used to transport all this information between web servers and clients it is http  hypertext transfer protocol   as specified in rfc 2616 http is a simple request-response protocol that normally runs over tcp it specifies what messages clients may send to servers and what responses they get back in return the request and response headers are given in ascii  just like in smtp the contents are given in a mime-like format  also like in smtp this simple model was partly responsible for the early success of the web because it made development and deployment straightforward in this section  we will look at the more important properties of http as it is used nowadays however  before getting into the details we will note that the way 684 the application layer chap 7 it is used in the internet is evolving http is an application layer protocol because it runs on top of tcp and is closely associated with the web that is why we are covering it in this chapter however  in another sense http is becoming more like a transport protocol that provides a way for processes to communicate content across the boundaries of different networks these processes do not have to be a web browser and web server a media player could use http to talk to a server and request album information antivirus software could use http to download the latest updates developers could use http to fetch project files consumer electronics products like digital photo frames often use an embedded http server as an interface to the outside world machine-to-machine communication increasingly runs over http for example  an airline server might use soap  an xml rpc over http  to contact a car rental server and make a car reservation  all as part of a vacation package these trends are likely to continue  along with the expanding use of http connections the usual way for a browser to contact a server is to establish a tcp connection to port 80 on the server ? s machine  although this procedure is not formally required the value of using tcp is that neither browsers nor servers have to worry about how to handle long messages  reliability  or congestion control all of these matters are handled by the tcp implementation early in the web  with http 1.0  after the connection was established a single request was sent over and a single response was sent back then the tcp connection was released in a world in which the typical web page consisted entirely of html text  this method was adequate quickly  the average web page grew to contain large numbers of embedded links for content such as icons and other eye candy establishing a separate tcp connection to transport each single icon became a very expensive way to operate this observation led to http 1.1  which supports persistent connections with them  it is possible to establish a tcp connection  send a request and get a response  and then send additional requests and get additional responses this strategy is also called connection reuse by amortizing the tcp setup  startup  and release costs over multiple requests  the relative overhead due to tcp is reduced per request it is also possible to pipeline requests  that is  send request 2 before the response to request 1 has arrived the performance difference between these three cases is shown in fig 7-36 part  a  shows three requests  one after the other and each in a separate connection let us suppose that this represents a web page with two embedded images on the same server the urls of the images are determined as the main page is fetched  so they are fetched after the main page nowadays  a typical page has around 40 other objects that must be fetched to present it  but that would make our figure far too big so we will use only two embedded objects sec 7.3 the world wide web 685  a   b   c  pipelined requests connection setup http response http request connection setup connection setup time connection setup connection setup figure 7-36 http with  a  multiple connections and sequential requests  b  a persistent connection and sequential requests  c  a persistent connection and pipelined requests in fig 7-36  b   the page is fetched with a persistent connection that is  the tcp connection is opened at the beginning  then the same three requests are sent  one after the other as before  and only then is the connection closed observe that the fetch completes more quickly there are two reasons for the speedup first  time is not wasted setting up additional connections each tcp connection requires at least one round-trip time to establish second  the transfer of the same images proceeds more quickly why is this ? it is because of tcp congestion control at the start of a connection  tcp uses the slow-start procedure to increase the throughput until it learns the behavior of the network path the consequence of this warmup period is that multiple short tcp connections take disproportionately longer to transfer information than one longer tcp connection finally  in fig 7-36  c   there is one persistent connection and the requests are pipelined specifically  the second and third requests are sent in rapid succession as soon as enough of the main page has been retrieved to identify that the images must be fetched the responses for these requests follow eventually this method cuts down the time that the server is idle  so it further improves performance persistent connections do not come for free  however a new issue that they raise is when to close the connection a connection to a server should stay open while the page loads what then ? there is a good chance that the user will click on a link that requests another page from the server if the connection remains open  the next request can be sent immediately however  there is no guarantee that the client will make another request of the server any time soon in practice  686 the application layer chap 7 clients and servers usually keep persistent connections open until they have been idle for a short time  e.g  60 seconds  or they have a large number of open connections and need to close some the observant reader may have noticed that there is one combination that we have left out so far it is also possible to send one request per tcp connection  but run multiple tcp connections in parallel this parallel connection method was widely used by browsers before persistent connections it has the same disadvantage as sequential connections ? extra overhead ? but much better performance this is because setting up and ramping up the connections in parallel hides some of the latency in our example  connections for both of the embedded images could be set up at the same time however  running many tcp connections to the same server is discouraged the reason is that tcp performs congestion control for each connection independently as a consequence  the connections compete against each other  causing added packet loss  and in aggregate are more aggressive users of the network than an individual connection persistent connections are superior and used in preference to parallel connections because they avoid overhead and do not suffer from congestion problems methods although http was designed for use in the web  it was intentionally made more general than necessary with an eye to future object-oriented uses for this reason  operations  called methods  other than just requesting a web page are supported this generality is what permitted soap to come into existence each request consists of one or more lines of ascii text  with the first word on the first line being the name of the method requested the built-in methods are listed in fig 7-37 the names are case sensitive  so get is allowed but not get method description get read a web page head read a web page ? s header post append to a web page put store a web page delete remove the web page trace echo the incoming request connect connect through a proxy options query options for a page figure 7-37 the built-in http request methods the get method requests the server to send the page  when we say ? ? page ? ? we mean ? ? object ? ? in the most general case  but thinking of a page as the contents sec 7.3 the world wide web 687 of a file is sufficient to understand the concepts  the page is suitably encoded in mime the vast majority of requests to web servers are gets the usual form of get is get filename http/1.1 where filename names the page to be fetched and 1.1 is the protocol version the head method just asks for the message header  without the actual page this method can be used to collect information for indexing purposes  or just to test a url for validity the post method is used when forms are submitted both it and get are also used for soap web services like get  it bears a url  but instead of simply retrieving a page it uploads data to the server  i.e  the contents of the form or rpc parameters   the server then does something with the data that depends on the url  conceptually appending the data to the object the effect might be to purchase an item  for example  or to call a procedure finally  the method returns a page indicating the result the remaining methods are not used much for browsing the web the put method is the reverse of get  instead of reading the page  it writes the page this method makes it possible to build a collection of web pages on a remote server the body of the request contains the page it may be encoded using mime  in which case the lines following the put might include authentication headers  to prove that the caller indeed has permission to perform the requested operation delete does what you might expect  it removes the page  or at least it indicates that the web server has agreed to remove the page as with put  authentication and permission play a major role here the trace method is for debugging it instructs the server to send back the request this method is useful when requests are not being processed correctly and the client wants to know what request the server actually got the connect method lets a user make a connection to a web server through an intermediate device  such as a web cache the options method provides a way for the client to query the server for a page and obtain the methods and headers that can be used with that page every request gets a response consisting of a status line  and possibly additional information  e.g  all or part of a web page   the status line contains a three-digit status code telling whether the request was satisfied and  if not  why not the first digit is used to divide the responses into five major groups  as shown in fig 7-38 the 1xx codes are rarely used in practice the 2xx codes mean that the request was handled successfully and the content  if any  is being returned the 3xx codes tell the client to look elsewhere  either using a different url or in its own cache  discussed later   the 4xx codes mean the request failed due to a client error such an invalid request or a nonexistent page finally  the 5xx errors mean the server itself has an internal problem  either due to an error in its code or to a temporary overload 688 the application layer chap 7 code meaning examples 1xx information 100 = server agrees to handle client ? s request 2xx success 200 = request succeeded ; 204 = no content present 3xx redirection 301 = page moved ; 304 = cached page still valid 4xx client error 403 = forbidden page ; 404 = page not found 5xx server error 500 = internal server error ; 503 = try again later figure 7-38 the status code response groups message headers the request line  e.g  the line with the get method  may be followed by additional lines with more information they are called request headers this information can be compared to the parameters of a procedure call responses may also have response headers some headers can be used in either direction a selection of the more important ones is given in fig 7-39 this list is not short  so as you might imagine there is often a variety of headers on each request and response the user-agent header allows the client to inform the server about its browser implementation  e.g  mozilla/5.0 and chrome/5.0.375.125   this information is useful to let servers tailor their responses to the browser  since different browsers can have widely varying capabilities and behaviors the four accept headers tell the server what the client is willing to accept in the event that it has a limited repertoire of what is acceptable the first header specifies the mime types that are welcome  e.g  text/html   the second gives the character set  e.g  iso-8859-5 or unicode-1-1   the third deals with compression methods  e.g  gzip   the fourth indicates a natural language  e.g  spanish   if the server has a choice of pages  it can use this information to supply the one the client is looking for if it is unable to satisfy the request  an error code is returned and the request fails the if-modified-since and if-none-match headers are used with caching they let the client ask for a page to be sent only if the cached copy is no longer valid we will describe caching shortly the host header names the server it is taken from the url this header is mandatory it is used because some ip addresses may serve multiple dns names and the server needs some way to tell which host to hand the request to the authorization header is needed for pages that are protected in this case  the client may have to prove it has a right to see the page requested this header is used for that case the client uses the misspelled referer header to give the url that referred to the url that is now requested most often this is the url of the previous page sec 7.3 the world wide web 689 header type contents user-agent request information about the browser and its platform accept request the type of pages the client can handle accept-charset request the character sets that are acceptable to the client accept-encoding request the page encodings the client can handle accept-language request the natural languages the client can handle if-modified-since request time and date to check freshness if-none-match request previously sent tags to check freshness host request the server ? s dns name authorization request a list of the client ? s credentials referer request the previous url from which the request came cookie request previously set cookie sent back to the server set-cookie response cookie for the client to store server response information about the server content-encoding response how the content is encoded  e.g  gzip  content-language response the natural language used in the page content-length response the page ? s length in bytes content-type response the page ? s mime type content-range response identifies a portion of the page ? s content last-modified response time and date the page was last changed expires response time and date when the page stops being valid location response tells the client where to send its request accept-ranges response indicates the server will accept byte range requests date both date and time the message was sent range both identifies a portion of a page cache-control both directives for how to treat caches etag both tag for the contents of the page upgrade both the protocol the sender wants to switch to figure 7-39 some http message headers this header is particularly useful for tracking web browsing  as it tells servers how a client arrived at the page although cookies are dealt with in rfc 2109 rather than rfc 2616  they also have headers the set-cookie header is how servers send cookies to clients the client is expected to save the cookie and return it on subsequent requests to the server by using the cookie header  note that there is a more recent specification for cookies with newer headers  rfc 2965  but this has largely been rejected by industry and is not widely implemented  690 the application layer chap 7 many other headers are used in responses the server header allows the server to identify its software build if it wishes the next five headers  all starting with content  allow the server to describe properties of the page it is sending the last-modified header tells when the page was last modified  and the expires header tells for how long the page will remain valid both of these headers play an important role in page caching the location header is used by the server to inform the client that it should try a different url this can be used if the page has moved or to allow multiple urls to refer to the same page  possibly on different servers   it is also used for companies that have a main web page in the com domain but redirect clients to a national or regional page based on their ip addresses or preferred language if a page is very large  a small client may not want it all at once some servers will accept requests for byte ranges  so the page can be fetched in multiple small units the accept-ranges header announces the server ? s willingness to handle this type of partial page request now we come to headers that can be used in both directions the date header can be used in both directions and contains the time and date the message was sent  while the range header tells the byte range of the page that is provided by the response the etag header gives a short tag that serves as a name for the content of the page it is used for caching the cache-control header gives other explicit instructions about how to cache  or  more usually  how not to cache  pages finally  the upgrade header is used for switching to a new communication protocol  such as a future http protocol or a secure transport it allows the client to announce what it can support and the server to assert what it is using caching people often return to web pages that they have viewed before  and related web pages often have the same embedded resources some examples are the images that are used for navigation across the site  as well as common style sheets and scripts it would be very wasteful to fetch all of these resources for these pages each time they are displayed because the browser already has a copy squirreling away pages that are fetched for subsequent use is called caching the advantage is that when a cached page can be reused  it is not necessary to repeat the transfer http has built-in support to help clients identify when they can safely reuse pages this support improves performance by reducing both network traffic and latency the trade-off is that the browser must now store pages  but this is nearly always a worthwhile trade-off because local storage is inexpensive the pages are usually kept on disk so that they can be used when the browser is run at a later date the difficult issue with http caching is how to determine that a previously cached copy of a page is the same as the page would be if it was fetched again sec 7.3 the world wide web 691 this determination can not be made solely from the url for example  the url may give a page that displays the latest news item the contents of this page will be updated frequently even though the url stays the same alternatively  the contents of the page may be a list of the gods from greek and roman mythology this page should change somewhat less rapidly http uses two strategies to tackle this problem they are shown in fig 7-40 as forms of processing between the request  step 1  and the response  step 5   the first strategy is page validation  step 2   the cache is consulted  and if it has a copy of a page for the requested url that is known to be fresh  i.e  still valid   there is no need to fetch it anew from the server instead  the cached page can be returned directly the expires header returned when the cached page was originally fetched and the current date and time can be used to make this determination 4a  not modified web browser cache web server 1  request 2  check expiry 3  conditional get 4b  response 5  response program figure 7-40 http caching however  not all pages come with a convenient expires header that tells when the page must be fetched again after all  making predictions is hard ? especially about the future in this case  the browser may use heuristics for example  if the page has not been modified in the past year  as told by the last-modified header  it is a fairly safe bet that it will not change in the next hour there is no guarantee  however  and this may be a bad bet for example  the stock market might have closed for the day so that the page will not change for hours  but it will change rapidly once the next trading session starts thus  the cacheability of a page may vary wildly over time for this reason  heuristics should be used with care  though they often work well in practice finding pages that have not expired is the most beneficial use of caching because it means that the server does not need to be contacted at all unfortunately  it does not always work servers must use the expires header conservatively  since they may be unsure when a page will be updated thus  the cached copies may still be fresh  but the client does not know the second strategy is used in this case it is to ask the server if the cached copy is still valid this request is a conditional get  and it is shown in fig 7-40 as step 3 if the server knows that the cached copy is still valid  it can send a short reply to say so  step 4a   otherwise  it must send the full response  step 4b   692 the application layer chap 7 more header fields are used to let the server check whether a cached copy is still valid the client has the time a cached page was last updated from the last modified header it can send this time to the server using the if-modified-since header to ask for the page only if it has been changed in the meantime alternatively  the server may return an etag header with a page this header gives a tag that is a short name for the content of the page  like a checksum but better  it can be a cryptographic hash  which we will describe in chap 8  the client can validate cached copies by sending the server an if-none-match header listing the tags of the cached copies if any of the tags match the content that the server would respond with  the corresponding cached copy may be used this method can be used when it is not convenient or useful to determine freshness for example  a server may return different content for the same url depending on what languages and mime types are preferred in this case  the modification date alone will not help the server to determine if the cached page is fresh finally  note that both of these caching strategies are overridden by the directives carried in the cache-control header these directives can be used to restrict caching  e.g  no-cache  when it is not appropriate an example is a dynamic page that will be different the next time it is fetched pages that require authorization are also not cached there is much more to caching  but we only have the space to make two important points first  caching can be performed at other places besides in the browser in the general case  http requests can be routed through a series of caches the use of a cache external to the browser is called proxy caching each added level of caching can help to reduce requests further up the chain it is common for organizations such as isps and companies to run proxy caches to gain the benefits of caching pages across different users we will discuss proxy caching with the broader topic of content distribution in sec 7.5 at the end of this chapter second  caches provide an important boost to performance  but not as much as one might hope the reason is that  while there are certainly popular documents on the web  there are also a great many unpopular documents that people fetch  many of which are also very long  e.g  videos   the ? ? long tail ? ? of unpopular documents take up space in caches  and the number of requests that can be handled from the cache grows only slowly with the size of the cache web caches are always likely to be able to handle less than half of the requests see breslau et al  1999  for more information experimenting with http because http is an ascii protocol  it is quite easy for a person at a terminal  as opposed to a browser  to directly talk to web servers all that is needed is a tcp connection to port 80 on the server readers are encouraged to experiment with the following command sequence it will work in most unix shells and the command window on windows  once the telnet program is enabled   sec 7.3 the world wide web 693 telnet www.ietf.org 80 get /rfc.html http/1.1 host  www.ietf.org this sequence of commands starts up a telnet  i.e  tcp  connection to port 80 on ietf ? s web server  www.ietf.org then comes the get command naming the path of the url and the protocol try servers and urls of your choosing the next line is the mandatory host header a blank line following the last header is mandatory it tells the server that there are no more request headers the server will then send the response depending on the server and the url  many different kinds of headers and pages can be observed 7.3.5 the mobile web the web is used from most every type of computer  and that includes mobile phones browsing the web over a wireless network while mobile can be very useful it also presents technical problems because much web content was designed for flashy presentations on desktop computers with broadband connectivity in this section we will describe how web access from mobile devices  or the mobile web  is being developed compared to desktop computers at work or at home  mobile phones present several difficulties for web browsing  1 relatively small screens preclude large pages and large images 2 limited input capabilities make it tedious to enter urls or other lengthy input 3 network bandwidth is limited over wireless links  particularly on cellular  3g  networks  where it is often expensive too 4 connectivity may be intermittent 5 computing power is limited  for reasons of battery life  size  heat dissipation  and cost these difficulties mean that simply using desktop content for the mobile web is likely to deliver a frustrating user experience early approaches to the mobile web devised a new protocol stack tailored to wireless devices with limited capabilities wap  wireless application protocol  is the most well-known example of this strategy the wap effort was started in 1997 by major mobile phone vendors that included nokia  ericsson  and motorola however  something unexpected happened along the way over the next decade  network bandwidth and device capabilities grew tremendously with the deployment of 3g data services and mobile phones with larger color displays  694 the application layer chap 7 faster processors  and 802.11 wireless capabilities all of a sudden  it was possible for mobiles to run simple web browsers there is still a gap between these mobiles and desktops that will never close  but many of the technology problems that gave impetus to a separate protocol stack have faded the approach that is increasingly used is to run the same web protocols for mobiles and desktops  and to have web sites deliver mobile-friendly content when the user happens to be on a mobile device web servers are able to detect whether to return desktop or mobile versions of web pages by looking at the request headers the user-agent header is especially useful in this regard because it identifies the browser software thus  when a web server receives a request  it may look at the headers and return a page with small images  less text  and simpler navigation to an iphone and a full-featured page to a user on a laptop w3c is encouraging this approach in several ways one way is to standardize best practices for mobile web content a list of 60 such best practices is provided in the first specification  rabin and mccathienevile  2008   most of these practices take sensible steps to reduce the size of pages  including by the use of compression  since the costs of communication are higher than those of computation  and by maximizing the effectiveness of caching this approach encourages sites  especially large sites  to create mobile web versions of their content because that is all that is required to capture mobile web users to help those users along  there is also a logo to indicate pages that can be viewed  well  on the mobile web another useful tool is a stripped-down version of html called xhtml basic this language is a subset of xhtml that is intended for use by mobile phones  televisions  pdas  vending machines  pagers  cars  game machines  and even watches for this reason  it does not support style sheets  scripts  or frames  but most of the standard tags are there they are grouped into 11 modules some are required ; some are optional all are defined in xml the modules and some example tags are listed in fig 7-41 however  not all pages will be designed to work well on the mobile web thus  a complementary approach is the use of content transformation or transcoding in this approach  a computer that sits between the mobile and the server takes requests from the mobile  fetches content from the server  and transforms it to mobile web content a simple transformation is to reduce the size of large images by reformatting them at a lower resolution many other small but useful transformations are possible transcoding has been used with some success since the early days of the mobile web see  for example  fox et al  1996   however  when both approaches are used there is a tension between the mobile content decisions that are made by the server and by the transcoder for instance  a web site may select a particular combination of image and text for a mobile web user  only to have a transcoder change the format of the image our discussion so far has been about content  not protocols  as it is the content that is the biggest problem in realizing the mobile web however  we will briefly mention the issue of protocols the http  tcp  and ip protocols used by the sec 7.3 the world wide web 695 module req ? function example tags structure yes doc structure body  head  html  title text yes information br  code  dfn  em  hn  kbd  p  strong hypertext yes hyperlinks a list yes itemized lists dl  dt  dd  ol  ul  li forms no fill-in forms form  input  label  option  textarea tables no rectangular tables caption  table  td  th  tr image no pictures img object no applets  maps  etc object  param meta-information no extra info meta link no similar to < a > link base no url starting point base figure 7-41 the xhtml basic modules and tags web may consume a significant amount of bandwidth on protocol overheads such as headers to tackle this problem  wap and other solutions defined special-purpose protocols this turns out to be largely unecessary header compression technologies  such as rohc  robust header compression  described in chap 6  can reduce the overheads of these protocols in this way  it is possible to have one set of protocols  http  tcp  ip  and use them over either high or low bandwidth links use over the low-bandwidth links simply requires that header compression be turned on 7.3.6 web search to finish our description of the web  we will discuss what is arguably the most successful web application  search in 1998  sergey brin and larry page  then graduate students at stanford  formed a startup called google to build a better web search engine they were armed with the then-radical idea that a search algorithm that counted how many times each page was pointed to by other pages was a better measure of its importance than how many times it contained the key words being sought for instance  many pages link to the main cisco page  which makes this page more important to a user searching for ? ? cisco ? ? than a page outside of the company that happens to use the word ? ? cisco ? ? many times they were right it did prove possible to build a better search engine  and people flocked to it backed by venture capital  google grew tremendously it became a public company in 2004  with a market capitalization of $ 23 billion by 2010  it was estimated to run more than one million servers in data centers throughout the world 696 the application layer chap 7 in one sense  search is simply another web application  albeit one of the most mature web applications because it has been under development since the early days of the web however  web search has proved indispensible in everyday usage over one billion web searches are estimated to be done each day people looking for all manner of information use search as a starting point for example  to find out where to buy vegemite in seattle  there is no obvious web site to use as a starting point but chances are that a search engine knows of a page with the desired information and can quickly direct you to the answer to perform a web search in the traditional manner  the user directs her browser to the url of a web search site the major search sites include google  yahoo !  and bing next  the user submits search terms using a form this act causes the search engine to perform a query on its database for relevant pages or images  or whatever kind of resource is being searched for  and return the result as a dynamic page the user can then follow links to the pages that have been found web search is an interesting topic for discussion because it has implications for the design and use of networks first  there is the question of how web search finds pages the web search engine must have a database of pages to run a query each html page may contain links to other pages  and everything interesting  or at least searchable  is linked somewhere this means that it is theoretically possible to start with a handful of pages and find all other pages on the web by doing a traversal of all pages and links this process is called web crawling all web search engines use web crawlers one issue with crawling is the kind of pages that it can find fetching static documents and following links is easy however  many web pages contain programs that display different pages depending on user interaction an example is an online catalog for a store the catalog may contain dynamic pages created from a product database and queries for different products this kind of content is different from static pages that are easy to traverse how do web crawlers find these dynamic pages ? the answer is that  for the most part  they do not this kind of hidden content is called the deep web how to search the deep web is an open problem that researchers are now tackling see  for example  madhavan et al  2008   there are also conventions by which sites make a page  known as robots.txt  to tell crawlers what parts of the sites should or should not be visited a second consideration is how to process all of the crawled data to let indexing algorithms be run over the mass of data  the pages must be stored estimates vary  but the main search engines are thought to have an index of tens of billions of pages taken from the visible part of the web the average page size is estimated at 320 kb these figures mean that a crawled copy of the web takes on the order of 20 petabytes or 2 ? ? 1016 bytes to store while this is a truly huge number  it is also an amount of data that can comfortably be stored and processed in internet data centers  chang et al  2006   for example  if disk storage costs $ 20/tb  then 2 ? ? 104 tb costs $ 400,000  which is not exactly a huge amount for companies the size of google  microsoft  and yahoo !  and while the web is sec 7.3 the world wide web 697 expanding  disk costs are dropping dramatically  so storing the entire web may continue to be feasible for large companies for the foreseeable future making sense of this data is another matter you can appreciate how xml can help programs extract the structure of the data easily  while ad hoc formats will lead to much guesswork there is also the issue of conversion between formats  and even translation between languages but even knowing the structure of data is only part of the problem the hard bit is to understand what it means this is where much value can be unlocked  starting with more relevant result pages for search queries the ultimate goal is to be able to answer questions  for example  where to buy a cheap but decent toaster oven in your city a third aspect of web search is that it has come to provide a higher level of naming there is no need to remember a long url if it is just as reliable  or perhaps more  to search for a web page by a person ? s name  assuming that you are better at remembering names than urls this strategy is increasingly successful in the same way that dns names relegated ip addresses to computers  web search is relegating urls to computers also in favor of search is that it corrects spelling and typing errors  whereas if you type in a url wrong  you get the wrong page finally  web search shows us something that has little to do with network design but much to do with the growth of some internet services  there is much money in advertising advertising is the economic engine that has driven the growth of web search the main change from print advertising is the ability to target advertisements depending on what people are searching for  to increase the relevance of the advertisements variations on an auction mechanism are used to match the search query to the most valuable advertisement  edelman et al  2007   this new model has given rise to new problems  of course  such as click fraud  in which programs imitate users and click on advertisements to cause payments that have not been fairly earned 7.4 streaming audio and video web applications and the mobile web are not the only exciting developments in the use of networks for many people  audio and video are the holy grail of networking when the word ? ? multimedia ? ? is mentioned  both the propellerheads and the suits begin salivating as if on cue the former see immense technical challenges in providing voice over ip and video-on-demand to every computer the latter see equally immense profits in it while the idea of sending audio and video over the internet has been around since the 1970s at least  it is only since roughly 2000 that real-time audio and real-time video traffic has grown with a vengeance real-time traffic is different from web traffic in that it must be played out at some predetermined rate to be useful after all  watching a video in slow motion with fits and starts is not most 698 the application layer chap 7 people ? s idea of fun in contrast  the web can have short interruptions  and page loads can take more or less time  within limits  without it being a major problem two things happened to enable this growth first  computers have became much more powerful and are equipped with microphones and cameras so that they can input  process  and output audio and video data with ease second  a flood of internet bandwidth has come to be available long-haul links in the core of the internet run at many gigabits/sec  and broadband and 802.11 wireless reaches users at the edge of the internet these developments allow isps to carry tremendous levels of traffic across their backbones and mean that ordinary users can connect to the internet 100 ? 1000 times faster than with a 56-kbps telephone modem the flood of bandwidth caused audio and video traffic to grow  but for different reasons telephone calls take up relatively little bandwidth  in principle 64 kbps but less when compressed  yet telephone service has traditionally been expensive companies saw an opportunity to carry voice traffic over the internet using existing bandwidth to cut down on their telephone bills startups such as skype saw a way to let customers make free telephone calls using their internet connections upstart telephone companies saw a cheap way to carry traditional voice calls using ip networking equipment the result was an explosion of voice data carried over internet networks that is called voice over ip or internet telephony unlike audio  video takes up a large amount of bandwidth reasonable quality internet video is encoded with compression at rates of around 1 mbps  and a typical dvd movie is 2 gb of data before broadband internet access  sending movies over the network was prohibitive not so any more with the spread of broadband  it became possible for the first time for users to watch decent  streamed video at home people love to do it around a quarter of the internet users on any given day are estimated to visit youtube  the popular video sharing site the movie rental business has shifted to online downloads and the sheer size of videos has changed the overall makeup of internet traffic the majority of internet traffic is already video  and it is estimated that 90 % of internet traffic will be video within a few years  cisco  2010   given that there is enough bandwidth to carry audio and video  the key issue for designing streaming and conferencing applications is network delay audio and video need real-time presentation  meaning that they must be played out at a predetermined rate to be useful long delays mean that calls that should be interactive no longer are this problem is clear if you have ever talked on a satellite phone  where the delay of up to half a second is quite distracting for playing music and movies over the network  the absolute delay does not matter  because it only affects when the media starts to play but the variation in delay  called jitter  still matters it must be masked by the player or the audio will sound unintelligible and the video will look jerky in this section  we will discuss some strategies to handle the delay problem  as well as protocols for setting up audio and video sessions after an introduction to sec 7.4 streaming audio and video 699 digital audio and video  our presentation is broken into three cases for which different designs are used the first and easiest case to handle is streaming stored media  like watching a video on youtube the next case in terms of difficulty is streaming live media two examples are internet radio and iptv  in which radio and television stations broadcast to many users live on the internet the last and most difficult case is a call as might be made with skype  or more generally an interactive audio and video conference as an aside  the term multimedia is often used in the context of the internet to mean video and audio literally  multimedia is just two or more media that definition makes this book a multimedia presentation  as it contains text and graphics  the figures   however  that is probably not what you had in mind  so we use the term ? ? multimedia ? ? to imply two or more continuous media  that is  media that have to be played during some well-defined time interval the two media are normally video with audio  that is  moving pictures with sound many people also refer to pure audio  such as internet telephony or internet radio  as multimedia as well  which it is clearly not actually  a better term for all these cases is streaming media nonetheless  we will follow the herd and consider real-time audio to be multimedia as well 7.4.1 digital audio an audio  sound  wave is a one-dimensional acoustic  pressure  wave when an acoustic wave enters the ear  the eardrum vibrates  causing the tiny bones of the inner ear to vibrate along with it  sending nerve pulses to the brain these pulses are perceived as sound by the listener in a similar way  when an acoustic wave strikes a microphone  the microphone generates an electrical signal  representing the sound amplitude as a function of time the frequency range of the human ear runs from 20 hz to 20,000 hz some animals  notably dogs  can hear higher frequencies the ear hears loudness logarithmically  so the ratio of two sounds with power a and b is conventionally expressed in db  decibels  as the quantity 10 log10  a /b   if we define the lower limit of audibility  a sound pressure of about 20 ? pascals  for a 1-khz sine wave as 0 db  an ordinary conversation is about 50 db and the pain threshold is about 120 db the dynamic range is a factor of more than 1 million the ear is surprisingly sensitive to sound variations lasting only a few milliseconds the eye  in contrast  does not notice changes in light level that last only a few milliseconds the result of this observation is that jitter of only a few milliseconds during the playout of multimedia affects the perceived sound quality much more than it affects the perceived image quality digital audio is a digital representation of an audio wave that can be used to recreate it audio waves can be converted to digital form by an adc  analogto digital converter   an adc takes an electrical voltage as input and generates a binary number as output in fig 7-42  a  we see an example of a sine wave 700 the application layer chap 7 to represent this signal digitally  we can sample it every ? t seconds  as shown by the bar heights in fig 7-42  b   if a sound wave is not a pure sine wave but a linear superposition of sine waves where the highest frequency component present is f  the nyquist theorem  see chap 2  states that it is sufficient to make samples at a frequency 2f sampling more often is of no value since the higher frequencies that such sampling could detect are not present 1.00 0.75 0.50 0.25 0 ? 0.25 ? 0.50 ? 0.75 ? 1.00 1 2 t 1 2 t t t t  a   b   c  1 2 t figure 7-42  a  a sine wave  b  sampling the sine wave  c  quantizing the samples to 4 bits the reverse process takes digital values and produces an analog electrical voltage it is done by a dac  digital-to-analog converter   a loudspeaker can then convert the analog voltage to acoustic waves so that people can hear sounds digital samples are never exact the samples of fig 7-42  c  allow only nine values  from ? 1.00 to + 1.00 in steps of 0.25 an 8-bit sample would allow 256 distinct values a 16-bit sample would allow 65,536 distinct values the error introduced by the finite number of bits per sample is called the quantization noise if it is too large  the ear detects it two well-known examples where sampled sound is used are the telephone and audio compact discs pulse code modulation  as used within the telephone system  uses 8-bit samples made 8000 times per second the scale is nonlinear to minimize perceived distortion  and with only 8000 samples/sec  frequencies above 4 khz are lost in north america and japan  the ? -law encoding is used in europe and internationally  the a-law encoding is used each encoding gives a data rate of 64,000 bps audio cds are digital with a sampling rate of 44,100 samples/sec  enough to capture frequencies up to 22,050 hz  which is good enough for people but bad for canine music lovers the samples are 16 bits each and are linear over the range of amplitudes note that 16-bit samples allow only 65,536 distinct values  even though the dynamic range of the ear is more than 1 million thus  even though cd-quality audio is much better than telephone-quality audio  using only 16 bits per sample introduces noticeable quantization noise  although the full dynamic range is not covered ? cds are not supposed to hurt   some fanatic audiophiles sec 7.4 streaming audio and video 701 still prefer 33-rpm lp records to cds because records do not have a nyquist frequency cutoff at 22 khz and have no quantization noise  but they do have scratches unless handled very carefully  with 44,100 samples/sec of 16 bits each  uncompressed cd-quality audio needs a bandwidth of 705.6 kbps for monaural and 1.411 mbps for stereo audio compression audio is often compressed to reduce bandwidth needs and transfer times  even though audio data rates are much lower than video data rates all compression systems require two algorithms  one for compressing the data at the source  and another for decompressing it at the destination in the literature  these algorithms are referred to as the encoding and decoding algorithms  respectively we will use this terminology too compression algorithms exhibit certain asymmetries that are important to understand even though we are considering audio first  these asymmetries hold for video as well for many applications  a multimedia document will only be encoded once  when it is stored on the multimedia server  but will be decoded thousands of times  when it is played back by customers   this asymmetry means that it is acceptable for the encoding algorithm to be slow and require expensive hardware provided that the decoding algorithm is fast and does not require expensive hardware the operator of a popular audio  or video  server might be quite willing to buy a cluster of computers to encode its entire library  but requiring customers to do the same to listen to music or watch movies is not likely to be a big success many practical compression systems go to great lengths to make decoding fast and simple  even at the price of making encoding slow and complicated on the other hand  for live audio and video  such as a voice-over-ip calls  slow encoding is unacceptable encoding must happen on the fly  in real time consequently  real-time multimedia uses different algorithms or parameters than stored audio or videos on disk  often with appreciably less compression a second asymmetry is that the encode/decode process need not be invertible that is  when compressing a data file  transmitting it  and then decompressing it  the user expects to get the original back  accurate down to the last bit with multimedia  this requirement does not exist it is usually acceptable to have the audio  or video  signal after encoding and then decoding be slightly different from the original as long as it sounds  or looks  the same when the decoded output is not exactly equal to the original input  the system is said to be lossy if the input and output are identical  the system is lossless lossy systems are important because accepting a small amount of information loss normally means a huge payoff in terms of the compression ratio possible historically  long-haul bandwidth in the telephone network was very expensive  so there is a substantial body of work on vocoders  short for ? ? voice coders ? ?  that compress audio for the special case of speech human speech tends to be in 702 the application layer chap 7 the 600-hz to 6000-hz range and is produced by a mechanical process that depends on the speaker ? s vocal tract  tongue  and jaw some vocoders make use of models of the vocal system to reduce speech to a few parameters  e.g  the sizes and shapes of various cavities  and a data rate of as little as 2.4 kbps how these vocoders work is beyond the scope of this book  however we will concentrate on audio as sent over the internet  which is typically closer to cd-quality it is also desirable to reduce the data rates for this kind of audio at 1.411 mbps  stereo audio would tie up many broadband links  leaving less room for video and other web traffic its data rate with compression can be reduced by an order of magnitude with little to no perceived loss of quality compression and decompression require signal processing fortunately  digitized sound and movies can be easily processed by computers in software in fact  dozens of programs exist to let users record  display  edit  mix  and store media from multiple sources this has led to large amounts of music and movies being available on the internet ? not all of it legal ? which has resulted in numerous lawsuits from the artists and copyright owners many audio compression algorithms have been developed probably the most popular formats are mp3  mpeg audio layer 3  and aac  advanced audio coding  as carried in mp4  mpeg-4  files to avoid confusion  note that mpeg provides audio and video compression mp3 refers to the audio compression portion  part 3  of the mpeg-1 standard  not the third version of mpeg in fact  no third version of mpeg was released  only mpeg-1  mpeg-2  and mpeg-4 aac is the successor to mp3 and the default audio encoding used in mpeg-4 mpeg-2 allows both mp3 and aac audio is that clear now ? the nice thing about standards is that there are so many to choose from and if you do not like any of them  just wait a year or two audio compression can be done in two ways in waveform coding  the signal is transformed mathematically by a fourier transform into its frequency components in chap 2  we showed an example function of time and its fourier amplitudes in fig 2-1  a   the amplitude of each component is then encoded in a minimal way the goal is to reproduce the waveform fairly accurately at the other end in as few bits as possible the other way  perceptual coding  exploits certain flaws in the human auditory system to encode a signal in such a way that it sounds the same to a human listener  even if it looks quite different on an oscilloscope perceptual coding is based on the science of psychoacoustics ? how people perceive sound both mp3 and aac are based on perceptual coding the key property of perceptual coding is that some sounds can mask other sounds imagine you are broadcasting a live flute concert on a warm summer day then all of a sudden  out of the blue  a crew of workmen nearby turn on their jackhammers and start tearing up the street no one can hear the flute any more its sounds have been masked by the jackhammers for transmission purposes  it is now sufficient to encode just the frequency band used by the jackhammers sec 7.4 streaming audio and video 703 because the listeners can not hear the flute anyway this is called frequency masking ? the ability of a loud sound in one frequency band to hide a softer sound in another frequency band that would have been audible in the absence of the loud sound in fact  even after the jackhammers stop  the flute will be inaudible for a short period of time because the ear turns down its gain when they start and it takes a finite time to turn it up again this effect is called temporal masking to make these effects more quantitative  imagine experiment 1 a person in a quiet room puts on headphones connected to a computer ? s sound card the computer generates a pure sine wave at 100 hz at low  but gradually increasing  power the subject is instructed to strike a key when she hears the tone the computer records the current power level and then repeats the experiment at 200 hz  300 hz  and all the other frequencies up to the limit of human hearing when averaged over many people  a log-log graph of how much power it takes for a tone to be audible looks like that of fig 7-43  a   a direct consequence of this curve is that it is never necessary to encode any frequencies whose power falls below the threshold of audibility for example  if the power at 100 hz were 20 db in fig 7-43  a   it could be omitted from the output with no perceptible loss of quality because 20 db at 100 hz falls below the level of audibility masking signal at 150 hz threshold of audibility 80 60 40 20 .1 1 frequency  khz  power  db  .02 .05 .2 .5 2 5 10 20 0 80 60 40 20 frequency  khz   a   b  masked signal threshold of audibility power  db  0 .02 .05 .1 .2 .5 1 2 5 10 20 figure 7-43  a  the threshold of audibility as a function of frequency  b  the masking effect now consider experiment 2 the computer runs experiment 1 again  but this time with a constant-amplitude sine wave at  say  150 hz superimposed on the test frequency what we discover is that the threshold of audibility for frequencies near 150 hz is raised  as shown in fig 7-43  b   the consequence of this new observation is that by keeping track of which signals are being masked by more powerful signals in nearby frequency bands  we can omit more and more frequencies in the encoded signal  saving bits in fig 7 43  the 125-hz signal can be completely omitted from the output and no one will be able to hear the difference even after a powerful signal stops in some frequency band  knowledge of its temporal masking properties allows us to continue to omit the masked frequencies for some time interval as the ear recovers the 704 the application layer chap 7 essence of mp3 and aac is to fourier-transform the sound to get the power at each frequency and then transmit only the unmasked frequencies  encoding these in as few bits as possible with this information as background  we can now see how the encoding is done the audio compression is done by sampling the waveform at a rate from 8 to 96 khz for aac  often at 44.1 khz  to mimic cd sound sampling can be done on one  mono  or two  stereo  channels next  the output bit rate is chosen mp3 can compress a stereo rock ? n roll cd down to 96 kbps with little perceptible loss in quality  even for rock ? n roll fans with no hearing loss for a piano concert  aac with at least 128 kbps is needed the difference is because the signalto noise ratio for rock ? n roll is much higher than for a piano concert  in an engineering sense  anyway   it is also possible to choose lower output rates and accept some loss in quality the samples are processed in small batches each batch is passed through a bank of digital filters to get frequency bands the frequency information is fed into a psychoacoustic model to determine the masked frequencies then the available bit budget is divided among the bands  with more bits allocated to the bands with the most unmasked spectral power  fewer bits allocated to unmasked bands with less spectral power  and no bits allocated to masked bands finally  the bits are encoded using huffman encoding  which assigns short codes to numbers that appear frequently and long codes to those that occur infrequently there are many more details for the curious reader for more information  see brandenburg  1999   7.4.2 digital video now that we know all about the ear  it is time to move on to the eye  no  this section is not followed by one on the nose  the human eye has the property that when an image appears on the retina  the image is retained for some number of milliseconds before decaying if a sequence of images is drawn at 50 images/sec  the eye does not notice that it is looking at discrete images all video systems exploit this principle to produce moving pictures the simplest digital representation of video is a sequence of frames  each consisting of a rectangular grid of picture elements  or pixels each pixel can be a single bit  to represent either black or white however  the quality of such a system is awful try using your favorite image editor to convert the pixels of a color image to black and white  and not shades of gray   the next step up is to use 8 bits per pixel to represent 256 gray levels this scheme gives high-quality ? ? black-and-white ? ? video for color video  many systems use 8 bits for each of the red  green and blue  rgb  primary color components this representation is possible because any color can be constructed from a linear superposition of red  green  and blue with the appropriate intensities with sec 7.4 streaming audio and video 705 24 bits per pixel  there are about 16 million colors  which is more than the human eye can distinguish on color lcd computer monitors and televisions  each discrete pixel is made up of closely spaced red  green and blue subpixels frames are displayed by setting the intensity of the subpixels  and the eye blends the color components common frame rates are 24 frames/sec  inherited from 35mm motion-picture film   30 frames/sec  inherited from ntsc u.s televisions   and 30 frames/sec  inherited from the pal television system used in nearly all the rest of the world    for the truly picky  ntsc color television runs at 29.97 frames/sec the original black-and-white system ran at 30 frames/sec  but when color was introduced  the engineers needed a bit of extra bandwidth for signaling so they reduced the frame rate to 29.97 ntsc videos intended for computers really use 30  pal was invented after ntsc and really uses 25.000 frames/sec to make this story complete  a third system  secam  is used in france  francophone africa  and eastern europe it was first introduced into eastern europe by then communist east germany so the east german people could not watch west german  pal  television lest they get bad ideas but many of these countries are switching to pal technology and politics at their best actually  for broadcast television  25 frames/sec is not quite good enough for smooth motion so the images are split into two fields  one with the odd-numbered scan lines and one with the even-numbered scan lines the two  half-resolution  fields are broadcast sequentially  giving almost 60  ntsc  or exactly 50  pal  fields/sec  a system known as interlacing videos intended for viewing on a computer are progressive  that is  do not use interlacing because computer monitors have buffers on their graphics cards  making it possible for the cpu to put a new image in the buffer 30 times/sec but have the graphics card redraw the screen 50 or even 100 times/sec to eliminate flicker analog television sets do not have a frame buffer the way computers do when an interlaced video with rapid movement is displayed on a computer  short horizontal lines will be visible near sharp edges  an effect known as combing the frame sizes used for video sent over the internet vary widely for the simple reason that larger frames require more bandwidth  which may not always be available low-resolution video might be 320 by 240 pixels  and ? ? full-screen ? ? video is 640 by 480 pixels these dimensions approximate those of early computer monitors and ntsc television  respectively the aspect ratio  or width to height ratio  of 4  3  is the same as a standard television hdtv  high-definition television  videos can be downloaded with 1280 by 720 pixels these ? ? widescreen ? ? images have an aspect ratio of 16  9 to more closely match the 3  2 aspect ratio of film for comparison  standard dvd video is usually 720 by 480 pixels  and video on blu-ray discs is usually hdtv at 1080 by 720 pixels on the internet  the number of pixels is only part of the story  as media players can present the same image at different sizes video is just another window on a computer screen that can be blown up or shrunk down the role of more 706 the application layer chap 7 pixels is to increase the quality of the image  so that it does not look blurry when it is expanded however  many monitors can show images  and hence videos  with even more pixels than even hdtv video compression it should be obvious from our discussion of digital video that compression is critical for sending video over the internet even a standard-quality video with 640 by 480 pixel frames  24 bits of color information per pixel  and 30 frames/sec takes over 200 mbps this far exceeds the bandwidth by which most company offices are connected to the internet  let alone home users  and this is for a single video stream since transmitting uncompressed video is completely out of the question  at least over wide area networks  the only hope is that massive compression is possible fortunately  a large body of research over the past few decades has led to many compression techniques and algorithms that make video transmission feasible many formats are used for video that is sent over the internet  some proprietary and some standard the most popular encoding is mpeg in its various forms it is an open standard found in files with mpg and mp4 extensions  as well as in other container formats in this section  we will look at mpeg to study how video compression is accomplished to begin  we will look at the compression of still images with jpeg a video is just a sequence of images  plus sound   one way to compress video is to encode each image in succession to a first approximation  mpeg is just the jpeg encoding of each frame  plus some extra features for removing the redundancy across frames the jpeg standard the jpeg  joint photographic experts group  standard for compressing continuous-tone still pictures  e.g  photographs  was developed by photographic experts working under the joint auspices of itu  iso  and iec  another standards body it is widely used  look for files with the extension jpg  and often provides compression ratios of 10  1 or better for natural images jpeg is defined in international standard 10918 really  it is more like a shopping list than a single algorithm  but of the four modes that are defined only the lossy sequential mode is relevant to our discussion furthermore  we will concentrate on the way jpeg is normally used to encode 24-bit rgb video images and will leave out some of the options and details for the sake of simplicity the algorithm is illustrated in fig 7-44 step 1 is block preparation for the sake of specificity  let us assume that the jpeg input is a 640 ? ? 480 rgb image with 24 bits/pixel  as shown in fig 7-44  a   rgb is not the best color model to use for compression the eye is much more sensitive to the luminance  or brightness  of video signals than the chrominance  or color  of video signals thus  we sec 7.4 streaming audio and video 707 first compute the luminance  y  and the two chrominances  cb and cr  from the r  g  and b components the following formulas are used for 8-bit values that range from 0 to 255  y = 16 + 0.26r + 0.50g + 0.09b cb = 128 + 0.15r ? ? 0.29g ? ? 0.44b cr = 128 + 0.44r ? ? 0.37g + 0.07b block preparation discrete cosine transform quantization differential quantization runlength encoding statistical output encoding input output figure 7-44 steps in jpeg lossy sequential encoding separate matrices are constructed for y  cb  and cr next  square blocks of four pixels are averaged in the cb and cr matrices to reduce them to 320 ? ? 240 this reduction is lossy  but the eye barely notices it since the eye responds to luminance more than to chrominance nevertheless  it compresses the total amount of data by a factor of two now 128 is subtracted from each element of all three matrices to put 0 in the middle of the range finally  each matrix is divided up into 8 ? ? 8 blocks the y matrix has 4800 blocks ; the other two have 1200 blocks each  as shown in fig 7-45  b   480 640  a   b  cr rgb y cb 640 480 240 320 240 1 block block 4799 8-bit pixel 24-bit pixel figure 7-45  a  rgb input data  b  after block preparation step 2 of jpeg encoding is to apply a dct  discrete cosine transformation  to each of the 7200 blocks separately the output of each dct is an 8 ? ? 8 matrix of dct coefficients dct element  0  0  is the average value of the block the other elements tell how much spectral power is present at each spatial frequency normally  these elements decay rapidly with distance from the origin   0  0   as suggested by fig 7-46 once the dct is complete  jpeg encoding moves on to step 3  called quantization  in which the less important dct coefficients are wiped out this  lossy  708 the application layer chap 7 y/cb/cr amplitude dct x fx y fy  a   b  figure 7-46  a  one block of the y matrix  b  the dct coefficients transformation is done by dividing each of the coefficients in the 8 ? ? 8 dct matrix by a weight taken from a table if all the weights are 1  the transformation does nothing however  if the weights increase sharply from the origin  higher spatial frequencies are dropped quickly an example of this step is given in fig 7-47 here we see the initial dct matrix  the quantization table  and the result obtained by dividing each dct element by the corresponding quantization table element the values in the quantization table are not part of the jpeg standard each application must supply its own  allowing it to control the loss-compression trade-off 150 92 52 12 4 2 1 0 80 75 38 8 3 2 1 0 40 36 26 6 2 1 0 0 14 10 8 4 0 1 0 0 4 6 7 2 0 0 0 0 2 1 4 1 0 0 0 0 1 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 dct coefficients quantization table quantized coefficients 150 92 26 3 1 0 0 0 80 75 19 2 0 0 0 0 20 18 13 2 0 0 0 0 4 3 2 1 0 0 0 0 1 1 1 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 1 1 2 4 8 16 32 64 1 1 2 4 8 16 32 64 2 2 2 4 8 16 32 64 4 4 4 4 8 16 32 64 8 8 8 8 8 16 32 64 16 16 16 16 16 16 32 64 32 32 32 32 32 32 32 64 64 64 64 64 64 64 64 64 figure 7-47 computation of the quantized dct coefficients step 4 reduces the  0  0  value of each block  the one in the upper-left corner  by replacing it with the amount it differs from the corresponding element in the previous block since these elements are the averages of their respective blocks  they should change slowly  so taking the differential values should reduce most of them to small values no differentials are computed from the other values sec 7.4 streaming audio and video 709 step 5 linearizes the 64 elements and applies run-length encoding to the list scanning the block from left to right and then top to bottom will not concentrate the zeros together  so a zigzag scanning pattern is used  as shown in fig 7-48 in this example  the zigzag pattern produces 38 consecutive 0s at the end of the matrix this string can be reduced to a single count saying there are 38 zeros  a technique known as run-length encoding 150 92 26 3 1 0 0 0 80 75 19 2 0 0 0 0 20 18 13 2 0 0 0 0 4 3 2 1 0 0 0 0 1 1 1 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 figure 7-48 the order in which the quantized values are transmitted now we have a list of numbers that represent the image  in transform space   step 6 huffman-encodes the numbers for storage or transmission  assigning common numbers shorter codes than uncommon ones jpeg may seem complicated  but that is because it is complicated still  the benefits of up to 20  1 compression are worth it decoding a jpeg image requires running the algorithm backward jpeg is roughly symmetric  decoding takes as long as encoding this property is not true of all compression algorithms  as we shall now see the mpeg standard finally  we come to the heart of the matter  the mpeg  motion picture experts group  standards though there are many proprietary algorithms  these standards define the main algorithms used to compress videos they have been international standards since 1993 because movies contain both images and sound  mpeg can compress both audio and video we have already examined audio compression and still image compression  so let us now examine video compression the mpeg-1 standard  which includes mp3 audio  was first published in 1993 and is still widely used its goal was to produce video-recorder-quality output that was compressed 40  1 to rates of around 1 mbps this video is suitable for 710 the application layer chap 7 broad internet use on web sites do not worry if you do not remember video recorders ? mpeg-1 was also used for storing movies on cds when they existed if you do not know what cds are  we will have to move on to mpeg-2 the mpeg-2 standard  released in 1996  was designed for compressing broadcast-quality video it is very common now  as it is used as the basis for video encoded on dvds  which inevitably finds its way onto the internet  and for digital broadcast television  as dvb   dvd quality video is typically encoded at rates of 4 ? 8 mbps the mpeg-4 standard has two video formats the first format  released in 1999  encodes video with an object-based representation this allows for the mixing of natural and synthetic images and other kinds of media  for example  a weatherperson standing in front of a weather map with this structure  it is easy to let programs interact with movie data the second format  released in 2003  is known as h.264 or avc  advanced video coding   its goal is to encode video at half the rate of earlier encoders for the same quality level  all the better to support the transmission of video over networks this encoder is used for hdtv on most blu-ray discs the details of all these standards are many and varied the later standards also have many more features and encoding options than the earlier standards however  we will not go into the details for the most part  the gains in video compression over time have come from numerous small improvements  rather than fundamental shifts in how video is compressed thus  we will sketch the overall concepts mpeg compresses both audio and video since the audio and video encoders work independently  there is an issue of how the two streams get synchronized at the receiver the solution is to have a single clock that outputs timestamps of the current time to both encoders these timestamps are included in the encoded output and propagated all the way to the receiver  which can use them to synchronize the audio and video streams mpeg video compression takes advantage of two kinds of redundancies that exist in movies  spatial and temporal spatial redundancy can be utilized by simply coding each frame separately with jpeg this approach is occasionally used  especially when random access to each frame is needed  as in editing video productions in this mode  jpeg levels of compression are achieved additional compression can be achieved by taking advantage of the fact that consecutive frames are often almost identical this effect is smaller than it might first appear since many movie directors cut between scenes every 3 or 4 seconds  time a movie fragment and count the scenes   nevertheless  runs of 75 or more highly similar frames offer the potential of a major reduction over simply encoding each frame separately with jpeg for scenes in which the camera and background are stationary and one or two actors are moving around slowly  nearly all the pixels will be identical from frame to frame here  just subtracting each frame from the previous one and running sec 7.4 streaming audio and video 711 jpeg on the difference would do fine however  for scenes where the camera is panning or zooming  this technique fails badly what is needed is some way to compensate for this motion this is precisely what mpeg does ; it is the main difference between mpeg and jpeg mpeg output consists of three kinds of frames  1 i  intracoded  frames  self-contained compressed still pictures 2 p  predictive  frames  block-by-block difference with the previous frames 3 b  bidirectional  frames  block-by-block differences between previous and future frames i-frames are just still pictures they can be coded with jpeg or something similar it is valuable to have i-frames appear in the output stream periodically  e.g  once or twice per second  for three reasons first  mpeg can be used for a multicast transmission  with viewers tuning in at will if all frames depended on their predecessors going back to the first frame  anybody who missed the first frame could never decode any subsequent frames second  if any frame were received in error  no further decoding would be possible  everything from then on would be unintelligble junk third  without i-frames  while doing a fast forward or rewind the decoder would have to calculate every frame passed over so it would know the full value of the one it stopped on p-frames  in contrast  code interframe differences they are based on the idea of macroblocks  which cover  for example  16 ? ? 16 pixels in luminance space and 8 ? ? 8 pixels in chrominance space a macroblock is encoded by searching the previous frame for it or something only slightly different from it an example of where p-frames would be useful is given in fig 7-49 here we see three consecutive frames that have the same background  but differ in the position of one person the macroblocks containing the background scene will match exactly  but the macroblocks containing the person will be offset in position by some unknown amount and will have to be tracked down figure 7-49 three consecutive frames the mpeg standards do not specify how to search  how far to search  or how good a match has to be in order to count this is up to each implementation for 712 the application layer chap 7 example  an implementation might search for a macroblock at the current position in the previous frame  and all other positions offset ? ? x in the x direction and ? ? y in the y direction for each position  the number of matches in the luminance matrix could be computed the position with the highest score would be declared the winner  provided it was above some predefined threshold otherwise  the macroblock would be said to be missing much more sophisticated algorithms are also possible  of course if a macroblock is found  it is encoded by taking the difference between its current value and the one in the previous frame  for luminance and both chrominances   these difference matrices are then subjected to the discrete cosine transformation  quantization  run-length encoding  and huffman encoding  as usual the value for the macroblock in the output stream is then the motion vector  how far the macroblock moved from its previous position in each direction   followed by the encoding of its difference if the macroblock is not located in the previous frame  the current value is encoded  just as in an i-frame clearly  this algorithm is highly asymmetric an implementation is free to try every plausible position in the previous frame if it wants to  in a desperate attempt to locate every last macroblock  no matter where it has moved to this approach will minimize the encoded mpeg stream at the expense of very slow encoding this approach might be fine for a one-time encoding of a film library but would be terrible for real-time videoconferencing similarly  each implementation is free to decide what constitutes a ? ? found ? ? macroblock this freedom allows implementers to compete on the quality and speed of their algorithms  but always produce compliant mpeg output so far  decoding mpeg is straightforward decoding i-frames is similar to decoding jpeg images decoding p-frames requires the decoder to buffer the previous frames so it can build up the new one in a separate buffer based on fully encoded macroblocks and macroblocks containing differences from the previous frames the new frame is assembled macroblock by macroblock b-frames are similar to p-frames  except that they allow the reference macroblock to be in either previous frames or succeeding frames this additional freedom allows for improved motion compensation it is useful  for example  when objects pass in front of  or behind  other objects to do b-frame encoding  the encoder needs to hold a sequence of frames in memory at once  past frames  the current frame being encoded  and future frames decoding is similarly more complicated and adds some delay this is because a given b-frame can not be decoded until the successive frames on which it depends are decoded thus  although bframes give the best compression  they are not always used due to their greater complexity and buffering requirements the mpeg standards contain many enhancements to these techniques to achieve excellent levels of compression avc can be used to compress video at ratios in excess of 50  1  which reduces network bandwidth requirements by the same factor for more information on avc  see sullivan and wiegand  2005   sec 7.4 streaming audio and video 713 7.4.3 streaming stored media let us now move on to network applications our first case is streaming media that is already stored in files the most common example of this is watching videos over the internet this is one form of vod  video on demand   other forms of video on demand use a provider network that is separate from the internet to deliver the movies  e.g  the cable network   in the next section  we will look at streaming live media  for example  broadcast iptv and internet radio then we will look at the third case of real-time conferencing an example is a voice-over-ip call or video conference with skype these three cases place increasingly stringent requirements on how we can deliver the audio and video over the network because we must pay increasing attention to delay and jitter the internet is full of music and video sites that stream stored media files actually  the easiest way to handle stored media is not to stream it imagine you want to create an online movie rental site to compete with apple ? s itunes a regular web site will let users download and then watch videos  after they pay  of course   the sequence of steps is shown in fig 7-50 we will spell them out to contrast them with the next example 3  save media 2  media response  http  1  media request  http  browser client media player web server server 4  play media disk disk figure 7-50 playing media over the web via simple downloads the browser goes into action when the user clicks on a movie in step 1  it sends an http request for the movie to the web server to which the movie is linked in step 2  the server fetches the movie  which is just a file in mp4 or some other format  and sends it back to the browser using the mime type  for example  video/mp4  the browser looks up how it is supposed to display the file in this case  it is with a media player that is shown as a helper application  though it could also be a plug-in the browser saves the entire movie to a scratch file on disk in step 3 it then starts the media player  passing it the name of the scratch file finally  in step 4 the media player starts reading the file and playing the movie in principle  this approach is completely correct it will play the movie there is no real-time network issue to address either because the download is simply a 714 the application layer chap 7 file download the only trouble is that the entire video must be transmitted over the network before the movie starts most customers do not want to wait an hour for their ? ? video on demand ? ? this model can be problematic even for audio imagine previewing a song before purchasing an album if the song is 4 mb  which is a typical size for an mp3 song  and the broadband connectivity is 1 mbps  the user will be greeted by half a minute of silence before the preview starts this model is unlikely to sell many albums to get around this problem without changing how the browser works  sites can use the design shown in fig 7-51 the page linked to the movie is not the actual movie file instead  it is what is called a metafile  a very short file just naming the movie  and possibly having other key descriptors   a simple metafile might be only one line of ascii text and look like this  rtsp  //joes-movie-server/movie-0025.mp4 the browser gets the page as usual  now a one-line file  in steps 1 and 2 then it starts the media player and hands it the one-line file in step 3  all as usual the media player reads the metafile and sees the url of where to get the movie it contacts joes-video-server and asks for the movie in step 4 the movie is then streamed back to the media player in step 5 the advantage of this arrangement is that the media player starts quickly  after only a very short metafile is downloaded once this happens  the browser is not in the loop any more the media is sent directly to the media player  which can start showing the movie before the entire file has been downloaded 4  media request  rtsp  2  metafile response  http  1  metafile request  http  browser client media player web server server media server server 3  handoff metafile 5  media response  via tcp or udp  disk figure 7-51 streaming media using the web and a media server we have shown two servers in fig 7-51 because the server named in the metafile is often not the same as the web server in fact  it is generally not even sec 7.4 streaming audio and video 715 an http server  but a specialized media server in this example  the media server uses rtsp  real time streaming protocol   as indicated by the scheme name rtsp the media player has four major jobs to do  1 manage the user interface 2 handle transmission errors 3 decompress the content 4 eliminate jitter most media players nowadays have a glitzy user interface  sometimes simulating a stereo unit  with buttons  knobs  sliders  and visual displays often there are interchangeable front panels  called skins  that the user can drop onto the player the media player has to manage all this and interact with the user the other jobs are related and depend on the network protocols we will go through each one in turn  starting with handling transmission errors dealing with errors depends on whether a tcp-based transport like http is used to transport the media  or a udp-based transport like rtp is used both are used in practice if a tcp-based transport is being used then there are no errors for the media player to correct because tcp already provides reliability by using retransmissions this is an easy way to handle errors  at least for the media player  but it does complicate the removal of jitter in a later step alternatively  a udp-based transport like rtp can be used to move the data we studied it in chap 6 with these protocols  there are no retransmissions thus  packet loss due to congestion or transmission errors will mean that some of the media does not arrive it is up to the media player to deal with this problem let us understand the difficulty we are up against the loss is a problem because customers do not like large gaps in their songs or movies however  it is not as much of a problem as loss in a regular file transfer because the loss of a small amount of media need not degrade the presentation for the user for video  the user is unlikely to notice if there are occasionally 24 new frames in some second instead of 25 new frames for audio  short gaps in the playout can be masked with sounds close in time the user is unlikely to detect this substitution unless they are paying very close attention the key to the above reasoning  however  is that the gaps are very short network congestion or a transmission error will generally cause an entire packet to be lost  and packets are often lost in small bursts two strategies can be used to reduce the impact of packet loss on the media that is lost  fec and interleaving we will describe each in turn fec  forward error correction  is simply the error-correcting coding that we studied in chap 3 applied at the application level parity across packets provides an example  shacham and mckenny  1990   for every four data packets 716 the application layer chap 7 that are sent  a fifth parity packet can be constructed and sent this is shown in fig 7-52 with packets a  b  c  and d the parity packet  p  contains redundant bits that are the parity or exclusive-or sums of the bits in each of the four data packets hopefully  all of the packets will arrive for most groups of five packets when this happens  the parity packet is simply discarded at the receiver or  if only the parity packet is lost  no harm is done lost packet construct parity  client media player media server server repair loss  parity packet b = p a + + c + d a b c d p p = a b + + c + d disk figure 7-52 using a parity packet to repair loss occasionally  however  a data packet may be lost during transmission  as b is in fig 7-52 the media player receives only three data packets  a  c  and d  plus the parity packet  p by design  the bits in the missing data packet can be reconstructed from the parity bits to be specific  using ? ? ? ? ? to represent exclusive-or or modulo 2 addition  b can be reconstructed as b ? ? p ? ? a ? ? c ? ? d by the properties of exclusive-or  i.e  x ? ? y ? ? y ? ? x   fec can reduce the level of loss seen by the media player by repairing some of the packet losses  but it only works up to a certain level if two packets in a group of five are lost  there is nothing we can do to recover the data the other property to note about fec is the cost that we have paid to gain this protection every four packets have become five packets  so the bandwidth requirements for the media are 25 % larger the latency of decoding has increased too  as we may need to wait until the parity packet has arrived before we can reconstruct a data packet that came before it there is also one clever trick in the technique above in chap 3  we described parity as providing error detection here we are providing error-correction how can it do both ? the answer is that in this case it is known which packet was lost the lost data is called an erasure in chap 3  when we considered a frame that was received with some bits in error  we did not know which bit was errored this case is harder to deal with than erasures thus  with erasures parity can provide error correction  and without erasures parity can only provide error detection we will see another unexpected benefit of parity soon  when we get to multicast scenarios the second strategy is called interleaving this approach is based on mixing up or interleaving the order of the media before transmission and unmixing or sec 7.4 streaming audio and video 717 deinterleaving it on reception that way  if a packet  or burst of packets  is lost  the loss will be spread out over time by the unmixing it will not result in a single  large gap when the media is played out for example  a packet might contain 220 stereo samples  each containing a pair of 16-bit numbers  normally good for 5 msec of music if the samples were sent in order  a lost packet would represent a 5 msec gap in the music instead  the samples are transmitted as shown in fig 7 53 all the even samples for a 10-msec interval are sent in one packet  followed by all the odd samples in the next one the loss of packet 3 now does not represent a 5-msec gap in the music  but the loss of every other sample for 10 msec this loss can be handled easily by having the media player interpolate using the previous and succeeding samples the result is lower temporal resolution for 10 msec  but not a noticeable time gap in the media even time sample legend odd time sample 0  b  packet  a  5 0 10 15 time  msec  20 lost this packet contains 220 even time samples 25 30 1 2 4 5 this packet contains 220 odd time samples figure 7-53 when packets carry alternate samples  the loss of a packet reduces the temporal resolution rather than creating a gap in time this interleaving scheme above only works with uncompressed sampling however  interleaving  over short periods of time  not individual samples  can also be applied after compression as long as there is a way to find sample boundaries in the compressed stream rfc 3119 gives a scheme that works with compressed audio interleaving is an attractive technique when it can be used because it needs no additional bandwidth  unlike fec however  interleaving adds to the latency  just like fec  because of the need to wait for a group of packets to arrive  so they can be de-interleaved   the media player ? s third job is decompressing the content although this task is computationally intensive  it is fairly straightforward the thorny issue is how to decode media if the network protocol does not correct transmission errors in many compression schemes  later data can not be decompressed until the earlier data has been decompressed  because the later data is encoded relative to the earlier data for a udp-based transport  there can be packet loss thus  the encoding 718 the application layer chap 7 process must be designed to permit decoding despite packet loss this requirement is why mpeg uses i  p and b-frames each i-frame can be decoded independently of the other frames to recover from the loss of any earlier frames the fourth job is to eliminate jitter  the bane of all real-time systems the general solution that we described in sec 6.4.3 is to use a playout buffer all streaming systems start by buffering 5 ? 10 sec worth of media before starting to play  as shown in fig 7-54 playing drains media regularly from the buffer so that the audio is clear and the video is smooth the startup delay gives the buffer a chance to fill to the low-water mark the idea is that data should now arrive regularly enough that the buffer is never completely emptied if that were to happen  the media playout would stall the value of buffering is that if the data are sometimes slow to arrive due to congestion  the buffered media will allow the playout to continue normally until new media arrive and the buffer is replenished buffer lowwater mark highwater mark media player media server client machine server machine figure 7-54 the media player buffers input from the media server and plays from the buffer rather than directly from the network how much buffering is needed  and how fast the media server sends media to fill up the buffer  depend on the network protocols there are many possibilities the largest factor in the design is whether a udp-based transport or a tcp-based transport is used suppose that a udp-based transport like rtp is used further suppose that there is ample bandwidth to send packets from the media server to the media player with little loss  and little other traffic in the network in this case  packets can be sent at the exact rate that the media is being played each packet will transit the network and  after a propagation delay  arrive at about the right time for the media player to present the media very little buffering is needed  as there is no variability in delay if interleaving or fec is used  more buffering is needed for at least the group of packets over which the interleaving or fec is performed however  this adds only a small amount of buffering unfortunately  this scenario is unrealistic in two respects first  bandwidth varies over network paths  so it is usually not clear to the media server whether there will be sufficient bandwidth before it tries to stream the media a simple solution is to encode media at multiple resolutions and let each user choose a sec 7.4 streaming audio and video 719 resolution that is supported by his internet connectivity often there are just two levels  high quality  say  encoded at 1.5 mbps or better  and low quality  say encoded at 512 kbps or less second  there will be some jitter  or variation in how long it takes media samples to cross the network this jitter comes from two sources there is often an appreciable amount of competing traffic in the network ? some of which can come from multitasking users themselves browsing the web while ostensibly watching a streamed movie   this traffic will cause fluctuations in when the media arrives moreover  we care about the arrival of video frames and audio samples  not packets with compression  video frames in particular may be larger or smaller depending on their content an action sequence will typically take more bits to encode than a placid landscape if the network bandwidth is constant  the rate of media delivery versus time will vary the more jitter  or variation in delay  from these sources  the larger the low-water mark of the buffer needs to be to avoid underrun now suppose that a tcp-based transport like http is used to send the media by performing retransmissions and waiting to deliver packets until they are in order  tcp will increase the jitter that is observed by the media player  perhaps significantly the result is that a larger buffer and higher low-water mark are needed however  there is an advantage tcp will send data as fast as the network will carry it sometimes media may be delayed if loss must be repaired but much of the time  the network will be able to deliver media faster than the player consumes it in these periods  the buffer will fill and prevent future underruns if the network is significantly faster than the average media rate  as is often the case  the buffer will fill rapidly after startup such that emptying it will soon cease to be a concern with tcp  or with udp and a transmission rate that exceeds the playout rate  a question is how far ahead of the playout point the media player and media server are willing to proceed often they are willing to download the entire file however  proceeding far ahead of the playout point performs work that is not yet needed  may require significant storage  and is not necessary to avoid buffer underruns when it is not wanted  the solution is for the media player to define a high-water mark in the buffer basically  the server just pumps out data until the buffer is filled to the high-water mark then the media player tells it to pause since data will continue to pour in until the server has gotten the pause request  the distance between the high-water mark and the end of the buffer has to be greater than the bandwidth-delay product of the network after the server has stopped  the buffer will begin to empty when it hits the low-water mark  the media player tells the media server to start again to avoid underrun  the low-water mark must also take the bandwidth-delay product of the network into account when asking the media server to resume sending the media to start and stop the flow of media  the media player needs a remote control for it this is what rtsp provides it is defined in rfc 2326 and provides the 720 the application layer chap 7 mechanism for the player to control the server as well as starting and stopping the stream  it can seek back or forward to a position  play specified intervals  and play at fast or slow speeds it does not provide for the data stream  though  which is usually rtp over udp or rtp over http over tcp the main commands provided by rtsp are listed in fig 7-55 they have a simple text format  like http messages  and are usually carried over tcp rtsp can run over udp too  since each command is acknowledged  and so can be resent if it is not acknowledged   command server action describe list media parameters setup establish a logical channel between the player and the server play start sending data to the client record start accepting data from the client pause temporarily stop sending data teardown release the logical channel figure 7-55 rtsp commands from the player to the server even though tcp would seem a poor fit to real-time traffic  it is often used in practice the main reason is that it is able to pass through firewalls more easily than udp  especially when run over the http port most administrators configure firewalls to protect their networks from unwelcome visitors they almost always allow tcp connections from remote port 80 to pass through for http and web traffic blocking that port quickly leads to unhappy campers however  most other ports are blocked  including for rstp and rtp  which use ports 554 and 5004  amongst others thus  the easiest way to get streaming media through the firewall is for the web site to pretend it is an http server sending a regular http response  at least to the firewall there are some other advantages of tcp  too because it provides reliability  tcp gives the client a complete copy of the media this makes it easy for a user to rewind to a previously viewed playout point without concern for lost data finally  tcp will buffer as much of the media as possible as quickly as possible when buffer space is cheap  which it is when the disk is used for storage   the media player can download the media while the user watches once the download is complete  the user can watch uninterrupted  even if he loses connectivity this property is helpful for mobiles because connectivity can change rapidly with motion the disadvantage of tcp is the added startup latency  because of tcp startup  and also a higher low-water mark however  this is rarely much of a penalty as long as the network bandwidth exceeds the media rate by a large factor sec 7.4 streaming audio and video 721 7.4.4 streaming live media it is not only recorded videos that are tremendously popular on the web live media streaming is very popular too once it became possible to stream audio and video over the internet  commercial radio and tv stations got the idea of broadcasting their content over the internet as well as over the air not so long after that  college stations started putting their signals out over the internet then college students started their own internet broadcasts today  people and companies of all sizes stream live audio and video the area is a hotbed of innovation as the technologies and standards evolve live streaming is used for an online presence by major television stations this is called iptv  ip television   it is also used to broadcast radio stations like the bbc this is called internet radio both iptv and internet radio reach audiences worldwide for events ranging from fashion shows to world cup soccer and test matches live from the melbourne cricket ground live streaming over ip is used as a technology by cable providers to build their own broadcast systems and it is widely used by low-budget operations from adult sites to zoos with current technology  virtually anyone can start live streaming quickly and with little expense one approach to live streaming is to record programs to disk viewers can connect to the server ? s archives  pull up any program  and download it for listening a podcast is an episode retrieved in this manner for scheduled events  it is also possible to store content just after it is broadcast live  so the archive is only running  say  half an hour or less behind the live feed in fact  this approach is exactly the same as that used for the streaming media we just discussed it is easy to do  all the techniques we have discussed work for it  and viewers can pick and choose among all the programs in the archive a different approach is to broadcast live over the internet viewers tune in to an ongoing media stream  just like turning on the television however  media players provide the added features of letting the user pause or rewind the playout the live media will continue to be streamed and will be buffered by the player until the user is ready for it from the browser ? s point of view  it looks exactly like the case of streaming stored media it does not matter to the player whether the content comes from a file or is being sent live  and usually the player will not be able to tell  except that it is not possible to skip forward with a live stream   given the similarity of mechanism  much of our previous discussion applies  but there are also some key differences importantly  there is still the need for buffering at the client side to smooth out jitter in fact  a larger amount of buffering is often needed for live streaming  independent of the consideration that the user may pause playback   when streaming from a file  the media can be pushed out at a rate that is greater than the playback rate this will build up a buffer quickly to compensate for network jitter  and the player will stop the stream if it does not want to buffer more data   in contrast  live media streaming is always transmitted at precisely the rate it is 722 the application layer chap 7 generated  which is the same as the rate at which it is played back it can not be sent faster than this as a consequence  the buffer must be large enough to handle the full range of network jitter in practice  a 10 ? 15 second startup delay is usually adequate  so this is not a large problem the other important difference is that live streaming events usually have hundreds or thousands of simultaneous viewers of the same content under these circumstances  the natural solution for live streaming is to use multicasting this is not the case for streaming stored media because the users typically stream different content at any given time streaming to many users then consists of many individual streaming sessions that happen to occur at the same time a multicast streaming scheme works as follows the server sends each media packet once using ip multicast to a group address the network delivers a copy of the packet to each member of the group all of the clients who want to receive the stream have joined the group the clients do this using igmp  rather than sending an rtsp message to the media server this is because the media server is already sending the live stream  except before the first user joins   what is needed is to arrange for the stream to be received locally since multicast is a one-to-many delivery service  the media is carried in rtp packets over a udp transport tcp only operates between a single sender and a single receiver since udp does not provide reliability  some packets may be lost to reduce the level of media loss to an acceptable level  we can use fec and interleaving  as before in the case of fec  there is a beneficial interaction with multicast that is shown in the parity example of fig 7-56 when the packets are multicast  different clients may lose different packets for example  client 1 has lost packet b  client 2 lost the parity packet p  client 3 lost d  and client 4 did not lose any packets however  even though three different packets are lost across the clients  each client can recover all of the data packets in this example all that is required is that each client lose no more than one packet  whichever one it may be  so that the missing packet can be recovered by a parity computation nonnenmacher et al  1997  describe how this idea can be used to boost reliability for a server with a large number of clients  multicast of media in rtp and udp packets is clearly the most efficient way to operate otherwise  the server must transmit n streams when it has n clients  which will require a very large amount of network bandwidth at the server for large streaming events it may surprise you to learn that the internet does not work like this in practice what usually happens is that each user establishes a separate tcp connection to the server  and the media is streamed over that connection to the client  this is the same as streaming stored media and as with streaming stored media  there are several reasons for this seemingly poor choice the first reason is that ip multicast is not broadly available on the internet some isps and networks support it internally  but it is usually not available across network boundaries as is needed for wide-area streaming the other reasons are sec 7.4 streaming audio and video 723 different packets lost client 4 server p d c b a multicast parity packet rtp/udp data packet client 3 client 2 client 1 p d c b a p d c b a p d c b a p d c b a figure 7-56 multicast streaming media with a parity packet the same advantages of tcp over udp as discussed earlier streaming with tcp will reach nearly all clients on the internet  particularly when disguised as http to pass through firewalls  and reliable media delivery allows users to rewind easily there is one important case in which udp and multicast can be used for streaming  however  within a provider network for example  a cable company might decide to broadcast tv channels to customer set-top boxes using ip technology instead of traditional video broadcasts the use of ip to distribute broadcast video is broadly called iptv  as discussed above since the cable company has complete control of its own network  it can engineer it to support ip multicast and have sufficient bandwidth for udp-based distribution all of this is invisible to the customer  as the ip technology exists within the walled garden of the provider it looks just like cable tv in terms of service  but it is ip underneath  with the set-top box being a computer running udp and the tv set being simply a monitor attached to the computer back to the internet case  the disadvantage of live streaming over tcp is that the server must send a separate copy of the media for each client this is feasible for a moderate number of clients  especially for audio the trick is to place the server at a location with good internet connectivity so that there is sufficient bandwidth usually this means renting a server in a data center from a hosting provider  not using a server at home with only broadband internet connectivity there is a very competitive hosting market  so this need not be expensive in fact  it is easy for anybody  even a student  to set up and operate a streaming media server such as an internet radio station the main components of this 724 the application layer chap 7 station are illustrated in fig 7-57 the basis of the station is an ordinary pc with a decent sound card and microphone popular software is used to capture audio and encode it in various formats  for example  mp4  and media players are used to listen to the audio as usual student ? s pc microphone media audio player capture plug-in codec plug-in tcp connections to listeners media server internet figure 7-57 a student radio station the audio stream captured on the pc is then fed over the internet to a media server with good network connectivity  either as podcasts for stored file streaming or for live streaming the server handles the task of distributing the media via large numbers of tcp connections it also presents a front-end web site with pages about the station and links to the content that is available for streaming there are commercial software packages for managing all the pieces  as well as open source packages such as icecast however  for a very large number of clients  it becomes infeasible to use tcp to send media to each client from a single server there is simply not enough bandwidth to the one server for large streaming sites  the streaming is done using a set of servers that are geographically spread out  so that a client can connect to the nearest server this is a content distribution network that we will study at the end of the chapter 7.4.5 real-time conferencing once upon a time  voice calls were carried over the public switched telephone network  and network traffic was primarily voice traffic  with a little bit of data traffic here and there then came the internet  and the web the data traffic grew and grew  until by 1999 there was as much data traffic as voice traffic  since voice is now digitized  both can be measured in bits   by 2002  the volume of data traffic was an order of magnitude more than the volume of voice traffic and still growing exponentially  with voice traffic staying almost flat the consequence of this growth has been to flip the telephone network on its head voice traffic is now carried using internet technologies  and represents only sec 7.4 streaming audio and video 725 a tiny fraction of the network bandwidth this disruptive technology is known as voice over ip  and also as internet telephony voice-over-ip is used in several forms that are driven by strong economic factors  english translation  it saves money so people use it  one form is to have what look like regular  old-fashioned ?  telephones that plug into the ethernet and send calls over the network pehr anderson was an undergraduate student at m.i.t when he and his friends prototyped this design for a class project they got a ? ? b ? ? grade not content  he started a company called nbx in 1996  pioneered this kind of voice over ip  and sold it to 3com for $ 90 million three years later companies love this approach because it lets them do away with separate telephone lines and make do with the networks that they have already another approach is to use ip technology to build a long-distance telephone network in countries such as the u.s  this network can be accessed for competitive long-distance service by dialing a special prefix voice samples are put into packets that are injected into the network and pulled out of the packets when they leave it since ip equipment is much cheaper than telecommunications equipment this leads to cheaper services as an aside  the difference in price is not entirely technical for many decades  telephone service was a regulated monopoly that guaranteed the phone companies a fixed percentage profit over their costs not surprisingly  this led them to run up costs  for example  by having lots and lots of redundant hardware  justified in the name of better reliability  the telephone system was only allowed to be down for a total of 2 hours every 40 years  or 3 min/year on average   this effect was often referred to as the ? ? gold-plated telephone pole syndrome ? ? since deregulation  the effect has decreased  of course  but legacy equipment still exists the it industry never had any history operating like this  so it has always been lean and mean however  we will concentrate on the form of voice over ip that is likely the most visible to users  using one computer to call another computer this form became commonplace as pcs began shipping with microphones  speakers  cameras  and cpus fast enough to process media  and people started connecting to the internet from home at broadband rates a well-known example is the skype software that was released starting in 2003 skype and other companies also provide gateways to make it easy to call regular telephone numbers as well as computers with ip addresses as network bandwidth increased  video calls joined voice calls initially  video calls were in the domain of companies videoconferencing systems were designed to exchange video between two or more locations enabling executives at different locations to see each other while they held their meetings however  with good broadband internet connectivity and video compression software  home users can also videoconference tools such as skype that started as audio-only now routinely include video with the calls so that friends and family across the world can see as well as hear each other 726 the application layer chap 7 from our point of view  internet voice or video calls are also a media streaming problem  but one that is much more constrained than streaming a stored file or a live event the added constraint is the low latency that is needed for a two-way conversation the telephone network allows a one-way latency of up to 150 msec for acceptable usage  after which delay begins to be perceived as annoying by the participants  international calls may have a latency of up to 400 msec  by which point they are far from a positive user experience  this low latency is difficult to achieve certainly  buffering 5 ? 10 seconds of media is not going to work  as it would for broadcasting a live sports event   instead  video and voice-over-ip systems must be engineered with a variety of techniques to minimize latency this goal means starting with udp as the clear choice rather than tcp  because tcp retransmissions introduce at least one round-trip worth of delay some forms of latency can not be reduced  however  even with udp for example  the distance between seattle and amsterdam is close to 8,000 km the speed-of-light propagation delay for this distance in optical fiber is 40 msec good luck beating that in practice  the propagation delay through the network will be longer because it will cover a larger distance  the bits do not follow a great circle route  and have transmission delays as each ip router stores and forwards a packet this fixed delay eats into the acceptable delay budget another source of latency is related to packet size normally  large packets are the best way to use network bandwidth because they are more efficient however  at an audio sampling rate of 64 kbps  a 1-kb packet would take 125 msec to fill  and even longer if the samples are compressed   this delay would consume most of the overall delay budget in addition  if the 1-kb packet is sent over a broadband access link that runs at just 1 mbps  it will take 8 msec to transmit then add another 8 msec for the packet to go over the broadband link at the other end clearly  large packets will not work instead  voice-over-ip systems use short packets to reduce latency at the cost of bandwidth efficiency they batch audio samples in smaller units  commonly 20 msec at 64 kbps  this is 160 bytes of data  less with compression however  by definition the delay from this packetization will be 20 msec the transmission delay will be smaller as well because the packet is shorter in our example  it would reduce to around 1 msec by using short packets  the minimum one-way delay for a seattle-to-amsterdam packet has been reduced from an unacceptable 181 msec  40 ? ? 125 ? ? 16  to an acceptable 62 msec  40 ? ? 20 ? ? 2   we have not even talked about the software overhead  but it  too  will eat up some of the delay budget this is especially true for video  since compression is usually needed to fit video into the available bandwidth unlike streaming from a stored file  there is no time to have a computationally intensive encoder for high levels of compression the encoder and the decoder must both run quickly buffering is still needed to play out the media samples on time  to avoid unintelligible audio or jerky video   but the amount of buffering must be kept very small since the time remaining in our delay budget is measured in milliseconds sec 7.4 streaming audio and video 727 when a packet takes too long to arrive  the player will skip over the missing samples  perhaps playing ambient noise or repeating a frame to mask the loss to the user there is a trade-off between the size of the buffer used to handle jitter and the amount of media that is lost a smaller buffer reduces latency but results in more loss due to jitter eventually  as the size of the buffer shrinks  the loss will become noticeable to the user observant readers may have noticed that we have said nothing about the network layer protocols so far in this section the network can reduce latency  or at least jitter  by using quality of service mechanisms the reason that this issue has not come up before is that streaming is able to operate with substantial latency  even in the live streaming case if latency is not a major concern  a buffer at the end host is sufficient to handle the problem of jitter however  for real-time conferencing  it is usually important to have the network reduce delay and jitter to help meet the delay budget the only time that it is not important is when there is so much network bandwidth that everyone gets good service in chap 5  we described two quality of service mechanisms that help with this goal one mechanism is ds  differentiated services   in which packets are marked as belonging to different classes that receive different handling within the network the appropriate marking for voice-over-ip packets is low delay in practice  systems set the ds codepoint to the well-known value for the expedited forwarding class with low delay type of service this is especially useful over broadband access links  as these links tend to be congested when web traffic or other traffic competes for use of the link given a stable network path  delay and jitter are increased by congestion every 1-kb packet takes 8 msec to send over a 1-mbps link  and a voice-over-ip packet will incur these delays if it is sitting in a queue behind web traffic however  with a low delay marking the voice-over-ip packets will jump to the head of the queue  bypassing the web packets and lowering their delay the second mechanism that can reduce delay is to make sure that there is sufficient bandwidth if the available bandwidth varies or the transmission rate fluctuates  as with compressed video  and there is sometimes not sufficient bandwidth  queues will build up and add to the delay this will occur even with ds to ensure sufficient bandwidth  a reservation can be made with the network this capability is provided by integrated services unfortunately  it is not widely deployed instead  networks are engineered for an expected traffic level or network customers are provided with service-level agreements for a given traffic level applications must operate below this level to avoid causing congestion and introducing unnecessary delays for casual videoconferencing at home  the user may choose a video quality as a proxy for bandwidth needs  or the software may test the network path and select an appropriate quality automatically any of the above factors can cause the latency to become unacceptable  so real-time conferencing requires that attention be paid to all of them for an overview of voice over ip and analysis of these factors  see goode  2002   728 the application layer chap 7 now that we have discussed the problem of latency in the media streaming path  we will move on to the other main problem that conferencing systems must address this problem is how to set up and tear down calls we will look at two protocols that are widely used for this purpose  h.323 and sip skype is another important system  but its inner workings are proprietary h.323 one thing that was clear to everyone before voice and video calls were made over the internet was that if each vendor designed its own protocol stack  the system would never work to avoid this problem  a number of interested parties got together under itu auspices to work out standards in 1996  itu issued recommendation h.323  entitled ? ? visual telephone systems and equipment for local area networks which provide a non-guaranteed quality of service ? ? only the telephone industry would think of such a name it was quickly changed to ? ? packet based multimedia communications systems ? ? in the 1998 revision h.323 was the basis for the first widespread internet conferencing systems it remains the most widely deployed solution  in its seventh version as of 2009 h.323 is more of an architectural overview of internet telephony than a specific protocol it references a large number of specific protocols for speech coding  call setup  signaling  data transport  and other areas rather than specifying these things itself the general model is depicted in fig 7-58 at the center is a gateway that connects the internet to the telephone network it speaks the h.323 protocols on the internet side and the pstn protocols on the telephone side the communicating devices are called terminals a lan may have a gatekeeper  which controls the end points under its jurisdiction  called a zone internet gatekeeper telephone network zone terminal gateway figure 7-58 the h.323 architectural model for internet telephony a telephone network needs a number of protocols to start with  there is a protocol for encoding and decoding audio and video standard telephony representations of a single voice channel as 64 kbps of digital audio  8000 samples of 8 bits per second  are defined in itu recommendation g.711 all h.323 systems sec 7.4 streaming audio and video 729 must support g.711 other encodings that compress speech are permitted  but not required they use different compression algorithms and make different tradeoffs between quality and bandwidth for video  the mpeg forms of video compression that we described above are supported  including h.264 since multiple compression algorithms are permitted  a protocol is needed to allow the terminals to negotiate which one they are going to use this protocol is called h.245 it also negotiates other aspects of the connection such as the bit rate rtcp is need for the control of the rtp channels also required is a protocol for establishing and releasing connections  providing dial tones  making ringing sounds  and the rest of the standard telephony itu q.931 is used here the terminals need a protocol for talking to the gatekeeper  if present  as well for this purpose  h.225 is used the pc-to-gatekeeper channel it manages is called the ras  registration/admission/status  channel this channel allows terminals to join and leave the zone  request and return bandwidth  and provide status updates  among other things finally  a protocol is needed for the actual data transmission rtp over udp is used for this purpose it is managed by rtcp  as usual the positioning of all these protocols is shown in fig 7-59 link layer protocol ip audio g.7xx rtp physical layer protocol udp tcp video h.26x rtcp h.225  ras  q.931  signaling  h.245  call control  control figure 7-59 the h.323 protocol stack to see how these protocols fit together  consider the case of a pc terminal on a lan  with a gatekeeper  calling a remote telephone the pc first has to discover the gatekeeper  so it broadcasts a udp gatekeeper discovery packet to port 1718 when the gatekeeper responds  the pc learns the gatekeeper ? s ip address now the pc registers with the gatekeeper by sending it a ras message in a udp packet after it has been accepted  the pc sends the gatekeeper a ras admission message requesting bandwidth only after bandwidth has been granted may call setup begin the idea of requesting bandwidth in advance is to allow the gatekeeper to limit the number of calls it can then avoid oversubscribing the outgoing line in order to help provide the necessary quality of service 730 the application layer chap 7 as an aside  the telephone system does the same thing when you pick up the receiver  a signal is sent to the local end office if the office has enough spare capacity for another call  it generates a dial tone if not  you hear nothing nowadays  the system is so overdimensioned that the dial tone is nearly always instantaneous  but in the early days of telephony  it often took a few seconds so if your grandchildren ever ask you ? ? why are there dial tones ? ? ? now you know except by then  probably telephones will no longer exist the pc now establishes a tcp connection to the gatekeeper to begin call setup call setup uses existing telephone network protocols  which are connection oriented  so tcp is needed in contrast  the telephone system has nothing like ras to allow telephones to announce their presence  so the h.323 designers were free to use either udp or tcp for ras  and they chose the lower-overhead udp now that it has bandwidth allocated  the pc can send a q.931 setup message over the tcp connection this message specifies the number of the telephone being called  or the ip address and port  if a computer is being called   the gatekeeper responds with a q.931 call proceeding message to acknowledge correct receipt of the request the gatekeeper then forwards the setup message to the gateway the gateway  which is half computer  half telephone switch  then makes an ordinary telephone call to the desired  ordinary  telephone the end office to which the telephone is attached rings the called telephone and also sends back a q.931 alert message to tell the calling pc that ringing has begun when the person at the other end picks up the telephone  the end office sends back a q.931 connect message to signal the pc that it has a connection once the connection has been established  the gatekeeper is no longer in the loop  although the gateway is  of course subsequent packets bypass the gatekeeper and go directly to the gateway ? s ip address at this point  we just have a bare tube running between the two parties this is just a physical layer connection for moving bits  no more neither side knows anything about the other one the h.245 protocol is now used to negotiate the parameters of the call it uses the h.245 control channel  which is always open each side starts out by announcing its capabilities  for example  whether it can handle video  h.323 can handle video  or conference calls  which codecs it supports  etc once each side knows what the other one can handle  two unidirectional data channels are set up and a codec and other parameters are assigned to each one since each side may have different equipment  it is entirely possible that the codecs on the forward and reverse channels are different after all negotiations are complete  data flow can begin using rtp it is managed using rtcp  which plays a role in congestion control if video is present  rtcp handles the audio/video synchronization the various channels are shown in fig 7-60 when either party hangs up  the q.931 call signaling channel is used to tear down the connection after the call has been completed in order to free up resources no longer needed sec 7.4 streaming audio and video 731 data control channel  rtcp  reverse data channel  rtp  forward data channel  rtp  call control channel  h.245  call signaling channel  q.931  caller callee figure 7-60 logical channels between the caller and callee during a call when the call is terminated  the calling pc contacts the gatekeeper again with a ras message to release the bandwidth it has been assigned alternatively  it can make another call we have not said anything about quality of service as part of h.323  even though we have said it is an important part of making real-time conferencing a success the reason is that qos falls outside the scope of h.323 if the underlying network is capable of producing a stable  jitter-free connection from the calling pc to the gateway  the qos on the call will be good ; otherwise  it will not be however  any portion of the call on the telephone side will be jitter-free  because that is how the telephone network is designed sip ? the session initiation protocol h.323 was designed by itu many people in the internet community saw it as a typical telco product  large  complex  and inflexible consequently  ietf set up a committee to design a simpler and more modular way to do voice over ip the major result to date is sip  session initiation protocol   the latest version is described in rfc 3261  which was written in 2002 this protocol describes how to set up internet telephone calls  video conferences  and other multimedia connections unlike h.323  which is a complete protocol suite  sip is a single module  but it has been designed to interwork well with existing internet applications for example  it defines telephone numbers as urls  so that web pages can contain them  allowing a click on a link to initiate a telephone call  the same way the mailto scheme allows a click on a link to bring up a program to send an email message   sip can establish two-party sessions  ordinary telephone calls   multiparty sessions  where everyone can hear and speak   and multicast sessions  one sender  many receivers   the sessions may contain audio  video  or data  the latter being useful for multiplayer real-time games  for example sip just handles setup  management  and termination of sessions other protocols  such as rtp/rtcp  are 732 the application layer chap 7 also used for data transport sip is an application-layer protocol and can run over udp or tcp  as required sip supports a variety of services  including locating the callee  who may not be at his home machine  and determining the callee ? s capabilities  as well as handling the mechanics of call setup and termination in the simplest case  sip sets up a session from the caller ? s computer to the callee ? s computer  so we will examine that case first telephone numbers in sip are represented as urls using the sip scheme  for example  sip  ilse @ cs.university.edu for a user named ilse at the host specified by the dns name cs.university.edu sip urls may also contain ipv4 addresses  ipv6 addresses  or actual telephone numbers the sip protocol is a text-based protocol modeled on http one party sends a message in ascii text consisting of a method name on the first line  followed by additional lines containing headers for passing parameters many of the headers are taken from mime to allow sip to interwork with existing internet applications the six methods defined by the core specification are listed in fig 7-61 method description invite request initiation of a session ack confirm that a session has been initiated bye request termination of a session options query a host about its capabilities cancel cancel a pending request register inform a redirection server about the user ? s current location figure 7-61 sip methods to establish a session  the caller either creates a tcp connection with the callee and sends an invite message over it or sends the invite message in a udp packet in both cases  the headers on the second and subsequent lines describe the structure of the message body  which contains the caller ? s capabilities  media types  and formats if the callee accepts the call  it responds with an http-type reply code  a three-digit number using the groups of fig 7-38  200 for acceptance   following the reply-code line  the callee also may supply information about its capabilities  media types  and formats connection is done using a three-way handshake  so the caller responds with an ack message to finish the protocol and confirm receipt of the 200 message either party may request termination of a session by sending a message with the bye method when the other side acknowledges it  the session is terminated the options method is used to query a machine about its own capabilities it is typically used before a session is initiated to find out if that machine is even capable of voice over ip or whatever type of session is being contemplated sec 7.4 streaming audio and video 733 the register method relates to sip ? s ability to track down and connect to a user who is away from home this message is sent to a sip location server that keeps track of who is where that server can later be queried to find the user ? s current location the operation of redirection is illustrated in fig 7-62 here  the caller sends the invite message to a proxy server to hide the possible redirection the proxy then looks up where the user is and sends the invite message there it then acts as a relay for the subsequent messages in the three-way handshake the lookup and reply messages are not part of sip ; any convenient protocol can be used  depending on what kind of location server is used 6 ok 5 ok 1 invite 2 lookup 3 reply 4 invite 7 ack 8 ack caller callee location server proxy 9 data figure 7-62 use of a proxy server and redirection with sip sip has a variety of other features that we will not describe here  including call waiting  call screening  encryption  and authentication it also has the ability to place calls from a computer to an ordinary telephone  if a suitable gateway between the internet and telephone system is available comparison of h.323 and sip both h.323 and sip allow two-party and multiparty calls using both computers and telephones as end points both support parameter negotiation  encryption  and the rtp/rtcp protocols a summary of their similarities and differences is given in fig 7-63 although the feature sets are similar  the two protocols differ widely in philosophy h.323 is a typical  heavyweight  telephone-industry standard  specifying the complete protocol stack and defining precisely what is allowed and what is forbidden this approach leads to very well defined protocols in each layer  easing the task of interoperability the price paid is a large  complex  and rigid standard that is difficult to adapt to future applications in contrast  sip is a typical internet protocol that works by exchanging short lines of ascii text it is a lightweight module that interworks well with other internet protocols but less well with existing telephone system signaling protocols 734 the application layer chap 7 item h.323 sip designed by itu ietf compatibility with pstn yes largely compatibility with internet yes  over time yes architecture monolithic modular completeness full protocol stack sip just handles setup parameter negotiation yes yes call signaling q.931 over tcp sip over tcp or udp message format binary ascii media transport rtp/rtcp rtp/rtcp multiparty calls yes yes multimedia conferences yes no addressing url or phone number url call termination explicit or tcp release explicit or timeout instant messaging no yes encryption yes yes size of standards 1400 pages 250 pages implementation large and complex moderate  but issues status widespread  esp video alternative  esp voice figure 7-63 comparison of h.323 and sip because the ietf model of voice over ip is highly modular  it is flexible and can be adapted to new applications easily the downside is that is has suffered from ongoing interoperability problems as people try to interpret what the standard means 7.5 content delivery the internet used to be all about communication  like the telephone network early on  academics would communicate with remote machines  logging in over the network to perform tasks people have used email to communicate with each other for a long time  and now use video and voice over ip as well since the web grew up  however  the internet has become more about content than communication many people use the web to find information  and there is a tremendous amount of peer-to-peer file sharing that is driven by access to movies  music  and programs the switch to content has been so pronounced that the majority of internet bandwidth is now used to deliver stored videos sec 7.5 content delivery 735 because the task of distributing content is different from that of communication  it places different requirements on the network for example  if sally wants to talk to jitu  she may make a voice-over-ip call to his mobile the communication must be with a particular computer ; it will do no good to call paul ? s computer but if jitu wants to watch his team ? s latest cricket match  he is happy to stream video from whichever computer can provide the service he does not mind whether the computer is sally ? s or paul ? s  or  more likely  an unknown server in the internet that is  location does not matter for content  except as it affects performance  and legality   the other difference is that some web sites that provide content have become tremendously popular youtube is a prime example it allows users to share videos of their own creation on every conceivable topic many people want to do this the rest of us want to watch with all of these bandwidth-hungry videos  it is estimated that youtube accounts for up to 10 % of internet traffic today no single server is powerful or reliable enough to handle such a startling level of demand instead  youtube and other large content providers build their own content distribution networks these networks use data centers spread around the world to serve content to an extremely large number of clients with good performance and availability the techniques that are used for content distribution have been developed over time early in the growth of the web  its popularity was almost its undoing more demands for content led to servers and networks that were frequently overloaded many people began to call the www the world wide wait in response to consumer demand  very large amounts of bandwidth were provisioned in the core of the internet  and faster broadband connectivity was rolled out at the edge of the network this bandwidth was key to improving performance  but it is only part of the solution to reduce the endless delays  researchers also developed different architectures to use the bandwidth for distributing content one architecture is a cdn  content distribution network   in it  a provider sets up a distributed collection of machines at locations inside the internet and uses them to serve content to clients this is the choice of the big players an alternative architecture is a p2p  peer-to-peer  network in it  a collection of computers pool their resources to serve content to each other  without separately provisioned servers or any central point of control this idea has captured people ? s imagination because  by acting together  many little players can pack an enormous punch in this section  we will look at the problem of distributing content on the internet and some of the solutions that are used in practice after briefly discussing content popularity and internet traffic  we will describe how to build powerful web servers and use caching to improve performance for web clients then we will come to the two main architectures for distributing content  cdns and p2p networks there design and properties are quite different  as we will see 736 the application layer chap 7 7.5.1 content and internet traffic to design and engineer networks that work well  we need an understanding of the traffic that they must carry with the shift to content  for example  servers have migrated from company offices to internet data centers that provide large numbers of machines with excellent network connectivity to run even a small server nowadays  it is easier and cheaper to rent a virtual server hosted in an internet data center than to operate a real machine in a home or office with broadband connectivity to the internet fortunately  there are only two facts about internet traffic that is it essential to know the first fact is that it changes quickly  not only in the details but in the overall makeup before 1994  most traffic was traditional ftp file transfer  for moving programs and data sets between computers  and email then the web arrived and grew exponentially web traffic left ftp and email traffic in the dust long before the dot com bubble of 2000 starting around 2000  p2p file sharing for music and then movies took off by 2003  most internet traffic was p2p traffic  leaving the web in the dust sometime in the late 2000s  video streamed using content distribution methods by sites like youtube began to exceed p2p traffic by 2014  cisco predicts that 90 % of all internet traffic will be video in one form or another  cisco  2010   it is not always traffic volume that matters for instance  while voice-over-ip traffic boomed even before skype started in 2003  it will always be a minor blip on the chart because the bandwidth requirements of audio are two orders of magnitude lower than for video however  voice-over-ip traffic stresses the network in other ways because it is sensitive to latency as another example  online social networks have grown furiously since facebook started in 2004 in 2010  for the first time  facebook reached more users on the web per day than google even putting the traffic aside  and there is an awful lot of traffic   online social networks are important because they are changing the way that people interact via the internet the point we are making is that seismic shifts in internet traffic happen quickly  and with some regularity what will come next ? please check back in the 6th edition of this book and we will let you know the second essential fact about internet traffic is that it is highly skewed many properties with which we are familiar are clustered around an average for instance  most adults are close to the average height there are some tall people and some short people  but few very tall or very short people for these kinds of properties  it is possible to design for a range that is not very large but nonetheless captures the majority of the population internet traffic is not like this for a long time  it has been known that there are a small number of web sites with massive traffic and a vast number of web site with much smaller traffic this feature has become part of the language of networking early papers talked about traffic in terms of packet trains  the idea sec 7.5 content delivery 737 being that express trains with a large number of packets would suddenly travel down a link  jain and routhier  1986   this was formalized as the notion of selfsimilarity  which for our purposes can be thought of as network traffic that exhibits many short and many long gaps even when viewed at different time scales  leland et al  1994   later work spoke of long traffic flows as elephants and short traffic flows as mice the idea is that there are only a few elephants and many mice  but the elephants matter because they are so big returning to web content  the same sort of skew is evident experience with video rental stores  public libraries  and other such organizations shows that not all items are equally popular experimentally  when n movies are available  the fraction of all requests for the kth most popular one is approximately c /k here  c is computed to normalize the sum to 1  namely  c ? ? 1/  1 ? ? 1/2 ? ? 1/3 ? ? 1/4 ? ? 1/5 ? ?    ? ? 1/n  thus  the most popular movie is seven times as popular as the number seven movie this result is known as zipf ? s law  zipf  1949   it is named after george zipf  a professor of linguistics at harvard university who noted that the frequency of a word ? s usage in a large body of text is inversely proportional to its rank for example  the 40th most common word is used twice as much as the 80th most common word and three times as much as the 120th most common word a zipf distribution is shown in fig 7-64  a   it captures the notion that there are a small number of popular items and a great many unpopular items to recognize distributions of this form  it is convenient to plot the data on a log scale on both axes  as shown in fig 7-64  b   the result should be a straight line  a  1 relative frequency rank 0 1 5 10 15 20 relative frequency rank 1 10 ? 2 10 ? 1 101 102 100  b  figure 7-64 zipf distribution  a  on a linear scale  b  on a log-log scale when people looked at the popularity of web pages  it also turned out to roughly follow zipf ? s law  breslau et al  1999   a zipf distribution is one example in a family of distributions known as power laws power laws are evident 738 the application layer chap 7 in many human phenomena  such as the distribution of city populations and of wealth they have the same propensity to describe a few large players and a great many smaller players  and they too appear as a straight line on a log-log plot it was soon discovered that the topology of the internet could be roughly described with power laws  faloutsos et al  1999   next  researchers began plotting every imaginable property of the internet on a log scale  observing a straight line  and shouting  ? ? power law ! ? ? however  what matters more than a straight line on a log-log plot is what these distributions mean for the design and use of networks given the many forms of content that have zipf or power law distributions  it seems fundamental that web sites on the internet are zipf-like in popularity this in turn means that an average site is not a useful representation sites are better described as either popular or unpopular both kinds of sites matter the popular sites obviously matter  since a few popular sites may be responsible for most of the traffic on the internet perhaps surprisingly  the unpopular sites can matter too this is because the total amount of traffic directed to the unpopular sites can add up to a large fraction of the overall traffic the reason is that there are so many unpopular sites the notion that  collectively  many unpopular choices can matter has been popularized by books such as the long tail  anderson  2008a   curves showing decay like that of fig 7-64  a  are common  but they are not all the same in particular  situations in which the rate of decay is proportional to how much material is left  such as with unstable radioactive atoms  exhibit exponential decay  which drops off much faster than zipf ? s law the number of items  say atoms  left after time t is usually expressed as e ? t / ?  where the constant ? ? determines how fast the decay is the difference between exponential decay and zipf ? s law is that with exponential decay  it is safe to ignore the end of tail but with zipf ? s law the total weight of the tail is significant and can not be ignored to work effectively in this skewed world  we must be able to build both kinds of web sites unpopular sites are easy to handle by using dns  many different sites may actually point to the same computer in the internet that runs all of the sites on the other hand  popular sites are difficult to handle there is no single computer even remotely powerful enough  and using a single computer would make the site inaccessible for millions of users if it fails to handle these sites  we must build content distribution systems we will start on that quest next 7.5.2 server farms and web proxies the web designs that we have seen so far have a single server machine talking to multiple client machines to build large web sites that perform well  we can speed up processing on either the server side or the client side on the server side  more powerful web servers can be built with a server farm  in which a cluster of computers acts as a single server on the client side  better performance can sec 7.5 content delivery 739 be achieved with better caching techniques in particular  proxy caches provide a large shared cache for a group of clients we will describe each of these techniques in turn however  note that neither technique is sufficient to build the largest web sites those popular sites require the content distribution methods that we describe in the following sections  which combine computers at many different locations server farms no matter how much bandwidth one machine has  it can only serve so many web requests before the load is too great the solution in this case is to use more than one computer to make a web server this leads to the server farm model of fig 7-65 front end backend database internet access clients server farm servers balances load across servers figure 7-65 a server farm the difficulty with this seemingly simple model is that the set of computers that make up the server farm must look like a single logical web site to clients if they do not  we have just set up different web sites that run in parallel there are several possible solutions to make the set of servers appear to be one web site all of the solutions assume that any of the servers can handle a request from any client to do this  each server must have a copy of the web site the servers are shown as connected to a common back-end database by a dashed line for this purpose one solution is to use dns to spread the requests across the servers in the server farm when a dns request is made for the web url  the dns server returns a rotating list of the ip addresses of the servers each client tries one ip address  typically the first on the list the effect is that different clients contact different servers to access the same web site  just as intended the dns method is at the heart of cdns  and we will revisit it later in this section the other solutions are based on a front end that sprays incoming requests over the pool of servers in the server farm this happens even when the client 740 the application layer chap 7 contacts the server farm using a single destination ip address the front end is usually a link-layer switch or an ip router  that is  a device that handles frames or packets all of the solutions are based on it  or the servers  peeking at the network  transport  or application layer headers and using them in nonstandard ways a web request and response are carried as a tcp connection to work correctly  the front end must distribute all of the packets for a request to the same server a simple design is for the front end to broadcast all of the incoming requests to all of the servers each server answers only a fraction of the requests by prior agreement for example  16 servers might look at the source ip address and reply to the request only if the last 4 bits of the source ip address match their configured selectors other packets are discarded while this is wasteful of incoming bandwidth  often the responses are much longer than the request  so it is not nearly as inefficient as it sounds in a more general design  the front end may inspect the ip  tcp  and http headers of packets and arbitrarily map them to a server the mapping is called a load balancing policy as the goal is to balance the workload across the servers the policy may be simple or complex a simple policy might be to use the servers one after the other in turn  or round-robin with this approach  the front end must remember the mapping for each request so that subsequent packets that are part of the same request will be sent to the same server also  to make the site more reliable than a single server  the front end should notice when servers have failed and stop sending them requests much like nat  this general design is perilous  or at least fragile  in that we have just created a device that violates the most basic principle of layered protocols  each layer must use its own header for control purposes and may not inspect and use information from the payload for any purpose but people design such systems anyway and when they break in the future due to changes in higher layers  they tend to be surprised the front end in this case is a switch or router  but it may take action based on transport layer information or higher such a box is called a middlebox because it interposes itself in the middle of a network path in which it has no business  according to the protocol stack in this case  the front end is best considered an internal part of a server farm that terminates all layers up to the application layer  and hence can use all of the header information for those layers   nonetheless  as with nat  this design is useful in practice the reason for looking at tcp headers is that it is possible to do a better job of load balancing than with ip information alone for example  one ip address may represent an entire company and make many requests it is only by looking at tcp or higherlayer information that these requests can be mapped to different servers the reason for looking at the http headers is somewhat different many web interactions access and update databases  such as when a customer looks up her most recent purchase the server that fields this request will have to query the back-end database it is useful to direct subsequent requests from the same user to sec 7.5 content delivery 741 the same server  because that server has already cached information about the user the simplest way to cause this to happen is to use web cookies  or other information to distinguish the user  and to inspect the http headers to find the cookies as a final note  although we have described this design for web sites  a server farm can be built for other kinds of servers as well an example is servers streaming media over udp the only change that is required is for the front end to be able to load balance these requests  which will have different protocol header fields than web requests   web proxies web requests and responses are sent using http in sec 7.3  we described how browsers can cache responses and reuse them to answer future requests various header fields and rules are used by the browser to determine if a cached copy of a web page is still fresh we will not repeat that material here caching improves performance by shortening the response time and reducing the network load if the browser can determine that a cached page is fresh by itself  the page can be fetched from the cache immediately  with no network traffic at all however  even if the browser must ask the server for confirmation that the page is still fresh  the response time is shortened and the network load is reduced  especially for large pages  since only a small message needs to be sent however  the best the browser can do is to cache all of the web pages that the user has previously visited from our discussion of popularity  you may recall that as well as a few popular pages that many people visit repeatedly  there are many  many unpopular pages in practice  this limits the effectiveness of browser caching because there are a large number of pages that are visited just once by a given user these pages always have to be fetched from the server one strategy to make caches more effective is to share the cache among multiple users that way  a page already fetched for one user can be returned to another user when that user makes the same request without browser caching  both users would need to fetch the page from the server of course  this sharing can not be done for encrypted traffic  pages that require authentication  and uncacheable pages  e.g  current stock prices  that are returned by programs dynamic pages created by programs  especially  are a growing case for which caching is not effective nonetheless  there are plenty of web pages that are visible to many users and look the same no matter which user makes the request  e.g  images   a web proxy is used to share a cache among users a proxy is an agent that acts on behalf of someone else  such as the user there are many kinds of proxies for instance  an arp proxy replies to arp requests on behalf of a user who is elsewhere  and can not reply for himself   a web proxy fetches web requests on behalf of its users it normally provides caching of the web responses  and since it is shared across users it has a substantially larger cache than a browser 742 the application layer chap 7 when a proxy is used  the typical setup is for an organization to operate one web proxy for all of its users the organization might be a company or an isp both stand to benefit by speeding up web requests for its users and reducing its bandwidth needs while flat pricing  independent of usage  is common for end users  most companies and isps are charged according to the bandwidth that they use this setup is shown in fig 7-66 to use the proxy  each browser is configured to make page requests to the proxy instead of to the page ? s real server if the proxy has the page  it returns the page immediately if not  it fetches the page from the server  adds it to the cache for future use  and returns it to the client that requested it clients servers browser cache organization proxy cache internet figure 7-66 a proxy cache between web browsers and web servers as well as sending web requests to the proxy instead of the real server  clients perform their own caching using its browser cache the proxy is only consulted after the browser has tried to satisfy the request from its own cache that is  the proxy provides a second level of caching further proxies may be added to provide additional levels of caching each proxy  or browser  makes requests via its upstream proxy each upstream proxy caches for the downstream proxies  or browsers   thus  it is possible for browsers in a company to use a company proxy  which uses an isp proxy  which contacts web servers directly however  the single level of proxy caching we have shown in fig 7-66 is often sufficient to gain most of the potential benefits  in practice the problem again is the long tail of popularity studies of web traffic have shown that shared caching is especially beneficial until the number of users reaches about the size of a small company  say  100 people   as the number of people grows larger  the benefits of sharing a cache become marginal because of the unpopular requests that can not be cached due to lack of storage space  wolman et al  1999   web proxies provide additional benefits that are often a factor in the decision to deploy them one benefit is to filter content the administrator may configure sec 7.5 content delivery 743 the proxy to blacklist sites or otherwise filter the requests that it makes for example  many administrators frown on employees watching youtube videos  or worse yet  pornography  on company time and set their filters accordingly another benefit of having proxies is privacy or anonymity  when the proxy shields the identity of the user from the server 7.5.3 content delivery networks server farms and web proxies help to build large sites and to improve web performance  but they are not sufficient for truly popular web sites that must serve content on a global scale for these sites  a different approach is needed cdns  content delivery networks  turn the idea of traditional web caching on its head instead  of having clients look for a copy of the requested page in a nearby cache  it is the provider who places a copy of the page in a set of nodes at different locations and directs the client to use a nearby node as the server an example of the path that data follows when it is distributed by a cdn is shown in fig 7-67 it is a tree the origin server in the cdn distributes a copy of the content to other nodes in the cdn  in sydney  boston  and amsterdam  in this example this is shown with dashed lines clients then fetch pages from the nearest node in the cdn this is shown with solid lines in this way  the clients in sydney both fetch the page copy that is stored in sydney ; they do not both fetch the page from the origin server  which may be in europe cdn origin server cdn node sydney boston amsterdam distribution to cdn nodes page fetch worldwide clients figure 7-67 cdn distribution tree using a tree structure has three virtues first  the content distribution can be scaled up to as many clients as needed by using more nodes in the cdn  and more levels in the tree when the distribution among cdn nodes becomes the bottleneck no matter how many clients there are  the tree structure is efficient the origin server is not overloaded because it talks to the many clients via the tree 744 the application layer chap 7 of cdn nodes ; it does not have to answer each request for a page by itself second  each client gets good performance by fetching pages from a nearby server instead of a distant server this is because the round-trip time for setting up a connection is shorter  tcp slow-start ramps up more quickly because of the shorter round-trip time  and the shorter network path is less likely to pass through regions of congestion in the internet finally  the total load that is placed on the network is also kept at a minimum if the cdn nodes are well placed  the traffic for a given page should pass over each part of the network only once this is important because someone pays for network bandwidth  eventually the idea of using a distribution tree is straightforward what is less simple is how to organize the clients to use this tree for example  proxy servers would seem to provide a solution looking at fig 7-67  if each client was configured to use the sydney  boston or amsterdam cdn node as a caching web proxy  the distribution would follow the tree however  this strategy falls short in practice  for three reasons the first reason is that the clients in a given part of the network probably belong to different organizations  so they are probably using different web proxies recall that caches are not usually shared across organizations because of the limited benefit of caching over a large number of clients  and for security reasons too second  there can be multiple cdns  but each client uses only a single proxy cache which cdn should a client use as its proxy ? finally  perhaps the most practical issue of all is that web proxies are configured by clients they may or may not be configured to benefit content distribution by a cdn  and there is little that the cdn can do about it another simple way to support a distribution tree with one level is to use mirroring in this approach  the origin server replicates content over the cdn nodes as before the cdn nodes in different network regions are called mirrors the web pages on the origin server contain explicit links to the different mirrors  usually telling the user their location this design lets the user manually select a nearby mirror to use for downloading content a typical use of mirroring is to place a large software package on mirrors located in  for example  the east and west coasts of the u.s  asia  and europe mirrored sites are generally completely static  and the choice of sites remains stable for months or years they are a tried and tested technique however  they depend on the user to do the distribution as the mirrors are really different web sites  even if they are linked together the third approach  which overcomes the difficulties of the previous two approaches  uses dns and is called dns redirection suppose that a client wants to fetch a page with the url http  //www.cdn.com/page.html to fetch the page  the browser will use dns to resolve www.cdn.com to an ip address this dns lookup proceeds in the usual manner by using the dns protocol  the browser learns the ip address of the name server for cdn.com  then contacts the name server to ask it to resolve www.cdn.com now comes the really clever bit the name server is run by the cdn instead  of returning the same ip address for each request  it will look at the ip address of the client making the request and return sec 7.5 content delivery 745 different answers the answer will be the ip address of the cdn node that is nearest the client that is  if a client in sydney asks the cdn name server to resolve www.cdn.com  the name server will return the ip address of the sydney cdn node  but if a client in amsterdam makes the same request  the name server will return the ip address of the amsterdam cdn node instead this strategy is perfectly legal according to the semantics of dns we have previously seen that name servers may return changing lists of ip addresses after the name resolution  the sydney client will fetch the page directly from the sydney cdn node further pages on the same ? ? server ? ? will be fetched directly from the sydney cdn node as well because of dns caching the overall sequence of steps is shown in fig 7-68 cdn origin server 2  query dns cdn dns server amsterdam cdn node sydney cdn node 3  ? contact sydney ? ? contact amsterdam ? 4  fetch page 1  distribute content sydney clients amsterdam clients figure 7-68 directing clients to nearby cdn nodes using dns a complex question in the above process is what it means to find the nearest cdn node  and how to go about it to define nearest  it is not really geography that matters there are at least two factors to consider in mapping a client to a cdn node one factor is the network distance the client should have a short and high-capacity network path to the cdn node this situation will produce quick downloads cdns use a map they have previously computed to translate between the ip address of a client and its network location the cdn node that is selected might be the one at the shortest distance as the crow flies  or it might not what matters is some combination of the length of the network path and any capacity limits along it the second factor is the load that is already being carried by the cdn node if the cdn nodes are overloaded  they will deliver slow responses  just like the overloaded web server that we sought to avoid in the first place thus  it may be necessary to balance the load across the cdn nodes  mapping some clients to nodes that are slightly further away but more lightly loaded the techniques for using dns for content distribution were pioneered by akamai starting in 1998  when the web was groaning under the load of its early 746 the application layer chap 7 growth akamai was the first major cdn and became the industry leader probably even more clever than the idea of using dns to connect clients to nearby nodes was the incentive structure of their business companies pay akamai to deliver their content to clients  so that they have responsive web sites that customers like to use the cdn nodes must be placed at network locations with good connectivity  which initially meant inside isp networks for the isps  there is a benefit to having a cdn node in their networks  namely that the cdn node cuts down the amount of upstream network bandwidth that they need  and must pay for   just as with proxy caches in addition  the cdn node improves responsiveness for the isp ? s customers  which makes the isp look good in their eyes  giving them a competitive advantage over isps that do not have a cdn node these benefits  at no cost to the isp  makes installing a cdn node a no brainer for the isp thus  the content provider  the isp  and the customers all benefit and the cdn makes money since 1998  other companies have gotten into the business  so it is now a competitive industry with multiple providers as this description implies  most companies do not build their own cdn instead  they use the services of a cdn provider such as akamai to actually deliver their content to let other companies use the service of a cdn  we need to add one last step to our picture after the contract is signed for a cdn to distribute content on behalf of a web site owner  the owner gives the cdn the content this content is pushed to the cdn nodes in addition  the owner rewrites any of its web pages that link to the content instead of linking to the content on their web site  the pages link to the content via the cdn as an example of how this scheme works  consider the source code for fluffy video ? s web page  given in fig 7-69  a   after preprocessing  it is transformed to fig 7-69  b  and placed on fluffy video ? s server as www.fluffyvideo.com/index.html when a user types in the url www.fluffyvideo.com to his browser  dns returns the ip address of fluffy video ? s own web site  allowing the main  html  page to be fetched in the normal way when the user clicks on any of the hyperlinks  the browser asks dns to look up www.cdn.com this lookup contacts the cdn ? s dns server  which returns the ip address of the nearby cdn node the browser then sends a regular http request to the cdn node  for example  for /fluffyvideo/koalas.mpg the url identifies the page to return  starting the path with fluffyvideo so that the cdn node can separate requests for the different companies that it serves finally  the video is returned and the user sees cute fluffy animals the strategy behind this split of content hosted by the cdn and entry pages hosted by the content owner is that it gives the content owner control while letting the cdn move the bulk of the data most entry pages are tiny  being just html text these pages often link to large files  such as videos and images it is precisely these large files that are served by the cdn  even though the use of a cdn is completely transparent to users the site looks the same  but performs faster sec 7.5 content delivery 747 < html > < head > < title > fluffy video < /title > < /head > < body > < h1 > fluffy video ? s product list < /h1 > < p > click below for free samples < /p > < a href = " koalas.mpg " > koalas today < /a > < br > < a href = " kangaroos.mpg " > funny kangaroos < /a > < br > < a href = " wombats.mpg " > nice wombats < /a > < br > < /body > < /html >  a  < html > < head > < title > fluffy video < /title > < /head > < body > < h1 > fluffy video ? s product list < /h1 > < p > click below for free samples < /p > < a href = " http  //www.cdn.com/fluffyvideo/koalas.mpg " > koalas today < /a > < br > < a href = " http  //www.cdn.com/fluffyvideo/kangaroos.mpg " > funny kangaroos < /a > < br > < a href = " http  //www.cdn.com/fluffyvideo/wombats.mpg " > nice wombats < /a > < br > < /body > < /html >  b  figure 7-69  a  original web page  b  same page after linking to the cdn there is another advantage for sites using a shared cdn the future demand for a web site can be difficult to predict frequently  there are surges in demand known as flash crowds such a surge may happen when the latest product is released  there is a fashion show or other event  or the company is otherwise in the news even a web site that was a previously unknown  unvisited backwater can suddenly become the focus of the internet if it is newsworthy and linked from popular sites since most sites are not prepared to handle massive increases in traffic  the result is that many of them crash when traffic surges case in point normally the florida secretary of state ? s web site is not a busy place  although you can look up information about florida corporations  notaries  and cultural affairs  as well as information about voting and elections there for some odd reason  on nov 7  2000  the date of the u.s presidential election with bush vs gore   a whole lot of people were suddenly interested in the election results page of this site the site suddenly became one of the busiest web sites in the world and naturally crashed as a result if it had been using a cdn  it would probably have survived by using a cdn  a site has access to a very large content-serving capacity the largest cdns have tens of thousands of servers deployed in countries all over the world since only a small number of sites will be experiencing a flash crowd 748 the application layer chap 7 at any one time  by definition   those sites may use the cdn ? s capacity to handle the load until the storm passes that is  the cdn can quickly scale up a site ? s serving capacity the preceding discussion above is a simplified description of how akamai works there are many more details that matter in practice the cdn nodes pictured in our example are normally clusters of machines dns redirection is done with two levels  one to map clients to the approximate network location  and another to spread the load over nodes in that location both reliability and performance are concerns to be able to shift a client from one machine in a cluster to another  dns replies at the second level are given with short ttls so that the client will repeat the resolution after a short while finally  while we have concentrated on distributing static objects like images and videos  cdns can also support dynamic page creation  streaming media  and more for more information about cdns  see dilley et al  2002   7.5.4 peer-to-peer networks not everyone can set up a 1000-node cdn at locations around the world to distribute their content  actually  it is not hard to rent 1000 virtual machines around the globe because of the well-developed and competitive hosting industry however  setting up a cdn only starts with getting the nodes  luckily  there is an alternative for the rest of us that is simple to use and can distribute a tremendous amount of content it is a p2p  peer-to-peer  network p2p networks burst onto the scene starting in 1999 the first widespread application was for mass crime  50 million napster users were exchanging copyrighted songs without the copyright owners ? permission until napster was shut down by the courts amid great controversy nevertheless  peer-to-peer technology has many interesting and legal uses other systems continued development  with such great interest from users that p2p traffic quickly eclipsed web traffic today  bittorrent is the most popular p2p protocol it is used so widely to share  licensed and public domain  videos  as well as other content  that it accounts for a large fraction of all internet traffic we will look at it in this section the basic idea of a p2p  peer-to-peer  file-sharing network is that many computers come together and pool their resources to form a content distribution system the computers are often simply home computers they do not need to be machines in internet data centers the computers are called peers because each one can alternately act as a client to another peer  fetching its content  and as a server  providing content to other peers what makes peer-to-peer systems interesting is that there is no dedicated infrastructure  unlike in a cdn everyone participates in the task of distributing content  and there is often no central point of control many people are excited about p2p technology because it is seen as empowering the little guy the reason is not only that it takes a large company to run a sec 7.5 content delivery 749 cdn  while anyone with a computer can join a p2p network it is that p2p networks have a formidable capacity to distribute content that can match the largest of web sites consider a p2p network made up of n average users  each with broadband connectivity at 1 mbps the aggregate upload capacity of the p2p network  or rate at which the users can send traffic into the internet  is n mbps the download capacity  or rate at which the users can receive traffic  is also n mbps each user can upload and download at the same time  too  because they have a 1-mbps link in each direction it is not obvious that this should be true  but it turns out that all of the capacity can be used productively to distribute content  even for the case of sharing a single copy of a file with all the other users to see how this can be so  imagine that the users are organized into a binary tree  with each non-leaf user sending to two other users the tree will carry the single copy of the file to all the other users to use the upload bandwidth of as many users as possible at all times  and hence distribute the large file with low latency   we need to pipeline the network activity of the users imagine that the file is divided into 1000 pieces each user can receive a new piece from somewhere up the tree and send the previously received piece down the tree at the same time this way  once the pipeline is started  after a small number of pieces  equal to the depth of the tree  are sent  all non-leaf users will be busy uploading the file to other users since there are approximately n/2 non-leaf users  the upload bandwidth of this tree is n/2 mbps we can repeat this trick and create another tree that uses the other n/2 mbps of upload bandwidth by swapping the roles of leaf and non-leaf nodes together  this construction uses all of the capacity this argument means that p2p networks are self-scaling their usable upload capacity grows in tandem with the download demands that can be made by their users they are always ? ? large enough ? ? in some sense  without the need for any dedicated infrastructure in contrast  the capacity of even a large web site is fixed and will either be too large or too small consider a site with only 100 clusters  each capable of 10 gbps this enormous capacity does not help when there are a small number of users the site can not get information to n users at a rate faster than n mbps because the limit is at the users and not the web site and when there are more than one million 1-mbps users  the web site can not pump out data fast enough to keep all the users busy downloading that may seem like a large number of users  but large bittorrent networks  e.g  pirate bay  claim to have more than 10,000,000 users that is more like 10 terabits/sec in terms of our example ! you should take these back-of-the-envelope numbers with a grain  or better yet  a metric ton  of salt because they oversimplify the situation a significant challenge for p2p networks is to use bandwidth well when users can come in all shapes and sizes  and have different download and upload capacities nevertheless  these numbers do indicate the enormous potential of p2p 750 the application layer chap 7 there is another reason that p2p networks are important cdns and other centrally run services put the providers in a position of having a trove of personal information about many users  from browsing preferences and where people shop online  to people ? s locations and email addresses this information can be used to provide better  more personalized service  or it can be used to intrude on people ? s privacy the latter may happen either intentionally ? say as part of a new product ? or through an accidental disclosure or compromise with p2p systems  there can be no single provider that is capable of monitoring the entire system this does not mean that p2p systems will necessarily provide privacy  as users are trusting each other to some extent it only means that they can provide a different form of privacy than centrally managed systems p2p systems are now being explored for services beyond file sharing  e.g  storage  streaming   and time will tell whether this advantage is significant p2p technology has followed two related paths as it has been developed on the more practical side  there are the systems that are used every day the most well known of these systems are based on the bittorrent protocol on the more academic side  there has been intense interest in dht  distributed hash table  algorithms that let p2p systems perform well as a whole  yet rely on no centralized components at all we will look at both of these technologies bittorrent the bittorrent protocol was developed by brahm cohen in 2001 to let a set of peers share files quickly and easily there are dozens of freely available clients that speak this protocol  just as there are many browsers that speak the http protocol to web servers the protocol is available as an open standard at www.bittorrent.org in a typical peer-to-peer system  like that formed with bittorrent  the users each have some information that may be of interest to other users this information may be free software  music  videos  photographs  and so on there are three problems that need to be solved to share content in this setting  1 how does a peer find other peers that have the content it wants to download ? 2 how is content replicated by peers to provide high-speed downloads for everyone ? 3 how do peers encourage each other to upload content to others as well as download content for themselves ? the first problem exists because not all peers will have all of the content  at least initially the approach taken in bittorrent is for every content provider to create a content description called a torrent the torrent is much smaller than the sec 7.5 content delivery 751 content  and is used by a peer to verify the integrity of the data that it downloads from other peers other users who want to download the content must first obtain the torrent  say  by finding it on a web page advertising the content the torrent is just a file in a specified format that contains two key kinds of information one kind is the name of a tracker  which is a server that leads peers to the content of the torrent the other kind of information is a list of equal-sized pieces  or chunks  that make up the content different chunk sizes can be used for different torrents  typically 64 kb to 512 kb the torrent file contains the name of each chunk  given as a 160-bit sha-1 hash of the chunk we will cover cryptographic hashes such as sha-1 in chap 8 for now  you can think of a hash as a longer and more secure checksum given the size of chunks and hashes  the torrent file is at least three orders of magnitude smaller than the content  so it can be transferred quickly to download the content described in a torrent  a peer first contacts the tracker for the torrent the tracker is a server that maintains a list of all the other peers that are actively downloading and uploading the content this set of peers is called a swarm the members of the swarm contact the tracker regularly to report that they are still active  as well as when they leave the swarm when a new peer contacts the tracker to join the swarm  the tracker tells it about other peers in the swarm getting the torrent and contacting the tracker are the first two steps for downloading content  as shown in fig 7-70 seed peer unchoked peers tracker torrent peer 1  get torrent metafile 2  get peers from tracker 3  trade chunks with peers source of content figure 7-70 bittorrent the second problem is how to share content in a way that gives rapid downloads when a swarm is first formed  some peers must have all of the chunks that make up the content these peers are called seeders other peers that join the swarm will have no chunks ; they are the peers that are downloading the content while a peer participates in a swarm  it simultaneously downloads chunks that it is missing from other peers  and uploads chunks that it has to other peers who 752 the application layer chap 7 need them this trading is shown as the last step of content distribution in fig 7 70 over time  the peer gathers more chunks until it has downloaded all of the content the peer can leave the swarm  and return  at any time normally a peer will stay for a short period after finishes its own download with peers coming and going  the rate of churn in a swarm can be quite high for the above method to work well  each chunk should be available at many peers if everyone were to get the chunks in the same order  it is likely that many peers would depend on the seeders for the next chunk this would create a bottleneck instead  peers exchange lists of the chunks they have with each other then they select rare chunks that are hard to find to download the idea is that downloading a rare chunk will make a copy of it  which will make the chunk easier for other peers to find and download if all peers do this  after a short while all chunks will be widely available the third problem is perhaps the most interesting cdn nodes are set up exclusively to provide content to users p2p nodes are not they are users ? computers  and the users may be more interested in getting a movie than helping other users with their downloads nodes that take resources from a system without contributing in kind are called free-riders or leechers if there are too many of them  the system will not function well earlier p2p systems were known to host them  saroiu et al  2003  so bittorrent sought to minimize them the approach taken in bittorrent clients is to reward peers who show good upload behavior each peer randomly samples the other peers  retrieving chunks from them while it uploads chunks to them the peer continues to trade chunks with only a small number of peers that provide the highest download performance  while also randomly trying other peers to find good partners randomly trying peers also allows newcomers to obtain initial chunks that they can trade with other peers the peers with which a node is currently exchanging chunks are said to be unchoked over time  this algorithm is intended to match peers with comparable upload and download rates with each other the more a peer is contributing to the other peers  the more it can expect in return using a set of peers also helps to saturate a peer ? s download bandwidth for high performance conversely  if a peer is not uploading chunks to other peers  or is doing so very slowly  it will be cut off  or choked  sooner or later this strategy discourages antisocial behavior in which peers free-ride on the swarm the choking algorithm is sometimes described as implementing the tit-for-tat strategy that encourages cooperation in repeated interactions however  it does not prevent clients from gaming the system in any strong sense  piatek et al  2007   nonetheless  attention to the issue and mechanisms that make it more difficult for casual users to free-ride have likely contributed to the success of bit torrent as you can see from our discussion  bittorrent comes with a rich vocabulary there are torrents  swarms  leechers  seeders  and trackers  as well as snubbing  sec 7.5 content delivery 753 choking  lurking  and more for more information see the short paper on bit torrent  cohen  2003  and look on the web starting with www.bittorrent.org dhts ? distributed hash tables the emergence of p2p file sharing networks around 2000 sparked much interest in the research community the essence of p2p systems is that they avoid the centrally managed structures of cdns and other systems this can be a significant advantage centrally managed components become a bottleneck as the system grows very large and are a single point of failure central components can also be used as a point of control  e.g  to shut off the p2p network   however  the early p2p systems were only partly decentralized  or  if they were fully decentralized  they were inefficient the traditional form of bittorrent that we just described uses peer-to-peer transfers and a centralized tracker for each swarm it is the tracker that turns out to be the hard part to decentralize in a peer-to-peer system the key problem is how to find out which peers have specific content that is being sought for example  each user might have one or more data items such as songs  photographs  programs  files  and so on that other users might want to read how do the other users find them ? making one index of who has what is simple  but it is centralized having every peer keep its own index does not help true  it is distributed however  it requires so much work to keep the indexes of all peers up to date  as content is moved about the system  that it is not worth the effort the question tackled by the research community was whether it was possible to build p2p indexes that were entirely distributed but performed well by perform well  we mean three things first  each node keeps only a small amount of information about other nodes this property means that it will not be expensive to keep the index up to date second  each node can look up entries in the index quickly otherwise  it is not a very useful index third  each node can use the index at the same time  even as other nodes come and go this property means the performance of the index grows with the number of nodes the answer is to the question was  ? ? yes ? ? four different solutions were invented in 2001 they are chord  stoica et al  2001   can  ratnasamy et al  2001   pastry  rowstron and druschel  2001   and tapestry  zhao et al  2004   other solutions were invented soon afterwards  including kademlia  which is used in practice  maymounkov and mazieres  2002   the solutions are known as dhts  distributed hash tables  because the basic functionality of an index is to map a key to a value this is like a hash table  and the solutions are distributed versions  of course dhts do their work by imposing a regular structure on the communication between the nodes  as we will see this behavior is quite different than that of traditional p2p networks that use whatever connections peers happen to make 754 the application layer chap 7 for this reason  dhts are called structured p2p networks traditional p2p protocols build unstructured p2p networks the dht solution that we will describe is chord as a scenario  consider how to replace the centralized tracker traditionally used in bittorrent with a fully-distributed tracker chord can be used to solve this problem in this scenario  the overall index is a listing of all of the swarms that a computer may join to download content the key used to look up the index is the torrent description of the content it uniquely identifies a swarm from which content can be downloaded as the hashes of all the content chunks the value stored in the index for each key is the list of peers that comprise the swarm these peers are the computers to contact to download the content a person wanting to download content such as a movie has only the torrent description the question the dht must answer is how  lacking a central database  does a person find out which peers  out of the millions of bittorrent nodes  to download the movie from ? a chord dht consists of n participating nodes they are nodes running bit torrent in our scenario each node has an ip address by which it may be contacted the overall index is spread across the nodes this implies that each node stores bits and pieces of the index for use by other nodes the key part of chord is that it navigates the index using identifiers in a virtual space  not the ip addresses of nodes or the names of content like movies conceptually  the identifiers are simply m-bit numbers that can be arranged in ascending order into a ring to turn a node address into an identifier  it is mapped to an m-bit number using a hash function  hash chord uses sha-1 for hash this is the same hash that we mentioned when describing bittorrent we will look at it when we discuss cryptography in chap 8 for now  suffice it to say that it is just a function that takes a variable-length byte string as an argument and produces a highly random 160-bit number thus  we can use it to convert any ip address to a 160-bit number called the node identifier in fig 7-71  a   we show the node identifier circle for m ? ? 5  just ignore the arcs in the middle for the moment  some of the identifiers correspond to nodes  but most do not in this example  the nodes with identifiers 1  4  7  12  15  20  and 27 correspond to actual nodes and are shaded in the figure ; the rest do not exist let us now define the function successor  k  as the node identifier of the first actual node following k around the circle  clockwise for example  successor  6  ? ? 7  successor  8  ? ? 12  and successor  22  ? ? 27 a key is also produced by hashing a content name with hash  i.e  sha-1  to generate a 160-bit number in our scenario  the content name is the torrent thus  in order to convert torrent  the torrent description file  to its key  we compute key ? ? hash  torrent   this computation is just a local procedure call to hash to start a new a swarm  a node needs to insert a new key-value pair consisting of  torrent  my-ip-address  into the index to accomplish this  the node asks successor  hash  torrent   to store my-ip-address in this way  the index is distributed over the nodes at random for fault tolerance  p different hash functions sec 7.5 content delivery 755 0 16 2,3 4 4 4 3 2 2,3 0,1 0,1 0,1 31 1 17 15 30 2 18 14 29 3 19 13 28 4 20 12 27 26 25 24 8 7 23 9 6 22 10 5 21 11 2 4 3 4 node 1 's finger table 5 7 9 12 17 20 start ip addr of successor 5 7 6 7 node 4 's finger table 8 12 12 12 20 20 start ip addr of successor 13 15 14 15 node 12 's finger table 16 20 20 20 28 1 start ip addr of successor  a   b  node identifier actual node figure 7-71  a  a set of 32 node identifiers arranged in a circle the shaded ones correspond to actual machines the arcs show the fingers from nodes 1  4  and 12 the labels on the arcs are the table indices  b  examples of the finger tables could be used to store the data at p nodes  but we will not consider the subject of fault tolerance further here some time after the dht is constructed  another node wants to find a torrent so that it can join the swarm and download content a node looks up torrent by first hashing it to get key  and second using successor  key  to find the ip address of the node storing the corresponding value the value is the list of peers in the swarm ; the node can add its ip address to the list and contact the other peers to download content with the bittorrent protocol the first step is easy ; the second one is not easy to make it possible to find the ip address of the node corresponding to a certain key  each node is required to 756 the application layer chap 7 maintain certain administrative data structures one of these is the ip address of its successor node along the node identifier circle for example  in fig 7-71  node 4 ? s successor is 7 and node 7 ? s successor is 12 lookup can now proceed as follows the requesting node sends a packet to its successor containing its ip address and the key it is looking for the packet is propagated around the ring until it locates the successor to the node identifier being sought that node checks to see if it has any information matching the key  and if so  returns it directly to the requesting node  whose ip address it has however  linearly searching all the nodes is very inefficient in a large peerto peer system since the mean number of nodes required per search is n/2 to greatly speed up the search  each node also maintains what chord calls a finger table the finger table has m entries  indexed by 0 through m ? ? 1  each one pointing to a different actual node each of the entries has two fields  start and the ip address of successor  start   as shown for three example nodes in fig 7-71  b   the values of the fields for entry i at a node with identifier k are  start ? ? k ? ? 2i  modulo 2m  ip address of successor  start  i   note that each node stores the ip addresses of a relatively small number of nodes and that most of these are fairly close by in terms of node identifier using the finger table  the lookup of key at node k proceeds as follows if key falls between k and successor  k   the node holding information about key is successor  k  and the search terminates otherwise  the finger table is searched to find the entry whose start field is the closest predecessor of key a request is then sent directly to the ip address in that finger table entry to ask it to continue the search since it is closer to key but still below it  chances are good that it will be able to return the answer with only a small number of additional queries in fact  since every lookup halves the remaining distance to the target  it can be shown that the average number of lookups is log2n as a first example  consider looking up key ? ? 3 at node 1 since node 1 knows that 3 lies between it and its successor  4  the desired node is 4 and the search terminates  returning node 4 ? s ip address as a second example  consider looking up key ? ? 16 at node 1 since 16 does not lie between 1 and 4  the finger table is consulted the closest predecessor to 16 is 9  so the request is forwarded to the ip address of 9 ? s entry  namely  that of node 12 node 12 also does not know the answer itself  so it looks for the node most closely preceding 16 and finds 14  which yields the ip address of node 15 a query is then sent there node 15 observes that 16 lies between it and its successor  20   so it returns the ip address of 20 to the caller  which works its way back to node 1 since nodes join and leave all the time  chord needs a way to handle these operations we assume that when the system began operation it was small enough that the nodes could just exchange information directly to build the first circle and sec 7.5 content delivery 757 finger tables after that  an automated procedure is needed when a new node  r  wants to join  it must contact some existing node and ask it to look up the ip address of successor  r  for it next  the new node then asks successor  r  for its predecessor the new node then asks both of these to insert r in between them in the circle for example  if 24 in fig 7-71 wants to join  it asks any node to look up successor  24   which is 27 then it asks 27 for its predecessor  20   after it tells both of those about its existence  20 uses 24 as its successor and 27 uses 24 as its predecessor in addition  node 27 hands over those keys in the range 21 ? 24  which now belong to 24 at this point  24 is fully inserted however  many finger tables are now wrong to correct them  every node runs a background process that periodically recomputes each finger by calling successor when one of these queries hits a new node  the corresponding finger entry is updated when a node leaves gracefully  it hands its keys over to its successor and informs its predecessor of its departure so the predecessor can link to the departing node ? s successor when a node crashes  a problem arises because its predecessor no longer has a valid successor to alleviate this problem  each node keeps track not only of its direct successor but also its s direct successors  to allow it to skip over up to s ? ? 1 consecutive failed nodes and reconnect the circle if disaster strikes there has been a tremendous amount of research on dhts since they were invented to give you an idea of just how much research  let us pose a question  what is the most-cited networking paper of all time ? you will find it difficult to come up with a paper that is cited more than the seminal chord paper  stoica et al  2001   despite this veritable mountain of research  applications of dhts are only slowly beginning to emerge some bittorrent clients use dhts to provide a fully distributed tracker of the kind that we described large commercial cloud services such as amazon ? s dynamo also incorporate dht techniques  decandia et al  2007   7.6 summary naming in the arpanet started out in a very simple way  an ascii text file listed the names of all the hosts and their corresponding ip addresses every night all the machines downloaded this file but when the arpanet morphed into the internet and exploded in size  a far more sophisticated and dynamic naming scheme was required the one used now is a hierarchical scheme called the domain name system it organizes all the machines on the internet into a set of trees at the top level are the well-known generic domains  including com and edu  as well as about 200 country domains dns is implemented as a distributed database with servers all over the world by querying a dns server  a process 758 the application layer chap 7 can map an internet domain name onto the ip address used to communicate with a computer for that domain email is the original killer app of the internet it is still widely used by everyone from small children to grandparents most email systems in the world use the mail system now defined in rfcs 5321 and 5322 messages have simple ascii headers  and many kinds of content can be sent using mime mail is submitted to message transfer agents for delivery and retrieved from them for presentation by a variety of user agents  including web applications submitted mail is delivered using smtp  which works by making a tcp connection from the sending message transfer agent to the receiving one the web is the application that most people think of as being the internet originally  it was a system for seamlessly linking hypertext pages  written in html  across machines the pages are downloaded by making a tcp connection from the browser to a server and using http nowadays  much of the content on the web is produced dynamically  either at the server  e.g  with php  or in the browser  e.g  with javascript   when combined with back-end databases  dynamic server pages allow web applications such as e-commerce and search dynamic browser pages are evolving into full-featured applications  such as email  that run inside the browser and use the web protocols to communicate with remote servers caching and persistent connections are widely used to enhance web performance using the web on mobile devices can be challenging  despite the growth in the bandwidth and processing power of mobiles web sites often send tailored versions of pages with smaller images and less complex navigation to devices with small displays the web protocols are increasingly being used for machine-to-machine communication xml is preferred to html as a description of content that is easy for machines to process soap is an rpc mechanism that sends xml messages using http digital audio and video have been key drivers for the internet since 2000 the majority of internet traffic today is video much of it is streamed from web sites over a mix of protocols  including rtp/udp and rtp/http/tcp   live media is streamed to many consumers it includes internet radio and tv stations that broadcast all manner of events audio and video are also used for real-time conferencing many calls use voice over ip  rather than the traditional telephone network  and include videoconferencing there are a small number of tremendously popular web sites  as well as a very large number of less popular ones to serve the popular sites  content distribution networks have been deployed cdns use dns to direct clients to a nearby server ; the servers are placed in data centers all around the world alternatively  p2p networks let a collection of machines share content such as movies among themselves they provide a content distribution capacity that scales with the number of machines in the p2p network and which can rival the largest of sites chap 7 problems 759 problems 1 many business computers have three distinct and worldwide unique identifiers what are they ? 2 in fig 7-4  there is no period after laserjet why not ? 3 consider a situation in which a cyberterrorist makes all the dns servers in the world crash simultaneously how does this change one ? s ability to use the internet ? 4 dns uses udp instead of tcp if a dns packet is lost  there is no automatic recovery does this cause a problem  and if so  how is it solved ? 5 john wants to have an original domain name and uses a randomized program to generate a secondary domain name for him he wants to register this domain name in the com generic domain the domain name that was generated is 253 characters long will the com registrar allow this domain name to be registered ? 6 can a machine with a single dns name have multiple ip addresses ? how could this occur ? 7 the number of companies with a web site has grown explosively in recent years as a result  thousands of companies are registered in the com domain  causing a heavy load on the top-level server for this domain suggest a way to alleviate this problem without changing the naming scheme  i.e  without introducing new top-level domain names   it is permitted that your solution requires changes to the client code 8 some email systems support a content return  header field it specifies whether the body of a message is to be returned in the event of nondelivery does this field belong to the envelope or to the header ? 9 electronic mail systems need directories so people ? s email addresses can be looked up to build such directories  names should be broken up into standard components  e.g  first name  last name  to make searching possible discuss some problems that must be solved for a worldwide standard to be acceptable 10 a large law firm  which has many employees  provides a single email address for each employee each employee ? s email address is < login > @ lawfirm.com however  the firm did not explicitly define the format of the login thus  some employees use their first names as their login names  some use their last names  some use their initials  etc the firm now wishes to make a fixed format  for example  firstname.lastname @ lawfirm.com  that can be used for the email addresses of all its employees how can this be done without rocking the boat too much ? 11 a binary file is 4560 bytes long how long will it be if encoded using base64 encoding  with a cr + lf pair inserted after every 110 bytes sent and at the end ? 12 name five mime types not listed in this book you can check your browser or the internet for information 760 problems chap 7 13 suppose that you want to send an mp3 file to a friend  but your friend ? s isp limits the size of each incoming message to 1 mb and the mp3 file is 4 mb is there a way to handle this situation by using rfc 5322 and mime ? 14 suppose that john just set up an auto-forwarding mechanism on his work email address  which receives all of his business-related emails  to forward them to his personal email address  which he shares with his wife john ? s wife was unaware of this  and activated a vacation agent on their personal account because john forwarded his email  he did not set up a vacation daemon on his work machine what happens when an email is received at john ? s work email address ? 15 in any standard  such as rfc 5322  a precise grammar of what is allowed is needed so that different implementations can interwork even simple items have to be defined carefully the smtp headers allow white space between the tokens give two plausible alternative definitions of white space between tokens 16 is the vacation agent part of the user agent or the message transfer agent ? of course  it is set up using the user agent  but does the user agent actually send the replies ? explain your answer 17 in a simple version of the chord algorithm for peer-to-peer lookup  searches do not use the finger table instead  they are linear around the circle  in either direction can a node accurately predict which direction it should search in ? discuss your answer 18 imap allows users to fetch and download email from a remote mailbox does this mean that the internal format of mailboxes has to be standardized so any imap program on the client side can read the mailbox on any mail server ? discuss your answer 19 consider the chord circle of fig 7-71 suppose that node 18 suddenly goes online which of the finger tables shown in the figure are affected ? how ? 20 does webmail use pop3  imap  or neither ? if one of these  why was that one chosen ? if neither  which one is it closer to in spirit ? 21 when web pages are sent out  they are prefixed by mime headers why ? 22 is it possible that when a user clicks on a link with firefox  a particular helper is started  but clicking on the same link in internet explorer causes a completely different helper to be started  even though the mime type returned in both cases is identical ? explain your answer 23 although it was not mentioned in the text  an alternative form for a url is to use the ip address instead of its dns name use this information to explain why a dns name can not end with a digit 24 imagine that someone in the math department at stanford has just written a new document including a proof that he wants to distribute by ftp for his colleagues to review he puts the program in the ftp directory ftp/pub/forreview/newproof.pdf what is the url for this program likely to be ? 25 in fig 7-22  www.aportal.com keeps track of user preferences in a cookie a disadvantage of this scheme is that cookies are limited to 4 kb  so if the preferences are chap 7 problems 761 extensive  for example  many stocks  sports teams  types of news stories  weather for multiple cities  specials in numerous product categories  and more  the 4-kb limit may be reached design an alternative way to keep track of preferences that does not have this problem 26 sloth bank wants to make online banking easy for its lazy customers  so after a customer signs up and is authenticated by a password  the bank returns a cookie containing a customer id number in this way  the customer does not have to identify himself or type a password on future visits to the online bank what do you think of this idea ? will it work ? is it a good idea ? 27  a  consider the following html tag  < h1 title = ? ? this is the header ? ? > header 1 < /h1 > under what conditions does the browser use the title attribute  and how ?  b  how does the title attribute differ from the alt attribute ? 28 how do you make an image clickable in html ? give an example 29 write an html page that includes a link to the email address username @ domainname com what happens when a user clicks this link ? 30 write an xml page for a university registrar listing multiple students  each having a name  an address  and a gpa 31 for each of the following applications  tell whether it would be  1  possible and  2  better to use a php script or javascript  and why   a  displaying a calendar for any requested month since september 1752  b  displaying the schedule of flights from amsterdam to new york  c  graphing a polynomial from user-supplied coefficients 32 write a program in javascript that accepts an integer greater than 2 and tells whether it is a prime number note that javascript has if and while statements with the same syntax as c and java the modulo operator is %  if you need the square root of x  use math.sqrt  x   33 an html page is as follows  < html > < body > < a href = " www.info-source.com/welcome.html " > click here for info < /a > < /body > < /html > if the user clicks on the hyperlink  a tcp connection is opened and a series of lines is sent to the server list all the lines sent 34 the if-modified-since header can be used to check whether a cached page is still valid requests can be made for pages containing images  sound  video  and so on  as well as html do you think the effectiveness of this technique is better or worse for jpeg images as compared to html ? think carefully about what ? ? effectiveness ? ? means and explain your answer 35 on the day of a major sporting event  such as the championship game in some popular sport  many people go to the official web site is this a flash crowd in the same sense as the 2000 florida presidential election ? why or why not ? 762 problems chap 7 36 does it make sense for a single isp to function as a cdn ? if so  how would that work ? if not  what is wrong with the idea ? 37 assume that compression is not used for audio cds how many mb of data must the compact disc contain in order to be able to play two hours of music ? 38 in fig 7-42  c   quantization noise occurs due to the use of 4-bit samples to represent nine signal values the first sample  at 0  is exact  but the next few are not what is the percent error for the samples at 1/32  2/32  and 3/32 of the period ? 39 could a psychoacoustic model be used to reduce the bandwidth needed for internet telephony ? if so  what conditions  if any  would have to be met to make it work ? if not  why not ? 40 an audio streaming server has a one-way ? ? distance ? ? of 100 msec to a media player it outputs at 1 mbps if the media player has a 2-mb buffer  what can you say about the position of the low-water mark and the high-water mark ? 41 does voice over ip have the same problems with firewalls that streaming audio does ? discuss your answer 42 what is the bit rate for transmitting uncompressed 1200 ? ? 800 pixel color frames with 16 bits/pixel at 50 frames/sec ? 43 can a 1-bit error in an mpeg frame affect more than the frame in which the error occurs ? explain your answer 44 consider a 50,000-customer video server  where each customer watches three movies per month two-thirds of the movies are served at 9 p.m how many movies does the server have to transmit at once during this time period ? if each movie requires 6 mbps  how many oc-12 connections does the server need to the network ? 45 suppose that zipf ? s law holds for accesses to a 10,000-movie video server if the server holds the most popular 1000 movies in memory and the remaining 9000 on disk  give an expression for the fraction of all references that will be to memory write a little program to evaluate this expression numerically 46 some cybersquatters have registered domain names that are misspellings of common corporate sites  for example  www.microsfot.com make a list of at least five such domains 47 numerous people have registered dns names that consist of www.word.com  where word is a common word for each of the following categories  list five such web sites and briefly summarize what it is  e.g  www.stomach.com belongs to a gastroenterologist on long island   here is the list of categories  animals  foods  household objects  and body parts for the last category  please stick to body parts above the waist 48 rewrite the server of fig 6-6 as a true web server using the get command for http 1.1 it should also accept the host message the server should maintain a cache of files recently fetched from the disk and serve requests from the cache when possible 8 network security for the first few decades of their existence  computer networks were primarily used by university researchers for sending email and by corporate employees for sharing printers under these conditions  security did not get a lot of attention but now  as millions of ordinary citizens are using networks for banking  shopping  and filing their tax returns  and weakness after weakness has been found  network security has become a problem of massive proportions in this chapter  we will study network security from several angles  point out numerous pitfalls  and discuss many algorithms and protocols for making networks more secure security is a broad topic and covers a multitude of sins in its simplest form  it is concerned with making sure that nosy people can not read  or worse yet  secretly modify messages intended for other recipients it is concerned with people trying to access remote services that they are not authorized to use it also deals with ways to tell whether that message purportedly from the irs ? ? pay by friday  or else ? ? is really from the irs and not from the mafia security also deals with the problems of legitimate messages being captured and replayed  and with people later trying to deny that they sent certain messages most security problems are intentionally caused by malicious people trying to gain some benefit  get attention  or harm someone a few of the most common perpetrators are listed in fig 8-1 it should be clear from this list that making a network secure involves a lot more than just keeping it free of programming errors it involves outsmarting often intelligent  dedicated  and sometimes wellfunded adversaries it should also be clear that measures that will thwart casual 763 764 network security chap 8 attackers will have little impact on the serious ones police records show that the most damaging attacks are not perpetrated by outsiders tapping a phone line but by insiders bearing a grudge security systems should be designed accordingly adversary goal student to have fun snooping on people ? s email cracker to test out someone ? s security system ; steal data sales rep to claim to represent all of europe  not just andorra corporation to discover a competitor ? s strategic marketing plan ex-employee to get revenge for being fired accountant to embezzle money from a company stockbroker to deny a promise made to a customer by email identity thief to steal credit card numbers for sale government to learn an enemy ? s military or industrial secrets terrorist to steal biological warfare secrets figure 8-1 some people who may cause security problems  and why network security problems can be divided roughly into four closely intertwined areas  secrecy  authentication  nonrepudiation  and integrity control secrecy  also called confidentiality  has to do with keeping information out of the grubby little hands of unauthorized users this is what usually comes to mind when people think about network security authentication deals with determining whom you are talking to before revealing sensitive information or entering into a business deal nonrepudiation deals with signatures  how do you prove that your customer really placed an electronic order for ten million left-handed doohickeys at 89 cents each when he later claims the price was 69 cents ? or maybe he claims he never placed any order finally  integrity control has to do with how you can be sure that a message you received was really the one sent and not something that a malicious adversary modified in transit or concocted all these issues  secrecy  authentication  nonrepudiation  and integrity control  occur in traditional systems  too  but with some significant differences integrity and secrecy are achieved by using registered mail and locking documents up robbing the mail train is harder now than it was in jesse james ? day also  people can usually tell the difference between an original paper document and a photocopy  and it often matters to them as a test  make a photocopy of a valid check try cashing the original check at your bank on monday now try cashing the photocopy of the check on tuesday observe the difference in the bank ? s behavior with electronic checks  the original and the copy are indistinguishable it may take a while for banks to learn how to handle this people authenticate other people by various means  including recognizing their faces  voices  and handwriting proof of signing is handled by signatures on letterhead paper  raised seals  and so on tampering can usually be detected by 765 handwriting  ink  and paper experts none of these options are available electronically clearly  other solutions are needed before getting into the solutions themselves  it is worth spending a few moments considering where in the protocol stack network security belongs there is probably no one single place every layer has something to contribute in the physical layer  wiretapping can be foiled by enclosing transmission lines  or better yet  optical fibers  in sealed tubes containing an inert gas at high pressure any attempt to drill into a tube will release some gas  reducing the pressure and triggering an alarm some military systems use this technique in the data link layer  packets on a point-to-point line can be encrypted as they leave one machine and decrypted as they enter another all the details can be handled in the data link layer  with higher layers oblivious to what is going on this solution breaks down when packets have to traverse multiple routers  however  because packets have to be decrypted at each router  leaving them vulnerable to attacks from within the router also  it does not allow some sessions to be protected  e.g  those involving online purchases by credit card  and others not nevertheless  link encryption  as this method is called  can be added to any network easily and is often useful in the network layer  firewalls can be installed to keep good packets and bad packets out ip security also functions in this layer in the transport layer  entire connections can be encrypted end to end  that is  process to process for maximum security  end-to-end security is required finally  issues such as user authentication and nonrepudiation can only be handled in the application layer since security does not fit neatly into any layer  it does not fit into any chapter of this book for this reason  it rates its own chapter while this chapter is long  technical  and essential  it is also quasi-irrelevant for the moment it is well documented that most security failures at banks  for example  are due to lax security procedures and incompetent employees  numerous implementation bugs that enable remote break-ins by unauthorized users  and socalled social engineering attacks  where customers are tricked into revealing their account details all of these security problems are more prevalent than clever criminals tapping phone lines and then decoding encrypted messages if a person can walk into a random branch of a bank with an atm slip he found on the street claiming to have forgotten his pin and get a new one on the spot  in the name of good customer relations   all the cryptography in the world will not prevent abuse in this respect  ross anderson ? s  2008a  book is a real eye-opener  as it documents hundreds of examples of security failures in numerous industries  nearly all of them due to what might politely be called sloppy business practices or inattention to security nevertheless  the technical foundation on which e-commerce is built when all of these other factors are done well is cryptography except for physical layer security  nearly all network security is based on cryptographic principles for this reason  we will begin our study of security by 766 network security chap 8 examining cryptography in some detail in sec 8.1  we will look at some of the basic principles in sec 8-2 through sec 8-5  we will examine some of the fundamental algorithms and data structures used in cryptography then we will examine in detail how these concepts can be used to achieve security in networks we will conclude with some brief thoughts about technology and society before starting  one last thought is in order  what is not covered we have tried to focus on networking issues  rather than operating system and application issues  although the line is often hard to draw for example  there is nothing here about user authentication using biometrics  password security  buffer overflow attacks  trojan horses  login spoofing  code injection such as cross-site scripting  viruses  worms  and the like all of these topics are covered at length in chap 9 of modern operating systems  tanenbaum  2007   the interested reader is referred to that book for the systems aspects of security now let us begin our journey 8.1 cryptography cryptography comes from the greek words for ? ? secret writing ? ? it has a long and colorful history going back thousands of years in this section  we will just sketch some of the highlights  as background information for what follows for a complete history of cryptography  kahn ? s  1995  book is recommended reading for a comprehensive treatment of modern security and cryptographic algorithms  protocols  and applications  and related material  see kaufman et al  2002   for a more mathematical approach  see stinson  2002   for a less mathematical approach  see burnett and paine  2001   professionals make a distinction between ciphers and codes a cipher is a character-for-character or bit-for-bit transformation  without regard to the linguistic structure of the message in contrast  a code replaces one word with another word or symbol codes are not used any more  although they have a glorious history the most successful code ever devised was used by the u.s armed forces during world war ii in the pacific they simply had navajo indians talking to each other using specific navajo words for military terms  for example chay-dagahi nail-tsaidi  literally  tortoise killer  for antitank weapon the navajo language is highly tonal  exceedingly complex  and has no written form and not a single person in japan knew anything about it in september 1945  the san diego union described the code by saying ? ? for three years  wherever the marines landed  the japanese got an earful of strange gurgling noises interspersed with other sounds resembling the call of a tibetan monk and the sound of a hot water bottle being emptied ? ? the japanese never broke the code and many navajo code talkers were awarded high military honors for extraordinary service and bravery the fact that the u.s broke the japanese code but the japanese never broke the navajo code played a crucial role in the american victories in the pacific sec 8.1 cryptography 767 8.1.1 introduction to cryptography historically  four groups of people have used and contributed to the art of cryptography  the military  the diplomatic corps  diarists  and lovers of these  the military has had the most important role and has shaped the field over the centuries within military organizations  the messages to be encrypted have traditionally been given to poorly paid  low-level code clerks for encryption and transmission the sheer volume of messages prevented this work from being done by a few elite specialists until the advent of computers  one of the main constraints on cryptography had been the ability of the code clerk to perform the necessary transformations  often on a battlefield with little equipment an additional constraint has been the difficulty in switching over quickly from one cryptographic method to another one  since this entails retraining a large number of people however  the danger of a code clerk being captured by the enemy has made it essential to be able to change the cryptographic method instantly if need be these conflicting requirements have given rise to the model of fig 8-2 encryption method  e passive intruder just listens active intruder can alter messages plaintext  p plaintext  p decryption method  d encryption key  k decryption key  k ciphertext  c = ek  p  intruder figure 8-2 the encryption model  for a symmetric-key cipher   the messages to be encrypted  known as the plaintext  are transformed by a function that is parameterized by a key the output of the encryption process  known as the ciphertext  is then transmitted  often by messenger or radio we assume that the enemy  or intruder  hears and accurately copies down the complete ciphertext however  unlike the intended recipient  he does not know what the decryption key is and so can not decrypt the ciphertext easily sometimes the intruder can not only listen to the communication channel  passive intruder  but can also record messages and play them back later  inject his own messages  or modify legitimate messages before they get to the receiver  active intruder   the art of 768 network security chap 8 breaking ciphers  known as cryptanalysis  and the art of devising them  cryptography  are collectively known as cryptology it will often be useful to have a notation for relating plaintext  ciphertext  and keys we will use c ? ? ek  p  to mean that the encryption of the plaintext p using key k gives the ciphertext c similarly  p ? ? dk  c  represents the decryption of c to get the plaintext again it then follows that dk  ek  p   ? ? p this notation suggests that e and d are just mathematical functions  which they are the only tricky part is that both are functions of two parameters  and we have written one of the parameters  the key  as a subscript  rather than as an argument  to distinguish it from the message a fundamental rule of cryptography is that one must assume that the cryptanalyst knows the methods used for encryption and decryption in other words  the cryptanalyst knows how the encryption method  e  and decryption  d  of fig 8-2 work in detail the amount of effort necessary to invent  test  and install a new algorithm every time the old method is compromised  or thought to be compromised  has always made it impractical to keep the encryption algorithm secret thinking it is secret when it is not does more harm than good this is where the key enters the key consists of a  relatively  short string that selects one of many potential encryptions in contrast to the general method  which may only be changed every few years  the key can be changed as often as required thus  our basic model is a stable and publicly known general method parameterized by a secret and easily changed key the idea that the cryptanalyst knows the algorithms and that the secrecy lies exclusively in the keys is called kerckhoff ? s principle  named after the flemish military cryptographer auguste kerckhoff who first stated it in 1883  kerckhoff  1883   thus  we have kerckhoff ? s principle  all algorithms must be public ; only the keys are secret the nonsecrecy of the algorithm can not be emphasized enough trying to keep the algorithm secret  known in the trade as security by obscurity  never works also  by publicizing the algorithm  the cryptographer gets free consulting from a large number of academic cryptologists eager to break the system so they can publish papers demonstrating how smart they are if many experts have tried to break the algorithm for a long time after its publication and no one has succeeded  it is probably pretty solid since the real secrecy is in the key  its length is a major design issue consider a simple combination lock the general principle is that you enter digits in sequence everyone knows this  but the key is secret a key length of two digits means that there are 100 possibilities a key length of three digits means 1000 possibilities  and a key length of six digits means a million the longer the key  the higher the work factor the cryptanalyst has to deal with the work factor for breaking the system by exhaustive search of the key space is exponential in the sec 8.1 cryptography 769 key length secrecy comes from having a strong  but public  algorithm and a long key to prevent your kid brother from reading your email  64-bit keys will do for routine commercial use  at least 128 bits should be used to keep major governments at bay  keys of at least 256 bits  preferably more  are needed from the cryptanalyst ? s point of view  the cryptanalysis problem has three principal variations when he has a quantity of ciphertext and no plaintext  he is confronted with the ciphertext-only problem the cryptograms that appear in the puzzle section of newspapers pose this kind of problem when the cryptanalyst has some matched ciphertext and plaintext  the problem is called the known plaintext problem finally  when the cryptanalyst has the ability to encrypt pieces of plaintext of his own choosing  we have the chosen plaintext problem newspaper cryptograms could be broken trivially if the cryptanalyst were allowed to ask such questions as ? ? what is the encryption of abcdefghijkl ? ? ? novices in the cryptography business often assume that if a cipher can withstand a ciphertext-only attack  it is secure this assumption is very naive in many cases  the cryptanalyst can make a good guess at parts of the plaintext for example  the first thing many computers say when you call them up is ? ? login  ? ?  equipped with some matched plaintext-ciphertext pairs  the cryptanalyst ? s job becomes much easier to achieve security  the cryptographer should be conservative and make sure that the system is unbreakable even if his opponent can encrypt arbitrary amounts of chosen plaintext encryption methods have historically been divided into two categories  substitution ciphers and transposition ciphers we will now deal with each of these briefly as background information for modern cryptography 8.1.2 substitution ciphers in a substitution cipher  each letter or group of letters is replaced by another letter or group of letters to disguise it one of the oldest known ciphers is the caesar cipher  attributed to julius caesar with this method  a becomes d  b becomes e  c becomes f      and z becomes c for example  attack becomes dwwdfn in our examples  plaintext will be given in lowercase letters  and ciphertext in uppercase letters a slight generalization of the caesar cipher allows the ciphertext alphabet to be shifted by k letters  instead of always three in this case  k becomes a key to the general method of circularly shifted alphabets the caesar cipher may have fooled pompey  but it has not fooled anyone since the next improvement is to have each of the symbols in the plaintext  say  the 26 letters for simplicity  map onto some other letter for example  a b c d e f g h i j k l mn o p q r s t u vwx y z qwe r t y u i o p a s d f g h j k l z x c v b nm plaintext  ciphertext  770 network security chap 8 the general system of symbol-for-symbol substitution is called a monoalphabetic substitution cipher  with the key being the 26-letter string corresponding to the full alphabet for the key just given  the plaintext attack would be transformed into the ciphertext qzzqea at first glance this might appear to be a safe system because although the cryptanalyst knows the general system  letter-for-letter substitution   he does not know which of the 26 ! ? ? 4 ? ? 1026 possible keys is in use in contrast with the caesar cipher  trying all of them is not a promising approach even at 1 nsec per solution  a million computer chips working in parallel would take 10,000 years to try all the keys nevertheless  given a surprisingly small amount of ciphertext  the cipher can be broken easily the basic attack takes advantage of the statistical properties of natural languages in english  for example  e is the most common letter  followed by t  o  a  n  i  etc the most common two-letter combinations  or digrams  are th  in  er  re  and an the most common three-letter combinations  or trigrams  are the  ing  and  and ion a cryptanalyst trying to break a monoalphabetic cipher would start out by counting the relative frequencies of all letters in the ciphertext then he might tentatively assign the most common one to e and the next most common one to t he would then look at trigrams to find a common one of the form txe  which strongly suggests that x is h similarly  if the pattern thyt occurs frequently  the y probably stands for a with this information  he can look for a frequently occurring trigram of the form azw  which is most likely and by making guesses at common letters  digrams  and trigrams and knowing about likely patterns of vowels and consonants  the cryptanalyst builds up a tentative plaintext  letter by letter another approach is to guess a probable word or phrase for example  consider the following ciphertext from an accounting firm  blocked into groups of five characters   ctbmn byctc btjds qxbns gstjc btswx ctqtz cqvuj qjsgs tjqzz mnqjs vlnsx vszju jdsts jquus jubxj dsksu jsntk bgaqj zbgyq tlctz bnybn qjsw a likely word in a message from an accounting firm is financial using our knowledge that financial has a repeated letter  i   with four other letters between their occurrences  we look for repeated letters in the ciphertext at this spacing we find 12 hits  at positions 6  15  27  31  42  48  56  66  70  71  76  and 82 however  only two of these  31 and 42  have the next letter  corresponding to n in the plaintext  repeated in the proper place of these two  only 31 also has the a correctly positioned  so we know that financial begins at position 30 from this point on  deducing the key is easy by using the frequency statistics for english text and looking for nearly complete words to finish off sec 8.1 cryptography 771 8.1.3 transposition ciphers substitution ciphers preserve the order of the plaintext symbols but disguise them transposition ciphers  in contrast  reorder the letters but do not disguise them figure 8-3 depicts a common transposition cipher  the columnar transposition the cipher is keyed by a word or phrase not containing any repeated letters in this example  megabuck is the key the purpose of the key is to order the columns  with column 1 being under the key letter closest to the start of the alphabet  and so on the plaintext is written horizontally  in rows  padded to fill the matrix if need be the ciphertext is read out by columns  starting with the column whose key letter is the lowest m e g a b u c k 7 4 5 1 2 8 3 6 p l e a s e t r plaintext pleasetransferonemilliondollarsto myswissbankaccountsixtwotwo ciphertext afllsksoselawaiatoossctclnmomant esilyntwrnntsowdpaedobuoeriricxb a n s f e r o n e m i l l i o n d o l l a r s t o m y s w i s s b a n k a c c o u n t s i x t w o t w o a b c d figure 8-3 a transposition cipher to break a transposition cipher  the cryptanalyst must first be aware that he is dealing with a transposition cipher by looking at the frequency of e  t  a  o  i  n  etc  it is easy to see if they fit the normal pattern for plaintext if so  the cipher is clearly a transposition cipher  because in such a cipher every letter represents itself  keeping the frequency distribution intact the next step is to make a guess at the number of columns in many cases  a probable word or phrase may be guessed at from the context for example  suppose that our cryptanalyst suspects that the plaintext phrase milliondollars occurs somewhere in the message observe that digrams mo  il  ll  la  ir  and os occur in the ciphertext as a result of this phrase wrapping around the ciphertext letter o follows the ciphertext letter m  i.e  they are vertically adjacent in column 4  because they are separated in the probable phrase by a distance equal to the key length if a key of length seven had been used  the digrams md  io  ll  ll  ia  or  and ns would have occurred instead in fact  for each key length  a different set of digrams is produced in the ciphertext by hunting for the various possibilities  the cryptanalyst can often easily determine the key length 772 network security chap 8 the remaining step is to order the columns when the number of columns  k  is small  each of the k  k ? ? 1  column pairs can be examined in turn to see if its digram frequencies match those for english plaintext the pair with the best match is assumed to be correctly positioned now each of the remaining columns is tentatively tried as the successor to this pair the column whose digram and trigram frequencies give the best match is tentatively assumed to be correct the next column is found in the same way the entire process is continued until a potential ordering is found chances are that the plaintext will be recognizable at this point  e.g  if milloin occurs  it is clear what the error is   some transposition ciphers accept a fixed-length block of input and produce a fixed-length block of output these ciphers can be completely described by giving a list telling the order in which the characters are to be output for example  the cipher of fig 8-3 can be seen as a 64 character block cipher its output is 4  12  20  28  36  44  52  60  5  13      62 in other words  the fourth input character  a  is the first to be output  followed by the twelfth  f  and so on 8.1.4 one-time pads constructing an unbreakable cipher is actually quite easy ; the technique has been known for decades first choose a random bit string as the key then convert the plaintext into a bit string  for example  by using its ascii representation finally  compute the xor  exclusive or  of these two strings  bit by bit the resulting ciphertext can not be broken because in a sufficiently large sample of ciphertext  each letter will occur equally often  as will every digram  every trigram  and so on this method  known as the one-time pad  is immune to all present and future attacks  no matter how much computational power the intruder has the reason derives from information theory  there is simply no information in the message because all possible plaintexts of the given length are equally likely an example of how one-time pads are used is given in fig 8-4 first  message 1  ? ? i love you ? ? is converted to 7-bit ascii then a one-time pad  pad 1  is chosen and xored with the message to get the ciphertext a cryptanalyst could try all possible one-time pads to see what plaintext came out for each one for example  the one-time pad listed as pad 2 in the figure could be tried  resulting in plaintext 2  ? ? elvis lives ? ?  which may or may not be plausible  a subject beyond the scope of this book   in fact  for every 11-character ascii plaintext  there is a one-time pad that generates it that is what we mean by saying there is no information in the ciphertext  you can get any message of the correct length out of it one-time pads are great in theory but have a number of disadvantages in practice to start with  the key can not be memorized  so both sender and receiver must carry a written copy with them if either one is subject to capture  written keys are clearly undesirable additionally  the total amount of data that can be transmitted is limited by the amount of key available if the spy strikes it rich and discovers a wealth of data  he may find himself unable to transmit them back to sec 8.1 cryptography 773 message 1  1001001 0100000 1101100 1101111 1110110 1100101 0100000 1111001 1101111 1110101 0101110 pad 1  1010010 1001011 1110010 1010101 1010010 1100011 0001011 0101010 1010111 1100110 0101011 ciphertext  0011011 1101011 0011110 0111010 0100100 0000110 0101011 1010011 0111000 0010011 0000101 pad 2  1011110 0000111 1101000 1010011 1010111 0100110 1000111 0111010 1001110 1110110 1110110 plaintext 2  1000101 1101100 1110110 1101001 1110011 0100000 1101100 1101001 1110110 1100101 1110011 figure 8-4 the use of a one-time pad for encryption and the possibility of getting any possible plaintext from the ciphertext by the use of some other pad headquarters because the key has been used up another problem is the sensitivity of the method to lost or inserted characters if the sender and receiver get out of synchronization  all data from then on will appear garbled with the advent of computers  the one-time pad might potentially become practical for some applications the source of the key could be a special dvd that contains several gigabytes of information and  if transported in a dvd movie box and prefixed by a few minutes of video  would not even be suspicious of course  at gigabit network speeds  having to insert a new dvd every 30 sec could become tedious and the dvds must be personally carried from the sender to the receiver before any messages can be sent  which greatly reduces their practical utility quantum cryptography interestingly  there may be a solution to the problem of how to transmit the one-time pad over the network  and it comes from a very unlikely source  quantum mechanics this area is still experimental  but initial tests are promising if it can be perfected and be made efficient  virtually all cryptography will eventually be done using one-time pads since they are provably secure below we will briefly explain how this method  quantum cryptography  works in particular  we will describe a protocol called bb84 after its authors and publication year  bennet and brassard  1984   suppose that a user  alice  wants to establish a one-time pad with a second user  bob alice and bob are called principals  the main characters in our story for example  bob is a banker with whom alice would like to do business the names ? ? alice ? ? and ? ? bob ? ? have been used for the principals in virtually every paper and book on cryptography since ron rivest introduced them many years ago  rivest et al  1978   cryptographers love tradition if we were to use ? ? andy ? ? and ? ? barbara ? ? as the principals  no one would believe anything in this chapter so be it if alice and bob could establish a one-time pad  they could use it to communicate securely the question is  how can they establish it without previously exchanging dvds ? we can assume that alice and bob are at the opposite ends 774 network security chap 8 of an optical fiber over which they can send and receive light pulses however  an intrepid intruder  trudy  can cut the fiber to splice in an active tap trudy can read all the bits sent in both directions she can also send false messages in both directions the situation might seem hopeless for alice and bob  but quantum cryptography can shed some new light on the subject quantum cryptography is based on the fact that light comes in little packets called photons  which have some peculiar properties furthermore  light can be polarized by being passed through a polarizing filter  a fact well known to both sunglasses wearers and photographers if a beam of light  i.e  a stream of photons  is passed through a polarizing filter  all the photons emerging from it will be polarized in the direction of the filter ? s axis  e.g  vertically   if the beam is now passed through a second polarizing filter  the intensity of the light emerging from the second filter is proportional to the square of the cosine of the angle between the axes if the two axes are perpendicular  no photons get through the absolute orientation of the two filters does not matter ; only the angle between their axes counts to generate a one-time pad  alice needs two sets of polarizing filters set one consists of a vertical filter and a horizontal filter this choice is called a rectilinear basis a basis  plural  bases  is just a coordinate system the second set of filters is the same  except rotated 45 degrees  so one filter runs from the lower left to the upper right and the other filter runs from the upper left to the lower right this choice is called a diagonal basis thus  alice has two bases  which she can rapidly insert into her beam at will in reality  alice does not have four separate filters  but a crystal whose polarization can be switched electrically to any of the four allowed directions at great speed bob has the same equipment as alice the fact that alice and bob each have two bases available is essential to quantum cryptography for each basis  alice now assigns one direction as 0 and the other as 1 in the example presented below  we assume she chooses vertical to be 0 and horizontal to be 1 independently  she also chooses lower left to upper right as 0 and upper left to lower right as 1 she sends these choices to bob as plaintext now alice picks a one-time pad  for example based on a random number generator  a complex subject all by itself   she transfers it bit by bit to bob  choosing one of her two bases at random for each bit to send a bit  her photon gun emits one photon polarized appropriately for the basis she is using for that bit for example  she might choose bases of diagonal  rectilinear  rectilinear  diagonal  rectilinear  etc to send her one-time pad of 1001110010100110 with these bases  she would send the photons shown in fig 8-5  a   given the one-time pad and the sequence of bases  the polarization to use for each bit is uniquely determined bits sent one photon at a time are called qubits bob does not know which bases to use  so he picks one at random for each arriving photon and just uses it  as shown in fig 8-5  b   if he picks the correct basis  he gets the correct bit if he picks the incorrect basis  he gets a random bit sec 8.1 cryptography 775 trudy 's pad  g  x 0 x 1 x x x ? 1 x ? ? 0 x ? 0 1 0 1 1 0 0 1 x no yes no yes no no no yes yes no yes yes yes no yes no bit number data trudy 's bases  f  onetime pad  e  correct basis ?  d  what bob gets  c  bob 's bases  b  what alice sends  a  1 0 0 1 1 1 0 0 1 0 1 0 0 1 1 0 0 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 figure 8-5 an example of quantum cryptography because if a photon hits a filter polarized at 45 degrees to its own polarization  it randomly jumps to the polarization of the filter or to a polarization perpendicular to the filter  with equal probability this property of photons is fundamental to quantum mechanics thus  some of the bits are correct and some are random  but bob does not know which are which bob ? s results are depicted in fig 8-5  c   how does bob find out which bases he got right and which he got wrong ? he simply tells alice which basis he used for each bit in plaintext and she tells him which are right and which are wrong in plaintext  as shown in fig 8-5  d   from this information  both of them can build a bit string from the correct guesses  as shown in fig 8-5  e   on the average  this bit string will be half the length of the original bit string  but since both parties know it  they can use it as a one-time pad all alice has to do is transmit a bit string slightly more than twice the desired length  and she and bob will have a one-time pad of the desired length done but wait a minute we forgot trudy suppose that she is curious about what alice has to say and cuts the fiber  inserting her own detector and transmitter unfortunately for her  she does not know which basis to use for each photon either the best she can do is pick one at random for each photon  just as bob does an example of her choices is shown in fig 8-5  f   when bob later reports  in plaintext  which bases he used and alice tells him  in plaintext  which ones are 776 network security chap 8 correct  trudy now knows when she got it right and when she got it wrong in fig 8-5  she got it right for bits 0  1  2  3  4  6  8  12  and 13 but she knows from alice ? s reply in fig 8-5  d  that only bits 1  3  7  8  10  11  12  and 14 are part of the one-time pad for four of these bits  1  3  8  and 12   she guessed right and captured the correct bit for the other four  7  10  11  and 14   she guessed wrong and does not know the bit transmitted thus  bob knows the one-time pad starts with 01011001  from fig 8-5  e  but all trudy has is 01 ? 1 ? ? 0 ?  from fig 8-5  g   of course  alice and bob are aware that trudy may have captured part of their one-time pad  so they would like to reduce the information trudy has they can do this by performing a transformation on it for example  they could divide the one-time pad into blocks of 1024 bits  square each one to form a 2048-bit number  and use the concatenation of these 2048-bit numbers as the one-time pad with her partial knowledge of the bit string transmitted  trudy has no way to generate its square and so has nothing the transformation from the original one-time pad to a different one that reduces trudy ? s knowledge is called privacy amplification in practice  complex transformations in which every output bit depends on every input bit are used instead of squaring poor trudy not only does she have no idea what the one-time pad is  but her presence is not a secret either after all  she must relay each received bit to bob to trick him into thinking he is talking to alice the trouble is  the best she can do is transmit the qubit she received  using the polarization she used to receive it  and about half the time she will be wrong  causing many errors in bob ? s one-time pad when alice finally starts sending data  she encodes it using a heavy forwarderror correcting code from bob ? s point of view  a 1-bit error in the one-time pad is the same as a 1-bit transmission error either way  he gets the wrong bit if there is enough forward error correction  he can recover the original message despite all the errors  but he can easily count how many errors were corrected if this number is far more than the expected error rate of the equipment  he knows that trudy has tapped the line and can act accordingly  e.g  tell alice to switch to a radio channel  call the police  etc   if trudy had a way to clone a photon so she had one photon to inspect and an identical photon to send to bob  she could avoid detection  but at present no way to clone a photon perfectly is known and even if trudy could clone photons  the value of quantum cryptography to establish onetime pads would not be reduced although quantum cryptography has been shown to operate over distances of 60 km of fiber  the equipment is complex and expensive still  the idea has promise for more information about quantum cryptography  see mullins  2002   8.1.5 two fundamental cryptographic principles although we will study many different cryptographic systems in the pages ahead  two principles underlying all of them are important to understand pay attention you violate them at your peril sec 8.1 cryptography 777 redundancy the first principle is that all encrypted messages must contain some redundancy  that is  information not needed to understand the message an example may make it clear why this is needed consider a mail-order company  the couch potato  tcp   with 60,000 products thinking they are being very efficient  tcp ? s programmers decide that ordering messages should consist of a 16 byte customer name followed by a 3-byte data field  1 byte for the quantity and 2 bytes for the product number   the last 3 bytes are to be encrypted using a very long key known only by the customer and tcp at first  this might seem secure  and in a sense it is because passive intruders can not decrypt the messages unfortunately  it also has a fatal flaw that renders it useless suppose that a recently fired employee wants to punish tcp for firing her just before leaving  she takes the customer list with her she works through the night writing a program to generate fictitious orders using real customer names since she does not have the list of keys  she just puts random numbers in the last 3 bytes  and sends hundreds of orders off to tcp when these messages arrive  tcp ? s computer uses the customers ? name to locate the key and decrypt the message unfortunately for tcp  almost every 3 byte message is valid  so the computer begins printing out shipping instructions while it might seem odd for a customer to order 837 sets of children ? s swings or 540 sandboxes  for all the computer knows  the customer might be planning to open a chain of franchised playgrounds in this way  an active intruder  the exemployee  can cause a massive amount of trouble  even though she can not understand the messages her computer is generating this problem can be solved by the addition of redundancy to all messages for example  if order messages are extended to 12 bytes  the first 9 of which must be zeros  this attack no longer works because the ex-employee can no longer generate a large stream of valid messages the moral of the story is that all messages must contain considerable redundancy so that active intruders can not send random junk and have it be interpreted as a valid message however  adding redundancy makes it easier for cryptanalysts to break messages suppose that the mail-order business is highly competitive  and the couch potato ? s main competitor  the sofa tuber  would dearly love to know how many sandboxes tcp is selling so it taps tcp ? s phone line in the original scheme with 3-byte messages  cryptanalysis was nearly impossible because after guessing a key  the cryptanalyst had no way of telling whether it was right because almost every message was technically legal with the new 12-byte scheme  it is easy for the cryptanalyst to tell a valid message from an invalid one thus  we have cryptographic principle 1  messages must contain some redundancy in other words  upon decrypting a message  the recipient must be able to tell whether it is valid by simply inspecting the message and perhaps performing a 778 network security chap 8 simple computation this redundancy is needed to prevent active intruders from sending garbage and tricking the receiver into decrypting the garbage and acting on the ? ? plaintext ? ? however  this same redundancy makes it much easier for passive intruders to break the system  so there is some tension here furthermore  the redundancy should never be in the form of n 0s at the start or end of a message  since running such messages through some cryptographic algorithms gives more predictable results  making the cryptanalysts ? job easier a crc polynomial is much better than a run of 0s since the receiver can easily verify it  but it generates more work for the cryptanalyst even better is to use a cryptographic hash  a concept we will explore later for the moment  think of it as a better crc getting back to quantum cryptography for a moment  we can also see how redundancy plays a role there due to trudy ? s interception of the photons  some bits in bob ? s one-time pad will be wrong bob needs some redundancy in the incoming messages to determine that errors are present one very crude form of redundancy is repeating the message two times if the two copies are not identical  bob knows that either the fiber is very noisy or someone is tampering with the transmission of course  sending everything twice is overkill ; a hamming or reed-solomon code is a more efficient way to do error detection and correction but it should be clear that some redundancy is needed to distinguish a valid message from an invalid message  especially in the face of an active intruder freshness the second cryptographic principle is that measures must be taken to ensure that each message received can be verified as being fresh  that is  sent very recently this measure is needed to prevent active intruders from playing back old messages if no such measures were taken  our ex-employee could tap tcp ? s phone line and just keep repeating previously sent valid messages thus  cryptographic principle 2  some method is needed to foil replay attacks one such measure is including in every message a timestamp valid only for  say  10 seconds the receiver can then just keep messages around for 10 seconds and compare newly arrived messages to previous ones to filter out duplicates messages older than 10 seconds can be thrown out  since any replays sent more than 10 seconds later will be rejected as too old measures other than timestamps will be discussed later 8.2 symmetric-key algorithms modern cryptography uses the same basic ideas as traditional cryptography  transposition and substitution   but its emphasis is different traditionally  cryptographers have used simple algorithms nowadays  the reverse is true  the object sec 8.2 symmetric-key algorithms 779 is to make the encryption algorithm so complex and involuted that even if the cryptanalyst acquires vast mounds of enciphered text of his own choosing  he will not be able to make any sense of it at all without the key the first class of encryption algorithms we will study in this chapter are called symmetric-key algorithms because they use the same key for encryption and decryption fig 8-2 illustrates the use of a symmetric-key algorithm in particular  we will focus on block ciphers  which take an n-bit block of plaintext as input and transform it using the key into an n-bit block of ciphertext cryptographic algorithms can be implemented in either hardware  for speed  or software  for flexibility   although most of our treatment concerns the algorithms and protocols  which are independent of the actual implementation  a few words about building cryptographic hardware may be of interest transpositions and substitutions can be implemented with simple electrical circuits figure 8 6  a  shows a device  known as a p-box  p stands for permutation   used to effect a transposition on an 8-bit input if the 8 bits are designated from top to bottom as 01234567  the output of this particular p-box is 36071245 by appropriate internal wiring  a p-box can be made to perform any transposition and do it at practically the speed of light since no computation is involved  just signal propagation this design follows kerckhoff ? s principle  the attacker knows that the general method is permuting the bits what he does not know is which bit goes where s1 s2 p1 p2 p3 p4 s3 s4 s5 s6 s7 s8 product cipher  c  s-box decoder  3 to 8 encoder  8 to 3  b  p-box  a  s9 s10 s11 s12 figure 8-6 basic elements of product ciphers  a  p-box  b  s-box  c  product substitutions are performed by s-boxes  as shown in fig 8-6  b   in this example  a 3-bit plaintext is entered and a 3-bit ciphertext is output the 3-bit input selects one of the eight lines exiting from the first stage and sets it to 1 ; all the other lines are 0 the second stage is a p-box the third stage encodes the selected input line in binary again with the wiring shown  if the eight octal numbers 01234567 were input one after another  the output sequence would be 24506713 in other words  0 has been replaced by 2  1 has been replaced by 4  etc again  by appropriate wiring of the p-box inside the s-box  any substitution can be accomplished furthermore  such a device can be built in hardware to achieve great speed  since encoders and decoders have only one or two  subnanosecond  gate delays and the propagation time across the p-box may well be less than 1 picosec 780 network security chap 8 the real power of these basic elements only becomes apparent when we cascade a whole series of boxes to form a product cipher  as shown in fig 8-6  c   in this example  12 input lines are transposed  i.e  permuted  by the first stage  p1   in the second stage  the input is broken up into four groups of 3 bits  each of which is substituted independently of the others  s1 to s4   this arrangement shows a method of approximating a larger s-box from multiple  smaller s-boxes it is useful because small s-boxes are practical for a hardware implementation  e.g  an 8-bit s-box can be realized as a 256-entry lookup table   but large sboxes become unwieldy to build  e.g  a 12-bit s-box would at a minimum need 212 ? ? 4096 crossed wires in its middle stage   although this method is less general  it is still powerful by inclusion of a sufficiently large number of stages in the product cipher  the output can be made to be an exceedingly complicated function of the input product ciphers that operate on k-bit inputs to produce k-bit outputs are very common typically  k is 64 to 256 a hardware implementation usually has at least 10 physical stages  instead of just 7 as in fig 8-6  c   a software implementation is programmed as a loop with at least eight iterations  each one performing s-box-type substitutions on subblocks of the 64 to 256-bit data block  followed by a permutation that mixes the outputs of the s-boxes often there is a special initial permutation and one at the end as well in the literature  the iterations are called rounds 8.2.1 des ? the data encryption standard in january 1977  the u.s government adopted a product cipher developed by ibm as its official standard for unclassified information this cipher  des  data encryption standard   was widely adopted by the industry for use in security products it is no longer secure in its original form  but in a modified form it is still useful we will now explain how des works an outline of des is shown in fig 8-7  a   plaintext is encrypted in blocks of 64 bits  yielding 64 bits of ciphertext the algorithm  which is parameterized by a 56-bit key  has 19 distinct stages the first stage is a key-independent transposition on the 64-bit plaintext the last stage is the exact inverse of this transposition the stage prior to the last one exchanges the leftmost 32 bits with the rightmost 32 bits the remaining 16 stages are functionally identical but are parameterized by different functions of the key the algorithm has been designed to allow decryption to be done with the same key as encryption  a property needed in any symmetric-key algorithm the steps are just run in the reverse order the operation of one of these intermediate stages is illustrated in fig 8-7  b   each stage takes two 32-bit inputs and produces two 32-bit outputs the left output is simply a copy of the right input the right output is the bitwise xor of the left input and a function of the right input and the key for this stage  ki  pretty much all the complexity of the algorithm lies in this function sec 8.2 symmetric-key algorithms 781  a   b  initial transposition iteration 16 li-1 ? ? f  ri -1  ki  64-bit plaintext l i-1 ri-1 64-bit ciphertext 32 bits li 32 bits ri iteration 2 iteration 1 56-bit key 32-bit swap inverse transposition figure 8-7 the data encryption standard  a  general outline  b  detail of one iteration the circled + means exclusive or the function consists of four steps  carried out in sequence first  a 48-bit number  e  is constructed by expanding the 32-bit ri ? ? 1 according to a fixed transposition and duplication rule second  e and ki are xored together this output is then partitioned into eight groups of 6 bits each  each of which is fed into a different s-box each of the 64 possible inputs to an s-box is mapped onto a 4 bit output finally  these 8 ? ? 4 bits are passed through a p-box in each of the 16 iterations  a different key is used before the algorithm starts  a 56-bit transposition is applied to the key just before each iteration  the key is partitioned into two 28-bit units  each of which is rotated left by a number of bits dependent on the iteration number ki is derived from this rotated key by applying yet another 56-bit transposition to it a different 48-bit subset of the 56 bits is extracted and permuted on each round a technique that is sometimes used to make des stronger is called whitening it consists of xoring a random 64-bit key with each plaintext block before feeding it into des and then xoring a second 64-bit key with the resulting ciphertext before transmitting it whitening can easily be removed by running the 782 network security chap 8 reverse operations  if the receiver has the two whitening keys   since this technique effectively adds more bits to the key length  it makes an exhaustive search of the key space much more time consuming note that the same whitening key is used for each block  i.e  there is only one whitening key   des has been enveloped in controversy since the day it was launched it was based on a cipher developed and patented by ibm  called lucifer  except that ibm ? s cipher used a 128-bit key instead of a 56-bit key when the u.s federal government wanted to standardize on one cipher for unclassified use  it ? ? invited ? ? ibm to ? ? discuss ? ? the matter with nsa  the u.s government ? s code-breaking arm  which is the world ? s largest employer of mathematicians and cryptologists nsa is so secret that an industry joke goes  q  what does nsa stand for ? a  no such agency actually  nsa stands for national security agency after these discussions took place  ibm reduced the key from 128 bits to 56 bits and decided to keep secret the process by which des was designed many people suspected that the key length was reduced to make sure that nsa could just break des  but no organization with a smaller budget could the point of the secret design was supposedly to hide a back door that could make it even easier for nsa to break des when an nsa employee discreetly told ieee to cancel a planned conference on cryptography  that did not make people any more comfortable nsa denied everything in 1977  two stanford cryptography researchers  diffie and hellman  1977   designed a machine to break des and estimated that it could be built for 20 million dollars given a small piece of plaintext and matched ciphertext  this machine could find the key by exhaustive search of the 256-entry key space in under 1 day nowadays  the game is up such a machine exists  is for sale  and costs less than $ 10,000 to make  kumar et al  2006   triple des as early as 1979  ibm realized that the des key length was too short and devised a way to effectively increase it  using triple encryption  tuchman  1979   the method chosen  which has since been incorporated in international standard 8732  is illustrated in fig 8-8 here  two keys and three stages are used in the first stage  the plaintext is encrypted using des in the usual way with k1 in the second stage  des is run in decryption mode  using k2 as the key finally  another des encryption is done with k1 this design immediately gives rise to two questions first  why are only two keys used  instead of three ? second  why is ede  encrypt decrypt encrypt  used  instead of eee  encrypt encrypt encrypt  ? the reason that two keys are used is that even the most paranoid of cryptographers believe that 112 bits is sec 8.2 symmetric-key algorithms 783 k1 e k2 d k1 p e c k1 d k2 e  a   b  k1 c d p figure 8-8  a  triple encryption using des  b  decryption adequate for routine commercial applications for the time being  and among cryptographers  paranoia is considered a feature  not a bug  going to 168 bits would just add the unnecessary overhead of managing and transporting another key for little real gain the reason for encrypting  decrypting  and then encrypting again is backward compatibility with existing single-key des systems both the encryption and decryption functions are mappings between sets of 64-bit numbers from a cryptographic point of view  the two mappings are equally strong by using ede  however  instead of eee  a computer using triple encryption can speak to one using single encryption by just setting k1 ? ? k2 this property allows triple encryption to be phased in gradually  something of no concern to academic cryptographers but of considerable importance to ibm and its customers 8.2.2 aes ? the advanced encryption standard as des began approaching the end of its useful life  even with triple des  nist  national institute of standards and technology   the agency of the u.s dept of commerce charged with approving standards for the u.s federal government  decided that the government needed a new cryptographic standard for unclassified use nist was keenly aware of all the controversy surrounding des and well knew that if it just announced a new standard  everyone knowing anything about cryptography would automatically assume that nsa had built a back door into it so nsa could read everything encrypted with it under these conditions  probably no one would use the standard and it would have died quietly so  nist took a surprisingly different approach for a government bureaucracy  it sponsored a cryptographic bake-off  contest   in january 1997  researchers from all over the world were invited to submit proposals for a new standard  to be called aes  advanced encryption standard   the bake-off rules were  1 the algorithm must be a symmetric block cipher 2 the full design must be public 3 key lengths of 128  192  and 256 bits must be supported 784 network security chap 8 4 both software and hardware implementations must be possible 5 the algorithm must be public or licensed on nondiscriminatory terms fifteen serious proposals were made  and public conferences were organized in which they were presented and attendees were actively encouraged to find flaws in all of them in august 1998  nist selected five finalists  primarily on the basis of their security  efficiency  simplicity  flexibility  and memory requirements  important for embedded systems   more conferences were held and more potshots taken in october 2000  nist announced that it had selected rijndael  by joan daemen and vincent rijmen the name rijndael  pronounced rhine-doll  more or less   is derived from the last names of the authors  rijmen + daemen in november 2001  rijndael became the aes u.s government standard  published as fips  federal information processing standard  197 due to the extraordinary openness of the competition  the technical properties of rijndael  and the fact that the winning team consisted of two young belgian cryptographers  who were unlikely to have built in a back door just to please nsa   rijndael has become the world ? s dominant cryptographic cipher aes encryption and decryption is now part of the instruction set for some microprocessors  e.g  intel   rijndael supports key lengths and block sizes from 128 bits to 256 bits in steps of 32 bits the key length and block length may be chosen independently however  aes specifies that the block size must be 128 bits and the key length must be 128  192  or 256 bits it is doubtful that anyone will ever use 192-bit keys  so de facto  aes has two variants  a 128-bit block with a 128-bit key and a 128-bit block with a 256-bit key in our treatment of the algorithm  we will examine only the 128/128 case because this is likely to become the commercial norm a 128-bit key gives a key space of 2128 ? ? 3 ? ? 1038 keys even if nsa manages to build a machine with 1 billion parallel processors  each being able to evaluate one key per picosecond  it would take such a machine about 1010 years to search the key space by then the sun will have burned out  so the folks then present will have to read the results by candlelight rijndael from a mathematical perspective  rijndael is based on galois field theory  which gives it some provable security properties however  it can also be viewed as c code  without getting into the mathematics like des  rijndael uses substitution and permutations  and it also uses multiple rounds the number of rounds depends on the key size and block size  being 10 for 128-bit keys with 128-bit blocks and moving up to 14 for the largest key or the largest block however  unlike des  all operations involve entire bytes  to sec 8.2 symmetric-key algorithms 785 allow for efficient implementations in both hardware and software an outline of the code is given in fig 8-9 note that this code is for the purpose of illustration good implementations of security code will follow additional practices  such as zeroing out sensitive memory after it has been used see  for example  ferguson et al  2010   # define length 16 / * # bytes in data block or key * / # define nrows 4 / * number of rows in state * / # define ncols 4 / * number of columns in state * / # define rounds 10 / * number of iterations * / typedef unsigned char byte ; / * unsigned 8-bit integer * / rijndael  byte plaintext  length   byte ciphertext  length   byte key  length    int r ; / * loop index * / byte state  nrows   ncols  ; / * current state * / struct  byte k  nrows   ncols  ;  rk  rounds + 1  ; / * round keys * / expand key  key  rk  ; / * construct the round keys * / copy plaintext to state  state  plaintext  ; / * init current state * / xor roundkey into state  state  rk  0   ; / * xor key into state * / for  r = 1 ; r < = rounds ; r + +   substitute  state  ; / * apply s-box to each byte * / rotate rows  state  ; / * rotate row i by i bytes * / if  r < rounds  mix columns  state  ; / * mix function * / xor roundkey into state  state  rk  r   ; / * xor key into state * /  copy state to ciphertext  ciphertext  state  ; / * return result * /  figure 8-9 an outline of rijndael in c the function rijndael has three parameters they are  plaintext  an array of 16 bytes containing the input data ; ciphertext  an array of 16 bytes where the enciphered output will be returned ; and key  the 16-byte key during the calculation  the current state of the data is maintained in a byte array  state  whose size is nrows ? ? ncols for 128-bit blocks  this array is 4 ? ? 4 bytes with 16 bytes  the full 128-bit data block can be stored the state array is initialized to the plaintext and modified by every step in the computation in some steps  byte-for-byte substitution is performed in others  the bytes are permuted within the array other transformations are also used at the end  the contents of the state are returned as the ciphertext the code starts out by expanding the key into 11 arrays of the same size as the state they are stored in rk  which is an array of structs  each containing a state array one of these will be used at the start of the calculation and the other 10 will be used during the 10 rounds  one per round the calculation of the round 786 network security chap 8 keys from the encryption key is too complicated for us to get into here suffice it to say that the round keys are produced by repeated rotation and xoring of various groups of key bits for all the details  see daemen and rijmen  2002   the next step is to copy the plaintext into the state array so it can be processed during the rounds it is copied in column order  with the first 4 bytes going into column 0  the next 4 bytes going into column 1  and so on both the columns and the rows are numbered starting at 0  although the rounds are numbered starting at 1 this initial setup of the 12 byte arrays of size 4 ? ? 4 is illustrated in fig 8-10 state rk  0  rk  1  rk  2  rk  3  rk  4  rk  5  rk  6  rk  7  rk  8  rk  9  rk  10  128-bit plaintext 128-bit encryption key round keys figure 8-10 creating the state and rk arrays there is one more step before the main computation begins  rk  0  is xored into state  byte for byte in other words  each of the 16 bytes in state is replaced by the xor of itself and the corresponding byte in rk  0   now it is time for the main attraction the loop executes 10 iterations  one per round  transforming state on each iteration the contents of each round is produced in four steps step 1 does a byte-for-byte substitution on state each byte in turn is used as an index into an s-box to replace its value by the contents of that s-box entry this step is a straight monoalphabetic substitution cipher unlike des  which has multiple s-boxes  rijndael has only one s-box step 2 rotates each of the four rows to the left row 0 is rotated 0 bytes  i.e  not changed   row 1 is rotated 1 byte  row 2 is rotated 2 bytes  and row 3 is rotated 3 bytes this step diffuses the contents of the current data around the block  analogous to the permutations of fig 8-6 step 3 mixes up each column independently of the other ones the mixing is done using matrix multiplication in which the new column is the product of the old column and a constant matrix  with the multiplication done using the finite galois field  gf  28   although this may sound complicated  an algorithm exists that allows each element of the new column to be computed using two table lookups and three xors  daemen and rijmen  2002  appendix e   sec 8.2 symmetric-key algorithms 787 finally  step 4 xors the key for this round into the state array for use in the next round since every step is reversible  decryption can be done just by running the algorithm backward however  there is also a trick available in which decryption can be done by running the encryption algorithm using different tables the algorithm has been designed not only for great security  but also for great speed a good software implementation on a 2-ghz machine should be able to achieve an encryption rate of 700 mbps  which is fast enough to encrypt over 100 mpeg-2 videos in real time hardware implementations are faster still 8.2.3 cipher modes despite all this complexity  aes  or des  or any block cipher for that matter  is basically a monoalphabetic substitution cipher using big characters  128-bit characters for aes and 64-bit characters for des   whenever the same plaintext block goes in the front end  the same ciphertext block comes out the back end if you encrypt the plaintext abcdefgh 100 times with the same des key  you get the same ciphertext 100 times an intruder can exploit this property to help subvert the cipher electronic code book mode to see how this monoalphabetic substitution cipher property can be used to partially defeat the cipher  we will use  triple  des because it is easier to depict 64-bit blocks than 128-bit blocks  but aes has exactly the same problem the straightforward way to use des to encrypt a long piece of plaintext is to break it up into consecutive 8-byte  64-bit  blocks and encrypt them one after another with the same key the last piece of plaintext is padded out to 64 bits  if need be this technique is known as ecb mode  electronic code book mode  in analogy with old-fashioned code books where each plaintext word was listed  followed by its ciphertext  usually a five-digit decimal number   in fig 8-11  we have the start of a computer file listing the annual bonuses a company has decided to award to its employees this file consists of consecutive 32-byte records  one per employee  in the format shown  16 bytes for the name  8 bytes for the position  and 8 bytes for the bonus each of the sixteen 8-byte blocks  numbered from 0 to 15  is encrypted by  triple  des leslie just had a fight with the boss and is not expecting much of a bonus kim  in contrast  is the boss ? favorite  and everyone knows this leslie can get access to the file after it is encrypted but before it is sent to the bank can leslie rectify this unfair situation  given only the encrypted file ? no problem at all all leslie has to do is make a copy of the 12th ciphertext block  which contains kim ? s bonus  and use it to replace the fourth ciphertext block  which contains leslie ? s bonus   even without knowing what the 12th 788 network security chap 8 name position bonus bytes 16 8 8 d a v i s  b o b b i e j a n i t o r $ 5 c o l l i n s  k i m m a n a g e r $ 1 0 0  0 0 0 b l a c k  r o b i n b o s s $ 5 0 0  0 0 0 a d a m s  l e s l i e c l e r k $ 1 0 figure 8-11 the plaintext of a file encrypted as 16 des blocks block says  leslie can expect to have a much merrier christmas this year  copying the eighth ciphertext block is also a possibility  but is more likely to be detected ; besides  leslie is not a greedy person  cipher block chaining mode to thwart this type of attack  all block ciphers can be chained in various ways so that replacing a block the way leslie did will cause the plaintext decrypted starting at the replaced block to be garbage one way of chaining is cipher block chaining in this method  shown in fig 8-12  each plaintext block is xored with the previous ciphertext block before being encrypted consequently  the same plaintext block no longer maps onto the same ciphertext block  and the encryption is no longer a big monoalphabetic substitution cipher the first block is xored with a randomly chosen iv  initialization vector   which is transmitted  in plaintext  along with the ciphertext  a   b  + e iv key key iv p0 c0 + e p1 c1 e p2 c2 e p3 c3 d c0 p0 d c1 p1 d c2 p2 d decryption box encryption box exclusive or c3 p3 + + + + + + figure 8-12 cipher block chaining  a  encryption  b  decryption we can see how cipher block chaining mode works by examining the example of fig 8-12 we start out by computing c0 ? ? e  p0 xor iv   then we compute c1 ? ? e  p1 xor c0   and so on decryption also uses xor to reverse the process  with p0 ? ? iv xor d  c0   and so on note that the encryption of block i is a sec 8.2 symmetric-key algorithms 789 function of all the plaintext in blocks 0 through i ? ? 1  so the same plaintext generates different ciphertext depending on where it occurs a transformation of the type leslie made will result in nonsense for two blocks starting at leslie ? s bonus field to an astute security officer  this peculiarity might suggest where to start the ensuing investigation cipher block chaining also has the advantage that the same plaintext block will not result in the same ciphertext block  making cryptanalysis more difficult in fact  this is the main reason it is used cipher feedback mode however  cipher block chaining has the disadvantage of requiring an entire 64-bit block to arrive before decryption can begin for byte-by-byte encryption  cipher feedback mode using  triple  des is used  as shown in fig 8-13 for aes  the idea is exactly the same  only a 128-bit shift register is used in this figure  the state of the encryption machine is shown after bytes 0 through 9 have been encrypted and sent when plaintext byte 10 arrives  as illustrated in fig 8 13  a   the des algorithm operates on the 64-bit shift register to generate a 64-bit ciphertext the leftmost byte of that ciphertext is extracted and xored with p10 that byte is transmitted on the transmission line in addition  the shift register is shifted left 8 bits  causing c2 to fall off the left end  and c10 is inserted in the position just vacated at the right end by c9  a  key p10 c10 c10 c10 e 64-bit shift register c2 c3 c4 c5 c6 c7 c8 c9 encryption box select leftmost byte exclusive or  b  key c10 p10 e 64-bit shift register c2 c3 c4 c5 c6 c7 c8 c9 + encryption box select leftmost byte + figure 8-13 cipher feedback mode  a  encryption  b  decryption note that the contents of the shift register depend on the entire previous history of the plaintext  so a pattern that repeats multiple times in the plaintext will be encrypted differently each time in the ciphertext as with cipher block chaining  an initialization vector is needed to start the ball rolling 790 network security chap 8 decryption with cipher feedback mode works the same way as encryption in particular  the content of the shift register is encrypted  not decrypted  so the selected byte that is xored with c10 to get p10 is the same one that was xored with p10 to generate c10 in the first place as long as the two shift registers remain identical  decryption works correctly this is illustrated in fig 8-13  b   a problem with cipher feedback mode is that if one bit of the ciphertext is accidentally inverted during transmission  the 8 bytes that are decrypted while the bad byte is in the shift register will be corrupted once the bad byte is pushed out of the shift register  correct plaintext will once again be generated thus  the effects of a single inverted bit are relatively localized and do not ruin the rest of the message  but they do ruin as many bits as the shift register is wide stream cipher mode nevertheless  applications exist in which having a 1-bit transmission error mess up 64 bits of plaintext is too large an effect for these applications  a fourth option  stream cipher mode  exists it works by encrypting an initialization vector  using a key to get an output block the output block is then encrypted  using the key to get a second output block this block is then encrypted to get a third block  and so on the  arbitrarily large  sequence of output blocks  called the keystream  is treated like a one-time pad and xored with the plaintext to get the ciphertext  as shown in fig 8-14  a   note that the iv is used only on the first step after that  the output is encrypted also note that the keystream is independent of the data  so it can be computed in advance  if need be  and is completely insensitive to transmission errors decryption is shown in fig 8-14  b   e  a  key plaintext ciphertext keystream encryption box iv + e  b  key ciphertext plaintext keystream encryption box iv + figure 8-14 a stream cipher  a  encryption  b  decryption decryption occurs by generating the same keystream at the receiving side since the keystream depends only on the iv and the key  it is not affected by transmission errors in the ciphertext thus  a 1-bit error in the transmitted ciphertext generates only a 1-bit error in the decrypted plaintext sec 8.2 symmetric-key algorithms 791 it is essential never to use the same  key  iv  pair twice with a stream cipher because doing so will generate the same keystream each time using the same keystream twice exposes the ciphertext to a keystream reuse attack imagine that the plaintext block  p0  is encrypted with the keystream to get p0 xor k0 later  a second plaintext block  q0  is encrypted with the same keystream to get q0 xor k0 an intruder who captures both of these ciphertext blocks can simply xor them together to get p0 xor q0  which eliminates the key the intruder now has the xor of the two plaintext blocks if one of them is known or can be guessed  the other can also be found in any event  the xor of two plaintext streams can be attacked by using statistical properties of the message for example  for english text  the most common character in the stream will probably be the xor of two spaces  followed by the xor of space and the letter ? ? e ? ?  etc in short  equipped with the xor of two plaintexts  the cryptanalyst has an excellent chance of deducing both of them counter mode one problem that all the modes except electronic code book mode have is that random access to encrypted data is impossible for example  suppose a file is transmitted over a network and then stored on disk in encrypted form this might be a reasonable way to operate if the receiving computer is a notebook computer that might be stolen storing all critical files in encrypted form greatly reduces the damage due to secret information leaking out in the event that the computer falls into the wrong hands however  disk files are often accessed in nonsequential order  especially files in databases with a file encrypted using cipher block chaining  accessing a random block requires first decrypting all the blocks ahead of it  an expensive proposition for this reason  yet another mode has been invented  counter mode  as illustrated in fig 8-15 here  the plaintext is not encrypted directly instead  the initialization vector plus a constant is encrypted  and the resulting ciphertext is xored with the plaintext by stepping the initialization vector by 1 for each new block  it is easy to decrypt a block anywhere in the file without first having to decrypt all of its predecessors although counter mode is useful  it has a weakness that is worth pointing out suppose that the same key  k  is used again in the future  with a different plaintext but the same iv  and an attacker acquires all the ciphertext from both runs the keystreams are the same in both cases  exposing the cipher to a keystream reuse attack of the same kind we saw with stream ciphers all the cryptanalyst has to do is xor the two ciphertexts together to eliminate all the cryptographic protection and just get the xor of the plaintexts this weakness does not mean counter mode is a bad idea it just means that both keys and initialization vectors should be chosen independently and at random even if the same key is accidentally used twice  if the iv is different each time  the plaintext is safe 792 network security chap 8 encryption box + e iv key p0 c0 + e iv + 1 key p1 c1 + e iv + 2 key p2 c2 + e iv + 3 key p3 c3 figure 8-15 encryption using counter mode 8.2.4 other ciphers aes  rijndael  and des are the best-known symmetric-key cryptographic algorithms  and the standard industry choices  if only for liability reasons  no one will blame you if you use aes in your product and aes is cracked  but they will certainly blame you if you use a nonstandard cipher and it is later broken  however  it is worth mentioning that numerous other symmetric-key ciphers have been devised some of these are embedded inside various products a few of the more common ones are listed in fig 8-16 it is possible to use combinations of these ciphers  for example  aes over twofish  so that both ciphers need to be broken to recover the data cipher author key length comments des ibm 56 bits too weak to use now rc4 ronald rivest 1 ? 2048 bits caution  some keys are weak rc5 ronald rivest 128 ? 256 bits good  but patented aes  rijndael  daemen and rijmen 128 ? 256 bits best choice serpent anderson  biham  knudsen 128 ? 256 bits very strong triple des ibm 168 bits good  but getting old twofish bruce schneier 128 ? 256 bits very strong ; widely used figure 8-16 some common symmetric-key cryptographic algorithms 8.2.5 cryptanalysis before leaving the subject of symmetric-key cryptography  it is worth at least mentioning four developments in cryptanalysis the first development is differential cryptanalysis  biham and shamir  1997   this technique can be used sec 8.2 symmetric-key algorithms 793 to attack any block cipher it works by beginning with a pair of plaintext blocks differing in only a small number of bits and watching carefully what happens on each internal iteration as the encryption proceeds in many cases  some bit patterns are more common than others  which can lead to probabilistic attacks the second development worth noting is linear cryptanalysis  matsui  1994   it can break des with only 243 known plaintexts it works by xoring certain bits in the plaintext and ciphertext together and examining the result when done repeatedly  half the bits should be 0s and half should be 1s often  however  ciphers introduce a bias in one direction or the other  and this bias  however small  can be exploited to reduce the work factor for the details  see matsui ? s paper the third development is using analysis of electrical power consumption to find secret keys computers typically use around 3 volts to represent a 1 bit and 0 volts to represent a 0 bit thus  processing a 1 takes more electrical energy than processing a 0 if a cryptographic algorithm consists of a loop in which the key bits are processed in order  an attacker who replaces the main n-ghz clock with a slow  e.g  100-hz  clock and puts alligator clips on the cpu ? s power and ground pins can precisely monitor the power consumed by each machine instruction from this data  deducing the key is surprisingly easy this kind of cryptanalysis can be defeated only by carefully coding the algorithm in assembly language to make sure power consumption is independent of the key and also independent of all the individual round keys the fourth development is timing analysis cryptographic algorithms are full of if statements that test bits in the round keys if the then and else parts take different amounts of time  by slowing down the clock and seeing how long various steps take  it may also be possible to deduce the round keys once all the round keys are known  the original key can usually be computed power and timing analysis can also be employed simultaneously to make the job easier while power and timing analysis may seem exotic  in reality they are powerful techniques that can break any cipher not specifically designed to resist them 8.3 public-key algorithms historically  distributing the keys has always been the weakest link in most cryptosystems no matter how strong a cryptosystem was  if an intruder could steal the key  the system was worthless cryptologists always took for granted that the encryption key and decryption key were the same  or easily derived from one another   but the key had to be distributed to all users of the system thus  it seemed as if there was an inherent problem keys had to be protected from theft  but they also had to be distributed  so they could not be locked in a bank vault in 1976  two researchers at stanford university  diffie and hellman  1976   proposed a radically new kind of cryptosystem  one in which the encryption and decryption keys were so different that the decryption key could not feasibly be 794 network security chap 8 derived from the encryption key in their proposal  the  keyed  encryption algorithm  e  and the  keyed  decryption algorithm  d  had to meet three requirements these requirements can be stated simply as follows  1 d  e  p   ? ? p 2 it is exceedingly difficult to deduce d from e 3 e can not be broken by a chosen plaintext attack the first requirement says that if we apply d to an encrypted message  e  p   we get the original plaintext message  p  back without this property  the legitimate receiver could not decrypt the ciphertext the second requirement speaks for itself the third requirement is needed because  as we shall see in a moment  intruders may experiment with the algorithm to their hearts ? content under these conditions  there is no reason that the encryption key can not be made public the method works like this a person  say  alice  who wants to receive secret messages  first devises two algorithms meeting the above requirements the encryption algorithm and alice ? s key are then made public  hence the name publickey cryptography alice might put her public key on her home page on the web  for example we will use the notation ea to mean the encryption algorithm parameterized by alice ? s public key similarly  the  secret  decryption algorithm parameterized by alice ? s private key is da bob does the same thing  publicizing eb but keeping db secret now let us see if we can solve the problem of establishing a secure channel between alice and bob  who have never had any previous contact both alice ? s encryption key  ea  and bob ? s encryption key  eb  are assumed to be in publicly readable files now alice takes her first message  p  computes eb  p   and sends it to bob bob then decrypts it by applying his secret key db  i.e  he computes db  eb  p   ? ? p   no one else can read the encrypted message  eb  p   because the encryption system is assumed to be strong and because it is too difficult to derive db from the publicly known eb to send a reply  r  bob transmits ea  r   alice and bob can now communicate securely a note on terminology is perhaps useful here public-key cryptography requires each user to have two keys  a public key  used by the entire world for encrypting messages to be sent to that user  and a private key  which the user needs for decrypting messages we will consistently refer to these keys as the public and private keys  respectively  and distinguish them from the secret keys used for conventional symmetric-key cryptography 8.3.1 rsa the only catch is that we need to find algorithms that indeed satisfy all three requirements due to the potential advantages of public-key cryptography  many researchers are hard at work  and some algorithms have already been published sec 8.3 public-key algorithms 795 one good method was discovered by a group at m.i.t  rivest et al  1978   it is known by the initials of the three discoverers  rivest  shamir  adleman   rsa it has survived all attempts to break it for more than 30 years and is considered very strong much practical security is based on it for this reason  rivest  shamir  and adleman were given the 2002 acm turing award its major disadvantage is that it requires keys of at least 1024 bits for good security  versus 128 bits for symmetric-key algorithms   which makes it quite slow the rsa method is based on some principles from number theory we will now summarize how to use the method ; for details  consult the paper 1 choose two large primes  p and q  typically 1024 bits   2 compute n ? ? p ? ? q and z ? ?  p ? ? 1  ? ?  q ? ? 1   3 choose a number relatively prime to z and call it d 4 find e such that e ? ? d ? ? 1 mod z with these parameters computed in advance  we are ready to begin encryption divide the plaintext  regarded as a bit string  into blocks  so that each plaintext message  p  falls in the interval 0 ? ? p < n do that by grouping the plaintext into blocks of k bits  where k is the largest integer for which 2k < n is true to encrypt a message  p  compute c ? ? pe  mod n   to decrypt c  compute p ? ? cd  mod n   it can be proven that for all p in the specified range  the encryption and decryption functions are inverses to perform the encryption  you need e and n to perform the decryption  you need d and n therefore  the public key consists of the pair  e  n  and the private key consists of  d  n   the security of the method is based on the difficulty of factoring large numbers if the cryptanalyst could factor the  publicly known  n  he could then find p and q  and from these z equipped with knowledge of z and e  d can be found using euclid ? s algorithm fortunately  mathematicians have been trying to factor large numbers for at least 300 years  and the accumulated evidence suggests that it is an exceedingly difficult problem according to rivest and colleagues  factoring a 500-digit number would require 1025 years using brute force in both cases  they assumed the best known algorithm and a computer with a 1 ? sec instruction time with a million chips running in parallel  each with an instruction time of 1 nsec  it would still take 1016 years even if computers continue to get faster by an order of magnitude per decade  it will be many years before factoring a 500-digit number becomes feasible  at which time our descendants can simply choose p and q still larger a trivial pedagogical example of how the rsa algorithm works is given in fig 8-17 for this example  we have chosen p ? ? 3 and q ? ? 11  giving n ? ? 33 and z ? ? 20 a suitable value for d is d ? ? 7  since 7 and 20 have no common factors with these choices  e can be found by solving the equation 7e ? ? 1  mod 20   which yields e ? ? 3 the ciphertext  c  corresponding to a plaintext message  p  is 796 network security chap 8 given by c ? ? p3  mod 33   the ciphertext is decrypted by the receiver by making use of the rule p ? ? c7  mod 33   the figure shows the encryption of the plaintext ? ? suzanne ? ? as an example symbolic s u z a n n e symbolic s u z a n n e numeric plaintext  p  ciphertext  c  after decryption sender 's computation receiver 's computation 19 21 26 01 14 14 05 19 21 26 01 14 14 05 p3 6859 9261 17576 1 2744 2744 125 p3  mod 33  c7  mod 33  28 21 20 1 5 5 26 c7 13492928512 1801088541 1280000000 1 78125 78125 8031810176 figure 8-17 an example of the rsa algorithm because the primes chosen for this example are so small  p must be less than 33  so each plaintext block can contain only a single character the result is a monoalphabetic substitution cipher  not very impressive if instead we had chosen p and q ? ? 2512  we would have n ? ? 21024  so each block could be up to 1024 bits or 128 eight-bit characters  versus 8 characters for des and 16 characters for aes it should be pointed out that using rsa as we have described is similar to using a symmetric algorithm in ecb mode ? the same input block gives the same output block therefore  some form of chaining is needed for data encryption however  in practice  most rsa-based systems use public-key cryptography primarily for distributing one-time session keys for use with some symmetric-key algorithm such as aes or triple des rsa is too slow for actually encrypting large volumes of data but is widely used for key distribution 8.3.2 other public-key algorithms although rsa is widely used  it is by no means the only public-key algorithm known the first public-key algorithm was the knapsack algorithm  merkle and hellman  1978   the idea here is that someone owns a large number of objects  each with a different weight the owner encodes the message by secretly selecting a subset of the objects and placing them in the knapsack the total weight of the objects in the knapsack is made public  as is the list of all possible objects and their corresponding weights the list of objects in the knapsack is kept secret with certain additional restrictions  the problem of figuring out a possible list of objects with the given weight was thought to be computationally infeasible and formed the basis of the public-key algorithm sec 8.3 public-key algorithms 797 the algorithm ? s inventor  ralph merkle  was quite sure that this algorithm could not be broken  so he offered a $ 100 reward to anyone who could break it adi shamir  the ? ? s ? ? in rsa  promptly broke it and collected the reward undeterred  merkle strengthened the algorithm and offered a $ 1000 reward to anyone who could break the new one ronald rivest  the ? ? r ? ? in rsa  promptly broke the new one and collected the reward merkle did not dare offer $ 10,000 for the next version  so ? ? a ? ?  leonard adleman  was out of luck nevertheless  the knapsack algorithm is not considered secure and is not used in practice any more other public-key schemes are based on the difficulty of computing discrete logarithms algorithms that use this principle have been invented by el gamal  1985  and schnorr  1991   a few other schemes exist  such as those based on elliptic curves  menezes and vanstone  1993   but the two major categories are those based on the difficulty of factoring large numbers and computing discrete logarithms modulo a large prime these problems are thought to be genuinely difficult to solve ? mathematicians have been working on them for many years without any great breakthroughs 8.4 digital signatures the authenticity of many legal  financial  and other documents is determined by the presence or absence of an authorized handwritten signature and photocopies do not count for computerized message systems to replace the physical transport of paper-and-ink documents  a method must be found to allow documents to be signed in an unforgeable way the problem of devising a replacement for handwritten signatures is a difficult one basically  what is needed is a system by which one party can send a signed message to another party in such a way that the following conditions hold  1 the receiver can verify the claimed identity of the sender 2 the sender can not later repudiate the contents of the message 3 the receiver can not possibly have concocted the message himself the first requirement is needed  for example  in financial systems when a customer ? s computer orders a bank ? s computer to buy a ton of gold  the bank ? s computer needs to be able to make sure that the computer giving the order really belongs to the customer whose account is to be debited in other words  the bank has to authenticate the customer  and the customer has to authenticate the bank   the second requirement is needed to protect the bank against fraud suppose that the bank buys the ton of gold  and immediately thereafter the price of gold 798 network security chap 8 drops sharply a dishonest customer might then proceed to sue the bank  claiming that he never issued any order to buy gold when the bank produces the message in court  the customer may deny having sent it the property that no party to a contract can later deny having signed it is called nonrepudiation the digital signature schemes that we will now study help provide it the third requirement is needed to protect the customer in the event that the price of gold shoots up and the bank tries to construct a signed message in which the customer asked for one bar of gold instead of one ton in this fraud scenario  the bank just keeps the rest of the gold for itself 8.4.1 symmetric-key signatures one approach to digital signatures is to have a central authority that knows everything and whom everyone trusts  say  big brother  bb   each user then chooses a secret key and carries it by hand to bb ? s office thus  only alice and bb know alice ? s secret key  ka  and so on when alice wants to send a signed plaintext message  p  to her banker  bob  she generates ka  b  ra  t  p   where b is bob ? s identity  ra is a random number chosen by alice  t is a timestamp to ensure freshness  and ka  b  ra  t  p  is the message encrypted with her key  ka then she sends it as depicted in fig 8-18 bb sees that the message is from alice  decrypts it  and sends a message to bob as shown the message to bob contains the plaintext of alice ? s message and also the signed message kbb  a  t  p   bob now carries out alice ? s request a  ka  b  ra  t  p  bob alice bb kb  a  ra  t  p  kbb  a  t  p   1 2 figure 8-18 digital signatures with big brother what happens if alice later denies sending the message ? step 1 is that everyone sues everyone  at least  in the united states   finally  when the case comes to court and alice vigorously denies sending bob the disputed message  the judge will ask bob how he can be sure that the disputed message came from alice and not from trudy bob first points out that bb will not accept a message from alice unless it is encrypted with ka  so there is no possibility of trudy sending bb a false message from alice without bb detecting it immediately bob then dramatically produces exhibit a  kbb  a  t  p   bob says that this is a message signed by bb that proves alice sent p to bob the judge then asks bb  whom everyone trusts  to decrypt exhibit a when bb testifies that bob is telling the truth  the judge decides in favor of bob case dismissed sec 8.4 digital signatures 799 one potential problem with the signature protocol of fig 8-18 is trudy replaying either message to minimize this problem  timestamps are used throughout furthermore  bob can check all recent messages to see if ra was used in any of them if so  the message is discarded as a replay note that based on the timestamp  bob will reject very old messages to guard against instant replay attacks  bob just checks the ra of every incoming message to see if such a message has been received from alice in the past hour if not  bob can safely assume this is a new request 8.4.2 public-key signatures a structural problem with using symmetric-key cryptography for digital signatures is that everyone has to agree to trust big brother furthermore  big brother gets to read all signed messages the most logical candidates for running the big brother server are the government  the banks  the accountants  and the lawyers unfortunately  none of these inspire total confidence in all citizens hence  it would be nice if signing documents did not require a trusted authority fortunately  public-key cryptography can make an important contribution in this area let us assume that the public-key encryption and decryption algorithms have the property that e  d  p   ? ? p  in addition  of course  to the usual property that d  e  p   ? ? p  rsa has this property  so the assumption is not unreasonable  assuming that this is the case  alice can send a signed plaintext message  p  to bob by transmitting eb  da  p    note carefully that alice knows her own  private  key  da  as well as bob ? s public key  eb  so constructing this message is something alice can do when bob receives the message  he transforms it using his private key  as usual  yielding da  p   as shown in fig 8-19 he stores this text in a safe place and then applies ea to get the original plaintext bob 's public key  eb alice 's private key  da bob 's private key  db da  p  eb  da  p   da  p  transmission line alice 's computer bob 's computer p p alice 's public key  ea figure 8-19 digital signatures using public-key cryptography to see how the signature property works  suppose that alice subsequently denies having sent the message p to bob when the case comes up in court  bob can produce both p and da  p   the judge can easily verify that bob indeed has a valid message encrypted by da by simply applying ea to it since bob does not 800 network security chap 8 know what alice ? s private key is  the only way bob could have acquired a message encrypted by it is if alice did indeed send it while in jail for perjury and fraud  alice will have much time to devise interesting new public-key algorithms although using public-key cryptography for digital signatures is an elegant scheme  there are problems that are related to the environment in which they operate rather than to the basic algorithm for one thing  bob can prove that a message was sent by alice only as long as da remains secret if alice discloses her secret key  the argument no longer holds  because anyone could have sent the message  including bob himself the problem might arise  for example  if bob is alice ? s stockbroker suppose that alice tells bob to buy a certain stock or bond immediately thereafter  the price drops sharply to repudiate her message to bob  alice runs to the police claiming that her home was burglarized and the pc holding her key was stolen depending on the laws in her state or country  she may or may not be legally liable  especially if she claims not to have discovered the break-in until getting home from work  several hours after it allegedly happened another problem with the signature scheme is what happens if alice decides to change her key doing so is clearly legal  and it is probably a good idea to do so periodically if a court case later arises  as described above  the judge will apply the current ea to da  p  and discover that it does not produce p bob will look pretty stupid at this point in principle  any public-key algorithm can be used for digital signatures the de facto industry standard is the rsa algorithm many security products use it however  in 1991  nist proposed using a variant of the el gamal public-key algorithm for its new digital signature standard  dss   el gamal gets its security from the difficulty of computing discrete logarithms  rather than from the difficulty of factoring large numbers as usual when the government tries to dictate cryptographic standards  there was an uproar dss was criticized for being 1 too secret  nsa designed the protocol for using el gamal   2 too slow  10 to 40 times slower than rsa for checking signatures   3 too new  el gamal had not yet been thoroughly analyzed   4 too insecure  fixed 512-bit key   in a subsequent revision  the fourth point was rendered moot when keys up to 1024 bits were allowed nevertheless  the first two points remain valid 8.4.3 message digests one criticism of signature methods is that they often couple two distinct functions  authentication and secrecy often  authentication is needed but secrecy is not always needed also  getting an export license is often easier if the system in sec 8.4 digital signatures 801 question provides only authentication but not secrecy below we will describe an authentication scheme that does not require encrypting the entire message this scheme is based on the idea of a one-way hash function that takes an arbitrarily long piece of plaintext and from it computes a fixed-length bit string this hash function  md  often called a message digest  has four important properties  1 given p  it is easy to compute md  p   2 given md  p   it is effectively impossible to find p 3 given p  no one can find p ? ? such that md  p ?  ? ? md  p   4 a change to the input of even 1 bit produces a very different output to meet criterion 3  the hash should be at least 128 bits long  preferably more to meet criterion 4  the hash must mangle the bits very thoroughly  not unlike the symmetric-key encryption algorithms we have seen computing a message digest from a piece of plaintext is much faster than encrypting that plaintext with a public-key algorithm  so message digests can be used to speed up digital signature algorithms to see how this works  consider the signature protocol of fig 8-18 again instead  of signing p with kbb  a  t  p   bb now computes the message digest by applying md to p  yielding md  p   bb then encloses kbb  a  t  md  p   as the fifth item in the list encrypted with kb that is sent to bob  instead of kbb  a  t  p   if a dispute arises  bob can produce both p and kbb  a  t  md  p    after big brother has decrypted it for the judge  bob has md  p   which is guaranteed to be genuine  and the alleged p however  since it is effectively impossible for bob to find any other message that gives this hash  the judge will easily be convinced that bob is telling the truth using message digests in this way saves both encryption time and message transport costs message digests work in public-key cryptosystems  too  as shown in fig 8 20 here  alice first computes the message digest of her plaintext she then signs the message digest and sends both the signed digest and the plaintext to bob if trudy replaces p along the way  bob will see this when he computes md  p   p  da  md  p   bob alice figure 8-20 digital signatures using message digests 802 network security chap 8 sha-1 and sha-2 a variety of message digest functions have been proposed one of the most widely used functions is sha-1  secure hash algorithm 1   nist  1993   like all message digests  it operates by mangling bits in a sufficiently complicated way that every output bit is affected by every input bit sha-1 was developed by nsa and blessed by nist in fips 180-1 it processes input data in 512-bit blocks  and it generates a 160-bit message digest a typical way for alice to send a nonsecret but signed message to bob is illustrated in fig 8-21 here  her plaintext message is fed into the sha-1 algorithm to get a 160-bit sha-1 hash alice then signs the hash with her rsa private key and sends both the plaintext message and the signed hash to bob sha-1 algorithm h 160-bit sha-1 hash of m da  h  signed hash rsa algorithm alice 's private key  da sent to bob alice 's plaintext message m  arbitrary length  figure 8-21 use of sha-1 and rsa for signing nonsecret messages after receiving the message  bob computes the sha-1 hash himself and also applies alice ? s public key to the signed hash to get the original hash  h if the two agree  the message is considered valid since there is no way for trudy to modify the  plaintext  message while it is in transit and produce a new one that hashes to h  bob can easily detect any changes trudy has made to the message for messages whose integrity is important but whose contents are not secret  the scheme of fig 8-21 is widely used for a relatively small cost in computation  it guarantees that any modifications made to the plaintext message in transit can be detected with very high probability now let us briefly see how sha-1 works it starts out by padding the message by adding a 1 bit to the end  followed by as many 0 bits as are necessary  but at least 64  to make the length a multiple of 512 bits then a 64-bit number containing the message length before padding is ored into the low-order 64 bits in fig 8-22  the message is shown with padding on the right because english text and figures go from left to right  i.e  the lower right is generally perceived as the end of the figure   with computers  this orientation corresponds to big-endian machines such as the sparc and the ibm 360 and its successors  but sha-1 always pads the end of the message  no matter which endian machine is used sec 8.4 digital signatures 803 m0 h0 w0 m1 h1 w1 m2 h2 w2 h3 mn-1  a  start of message 512-bit block 32-bit word padding  b   c  h4 w79 figure 8-22  a  a message padded out to a multiple of 512 bits  b  the output variables  c  the word array during the computation  sha-1 maintains five 32-bit variables  h0 through h4  where the hash accumulates these are shown in fig 8-22  b   they are initialized to constants specified in the standard each of the blocks m0 through mn ? 1 is now processed in turn for the current block  the 16 words are first copied into the start of an auxiliary 80-word array  w  as shown in fig 8-22  c   then the other 64 words in w are filled in using the formula wi ? ? s1  wi ? 3 xor wi ? 8 xor wi ? 14 xor wi ? 16   16 ? ? i ? ? 79  where sb  w  represents the left circular rotation of the 32-bit word  w  by b bits now five scratch variables  a through e  are initialized from h0 through h4  respectively the actual calculation can be expressed in pseudo-c as for  i = 0 ; i < 80 ; i + +   temp = s5  a  + fi  b  c  d  + e + wi + ki ; e = d ; d = c ; c = s30  b  ; b = a ; a = temp ;  where the ki constants are defined in the standard the mixing functions fi are defined as fi  b,c,d  ? ?  b and c  or  not b and d   0 ? ? i ? ? 19  fi  b,c,d  ? ? b xor c xor d  20 ? ? i ? ? 39  fi  b,c,d  ? ?  b and c  or  b and d  or  c and d   40 ? ? i ? ? 59  fi  b,c,d  ? ? b xor c xor d  60 ? ? i ? ? 79  when all 80 iterations of the loop are completed  a through e are added to h0 through h4  respectively now that the first 512-bit block has been processed  the next one is started the w array is reinitialized from the new block  but h is left as it was when this 804 network security chap 8 block is finished  the next one is started  and so on  until all the 512-bit message blocks have been tossed into the soup when the last block has been finished  the five 32-bit words in the h array are output as the 160-bit cryptographic hash the complete c code for sha-1 is given in rfc 3174 new versions of sha-1 have been developed that produce hashes of 224  256  384  and 512 bits collectively  these versions are called sha-2 not only are these hashes longer than sha-1 hashes  but the digest function has been changed to combat some potential weaknesses of sha-1 sha-2 is not yet widely used  but it is likely to be in the future md5 for completeness  we will mention another digest that is popular md5  rivest  1992  is the fifth in a series of message digests designed by ronald rivest very briefly  the message is padded to a length of 448 bits  modulo 512   then the original length of the message is appended as a 64-bit integer to give a total input whose length is a multiple of 512 bits each round of the computation takes a 512-bit block of input and mixes it thoroughly with a running 128-bit buffer for good measure  the mixing uses a table constructed from the sine function the point of using a known function is to avoid any suspicion that the designer built in a clever back door through which only he can enter this process continues until all the input blocks have been consumed the contents of the 128-bit buffer form the message digest after more than a decade of solid use and study  weaknesses in md5 have led to the ability to find collisions  or different messages with the same hash  sotirov  et al  2008   this is the death knell for a digest function because it means that the digest can not safely be used to represent a message thus  the security community considers md5 to be broken ; it should be replaced where possible and no new systems should use it as part of their design nevertheless  you may still see md5 used in existing systems 8.4.4 the birthday attack in the world of crypto  nothing is ever what it seems to be one might think that it would take on the order of 2m operations to subvert an m-bit message digest in fact  2m/2 operations will often do using the birthday attack  an approach published by yuval  1979  in his now-classic paper ? ? how to swindle rabin ? ? the idea for this attack comes from a technique that math professors often use in their probability courses the question is  how many students do you need in a class before the probability of having two people with the same birthday exceeds 1/2 ? most students expect the answer to be way over 100 in fact  probability theory says it is just 23 without giving a rigorous analysis  intuitively  with 23 sec 8.4 digital signatures 805 people  we can form  23 ? ? 22  /2 ? ? 253 different pairs  each of which has a probability of 1/365 of being a hit in this light  it is not really so surprising any more more generally  if there is some mapping between inputs and outputs with n inputs  people  messages  etc  and k possible outputs  birthdays  message digests  etc   there are n  n ? ? 1  /2 input pairs if n  n ? ? 1  /2 > k  the chance of having at least one match is pretty good thus  approximately  a match is likely for n > ? k  this result means that a 64-bit message digest can probably be broken by generating about 232 messages and looking for two with the same message digest let us look at a practical example the department of computer science at state university has one position for a tenured faculty member and two candidates  tom and dick tom was hired two years before dick  so he goes up for review first if he gets it  dick is out of luck tom knows that the department chairperson  marilyn  thinks highly of his work  so he asks her to write him a letter of recommendation to the dean  who will decide on tom ? s case once sent  all letters become confidential marilyn tells her secretary  ellen  to write the dean a letter  outlining what she wants in it when it is ready  marilyn will review it  compute and sign the 64-bit digest  and send it to the dean ellen can send the letter later by email unfortunately for tom  ellen is romantically involved with dick and would like to do tom in  so she writes the following letter with the 32 bracketed options  dear dean smith  this  letter | message  is to give my  honest | frank  opinion of prof tom wilson  who is  a candidate | up  for tenure  now | this year   i have  known | worked with  prof wilson for  about | almost  six years he is an  outstanding | excellent  researcher of great  talent | ability  known  worldwide | internationally  for his  brilliant | creative  insights into  many | a wide variety of   difficult | challenging  problems he is also a  highly | greatly   respected | admired   teacher | educator   his students give his  classes | courses   rave | spectacular  reviews he is  our | the department ? s   most popular | best-loved   teacher | instructor    in addition | additionally  prof wilson is a  gifted | effective  fund raiser his  grants | contracts  have brought a  large | substantial  amount of money into  the | our  department  this money has | these funds have   enabled | permitted  us to  pursue | carry out  many  special | important  programs   such as | for example  your state 2000 program without these funds we would  be unable | not be able  to continue this program  which is so  important | essential  to both of us i strongly urge you to grant him tenure unfortunately for tom  as soon as ellen finishes composing and typing in this letter  she also writes a second one  806 network security chap 8 dear dean smith  this  letter | message  is to give my  honest | frank  opinion of prof tom wilson  who is  a candidate | up  for tenure  now | this year   i have  known | worked with  tom for  about | almost  six years he is a  poor | weak  researcher not well known in his  field | area   his research  hardly ever | rarely  shows  insight in | understanding of  the  key | major  problems of  the | our  day furthermore  he is not a  respected | admired   teacher | educator   his students give his  classes | courses   poor | bad  reviews he is  our | the department ? s  least popular  teacher | instructor   known  mostly | primarily  within  the | our  department for his  tendency | propensity  to  ridicule | embarrass  students  foolish | imprudent  enough to ask questions in his classes  in addition | additionally  tom is a  poor | marginal  fund raiser his  grants | contracts  have brought only a  meager | insignificant  amount of money into  the | our  department unless new  money is | funds are  quickly located  we may have to cancel some essential programs  such as your state 2000 program unfortunately  under these  conditions | circumstances  i can not in good  conscience | faith  recommend him to you for  tenure | a permanent position   now ellen programs her computer to compute the 232 message digests of each letter overnight chances are  one digest of the first letter will match one digest of the second if not  she can add a few more options and try again tonight suppose that she finds a match call the ? ? good ? ? letter a and the ? ? bad ? ? one b ellen now emails letter a to marilyn for approval letter b she keeps secret  showing it to no one marilyn  of course  approves it  computes her 64-bit message digest  signs the digest  and emails the signed digest off to dean smith independently  ellen emails letter b to the dean  not letter a  as she is supposed to   after getting the letter and signed message digest  the dean runs the message digest algorithm on letter b  sees that it agrees with what marilyn sent him  and fires tom the dean does not realize that ellen managed to generate two letters with the same message digest and sent her a different one than the one marilyn saw and approved  optional ending  ellen tells dick what she did dick is appalled and breaks off the affair ellen is furious and confesses to marilyn marilyn calls the dean tom gets tenure after all  with sha-1  the birthday attack is difficult because even at the ridiculous speed of 1 trillion digests per second  it would take over 32,000 years to compute all 280 digests of two letters with 80 variants each  and even then a match is not guaranteed with a cloud of 1,000,000 chips working in parallel  32,000 years becomes 2 weeks 8.5 management of public keys public-key cryptography makes it possible for people who do not share a common key in advance to nevertheless communicate securely it also makes signing messages possible without the presence of a trusted third party finally  sec 8.5 management of public keys 807 signed message digests make it possible for the recipient to verify the integrity of received messages easily and securely however  there is one problem that we have glossed over a bit too quickly  if alice and bob do not know each other  how do they get each other ? s public keys to start the communication process ? the obvious solution ? put your public key on your web site ? does not work  for the following reason suppose that alice wants to look up bob ? s public key on his web site how does she do it ? she starts by typing in bob ? s url her browser then looks up the dns address of bob ? s home page and sends it a get request  as shown in fig 8-23 unfortunately  trudy intercepts the request and replies with a fake home page  probably a copy of bob ? s home page except for the replacement of bob ? s public key with trudy ? s public key when alice now encrypts her first message with et  trudy decrypts it  reads it  re-encrypts it with bob ? s public key  and sends it to bob  who is none the wiser that trudy is reading his incoming messages worse yet  trudy could modify the messages before reencrypting them for bob clearly  some mechanism is needed to make sure that public keys can be exchanged securely 4 eb  message  alice trudy 1 get bob 's home page 2 fake home page with et 3 et  message  bob figure 8-23 a way for trudy to subvert public-key encryption 8.5.1 certificates as a first attempt at distributing public keys securely  we could imagine a kdc key distribution center available online 24 hours a day to provide public keys on demand one of the many problems with this solution is that it is not scalable  and the key distribution center would rapidly become a bottleneck also  if it ever went down  internet security would suddenly grind to a halt for these reasons  people have developed a different solution  one that does not require the key distribution center to be online all the time in fact  it does not have to be online at all instead  what it does is certify the public keys belonging to people  companies  and other organizations an organization that certifies public keys is now called a ca  certification authority   as an example  suppose that bob wants to allow alice and other people he does not know to communicate with him securely he can go to the ca with his public key along with his passport or driver ? s license and ask to be certified the ca then issues a certificate similar to the one in fig 8-24 and signs its sha-1 808 network security chap 8 hash with the ca ? s private key bob then pays the ca ? s fee and gets a cd-rom containing the certificate and its signed hash i hereby certify that the public key 19836a8b03030cf83737e3837837fc3s87092827262643ffa82710382828282a belongs to robert john smith 12345 university avenue berkeley  ca 94702 birthday  july 4  1958 email  bob @ superdupernet.com sha-1 hash of the above certificate signed with the ca ? s private key figure 8-24 a possible certificate and its signed hash the fundamental job of a certificate is to bind a public key to the name of a principal  individual  company  etc   certificates themselves are not secret or protected bob might  for example  decide to put his new certificate on his web site  with a link on the main page saying  click here for my public-key certificate the resulting click would return both the certificate and the signature block  the signed sha-1 hash of the certificate   now let us run through the scenario of fig 8-23 again when trudy intercepts alice ? s request for bob ? s home page  what can she do ? she can put her own certificate and signature block on the fake page  but when alice reads the contents of the certificate she will immediately see that she is not talking to bob because bob ? s name is not in it trudy can modify bob ? s home page on the fly  replacing bob ? s public key with her own however  when alice runs the sha-1 algorithm on the certificate  she will get a hash that does not agree with the one she gets when she applies the ca ? s well-known public key to the signature block since trudy does not have the ca ? s private key  she has no way of generating a signature block that contains the hash of the modified web page with her public key on it in this way  alice can be sure she has bob ? s public key and not trudy ? s or someone else ? s and as we promised  this scheme does not require the ca to be online for verification  thus eliminating a potential bottleneck while the standard function of a certificate is to bind a public key to a principal  a certificate can also be used to bind a public key to an attribute for example  a certificate could say  ? ? this public key belongs to someone over 18 ? ? it could be used to prove that the owner of the private key was not a minor and thus allowed to access material not suitable for children  and so on  but without disclosing the owner ? s identity typically  the person holding the certificate would send it to the web site  principal  or process that cared about age that site  principal  or process would then generate a random number and encrypt it with the public key in the certificate if the owner were able to decrypt it and send it back  sec 8.5 management of public keys 809 that would be proof that the owner indeed had the attribute stated in the certificate alternatively  the random number could be used to generate a session key for the ensuing conversation another example of where a certificate might contain an attribute is in an object oriented distributed system each object normally has multiple methods the owner of the object could provide each customer with a certificate giving a bit map of which methods the customer is allowed to invoke and binding the bit map to a public key using a signed certificate again  if the certificate holder can prove possession of the corresponding private key  he will be allowed to perform the methods in the bit map this approach has the property that the owner ? s identity need not be known  a property useful in situations where privacy is important 8.5.2 x.509 if everybody who wanted something signed went to the ca with a different kind of certificate  managing all the different formats would soon become a problem to solve this problem  a standard for certificates has been devised and approved by itu the standard is called x.509 and is in widespread use on the internet it has gone through three versions since the initial standardization in 1988 we will discuss v3 x.509 has been heavily influenced by the osi world  borrowing some of its worst features  e.g  naming and encoding   surprisingly  ietf went along with x.509  even though in nearly every other area  from machine addresses to transport protocols to email formats  ietf generally ignored osi and tried to do it right the ietf version of x.509 is described in rfc 5280 at its core  x.509 is a way to describe certificates the primary fields in a certificate are listed in fig 8-25 the descriptions given there should provide a general idea of what the fields do for additional information  please consult the standard itself or rfc 2459 for example  if bob works in the loan department of the money bank  his x.500 address might be /c = us/o = moneybank/ou = loan/cn = bob/ where c is for country  o is for organization  ou is for organizational unit  and cn is for common name cas and other entities are named in a similar way a substantial problem with x.500 names is that if alice is trying to contact bob @ moneybank.com and is given a certificate with an x.500 name  it may not be obvious to her that the certificate refers to the bob she wants fortunately  starting with version 3  dns names are now permitted instead of x.500 names  so this problem may eventually vanish certificates are encoded using osi asn.1  abstract syntax notation 1   which is sort of like a struct in c  except with a extremely peculiar and verbose notation more information about x.509 is given by ford and baum  2000   810 network security chap 8 field meaning version which version of x.509 serial number this number plus the ca ? s name uniquely identifies the certificate signature algorithm the algorithm used to sign the certificate issuer x.500 name of the ca validity period the starting and ending times of the validity period subject name the entity whose key is being certified public key the subject ? s public key and the id of the algorithm using it issuer id an optional id uniquely identifying the certificate ? s issuer subject id an optional id uniquely identifying the certificate ? s subject extensions many extensions have been defined signature the certificate ? s signature  signed by the ca ? s private key  figure 8-25 the basic fields of an x.509 certificate 8.5.3 public key infrastructures having a single ca to issue all the world ? s certificates obviously would not work it would collapse under the load and be a central point of failure as well a possible solution might be to have multiple cas  all run by the same organization and all using the same private key to sign certificates while this would solve the load and failure problems  it introduces a new problem  key leakage if there were dozens of servers spread around the world  all holding the ca ? s private key  the chance of the private key being stolen or otherwise leaking out would be greatly increased since the compromise of this key would ruin the world ? s electronic security infrastructure  having a single central ca is very risky in addition  which organization would operate the ca ? it is hard to imagine any authority that would be accepted worldwide as legitimate and trustworthy in some countries  people would insist that it be a government  while in other countries they would insist that it not be a government for these reasons  a different way for certifying public keys has evolved it goes under the general name of pki  public key infrastructure   in this section  we will summarize how it works in general  although there have been many proposals  so the details will probably evolve in time a pki has multiple components  including users  cas  certificates  and directories what the pki does is provide a way of structuring these components and define standards for the various documents and protocols a particularly simple form of pki is a hierarchy of cas  as depicted in fig 8-26 in this example we have shown three levels  but in practice there might be fewer or more the toplevel ca  the root  certifies second-level cas  which we here call ras  regional sec 8.5 management of public keys 811 authorities  because they might cover some geographic region  such as a country or continent this term is not standard  though ; in fact  no term is really standard for the different levels of the tree these in turn certify the real cas  which issue the x.509 certificates to organizations and individuals when the root authorizes a new ra  it generates an x.509 certificate stating that it has approved the ra  includes the new ra ? s public key in it  signs it  and hands it to the ra similarly  when an ra approves a new ca  it produces and signs a certificate stating its approval and containing the ca ? s public key ca 1 ca 2  a   b  ca 3 ca 4 ca 5 ra 2 ra 2 is approved its public key is 47383ae349   root 's signature ra 1 root ra 2 is approved its public key is 47383ae349   root 's signature ca 5 is approved its public key is 6384af863b   ra 2 's signature ca 5 is approved its public key is 6384af863b   ra 2 's signature figure 8-26  a  a hierarchical pki  b  a chain of certificates our pki works like this suppose that alice needs bob ? s public key in order to communicate with him  so she looks for and finds a certificate containing it  signed by ca 5 but alice has never heard of ca 5 for all she knows  ca 5 might be bob ? s 10-year-old daughter she could go to ca 5 and say  ? ? prove your legitimacy ? ? ca 5 will respond with the certificate it got from ra 2  which contains ca 5 ? s public key now armed with ca 5 ? s public key  she can verify that bob ? s certificate was indeed signed by ca 5 and is thus legal unless ra 2 is bob ? s 12-year-old son so  the next step is for her to ask ra 2 to prove it is legitimate the response to her query is a certificate signed by the root and containing ra2 ? s public key now alice is sure she has bob ? s public key but how does alice find the root ? s public key ? magic it is assumed that everyone knows the root ? s public key for example  her browser might have been shipped with the root ? s public key built in bob is a friendly sort of guy and does not want to cause alice a lot of work he knows that she is going to have to check out ca 5 and ra 2  so to save her some trouble  he collects the two needed certificates and gives her the two certificates along with his now she can use her own knowledge of the root ? s public key to verify the top-level certificate and the public key contained therein to verify the second one alice does not need to contact anyone to do the verification 812 network security chap 8 because the certificates are all signed  she can easily detect any attempts to tamper with their contents a chain of certificates going back to the root like this is sometimes called a chain of trust or a certification path the technique is widely used in practice of course  we still have the problem of who is going to run the root the solution is not to have a single root  but to have many roots  each with its own ras and cas in fact  modern browsers come preloaded with the public keys for over 100 roots  sometimes referred to as trust anchors in this way  having a single worldwide trusted authority can be avoided but there is now the issue of how the browser vendor decides which purported trust anchors are reliable and which are sleazy it all comes down to the user trusting the browser vendor to make wise choices and not simply approve all trust anchors willing to pay its inclusion fee most browsers allow users to inspect the root keys  usually in the form of certificates signed by the root  and delete any that seem shady directories another issue for any pki is where certificates  and their chains back to some known trust anchor  are stored one possibility is to have each user store his or her own certificates while doing this is safe  i.e  there is no way for users to tamper with signed certificates without detection   it is also inconvenient one alternative that has been proposed is to use dns as a certificate directory before contacting bob  alice probably has to look up his ip address using dns  so why not have dns return bob ? s entire certificate chain along with his ip address ? some people think this is the way to go  but others would prefer dedicated directory servers whose only job is managing x.509 certificates such directories could provide lookup services by using properties of the x.500 names for example  in theory such a directory service could answer a query such as  ? ? give me a list of all people named alice who work in sales departments anywhere in the u.s or canada ? ? revocation the real world is full of certificates  too  such as passports and drivers ? licenses sometimes these certificates can be revoked  for example  drivers ? licenses can be revoked for drunken driving and other driving offenses the same problem occurs in the digital world  the grantor of a certificate may decide to revoke it because the person or organization holding it has abused it in some way it can also be revoked if the subject ? s private key has been exposed or  worse yet  the ca ? s private key has been compromised thus  a pki needs to deal with the issue of revocation the possibility of revocation complicates matters sec 8.5 management of public keys 813 a first step in this direction is to have each ca periodically issue a crl  certificate revocation list  giving the serial numbers of all certificates that it has revoked since certificates contain expiry times  the crl need only contain the serial numbers of certificates that have not yet expired once its expiry time has passed  a certificate is automatically invalid  so no distinction is needed between those that just timed out and those that were actually revoked in both cases  they can not be used any more unfortunately  introducing crls means that a user who is about to use a certificate must now acquire the crl to see if the certificate has been revoked if it has been  it should not be used however  even if the certificate is not on the list  it might have been revoked just after the list was published thus  the only way to really be sure is to ask the ca and on the next use of the same certificate  the ca has to be asked again  since the certificate might have been revoked a few seconds ago another complication is that a revoked certificate could conceivably be reinstated  for example  if it was revoked for nonpayment of some fee that has since been paid having to deal with revocation  and possibly reinstatement  eliminates one of the best properties of certificates  namely  that they can be used without having to contact a ca where should crls be stored ? a good place would be the same place the certificates themselves are stored one strategy is for the ca to actively push out crls periodically and have the directories process them by simply removing the revoked certificates if directories are not used for storing certificates  the crls can be cached at various places around the network since a crl is itself a signed document  if it is tampered with  that tampering can be easily detected if certificates have long lifetimes  the crls will be long  too for example  if credit cards are valid for 5 years  the number of revocations outstanding will be much longer than if new cards are issued every 3 months a standard way to deal with long crls is to issue a master list infrequently  but issue updates to it more often doing this reduces the bandwidth needed for distributing the crls 8.6 communication security we have now finished our study of the tools of the trade most of the important techniques and protocols have been covered the rest of the chapter is about how these techniques are applied in practice to provide network security  plus some thoughts about the social aspects of security at the end of the chapter in the following four sections  we will look at communication security  that is  how to get the bits secretly and without modification from source to destination and how to keep unwanted bits outside the door these are by no means the only security issues in networking  but they are certainly among the most important ones  making this a good place to start our study 814 network security chap 8 8.6.1 ipsec ietf has known for years that security was lacking in the internet adding it was not easy because a war broke out about where to put it most security experts believe that to be really secure  encryption and integrity checks have to be end to end  i.e  in the application layer   that is  the source process encrypts and/or integrity protects the data and sends them to the destination process where they are decrypted and/or verified any tampering done in between these two processes  including within either operating system  can then be detected the trouble with this approach is that it requires changing all the applications to make them security aware in this view  the next best approach is putting encryption in the transport layer or in a new layer between the application layer and the transport layer  making it still end to end but not requiring applications to be changed the opposite view is that users do not understand security and will not be capable of using it correctly and nobody wants to modify existing programs in any way  so the network layer should authenticate and/or encrypt packets without the users being involved after years of pitched battles  this view won enough support that a network layer security standard was defined in part  the argument was that having network layer encryption does not prevent security-aware users from doing it right and it does help security-unaware users to some extent the result of this war was a design called ipsec  ip security   which is described in rfcs 2401  2402  and 2406  among others not all users want encryption  because it is computationally expensive   rather than make it optional  it was decided to require encryption all the time but permit the use of a null algorithm the null algorithm is described and praised for its simplicity  ease of implementation  and great speed in rfc 2410 the complete ipsec design is a framework for multiple services  algorithms  and granularities the reason for multiple services is that not everyone wants to pay the price for having all the services all the time  so the services are available a la carte the major services are secrecy  data integrity  and protection from replay attacks  where the intruder replays a conversation   all of these are based on symmetric-key cryptography because high performance is crucial the reason for having multiple algorithms is that an algorithm that is now thought to be secure may be broken in the future by making ipsec algorithm-independent  the framework can survive even if some particular algorithm is later broken the reason for having multiple granularities is to make it possible to protect a single tcp connection  all traffic between a pair of hosts  or all traffic between a pair of secure routers  among other possibilities one slightly surprising aspect of ipsec is that even though it is in the ip layer  it is connection oriented actually  that is not so surprising because to have any security  a key must be established and used for some period of time ? in essence  a kind of connection by a different name also  connections amortize the setup sec 8.6 communication security 815 costs over many packets a ? ? connection ? ? in the context of ipsec is called an sa  security association   an sa is a simplex connection between two endpoints and has a security identifier associated with it if secure traffic is needed in both directions  two security associations are required security identifiers are carried in packets traveling on these secure connections and are used to look up keys and other relevant information when a secure packet arrives technically  ipsec has two principal parts the first part describes two new headers that can be added to packets to carry the security identifier  integrity control data  and other information the other part  isakmp  internet security association and key management protocol   deals with establishing keys isakmp is a framework the main protocol for carrying out the work is ike  internet key exchange   version 2 of ike as described in rfc 4306 should be used  as the earlier version was deeply flawed  as pointed out by perlman and kaufman  2000   ipsec can be used in either of two modes in transport mode  the ipsec header is inserted just after the ip header the protocol field in the ip header is changed to indicate that an ipsec header follows the normal ip header  before the tcp header   the ipsec header contains security information  primarily the sa identifier  a new sequence number  and possibly an integrity check of the payload in tunnel mode  the entire ip packet  header and all  is encapsulated in the body of a new ip packet with a completely new ip header tunnel mode is useful when the tunnel ends at a location other than the final destination in some cases  the end of the tunnel is a security gateway machine  for example  a company firewall this is commonly the case for a vpn  virtual private network   in this mode  the security gateway encapsulates and decapsulates packets as they pass through it by terminating the tunnel at this secure machine  the machines on the company lan do not have to be aware of ipsec only the security gateway has to know about it tunnel mode is also useful when a bundle of tcp connections is aggregated and handled as one encrypted stream because it prevents an intruder from seeing who is sending how many packets to whom sometimes just knowing how much traffic is going where is valuable information for example  if during a military crisis  the amount of traffic flowing between the pentagon and the white house were to drop sharply  but the amount of traffic between the pentagon and some military installation deep in the colorado rocky mountains were to increase by the same amount  an intruder might be able to deduce some useful information from these data studying the flow patterns of packets  even if they are encrypted  is called traffic analysis tunnel mode provides a way to foil it to some extent the disadvantage of tunnel mode is that it adds an extra ip header  thus increasing packet size substantially in contrast  transport mode does not affect packet size as much the first new header is ah  authentication header   it provides integrity checking and antireplay security  but not secrecy  i.e  no data encryption   the 816 network security chap 8 use of ah in transport mode is illustrated in fig 8-27 in ipv4  it is interposed between the ip header  including any options  and the tcp header in ipv6  it is just another extension header and is treated as such in fact  the format is close to that of a standard ipv6 extension header the payload may have to be padded out to some particular length for the authentication algorithm  as shown ip header ah 32 bits security parameters index next header payload len  reserved  sequence number authentication data  hmac  tcp header authenticated payload + padding figure 8-27 the ipsec authentication header in transport mode for ipv4 let us now examine the ah header the next header field is used to store the value that the ip protocol field had before it was replaced with 51 to indicate that an ah header follows in most cases  the code for tcp  6  will go here the payload length is the number of 32-bit words in the ah header minus 2 the security parameters index is the connection identifier it is inserted by the sender to indicate a particular record in the receiver ? s database this record contains the shared key used on this connection and other information about the connection if this protocol had been invented by itu rather than ietf  this field would have been called virtual circuit number the sequence number field is used to number all the packets sent on an sa every packet gets a unique number  even retransmissions in other words  the retransmission of a packet gets a different number here than the original  even though its tcp sequence number is the same   the purpose of this field is to detect replay attacks these sequence numbers may not wrap around if all 232 are exhausted  a new sa must be established to continue communication finally  we come to authentication data  which is a variable-length field that contains the payload ? s digital signature when the sa is established  the two sides negotiate which signature algorithm they are going to use normally  public key cryptography is not used here because packets must be processed extremely rapidly and all known public-key algorithms are too slow since ipsec is based on symmetric-key cryptography and the sender and receiver negotiate a shared key before setting up an sa  the shared key is used in the signature computation one simple way is to compute the hash over the packet plus the shared key the shared key is not transmitted  of course a scheme like this is called an hmac sec 8.6 communication security 817  hashed message authentication code   it is much faster to compute than first running sha-1 and then running rsa on the result the ah header does not allow encryption of the data  so it is mostly useful when integrity checking is needed but secrecy is not needed one noteworthy feature of ah is that the integrity check covers some of the fields in the ip header  namely  those that do not change as the packet moves from router to router the time to live field changes on each hop  for example  so it can not be included in the integrity check however  the ip source address is included in the check  making it impossible for an intruder to falsify the origin of a packet the alternative ipsec header is esp  encapsulating security payload   its use for both transport mode and tunnel mode is shown in fig 8-28 esp header new ip header old ip header tcp header authenticated  b  payload + padding authentication  hmac  esp header ip header tcp  a  header payload + padding authentication  hmac  authenticated encrypted encrypted figure 8-28  a  esp in transport mode  b  esp in tunnel mode the esp header consists of two 32-bit words they are the security parameters index and sequence number fields that we saw in ah a third word that generally follows them  but is technically not part of the header  is the initialization vector used for the data encryption  unless null encryption is used  in which case it is omitted esp also provides for hmac integrity checks  as does ah  but rather than being included in the header  they come after the payload  as shown in fig 8-28 putting the hmac at the end has an advantage in a hardware implementation  the hmac can be calculated as the bits are going out over the network interface and appended to the end this is why ethernet and other lans have their crcs in a trailer  rather than in a header with ah  the packet has to be buffered and the signature computed before the packet can be sent  potentially reducing the number of packets/sec that can be sent given that esp can do everything ah can do and more and is more efficient to boot  the question arises  why bother having ah at all ? the answer is mostly historical originally  ah handled only integrity and esp handled only secrecy later  integrity was added to esp  but the people who designed ah did not want to let it die after all that work their only real argument is that ah checks part of the ip header  which esp does not  but other than that it is really a weak argument another weak argument is that a product supporting ah but not esp might 818 network security chap 8 have less trouble getting an export license because it can not do encryption ah is likely to be phased out in the future 8.6.2 firewalls the ability to connect any computer  anywhere  to any other computer  anywhere  is a mixed blessing for individuals at home  wandering around the internet is lots of fun for corporate security managers  it is a nightmare most companies have large amounts of confidential information online ? trade secrets  product development plans  marketing strategies  financial analyses  etc disclosure of this information to a competitor could have dire consequences in addition to the danger of information leaking out  there is also a danger of information leaking in in particular  viruses  worms  and other digital pests can breach security  destroy valuable data  and waste large amounts of administrators ? time trying to clean up the mess they leave often they are imported by careless employees who want to play some nifty new game consequently  mechanisms are needed to keep ? ? good ? ? bits in and ? ? bad ? ? bits out one method is to use ipsec this approach protects data in transit between secure sites however  ipsec does nothing to keep digital pests and intruders from getting onto the company lan to see how to accomplish this goal  we need to look at firewalls firewalls are just a modern adaptation of that old medieval security standby  digging a deep moat around your castle this design forced everyone entering or leaving the castle to pass over a single drawbridge  where they could be inspected by the i/o police with networks  the same trick is possible  a company can have many lans connected in arbitrary ways  but all traffic to or from the company is forced through an electronic drawbridge  firewall   as shown in fig 8-29 no other route exists internal network demilitarized zone external internet email server web server security perimeter firewall figure 8-29 a firewall protecting an internal network sec 8.6 communication security 819 the firewall acts as a packet filter it inspects each and every incoming and outgoing packet packets meeting some criterion described in rules formulated by the network administrator are forwarded normally those that fail the test are uncermoniously dropped the filtering criterion is typically given as rules or tables that list sources and destinations that are acceptable  sources and destinations that are blocked  and default rules about what to do with packets coming from or going to other machines in the common case of a tcp/ip setting  a source or destination might consist of an ip address and a port ports indicate which service is desired for example  tcp port 25 is for mail  and tcp port 80 is for http some ports can simply be blocked for example  a company could block incoming packets for all ip addresses combined with tcp port 79 it was once popular for the finger service to look up people ? s email addresses but is little used today other ports are not so easily blocked the difficulty is that network administrators want security but can not cut off communication with the outside world that arrangement would be much simpler and better for security  but there would be no end to user complaints about it this is where arrangements such as the dmz  demilitarized zone  shown in fig 8-29 come in handy the dmz is the part of the company network that lies outside of the security perimeter anything goes here by placing a machine such as a web server in the dmz  computers on the internet can contact it to browse the company web site now the firewall can be configured to block incoming tcp traffic to port 80 so that computers on the internet can not use this port to attack computers on the internal network to allow the web server to be managed  the firewall can have a rule to permit connections between internal machines and the web server firewalls have become much more sophisticated over time in an arms race with attackers originally  firewalls applied a rule set independently for each packet  but it proved difficult to write rules that allowed useful functionality but blocked all unwanted traffic stateful firewalls map packets to connections and use tcp/ip header fields to keep track of connections this allows for rules that  for example  allow an external web server to send packets to an internal host  but only if the internal host first establishes a connection with the external web server such a rule is not possible with stateless designs that must either pass or drop all packets from the external web server another level of sophistication up from stateful processing is for the firewall to implement application-level gateways this processing involves the firewall looking inside packets  beyond even the tcp header  to see what the application is doing with this capability  it is possible to distinguish http traffic used for web browsing from http traffic used for peer-to-peer file sharing administrators can write rules to spare the company from peer-to-peer file sharing but allow web browsing that is vital for business for all of these methods  outgoing traffic can be inspected as well as incoming traffic  for example  to prevent sensitive documents from being emailed outside of the company 820 network security chap 8 as the above discussion should make clear  firewalls violate the standard layering of protocols they are network layer devices  but they peek at the transport and applications layers to do their filtering this makes them fragile for instance  firewalls tend to rely on standard port numbering conventions to determine what kind of traffic is carried in a packet standard ports are often used  but not by all computers  and not by all applications either some peer-to-peer applications select ports dynamically to avoid being easily spotted  and blocked   encryption with ipsec or other schemes hides higher-layer information from the firewall finally  a firewall can not readily talk to the computers that communicate through it to tell them what policies are being applied and why their connection is being dropped it must simply pretend to be a broken wire for all these reasons  networking purists consider firewalls to be a blemish on the architecture of the internet however  the internet can be a dangerous place if you are a computer firewalls help with that problem  so they are likely to stay even if the firewall is perfectly configured  plenty of security problems still exist for example  if a firewall is configured to allow in packets from only specific networks  e.g  the company ? s other plants   an intruder outside the firewall can put in false source addresses to bypass this check if an insider wants to ship out secret documents  he can encrypt them or even photograph them and ship the photos as jpeg files  which bypasses any email filters and we have not even discussed the fact that  although three-quarters of all attacks come from outside the firewall  the attacks that come from inside the firewall  for example  from disgruntled employees  are typically the most damaging  verizon  2009   a different problem with firewalls is that they provide a single perimeter of defense if that defense is breached  all bets are off for this reason  firewalls are often used in a layered defense for example  a firewall may guard the entrance to the internal network and each computer may also run its own firewall readers who think that one security checkpoint is enough clearly have not made an international flight on a scheduled airline recently in addition  there is a whole other class of attacks that firewalls can not deal with the basic idea of a firewall is to prevent intruders from getting in and secret data from getting out unfortunately  there are people who have nothing better to do than try to bring certain sites down they do this by sending legitimate packets at the target in great numbers until it collapses under the load for example  to cripple a web site  an intruder can send a tcp syn packet to establish a connection the site will then allocate a table slot for the connection and send a syn + ack packet in reply if the intruder does not respond  the table slot will be tied up for a few seconds until it times out if the intruder sends thousands of connection requests  all the table slots will fill up and no legitimate connections will be able to get through attacks in which the intruder ? s goal is to shut down the target rather than steal data are called dos  denial of service  attacks usually  the request packets have false source addresses so the intruder can not be traced easily dos attacks against major web sites are common on the internet sec 8.6 communication security 821 an even worse variant is one in which the intruder has already broken into hundreds of computers elsewhere in the world  and then commands all of them to attack the same target at the same time not only does this approach increase the intruder ? s firepower  but it also reduces his chances of detection since the packets are coming from a large number of machines belonging to unsuspecting users such an attack is called a ddos  distributed denial of service  attack this attack is difficult to defend against even if the attacked machine can quickly recognize a bogus request  it does take some time to process and discard the request  and if enough requests per second arrive  the cpu will spend all its time dealing with them 8.6.3 virtual private networks many companies have offices and plants scattered over many cities  sometimes over multiple countries in the olden days  before public data networks  it was common for such companies to lease lines from the telephone company between some or all pairs of locations some companies still do this a network built up from company computers and leased telephone lines is called a private network private networks work fine and are very secure if the only lines available are the leased lines  no traffic can leak out of company locations and intruders have to physically wiretap the lines to break in  which is not easy to do the problem with private networks is that leasing a dedicated t1 line between two points costs thousands of dollars a month  and t3 lines are many times more expensive when public data networks and later the internet appeared  many companies wanted to move their data  and possibly voice  traffic to the public network  but without giving up the security of the private network this demand soon led to the invention of vpns  virtual private networks   which are overlay networks on top of public networks but with most of the properties of private networks they are called ? ? virtual ? ? because they are merely an illusion  just as virtual circuits are not real circuits and virtual memory is not real memory one popular approach is to build vpns directly over the internet a common design is to equip each office with a firewall and create tunnels through the internet between all pairs of offices  as illustrated in fig 8-30  a   a further advantage of using the internet for connectivity is that the tunnels can be set up on demand to include  for example  the computer of an employee who is at home or traveling as long as the person has an internet connection this flexibility is much greater then is provided with leased lines  yet from the perspective of the computers on the vpn  the topology looks just like the private network case  as shown in fig 8-30  b   when the system is brought up  each pair of firewalls has to negotiate the parameters of its sa  including the services  modes  algorithms  and keys if ipsec is used for the tunneling  it is possible to aggregate all traffic between any 822 network security chap 8 home internet paris office london office travel home travel london paris  a   b  figure 8-30  a  a virtual private network  b  topology as seen from the inside two pairs of offices onto a single authenticated  encrypted sa  thus providing integrity control  secrecy  and even considerable immunity to traffic analysis many firewalls have vpn capabilities built in some ordinary routers can do this as well  but since firewalls are primarily in the security business  it is natural to have the tunnels begin and end at the firewalls  providing a clear separation between the company and the internet thus  firewalls  vpns  and ipsec with esp in tunnel mode are a natural combination and widely used in practice once the sas have been established  traffic can begin flowing to a router within the internet  a packet traveling along a vpn tunnel is just an ordinary packet the only thing unusual about it is the presence of the ipsec header after the ip header  but since these extra headers have no effect on the forwarding process  the routers do not care about this extra header another approach that is gaining popularity is to have the isp set up the vpn using mpls  as discussed in chap 5   paths for the vpn traffic can be set up across the isp network between the company offices these paths keep the vpn traffic separate from other internet traffic and can be guaranteed a certain amount of bandwidth or other quality of service a key advantage of a vpn is that it is completely transparent to all user software the firewalls set up and manage the sas the only person who is even aware of this setup is the system administrator who has to configure and manage the security gateways  or the isp administrator who has to configure the mpls paths to everyone else  it is like having a leased-line private network again for more about vpns  see lewis  2006   8.6.4 wireless security it is surprisingly easy to design a system using vpns and firewalls that is logically completely secure but that  in practice  leaks like a sieve this situation can occur if some of the machines are wireless and use radio communication  which passes right over the firewall in both directions the range of 802.11 networks is sec 8.6 communication security 823 often a few hundred meters  so anyone who wants to spy on a company can simply drive into the employee parking lot in the morning  leave an 802.11-enabled notebook computer in the car to record everything it hears  and take off for the day by late afternoon  the hard disk will be full of valuable goodies theoretically  this leakage is not supposed to happen theoretically  people are not supposed to rob banks  either much of the security problem can be traced to the manufacturers of wireless base stations  access points  trying to make their products user friendly usually  if the user takes the device out of the box and plugs it into the electrical power socket  it begins operating immediately ? nearly always with no security at all  blurting secrets to everyone within radio range if it is then plugged into an ethernet  all the ethernet traffic suddenly appears in the parking lot as well wireless is a snooper ? s dream come true  free data without having to do any work it therefore goes without saying that security is even more important for wireless systems than for wired ones in this section  we will look at some ways wireless networks handle security some additional information is given by nichols and lekkas  2002   802.11 security part of the 802.11 standard  originally called 802.11i  prescribes a data linklevel security protocol for preventing a wireless node from reading or interfering with messages sent between another pair of wireless nodes it also goes by the trade name wpa2  wifi protected access 2   plain wpa is an interim scheme that implements a subset of 802.11i it should be avoided in favor of wpa2 we will describe 802.11i shortly  but will first note that it is a replacement for wep  wired equivalent privacy   the first generation of 802.11 security protocols wep was designed by a networking standards committee  which is a completely different process than  for example  the way nist selected the design of aes the results were devastating what was wrong with it ? pretty much everything from a security perspective as it turns out for example  wep encrypted data for confidentiality by xoring it with the output of a stream cipher unfortunately  weak keying arrangements meant that the output was often reused this led to trivial ways to defeat it as another example  the integrity check was based on a 32-bit crc that is an efficient code for detecting transmission errors  but it is not a cryptographically strong mechanism for defeating attackers these and other design flaws made wep very easy to compromise the first practical demonstration that wep was broken came when adam stubblefield was an intern at at&t  stubblefield et al  2002   he was able to code up and test an attack outlined by fluhrer et al  2001  in one week  of which most of the time was spent convincing management to buy him a wifi card to use in his experiments software to crack wep passwords within a minute is now freely available and the use of wep is very strongly discouraged while it does prevent casual 824 network security chap 8 access it does not provide any real form of security the 802.11i group was put together in a hurry when it was clear that wep was seriously broken it produced a formal standard by june 2004 now we will describe 802.11i  which does provide real security if it is set up and used properly there are two common scenarios in which wpa2 is used the first is a corporate setting  in which a company has a separate authentication server that has a username and password database that can be used to determine if a wireless client is allowed to access the network in this setting  clients use standard protocols to authenticate themselves to the network the main standards are 802.1x  with which the access point lets the client carry on a dialogue with the authentication server and observes the result  and eap  extensible authentication protocol   rfc 3748   which tells how the client and the authentication server interact actually  eap is a framework and other standards define the protocol messages however  we will not delve into the many details of this exchange because they do not much matter for an overview the second scenario is in a home setting in which there is no authentication server instead  there is a single shared password that is used by clients to access the wireless network this setup is less complex than having an authentication server  which is why it is used at home and in small businesses  but it is less secure as well the main difference is that with an authentication server each client gets a key for encrypting traffic that is not known by the other clients with a single shared password  different keys are derived for each client  but all clients have the same password and can derive each others ? keys if they want to the keys that are used to encrypt traffic are computed as part of an authentication handshake the handshake happens right after the client associates with a wireless network and authenticates with an authentication server  if there is one at the start of the handshake  the client has either the shared network password or its password for the authentication server this password is used to derive a master key however  the master key is not used directly to encrypt packets it is standard cryptographic practice to derive a session key for each period of usage  to change the key for different sessions  and to expose the master key to observation as little as possible it is this session key that is computed in the handshake the session key is computed with the four-packet handshake shown in fig 8 31 first  the ap  access point  sends a random number for identification random numbers used just once in security protocols like this one are called nonces  which is more-or-less a contraction of ? ? number used once ? ? the client also picks its own nonce it uses the nonces  its mac address and that of the ap  and the master key to compute a session key  ks the session key is split into portions  each of which is used for different purposes  but we have omitted this detail now the client has session keys  but the ap does not so the client sends its nonce to the ap  and the ap performs the same computation to derive the same session keys the nonces can be sent in the clear because the keys can not be derived from them without extra  secret information the message from the client is protected sec 8.6 communication security 825 with an integrity check called a mic  message integrity check  based on the session key the ap can check that the mic is correct  and so the message indeed must have come from the client  after it computes the session keys a mic is just another name for a message authentication code  as in an hmac the term mic is often used instead for networking protocols because of the potential for confusion with mac  medium access control  addresses client nonceap noncec  mics ks  kg   mics 2 4 1 3 access point  ap  compute session keys ks from mac addresses  nonces  and master key distribute group key  kg verify client has ks verify ap has ks acknowledge compute session keys ks  same as the client ks  ack   mics figure 8-31 the 802.11i key setup handshake in the last two messages  the ap distributes a group key  kg  to the client  and the client acknowledges the message receipt of these messages lets the client verify that the ap has the correct session keys  and vice versa the group key is used for broadcast and multicast traffic on the 802.11 lan because the result of the handshake is that every client has its own encryption keys  none of these keys can be used by the ap to broadcast packets to all of the wireless clients ; a separate copy would need to be sent to each client using its key instead  a shared key is distributed so that broadcast traffic can be sent only once and received by all the clients it must be updated as clients leave and join the network finally  we get to the part where the keys are actually used to provide security two protocols can be used in 802.11i to provide message confidentiality  integrity  and authentication like wpa  one of the protocols  called tkip  temporary key integrity protocol   was an interim solution it was designed to improve security on old and slow 802.11 cards  so that at least some security that is better than wep can be rolled out as a firmware upgrade however  it  too  has now been broken so you are better off with the other  recommended protocol  ccmp what does ccmp stand for ? it is short for the somewhat spectacular name counter mode with cipher block chaining message authentication code protocol we will just call it ccmp you can call it anything you want 826 network security chap 8 ccmp works in a fairly straightforward way it uses aes encryption with a 128-bit key and block size the key comes from the session key to provide confidentiality  messages are encrypted with aes in counter mode recall that we discussed cipher modes in sec 8.2.3 these modes are what prevent the same message from being encrypted to the same set of bits each time counter mode mixes a counter into the encryption to provide integrity  the message  including header fields  is encrypted with cipher block chaining mode and the last 128-bit block is kept as the mic then both the message  encrypted with counter mode  and the mic are sent the client and the ap can each perform this encryption  or verify this encryption when a wireless packet is received for broadcast or multicast messages  the same procedure is used with the group key bluetooth security bluetooth has a considerably shorter range than 802.11  so it can not easily be attacked from the parking lot  but security is still an issue here for example  imagine that alice ? s computer is equipped with a wireless bluetooth keyboard in the absence of security  if trudy happened to be in the adjacent office  she could read everything alice typed in  including all her outgoing email she could also capture everything alice ? s computer sent to the bluetooth printer sitting next to it  e.g  incoming email and confidential reports   fortunately  bluetooth has an elaborate security scheme to try to foil the world ? s trudies we will now summarize the main features of it bluetooth version 2.1 and later has four security modes  ranging from nothing at all to full data encryption and integrity control as with 802.11  if security is disabled  the default for older devices   there is no security most users have security turned off until a serious breach has occurred ; then they turn it on in the agricultural world  this approach is known as locking the barn door after the horse has escaped bluetooth provides security in multiple layers in the physical layer  frequency hopping provides a tiny little bit of security  but since any bluetooth device that moves into a piconet has to be told the frequency hopping sequence  this sequence is obviously not a secret the real security starts when the newly arrived slave asks for a channel with the master before bluetooth 2.1  two devices were assumed to share a secret key set up in advance in some cases  both are hardwired by the manufacturer  e.g  for a headset and mobile phone sold as a unit   in other cases  one device  e.g  the headset  has a hardwired key and the user has to enter that key into the other device  e.g  the mobile phone  as a decimal number these shared keys are called passkeys unfortunately  the passkeys are often hardcoded to ? ? 1234 ? ? or another predictable value  and in any case are four decimal digits  allowing only 104 choices with simple secure pairing in bluetooth 2.1  devices pick a code from a six-digit range  which makes the passkey much less predictable but still far from secure sec 8.6 communication security 827 to establish a channel  the slave and master each check to see if the other one knows the passkey if so  they negotiate whether that channel will be encrypted  integrity controlled  or both then they select a random 128-bit session key  some of whose bits may be public the point of allowing this key weakening is to comply with government restrictions in various countries designed to prevent the export or use of keys longer than the government can break encryption uses a stream cipher called e0 ; integrity control uses safer +  both are traditional symmetric-key block ciphers safer + was submitted to the aes bake-off but was eliminated in the first round because it was slower than the other candidates bluetooth was finalized before the aes cipher was chosen ; otherwise  it would most likely have used rijndael the actual encryption using the stream cipher is shown in fig 8-14  with the plaintext xored with the keystream to generate the ciphertext unfortunately  e0 itself  like rc4  may have fatal weaknesses  jakobsson and wetzel  2001   while it was not broken at the time of this writing  its similarities to the a5/1 cipher  whose spectacular failure compromises all gsm telephone traffic  are cause for concern  biryukov et al  2000   it sometimes amazes people  including the authors of this book   that in the perennial cat-and-mouse game between the cryptographers and the cryptanalysts  the cryptanalysts are so often on the winning side another security issue is that bluetooth authenticates only devices  not users  so theft of a bluetooth device may give the thief access to the user ? s financial and other accounts however  bluetooth also implements security in the upper layers  so even in the event of a breach of link-level security  some security may remain  especially for applications that require a pin code to be entered manually from some kind of keyboard to complete the transaction 8.7 authentication protocols authentication is the technique by which a process verifies that its communication partner is who it is supposed to be and not an imposter verifying the identity of a remote process in the face of a malicious  active intruder is surprisingly difficult and requires complex protocols based on cryptography in this section  we will study some of the many authentication protocols that are used on insecure computer networks as an aside  some people confuse authorization with authentication authentication deals with the question of whether you are actually communicating with a specific process authorization is concerned with what that process is permitted to do for example  say a client process contacts a file server and says  ? ? i am scott ? s process and i want to delete the file cookbook.old ? ? from the file server ? s point of view  two questions must be answered  828 network security chap 8 1 is this actually scott ? s process  authentication  ? 2 is scott allowed to delete cookbook.old  authorization  ? only after both of these questions have been unambiguously answered in the affirmative can the requested action take place the former question is really the key one once the file server knows to whom it is talking  checking authorization is just a matter of looking up entries in local tables or databases for this reason  we will concentrate on authentication in this section the general model that essentially all authentication protocols use is this alice starts out by sending a message either to bob or to a trusted kdc  key distribution center   which is expected to be honest several other message exchanges follow in various directions as these messages are being sent  trudy may intercept  modify  or replay them in order to trick alice and bob or just to gum up the works nevertheless  when the protocol has been completed  alice is sure she is talking to bob and bob is sure he is talking to alice furthermore  in most of the protocols  the two of them will also have established a secret session key for use in the upcoming conversation in practice  for performance reasons  all data traffic is encrypted using symmetric-key cryptography  typically aes or triple des   although public-key cryptography is widely used for the authentication protocols themselves and for establishing the session key the point of using a new  randomly chosen session key for each new connection is to minimize the amount of traffic that gets sent with the users ? secret keys or public keys  to reduce the amount of ciphertext an intruder can obtain  and to minimize the damage done if a process crashes and its core dump falls into the wrong hands hopefully  the only key present then will be the session key all the permanent keys should have been carefully zeroed out after the session was established 8.7.1 authentication based on a shared secret key for our first authentication protocol  we will assume that alice and bob already share a secret key  kab this shared key might have been agreed upon on the telephone or in person  but  in any event  not on the  insecure  network this protocol is based on a principle found in many authentication protocols  one party sends a random number to the other  who then transforms it in a special way and returns the result such protocols are called challenge-response protocols in this and subsequent authentication protocols  the following notation will be used  a  b are the identities of alice and bob ri ? s are the challenges  where i identifies the challenger ki ? s are keys  where i indicates the owner ks is the session key sec 8.7 authentication protocols 829 the message sequence for our first shared-key authentication protocol is illustrated in fig 8-32 in message 1  alice sends her identity  a  to bob in a way that bob understands bob  of course  has no way of knowing whether this message came from alice or from trudy  so he chooses a challenge  a large random number  rb  and sends it back to ? ? alice ? ? as message 2  in plaintext alice then encrypts the message with the key she shares with bob and sends the ciphertext  kab  rb   back in message 3 when bob sees this message  he immediately knows that it came from alice because trudy does not know kab and thus could not have generated it furthermore  since rb was chosen randomly from a large space  say  128-bit random numbers   it is very unlikely that trudy would have seen rb and its response in an earlier session it is equally unlikely that she could guess the correct response to any challenge a alice rb 1 2 4 5 3 kab  rb  kab  ra  bob ra figure 8-32 two-way authentication using a challenge-response protocol at this point  bob is sure he is talking to alice  but alice is not sure of anything for all alice knows  trudy might have intercepted message 1 and sent back rb in response maybe bob died last night to find out to whom she is talking  alice picks a random number  ra  and sends it to bob as plaintext  in message 4 when bob responds with kab  ra   alice knows she is talking to bob if they wish to establish a session key now  alice can pick one  ks  and send it to bob encrypted with kab the protocol of fig 8-32 contains five messages let us see if we can be clever and eliminate some of them one approach is illustrated in fig 8-33 here alice initiates the challenge-response protocol instead of waiting for bob to do it similarly  while he is responding to alice ? s challenge  bob sends his own the entire protocol can be reduced to three messages instead of five is this new protocol an improvement over the original one ? in one sense it is  it is shorter unfortunately  it is also wrong under certain circumstances  trudy can defeat this protocol by using what is known as a reflection attack in particular  trudy can break it if it is possible to open multiple sessions with bob at once this situation would be true  for example  if bob is a bank and is prepared to accept many simultaneous connections from teller machines at once 830 network security chap 8 alice 1 3 2 rb  kab  ra  kab  rb  a  ra bob figure 8-33 a shortened two-way authentication protocol trudy ? s reflection attack is shown in fig 8-34 it starts out with trudy claiming she is alice and sending rt bob responds  as usual  with his own challenge  rb now trudy is stuck what can she do ? she does not know kab  rb   trudy 1 5 2 rb  kab  rt  kab  rb  a  rt 3 4 rb2  kab  rb  a  rb first session second session first session bob figure 8-34 the reflection attack she can open a second session with message 3  supplying the rb taken from message 2 as her challenge bob calmly encrypts it and sends back kab  rb  in message 4 we have shaded the messages on the second session to make them stand out now trudy has the missing information  so she can complete the first session and abort the second one bob is now convinced that trudy is alice  so when she asks for her bank account balance  he gives it to her without question then when she asks him to transfer it all to a secret bank account in switzerland  he does so without a moment ? s hesitation the moral of this story is  designing a correct authentication protocol is much harder than it looks the following four general rules often help the designer avoid common pitfalls  sec 8.7 authentication protocols 831 1 have the initiator prove who she is before the responder has to this avoids bob giving away valuable information before trudy has to give any evidence of who she is 2 have the initiator and responder use different keys for proof  even if this means having two shared keys  kab and k ? ab 3 have the initiator and responder draw their challenges from different sets for example  the initiator must use even numbers and the responder must use odd numbers 4 make the protocol resistant to attacks involving a second parallel session in which information obtained in one session is used in a different one if even one of these rules is violated  the protocol can frequently be broken here  all four rules were violated  with disastrous consequences now let us go take a closer look at fig 8-32 surely that protocol is not subject to a reflection attack ? maybe it is quite subtle trudy was able to defeat our protocol by using a reflection attack because it was possible to open a second session with bob and trick him into answering his own questions what would happen if alice were a general-purpose computer that also accepted multiple sessions  rather than a person at a computer ? let us take a look what trudy can do to see how trudy ? s attack works  see fig 8-35 alice starts out by announcing her identity in message 1 trudy intercepts this message and begins her own session with message 2  claiming to be bob again we have shaded the session 2 messages alice responds to message 2 by saying in message 3  ? ? you claim to be bob ? prove it ? ? at this point  trudy is stuck because she can not prove she is bob what does trudy do now ? she goes back to the first session  where it is her turn to send a challenge  and sends the ra she got in message 3 alice kindly responds to it in message 5  thus supplying trudy with the information she needs to send in message 6 in session 2 at this point  trudy is basically home free because she has successfully responded to alice ? s challenge in session 2 she can now cancel session 1  send over any old number for the rest of session 2  and she will have an authenticated session with alice in session 2 but trudy is nasty  and she really wants to rub it in instead  of sending any old number over to complete session 2  she waits until alice sends message 7  alice ? s challenge for session 1 of course  trudy does not know how to respond  so she uses the reflection attack again  sending back ra 2 as message 8 alice conveniently encrypts ra 2 in message 9 trudy now switches back to session 1 and sends alice the number she wants in message 10  conveniently copied from what alice sent in message 9 at this point trudy has two fully authenticated sessions with alice this attack has a somewhat different result than the attack on the three-message protocol that we saw in fig 8-34 this time  trudy has two authenticated 832 network security chap 8 a alice b 1 2 4 5 3 kab  ra  trudy ra ra 6 kab  ra  7 ra2 8 9 kab  ra2  ra2 10 kab  ra2  first session first session first session first session second session second session second session figure 8-35 a reflection attack on the protocol of fig 8-32 connections with alice in the previous example  she had one authenticated connection with bob again here  if we had applied all the general authentication protocol rules discussed earlier  this attack could have been stopped for a detailed discussion of these kinds of attacks and how to thwart them  see bird et al  1993   they also show how it is possible to systematically construct protocols that are provably correct the simplest such protocol is nevertheless a bit complicated  so we will now show a different class of protocol that also works the new authentication protocol is shown in fig 8-36  bird et al  1993   it uses an hmac of the type we saw when studying ipsec alice starts out by sending bob a nonce  ra  as message 1 bob responds by selecting his own nonce  rb  and sending it back along with an hmac the hmac is formed by building a data structure consisting of alice ? s nonce  bob ? s nonce  their identities  and the shared secret key  kab this data structure is then hashed into the hmac  for example  using sha-1 when alice receives message 2  she now has ra  which she picked herself   rb  which arrives as plaintext  the two identities  and the secret key  kab  which she has known all along  so she can compute the hmac herself if it agrees with the hmac in the message  she knows she is talking to bob because trudy does not know kab and thus can not figure out which hmac to send alice responds to bob with an hmac containing just the two nonces can trudy somehow subvert this protocol ? no  because she can not force either party to encrypt or hash a value of her choice  as happened in fig 8-34 and fig 8-35 both hmacs include values chosen by the sending party  something that trudy can not control sec 8.7 authentication protocols 833 alice 1 3 2 ra bob rb  hmac  ra  rb  a  b  kab  hmac  ra  rb  kab  figure 8-36 authentication using hmacs using hmacs is not the only way to use this idea an alternative scheme that is often used instead of computing the hmac over a series of items is to encrypt the items sequentially using cipher block chaining 8.7.2 establishing a shared key  the diffie-hellman key exchange so far  we have assumed that alice and bob share a secret key suppose that they do not  because so far there is no universally accepted pki for signing and distributing certificates   how can they establish one ? one way would be for alice to call bob and give him her key on the phone  but he would probably start out by saying  ? ? how do i know you are alice and not trudy ? ? ? they could try to arrange a meeting  with each one bringing a passport  a driver ? s license  and three major credit cards  but being busy people  they might not be able to find a mutually acceptable date for months fortunately  incredible as it may sound  there is a way for total strangers to establish a shared secret key in broad daylight  even with trudy carefully recording every message the protocol that allows strangers to establish a shared secret key is called the diffie-hellman key exchange  diffie and hellman  1976  and works as follows alice and bob have to agree on two large numbers  n and g  where n is a prime   n ? ? 1  /2 is also a prime  and certain conditions apply to g these numbers may be public  so either one of them can just pick n and g and tell the other openly now alice picks a large  say  1024-bit  number  x  and keeps it secret similarly  bob picks a large secret number  y alice initiates the key exchange protocol by sending bob a message containing  n  g  gx mod n   as shown in fig 8-37 bob responds by sending alice a message containing gy mod n now alice raises the number bob sent her to the xth power modulo n to get  gy mod n  x mod n bob performs a similar operation to get  gx mod n  y mod n by the laws of modular arithmetic  both calculations yield gxy mod n lo and behold  as if by magic  alice and bob suddenly share a secret key  gxy mod n 834 network security chap 8 1 alice picks x bob picks y 2 gy mod n n  g  gx mod n alice computes  gy mod n  x = gxy mod n bob computes  gx mod n  y = gxy mod n bob alice mod n mod n figure 8-37 the diffie-hellman key exchange trudy  of course  has seen both messages she knows g and n from message 1 if she could compute x and y  she could figure out the secret key the trouble is  given only gx mod n  she can not find x no practical algorithm for computing discrete logarithms modulo a very large prime number is known to make this example more concrete  we will use the  completely unrealistic  values of n ? ? 47 and g ? ? 3 alice picks x ? ? 8 and bob picks y ? ? 10 both of these are kept secret alice ? s message to bob is  47  3  28  because 38 mod 47 is 28 bob ? s message to alice is  17   alice computes 178 mod 47  which is 4 bob computes 2810 mod 47  which is 4 alice and bob have now independently determined that the secret key is now 4 to find the key  trudy now has to solve the equation 3x mod 47 ? ? 28  which can be done by exhaustive search for small numbers like this  but not when all the numbers are hundreds of bits long all currently known algorithms simply take far too long  even on massively parallel  lightning fast supercomputers despite the elegance of the diffie-hellman algorithm  there is a problem  when bob gets the triple  47  3  28   how does he know it is from alice and not from trudy ? there is no way he can know unfortunately  trudy can exploit this fact to deceive both alice and bob  as illustrated in fig 8-38 here  while alice and bob are choosing x and y  respectively  trudy picks her own random number  z alice sends message 1  intended for bob trudy intercepts it and sends message 2 to bob  using the correct g and n  which are public anyway  but with her own z instead of x she also sends message 3 back to alice later bob sends message 4 to alice  which trudy again intercepts and keeps now everybody does the modular arithmetic alice computes the secret key as gxz mod n  and so does trudy  for messages to alice   bob computes gyz mod n and so does trudy  for messages to bob   alice thinks she is talking to bob  so she establishes a session key  with trudy   so does bob every message that alice sends on the encrypted session is captured by trudy  stored  modified if desired  and then  optionally  passed on to bob similarly  in the other direction  trudy sees everything and can modify all messages at will  while both alice and bob are under the illusion that they have a secure channel to one another for this sec 8.7 authentication protocols 835 1 alice picks x trudy picks z 3 gz mod n n  g  gx mod n trudy 2 bob picks y 4 gy mod n n  g  gz mod n bob alice figure 8-38 the man-in-the-middle attack reason  the attack is known as the man-in-the-middle attack it is also called the bucket brigade attack  because it vaguely resembles an old-time volunteer fire department passing buckets along the line from the fire truck to the fire 8.7.3 authentication using a key distribution center setting up a shared secret with a stranger almost worked  but not quite on the other hand  it probably was not worth doing in the first place  sour grapes attack   to talk to n people this way  you would need n keys for popular people  key management would become a real burden  especially if each key had to be stored on a separate plastic chip card a different approach is to introduce a trusted key distribution center in this model  each user has a single key shared with the kdc authentication and session key management now go through the kdc the simplest known kdc authentication protocol involving two parties and a trusted kdc is depicted in fig 8-39 1 a  ka  b  ks  kdc 2 bob alice kb  a  ks  figure 8-39 a first attempt at an authentication protocol using a kdc the idea behind this protocol is simple  alice picks a session key  ks  and tells the kdc that she wants to talk to bob using ks this message is encrypted 836 network security chap 8 with the secret key alice shares  only  with the kdc  ka the kdc decrypts this message  extracting bob ? s identity and the session key it then constructs a new message containing alice ? s identity and the session key and sends this message to bob this encryption is done with kb  the secret key bob shares with the kdc when bob decrypts the message  he learns that alice wants to talk to him and which key she wants to use the authentication here happens for free the kdc knows that message 1 must have come from alice  since no one else would have been able to encrypt it with alice ? s secret key similarly  bob knows that message 2 must have come from the kdc  whom he trusts  since no one else knows his secret key unfortunately  this protocol has a serious flaw trudy needs some money  so she figures out some legitimate service she can perform for alice  makes an attractive offer  and gets the job after doing the work  trudy then politely requests alice to pay by bank transfer alice then establishes a session key with her banker  bob then she sends bob a message requesting money to be transferred to trudy ? s account meanwhile  trudy is back to her old ways  snooping on the network she copies both message 2 in fig 8-39 and the money-transfer request that follows it later  she replays both of them to bob who thinks  ? ? alice must have hired trudy again she clearly does good work ? ? bob then transfers an equal amount of money from alice ? s account to trudy ? s some time after the 50th message pair  bob runs out of the office to find trudy to offer her a big loan so she can expand her obviously successful business this problem is called the replay attack several solutions to the replay attack are possible the first one is to include a timestamp in each message then  if anyone receives an obsolete message  it can be discarded the trouble with this approach is that clocks are never exactly synchronized over a network  so there has to be some interval during which a timestamp is valid trudy can replay the message during this interval and get away with it the second solution is to put a nonce in each message each party then has to remember all previous nonces and reject any message containing a previously used nonce but nonces have to be remembered forever  lest trudy try replaying a 5-year-old message also  if some machine crashes and it loses its nonce list  it is again vulnerable to a replay attack timestamps and nonces can be combined to limit how long nonces have to be remembered  but clearly the protocol is going to get a lot more complicated a more sophisticated approach to mutual authentication is to use a multiway challenge-response protocol a well-known example of such a protocol is the needham-schroeder authentication protocol  needham and schroeder  1978   one variant of which is shown in fig 8-40 the protocol begins with alice telling the kdc that she wants to talk to bob this message contains a large random number  ra  as a nonce the kdc sends back message 2 containing alice ? s random number  a session key  and a ticket sec 8.7 authentication protocols 837 1 ra  a  b 2 ka  ra  b  ks  kb  a  ks   kdc 3 bob alice kb  a  ks   ks  ra2  4 ks  ra2 ? 1   rb 5 ks  rb ? 1  figure 8-40 the needham-schroeder authentication protocol that she can send to bob the point of the random number  ra  is to assure alice that message 2 is fresh  and not a replay bob ? s identity is also enclosed in case trudy gets any funny ideas about replacing b in message 1 with her own identity so the kdc will encrypt the ticket at the end of message 2 with kt instead of kb the ticket encrypted with kb is included inside the encrypted message to prevent trudy from replacing it with something else on the way back to alice alice now sends the ticket to bob  along with a new random number  ra 2  encrypted with the session key  ks in message 4  bob sends back ks  ra 2 ? ? 1  to prove to alice that she is talking to the real bob sending back ks  ra 2  would not have worked  since trudy could just have stolen it from message 3 after receiving message 4  alice is now convinced that she is talking to bob and that no replays could have been used so far after all  she just generated ra 2 a few milliseconds ago the purpose of message 5 is to convince bob that it is indeed alice he is talking to  and no replays are being used here either by having each party both generate a challenge and respond to one  the possibility of any kind of replay attack is eliminated although this protocol seems pretty solid  it does have a slight weakness if trudy ever manages to obtain an old session key in plaintext  she can initiate a new session with bob by replaying the message 3 that corresponds to the compromised key and convince him that she is alice  denning and sacco  1981   this time she can plunder alice ? s bank account without having to perform the legitimate service even once needham and schroeder  1987  later published a protocol that corrects this problem in the same issue of the same journal  otway and rees  1987  also published a protocol that solves the problem in a shorter way figure 8-41 shows a slightly modified otway-rees protocol in the otway-rees protocol  alice starts out by generating a pair of random numbers  r  which will be used as a common identifier  and ra  which alice will use to challenge bob when bob gets this message  he constructs a new message from the encrypted part of alice ? s message and an analogous one of his own 838 network security chap 8 4 ka  ra  ks  3 2 kb  rb  ks  kdc 1 bob alice a  b  r  ka  a  b  r  ra  a  ka  a  b  r  ra   b  kb  a  b  r  rb  figure 8-41 the otway-rees authentication protocol  slightly simplified   both the parts encrypted with ka and kb identify alice and bob  contain the common identifier  and contain a challenge the kdc checks to see if the r in both parts is the same it might not be if trudy has tampered with r in message 1 or replaced part of message 2 if the two rs match  the kdc believes that the request message from bob is valid it then generates a session key and encrypts it twice  once for alice and once for bob each message contains the receiver ? s random number  as proof that the kdc  and not trudy  generated the message at this point  both alice and bob are in possession of the same session key and can start communicating the first time they exchange data messages  each one can see that the other one has an identical copy of ks  so the authentication is then complete 8.7.4 authentication using kerberos an authentication protocol used in many real systems  including windows 2000 and later versions  is kerberos  which is based on a variant of needham schroeder it is named for a multiheaded dog in greek mythology that used to guard the entrance to hades  presumably to keep undesirables out   kerberos was designed at m.i.t to allow workstation users to access network resources in a secure way its biggest difference from needham-schroeder is its assumption that all clocks are fairly well synchronized the protocol has gone through several iterations v5 is the one that is widely used in industry and defined in rfc 4120 the earlier version  v4  was finally retired after serious flaws were found  yu et al  2004   v5 improves on v4 with many small changes to the protocol and some improved features  such as the fact that it no longer relies on the now-dated des for more information  see neuman and ts ? o  1994   kerberos involves three servers in addition to alice  a client workstation   1 authentication server  as   verifies users during login 2 ticket-granting server  tgs   issues ? ? proof of identity tickets ? ? 3 bob the server  actually does the work alice wants performed sec 8.7 authentication protocols 839 as is similar to a kdc in that it shares a secret password with every user the tgs ? s job is to issue tickets that can convince the real servers that the bearer of a tgs ticket really is who he or she claims to be to start a session  alice sits down at an arbitrary public workstation and types her name the workstation sends her name and the name of the tgs to the as in plaintext  as shown in message 1 of fig 8-42 what comes back is a session key and a ticket  ktgs  a  ks  t   intended for the tgs the session key is encrypted using alice ? s secret key  so that only alice can decrypt it only when message 2 arrives does the workstation ask for alice ? s password ? not before then the password is then used to generate ka in order to decrypt message 2 and obtain the session key at this point  the workstation overwrites alice ? s password to make sure that it is only inside the workstation for a few milliseconds at most if trudy tries logging in as alice  the password she types will be wrong and the workstation will detect this because the standard part of message 2 will be incorrect alice as tgs bob kab  a  t   kb  a  b  kab  t  a,tgs ka  tgs  ks  t   ktgs  a  ks  t  b  ks  a  t   ktgs  a  ks  t  ks  b  kab  t   kb  a  b  kab  t  kab  t  6 5 2 4 1 3 figure 8-42 the operation of kerberos v5 after she logs in  alice may tell the workstation that she wants to contact bob the file server the workstation then sends message 3 to the tgs asking for a ticket to use with bob the key element in this request is the ticket ktgs  a  ks  t   which is encrypted with the tgs ? s secret key and used as proof that the sender really is alice the tgs responds in message 4 by creating a session key  kab  for alice to use with bob two versions of it are sent back the first is encrypted with only ks  so alice can read it the second is another ticket  encrypted with bob ? s key  kb  so bob can read it 840 network security chap 8 trudy can copy message 3 and try to use it again  but she will be foiled by the encrypted timestamp  t  sent along with it trudy can not replace the timestamp with a more recent one  because she does not know ks  the session key alice uses to talk to the tgs even if trudy replays message 3 quickly  all she will get is another copy of message 4  which she could not decrypt the first time and will not be able to decrypt the second time either now alice can send kab to bob via the new ticket to establish a session with him  message 5   this exchange is also timestamped the optional response  message 6  is proof to alice that she is actually talking to bob  not to trudy after this series of exchanges  alice can communicate with bob under cover of kab if she later decides she needs to talk to another server  carol  she just repeats message 3 to the tgs  only now specifying c instead of b the tgs will promptly respond with a ticket encrypted with kc that alice can send to carol and that carol will accept as proof that it came from alice the point of all this work is that now alice can access servers all over the network in a secure way and her password never has to go over the network in fact  it only had to be in her own workstation for a few milliseconds however  note that each server does its own authorization when alice presents her ticket to bob  this merely proves to bob who sent it precisely what alice is allowed to do is up to bob since the kerberos designers did not expect the entire world to trust a single authentication server  they made provision for having multiple realms  each with its own as and tgs to get a ticket for a server in a distant realm  alice would ask her own tgs for a ticket accepted by the tgs in the distant realm if the distant tgs has registered with the local tgs  the same way local servers do   the local tgs will give alice a ticket valid at the distant tgs she can then do business over there  such as getting tickets for servers in that realm note  however  that for parties in two realms to do business  each one must trust the other ? s tgs otherwise  they can not do business 8.7.5 authentication using public-key cryptography mutual authentication can also be done using public-key cryptography to start with  alice needs to get bob ? s public key if a pki exists with a directory server that hands out certificates for public keys  alice can ask for bob ? s  as shown in fig 8-43 as message 1 the reply  in message 2  is an x.509 certificate containing bob ? s public key when alice verifies that the signature is correct  she sends bob a message containing her identity and a nonce when bob receives this message  he has no idea whether it came from alice or from trudy  but he plays along and asks the directory server for alice ? s public key  message 4   which he soon gets  message 5   he then sends alice message 6  containing alice ? s ra  his own nonce  rb  and a proposed session key  ks sec 8.7 authentication protocols 841 3 eb  a  ra  7 ks  rb  6 ea  ra  rb  ks  bob alice directory 2 here is eb 4 give me ea 5 here is ea 1 give me eb figure 8-43 mutual authentication using public-key cryptography when alice gets message 6  she decrypts it using her private key she sees ra in it  which gives her a warm feeling inside the message must have come from bob  since trudy has no way of determining ra furthermore  it must be fresh and not a replay  since she just sent bob ra alice agrees to the session by sending back message 7 when bob sees rb encrypted with the session key he just generated  he knows alice got message 6 and verified ra bob is now a happy camper what can trudy do to try to subvert this protocol ? she can fabricate message 3 and trick bob into probing alice  but alice will see an ra that she did not send and will not proceed further trudy can not forge message 7 back to bob because she does not know rb or ks and can not determine them without alice ? s private key she is out of luck 8.8 email security when an email message is sent between two distant sites  it will generally transit dozens of machines on the way any of these can read and record the message for future use in practice  privacy is nonexistent  despite what many people think nevertheless  many people would like to be able to send email that can be read by the intended recipient and no one else  not their boss and not even their government this desire has stimulated several people and groups to apply the cryptographic principles we studied earlier to email to produce secure email in the following sections we will study a widely used secure email system  pgp  and then briefly mention one other  s/mime for additional information about secure email  see kaufman et al  2002  and schneier  1995   842 network security chap 8 8.8.1 pgp ? pretty good privacy our first example  pgp  pretty good privacy  is essentially the brainchild of one person  phil zimmermann  1995a  1995b   zimmermann is a privacy advocate whose motto is  ? ? if privacy is outlawed  only outlaws will have privacy ? ? released in 1991  pgp is a complete email security package that provides privacy  authentication  digital signatures  and compression  all in an easy-to-use form furthermore  the complete package  including all the source code  is distributed free of charge via the internet due to its quality  price  zero   and easy availability on unix  linux  windows  and mac os platforms  it is widely used today pgp encrypts data by using a block cipher called idea  international data encryption algorithm   which uses 128-bit keys it was devised in switzerland at a time when des was seen as tainted and aes had not yet been invented conceptually  idea is similar to des and aes  it mixes up the bits in a series of rounds  but the details of the mixing functions are different from des and aes key management uses rsa and data integrity uses md5  topics that we have already discussed pgp has also been embroiled in controversy since day 1  levy  1993   because zimmermann did nothing to stop other people from placing pgp on the internet  where people all over the world could get it  the u.s government claimed that zimmermann had violated u.s laws prohibiting the export of munitions the u.s government ? s investigation of zimmermann went on for 5 years but was eventually dropped  probably for two reasons first  zimmermann did not place pgp on the internet himself  so his lawyer claimed that he never exported anything  and then there is the little matter of whether creating a web site constitutes export at all   second  the government eventually came to realize that winning a trial meant convincing a jury that a web site containing a downloadable privacy program was covered by the arms-trafficking law prohibiting the export of war materiel such as tanks  submarines  military aircraft  and nuclear weapons years of negative publicity probably did not help much  either as an aside  the export rules are bizarre  to put it mildly the government considered putting code on a web site to be an illegal export and harassed zimmermann about it for 5 years on the other hand  when someone published the complete pgp source code  in c  as a book  in a large font with a checksum on each page to make scanning it in easy  and then exported the book  that was fine with the government because books are not classified as munitions the sword is mightier than the pen  at least for uncle sam another problem pgp ran into involved patent infringement the company holding the rsa patent  rsa security  inc  alleged that pgp ? s use of the rsa algorithm infringed on its patent  but that problem was settled with releases starting at 2.6 furthermore  pgp uses another patented encryption algorithm  idea  whose use caused some problems at first sec 8.8 email security 843 since pgp is open source  various people and groups have modified it and produced a number of versions some of these were designed to get around the munitions laws  others were focused on avoiding the use of patented algorithms  and still others wanted to turn it into a closed-source commercial product although the munitions laws have now been slightly liberalized  otherwise  products using aes would not have been exportable from the u.s   and the rsa patent expired in september 2000  the legacy of all these problems is that several incompatible versions of pgp are in circulation  under various names the discussion below focuses on classic pgp  which is the oldest and simplest version another popular version  open pgp  is described in rfc 2440 yet another is the gnu privacy guard pgp intentionally uses existing cryptographic algorithms rather than inventing new ones it is largely based on algorithms that have withstood extensive peer review and were not designed or influenced by any government agency trying to weaken them for people who distrust government  this property is a big plus pgp supports text compression  secrecy  and digital signatures and also provides extensive key management facilities  but  oddly enough  not email facilities it is like a preprocessor that takes plaintext as input and produces signed ciphertext in base64 as output this output can then be emailed  of course some pgp implementations call a user agent as the final step to actually send the message to see how pgp works  let us consider the example of fig 8-44 here  alice wants to send a signed plaintext message  p  to bob in a secure way both alice and bob have private  dx  and public  ex  rsa keys let us assume that each one knows the other ? s public key ; we will cover pgp key management shortly alice starts out by invoking the pgp program on her computer pgp first hashes her message  p  using md5  and then encrypts the resulting hash using her private rsa key  da when bob eventually gets the message  he can decrypt the hash with alice ? s public key and verify that the hash is correct even if someone else  e.g  trudy  could acquire the hash at this stage and decrypt it with alice ? s known public key  the strength of md5 guarantees that it would be computationally infeasible to produce another message with the same md5 hash the encrypted hash and the original message are now concatenated into a single message  p1  and compressed using the zip program  which uses the ziv lempel algorithm  ziv and lempel  1977   call the output of this step p1.z next  pgp prompts alice for some random input both the content and the typing speed are used to generate a 128-bit idea message key  km  called a session key in the pgp literature  but this is really a misnomer since there is no session   km is now used to encrypt p1.z with idea in cipher feedback mode in addition  km is encrypted with bob ? s public key  eb these two components are then concatenated and converted to base64  as we discussed in the section on mime in chap 7 the resulting message contains only letters  digits  and the symbols +  /  and =  which means it can be put into an rfc 822 body and be expected to arrive unmodified 844 network security chap 8 md5 rsa zip idea base 64 rsa ascii text to p1.z the network p p1 original plaintext message from alice concatenation of p and the signed hash of p concatenation of p1.z encrypted with idea and km encrypted with eb alice 's private rsa key  da p1 compressed bob 's public rsa key  eb km  one-time message key for idea  concatenation km figure 8-44 pgp in operation for sending a message when bob gets the message  he reverses the base64 encoding and decrypts the idea key using his private rsa key using this key  he decrypts the message to get p1.z after decompressing it  bob separates the plaintext from the encrypted hash and decrypts the hash using alice ? s public key if the plaintext hash agrees with his own md5 computation  he knows that p is the correct message and that it came from alice it is worth noting that rsa is only used in two places here  to encrypt the 128-bit md5 hash and to encrypt the 128-bit idea key although rsa is slow  it has to encrypt only 256 bits  not a large volume of data furthermore  all 256 plaintext bits are exceedingly random  so a considerable amount of work will be required on trudy ? s part just to determine if a guessed key is correct the heavyduty encryption is done by idea  which is orders of magnitude faster than rsa thus  pgp provides security  compression  and a digital signature and does so in a much more efficient way than the scheme illustrated in fig 8-19 pgp supports four rsa key lengths it is up to the user to select the one that is most appropriate the lengths are  1 casual  384 bits   can be broken easily today 2 commercial  512 bits   breakable by three-letter organizations 3 military  1024 bits   not breakable by anyone on earth 4 alien  2048 bits   not breakable by anyone on other planets  either sec 8.8 email security 845 since rsa is only used for two small computations  everyone should use alienstrength keys all the time the format of a classic pgp message is shown in fig 8-45 numerous other formats are also in use the message has three parts  containing the idea key  the signature  and the message  respectively the key part contains not only the key  but also a key identifier  since users are permitted to have multiple public keys id of eb id of ea sig hdr md5 hash msg hdr file name t i m e t i m e t y p e s km message encrypted by eb da compressed  encrypted by idea base64 signature part message key part message part figure 8-45 a pgp message the signature part contains a header  which will not concern us here the header is followed by a timestamp  the identifier for the sender ? s public key that can be used to decrypt the signature hash  some type information that identifies the algorithms used  to allow md6 and rsa2 to be used when they are invented   and the encrypted hash itself the message part also contains a header  the default name of the file to be used if the receiver writes the file to the disk  a message creation timestamp  and  finally  the message itself key management has received a large amount of attention in pgp as it is the achilles ? heel of all security systems key management works as follows each user maintains two data structures locally  a private key ring and a public key ring the private key ring contains one or more personal private/public key pairs the reason for supporting multiple pairs per user is to permit users to change their public keys periodically or when one is thought to have been compromised  without invalidating messages currently in preparation or in transit each pair has an identifier associated with it so that a message sender can tell the recipient which public key was used to encrypt it message identifiers consist of the low-order 64 bits of the public key users are themselves responsible for avoiding conflicts in their public-key identifiers the private keys on disk are encrypted using a special  arbitrarily long  password to protect them against sneak attacks the public key ring contains public keys of the user ? s correspondents these are needed to encrypt the message keys associated with each message each entry 846 network security chap 8 on the public key ring contains not only the public key  but also its 64-bit identifier and an indication of how strongly the user trusts the key the problem being tackled here is the following suppose that public keys are maintained on bulletin boards one way for trudy to read bob ? s secret email is to attack the bulletin board and replace bob ? s public key with one of her choice when alice later fetches the key allegedly belonging to bob  trudy can mount a bucket brigade attack on bob to prevent such attacks  or at least minimize the consequences of them  alice needs to know how much to trust the item called ? ? bob ? s key ? ? on her public key ring if she knows that bob personally handed her a cd-rom containing the key  she can set the trust value to the highest value it is this decentralized  user-controlled approach to public-key management that sets pgp apart from centralized pki schemes nevertheless  people do sometimes obtain public keys by querying a trusted key server for this reason  after x.509 was standardized  pgp supported these certificates as well as the traditional pgp public key ring mechanism all current versions of pgp have x.509 support 8.8.2 s/mime ietf ? s venture into email security  called s/mime  secure/mime   is described in rfcs 2632 through 2643 it provides authentication  data integrity  secrecy  and nonrepudiation it also is quite flexible  supporting a variety of cryptographic algorithms not surprisingly  given the name  s/mime integrates well with mime  allowing all kinds of messages to be protected a variety of new mime headers are defined  for example  for holding digital signatures s/mime does not have a rigid certificate hierarchy beginning at a single root  which had been one of the political problems that doomed an earlier system called pem  privacy enhanced mail   instead  users can have multiple trust anchors as long as a certificate can be traced back to some trust anchor the user believes in  it is considered valid s/mime uses the standard algorithms and protocols we have been examining so far  so we will not discuss it any further here for the details  please consult the rfcs 8.9 web security we have just studied two important areas where security is needed  communications and email you can think of these as the soup and appetizer now it is time for the main course  web security the web is where most of the trudies hang out nowadays and do their dirty work in the following sections  we will look at some of the problems and issues relating to web security sec 8.9 web security 847 web security can be roughly divided into three parts first  how are objects and resources named securely ? second  how can secure  authenticated connections be established ? third  what happens when a web site sends a client a piece of executable code ? after looking at some threats  we will examine all these issues 8.9.1 threats one reads about web site security problems in the newspaper almost weekly the situation is really pretty grim let us look at a few examples of what has already happened first  the home pages of numerous organizations have been attacked and replaced by new home pages of the crackers ? choosing  the popular press calls people who break into computers ? ? hackers  ? ? but many programmers reserve that term for great programmers we prefer to call these people ? ? crackers ? ?  sites that have been cracked include those belonging to yahoo !  the u.s army  the cia  nasa  and the new york times in most cases  the crackers just put up some funny text and the sites were repaired within a few hours now let us look at some much more serious cases numerous sites have been brought down by denial-of-service attacks  in which the cracker floods the site with traffic  rendering it unable to respond to legitimate queries often  the attack is mounted from a large number of machines that the cracker has already broken into  ddos attacks   these attacks are so common that they do not even make the news any more  but they can cost the attacked sites thousands of dollars in lost business in 1999  a swedish cracker broke into microsoft ? s hotmail web site and created a mirror site that allowed anyone to type in the name of a hotmail user and then read all of the person ? s current and archived email in another case  a 19-year-old russian cracker named maxim broke into an e-commerce web site and stole 300,000 credit card numbers then he approached the site owners and told them that if they did not pay him $ 100,000  he would post all the credit card numbers to the internet they did not give in to his blackmail  and he indeed posted the credit card numbers  inflicting great damage on many innocent victims in a different vein  a 23-year-old california student emailed a press release to a news agency falsely stating that the emulex corporation was going to post a large quarterly loss and that the c.e.o was resigning immediately within hours  the company ? s stock dropped by 60 %  causing stockholders to lose over $ 2 billion the perpetrator made a quarter of a million dollars by selling the stock short just before sending the announcement while this event was not a web site break-in  it is clear that putting such an announcement on the home page of any big corporation would have a similar effect we could  unfortunately  go on like this for many more pages but it is now time to examine some of the technical issues related to web security for more 848 network security chap 8 information about security problems of all kinds  see anderson  2008a  ; stuttard and pinto  2007  ; and schneier  2004   searching the internet will also turn up vast numbers of specific cases 8.9.2 secure naming let us start with something very basic  alice wants to visit bob ? s web site she types bob ? s url into her browser and a few seconds later  a web page appears but is it bob ? s ? maybe yes and maybe no trudy might be up to her old tricks again for example  she might be intercepting all of alice ? s outgoing packets and examining them when she captures an http get request headed to bob ? s web site  she could go to bob ? s web site herself to get the page  modify it as she wishes  and return the fake page to alice alice would be none the wiser worse yet  trudy could slash the prices at bob ? s e-store to make his goods look very attractive  thereby tricking alice into sending her credit card number to ? ? bob ? ? to buy some merchandise one disadvantage of this classic man-in-the-middle attack is that trudy has to be in a position to intercept alice ? s outgoing traffic and forge her incoming traffic in practice  she has to tap either alice ? s phone line or bob ? s  since tapping the fiber backbone is fairly difficult while active wiretapping is certainly possible  it is a fair amount of work  and while trudy is clever  she is also lazy besides  there are easier ways to trick alice dns spoofing one way would be for trudy to crack the dns system or maybe just the dns cache at alice ? s isp  and replace bob ? s ip address  say  36.1.2.3  with her  trudy ? s  ip address  say  42.9.9.9   that leads to the following attack the way it is supposed to work is illustrated in fig 8-46  a   here  alice  1  asks dns for bob ? s ip address   2  gets it   3  asks bob for his home page  and  4  gets that  too after trudy has modified bob ? s dns record to contain her own ip address instead of bob ? s  we get the situation in fig 8-46  b   here  when alice looks up bob ? s ip address  she gets trudy ? s  so all her traffic intended for bob goes to trudy trudy can now mount a man-in-the-middle attack without having to go to the trouble of tapping any phone lines instead  she has to break into a dns server and change one record  a much easier proposition how might trudy fool dns ? it turns out to be relatively easy briefly summarized  trudy can trick the dns server at alice ? s isp into sending out a query to look up bob ? s address unfortunately  since dns uses udp  the dns server has no real way of checking who supplied the answer trudy can exploit this property by forging the expected reply and thus injecting a false ip address into the dns server ? s cache for simplicity  we will assume that alice ? s isp does not initially have an entry for bob ? s web site  bob.com if it does  trudy can wait until it times out and try later  or use other tricks   sec 8.9 web security 849 1 give me bob 's ip address 2 36.1.2.3  bob 's ip address  3 get index.html 4 bob 's home page bob 's web server  36.1.2.3  dns server alice 1 2 3  a  4 1 give me bob 's ip address 2 42.9.9.9  trudy 's ip address  3 get index.html 4 trudy 's fake of bob 's home page trudy 's web server  42.9.9.9  cracked dns server alice 1 2 3  b  4 figure 8-46  a  normal situation  b  an attack based on breaking into a dns server and modifying bob ? s record trudy starts the attack by sending a lookup request to alice ? s isp asking for the ip address of bob.com since there is no entry for this dns name  the cache server queries the top-level server for the com domain to get one however  trudy beats the com server to the punch and sends back a false reply saying  ? ? bob.com is 42.9.9.9  ? ? where that ip address is hers if her false reply gets back to alice ? s isp first  that one will be cached and the real reply will be rejected as an unsolicited reply to a query no longer outstanding tricking a dns server into installing a false ip address is called dns spoofing a cache that holds an intentionally false ip address like this is called a poisoned cache actually  things are not quite that simple first  alice ? s isp checks to see that the reply bears the correct ip source address of the top-level server but since trudy can put anything she wants in that ip field  she can defeat that test easily since the ip addresses of the top-level servers have to be public second  to allow dns servers to tell which reply goes with which request  all requests carry a sequence number to spoof alice ? s isp  trudy has to know its current sequence number the easiest way to learn the current sequence number is for trudy to register a domain herself  say  trudy-the-intruder.com let us assume its ip address is also 42.9.9.9 she also creates a dns server for her newly hatched domain  dns.trudy-the-intruder.com it  too  uses trudy ? s 42.9.9.9 ip address  since trudy has only one computer now she has to make alice ? s isp aware of her dns server that is easy to do all she has to do is ask alice ? s isp for foobar.trudy-the-intruder.com  which will cause alice ? s isp to find out who serves trudy ? s new domain by asking the top-level com server 850 network security chap 8 with dns.trudy-the-intruder.com safely in the cache at alice ? s isp  the real attack can start trudy now queries alice ? s isp for www.trudy-the-intruder.com the isp naturally sends trudy ? s dns server a query asking for it this query bears the sequence number that trudy is looking for quick like a bunny  trudy asks alice ? s isp to look up bob she immediately answers her own question by sending the isp a forged reply  allegedly from the top-level com server  saying  ? ? bob.com is 42.9.9.9 ? ?  this forged reply carries a sequence number one higher than the one she just received while she is at it  she can also send a second forgery with a sequence number two higher  and maybe a dozen more with increasing sequence numbers one of them is bound to match the rest will just be thrown out when alice ? s forged reply arrives  it is cached ; when the real reply comes in later  it is rejected since no query is then outstanding now when alice looks up bob.com  she is told to use 42.9.9.9  trudy ? s address trudy has mounted a successful man-in-the-middle attack from the comfort of her own living room the various steps to this attack are illustrated in fig 8-47 this one specific attack can be foiled by having dns servers use random ids in their queries rather than just counting  but it seems that every time one hole is plugged  another one turns up in particular  the ids are only 16 bits  so working through all of them is easy when it is a computer that is doing the guessing 1 look up foobar.trudy-the-intruder.com  to force it into the isp 's cache  2 look up www.trudy-the-intruder.com  to get the isp 's next sequence number  3 request for www.trudy-the-intruder.com  carrying the isp 's next sequence number  n  4 quick like a bunny  look up bob.com  to force the isp to query the com server in step 5  5 legitimate query for bob.com with seq = n + 1 6 trudy 's forged answer  bob is 42.9.9.9  seq = n + 1 7 real answer  rejected  too late  alice 's isp 's cache dns server for com trudy 5 7 1 2 3 4 6 figure 8-47 how trudy spoofs alice ? s isp secure dns the real problem is that dns was designed at a time when the internet was a research facility for a few hundred universities  and neither alice  nor bob  nor trudy was invited to the party security was not an issue then ; making the internet work at all was the issue the environment has changed radically over the sec 8.9 web security 851 years  so in 1994 ietf set up a working group to make dns fundamentally secure this  ongoing  project is known as dnssec  dns security  ; its first output was presented in rfc 2535 unfortunately  dnssec has not been fully deployed yet  so numerous dns servers are still vulnerable to spoofing attacks dnssec is conceptually extremely simple it is based on public-key cryptography every dns zone  in the sense of fig 7-5  has a public/private key pair all information sent by a dns server is signed with the originating zone ? s private key  so the receiver can verify its authenticity dnssec offers three fundamental services  1 proof of where the data originated 2 public key distribution 3 transaction and request authentication the main service is the first one  which verifies that the data being returned has been approved by the zone ? s owner the second one is useful for storing and retrieving public keys securely the third one is needed to guard against playback and spoofing attacks note that secrecy is not an offered service since all the information in dns is considered public since phasing in dnssec is expected to take several years  the ability for security-aware servers to interwork with security ignorant servers is essential  which implies that the protocol can not be changed let us now look at some of the details dns records are grouped into sets called rrsets  resource record sets   with all the records having the same name  class  and type being lumped together in a set an rrset may contain multiple a records  for example  if a dns name resolves to a primary ip address and a secondary ip address the rrsets are extended with several new record types  discussed below   each rrset is cryptographically hashed  e.g  using sha-1   the hash is signed by the zone ? s private key  e.g  using rsa   the unit of transmission to clients is the signed rrset upon receipt of a signed rrset  the client can verify whether it was signed by the private key of the originating zone if the signature agrees  the data are accepted since each rrset contains its own signature  rrsets can be cached anywhere  even at untrustworthy servers  without endangering the security dnssec introduces several new record types the first of these is the key record this records holds the public key of a zone  user  host  or other principal  the cryptographic algorithm used for signing  the protocol used for transmission  and a few other bits the public key is stored naked x.509 certificates are not used due to their bulk the algorithm field holds a 1 for md5/rsa signatures  the preferred choice   and other values for other combinations the protocol field can indicate the use of ipsec or other security protocols  if any the second new record type is the sig record it holds the signed hash according to the algorithm specified in the key record the signature applies to all the records in the rrset  including any key records present  but excluding 852 network security chap 8 itself it also holds the times when the signature begins its period of validity and when it expires  as well as the signer ? s name and a few other items the dnssec design is such that a zone ? s private key can be kept offline once or twice a day  the contents of a zone ? s database can be manually transported  e.g  on cd-rom  to a disconnected machine on which the private key is located all the rrsets can be signed there and the sig records thus produced can be conveyed back to the zone ? s primary server on cd-rom in this way  the private key can be stored on a cd-rom locked in a safe except when it is inserted into the disconnected machine for signing the day ? s new rrsets after signing is completed  all copies of the key are erased from memory and the disk and the cd-rom are returned to the safe this procedure reduces electronic security to physical security  something people understand how to deal with this method of presigning rrsets greatly speeds up the process of answering queries since no cryptography has to be done on the fly the trade-off is that a large amount of disk space is needed to store all the keys and signatures in the dns databases some records will increase tenfold in size due to the signature when a client process gets a signed rrset  it must apply the originating zone ? s public key to decrypt the hash  compute the hash itself  and compare the two values if they agree  the data are considered valid however  this procedure begs the question of how the client gets the zone ? s public key one way is to acquire it from a trusted server  using a secure connection  e.g  using ipsec   however  in practice  it is expected that clients will be preconfigured with the public keys of all the top-level domains if alice now wants to visit bob ? s web site  she can ask dns for the rrset of bob.com  which will contain his ip address and a key record containing bob ? s public key this rrset will be signed by the top-level com domain  so alice can easily verify its validity an example of what this rrset might contain is shown in fig 8-48 domain name time to live class type value bob.com 86400 in a 36.1.2.3 bob.com 86400 in key 3682793a7b73f731029ce2737d bob.com 86400 in sig 86947503a8b848f5272e53930c figure 8-48 an example rrset for bob.com the key record is bob ? s public key the sig record is the top-level com server ? s signed hash of the a and key records to verify their authenticity now armed with a verified copy of bob ? s public key  alice can ask bob ? s dns server  run by bob  for the ip address of www.bob.com this rrset will be signed by bob ? s private key  so alice can verify the signature on the rrset bob returns if trudy somehow manages to inject a false rrset into any of the caches  alice can easily detect its lack of authenticity because the sig record contained in it will be incorrect sec 8.9 web security 853 however  dnssec also provides a cryptographic mechanism to bind a response to a specific query  to prevent the kind of spoof trudy managed to pull off in fig 8-47 this  optional  antispoofing measure adds to the response a hash of the query message signed with the respondent ? s private key since trudy does not know the private key of the top-level com server  she can not forge a response to a query alice ? s isp sent there she can certainly get her response back first  but it will be rejected due to its invalid signature over the hashed query dnssec also supports a few other record types for example  the cert record can be used for storing  e.g  x.509  certificates this record has been provided because some people want to turn dns into a pki whether this will actually happen remains to be seen we will stop our discussion of dnssec here for more details  please consult rfc 2535 8.9.3 ssl ? the secure sockets layer secure naming is a good start  but there is much more to web security the next step is secure connections we will now look at how secure connections can be achieved nothing involving security is simple and this is not either when the web burst into public view  it was initially used for just distributing static pages however  before long  some companies got the idea of using it for financial transactions  such as purchasing merchandise by credit card  online banking  and electronic stock trading these applications created a demand for secure connections in 1995  netscape communications corp  the then-dominant browser vendor  responded by introducing a security package called ssl  secure sockets layer  to meet this demand this software and its protocol are now widely used  for example  by firefox  safari  and internet explorer  so it is worth examining in some detail ssl builds a secure connection between two sockets  including 1 parameter negotiation between client and server 2 authentication of the server by the client 3 secret communication 4 data integrity protection we have seen these items before  so there is no need to elaborate on them the positioning of ssl in the usual protocol stack is illustrated in fig 8-49 effectively  it is a new layer interposed between the application layer and the transport layer  accepting requests from the browser and sending them down to tcp for transmission to the server once the secure connection has been established  ssl ? s main job is handling compression and encryption when http is used over ssl  it is called https  secure http   even though it is the standard http protocol sometimes it is available at a new port  443  instead of port 80 854 network security chap 8 as an aside  ssl is not restricted to web browsers  but that is its most common application it can also provide mutual authentication application  http  security  ssl  transport  tcp  network  ip  data link  ppp  physical  modem  adsl  cable tv  figure 8-49 layers  and protocols  for a home user browsing with ssl the ssl protocol has gone through several versions below we will discuss only version 3  which is the most widely used version ssl supports a variety of different options these options include the presence or absence of compression  the cryptographic algorithms to be used  and some matters relating to export restrictions on cryptography the last is mainly intended to make sure that serious cryptography is used only when both ends of the connection are in the united states in other cases  keys are limited to 40 bits  which cryptographers regard as something of a joke netscape was forced to put in this restriction in order to get an export license from the u.s government ssl consists of two subprotocols  one for establishing a secure connection and one for using it let us start out by seeing how secure connections are established the connection establishment subprotocol is shown in fig 8-50 it starts out with message 1 when alice sends a request to bob to establish a connection the request specifies the ssl version alice has and her preferences with respect to compression and cryptographic algorithms it also contains a nonce  ra  to be used later now it is bob ? s turn in message 2  bob makes a choice among the various algorithms that alice can support and sends his own nonce  rb then  in message 3  he sends a certificate containing his public key if this certificate is not signed by some well-known authority  he also sends a chain of certificates that can be followed back to one all browsers  including alice ? s  come preloaded with about 100 public keys  so if bob can establish a chain anchored to one of these  alice will be able to verify bob ? s public key at this point  bob may send some other messages  such as a request for alice ? s public-key certificate   when bob is done  he sends message 4 to tell alice it is her turn alice responds by choosing a random 384-bit premaster key and sending it to bob encrypted with his public key  message 5   the actual session key used for encrypting data is derived from the premaster key combined with both nonces in a complex way after message 5 has been received  both alice and bob are able to compute the session key for this reason  alice tells bob to switch to the sec 8.9 web security 855 ssl version  preferences  ra ssl version  choices  rb x.509 certificate chain server done eb  premaster key  change cipher finished change cipher finished 9 7 8 alice bob 6 5 4 3 2 1 figure 8-50 a simplified version of the ssl connection establishment subprotocol new cipher  message 6  and also that she is finished with the establishment subprotocol  message 7   bob then acknowledges her  messages 8 and 9   however  although alice knows who bob is  bob does not know who alice is  unless alice has a public key and a corresponding certificate for it  an unlikely situation for an individual   therefore  bob ? s first message may well be a request for alice to log in using a previously established login name and password the login protocol  however  is outside the scope of ssl once it has been accomplished  by whatever means  data transport can begin as mentioned above  ssl supports multiple cryptographic algorithms the strongest one uses triple des with three separate keys for encryption and sha-1 for message integrity this combination is relatively slow  so it is mostly used for banking and other applications in which the highest security is required for ordinary e-commerce applications  rc4 is used with a 128-bit key for encryption and md5 is used for message authentication rc4 takes the 128-bit key as a seed and expands it to a much larger number for internal use then it uses this internal number to generate a keystream the keystream is xored with the plaintext to provide a classical stream cipher  as we saw in fig 8-14 the export versions also use rc4 with 128-bit keys  but 88 of the bits are made public to make the cipher easy to break for actual transport  a second subprotocol is used  as shown in fig 8-51 messages from the browser are first broken into units of up to 16 kb if data 856 network security chap 8 compression is enabled  each unit is then separately compressed after that  a secret key derived from the two nonces and premaster key is concatenated with the compressed text and the result is hashed with the agreed-on hashing algorithm  usually md5   this hash is appended to each fragment as the mac the compressed fragment plus mac is then encrypted with the agreed-on symmetric encryption algorithm  usually by xoring it with the rc4 keystream   finally  a fragment header is attached and the fragment is transmitted over the tcp connection message authentication code header added encryption mac added compression fragmentation part 1 part 2 message from browser figure 8-51 data transmission using ssl a word of caution is in order  however since it has been shown that rc4 has some weak keys that can be easily cryptanalyzed  the security of ssl using rc4 is on shaky ground  fluhrer et al  2001   browsers that allow the user to choose the cipher suite should be configured to use triple des with 168-bit keys and sha-1 all the time  even though this combination is slower than rc4 and md5 or  better yet  users should upgrade to browsers that support the successor to ssl that we describe shortly a problem with ssl is that the principals may not have certificates  and even if they do  they do not always verify that the keys being used match them in 1996  netscape communications corp turned ssl over to ietf for standardization the result was tls  transport layer security   it is described in rfc 5246 tls was built on ssl version 3 the changes made to ssl were relatively small  but just enough that ssl version 3 and tls can not interoperate for example  the way the session key is derived from the premaster key and nonces was sec 8.9 web security 857 changed to make the key stronger  i.e  harder to cryptanalyze   because of this incompatibility  most browsers implement both protocols  with tls falling back to ssl during negotiation if necessary this is referred to as ssl/tls the first tls implementation appeared in 1999 with version 1.2 defined in august 2008 it includes support for stronger cipher suites  notably aes   ssl has remained strong in the marketplace although tls will probably gradually replace it 8.9.4 mobile code security naming and connections are two areas of concern related to web security but there are more in the early days  when web pages were just static html files  they did not contain executable code now they often contain small programs  including java applets  activex controls  and javascripts downloading and executing such mobile code is obviously a massive security risk  so various methods have been devised to minimize it we will now take a quick peek at some of the issues raised by mobile code and some approaches to dealing with it java applet security java applets are small java programs compiled to a stack-oriented machine language called jvm  java virtual machine   they can be placed on a web page for downloading along with the page after the page is loaded  the applets are inserted into a jvm interpreter inside the browser  as illustrated in fig 8-52 untrusted applet trusted applet web browser sandbox interpreter virtual address space 0xffffffff 0 figure 8-52 applets can be interpreted by a web browser the advantage of running interpreted code over compiled code is that every instruction is examined by the interpreter before being executed this gives the interpreter the opportunity to check whether the instruction ? s address is valid in addition  system calls are also caught and interpreted how these calls are handled is a matter of the security policy for example  if an applet is trusted  e.g  it 858 network security chap 8 came from the local disk   its system calls could be carried out without question however  if an applet is not trusted  e.g  it came in over the internet   it could be encapsulated in what is called a sandbox to restrict its behavior and trap its attempts to use system resources when an applet tries to use a system resource  its call is passed to a security monitor for approval the monitor examines the call in light of the local security policy and then makes a decision to allow or reject it in this way  it is possible to give applets access to some resources but not all unfortunately  the reality is that the security model works badly and that bugs in it crop up all the time activex activex controls are x86 binary programs that can be embedded in web pages when one of them is encountered  a check is made to see if it should be executed  and it if passes the test  it is executed it is not interpreted or sandboxed in any way  so it has as much power as any other user program and can potentially do great harm thus  all the security is in the decision whether to run the activex control in retrospect  the whole idea is a gigantic security hole the method that microsoft chose for making this decision is based on the idea of code signing each activex control is accompanied by a digital signature ? a hash of the code that is signed by its creator using public-key cryptography when an activex control shows up  the browser first verifies the signature to make sure it has not been tampered with in transit if the signature is correct  the browser then checks its internal tables to see if the program ? s creator is trusted or there is a chain of trust back to a trusted creator if the creator is trusted  the program is executed ; otherwise  it is not the microsoft system for verifying activex controls is called authenticode it is useful to contrast the java and activex approaches with the java approach  no attempt is made to determine who wrote the applet instead  a run-time interpreter makes sure it does not do things the machine owner has said applets may not do in contrast  with code signing  there is no attempt to monitor the mobile code ? s run-time behavior if it came from a trusted source and has not been modified in transit  it just runs no attempt is made to see whether the code is malicious or not if the original programmer intended the code to format the hard disk and then erase the flash rom so the computer can never again be booted  and if the programmer has been certified as trusted  the code will be run and destroy the computer  unless activex controls have been disabled in the browser   many people feel that trusting an unknown software company is scary to demonstrate the problem  a programmer in seattle formed a software company and got it certified as trustworthy  which is easy to do he then wrote an activex control that did a clean shutdown of the machine and distributed his activex control widely it shut down many machines  but they could just be rebooted  so no sec 8.9 web security 859 harm was done he was just trying to expose the problem to the world the official response was to revoke the certificate for this specific activex control  which ended a short episode of acute embarrassment  but the underlying problem is still there for an evil programmer to exploit  garfinkel with spafford  2002   since there is no way to police the thousands of software companies that might write mobile code  the technique of code signing is a disaster waiting to happen javascript javascript does not have any formal security model  but it does have a long history of leaky implementations each vendor handles security in a different way for example  netscape navigator version 2 used something akin to the java model  but by version 4 that had been abandoned for a code-signing model the fundamental problem is that letting foreign code run on your machine is asking for trouble from a security standpoint  it is like inviting a burglar into your house and then trying to watch him carefully so he can not escape from the kitchen into the living room if something unexpected happens and you are distracted for a moment  bad things can happen the tension here is that mobile code allows flashy graphics and fast interaction  and many web site designers think that this is much more important than security  especially when it is somebody else ? s machine at risk browser extensions as well as extending web pages with code  there is a booming marketplace in browser extensions  add-ons  and plug-ins they are computer programs that extend the functionality of web browsers plug-ins often provide the capability to interpret or display a certain type of content  such as pdfs or flash animations extensions and add-ons provide new browser features  such as better password management  or ways to interact with pages by  for example  marking them up or enabling easy shopping for related items installing an extension  add-on  or plug-in is as simple as coming across something you want when browsing and following the link to install the program this action will cause code to be downloaded across the internet and installed into the browser all of these programs are written to frameworks that differ depending on the browser that is being enhanced however  to a first approximation  they become part of the trusted computing base of the browser that is  if the code that is installed is buggy  the entire browser can be compromised there are two other obvious failure modes as well the first is that the program may behave maliciously  for example  by gathering personal information and sending it to a remote server for all the browser knows  the user installed the extension for precisely this purpose the second problem is that plug-ins give the browser the ability to interpret new types of content often this content is a full 860 network security chap 8 blown programming language itself pdf and flash are good examples when users view pages with pdf and flash content  the plug-ins in their browser are executing the pdf and flash code that code had better be safe ; often there are vulnerabilities that it can exploit for all of these reasons  add-ons and plug-ins should only be installed as needed and only from trusted vendors viruses viruses are another form of mobile code only  unlike the examples above  viruses are not invited in at all the difference between a virus and ordinary mobile code is that viruses are written to reproduce themselves when a virus arrives  either via a web page  an email attachment  or some other way  it usually starts out by infecting executable programs on the disk when one of these programs is run  control is transferred to the virus  which usually tries to spread itself to other machines  for example  by emailing copies of itself to everyone in the victim ? s email address book some viruses infect the boot sector of the hard disk  so when the machine is booted  the virus gets to run viruses have become a huge problem on the internet and have caused billions of dollars ? worth of damage there is no obvious solution perhaps a whole new generation of operating systems based on secure microkernels and tight compartmentalization of users  processes  and resources might help 8.10 social issues the internet and its security technology is an area where social issues  public policy  and technology meet head on  often with huge consequences below we will just briefly examine three areas  privacy  freedom of speech  and copyright needless to say  we can only scratch the surface for additional reading  see anderson  2008a   garfinkel with spafford  2002   and schneier  2004   the internet is also full of material just type words such as ? ? privacy  ? ? ? ? censorship  ? ? and ? ? copyright ? ? into any search engine also  see this book ? s web site for some links it is at http  //www.pearsonhighered.com/tanenbaum 8.10.1 privacy do people have a right to privacy ? good question the fourth amendment to the u.s constitution prohibits the government from searching people ? s houses  papers  and effects without good reason  and goes on to restrict the circumstances under which search warrants shall be issued thus  privacy has been on the public agenda for over 200 years  at least in the u.s what has changed in the past decade is both the ease with which governments can spy on their citizens and the ease with which the citizens can prevent such sec 8.10 social issues 861 spying in the 18th century  for the government to search a citizen ? s papers  it had to send out a policeman on a horse to go to the citizen ? s farm demanding to see certain documents it was a cumbersome procedure nowadays  telephone companies and internet providers readily provide wiretaps when presented with search warrants it makes life much easier for the policeman and there is no danger of falling off a horse cryptography changes all that anybody who goes to the trouble of downloading and installing pgp and who uses a well-guarded alien-strength key can be fairly sure that nobody in the known universe can read his email  search warrant or no search warrant governments well understand this and do not like it real privacy means it is much harder for them to spy on criminals of all stripes  but it is also much harder to spy on journalists and political opponents consequently  some governments restrict or forbid the use or export of cryptography in france  for example  prior to 1999  all cryptography was banned unless the government was given the keys france was not alone in april 1993  the u.s government announced its intention to make a hardware cryptoprocessor  the clipper chip  the standard for all networked communication it was said that this would guarantee citizens ? privacy it also mentioned that the chip provided the government with the ability to decrypt all traffic via a scheme called key escrow  which allowed the government access to all the keys however  the government promised only to snoop when it had a valid search warrant needless to say  a huge furor ensued  with privacy advocates denouncing the whole plan and law enforcement officials praising it eventually  the government backed down and dropped the idea a large amount of information about electronic privacy is available at the electronic frontier foundation ? s web site  www.eff.org anonymous remailers pgp  ssl  and other technologies make it possible for two parties to establish secure  authenticated communication  free from third-party surveillance and interference however  sometimes privacy is best served by not having authentication  in fact  by making communication anonymous the anonymity may be desired for point-to-point messages  newsgroups  or both let us consider some examples first  political dissidents living under authoritarian regimes often wish to communicate anonymously to escape being jailed or killed second  wrongdoing in many corporate  educational  governmental  and other organizations has often been exposed by whistleblowers  who frequently prefer to remain anonymous to avoid retribution third  people with unpopular social  political  or religious views may wish to communicate with each other via email or newsgroups without exposing themselves fourth  people may wish to discuss alcoholism  mental illness  sexual harassment  child abuse  or being a 862 network security chap 8 member of a persecuted minority in a newsgroup without having to go public numerous other examples exist  of course let us consider a specific example in the 1990s  some critics of a nontraditional religious group posted their views to a usenet newsgroup via an anonymous remailer this server allowed users to create pseudonyms and send email to the server  which then remailed or re-posted them using the pseudonyms  so no one could tell where the messages really came from some postings revealed what the religious group claimed were trade secrets and copyrighted documents the religious group responded by telling local authorities that its trade secrets had been disclosed and its copyright infringed  both of which were crimes where the server was located a court case followed and the server operator was compelled to turn over the mapping information that revealed the true identities of the persons who had made the postings  incidentally  this was not the first time that a religious group was unhappy when someone leaked its trade secrets  william tyndale was burned at the stake in 1536 for translating the bible into english   a substantial segment of the internet community was completely outraged by this breach of confidentiality the conclusion that everyone drew is that an anonymous remailer that stores a mapping between real email addresses and pseudonyms  now called a type 1 remailer  is not worth much this case stimulated various people into designing anonymous remailers that could withstand subpoena attacks these new remailers  often called cypherpunk remailers  work as follows the user produces an email message  complete with rfc 822 headers  except from   of course   encrypts it with the remailer ? s public key  and sends it to the remailer there the outer rfc 822 headers are stripped off  the content is decrypted and the message is remailed the remailer has no accounts and maintains no logs  so even if the server is later confiscated  it retains no trace of messages that have passed through it many users who wish anonymity chain their requests through multiple anonymous remailers  as shown in fig 8-53 here  alice wants to send bob a really  really  really anonymous valentine ? s day card  so she uses three remailers she composes the message  m  and puts a header on it containing bob ? s email address then she encrypts the whole thing with remailer 3 ? s public key  e3  indicated by horizontal hatching   to this she prepends a header with remailer 3 ? s email address in plaintext this is the message shown between remailers 2 and 3 in the figure then she encrypts this message with remailer 2 ? s public key  e2  indicated by vertical hatching  and prepends a plaintext header containing remailer 2 ? s email address this message is shown between 1 and 2 in fig 8-53 finally  she encrypts the entire message with remailer 1 ? s public key  e1  and prepends a plaintext header with remailer 1 ? s email address this is the message shown to the right of alice in the figure and this is the message she actually transmits sec 8.10 social issues 863 alice 1 bob to 1 2 3 to 2 anonymous remailer encrypted with e1 encrypted with e2 encrypted with e3 to bob to 3 m to bob m to 3 to bob m to 3 to 2 to bob m figure 8-53 how alice uses three remailers to send bob a message when the message hits remailer 1  the outer header is stripped off the body is decrypted and then emailed to remailer 2 similar steps occur at the other two remailers although it is extremely difficult for anyone to trace the final message back to alice  many remailers take additional safety precautions for example  they may hold messages for a random time  add or remove junk at the end of a message  and reorder messages  all to make it harder for anyone to tell which message output by a remailer corresponds to which input  in order to thwart traffic analysis for a description of this kind of remailer  see mazie ` res and kaashoek  1998   anonymity is not restricted to email services also exist that allow anonymous web surfing using the same form of layered path in which one node only knows the next node in the chain this method is called onion routing because each node peels off another layer of the onion to determine where to forward the packet next the user configures his browser to use the anonymizer service as a proxy tor is a well-known example of such a system  dingledine et al  2004   henceforth  all http requests go through the anonymizer network  which requests the page and sends it back the web site sees an exit node of the anonymizer network as the source of the request  not the user as long as the anonymizer network refrains from keeping a log  after the fact no one can determine who requested which page 8.10.2 freedom of speech privacy relates to individuals wanting to restrict what other people can see about them a second key social issue is freedom of speech  and its opposite  censorship  which is about governments wanting to restrict what individuals can read and publish with the web containing millions and millions of pages  it has become a censor ? s paradise depending on the nature and ideology of the regime  banned material may include web sites containing any of the following  864 network security chap 8 1 material inappropriate for children or teenagers 2 hate aimed at various ethnic  religious  sexual or other groups 3 information about democracy and democratic values 4 accounts of historical events contradicting the government ? s version 5 manuals for picking locks  building weapons  encrypting messages  etc the usual response is to ban the ? ? bad ? ? sites sometimes the results are unexpected for example  some public libraries have installed web filters on their computers to make them child friendly by blocking pornography sites the filters veto sites on their blacklists but also check pages for dirty words before displaying them in one case in loudoun county  virginia  the filter blocked a patron ? s search for information on breast cancer because the filter saw the word ? ? breast ? ? the library patron sued loudoun county however  in livermore  california  a parent sued the public library for not installing a filter after her 12-year-old son was caught viewing pornography there what ? s a library to do ? it has escaped many people that the world wide web is a worldwide web it covers the whole world not all countries agree on what should be allowed on the web for example  in november 2000  a french court ordered yahoo !  a california corporation  to block french users from viewing auctions of nazi memorabilia on yahoo ! ? s web site because owning such material violates french law yahoo ! appealed to a u.s court  which sided with it  but the issue of whose laws apply where is far from settled just imagine what would happen if some court in utah instructed france to block web sites dealing with wine because they do not comply with utah ? s much stricter laws about alcohol ? suppose that china demanded that all web sites dealing with democracy be banned as not in the interest of the state do iranian laws on religion apply to more liberal sweden ? can saudi arabia block web sites dealing with women ? s rights ? the whole issue is a veritable pandora ? s box a relevant comment from john gilmore is  ? ? the net interprets censorship as damage and routes around it ? ? for a concrete implementation  consider the eternity service  anderson  1996   its goal is to make sure published information can not be depublished or rewritten  as was common in the soviet union during josef stalin ? s reign to use the eternity service  the user specifies how long the material is to be preserved  pays a fee proportional to its duration and size  and uploads it thereafter  no one can remove or edit it  not even the uploader how could such a service be implemented ? the simplest model is to use a peer-to-peer system in which stored documents would be placed on dozens of participating servers  each of which gets a fraction of the fee  and thus an incentive to join the system the servers should be spread over many legal jurisdictions for maximum resilience lists of 10 randomly selected servers would be stored sec 8.10 social issues 865 securely in multiple places  so that if some were compromised  others would still exist an authority bent on destroying the document could never be sure it had found all copies the system could also be made self-repairing in the sense that if it became known that some copies had been destroyed  the remaining sites would attempt to find new repositories to replace them the eternity service was the first proposal for a censorship-resistant system since then  others have been proposed and  in some cases  implemented various new features have been added  such as encryption  anonymity  and fault tolerance often the files to be stored are broken up into multiple fragments  with each fragment stored on many servers some of these systems are freenet  clarke et al  2002   pasis  wylie et al  2000   and publius  waldman et al  2000   other work is reported by serjantov  2002   increasingly  many countries are trying to regulate the export of intangibles  which often include web sites  software  scientific papers  email  telephone helpdesks  and more even the u.k  which has a centuries-long tradition of freedom of speech  is now seriously considering highly restrictive laws  that would  for example  define technical discussions between a british professor and his foreign ph.d student  both located at the university of cambridge  as regulated export needing a government license  anderson  2002   needless to say  many people consider such a policy to be outrageous steganography in countries where censorship abounds  dissidents often try to use technology to evade it cryptography allows secret messages to be sent  although possibly not lawfully   but if the government thinks that alice is a bad person  the mere fact that she is communicating with bob may get him put in this category  too  as repressive governments understand the concept of transitive closure  even if they are short on mathematicians anonymous remailers can help  but if they are banned domestically and messages to foreign ones require a government export license  they can not help much but the web can people who want to communicate secretly often try to hide the fact that any communication at all is taking place the science of hiding messages is called steganography  from the greek words for ? ? covered writing ? ? in fact  the ancient greeks used it themselves herodotus wrote of a general who shaved the head of a messenger  tattooed a message on his scalp  and let the hair grow back before sending him off modern techniques are conceptually the same  only they have a higher bandwidth  lower latency  and do not require the services of a barber as a case in point  consider fig 8-54  a   this photograph  taken by one of the authors  ast  in kenya  contains three zebras contemplating an acacia tree fig 8-54  b  appears to be the same three zebras and acacia tree  but it has an extra added attraction it contains the complete  unabridged text of five of 866 network security chap 8 shakespeare ? s plays embedded in it  hamlet  king lear  macbeth  the merchant of venice  and julius caesar together  these plays total over 700 kb of text  a   b  figure 8-54  a  three zebras and a tree  b  three zebras  a tree  and the complete text of five plays by william shakespeare how does this steganographic channel work ? the original color image is 1024 ? ? 768 pixels each pixel consists of three 8-bit numbers  one each for the red  green  and blue intensity of that pixel the pixel ? s color is formed by the linear superposition of the three colors the steganographic encoding method uses the low-order bit of each rgb color value as a covert channel thus  each pixel has room for 3 bits of secret information  1 in the red value  1 in the green value  and 1 in the blue value with an image of this size  up to 1024 ? ? 768 ? ? 3 bits or 294,912 bytes of secret information can be stored in it the full text of the five plays and a short notice add up to 734,891 bytes this text was first compressed to about 274 kb using a standard compression algorithm the compressed output was then encrypted using idea and inserted into the low-order bits of each color value as can be seen  or actually  can not be seen   the existence of the information is completely invisible it is equally invisible in the large  full-color version of the photo the eye can not easily distinguish 21-bit color from 24-bit color viewing the two images in black and white with low resolution does not do justice to how powerful the technique is to get a better feel for how steganography works  we have prepared a demonstration  including the full-color highresolution image of fig 8-54  b  with the five plays embedded in it the demonstration  including tools for inserting and extracting text into images  can be found at the book ? s web site to use steganography for undetected communication  dissidents could create a web site bursting with politically correct pictures  such as photographs of the great leader  local sports  movie  and television stars  etc of course  the pictures would be riddled with steganographic messages if the messages were first sec 8.10 social issues 867 compressed and then encrypted  even someone who suspected their presence would have immense difficulty in distinguishing the messages from white noise of course  the images should be fresh scans ; copying a picture from the internet and changing some of the bits is a dead giveaway images are by no means the only carrier for steganographic messages audio files also work fine hidden information can be carried in a voice-over-ip call by manipulating the packet delays  distorting the audio  or even in the header fields of packets  lubacz et al  2010   even the layout and ordering of tags in an html file can carry information although we have examined steganography in the context of free speech  it has numerous other uses one common use is for the owners of images to encode secret messages in them stating their ownership rights if such an image is stolen and placed on a web site  the lawful owner can reveal the steganographic message in court to prove whose image it is this technique is called watermarking it is discussed in piva et al  2002   for more on steganography  see wayner  2008   8.10.3 copyright privacy and censorship are just two areas where technology meets public policy a third one is the copyright law copyright is granting to the creators of ip  intellectual property   including writers  poets  artists  composers  musicians  photographers  cinematographers  choreographers  and others  the exclusive right to exploit their ip for some period of time  typically the life of the author plus 50 years or 75 years in the case of corporate ownership after the copyright of a work expires  it passes into the public domain and anyone can use or sell it as they wish the gutenberg project  www.promo.net/pg   for example  has placed thousands of public-domain works  e.g  by shakespeare  twain  and dickens  on the web in 1998  the u.s congress extended copyright in the u.s by another 20 years at the request of hollywood  which claimed that without an extension nobody would create anything any more by way of contrast  patents last for only 20 years and people still invent things copyright came to the forefront when napster  a music-swapping service  had 50 million members although napster did not actually copy any music  the courts held that its holding a central database of who had which song was contributory infringement  that is  it was helping other people infringe while nobody seriously claims copyright is a bad idea  although many claim that the term is far too long  favoring big corporations over the public   the next generation of music sharing is already raising major ethical issues for example  consider a peer-to-peer network in which people share legal files  public-domain music  home videos  religious tracts that are not trade secrets  etc  and perhaps a few that are copyrighted assume that everyone is online all the time via adsl or cable each machine has an index of what is on the hard 868 network security chap 8 disk  plus a list of other members someone looking for a specific item can pick a random member and see if he has it if not  he can check out all the members in that person ? s list  and all the members in their lists  and so on computers are very good at this kind of work having found the item  the requester just copies it if the work is copyrighted  chances are the requester is infringing  although for international transfers  the question of whose law applies matters because in some countries uploading is illegal but downloading is not   but what about the supplier ? is it a crime to keep music you have paid for and legally downloaded on your hard disk where others might find it ? if you have an unlocked cabin in the country and an ip thief sneaks in carrying a notebook computer and scanner  scans a copyrighted book to the notebook ? s hard disk  and sneaks out  are you guilty of the crime of failing to protect someone else ? s copyright ? but there is more trouble brewing on the copyright front there is a huge battle going on now between hollywood and the computer industry the former wants stringent protection of all intellectual property but the latter does not want to be hollywood ? s policeman in october 1998  congress passed the dmca  digital millennium copyright act   which makes it a crime to circumvent any protection mechanism present in a copyrighted work or to tell others how to circumvent it similar legislation has been enacted in the european union while virtually no one thinks that pirates in the far east should be allowed to duplicate copyrighted works  many people think that the dmca completely shifts the balance between the copyright owner ? s interest and the public interest a case in point  in september 2000  a music industry consortium charged with building an unbreakable system for selling music online sponsored a contest inviting people to try to break the system  which is precisely the right thing to do with any new security system   a team of security researchers from several universities  led by prof edward felten of princeton  took up the challenge and broke the system they then wrote a paper about their findings and submitted it to a usenix security conference  where it underwent peer review and was accepted before the paper was to be presented  felten received a letter from the recording industry association of america that threatened to sue the authors under the dmca if they published the paper their response was to file a lawsuit asking a federal court to rule on whether publishing scientific papers on security research was still legal fearing a definitive court ruling against it  the industry withdrew its threat and the court dismissed felten ? s suit no doubt the industry was motivated by the weakness of its case  it had invited people to try to break its system and then threatened to sue some of them for accepting its own challenge with the threat withdrawn  the paper was published  craver et al  2001   a new confrontation is virtually certain meanwhile  pirated music and movies have fueled the massive growth of peer-to-peer networks this has not pleased the copyright holders  who have used the dmca to take action there are now automated systems that search peer-topeer networks and then fire off warnings to network operators and users who are sec 8.10 social issues 869 suspected of infringing copyright in the united states  these warnings are known as dmca takedown notices this search is an arms ? race because it is hard to reliably catch copyright infringers even your printer might be mistaken for a culprit  piatek et al  2008   a related issue is the extent of the fair use doctrine  which has been established by court rulings in various countries this doctrine says that purchasers of a copyrighted work have certain limited rights to copy the work  including the right to quote parts of it for scientific purposes  use it as teaching material in schools or colleges  and in some cases make backup copies for personal use in case the original medium fails the tests for what constitutes fair use include  1  whether the use is commercial   2  what percentage of the whole is being copied  and  3  the effect of the copying on sales of the work since the dmca and similar laws within the european union prohibit circumvention of copy protection schemes  these laws also prohibit legal fair use in effect  the dmca takes away historical rights from users to give content sellers more power a major showdown is inevitable another development in the works that dwarfs even the dmca in its shifting of the balance between copyright owners and users is trusted computing as advocated by industry bodies such as the tcg  trusted computing group   led by companies like intel and microsoft the idea is to provide support for carefully monitoring user behavior in various ways  e.g  playing pirated music  at a level below the operating system in order to prohibit unwanted behavior this is accomplished with a small chip  called a tpm  trusted platform module   which it is difficult to tamper with most pcs sold nowadays come equipped with a tpm the system allows software written by content owners to manipulate pcs in ways that users can not change this raises the question of who is trusted in trusted computing certainly  it is not the user needless to say  the social consequences of this scheme are immense it is nice that the industry is finally paying attention to security  but it is lamentable that the driver is enforcing copyright law rather than dealing with viruses  crackers  intruders  and other security issues that most people are concerned about in short  the lawmakers and lawyers will be busy balancing the economic interests of copyright owners with the public interest for years to come cyberspace is no different from meatspace  it constantly pits one group against another  resulting in power struggles  litigation  and  hopefully  eventually some kind of resolution  at least until some new disruptive technology comes along 8.11 summary cryptography is a tool that can be used to keep information confidential and to ensure its integrity and authenticity all modern cryptographic systems are based on kerckhoff ? s principle of having a publicly known algorithm and a secret 870 network security chap 8 key many cryptographic algorithms use complex transformations involving substitutions and permutations to transform the plaintext into the ciphertext however  if quantum cryptography can be made practical  the use of one-time pads may provide truly unbreakable cryptosystems cryptographic algorithms can be divided into symmetric-key algorithms and public-key algorithms symmetric-key algorithms mangle the bits in a series of rounds parameterized by the key to turn the plaintext into the ciphertext aes  rijndael  and triple des are the most popular symmetric-key algorithms at present these algorithms can be used in electronic code book mode  cipher block chaining mode  stream cipher mode  counter mode  and others public-key algorithms have the property that different keys are used for encryption and decryption and that the decryption key can not be derived from the encryption key these properties make it possible to publish the public key the main public-key algorithm is rsa  which derives its strength from the fact that it is very difficult to factor large numbers legal  commercial  and other documents need to be signed accordingly  various schemes have been devised for digital signatures  using both symmetric-key and public-key algorithms commonly  messages to be signed are hashed using algorithms such as sha-1  and then the hashes are signed rather than the original messages public-key management can be done using certificates  which are documents that bind a principal to a public key certificates are signed by a trusted authority or by someone  recursively  approved by a trusted authority the root of the chain has to be obtained in advance  but browsers generally have many root certificates built into them these cryptographic tools can be used to secure network traffic ipsec operates in the network layer  encrypting packet flows from host to host firewalls can screen traffic going into or out of an organization  often based on the protocol and port used virtual private networks can simulate an old leased-line network to provide certain desirable security properties finally  wireless networks need good security lest everyone read all the messages  and protocols like 802.11i provide it when two parties establish a session  they have to authenticate each other and  if need be  establish a shared session key various authentication protocols exist  including some that use a trusted third party  diffie-hellman  kerberos  and public-key cryptography email security can be achieved by a combination of the techniques we have studied in this chapter pgp  for example  compresses messages  then encrypts them with a secret key and sends the secret key encrypted with the receiver ? s public key in addition  it also hashes the message and sends the signed hash to verify message integrity web security is also an important topic  starting with secure naming dnssec provides a way to prevent dns spoofing most e-commerce web sites use sec 8.11 summary 871 ssl/tls to establish secure  authenticated sessions between the client and server various techniques are used to deal with mobile code  especially sandboxing and code signing the internet raises many issues in which technology interacts strongly with public policy some of the areas include privacy  freedom of speech  and copyright problems 1 break the following monoalphabetic substitution cipher the plaintext  consisting of letters only  is an excerpt from a poem by lewis carroll mvyy bek mnyx n yvjjyr snijrh invq n muvjvdt je n idnvy jurhri n fehfevir pyeir oruvdq ki ndq uri jhrnqvdt ed zb jnvy irr uem rntrhyb jur yeoijrhi ndq jur jkhjyri nyy nqlndpr jurb nhr mnvjvdt ed jur iuvdtyr mvyy bek pezr ndq wevd jur qndpr mvyy bek  medj bek  mvyy bek  medj bek  mvyy bek wevd jur qndpr mvyy bek  medj bek  mvyy bek  medj bek  medj bek wevd jur qndpr 2 an affine cipher is a version of a monoalphabetic substitution cipher  in which the letters of an alphabet of size m are first map to the integers in the range 0 to m-1 subsequently  the integer representing each plaintext letter is transformed to an integer representing the corresponding cipher text letter the encryption function for a single letter is e  x  =  ax + b  mod m  where m is the size of the alphabet and a and b are the key of the cipher  and are co-prime trudy finds out that bob generated a ciphertext using an affine cipher she gets a copy of the ciphertext  and finds out that the most frequent letter of the ciphertext is ? r ?  and the second most frequent letter of the ciphertext is ? k ?  show how trudy can break the code and retrieve the plaintext 3 break the following columnar transposition cipher the plaintext is taken from a popular computer textbook  so ? ? computer ? ? is a probable word the plaintext consists entirely of letters  no spaces   the ciphertext is broken up into blocks of five characters for readability aauan cvlre rurnn dltme aeepb ytust iceat npmey iicgo gorch srsoc nntii imiha oofpa gsivt tpsit lbolr otoex 4 alice used a transposition cipher to encrypt her messages to bob for added security  she encrypted the transposition cipher key using a substitution cipher  and kept the encrypted cipher in her computer trudy managed to get hold of the encrypted transposition cipher key can trudy decipher alice ? s messages to bob ? why or why not ? 5 find a 77-bit one-time pad that generates the text ? ? hello world ? ? from the ciphertext of fig 8-4 6 you are a spy  and  conveniently  have a library with an infinite number of books at your disposal your operator also has such a library at his disposal you have agreed 872 network security chap 8 to use lord of the rings as a one-time pad explain how you could use these assets to generate an infinitely long one-time pad 7 quantum cryptography requires having a photon gun that can  on demand  fire a single photon carrying 1 bit in this problem  calculate how many photons a bit carries on a 250-gbps fiber link assume that the length of a photon is equal to its wavelength  which for purposes of this problem  is 1 micron the speed of light in fiber is 20 cm/nsec 8 if trudy captures and regenerates photons when quantum cryptography is in use  she will get some of them wrong and cause errors to appear in bob ? s one-time pad what fraction of bob ? s one-time pad bits will be in error  on average ? 9 a fundamental cryptographic principle states that all messages must have redundancy but we also know that redundancy helps an intruder tell if a guessed key is correct consider two forms of redundancy first  the initial n bits of the plaintext contain a known pattern second  the final n bits of the message contain a hash over the message from a security point of view  are these two equivalent ? discuss your answer 10 in fig 8-6  the p-boxes and s-boxes alternate although this arrangement is esthetically pleasing  is it any more secure than first having all the p-boxes and then all the s-boxes ? discuss your answer 11 design an attack on des based on the knowledge that the plaintext consists exclusively of uppercase ascii letters  plus space  comma  period  semicolon  carriage return  and line feed nothing is known about the plaintext parity bits 12 in the text  we computed that a cipher-breaking machine with a million processors that could analyze a key in 1 nanosecond would take 1016 years to break the 128-bit version of aes let us compute how long it will take for this time to get down to 1 year  still along time  of course to achieve this goal  we need computers to be 1016 times faster if moore ? s law  computing power doubles every 18 months  continues to hold  how many years will it take before a parallel computer can get the cipherbreaking time down to a year ? 13 aes supports a 256-bit key how many keys does aes-256 have ? see if you can find some number in physics  chemistry  or astronomy of about the same size use the internet to help search for big numbers draw a conclusion from your research 14 suppose that a message has been encrypted using des in counter mode one bit of ciphertext in block ci is accidentally transformed from a 0 to a 1 during transmission how much plaintext will be garbled as a result ? 15 now consider ciphertext block chaining again instead of a single 0 bit being transformed into a 1 bit  an extra 0 bit is inserted into the ciphertext stream after block ci  how much plaintext will be garbled as a result ? 16 compare cipher block chaining with cipher feedback mode in terms of the number of encryption operations needed to transmit a large file which one is more efficient and by how much ? 17 using the rsa public key cryptosystem  with a ? ? 1  b ? ? 2    y ? ? 25  z ? ? 26  a  if p ? ? 5 and q ? ? 13  list five legal values for d chap 8 problems 873  b  if p ? ? 5  q ? ? 31  and d ? ? 37  find e  c  using p ? ? 3  q ? ? 11  and d ? ? 9  find e and encrypt ? ? hello ? ?  18 alice and bob use rsa public key encryption in order to communicate between them trudy finds out that alice and bob shared one of the primes used to determine the number n of their public key pairs in other words  trudy found out that na ? ? pa ? ? q and nb ? ? pb ? ? q how can trudy use this information to break alice ? s code ? 19 consider the use of counter mode  as shown in fig 8-15  but with iv ? ? 0 does the use of 0 threaten the security of the cipher in general ? 20 in fig 8-20  we see how alice can send bob a signed message if trudy replaces p  bob can detect it but what happens if trudy replaces both p and the signature ? 21 digital signatures have a potential weakness due to lazy users in e-commerce transactions  a contract might be drawn up and the user asked to sign its sha-1 hash if the user does not actually verify that the contract and hash correspond  the user may inadvertently sign a different contract suppose that the mafia try to exploit this weakness to make some money they set up a pay web site  e.g  pornography  gambling  etc  and ask new customers for a credit card number then they send over a contract saying that the customer wishes to use their service and pay by credit card and ask the customer to sign it  knowing that most of them will just sign without verifying that the contract and hash agree show how the mafia can buy diamonds from a legitimate internet jeweler and charge them to unsuspecting customers 22 a math class has 25 students assuming that all of the students were born in the first half of the year ? between january 1st and june 30th ? what is the probability that at least two students have the same birthday ? assume that nobody was born on leap day  so there are 181 possible birthdays 23 after ellen confessed to marilyn about tricking her in the matter of tom ? s tenure  marilyn resolved to avoid this problem by dictating the contents of future messages into a dictating machine and having her new secretary just type them in marilyn then planned to examine the messages on her terminal after they had been typed in to make sure they contained her exact words can the new secretary still use the birthday attack to falsify a message  and if so  how ? hint  she can 24 consider the failed attempt of alice to get bob ? s public key in fig 8-23 suppose that bob and alice already share a secret key  but alice still wants bob ? s public key is there now a way to get it securely ? if so  how ? 25 alice wants to communicate with bob  using public-key cryptography she establishes a connection to someone she hopes is bob she asks him for his public key and he sends it to her in plaintext along with an x.509 certificate signed by the root ca alice already has the public key of the root ca what steps does alice carry out to verify that she is talking to bob ? assume that bob does not care who he is talking to  e.g  bob is some kind of public service   26 suppose that a system uses pki based on a tree-structured hierarchy of cas alice wants to communicate with bob  and receives a certificate from bob signed by a ca x after establishing a communication channel with bob suppose alice has never heard of x what steps does alice take to verify that she is talking to bob ? 874 network security chap 8 27 can ipsec using ah be used in transport mode if one of the machines is behind a nat box ? explain your answer 28 alice wants to send a message to bob using sha-1 hashes she consults with you regarding the appropriate signature algorithm to be used what would you suggest ? 29 give one reason why a firewall might be configured to inspect incoming traffic give one reason why it might be configured to inspect outgoing traffic do you think the inspections are likely to be successful ? 30 suppose an organization uses vpn to securely connect its sites over the internet jim  a user in the organization  uses the vpn to communicate with his boss  mary describe one type of communication between jim and mary which would not require use of encryption or other security mechanism  and another type of communication which would require encryption or other security mechanisms explain your answer 31 change one message in the protocol of fig 8-34 in a minor way to make it resistant to the reflection attack explain why your change works 32 the diffie-hellman key exchange is being used to establish a secret key between alice and bob alice sends bob  227  5  82   bob responds with  125   alice ? s secret number  x  is 12  and bob ? s secret number  y  is 3 show how alice and bob compute the secret key 33 two users can establish a shared secret key using the diffie-hellman algorithm  even if they have never met  share no secrets  and have no certificates  a  explain how this algorithm is susceptible to a man-in-the-middle attack  b  how would this susceptibility change if n or g were secret ? 34 in the protocol of fig 8-39  why is a sent in plaintext along with the encrypted session key ? 35 in the needham-schroeder protocol  alice generates two challenges  ra and ra 2 this seems like overkill would one not have done the job ? 36 suppose an organization uses kerberos for authentication in terms of security and service availability  what is the effect if as or tgs goes down ? 37 alice is using the public-key authentication protocol of fig 8-43 to authenticate communication with bob however  when sending message 7  alice forgot to encrypt rb trudy now knows the value of rb do alice and bob need to repeat the authentication procedure with new parameters in order to ensure secure communication ? explain your answer 38 in the public-key authentication protocol of fig 8-43  in message 7  rb is encrypted with ks is this encryption necessary  or would it have been adequate to send it back in plaintext ? explain your answer 39 point-of-sale terminals that use magnetic-stripe cards and pin codes have a fatal flaw  a malicious merchant can modify his card reader to log all the information on the card and the pin code in order to post additional  fake  transactions in the future next generation terminals will use cards with a complete cpu  keyboard  and tiny display on the card devise a protocol for this system that malicious merchants can not break chap 8 problems 875 40 is it possible to multicast a pgp message ? what restrictions would apply ? 41 assuming that everyone on the internet used pgp  could a pgp message be sent to an arbitrary internet address and be decoded correctly by all concerned ? discuss your answer 42 the attack shown in fig 8-47 leaves out one step the step is not needed for the spoof to work  but including it might reduce potential suspicion after the fact what is the missing step ? 43 the ssl data transport protocol involves two nonces as well as a premaster key what value  if any  does using the nonces have ? 44 consider an image of 2048 ? ? 512 pixels you want to encrypt a file sized 2.5 mb what fraction of the file can you encrypt in this image ? what fraction would you be able to encrypt if you compressed the file to a quarter of its original size ? show your calculations 45 the image of fig 8-54  b  contains the ascii text of five plays by shakespeare would it be possible to hide music among the zebras instead of text ? if so  how would it work and how much could you hide in this picture ? if not  why not ? 46 you are given a text file of size 60 mb  which is to be encrypted using steganography in the low-order bits of each color in an image file what size image would be required in order to encrypt the entire file ? what size would be needed if the file were first compressed to a third of its original size ? give your answer in pixels  and show your calculations assume that the images have an aspect ratio of 3  2  for example  3000 ? ? 2000 pixels 47 alice was a heavy user of a type 1 anonymous remailer she would post many messages to her favorite newsgroup  alt.fanclub.alice  and everyone would know they all came from alice because they all bore the same pseudonym assuming that the remailer worked correctly  trudy could not impersonate alice after type 1 remailers were all shut down  alice switched to a cypherpunk remailer and started a new thread in her newsgroup devise a way for her to prevent trudy from posting new messages to the newsgroup  impersonating alice 48 search the internet for an interesting case involving privacy and write a one-page report on it 49 search the internet for some court case involving copyright versus fair use and write a 1-page report summarizing your findings 50 write a program that encrypts its input by xoring it with a keystream find or write as good a random number generator as you can to generate the keystream the program should act as a filter  taking plaintext on standard input and producing ciphertext on standard output  and vice versa   the program should take one parameter  the key that seeds the random number generator 51 write a procedure that computes the sha-1 hash of a block of data the procedure should have two parameters  a pointer to the input buffer and a pointer to a 20-byte output buffer to see the exact specification of sha-1  search the internet for fips 180-1  which is the full specification 876 network security chap 8 52 write a function that accepts a stream of ascii characters and encrypts this input using a substitution cipher with the cipher block chaining mode the block size should be 8 bytes the program should take plaintext from the standard input and print the ciphertext on the standard output for this problem  you are allowed to select any reasonable system to determine that the end of the input is reached  and/or when padding should be applied to complete the block you may select any output format  as long as it is unambiguous the program should receive two parameters  1 a pointer to the initializing vector ; and 2 a number  k  representing the substitution cipher shift  such that each ascii character would be encrypted by the kth character ahead of it in the alphabet for example  if x = 3  then a is encoded by d  b is encoded by e etc make reasonable assumptions with respect to reaching the last character in the ascii set make sure to document clearly in your code any assumptions you make about the input and encryption algorithm 53 the purpose of this problem is to give you a better understanding as to the mechanisms of rsa write a function that receives as its parameters primes p and q  calculates public and private rsa keys using these parameters  and outputs n  z  d and e as printouts to the standard output the function should also accept a stream of ascii characters and encrypt this input using the calculated rsa keys the program should take plaintext from the standard input and print the ciphertext to the standard output the encryption should be carried out character-wise  that is  take each character in the input and encrypt it independently of other characters in the input for this problem  you are allowed to select any reasonable system to determine that the end of the input is reached you may select any output format  as long as it is unambiguous make sure to document clearly in your code any assumptions you make about the input and encryption algorithm 9 reading list and bibliography we have now finished our study of computer networks  but this is only the beginning many interesting topics have not been treated in as much detail as they deserve  and others have been omitted altogether for lack of space in this chapter  we provide some suggestions for further reading and a bibliography  for the benefit of readers who wish to continue their study of computer networks 9.1 suggestions for further reading there is an extensive literature on all aspects of computer networks two journals that publish papers in this area are ieee/acm transactions on networking and ieee journal on selected areas in communications the periodicals of the acm special interest groups on data communications  sigcomm  and mobility of systems  users  data  and computing  sigmobile  publish many papers of interest  especially on emerging topics they are computer communication review and mobile computing and communications review ieee also publishes three magazines ? ieee internet computing  ieee network magazine  and ieee communications magazine ? that contain surveys  tutorials  and case studies on networking the first two emphasize architecture  standards  and software  and the last tends toward communications technology  fiber optics  satellites  and so on   877 878 reading list and bibliography chap 9 there are a number of annual or biannual conferences that attract numerous papers on networks in particular  look for the sigcomm conference  nsdi  symposium on networked systems design and implementation   mobisys  conference on mobile systems  applications  and services   sosp  symposium on operating systems principles  and osdi  symposium on operating systems design and implementation   below we list some suggestions for supplementary reading  keyed to the chapters of this book many of the suggestions are books of chapters in books  with some tutorials and surveys full references are in sec 9.2 9.1.1 introduction and general works comer  the internet book  4th ed anyone looking for an easygoing introduction to the internet should look here comer describes the history  growth  technology  protocols  and services of the internet in terms that novices can understand  but so much material is covered that the book is also of interest to more technical readers computer communication review  25th anniversary issue  jan 1995 for a firsthand look at how the internet developed  this special issue collects important papers up to 1995 included are papers that show the development of tcp  multicast  the dns  ethernet  and the overall architecture crovella and krishnamurthy  internet measurement how do we know how well the internet works anyway ? this question is not trivial to answer because no one is in charge of the internet this book describes the techniques that have been developed to measure the operation of the internet  from network infrastructure to applications ieee internet computing  jan ? feb 2000 the first issue of ieee internet computing in the new millennium did exactly what you would expect  it asked the people who helped create the internet in the previous millennium to speculate on where it is going in the next one the experts are paul baran  lawrence roberts  leonard kleinrock  stephen crocker  danny cohen  bob metcalfe  bill gates  bill joy  and others see how well their predictions have fared over a decade later kipnis  ? ? beating the system  abuses of the standards adoption process ? ? standards committees try to be fair and vendor neutral in their work  but unfortunately there are companies that try to abuse the system for example  it has happened repeatedly that a company helps develop a standard and then after it is approved  announces that the standard is based on a patent it owns and which it will license to companies that it likes and not to companies that it does not like  at sec 9.1 suggestions for further reading 879 prices that it alone determines for a look at the dark side of standardization  this article is an excellent start hafner and lyon  where wizards stay up late naughton  a brief history of the future who invented the internet  anyway ? many people have claimed credit and rightly so  since many people had a hand in it  in different ways there was paul baran  who wrote a report describing packet switching  there were the people at various universities who designed the arpanet architecture  there were the people at bbn who programmed the first imps  there were bob kahn and vint cerf who invented tcp/ip  and so on these books tell the story of the internet  at least up to 2000  replete with many anecdotes 9.1.2 the physical layer bellamy  digital telephony  3rd ed for a look back at that other important network  the telephone network  this authoritative book contains everything you ever wanted to know and more particularly interesting are the chapters on transmission and multiplexing  digital switching  fiber optics  mobile telephony  and dsl hu and li  ? ? satellite-based internet  a tutorial ? ? internet access via satellite is different from using terrestrial lines not only is there the issue of delay  but routing and switching are also different in this paper  the authors examine the issues related to using satellites for internet access joel  ? ? telecommunications and the ieee communications society ? ? for a compact but surprisingly comprehensive history of telecommunications  starting with the telegraph and ending with 802.11  this article is the place to look it also covers radio  telephones  analog and digital switching  submarine cables  digital transmission  television broadcasting  satellites  cable tv  optical communications  mobile phones  packet switching  the arpanet  and the internet palais  fiber optic communication  5th ed books on fiber optic technology tend to be aimed at the specialist  but this one is more accessible than most it covers waveguides  light sources  light detectors  couplers  modulation  noise  and many other topics su  the umts air interface in rf engineering this book provides a detailed overview of one of the main 3g cellular systems it is focused on the air interface  or wireless protocols that are used between mobiles and the network infrastructure 880 reading list and bibliography chap 9 want  rfid explained want ? s book is an easy-to-read primer on how the unusual technology of the rfid physical layer works it covers all aspects of rfid  including its potential applications some real-world examples of rfid deployments and the experience gained from them is also convered 9.1.3 the data link layer kasim  delivering carrier ethernet nowadays  ethernet is not only a local-area technology the new fashion is to use ethernet as a long-distance link for carrier-grade ethernet this book brings together essays to cover the topic in depth lin and costello  error control coding  2nd ed codes to detect and correct errors are central to reliable computer networks this popular textbook explains some of the most important codes  from simple linear hamming codes to more complex low-density parity check codes it tries to do so with the minimum algebra necessary  but that is still a lot stallings  data and computer communications  9th ed part two covers digital data transmission and a variety of links  including error detection  error control with retransmissions  and flow control 9.1.4 the medium access control sublayer andrews et al  fundamentals of wimax this comprehensive book gives a definitive treatment of wimax technology  from the idea of broadband wireless  to the wireless techniques using ofdm and multiple antennas  through the multi-access system its tutorial style gives about the most accessible treatment you will find for this heavy material gast  802.11 wireless networks  2nd ed for a readable introduction to the technology and protocols of 802.11  this is a good place to start it begins with the mac sublayer  then introduces material on the different physical layers and also security however  the second edition is not new enough to have much to say about 802.11n perlman  interconnections  2nd ed for an authoritative but entertaining treatment of bridges  routers  and routing in general  perlman ? s book is the place to look the author designed the algorithms used in the ieee 802 spanning tree bridge and she is one of the world ? s leading authorities on various aspects of networking sec 9.1 suggestions for further reading 881 9.1.5 the network layer comer  internetworking with tcp/ip  vol 1  5th ed comer has written the definitive work on the tcp/ip protocol suite  now in its fifth edition most of the first half deals with ip and related protocols in the network layer the other chapters deal primarily with the higher layers and are also worth reading grayson et al  ip design for mobile networks traditional telephone networks and the internet are on a collision course  with mobile phone networks being implemented with ip on the inside this book tells how to design a network using the ip protocols that supports mobile telephone service huitema  routing in the internet  2nd ed if you want to gain a deep understanding of routing protocols  this is a very good book both pronounceable algorithms  e.g  rip  and cidr  and unpronounceable algorithms  e.g  ospf  igrp  and bgp  are treated in great detail newer developments are not covered since this is an older book  but what is covered is explained very well koodli and perkins  mobile inter-networking with ipv6 two important network layer developments are presented in one volume  ipv6 and mobile ip both topics are covered well  and perkins was one of the driving forces behind mobile ip nucci and papagiannaki  design  measurement and management of large-scale ip networks we talked a great deal about how networks work  but not how you would design  deploy and manage one if you were an isp this book fills that gap  looking at modern methods for traffic engineering and how isps provide services using networks perlman  interconnections  2nd ed in chaps 12 through 15  perlman describes many of the issues involved in unicast and multicast routing algorithm design  both for wide area networks and networks of lans but by far  the best part of the book is chap 18  in which the author distills her many years of experience with network protocols into an informative and fun chapter it is required reading for protocol designers stevens  tcp/ip illustrated  vol 1 chapters 3 ? 10 provide a comprehensive treatment of ip and related protocols  arp  rarp  and icmp   illustrated by examples 882 reading list and bibliography chap 9 varghese  network algorithmics we have spent much time talking about how routers and other network elements interact with each other this book is different  it is about how routers are actually designed to forward packets at prodigious speeds for the inside scoop on that and related questions  this is the book to read the author is an authority on clever algorithms that are used in practice to implement high-speed network elements in software and hardware 9.1.6 the transport layer comer  internetworking with tcp/ip  vol 1  5th ed as mentioned above  comer has written the definitive work on the tcp/ip protocol suite the second half of the book is about udp and tcp farrell and cahill  delay and disruption-tolerant networking this short book is the one to read for a deeper look at the architecture  protocols  and applications of ? ? challenged networks ? ? that must operate under harsh conditions of connectivity the authors have participated in the development of dtns in the ietf dtn research group stevens  tcp/ip illustrated  vol 1 chapters 17 ? 24 provide a comprehensive treatment of tcp illustrated by examples 9.1.7 the application layer berners-lee et al  ? ? the world wide web ? ? take a trip back in time for a perspective on the web and where it is going by the person who invented it and some of his colleagues at cern the article focuses on the web architecture  urls  http  and html  as well as future directions  and compares it to other distributed information systems held  a practical guide to content delivery networks  2nd ed this book gives a down-to-earth exposition of how cdns work  emphasizing the practical considerations in designing and operating a cdn that performs well hunter et al  beginning xml  4th ed there are many  many books on html  xml and web services this 1000 page book covers most of what you are likely to want to know it explains not only how to write xml and xhtml  but also how to develop web services that produce and manipulate xml using ajax  soap  and other techniques that are commonly used in practice sec 9.1 suggestions for further reading 883 krishnamurthy and rexford  web protocols and practice it would be hard to find a more comprehensive book about all aspects of the web than this one it covers clients  servers  proxies  and caching  as you might expect but there are also chapters on web traffic and measurements as well as chapters on current research and improving the web simpson  video over ip  2nd ed the author takes a broad look at how ip technology can be used to move video across networks  both on the internet and in private networks designed to carry video interestingly  this book is oriented for the video professional learning about networking  rather than the other way around wittenburg  understanding voice over ip technology this book covers how voice over ip works  from carrying audio data with the ip protocols and quality-of-service issues  through to the sip and h.323 suite of protocols it is necessarily detailed given the material  but accessible and broken up into digestible units 9.1.8 network security anderson  security engineering  2nd ed this book presents a wonderful mix of security techniques couched in an understanding of how people use  and misuse  them it is more technical than secrets and lies  but less technical than network security  see below   after an introduction to the basic security techniques  entire chapters are devoted to various applications  including banking  nuclear command and control  security printing  biometrics  physical security  electronic warfare  telecom security  e-commerce  and copyright protection ferguson et al  cryptography engineering many books tell you how the popular cryptographic algorithms work this book tells you how to use cryptography ? why cryptographic protocols are designed the way they are and how to put them together into a system that will meet your security goals it is a fairly compact book that is essential reading for anyone designing systems that depend on cryptography fridrich  steganography in digital media steganography goes back to ancient greece  where the wax was melted off blank tablets so secret messages could be applied to the underlying wood before the wax was reapplied nowadays  videos  audio  and other content on the internet provide different carriers for secret messages various modern techniques for hiding and finding information in images are discussed here 884 reading list and bibliography chap 9 kaufman et al  network security  2nd ed this authoritative and witty book is the first place to look for more technical information on network security algorithms and protocols secret and public key algorithms and protocols  message hashes  authentication  kerberos  pki  ipsec  ssl/tls  and email security are all explained carefully and at considerable length  with many examples chapter 26  on security folklore  is a real gem in security  the devil is in the details anyone planning to design a security system that will actually be used will learn a lot from the real-world advice in this chapter schneier  secrets and lies if you read cryptography engineering from cover to cover  you will know everything there is to know about cryptographic algorithms if you then read secrets and lies cover to cover  which can be done in a lot less time   you will learn that cryptographic algorithms are not the whole story most security weaknesses are not due to faulty algorithms or even keys that are too short  but to flaws in the security environment for a nontechnical and fascinating discussion of computer security in the broadest sense  this book is a very good read skoudis and liston  counter hack reloaded  2nd ed the best way to stop a hacker is to think like a hacker this book shows how hackers see a network  and argues that security should be a function of the entire network ? s design  not an afterthought based on one specific technology it covers almost all common attacks  including the ? ? social engineering ? ? types that take advantage of users who are not always familiar with computer security measures 9.2 alphabetical bibliography abramson  n  ? ? internet access using vsats  ? ? ieee commun magazine  vol 38  pp 60 ? 68  july 2000 ahmadi  s  ? ? an overview of next-generation mobile wimax technology  ? ? ieee commun magazine  vol 47  pp 84 ? 88  june 2009 allman  m  and paxson  v  ? ? on estimating end-to-end network path properties  ? ? proc sigcomm ? 99 conf  acm  pp 263 ? 274  1999 anderson  c  the long tail  why the future of business is selling less of more  rev upd ed  new york  hyperion  2008a anderson  r.j  security engineering  a guide to building dependable distributed systems  2nd ed  new york  john wiley & sons  2008b anderson  r.j  ? ? free speech online and offline  ? ? ieee computer  vol 25  pp 28 ? 30  june 2002 sec 9.2 alphabetical bibliography 885 anderson  r.j  ? ? the eternity service  ? ? proc pragocrypt conf  ctu publishing house  pp 242 ? 252  1996 andrews  j  ghosh  a  and muhamed  r  fundamentals of wimax  understanding broadband wireless networking  upper saddle river  nj  pearson education  2007 astely  d  dahlman  e  furuskar  a  jading  y  lindstrom  m  and parkvall  s  ? ? lte  the evolution of mobile broadband  ? ? ieee commun magazine  vol 47  pp 44 ? 51  apr 2009 ballardie  t  francis  p  and crowcroft  j  ? ? core based trees  cbt   ? ? proc sigcomm ? 93 conf  acm  pp 85 ? 95  1993 baran  p  ? ? on distributed communications  i introduction to distributed communication networks  ? ? memorandum rm-420-pr  rand corporation  aug 1964 bellamy  j  digital telephony  3rd ed  new york  john wiley & sons  2000 bellman  r.e  dynamic programming  princeton  nj  princeton university press  1957 bellovin  s  ? ? the security flag in the ipv4 header  ? ? rfc 3514  apr 2003 belsnes  d  ? ? flow control in the packet switching networks  ? ? communications networks  uxbridge  england  online  pp 349 ? 361  1975 bennet  c.h  and brassard  g  ? ? quantum cryptography  public key distribution and coin tossing  ? ? int ? l conf on computer systems and signal processing  pp 175 ? 179  1984 beresford  a  and stajano  f  ? ? location privacy in pervasive computing  ? ? ieee pervasive computing  vol 2  pp 46 ? 55  jan 2003 berghel  h.l  ? ? cyber privacy in the new millennium  ? ? ieee computer  vol 34  pp 132 ? 134  jan 2001 berners-lee  t  cailliau  a  loutonen  a  nielsen  h.f  and secret  a  ? ? the world wide web  ? ? commun of the acm  vol 37  pp 76 ? 82  aug 1994 bertsekas  d  and gallager  r  data networks  2nd ed  englewood cliffs  nj  prentice hall  1992 bhatti  s.n  and crowcroft  j  ? ? qos sensitive flows  issues in ip packet handling  ? ? ieee internet computing  vol 4  pp 48 ? 57  july ? aug 2000 biham  e  and shamir  a  ? ? differential fault analysis of secret key cryptosystems  ? ? proc 17th ann int ? l cryptology conf  berlin  springer-verlag lncs 1294  pp 513 ? 525  1997 bird  r  gopal  i  herzberg  a  janson  p.a  kutten  s  molva  r  and yung  m  ? ? systematic design of a family of attack-resistant authentication protocols  ? ? ieee j on selected areas in commun  vol 11  pp 679 ? 693  june 1993 birrell  a.d  and nelson  b.j  ? ? implementing remote procedure calls  ? ? acm trans on computer systems  vol 2  pp 39 ? 59  feb 1984 886 reading list and bibliography chap 9 biryukov  a  shamir  a  and wagner  d  ? ? real time cryptanalysis of a5/1 on a pc  ? ? proc seventh int ? l workshop on fast software encryption  berlin  springer verlag lncs 1978  pp 1 ? 8  2000 blaze  m  and bellovin  s  ? ? tapping on my network door  ? ? commun of the acm  vol 43  p 136  oct 2000 boggs  d  mogul  j  and kent  c  ? ? measured capacity of an ethernet  myths and reality  ? ? proc sigcomm ? 88 conf  acm  pp 222 ? 234  1988 borisov  n  goldberg  i  and wagner  d  ? ? intercepting mobile communications  the insecurity of 802.11  ? ? seventh int ? l conf on mobile computing and networking  acm  pp 180 ? 188  2001 braden  r  ? ? requirements for internet hosts ? communication layers  ? ? rfc 1122  oct 1989 braden  r  borman  d  and partridge  c  ? ? computing the internet checksum  ? ? rfc 1071  sept 1988 brandenburg  k  ? ? mp3 and aac explained  ? ? proc 17th intl conf  high-quality audio coding  audio engineering society  pp 99 ? 110  aug 1999 bray  t  paoli  j  sperberg-mcqueen  c  maler  e  yergeau  f  and cowan  j  ? ? extensible markup language  xml  1.1  second edition   ? ? w3c recommendation  sept 2006 breslau  l  cao  p  fan  l  phillips  g  and shenker  s  ? ? web caching and zipf-like distributions  evidence and implications  ? ? proc infocom conf  ieee  pp 126 ? 134  1999 burleigh  s  hooke  a  torgerson  l  fall  k  cerf  v  durst  b  scott  k  and weiss  h  ? ? delay-tolerant networking  an approach to interplanetary internet  ? ? ieee commun magazine  vol 41  pp 128 ? 136  june 2003 burnett  s  and paine  s  rsa security ? s official guide to cryptography  berkeley  ca  osborne/mcgraw-hill  2001 bush  v  ? ? as we may think  ? ? atlantic monthly  vol 176  pp 101 ? 108  july 1945 capetanakis  j.i  ? ? tree algorithms for packet broadcast channels  ? ? ieee trans on information theory  vol it ? 5  pp 505 ? 515  sept 1979 castagnoli  g  brauer  s  and herrmann  m  ? ? optimization of cyclic redundancy check codes with 24 and 32 parity bits  ? ? ieee trans on commun  vol 41  pp 883 ? 892  june 1993 cerf  v  and kahn  r  ? ? a protocol for packet network interconnection  ? ? ieee trans on commun  vol com ? 2  pp 637 ? 648  may 1974 chang  f  dean  j  ghemawat  s  hsieh  w  wallach  d  burrows  m  chandra  t  fikes  a  and gruber  r  ? ? bigtable  a distributed storage system for structured data  ? ? proc osdi 2006 symp  usenix  pp 15 ? 29  2006 chase  j.s  gallatin  a.j  and yocum  k.g  ? ? end system optimizations for high speed tcp  ? ? ieee commun magazine  vol 39  pp 68 ? 75  apr 2001 sec 9.2 alphabetical bibliography 887 chen  s  and nahrstedt  k  ? ? an overview of qos routing for next-generation networks  ? ? ieee network magazine  vol 12  pp 64 ? 69  nov./dec 1998 chiu  d  and jain  r  ? ? analysis of the increase and decrease algorithms for congestion avoidance in computer networks  ? ? comput netw isdn syst  vol 17  pp 1 ? 4  june 1989 cisco  ? ? cisco visual networking index  forecast and methodology  2009 ? 2014  ? ? cisco systems inc  june 2010 clark  d.d  ? ? the design philosophy of the darpa internet protocols  ? ? proc sigcomm ? 88 conf  acm  pp 106 ? 114  1988 clark  d.d  ? ? window and acknowledgement strategy in tcp  ? ? rfc 813  july 1982 clark  d.d  jacobson  v  romkey  j  and salwen  h  ? ? an analysis of tcp processing overhead  ? ? ieee commun magazine  vol 27  pp 23 ? 29  june 1989 clark  d.d  shenker  s  and zhang  l  ? ? supporting real-time applications in an integrated services packet network  ? ? proc sigcomm ? 92 conf  acm  pp 14 ? 26  1992 clarke  a.c  ? ? extra-terrestrial relays  ? ? wireless world  1945 clarke  i  miller  s.g  hong  t.w  sandberg  o  and wiley  b  ? ? protecting free expression online with freenet  ? ? ieee internet computing  vol 6  pp 40 ? 49  jan ? feb 2002 cohen  b  ? ? incentives build robustness in bittorrent  ? ? proc first workshop on economics of peer-to-peer systems  june 2003 comer  d.e  the internet book  4th ed  englewood cliffs  nj  prentice hall  2007 comer  d.e  internetworking with tcp/ip  vol 1  5th ed  englewood cliffs  nj  prentice hall  2005 craver  s.a  wu  m  liu  b  stubblefield  a  swartzlander  b  wallach  d.w  dean  d  and felten  e.w  ? ? reading between the lines  lessons from the sdmi challenge  ? ? proc 10th usenix security symp  usenix  2001 crovella  m  and krishnamurthy  b  internet measurement  new york  john wiley & sons  2006 daemen  j  and rijmen  v  the design of rijndael  berlin  springer-verlag  2002 dalal  y  and metclfe  r  ? ? reverse path forwarding of broadcast packets  ? ? commun of the acm  vol 21  pp 1040 ? 1048  dec 1978 davie  b  and farrel  a  mpls  next steps  san francisco  morgan kaufmann  2008 davie  b  and rekhter  y  mpls technology and applications  san francisco  morgan kaufmann  2000 davies  j  understanding ipv6  2nd ed  redmond  wa  microsoft press  2008 day  j.d  ? ? the  un  revised osi reference model  ? ? computer commun rev  vol 25  pp 39 ? 55  oct 1995 888 reading list and bibliography chap 9 day  j.d  and zimmermann  h  ? ? the osi reference model  ? ? proc of the ieee  vol 71  pp 1334 ? 1340  dec 1983 decandia  g  hastorin  d  jampani  m  kakulapati  g  lakshman  a  pilchin  a  sivasubramanian  s  vosshall  p  and vogels  w  ? ? dynamo  amazon ? s highly available key-value store  ? ? proc 19th symp on operating systems prin  acm  pp 205 ? 220  dec 2007 deering  s.e  ? ? sip  simple internet protocol  ? ? ieee network magazine  vol 7  pp 16 ? 28  may/june 1993 deering  s  and cheriton  d  ? ? multicast routing in datagram networks and extended lans  ? ? acm trans on computer systems  vol 8  pp 85 ? 110  may 1990 demers  a  keshav  s  and shenker  s  ? ? analysis and simulation of a fair queueing algorithm  ? ? internetwork  research and experience  vol 1  pp 3 ? 26  sept 1990 denning  d.e  and sacco  g.m  ? ? timestamps in key distribution protocols  ? ? commun of the acm  vol 24  pp 533 ? 536  aug 1981 devarapalli  v  wakikawa  r  petrescu  a  and thubert  p  ? ? network mobility  nemo  basic support protocol  ? ? rfc 3963  jan 2005 diffie  w  and hellman  m.e  ? ? exhaustive cryptanalysis of the nbs data encryption standard  ? ? ieee computer  vol 10  pp 74 ? 84  june 1977 diffie  w  and hellman  m.e  ? ? new directions in cryptography  ? ? ieee trans on information theory  vol it ? 2  pp 644 ? 654  nov 1976 dijkstra  e.w  ? ? a note on two problems in connexion with graphs  ? ? numer math  vol 1  pp 269 ? 271  oct 1959 dilley  j  maggs  b  parikh  j  prokop  h  sitaraman  r  and wheil  b  ? ? globally distributed content delivery  ? ? ieee internet computing  vol 6  pp 50 ? 58  2002 dingledine  r  mathewson  n  syverson  p  ? ? tor  the second-generation onion router  ? ? proc 13th usenix security symp  usenix  pp 303 ? 320  aug 2004 donahoo  m  and calvert  k  tcp/ip sockets in c  2nd ed  san francisco  morgan kaufmann  2009 donahoo  m  and calvert  k  tcp/ip sockets in java  2nd ed  san francisco  morgan kaufmann  2008 donaldson  g  and jones  d  ? ? cable television broadband network architectures  ? ? ieee commun magazine  vol 39  pp 122 ? 126  june 2001 dorfman  r  ? ? detection of defective members of a large population  ? ? annals math statistics  vol 14  pp 436 ? 440  1943 dutcher  b  the nat handbook  new york  john wiley & sons  2001 dutta-roy  a  ? ? an overview of cable modem technology and market perspectives  ? ? ieee commun magazine  vol 39  pp 81 ? 88  june 2001 sec 9.2 alphabetical bibliography 889 edelman  b  ostrovsky  m  and schwarz  m  ? ? internet advertising and the generalized second-price auction  selling billions of dollars worth of keywords  ? ? american economic review  vol 97  pp 242 ? 259  mar 2007 el gamal  t  ? ? a public-key cryptosystem and a signature scheme based on discrete logarithms  ? ? ieee trans on information theory  vol it ? 1  pp 469 ? 472  july 1985 epcglobal  epc radio-frequency identity protocols class ? generation ? uhf rfid protocol for communication at 860-mhz to 960-mhz version 1.2.0  brussels  epcglobal inc  oct 2008 fall  k  ? ? a delay-tolerant network architecture for challenged internets  ? ? proc sigcomm 2003 conf  acm  pp 27 ? 34  aug 2003 faloutsos  m  faloutsos  p  and faloutsos  c  ? ? on power-law relationships of the internet topology  ? ? proc sigcomm ? 99 conf  acm  pp 251 ? 262  1999 farrell  s  and cahill  v  delay and disruption-tolerant networking  london  artech house  2007 fellows  d  and jones  d  ? ? docsis cable modem technology  ? ? ieee commun magazine  vol 39  pp 202 ? 209  mar 2001 fenner  b  handley  m  holbrook  h  and kouvelas  i  ? ? protocol independent multicast-sparse mode  pim-sm   ? ? rfc 4601  aug 2006 ferguson  n  schneier  b  and kohno  t  cryptography engineering  design principles and practical applications  new york  john wiley & sons  2010 flanagan  d  javascript  the definitive guide  6th ed  sebastopol  ca  o ? reilly  2010 fletcher  j  ? ? an arithmetic checksum for serial transmissions  ? ? ieee trans on commun  vol com ? 0  pp 247 ? 252  jan 1982 floyd  s  handley  m  padhye  j  and widmer  j  ? ? equation-based congestion control for unicast applications  ? ? proc sigcomm 2000 conf  acm  pp 43 ? 56  aug 2000 floyd  s  and jacobson  v  ? ? random early detection for congestion avoidance  ? ? ieee/acm trans on networking  vol 1  pp 397 ? 413  aug 1993 fluhrer  s  mantin  i  and shamir  a  ? ? weakness in the key scheduling algorithm of rc4  ? ? proc eighth ann workshop on selected areas in cryptography  berlin  springer-verlag lncs 2259  pp 1 ? 24  2001 ford  b  ? ? structured streams  a new transport abstraction  ? ? proc sigcomm 2007 conf  acm  pp 361 ? 372  2007 ford  l.r  jr  and fulkerson  d.r  flows in networks  princeton  nj  princeton university press  1962 ford  w  and baum  m.s  secure electronic commerce  upper saddle river  nj  prentice hall  2000 forney  g.d  ? ? the viterbi algorithm  ? ? proc of the ieee  vol 61  pp 268 ? 278  mar 1973 890 reading list and bibliography chap 9 fouli  k  and maler  m  ? ? the road to carrier-grade ethernet  ? ? ieee commun magazine  vol 47  pp s30 ? s38  mar 2009 fox  a  gribble  s  brewer  e  and amir  e  ? ? adapting to network and client variability via on-demand dynamic distillation  ? ? sigops oper syst rev  vol 30  pp 160 ? 170  dec 1996 francis  p  ? ? a near-term architecture for deploying pip  ? ? ieee network magazine  vol 7  pp 30 ? 37  may/june 1993 fraser  a.g  ? ? towards a universal data transport system  ? ? ieee j on selected areas in commun  vol 5  pp 803 ? 816  nov 1983 fridrich  j  steganography in digital media  principles  algorithms  and applications  cambridge  cambridge university press  2009 fuller  v  and li  t  ? ? classless inter-domain routing  cidr   the internet address assignment and aggregation plan  ? ? rfc 4632  aug 2006 gallagher  r.g  ? ? a minimum delay routing algorithm using distributed computation  ? ? ieee trans on commun  vol com ? 5  pp 73 ? 85  jan 1977 gallagher  r.g  ? ? low-density parity check codes  ? ? ire trans on information theory  vol 8  pp 21 ? 28  jan 1962 garfinkel  s  with spafford  g  web security  privacy  and commerce  sebastopol  ca  o ? reilly  2002 gast  m  802.11 wireless networks  the definitive guide  2nd ed  sebastopol  ca  o ? reilly  2005 gershenfeld  n  and krikorian  r  and cohen  d  ? ? the internet of things  ? ? scientific american  vol 291  pp 76 ? 81  oct 2004 gilder  g  ? ? metcalfe ? s law and legacy  ? ? forbes asap  sepy 13  1993 goode  b  ? ? voice over internet protocol  ? ? proc of the ieee  vol 90  pp 1495 ? 1517  sept 2002 goralski  w.j  sonet  2nd ed  new york  mcgraw-hill  2002 grayson  m  shatzkamer  k  and wainner  s  ip design for mobile networks  indianapolis  in  cisco press  2009 grobe  k  and elbers  j  ? ? pon in adolescence  from tdma to wdm-pon  ? ? ieee commun magazine  vol 46  pp 26 ? 34  jan 2008 gross  g  kaycee  m  lin  a  malis  a  and stephens  j  ? ? the ppp over aal5  ? ? rfc 2364  july 1998 ha  s  rhee  i  and lisong  x  ? ? cubic  a new tcp-friendly high-speed tcp variant  ? ? sigops oper syst rev  vol 42  pp 64 ? 74  june 2008 hafner  k  and lyon  m  where wizards stay up late  new york  simon & schuster  1998 halperin  d  heydt-benjamin  t  ransford  b  clark  s  defend  b  morgan  w  fu  k  kohno  t  and maisel  w  ? ? pacemakers and implantable cardisec 9.2 alphabetical bibliography 891 ac defibrillators  software radio attacks and zero-power defenses  ? ? ieee symp on security and privacy  pp 129 ? 142  may 2008 halperin  d  hu  w  sheth  a  and wetherall  d  ? ? 802.11 with multiple antennas for dummies  ? ? computer commun rev  vol 40  pp 19 ? 25  jan 2010 hamming  r.w  ? ? error detecting and error correcting codes  ? ? bell system tech j  vol 29  pp 147 ? 160  apr 1950 harte  l  kellogg  s  dreher  r  and schaffnit  t  the comprehensive guide to wireless technology  fuquay-varina  nc  apdg publishing  2000 hawley  g.t  ? ? historical perspectives on the u.s telephone loop  ? ? ieee commun magazine  vol 29  pp 24 ? 28  mar 1991 hecht  j  understanding fiber optics  upper saddle river  nj  prentice hall  2005 held  g  a practical guide to content delivery networks  2nd ed  boca raton  fl  crc press  2010 heusse  m  rousseau  f  berger-sabbatel  g  duda  a  ? ? performance anomaly of 802.11b  ? ? proc infocom conf  ieee  pp 836 ? 843  2003 hiertz  g  denteneer  d  stibor  l  zang  y  costa  x  and walke  b  ? ? the ieee 802.11 universe  ? ? ieee commun magazine  vol 48  pp 62 ? 70  jan 2010 hoe  j  ? ? improving the start-up behavior of a congestion control scheme for tcp  ? ? proc sigcomm ? 96 conf  acm  pp 270 ? 280  1996 hu  y  and li  v.o.k  ? ? satellite-based internet  a tutorial  ? ? ieee commun magazine  vol 30  pp 154 ? 162  mar 2001 huitema  c  routing in the internet  2nd ed  englewood cliffs  nj  prentice hall  1999 hull  b  bychkovsky  v  chen  k  goraczko  m  miu  a  shih  e  zhang  y  balakrishnan  h  and madden  s  ? ? cartel  a distributed mobile sensor computing system  ? ? proc sensys 2006 conf  acm  pp 125 ? 138  nov 2006 hunter  d  rafter  j  fawcett  j  van der list  e  ayers  d  duckett  j  watt  a  and mckinnon  l  beginning xml  4th ed  new jersey  wrox  2007 irmer  t  ? ? shaping future telecommunications  the challenge of global standardization  ? ? ieee commun magazine  vol 32  pp 20 ? 28  jan 1994 itu  international telecommunication union   itu internet reports 2005  the internet of things  geneva  itu  nov 2005 itu  international telecommunication union   measuring the information society  the ict development index  geneva  itu  mar 2009 jacobson  v  ? ? compressing tcp/ip headers for low-speed serial links  ? ? rfc 1144  feb 1990 jacobson  v  ? ? congestion avoidance and control  ? ? proc sigcomm ? 88 conf  acm  pp 314 ? 329  1988 892 reading list and bibliography chap 9 jain  r  and routhier  s  ? ? packet trains ? measurements and a new model for computer network traffic  ? ? ieee j on selected areas in commun  vol 6  pp 986 ? 995  sept 1986 jakobsson  m  and wetzel  s  ? ? security weaknesses in bluetooth  ? ? topics in cryptology  ct-rsa 2001  berlin  springer-verlag lncs 2020  pp 176 ? 191  2001 joel  a  ? ? telecommunications and the ieee communications society  ? ? ieee commun magazine  50th anniversary issue  pp 6 ? 14 and 162 ? 167  may 2002 johnson  d  perkins  c  and arkko  j  ? ? mobility support in ipv6  ? ? rfc 3775  june 2004 johnson  d.b  maltz  d  and broch  j  ? ? dsr  the dynamic source routing protocol for multi-hop wireless ad hoc networks  ? ? ad hoc networking  boston  addison-wesley  pp 139 ? 172  2001 juang  p  oki  h  wang  y  martonosi  m  peh  l  and rubenstein  d  ? ? energy efficient computing for wildlife tracking  design tradeoffs and early experiences with zebranet  ? ? sigops oper syst rev  vol 36  pp 96 ? 107  oct 2002 kahn  d  the codebreakers  2nd ed  new york  macmillan  1995 kamoun  f  and kleinrock  l  ? ? stochastic performance evaluation of hierarchical routing for large networks  ? ? computer networks  vol 3  pp 337 ? 353  nov 1979 karn  p  ? ? maca ? a new channel access protocol for packet radio  ? ? arrl/crrl amateur radio ninth computer networking conf  pp 134 ? 140  1990 karn  p  and partridge  c  ? ? improving round-trip estimates in reliable transport protocols  ? ? proc sigcomm ? 87 conf  acm  pp 2 ? 7  1987 karp  b  and kung  h.t  ? ? gpsr  greedy perimeter stateless routing for wireless networks  ? ? proc mobicom 2000 conf  acm  pp 243 ? 254  2000 kasim  a  delivering carrier ethernet  new york  mcgraw-hill  2007 katabi  d  handley  m  and rohrs  c  ? ? internet congestion control for future high bandwidth-delay product environments  ? ? proc sigcomm 2002 conf  acm  pp 89 ? 102  2002 katz  d  and ford  p.s  ? ? tuba  replacing ip with clnp  ? ? ieee network magazine  vol 7  pp 38 ? 47  may/june 1993 kaufman  c  perlman  r  and speciner  m  network security  2nd ed  englewood cliffs  nj  prentice hall  2002 kent  c  and mogul  j  ? ? fragmentation considered harmful  ? ? proc sigcomm ? 87 conf  acm  pp 390 ? 401  1987 kerckhoff  a  ? ? la cryptographie militaire  ? ? j des sciences militaires  vol 9  pp 5 ? 38  jan 1883 and pp 161 ? 191  feb 1883 khanna  a  and zinky  j  ? ? the revised arpanet routing metric  ? ? proc sigcomm ? 89 conf  acm  pp 45 ? 56  1989 kipnis  j  ? ? beating the system  abuses of the standards adoption process  ? ? ieee commun magazine  vol 38  pp 102 ? 105  july 2000 sec 9.2 alphabetical bibliography 893 kleinrock  l  ? ? power and other deterministic rules of thumb for probabilistic problems in computer communications  ? ? proc intl conf on commun  pp 43.1.1 ? 43.1.10  june 1979 kleinrock  l  and tobagi  f  ? ? random access techniques for data transmission over packet-switched radio channels  ? ? proc nat computer conf  pp 187 ? 201  1975 kohler  e  handley  h  and floyd  s  ? ? designing dccp  congestion control without reliability  ? ? proc sigcomm 2006 conf  acm  pp 27 ? 38  2006 koodli  r  and perkins  c.e  mobile inter-networking with ipv6  new york  john wiley & sons  2007 koopman  p  ? ? 32-bit cyclic redundancy codes for internet applications  ? ? proc intl conf on dependable systems and networks  ieee  pp 459 ? 472  2002 krishnamurthy  b  and rexford  j  web protocols and practice  boston  addison-wesley  2001 kumar  s  paar  c  pelzl  j  pfeiffer  g  and schimmler  m  ? ? breaking ciphers with copacobana  a cost-optimized parallel code breaker  ? ? proc 8th cryptographic hardware and embedded systems wksp  iacr  pp 101 ? 118  oct 2006 labovitz  c  ahuja  a  bose  a  and jahanian  f  ? ? delayed internet routing convergence  ? ? ieee/acm trans on networking  vol 9  pp 293 ? 306  june 2001 lam  c.k.m  and tan  b.c.y  ? ? the internet is changing the music industry  ? ? commun of the acm  vol 44  pp 62 ? 66  aug 2001 laoutaris  n  smaragdakis  g  rodriguez  p  and sundaram  r  ? ? delay tolerant bulk data transfers on the internet  ? ? proc sigmetrics 2009 conf  acm  pp 229 ? 238  june 2009 larmo  a  lindstrom  m  meyer  m  pelletier  g  torsner  j  and wiemann  h  ? ? the lte link-layer design  ? ? ieee commun magazine  vol 47  pp 52 ? 59  apr 2009 lee  j.s  and miller  l.e  cdma systems engineering handbook  london  artech house  1998 leland  w  taqqu  m  willinger  w  and wilson  d  ? ? on the self-similar nature of ethernet traffic  ? ? ieee/acm trans on networking  vol 2  pp 1 ? 15  feb 1994 lemon  j  ? ? resisting syn flood dos attacks with a syn cache  ? ? proc bsdcon conf  usenix  pp 88 ? 98  2002 levy  s  ? ? crypto rebels  ? ? wired  pp 54 ? 61  may/june 1993 lewis  m  comparing  designing  and deploying vpns  indianapolis  in  cisco press  2006 li  m  agrawal  d  ganesan  d  and venkataramani  a  ? ? block-switched networks  a new paradigm for wireless transport  ? ? proc nsdi 2009 conf  usenix  pp 423 ? 436  2009 894 reading list and bibliography chap 9 lin  s  and costello  d  error control coding  2nd ed  upper saddle river  nj  pearson education  2004 lubacz  j  mazurczyk  w  and szczypiorski  k  ? ? vice over ip  ? ? ieee spectrum  pp 42 ? 47  feb 2010 macedonia  m.r  ? ? distributed file sharing  ? ? ieee computer  vol 33  pp 99 ? 101  2000 madhavan  j  ko  d  lot  l  gangpathy  v  rasmussen  a  and halevy  a  ? ? google ? s deep web crawl  ? ? proc vldb 2008 conf  vldb endowment  pp 1241 ? 1252  2008 mahajan  r  rodrig  m  wetherall  d  and zahorjan  j  ? ? analyzing the mac-level behavior of wireless networks in the wild  ? ? proc sigcomm 2006 conf  acm  pp 75 ? 86  2006 malis  a  and simpson  w  ? ? ppp over sonet/sdh  ? ? rfc 2615  june 1999 massey  j.l  ? ? shift-register synthesis and bch decoding  ? ? ieee trans on information theory  vol it ? 5  pp 122 ? 127  jan 1969 matsui  m  ? ? linear cryptanalysis method for des cipher  ? ? advances in cryptology ? eurocrypt 1993 proceedings  berlin  springer-verlag lncs 765  pp 386 ? 397  1994 maufer  t.a  ip fundamentals  upper saddle river  nj  prentice hall  1999 maymounkov  p  and mazieres  d  ? ? kademlia  a peer-to-peer information system based on the xor metric  ? ? proc first intl wksp on peer-to-peer systems  berlin  springer-verlag lncs 2429  pp 53 ? 65  2002 mazieres  d  and kaashoek  m.f  ? ? the design  implementation  and operation of an email pseudonym server  ? ? proc fifth conf on computer and commun security  acm  pp 27 ? 36  1998 mcafee labs  mcafee threat reports  first quarter 2010  mcafee inc  2010 menezes  a.j  and vanstone  s.a  ? ? elliptic curve cryptosystems and their implementation  ? ? journal of cryptology  vol 6  pp 209 ? 224  1993 merkle  r.c  and hellman  m  ? ? hiding and signatures in trapdoor knapsacks  ? ? ieee trans on information theory  vol it ? 4  pp 525 ? 530  sept 1978 metcalfe  r.m  ? ? computer/network interface design  lessons from arpanet and ethernet  ? ? ieee j on selected areas in commun  vol 11  pp 173 ? 179  feb 1993 metcalfe  r.m  and boggs  d.r  ? ? ethernet  distributed packet switching for local computer networks  ? ? commun of the acm  vol 19  pp 395 ? 404  july 1976 metz  c  ? ? interconnecting isp networks  ? ? ieee internet computing  vol 5  pp 74 ? 80  mar ? apr 2001 mishra  p.p  kanakia  h  and tripathi  s  ? ? on hop by hop rate-based congestion control  ? ? ieee/acm trans on networking  vol 4  pp 224 ? 239  apr 1996 mogul  j.c  ? ? ip network performance  ? ? in internet system handbook  d.c lynch and m.y rose  eds   boston  addison-wesley  pp 575 ? 575  1993 sec 9.2 alphabetical bibliography 895 mogul  j  and deering  s  ? ? path mtu discovery  ? ? rfc 1191  nov 1990 mogul  j  and minshall  g  ? ? rethinking the nagle algorithm  ? ? comput commun rev  vol 31  pp 6 ? 20  jan 2001 moy  j  ? ? multicast routing extensions for ospf  ? ? commun of the acm  vol 37  pp 61 ? 66  aug 1994 mullins  j  ? ? making unbreakable code  ? ? ieee spectrum  pp 40 ? 45  may 2002 nagle  j  ? ? on packet switches with infinite storage  ? ? ieee trans on commun  vol com ? 5  pp 435 ? 438  apr 1987 nagle  j  ? ? congestion control in tcp/ip internetworks  ? ? computer commun rev  vol 14  pp 11 ? 17  oct 1984 naughton  j  a brief history of the future  woodstock  ny  overlook press  2000 needham  r.m  and schroeder  m.d  ? ? using encryption for authentication in large networks of computers  ? ? commun of the acm  vol 21  pp 993 ? 999  dec 1978 needham  r.m  and schroeder  m.d  ? ? authentication revisited  ? ? operating systems rev  vol 21  p 7  jan 1987 nelakuditi  s  and zhang  z.-l  ? ? a localized adaptive proportioning approach to qos routing  ? ? ieee commun magazine vol 40  pp 66 ? 71  june 2002 neuman  c  and ts ? o  t  ? ? kerberos  an authentication service for computer networks  ? ? ieee commun mag  vol 32  pp 33 ? 38  sept 1994 nichols  r.k  and lekkas  p.c  wireless security  new york  mcgraw-hill  2002 nist  ? ? secure hash algorithm  ? ? u.s government federal information processing standard 180  1993 nonnenmacher  j  biersack  e  and towsley  d  ? ? parity-based loss recovery for reliable multicast transmission  ? ? proc sigcomm ? 97 conf  acm  pp 289 ? 300  1997 nucci  a  and papagiannaki  d  design  measurement and management of large scale ip networks  cambridge  cambridge university press  2008 nugent  r  munakana  r  chin  a  coelho  r  and puig-suari  j  ? ? the cubesat  the picosatellite standard for research and education  ? ? proc space 2008 conf  aiaa  2008 oran  d  ? ? osi is-is intra-domain routing protocol  ? ? rfc 1142  feb 1990 otway  d  and rees  o  ? ? efficient and timely mutual authentication  ? ? operating systems rev  pp 8 ? 10  jan 1987 padhye  j  firoiu  v  towsley  d  and kurose  j  ? ? modeling tcp throughput  a simple model and its empirical validation  ? ? proc sigcomm ? 98 conf  acm  pp 303 ? 314  1998 palais  j.c  fiber optic commun  5th ed  englewood cliffs  nj  prentice hall  2004 896 reading list and bibliography chap 9 parameswaran  m  susarla  a  and whinston  a.b  ? ? p2p networking  an information-sharing alternative  ? ? ieee computer  vol 34  pp 31 ? 38  july 2001 parekh  a  and gallagher  r  ? ? a generalized processor sharing approach to flow control in integrated services networks  the multiple-node case  ? ? ieee/acm trans on networking  vol 2  pp 137 ? 150  apr 1994 parekh  a  and gallagher  r  ? ? a generalized processor sharing approach to flow control in integrated services networks  the single-node case  ? ? ieee/acm trans on networking  vol 1  pp 344 ? 357  june 1993 partridge  c  hughes  j  and stone  j  ? ? performance of checksums and crcs over real data  ? ? proc sigcomm ? 95 conf  acm  pp 68 ? 76  1995 partridge  c  mendez  t  and milliken  w  ? ? host anycasting service  ? ? rfc 1546  nov 1993 paxson  v  and floyd  s  ? ? wide-area traffic  the failure of poisson modeling  ? ? ieee/acm trans on networking  vol 3  pp 226 ? 244  june 1995 perkins  c  ? ? ip mobility support for ipv4  ? ? rfc 3344  aug 2002 perkins  c.e  rtp  audio and video for the internet  boston  addison-wesley  2003 perkins  c.e  ed   ad hoc networking  boston  addison-wesley  2001 perkins  c.e  mobile ip design principles and practices  upper saddle river  nj  prentice hall  1998 perkins  c.e  and royer  e  ? ? the ad hoc on-demand distance-vector protocol  ? ? in ad hoc networking  edited by c perkins  boston  addison-wesley  2001 perlman  r  interconnections  2nd ed  boston  addison-wesley  2000 perlman  r  network layer protocols with byzantine robustness  ph.d thesis  m.i.t  1988 perlman  r  ? ? an algorithm for the distributed computation of a spanning tree in an extended lan  ? ? proc sigcomm ? 85 conf  acm  pp 44 ? 53  1985 perlman  r  and kaufman  c  ? ? key exchange in ipsec  ? ? ieee internet computing  vol 4  pp 50 ? 56  nov ? dec 2000 peterson  w.w  and brown  d.t  ? ? cyclic codes for error detection  ? ? proc ire  vol 49  pp 228 ? 235  jan 1961 piatek  m  kohno  t  and krishnamurthy  a  ? ? challenges and directions for monitoring p2p file sharing networks ? or why my printer received a dmca takedown notice  ? ? 3rd workshop on hot topics in security  usenix  july 2008 piatek  m  isdal  t  anderson  t  krishnamurthy  a  and venkataramani  v  ? ? do incentives build robustness in bittorrent ?  ? ? proc nsdi 2007 conf  usenix  pp 1 ? 14  2007 piscitello  d.m  and chapin  a.l  open systems networking  tcp/ip and osi  boston  addison-wesley  1993 sec 9.2 alphabetical bibliography 897 piva  a  bartolini  f  and barni  m  ? ? managing copyrights in open networks  ? ? ieee internet computing  vol 6  pp 18 ? 26  may ? 2002 postel  j  ? ? internet control message protocols  ? ? rfc 792  sept 1981 rabin  j  and mccathienevile  c  ? ? mobile web best practices 1.0  ? ? w3c recommendation  july 2008 ramakrishnam  k.k  floyd  s  and black  d  ? ? the addition of explicit congestion notification  ecn  to ip  ? ? rfc 3168  sept 2001 ramakrishnan  k.k  and jain  r  ? ? a binary feedback scheme for congestion avoidance in computer networks with a connectionless network layer  ? ? proc sigcomm ? 88 conf  acm  pp 303 ? 313  1988 ramaswami  r  kumar  s  and sasaki  g  optical networks  a practical perspective  3rd ed  san francisco  morgan kaufmann  2009 ratnasamy  s  francis  p  handley  m  karp  r  and shenker  s  ? ? a scalable content-addressable network  ? ? proc sigcomm 2001 conf  acm  pp 161 ? 172  2001 rieback  m  crispo  b  and tanenbaum  a  ? ? is your cat infected with a computer virus ?  ? ? proc ieee percom  pp 169 ? 179  mar 2006 rivest  r.l  ? ? the md5 message-digest algorithm  ? ? rfc 1320  apr 1992 rivest  r.l  shamir  a  and adleman  l  ? ? on a method for obtaining digital signatures and public key cryptosystems  ? ? commun of the acm  vol 21  pp 120 ? 126  feb 1978 roberts  l.g  ? ? extensions of packet communication technology to a hand held personal terminal  ? ? proc spring joint computer conf  afips  pp 295 ? 298  1972 roberts  l.g  ? ? multiple computer networks and intercomputer communication  ? ? proc first symp on operating systems prin  acm  pp 3.1 ? 3.6  1967 rose  m.t  the simple book  englewood cliffs  nj  prentice hall  1994 rose  m.t  the internet message  englewood cliffs  nj  prentice hall  1993 rowstron  a  and druschel  p  ? ? pastry  scalable  distributed object location and routing for large-scale peer-to-peer storage utility  ? ? proc 18th int ? l conf on distributed systems platforms  london  springer-verlag lncs 2218  pp 329 ? 350  2001 ruiz-sanchez  m.a  biersack  e.w  and dabbous  w  ? ? survey and taxonomy of ip address lookup algorithms  ? ? ieee network magazine  vol 15  pp 8 ? 23  mar ? apr 2001 saltzer  j.h  reed  d.p  and clark  d.d  ? ? end-to-end arguments in system design  ? ? acm trans on computer systems  vol 2  pp 277 ? 288  nov 1984 sample  a  yeager  d  powledge  p  mamishev  a  and smith  j  ? ? design of an rfid-based battery-free programmable sensing platform  ? ? ieee trans on instrumentation and measurement  vol 57  pp 2608 ? 2615  nov 2008 saroiu  s  gummadi  k  and gribble  s  ? ? measuring and analyzing the characteristics of napster & gnutella hosts  ? ? multim syst  vol 9  pp 170 ? 184  aug 2003 898 reading list and bibliography chap 9 schaller  r  ? ? moore ? s law  past  present and future  ? ? ieee spectrum  vol 34  pp 52 ? 59  june 1997 schneier  b  secrets and lies  new york  john wiley & sons  2004 schneier  b  e-mail security  new york  john wiley & sons  1995 schnorr  c.p  ? ? efficient signature generation for smart cards  ? ? journal of cryptology  vol 4  pp 161 ? 174  1991 scholtz  r.a  ? ? the origins of spread-spectrum communications  ? ? ieee trans on commun  vol com ? 0  pp 822 ? 854  may 1982 schwartz  m  and abramson  n  ? ? the alohanet  surfing for wireless data  ? ? ieee commun magazine  vol 47  pp 21 ? 25  dec 2009 seifert  r  and edwards  j  the all-new switch book  ny  john wiley  2008 senn  j.a  ? ? the emergence of m-commerce  ? ? ieee computer  vol 33  pp 148 ? 150  dec 2000 serjantov  a  ? ? anonymizing censorship resistant systems  ? ? proc first int ? l workshop on peer-to-peer systems  london  springer-verlag lncs 2429  pp 111 ? 120  2002 shacham  n  and mckenny  p  ? ? packet recovery in high-speed networks using coding and buffer management  ? ? proc infocom conf  ieee  pp 124 ? 131  june 1990 shaikh  a  rexford  j  and shin  k  ? ? load-sensitive routing of long-lived ip flows  ? ? proc sigcomm ? 99 conf  acm  pp 215 ? 226  sept 1999 shalunov  s  and carlson  r  ? ? detecting duplex mismatch on ethernet  ? ? passive and active network measurement  berlin  springer-verlag lncs 3431  pp 3135 ? 3148  2005 shannon  c  ? ? a mathematical theory of communication  ? ? bell system tech j  vol 27  pp 379 ? 423  july 1948 ; and pp 623 ? 656  oct 1948 shepard  s  sonet/sdh demystified  new york  mcgraw-hill  2001 shreedhar  m  and varghese  g  ? ? efficient fair queueing using deficit round robin  ? ? proc sigcomm ? 95 conf  acm  pp 231 ? 243  1995 simpson  w  video over ip  2nd ed  burlington  ma  focal press  2008 simpson  w  ? ? ppp in hdlc-like framing  ? ? rfc 1662  july 1994b simpson  w  ? ? the point-to-point protocol  ppp   ? ? rfc 1661  july 1994a siu  k  and jain  r  ? ? a brief overview of atm  protocol layers  lan emulation  and traffic  ? ? acm computer communications review  vol 25  pp 6 ? 20  apr 1995 skoudis  e  and liston  t  counter hack reloaded  2nd ed  upper saddle river  nj  prentice hall  2006 smith  d.k  and alexander  r.c  fumbling the future  new york  william morrow  1988 sec 9.2 alphabetical bibliography 899 snoeren  a.c  and balakrishnan  h  ? ? an end-to-end approach to host mobility  ? ? int ? l conf on mobile computing and networking  acm  pp 155 ? 166  2000 sobel  d.l  ? ? will carnivore devour online privacy  ? ? ieee computer  vol 34  pp 87 ? 88  may 2001 sotirov  a  stevens  m  appelbaum  j  lenstra  a  molnar  d  osvik  d  and de weger  b  ? ? md5 considered harmful today  ? ? proc 25th chaos communication congress  verlag art d ? ameublement  2008 southey  r  the doctors  london  longman  brown  green and longmans  1848 spurgeon  c.e  ethernet  the definitive guide  sebastopol  ca  o ? reilly  2000 stallings  w  data and computer communications  9th ed  upper saddle river  nj  pearson education  2010 starr  t  sorbara  m  coiffi  j  and silverman  p  ? ? dsl advances  ? ? upper saddle river  nj  prentice hall  2003 stevens  w.r  tcp/ip illustrated  the protocols  boston  addison wesley  1994 stinson  d.r  cryptography theory and practice  2nd ed  boca raton  fl  crc press  2002 stoica  i  morris  r  karger  d  kaashoek  m.f  and balakrishnan  h  ? ? chord  a scalable peer-to-peer lookup service for internet applications  ? ? proc sigcomm 2001 conf  acm  pp 149 ? 160  2001 stubblefield  a  ioannidis  j  and rubin  a.d  ? ? using the fluhrer  mantin  and shamir attack to break wep  ? ? proc network and distributed systems security symp  isoc  pp 1 ? 11  2002 stuttard  d  and pinto  m  the web application hacker ? s handbook  new york  john wiley & sons  2007 su  s  the umts air interface in rf engineering  new york  mcgraw-hill  2007 sullivan  g  and wiegand  t  ? ? tree algorithms for packet broadcast channels  ? ? proc of the ieee  vol 93  pp 18 ? 31  jan 2005 sunshine  c.a  and dalal  y.k  ? ? connection management in transport protocols  ? ? computer networks  vol 2  pp 454 ? 473  1978 tan  k  song  j  zhang  q  and sridharn  m  ? ? a compound tcp approach for high-speed and long distance networks  ? ? proc infocom conf  ieee  pp 1 ? 12  2006 tanenbaum  a.s  modern operating systems  3rd ed  upper saddle river  nj  prentice hall  2007 tanenbaum  a.s  and van steen  m  distributed systems  principles and paradigms  upper saddle river  nj  prentice hall  2007 tomlinson  r.s  ? ? selecting sequence numbers  ? ? proc sigcomm/sigops interprocess commun workshop  acm  pp 11 ? 23  1975 900 reading list and bibliography chap 9 tuchman  w  ? ? hellman presents no shortcut solutions to des  ? ? ieee spectrum  vol 16  pp 40 ? 41  july 1979 turner  j.s  ? ? new directions in communications  or which way to the information age   ? ? ieee commun magazine  vol 24  pp 8 ? 15  oct 1986 ungerboeck  g  ? ? trellis-coded modulation with redundant signal sets part i  introduction  ? ? ieee commun magazine  vol 25  pp 5 ? 11  feb 1987 valade  j  php & mysql for dummies  5th ed  new york  john wiley & sons  2009 varghese  g  network algorithmics  san francisco  morgan kaufmann  2004 varghese  g  and lauck  t  ? ? hashed and hierarchical timing wheels  data structures for the efficient implementation of a timer facility  ? ? proc 11th symp on operating systems prin  acm  pp 25 ? 38  1987 verizon business  2009 data breach investigations report  verizon  2009 viterbi  a  cdma  principles of spread spectrum communication  englewood cliffs  nj  prentice hall  1995 von ahn  l  blum  b  and langford  j  ? ? telling humans and computers apart automatically  ? ? commun of the acm  vol 47  pp 56 ? 60  feb 2004 waitzman  d  partridge  c  and deering  s  ? ? distance vector multicast routing protocol  ? ? rfc 1075  nov 1988 waldman  m  rubin  a.d  and cranor  l.f  ? ? publius  a robust  tamper-evident  censorship-resistant web publishing system  ? ? proc ninth usenix security symp  usenix  pp 59 ? 72  2000 wang  z  and crowcroft  j  ? ? seal detects cell misordering  ? ? ieee network magazine  vol 6  pp 8 ? 9  july 1992 want  r  rfid explained  san rafael  ca  morgan claypool  2006 warneke  b  last  m  liebowitz  b  and pister  k.s.j  ? ? smart dust  communicating with a cubic millimeter computer  ? ? ieee computer  vol 34  pp 44 ? 51  jan 2001 wayner  p  disappearing cryptography  information hiding  steganography  and watermarking  3rd ed  san francisco  morgan kaufmann  2008 wei  d  cheng  j  low  s  and hegde  s  ? ? fast tcp  motivation  architecture  algorithms  performance  ? ? ieee/acm trans on networking  vol 14  pp 1246 ? 1259  dec 2006 weiser  m  ? ? the computer for the twenty-first century  ? ? scientific american  vol 265  pp 94 ? 104  sept 1991 welbourne  e  battle  l  cole  g  gould  k  rector  k  raymer  s  balazinska  m  and borriello  g  ? ? building the internet of things using rfid  ? ? ieee internet computing  vol 13  pp 48 ? 55  may 2009 wittenburg  n  understanding voice over ip technology  clifton park  ny  delmar cengage learning  2009 sec 9.2 alphabetical bibliography 901 wolman  a  voelker  g  sharma  n  cardwell  n  karlin  a  and levy  h  ? ? on the scale and performance of cooperative web proxy caching  ? ? proc 17th symp on operating systems prin  acm  pp 16 ? 31  1999 wood  l  ivancic  w  eddy  w  stewart  d  northam  j  jackson  c  and da silva curiel  a  ? ? use of the delay-tolerant networking bundle protocol from space  ? ? proc 59th int ? l astronautical congress  int ? l astronautical federation  pp 3123 ? 3133  2008 wu  t  ? ? network neutrality  broadband discrimination  ? ? journal on telecom and high-tech law  vol 2  pp 141 ? 179  2003 wylie  j  bigrigg  m.w  strunk  j.d  ganger  g.r  kiliccote  h  and khosla  p.k  ? ? survivable information storage systems  ? ? ieee computer  vol 33  pp 61 ? 68  aug 2000 yu  t  hartman  s  and raeburn  k  ? ? the perils of unauthenticated encryption  kerberos version 4  ? ? proc ndss symposium  internet society  feb 2004 yuval  g  ? ? how to swindle rabin  ? ? cryptologia  vol 3  pp 187 ? 190  july 1979 zacks  m  ? ? antiterrorist legislation expands electronic snooping  ? ? ieee internet computing  vol 5  pp 8 ? 9  nov ? dec 2001 zhang  y  breslau  l  paxson  v  and shenker  s  ? ? on the characteristics and origins of internet flow rates  ? ? proc sigcomm 2002 conf  acm  pp 309 ? 322  2002 zhao  b  ling  h  stribling  j  rhea  s  joseph  a  and kubiatowicz  j  ? ? tapestry  a resilient global-scale overlay for service deployment  ? ? ieee j on selected areas in commun  vol 22  pp 41 ? 53  jan 2004 zimmermann  p.r  the official pgp user ? s guide  cambridge  ma  m.i.t press  1995a zimmermann  p.r  pgp  source code and internals  cambridge  ma  m.i.t press  1995b zipf  g.k  human behavior and the principle of least effort  an introduction to human ecology  boston  addison-wesley  1949 ziv  j  and lempel  z  ? ? a universal algorithm for sequential data compression  ? ? ieee trans on information theory  vol it ? 3  pp 337 ? 343  may 1977 this page intentionally left blank index this page intentionally left blank index numbers 1-persistent csma  266 3gpp  see third generation partnership project  4b/5b encoding  128  292 8b/10b encoding  129  295 10-gigabit ethernet  296 ? 297 64b/66b encoding  297 100base-fx ethernet  292 100base-t4 ethernet  291 ? 292 802.11  see ieee 802.11  1000base-t ethernet  295 ? 296 a a-law  153  700 aal5  see atm adaptation layer 5  abstract syntax notation 1  809 access point  19  70  299 transport layer  509 acknowledged datagram  37 acknowledgement cumulative  238  558 duplicate  577 selective  560  580 acknowledgement clock  tcp  574 acknowledgement frame  43 acl  see asynchronous connectionless link  active server page  676 activex  858 ? 859 activex control  678 ad hoc network  70  299  389 ? 392 routing  389 ? 392 ad hoc on-demand distance vector  389 adaptation  rate  301 adaptive frequency hopping  bluetooth  324 adaptive routing algorithm  364 adaptive tree walk protocol  275 ? 277 adc  see analog-to-digital converter  additive increase multiplicative decrease law  537 address resolution protocol  467 ? 469 gratuitous  469 address resolution protocol proxy  469 addressing  34 classful ip  449 ? 451 transport layer  509 ? 512 905 906 index adjacent router  478 admission control  395  397 ? 398  415 ? 418 adsl  see asymmetric digital subscriber line  advanced audio coding  702 advanced encryption standard  312  783 ? 787 advanced mobile phone system  65  167 ? 170 advanced research projects agency  56 advanced video coding  710 aes  see advanced encryption standard  aggregation  route  447 ah  see authentication header  aifs  see arbitration interframe space  aimd  see additive increase multiplicative decrease law  air interface  66  171 ajax  see asynchronous javascript and xml  akamai  745 ? 746 algorithm adaptive routing  364 backward learning  333  335 bellman-ford  370 binary exponential backoff  285 ? 286 congestion control  392 ? 404 dijkstra ? s  369 encoding  550 forwarding  27 international data encryption  842 karn ? s  571 leaky bucket  397  407 ? 411 longest matching prefix  448 lottery  112 nagle ? s  566 network layer routing  362 ? 392 nonadaptive  363 ? 364 reverse path forwarding  381  419 rivest shamir adleman  794 ? 796 routing  27  362 ? 392 token bucket  408 ? 411 alias  617  619  630 allocation  channel  258 ? 261 aloha  72 pure  262 ? 264 slotted  264 ? 266 alternate mark inversion  129 ami  see alternate mark inversion  amplitude shift keying  130 amps  see advanced mobile phone system  analog-to-digital converter  699 andreessen  marc  646 ? 647 anomaly  rate  309 anonymous remailer  861 ? 863 ansnet  60 antenna  sectored  178 antheil  george  108 anycast routing  385 ? 386 aodv  see ad-hoc on-demand distance vector routing  ap  see access point  apocalypse of the two elephants  51 ? 52 applet  678 application business  3 web  4 application layer  45  47 ? 48 content-delivery network  734 ? 757 distributed hash table  753 ? 757 domain name system  611 ? 623 email  623 ? 646 multimedia  607 ? 734 world wide web  646 ? 697 application-level gateway  819 apsd  see automatic power save delivery  arbitration interframe space  308 architectural overview  web  647 ? 649 architecture and services  email  624 ? 626 area  autonomous system backbone  476 stub  477 area border router  476 arp  see address resolution protocol  arpa  see advanced research projects agency  arpanet  55 ? 59 arq  see automatic repeat request  as  see autonomous system  ask  see amplitude shift keying  asn.1  see abstract syntax notation 1  asp  see active server pages  aspect ratio  video  705 association  ieee 802.11  311 assured forwarding  423 ? 424 asymmetric digital subscriber line  94  124  147  248 ? 250 vs cable  185 asynchronous connectionless link  325 asynchronous i/o  682 asynchronous javascript and xml  679 ? 683 asynchronous transfer mode  249 at&t  55  110 atm  see asynchronous transfer mode  atm adaptation layer 5  250 index 907 attack birthday  804 ? 806 bucket brigade  835 chosen plaintext  769 ciphertext-only  769 denial of service  820 keystream reuse  791 known plaintext  769 man-in-the-middle  835 reflection  829 replay  836 attenuation  102  109 attribute cryptographic certificate  808 html  664 auction  spectrum  112 audio digital  699 ? 704 streaming  697 ? 704 audio compression  701 ? 704 authentication  35 ieee 802.11  311 needham-schroeder  836 ? 838 using key distribution center  835 ? 838 authentication header  815 ? 816 authentication protocol  827 ? 841 authentication using a shared secret  828 ? 833 authentication using kerberos  838 ? 840 authentication using public keys  840 ? 841 authenticode  858 authoritative record  620 autocorrelation  176 autonegotiation  293 automatic power save delivery  307 automatic repeat request  225  522 autonomous system  432  437  472 ? 476  474 autoresponder  629 avc  see advanced video coding  b b-frame  712 backbone  internet  63 backbone area  476 backbone router  476 backpressure  hop-by-hop  400 ? 401 backscatter  rfid  74  329 backward learning algorithm  333  335 backward learning bridge  335 ? 336 balanced signal  129 ? 130 bandwidth  91 bandwidth allocation  531 ? 535 bandwidth efficiency  126 ? 127 bandwidth-delay product  233  267  597 baran  paul  55 barker sequence  302 base station  19  70 base station controller  171 base-t ethernet  295 ? 296 base64 encoding  634 baseband signal  91  130 baseband transmission  125 ? 130 basic bit-map method  270 baud rate  127  146 bb84 protocol  773 beacon frame  307 beauty contest  for allocating spectrum  112 bell  alexander graham  139 bell operating company  142 bellman-ford routing algorithm  370 bent-pipe transponder  116 berkeley socket  500 ? 507 best-effort service  318 ? 319 bgp  see border gateway protocol  big-endian computer  439 binary countdown protocol  272 ? 273 binary exponential backoff algorithm  285 ? 286 binary phase shift keying  130 bipolar encoding  129 birthday attack  804 ? 806 bit rate  127 bit stuffing  199 bit-map protocol  270 ? 271 bittorrent  750 ? 753 choked peer  752 chunk  751 free-rider  752 leecher  752 seeder  751 swarm  751 tit-for-tat strategy  752 torrent  750 tracker  751 unchoked peer  752 blaatand  harald  320 block cipher  779 block code  204 908 index bluetooth  18  320 ? 327 adaptive frequency hopping  324 applications  321 ? 322 architecture  320 ? 321 frame structure  325 ? 327 link  324 link layer  324 ? 325 pairing  320 piconet  320 profile  321 protocol stack  322 ? 323 radio layer  324 scatternet  320 secure pairing  325 security  826 ? 827 bluetooth sig  321 boc  see bell operating company  body  html tag  625 border gateway protocol  432  479 ? 484 botnet  16  628 boundary router  477 bpsk  see binary phase shift keying  bridge  332 ? 342 backward learning  335 ? 336 compared to other devices  340 ? 342 learning  334 ? 337 spanning tree  337 ? 340 use  332 ? 333 broadband  63  147 ? 151 broadband wireless  312 ? 320 broadcast control channel  173 broadcast network  17 broadcast routing  380 ? 382 broadcast storm  344  583 broadcasting  17  283 browser  648 extension  859 ? 860 helper application  654 plug-in  653 ? 654  859 bsc  see base station controller  bucket  leaky  397 bucket brigade attack  835 buffering  222  238  290  341 bundle  delay-tolerant network  601 bundle protocol  603 ? 605 bursty traffic  407 bush  vannevar  647 business application  3 byte stream  reliable  502 byte stuffing  198 c ca  see certification authority  cable headend  23  63  179 cable internet  180 ? 182 cable modem  63  183 ? 185  183 ? 195 cable modem termination system  63  183 cable television  179 ? 186 cache arp 468 ? 469 dns  620 ? 622  848 ? 850 poisoned  849 web  656  690 ? 692 caesar cipher  769 call management  169 capacitive coupling  129 capacity  channel  94 captcha  16 care-of address  387 carnivore  15 carrier extension  ethernet  294 carrier sense multiple access  72  266 ? 269 1-persistent  266 collision detection  268 ? 269 nonpersistent  267 p-persistent  267 carrier sensing  260 carrier-grade ethernet  299 cascading style sheet  670 ? 672 category 3 wiring  96 category 5 wiring  96 category 6 wiring  96 category 7 wiring  96 ccitt  see international telecommunication union  cck  see complementary code keying  cd  see committee draft  cdm  see code division multiplexing  cdma  see code division multiple access  cdma2000  175 cdn  see content delivery network  cell  mobile phone  167  249 cell phone  165 first generation  166 ? 170 second generation  170 ? 174 third generation  65 ? 69  174 ? 179 cellular base station  66 cellular network  65 certificate cryptographic  807 ? 809 x.509  809 ? 810 index 909 certificate revocation list  813 certification authority  807 certification path  812 cgi  see common gateway interface  chain of trust  812 challenge-response protocol  828 channel access grant  174 broadcast control  173 common control  174 dedicated control  174 erasure  203 multiaccess  257 paging  174 random access  174  257 channel allocation  258 ? 261 dynamic  260 ? 261 channel capacity  94 channel-associated signaling  155 checksum  211 crc  210 fletcher ? s  212 chip sequence  cdma  136 choke packet  399 ? 400 choked peer  bittorrent  752 chord  754 ? 757 finger table  756 key  754 chosen plaintext attack  769 chromatic dispersion  103 chrominance  video  706 chunk  bittorrent  751 cidr  see classless interdomain routing  cintent delivery network  743 ? 748 cipher  766 aes  783 ? 787 caesar  769 monoalphabetic substitution  770 rijndael  784 ? 787 substitution  767 ? 770 symmetric-key  778 ? 787 transposition  771 ? 772 cipher block chaining mode  788 ? 789 cipher feedback mode  789 ? 790 cipher modes  787 ? 792 ciphertext  767 ciphertext-only attack  769 circuit  35 virtual  249 circuit switching  161 ? 162 clark  david  51  81 class a network  450 class b network  450 class c network  450 class-based routing  421 classful addressing  ip  449 ? 451 classic ethernet  21  280  281 ? 288 classless interdomain routing  447 ? 449 clear to send  279 click fraud  697 client  4 client side on the web  649 ? 652 client side dynamic web page generation  676 ? 678 client side on the web  649 ? 652 client stub  544 client-server model  4 clipper chip  861 clock recovery  127 ? 129 cloud computing  672 cmts  see cable modem termination system  coaxial cable  97 ? 98 code  cryptographic  766 code division multiple access  66  108  135  170 code division multiplexing  135 ? 138 code rate  204 code signing  858 codec  153 codeword  204 collision  260 collision detection  csma  268 ? 269 collision domain  289 collision-free protocol  269 ? 273 combing  visual artifact  705 committee draft  79 common control channel  174 common gateway interface  674 common-channel signaling  155 communication medium  5 communication satellite  116 ? 125 communication security  813 ? 827 communication subnet  24 community antenna television  179 ? 180 companding  154 comparison of the osi and tcp/ip models  49 ? 51 complementary code keying  302 compression audio  701 ? 704 header  593 ? 595 video  706 ? 712 910 index computer  wearable  13 computer network  see network  conditional get  http  691 confidentiality  35 congestion  network  35  392 ? 404 congestion avoidance  398 congestion collapse  393 tcp  572 congestion control convergence  534 ? 535 network layer  392 ? 404 provisioning  395 tcp  571 ? 581 congestion window  tcp  571 connection  http  684 ? 686 connection establishment  512 ? 517 tcp  560 ? 562 connection management  tcp  562 ? 565 connection release  517 ? 522 tcp  562 connection reuse  http  684 connection-oriented service  35 ? 38  359 ? 361 implementation  359 ? 361 connectionless service  35 ? 38  358 ? 359 implementation  358 ? 359 connectivity  6  11 constellation  146 constellation diagram  131 constraint length  207 contact  delay-tolerant network  601 content and internet traffic  7360738 content delivery network  743 ? 748 content distribution  734 ? 757 content transformation  694 contention system  262 continuous media  699 control channel  broadcast  173 control law  536 convergence  372 congestion control  534 ? 535 convolutional code  207 cookie  15 syn  561 web  658 ? 662 copyright  867 ? 869 cordless telephone  165 core network  66 core-based tree  384 count-to-infinity problem  372 ? 373 counter mode  791 ? 792 crash recovery  527 ? 530 crc  see cyclic redundancy check  critique of osi and tcp/ip  51 ? 53 crl  see certificate revocation list  cross-correlation  176 cryptanalysis  768  792 ? 793 differential  792 ? 793 linear  793 cryptographic certificate  807 ? 809 cryptographic key  767 cryptographic principles  776 ? 778 cryptographic round  780 cryptography  766 ? 797 aes  312 certificate  807 ? 809 ciphertext  767 des  780 ? 784 kerckhoff ? s principle  768 key  767 one-time pad  772 ? 773 p-box  779 plaintext  767 public-key  793 ? 797 quantum  773 ? 776 rijndael  312 s-box  779 security by obscurity  768 symmetric-key  778 ? 793 triple des  782 ? 783 vs code  766 work factor  768 cryptology  768 csma  see carrier sense multiple access  csma with collision avoidance  303 csma with collision detection  268 csma/ca  see csma with collision avoidance  csma/cd  see csma with collision detection  csnet  59 css  see cascading style sheet  cts  see clear to send  cubesat  123 cumulative acknowledgement  238  558 tcp  568 custody transfer  delay-tolerant network  604 cut-through switching  36  336 cybersquatting  614 cyclic redundancy check  212 cypherpunk remailer  862 index 911 d d-amps  see digital advanced mobile phone system  dac  see digital-to-analog converter  daemen  joan  784 daemon  554 dag  see directed acyclic graph  data center  64 data delivery service  ieee 802.11  312 data encryption standard  780 ? 784 data frame  43 data link layer  43  193 ? 251 bit stuffing  199 byte stuffing  197 design issues  194 ? 215 elementary protocols  215 ? 244 example protocols  244 ? 250 sliding window protocols  226 ? 244 stop-and-wait protocol  222 ? 223 data link layer switching  332 ? 349 data link protocol  215 ? 250 adsl  248 ? 250 elementary  215 ? 244 examples  215 ? 250 packet over sonet  245 ? 248 sliding window  226 ? 244 stop-and-wait  222 ? 223 data over cable service interface specification  183 datagram  37  358 datagram congestion control protocol  503 datagram network  358 datagram service  comparison with vcs  361 ? 362 davies  donald  56 db  see decibel  dccp  see datagram congestion controlled protocol  dcf  see distributed coordination function  dcf interframe spacing  308 dct  see discrete cosine transformation  ddos attack  see distributed denial of service attack  de facto standard  76 de jure standard  76 decibel  94  699 decoding  audio  701 dedicated control channel  174 deep web  696 default gateway  469 default-free zone  446 deficit round robin  414 delay  queueing  164 delay-tolerant network  599 ? 605 architecture  600 ? 603 custody transfer  604 protocol  603 ? 605 delayed acknowledgement  tcp  566 demilitarized zone  819 denial of service attack  820 distributed  821 ? 822 dense wavelength division multiplexing  160 des  see data encryption standard  design issues data link layer  194 ? 202 fast networks  586 ? 590 network  33 ? 35 network layer  355 ? 362 transport layer  507 ? 530 designated router  375  478 desktop sharing  5 destination port  453 ? 454 device driver  215 dhcp  see dynamic host configuration protocol  dht  see distributed hash table  diagonal basis  in quantum cryptography  774 dial-up modem  62 dialog control  44 differential cryptanalysis  792 ? 793 differentiated service  421 ? 424  440  458 diffie-hellman protocol  833 ? 835 difs  see dcf interframe spacing  digital advanced mobile phone system  170 digital audio  699 ? 704 digital millennium copyright act  14  868 digital modulation  125 digital signature  797 ? 806 digital signature standard  800 digital subscriber line  62  147 ? 151 digital subscriber line access multiplexer  62  150 digital video  704 ? 712 digital-to-analog converter  700 digitizing voice signals  153 ? 154 digram  770 dijkstra  edsger  367 dijkstra ? s algorithm  369 direct acyclic graph  365 direct sequence spread spectrum  108 directed acyclic graph  365 directive  html  663 directory  pki  812 912 index dis  see draft international standard  disassociation  ieee 802.11  311 discovery  path mtu  556 discrete cosine transformation  mpeg  707 discrete multitone  148 dispersion  chromatic  103 disposition  message  628 disruption-tolerant network  600 distance vector multicast routing protocol  383 distance vector routing  370 ? 378 distortion  700 distributed coordination function  304 distributed denial of service attack  821 ? 822 distributed hash table  753 ? 757 distributed system  2 distribution service  ieee 802.11  311 distribution system  299 dix ethernet standard  281  283 dmca  see digital millennium copyright act  dmca takedown notice  14 dmt  see discrete multitone  dmz  see demilitarized zone  dns  see domain name system  dns name space  612 ? 616 dns spoofing  848 ? 850 dnssec  see domain name system security  docsis  see data over cable service interface specification  document object model  679 dom  see document object model  domain collision  289 frequency  133 domain name system  59  611 ? 623 authoritative record  620 ? 622 cybersquatting  614 domain resource record  616 ? 619 name server  619 ? 623 name space  613 registrar  613 resource record  616 ? 619 reverse lookup  617 spoofing  851 top-level domain  613 zone  851 ? 852 dos attack  see denial of service attack  dot com era  647 dotted decimal notation  443 downstream proxy  742 draft international standard  79 draft standard  82 dsl  see digital subscriber line  dslam  see digital subscriber line access multiplexer  dtn  see delay-tolerant network  duplicate acknowledgement  tcp  577 dvmrp  see distance vector multicast routing protocol  dwdm  see dense wavelength division multiplexing  dwell time  324 dynamic channel allocation  260 ? 261 dynamic frequency selection  312 dynamic host configuration protocol  470 dynamic html  676 dynamic page  web  649 dynamic routing  364 dynamic web page  649  672 ? 673 dynamic web page generation client side  676 ? 678 server side  673 ? 676 e e-commerce  6  9 e-mail  see email  e1 line  155 eap  see extensible authentication protocol  early exit  484 ecb  see electronic code book mode  ecmp  see equal cost multipath  ecn  see explicit congestion notification  ede  see encrypt decrypt encrypt mode  edge  see enhanced data rates for gsm evolution  eee  see encrypt encrypt encrypt mode  eifs  see extended interframe spacing  eisenhower  dwight  56 electromagnetic spectrum  105 ? 109  111 ? 114 electronic code book mode  787 ? 788 electronic commerce  6 electronic mail  see email  electronic product code  327 elephant flow  737 email  5  623 ? 646 architecture and services  624 ? 626 authoritative record  620 base64 encoding  634 body  625 cached record  620 index 913 email  continued  envelope  625 final delivery  643 imap  644 ? 645 mail server  624 mail submission  641 mailbox  625 message format  630 message transfer  624  637 ? 643  642 mime  633 name resolution  620 open mail relay  642 pop3  644 quoted-printable encoding  634 signature block  629 simple mail transfer protocol  625 transfer agent  624 ? 625 user agent  624  626 vacation agent  629 webmail  645 ? 646 x400  629 email header  625 email reader  626 email security  841 ? 846 emoticon  623 encapsulating security payload  817 encapsulation  packet  387 encoding  4b/5b  292 audio  701 ? 704 video  706 ? 712 ethernet 4b/5b  292 ethernet 8b/10b  295 ethernet 64b/66b  297 encrypt decrypt encrypt mode  782 encrypt encrypt encrypt mode  782 encryption  link  765 end office  140 end-to-end argument  357  523 endpoint  multiplexing  527 enhanced data rates for gsm evolution  178 enterprise network  19 entity  transport  496 envelope  625 epc  see electronic product code  epon  see ethernet pon  equal cost multipath  476 erasure  716 erasure channel  203 error control  200 ? 201 transport layer  522 ? 527 error correction  34 error detection  33 error syndrome  207 error-correcting code  204 ? 209 error-detecting code  209 ? 215 esmtp  see extended smtp  esp  see encapsulating security payload  eternity service  864 ethernet  20  280 ? 299 10-gigabit  296 ? 297 100base-fx  292 100base-t4  292 1000base-t  295 ? 296 base-t  295 ? 296 carrier-grade  299 classic  21  281 ? 288 dix  281  283 fast  290 ? 293 gigabit  293 ? 296 mac sublayer  280 ? 299 promiscuous mode  290 retrospective  298 ? 299 switched  20  288 ? 290 ethernet carrier extension  294 ethernet encoding 4b/5b  292 64b/66b  297 8b/10b  295 ethernet frame bursting  294 ethernet header  282 ethernet hub  288 ethernet jumbo frame  296 ethernet performance  286 ? 288 ethernet pon  151 ? 152 ethernet port  20 ethernet switch  20  289 eurodocsis  183 ewma  see exponentially weighted moving average  expedited forwarding  422 ? 423 explicit congestion notification  400 exponential decay  738 exponentially weighted moving average  399  570 exposed terminal problem  278 ? 280 extended hypertext markup language  681 extended interframe spacing  309 extended smtp  639 extended superframe  154 extensible authentication protocol  824 914 index extensible markup language  680 extensible stylesheet language transformation  681 extension header  ipv6  461 ? 463 exterior gateway protocol  431  474 f facebook  8 fair queueing  412 fair use doctrine  869 fast ethernet  290 ? 293 fast network  design  586 ? 590 fast recovery  tcp  578 fast retransmission  tcp  577 fast segment processing  590 ? 593 fcfs  see first-come first-served packet scheduling  fdd  see frequency division duplex  fddi  see fiber distributed data interface  fdm  see frequency division multiplexing  fec  see forwarding equivalence class  fec  see forward error correction  fec  see forwarding equivalence class  fiber distributed data interface  272 fiber node  180 fiber optics  99 ? 105 compared to copper wire  104 ? 105 fiber to the home  63  100  151 fibre channel  298 field  video  705 fifo  see first-in first-out packet scheduling  file transfer protocol  455  623 filtering  ingress  487 final delivery  email  643 finger table  chord  756 firewall  818 ? 821 stateful  819 first-come first-served packet scheduling  412 first-generation mobile phone network  166 ? 170 first-in first-out packet scheduling  412 fixed wireless  11 flag byte  198 flash crowd  747  748 fletcher ? s checksum  212 flooding algorithm  368 ? 370 flow control  35  201 ? 202 transport layer  522 ? 527 flow specification  416 footprint  satellite  119 forbidden region  514 ? 515 foreign agent  388  487 form  web  667 ? 670 forward error correction  203  715 forwarding  363 assured  423 ? 424 expedited  422 ? 423 forwarding algorithm  27 forwarding equivalence class  472 fourier analysis  90 fourier series  90 fourier transform  135  702 fragment frame  307 packet  433 fragmentation  packet  432 ? 436 frame  194 acknowledgement  43 beacon  307 data  43 frame bursting  ethernet  294 frame fragment  307 frame header  218 frame structure bluetooth  325 ? 327 ieee 802.11  309 ? 310 ieee 802.16  319 ? 320 framing  197 ? 201 free-rider  bittorrent  752 free-space optics  114 freedom of speech  863 ? 865 frequency  electromagnetic spectrum  106 frequency division duplex  169  317 frequency division multiplexing  132 ? 135 frequency hopping  bluetooth  324 frequency hopping spread spectrum  107 frequency masking  psychoacoustics  703 frequency reuse  65 frequency selection  dynamic  312 frequency shift keying  130 freshness of messages  778 front end  web server  739 fsk  see frequency shift keying  ftp  see file transfer program  ftth  see fiber to the home  full-duplex link  97 future of tcp  581 ? 582 fuzzball  59 index 915 g g.711 standard  728 g.dmt  149 g.lite  150 gatekeeper  multimedia  728 gateway  28 application level  819 default  469 media  68 multimedia  728 gateway gprs support node  68 gateway mobile switching center  68 gen 2 rfid  327 ? 331 general packet radio service  68 generator polynomial  213 geo  see geostationary earth orbit  geostationary earth orbit  117 geostationary satellite  117 ggsn  see gateway gprs support node  gigabit ethernet  293 ? 296 gigabit-capable pon  151 global positioning system  12  121 global system for mobile communication  65  170 ? 174 globalstar  122 gmail  15 gmsc  see gateway mobile switching center  go-back-n protocol  232 ? 239 goodput  393  531 gpon  see gigabit-capable pon  gprs  see general packet radio service  gps  see global positioning system  gratuitous arp  469  487 gray  elisha  139 gray code  132 group  153 group  telephone hierarchy  153 gsm  see global system for mobile communication  guard band  133 guard time  135 guided transmission media  85 ? 105  95 ? 105 h h.225 standard  729 h.245 standard  729 h.264 standard  710 h.323 compared to sip  733 ? 734 standard  728 ? 731 half-duplex link  97 hamming code  206 ? 207 hamming distance  205 handoff  68 ? 69  168 hard  178 soft  178 handover  see handoff  hard-decision decoding  208 harmonic  90 hashed message authentication code  817 hdlc  see high-level data link control  hdtv  see high-definition television  headend  cable  63  179 header  625 email  625 ethernet  282 ipv4  439 ? 442 ipv6  458 ? 463 ipv6 extension  461 ? 463 packet  31 tcp segment  557 ? 560 header compression  593 ? 595 robust  594 header prediction  592 helper application  browser  654 hertz  106 hertz  heinrich  106 hf rfid  74 hfc  see hybrid fiber coax  hidden terminal problem  278 hierarchical routing  378 ? 380 high-definition television  705 high-level data link control  199  246 high-water mark  719 history of the internet  54 ? 61 hlr  see home location register  hmac  see hashed message authentication code  home agent  387  486 home location  386 home location register  171 home network  6 ? 10 home subscriber server  69 hop-by-hop backpressure  400 ? 401 host  23 mobile  386 host design for fast networks  586 ? 590 hosting  64 916 index hot-potato routing  484 hotspot  11 hss  see home subscriber server  html  see hypertext markup language  http  see hypertext transfer protocol  https  see secure hypertext transfer protocol  hub  340 ? 342 compared to bridge and switch  340 ? 342 ethernet  288 satellite  119 hybrid fiber coax  180 hyperlink  648 hypertext  647 hypertext markup language  663 ? 670 attribute  664 directive  663 tag  663 ? 666 hypertext transfer protocol  45  649  651  683 ? 693 conditional get  691 connection  684 ? 686 connection reuse  684 method  686 ? 688 parallel connection  686 persistent connection  684 scheme  650 secure 853 hz  see hertz  i iab  see internet activities board  icann  see internet corporation for assigned names and number  icmp  see internet control message protocol  idea  see international data encryption algorithm  ieee 802.11  19  299 ? 312 architecture  299 ? 301 association  311 authentication  311 comparison with ieee 802.16  313 ? 314 data delivery service  312 disassociation  311 distribution service  311 frame structure  309 ? 310 integration service  312 mac sublayer  299 ? 312 mac sublayer protocol  303 ? 309 ieee 802.11  continued  physical layer  301 ? 303 privacy service  312 procotol stack  299 ? 301 reassociation  311 security  823 ? 826 services  311 ? 312 transmit power control  312 ieee 802.11a  302 ieee 802.11b  17  301 ? 302 ieee 802.11g  203 ieee 802.11i  823 ieee 802.11n  302 ? 303 ieee 802.16  179  313 ? 320 architecture  314 ? 315 comparison with ieee 802.11  313 ? 314 frame structure  319 ? 320 mac sublayer protocol  317 ? 319 physical layer  316 ? 317 protocol stack  314 ? 315 ranging  317 ieee 802.1q  346 ? 349 ieee 802.1x  824 ieee  see institute of electrical and electronics engineers  ietf  see internet engineering task force  igmp  see internet group management protocol  ike  see internet key exchange  imap  see internet message access protocol imp  see interface message processor  improved mobile telephone system  166 imt-2000  174 ? 175 imts  see improved mobile telephone system  in-band signaling  155 industrial  scientific  medical bands  70  112 inetd  554 infrared data association  114 infrared transmission  114 ingress filtering  487 initial connection protocol  511 initialization vector  788 input form  web  667 ? 670 instant messaging  8 institute of electrical and electronics engineers  79 integrated services  418 ? 421 integration service  ieee 802.11  312 intellectual property  867 interdomain protocol  431 interdomain routing  474 interexchange carrier  143 index 917 interface  30 air  66  171 interface message processor  56 ? 57 interior gateway protocol  431  474 interlacing  video  705 interleaving  716 internal router  476 international data encryption algorithm  842 international mobile telecommunication-2000  174 ? 175 international standard  78 ? 79 international standard is-95  170 international standards organization  78 international telecommunication union  77 internet  2  28 architecture  61 ? 64 backbone  63 cable  180 ? 182 control protocols  465 ? 470 daemon  554 history  54 ? 61 interplanetary  18 key exchange  815 message access protocol  644 ? 645 multicasting  484 ? 488 protocol version 4  439 ? 455 protocol version 6  455 ? 465 radio  721 tcp/ip layer  46 ? 47 internet activities board  81 internet architecture board  81 internet control message protocol  47 internet corporation for assigned names and numbers  444  612 internet engineering task force  81 internet exchange point  63  480 internet group management protocol  485 internet over cable  180 ? 182 internet protocol  ip   47  438 ? 488 cidr  447 ? 449 classful addressing  449 ? 451 control  465 ? 470 control message  47 control protocols  465 ? 470 dotted decimal notation  443 group management  485 ip addresses  442 ? 455 message access  644 ? 645 mobile  485 ? 488 subnet  444 ? 446 internet protocol  continued  version 4  439 ? 442 version 5  439 version 6  455 ? 465 version 6 controversies  463 ? 465 version 6 extension headers  461 ? 463 version 6 main header  458 ? 461 internet protocol version 4  439 ? 455 internet protocol version 6  455 ? 465 internet research task force  81 internet service provider  26  62 internet society  81 internet standard  82 internet telephony  698  725 internetwork  25  28 ? 29  424 ? 436 internetwork routing  431 ? 432 internetworking  34  424 ? 436 network layer  19  424 ? 436 internetworking network layer  424 ? 436 interoffice trunk  141 interplanetary internet  18 intradomain protocol  431 intradomain routing  474 intranet  64 intruder  security  767 inverse multiplexing  527 ip  see internet protocol  ip address  442 ? 455 cidr  447 ? 449 classful  449 ? 451 nat  451 ? 455 prefix  443 ? 444 ip security  814 ? 818 transport mode  815 tunnel mode  815 ip telephony  5 ip television  9  721 ipsec  see ip security  iptv  see ip television  ipv4  see internet protocol  version 4  ipv5  see internet protocol  version 5  ipv6  see internet protocol  version 6  irda  see infrared data association  iridium  121 irtf  see internet research task force  is  see international standard  is-95  170 is-is  378  474 isakmp  see internet security association and key management protocol  918 index ism  see industrial  scientific  medical bands  iso  see international standards organization  isp  see internet service provider  isp network  26 iterative query  622 itu  see international telecommunication union  iv  see initialization vector  ixc  see interexchange carrier  ixp  see internet exchange point  j java applet security  857 ? 858 java virtual machine  678 java virtual machine  857 javascript  676  859 javaserver page  675 jitter  406  698 jitter control  550 ? 552 joint photographic experts group  706 jpeg  see joint photographic experts group  jpeg standard  706 ? 709 jsp  see javaserver page  jumbo frame  ethernet  296 jumbogram  462 jvm  see java virtual machine  k karn ? s algorithm  571 kdc  see key distribution center  keepalive timer  tcp  571 kepler ? s law  116 kerberos  838 ? 840 realm  840 kerckhoff ? s principle  768 key chord  754 cryptographic  767 key distribution center  807  828 authentication using  835 ? 836 key escrow  861 keystream  790 keystream reuse attack  791 known plaintext attack  769 l l2cap  see logical link control adaptation protocol  label edge router  472 label switched router  472 label switching  360  470 ? 474 lamarr  hedy  107 ? 108 lan  see local area network  lan  virtual  21 lata  see local access and transport area  layer application  45  47 ? 48  611 ? 758 data link  193 ? 251 ieee 802.11 physical  301 ? 303 ieee 802.16 physical  316 ? 317 network  29  355 ? 489 physical  89 ? 187 session  44 ? 45 transport  44  495 ? 606 lcp  see link control protocol  ldpc  see low-density parity check  leaky bucket algorithm  397  407 ? 411 learning bridge  334 ? 337 lec  see local exchange carrier  leecher  bittorrent  752 leo  see low-earth orbit satellite  ler  see label edge router  level  network  29 light transmission  114 ? 116 limited-contention protocol  274 ? 277 line code  126 linear code  204 linear cryptanalysis  793 link asynchronous connectionless  325 bluetooth  324 full-duplex  97 half-duplex  97 synchronous connection-oriented  325 link control protocol  245 link encryption  765 link layer bluetooth  324 ? 325 tcp/ip 46 link state routing  373 ? 378 little-endian computer  429 llc  see logical link control  load balancing  web server  740 load shedding  395  401 ? 403 index 919 load-shedding policy milk  401 wine  401 local access and transport area  142 local area network  19 virtual  342 ? 349 local central office  21 local exchange carrier  142 local loop  140  144 ? 152 local number portability  144 logical link control  283  310 logical link control adaptation protocol  323 long fat network  595 ? 599 long-term evolution  69  179  314 longest matching prefix algorithm  448 lossless audio compression  701 lossy audio compression  701 lottery algorithm  112 low-density parity check  209 low-earth orbit satellite  121  121 ? 123 low-water mark  718 lsr  see label switched router  lte  see long term evolution  luminance  video  706 m m-commerce  12 mac  see medium access control  mac sublayer protocol  303 ? 309  317 ? 319 ieee 802.11  303 ? 309 ieee 802.16  317 ? 319 maca  see multiple access with collision avoidance  macroblock  mpeg  711 magnetic media  95 ? 96 maho  see mobile assisted handoff  mail server  624 mail submission  624  637  641 mailbox  625 mailing list  625 maintenance  route  391 ? 392 man  see metropolitan area network  man-in-the-middle attack  835 manchester encoding  127 manet  see mobile ad hoc network  markup language  663  680 marshaling parameters  544 max-min fairness  532 ? 534 maximum segment size  tcp  559 maximum transfer unit  433  556 maximum transmission unit path  433 maxwell  james clerk  105 mci  110 md5  804 ? 807 measurements of network performance  584 ? 586 media gateway  68 medium access control sublayer  43  257 ? 350  320 ? 327 bluetooth  320 ? 327 broadband wireless  312 ? 320 channel allocation  258 ? 261 ethernet  280 ? 299 ieee 802.11  299 ? 312 multiple access protocols  261 ? 280 wireless lans  299 ? 312 medium-earth orbit satellite  121 meo  see medium-earth orbit satellite  merkle  ralph  796 message digest  800 ? 801 message disposition  628 message format  630 message header  688 ? 690 message integrity check  825 message switching  600 message transfer  637 ? 643  642 message transfer agent  624 metafile  714 metcalfe  robert  6 method  http  686 ? 688 metric units  82 ? 83 metropolitan area network  23 mfj  see modified final judgment  mgw  see media gateway  mic  see message integrity check  michelson-morley experiment  281 microcell  168 microwave transmission  110 ? 114 middlebox  740 middleware  2 milk  load-shedding policy  401 mime  see multipurpose internet mail extension  mime type  652 ? 655 mimo  see multiple input multiple output  minislot  184 mirroring a web site  744 mobile ad hoc network  389 ? 392 mobile assisted handoff  174 920 index mobile code security  857 ? 860 mobile commerce  12 mobile host  386 routing  386 ? 389 mobile internet protocol  485 ? 488 mobile ip protocol  485 ? 488 mobile phone  164 ? 179 mobile phone system first-generation  166 ? 170 second-generation  170 ? 174 third-generation  65 ? 69  174 ? 179 mobile switching center  68  168 mobile telephone  164 ? 179 mobile telephone switching office  168 mobile telephone system  164 ? 179 mobile user  10 ? 13 mobile web  693 ? 695 mobile wireless  11 mockapetris  paul  52 modem  145 cable  63  183 ? 195 dial-up  62 v.32  146 v.34  146 v.90  147 modified final judgment  142 modulation  130 ? 132 amplitude shift keying  130 ? 131 bpsk  302 digital  125 discrete multitone  149 frequency shift keying  130 ? 131 phase shift keying  130 ? 131 pulse code  153 quadrature phase shift keying  131 trellis coded  146 monoalphabetic substitution cipher  770 mospf  see multicast ospf  motion picture experts group  709 mouse  737 mouse flow  737 mp3  702 mp4  702 mpeg  see motion picture experts group  mpeg compression  709 ? 712 frame types  712 mpeg-1  710 mpeg-2  710 mpeg-4  710 mpeg standards  709 ? 710 mpls  see multiprotocol label switching  msc  see mobile switching center  mss  see maximum segment size  mtso  see mobile telephone switching office  mtu  see maximum transfer unit  mu law  700 mu-law  153 multiaccess channel  257 multiaccess network  475 multicast ospf  383 multicast routing  382  382 ? 385 multicasting  17  283  382 internet  484 ? 488 multidestination routing  380 multihoming  481 multihop network  75 multimedia  697 ? 734  699 internet telephony  728 ? 734 jitter control  550 ? 552 live streaming  721 ? 724 mp3  702 ? 704 rtsp  715 streaming audio  699 ? 704 video on demand  713 ? 720 videoconferencing  725 ? 728 voice over ip  728 ? 734 multimode fiber  101 multipath fading  70  111 multiple access protocol  261 ? 280 multiple access with collision avoidance  279 multiple input multiple output  303 multiplexing  125  152 ? 160 endpoint  527 inverse  527 statistical  34 multiprotocol label switching  357  360  471 ? 474 multiprotocol router  429 multipurpose internet mail extension  632 ? 637 multithreaded web server  656 multitone  discrete  148 mutlimedia  streaming video  704 ? 712 n nagle ? s algorithm  566 name resolution  620 name server  619 ? 623 naming  see addressing  index 921 naming  secure  848 ? 853 nap  see network access point  nat  see network address translation  nat box  453 national institute of standards and technology  79  783 national security agency  782 nav  see network allocation vector  ncp  see network control protocol  near field communication  12 needham-schroeder authentication  836 ? 838 negotiation protocol  35 network ad hoc  70  299  389 ? 392 aloha  72 broadcast  17 cellular  65 delay-tolerant  599 ? 605 enterprise  19 first-generation mobile phone  166 ? 170 home  6 ? 10 local area  19 metropolitan area  23 multiaccess  475 multihop  75 passive optical  151 peer-to-peer  7 performance  582 ? 599 personal area  18 point-to-point  17 power-line  10  22 public switched telephone  68  139 scalable  34 second-generation mobile phone  170 ? 174 sensor  13  73 ? 75 social  8 stub  481 third-generation mobile phone  65 ? 69  174 ? 179 uses  3 ? 16 virtual circuit  358 virtual private  4  26 wide area  23 network accelerator  215 network access point  60 ? 61 network address translation  452 ? 455 network allocation vector  305 network architecture  31 network control protocol  245 network design issues  33 ? 35 network hardware  17 ? 29 network interface card  202  215 network interface device  149 network layer  43 ? 44  355 ? 489 congestion control  392 ? 404 design issues  355 ? 362 internet  436 ? 488 internetworking  424 ? 436 quality of service  404 ? 424 routing algorithms  362 ? 392 network neutrality  14 network overlay  430 network performance measurement  584 ? 586 network protocol  see protocol  network service access point  509 network service provider  26 network software  29 ? 41 network standardization  75 ? 82 nfc  see near field communication  nic  see network interface card  nid  see network interface device  nist  see national institute of standards and technology  node b  66 node identifier  754 non-return-to-zero inverted encoding  127 non-return-to-zero modulation  125 nonadaptive algorithm  363 ? 364 nonce  824 nonpersistent csma  267 nonpersistent web cookie  659 nonrepudiation  798 notification  explicit congestion  400 nrz  see non-return-to-zero modulation  nrzi  see non-return-to-zero inverted encoding  nsa  see national security agency  nsap  see network service access point  nsfnet  59 ? 61 nyquist frequency  94  146  153 o ofdm  see orthogonal frequency division multiplexing  ofdma  see orthogonal frequency division multiple access  one-time pad  772 ? 773 onion routing  863 open mail relay  642 922 index open shortest path first  378 open shortest path first routing  474 ? 479 open systems interconnection  41 ? 45 comparison with tcp/ip  49 ? 51 open systems interconnection  application layer  45 critique  51 ? 53 data link layer  43 network layer  43 ? 44 physical layer  43 presentation layer  45 reference model  41 ? 45 session layer  44 ? 45 transport layer  44 optimality principle  364 ? 365 organizationally unique identifier  283 orthogonal frequency division multiple access  316 orthogonal frequency division multiplexing  71  133 ? 134  302 orthogonal sequence  136 osi  see open systems interconnection  ospf  see open shortest path first routing  ospf  see open shortest path first routing  oui  see organizationally unique identifier  out-of-band signaling  155 overlay  430 network  430 overprovisioning  404 p p-box  cryptographic  779 p-frame  611 ? 712 p-persistent csma  267 p2p  see peer-to-peer network  packet  17  36 packet encapsulation  387 packet filter  819 packet fragmentation  432 ? 436  433 packet header  31 packet over sonet  245 ? 248 packet scheduling  411 ? 414 packet switching  162 ? 164 store-and-forward  356 packet train  736 page  web  647 paging channel  174 pairing  bluetooth  320 pan  see personal area network  par  see positive acknowledgement with retransmission protocol  parallel connection  http  686 parameters  marshaling  544 parity bit  210 parity packet  716 passband  91 passband signal  130 passband transmission  125  130 ? 132 passive optical network  151 passive rfid  73 passkey  826 path  autonomous system  481 certification  812 maximum transmission unit  433 path diversity  70 path loss  109 path maximum transmission unit discovery  433 path mtu discovery  556 path vector protocol  481 paws  see protection against wrapped sequence numbers  pcf  see point coordination function  pcm  see pulse code modulation  pcs  see personal communications service  peer  29  63 peer-to-peer network  7  14  735  748 ? 753 bittorrent  750 ? 753 content distribution  750 ? 753 peering  481 per hop behavior  421 perceptual coding  702 performance  tcp  582 ? 599 performance issues in networks  582 ? 599 performance measurements  network  584 ? 586 perlman  radia  339 persistence timer  tcp  571 persistent and nonpersistent csma  266 ? 268 persistent connection  http  684 persistent cookie  web  659 personal area network  18 personal communications service  170 pgp  see pretty good privacy  phase shift keying  130 phishing  16 phone  see telephone  photon  774 ? 776  872 php  674 index 923 physical layer  89 ? 187 cable television  179 ? 186 code division multiplexing  135 ? 138 communication satellites  116 ? 125 fiber optics  99 ? 104 frequency division multiplexing  132 ? 135 ieee 802.11  301 ? 303 ieee 802.16  316 ? 317 mobile telephones  164 ? 179 modulation  125 ? 135 open systems interconnection  43 telephone system  138 ? 164 time division multiplexing  135 twisted pairs  96 ? 98 wireless transmission  105 ? 116 physical medium  30 piconet  bluetooth  320 piggybacking  226 pim  see protocol independent multicast  ping  467 pipelining  233 pixel  704 pki  see public key infrastructure  plain old telephone service  148 plaintext  767 playback point  551 plug-in  browser  653  859 podcast  721 poem  spanning tree  339 point coordination function  304 point of presence  63  143 point-to-point network  17 point-to-point protocol  198  245 poisoned cache  849 poisson model  260 polynomial generator  213 polynomial code  212 pon  see passive optical network  pop  see point of presence  pop3  see post office protocol  port destination  453 ? 454 ethernet  20 source  453 tcp  553 transport layer  509 udp  542 portmapper  510 positive acknowledgement with retransmision protocol  225 post  telegraph & telephone administration  77 post office protocol  version 3  644 pots  see plain old telephone service  power  532 power law  737 power-line network  10  22  98 ? 99 power-save mode  307 power-line network  10  22 ppp  see point-to-point protocol  ppp over atm  250 pppoa  see ppp over atm  preamble  200 prediction  header,592 predictive encoding  548 prefix  ip address  443 ? 444 premaster key  854 presentation layer  45 pretty good privacy  842 ? 846 primitive  service  38 ? 40 principal  security  773 privacy  860 ? 861 privacy amplification  776 privacy service  ieee 802.11  312 private key ring  845 private network  virtual  26  821 process server  511 procotol stack  ieee 802.11  299 ? 301 product cipher  780 product code  electronic  327 profile  bluetooth  321 progressive video  705 promiscuous mode ethernet  290 proposed standard  81 protection against wrapped sequence numbers  516  560 protocol  29 1-bit sliding window  229 ? 232 adaptive tree walk  275 ? 277 address resolution  467 ? 469 address resolution gratuitous  469 address resolution protocol proxy  469 authentication protocols  827 ? 841 bb84  773 binary countdown  272 ? 273 bit-map  270 ? 271 bluetooth  322 ? 323 bluetooth protocol stack  322 ? 323 border gateway  432  479 ? 484 bundle  603 ? 605 carrier sense multiple access  266 ? 269 challenge-response  828 924 index protocol  continued  collision-free  269 ? 273 csma  266 ? 269 data link  215 ? 250 datagram congestion control  503 delay-tolerant network  603 ? 605 diffie-hellman  833 ? 835 distance vector multicast routing  383 dotted decimal notation internet  443 dvmr  383 dynamic host configuration  470 extensible authentication  824 exterior gateway  431  474 file transfer  455  623 go-back-n  232 ? 239 hypertext transfer  45  649  651  683 ? 693 ieee 802.11  299 ? 312 ieee 802.16  312 ? 320 initial connection  511 interdomain  431 interior gateway  431  474 ip  438 ? 488 intradomain  431 limited-contention  274 ? 277 link control  245 logical link control adaptation  323 long fat network  595 ? 599 mac  261 ? 280 mobile ip  485 ? 488 multiple access  261 ? 280 multiprotocol label switching  360  471 ? 474 multiprotocol router  429 negotiation  35 network  29 network control  245 packet over sonet  245 ? 248 path vector  481 point-to-point  198  245 pop3  644 positive acknowledgement with retransmission  225 real time streaming  715 real-time  606 real-time transport  546 ? 550 relation to services  40 request-reply  37 reservation  271 resource reservation  418 selective repeat  239 ? 244 session initiation  731 ? 735 protocol  continued  simple internet plus  457 simple mail transfer  625  638 ? 641 sliding-window  226 ? 244  229 ? 232  522 slip  245 soap  682 stop-and-wait  221 ? 226  522 stream  503  527 stream control transmission  503  527 subnet internet  444 ? 446 tcp  see transmission control protocol  temporary key integrity  825 tkip  825 token passing  271 ? 272 transport  507 ? 530  541 ? 582 tree walk  275 ? 277 udp  541 ? 552 utopia  220 ? 222 wireless application  693 wireless lan  277 ? 280 protocol 1  utopia   220 ? 222 protocol 2  stop-and-wait   221 ? 222 protocol 3  par   222 ? 226 protocol 4  sliding window   229 ? 232 protocol 5  go-back-n   232 ? 239 protocol 6  selective repeat   239 ? 244 protocol hierarchy  29 ? 33 protocol independent multicast  385  485 protocol layering  34 protocol stack  31 ? 32 bluetooth  322 ? 323 h.323  728 ? 731 ieee 802.11  299 ? 301 ieee 802.16  314 ? 315 osi  41 ? 45 tcp/ip  45 ? 48 proxy arp  469 proxy caching  web  692 psk  see phase shift keying  pstn  see public switched telephone network  psychoacoustic audio encoding  702 ? 703 ptt  see post  telegraph & telephone administration  public switched telephone network  68  138 ? 164  139 public-key authentication using  840 ? 841 public-key cryptography  793 ? 797 other algoirhtms  796 ? 797 rsa  794 ? 796 public-key infrastructure  810 ? 813 directory  812 public-key ring  845 index 925 public-key signature  799 ? 800 pulse code modulation  153 pure aloha  262 ? 265 push-to-talk system  166 q q.931 standard  729 qam  see quadrature amplitude modulation  qos  see quality of service  qos traffic scheduling  see transmit power control  qpsk  see quadrature phase shift keying  quadrature amplitude modulation  132 quadrature phase shift keying  131 quality of service  35  404 ? 424  411 ? 414 admission control  415 ? 418 application requirements  405 ? 406 differentiated services  421 ? 424 integrated services  418 ? 421 network layer  404 ? 424 requirements  405 ? 406 traffic shaping  407 ? 411 quality of service routing  415 quantization  mpeg  707 quantization noise  700 quantum cryptography  773 ? 776 qubit  774 queueing delay  164 queueing theory  259 quoted-printable encoding  634 r ra  see regional authority  radio access network  66 radio frequency identification  10  327 ? 332 active  74 backscatter  329 generation 2  327 ? 331 hf  74 lf  74 passive 74 uhf  73 ? 74 radio network controller  66 radio transmission  109 ? 110 random access channel  174  257 random early detection  403 ? 404 ranging  184 ieee 802.16  317 ras  see registration/admission/status  rate adaptation  301 rate anomaly  309 rate regulation  sending  535 ? 539 real-time audio  697 real-time conferencing  724 ? 734 real-time protocol  606 real-time streaming protocol  715 real-time transport protocols  546 ? 550 real-time video  697 realm  kerberos  840 reassociation  ieee 802.11  311 receiving window  228 recovery clock  127 ? 129 crash  527 ? 530 fast  578 rectilinear basis  in quantum cryptography  774 recursive query  621 red  see random early detection  redundancy  in quantum cryptography  777 ? 778 reed-solomon code  208 reference model  41 ? 54  open systems interconnection 41 ? 45 tcp/ip  45 ? 51 reflection attack  829 region  in a network  379 regional authority  811 registrar  613 registration/admission/status  729 relation of protocols to services  40 relation of services to protocols  40 reliable byte stream  502 remailer anonymous  861 ? 863 cypherpunk  862 remote login  61  405 ? 406 remote procedure call  543 ? 546 marshaling parameters  544 stubs  544 rendezvous point  384 repeater  281  340 ? 342 replay attack  836 request for comments  81 request header  688 request to send  279 request-reply protocol  37 926 index request-reply service  37 reservation protocol  271 resilient packet ring  271  272 resolver  612 resource record  616 resource record set  851 resource reservation protocol  418 resource sharing  3 response header  688 retransmission  fast  577 retransmission timeout  tcp  568 retransmission timer  570 ? 571 retrospective on ethernet  298 ? 299 reverse lookup  617 reverse path forwarding algorithm  381  419 revocation certificate  812 ? 813 rfc  see request for comments  rfc 768  541 rfc 793  552 rfc 821  625 rfc 822  625  630  632  633  635  636  843  862 rfc 1058  373 rfc 1122  553 rfc 1191  556 rfc 1323  516  596 rfc 1521  634 rfc 1663  246 rfc 1700  441 rfc 1939  644 rfc 1958  436 rfc 2018  553 rfc 2109  659 rfc 2326  719 rfc 2364  250 rfc 2410  814 rfc 2440  843 rfc 2459  809 rfc 2535  851  853 rfc 2581  553 rfc 2597  423 rfc 2615  247 rfc 2616  683  689 rfc 2854  635 rfc 2883  560  580 rfc 2965  689 rfc 2988  553  570 rfc 2993  455 rfc 3003  635 rfc 3022  452 rfc 3023  635 rfc 3119  717 rfc 3168  553  558  581 rfc 3174  804 rfc 3194  460 rfc 3246  422 rfc 3261  731 rfc 3344  487 rfc 3376  485 rfc 3390  574 rfc 3501  644 rfc 3517  580 rfc 3550  549 rfc 3748  824 rfc 3775  488 rfc 3782  580 rfc 3875  674 rfc 3963  488 rfc 3986  652 rfc 4120  838 rfc 4306  815 rfc 4409  642 rfc 4614  553 rfc 4632  447 rfc 4838  601 rfc 4960  582 rfc 4987  562 rfc 5050  603 rfc 5246  856 rfc 5280  809 rfc 5321  625  633  639 rfc 5322  625  630  631  632  633  760 rfc 5681  581 rfc 5795  595 rfid  see radio frequency identification  rfid backscatter  74 rfid network  73 ? 75 rijmen  vincent  784 rijndael  784 ? 787 rijndael cipher  312 ring resilient packet  271 token  271 rivest  ron  773  792  795  797  804 rivest shamir adleman algorithm  794 ? 796 rnc  see radio network controller  robbed-bit signaling  155 roberts  larry  56 robust header compression  594 rohc  see robust header compression  root name server  620 index 927 routing algorithm  27  34  362  362 ? 392 ad hoc network  389 ? 392 adaptive  364 anycast  385 ? 386 aodv  389 bellman-ford  370 broadcast  380 ? 382 class-based  421 classless interdomain  447 ? 449 distance vector multicast protocol  383 dynamic  364 hierarchical  378 ? 380 hot-potato  484 interdomain  474 internetwork  431 ? 432 intradomain  474 link state  373 ? 378 mobile host  386 ? 389 multicast  382 ? 385 multidestination  380 network layer  362 ? 392 onion  863 ospf  464 ? 479 distance vector multicast  383 quality of service  415 session  362 shortest path  366 ? 368 static  364 traffic-aware  395 ? 396 triangle  388 wormhole  336 routing policy  432 rpc  see remote procedure call  rpr  see resilient packet ring  rrset  see resource record set  rsa  see rivest shamir adleman algorithm  rsvp  see resource reservation protocol  rtcp  see real-time transport control protocol  rto  see retransmission timeout  tcp  rtp  see real-time transport protocol  rts  see request to send  rtsp  see real time streaming protocol  run-length encoding  709 s s-box  cryptographic  779 s/mime  846 sa  see security association  sack  see selective acknowledgement  sandbox  858 satellite communication  116 ? 125 geostationary  117 low-earth orbit  121 ? 123 medium-earth orbit  121 satellite footprint  119 satellite hub  119 sawtooth  tcp  579 scalable network  34 scatternet  bluetooth  320 scheduling  packet  411 ? 414 scheme  http  650 sco  see synchronous connection oriented link  scrambler  128 sctp  see stream control transmission protocol  sdh  see synchronous digital hierarchy  second-generation mobile phone network  170 ? 174 sectored antenna  178 secure dns  850 ? 853 secure http  853 secure naming  848 ? 853 secure pairing bluetooth  325 secure simple pairing  bluetooth  325 secure sockets layer  853 ? 857 secure/mime  846 security bluetooth  826 ? 827 communication  813 ? 827 email  841 ? 846 ieee 802.11  823 ? 826 ip  814 ? 818 java applet  857 ? 858 mobile code  857 ? 860 social issues  860 ? 869 transport layer  856 web  856 ? 860 wireless  822 ? 827 security association  815 security by obscurity  768 security principal  773 security threats  847 ? 848 seeder  bittorrent  751 segment  499  542 segment header  tcp  557 ? 560 selective acknowledgement  tcp  560  580 selective repeat protocol  239 ? 244 self-similarity  737 928 index sending rate  regulation  535 ? 539 sending window  228 sensor network  13  73 ? 75 serial line internet protocol  245 server  4 server farm  64  738 ? 741 server side on the web  655 ? 658 server side web page generation  673 ? 676 server stub  544 service connection-oriented  35 ? 38  359 ? 361 connectionless  35 ? 38  358 ? 359 service level agreement  407 service primitive  38 ? 40 service ieee 802.11  311 ? 312 integrated  418 ? 421 provided by transport layer  495 ? 507 provided to the transport layer  356 ? 357 relation to protocols  40 service user  transport  497 serving gprs support node  68 session  44 session initiation protocol  731  731 ? 735 compared to h.323  733 ? 734 session key  828 session layer  44 ? 45 session routing  362 set-top box  4  723 sgsn  see serving gprs support node  sha  see secure hash algorithm  shannon  claude  94 ? 95 shannon limit  100  106  146 shared secret  authentication using  828 ? 833 short interframe spacing  308 short message service  12 shortest path routing  366 ? 368 sifs  see short interframe spacing  signal  balanced  129 ? 130 signal-to-noise ratio  94 signaling common-channel  155 in-band  155 robbed-bit 155 signature block  629 signatures  digital  797 ? 806 signing  code  858 silly window syndrome  567 sim card  69  171 simple internet protocol  plus  457 simple mail transfer protocol  625  638 ? 641 simple object access protocol  682 simplex link  97 single-mode fiber  101 sink tree  365 sip  see session initiation protocol sipp  see simple internet protocol plus  skin  player  715 sla  see service level agreement  sliding window  tcp  565 ? 568 sliding window protocol  1-bit  229 ? 232 226 ? 244  229 ? 232  522 slip  see serial line internet protocol  slot  264 slotted aloha  264 ? 266  265 slow start  tcp  574 threshold  576 smart phone  12 smiley  623 sms  see short message service  smtp  see simple mail transfer protocol  snail mail  623 snr  see signal-to-noise ratio  soap  see simple object access protocol  social issues  14 ? 16 security  860 ? 869 social network  8 socket  59 berkeley  500 ? 507 tcp  553 socket programming  503 ? 507 soft handoff  178 soft-decision decoding  208 soliton  103 sonet  see synchronous optical network  source port  453 spam  623 spanning tree  382 spanning tree bridge  337 ? 340 spanning tree poem  339 spe  see synchronous payload envelope  spectrum allocation  182 ? 183 spectrum auction  112 speed of light  106 splitter  149 spoofing  dns  848 ? 850 spot beam  119 spread spectrum  135 direct sequence  108 frequency hopping  107 index 929 sprint  111 spyware  662 ssl  see secure sockets layer  sst  see structured stream transport  stack  protocol  31 ? 32 standard de facto  76 de jure  76 stateful firewall  819 static channel allocation  258 ? 261 static page  web  649 static routing  364 static web page  649  662 ? 663 station keeping  118 statistical multiplexing  34 statistical time division multiplexing  135 stdm  see statistical time division multiplexing  steganography  865 ? 867 stop-and-wait protocol  221 ? 226  522 store-and-forward packet switching  36  356 stream cipher mode  790 ? 791 stream control transmission protocol  503  527 streaming audio and video  697 ? 734 streaming live media  721 ? 724 streaming media  699 streaming stored media  713 ? 720 strowger gear  161 structured p2p network  754 structured stream transport  503 sts-1  see synchronous transport signal-1  stub client  544 server  544 stub area  477 stub network  481 style sheet  670 ? 671 sublayer  medium access control  257 ? 350 subnet  24  444 ? 446 subnet internet protocol  444 ? 446 subnet mask  443 subnetting  444 subscriber identity module  69  171 substitution cipher  769 ? 770 superframe  extended  154 supergroup  153 supernet  447 swarm  bittorrent  751 switch  24 compared to bridge and hub  340 ? 342 ethernet  20  289 switched ethernet  20  280  288 ? 290 switching  161 ? 164 circuit  161 ? 162 cut-through  36  336 data link layer  332 ? 349 label  360  470 ? 474 message  600 packet  162 ? 164 store-and-forward  36 switching element  24 symbol  126 symbol rate  127 symmetric-key cryptography  778 ? 793 aes  783 ? 787 cipher feedback mode  789 ? 790 counter mode  791 ? 792 des  780 ? 782 electronic code book mode  787 ? 788 rijndael  784 ? 787 stream cipher mode  790 ? 791 triple des  782 ? 783 symmetric-key signature  798 ? 799 syn cookie  tcp  561 syn flood attack  561 synchronization  44 synchronous connection-oriented link  325 synchronous digital hierarchy  156 ? 159 synchronous optical network  156 ? 159 synchronous payload envelope  157 synchronous transport signal-1  157 system  distributed  2 systematic code  204 t t1 carrier  154 ? 155 t1 line  128  154 tag  html  663 ? 666 tag switching  471 tail drop  412 talkspurt  551 tandem office  141 tcg  see trusted computing group  tcm  see trellis coded modulation  tcp  see transmission control protocol  tdd  see time division duplex  tdm  see time division multiplexing  telco  61 930 index telephone cordless  165 mobile  164 ? 179 smart  12 telephone system  138 ? 164 end office  140 guard band  133 guard time  135 local loop  144 ? 152 mobile  164 ? 179 modem  145 modulation  130 ? 132 point of presence  143 politics  142 ? 144 structure  139 ? 142 switching  161 ? 164 tandem office  141 toll office  141 trunk  152 ? 160 telephone trunk  152 ? 160 television cable  179 ? 186 community antenna  179 ? 180 temporal masking  703 temporary key integrity protocol  825 terminal  voip  728 text messaging  12 texting  12 third generation partnership project  76 third-generation mobile phone network  65 ? 69  174 ? 179 third-party web cookie  662 threats  security  847 ? 848 three bears problem  450 three-way handshake  516 tier 1 isp  64 tier 1 network  437 time division duplex  316 ? 317 time division multiplexing  135  154 ? 156 time slot  135 timer management  tcp  568 ? 571 timestamp  tcp  560 timing wheel  593 tit-for-tat strategy  bittorrent  752 tkip  see temporary key integrity protocol  tls  see transport layer security  token  271 token bucket algorithm  397  408 ? 411 token bus  272 token management  44 token passing protocol  271 ? 272 token ring  271 toll connecting trunk  141 toll office  141 top-level domain  613 torrent  bittorrent  750 tpdu  see transport protocol data unit  tpm  see trusted platform module  traceroute  466 tracker  bittorrent  751 traffic analysis  815 traffic engineering  396 traffic policing  407 traffic shaping  407  407 ? 411 traffic throttling  398 ? 401 traffic-aware routing  395 ? 396 trailer  32  194  216  250  326 transcoding  694 transfer agent  624 ? 625  630 ? 631 transit service  480 transmission baseband  125 light  14 ? 116 passband  125 wireless  105 ? 116 transmission control protocol  tcp   47  552 ? 582 acknowledgement clock  574 application layer  47 ? 48 comparison with osi  49 ? 51 congestion collapse  572 congestion control  571 ? 581 congestion window  571 connection establishment  560 ? 562 connection management  562 ? 565 connection release  562 critique  53 ? 54 cumulative acknowledgement  558  568 delayed acknowledgement  566 duplicate acknowledgement  577 fast recovery  578 fast retransmission  577 future  581 ? 582 introduction  552 ? 553 karn ? s algorithm  571 keepalive timer  571 link layer  46 maximum segment size  559 maximum transfer unit  556 nagle ? s algorithm  566 performance  582 ? 599 index 931 transmission control protocol  continued  persistence timer  571 port  553 reference model  45 ? 51 retransmission timeout  568 sawtooth  579 segment header  557 ? 560 selective acknowledgement  580 silly window syndrome  567 sliding window  565 ? 568 slow start  574 slow start threshold  576 socket  553 speeding up  582 ? 599 syn cookie  561 syn flood attack  561 timer management  568 ? 571 timestamp option  560 transport layer  47 urgent data  555 well-known port  553 window probe  566 window scale  560 transmission line  24 transmission media  guided  85 ? 105 transmission opportunity  309 transmit power control  ieee 802.11  312 transponder  116 transport  structured stream  503 transport entity  496 transport layer  44 addressing  509 ? 512 congestion control  530 ? 541 delay-tolerant networking  599 ? 605 error control  522 ? 527 flow control  522 ? 527 performance  582 ? 599 port  509 security  856 tcp  552 ? 582 tcp/ip  47 transport protocols  507 ? 530 transport service  495 ? 507 udp  541 ? 552 transport mode  ip security  815 transport protocol  507 ? 530  541 ? 582 design issues  507 ? 530 transport protocol data unit  499 transport service access point  509 transport service primitive  498 ? 500 transport service provider  497 transport service user  497 transposition cipher  771 ? 772 tree walk protocol  adaptive  275 ? 277 trellis-coded modulation  146 triangle routing  388 trigram  770 triple des  782 ? 783 trunk  telephone  152 ? 160 trust anchor  812 trusted computing  869 trusted platform module  869 tsap  see transport service access point  tunnel mode  ipsec  815 tunneling  387  429 ? 431 twisted pair  96 ? 97 unshielded  97 twitter  8 two-army problem  518 ? 519 txop  see transmission opportunity  u u-nii  see unlicensed national information infrastructure  ubiquitous computing  10 udp  see user datagram protocol  uhf rfid  73 ? 74 ultra-wideband  108 umts  see universal mobile telecommunications system  unchoked peer  bittorrent  752 unicast  385 unicasting  17  385 uniform resource identifier  652 uniform resource locator  650 uniform resource name  652  universal mobile telecommunications system  65  175 universal serial bus  128 unlicensed national information infrastructure  113 unshielded twisted pair  97 unstructured p2p network  754 upstream proxy  742 urgent data  555 uri  see uniform resource identifier  url  see scheme  urn  see uniform resource name  usb  see universal serial bus  932 index user  mobile  10 ? 13 user agent  624  626 user datagram protocol  47  541 ? 552  542  549 ? 550 port  542 real-time transmission  546 ? 552 remote procedure call  541 ? 543 rtp  547 ? 549 utopia protocol  220 ? 222 utp  see unshielded twisted pair  uwb  see ultra-wideband  v v.32 modem  146 v.34 modem  146 v.90 modem  147 v.92 modem  147 vacation agent  629 vampire tap  291 van allen belt  117 vc  see virtual circuit  very small aperture terminal  119 video interlaced  705 progressive  705 streaming  704 ? 712 video compression  706 video field  705 video on demand  713 video server  414  416 virtual circuit  249  358 ? 361 virtual circuit network  358 comparison with datagram network  361 ? 362 virtual lan  21  332  342 ? 349 virtual private network  4  26  431  821 ? 822 virtual-circuit network  358 virus  860 visitor location register  171 vlan  see virtual lan  vlr  see visitor location register  vocal tract  702 vocoder  701 vod  see video on demand  voice over ip  5  36  698  725  728 ? 734 voice signals  digitizing  153 ? 154 voice-grade line  93 voip  see voice over ip  vpn  see virtual private network  vsat  see very small aperture terminal  w w3c  see world wide web consortium  walled garden  723 walsh code  136 wan  see wide area network  wap  see wireless application protocol  watermarking  867 waveform coding  702 wavelength  106 wavelength division multiplexing  159 ? 160 wcdma  see wideband code division multiple access  wdm  see wavelength division multiplexing  wearable computer  13 web  see world wide web  web application  4 web browser  648 extension  859 ? 860 helper application  654 plug-in  653 ? 654  859 proxy  741 ? 742 webmail  645  645 ? 646 weighted fair queueing  414 well-known port  tcp  553 wep  see wired equivalent privacy  wfq  see weighted fair queueing  white space  113 whitening  781 wide area network  23  23 ? 27 wideband code division multiple access  65  175 wifi  see ieee 802.11  wifi alliance  76 wifi protected access  73  311 wifi protected access 2 312  823 wiki  8 wikipedia  8 wimax  see ieee 802.16  wimax forum  313 window probe  tcp  566 window scale  tcp  560 wine  load-shedding policy  401 wired equivalent privacy  73  311  823 index 933 wireless broadband  312 ? 320 fixed  11 wireless application protocol  693 wireless issues  539 ? 541 wireless lan  39  277 ? 280  299 ? 312 wireless lan  see ieee 802.11  wireless lan protocol  277 ? 280 wireless lan protocols  277 ? 280 wireless router  19 wireless security  822 ? 827 wireless transmission  105 ? 116 work factor  cryptographic  768 world wide web  2  646 ? 697 ajax  679 ? 683 architectural overview  647 ? 649 caching  690 ? 692 cascading style sheets  670 ? 672 client side  649 ? 652 client-side page generation  676 ? 678 connections  684 ? 686 cookies  658 ? 662 crawling  696 dynamic pages  672 forms  667 ? 680 html  663 ? 667 http  683 ? 684 message headers  688 ? 690 methods  686 ? 688 mime types  652 ? 655 mobile web  693 ? 695 page  647 proxy  692  741 ? 743 search  695 ? 697 security  856 ? 860 tracking  661 server side  655 ? 658 server-side page generation  673 ? 676 static web pages  662 ? 672 world wide web consortium  82  647 wormhole routing  336 wpa  see wifi protected access  wpa2  see wifi protected access 2  x x.400 standard  629 x.509  809 ? 810 xhtml  see extended hypertext markup language  xml  see extensible markup language  xslt  see extensible stylesheet language transformation  z zipf ? s law  737 zone dns  619 ? 620 multimedia  728 also by andrew s tanenbaum modern operating systems  3rd ed this worldwide best-seller incorporates the latest developments in operating systems the book starts with chapters on the principles  including processes  memory management  file systems  i/o  and so on then it goes into three chapter-long case studies  linux  windows  and symbian tanenbaum ? s experience as the designer of three operating systems  amoeba  globe  and minix  gives him a background few other authors can match  so the final chapter distills his long experience into advice for operating system designers also by andrew s tanenbaum and albert s woodhull operating systems  design and implementation  3rd ed all other textbooks on operating systems are long on theory and short on practice this one is different in addition to the usual material on processes  memory management  file systems  i/o  and so on  it contains a cd-rom with the source code  in c  of a small  but complete  posixconformant operating system called minix 3  see www.minix3.org   all the principles are illustrated by showing how they apply to minix 3 the reader can also compile  test  and experiment with minix 3  leading to in-depth knowledge of how an operating system really works also by andrew s tanenbaum structured computer organization  5th ed a computer can be structured as a hierarchy of levels  from the hardware up through the operating system this book treats all of them  starting with how a transistor works and ending with operating system design no previous experience with either hardware or software is needed to follow this book  however  as all the topics are self contained and explained in simple terms starting right at the beginning the running examples used throughout the book range from the high-end ultrasparc iii  through the ever-popular x86  pentium  to the tiny intel 8051 used in small embedded systems also by andrew s tanenbaum and maarten van steen distributed systems  principles and paradigms  2nd ed distributed systems are becoming ever-more important in the world and this book explains their principles and illustrates them with numerous examples among the topics covered are architectures  processes  communication  naming  synchronization  consistency  fault tolerance  and security examples are taken from distributed object-based  file  web-based  and coordination-based systems about the authors andrew s tanenbaum has an s.b degree from m.i.t and a ph.d from the university of california at berkeley he is currently a professor of computer science at the vrije universiteit where he has taught operating systems  networks  and related topics for over 30 years his current research is on highly reliable operating systems although he has worked on compilers  distributed systems  security  and other topics over the years these research projects have led to over 150 refereed papers in journals and conferences prof tanenbaum has also  co  authored five books which have now appeared in 19 editions the books have been translated into 21 languages  ranging from basque to thai and are used at universities all over the world in all  there are 159 versions  language/edition combinations   which are listed at www.cs.vu.nl/ ~ ast/publications prof tanenbaum has also produced a considerable volume of software  including the amsterdam compiler kit  a retargetable portable compiler   amoeba  an early distributed system used on lans   and globe  a wide-area distributed system   he is also the author of minix  a small unix clone initially intended for use in student programming labs it was the direct inspiration for linux and the platform on which linux was initially developed the current version of minix  called minix 3  is now focused on being an extremely reliable and secure operating system prof tanenbaum will consider his work done when no computer is equipped with a reset button and no living person has ever experienced a system crash minix 3 is an on-going open-source project to which you are invited to contribute go to www.minix3.org to download a free copy and find out what is happening tanenbaum is a fellow of the acm  a fellow of the the ieee  and a member of the royal netherlands academy of arts and sciences he has also won numerous scientific prizes  including  2010 taa mcguffey award for computer science and engineering books 2007 ieee james h mulligan  jr education medal 2002 taa texty award for computer science and engineering books 1997 acm/sigcse award for outstanding contributions to computer science education 1994 acm karl v karlstrom outstanding educator award his home page on the world wide web can be found at http  //www.cs.vu.nl/ ~ ast/ david j wetherall is an associate professor of computer science and engineering at the university of washington in seattle  and advisor to intel labs in seattle he hails from australia  where he received his b.e in electrical enginering from the university of western australia and his ph.d in computer science from m.i.t prof wetherall has worked in the area of networking for the past two decades his research is focused on network systems  especially wireless networks and mobile computing  the design of internet protocols  and network measurement he received the acm sigcomm test-of-time award for research that pioneered active networks  an architecture for rapidly introducing new network services he received the ieee william bennett prize for breakthroughs in internet mapping his research was recognized with an nsf career award in 2002  and he became a sloan fellow in 2004 as well as teaching networking  prof wetherall participates in the networking research community he has co-chaired the program committees of sigcomm  nsdi and mobisys  and cofounded the acm hotnets workshops he has served on numerous program committees for networking conferences  and is an editor for acm computer communication review his home page on the world wide web can be found at http  //djw.cs.washington.edu 