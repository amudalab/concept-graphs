talking about ordered::talking about ordered
binary search trees::binary search trees
implementing ordered dictionaries::implementing ordered dictionaries
key element pairs::key element pairs
insert an element::insert an element
element to search::element to search
delete an element::delete an element
minimum the element::minimum the element
minimum key element::minimum key element
element with maximum::element with maximum
notion of predecessor::notion of predecessor
talked about hashing::talked about hashing
talked about dictionary::talked about dictionary
compare to keys::compare to keys
keys for equality::keys for equality
ordering relation keys::ordering relation keys
predecessor and successor::predecessor and successor
key so predecessor::key so predecessor
key which precedes::key which precedes
keys in dictionaries::keys in dictionaries
right so give::right so give
part of data::part of data
things are ordered::things are ordered
similarly successor function::similarly successor function
two trivals doing::two trivals doing
doing both cases::doing both cases
kind of data::kind of data
taking only constant::taking only constant
out the entire::out the entire
elements and deletion::elements and deletion
deletion take order::deletion take order
search for element::search for element
successor of twelve::successor of twelve
key following twelve::key following twelve
ordered relation assuming::ordered relation assuming
smallest key fourteen::smallest key fourteen
twenty two thirty::twenty two thirty
twelve from twelve::twelve from twelve
thing to find::thing to find
smallest key larger::smallest key larger
larger than twelve::larger than twelve
successor and predecessor::successor and predecessor
predecessor and min::predecessor and min
min and max::min and max
fairly inefficient implementation::fairly inefficient implementation
implementation an ordered::implementation an ordered
ordered the thing::ordered the thing
order of keys::order of keys
takes only constant::takes only constant
constant time maximum::constant time maximum
organize it takes::organize it takes
successor say predecessor::successor say predecessor
predecessor takes constant::predecessor takes constant
asked for successor::asked for successor
throw this entire::throw this entire
list to reach::list to reach
reach that node::reach that node
node i gave::node i gave
gave you lets::gave you lets
lets say reference::lets say reference
compute the successor::compute the successor
predecessor in constant::predecessor in constant
inserting also takes::inserting also takes
takes n times::takes n times
out the correction::out the correction
position for insertion::position for insertion
insertion okay searching::insertion okay searching
takes n order::takes n order
searching can improve::searching can improve
put the elements::put the elements
search to find::search to find
out the element::out the element
logarithmic time log::logarithmic time log
right but binary::right but binary
insertion and deletion::insertion and deletion
place to insert::place to insert
similarly for deletion::similarly for deletion
recap what binary::recap what binary
remember binary search::remember binary search
search to search::search to search
search for twenty::search for twenty
middle element twenty::middle element twenty
two is larger::two is larger
larger the right::larger the right
twenty five smaller::twenty five smaller
twenty two inch::twenty two inch
inch away case::inch away case
number of comparisons::number of comparisons
process only logarithmic::process only logarithmic
make a comparison::make a comparison
making the search::making the search
trivial way trivial::trivial way trivial
adopt to implement::adopt to implement
implement a ordered::implement a ordered
ordered dictionary right::ordered dictionary right
talk about trivialities::talk about trivialities
binary search binary::binary search binary
search binary search::search binary search
binary search tree::binary search tree
property right recall::property right recall
binary tree binary::binary tree binary
tree binary tree::tree binary tree
right a node::right a node
child two child::child two child
children no children::children no children
key and element::key and element
shown here written::shown here written
binary search property::binary search property
property the binary::property the binary
left sub tree::left sub tree
tree all keys::tree all keys
right sub tree::right sub tree
node all keys::node all keys
sub tree larger::sub tree larger
property a binary::property a binary
nodes have keys::nodes have keys
keys which satisfies::keys which satisfies
properties is satisfied::properties is satisfied
clear so binary::clear so binary
tree plus search::tree plus search
search property equals::search property equals
property equals binary::property equals binary
equals binary search::equals binary search
set of keys::set of keys
kinds of trees::kinds of trees
satisfy the search::satisfy the search
keys stored left::keys stored left
stored left sub::stored left sub
couple of features::couple of features
keys are unique::keys are unique
right an element::right an element
right can happen::right can happen
happen right suppose::happen right suppose
suppose your key::suppose your key
define total order::define total order
total order names::total order names
geographic order alphabetic::geographic order alphabetic
order alphabetic order::order alphabetic order
key is equal::key is equal
right any problem::right any problem
assume the keys::assume the keys
necessarily complicate matters::necessarily complicate matters
handle that suppose::handle that suppose
root i compare::root i compare
eleven is larger::eleven is larger
search property keys::search property keys
left so wee::left so wee
tree we compare::tree we compare
done we found::done we found
find an element::find an element
right okay suppose::right okay suppose
child id null::child id null
tree this guy::tree this guy
question no question::question no question
write the binary::write the binary
search this search::search this search
search procedure binary::search procedure binary
procedure binary search::procedure binary search
simplest to understand::simplest to understand
searching for key::searching for key
nil which means::nil which means
root empty tree::root empty tree
return the root::return the root
searching for searching::searching for searching
begin with refers::begin with refers
key is larger::key is larger
larger than key::larger than key
version the iterative::version the iterative
make recursive calls::make recursive calls
search for procedure::search for procedure
right we start::right we start
right we started::right we started
continuing the search::continuing the search
dot left child::dot left child
code just showed::code just showed
right pseudo code::right pseudo code
continue this search::continue this search
children node child::children node child
node child nodes::node child nodes
started a level::started a level
level two level::level two level
executed the maximum::executed the maximum
number of levels::number of levels
procedure everyone understand::procedure everyone understand
understand this simple::understand this simple
nodes whose height::nodes whose height
height is order::height is order
kind of situations::kind of situations
large the search::large the search
order the height::order the height
number of nodes::number of nodes
finding the minimum::finding the minimum
left most tree::left most tree
left most leaf::left most leaf
left most node::left most node
node or left::node or left
leaf okay lets::leaf okay lets
tree so lets::tree so lets
ordered dictionaries::ordered dictionaries
binary search::binary search
search trees::search trees
simplest ways::simplest ways
dictionary functionality::dictionary functionality
key element::key element
element pairs::element pairs
minimum key::minimum key
predecessor successor::predecessor successor
total order::total order
ordering relation::ordering relation
relation keys::relation keys
function predecessor::function predecessor
predecessor taking::predecessor taking
dictionary right::dictionary right
precedes key::precedes key
total ordered::total ordered
similarly successor::similarly successor
successor function::successor function
trivals doing::trivals doing
list kind::list kind
data structure::data structure
unordered list::unordered list
constant amount::constant amount
worst case::worst case
entire list::entire list
entire elements::entire elements
dictionary successor::dictionary successor
ordered relation::ordered relation
relation assuming::relation assuming
smallest key::smallest key
key fourteen::key fourteen
key larger::key larger
eighteen twenty::eighteen twenty
largest key::largest key
key twelve::key twelve
entire thing::entire thing
inefficient implementation::inefficient implementation
ordered list::ordered list
hand lets::hand lets
minimum takes::minimum takes
pointer reference::pointer reference
predecessor takes::predecessor takes
takes constant::takes constant
correction position::correction position
searching takes::searching takes
array searching::array searching
right place::right place
takes lot::takes lot
remember binary::remember binary
middle element::middle element
element twenty::element twenty
right twenty::right twenty
array location::array location
point make::point make
comparison size::comparison size
search halves::search halves
order log::order log
recall insertion::recall insertion
interesting right::interesting right
search binary::search binary
search tree::search tree
binary tree::binary tree
search property::search property
tree binary::tree binary
children means::children means
leaf node::leaf node
left sub::left sub
sub tree::sub tree
right sub::right sub
property holds::property holds
root node::root node
key value::key value
tree larger::tree larger
satisfies property::satisfies property
search properties::search properties
property equals::property equals
binary satisfy::binary satisfy
unique right::unique right
unique key::unique key
order names::order names
geographic order::geographic order
alphabetic order::alphabetic order
complicate matters::complicate matters
assume keys::assume keys
entire discussion::entire discussion
duplicate key::duplicate key
duplicate keys::duplicate keys
key setting::key setting
property keys::property keys
right keys::right keys
element key::element key
compare key::compare key
wee compare::wee compare
left child::left child
search procedure::search procedure
procedure binary::procedure binary
recursive procedure::recursive procedure
iterative procedure::iterative procedure
equals nil::equals nil
root empty::root empty
empty tree::empty tree
recursively search::recursively search
pseudo code::pseudo code
good lets::good lets
iterative version::iterative version
recursive calls::recursive calls
current node::current node
dot left::dot left
node pointing::node pointing
modified right::modified right
children node::children node
node child::node child
child nodes::child nodes
right child::right child
loop executed::loop executed
maximum number::maximum number
tree order::tree order
minimum element::minimum element
tree left::tree left
leaf left::leaf left
wrong suppose::wrong suppose
today::today
class::class
talking::talking
ordered::ordered
dictionaries::dictionaries
noise::noise
binary::binary
search::search
trees::trees
simplest::simplest
ways::ways
implementing::implementing
essentially::essentially
dictionary::dictionary
functionality::functionality
right::right
recall::recall
key::key
element::element
pairs::pairs
insert::insert
delete::delete
notion::notion
minimum::minimum
maximum::maximum
predecessor::predecessor
successor::successor
means::means
kind::kind
total::total
order::order
keys::keys
talked::talked
hashing::hashing
operation::operation
compare::compare
equality::equality
two::two
decide::decide
excepting::excepting
out::out
assume::assume
ordering::ordering
relation::relation
equal::equal
larger::larger
parameters::parameters
function::function
shown::shown
taking::taking
parameter::parameter
give::give
precedes::precedes
hindi::hindi
lies::lies
elements::elements
field::field
part::part
data::data
things::things
similarly::similarly
implement::implement
trivals::trivals
doing::doing
cases::cases
list::list
structure::structure
unordered::unordered
constant::constant
amount::amount
searching::searching
worst::worst
case::case
entire::entire
found::found
deletion::deletion
first::first
suppose::suppose
twelve::twelve
twenty::twenty
fourteen::fourteen
assuming::assuming
integers::integers
smallest::smallest
eighteen::eighteen
thirty::thirty
four::four
largest::largest
run::run
thing::thing
find::find
min::min
max::max
fairly::fairly
inefficient::inefficient
implementation::implementation
hand::hand
lets::lets
takes::takes
organize::organize
pointer::pointer
reference::reference
end::end
node::node
depends::depends
asked::asked
throw::throw
reach::reach
gave::gave
compute::compute
inserting::inserting
times::times
correction::correction
position::position
insertion::insertion
array::array
improve::improve
put::put
logarithmic::logarithmic
log::log
place::place
shift::shift
lot::lot
left::left
recap::recap
remember::remember
middle::middle
smaller::smaller
manner::manner
eventually::eventually
location::location
inch::inch
number::number
comparisons::comparisons
process::process
point::point
make::make
comparison::comparison
size::size
making::making
halves::halves
halve::halve
questions::questions
trivial::trivial
adopt::adopt
talk::talk
trivialities::trivialities
interesting::interesting
tree::tree
property::property
children::children
child::child
leaf::leaf
discussion::discussion
interested::interested
written::written
nodes::nodes
sub::sub
holds::holds
root::root
basically::basically
value::value
satisfies::satisfies
properties::properties
satisfied::satisfied
clear::clear
equals::equals
set::set
kinds::kinds
satisfy::satisfy
stored::stored
couple::couple
features::features
doesn::doesn
happen::happen
settings::settings
unique::unique
setting::setting
student::student
define::define
names::names
geographic::geographic
alphabetic::alphabetic
easily::easily
problem::problem
permitting::permitting
rest::rest
necessarily::necessarily
complicate::complicate
matters::matters
duplicate::duplicate
handle::handle
show::show
eleven::eleven
wee::wee
ten::ten
done::done
null::null
guy::guy
question::question
good::good
write::write
procedure::procedure
recursive::recursive
iterative::iterative
understand::understand
nil::nil
empty::empty
forget::forget
return::return
recursively::recursively
pseudo::pseudo
code::code
don::don
begin::begin
refers::refers
referring::referring
version::version
calls::calls
matching::matching
start::start
current::current
differently::differently
started::started
continuing::continuing
dot::dot
call::call
showed::showed
continue::continue
step::step
modified::modified
pointing::pointing
loop::loop
level::level
executed::executed
levels::levels
height::height
running::running
simple::simple
large::large
situations::situations
note::note
finding::finding
wrong::wrong
thirteen::thirteen
