execution of transactions
transactions database systems
systems to produce
produce consistency results
results in fact
fact transaction execution
things in database
affect the performance
results or state
state board results
board results announced
announced now lot
lot of people
access the results
net the results
results is stored
realize is large
number of people
access these results
result or whats
system the large
access these systems
number of simultaneous
challenge in terms
number of transactions
railway information system
system you notice
summer the lot
book the railway
railway tickets online
counters and book
book the tickets
couple of days
peeking at thirty
thousand per day
number of peoples
peoples simultaneously coming
simultaneously so database
critical systems database
systems database systems
execute without losing
user is booked
booked the ticket
accesing the ticket
seat is allotted
people the system
understand how database
database actually solve
solve the problem
marinating that transaction
consistency of system
requirement of database
employed by database
systems to ensure
transactions are executing
executing they log
log the data
discussing few minutes
railway reservation case
case the birth
transaction finishes operating
coordination is done
manager to ensure
consistencies is ensured
two locking phase
two different transactions
two phase locking
locking needs lot
kind of algorithms
algorithms need change
change to ensure
throughput two phase
locking suddenly doesn
improve the transaction
explore other algorithms
classify the algorithms
algorithms into optimistic
algorithms and pessimistic
class of algorithms
basically using locking
optimistic based algorithms
typically time based
algorithms in terms
terms of producing
compare both optimistic
optimistic and pessimistic
liitle more detail
essentially the difference
difference between pessimistic
pessimistic based algorithms
based algorithms optimistic
algorithms optimistic based
case of pessimistic
pessimistic and optimistic
based algorithms case
two different spectrums
spectrums in terms
checking the consistencies
database transactions notice
admit the transactions
doing the admission
control for consistency
point and start
start of execution
verses the end
basically do check
end of execution
waste the execution
transactions actually executed
consistent with respect
transactions is aborted
lot of work
consistencies is applied
beginning a teacher
value actually stops
done is correct
people simultaneously working
simultaneously working assuming
working assuming wrong
assuming wrong values
thing is wrong
back and redo
lots of times
conflicts the people
set of data
end of executions
ends of spectrum
end of spectrum
marking as pessimistic
number of protocols
protocols which lie
spectrum this full
spectrum of things
fall fully optimistic
optimistic time stamping
stamping fully optimistic
fully optimistic protocols
optimistic they fall
looked at protocol
call the basic
basic time stamping
two pl locking
start the basic
stamp based protocols
protocols is work
modify this basic
protocol to produce
optimistic time version
notably the multi
multi version protocol
multi version protocols
produce multi versions
reads and writes
item being manipulated
version um multi
version protocols concurrency
protocols concurrency control
concurrency control protocols
protocols one modification
phase locking protocol
protocol for multi
basic version multi
version multi protocol
two version locking
version locking protocol
two pl multi
gamet of algorithms
algorithms as shown
picture basically looked
wide in terms
terms of number
algorithms it depends
conflicts the data
worth actually putting
putting optimistic kind
kind of protocols
lot of conflicts
start to mapping
side um optimistic
worth actually mapping
putting the kind
kind of pessimistic
systems a good
movie is released
released a large
number of conflicts
set of seats
kinds of seats
theatre okay visited
visited the theatre
place to sit
sit to view
view an movie
means is large
kind of seats
basically high conflict
high conflict data
conflict data items
items you viewed
viewed the data
modify a manipulate
manipulate a small
percentage of data
suddenly it requires
requires some kind
kind of concurrency
applied a pessimistic
algorithm which ensures
beginning that transactions
ultimately s single
seat whereas ten
ten people compete
ticket which means
abort after proceeding
information they abort
pessimistic concurrency control
beginning which means
manipulate the data
difference between optimistic
graph and start
cases of optimistic
control the idea
checks different points
terms of resolving
resolving the conflicts
set of transactions
transaction an incoming
four to execute
proceed to execute
satisfies the criterion
follow the diagram
diagram to understand
four that entered
doesn t disturb
disturb the order
things are happening
relationship is maintain
conflicting data items
force the relationship
insert this relationship
sequence of actions
actions your doing
violates the consistency
consistency which means
ate my evening
suddenly by dinner
perform um occurs
relationship the breakfast
violates this consistency
relation is correct
long as future
future relations doesn
doesn t violate
write the relationships
break the cycle
essentially is showing
introduces the intensities
essentially this transition
produce consistent execution
transactions now understand
solve this problem
verses how optimistic
optimistic concurrency control
concurrency control algorithms
transaction same graph
graph to illustrate
illustrate this point
transaction graph fix
algorithm which means
two pl case
executing this condition
four from execution
basically not allowing
disallow the transaction
concurrency control algorithm
four is done
talking the spectrum
execute and stop
violating the restriction
deeper and understand
two pl wil
disallow the transactions
transactions from executing
executing from beginning
produces serializable schedules
serializable schedules serializable
serializable now lets
set of conflicting
operations ultimately transaction
transaction um transaction
set of operations
operations transaction performs
make this order
order this operation
operation with subscribe
complete the notation
operation being performed
operation of first
xth data item
operation n transaction
transaction one manipulate
manipulate including data
including data item
lot on data
simultaneously to understand
case of banking
withdraw a cash
simultaneously withdrawing cash
account the minute
withdraw the amount
simultaneously can view
producing actually consistent
withdrawing which means
operation being conflicting
operations are conflicting
accounts it doesn
happen with respect
relation is important
account is concerned
out the relationship
relation essentially boils
conflicting two operations
executed with respect
conflicting just explain
write this order
produces inconsistent results
understand which operation
two is coming
suffix ill drop
drop the actual
actual operation suffix
two conflicting operations
two now imagine
transactions which means
four this means
ago transaction graph
produces the inconsistent
locked the data
operation is defined
lock on data
case the lock
lock was obtained
lock on jet
obtained this sequence
lock was granted
obtained a lock
relation has shown
item data item
doesn t fit
fit into regular
requires a lock
set of equations
release a lock
lock is released
two pl prevent
lock i wont
released that lock
remember the condition
condition that imposed
locks are obtained
released previous lock
meant by lock
two pl finishes
finishes transaction finishes
finishes the execution
releases the lock
release one lock
supposed to asked
finish all executions
supposed to execute
essentially the reason
condition is put
locks if doesn
doesn t follow
allowed the condition
prevents the cycle
graph this explanation
makes you understand
two pl checks
transaction is start
start to executing
two pl ensures
ensures the consistency
transaction starts executing
transaction is inconsistent
state for execution
blocked this result
result in scenario
deadlock of kind
kind of scenario
scenario or waiting
waiting for sufficient
long to acquire
acquire a lot
end time stamping
model and check
typically the scenario
case of optimistic
transaction data items
case this set
two manipulated set
data items relating
write the values
previous things done
check the validation
check is done
passes the validation
four to commit
purely optimistic kind
transaction is allowed
allowed to proceed
transactions takes value
item and manipulates
write you perform
perform this validation
give only intuitive
understand whats happening
works to give
taking a local
two is number
four is number
bother to give
arrives my place
copy of data
execution they submit
validate this validate
manipulate the value
value and produce
produce the value
manipulated this value
value and manipulated
produce a value
paper and passed
value is passed
value to produce
produces the intensity
submit their values
execute to produce
produce this value
violating the properties
properties of consistency
essentially the consistent
check the dependency
four actually produced
produced a value
produced inconsistent results
four should restart
restart their execution
database and start
happen in optimistic
case of pure
pure pessimistic kind
kind of algorithm
submit my value
told you consistent
consistent because inputs
inputs not correct
basically a loss
loss of execution
four and found
two pl pessimistic
correct way start
executing the transaction
sense the pure
allowed this scenario
aborts are required
things to proceed
thing you check
case this diagram
transactions generally operate
overhead is reduced
end of validation
phase all proceeds
pass validation phase
apply a optimistic
apply purely pessimistic
purely pessimistic scenario
conflictive which means
thing data item
number of aborts
number of effects
apply for pessimistic
transactions and results
results in wasted
chance of proceeding
apply pessimistic kind
lot which means
conflicting data item
give the key
apply the locking
organized to lock
item this key
case of applying
applying the pessimistic
depth the difference
algorithm and pessimistic
place in terms
terms of applications
point to apply
apply pessimistic algorithms
apply an optimistic
place in fact
gamete of algorithms
algorithms that fall
produce excellent results
applied to transaction
transaction processing system
c.udayakumar database management
database management system
management system prof
system prof d.janakiram
prof d.janakiram lecture
concurrency control part
continue our discussion
last few lectures
doing we looked
algorithms try classify
two broad class
broad class pessimistic
class pessimistic algorithm
algorithm and optimistic
algorithm come class
two pl works
context of pessimistic
stamp based algorithms
algorithms as supposed
supposed to locking
stamp based concurrency
based concurrency algorithms
algorithms are optimistic
understand time stamping
necessarily be optimistic
formulate optimistic algorithm
meaning optimistic algorithms
transactions is checked
execution of transaction
stamp based algorithm
based algorithm check
consistency of operation
call as basic
basic time stamp
based algorithms work
context of concurrency
apply time stamp
recovery properties commit
properties commit properties
properties and recovery
properties are integrated
based concurrency algorithm
remember when earlier
lecture two phase
discuss how locking
algorithm are integrated
algorithms will integrate
integrate with commit
commit based algorithms
taking a simple
graph of basic
based algorithm concurrency
algorithm concurrency control
algorithm the first
thing the done
case every transaction
darshan of lord
venkataeswara know tirupathi
tirupathi tirupathi devasathanam
band is maens
maens they give
words the darshan
basically a serializable
ways we solve
band is generated
stamp time band
proceed the order
viewing the lord
lord in terms
execute each transactions
enters the system
similar time band
idea of giving
essentially time stamp
serialize the order
transactions are executed
executed all transactions
stamp its order
order in terms
terms of execution
execution is fixed
transaction will commit
transaction is committed
sense in serialize
serializes the transaction
important concept notion
transaction is split
split into sub
transactions and execute
execute on multiple
single time stamp
additional problem solved
multiple time zones
problem of making
events across multiple
multiple time zone
address the concurrency
case of distributed
happening is transactions
transactions are coming
excepting the transactions
produces the serializable
stamp this timestamp
subsequently for checking
read write operations
operations are tagged
stamp read operations
operations and write
operations the transactions
transactions at tagged
stamp write operations
transactions are tagged
keys will call
read and write
transaction um issues
issues are read
read or write
stamp ten twenty
twenty just understand
stamp of eleven
performed by transaction
forty you doing
transaction are tagged
read time stamp
read the value
read the read
transaction which reads
reads this data
transaction time stamp
read this data
similarly the write
write time stamp
stamp the highest
highest time stamp
transaction that wrote
wrote the value
two time stamps
transaction which wrote
tells with respect
operation are performed
manager to proceed
thing in terms
maintains the data
terms of actual
transaction um issue
issues the read
operation the read
item time stamp
stamp of read
stamp tx issues
issues a read
rts now wts
wts the value
transaction is greater
remember the reads
write a value
value any number
people can read
read that value
written a value
value is lesser
careful and avoid
avoid such operations
understand the condition
transaction is write
implies that means
transaction actually return
return the value
value later transaction
written the value
transaction has written
execute the transactions
reading a value
senior junior relationship
passing the batch
batch which supposed
supposed to passed
thousand three batch
read its value
aborted the transaction
case the transaction
transaction which issues
read the operation
order time stamp
add higher values
values time restarted
larger time stamp
wts the concern
concern are shown
shown here rts
shows the transaction
stamp of transaction
transaction is read
largest time stamp
wts i don
compare this rts
rts rts value
value is higher
higher since reads
violating any consistency
thing only write
read something earlier
return by transaction
issued the read
aborted in case
case and restarted
restarted a chance
chance of distractions
succeeding his higher
operation is concerned
operation a transaction
write operation transaction
issues a issues
issues write operation
issue a write
case of rts
current value wts
case the rts
rts and wts
conditions are true
lead time stamp
implies this implies
writing a value
transaction or return
value of data
read as value
return this value
case this results
read some stale
value that value
conditions the write
aborted and restarted
higher stamp transaction
higher time stamp
explains their basic
checking we give
give um transaction
counter is good
infinitely large means
means the counter
forget the entire
entire earlier history
set the counter
giving time stamp
basically a logical
logical time stamp
two is higher
decide in terms
clock okay physical
values physical clock
number of clock
problems of validating
stamp then interesting
algorithm for generation
stamp in fact
algorithm which doesn
doesn t generate
generate time stamp
stamp with respect
point he generates
generates with respect
excepted to finish
point i give
give a tick
give a band
excepted to leave
leave the iit
put a band
leave the system
basically know abort
ten o clock
supposed to leave
leave this system
system by twelve
twelve o clock
stamp which means
means that ending
didn t finish
algorithms to generate
extremely interesting ways
fixed a band
band a band
transaction is excepted
finish the execution
intelligently use generation
issues with respect
transaction every transaction
forgot to mention
accept a read
abort a transaction
abort the transaction
accept the reads
operation is accepted
accepted the abort
rtx corresponding rtx
value is set
highest of rtx
set to rts
wtx the highest
highest of wts
wts always reflect
read or written
making this counters
counters typically rts
wts are counters
counters data counters
counters they stored
stored the value
highest transaction value
two pl kind
apply a basic
stamping algorithm verses
verses the locking
reading the value
writing the value
doing a read
write the value
thing as done
phase locking kind
acquire a lock
release the lock
execution that means
two can acquire
two can proceed
completely finishes release
release is lock
thing that happen
applied the locking
two to start
read y write
strategy because locking
item which means
released that means
basically start executing
shifted the execution
apply two phase
apply time stamping
stamping based algorithm
two which means
case where transaction
lower than transaction
writes the value
stamp on data
attempting accessing data
accessing data item
two to access
access data item
accessing the data
accessed by transaction
two can start
earlier to recollect
two to overlap
finished with accessing
two can access
reaches this point
basically the lock
reaches the lock
cases more concurrency
locking but remember
straightly a optimistic
transaction should execute
transaction time stamps
fully optimistic scenario
sort of committing
pass the validation
validation and make
make that transaction
stamp to order
order these transactions
didn t understand
control gets integrated
exercise even fore
fore two phase
locking with commit
released by transactions
create cascading abort
problems now similar
algorithms get integrated
protocol a simple
writes its value
value to explain
explain the problem
case of transactions
transactions x transactions
transactions has returned
continuing to execute
reaches the commit
understand the right
written this stage
stage the modified
strictly not correct
reached the commit
stage of commit
back which means
done which means
reading this modified
creates a problem
problem in terms
relaxing the concept
concept of isolating
isolating one transactions
difficulty of relaxing
replaced this write
write that means
means every transactions
transactions to start
means this write
reaches this last
transaction that means
means the pre
database not written
writes are buffered
validate this pre
writes and make
writes once accepted
updating its pre
writes the transactions
commit a pre
write which means
stage it doesn
doesn t issue
issue a pre
write it doesn
transactions pre writes
modification taking pre
taking pre write
integrating commit protocols
protocols with concurrency
issues a pre
checked for pre
database times stamp
stamp of data
write is pre
rts or wts
pre write pre
write pre write
point this pre
check those reads
read to proceed
number of reads
data item doesn
stamp is higher
sense it doesn
things if write
basically this read
rejected for obvious
produces the write
value the read
read issuing transaction
transaction is aborted
read is allowed
case the read
pre write buffered
write buffered means
pre writes buffered
writes buffered means
remember that pre
buffered the read
transaction okay read
transactions that means
postponed read transaction
committed allow read
read to happen
typically will ensure
pre buffered writes
modification in terms
integrate both commit
writes are handled
case by ensuring
database to start
produce the pre
based concurrency control
concurrency control techniques
stamp mechanism works
works in terms
terms of ordering
ordering the transactions
transactions in terms
integrated with commit
end of lecturer
transaction to issue
write to start
read transactions incoming
transactions incoming read
incoming read transactions
satisfied the read
last lecturer basic
end of transaction
ordering the transaction
satisfies the concurrency
today s lecturer
slightly different kind
algorithms which include
algorithm to start
algorithm time stamp
stamp based protocol
approach to concurrency
multi version concurrency
version concurrency control
algorithms the multi
multi version solved
version solved problems
problems of concurrency
control by producing
value which means
value further data
solve the concurrency
concurrency control solve
value a large
extent a problem
problem of concurrency
control is elevated
elevated by maintaining
maintaining a multiple
end up paying
paying a huge
completely degenerated case
value is changed
temporal database concepts
concepts of temporal
series of lecturers
encourage to read
finish this encourage
database which constitutes
important and interesting
accept of databases
start our discussion
discussion by first
optimistic time stamp
protocol to start
proceed on multi
multi version based
version based concurrency
algorithm and figures
figures them version
two version protocol
done in last
lecturers with set
set of questions
giving more explanation
series of questions
questions review questions
last seven lecturers
lecturers seven lecturer
doing the checking
checking the end
faces the first
phase which means
transaction the reads
thing is doesn
transaction gets validation
validation phase make
enter after validation
phases a read
subsequent validation phase
phase any conflicts
conflicts are detected
detected and make
enters the write
phase is allowed
allowed to write
databases the transaction
doesn t passes
doesn t pass
transaction that fails
fails validation validation
validation is aborted
transactions just enter
enter the systems
systems their read
required data items
phase the system
transactions get validate
transactions read sets
transaction will agree
day the end
sets and decide
conflict and based
transactions are allowed
allowed to commit
done in earlier
allowing the transaction
read phase irrespective
don t validate
phase we perform
perform this check
validation is performed
write phase depending
typically the transaction
proceeds to execute
earlier the pessimistic
case the validation
validation is done
allowed to read
phases which means
asked to abort
finish its results
release the logs
executing to start
produce wrong results
made to redo
redo the things
completely different approach
two different approaches
approaches to solving
problem now lets
lets us understand
apply the true
true optimistic concurrency
lot more information
validate to explain
don t conflict
case it doesn
write set conflict
set conflict write
conflict write write
write write conflict
conflict or read
read write conflict
order this transactions
done something database
thing the committed
committed set done
conflict them respect
current committed transactions
sets or write
write sets depending
ensuring the ensured
transactions that conflicting
relaxing this requirement
start with explaining
validating the transactions
give this experiment
validate okay transaction
order is fixed
order got fixed
enforcing the requirement
conflict it doesn
work with respect
respect to read
order is done
sets and write
sets the read
restriction that requires
generating the read
first thing happened
control some algorithms
algorithms also requires
assumption that means
reads and write
transaction writer programmer
generate the reads
compiler is generating
transaction is executed
executed i wont
wont be knowing
execute my transaction
maintain as part
phase okay start
start and end
similarly in terms
terms of read
phases because based
transaction the write
waited as transaction
phase and read
read phase starting
terms of validating
phases every transaction
transaction has read
phase is marked
marked by start
read phase end
phase the start
enters the validation
read actually started
write has ended
understand the criterion
basically some data
means that data
data items produced
equation the equation
values not produced
important to understand
validated conflict data
conflict data item
write some values
values ti reads
reads some values
enforced is write
phase of write
read phase started
written the values
values which means
read the correct
value is produced
committed this ensures
read a value
committed that means
means the write
phase not ended
ended which means
reading those values
case this condition
ensure is first
ended this ensures
finished all work
common data items
two write sets
separate data items
two separate data
separate data item
start okay start
start read phase
read phase staring
staring time read
understand the meaning
two times remember
remember that read
compare have start
start time read
read phase start
read the data
finish the read
done in terms
phases the read
read phase validation
phase validation phase
previously committed transactions
validation phase ensures
valid regerates reads
writes get validate
validate the committed
onec the validation
phase is crossed
crossed the transaction
validate as transaction
two vehicles coming
chennai is organized
program our open
open air theatre
air theatre student
theatre student activites
student activites centre
limited parking lot
win in terms
terms of putting
putting the car
lot one thing
two hundred cars
iit in gate
gate i start
giving the numbers
enter which means
back the minute
gate that means
forcing the concurrency
control i don
inside my system
criterion is ensured
don t enforce
enforce this rule
reach the parking
gate raised passed
passed the car
first car enter
transaction is raised
car is entering
entering into parking
necessarily the cars
remember a basic
sense a locking
car which entered
lot or park
reserve the lot
gate automatically committed
committed for finding
finding a parking
number of cars
coming in allowing
allowing them inside
inside the system
doesn t make
make the sense
optimistic algorithm optimistic
algorithm optimistic algorithm
fuel of coming
hundred um cars
high conflict high
conflict high contention
apply pessimistic approach
lot of aborted
ten or fifteen
put a large
worth that kind
kind of approach
find their true
case optimistic concurrency
control is quiet
actions to proceed
done pessimistic approach
approach is block
block the transactions
road is clear
abort and start
sort of thing
basic concurrency control
control algorithm discussion
discussion where put
perspective the class
belonging to belonging
belonging to pessimistic
pessimistic broad class
belonging to optimistic
fifteen twenty minutes
set of classes
termed as multi
overwrite the value
value is ten
version one assuming
tend to produce
change a value
overwrite this value
basically the problem
writing this value
value is possiblw
written what written
problem concurrency control
maintain multiple versions
simultaneously two people
two people withdrawing
account or depositing
finishes one finishes
maintain multiple version
version the problem
produces a consistent
versions being produced
versions are consistent
consistent the problems
problems becomes severe
severe the older
value only producing
value again produces
completely a generated
based or temporal
database now temporal
databases they preserve
preserve the history
elements the database
values so value
kind of applications
price this point
stock price stock
price stock value
company like tcs
tcs stock value
give the stock
purely temporal database
temporal here means
recording the entire
degenerate of multi
multi version database
case of multi
database a multi
number of versions
versions which means
two version database
maintain n number
values previous values
item is stored
set of simple
simple multi version
concurrency control protocol
case two version
version two phase
dealing earlier extension
general multi version
protocol been working
version of data
produced some transaction
value time stamp
return this transaction
producing this value
value okay producing
taking the value
value new version
highest tome stamp
transaction that read
making it simpler
case the write
transaction that produced
produced the read
issues a write
issues the write
out the xthe
xthe ith version
basically the highest
highest version produced
produced okay highest
stamp with write
stamp please remember
read by value
interest in finding
read this value
read is greater
stamp it means
producing a value
aborted okay transaction
condition is satisfied
write the latest
proceed and produce
version okay condition
value now read
operation of transaction
sizes and make
satisfying the rts
rts okay read
stamp highest rts
stamp can read
current read operation
operation that means
read the latest
reach the latest
setting the read
current time stamp
rts the highest
transaction which read
transaction this explains
basic multi version
protocol is execute
protocol i didn
ending in highest
store a large
number of data
database which means
database storage overhead
paying a larger
protocol which means
items two version
version protocol extension
write lock read
lock read lock
basically a shared
lock and write
basically a exclusive
locking every data
lock or write
lock another write
lock another read
typically the matrices
case you ended
read write lock
current transaction holding
basically read lock
read lock item
grant another read
write another write
disallowed which means
means a data
lock since read
read is shared
transaction is holding
holding write lock
item no longer
data item things
things being prevent
prevent in consistent
call the certified
write also reads
read a previous
wholes the lock
remember x read
read lock data
lock data value
data value item
value item read
item read lock
write lock database
written any value
presence of write
lock a read
upgrade the certified
write and read
two version multi
version multi version
versions old value
presence of lock
value is return
basically two version
give better explanation
produce the matrix
produce the earlier
earlier three locks
locks now read
write and certified
grant a read
grant a write
holding a read
previous value write
value write value
presence of certified
lock please understand
hold a write
intending to write
value as long
fill the form
finish is transaction
higher level concurrency
two two values
phase locking extension
concurrency is compared
concept of multi
distributed transcation models
model transaction model
single computer system
operating system image
database is running
part of applications
railway reservation system
system where sitting
sitting in chennai
booking for train
out of delhi
access the database
system in delhi
line a lease
kind of connectivity
delhi which means
located in delhi
work with systems
wide area network
area network local
network local area
local area network
call as distributed
system when computer
systems are connected
present um single
single node kind
data is distributed
nodes of distributed
system we call
call the scenario
scenario as distributed
transactions it assumes
assumes no longer
single system computer
system computer system
system to explain
explain this scenario
system and explain
bank in chennai
chennai sbi branch
mumbai again sbi
doing a fund
transfer from account
two hundred rupees
data for account
resident on node
physically the data
nodes are connected
fibre optic network
accessed the thing
node otherwise vice
account two present
begin transaction end
transaction end transaction
transaction as part
system that means
physically this entire
account one account
two are present
executed on node
doesn t access
access any remote
information both accounts
accounts are present
system as supposed
talking about account
node and adding
two different nodes
case a power
power has failed
thing is proceeding
single system case
power could fail
things could happen
transaction is executing
debiting and credting
preserved as acid
transaction is concerned
fails the log
part is executed
executed the debit
undo or redo
redo the transaction
current transaction logs
transaction logs record
account one debiting
debiting is happening
account two crediting
crediting is happening
firstly to knowing
two friends separated
two different locations
requires phone call
making sure phone
person is present
issues it involved
involved when people
hand the present
lot more easier
coordinate the minute
separated when phone
doesn t pick
didn t pick
pick the phone
assumptions really relating
relating to behavior
node with respect
put a telegram
compare to ringing
mode of communication
kind of communication
makes important requirement
assume the transactions
control and commit
commit protocols takes
takes an extra
possibilities of distributed
happen in distributed
distributed system node
node can fail
network can partition
network can fail
fail with results
temporary network failure
failure between node
two the node
reachable from node
ensure the acid
distributed transaction model
transaction model model
study some concepts
relating to distributed
transaction model starting
level the distributed
start more details
models to explain
explain the essential
difference between centralized
centralized system database
system database system
system and distributed
system with respect
illustrate with respect
build distributed transaction
model on top
top of distributed
distributed data systems
systems now continuing
credit debit transaction
transaction is transaction
transaction now debit
credit and debit
debit two sub
two sub transactions
spawn two agents
sub transactions agent
main transaction agent
node now agent
transaction and agent
two will execute
rupees is debited
two and make
two hundred added
preserved has part
means that atomicity
atomicity concurrency isolation
concurrency isolation durability
preserved as part
middle of transaction
transaction you don
account on node
preserver the property
hundred rupees detected
accessing this account
account other transactions
allowed to access
access this account
finish it executing
isolation durability properties
achieve this issue
root agent spawning
spawning other agents
agents okay agent
nodes these agent
two are responsible
executing the transactions
form a complete
two is credit
debit being done
done not credit
credit or viceversa
thing is executed
kind of agreement
agreement is reached
portions or sub
exercise a module
properties which includes
includes the commit
transaction the transaction
nodes manager running
distributed transaction manager
manager this dtm
stands for distribution
distribution distributed transaction
transaction manager distributed
manager distributed transaction
properties are obtained
maintain okay transaction
local transaction manager
stands for local
debit and credit
executed by agent
preserve the transaction
preserved acid property
property for debit
transaction and credit
credit credit transaction
ensure for agent
ltm ltm preservers
preservers the logs
related things done
centralized database context
context the ltm
things are executed
nodes to explain
agent two started
started on node
node two agent
transaction the root
root transaction agent
two sub transaction
staring this agents
committing corresponding properties
properties are achieved
responsible for preserving
preserving the transaction
node it preserve
means the local
transaction manager responsible
responsible for ensuring
local node obeys
obeys the transaction
transaction distributed transaction
control and model
model the commit
suddenly this terms
writing the logs
logs and making
transactions are return
locking then make
locks are released
transaction can make
data items modify
transaction so commit
exercise just writing
logs and writing
writing the modified
multiple agents running
system the commit
commit no longer
node one node
commit each part
commit the values
commit protocol commit
protocol commit protocol
general agreement problem
case of commit
commit protocol case
commit to abort
commit my part
abort a part
transaction that agents
involved in distributed
commit zero means
means they don
protocols and study
study various commit
protocols for achieving
model what kind
kind of commit
protocols are existing
scenario like node
network failure partitions
protocols really work
kinds of commit
two phase commit
phase commit protocol
phases that means
means the first
phase which participations
phase actual commitment
commitment take place
commit protocol natural
protocol natural integrates
studied earlier case
centralized database system
protocol and study
two phase extension
sudden things happen
two phase protocol
lock that means
means the protocol
recovery take place
words certain kind
kind of failures
commit actually locks
locks the protocol
blocks the system
system whereas modifying
avoid the wait
wait three protocol
kind of failure
failure occurs wait
failure so wait
wait three protocols
interesting and important
important in distributed
avoid certain kind
failures and make
make the system
failures the system
protocol as supposed
protocol in detail
context of distributed
circumstances two phase
commit protocol works
concurrency control mechanism
mechanism as applied
distributed transaction systems
point will concentrate
explain in detail
commit protocol means
basically the begin
basically the agent
debit on node
node one debit
basically the sub
agent one agent
credit on node
operating on account
account two assume
two are started
nodes distributed system
reach the end
committing my transaction
reached this point
reach this point
doing the debit
transaction one reason
present on node
reasons which means
means that account
means the debit
case the agent
abort my part
complete my part
finish debit transactions
node because account
case is account
withdraw two hundred
account again agent
commit this transaction
cases both nodes
agree both agent
agree to commit
commit their transaction
protocol gets started
start this commit
protocol to ascertain
protocol to ensure
committing the transaction
transaction which means
fix a coordinator
executed we call
participants where call
call the sub
transactions is executed
coordinator and number
number of participants
initiate the commit
protocol and make
participants and based
decision again inform
terminate the commit
coordinator each participant
replying on behalf
things are done
imitates the commit
transaction he imitates
send certain messages
two various participants
participants and make
executing this commit
coordinator to start
start the commit
message this message
prepares the participants
sending the prepare
message the coordinator
replies are received
participants not responding
don t respond
coordinator basically puts
immediately after sending
make a decision
decision to make
committing or abort
out has reached
reached and replies
relating to abort
participant is concerned
participant actually decides
decides now waits
protocol that means
means to start
undecided state wait
wait for prepare
things which participant
ready message means
commit is part
message the ready
commit his transaction
means it executed
executed successfully part
commit his sub
sending the ready
logs are return
write the locks
happen later participant
replied with ready
release the locks
release your locks
message the participant
participant should write
required locks participant
locks participant writes
writes the required
writing this locks
transaction is achieved
transaction manager ltm
manager ltm ensures
local transactions properties
properties are maintained
point we call
preparing the participants
participants for commit
participants for commit0ting
two separate phases
participants for committing
commit his transactions
sends an abort
abort answer message
answer for prepare
prepare is abort
giving an abort
abort message participant
commit when coordinator
receives this abort
decision so phase
coordinator enters phase
making the decision
decision to commit
commit is deciding
out period coordinator
period coordinator receive
received all ready
commit the transaction
commit their part
transaction hence logical
taking the commit
sending the commit
message the agent
agent has coordinator
coordinator can recover
case the coordinator
receives all ready
ready message commit
message commit decision
message before sending
steps the coordinator
follow before sending
write the commit
write a stable
log is written
written a stable
participant receives participant
receives participant receives
receives the commit
commit message receives
receives cm message
message commit message
ack is send
acknowledgement is send
send an ack
acknowledgement the coordinator
coordinator on receiving
receiving the coordinator
receiving on receiving
receiving all ack
acknowledgement will write
write complete log
log will write
write the complete
transaction is completed
phase to recap
phase one coordinator
sends the prepare
message is send
phase one first
coordinator and enters
period for replies
message can respond
ready message participant
message participant make
point enter phase
two the phase
two is entered
case it takes
takes a decision
messages are received
received ready messages
received he commits
commits the transactions
writes the commit
log and sends
sends the commit
phase and receive
receive the commit
transactions is committed
log and close
close the transaction
phase we didn
didn t discuss
discuss the case
message or coordinator
cases the coordinator
receive the abort
decision the participants
things can happen
protocol is resilent
resilent that kind
state transition diagram
participant that explains
scenario in lot
lot more detail
protocols is executed
coordinator state transition
transition diagram coordinator
diagram coordinator state
writing the state
coordinator is based
sends prepare message
level of undecided
enter its wait
basically prepare message
coordinator is ready
commit command commit
command commit message
coordinator the state
reaches the state
state the commit
abort command message
message that means
send an abort
state the coordinator
coordinator can reach
reach the abort
out period reach
speaking this arrow
period the coordinator
takes the decision
decision to abort
abort the message
participant state transition
receives the prepare
basically um enters
enters the state
participant to reach
receives the command
sending an acknowledgement
reaching the commit
receive an abort
abort message abort
message abort command
reaching this state
reaches the abort
sort of summarizes
two transition diagram
commit protocol resilent
resilent for failures
3-phase commit protocol
basic two phase
protocol just stopped
coordinator protocol working
starts with sending
sending a prepare
sends a prepares
coordinator actually receives
send the commit
coordinator will reach
reach the commit
coordinator to reach
out that means
means he doesn
doesn t receive
receive the message
participant is failed
failed your bound
commit is concerned
concerned each participant
point for prepare
give a ready
basically ready state
state now wait
case the participant
commits then sends
sends an acknowledgement
acknowledgement that means
explain this protocol
scenarios with thought
coordinator can fail
participant can fail
network could fail
fail which means
partition some nodes
things we looked
protocol is resilient
resilient which means
cases for failures
fails in phase
decision of aborting
aborting or sending
sending an abort
abort decision coordinator
coordinator will timeout
happen when participant
commit is resilient
resilient for participant
phase that means
phase the participant
participant has replied
message it means
replied the ready
coordinator decision coordinator
decision or commit
recovery that means
recover from failure
failure after recovery
recovery the participant
participant should check
coordinator participant checks
happen the transaction
terminate the transaction
tells now coordinator
replied with replied
feed to choose
choose a decision
depending on read
commit the message
case the commit
failure the coordinator
read the decision
acknowledgement from participant
write the final
failures to happen
coordinator and participant
participant also fail
participant alone coordinator
phase the coordinator
coordinator has fail
phase were coordinator
means he sends
messages actually arrived
coordinator the coordinator
reach the decision
fail the coordinator
recover is simple
simple that participant
restart the protocol
send the prepare
transaction by running
coordinator has elected
failures new coordinator
coordinator is elected
transaction is restarted
phase commit restarted
commit restarted protocol
participants are live
starts the protocol
make an abort
sense the protocol
protocol become reentered
means any number
number of times
times any number
fails um failures
failures is occurred
coordinator will fails
algorithm to elect
coordinator actually fails
coordinator actually fail
aborting or committing
case were atleast
atleast one participant
participant which means
receives the coordinator
coordinator of decision
decision live participants
participants okay received
received the decision
fails some participant
doesn t receives
receives the decision
participants has received
normal that means
shooting is happening
out for tea
protocol you don
blocked you wont
continue our job
job okay similar
participant to recover
protocol we don
failure suffer means
protocol is non
doesn t block
live that means
means only coordinator
fail the decision
live a simple
protocol by electing
coordinator and restart
phase um commit
participant also failed
failure which means
people the interesting
decision of committing
remaining participant elect
elect the leader
terminate the protocol
participants are blocked
coordinator to recover
wait for coordinator
failures also means
means a participant
started normally coordinator
transaction is started
coordinator coordinator failure
failure a coordinator
failure normally means
failure only thing
case the remain
participant can reelect
reelect the coordinator
coordinator can make
participant is forced
forced to wait
protocol gets modified
intuitively to understand
state it state
important distributed system
node when things
system is easy
fail you wont
ambiguity for introducing
means the coordinator
phase of committing
observe the problem
terms of moving
moving um coordinator
prepared to commit
introduce a prepare
coordinator which means
coordinator has prepared
prepared to reach
reach prepare commit
prepare commit state
protocol can tolerate
coordinator will introduce
state or prepared
send a prepare
reach the undecided
basically the reads
reached the state
state before commit
issue the commit
state after receiving
receiving okay form
reasons to move
don t receive
state as usual
abort state message
state message message
coordinator state diagram
participant state diagram
reach the ready
participant will reach
state in case
receives the abort
reach the state
reaches that state
commit the coordinator
participant will move
state to abort
ready to commit
responded ready message
enter the state
call the prepare
prepare to commit
state which means
participant receives prepare
reaches the prepare
transaction is waiting
final decision coordinator
state is needed
participant fails reach
reach the prepare
participant to elect
case after coming
recovery from failure
participant to move
commit abort state
diagram we looked
actual failure scenarios
failures can occur
occur as usual
usual participant fail
phase second phase
phase are similar
similar the coordinator
examine this case
case in terms
recovery takes place
coordinator nobody receives
state okay prepared
state the rest
elect a coordinator
committed the transaction
coordinator actually pass
coordinator has passed
means it fail
simple case coordinator
case coordinator fails
message even means
participant have received
case is easy
knowing the coordinators
introducing an extra
coordinator directly don
don t commit
reach before state
failure is handled
handled by introducing
phase for commitment
coordinator is failing
failing these equivalent
leader election algorithm
electing a leader
failure there doing
doing a leader
signing in terms
unique id node
simple way assign
assign the highest
assign the live
fail that means
option of finding
node live node
make that node
coordinator that node
coordinator starts running
running the recovery
number of coordinator
coordinator failures tolerate
case is make
make a participant
coordinator failure figure
run the protocol
achieved in terms
things the properties
ensure that protocol
run any number
times that means
means a coordinator
running the algorithm
protocol that coordinator
reentrance that means
basically the protocol
tolerant to multiple
coordinator any number
ways to reenter
making it move
carefully the coordinator
coordinator has failed
means that node
start the protocol
run the entire
entire protocol staring
imitates the prepare
improve the protocol
decision of earlier
protocol to terminate
coordinator now ignore
ignore the decision
sends a message
enter the abort
coordinator to find
force the protocol
message which means
received this message
terminate the abort
receive the pcm
message this state
commit a transaction
check its state
checks the state
live participant based
reenter protocol terminates
direction in terms
terms of committing
protocol to commit
abort state depending
terms of recovery
coordinator as concerned
scenarios of failures
talking about network
failures as part
terms of network
protocol is concerned
interpreting the network
failure actually means
terms of system
back bone network
network its involved
basically a network
providing this connectivity
network actually fails
node has fail
case it wont
detect the difference
node is concerned
receive the reply
failure the node
doing some work
ready message chennai
message chennai node
chennai node doesn
failure that means
means a network
sense actually translates
failure the simple
case this translates
timeout actually reads
harm is done
done positive thing
thing is ends
doesn t reach
message or abort
assumes then abort
basically network failure
failure and node
commit are resilient
resilient to network
failures in terms
terms of transients
transients and participate
reach to multiple
typically this scenario
failure actually results
results in multiple
node in chennai
network actually connecting
assume that complicated
kind of hub
hub the southern
hub actually fail
nodes can reach
assume that chennai
chennai is concerned
mumbai and delhi
results in partitioning
set of nodes
consisting of mumbai
partition two consisting
consisting of chennai
chennai and bangalore
looked at scenario
bangalore could start
participants have failed
resilient to participant
right to run
run this protocol
two participants failure
delhi are concerned
failure one participant
handling this problem
nodes are delivering
nodes the participants
failure you wont
making an distinction
distinction network failure
network actually partitions
partitions the nodes
nodes into multiple
partitions you wont
words your making
making an assumption
case no partitioning
problem of recovering
taking them participant
difficulty an interesting
partitioning um network
partitioning can lead
lead to problem
protocols the states
participants which case
case the partitioning
partition and based
open ended problem
recover from network
make a distinction
distinction between network
partitions and node
node is live
remains the interesting
basic commit protocol
integrated with concurrency
control for distributed
phase commit protocols
commit protocols work
lecturer is concurrency
protocols for distributed
first few minutes
phases of execution
basically a growing
acquires the lock
releasing the locks
transaction is acquiring
call the lock
released one lock
ensures that transaction
basically transaction execution
transaction execution point
read the values
finished you release
item right assume
acquired a write
lock in shrinking
modify the value
modified from earlier
value is twenty
modified itself thirty
acquire the lock
lock which means
committed which means
transactions which read
transactions to read
values other transaction
transaction to read
phase locking commit
locks in terms
number of locks
executing it acquired
locks it required
required the point
reach it required
decide to commit
protocol gets executed
protocol is executed
executed the transaction
transaction actually finish
property being sacrificed
uncommitted modified value
locks as shown
earlier diagram nut
nut its integrate
locking is integrate
distributed two phase
locking will work
commit two phase
transaction because commit
commit protocol make
protocol make sense
question of involving
involving two phase
out the participants
node that nodes
basically the route
transaction actually spawn
spawn sub transaction
transaction also acquires
actual commit message
commit and release
lock okay imagine
transaction is operating
item y transaction
two is operating
two will acquire
commit its part
commit will start
start know execution
out two phase
protocol is run
run you figure
commit now based
commit protocol outcome
problem of blocking
two gets blocked
transaction get blocked
made a decision
decision on committing
abort the locks
finish which means
blocked from acquiring
acquiring the locks
resources are blocked
case data items
items are block
block from access
protocol the basic
nodes that means
means each node
node will run
local data items
accessing a data
problems of applying
applying two phase
transaction could access
access both locals
locals data item
remote data items
data items assume
two here correspond
acquire a read
send request lock
acquiring a lock
access the local
local data item
spawn a sub
required to access
access a data
node you spawn
spawn an agent
basically a sub
provide the extension
simple two phase
two pl takes
scenario of distributed
transaction sub transactions
transaction now lock
basically is needed
transaction is lock
request is send
basically the root
root node root
node root node
node which acquires
acquires the locks
locks on behalf
lock is acquired
two actually finishes
items so locks
require a lock
lock your making
making to request
node and acquiring
locking the root
root the root
transaction the locks
locks are held
basically it doesn
doesn t conflict
two transaction children
transaction children transactions
root node doesn
conflict is relived
kind of models
case of open
two um sub
tree in terms
transaction are spawn
nodes to acquire
acquire the locks
operating on data
access or modify
modify the data
item that means
nodes are allowed
allowed to modify
modify or process
process data item
put the restriction
transactions are meaning
make this nesting
nesting further nesting
nesting which means
divide main transaction
two a sub
open nested transaction
covert an open
nested transaction model
closed nested transaction
processing being done
dash which means
involve you spawn
means in terms
aggregated higher nodes
nodes they don
extension of nested
two pl requires
children for doing
processing are passed
obey the serializability
children never release
child to acquire
parent that means
parent the lock
lock we assume
locks with parent
making a request
finish your execution
execution your returning
inherent know serializability
serializability the higher
put in terms
terms of simple
simple tree structure
tree structure nodes
obtained is parent
means the higher
level the execution
proceeds in terms
tree the nodes
nodes of finishing
finishing one node
earlier till finishes
node can finish
node than finish
inherently that tree
transaction are executed
conflict that means
held by node
case a nested
transaction actually spawns
spawns a sub
transaction can spawn
spawn further sub
transaction it finishes
execution can proceed
extension of simple
scheme as part
earlier discussion transaction
discussion transaction model
scheme which shows
basic stamping scheme
scheme every transaction
logical lock value
point of distributed
kind of logical
reflect the total
last two bits
bit a part
entering the distributed
synchronizing their logical
case of mutual
mutual extension algorithm
case of lamports
scheme is applicable
means in affect
data item reading
nodes will decide
decide the order
access this data
value the basic
deciding in terms
item and making
executing in terms
write data item
data item data
item data based
two time stamp
stamp that means
basically the read
timestamp the highest
means it tells
correspondingly the write
basically the write
stamp the explanation
stamp is similar
value of transaction
stamp the write
terms of increasing
value that means
stamp is lower
item is greater
preventing the access
item in terms
transaction in terms
increasing time stamp
achieving the serializability
extend the basic
stamp distributed transaction
model by ensuring
stamps are generated
stamp the transaction
stamp are generated
items are distributed
writes are ordered
transaction are generated
ensuring a serializability
basically that extension
extension of basic
scenario the extension
simple and straight
system are synchronized
synchronized and executed
completely optimistic extension
nodes which means
set the write
number of votes
view the modification
modification which means
majority of copies
copies always consistent
earlier with respect
scenario the optimistic
scheme is interesting
fully replicated database
database that means
means the data
two data items
list of data
send the information
accept the list
node that means
nodes can decide
list is consistent
commit it doesn
commit which means
send your read
list and write
list for voting
decide to vote
means its read
read set consist
basically write set
write set consist
concerned and produces
produces this list
vote that means
communicate this list
list to node
transaction actually read
list actually non
modification is consistent
wts tools applied
transaction for serilazability
doesn t hold
good the rst
case of write
case of read
write transaction wts
apply the consistency
rules of rts
node and decide
proposal to modify
stil not modify
compare these values
rule is simple
conflict which means
conflicting t dash
clock time stamp
earlier conflicting transaction
execution sequence node
two execution sequence
sequence it received
list now didn
didn t conflict
heard the final
committed and send
apply the update
conflict pending list
list actually voted
twenty i wont
immediately but wait
decision on ten
vote ten twenty
twenty which means
means that differ
making a decision
possibility that means
doesn t create
create a problem
doesn t bother
create the problem
problem because based
assume a scenario
two i differ
differ then imagine
imagine a possibility
case which case
case were ten
wait both cases
cases then decide
clock um transaction
make any future
pending list clear
clear i wont
wont be make
list and result
avoid this confusion
majority votes pending
votes pending list
list actually majority
means that list
votes any pending
transactions are conflicting
achieve the majority
completely optimistic scenario
checking the consistency
consistency before start
deciding by sending
sending this updates
typically the pessimistic
pessimistic scenario verses
verses the optimistic
optimistic scenario pessimistic
earlier the consistency
check is made
begin that means
proceeding on execution
hand this check
executed in transaction
fully by applying
applying the consistency
locking based algorithm
algorithm which fall
transactions a models
models are consistent
visting tirupathi temple
basically your scheduling
execute which means
finishes it execution
give an order
basically end finish
fifteen to execute
finish it execution
generate this band
conflicting such transaction
band of ten
ten to fifteen
fifteen to ten
finish their execution
completely different kind
kind of model
data time stamp
points of execution
doing the consistency
ensure the consistency
times are giving
concerned by making
synchronized as fara
transaction execution concerned
concerned by doing
maintain time stamp
saving in terms
needing to maintain
variety of schemes
couple of scheme
management system dr.s.srinath
system dr.s.srinath lecture
introduction to transaction
session today staring
bring back database
disk crashes power
crashes power shutdown
shutdown um network
network connection failure
recover um data
data that involved
processed in main
memory during ram
ram um main
return into persistent
disk good recovery
order to recover
recover from crash
schedule in order
order to answer
answer this question
concept of transaction
database processing environment
title of session
recovery in fact
define the notion
notion of correct
recovery from wrong
wrong recovery based
based on concept
study about transactions
transactions in detail
transaction transaction processing
deciding which kind
kind of recovery
recovery is correct
recovery which isn
isn t correct
define the term
type of context
context its stand
stand for online
online transaction processing
processing and environment
accessories like networks
meant for online
interactively process database
process database transaction
defines these terms
classified as online
transaction processing environment
environment some examples
air line railway
line railway reservation
railway reservation systems
number of users
booking a railway
internet um suppose
suppose a train
delay in booking
booking your ticket
checking the status
status of tickets
kind of queuing
dispensed in atms
atms or wire
wire transfer mechanism
doubt environments require
environments require super
require super market
market checkout systems
baggage whatever things
checked out praised
praised and build
hotels and hospitals
trading and brokage
system where buying
buying and selling
continuously whenever trading
sessions are happening
accounts are maintained
locations or doesn
doesn t matter
performing several transaction
percent using net
transfer some money
withdraw some money
deposit some check
enchased or withdraw
sense two thousand
account um number
hundred and sixty
begin are set
set of database
database operations begin
begin the application
making this wired
initiate database operations
read the balance
withdrawal from account
account two thousand
threads of execution
number one sixty
process gets swapped
process is running
note that operating
hundred is added
atm and depositing
cash certain amount
amount of cash
performing wire transferred
transferred the person
account one sixty
process are schedule
schedule this set
set of operation
reading the balance
balance of account
adding three thousand
rupees is done
previous transaction finished
hundred is deducted
amount and added
previous balance amount
read three thousand
rupees was added
depositing is cheque
transaction is lost
lost this entire
operation is lost
four because suppose
suppose this person
person had fifty
fifty thousand rupees
fifty two thousand
fifty five thousand
facilities like net
banking or atm
booking train tickets
calls using sms
sms from mobiles
situation because concurrency
concurrency is concurrent
activities are happening
kind of activities
activities can result
database the entire
transaction of depositing
depositing three thousand
rupees is lost
dealing with situations
first two activities
activity of wired
transferred between account
conceptually separate distinct
separate distinct activity
activity of depositing
logically separate break
separate break activity
activity such kind
units of work
transaction the actual
actual database activities
database activities transaction
kinds of anonyms
formulate this things
transaction a transaction
unit of program
activity of withdrawing
depositing that money
constitutes one logical
unit of operation
combination of database
independent of depositing
account vice versa
definition of transactions
fests to handle
transactions are recovering
recovering from transactions
define a transaction
unit of work
account and depositing
meaningful semantic activity
activity as part
constitutes semantic process
users environment wire
environment wire transferred
transferred semantically depositing
rupees in order
order to deposit
deposit three thousand
two database operations
database operations network
operations network done
reading previous balance
balance and updating
updating the balance
reading and updation
constitutes one meaningful
depositing certain amount
amount of money
define even transaction
respect to concurrency
concurrency control recovery
necessarily semantic activity
activity in terms
terms of users
environment many cases
cases users depend
concerned with water
water considered transaction
transaction the database
combine database activities
transactions in order
order to maintain
phase of concurrency
control and recovery
recovery process transactions
respect to respect
recovery um atomic
stringent more requirement
work an atomic
atomic atomic unit
work basically means
transaction are performed
perform a half
half a transaction
transaction and leave
perform ninety percent
ninety percent transaction
perform entire set
set of activities
apply to consistent
consistent database returns
returns another consistent
work concurrency control
managed concurrency recovery
database to inconsistent
transactions some times
work um make
state of database
transaction should satisfied
application where transaction
processing in correct
correct transaction lead
lead to anonymous
notion of transactions
transactions different levels
enter the basic
basic properties transaction
transaction should hold
transaction acid stands
acid stands acid
stands acid stands
stands for atomicity
atomicity consistency isolation
isolation and durability
acid property atomicity
work that means
perform after transaction
transaction okay consistency
transaction basically means
means that databases
databases consistent transaction
transaction the atomic
work should work
work not lead
state that violates
violates integrity content
enforced database system
property of transaction
transaction is isolation
transaction violating isolations
isolation essentially means
database are happening
updates and reads
fashion the net
environment the net
activities are performed
sequence of execution
transaction was completed
transaction b begin
completed before transaction
order to understand
understand the notion
notion of commit
money is dispensed
expect the user
put back money
transaction is conflicting
commit operations performed
order to undo
undo the operations
dispense the money
money from atm
chased the person
person who withdrew
withdrew the money
undo the transaction
view the database
transaction involves wire
involves wire transferred
transferred from account
dot balance minus
balance minus equal
equal to amount
amount whatever amount
transferred and account
account b dot
balance plus equal
amount amount number
number of rupees
reason databases crashes
crash the network
operating system crash
system is brought
brought up game
process this transaction
order to make
make it atomic
back this amount
restart the transaction
perform is recovery
series of operation
amount b dot
dot balance equal
planned been performed
two different threads
balance is schedule
balance the amount
amount is crediting
sending two thousand
amount two thousand
remove two thousand
make this payment
make this transaction
deduct whatever credit
order to bring
back the consistency
normative or failure
failure with respect
failure which violated
violated integrity constraint
debit two thousand
account we found
violate the integrity
transaction to roll
property of isolation
deals with concurrency
handle concurrent operations
operations being performed
case of wired
transferred another case
transferring some account
person holding account
withdrawing some money
holding the account
holder is withdrawing
reading account balance
account balance debiting
debiting the amount
amount and crediting
crediting the amount
debiting this amount
holder for withdrawal
effect of running
read the database
debiting them debiting
debiting the account
begins only operation
two will fail
completed it doesn
transaction will fail
withdrawal will fail
transferred will fail
change we gave
money dispense information
information from atm
operation is performed
safe to dispense
back the transaction
commit is performed
transaction now transaction
transaction is set
states its depending
depending on whats
statement finish execution
proceeds with normal
happened some crash
crash some violation
violation integrity constraint
transaction is roll
transaction successfully completed
atm successfully dispense
successfully dispense money
committed or roll
back or aborted
partial commit state
reach fail state
partially committed state
fail state turns
maintain this acid
technique called shadow
shadow copy shadow
copy shadow copy
extremely simple inefficient
techniques for handling
handling are maintaining
maintaining acid properties
topic of transaction
illustrate the concept
perform to maintain
maintain certain properties
transaction shadow copy
shadow copy transaction
copy transaction assume
file and assume
atomicity consistency durability
copy its simply
perform your transaction
performing your transaction
make a copy
file the file
violate any integrity
safe to commit
simply you delete
delete the orginal
database in case
abort your transaction
delete the copy
make the entire
copy the database
database into entire
file and make
delete the original
file the original
acid properties database
operations are committed
operations are performed
constraint is violated
database is deleted
deleted so assuming
database is consistent
state okay isolation
making different shadow
commit or abort
aborts old file
made are persistent
concept of serializability
recovering from failed
previous shadow copy
copy example isolation
order to support
ensure the notion
environment this serializability
concurrent transaction taking
transaction taking place
transaction were executed
shows two transactions
two and transaction
taking fifty rupees
taking ten percent
percent whatever amount
account and crediting
perform all activities
two obviously serialize
serialize a serialize
performing all activities
transaction before starting
starting first activity
equivalent to performing
shows um shows
two are interleaved
interleaved the color
activities here belong
minus t write
completed but transaction
schedule this schedule
schedule is equivalent
updation of data
element is completed
two four first
four first operation
first operation involved
operation involved involving
involved involving data
involving data element
performed from transaction
thing with respect
back here put
put this back
changing the semantics
finishes it equivalent
two was executed
two before finish
finish the first
activites we define
term conflict serilazability
serilazability by first
defining the term
term called conflict
conflict between database
schedule is conflict
schedule is schedule
transactions all activities
two different transaction
referring to element
contents data element
data element doesn
order if atleast
thing is true
schedule a schedule
schedule now suppose
two will perform
perform and activities
order to determine
swapping of activities
activities database schedule
database schedule activities
activities and bring
transaction without encountering
kind of schedule
conflict equivalent schedule
conflict serilaizable schedule
equivalent to serialize
criteria is conflict
alternate weaker notion
weaker notion serialzability
serialzability called view
view serialzability conflict
serialzability conflict serializablity
case we don
serializability the view
data item queue
item queue suppose
data element queue
element queue suppose
reads the initial
initial value queue
reading this data
kind of dependency
similarly the last
performing final write
performs the final
schedule is view
figure the first
reads data element
queue and writes
back to disk
performing some operations
two just writes
write into queue
view equivalent schedule
view serializable schedule
serializable schedule note
pure serialize schedule
schedule the activities
completed before activities
reading the first
element to queue
schedule the first
reading data element
element is queue
two is writing
read before writes
write before writes
writing to queue
first data element
element to read
queue was read
read one last
fashion however note
schedule not conflict
swap the activities
element and belong
view is concerned
concerned it remains
conflict serializable schedule
thing has happen
find view serializable
schedule not serializable
blind water blind
water blind write
mark of blind
writes which bring
bring in schedules
understand what kinds
requirements of database
transactions as shown
reads a data
modification and writes
read data element
writes here transaction
reads the data
perform any writes
give me serialize
swapping by read
read b read
read a write
write a read
suppose um suppose
display the latest
commits and display
display the value
committed and committed
committed is durability
made some commitment
commitment some sense
impossible to recover
non recoverable schedule
schedule so serializability
serializability or conflict
schedule of transaction
crash so database
system whatever recoverable
problem of cascading
recoverable to recover
transactions the previous
suppose um transaction
committed and transaction
recoverable to defer
defer the commit
shows cascading rollback
cascading rollback situation
display the display
two in fact
two is dependent
turn will back
cascading roll backs
leading to large
amount of work
transaction in case
crash or system
undesirable undesirable thing
thing to happen
happen in lease
lease role undoing
undoing of lot
recoverable cascade list
avoid um cascading
session on database
issues that make
dealing database recovery
don t leave
leave any transaction
atomic atomicity transition
recovering from database
database um crash
crash the system
sufficient for schedules
conflict view serializability
cascade list schedule
rollback non transaction
completed just waiting
two of completed
read and written
transaction into commit
session we started
mechanisms in databases
ground of transactions
consistency in terms
leave a transaction
base is consistent
transaction is performed
violate in integrity
today s session
mechanisms for recovery
log based recovery
suggests log based
based recovery means
means that recovery
performed using transaction
transactions happen cert
transactions are logged
logged into log
record the data
kinds of failures
requirement of data
recovery mechanisms log
mechanisms log based
based recovery mechanisms
firstly why recovery
talk about recovery
recovery is pertinent
case of failures
data base system
network has failed
failed and transaction
distributed databases started
machines failed communication
two machines failed
transaction could fail
variety of reasons
violated integrity constraints
integrity constraints transaction
performed has led
functional the dbms
dbms the database
transactions after waiting
transaction has violated
violated an integrity
raising an exception
exception or intimating
intimating the application
transaction is wrong
databases has crashed
star the data
amount of data
set these things
properties of transactions
providing recovery mechanisms
property of transactions
require atomicity means
transactions or performed
transactions are performed
debited my account
kind of operation
similarly consistency requirements
consistent data base
base a valid
transaction should leave
leave the data
violates any kind
kind of cons
cons integrity constraints
complete the transactions
violating the atomicity
acid property states
dbms the net
equivalent to schedule
transactions have run
run in serial
living is safe
meant by safe
notion of conflict
conflict a view
schedule without encountering
encountering any kinds
kinds of conflicts
commits or durable
inside the data
performing some kind
kind of physical
yesterday of dispensing
transaction for withdrawing
withdrawing money succeeds
dispenses the required
customer for withdrawal
transaction the problem
data base systems
back this transaction
transaction becomes active
transaction has performed
finished its executions
transaction has rolled
transaction has committed
aborted or committed
kinds of states
states require recovery
transaction has terminated
data base crashes
atleast the dbms
submit this transaction
user has requested
requested for withdrawal
transaction has abort
committed and thousand
right after commit
data is updated
dbms this transactions
set of thousand
performed whatever operation
transactions whatever operations
resubmit the transactions
run the transaction
shows the state
diagram or state
fail state depending
chance of failure
commit in case
transaction is subjected
reached a fail
undoes whatever operations
meant by serial
schedule is valid
schedule of transactional
introduced the notion
remember conflict serializability
mechanism which define
notion of conflicting
conflicting data base
data base activities
don t affect
data data elements
operations data base
data base update
base update operations
schedule is safe
arranging the operations
encountering any conflicts
conflict serialize schedule
notion of non
non recoverable schedules
reading a data
performed some computation
concerned about recovery
operation it makes
operation we assume
elements and return
read a data
base another transaction
read that element
involves some kind
displaying the data
displayed the data
back because transaction
read the changed
changed data element
prevent non recoverable
schedules from occurring
preventing non recoverable
note that transaction
commit until transaction
transaction is reading
modified data element
modified data base
base second modified
ready and waiting
commit operation tells
schedule is recoverable
recoverable sometimes transaction
long running transaction
transaction it runs
two are short
transactions are waiting
waiting on transaction
concept of recovery
recovery from transaction
process of restoring
restoring the date
kinds of recovery
deferred update strategies
strategies immediate update
update strategies deferred
strategies deferred update
update essentially means
base are deferred
update techniques update
update the data
transactions are running
reaches it commit
point in deferred
deferred updates update
updates update techniques
update techniques data
techniques data base
base is updated
progresses however transaction
undo this operation
logged whatever update
updates are made
log the updates
updates after making
making the updates
made an update
writing the log
written a log
crashes before making
making the update
impacts recovery techniques
techniques the first
buffer caches buffer
caches buffer caches
memory that acts
cache for data
present on disk
sector is accessed
reading one disk
block usually operating
operating systems perform
reads a set
set of blocks
blocks into main
cache is flushed
flushed onto disk
interest of performance
perform some kind
kind of disk
disk sanity checks
operating systems crashed
systems crashed midway
operating system construct
system and application
programs or user
user level programs
programs that run
systems usually don
data base recovery
systems has written
aid write operating
write operating systems
systems in turn
impact a recovery
database management systems
kinds of cache
flushing this buffer
buffer cache flush
flush the system
base recovery technique
shadow paging technique
maintaining or recovering
case of crashes
concept of log
mentioned in passing
order to aid
aid the process
process of recovery
bases we maintain
base the information
crash would occur
prevent this log
log from growing
point a check
records a state
committed all transactions
throw away data
point the log
process of introducing
introducing a check
point in log
introduce check points
introduced and check
pointing actually involves
base all transaction
check pointing criteria
criteria is made
algorithm for check
costly in terms
terms of operations
suspend all transactional
handling this check
flush all main
main memory buffers
modified to disk
base we force
write a check
check point note
disk the fact
encountered a check
persistently onto disk
thrown way information
performed a check
check pointing operation
resume transaction activities
notion of fussy
fussy check points
slightly more efficient
usual check pointing
check pointing techniques
pointing techniques note
note that check
check pointing requires
pointing requires suspension
impacts data base
data base performance
point and seek
making this check
check pointing faster
faster the main
overhead in check
cache contains set
set of disk
fussy check pointing
transaction activities resume
resume after writing
writing the check
check point entry
flushing actives activities
older log entries
check point operations
written onto disk
buffer cache buffer
done the previous
set of log
deferred update recovery
suggests deferred updates
deferred updates means
deferred until transaction
transaction has reached
reached a ready
simply this thing
change the data
transaction has run
half or ninety
percent or ninety
ninety five percent
commit point database
reach its commit
operations are operations
log is force
single user environment
sequential data base
data base engine
engine where transaction
helps in understanding
deferred update techniques
update techniques technique
techniques technique works
works so deferred
lists of transactions
system is asked
asked to recover
state the recovery
recovery process starts
last check point
single user operation
transactions are maintained
recovery is concerned
write items logs
variety of purposes
understand the behaviour
behaviour of transaction
profile the performance
base there fore
write item belonging
belonging to transaction
transaction t involving
base for element
list are maintained
previous check points
writing those values
don t care
values were read
committed the cash
operations we don
doing these things
write those values
points and start
value of ten
ten data elements
value of abc
transactions which crashed
modified the data
deferred update technique
don t modify
wont be ready
transaction were performed
log is flushed
multi user environment
environment we don
worry about concurrency
transactions are serialized
fashion by default
problem of serialization
serialization of transactions
transactions now serialization
techniques we require
require that concurrency
strict two phase
notion of locking
contexts in operating
ess essentially means
transaction is performing
elements it obtains
obtains a lock
locks the data
access the data
kinds of locks
locks and write
locks so read
locks are exclusive
transaction has obtained
transaction can read
read the element
reaches its commit
whater whatever updates
made is safe
release its locks
releases its locks
data element read
locking the recovery
follow the technique
make two lists
lists of transaction
base has crashed
starting to recover
previous check point
redo the operations
state that redo
optimize this redo
operations by introducing
introducing some concurrency
read and redo
ground is free
hold those locks
locks and resubmit
shows a set
two different events
check pointing event
pointing event happened
check pointing data
out we don
four have started
pointing is performed
performed and transaction
two has started
committed its operation
system has crashed
deferred update operation
doesn t figure
happening here committed
two will undergo
undergo redo operation
updates are logged
file the data
performed on transaction
removed after check
point it doesn
figure during syste
syste system crash
figure during updates
deleted at check
subjected to redo
aborted and resubmitted
issues about redo
write the last
write a previous
log and start
start making updates
making updates moving
updates moving backwards
write a data
written the latest
value during redo
properties of deferred
possibility of cascading
transaction and waiting
amount of disk
operations during commit
commit because enormous
amounts of updates
techniques the data
sake of recovery
recovery data base
data base updates
updates are performed
updates are recorded
kind of deferred
deferred updates happening
updates are deferred
order to perform
write item element
belongs to transaction
undo we dint
store old value
value in deferred
entries are created
undo and redo
perform the operations
problems during undo
undo and undo
couldn t finish
restart this undo
performing any computation
percent so reduce
environment using transact
point and list
point and first
first we start
start by undoing
perform the redo
multi user environments
list of transaction
point then undo
undo the writes
policy and redo
give the transactions
updates can happen
logs are written
buffer cache logs
load on data
deferred update transaction
update transaction deferred
transaction deferred update
launching a missile
upper application program
database is updated
committed that commit
system could crash
disk is updated
logs are updated
force writing logs
recovery using log
based recovery techniques
issues we started
concerned in recovery
recovery in data
systems we looked
issues that affect
affect recovery processes
sake of efficiency
efficiency disk blocks
cached into ram
talking about recovery
impact recovery process
concept of check
stored in logs
kinds of log
recovery techniques deferred
techniques deferred updates
operations in deferred
categorized this log
two different kinds
kinds single user
single user environments
environments and multi
locking in order
order to prevent
prevent cascading roll
session .. lecture
techniques in data
data base management
base management systems
recover a data
base was running
system was subjected
varieties of recovery
advantages and disadvantages
topic further today
today and bring
entails database recovery
subjected to frequent
frequent or non
non frequent kind
failures different kinds
failures or media
crashes or communication
failures or transaction
transaction failures system
failures system failures
failures and transaction
system failure system
failure system failure
running your dbms
machine and lets
memory like ram
ram are lost
present on persistent
storage like disk
ram is lost
failures like transaction
common transaction failures
transaction failures entail
failures entail failures
reasons given transaction
complete its operation
operation this reasons
running this transaction
transaction was doing
memory is lost
base is distributed
geographically distributed data
distributed data bases
encounter communication failures
failures called media
disk developing bad
developing bad sectors
damage physical damage
transactions in data
data bases follow
property of acid
acid which stands
obvious because suppose
shou should run
sufficient if money
money is debited
debited but credited
credited or vice
versa similarly consistency
consistency a transaction
notions of triggers
data data base
data base consistency
consistency is violated
violated automatically triggers
triggers are enforced
transactions to roll
commercial data bases
data base starts
simultaneously for efficiency
kind of serial
made is persistent
persistent after commit
aborted or rolled
committed it means
performed some kind
automatic teller machine
teller machine transaction
commits it means
atm to dispense
atm has dispensed
money we decide
transactions are committed
states like active
committed or failed
committed or terminated
performing some operation
operation it feds
feds some data
elements and made
proceed further wheth
calculate or perform
perform its computation
transaction has failed
back is complete
transaction has aborted
transaction successfully commits
failed transaction depends
transaction depends depending
partially committed transaction
perform a roll
roll back operation
meant by transaction
recover the data
recent consistent state
forming several transactions
kinds of system
leaves the system
consistent state half
ten different active
state after recovery
buy the dbms
recovery to happen
kinds of schedules
performs a right
reads an element
commits that means
updated the bank
bank or updated
updated your stock
account and displayed
printed a statement
encounters a system
printed the statement
statement or displayed
kind of problem
problem with recovery
back a transaction
suppose we decide
decide that transaction
aborted it means
means that transaction
read this transaction
based recovery log
recovery log based
write ahead logging
abbreviated as wla
logging addresses wal
wal rather write
logging essentially means
performing any operation
base you perform
file in order
essentially two kinds
kinds of techniques
based on write
base is first
first just return
transaction is ready
log be return
commit point transaction
enter a commit
commit or committed
redo your transaction
reaches the point
techniques where data
data bases updated
update techniques requires
requires both undo
undo all active
redo all transactions
idea behind recovery
recovery using deferred
operation as part
multi user system
multi user data
user data base
order to enforce
data base item
occurring as part
problem with deferred
suppose a transaction
hundred different operations
operations are written
spurt of activity
entire life span
potentially heavy disk
heavy disk operations
operations during commits
bring down performance
system to thrash
transactions are written
written onto logs
logs we require
require both undo
undo slash redo
slash redo transact
transact or undo
slash redo recovery
redo recovery techniques
techniques the general
executing the data
suppose the transaction
perform its commit
changing the data
performing the transaction
perform corresponding undo
transaction has made
base so data
updates or perform
written onto disks
necessarily be force
written to disks
base now suppose
two different operations
undo all unfinished
redo all committed
safe to throw
monotonically increasing file
suppose we don
don t truncate
truncate the log
difficult to manage
conclusively to decide
notion of check
points also coming
sake of completeness
based of transaction
variety of transaction
transaction recovery protocols
slash no redo
redo slash undo
tech update techniques
redo the general
idea behind undo
undo based transactions
based on pure
pure undo operation
transactions are flushed
flushed onto disks
disks during check
transactions we flush
flush all committed
transaction is maintained
enter a entry
maintain a pointer
entries are maintained
compensating log records
operation you perform
perform you store
debit five thousand
credit thousand rupees
kind of update
tuple the compensating
base the compensating
maintain the log
log of compensating
committed and flush
encounter a system
crashed and follow
follow the backward
chain of logs
logs and perform
pure undo based
undo based operation
redo is performed
flushing of transactions
data are performed
durable that means
longer be stored
stored as part
data about committed
amount of log
performance over head
bring the data
quos on state
state that means
activities all transactional
restart the data
pointing is done
frequent an interval
interval if check
increasing the amount
algorithm for taking
taking a check
suspend all transaction
write or flush
modified of committed
log and force
write the log
log onto disk
safe to resume
bringing a data
operation just imagine
large data base
southern railway zone
thousands of transactions
reservations and cancellations
kinds of activities
lets say rescheduling
stop the data
impairs the activities
reservation centers waiting
waiting to reserve
reserve their tickets
tickets and bringing
bringing the dbms
bringing the data
taking a checkpoint
difficult to handle
impedes the performance
notion of fuzzy
fuzzy check point
fuzzy check points
require normal check
normal check pointing
activities but fuzzy
fuzzy check pointing
write the check
watching the disk
disk the operating
check point log
kind of check
required the data
non quiescent check
quiescent check pointing
unlike fuzzy check
watch the physical
sector or physical
physical disk block
active and non
non active transactions
point or handled
pointing actually performs
active uncommitted transactions
make an entry
entry called start
start check point
active transactions running
reach the disk
disk now wait
watch the disk
transaction either commit
prevent other transaction
transaction from starting
finished or terminated
terminated we write
write a end
end check point
flush the log
start to read
read the log
last entry onwards
onwards or suppose
suppose we meet
meet a end
previous check pointing
transactions were running
suppose we reach
reach a start
crash has occurred
committed or aborted
crash has happened
kind of backward
undo only kind
point and undo
check pointing operations
normal quiescent based
quiescent based check
based check pointing
suspend all activities
part of sys
technique of recovery
based on logging
maintaining different copies
copies of data
data base pages
pages or logical
cooperation which pages
lets say disk
blocks or disk
sectors or set
set of sectors
pages in order
side and recovery
recovery basically entails
page and revert
shadow original page
don t delete
shortly shadow paging
efficient in terms
perform multiple write
multiple write operations
multiple update operations
shadow paging suffers
suffers from fragmentation
fragmentation of pages
number of recovery
paging technique work
page can correspond
set of tuples
two different point
current page pointer
shadow page pointer
create a copy
point the current
copy the original
perform the modifications
modifications whatever update
discard this page
change that change
change the current
pointer to null
creating a shadow
essentially shadow pages
pages are updated
point or check
crash recovery operation
operation we perform
replace the current
shadow page make
make the shadow
previous shadow page
updating the shadow
check point requires
point requires creation
kind of evident
quiescent mode check
mode check pointing
suspend a data
replacing the shadow
consistent current page
issue the main
handle such issues
crashes during recovery
affect the data
operations are idempotent
word idem potent
idem potent idempotent
idempotent essentially means
times you perform
perform the operation
operation the net
performed the operation
perform this operation
copying an element
idempotent no matter
times you copy
problem with idempotent
redo operations idempotent
ensure that multiple
transactions or multiple
wait until previous
performance in terms
terms of performance
crash during recovery
changing the pointers
pointers are lost
access the page
larger data base
talked about system
crashes or transaction
development of bad
fortunately media failures
disk crashes happen
operating system hanging
archiving or taking
concept of taking
backups its simply
taking a copy
talking about large
talk about data
system always imagine
imagine a large
problems of data
takes a huge
byte of data
common in fact
bytes of data
operational data base
possibly even tera
data now copying
optical storage takes
storage takes huge
takes huge amount
order of hours
copy the entire
elements onto backup
back up operations
suspend all railway
reserve any train
twenty four hours
hours a day
days a week
book train tickets
perform online backup
online backup operations
idea behind online
definitions we distinguish
levels of archivals
call as level
level zero archivals
archivals and level
level i archival
level zero archival
entire data base
level incremental dump
last i minus
minus one level
level i minus
archival is shown
memory and disk
noticed the similarity
similarity between archival
archival and check
check pointing check
pointing check pointing
state an archival
requires a suspension
order to copy
archive so check
data from memory
memory onto disk
based on logs
process gets data
data from disk
disk onto archive
suspend all dbms
activities during archival
updating its data
data base operations
store the log
recover from archive
archive plus log
back the data
last consistent state
operation is running
algorithm for online
begin by writing
writing a begin
begin the archival
perform a check
point usually quiescent
quiescent check point
begin the dump
dump and began
began the check
perform the dump
dump ok full
full or incremental
kind of dump
transferred onto archive
including the check
log then enter
enter end dump
advantage the advantage
advantage is shown
restore the data
recovery from media
restoring the data
archive we find
recent full dump
dump and reconstruct
reconstruct the archive
data base log
surviving log entry
point we start
redoing those data
undo log logs
operations and suppose
log we perform
redo operations depending
depending upon lets
kind of logging
kinds of summarize
topics in data
touched upon esp
significantly the kind
commercial dbms systems
dbms systems today
combination of undo
redo logging operation
performance and recovery
recovery over rates
pure redo operations
activity during commits
series of protocols
protocols called aries
proposed it ibm
ibm un verdant
verdant research centre
commercial data base
covered those covered
covered the details
reasons of brevity
updates and check
operations and idempotent
studied in data
topic of data
recovery we looked
idea of transaction
transaction can exist
criteria for transactions
protocol should run
system crashes media
crashes media crashes
media crashes transaction
crashes transaction failures
slash redo operations
recovery and undo
based on compensating
records or clr
notion of shadow
multiple write operation
possibility of encountering
encountering garbage system
garbage system pages
pages as part
disadvantages with respect
respect to write
notion of archiving
idea of taking
taking online backups
backups for handling
handling media failures
archives but based
slightly different topic
idea of data
change in topic
kind of users
sense clerical users
interested in adding
adding and retrieving
retrieving data elements
means the users
base are involved
design a database
system for reserving
reserving a ticket
entry is made
base and suppose
modified that means
entry and make
meant by operational
system or operational
day today operations
reservation you enter
enter the request
reserve a seat
kinds of users
sitting in front
perform your operations
variety of strategic
railway reservation counter
counter which part
people by traveling
traveling by first
kinds of strategic
fed and retrieved
required for making
making strategic decisions
make strategic decisions
lot of information
addresses are people
coming and booking
assuming that area
nearest reservation counter
makes more sense
aspect of data
data base design
strategic decision making
decision making usage
data warehousing data
warehousing data warehousing
understand the term
warehousing a warehouse
number of stocks
typically of strategic
civil engineering project
project the location
prime importance depending
transportation logistics coordination
handling a large
large infrastructure project
lets say building
building a flyover
crucial strategic decisions
sense a data
warehouse of data
operational data sources
olap or online
online analytical processing
processing that means
requests or queries
talked about transactions
queries in turn
amount of interest
ocean of data
exploration into data
part as shown
difference between olap
analytical processing versus
versus the online
traditional data bases
bases are geared
cleaning and data
two parts deal
data warehouse design
kind of index
data warehouse based
hash based indexes
talking about data
essentially divide data
kinds of data
considered as data
data that works
works within quotes
number your pin
operational data elements
performing the operation
operation of withdrawal
withdrawal of money
characteristics of operational
operational data operational
data operational data
data are subjected
updates and queries
money almost everyday
kind of operations
kind of queries
queries or updates
sessions on normalizations
normalizations and functional
make the process
process of updates
prevent any kind
kind of redundancies
update anomalies suppose
suppose a update
update all occurrences
order to minimize
minimize update anomalies
normalize the set
set of tables
require several information
number name address
address branch location
branch location balance
location balance transaction
balance transaction history
type of account
normalized the set
tables are fragmented
kind of emphasized
emphasized that means
opened an account
access your account
expect the account
present in delhi
queried in chennai
back to delhi
queries over operational
query a point
account with account
set of ten
kind of data
set of operational
operational data sets
data that tells
trends of operationalization
railway reservation centers
past ten years
kind of people
make what kinds
kinds of railway
salary range travel
classes sleeper classes
kind of updates
data sets undergoes
infrequent in nature
collect historical data
analytical queries requires
queries requires huge
requires huge amounts
amounts of aggregation
large data set
class sleeper tickets
integrated data set
trends for trends
operational data source
source it doesn
managing historical data
historical data occurs
infrequent than queries
queries and queries
access a large
perform a number
number of aggregate
return the query
return query results
order of maximum
giving the query
data and historical
data a transactional
data or operational
systems or online
online transactional processing
transactional processing systems
transactions and handle
handle different transactional
examples of operational
salary of mr.misra
out the employee
number of mr.misra
address and phone
person in charge
find the supplies
set of managers
managers id find
find the address
kind of typical
typical analytical produce
typical transactional queries
queries in sql
optimize this queries
employee attrition scene
attrition scene changing
kind of query
answer this query
employee attrition information
out some aggregate
aggregate employee attrition
viable to continue
continue our manufacturing
unit in tai
pretty vague query
calculate financial viability
financial viability profits
profits against cost
incurring more profits
gaining more profits
easy to find
aggregate a number
kinds of queries
interest for strategic
perform strategic decision
infrastructure to manage
manage such kinds
kinds of historical
designed to support
support olap queries
olap queries involving
involving very gratuitous
gratuitous use aggregations
aggregations aggregated queries
number of post
post retrieval processing
possibly more complex
gathered huge amount
amount of information
profits and costs
project this information
warehouse a data
meant for managing
historical data historical
data historical data
life insurance corporation
corporation of india
units we obtain
obtain huge number
number of operational
data elements everyday
everyday rite everyday
traveling in trains
booked their tickets
cleaning and integration
meant by data
call as dirty
sources of dirty
data is subjected
subjected to data
sources we present
integrate this set
notion of data
collection of data
kind of segment
specific oltp segment
oltp segment suppose
segment called express
express train reservations
interested in strategic
super fast trains
gathered about rajdhani
mart called rajdhani
marts that feeds
warehouse and data
data warehouse data
warehouse data marts
support all activities
expand this system
box and data
oltp data sources
data sources operational
sources operational data
sources that feed
integrate operational data
populate the data
data is sufficient
characteristic of operational
sources is relevant
talking about historical
two different things
standard of data
representation and semantics
remove any kind
kind of duplicate
data sources suppose
account for booking
forgot your user
back and open
open another account
accounts are considered
give us erroneous
information or erroneous
erroneous aggregate information
performing any kind
kind of aggregate
kinds of complexities
encounter in performing
performing these kinds
model of data
integration and cleaning
cleaning is shown
sources which feed
opened the box
two different units
data cleaning unit
data integration unit
garner a data
data sources pass
data cleaning pass
oltp data bases
data is integrated
based on queries
warehouse or updates
perform your cleaning
data warehouse cleaning
cleaning essentially means
important for oltp
oltp to representations
bit more detail
suggests data cleaning
performs a cleaning
operations on data
meant by dirty
talking about dirt
dirt within quotes
sources of dirt
dirt that requires
kind of dirt
lack of standardization
branches different reservation
ascii base systems
multiple encodings multiple
encodings multiple locales
multiple locales multiple
locales multiple languages
data is represented
encoding or language
writes mahatma gandhi
mahatma gandhi road
writes m.g road
recognize that m.g
answering a query
road or live
road who buy
search both m.g
road and mahatma
semantic equivalence m.g
equivalence m.g road
write an intelligent
expansion of m.g
semantic equivalence chennai
chennai and madras
madras some people
historical data note
knowing though intelligent
knowledge in addition
environment the governmental
policies the standards
miles and feet
point six kilometers
data like missing
spurious or duplicate
probability of attrition
incorrectly entered sales
entered sales values
duplication of data
bought a ticket
reservation center sighting
bough another ticket
kind of semantic
thee is duplicate
data like inconsistencies
ticket is maintained
data base designer
designer has designed
reservation center number
historical data base
encounter some data
inconsistent duplicate data
two data sets
found to belong
two different addresses
detect such things
kinds of inconsistencies
inconsistencies like inconsistent
total sales figure
typed february thirty-first
thirty-first or march
first or march
violations in referential
integrity like referential
ten lakh rupees
lakh rupees sales
rupees sales reported
dirty data crop
cleaning or data
kind of open
field of data
single thumb rule
data is pass
issues in data
computer to learn
madras or burma
gigo or garbage
garbage out suppose
suppose you give
give some garbage
give some junk
outputs we don
output is correct
hard to verify
data and data
data cleaning requires
cleaning requires considerable
requires considerable knowledge
point six kilometer
kilometer is equal
data about governmental
data about geography
knowledge about geography
geography governmental policies
governmental policies metrics
design a data
kind of paraphrase
data cleaning complexity
cleaning complexity increases
increase the history
steps in data
typical data process
data cleaning process
start with data
set of oltp
sources we start
start by analyzing
kind of meta
user in turn
set of transformation
kind of dirty
specifies the set
scheme or data
level which transforms
transforms dirty data
data into clean
verify the rule
test test data
test data sets
kind of sample
sample data sets
incorporate the transformation
perform the data
process is performed
repopulate the data
sources with cleaned
oltp data source
perform a back
chennai or madras
kind of standard
rules are performed
search for illegal
strategy for checking
checking for illegal
deviation or cardinality
letters that form
transformation on hashing
gram and shi
gram and hin
checking spelling mistakes
mistakes similarly lack
lack of standards
compare values sets
duplicate and missing
compare the number
number of rows
match the cardinality
kind of missing
slightly more detail
kind of techniques
algorithm for duplicate
hash merge algorithm
remember the storage
storage structures session
meant by hashing
tuples duplicate tuples
tuples with duplicate
elimination of duplicates
duplicates now reduces
reduces to searching
four different records
amit and fifty
fifty lvl road
technique called sorted
sorted neighborhood techniques
sets and sorted
case we identified
sort the table
table based based
similarly all misspellings
close to amit
tens of thousands
thousands of records
merge the misspellings
make multiple passes
passes until theer
merges of records
elimination in addition
addition to misspelling
graph based transitive
based transitive closure
sorted neighborhood algorithm
reduces the number
number of passes
algorithm is based
notion of transitivity
two are duplicates
establish a relationship
duplicate of relationship
sliding the window
idea behind graph
shows the schematic
naive sliding window
protocol we start
start by comparing
reduce the number
issue of integration
two different levels
integration and schema
schema integration entails
integration entails forming
forming an integrated
integrated schematic structure
desperate data sources
sources from counter
counter a counter
counter b counter
common schematic structure
structure and data
integration essentially entails
essentially entails cleaning
cleaning and merging
table called cars
fields like serial
serial number model
number model color
model color stereo
color stereo glass
stereo glass tint
two different tables
autos and serial
face when performing
performing schema integration
structural differences data
differences data type
data type differences
type differences semantic
differences semantic differences
architecture of schema
integrator is shown
lower most stage
schema the extractor
standard schema set
cars or autos
common schema set
handles query based
warehouse or handles
essentially physically extracts
physically extracts data
extracts data crates
crates a schema
wrapper similarly mediator
constructor physically constructs
constructs a data
extracted data sources
make the life
easier for sink
power or eti
star and ssa
session we looked
differences between olap
olap and oltp
difference between analytical
queries and transactional
data warehousing system
populating the data
shobana proof reading
vidya database management
prof d janakiram
introduction to database
year under graduate
data structures file
structures file systems
systems probably operating
concepts are required
forty two lecture
two lecture module
covering the transacting
transacting processing system
instructor dr srinath
covering the initial
sections on database
lecture is give
introduction to databases
databases and show
show the importance
importance of databases
data in digital
mode of data
stored by corporates
organizations as increased
terabytes now databases
day today life
lot of transactions
transactions our day
day today transactions
airline ticket reservation
reservation or withdrawal
store the costumer
information user information
form of databases
transactions like withdrawal
bank or reserving
essential um thing
business processing world
key entity interms
interms of developing
developing these applications
applications business process
business process applications
applications to show
show what kind
database have assumed
assumed in recent
life i realized
realized only yesterday
pay a premium
paying this policy
policy the lic
lic actually sends
paper copy posted
lic um branch
paying the premium
carry the cash
physically now move
doing this transactions
transactions business transactions
pay the premium
box which means
office without moving
finish this entire
entire business transaction
call as work
flow actually takes
show you online
lic s database
lic s portal
user the ability
ability to login
earlier with lic
calculate the lone
paid which shows
paid already online
database actually shows
single point access
online premium payment
choose the policies
lot of options
amount of premium
paying this premium
city bank debit
bank debit card
sbi net banking
bank of india
india s gateway
gateway payment gateway
login into state
india s database
give my details
paying this money
money to lic
verify and confirm
confirm life insurance
life insurance con
insurance con transactions
con transactions detail
rupees and date
branch is indian
institute of technology
paid your payment
sbi s database
pay to lic
lic for paying
paying my premium
back to lic
view or print
print a confirmation
mail id provided
requirements to store
paid this premium
receipt which tells
doesn t required
signed by lic
receipt is generated
generated by lic
databases and doing
doing business transactions
paid this amount
amount to lic
lic and lic
received this amount
lot of issues
costumer is protected
reflex this payment
execute this online
online sitting right
done very late
pay this premium
data is digitized
digitized and exposed
extremely important important
important important subject
applications and making
making them usable
life by people
examples also exists
clear drip trip
drip trip dot
similarly make payments
payments and buy
buy your tickets
things with respect
booking your reservations
reservations and things
examples or principles
principles in developing
developing these kind
kind of database
huf um half
half an hour
process within iit
madras the business
people to purchase
purchase computer systems
systems and peripherals
faculty of iit
supply these peripherals
purchase these systems
supply of computer
peripherals and computer
vendors can bid
points of times
vendor is chosen
rate contract system
quote at regular
computer system configuration
iit s requirement
things has chosen
systems are chosen
generate the required
papers for purchasing
purchasing those systems
paper based system
supplied their quotes
quotes on paper
word processing system
system like microsoft
microsoft word providing
providing a comparative
basically file systems
lot of processing
processing manual processing
processing of entering
entering these data
involves a tds
tds a typing
papers to varies
four weeks minimum
entire process starting
lot of manual
circulation of large
quantity of papers
involved in choosing
choosing these things
processing by choosing
introducing data base
systems for automating
automating the entire
entire business process
process or work
processes or work
work flow elements
first cut requirements
developed to show
sort of automated
initial know initial
introduce the database
automating this business
rate contract details
members in choosing
choosing their requirements
search through computer
configuration or add
add on parts
parts or space
space for computer
systems or printers
printers and scanners
scanners and note
note book computers
iit specification number
specification number wise
specification will give
search through vendor
click on specification
wise and submit
choose the fourth
specification and submit
submit that specification
company um infotech
limited which quoted
four at twenty
twenty five thousand
thirty three chipset
thirty five chipset
cpu clock speed
submit this quote
cannocial electronics private
electronics private limited
speed two point
matching this requirement
satisfies my requirement
end um database
access that data
retrieve the data
data which matches
match the required
values and retrieving
retrieving the data
supplied its quiet
navigate through data
data which means
number is concerned
choosing which means
information that satisfies
students who registered
ways we retrieve
retrieve this data
iit serial number
company name unit
unit price unit
price unit price
price without monitor
monitor category thing
organized as flat
storing the data
model or real
real world data
world data model
store the information
information about maruti
maruti eight hundred
object data model
kind of engine
parts that engine
information more interms
interms of objects
flat table base
table base model
relational database system
applications that fit
model for building
building this computer
computer rate contract
relational model fix
developing the application
enabled this database
vendor to login
give a guest
guest name guest
enter my system
kinds of specifications
list of specifications
decides his specification
give this information
supply that information
information here unit
basically can give
put some comments
additional component cost
component cost component
decided to quote
basically the entire
entire relational database
database system concept
system concept makes
concept makes sense
doing this update
make my decisions
processes or transaction
transaction to access
quotation is registered
situated in delhi
chennai different parts
parts of chennai
quotes that quote
processes and transaction
challenges are conceptual
understanding in building
understand this application
store this data
data or create
create my tables
make the transactions
created a database
mysql relational database
tables and store
store the database
database um underneath
put my data
key um database
creating this rate
contract rc underscore
underscore april underscore
storing the information
quotations for add
add on systems
quotation for computer
table and approved
quotations for note
books and approved
quotation for printers
sense they form
form the schema
critical in database
study as part
design my database
system the starting
point for design
people who select
vendors have quoted
attributes these entities
quotations for computers
break an entity
serial number chipset
number chipset vendor
registered with iit
madras then vendors
converting this entity
thing like users
information on company
designing your database
convert the entities
entities into tables
tables relational tables
store this information
interms of converting
converting an entity
information is duplicated
places the company
data will create
piece of fact
fact at multiple
lot of problems
database design concepts
concepts will explain
process of design
entity relationship diagram
twenty three tables
design my system
case of quotations
vendor name unit
unit price bulk
price bulk price
bulk price bulk
bulk two price
number of systems
monitor without monitor
kind of monitor
schemas also change
tomorrow i don
longer my requirement
computer which means
understand as schema
systems evolve business
evolve business processes
business processes evolved
evolved and systems
systems evolved schema
deal with databases
done earlier interms
browse the entire
systems which quoted
intel g thirty
price they didn
didn t quote
comments for people
viewsonic or acer
acer tft monitors
data gets changed
guest and quoted
quoted eighteen thousand
information is reflected
vat is extra
flow is concerned
information whatever people
people have quoted
quotations for examples
examples for computers
reflect the approved
systems for computer
organized in terms
pick the informations
detail how transactions
database um system
data and change
change the state
shown you earlier
first level search
choose a specification
make a query
submit that thing
read only transactions
database and reading
reading the information
browser so last
last thing happening
thing happening underneath
carry the database
information and show
show this information
read only transaction
reading the values
kind of transactions
give some data
updating our underneath
database to summarize
summarize whats happening
design the underneath
models and store
store the data
accessing this data
data and supporting
supporting various business
rate contract allowing
allowing my vendors
vendors to quote
database and allowing
faculty to choose
order the related
related computer systems
entire business processing
data is automated
underlining database systems
extremely critical interms
interms of supporting
automating this processes
processes and eliminating
eliminating manual processing
processing and manual
simple and elegant
elegant and nice
handling our business
business processing systems
meaning of transactions
maintain the consistency
develop these systems
systems and make
day to day
covered in depth
forty one lectures
vidhya proof read
shobana database management
management system lecture
session in database
real world dbms
dbms we learned
concepts in database
tables are stored
query processing engine
kinds of indexing
real world context
pretty interesting real
interesting real world
real world database
world database system
system namely mysql
mysql database system
free software phenomenon
realm of algorithms
free of charge
free for charge
free software foundation
foundation um people
people who allocate
allocate free software
popular open source
open source database
source database systems
gnu public license
cases of gpl
gist of gpl
provided is free
make any modifications
free to redistribute
redistribute the source
free to resell
resell the source
varieties of gpl
variety of gpl
download down mysql
widely used database
variety of systems
systems like embedded
systems to large
large scale information
scale information systems
systems and operating
www dot mysql
dot mysql dot
mysql dot org
history of mysql
phenomenon in database
systems in fact
genesis of mysql
small sql engine
engine called msql
guess it stood
simple sql engine
engine that allowed
write um sql
queries and maintain
maintain very simple
set of people
tweak msql msql
endeavor um arose
completely new set
mysql now mysql
people who form
formed um form
form this database
versions of mysql
lot more support
install and tune
tune your database
apis or application
application programming interface
eiffel java perl
java perl php
directly send sql
send sql commands
commands to mysql
embed your database
based um disk
team themselves developed
developed new storage
storage structure structure
performs index compression
support both transactional
transactional and non
non transactional operations
transactional operations remember
essentially the acid
atomicity and isolation
isolation and consistency
consistency in durability
sense implies recovery
commit has happened
multi threaded engine
operating system supports
system supports threads
kernel level mysql
supports multiple processors
processors um mysql
automatically uses multiple
multi processor machine
kind of memory
memory allocation system
thread based memory
based memory allocation
light weight process
weight process manages
features like fast
performing the joins
kinds of join
join techniques merge
techniques merge join
merge join hash
join hash join
forms the gist
algo these techniques
computes fast joints
tables are required
nested sql query
memory hash tables
fast to access
stand alone server
application actually runs
application is supporting
supporting um database
atomic data types
talking about sql
integers and date
strings and characters
set data type
provide the enumerated
set of values
similarly in mysql
signed and unsigned
lengths of integers
tiny int small
int small int
int um integers
integers and big
float um floating
floating point numbers
point numbers double
numbers double precision
double precision numbers
precision numbers characters
numbers characters varchar
number of characters
characters and text
text and blob
binary large object
audio visual file
supports um variable
variable length records
records your record
combination of fixed
fixed and variable
mysql supports functions
sql statement remember
set of field
select and give
give a function
scored by students
average of marks
marks from student
marks is greater
greater than sixty
functions where average
session on sql
functions being supported
initial sql standards
mysql also supports
supports outer joins
joins both left
right outer joins
joins um remember
basically join lets
computing an equijoin
basically join based
usual conventional join
join um operator
outer join operator
don t throw
records and embed
examples of left
left outer join
form a right
right outer join
aliases on tables
tables and columns
version three dot
dot two dot
provide an sql
database here databases
give sql queries
features like scalability
sixty thousand tables
sixty four indexes
indexes per table
sixty four attributes
columns as part
index essentially sixteen
essentially sixteen columns
supports prefix based
prefix based indexing
types like varchar
queries like show
search for similar
search for prefix
prefix match strings
kinds of search
supported using prefix
prefix based indexes
based indexes rath
supports user privileges
privileges and password
based um authentication
host based authentication
authenticated user logs
set of authentication
kinds of standards
standards thus mysql
talk about standards
standards we don
don t means
standard called sql
features are added
standard in addition
evolution and standards
standards um mysql
set of evolution
happening as part
two different evolutionary
supports which version
mysql versions greater
apply different modes
lets say client
client one connects
connects to mysql
standard of sql
ansi standard sql
mode of operation
minus minus sql
minus sql mode
sql mode equal
starting um mysqld
operation for mysql
mysql and ansi
minus minus ansi
minus ansi option
starting up mysqld
set the mode
set sql mode
set mode equal
equal to ansi
mode is set
set to ansi
treats given sql
suppose um attribute
named as real
double precision real
precision real number
number by mysql
floating point number
number the single
single precision floating
precision floating point
representing the string
double pipe operator
logical or operator
two vertical lines
first parenthesis suppose
server to distinguish
ignore this thing
repeated or function
names or variable
two or mode
equal to oracle
kinds of parsing
oracle database work
treat double pipes
space between function
equal to maxdb
variant of mysql
oriented towards enterprise
transactional it supports
supports mainly transactional
build large enterprise
large enterprise applications
equal to mssql
sql or postgres
sql and mysql
mysql forty dot
insert a comment
starts with slash
star and ends
ends with star
include a comment
pre processing operations
bring about selective
sql query depending
version of mysql
server this query
mark or bank
two three distinct
server or mysql
executing this query
comment otherwise comment
dot three dot
write a single
single sql query
masking or enabling
enabling certain parts
data is organized
system in fact
system whatever file
system is provided
database is stored
existing file system
implications of doing
directory per database
implications are shown
names of tables
sensitive or case
case sen insensitive
sen insensitive depending
unix based system
linux based system
two different names
system like windows
table and tables
renamed and dropped
dropped using operating
operating system commands
move or rename
extensions dot myd
dot myd dot
myd dot myi
myi and dot
table called employee
database called employees
directory called employees
employee dot myd
dot myd employee
myd employee dot
employee dot myi
myi and employee
employee dot frm
frm now suppose
move these files
names using operating
kinds of storage
determines how tables
tables are organized
organized within files
engines also defer
defer with respect
support for transaction
support atomic updates
support isolated updates
primary storage engine
mysql where shift
isam storage engine
myisam storage engine
storage engine isam
isam essentially stands
stands for index
index sequential access
sequential access mode
indexed sequential access
provide any transactional
transactional support ther
heap storage engine
tables or virtual
memory storage engine
kind of storage
engine called merge
merge storage engine
treat several isam
single merge table
merge different tables
engines like ino
ino db bdb
transaction safe updates
updates that means
means it provide
support for acid
two three point
source code form
pre compile binaries
make um alot
alot of sense
sense to download
four or mysql
bdb storage engine
ndb clusters storage
clusters storage engine
single system interface
combined um power
power or processing
machines now ndb
engine that exploits
recent storage engine
supported by mysql
versions four dot
dot one dot
versions the binary
forms or pre
pre compiled versions
semantics in mysql
mysql um transaction
supported in mysql
two three max
mysql actually supported
disadvantages of atomic
updates versus acid
versus acid semantics
specific acid semantics
acid semantics suppose
mysql um engine
performing some debit
debit credit updates
kind of money
mysql which supports
supports the ino
bdb storage engines
support for full
full transaction semantics
non transactional storage
transactional storage engines
updates or atomic
setting auto commit
auto commit equal
commit is automatic
query these non
non transactional atomic
transactional atomic updates
transaction storage engines
worry about locking
locking and isolation
isolation based semantics
first was locking
logging in order
support log based
support durability aspect
updates are required
engines which support
support only atomic
support acid updates
feature of mysql
full acid semantics
stored procedures stored
procedures stored procedures
essentially a set
set of sql
kinds of sql
procedures as part
store um sql
procedures and stored
functions a procedure
performs a set
return a value
return multiple values
value as part
execution so stored
stored procedures support
versions five dot
support um stored
increases the performance
terms of communication
number of stored
amount of communication
side of stored
clients are connecting
server and calling
pre compiled libraries
compiled libraries written
application specific language
procedures are created
sql and functions
create function constructs
procedures are invoked
return one specific
value so functions
value while procedures
value in fact
fact a procedure
function says returns
returns this thing
declaring a stored
average working hours
hours per week
store um store
completely different database
invoke a stored
employees database note
sql in mysql
give an sql
statement that spans
spans over multiple
invoke a store
database an implicit
start using tables
statement is terminated
call store procedure
database by prep
call employeerecords dot
employeerecords dot updatesalary
updatesalary where updatesalary
salary an employee
procedure is stored
database is dropped
procedures and functions
support for triggers
triggers um triggers
covered a session
session on constraints
constraints and triggers
essentially um spec
spec special kind
kind of stored
written using eca
conditions is true
comprehensive in mysql
version five dot
essentially stored procedures
automatically in response
physically materialized depending
kind of application
transactional applications views
analytical applications views
materialized um mysql
mysql supports views
views as virtual
treated as real
purposes that means
access privilege system
read privilege write
privilege write privilege
drop the table
delete the table
updation is automatic
views or virtual
tables are supported
supported and views
created using create
create view command
create or replace
mysql handle constraints
mysql the notion
notion of triggers
calling um stored
procedures is separate
constrai or handling
constraints the kinds
kinds of constraints
data specific constraints
primary key constraint
constraint or unique
key constraint ese
essentially that primary
mysql will roll
transactional storage engine
performs the transactional
transactional um transaction
non transactional engine
update the row
updated some rows
insert or update
update um queries
queries also support
support a keyword
keyword called ignore
essentially that means
means that constraint
mysql automatically inserts
inserts the default
value is null
reason that mysql
catch such violations
query parsing stage
efficient to stop
similarly for queries
insert invalid values
insert um string
numbers or null
enumerated data type
column called gender
column called grade
download and install
linux based environment
order to download
internet www dot
sources and binary
pre complied binaries
linux or mandrax
linux or red
red hat linux
linux and dban
binary rpm package
package um rpm
red hat package
hat package manager
packages are managed
distributions and binary
mysql are complied
violations or run
run time error
server has started
server and mysql
mysql client packages
complete functional dbms
package called mysql
mysql shared compat
compat for backward
mysql mysql servers
directory var lib
var lib mysql
visit the directory
user called mysql
make um mysql
mysql server start
order to install
minus i command
installs the server
installation of mysql
areas where databases
install db program
kinds of installation
worry about calling
calling this program
program and mysql
install db creates
creates a directory
databases are created
default it creates
creates two databases
two databases mysql
mysql and test
test the mysql
database of databases
database holding information
run your mysql
show the contents
mysql show mysql
tables um columns
columns underscore prev
prev db func
func um host
host tables underscore
tables underscore priv
underscore priv user
holds different informations
holds user information
privileges this table
table is authorized
user for doing
host based privileges
privileges and functions
columns based privilege
based privilege information
mysql to start
start and stop
automatically on boot
slash etc slash
slash rc dot
start your computer
computer by default
changed in order
order to start
start up mysql
mysql um mysql
server by default
command mysql dot
mysql dot server
dot server start
options for mysql
global configuration file
slash my dot
typical global configuration
mysql is listening
owning the mysql
server so mysql
started by mysql
minus h host
minus u user
issuing sql commands
quit the client
addition to sql
client itself mysql
mysql provides support
application programming interfaces
embed your mysql
tht does mysql
mysql provides inorder
include the mysql
mysql client library
structure called mysql
struct struct structure
essentially the struct
struct data type
represents a handle
par presently opened
opened similarly mysql
similarly mysql underscore
mysql underscore res
underscore res represents
represents the result
mysql underscore init
initializes the mysql
obtains the handle
data base connection
mysql real connect
issue a query
query using mysql
mysql underscore query
mysql fetch row
row which fetches
row by row
embed your sql
semantics or database
larger application program
open source dbms
result um mysql
scalable to number
number of clients
support and limited
triggers and stored
mysql for window
mac and linux
apis for application
programming or embedding
embedding application programs
conceptual design greeting
talking about conceptual
modeling of databases
databases in previous
start with today
today s session
looked into conceptual
typical database process
design and development
start with analyzing
analyzing the uod
universe of discourse
kinds of requirements
set of process
gave the metafer
session a database
car or bus
analyze the uod
database should handle
include any dbms
dbms specific terms
terms or dbms
dbms specific issues
show the end
understood by analyzing
analyzing your universe
models for perform
performing this conceptualization
building a conceptual
model the entity
entity relationship model
entity relationship modeling
kinds of building
building blocks entities
entities and relationships
nuances of entities
constraints and attributes
review but review
type is described
represents a class
class of entities
entities or objects
company a department
set of entities
type called manager
attributes which describe
describe the characteristic
attributes are intern
equal to eighteen
equal to sixty
sixty five years
represents a space
kinds of attributes
attribute a simple
attribute an attributes
attributes which takes
attribute we gave
right it doesn
attribute an attribute
attributes like first
first name last
last name middle
date of birth
set of attributes
diagrams but key
identify an entity
set of employees
employees and suppose
employee identification number
number the employee
tax per permanent
permanent account number
forms the key
identifies a person
key two persons
identification number identifies
identifies the entity
key attributes identifies
weak entity type
type a weak
kind of entity
attribute the employee
number or pan
identify the person
key to identify
identify the insurance
identify an insurance
identifying the person
relationships between attributes
basically um ties
kinds of relationships
constraints that identify
identify some kinds
constraints a relationship
type can participate
managed by manager
person may manage
works in department
relationship one department
relationship an identifying
identifies a weak
strong entity type
relationship it means
relationship is giving
giving an identification
type called insurance
record is set
department managers project
existence of project
existence of projects
projects will depend
manage this part
type that means
project identification number
total participation implies
participation implies identifying
implies identifying relationships
identifying relationship implies
relationship implies total
implies total participation
give us greater
perceive as relationships
relationships and associations
associations between data
sets of notations
enhanced er notations
extended er notations
abbreviated as eer
first um relationships
notation of subclassing
subclassing or inheritance
inheritance ok subclassing
subclassing essentially face
shares and is-a
examples a car
car is-a vehicle
right a monkey
monkey is-a primate
primate is-a animal
manager is-a employee
is-a relationship identifies
identifies a specialization
type a car
vehicles are cars
class of cars
maruti eight hundreds
right so car
generalization of maruti
hundred and maruti
type called car
similarly a monkey
left hand side
relationship is set
specialization of entity
hand um entities
entities of class
generalizations of entities
generalization and specialization
relationship now suppose
entity of type
car that exist
entities of type
car entity type
vehicle entity type
entity that exist
set of cars
set of vehicles
subclasses undergo type
undergo type inheritance
meant by type
class again notice
notice um care
describe some properties
properties of vehicles
kinds of properties
vehicles um vehicles
wheels ok vehicles
road vehicles suppose
vehicle is represented
represented by wheels
kind of controlling
car a bicycle
attributes that describe
describe a general
class each member
super class entities
entities and participates
general class entity
class entity participates
type a specialized
specialized class entity
relationship that exist
exist between vehicle
replace this vehicle
entire database system
matter of naming
rockets and airplanes
airplanes as vehicles
replace a subclass
subclass subclass entity
super class entity
class entity arise
out with inheritances
inheritances and special
generalization and specializations
kind of replacements
general class entities
special class entities
establishes a correct
correct inheritance relationship
incorrect inheritance relationship
relationship is depicted
identify the manager
uniquely identify entities
attributes in addition
identify one manager
combine that attribute
form the key
process of creating
entity type suppose
uod here requires
vehicles i identify
identify the require
vans the require
cars the require
talk to people
identify different entities
company uses cars
cars the company
buses the company
company uses motorbikes
motorbikes the company
company uses trucks
company uses vans
start seeing relationships
company is concern
straight forward process
process sometimes depending
class a specialized
two entity types
types an airplane
correct the first
properties of specialization
property of specialization
generalized class objects
specialized class objects
depends it depends
number of attributes
context of learning
fly a glider
glider or learning
fly an airplane
kinds of skills
learn for flying
flying an airplane
flying a glider
case that depending
plan your journey
journey and push
push a button
fly a airplane
kinds of scale
airplane requires smaller
requires smaller number
number of scale
requires a larger
subclass of airplane
straight forward thing
identify is-a relationship
ignore the application
ignore the information
information system context
context about building
building an airplane
context about flying
change the inheritance
back to specialization
specialization and generalization
small um generalization
two two entity
identified an entity
type called secretary
secretary is identified
pan and salary
secretary has typing
typing short hand
kind of experience
experience the manager
entity types sharing
kind of attributes
two are similar
two are special
special cla special
cla special cases
first a part
part of secretary
secretary and manager
attributes between secretary
manager have moved
specialized classes remain
distinguish one special
class to specialized
shows an entity
type called employee
defined by attributes
attributes called pan
attribute called job
two specialized classes
specialized classes secretary
secretary and professor
suppose we identify
type has academy
type called admin
belongs to belongs
category of academic
category of administrative
distinguished form entities
secretary and academic
subclasses are defined
denoting this subclasses
drawn a circle
denotes the fact
subclasses are disjoined
meant by disjoint
exclusive no secretary
type as admin
type of academic
secretary is dis
classes or specialized
specialized entity types
notions of chair
chair professors chair
professors chair professors
external funding sources
professors are chair
professors are normal
normal normal professors
kinds of inheritance
subclasses are set
overlap this kind
kind of overlapping
professor is concern
doing the normal
overlap is partial
shows um entity
type called account
represent a person
represent an institution
institution an institution
accounts maybe held
held by families
bank is concern
sets of characteristics
institution has characteristics
characteristics like number
number of employees
individual entity type
sets of attributes
institution and address
kind of registration
kind of relationship
familiar with programming
notion of unions
case of inheritance
case of subclassing
disjoined or overlapping
individual that exist
holder an individual
track of individuals
track of institutions
set of individuals
form or participate
relationship we call
full union relationship
specializations and infact
obtain the notion
notion of abstraction
abstract away unnecessary
class it means
relationship to exist
attributes are specific
kinds of cars
activity any car
concept of higher
higher order relationships
number of entity
types that participate
shown here shows
part and project
entity types supplier
types supplier project
project and part
basically it means
relationship of degree
relationships of degree
supply some parts
parts maybe designated
supply all parts
relationships without losing
closest possible binary
ternary rela relationship
project a supplier
stocks some parts
part is required
requires certain kinds
kinds of parts
stocks certain parts
lower order relationships
shows a relationship
relationship called offers
taught_during certain semester
instructor has taught_during
taught_during this semester
offered_in this semester
ternary relationship implies
implies the existence
instructor can_teach instructor
instructor i can_teach
instructor i taught_during
offered during semester
instructor has offered
taught_during that semester
reducing if instances
instances of binary
binary ration relationships
ration relationships exist
relationship also exist
constraints on higher
higher higher-order relationships
put cardinality constraints
constraints on higher-order
number of course-semester
instructor can teach
number of semesters
number of courses
types ok instructor
identify an instance
instructor an instructor
instructor may offer
offer any number
number of semester
identify an instructor
notion of aggregation
aggregation this concept
concept of ontology
basically um aggregates
schema and makes
level of abstraction
kind of abstraction
introduced by aggregation
introduced by inheritance
specialization ok aggregation
concept of composition
shows an aggregated
entity called offering
type called offering
offering entity type
offering contains offers
hand the relationship
relationship between generalized
generalized and specialized
specialized and generalized
bus is-a vehicle
offers the concept
concept of containment
covering up unnecessary
structure this offering
shows that shows
shows the relationship
relationship between offering
offering and offering
abstraction basically throws
covered the major
enhanced er notation
conclude the session
kinds of situations
inheritance and gen
small university database
build a complete
kinds of typical
problems or typical
kinds of issues
basic entity types
students faculty members
members and staff
identified a basic
basic as entity
type called student
adding some attributes
attributes for students
students we note
identifies the students
gender a date
characterizes a faculty
number each faculty
gender and date
birth and address
student and faculty
similar all ready
kind of non
non teaching staff
number name gender
kinds of generalization
staff and faculty
two um entity
staff and student
faculty and staff
categorized as employees
key called employee
identify a student
student a student
employee and student
type called person
person entity type
types name gender
attributes name gender
faculty or staff
faculty heads department
identify certain kinds
number of faculty
member may work
member may head
head a department
number of students
students maybe registered
find some aggregations
project um involves
involves particular department
department or project
project is headed
faculty member belongs
type called sponsored
sponsored project means
organization or non
non governmental organization
foundation supports department
binary relationships foundations
foundations may support
support sponsored project
department this foundation
foundation is give
give is supporting
higher-order relation relationship
faculty member collaborates
note the double
faculty entity type
project may collaborate
extends to project
member and works
enhanced entity relationship
entity relationship concepts
today the first
specialization without losing
generalization is correct
is-a would hold
notion of inheritance
inherits all attributes
attributes including key
including key attributes
attributes and constraints
notion of overlapping
subclasses and disjoined
build a entity
type using union
types or categories
notion of higher-order
higher-order of relationships
reduced to lower
lower order relationship
relationship without losing
establishes the notion
notion of containment
specialization um relationship
session on enhanced
relationship concepts transcription
vidhya database management
process of database
database a conceptual
conceptual design especi
especi essentially means
means a high-level
meant for targeting
targeting the end
explain your database
end users today
place relational model
model with respect
revisit our typical
typical database design
database design process
context da databases
context that makes
analyze the universe
requirements as shown
requirements essentially meant
elements that makeup
makeup the system
elements and functionality
requirement or functional
application programming requirements
kinds of processes
requirements intern gave
two gave rest
database requirements gave
requirements gave rest
follow this upper
meant for communication
user is inturn
schema the physical
essentially the schema
schema is oriented
oriented towards human
communicating your schema
schema or communicating
communicating your design
user the physical
oriented towards machine
efficiency in terms
terms of storage
storage and retrieval
retrieval of data
schema is optimized
optimized towards quick
quick updates quick
updates quick inserts
inserts um easy
relational data model
model is pro
widely used data
kinds of application
banks or railways
railways or telephone
model to store
internal schema structure
model the relational
model was introduced
seventies by ted
codd from ibm
search for ted
ted codd today
model was proposed
relation relational model
models like hierarchical
hierarchical and network
amenable to internal
elegant in terms
storage and updates
updates and retrieval
mathematics and mathematical
constitutes a domain
forms a mathematical
relation in intuitive
terms a mathematical
english a relationship
relationship is similar
essentially some kind
kind of linkage
elements an employee
department an employee
employees ver verses
verses a set
establish a mathematical
set that forms
standard database model
transactional databases today
step by step
concepts that makeup
makeup the relation
relation um intern
intern a relation
relation intuitively represents
represents a table
flatfile of records
column is named
named as roll
named as date
date of registration
element one set
schematic data element
row is independent
student called ananth
independent data element
represents a collection
related data values
columns roll number
registration an instance
registration as twelve
delve little bit
atomic data type
sessions we talked
attribute a composite
non atomic attribute
person intern comprises
first name middle
middle name last
last name title
title um initials
hand the age
divide this attribute
relation is defined
basically a set
set of atomic
values which defines
defines the space
attribute might obtain
obtain a value
years and greater
fractions between eighteen
eighteen and sixty
constitutes the domain
attribute called age
domains for names
names and dates
shows some examples
integers the set
valid student roll
student roll numbers
numbers the set
cities with population
defines a space
domain a relation
specific um notation
schema is defined
list of attributes
case their roll
number the domain
domain of roll
degree of relationship
model we define
define the degree
pretty analogies fashion
simply the number
previous um schema
attributes roll number
set of instances
numbers um times
times the set
student names times
form a relation
relational model ordering
ordering of tuples
schema is concerned
tuples are ordered
ordered roll number
roll number wise
specifically the order
stored in sorted
order or sorted
order in reality
ordering of attributes
mathematics a list
order is important
important a list
basically a list
elements which means
values the first
first value corresponds
corresponds to roll
ordering is important
mathematically speaking infact
roll number value
values of tuples
value that makes
tuple is assume
first normal form
normal form assumption
form assumption infact
optimized for enhanced
enhance maintenance easy
maintenance easy addition
addition of data
elements um easy
searching for data
data elements easy
elements easy updation
primarily the reason
atomic in nature
nature and atomic
model a relational
value which lies
pretty obvious right
valid roll number
roll numbers range
hundred and fifty
domain constraint specification
basically say states
subset of attributes
tuples such kinds
identify every tuple
date of joining
roll number forms
forms a superkey
superkey because roll
attribute whose value
value is unique
combine roll numbers
number is unique
unique roll number
fact the entire
model each tuple
tuple is distinct
distinct that means
case the entire
multi multiple tuples
bag of tuples
model a key
defined a key
distinguish one tuple
identify each tuple
number is sufficient
sufficient to identify
shows the talk
student table roll
table roll number
minimal super key
door and key
identify an employee
set of subset
uniquely identify tuples
records or salary
retrieval in quires
quires and insertions
good primary key
constraints as part
constraints that make
first um constraint
entity integrity constraint
change of nomenclature
referential integrity constraint
relation may point
department is headed
head this department
make a reference
tuple that means
appoint some employee
department as longer
employee already exist
attributes is set
attribute in foreign
write an employee
person who heads
department the attributes
manager who exists
null that means
constraint to hold
fashion as shown
schemes or relational
schema has employee
works_in and reports_to
key which refers
note that foreign
referential integrity constraints
integrity constraints hold
reporting to employee
employee b employee
kind of constraint
semantic integrity constraint
constraint an semantic
semantic integrity constraints
application specific constraints
constraints are maintained
basic relational algebra
relational algebra operations
essentially the operations
operations of relational
kinds of operations
operations namely retrieval
data or updates
database now updates
insert and delete
operations and retrieval
two basic operations
operations called select
select is denoted
sigma as shown
select a set
relation so remember
remember a relation
tuples and schema
operation to select
select a subset
select salary greater
thousand from employee
shows here sigma
sigma salary greater
subscript and employee
select the set
salary is greater
form of select
select condition relation
slightly formal grammar
expression over attributes
thousand and gender
equal to male
male from employee
basically says give
relation whose salary
operation the first
operation is unary
unary in nature
operator a unary
operand the select
select operator operates
relations the select
giving the select
apply this condition
relation is independent
select operation note
select operati operation
four different attributes
attributes the output
number of tuples
operator is bounded
select um output
select input relation
last properties shows
shows that select
select is commutative
based on condition
operator is commutative
apply the conditions
operator now select
return entire tuples
select over columns
select over rows
rows and return
scheme in order
operator the project
operator as showed
showed as shown
first the command
command called project
salary from employee
employee that means
table as part
projected the employee
set of list
list of operation
form project attribute
project attribute list
list and relation
give a list
project operator returns
returns um relation
return as part
part of part
first um property
duplicates that means
identification or employee
start forming duplicates
project operations removes
operations removes duplicates
return by project
relation the answer
duplicates are removed
removed the number
tuples that form
form the database
list of project
includes the superkey
first two points
important the project
project name project
salary after projecting
mentioned this point
point in passing
select and project
relational operator select
select operators returns
returns a relation
similarly the project
return a relation
put a project
operator also expects
expects a relation
composed as shown
operator called select
operator is operating
doesn t exist
performed in fact
fact it exist
operator is performed
select operator finish
operator finish finishes
out a relation
field is greater
dynamically created forms
forms the input
relation called salary
salary statement equal
equal to project
select um salary
project and select
select operators expect
relation or employee
employee and department
department um relations
project operators require
combine to form
join in fact
ways of combining
combining um combining
set and combine
case of relations
relation and combine
lab attribute lab
attribute lab table
faculty and department
lab the faculty
heading the lab
query here shown
tables select student
select student dot
student dot lab
dot lab equal
equal to lab
student table equal
product of student
student and lab
output of output
straight to compute
compute the cartesian
two relations student
four different students
tuple to form
form one big
names are changed
student dot roll
dot roll number
roll number student
number student dot
dot name student
dot lab lab
lab lab dot
dot name lab
lab dot faculty
faculty and lab
lab dot department
require to mach
mach was student
quires that match
match are shown
student um working
two different relations
cartesian cartesian join
cartesian join operator
properties of project
cartesian join represents
two um relations
joins every relations
joined every student
human being read
student is doing
relations that make
table has ten
ten thousand records
times ten thousand
form of join
relation to form
theta join operator
relational algebra constructs
oriented towards optimized
meant for human
algebra an algebra
kind of formalism
build sound software
software so comprises
elegantly take relations
relations as input
input and produce
relations as output
start combining relations
forms of combining
terms of space
require to compute
end of today
exploring relational algebra
depth we started
started with relational
definition that relational
learned about relational
algebra is based
relation a mathematical
represents a mapping
essentially one relation
domains that relates
names being related
students and roll
forms under underpinnings
underpinnings or mathematical
mathematical underpinnings bet
model is based
yesterday the relational
database an internal
schema is meant
meant or optimized
optimized towards machine
optimized towards efficient
efficient storage retrieval
retrieval and queries
set of relations
valid student names
similarly the set
age um age
age attributes belongs
employee or student
attributes that makes
element that conforms
number name date
constitutes a tuple
record about student
student is independent
combination of tuples
tuples plus schema
tuples that conform
class a relation
relational algebra expressions
expressions like select
properties of relations
relations the first
pure relational model
tuple which means
tuple is unique
made a statement
default the entire
entire tuples founds
founds the super
things would change
duplicates to exist
model is defined
defined a super
identify a tuple
define a minimal
sets of minimal
minimal super keys
looked at entity
key is null
null because null
basic retrieval operators
retrieval operators select
project operators represented
greek letter sigma
operator which selects
selects a subset
subset of tuples
relation without changing
changing the schema
operator um selects
sense specific columns
change the number
mandate the fact
case the number
operators require specific
require specific relation
relation has input
input and provide
relation as output
answer a query
defined the cartesian
product over relations
product over sets
product a times
combination of set
compute m times
generate a table
operations on involving
move on today
forms of join
operators which generate
generate for lesser
first join operator
join operator shows
shows a join
cartesian um product
two parallel lines
subscript called theta
theta join combines
relations or combines
combines the tuples
shows a specific
yesterday the student
relation is computed
relation um theta
theta join lab
student times lab
join between student
join con join
con join operator
four different tuples
generated four times
twelve different tuples
join operator starts
condition that student
prerequisite for computing
computing the join
tuples where student
shown in pink
four such tuples
match this condition
generated as input
theta join computed
efficient to compute
compute this theta
operator if lab
key of lab
integrity is maintained
compute the equality
equality student dot
dot lab attribute
attribute and search
key and lab
key this search
indexing or hashing
compute the join
theta join relation
relation is shown
simply two relations
subscript join conditions
simply a logical
necessarily be equality
logical condition thy
cases the join
cases those tuples
relation such tuples
sets student dot
equal to condition
condition now theta
theta join operators
equijoin and theta
kind of equijoin
relations so natural
join is denoted
denoted by star
star as shown
relation be modified
attributes name roll
modified the lab
relation as lab
lab name faculty
lab name attribute
student star lab
denotes a natural
relations it returns
attributes of student
attributes of lab
attribute here lab
attribute between student
common attributes match
condition is assume
condition is operated
join simply takes
computes an equijoin
suppose we modify
formalize this notion
notion of modification
introduce a notion
notion into relational
relation is modified
input and output
output of select
assign the attribute
shows the idea
expression here projects
takes the student
projects roll number
number and lab
roll number attribute
attribute name replaced
replaced by lab
kind of renaming
greek symbol row
expression here shows
computes a rename
rename operator work
work in general
rename operator shows
relation the input
kind of rename
row under row
subscript s operated
operated upon relation
case where row
attributes are renamed
set of operators
set theoretic operators
operators here operate
operate on relations
talking about joins
set theoretic operations
operations like unions
unions intersection set
intersection set difference
apply to apply
meant by compatible
compute a union
operators may make
notion of compatibility
compatibility or union
definition is shown
span the set
valid roll numbers
operators roll number
compute the set
operations like union
intersection and set
compute set theoretic
expressions the union
operator r union
returns the set
tuple um note
stu student relation
tuples that lie
similarly the intersection
intersection operator returns
operator on sets
set difference operator
operator r minus
minus s returns
returns a set
properties of set
union and intersection
intersection are commutative
commutative r union
union s equal
intersection s equal
relax the fact
operator the division
slightly unintuitive operator
bit of explanation
explanation to understand
identify data elements
data element occur
explanation of division
shows two relations
firstly the division
return the attribute
relation the set
attributes b contained
values of attribute
div t equal
returned as part
employee has worked
worked with worked
employee named arun
projects that arun
arun has work
project that arun
arun has worked
first relation based
additional relational operators
two such operators
outer union operator
notion of join
recall that join
join operator takes
takes a join
input now suppose
required to compute
attributes are null
sake of simplicity
two possible scenarios
scenarios the left
suppose the attributes
participating in join
join the attributes
join are null
null the left
outer join includes
includes such tuples
similarly the right
join includes tuples
includes that part
include every tuples
operator or inclusive
inclusive join operator
lines of outer
define outer union
union or intersection
defined as compatibility
basically a relaxation
union operator computes
computes the union
simply some kind
inclusive union operator
works on relations
express one operators
set of relational
operators select project
select project union
project union set
union set difference
kind of relational
giving two examples
taking each operators
operators each operator
minus s union
union s minus
set theoretic operation
express the intersection
intersection using union
union and set
similarly um joins
equivalent to select
making one generalization
relaxes particular constraint
constraint on relational
multi-sets and return
existence of duplicate
duplicate or duplicate
sets where elements
elements can occur
multi-set so bag
element can occur
querying the database
database to compute
compute the average
average marks obtain
attributes saying project
project marks based
based on student
projected we compute
mark by computing
computing the sum
marks and divided
number of entries
case if duplicates
change the multi-set
computing aggregate relations
relations like sum
sum and average
multi-sets or duplicates
relation the duplicate
evaluating relational expressions
things much faster
return the output
spend considerable amounts
projects and unions
unions duplicate removal
projects project operations
operations and union
project and union
desirable to tolerate
multi-sets as part
relation as part
generalization from sets
sets to multi-sets
multi-sets affect relational
affect relational operator
occur n number
tuple t occur
occur m number
define set-theoretic operations
set-theoretic operations based
bags the first
union of bags
union of sets
compute the intersection
intersection of bags
bags r intersection
tuples that occur
occur multiple times
times so tuple
occurs n number
sets a tuple
times it appears
difference between bags
tuple t occurs
occurs n minus
minus m times
nt appear negative
number the number
canceling out tuples
out ever tuple
tuple are remaining
out all tuples
bags the select
change the select
sets or bags
operator becomes simpler
operator simply takes
takes the requested
product of bags
occurs m times
occurs mn number
relations are tuples
first algebraic expression
answer is equivalent
minus t union
expression is true
compute r union
set this tuple
minus one number
right hand side
compute r minus
occur zero number
vanishes it occur
distributivity over intersection
intersection and union
intersection s union
union r intersection
tuple that occurs
expression is equal
tuple is concern
conditions over attributes
select any tuple
select c union
taking a union
union or disjoint
operations and algebraic
decide to tolerate
quiet a significant
significant um part
constitutes relational algebra
queries and relational
give a small
relational algebra queries
small um database
database schema comprising
relations employee department
employee department department
department department locations
department locations projects
projects and works_on
relation that talks
talks about details
middle initials last
employees pan number
pan number date
birth address gender
address gender salary
salary the supervisor
department contains department
department name department
keys are shown
manager department location
shows each department
department numb number
located and project
project shows project
project number location
project is working
similarly works_on talks
number of hours
answer these queries
employees who work
form the research
select dname equal
equal to research
research from department
department the set
employees who works
compute that compute
compute a join
join between research
department and employee
join an equijoin
address for employees
employees so project
query two find
find the names
controlled by department
names of employees
answering this first
handled by department
department five project
select from project
project where department
department number equal
projects that employees
compute a division
division between employee
project and department
numbers of employees
projects of department
return the first
perform a series
series of relational
relational schema rela
domains and attributes
characteristics of relations
algebra um retrieval
operations and relations
theoretic operations change
relax the notion
formulating a relational
relational algebra query
session on relational
structured query language
saga of management
management of data
covered the aspects
aspects of high
high level schema
level schema design
design using entity
designing of low
low level schemas
level schemas today
day today basis
user or database
standard query language
move into structured
query language today
standard for query
standard for relational
database users today
today use sql
management now today
number of database
implemented in academic
implemented in companies
sybase microsoft sequel
microsoft sequel server
sequel server mysql
server mysql postgres
varieties of databases
language being adopted
port application program
mysql or software
specifically uses oracle
common query language
context a huge
kinds of dbms
application same work
work flow procedures
business lo logic
logic or business
matter which dbms
working but reality
standard for database
query was introduced
achieving its objectives
application is meant
meant for mysql
meant for oracle
number of additions
features in addition
connecting different database
completely different question
back to sql
sql sql stands
stands for structured
geneses of sql
research for database
build called system
paper for cord
give an internet
net that talks
talks about earlier
days of sql
lot of constructs
constructs like select
select and set
operators and cartesian
similar to relational
session and sql
sql also works
algebra however sql
relation to relational
foundations for sql
tuple relational calculus
data model based
relational data modal
notion of mathematical
terms of terminology
sql and sql
database independent language
sql two standard
standard and sql
sql three standard
provided and sql
data definition language
data manipulation language
ddl essentially defines
essentially defines data
defines data elements
elements that means
relation attributes domains
attributes domains values
domains values constraints
defined using sql
sql using sql
define a relation
define its attributes
define its domains
constraints across attribute
attribute relationships key
relationships key constraints
constraints and entity
add more data
retrieve some data
modify data elements
terms relation tuple
tuple and attribute
attribute in relational
terms table rows
rows and columns
algebra that relation
two standard defines
defines um defines
defines um methodologies
introducing schematic structures
create schema command
shows a small
create schema univ
schema univ authorization
univ authorization dean
creates a schema
schema called univ
talking about security
security and authorization
data manipulation operations
kinds of authorization
typically include adding
adding a table
deleting a table
table adding rows
adding rows deleting
collection of schemas
schemas so suppose
relations and combine
catalog is required
enforce referential integrity
tables that lie
term for relation
command create table
create table command
form create table
create table table
kind of column
enclosed within box
braces are optional
structures that means
context is clear
identify the schema
create table univ
table univ dot
univ dot department
department that means
means create table
table called department
attributes that form
form the table
domains that sql
sql two supports
commonly used domains
types called int
small int float
int float real
real and double
numbers like decimal
number of digits
two it means
digits the last
last two digits
two digits occur
define character strings
shown by char
defined by varchar
attribute can store
store a string
length can vary
maximum of sixty
similarly a special
special data types
types like date
stamp and text
types like binary
generally be working
working with numeric
numeric or character
transactional database system
records or railway
standard transactional databases
domain name domain
create domain construct
create domain roll
domain roll number
roll number type
type as int
store student roll
numbers the advantage
definition is changed
defining the domain
domain called roll
placing this constraint
value called null
construct the default
default construct shows
employee not null
null and default
value namely eighteen
primary key constructs
constraint called unique
values or distinct
words it means
secondary key note
foreign key construct
construct that ensures
ensures referential integrity
key in order
order to ensure
tuple or existing
meant by referential
create table employee
set of attribute
descriptions the first
attribute called pan
variable character string
string of sixteen
shown as unique
distinct pan number
construct called primary
attribute employee number
unique can form
form a secondary
birth address salary
salary and reportsto
shows the employee
constraint called foreign
relation called employee
number for reportsto
suppose i enter
employee and enter
enter the details
foreign key constrain
system will verify
manager already exists
reportsto employee number
exist then addition
fail as part
database management deletion
deletion of tables
drop so tables
drop table command
cascade or restrict
first three terms
obvious um drop
dependent is termed
termed as cascade
drop table employee
table employee dependent
employee dependent cascade
foreign key constraints
views that reference
reference the table
drop a table
employee any foreign
foreign key constrains
table is dropped
references incoming references
references the table
delete an entire
drop schema command
restrict so drop
drop a schema
option is provided
restrich restrict option
schema is dropped
alter an existing
existing table definition
alter table command
table command note
note that alter
table or modification
table is modification
modifying existing data
existing data elements
adding or deleting
deleting data elements
modifying the table
schema the table
simply a definition
alter table company
table company dot
company dot employee
dot employee add
employee add job
add job varchar
job varchar twenty
job and domain
size of twenty
suppose the table
created a table
added certain data
suddenly i give
give an alter
value of null
column called job
reads alter table
varchar of twenty
twenty not null
constraint as simple
table command company
command company dot
employee or default
modify a table
table by adding
adding a column
delete a specific
word called drop
table here shows
drop the column
column called pan
option called cascade
cascade now drop
drop pan number
similarly if restrict
column is dropped
alter a column
adding and deleting
deleting new columns
columns or column
constraint set set
set of constraints
add and drop
drop these domains
domains or constraints
first example shows
shows alter table
turn says alter
alter the column
column called reportsto
reportsto set default
column is null
manager um assign
command shows alter
company dot dot
dot dot employee
dot employee alter
employee alter reportsto
alter reportsto drop
reportsto drop default
value are set
set to null
main um operation
frequently used operation
table from tables
add or modify
detailed um operation
variety of forms
basic retrieval operation
operation in sql
operation in relational
reemphasis the point
point that sql
based on tuple
operation of sql
sql can perform
perform both select
defined in relational
select one major
difference between sql
default relational algebra
relational algebra expects
algebra expects relation
hold for bags
sql by default
default considers tables
operation is shown
select attribute list
list from table
shows here select
select employee number
attributes emp number
table where reportsto
means that show
numbers and names
employees who reports
manager whose employee
act on multiple
show that select
select can act
shows the definition
definition of department
create table department
address and head
heads the department
retrace the fact
fact that head
key that refers
refers to employee
heads the supply
department name address
employee employee number
query here requires
heads the supplies
department is supplies
small um sql
select employee dot
department where employee
employee number equal
equal to head
head and department
department name equal
equal to supplies
similar to performing
performing a relational
relational algebra select
two tables employee
stipulating the fact
fact that employee
number of record
order to disambiguate
dot name equal
matched against supplies
attributes by prepending
arvind kulkarni reports
person um note
suppose we write
write a query
disambiguate attribute names
names by putting
putting the table
employee comma employee
employee and manager
employee where employee
equal to arvind
kulkarni and employee
employee dot reportsto
dot reportsto equal
equal to employee
employee dot emp
dot emp number
quiet a bit
first employee table
aliasing so aliasing
employee as boss
select boss dot
employee and employee
first table employee
alias called boss
kulkarni and boss
boss report employee
report employee number
emp employee reportsto
employee reportsto number
equal to boss
boss dot employee
dot employee number
suppose we omit
give a query
number from employee
statement is similar
returns all rows
employee comma department
columns as output
combinations of employee
computed a cartesian
product between employee
select all columns
term called star
star from employee
equal to bhadriah
query is similar
relational algebra expression
select or sigma
sigma name equal
bhadriah from employee
means the entire
attributes of relations
computes the complete
complete cartesian product
tables are treated
treated in sql
sql in relational
relations or tables
tables are considered
multi-sets or bags
values are tolerated
expensive to remove
remove duplicates suppose
return a query
hundreds of duplicates
set of records
reorder the records
user has asked
unnecessary over head
suppose i wan
retain the duplicates
duplicates all contribute
number of marks
number of occurrences
out the average
computing any aggregate
query in sql
give the clause
clause called distinct
distinct as part
perform several set
difference using sql
sql so union
clause called union
clause called intersection
default union intersection
employee where salary
lakh union select
union select distinct
twenty four thousand
selecting the set
lakh and combining
union operator assumes
perform a disjoint
disjoint intersection remember
data item occurs
item occurs multiple
occurs multiple times
occur the minimum
working on bags
difference or set
comparisons over character
attributes especially string
comparing um partial
strings or comparing
comparing wild cards
two such examples
examples the first
examples says select
percent arun percent
firstly the key
percent symbol matches
matches any number
query here matches
characters a single
underscore arun underscore
arun underscore underscore
character before arun
characters after arun
kind of character
character any kind
operators like addition
addition subtraction multiplication
multiplication and division
salary plus perks
perks not greater
greater than fifty
select one point
point one times
figures salary figures
employees if salaries
multiplying existing values
values of salary
showing them showing
create a schema
schema using sql
collection of tables
names the attribute
domains the constrains
null unique default
unique default values
foreign key constraint
schemas and table
drop all foreign
foreign key references
drop this column
foreign key reference
key reference coming
notation of cascade
widely used operation
forms of select
select um operators
features of select
nest um select
nested select operators
operator or sql
number of forms
select operator treats
operator treats tables
tables as bags
shows the summary
sql standard tables
standard tables attributes
schemata are created
created and tables
created and constraints
essentially the select
forms that brings
explorations of databases
started out exploring
exploring the sta
language or sql
continue with sql
express within simple
simple sql statements
terms of sql
sql namely tables
attributes and values
kinds of column
frequently used sql
condition holds true
tables have attributes
disambiguating ar attributes
aliasing for disambiguating
disambiguating names main
join between employee
notion of aliasing
employee and call
select from multiple
products of multiple
kinds of set
operations on tables
tables by default
default in sql
unlike relational algebra
algebra in sql
treated as multi-sets
bags that means
valid by default
default in relational
make a table
keyword called distinct
query a query
query is return
perform set operations
tables and sets
sets by default
default these operations
operations by default
assume that table
table are sets
union all department
union all managers
matches a single
subtraction um multiplication
today s talk
two example tables
tables in order
order to illustrate
illustrate several features
features of sql
table contains employee
key called pan
unique and non
null and employee
reportsto if reportsto
reportsto is null
doesn t report
table the department
table as shown
field called department
number or dnumber
employee who heads
dnumber and head
key which references
references employee number
star and slashes
perform arithmetic operations
operations namely addition
form select star
returns all employee
employee records select
records select star
operator but star
star here refers
selects the entire
set of columns
sort the output
sorting is achieved
construct called order
construct is shown
shows another small
lakhs and order
employees whose salary
orders those tuples
tuples using employee
aspect of sql
queries bigger queries
algebra the output
statement the output
perform further searches
shows a shows
two different parts
sake of convenience
two different colors
white and yellow
outer quer query
names of departments
departments where dnumber
stands for set
department number belongs
shown in yellow
query called select
dnumber from employee
analyze this query
firstly um taka
query says select
select department numbers
select the names
essentially this query
departments which pays
queries and note
two different queries
returns a complete
relation or returns
table as sets
bags co comprising
considered the table
performed a test
test for set
outer query belongs
employee where supervisor
analyze the query
reports to equal
employees who report
employees where salary
returns the names
employees whose salaries
firstly the rule
nested query applies
query the outer
select e dot
aliasing employee table
reportsto from employee
dot name note
closely the outer
employee the outer
outer query calls
number to occur
query essentially returns
pertaining to nested
queries the kind
alias is defined
query such kinds
correlated nested queries
nested query occurs
analyze the behavior
nested query begins
query is performed
condition is performed
outer query assume
statement says select
select some attribute
tuples in employee
set membership function
condition is checked
tuple that forms
forms the employee
employee number occurs
ids of people
remember this fact
fact that select
easy to understand
understand nested queries
kind of recursive
keyword called exists
exists to check
query is empty
empty then exists
exists returns true
exists some results
output is empty
empty then exist
exist returns false
select d dot
query select employee
employee where reportsto
employee dot employee
head that means
heads of departments
implicitly defined sets
looked at set
checked for empty
enumerate all elements
reportsto attribute holds
check for null
command called null
null cap capital
null so remember
constitutes a null
attribute a null
value the attribute
names and salaries
select or give
query and reportsto
people who report
condition is null
valid employee number
renaming table names
rename attribute names
selects the set
table is return
attribute is changed
run over multiple
clause contains multiple
multiple tables select
department by default
default it assumes
simple select operation
employee dot dnumber
dot dnumber dno
dnumber dno remember
dot dnumber equal
equal to department
department dot dnumber
attributes to perform
perform a join
keyword called join
shows a query
address from employee
employee join department
identify which attributes
department on dno
equal to dnumber
attribute of employee
employee and dnumber
attribute of department
equating dnumber dno
dno to dnumber
department and selecting
printing the set
names and addresses
addresses of employees
equality condition note
tables so natural
algebra was depicted
operator just performs
performs in equijoin
subsets of attributes
condition also holds
performing a natural
natural join constrict
automatically finds attributes
names for performing
performing the join
rename in order
order to accommodate
accommodate natural join
employee natural join
natural join department
specific example thought
query is illustrated
illustrate the syntax
identify all attributes
names between employee
department we compute
compute a natural
project the set
set of required
similarly other kinds
kinds of joins
keywords in sql
join right outer
join and full
full outer join
notion of aggregate
functions in sql
working on generating
generating a set
tuples that match
criteria some times
count which counts
counts the number
query result sum
sum which computes
computes the sum
result should return
return single numeric
single numeric attribute
numeric attribute average
average which computes
computes the average
query should return
return numeric attributes
numeric attributes max
max and min
min which computes
computes the maximum
maximum and minimum
min will work
results are numeric
kinds of total
date um date
query can result
result the maximum
minimum among dates
small example query
count of salary
min of salary
max of salary
sum of salary
salary and average
average of salary
set count star
make any difference
relation and min
salary field max
salary um salary
salary attributes sum
aggregate functions return
return a single
talking about nested
treating the nested
applying set theoretic
function and reduce
reduce our query
select count star
select the count
query from department
department dot head
dot head equal
numbers who heads
counting the set
searching the set
heads and return
count is compared
return the names
retuning e dot
employees who head
talking about aggregate
desirable to apply
apply the aggregate
two different sub
group by clause
clause the group
small example select
dnumber d dno
dno comma count
star comma average
group by dnumber
scans the set
set of set
groups the set
dnumber or dno
employee table count
count the number
return also count
count the average
group by function
function is computed
computed after computing
computing the results
query first scans
groups those records
records or groups
groups those tuples
tuples um based
based on dno
performs the select
select certain tuples
individual property note
property note note
note the important
difference here suppose
select the department
department number count
count and average
count and number
salary having count
greater than twenty
twenty people working
people working show
average salaries note
note the difference
apply to individual
lakhs is applied
applies to groups
groups of tuples
tuples is greater
specifies a condition
condition that applies
group of tuples
back at select
variants of select
select one ten
ten times ten
times ten star
ten star salary
increases by ten
select um attribute
list or function
checked ok group
group by grouping
output be group
group having group
operations within sql
detailed in terms
operations for inserting
inserting or adding
tables and modifying
modifying tables deleting
tables deleting data
data from tables
data in tables
modifying the structure
structure of tables
insertion of data
data into tables
command is shown
insert into employee
give the entire
employee within parenthesis
inserting a complete
stands for employee
field bharath kumar
bharath kumar stands
seventy three stands
stands for date
attributes are matched
matched so inserts
entire employee record
select into employee
employee name address
address and dnumber
dnumber values arun
arun k ysehwanthpur
address and department
attributes the oth
inserting a tuple
out any attribute
non null constraints
constraints not null
value during insertion
insert or insertion
select operator select
operator select operation
note that select
select actually returns
returns a table
return and table
select operation returns
create a table
table called emd
attributes employee manager
manager and dno
give an insert
insert into emd
insert the output
give the select
employee e dot
dnumber as dno
set of employee
employee number manager
number manager number
number and department
summarize the insert
insert can insert
doesn t insert
remember that tables
sets therefore insert
inserts the tuple
violate any unique
give a set
tuple and give
insert also fails
insert multiple tuples
fails if referential
integrity is violated
insert an employee
number as manager
exist referent referential
referent referential integrity
referential integrity fails
integrity fails multiple
fails multiple tuples
single insert command
giving multiple tuples
separated by commas
tuple is enclosed
enclosed within parenthesis
deletion of tuples
delete from employee
deletes one tuple
note that employee
tuple says delete
employee where department
remove the condition
employee it deletes
deletes all tuples
note that deleting
deleting all tuples
dropping the table
table here deleting
corresponds to truncating
truncating the table
table the table
updation of tuples
form update set
employee as shown
update employee set
set whatever updation
set salary equal
equal to salary
updating their salary
increasing their salary
salary by ten
ten percent rise
notion of views
designing large databases
large databases view
kinds of work
employee he doesn
project related details
created a view
manager so table
tables in contrast
contrast a table
table that exists
stored but views
stored as queries
tables and update
operations for views
views are limited
result of storing
queries but querying
query but updation
updation is limited
limited in terms
terms of views
created in sql
pretty simple construct
view and emd
fields empl mgr
view is created
compute this view
execute this query
query this query
return a table
properties of views
view is stored
query a view
modify a view
modify some data
view hence characterization
done during view
define a view
computation is done
view this characterization
characterization is done
drop view command
delete a table
table the efficient
pretty tricky problem
addressing this view
maintain a view
studied we looked
sql two standards
two standards tables
standards tables attributes
tables attributes values
constraints entity constraints
entity constraints foreign
constraints foreign key
kinds of select
select operations select
disambiguation aliasing selecting
selecting from multiple
multiple tables set
tables set operations
set operations multi-set
operations multi-set operations
multi-set operations substring
operations substring operations
substring operations arithmetic
operations arithmetic operations
checks and null
null checks nested
checks nested queries
queries and aliasing
aliasing and scope
scope in nested
group by constructs
statements for insertion
deletion and updation
tuples from database
scratch the surface
surface of views
model to relational
two main kinds
data or managing
insurance or banking
banking or railway
reservations or company
design um process
basically is meant
creating a conceptual
database or conceptual
dbms independent models
matter which companies
model for representing
representing your data
representing the schema
address one important
two different data
model completely independent
break my head
design some tools
design some kinds
kinds of software
software that takes
system and generates
generates appropriate relational
session on functional
kinds of automated
fourth normal form
build a tool
tool to automate
automate this process
dat database schema
dependencies to optimize
optimize this relational
build a database
database um application
study today form
form the underpinnings
tools or database
database lifecycle tools
tools which provide
database systems starting
models and relational
database schema conceptual
schema conceptual modeling
create the logical
logical database schemata
show end users
high-level database design
included as part
made of building
blocks like entities
relationships and attributes
physical schema design
design a physical
model is meant
efficiently store data
efficiently delete data
delete data elements
creating any anomalies
matter what kind
represent your data
reality is quiet
concept of dbms
systems may include
include more features
supports some kinds
automated optimization techniques
create redundant data
create some kind
kind of anomalies
anomalies during updation
updation and deletion
change the database
schema without changing
changing the correctness
correctness but increase
terms of retrieval
retrieval and appearance
notion of keys
role or place
relational database model
models the entities
represented using rectangles
represents a physical
represents some kind
life is represented
rectangle with solid
solid lines surrounded
shows this entity
employee which depicts
depicts all objects
objects of type
present um current
weak entities weak
entities weak entities
record an insurance
insurance record doesn
talk about insurance
general um idea
specifically the insurance
insurance record entity
record entity type
weak entity types
types are depicted
depicted using dashed
lines or dotted
relationship called handles
handles so employee
employee handles project
normal relationship type
type is represented
diamond using solid
identifying relationship types
types that identify
identify a weak
entity or provide
provide an identity
identity for weak
entities by associating
shown with double
entities and attributes
attributes are depicted
depicted using ovals
ovals and normal
attribute is depicted
line and key
pan or pan
identifies each income
income tax payer
payer is shown
combination form form
form the color
bird such kinds
depicted using double
lines as shown
attributes whose values
shown using dotted
date of date
derive the age
relation is set
set to comprise
comprise of atomic
values or atomic
atomic data values
atomic data value
value a data
divided into smaller
similarly each data
set to reside
model a domain
range of values
similarly a relation
value that lies
relationship also applied
ternary relationship unary
relationship unary relationship
form the attributes
model the notion
keys plays play
process of decomposing
schema in order
make them normalized
form or fourth
revisit the notion
detail and keys
aware which attributes
defines the notion
remove any element
superkey it seizes
null the primary
notion of referential
means foreign keys
keys of primary
constraints are shown
viewed as tables
kinds of columns
columns called roll
issue of mapping
mapping is important
tools of dbms
design a lifecycle
tool provides support
typical database lifecycle
lifecycle that means
means the tool
logical schema talk
form your system
create physical schema
generate a relational
kind of human
tool called erwin
translation the first
shows a simple
simple entity type
type called department
department id department
attribute is retained
type with simple
simple attributes note
attributes or composite
straight forward fashion
composite attribute remember
attributes a composite
attribute the color
hand a composite
attribute is made
shows a composite
attribute called department
department entity type
turn is made
two other attributes
attributes called location
form the attribute
shows an exa
relation called department
attributes are retained
retained as department
department name manager
manager is ret
retained as manager
attribute the department
straight away loaded
nt take region
number and add
components which form
key in made
identifying a tuple
identifying relationship type
means the relationship
identify or provide
record by associating
translate such entity
translation is shown
create a relationship
create a relation
attribute from employee
attribute and make
record however note
key for employee
key of insurance
record that means
updating or altering
altering the table
type is updated
updated or deleted
deleted that means
relation is delated
insurance record relations
order in order
order to translate
translate a weak
locate the identifying
type and make
options whenever updations
updations or deletions
deletions or performed
type um entity
form of relationship
relationships when weak
types are considered
invo is involved
type called managedby
managedby which relates
two different entity
department and manager
attributes relevant attributes
attributes are shown
attribute called employee
attribute called secretary
secretary is assigned
create um create
create an entity
relation called manager
model called manager
participation the total
means that means
manager would pro
department to manage
primary entity type
base entity type
key for manager
key for department
key in manager
primary called primary
key called department
department id note
note that manager
integrity in relational
referential integrity stipulate
foreign key refers
relation the tuple
tuple should exist
nt even exist
forms a rational
choose the entity
type which entity
involved in total
relationship between types
relation in case
total participation choose
department nor manager
participation it doesn
base um relation
include the primary
key of primary
relation and include
include any relationship
attributes as attributes
relationship both entity
relationship are involved
shows two entity
entity types project
project and consultant
type called consultation
identify any relation
key then referential
chance of violating
violating the referential
case the consultation
key of consultation
case both entities
form some kind
employees can work
keys called employee
case the employee
key of employee
employee re entity
identify the relation
represents the entity
side uniquely identifies
identifies a department
relation and create
including the key
identify the department
employee is working
relation called relationship
relationship called deputedto
deputedto several departments
key and department
department has department
attribute called record
number which maintains
maintains a record
employee is deputed
note the steps
relation is formed
formed with employee
form the employee
employee entity type
type similarly department
similarly department relationship
relation is found
found with department
relation is created
ids as foreign
type becomes part
record number attributes
attributes of deputedto
relation ok note
move this recorded
recorded record number
identify either employee
employee or department
department each employee
similarly each department
relationships are translated
collapse the relationship
types uniquely identifies
relation is required
required in order
order to complete
complete the mapping
department is updated
employee is employee
deputed to relationship
participating entity types
strategy for mapping
simply a generalization
create a separate
relation called works
creates an extra
relationship or extra
collapsing the relationship
avoid null values
department it means
violate referential integrity
integrity because remember
remember that referential
integrity but creates
creates a lot
lot of null
relation when performing
performing the translation
map multi-valued attributes
map composite attributes
attributes and keys
multi-valued attributes composite
attributes composite attributes
translating a composite
hand a multi-valued
attribute called color
bird a bird
key called species
identifies each bird
translate multi-valued attributes
first relation shows
relation called bird
bird with species
entity entity type
type called bird
created called bird
colors where species
species and color
define the key
birds species eggs
eggs has color
color y eggs
color z eggs
key for bird
relation is deleted
deleted or updated
made in bird
map n-ary relation
n-ary relation ships
entities forming part
suppliers supplies part
part to project
sales tax registration
tax registration number
identified with project
identified by part
relation which relates
relation called supplies
represent this relationship
relations that correspond
n-ary relationship type
existence for part
existence to part
supplier um primary
project primary key
part primary key
session that talked
map er models
relation um relational
relational database models
set of rules
sets of rules
enhanced er models
models like generalization
create the basis
tool software tool
shows a summary
set of thumb
type is created
create corresponding foreign
strong entity entity
create appropriate foreign
shown as relationship
two foreign keys
type that participates
types are strong
strong entity types
component composite attributes
form the composite
associate the primary
domain um value
dependencies and normal
kinds of database
system the first
first data model
building conceptual schema
defined a conceptual
communication with end
kinds of entities
exist what kinds
kinds of relationship
entity relationship schema
model for storing
kind of common
concept of keys
keys foreign keys
keys and referential
human um consumption
kind of case
tools to build
number of automated
formulize this notion
kinds of relational
schema or schemas
techniques formal techniques
understand the semantics
schema no mat
data so today
concept of relational
relational database design
idea of functional
notion of functional
relational database schema
functional dependencies functional
dependencies functional dependencies
work for systematic
design and optimization
non systematic options
options for optimization
dependencies however functional
fashion in order
order to achieve
achieve some level
level of optimization
level of efficiency
terms of database
notion of super
super keys primary
keys primary keys
defined the notion
keys using functional
dependencies in fact
fact functional dependencies
crucial in obtaining
obtaining the correct
correct normalized schemas
design database systems
exists a set
determine the value
dependences is written
written as shown
thing to note
functional dependencies define
dependencies define properties
essentially this kind
dependency that exist
number uniquely determines
determines the age
age uniquely determines
talking about functional
talking about properties
functional about functional
kind of mapping
kind of relation
relation between sets
identifies an employee
access a database
noticed the notion
determine the set
form the relation
forms the entire
entire relation comprising
similarly minimal super
shows a relation
relation called movies
title year length
year length filmtype
length filmtype studio
studio and star
common sense reasoning
sense reasoning identify
kinds of functional
title comma year
year uniquely determines
determine the star
star who acted
identify about functional
properties um note
attributes a defines
defines a set
define another set
identify the functional
defines the job
numbers between hundred
number um suppose
suppose uniquely defines
uniquely defines job
uniquely define salary
number actually defines
definitions um suppose
sets of functional
dependencies are set
relations that satisfy
satisfy the first
first functional dependency
relation instances satisfying
compute the compute
suppose i give
give some kind
kind of functional
inferring functional dependencies
trivial functional dependency
shows a functional
year def defines
def defines title
attribute uniquely identifies
side is contained
non trivial functional
completely non-trivial functional
non-trivial functional dependencies
notion of triviality
handle functional dependencies
notion of closure
closure of fds
recall the definition
algebra is closed
set that defines
perform an operator
performs some kind
integers and add
integers and subtract
perform a functional
function also belongs
define the function
closure on functional
fashion the closure
closure of functional
functional dependencies defined
define a set
two other sets
determine another set
union b union
union c union
union d union
eventually uniquely defined
property of functional
trivial triviality rule
rule however closure
complete the closure
element of closure
compute the closure
initially we start
trivial functional dependencies
dependencies every element
exists a functional
form a prime
set of elements
added to closure
suppose we run
run this algorithm
define all elements
notion of inferring
find out functional
out functional dependencies
dependencies which follow
set of functional
dependencies that exist
rule for inferring
note another rule
shown here suppose
functional dependencies exist
property and transitivity
prime be defined
inferred a non-trivial
non-trivial functional dependency
defines d prime
rule a defines
remove that triviality
form a defines
prime so functional
stated functional dependencies
dependencies and fds
inferred functional dependencies
set of relation
relation um suppose
movie is defined
defined by title
title year film
year film type
title and year
define the length
define the film
basis of functional
dependencies that form
form the basis
computing the closure
set of axioms
rules that define
define how functional
functional dependencies behave
armstrong s axiom
properties of functional
dependencies the first
notion of reflexivity
easily obvious based
tri triviality rule
theater and year
movie functionally defines
functionally defines title
attributes functionally define
exist a functional
theatre comma year
year defines length
add a set
dependencies without violating
violating the dependency
determines the length
attribute called star
dependencies without altering
altering the semantics
year and studio
movie uniquely determines
determines the studio
forms a triviality
entails from adding
functional dependency holds
movie the year
movie was shot
shot uniquely determines
adding new information
alter the dependency
notion of projecting
projecting functional dependencies
compute a project
algebra a project
project operation takes
takes certain columns
relation and produces
attributes that means
suppose i project
project another relation
uniquely determines length
dependencies that existed
involve only attributes
attributes that exist
dependencies that lie
compute the closures
included the trivial
computing the closures
firstly we start
infer a defines
essentially a defines
compute anymore closures
determine each attributes
shown as part
closure or compute
compute functional dependencies
dependencies and closure
closure and transitivity
transitivity and axioms
sets of underpinnings
normalizing or optimizing
optimizing relational schemas
remove this undesirable
property of redundancies
redundancies in relational
information which result
number of anomalies
kinds of anomalies
kinds of redundancies
kind of information
information is repeated
encounter two kinds
anomalies the notion
update a data
movie is repeated
movie is entered
change the title
similarly the notion
notion of deletion
deletion anomalies suppose
suppose i delete
delete a tuple
delete all tuples
search the entire
database and delete
design relational schema
redundancies and remove
remove these kinds
year length studio
year uniquely determine
uniquely determine length
length and title
movie uniquely determine
determine the studio
shot however title
uniquely determines star
repeat the information
information of length
length and studio
shahrukh khan hrithik
khan to hrithik
information that forms
notion of redundancy
redundancy and suppose
suppose after doing
entered the length
change the length
problem of deletion
process of decomposition
meant by decomposition
decompose the set
boyce-codd normal form
abbreviated as bcnf
note the emphasis
defines a double
prime that means
means a double
functional dependency exist
complete the notion
notion of decomposition
decomposition into bcnf
decompose a relation
comply into bcnf
prime which violates
meant by violating
bcnf it means
sets of attribute
attribute in order
bcnf we decompose
prime now remove
remove the set
attributes a prime
form a separate
relation and retain
prime to form
attributes title year
functional dependency hold
hold um holds
determines length title
uniquely determines studio
studio and title
year uniquely detr
uniquely detr det
detr det determines
bcnf violating functional
violating functional dependency
uniquely determine star
closure of title
decompose this relation
relation just remove
define and put
star to form
kinds of relations
movies is divided
divided into title
studio because title
year define length
year define studio
star is combined
year and retained
forms of movies
easy to verify
verify that movies
two are bcnf
property of bcnf
two attribute relations
attribute relations suppose
two attribute relation
four possible scenarios
scenarios the first
exist no non-trivial
dependencies only trivial
defines a defines
form b defines
key and suppose
suppose a defines
decompose the relation
decompose without losing
losing some information
relation called drama
attributes title theater
theater and city
title and city
city the title
determine the theater
suppose there exist
sake of argument
drama theater lets
guru nanak bhavan
kind of theater
uniquely defining city
city but theater
key in fact
city define theater
title drama title
title comma theater
theater and theater
theater comma city
city base based
theater um defines
basecs on based
perform the join
back the relations
join between drama
title and theater
title say yugant
theater uniquely identify
uniquely identify city
perform a natural
join between theater
drama two based
title theater city
city and title
unique um title
longer the key
determine the title
drama such dependencies
bcnf violating constraint
defines um city
dependency called city
accommodate such cases
exist any non-trivial
makes the relation
normal form relation
prove um properties
normal form relations
slightly general form
visit the last
last um kinds
kinds of dependencies
bcnf um bcnf
strict um form
title theater director
director and genre
drama is played
argument therefore title
title uniquely det
uniquely det determines
theater and director
classified as comedy
categories there exists
relationship between title
title and genre
dramas the theater
identify social commentaries
fashion now suppose
suppose a prime
bcnf now suppose
play any kinds
kinds of drama
director may direct
direct any kinds
non-trivial multi-valued dependency
dependency in order
order to remove
define a prime
property for bcnf
non-trivial um functional
stringent um criterion
criterion for removing
duplicates or removing
essentially the normal
complaint to fourth
complaint to bcnf
turn automatically complaint
briefly um summarize
studied the notion
generalization over keys
keys and properties
dependencies like transitivity
reflexivity and augmentation
notions of trivial
trivial and non-trivial
affect um bcnf
relations into bcnf
decompose into bcnf
bcnf without losing
notion of multi-valued
redundancies that exist
exist in bcnf
remove multi-valued dependencies
relational model mapping
model mapping entity
mapping entity relationship
relation to bcnf
data database schema
database life cycle
life cycle tools
entire life cycle
logical database schema
high level database
level database design
redundant um data
correctness but increasing
retrieval and updates
logical um entity
solid line surrounded
present current system
normal relation type
subdivided into smaller
normalized or conform
dbms um design
create a logical
form er system
create physical schemata
simple um entity
shows the examples
location id con
composite key made
ord in order
first to locate
deletion are performed
entity um entity
invol is involved
problem of referential
managedby is formed
forms the rational
base relation incase
incase both entities
relationship called consultation
employee rela entity
rela entity type
similarly a department
relationship um relation
attributes that belong
record number attribute
rela relationship type
employees employee entity
department id field
violate um referential
attributes and simple
defined the key
bird species eggs
map n-ary relationships
supplier supplies part
supplier primary key
relation relational database
entity ty entity
forms the composite
aspects of database
design we looked
models how data
primarily for human
claimed is meant
meant for machine
kind of misnomer
stored on computers
device like disks
databases are implemented
ripe a part
sense look inside
inside a dbms
dbms or inside
inside an implementation
elements actually stored
begin the session
session on storage
understanding storage structures
talk about storage
storage or storing
data the first
kinds of devices
capable of storing
stored in hard
hard disks floppy
disks floppy disks
random access memory
computer the cache
meant for storing
organized this kind
kinds of memory
divides this hierarchy
draw a hierarchy
hierarchy primary storages
storages would storage
secondary storage devices
storage devices primary
devices primary storage
primary storage devices
examples are shown
cpu registers cache
registers cache memory
cache memory ram
memory ram dram
ram dram sram
extremely fast memory
fast memory devices
address or retrieve
retrieve data elements
volatile memory devices
devices that means
power is switched
longer can hold
hold data data
stored in primary
hand secondary storage
examples are magnetic
backups of data
kinds of read-write
flash memory flash
memory flash memory
electrically erasable programmable
erasable programmable read
read only memories
perform data transfer
faster than existing
existing storage devices
disks or tapes
cheaper than primary
primary storage device
slower to access
access than accessing
accessing a primary
part when implementing
implementing a database
main memory database
held in main
implementations of main
main memory databases
large main memories
pretty large size
kinds certain characteristics
influence the kind
access and store
store and access
categorize secondary storage
devices either random
random access device
disk or magnetic
disk or random
random access devices
block of data
purely random access
mag magnetic disk
directly and move
sequential access device
access the hundredth
tape is rewound
ninty nine block
access or sequential
implement a storage
perform a lot
lot of pauses
read-write devices write-once
devices write-once devices
read-only devices read-write
devices read-write devices
data any number
times hard disks
disks um magnetic
incorporate data structures
modified during runtime
data is stored
stores small databases
databases within read-only
kind of modifications
modifications once data
data is written
devices or block
block devices character
devices character devices
character by character
dealing with large
amounts of data
data some kinds
kinds of tape
block data access
data access devices
unit of data
set of characters
read request reads
reads an entire
data into memory
memory and writes
back an entire
access is coupled
aheads that means
read into memory
increase data transfer
data transfer efficiency
requirements for storing
databases what kinds
firstly we note
databases required data
persistently for longer
computer is switched
database is lost
fashion usually databases
big to fit
fit in main
search a database
database by loading
loading the entire
database into memory
database on disk
disk and involve
storage has dropped
drastically in fact
progress in storage
storage has beaten
moore s law
physical dimensions today
gigabytes of data
small um area
embedded within watches
person has increased
databases in fact
term very large
hundreds of megabytes
slowly very large
hundreds of gigabytes
gigabytes or terabytes
power of twelve
petabytes of data
petabytes are ten
ten power fifteen
power fifteen bytes
databases that work
work on web
web related data
google or altavista
web actually work
work on petabytes
continuously to include
data storage requirements
design extremely agile
extremely agile data
agile data structures
store and manage
data between main
memory and secondary
primary data storage
storage the primary
data storage talks
accessed secondary file
secondary file structures
auxiliary or augmenting
augmenting file structures
sets of files
database starts growing
growing by leaps
leaps and bounds
terabytes or petabytes
role of auxiliary
files or secondary
locating the required
required data element
termed as file
file organizations data
stored in logical
structures called files
files are organized
organized on disk
organizations usually files
files are stored
sequence of records
stored in terms
transfer between main
ordering of data
form of records
physical um storage
storage of data
terms of blocks
correspondence between records
records and blocks
rare which means
records per block
blocks per record
define or record
record the structure
term file organization
file organization refers
records are stored
kinds of file
file or organization
kind of organization
sorted file organization
hashing file organization
notion of record
record and blocks
organizations a record
mentioned earlier represents
represents a tuple
inter related data
system a file
file is defined
records and records
length or variable
variable length remember
remember in sql
variable length strings
strings and variable
variable length integers
variable or fixed
fixed and records
fields and fields
column in sql
transfer or data
devices they correspond
disk or page
page in virtual
virtual memory systems
block stores records
file system structure
system structure blocks
fixed length blocks
length unlike records
block is dependent
dependent upon physical
block a storage
device is termed
defragmented or fragmented
sets of blocks
define a term
determine how records
records are packed
packed within blocks
blocks the blocking
number of records
constant across blocks
factor is constant
blocks if record
length is fixed
hand if record
length is variable
block may vary
vary from block
block to block
block blocking factor
number of blocks
size of block
records so bfr
bfr as shown
takes a lower
lower integer value
divide block size
amount of wastage
amount of bytes
blocking factor times
times the record
record size number
number of bytes
kinds of approaches
approaches to managing
managing this wasted
wasted block area
area when records
stored within blocks
blocks the first
span multiple blocks
shows one block
record however part
remaining space leaving
leaving a small
amount of space
pointer to point
sequence of record
begins the remaining
record is stored
kinds of record
record can span
span across multiple
size is bigger
necessarily use spanning
organization for storing
records into blocks
size is greater
usage of spanned
records is compulsory
required for storing
storing a collection
collection of records
order to compute
compute the blocking
block size divided
factor will give
give the number
file organization techniques
kind of file
file organization technique
unordered file organization
meaning that records
pile in inside
inside the file
records are coming
record one record
record two record
record three record
operating system underneath
form of file
organizing this file
insertion of records
records are inserted
search this file
kinds of auxiliary
require some kind
search these files
element therefore insertion
find the data
deletion in pile
pile files deletion
files deletion posses
create certain kinds
kinds of fragmentation
shows a pile
file now suppose
suppose that record
two and empty
empty the space
back this space
algorithm simply inserts
simply inserts records
inserts records int
kind of deletion
strategy is inefficient
inefficient in terms
space use usage
file we encounter
encounter another unique
data is modified
record as long
make the modification
modification in place
place and write
record to grow
back the record
four and record
two is modified
size of record
record two increases
back this record
mark the earlier
record as deleted
write back record
update any kind
kind of auxiliary
auxiliary data structures
point to record
sorted files sorted
files sorted files
read the file
returns back records
ordering field ordering
field ordering field
ordering key ordering
key ordering field
domain an ordinal
establish a total
impose some kind
order the names
lexical um rule
sorted files insertion
insertion and deletion
file remains sorted
record is inserted
file and updation
involve physical migration
modified however searching
termed as binary
details of binary
divide the search
space by half
reduce the search
previous search space
algorithm for binary
two bounds left
lower and upper
compute the mid
midpoint now suppose
read the records
records from form
required key attribute
attribute is equal
found the record
record therefore return
return a success
hand a key
search the lower
hand if key
attribute is greater
series of steps
steps is performed
bound is greater
equal to lower
upper and lower
lower bounds cross
found so binary
analysis of binary
binary search technique
search technique requires
requires an order
termed as log
binary search requires
order of log
log n number
number of disk
file um requires
number of block
base two number
number of access
made more efficient
terms of insertion
insertion and updation
inserted as shown
record with key
file and key
receive a record
record whose key
record in fact
fact this record
file that means
physically move record
file remain sorted
extremely expensive operation
operations are taking
place in order
order to mitigate
mitigate this problem
file is merged
actual sorted file
file is first
number of merge
two sorted files
files and merge
sorted files searching
pure binary search
perform a binary
file and incase
incase the key
perform a linear
kinds of searching
done when overflow
sorted file organizations
summarize sorted files
efficient than pile
key base searches
access devices note
tape device quiet
makes it terrible
inefficient therefore binary
suitable for random
physically move records
records and merge
queries are key
key word key
word key based
key based retrievals
means of providing
providing very fast
access to records
conditions these search
equality condition based
search a record
attribute are greater
searching for records
records whose key
attributes are equal
query hashing techniques
termed as randomizing
functions that map
map particular keys
keys into buckets
buckets for hosting
sorted file techniques
techniques even hashing
suited for random
hashing is performed
performed on disks
internal hashing internal
hashing internal hashing
management systems hashing
memory in order
loaded onto memory
kinds of hashing
internal data structure
function a simple
compute the mod
number of buckets
algorithms called folding
folding the key
attribute is twisted
twisted and folded
ways in order
uniformly randomly distributed
buckets that form
form the array
array of hash
techniques like sampling
sampling the key
data on disks
memory external hashing
comprises of blocks
disks which act
act as buckets
turn are augmented
set of buckets
form the hashing
figure here shows
typical hashing process
hashing function maps
array of buckets
buckets each index
blocks which form
form this bucket
block is identified
identified this record
make a sequential
reduce a search
blocks that form
summarize external hashing
levels of indirection
hashing into buckets
buckets and searching
searching within buckets
buckets a bucket
set of contiguous
point having non-contiguous
part of hashing
store some information
bucket can hold
depends on records
perform a sequential
choose a hashing
hash every key
set of keys
range this randomizing
function uniformly distributes
number of key
open addressing open
addressing open addressing
bucket is full
hashing function hashes
full we start
start a sequential
store the record
kind of technique
technique of maintaining
maintaining a link
full it maintains
maintains a pointer
disk blocks acting
perform sequential searches
searches within buckets
chain of buckets
terms of searching
kinds of kind
first hashing function
hashing function doesn
doesn t work
addressing or chaining
chaining in order
order to manage
shows the concept
concept of chaining
pointers to overflow
pointers point point
point to exact
pointer which points
buckets is fixed
fixed such kinds
static hashing techniques
static hashing technique
technique might work
sets of keys
distributed the hashing
keys are skewed
amounts of buckets
empty in order
order to obviate
dynamic hashing dynamic
hashing dynamic hashing
buckets can change
dynamically can grow
grow or shrink
added or deleted
strategy in dynamic
steps the first
bucket to begin
full we split
split the bucket
two separate buckets
two different buckets
buckets this process
process of splitting
process of merging
bucket becomes empty
simple dynamic hashing
dynamic hashing technique
split and merge
kinds of nodes
structures this kind
structure the circle
bucket the leaf
initially all data
keys are made
made of binary
records now suppose
overflow the bucket
bucket is split
notice the labels
joining these buckets
buckets the first
records whose keys
strings now suppose
node is created
holds the set
trace that starting
start um start
bucket um encounters
records are deleted
merge this bucket
edge is labeled
partner whose edge
kind of dynamic
technique in order
order to grow
grow and shrink
shrink buckets extensible
buckets extensible hashing
power n number
number of bucket
set of higher
higher order bits
number of bits
identify each bucket
buckets are split
split and merged
overflow or underflow
increased or decreased
pointers that shows
diffent different buckets
two that means
means this bucket
top two bits
last bucket overflows
bits in order
identify this bucket
keys which start
keys that start
managing um records
classify storage media
kinds volatile non-volatile
volatile non-volatile primary
non-volatile primary secondary
random access sequential
access sequential access
read-only versus read-write
read-write or write-once
impact the kind
concepts of records
blocks and files
dealing with data
stored while blocks
transfer and file
typically a relation
relation is stored
notion of spanning
required to store
file of records
organizations the first
pile file organization
problems with insertion
ordering attribute sorted
attribute sorted files
efficient for search
search on sorted
pose very tricky
problems in terms
updation of records
tricky when records
lengths and updations
updations can change
organization called hash
files where hashing
order to identify
identify the block
faced by hash
techniques because static
dataset is skewed
data is inserted
inserted or deleted
indexing techniques single
techniques single level
exploration of dbms
kind of graduated
management from physical
physical um perspective
relational data form
basically mathematical models
formalism which told
represent data elements
relationships among data
computer what kinds
kinds of overheads
kinds one kind
easier in terms
terms of lets
terms of updation
terms of maintenance
maintenance um easier
organizations and compared
complexity of insertion
updation um search
session um storage
basically two kinds
kinds of files
ore more secondary
accessing data elements
files which provide
accessing whichever data
whichever data element
firstly briefly surveying
learnt about storage
requirements of databases
databases need data
termed as persistent
fashion for longs
data is lost
typical user session
large to fit
fit in memory
initially the term
hundreds of mega
talking about peta
ten to power
true in databases
web search engines
engines like google
deal with peta
data and infact
sense that larger
larger and larger
amounts of storage
smaller and smaller
smaller surface area
lower and lower
prices therefore storage
big problem storage
storage is cheap
cheap secondary storage
search for databases
stored peta bytes
relevant data items
efficient a fashion
gave a web
interactive in nature
user gets bored
potentially a data
size of peta
handle these data
set of secondary
secondary or auxiliary
auxiliary file structures
studied in storage
talking about indexing
first the notation
record a record
physical counter part
termed a tuple
row in sql
disk a data
terms of files
files and file
file is treated
file sometimes files
relations or relation
considerations like maximum
maximum file length
allowed by operating
variable of length
length fixed length
fixed length records
records are easier
easier to handle
handle in terms
finding their location
finding the offset
amenable to fixed
store data elements
elements in form
form of text
text can range
words to thousands
thousands of words
allocate a large
amount of memory
records themselves comprise
sequence of fields
fields a field
field is analogous
sql par lens
concept of blocks
blocks a block
unit of storage
deal with block
block storage devices
talking about databases
deal with character
unit of information
single character blocks
block is based
accessing a file
device like disk
disk in order
order to find
find the correct
incur some overheads
blocks are distributed
taking about blocks
factor the blocking
simply b divided
function b divided
factor is greater
varieties of dealing
kind of unspanned
spanned records unspanned
records unspanned records
spaces as shown
leave that extra
extra space unused
unused which results
wastage of space
helps in easy
accessing of records
records from blocks
records were records
stored across stored
record is split
split between block
pointer that points
block in logical
block to access
unspanned record storage
simply a organization
stored in files
termed as unsorted
files or pile
pile files sorted
files and hashing
hashing files unsorted
files unsorted files
append new records
file unsorted files
inserting new records
records you don
kind of searching
searching you don
kind of reorganization
end of file
deletion or modification
data or searching
searching of data
search the data
large in size
bytes or tera
file a sorted
technique called binary
reduce our search
log n order
find whatever record
file organization incurs
incurs a lot
lot of overhead
overhead whenever insertion
insertion or deletion
remains physically sorted
sorted that means
records in order
case for deletion
deletion in order
kind of fragmentation
sorted the last
files a hash
function which hashes
record and transform
hashing static hashing
hashing and dynamic
hashing the amount
amount the number
buckets are fixed
distribution of keys
keys is queued
buckets um overflowing
dealt with techniques
techniques like open
overheads during searching
keys were hashed
notion of dynamic
shrink in size
size whenever records
records are added
topic of concern
notion of indexes
actual index structures
firstly the notion
file an index
data or data
data that helps
accessing the required
required data elements
database an index
inside the auxiliary
files that helps
structure are augmented
methods in order
order to search
kinds of index
index um indexes
single level indexes
indexes and multi
multi level indexes
level indexes single
indexes single level
level of index
directly to block
block or record
file a multi
multi level index
hand has multiple
level would point
point to block
addresses or record
pertaining to index
structures the notion
structure is built
searching is efficient
search a search
field an index
index is maintained
records are ordered
ordered on disk
disk in sorted
file um organizations
organizations an indexing
structure is build
default an index
structures is built
records a primary
ordering key field
physically order records
file in sorted
cases the ordering
define a notion
notion of clustering
field that means
ordering is performed
non key field
unique um field
index to begin
field of records
disk a primary
primary index comprises
file um note
comprises of fixed
fields are shown
file is shown
shown where records
records are divided
sense that records
blocks are indexed
properties of primary
noticed the number
index is equal
file the first
file is indexed
file these records
block or accessed
find that block
ordering or key
attributes are indexed
index the primary
index a sparse
index essentially means
values are indexed
value per block
hand a dense
search key value
value that appears
primary index search
search is easy
search using binary
index is greater
easy if records
allocated to blocks
blocks without block
suppose i allocate
range or subset
subset of keys
student roll number
number can range
hundred fifty students
record to block
deletion are easy
result in wasted
address is stored
records between blocks
structure whenever insertion
deletion takes place
index is based
entire data set
set is sorted
sorted whenever insertion
deletion take place
clustering index remember
remember the definition
definition of clustering
index a clustering
file is sorted
field the implication
value may point
point to multiple
addresses or multiple
multiple block addresses
store data values
data values pertaining
key the structure
clustering index file
file is similar
primary index file
field are stored
data file based
store one index
occurrence of student
shows a data
number may repeat
pertaining to department
two records pertaining
records pertaining number
two has spanned
ordering field department
field department number
two different blocks
block the left
shows the clustering
block address note
note the first
first two entries
files the first
value one department
value of department
value two appears
blocks in sequence
record having department
start from block
block in sequence
exhaust all records
records having department
field are indexed
number one appeared
appeared three times
department number number
single entry existed
clustering index field
field for cluster
cluster indexing file
deletion in clustering
problem of sorted
retain this sorted
form of files
clustering um clustering
previous example suppose
suppose we inserted
record in block
insertions and deletions
problem of insertion
non key attribute
field is allocated
allocated a separate
records having record
number having department
inserted having department
allocated to separate
pointer is maintained
access more records
department number eighty
accommodate three records
kind of block
block organization results
kinds of wastage
attribute however insertion
index a secondary
secondary index file
file is organized
organized or ordered
fields are unique
record a secondary
maintains one index
non dense index
secondary index assume
assume that roll
shows a dense
roll number field
field that appears
file also appears
addresses directly note
maintain block addresses
begins and note
performing a secondary
properties of secondary
maintaining secondary index
unique that means
field is unique
secondary index entries
primary file forms
forms a length
number of value
clustering um index
field may point
records or multiple
handling the duplicates
secondary index note
note that note
encounter in secondary
field the primary
file is ordered
fields we don
records are distributed
varieties of handling
handling secondary index
secondary index duplicates
duplicate index entries
index entries duplicate
entries duplicate index
index entries means
physically sorted file
file and maintain
extra re direction
first level points
block of record
entries are repeated
term two thousand
two is repeated
repeated four times
file the advantage
bit more complicated
complicated binary search
remember how binary
binary search works
search works binary
works binary search
binary search starts
entire um space
set of indexes
space to begin
compute a mid
upper bound compare
compare our key
key the key
lower plus upper
search both sides
sides in order
order to retrieve
sorted and maintained
approach to handling
handling secondary indexes
variable length recording
length recording record
recording record schemes
value the size
approach one advantage
complications of repeating
repeating multiple keys
addresses and block
addresses are stored
quickly we don
single index file
valid block address
file and insertion
records may require
add more fields
add more addresses
add more values
turn may affect
problem of spanning
spanning and non
order to allocate
searching and retrieval
kind of indexing
scheme secondary index
secondary index scheme
order to handle
non key attributes
extra redirection levels
right most part
shows the primary
file the lab
lab id field
repetitions each repetition
distinct record address
left most part
usual secondary index
index file comprising
address first points
value this block
length um note
field here note
completely different block
block is allocated
set of addresses
retrieve the set
kinds of indexed
kinds of single
single level index
level index structures
index the clustering
end this session
extra um indirection
properties of extra
extra indirection levels
summarize the extra
extra indirection level
technique for handling
handling duplicate record
doesn t suffer
suffer from complications
complications binary search
binary search complications
usual binary search
search in order
wastage of spaces
block blocks overflow
cases block overflows
overflows are handled
handled by chaining
technique and retrieval
retrieval requires sequential
requires sequential search
search within blocks
blocks however insertion
deletion of records
forward we don
worry about restructuring
restructuring the index
index or restructuring
file whenever insertion
firstly the type
type of indexes
order so primary
store and index
index that means
physically sorted based
store um index
field and store
store the address
ordered we don
worry about accessing
logical sequence starting
index with fixed
indexing is performed
non key variety
variety that means
deal with duplicates
commonly used technique
technique of extra
levels in order
handle duplicate address
number of index
index which stores
stores the number
number of distinct
distinct index field
index field values
dense or sparse
depending on weather
weather the non
weather the repetition
file is equal
auxiliary files lecture
indexing techniques multi-level
multi-level and dynamic
varieties of index
index structures index
structures index structures
primary files index
files index structures
value of index
problem in database
database is today
data but retrieval
searching data elements
data elements based
criteria key values
structures namely primary
primary indexes clustering
indexes clustering indexes
clustering indexes secondary
indexes secondary indexes
indexes on key
attributes and secondary
indexes on non-key
summarize them today
complex index structures
structures are shown
speed up data
methods and algorithms
access these data
covered this single
structures a single
level index structure
single auxiliary file
maps to addresses
stores physical blocks
blocks on disk
address is augmented
non ordering field
fields changes depending
kind of fields
indexing a primary
key field key
field key field
two key fields
key values greater
file we don
key field helps
building a primary
unique this poses
value may correspond
addresses the last
store a sparse
dense index structure
secondary index data
index data structure
session the primary
primary index structure
structure is shown
shown an index
file um pointing
data file comprises
records structure organized
records are sorted
store the key
maintain a sparse
index the number
blocks the physical
file can afford
record is value
address block address
shows an illustration
clustering index indexing
index indexing structure
index the file
number three number
number of twos
number of threes
index file stores
ordering field takes
points the first
problem with insertion
rectified by assigning
assigning separate blocks
key field attributes
key field note
note that secondary
index or index
maintained on non
non ordering fields
index file shown
attribute we don
worry about duplicates
duplicates we don
worry about repetitions
don t repetition
fixed length record
length record sizes
file is densed
attribute that means
means this attribute
ordering of records
correspond to multiple
addresses in clustering
records were ordered
indirection or extra
extra level levels
levels of redirection
redirection in order
order to reach
reach the data
left most file
file which shows
distinct key value
key value disk
value disk block
disk block address
fact a block
block of addresses
addresses a block
stored block wise
key value occurs
characteristics of single
index as shown
secondary index secondary
index secondary index
index on keys
unique data value
resort to secondary
indexes of non
non key varieties
level of indirection
index the sparse
similarly a clustering
records is equal
attribute a secondary
secondary key index
secondary non key
non key index
sparse index depending
advantages of index
index or dense
dense secondary indexes
files are ordered
possibly to search
search them based
based on binary
search a binary
technique which reduces
reduces the search
address in log
hand a linear
linear search requires
requires a requires
sequence of logical
records a record
equivalent of tuple
purely of physical
meant for efficient
efficient data transfer
size is determined
determined by physical
block and records
defined a notion
term blocking factor
factor where blocking
storing an index
file is greater
block can store
two index records
method of searching
order of blocking
constant in binary
explored in multi
entry can point
good implementation block
implementation block accesses
reduced from log
two to log
two if fan
out is greater
two level index
structures are categorized
categorized into first
level the first
sake of clarity
divided into blocks
index um index
index stores information
information is stored
ten this entry
level index file
top level index
record is pointed
indexes an ordering
usual primary index
store another primary
continue this process
number of levels
level that stores
stores an index
stores a primary
level the number
level is determined
binary tree structure
general the fan
records many number
level from level
two to level
fan out number
blocking factor number
entries um starts
factor of fan
reduced by half
efficient than primary
structure called tree
hierarchies a multi
structure is balanced
four different traversal
index um files
files in order
hand the right
number of nodes
circle here represents
represents an index
average the average
worst case behavior
log n log
performing a linear
order for multi
form a balanced
index the balanced
problematic in multi
physically sorted files
make a number
adjustments at number
primary index structures
structures in order
maintain the balance
balance tree property
structure an approach
approach to overcome
dynamic multi level
number of operations
tree is maintained
commonly used index
index um dynamic
dynamic index structures
two index structures
suggest a tree
tree data structure
pre determined maximum
determined maximum fan
related to bfr
corresponds to tree
logical tree structure
forms a special
kind of node
root node forms
forms the access
top most node
number of children
non root node
lowest level nodes
notion of parent
parent and children
shows a typical
node this node
implemented on disk
tree each pointer
represents a sub
trees are filed
left most sub
tree as null
internal sub trees
tree being null
sub tree pointers
pointers or pointers
key and data
value under pointer
present and pointers
values are present
file in addition
minus one keys
point a maximum
embed the keys
left most side
left most key
right most side
right most key
node the keys
right most left
leftmost right key
nodes each node
two tree pointers
two um divide
upper integer value
tree building procedure
procedure the root
children as part
tree the level
simply the distance
distance in terms
number of hops
node all leaf
nodes are maintained
maintained and suitable
algorithms are created
trees in fact
fact the insertion
tree has greater
kinds of accessing
accessing different varieties
varieties of accessing
elements in addition
common index structure
leaf and non
non leaf nodes
non leaf node
set of address
set of key
values and data
leaf nodes form
form and pointers
nodes are linked
provide ordered access
data file records
tree is depicted
pointers or block
pointers and key
pointers as part
tree is shown
keys and data
record containing key
pointing to record
logical leaf node
left logical block
sequence therefore starting
left most leaf
access the entire
left next leaf
properties of leaf
leaf nodes keys
tree each leaf
number of keys
trees is concerned
searches and additions
additions and deletions
fashion in fact
trees the searching
generalization of binary
key and starting
key k start
form the root
key is present
end up find
tree and key
right most keys
first sub tree
value key value
value should lie
matter of terminology
left sub tree
back to step
two and searching
node and searching
records while maintaining
maintaining the balanced
illustrating the process
process of insertion
standard text books
clarify the notion
logic behind insertion
tree to begin
record are inserted
nodes get filled
filled up nodes
nodes are split
nodes are made
made into children
newly created node
values are split
node is updated
operation is cascaded
cascaded to levels
illustrate our point
fan out factor
children each internal
node or root
keys are inserted
sequence is shown
inserted in sequence
node and data
two key pointers
two data pointers
two corresponding data
key is inserted
inserted this node
require a spilt
split this node
note how nodes
initially we started
spit this node
shown in right
node that points
two leaf nodes
nodes the keys
two different leaf
left most node
right most node
begin therefore assume
tree as shown
values are reordered
inserted the key
values were reordered
left most left
node now points
nodes the insertion
value again forms
forms a overflow
block which fails
encounter another overflow
overflow this overflow
four different pointers
node can accommodate
formed is shown
level is created
insertion is happening
algorithm in order
order to insert
deletion of keys
problem of underflow
underflow in insertion
problem of overflow
underflow an underflow
equal to floor
constraint that alteast
underflow a node
node is merged
sibling in order
bring down number
aspect of indexing
deal with index
structures on multiple
assumed that indexing
indexes are maintained
maintained or simple
times be maintained
maintained on composite
forming a key
employee number combine
combine to combine
form a key
variations or extensions
existing indexing structures
indexing multiple attributes
index multiple attributes
maintain a sorted
file a primary
index of multiple
index on multiple
sorting the file
attribute we sort
sort the file
based on first
strategy for dealing
dealing with composite
technique which takes
takes a composite
elements um pertaining
single bucket address
address by concatenating
numbers to form
form the bucket
technique for dealing
applications like data
notion of grid
establishes that establishes
establishes grid structure
student ranges form
distribution of key
split this range
ranges into buckets
buckets and combining
forms a grid
grid structures form
form a forms
forms a matrix
techniques called row
row major techniques
major techniques column
techniques column major
column major techniques
techniques called space
space filling curves
two different key
key values roll
values roll number
number and grade
grade roll numbers
numbers are ranging
buckets similarly grades
grades are divided
set of bucket
set of block
constraints of keys
corresponds to bucket
summarize the main
session we covered
covered several kinds
kinds of multi
index has index
tree a tree
internal internal nodes
nodes that form
form the tree
balancing tree structures
implemented in dynamic
insertion how insertion
insertion and deletions
deletions are handled
lastly we looked
maintain index structures
attributes that brings
constraints & triggers
database managements systems
bit of ground
explorations of dbms
looked into logical
models of data
data data management
looked at physical
requirements of data
kinds of physical
physical data storage
strategies for databases
search and retrieve
taking about databases
times a physiological
web the world
world wide web
set a bag
tuples or relation
relation of tuples
collection of tuples
collection a bag
bag of tuple
simply a collection
kinds of tuple
define the attributes
attributes that make
kinds of tuples
absolutely no kinds
collection of things
tuples we tend
things or collection
repetitions in sets
order to implement
implement a bag
bag of tupels
implement a set
kinds of programming
kinds of logical
implementing a bag
maintain one collection
maintaining collections link
collections link list
link list trees
trees whatever arrays
similarly in order
structure in order
implement a collection
tuples are maintained
tuples um moving
constraint the key
constraints no duplicates
relational a relation
duplicates in tuples
forbids any tuple
constraints like key
define a tuple
relation by default
form its super
concept of constraints
concept of triggers
triggers in database
database systems triggers
active database systems
typical database management
term integrity constraints
term implies integrity
implies integrity constraints
constraints are constraints
constraints that strive
strive to enforce
enforce the integrity
system of data
elements essentially states
set or validity
validity simply states
kind of correctness
application really considers
considers semantically correct
student can range
attribute called mark
pertains to validity
enter a value
incorrect um entry
field the student
obtained ninety marks
incorrect um value
value um integrity
dbms are independent
database um values
data elements stored
form of key
form of constraints
revisit key constraints
talking about constraints
constraints a key
form of relational
manages um entity
meant by entity
entity existence entity
existence entity existence
existence essentially means
identify each entity
rest of tuples
forbids um duplicate
tuples the entire
constraints therefore states
states that key
identify a subset
attribute is concerned
concerned the entity
entity constraint stipulates
verses a null
field all null
primary key relation
kind of key
constraint the referential
keys um remember
attributes or subset
relation a foreign
referential key integrity
key integrity constraint
integrity constraint states
assign a manger
assign a manager
non existent department
set foreign key
key as null
constraint is concerned
constraints using sql
note the creation
shows a table
two key constraints
constraints called non
null and unique
field called reportsto
key um references
references the field
references the attribute
tuple in employee
constraints are identified
identified the first
first circle shows
stipulate that pan
number is primary
states that employee
deference every tuple
identify foreign keys
foreign key constructs
references the relation
constraints be enforced
aspects of data
storage or data
inside the dbms
constrains or key
enforced a simple
field that form
form the keys
declared primary key
primary key attribute
enforce the unique
unique constraint note
unique all keys
structure to verify
value already exist
violate the uniqueness
secondary key attributes
maintain secondary index
secondary index indexes
key actually exist
insert a tuple
tuple in fact
fact really exists
weather the foreign
key um weather
enforcing referential integrity
integrity in sql
sql automatically rejects
non existent tuple
rejection is performed
option for managing
managing um alterations
updates in tables
tuple is deleted
manager um working
table called manager
referencing this tuple
referencing the department
department is deleted
similarly sql rejects
part to tuples
affect the foreign
existent department sql
department sql rejects
rejects this update
update the department
department um table
table and change
change the department
foreign keys dangling
sql would reject
updates and delete
updates and deletes
deletes are cascaded
constructs in sql
instructs the dbms
dbms to perform
fashion than mere
cascade a cascade
reference tuple make
change my department
change all referencing
referencing to department
department number fifty
fifty to department
instruct the dbms
set null option
creates a table
key called reportsto
key references employee
references employee relation
employee number field
foreign key relation
foreign key specification
two other constructs
constructs the first
delete set null
essentially it means
deleted then set
set this set
set this field
null without violating
violating referential integrity
employees then set
set the field
field as null
number is changed
make corresponding modifications
foreign key foreign
key foreign key
deferred constraint checks
checks a deferred
deferred constraint check
check essentially state
tuple that don
don t make
make a constraint
require a deferred
constraint checks deferred
checks deferred constraints
deferred constraints checks
circular referential integrity
show two tables
table essentially states
manager the department
relation the department
relation in turn
field called manager
upgraded its database
porting the set
adding these tuples
mode um adding
adding a set
difficult to guarantee
adding a department
manager already exist
adding a manager
impossible to sustain
deferred integrity check
deferred or deferrable
option in sql
dbms defers integrity
defers integrity checks
notion of transaction
unit of database
database um operations
debiting and crediting
performing um wired
friend s account
operations that debits
account and credits
account this entire
entity or semantic
semantic um transaction
credit should happen
happen it shouldn
account is debited
account is credit
essentially um defers
defers integrity constraints
encounter a situation
maintained the integrity
employee number attribute
separately specify foreign
department id references
deferred that means
deferrable essentially means
integrity is deferred
initially deferred means
means explicitly tells
tells the dbms
tuple is tuple
tuple of type
inserted initially defer
referential integrity checks
kind of constraints
constraints on attributes
states that null
checks against duplicate
attribute being inserted
form of attribute
kind of attribute
first example defines
defines a field
attribute called gender
single character char
imposes an integrity
two valid characters
assigned for gender
shows a field
field called age
check that states
states that check
check that age
age is greater
talking about employee
legal um integrity
legal um minimum
employee of eighteen
check age greater
set of norms
norms which define
change from system
system to system
minimum working age
sort of interesting
values of attributes
referential integrity referential
integrity referential integrity
relations however note
check for enforcing
enforcing um referential
shows the declaration
department id shown
manager um tuple
manager actually exists
department um relation
enforce a relation
relation referential integrity
modify a tuple
updates are insertion
insertion is rejected
suggest that referential
enforced using check
department um existed
tuple was inserted
tuple was deleted
handled by check
condition for enforcing
integrity the check
tuple wide basis
basis that means
check is performed
type is based
based on talent
based on encouraging
encouraging the child
child s talent
check a separate
set as talent
constraints to declare
declare in sql
legal um age
employee that constraint
constraint called check
check um age
eighteen or job
job type equal
equal to talent
named um constraints
add or delete
constraints by referring
commands the first
alter table employee
table employee drop
employee drop constraint
drop constraint legal
constraint legal employee
longer um valid
enforced in future
alter statement shows
table um manager
manager and add
add constraints allworks
allworks and check
check the department
employee manager tuples
managing a department
schema level constraints
constraints that acted
key level tuple
tuple or attribute
attribute or keys
acted on specific
relation a schema
schema level constraint
database wide basis
constraint a powerful
powerful general purpose
general purpose constraint
assertions are general
general purpose checks
make a specific
assertion the assertion
out the life
assertion is dropped
assertion is made
create assertion command
shows create assertion
command that creates
creates an assertion
assertion called nobench
nobench um nobench
statement which checks
exist any manager
manager whose department
assigned any department
execute the create
create assertion statement
create assertion fails
fails the assertion
assigned any departments
departments are modified
tuples are deleted
assertion is created
tuple whose department
null is rejected
set of assertions
assertion is deleted
deleted um assertions
drop assertion command
drop assertion nobench
assertion no longer
tuples um violating
violating this assertion
kind of schema
rules or trigles
triggers an eca
eca rule expands
condition action rule
kinds of databases
databases however eca
incorporate some form
form of eca
rules an eca
database wide constraint
enforced and eca
rule is enforced
rule is awakened
note that eca
stands for event
condition and action
awakened the rule
rule then performs
performs a condition
check to check
set of actions
preventing the event
proceeding or undoing
undoing the event
database update operations
intimating the user
action in turn
generate more events
turn could trigger
trigger more eca
options that sql
handle eca rules
make a check
performing the action
occurs an action
action the action
values of data
systems would maintain
maintain the older
case they trigger
trigger certain eca
older um value
alert the user
current um stock
falls by greater
older and newer
price in order
update is greater
user is alerted
keywords are shown
term called create
creates a trigger
trigger called overdraft
performed after update
relation called pre-paid
pre-paid and referencing
modified has nrow
nrow dot balance
dot balance attribute
update um update
update that row
row and set
block or set
set the attribute
attribute block equal
equal to true
marked as blocked
blocked as part
properties of eca
eca rules eca
rules eca rules
rule writers responsibility
enforces these rules
wrote these rules
rules to enforce
enforce these integrity
responsibility to ensure
responsibility to prevent
prevent cascading triggers
turn um create
create another cascading
turn would trigger
turn would create
cascading um action
action um triggering
triggering more rules
conditions from happening
happening a rule
write a cyclic
rule a triggers
action of rule
rule b triggers
undo an update
turn triggers rule
dbms systems termination
termination and infinite
maintaining a count
crosses a maximum
including the update
update that triggered
triggered this infinite
rules are rolled
created this infine
looping of rules
kind of integrity
sql based database
based database system
notion of authorization
authorization and privileges
user is authorized
enjoys what kind
kind of privileges
sql based system
system can enjoy
enjoy certain privileges
privileges that grants
authorization to read
account of account
employee is authorized
allowed to insert
update authorization delete
authorization delete authorization
delete authorization index
authorization index authorization
allowed to create
create and delete
authorize to create
primary um index
inefficient to access
create or delete
indexes then alternation
alternation and drop
views what kinds
kinds of authorizations
impose on views
views most database
systems allow authorizations
views without obtaining
obtaining the specific
employee salary details
salary details perks
enjoy read authorization
actual employee tuple
authorized to access
obtain certain authorizations
views are derived
view authorization checks
query is answered
form of providing
grant privilege list
relation or view
set of users
grant insert update
update and select
table to public
public public means
authorization for reads
reads an insert
authorization for inserts
authorization for modification
grant all privileges
privileges it means
user in question
revoke privilege list
list on relation
restrict or cascade
restrict basically means
stay in place
hand a cascade
notion of constraints
dbms um system
constraints which act
domains or validity
value with reference
attribute may depend
constraints especially assertions
purpose um schema
maintain certain integrity
assertions are dropped
finally we looked
looked at triggers
triggers or eca
perform certain actions
finally then looked
notion of privileges
privileges on authorization
system can hold
granted certain privileges
privileges and privileges
processing and optimization
structures and index
structures we talked
biggest challenge facing
facing a databases
yesterday the challenges
longer the problem
problem of storing
data in fact
small devices today
store huge amounts
inside your watches
two giga bytes
primarily of storage
surface area required
shrunk in tremendous
cost of storing
fall in cost
affordability of massive
storage has resulted
challenge the challenge
ago very large
data however today
easily into peta
data ten power
mentioned these things
files containing metadata
retrieve the required
data elements form
element in effective
data and making
making a data
data or making
making the difference
difference between usability
query execution strategies
execution and optimization
extremely important aspect
aspect of database
execution um strategy
strategy um takes
takes um takes
takes enormous amounts
retrieve a data
make the difference
query is interactive
batch in nature
execution and query
effective query processing
processing or efficient
efficient query processing
processing is crucial
crucial for good
operations of database
database a database
good query execution
quick calculation suppose
thousand mega bytes
safe to assume
data transfer rates
bit one mega
query that select
data that means
scan the entire
bad query execution
query execution plan
compute a cartesian
return the results
times one giga
compute this cartesian
concerned therefore efficient
efficient query execution
query processing depends
variety of factors
control of dbms
affect query execution
factors that affect
media is fragmented
fragmented or defragmented
meant by fragmented
fragmented storage contiguous
storage contiguous block
access a relation
blocks are divided
divided or distributed
queries or query
query execution times
systems would override
override the operating
system um override
operating system mechanisms
start to deal
deal with devices
high end database
end database management
underlying operating system
access the hardware
directly in order
order to speed
decrease response times
insufficient or incorrect
information about factors
affect query plans
plans can lead
vastly ineffective queries
execution plan estimates
giga bytes table
stored in main
estimating several factors
infor several kinds
kinds of information
size in terms
terms of bytes
table and estimate
catalogs hence play
roll in deciding
deciding the query
typical um process
process or query
query execution process
processing um process
execution um process
steps in typical
high level language
level language construct
construct into machine
language and executes
query the sql
read and parsed
complier that performs
analysis is performed
query is read
characters are recognized
parses the query
constructs a syntax
tree is validated
validated for semantic
types and interoptability
done an intermediate
logical query plan
query plan tree
tree this intermediate
relational algebra representation
intermediate query tree
tree is generated
series of heuristics
heuristics and cost
cost based searches
rewrite this tree
tree or rewrite
rewrite this query
query execution tree
tree in order
execution whatever query
intermediate query representation
generates the query
rewrites the tree
order to reorder
final physical query
physical query plan
tree is created
query optimization strategies
heuristics based optimization
based optimization strategy
essentially some kinds
kinds of thumb
yield better strategies
cost based optimization
based optimization strategies
required to execute
execute one query
physically query execution
plan is written
necessarily the machine
stored onto disks
disks the query
query code generator
executes the query
starts giving results
mode of query
generates machine code
physical operations required
required to answer
answer the query
compiled um mode
run time database
processor which executes
executes the code
code and returns
returns the query
steps of query
executions two aspects
aspects are important
plan the intermediate
relation algebra equivalent
form of tree
tree where relational
relational algebra operators
actual domains form
form the leaf
nodes the tree
heuristics or cost
generate an equivalent
tree which produces
overheads the physical
interpreted or complied
complied into machine
constitutes the physical
physical um query
query execution plans
constructs that make
physical query execution
plan the logical
logical query execution
query plan comprises
operators that define
define the language
language of physical
operators of relational
algebra says select
condition the internal
internal um language
operators which talk
physically accessing tables
physical operations note
candidate physical query
query plan operators
query execution code
table scan operator
operator a table
scans and returns
returns an entire
give certain conditions
operator that scans
tuples that satisfy
performed by table
read all blocks
note that blocks
physical um component
operator for table
scan contains code
table are read
read in sequence
table is returned
index scan operator
operator that makes
order to read
file in sequence
query plan language
sort scan operator
operator the sort
scan operator scans
scans a relation
sorts this results
results before retuning
higher level whichever
attribute no sorting
relation is small
memory then sorting
directly in memory
memory then external
sorting and external
external sort merge
sort merge techniques
order to sort
query plan operator
management of records
standard template libraries
active template libraries
libraries on microsoft
element that form
form up forms
element so iterators
functions as shown
first function open
open the iterator
function called getnext
operator called close
close closes control
table scan iterator
implement the table
implemented open getnext
getnext and close
open construct initializes
initializes two variables
tuple in inside
function just iterates
calling the table
things the blocks
physical data stores
logical data stores
stores now tuples
iterated within blocks
block is exhausted
exhausted the blocks
logical um block
function um performs
set of function
current um block
incremented and set
first assign oldt
assign oldt equal
oldt for close
close we don
file therefore close
close um function
performs some kinds
clean up operation
structure were opened
function these data
structures are closed
functions the open
table is implemented
sequence of blocks
blocks that make
open the table
function um initializes
two different variables
block the getnext
getnext function note
function should return
operator should return
return um tuples
tuples after tuples
tuple second tuple
write in terms
terms of tuples
tuples to return
means we fist
reached the end
function to clean
opened whatever memory
iterator which performs
clean up operations
compute the bag
relation as bags
sets a bag
tuples or collection
collection of elements
set a multi
multi set union
simply a bag
two different bags
multi um multi
multi bag union
union or union
union over bags
disjoint union operator
iterator for performing
performing the disjoint
form of iterators
call the getnext
disjoint union iterator
current relation equal
current relation dot
relation dot getnext
set current relation
call s dot
sub sequent getnext
sequent getnext operations
records by calling
relations we open
relation and start
start calling getnext
exhausted it returns
dot close don
good programming practice
practice to call
query plan program
plan program programming
program programming language
elements of table
table scan index
scan index scans
scans and iterators
relational algebra operator
select or project
inside the database
broadly divide algorithms
categories we call
call them sorting
sorting based methods
based methods hash
methods hash based
hash based methods
methods and index
index based methods
meant are oriented
increasing the effectiveness
effectiveness of search
sorting based method
scanned are scanned
relations are sorted
fashion similarly hash
similarly hash based
relations an index
index base methods
base methods resort
resort to index
trees or balance
algorithms for data
data access based
data access requirements
divide the kinds
requirements the first
operator that means
requires or requires
requires to contend
condition for select
tuple after tuple
full relation unary
relation unary operators
kind of set
operations are full
full relation binary
relation binary operators
requires a complete
binary that means
relations to contend
set theortic operators
operators like union
require two relations
scanned the entire
query execution requirements
kind of strategies
access the relation
relation multiple times
times limiting assumption
fit into memory
memory into main
algorithm to perform
perform a tuple
project as shown
select some condition
project some condition
tuple and store
store this relations
relations or store
store this store
store this tuples
input buffer perform
perform a unary
operator and output
relation iterator returns
iterator returns tuple
case this input
buffer to store
buffer and checked
simple single pass
answer a tuple
examples of relation
sql statement suppose
entire relation knowledge
return the required
general one pass
pass algorithmic strategy
operators is shown
familiar um table
iterator which returns
unique or group
put the tuple
data structure holding
holding the history
buffer and check
check the hash
structure holding history
encountered this thing
output the tuple
single pass algorithm
augmenting data structure
suppose the unary
return any output
relation is read
grouping is formed
structure that means
means this space
hold the entire
held in memory
algorithms for relation
strategy is vary
binary operators require
relation be read
completely into memory
sense to read
read the smaller
relation into memory
memory and iterate
make this clear
strategy for computing
computing the set
relations r union
word set union
union that means
returning any duplicate
result that means
remove all duplicates
duplicates while returning
returning r union
union s assuming
strategy to compute
retrieve all tuples
memory and place
index or hash
access each tuple
outputting the tuples
memory and indexed
data structure start
structure start reading
tuple already exist
discard the tuple
making another implicit
set that means
check for duplicates
check the duplicates
sets the set
set union operator
operator the strategy
set intersection operator
perform the set
in-memory data structure
hash tables structure
efficiently then start
tuple by tuple
tuple also exist
buffer otherwise discard
set difference set
difference set difference
computing r minus
operation now suppose
loss of generality
relations that means
means we read
memory as usual
read the relation
iterator into memory
memory and put
in-memory index structure
tuple as simple
efficient to read
shows set difference
difference s minus
read the complete
iterator and read
read all tuples
find a matching
delete the tuple
deleted all common
product r times
times s cross
product is simple
algorithm is concerned
performance is concerned
relation just read
contiguous um sequence
sequence of memory
algorithm for natural
join a natural
relations that equates
domain now assume
join that means
bigger relation read
perform the indexing
matching tuple match
tuples and output
iterator and sort
sort um table
table scan sort
scan sort scan
sort scan etcetera
develop a strategy
strategy for performing
performing relational algebra
intersection s select
select project unique
project unique groupby
algorithms one pass
algorithms are applicable
relation can fit
blocks of memory
size m minus
minus one blocks
blocks in size
perform book keeping
reading from disc
estimating the size
size of relation
dbms engine decides
algorithm for performing
query um relational
relational query relational
query relational algebra
relational algebra operation
large part large
part large part
two few buffers
unusable the query
plan is unusable
buffers um thinking
size is big
possibility of thrashing
crucial to obtain
obtain a good
estimation in order
pass um query
important and crucial
area of data
stages in query
two important intermediate
important intermediate steps
steps in query
set of language
constructs that perform
perform low level
low level operations
performs low level
access um files
files into memory
reading for performing
performing any data
data base related
base related operations
kinds of constructs
constructs in addition
constructs like iterators
iterators tables scans
tables scans sort
scans sort scans
sort scans etcetera
query plan constructors
perform a variety
variety of relational
operations like select
question of handling
logical um query
aspect of dbms
dbms design note
term dbms design
address this issue
dbms design verses
design we started
today s world
world the size
longer a problem
amounts of space
pretty cheap cost
cheap cost infact
hold a database
database of size
fifty six mega
store um data
pretty affordable cost
occupies very small
space therefore storage
problem the problem
today is retrieval
reterving any data
retrieving whatever data
crucial elements today
physical storage world
world which comprises
comprises of index
kinds of hash
element in making
making this happen
making fast data
fast data retrieval
data retrieval happen
element is query
process the query
making query processing
query processing interactive
google if suppose
give a web
web search query
search query suppose
engine like google
google can search
search peta bytes
space of data
data is peta
intelligent query processing
query processing techniques
throw more hardware
throw faster processors
algorithm can make
session in query
processing and move
aspects of query
query processing efficient
processing efficient query
good dbms design
operational or effective
effective and database
bad query processor
render a database
limit query processing
yesterday that query
query um query
processing could depend
system is fragmented
fragmented or defragmanted
factors that impact
impact query performance
dbms therefore query
oriented towards obtaining
query is fist
takes the string
forms a query
query and returns
set of tokens
passed to build
checks and etcetera
performed which comprises
comprises the validating
representation is generated
generated this intermediate
structure that represents
represents the relational
relational algebra equivalent
employed in order
systematically um optimize
optimize the tree
performance the intermediate
optimizer which generates
generates a query
tree that means
means a physical
plan tree comprises
query plan written
code for execution
plan language comprises
table scan constructs
constructs and sort
sort scan constructs
constructs and iterators
select project set
project set union
set union difference
dbms um engine
code is generated
operating system run
primary primarily interested
taking about query
query execution stages
form of query
representation in fact
query plan representation
describe the physical
physical execution plan
language which executes
complied onto machine
execution plan operators
operators that defined
defined the basic
basic um physical
performed in order
internal query operators
operators that make
internal query language
query language sql
sql or relational
external query language
users or application
language for answering
queries that accesses
accesses the file
dbms in order
tuples in response
talk about physical
yesterday was table
iterator um operator
opens a table
table and returns
returns a tuple
function a getnext
function a table
scan operator opens
top most tuple
getindex or getnext
invocation and starts
incrementing a pointer
tuple is returned
invocation would return
function would close
close the table123
returns all tuples
built on top
plan um constructs
constructs or data
structures that perform
perform various operations
divided one pass
kinds of categories
categories the first
category was tuple
algorithm a tuple
easily be executed
fit into main
concerned with single
single parse algorithm
algorithm for tuple
function called unique
unique in sql
tuple in isolation
fact the relation
requires m memory
relations can fit
relation completely fits
fits into memory
estimate the size
extent on procuring
procuring good estimates
estimates of relation
sizes in terms
algorithm is wrong
buffers are allocated
relation wont fit
longer be applicable
multi pass algorithms
two pass algorithms
generally many multi
algorithms are generalizations
difficult to generalize
alternation between reading
reading um reading
back onto disk
alternation between computation
computation and intermediate
intermediate result generation
generation and retrieval
retrieval of intermediate
based two pass
pass algorithms sorting
algorithms sorting hashing
hashing and indexed
base two parse
two parse algorithms
algorithms the first
algorithms the basic
idea behind sorting
algorithms is shown
blocks of data
shows the basic
two pass sorting
pass sorting algorithms
multi pass algorithm
pass algorithm alternates
alternates between reading
reading intermediate results
part of data
disk and performing
computations and writing
algorithms are based
based on sorting
start by reading
reading the relations
unary or binary
pair of relations
read um block
block by block
read these relations
relations m blocks
blocks of relations
blocks of tuples
relation or pair
relations are read
back into disk
disk now continue
relation is exhausted
dealing with unary
pair of relation
handles are exhausted
results are written
blocks of sorted
tuples are written
variety of query
query merge techniques
merge techniques remember
algorithm for merging
relation with sorting
sorting a merging
merging basically means
obtain a single
exist very efficient
algorithms for merging
lists are sorted
merge techniques note
longer just merge
query merge technique
perform your query
query or answer
answer your query
doing the merging
techniques to extract
extract relevant results
sorted m blocks
blocks of disk
two pass sortings
sortings two pass
pass sorting based
answering different kinds
worry about tuple
checked in isolation
operator namely duplicate
implement the sql
sql unique construct
assume that relation
read m blocks
memory and sort
store the sorted
continue from step
read our relation
back into memory
set of sorted
sorted intermediate results
technique for eliminating
sorted sub list
data in terms
size m blocks
blocks the last
last data intermediate
data intermediate element
top most block
simple as taking
taking one tuple
moving or rolling
pass the present
tuples you don
put the put
put the first
tuple t appears
search each block
find a tuple
kind of merge
merge elimination takes
takes an order
sorted block set
intermediate result block
result block set
remember um merging
algorithms a merging
list of size
tuples of data
takes for eliminating
makes the process
thing is sorted
start by taking
set into memory
first such block
set and start
value is greater
two to begin
set we read
stop this process
tuple here reads
buffer and start
block you cancel
cancel the first
two and end
tuple is put
two is put
buffer our set
four still exist
rolling this block
answer to obviating
obviating this problem
rolling the blocks
roll the block
top most set
set of buffers
rolling um blocks
perform set union
union using sorting
remember this kinds
kinds of algorithms
looked at yesterday
operators we looked
looked at duplicate
elimination we looked
set union set
union set theoretic
union intersection set
emphasized the word
word called set
set it means
imagine the strategy
computing set union
similar to duplicate
output all tuples
duplicates as simple
set union algorithm
single relation sort
start reading tuples
duplicate elimination merging
elimination merging technique
intersection using sort
sorting techniques set
techniques set intersection
return the set
previous two algorithms
distinguish between tuples
mechanism of tagging
tagging each tuple
belong to relation
strategy for set
intersection is shown
store the blocks
back on disk
separate block set
separate buffer pool
distinguish between buffers
buffers that belongs
compute the common
memory and read
read the smallest
means the smallest
tuple t existed
discarded and note
eliminate um duplicates
tuple in relation
sort um sorting
natural join function
function the natural
equijoin that operates
equijoin on attributes
relations so assume
computing natural join
first read blocks
block and sort
sort them entire
entire tuple contents
attribute and store
read um relation
relation s block
compute the natural
stored onto disk
encounter a small
tolerate null values
memory to store
store every tuple
worst case conditions
combining the intermediate
done in memory
perform the intermediate
operations in order
order to tackle
tackle such issues
termed as external
read the first
memory and start
tuples and store
pretty slow operation
amounts of disk
accesses or disk
writes are reading
write the intermediate
intermediate sorted relations
disk um accesses
read each set
delete the tuples
done this operation
department number attribute
employee relation find
find the department
found the first
join using sort
slightly expensive technique
set of algorithms
paradigm of algorithms
hash based algorithms
suggests um hash
underlying data structure
algoithms are based
based the basic
algorithms are shown
relation r block
block we don
block and hash
hash file note
file a bucket
chain of buffers
key being hashed
tuples should hash
examine each bucket
bucket in isolation
isolation we don
work across buckets
anymore in sort
sort based techniques
based techniques note
sorted buffer list
generated in hash
hash based technique
bucket in order
order to produce
produce the final
hash file organization
performed the key
key then maps
shows static hashing
dynamic hashing techniques
hashes a key
number the bucket
number in turn
chain of blocks
data or tuples
bucket are stored
elimination and set
hash based techniques
performed using hash
elimination using hash
simple has shown
read and hash
reiterate the fact
necessarily be hashed
sense all duplicates
visit each bucket
bucket and eliminate
bucket can fit
maintain a internal
internal index structure
structure in memory
eliminate all duplicates
memory data structure
two pass sort
pass sort based
sort based algorithm
order for removing
removing the duplicates
theoretic operations union
operations union intersection
theoretic operations involving
involving two relations
maintain two separate
two separate hash
separate hash files
files okay hash
hash based file
based file organization
two hash files
function um hash
first hash file
hash file corresponds
analogous to bucket
simple to perform
perform set theoretic
operations using hash
hash each tuple
file and hash
output the results
examine corresponding buckets
thing for set
quiet straight forward
forward the last
technique in hashing
hash join algorithm
widely used technique
technique for performing
performing natural joins
simplicity and efficiency
compute natural join
join over relations
key to perform
perform the hashing
exist in bucket
buckets in order
operation this makes
makes the join
operation extremely efficient
partition hash join
pure hash join
slightly different algorithm
widely used algorithm
algorithm for computing
computing natural joins
summarize query processing
processing in general
stages of query
execution to begin
physical query query
query query execution
looked into algorithms
built to perform
perform this internal
queries or physical
answer this physical
execution plan construct
single pass algorithms
relations are small
query is tuple
relations are big
big among multi
algorithms we looked
looked at sort
sort based algorithms
algorithms or sorting
sorting based strategies
strategies for performing
operations and hash
hash based strategies
looked at index
index base strategies
analogous to sorting
sorting and hashing
hashing base strategies
briefly um visit
visit index base
plans and ways
exploring in past
past two sessions
sessions namely query
element in dbms
mentioned in previous
denote um activities
activities like schema
schema design normalization
hand query processing
query processing issues
processing issues concern
issues concern design
concern design issues
built a dbms
rewrite the query
usability and un-usability
studied in query
today s topic
typical query processing
process of query
query processing takes
scanning and parsing
query is first
query is divided
divided into stream
stream of tokens
sets of tokens
parsed to build
build a parse
query parse tree
syntactic structure formulated
structure formulated query
tree a logical
plan is generated
rules heuristic rules
generated the logical
optimizes the query
based on rewriting
rewriting the query
generated the physical
directly by dbms
last two sessions
typical building blocks
support all kinds
logical query operations
support some physical
things like sort
scan and index
algorithms that implement
implement the internal
remember the internal
system the external
access algorithm based
divided this algorithms
algorithms and multi
multi parse algorithms
make um atmost
operator an operator
operator that requires
requires the entire
present in order
answer the question
sql or order
required the entire
relation is processed
answering the first
first or outputting
outputting the first
result the entire
single parse algorithms
apply single parse
long as atleast
memory space left
algorithms two pass
two pass algorithm
algorithm the basic
alternating um computation
intermediate storage handling
storage handling phases
block from relation
perform some computation
hashing or indexing
read back intermediate
back intermediate results
results before producing
producing the final
divide two pass
chunk of blocks
blocks is read
read a chunk
hashing each tuples
adding or searching
assume a sorted
tree a sorted
retrieve um retrieve
retrieve a tuple
retrieve tuples based
sorted order based
index based algorithms
based algorithms index
algorithms index based
contrasted from sorting
sorting and hash
extracted on attributes
searched for index
effective for joins
function called zig
zig zag join
efficiently computing joins
first um algorithm
index based method
perform a select
select operation based
select operation involves
involves a condition
index base selection
fairly straight forward
indexes are meant
key is simple
select key equal
index the required
set of tuple
tuple or tuples
tuples in case
case of inequality
equal to ten
retrieve a sub
making another assumption
equality and inequality
inequality condition involves
involves the key
key under constant
index indexing indexed
indexing indexed attribute
set theory algorithms
pattern of set
set base operators
difference are performed
performed using sorting
forward to design
algorithms using index
last um query
algorithms namely joins
joins or natural
perform natural joins
joins using index
join as usual
performed now assume
attribute or set
blocks so read
read r block
component and search
relation s based
start sequentially reading
faster we find
find the set
kind of clustering
find a set
join this tuple
computed the natural
tuple is found
found then perform
join and push
buffer using index
perform another kind
kind of natural
access all keys
calling getnext function
open both relations
iterator or iterators
tuples or matching
tuples or found
join and append
append the output
output to buffer
zig zag fashion
accessing the keys
records or tuples
tuples are stored
stored on disk
quiet an efficient
topic of today
managing the physical
query um plan
plan query plan
query plan languages
perform internal query
internal query answering
answering using physical
logical query plans
query is scanned
scanned and parsed
write a parse
make the query
query um answer
query optimization techniques
techniques are based
rewriting the parse
parse tree representing
representing a relational
form of expression
kinds of optimization
termed as heuristics
optimization and cost
optimization a heuristics
resulting parse tree
original parse tree
heuristics are applied
perform this chossing
chossing by assigning
parse tree incurs
practice a combination
combination of heuristics
chosen for execution
talking about parse
trees and rewriting
rewriting parse trees
trees a parse
context of compliers
compliers or syntactic
structure or tree
structure a tree
data structure represents
represents a hierarchical
tree and execution
post order traversal
sub trees execute
execute the sub
execute the root
rule recursively applies
modify a parse
context of relational
expressed relational algebra
small relational algebra
manager join department
condition is manager
dot d number
manager and department
projecting this set
projecting the department
querying all departments
pay their managers
managers a salary
shows the top
top most operation
query the child
child the select
child of select
expressed the hierarchical
query is made
kinds of checks
project operator project
select are unary
entity checks entity
checks entity checks
checks basically check
weather every relation
query actually exists
department on disk
cases a relations
exist on disk
complier would expand
expand the view
remember a view
view is joined
view name appears
type um compatibility
compatibility between attributes
checks are performed
performed parse trees
trees are rewritten
extent before rewriting
relevant parse trees
dataset um based
first rewrite rule
selects the pushing
push a select
operation as low
altering the symatics
altering the correctness
remember a select
select basically removes
removes certain tuples
relation before returning
whenver we talk
talk about relations
probally giga bytes
bytes of tuples
dataset so select
select based optimizations
selects um based
lakhs from natural
join between manager
managers or join
managers whose salary
lakhs we don
operation is pushed
first we select
tuples where salary
lakhs and join
thousand different manager
fifty manager tuples
related to pushing
select or conjunctive
split and cascaded
progressively start reducing
reducing the certs
illustrates this point
selecting those sets
sets of tuples
condition d holds
relations are searched
conditions are matched
first say select
match the condition
based on index
select um thumb
view is expanded
two relations movie
movie and starsin
attributes the title
movie the director
movie is made
stars um acted
movie was released
two relations title
relations title year
year and language
language are common
view called bengalimovies
star from movie
movie where language
equal to bengali
director in bengali
pair each film
star with director
long as language
movie is bengali
express this query
point of view
starname and director
director from bengalimovies
bengalimovies natural join
natural join starsin
join we perform
join between bengalimovies
bengalimovies and starsin
note that bengali
based on title
join between bengali
movies and starsin
relation bengali movies
expanded the view
view for bengalimovies
basically select language
select language equal
bengali from movie
expanded and starsin
talks about bengali
movies contains tuples
language is field
field is bengali
performing the natural
tuples in starsin
language called bengali
language is bengali
put a select
select those tuples
tuples from starsin
starsin where language
defines the view
tuples of starsin
starsin are selected
joined with tuples
tuples having language
select all tuples
move this selection
rewritten parse tree
two separate select
separate select statements
forms the query
thumb rules involving
rules involving selects
selects some times
join um function
function we perform
make this bring
out this rule
apply this rule
movies database comprising
comprising of movie
starsin and bengali
bengali movie relations
director satyajit ray
ray in bengali
sets of actors
sets of directors
directors under bengali
direction of satyajit
starname from bengalimovies
starsin where select
select director equal
equal to satyajit
operator between bengalimovies
join we select
select for director
joining two relations
move this select
two relations based
factor that language
director field equal
ray we don
move this director
satyajit ray select
perform the previous
previous um optimization
move this language
two different optimizations
kind of thumb
query involves projection
tens of attributes
hundreds of attributes
department project department
notice the output
department the location
conditions here manager
equal to manager
manager dot dnumber
attributes from department
dept department number
manager the age
manager the date
birth employee number
number the address
insert extra projects
output um relation
relation becomes smaller
inserted a project
dnumber and salary
salary before manager
dnumber and department
rewrite um query
query parse trees
trees in order
make them work
optimization a cost
candidate parse trees
rules and generated
assign a cost
costs um cost
components or multiplication
multiplication whatever depending
affect execution cost
candidates that affect
cost say access
storage how costly
storing the intermediate
memory usage cost
memory primary memory
memory or ram
machines and communication
communication um sequences
sequences are required
form this databases
query execution cost
data or meta
estimation and catalogs
catalogs are metadata
table specific metadata
number of tupels
tupels in table
table the size
occupied by table
database wide tools
index specific information
estimate the cost
tuples that exist
field specific attribute
number of distincts
values that attributes
hand other hand
simple cost estimation
cost estimation techniques
shows the estimate
fairly uniform probability
dataset is cude
good enough estimate
simple because suppose
suppose the number
minus one divided
relation satisfy condition
condition d condition
tuples satisfy condition
tuple will match
match c ord
ord is shown
tuple not satisfying
probability of tuple
typically the demorgans
probability of tuples
last um estimate
initially for simplicity
number of values
probability of finding
finding given value
opposite is true
match of max
topic on query
vast and crucial
physical query plans
optimization techniques based
based on pushing
pushing selects cascading
selects cascading selects
selects and pulling
out of views
views and inserting
inserting extra project
extra project operations
kinds of cost
combination with heuristics
relating in order
order to select
plan that brings
processing and database
acid properties atomicity
properties atomicity concurrency
durability in today
today s lecture
system will ensure
simple example shown
account transfer transaction
transfer transaction transfer
transfer of money
money from money
account now thousand
interest payment transaction
performing several transactions
basically a read
essentially to add
add thousand rupees
operations now suffix
suffix here shows
operation so operation
instruction of transaction
basically a write
understand the transaction
two two operation
operations as shown
list of actions
form a set
four are set
set of transaction
constituting the set
set of instructions
instructions constituting transaction
transactions to execute
series of operations
operations as executed
interleavings as shown
constituting a equals
hundred is executed
two is executed
operation is executed
two constitute transaction
two operations constitute
schedule also shown
two are executed
executed as shown
operations are interchanged
schedules produce proper
produce proper consistent
proper consistent results
basically is reading
bank account balance
calculating the interest
write for write
writes are interleaved
view is shown
suddenly we don
increase the throughput
concurrently executed transactions
call this kind
schedules is equivalent
serial that means
reduce the serial
operations are executed
execution before transaction
two started executing
straight forward case
two stated execution
problem of deciding
criterion whereas schedule
schedule is produced
write the data
reading the data
transactions are reading
case is executed
order actually determines
conflicting on data
preserved no matter
preserve that order
order with respect
schedule is reducable
concept of serializibilty
operations are serializable
simple case shown
writing data item
reading data item
two is read
respect to data
two is finished
avoided a non
non serialzable schedule
serialzable schedule shows
operations we lead
lead to inconsistency
inconsistency the database
two can commit
produce a non
non serial serialzable
serial serialzable schedule
shown as dirty
reading the writing
two to execute
arise when transactions
executing first kind
kind of conflict
write read conflict
write conflict shows
decrementing the value
two are operating
two are conflicting
conflicting in terms
modifying the data
case the value
right the value
two also read
decrement as reads
conflict actual value
account is shown
case the writes
leading to non
non serializable schedule
conflict to summarize
give a simple
operation and show
item is read
read by transaction
serilize the operations
ensure that conflicting
operations are serialized
serialized or serial
schedules are produced
produced by transaction
phase locking technique
technique for achieving
achieving conflict serailizability
transaction manager achieves
transaction either completes
committing a transaction
transaction or executed
executed in full
committed in case
case of abort
abort no effect
controls the execution
case it controls
transactions are serilizable
recovery manager recovery
manager recovery manager
manager is responsible
responsible for undoing
undoing the actions
actions of transaction
manger is responsible
ensuring the property
property of atomicity
atomicity all actions
committed transactions survive
survive any kind
kind of hardware
hardware or software
writing the committed
recovery manager ensures
ensures that properties
properties of atomicity
atomicity and durability
involved in ensuring
errors can occur
relate to logical
account itself doesn
errors the transaction
problems of network
problems of system
system failures temporary
failures temporary failure
failure of power
transaction with respect
transactions a simple
press the button
button for withdrawing
withdrawing the money
money the atm
atm stops functioning
stops functioning atm
functioning atm failed
atm failed due
debited the amount
basically system errors
crash system crashes
hard disk failure
failure the disk
system didt perform
maintained a simple
open a file
edit your file
guarantee in terms
terms of state
saving the file
saving the document
save the portion
done we don
don t lose
lose the file
case of database
happen the system
difference between ordinary
ordinary file systems
file systems implemented
implemented by commercial
systems they ensure
properties the safe
transaction the acid
transactions are retained
system a simple
simple volatile storage
storage this dose
dose not survive
survive system crashes
crashes that means
system actually crashes
crashes the storage
storage is lost
lost the storage
storage is volatile
lost the minute
minute the system
talk about non
non volatile storage
storage the system
system actually survives
survives these crashes
system crash occurs
occurs a simple
disk it survives
survives a power
abstraction of maintaining
maintaining replicated copies
copies in multiple
multiple non volatile
volatile storage media
higher diasters occur
achieving the atomicity
atomicity and durab
durab durability properties
back the rolling
previous state transaction
state transaction abort
transaction abort requires
abort requires roll
roll back means
back means undoing
ensure that roll
file the log
log file retains
crashes all active
case where case
logs are maintained
logs are helpful
helpful in ensuring
ensuring the atomicity
case of writing
transactions starts executing
executing and making
begin log transacting
log transacting begin
transacting begin log
basically a relating
transaction is preceded
transaction actually tells
tells the database
manager to write
transaction begin log
commit log indicating
begin and end
calling as roll
transaction is done
transaction is doing
doing is written
writes a data
first one transaction
value old value
value is shown
talking earlier occurs
system will recover
things when writing
writing this logs
transactions are stored
transactions so transaction
records to identify
identify the transactions
logs been produced
logs are replicated
replicated and stored
recover back logs
logs only assuming
made to recover
subjected to failure
assumption we make
make it logs
written we assume
recover this information
ordered okay ordering
log entry relating
write this commit
log this commit
written this log
log entries relating
writing the entries
terms of recovering
recovering back first
back first requirement
writing the commit
data item values
item values pertaining
storage the reason
written the data
properly so logs
manager to find
failure is occurred
transaction then write
order or write
writing their logs
reading certain data
items and writing
writing certain data
reading and writing
items for completeness
shown the4 initial
the4 initial values
two start executing
increment by fifty
fifty then read
hundred then read
decrementing by ten
value is computed
computed by adding
finally the value
reading several data
simultaneously in terms
terms of reads
case this log
value is hundred
ready for commit
log is produced
thing is shown
finally commit log
log is shown
undo all transactions
system crashes occur
modified the values
undone the transaction
start and commit
commit a start
data item entries
log book showing
transaction has completed
case the redo
record is entered
writes the data
database the affect
transactions whose commit
commit log entry
redone in case
commit log exists
redo those transactions
manager will ensure
ensure the transactions
satisfy the property
property of durability
concurrency control properties
manager okay lecture
foundation for concurrency
basics of transaction
transaction processing systems
system we looked
transactions in database
essential for programs
durability atomicity property
property is required
required to ensure
executed the property
property of consistency
database is maintained
malign the values
database the property
transaction the property
transaction is returned
property in durability
property is realized
realized in database
today s class
concurrency control mechanisms
mechanisms in database
concepts of transactions
view of concurrency
call as foundations
control in databases
class is show
show the basic
properties of basic
foundations for concurrency
databases by first
introducing the notion
basically that basic
notion of ensuring
consistency in databases
serilable serializable schedules
produced after understanding
systems that ensure
database or serializable
database transaction system
write a series
first the notion
write the actual
essentially the database
operation which means
read an item
read x shows
read data item
data item read
memory this item
operations that means
means the value
write x write
means that write
back to database
two extra operations
transaction execution commit
execution commit means
operations a transaction
transaction can issue
commit actually means
means essentially discard
store the values
database or discard
schedule essentially consists
consists of read
read operations write
operations write operations
operations a commit
commit and abort
define the schedule
taking a set
system where passengers
book their ticket
travel to delhi
delhi by rajdhani
book his ticket
chennai to delhi
operations simultaneously operating
leaving the database
berth to travel
travel from chennai
transactions are operating
produce consistent results
reads the current
current reservation information
abbreviate as read
give an prefix
done by transaction
rajdhani express availability
cases the passenger
state after reading
reading the availability
booking the final
reasons the passenger
cases the transaction
transaction after started
started would abort
abort the operation
operation of writing
writing this values
system which means
essentially the passenger
interested in booking
booking the berth
basically transaction commits
basically another transaction
radhani express availability
execution of sequence
sequence of operations
database from transaction
som en transactions
executing the read
write operations relating
committing or aborting
aborting the transactions
leaves the database
sequence of instructions
instructions are executed
execution so read
read x read
resulted in reading
result in reading
resulted whatever computations
done and writing
right a value
subtract five form
ten which means
commits which means
two commits value
written as fifteen
notice the affect
transaction are last
transaction also read
writing the values
characterize this consistency
characterize the schedules
schedules in terms
database this requires
executed from start
start to finish
consistent from start
start to end
end is executed
two is concerned
schedule a serial
finishing the earlier
produces a serial
producing correct results
booking for rajdhani
book the reservation
affect the database
enforcing a serial
first important concept
schedule and produce
produce a serial
serial equivalence schedule
schedule but equivalent
notion of equivalence
schedule two schedules
schedules are equivalent
operations will define
point do define
define equivalent schedule
kind of equivalence
call as conflict
conflict serial ability
care other operations
operations and ensure
operations are done
operations in transactions
essentially a write
write operation oaky
give this notion
serializability that means
means you don
means when operations
performed this operations
two for data
two y occurred
two operation occur
longer can infer
serialize the transactions
obeying conflict serializability
give the notion
equivalent the conflicting
schedules which means
fashion on schedule
two conflicting orders
two are equivalent
wont be equivalent
transaction one reads
item which transaction
change the order
worry about order
order of non
non conflicting operations
two as shown
read of transaction
write of transaction
conflict equivalent conflict
terms of equivalence
introduce the notion
deciphering whether schedules
schedules are schedules
decipher produce consistent
produce serial schedule
consistent the simple
operations of tone
execute all operations
doing is consistent
change the operations
long as conflicting
transform a schedule
schedule not serial
executed this conflicting
producing the serializable
schedule because serializable
reduced by swapping
swapping the non-conflicting
effect conflict serializable
conflict serializable schedules
serializable schedules conflict
schedules conflict serializable
serializability is concerned
transactions produce serializable
produce serializable schedule
notion of serializablity
transactions to produce
produce consistent schedules
database is operating
operating okay transactions
passengers keep coming
reserving the tickets
set of schedules
database some operations
database is concerned
continuously this transactions
transactions keep coming
close the schedule
put a break
schedule which means
schedule is concerned
concerned whose operations
means the complete
apply the notion
schedule to produce
apply the equivalence
equivalence this schedule
algorithm which constructs
constructs a graph
system now assume
two actually conflict
appears the operation
two then provide
provide arc showing
conflict is concerned
relationship in terms
terms of conflict
essentially a cycle
graph which means
operations actually terms
graph of forming
forming a cycle
arc is concerned
order second arc
transactions have executed
executed the last
done to show
cycle it shows
schedule the presence
graph is shown
shown to produce
produce non serializable
coming with order
transactions are put
concept is concerned
graph to understand
basically produces serial
produces serial schedule
essentially these protocols
construct the transaction
transaction is put
sequence is concerned
produce a cycle
current transaction graph
operation are concerned
avoid a cycle
cycle from coming
graph to grow
direction it prevents
prevents any cycle
cycle from occurring
don t put
put a backward
protocol to decide
decide to put
made to read
doesn t produce
essentially the concept
graph is constructed
cycle is prevented
prevented from happening
kinds of consistency
requirements an interesting
thing to understand
consistency is concerned
number of debits
debits and credits
unit and credit
execute is consistent
understanding the semantics
right or wrong
database transaction execution
execution is concerned
add some numbers
means i credit
add some number
read is happening
produced the value
relationship is maintained
maintained between transactions
equivalent in terms
appose to conflict
equivalence of schedules
equivalent as appose
conflict operations equivalent
operations equivalent schedules
view equivalent schedules
operations are related
schedules the operations
produced and read
order is changed
equivalent the final
final write operations
producing consistent results
considered as debit
produce correct results
results as appose
enforce connect ness
ness by understanding
semantics of operations
show how semantics
applied for understanding
understanding the consistency
queue as shown
basically an add
condition when adds
adds and deletes
deletes are happing
delete will happen
end now adds
suddenly be concurrent
full the queue
deletes can occur
concurrently because add
manipulate the rear
rear um pointer
manipulating the front
semantics of add
add and delete
two can happen
basically semantics knowing
knowing the semantics
two produce consistent
mechanism for producing
two adds working
lock the rear
pointer and ensure
means the access
access to rear
understanding the operation
transaction and applying
call as semantic
semantic actually means
apply the meaning
operation to decide
level of consistency
criterions by understanding
understanding the meaning
meaning of operations
covered the idea
basically a schedule
produced equivalence schedules
aspects two schedules
schedules are shown
conflict operation point
operation are executed
order is maintained
schedules we call
showed view equivalence
schedule the writes
semantics and based
based on semantics
parallel whatever order
schedule is write
commute the commutative
producing consistent schedules
typically how simple
case of conflict
achieved by constructing
constructing a transaction
graph a transaction
constructed by producing
serializability is achieved
constructing the transaction
protocols various protocols
designed to produce
produce the serializable
schedule the criterion
produce conflict serailizability
discuss a series
produce conflict serializability
set of protocols
protocols we start
locking and show
locking will produce
show other kinds
kinds of protocols
protocols that exploit
exploit the property
graph is concerned
construct they cycle
essentially can divide
divide the protocols
optimistic or pessimistic
constructed for producing
producing serializable schedules
book by burnstien
basically a book
book on concurrency
basic foundation thing
book on fundamentals
fundamentals of database
systems by elmasri
elmasri and sham
foundation on concurrency
doing the protocols
part i foundations
problem of serializability
serializability when transactions
transactions are execution
theory for correct
execution for transactions
serializibilty the conflict
reduce to serialzible
meant by conflict
forms of serializability
serializability like view
specific concurrency control
types of algorithms
serializable that means
means which produce
produce correct execution
two broad classes
control algorithms based
view the system
system some view
system in pessimistic
narrow pass bridge
bridge where vehicles
vehicles are crossing
crossing this bridge
low traffic bridge
bridge we don
vehicles will hit
coming from opposite
high which means
high traffic bridge
assume the possibility
two vehicles finding
finding themselves passing
two two scenario
broadly classify conflicts
low and conflicts
extremely high ace
basically will put
put some kind
bridge that means
put the traffic
bridge and realize
two has passed
basically involves lot
lot of hard
kind of control
control the situation
conflicts are low
optimistic that means
two scenarios optimistic
algorithms that operate
database system assuming
optimistically no vehicles
remove the traffic
madras the gagendra
install a traffic
conflicts are rare
scenario and based
applying this algorithms
classes of algorithms
categorized two classes
lock based algorithms
assume pessimistic scenario
scenario which assume
based algorithms assume
lock based algorithm
phase locking algorithm
two phase algorithm
algorithm in detail
detail and explain
study this algorithm
popular algorithm implemented
implemented in practice
control in database
algorithm the lock
conflict on data
transactions to lock
lock the data
transactions is locked
protects the data
transactions so locking
explain the concepts
familiar in operating
operating systems call
call the mutual
mutual exclusion problem
section the critical
piece of code
address a share
share data structure
section it means
manipulate the share
section for manipulating
shared data structure
sense the mutual
section it excludes
understand in operating
essentially a lock
apply p operation
operation the process
lock the critical
unlock the critical
acquires this lock
operating system context
case of databases
mutually exclusion problem
types of locks
ere different types
introduce read lock
important that means
lock the right
right lock means
right the transaction
data item transaction
transactions can start
reading the item
shared that means
means there wont
transaction can write
abbreviate write lock
means this lock
distinguishing the kind
kind of lock
increase the concurrency
acquires a read
acquire this lock
extra write lock
work was finished
words as appose
distinguish the semantics
write lock based
optimize the concurrency
understand the granularity
algorithms the gradunality
gradunality actually means
transitions only locks
locks a simple
simple um data
table one single
single data item
entire tuple tuple
tuple tuple means
student getting locked
locked that means
entire um table
reduce granularity transactions
transactions only locks
locks that small
start increasing granularity
granularity it starts
locking a large
number of items
increase a granularity
reduce the concurrency
system for transactions
execute on simple
entire iit access
out the lock
access is controlled
room at aty
aty given point
room is locked
amount of concurrency
suddenly should lock
lock as small
keeping the consistent
criteria into account
term two phase
phase locking explains
execution in terms
reach execution points
accessing bank card
bank card database
database as shown
balance data item
lock the entire
reach a point
granted the lock
basically the growing
phase the growing
phase the transaction
move some items
form one place
step before moving
moving the data
room or manipulating
manipulating the items
basically start releasing
transaction is released
condition that enforces
releases the locks
phases the condition
phase protocol works
transaction and understand
consequences of applying
transaction and show
reading an item
writing an item
acquire or read
write an item
work of reading
item x writing
writing a data
item x reading
starts it requests
release this lock
released the lock
two will hold
hold the lock
locking will ensure
two has acquired
acquired a lock
two conflicting transactions
acquired the lock
protocol will work
meaning of acquiring
achieved as part
show a small
proof to show
locking in affect
affect produces serializable
produces serializable order
order of transactions
locking in terms
item is locked
problem of dead
requesting a lock
reach the point
point of lock
transactions can reach
reach their point
reach the lock
release these locks
two to release
algorithms which make
makes the system
transactions to wait
locks the dead
basically bring bring
bring the system
means the system
throughput the number
number of transaction
drastically get effect
dead lock condition
lock condition problems
problems of deadlocks
occurs and make
transaction can proceed
break the dead
aborted to make
proceed so deadlocks
deadlocks needs detection
resolving this deadlock
system can proceed
algorithm two phase
algorithm also doesn
produce optimal schedules
ensures two phases
two phases locking
phases locking ensures
transaction always proceeds
grants a lock
aborts the transaction
resolve the deadlocks
resolve the conflicts
sense optimal schedules
locking we area
stamping produces optimal
produces optimal schedules
optimal schedules compare
algorithm i explain
explain this concept
system in affect
creating this graph
graph which shows
transaction have executed
put a arc
operating on common
item with respect
transaction which arrived
understand this problem
schedules optimal schedules
read a pre
write y happening
reading y writing
modified the value
two to read
value before modification
read a modified
happening more advanced
graph in effect
colors here denote
locks five kinds
acquiring a read
lock a write
kinds of lock
read or data
transactions data items
transaction to acquire
graphs to grow
produces more optimal
locking is presence
presence of long
long live transactions
long live transaction
annual um interest
account is calculated
long time normal
normal transactions run
milliseconds this runs
data items acquires
items acquires locks
property two large
two large number
affect introduces lot
blocks a large
number of short
case short live
short live transactions
live transactions short
transactions short transactions
problems of execution
transactions the performance
drastically get effected
effected they wont
execute the response
lot of protocols
protocols which modify
strictly two phase
locking they modify
phase locking condition
making long live
live transactions execute
out a papers
algorithms a host
understand by commit
protocol and concurrency
transaction begins execution
transaction is modified
point the values
inter relation ship
ship between concurrency
concurrency and commit
modifies the values
place where transaction
modifying the values
values okay transaction
visible the modifications
modifications are visible
interaction between concurrency
concurrent control algorithms
difficulties in terms
commit protocols works
two pl algorithm
algorithm gets integrated
protocol gets integrated
basically the end
transaction is reached
case of data
finished and releases
release right lock
item x remember
allowing the transactions
transactions to release
commit protocols start
protocols start operating
applied the concurrency
releases this lock
item is visible
effectively can acquire
lock any transaction
acquiring the lock
two should read
commit protocol issues
issues an abort
result in cascading
modified a value
read this modified
apply the transactions
phase locking algorithms
locking algorithms taking
account to avoid
avoid cascading aborts
aborts will require
transactions actually acquiring
effectively will release
release their locks
key point holding
commit that means
means they write
write their values
values whatever values
write these values
logs the logs
released before committing
transaction affectively starts
affectively starts holding
starts holding starts
holding starts holding
holding the logs
point this ensures
integrating the concurrency
protocols will require
basically produce consistent
isolation isolation means
talking about durability
durability this durability
basically the concurrency
concurrency control aspects
protocols are coming
place between concurrency
ensuring that properties
stamping protocols ensure
protocols ensure commit
ensure commit protocols
commit protocols integrate
commit and concurrency
control protocols integrate
typically the atomicity
properties and durability
typically the logs
maintained to make
transaction can redo
redo or undo
undo its actions
protocols together ensure
transaction acid properties
properties are realized
give you complete
basically the applications
modify the database
case the dbms
manager is part
applications are executing
executing they serializiblity
give an idea
putting a lock
requesting a read
grant this request
request or disallow
disallow this request
transactions in effect
effect will make
make the request
manager the transaction
student record table
basically um requested
requests are coordinated
holds what lock
properly co coordinated
released the transaction
transaction manager ensures
control protocols work
minutes is sum
producing more optimal
protocols in affect
read x write
kind of execution
phase locking ensures
two from start
finished which means
case is read
working on data
item one data
set of problems
happen first thing
sacrifice isolation property
optimize the execution
transactions i thing
case study oracle
oracle & microsoft
access dr s.srinath
microsoft access dbms
shipped with microsoft
microsoft office suite
session we talked
talked about mysql
source or free
firstly the oracle
version of oracle
oracle is manufactured
manufactured by oracle
oracle corporation headed
pretty early player
field of commercial
commercial database management
versions of oracle
today is oracle
stands for data
larger data grid
grid and operate
single data source
warehousing and business
business intelligence kinds
kinds of applications
talking about oracle
noted earlier oracle
invented and evolved
academic and research
systems a similar
kinds of terminologies
evolutions have happened
class might differ
commercial um database
lot of sense
kinds of terminology
system the oracle
oracle server server
engine that serves
stored data including
data including log
including log files
files and control
set of processes
processes including oracle
including oracle system
oracle system processes
oracle server runs
runs and user
user processes created
kinds of languages
languages do oracle
support does oracle
oracle support oracle
supports the ansi
ansi sql standard
specific to oracle
ansi sql oracle
procedural query language
top of sql
sense a pure
pure query language
kinds of variables
variables by aliasing
generally it doesn
kinds of language
complete procedural language
define control flow
constructs and looping
embed sql statement
structure in oracle
kinds of structures
dbms the physical
physical structure refers
logical structure corresponds
oracle is maintaining
mange s data
oracle manages data
larger logical structure
structure and update
rules and associations
basically stores data
lets say mysql
buffer management policies
policies for writing
data into files
meant by buffer
dbms like mysql
taking a unix
unix based implementation
implementation or linux
linux based implementation
mysql and oracle
high level system
level system calls
calls for writing
data into disk
disk that means
means high level
level system call
operating system kernel
kernel and lets
lets the kernel
kernel take care
care of writing
writing the data
process it doesn
write your data
block onto disk
affect dbms operations
talking about database
database recovery processes
suddenly a system
write has returned
committed that committed
committed some transaction
oracle uses low
low level system
calls that means
means oracle manages
cache and oracle
flush the buffer
write to files
file system interface
files that oracle
files are updated
updated in oracle
maintaining its databases
firstly the data
files that act
files a databases
set of redo
redo log files
log files remember
files a redo
redo log file
redo based recovery
first write data
flushing the log
redo based starting
maintains the set
files as part
part of database
set of control
kinds of control
recovery some times
addition to control
files and alert
alert logs trace
logs trace files
track certain background
oracles oracle runs
oracle runs oracle
oracle basically runs
triggers or enable
files essentially track
files and logs
alert logs maintains
recovery therefore oracle
oracle also supports
write a log
parallel to multiple
back up copies
actual um devices
devices to recover
process is increased
logical database organization
files every thing
file is managed
system call operation
files um means
kinds of objects
objects a schema
definitions of definitions
definitions of tables
definitions of views
views or sequences
sequences or stored
procedures um indexes
object orientation methodology
procedures or methods
set of services
services um based
schema object represents
access or perform
perform different kinds
kinds of table
table accesses access
access a table
table row wise
row wise access
perform any perform
perform any index
search on table
essentially the system
maintains different kinds
kinds of cataloging
information like user
kinds of privileges
object and information
information about schema
object then integrity
trigger certain schema
kinds of statistics
statistics um statistics
performing good query
role of cataloging
process a query
optimize a query
query cataloging information
rows is accessed
forming a good
making the query
physical storage structures
space is organized
manages the pages
database so earlier
earlier we mentioned
mentioned the concept
entire oracle system
comprises one instance
system global area
give an analogy
analogy to operating
sense the kernel
oracle um system
database buffer cache
maintained by oracle
order to flush
buffers are flushed
redo log buffer
log is returned
turn is flushed
addition to user
program global area
area in contrast
area a program
data and control
database in addition
oracle itself runs
runs several processes
comprises the server
processes may comprise
server processes depending
single threaded server
processes like audit
belong to oracle
sense um leaves
out a lot
lot of things
form the oracle
turn which interact
oracle server processes
possibly other processes
arrow is correct
server processes deal
detail oracle processes
processes server processes
request from user
sql um queries
kinds of ways
configure your oracle
server and dedicated
handle one client
server is concurrent
handle many client
spawning different threads
doesn t support
addition to server
perform these asynchronous
processes essentially perform
delayed write operation
background process wakes
background processes wakes
give a read
data is read
relevant data blocks
blocks are read
process is awakened
performance um considerations
main um requirement
performance and reliability
kinds of background
good to distinguish
database writer process
process that writes
writes the buffer
log writer background
writer background process
log buffer cache
log flushing process
check point background
point background process
process a check
sessions on recovery
recovery based techniques
buffers are returned
data about transactions
check pointing process
pointing process versus
store in order
order to perf
perform a recovery
sessions on database
database recovery check
recovery check pointing
bring the database
performing a check
obviate this problem
stop all database
operation when taking
system had crashed
performs redo based
redo based log
based log recovery
manages storage areas
manages any kinds
kinds of recovers
process monitor background
monitor background process
process it performs
performs a recovery
user process fails
process fails note
leave the database
transaction data return
directly onto disk
fails to complete
complete the transaction
inconsisten inconsistent state
archives the online
online log files
back up purposes
mechanisms of archival
database recovery techniques
recover recoverer processes
distributed database setting
issues when database
database is distributed
processes like dispatchers
dispatchers and lock
dispatchers in multithreaded
sense again monitors
monitors the locks
runs in parallel
parallel server mode
sql in oracle
oracle what kinds
statements are handled
earlier oracle supports
oracle supports ansi
supports ansi sql
sql in addition
addition to ansi
extension to sql
user to embed
statement into procedural
procedural um language
support for sql
concerned oracle supports
supports all kinds
standards data definition
data definition statements
statements and data
data manipulation statements
supports transactional semantics
semantics um full
constructs like session
session control semantics
embedded sql statements
statements in addition
addition to support
elaborate um mechanism
mechanism for methods
methods and triggers
utilities where added
added to oracle
oracle as part
object relational extension
extension so oracle
object relational database
constitutes an object
object oriented semantics
semantics like method
method calls triggers
triggers and triggers
kinds of method
user defined data
defined data type
user program invokes
invokes the method
method by referring
statements um independent
procedures and oracle
methods have access
access to attributes
table a method
primary key field
stored procedure concept
concept because stored
programs or sql
constructs while methods
methods are visible
visible to user
object relational context
pure relational context
context and triggers
active rule capability
response to events
events and conditions
earlier that storage
storage is managed
space now table
manages the physical
organization or physical
memory or disk
databases is divide
system table space
user table spaces
essentially all data
user table space
table space maintains
space maintains data
accessible by user
programs and data
unique system table
labeled as system
data dictionary objects
wide or information
information are stored
space or managed
table space manages
storage the physical
kind of kinds
extents and segments
segments a data
level of granularity
disk accepts data
disks accept data
disks with enhanced
write multiple contiguous
multiple contiguous sectors
multiple contiguous sector
contiguous sector forms
forms one data
extent the term
number of contiguous
contiguous data blocks
set of segments
specific data structure
segment so data
detail a data
block is stored
header and table
table directory information
information which talks
table it belong
row directory information
free space information
free space left
table oracle allocates
allocates an extent
extents are added
extents become full
extents are managed
managed by segment
extents and extents
tables or indexes
allocate an index
index the extent
extent remains allocated
index is deleted
collection of extent
termed as data
segments and index
segments and data
data segments belongs
non cluster table
earlier a cluster
collection of machines
machine and part
segment is allocated
allocated and index
create index command
allocate a index
temporary work areas
store intermediate results
data for virtual
oracle um servers
processes or application
support or embedded
embedded sql support
support is provided
languages like cobol
cobol c pascal
plane vennila sql
earlier provides procedural
declaration part executable
part executable part
typical procedural language
characteristics or functions
set of statements
set of executions
exception part written
condition then send
send this sql
statement else send
exception part handles
part handles error
handles error conditions
exception is raised
user defined errors
popular commercial database
version 10g supports
10g supports data
supports data grids
part of oracle
oracle and oracle
oracle actually supports
supports object relational
object relational databases
relational databases spatial
databases spatial databases
database of sequences
stored in oracle
pure relational database
supports procedural constructs
constructs over sql
write control flow
control flow constructs
oracle supports transactions
transactions and log
microsoft access microsoft
access microsoft access
included microsoft access
access as part
kind of tailor
made for ease
non technical user
performed using graphical
database like oracle
graphical user interface
user interface based
interface based mechanism
data definition data
definition data manipulation
queries and reporting
graphical user interfaces
database using basic
native data type
generally not supported
treat a url
microsoft access database
database all data
application are stored
single file call
suffix called dot
access these mdb
open database connectivity
database connectivity mechanisms
talked about odbc
single common interface
support for data
validation and concurrency
control using logs
amount of query
optimization what kinds
kinds of guis
table um formatting
layout any kinds
kinds of masks
masks which talks
talks about invalid
inputs and validation
validation rules default
rules default values
default values data
values data types
data types index
types index structures
guis for defining
defining foreign key
foreign key relationships
inference of relationships
automatically ms access
access would infer
foreign key relationship
fields then queries
interface or query
build your query
query as part
change your query
drag and drop
operations between tables
deletion of attributes
tables using drag
query um reports
access database doesn
query and leave
reporting um mechanisms
underlying database tables
report generation wizards
cross tab queries
column and aggregating
perform the group
ole objects ole
linking and embedding
power point presentation
user level security
level security based
based on login
login and password
performs multi user
supports multi user
multi user operations
operations and concurrent
non technical end
technical end user
oracle or mysql
larger commercial database
commercial database system
office um suite
suite of packages
queries or reporting
support for graphical
graphical query specification
data source names
compatible with odbc
access ms access
access other odbc
odbc comply databases
comply databases oracle
widely available databases
databases are odbc
linked or embedded
word or excel
excel or power
typical ms access
access or working
start a database
fill up cer
shot here shows
shows an actual
two different forms
table called mailing
table called assets
database the last
last screen shot
query by interface
formulating the query
four different tables
clicked or unclicked
formulate the query
mining and knowledge
discovery dr s.srinath
discovery in fact
fact in recent
recent years data
years data mining
fields that eliciting
extremely large number
large number amount
utility of data
interest that lies
lies in data
addition to commercial
commercial um interest
number of public
mining has started
started which range
range from topics
topics like legalities
rights to non
disclosure of information
rights to privacy
opened a pan
door as box
sense completely beneficial
beneficial or destructive
destructive about technology
algorithms and concepts
make up data
traditional um traditional
operations of databases
databases or traditional
basic underlying concepts
concepts in data
data mining concepts
data mining algorithms
start with tabular
mining relational tables
classification and clustering
data like sequence
sequence data mining
mining or mining
mining of streaming
data warehousing concepts
managerial perspective lets
invest in data
encounter a variety
variety of answers
nuggets of knowledge
understand some thing
term wealth generation
understanding or making
making the right
increase my financial
mining for analyzing
analyzing trends analyzing
behave or analyzing
market is behaving
recently data mining
extensively for security
purposes especially mining
mining network logs
logs or network
network streaming data
data in order
abnormal behavioral patterns
potentially um link
link to abnormal
important application area
data or hidden
pattern in trends
trends in data
summarizing the data
relation between subject
badly in subject
aggregating the data
out these aggregations
performing in subject
performing a data
data mining query
query in fact
things so vague
vague so data
correlation between performances
performances in subject
kinds of trends
data to begin
type of patterns
two further questions
type of data
type of interestingness
form of set
slightly different multi
multi dimensional form
form of database
kind of transaction
data array coming
tabular in nature
form of data
source of data
addition to tabular
points or regions
point in addition
coordinates and mining
context also requires
system in addition
addition to spatial
temporal data temporal
data temporal data
network um forms
forms streaming data
allocated some kind
database activity log
spatio temporal data
data like tree
databases or graph
bio molecular data
big graph data
data about genes
genes and dnas
kind of temporal
sequence then text
data the arbitrary
text or multi
extract or mine
mine for unknown
talk about interestingness
interesting if cer
cer certain pattern
pattern of events
patterns of data
data keep occurring
based similarly rarity
system or abnormal
behavior of network
interestingness pattern correlation
interesting or length
length of occurrence
case of sequence
sequence or temporal
occurrence um consistency
bank every month
frequently um banking
coming many times
times a month
consistency in behavior
arbitrarily ten times
times the first
month and fifty
terms of consistency
frequent then repeating
repeating or periodicity
similar to consistency
set of months
divided our database
database into months
months but periodicity
consistent pattern anal
pattern anal analysis
occurrence of events
patterns of interestingness
contention that data
answer is true
concepts from statistics
data mining software
software uses statistical
kinds of statistical
difference between statistical
data mining versus
mining versus statistical
versus statistical inference
talk about statistical
inference um statistical
inference in techniques
inference we start
perform a hypothesis
system in concern
make a hypothesis
exams are held
month of march
month of june
system now sampling
important um step
statistical inferencing process
amount of literature
meant by correct
prove or refute
refute or hypothesis
show a proof
hypothesis is true
true because statistical
performing a statistical
inference about user
kind of market
hypothesis or based
set of questioner
refute the hypothesis
hypothesis but data
completely different process
huge data set
hypothesis we don
notions of interestingness
mine this data
data mining algorithm
question of sampling
present an algorithm
algorithm data mining
out certain patterns
patterns which form
forming a hypothesis
discover complete hypothesis
formulate a hypothesis
process of statistical
two fundamental concepts
apriori based algorithms
associations and items
wins in cricket
sales of sweets
cricket then sales
predicate that sales
conclusively say based
based on analyzing
analyzing the data
cricket the sales
india has won
won in cricket
interesting item set
set of item
people buying school
buying school uniforms
uniforms in june
june also buy
buy school bags
buying school bags
bags in june
buy school uniforms
uniforms and school
set of items
concept of support
support and confidence
sense of frequent
rule is high
illustrate the notion
notion of support
rule ok suppose
rule is suppose
percentage of confidence
consumer has bought
bought a bag
bag a uniform
set of crayons
books and bag
bag and uniform
bought bag uniform
uniform and pencil
item set bag
uniform ok bag
bag comma uniform
uniform and bag
total of ten
support for bag
supports the assertion
assertion that bag
fifty percent support
rule if bag
bag then uniform
buys a bag
transactions or rows
uniform bag occurs
occurs so bag
uniform have occurred
sixty two percent
percent that means
percent of confidence
confidence or sixty
sixty two point
point five percentage
uniform a school
interesting item sets
interesting association tools
talk about association
talk about item
single item set
two different elements
set a single
single element item
element item set
item set uniform
item set crayons
uniform and crayons
size one size
size two size
size three size
frequently as part
frequent item sets
manner the simple
idea behind apriori
lot of detail
easier to explain
set is frequent
discover the set
sets of size
two frequent item
combinations of set
process of apriori
previous consumer database
buying several school
utilities like bags
bags and school
uniforms and crayons
crayons and pencils
pencils and books
suppose we set
apriori algo miner
occurrence now frequency
support is point
interesting one element
element item sets
item sets occur
rate of thirty
sets which occur
bag uniform crayons
uniform crayons pencil
pencil and books
books bag occurs
uniform also occurs
crayons also occur
elements here occur
support of thirty
interesting two element
two element item
build the set
bag uniform bag
uniform bag crayons
bag crayons bag
crayons bag pencil
bag pencil bag
pencil bag books
bag books uniform
books uniform crayons
uniform crayons uniform
crayons uniform pencil
uniform pencil uniform
pencil uniform books
times they occur
support of point
pencil and bag
bag are interesting
uniform and books
doesn t occur
uniform and book
book occur uniform
pencil and uniform
uniform so uniform
pencil is agai
generate the set
candidate three element
sets um perform
perform a union
sets to create
distinct three element
visualize the apriori
start getting smaller
smaller um numbers
large item sets
iteration or results
element one lesser
iteration in order
order to construct
easier to understand
minimum required support
sets of sizes
higher um greater
done by first
generating a candidate
loop is repeated
item set size
set size reaches
reaches the maximum
property of item
basically consider item
item set bags
set bags uniforms
market um vendor
direction of association
sense of direction
association rule mining
rule mining requires
two different threshold
threshold the minimum
rule is interesting
mine association rules
rules using apriori
mine um apriori
algorithm and generate
generated the frequent
frequent item set
minimum support threshold
threshold of thirty
uniform then crayons
bag and crayons
crayons then uniform
customer also buys
customer has bought
buy a set
buy a school
uniform and crayon
buys a school
order to calculate
calculate the confidence
entries where customer
bought a school
customer also buy
thirty seven point
set of school
point six point
confidence is point
whichever the rules
discovered every rule
bag if bag
uniform uniform crayons
crayons then bag
english it means
people who buy
crayons implies uniform
buys a set
seventy five percent
question of direct
interested in crayons
mining association rules
association rules simple
simple um mechanism
mechanism for mining
rules is first
generate different item
divide each item
hand side part
antecedent and precedent
represents a rule
form lhs implies
lhs implies rhs
rule is support
support of lhs
entire thing divided
implies rhs div
rhs div divided
divided by support
discard all rules
rules whose confidence
data for association
item set mining
relational data set
data set relational
set relational database
store is buying
set this data
records of variable
two different items
ten different items
items and fourth
represent this item
lengths in fact
books and crayons
order this based
set of bill
make a difference
performing group bys
fields will yield
kinds of behavior
behavior um data
perform a group
group by based
suppose we perform
group will represent
represent the behavior
bill number represents
suppose we group
based on bill
group by grouped
ordered the data
show aggregate behavior
show you aggregated
includes the set
beginning data mining
interesting um sub
elucidated a lot
lot of interest
security perspective commerce
government uses data
people and find
pros and cons
spond um spond
spond a huge
areas and data
field of databases
sense that data
relays on database
database um concepts
concepts like learning
theory or statistical
concepts in order
perform data mine
mine so don
process of discovery
previously unknown patterns
nugget of knowledge
learn as part
data mining process
opposite of statistical
refute or prove
prove or hypothesis
hypothesis by sampling
sampling statistical sampling
don t start
dan data mining
formulating a hypothesis
notion of association
rules and item
concepts of support
two different algorithms
algorithms the apriori
mining frequent item
algorithm for mining
session on data
mining & knowledge
knowledge discovery part
session in data
concept of data
sets and association
discover particular patterns
start um distilling
data mining activities
discovering classification trees
mining sequence data
data the data
stream data mining
patterns its ess
data mining setting
frequency or consistency
consistency or rarity
criteria like frequencies
parameterized by support
confidence for association
tabular data spatial
data spatial data
spatial data temporal
temporal data tree
data tree data
tree data graph
data graph data
specifically at sequence
mining streaming data
talk of frequency
interesting or rare
concept of classification
discovering classification tree
tree and discovering
difference between classification
observe closely classification
closely classification maps
classification maps data
maps data elements
set of pre
pre determine classes
determine classes based
differences between data
hand clustering groups
clustering groups data
groups data elements
based on similarity
similarity between elements
times in clustering
clustering we don
clustering process begins
mining with rela
relation to classification
idea of discovering
meant by discovering
classification um discovering
discovering a decision
classify data sets
discovering this cla
discover a classification
last several years
city is notorious
past several times
temperature was thirty
thirty degrees play
play was continued
temperature was fifteen
fifteen degrees play
degrees play wasn
wasn t continued
sunny and temperature
temperature was sixteen
sixteen degrees play
play was discontinued
classify weather conditions
two classification classes
criteria when play
algorithm called hunt
hunt s method
identification of decision
identify a decision
identifying decision tree
perform a hand
chilly and pleasant
temperature was warm
temperature was pleasant
set of temperatures
fields here outlook
outlook and temperature
affect the decision
affects the decision
outlook was sunny
match was played
cases cricket match
weather is sunny
temperature is warm
conclude that play
play will continue
cloudy here play
didn t play
didn t played
remove the first
remove this rule
remove this bivalence
remove this uncertainty
case the uncertainty
similarly for overcast
cloudy and warm
case here play
removed the bivalency
warm um play
bivalency is removed
outlook is cloudy
cloudy and pleasant
pleasant ok cloudy
case here cloudy
temperature is pleasant
overcast and warm
warm decide remains
abandon similarly overcast
overcast and pleasant
removed this bivalency
cloudy and overcast
conditions um play
thing for overcast
continued or discontinued
outlook is sunny
data set tells
uncertainty is removed
two different classes
continued or play
algorithm little bit
suppose the suppose
progressively adding element
decide ok identify
identify the set
class that means
remove that item
set from subsequent
reach a conclusive
methods to deal
kind of fuzzy
outlook is overcast
overcast and temperature
probability of ninety
meant by clustering
differ from classification
classification is based
based on amplifying
amplifying the differences
make them belong
clustering is based
amplifying the similarities
similarities between elements
clustering essentially partitions
partitions the data
essentially the property
similarity among members
projecting these data
kind of euclidian
kinds of distance
measures like manhattan
compute the similarity
nearest neighbor clustering
neighbor clustering algorithm
clustering algorithm takes
takes a parameter
minimum um distance
exist between elements
set of clusters
find the nearest
create another cluster
suppose the nearest
distance to nearest
neighbor is greater
greater than threshold
cluster and increment
increment the number
number of clusters
clusters else assign
basically start partitioning
clusters um based
join the cluster
iterative partitional clustering
nearest neighbor technique
neighbor clustering techniques
techniques the number
apriori that means
rearrange the clusters
centroid that means
features the average
dimensions will form
form the centroid
closest cluster center
compute the cluster
shift the centroid
centroid is shifted
nearest cluster center
centroids will stop
found the exact
clusters so iterative
ten different clusters
neighbor clustering technique
set and suppose
iterative clustering algorithm
kind of multi
multi dimensional data
dimensional data tabular
data tabular data
treated as multi
data into multi
infer classification trees
term sequence sequence
essentially a collection
sequence each item
element each element
sequence it means
sequence of length
kinds of sequence
kind of web
browsing um logs
logs um http
logs or dna
kinds of events
sequence a sequence
essentially a list
sets of finite
sequence the first
pencil pen ink
ink or pen
pen pencil ink
element is eraser
element is ruler
denoting the purchases
purchases of single
month and purchase
month you purchase
order of items
order of item
sets itself matters
item set matters
position of items
item set doesn
doesn t matters
ink or ink
pencil it doesn
term sub sequence
item sets deleted
sequence s prime
prime is set
two subset equal
sequence pen pencil
pencil and ruler
pencil is contained
create this sub
sub sequence pen
subsequence then ruler
apriori gen algorithm
apriori all algorithm
applied for sequence
algorithm for sequences
algorithm for item
interesting one sequences
simply the set
question here lies
candidate generation algorithm
generate all candidate
simply by concatenating
concatenating all sequences
found while generating
data set denotes
element can repeat
requested three times
order to mind
interesting sub sequences
set a min
minsub as point
percent of support
candidate two sequences
candidates two sequences
sequences have minimum
point five right
set of interesting
interesting two sequences
candidate three sequences
sequences we concatenate
interesting three sequences
kind of interesting
page numb page
model the behavior
possibly other strings
machine the simplest
kind of machine
deterministic finite automate
finite state machine
considerations or practical
model representing user
representing user behavior
set of input
machine that recognizes
recognizes this class
class of input
infer the grammar
problem in language
tricky um trickiest
occurs in language
four strings abc
strings abc aabc
abc aabc aabbc
aabbc aa abbc
create a state
accepts these fours
abc and aabbc
write a machine
state which leads
accepts all strings
general state machine
specific state machine
machine that accepts
find the right
kind of generalization
make some thing
discover a model
shortest run generalization
based on behaviors
shortest run technique
run generalization works
works is shown
build a state
accepts only aabcb
encounter the string
machine should accept
means that start
aabcb or aac
haven t generalize
prefix of string
aabc this state
merge these end
states um note
performed a specific
specific particular generalization
recognize this machine
machine recognizes aabc
aabc b star
including zero number
state machine generalize
perform this generalization
set of sequences
session namely streaming
streaming data streaming
data streaming data
data mining community
data or mining
mining on streaming
characteristic of streaming
understand by streaming
streaming audio streaming
audio streaming video
streaming video network
video network traffic
essentially um large
large data sequences
sequences possibly infinite
possibly infinite data
infinite data sequences
sequences in practice
store the entire
mining the file
examples are stock
stock market quotes
quotes or streaming
audio or video
video or network
mine streaming data
query streaming data
data is standing
set in order
streaming data set
query keeps returning
returning you answers
write some standing
find some aggregate
aggregate behaviors based
simple standing queries
queries um computing
computing the running
calculate the average
maintain two variables
number of numbers
compute n times
number of number
generate the sum
basically the sum
sum here add
number and divide
set of numbers
increment your set
write a running
query that computes
computes the running
compute standard deviation
element x compute
minus x bar
number minus average
compute the sigma
compute the sum
compute the running
carefully ok variance
equal to sigma
sigma of number
average whole square
number square minus
two time number
number times average
maintain certain variables
read a number
square the number
maintain the number
maintain two times
two times number
times number star
number star average
two times average
sigma of numbers
maintain the square
maintain the average
calculate the running
places and compute
stock market giving
stock is changing
easily calculate standard
calculate standard deviation
computing the square
running um variance
number first compute
square b equal
times average star
square and variance
suppose an event
stock market crashes
interesting that event
idea behind gamma
form of frames
frame um comprises
support based interestingness
divided by number
number of elements
elements in frame
events have sustained
kind of beaker
kind of support
small hole underneath
recent the event
sustained the support
higher the level
calculate the level
put a threshold
level are higher
crashed the surface
discovery from databases
kind of scratch
breadth first fashion
data mining problems
classification or clustering
inference and streaming
object oriented databases
understand data management
management in terms
topics in database
database or databases
set of rows
kind of generalize
accept this assumption
management um requirements
requirements where data
fact object oriented
relational model database
nice little mathematical
model that describes
describes the complete
complete data model
entire data model
nice theoretical framework
reason why object
contraries also true
applications mainly cad
cad application computer
application computer aided
computer aided design
circuits or mechanical
mechanical circuit mechanical
talking about object
databases we kind
design um scenario
perform electronic design
design or electrical
electronic design comprises
capacitor a resistor
resistor a transistor
databases are suitable
kind of complex
complex data objects
kinds of models
term multimedia databases
multimedia databases databases
store multimedia objects
encountered several kinds
kinds of multimedia
based um operating
objects like menus
menus scroll bars
scroll bars drawing
bars drawing areas
sound that appears
events specific kinds
sound and light
typical cad application
application for electronic
electronic design comprise
application the user
select a pcb
pcb a printed
printed circuit board
board or select
select a resistor
source and control
control sou grounds
grounds and current
applications are made
objects which form
form the building
applications are built
menus or scroll
similarly cad applications
applications or cad
projects and cad
fundamental objects cad
objects cad projects
amenable to reduction
set of characteristics
idea of behavior
pnp or npn
describing the attributes
transistor in addition
kind of behavior
pins and measure
measure the voltage
represent a set
transistors um belonging
overview of object
object orientation concepts
concepts um object
object oriented programming
oriented programming point
view object oriented
idea of object
oopls or object
oriented programming languages
object oriented database
oriented database systems
fundamental building block
object oriented system
represents an instance
object can belong
define specific classes
classes of objects
instantiate different objects
objects of specific
define a class
class of objects
objects called cars
instantiate an object
provide an abstraction
object of type
car is created
created it represents
represents an abstraction
abstraction called car
car is suppose
properties in terms
menu should provide
provide a list
list of items
emulates an abstraction
notion of encapsulation
object encapsulates structure
structure and behavior
object is defined
attributes which define
define the structure
set of methods
methods or function
variables which define
define the behavior
external world entities
entities should interact
interface by calling
calling particular methods
analogy a car
driving a car
interface so interface
user is concerned
concerned the interface
learn to drive
drive a car
handle the steering
handle the break
break and clutch
clutch and gear
handle the interface
interface is made
object and methods
method has requires
forms the signature
method and attributes
set of variables
define the state
gear the car
call would change
influence the attributes
object and object
basically you define
define um set
pertaining to object
external world entity
world entity invokes
pass the message
message in turn
concepts of object
define a generalization
generalization specialization relationship
class um represents
represents a general
class is required
safe to substitute
class called class
sports utility vehicles
classes of suvs
kinds of suvs
constitutes a correct
correct generalization specialization
inherited um properties
kind of transistor
giving different kinds
kinds of behaviors
notion of polymorphism
signature um method
method signature giving
signature giving rise
feature that present
object oriented languages
perform different classes
int comma int
out an integer
defined as int
int comma float
float or float
float comma int
int or float
float comma float
add different combinations
combinations of integer
integer and floating
numbers and return
message passing framework
determine which kind
kind of add
pure object oriented
integer every integer
fundamental data types
hybrid object oriented
termed as semi
semi object oriented
perform both object
orientation and procedural
orientation as pertaining
pertaining to databases
concept of object
talk about databases
databases the main
required for databases
notion of persistence
object or persistent
object a persistent
objects can exist
object has finished
finished that means
means the object
back from disk
disk whenever required
storing persistent objects
identify each persistent
discussed in relational
relational database systems
versus a primary
primary key object
key object identifier
object is added
user who specifies
specifies what forms
forms the primary
pure relational algebra
algebra each tuple
entire tuple form
form a primary
table however object
separate um separate
attributes are concerned
two different objects
two different transistors
input or output
default an object
bag of objects
necessarily uniquely identify
identify an object
require an oid
objects are stored
stored in databases
correspond in direct
correspondence to real
real world objects
store an object
object like transistor
transistor or capacitor
capacitor or pcb
attributes that define
define an object
alter the state
attributes are defined
object is instantiated
programming languages objects
objects are defined
methods have signatures
reuse of objects
specialized class reuses
reuses certain properties
inherits certain properties
kind of reuse
integrity in object
suppose an object
object a refers
putting the oid
oid of object
attribute of object
enforced by ensuring
object identity aspect
oriented database system
system generated unique
generated unique identifier
creates um unique
unique object identifiers
advisable to base
database is migrated
tree is changed
object is characterized
object in terms
sense the structure
defines the state
kinds of state
triple um comprising
type of type
type of value
object databases define
define different kinds
kinds of type
constructors like atom
atom and tuple
tuple set lists
set lists bags
lists bags arrays
defines a specific
specific atomic value
give a value
represents an atomic
represent a tuple
value a tuple
represents a list
list of values
values an ordered
list of atomic
values unordered collection
collection of distinct
list is similar
tuple the size
size is fixed
fixed the size
tuple is fixed
sequence of values
set with repetitions
atom object state
domain of basic
object is chennai
chennai that means
means this object
object essentially stores
stores an atomic
entity called chennai
value called thirty
class called place
represents an object
two um represents
two which belong
class called num
represent specific atomic
specific atomic entities
collection of atomic
start composing objects
kinds of associations
associations between objects
kind of association
containment or inheritance
doesn t necess
two whose states
represent one atomic
value whose value
value is thirty
type called num
value called twenty
oid which determines
provide different mechanisms
mechanisms for defining
defining um custom
types or custom
kind of pseudo
object database systems
user can define
defines an object
type employee comprising
last name salary
forms the tuple
nested um declaration
comprising of department
number and manager
employee and start
ways of doing
defining a set
attributes however object
database is differ
factor from relational
defining a type
set of behaviors
importance of behavior
systems now object
interface each class
kinds of behavioral
provide inputs logic
inputs logic inputs
sets of pins
implements and gates
basically provide logical
provide logical inputs
probe an input
talking about attributes
pure object orientation
world can access
access an object
attributes are visible
set of interfaces
declarations are provided
language or method
standard programming language
existing object oriented
oriented programming language
language in order
define a method
defining a method
methods in addition
addition to attributes
define a define
class called department
classes certain attributes
tuple of attributes
department number manager
tuple and projects
define like number
method which returns
returns a integer
external world calls
calls this method
method an integer
integer is returned
similarly create department
creates and instantiates
put some default
attributes and assign
add an employee
operations are defined
defined in addition
level the object
object database system
notion of oids
unique oid object
object id identifier
oids completely hidden
user or application
instantiated and stored
application program refers
kinds of mechanisms
kind of mechanism
mechanism the application
objects are referenced
notion of reachability
difficult to give
give a unique
hundreds of components
circuit is part
part of larger
database of circuits
representing or referencing
cases we don
don t give
identified by naming
reachability essentially defines
sequences of references
unnamed or reachable
database system lets
application a cad
application is built
writing the application
persistent named object
type department set
define which object
lose their state
program finishes execution
equal to create
make d persistent
type definition class
definition class definition
definition um method
conventions and reachabilty
reachabilty and persistence
concepts in oopls
hierarchy is defined
address age social
age social security
social security number
subtype of person
person in addition
attributes called branch
branch and gpa
important for defining
defining a student
comprising of tuple
tuple in addition
rectangle is define
define by width
width and height
height in addition
makes up geometric_objects
database systems extents
idea of entity
types and entity
entity type defined
defined a type
entity type coupled
collection of objects
collection of instances
forms an extent
system is organized
form of extents
structured complex objects
calling it complex
amenable or data
relational database form
unstructured storage structure
storage structure storage
structure a tuple
tuples or sets
constructors type constructors
atoms and sets
sets and tuples
tuples and lists
unstructured complex objects
heap of data
data or binary
expanse to binary
binary large objects
database and defined
defined as part
object database standards
existed that exist
implementations of object
out of business
earlier the main
main um application
area in object
pseudo code perspective
object data management
data management group
management group standard
enable certain kinds
kinds of features
object database management
systems or odbms
odbms and odmg
odmg two dot
dot zero defines
defines a basic
basic object model
kinds of bindings
bindings to programming
main or salient
dot zero standard
standardization of terminology
standard are defined
defines several types
attributes atomic attribute
atomic attribute collections
attribute collections structures
objects or default
interesting um default
class which defines
defines a collection
query the cardinality
collection is empty
insert an element
collection or remove
remove an element
specialize a collection
inherit the collection
main type hierarchy
class called object
object um root
objects which represents
objects like date
date timestamp interval
timestamp interval set
interval set bag
set bag dictionary
partial type hierarchy
talked about complex
looked at object
object become important
important in order
storage of objects
accessed through naming
naming and reachabilty
odmg standard odmg
standard which defines
databases ii dr.s.srinath
data management problems
databases in computer
kind of relationships
relationships between objects
pure relational schema
basically a tuple
form a tuple
complex data entity
expect a transistor
transistor to work
define um object
relationship and oid
oid is contrasted
system is tracking
tracking each object
unlike the case
case in relational
data um object
represent different objects
inheritance and polymorphism
essentially as correct
system you require
require an object
correct to speci
substitute an object
associating different objects
relationships like containment
kinds of association
associations are made
made using oid
object a associates
associates with object
object a right
kind of programmatic
program can identify
identify certain objects
objects to belong
system other objects
bit more concrete
concrete and started
database management group
defining object databases
odmg standard provide
standard provide first
standard two dot
dot zero model
model essentially meant
meant to standardize
standardize the notion
notion of object
portability and interoperability
databases and odmg
language for defining
objects and querying
object definition language
language and object
query um language
defines a number
number of bindings
bindings to existing
existing programming languages
application programmers programming
odmg databases system
terminology is standardized
aids in interoperability
interoperability and portability
call an object
object as transient
transient or persistent
object is sai
program has finished
finished sh finished
finished its execution
standard um supports
supports different kinds
kinds of object
types like literal
types like atomic
attributes or atomic
atomic objects collections
collections and structures
typical interface definition
odmg um remember
tells the external
show um type
showing the operation
operation called equals
equals which takes
object and returns
true or false
method called copy
method called delete
proposes a predefined
class called collection
database by default
default um belongs
odmg database belongs
class also defines
number of methods
collection is null
add an object
collection remove _element
contains_element the searching
object and creating_iteratives
standard template library
template um wer
kinds of built
built in interfaces
odmg um standard
set of collectors
set of collection
collection or list
list or bag
array or dictionary
collection interface collector
collector um collection
collection class interface
requirement for iterators
kinds of classes
define a template
template called list
objects of class
odmg standard def
standard def defines
defines different template
template so set
set as shown
create a set
collection a collection
collection by default
reads every entity
instance of type
object because object
top most class
hand a set
kind of objects
object of class
class of car
template also defines
defines different kinds
basically set operations
operations like create_union
create_union or create_intersection
create_intersection um create_difference
create_difference or subset_of
subset_of or proper_subset_of
superset and proper_superset
earlier that bag
bag also specifies
specifies different kinds
methods like create_union
create_union and create_intersection
set and bag
list object type
objects that means
ordering between objects
insert an object
array object type
elements are fixed
elements can vary
dictionary data type
collection data type
hash table implementation
basically um stores
stores a collection
collection of key
key value pairs
returns a value
methods like bind
bind essentially means
inserting a value
delete the value
session um shows
shows the class
inter um interface
define a complete
high level object
level object oriented
object oriented language
defines an interface
hierarchy will inherit
top most interface
object um object
bit of confusion
object by default
objects and sets
sets lists bags
arrays and dictionaries
kind of templates
sets or lists
lists over specific
types of objects
objects like classes
classes like timestamp
timestamp and timp
interval and iterator
proposes an object
object query language
programming language independent
language independent mechanism
defining the structure
behavior of objects
meant by programming
definition um interface
interface with lets
lets say smalltalk
smalltalk or java
kinds of schematic
define structural elements
elements of objects
database schema note
interfaces with specific
bindings for mapping
mapping the odl
constructs the odmg
odl also defines
defines the oql
attributes or behaviors
odmg data model
oid um mapping
named persistent object
defines the entry
case entry point
defines a persistent
structure of oql
similar to sql
dot college equal
equal to engineering
interprets this query
queries are interpreted
interpreted in sql
departments essentially means
extent called departments
extent is analogous
entity entity set
oid of objects
belong to class
access attribute names
dot get college
college are visible
essentially created view
method called has_minors
defining a view
invoke this method
invoke this view
call a function
function called has_minors
students are minors
minors under working
nested query nested
query nested oql
nested oql query
equal to computer
science d dot
dot dname equal
variable that iterates
oids of objects
departments now suppose
department called computer
define this object
declaration will raise
raise an exception
query actually returns
return any elements
sql like min
min max count
max count sum
count sum average
values of min
attributes and max
operator that test
member of has_minors
set called has_minors
has_minors and note
gpa were gpa
mentioned earlier gpa
visible numeric attribute
invisible numeric attribute
exist in order
order to return
value of gpa
dot get gpa
apply to operators
collection of arbitrary
four um animals
average or min
max and sum
attribute or numerical
memberships and quantifications
operators in oql
expression actually returns
condition b hold
elements in collection
collection c satisfy
satisfy this condition
similarly there exists
exists or exists
defined in predicate
define um ordered
ordered collection expressions
extent called faculty
faculty dot salary
salary and designation
designation or description
taking the first
elements like first
query is interpreted
define um extents
extents and attributes
attributes and iterators
tables and attributes
attributes and tuples
differences between odbs
odbs and rdbms
properties are handled
handled especially foreign
database or odbms
levels of nesting
relations are handle
handle in odbms
handling of inheritance
types and classes
inheriting or tables
tables and tuples
specification of database
techniques which talk
map a conceptual
conceptual schema written
extended entity rel
entity rel eer
rel eer model
eer model extended
model extended entity
extended entity relationship
relationships are referenced
shown using associations
bit of importance
path between rdbms
suited for handling
handling different kinds
kinds of complex
objects like blobs
providing say behavioral
transistor is defined
kind of methods
pure odbms database
concepts like normalization
handling and indexing
indexing storage structure
building an implementational
implementational um scheme
object database realm
realm if pure
objects within relations
relations and vice
meant for applications
dealing with complex
number of traditional
kinds of methods
check the state
proposed for rdbms
make them compatible
support for extensible
extensible data types
data types remember
remember that inheritance
efforts to introduce
inheritances or data
data type extensions
support for user
user defined routines
define certain methods
manipulated and implicit
extensions to indexing
mini case study
informix universal server
traditional relational data
data blade modules
idea behind data
blade actually means
means a racer
meaning of blade
cut through existing
introduce new data
kinds of additional
additional data types
table are hidden
variables are hidden
existing database system
type called opaque
data blade module
user defined functions
functions are provided
form of stored
studies in rdbms
today s rdbms
rdbms actually supports
supports stored procedures
support for object
procedures in effect
define some kind
method that works
tuples of specific
create function equal
provide different arguments
two which returns
define your function
function is written
written in language
function so note
informix univ universal
univ universal server
universal server doesn
require the definition
server also supports
supports data inheritance
ordbms data model
type ok row
create a row
number and salary
creating another row
row type engineer
type engineer type
two other variables
degree and license
employee_type that means
type called engineer
type of employee
specialization over employee
employee type engineer
two extra fields
fields like degree
function over loading
routines or user
user defined methods
shows a declaration
declaration um sho
sho show shows
shows an invocation
create index emp_city
function called employee
employee city address
creates an index
employee table based
executes the city
table and based
create an index
kinds of apis
data blades provide
two dimensional data
dimensional data types
types and image
image data types
abstract data types
define an abstract
abstract data type
methods to manipulate
variables or manipulate
kind of ordbms
number of extensions
earlier sql standard
provide some kind
kind of constructs
inline with ordbms
parts like sql
sql framework sql
framework sql foundation
foundation um sql
bindings and sql
sql object part
part were number
provided as part
part of sql
temporal and transaction
aspects of sql
sql and persistent
persistent stored modules
modules and call
call level interfacing
object relational support
sql three supports
type called lob
lob or binary
binary large large
large large objects
dump or binary
binary data object
support for objects
creation of row
row or tuple
create a type
create abstract data
elements of type
methods that manipulate
manipulate this tuples
create row type
characters and age
type which creates
simply say create
employee of type
type emp_row _type
extend existing rows
row type comp_row_type
employee ref employee
ref employee row
employee row type
create another element
table um employment
employment of type
addition to row
type in sql
user defined type
define a struct
adts nested adts
composite data object
data object representing
built in functions
initialize and instantiate
instantiate the adt
put um function
change this thing
thing and adts
kinds of implementation
sql three specifications
suppose a user
user um specifies
specifies a function
function or user
defines a function
dbms implementing sql
user defined function
function whenever required
kinds of client
client server issues
function is defined
defined and stored
server before hand
queries within functions
ordbms s issues
complicated than relational
traditional relational database
relational database storage
storage and access
functions and query
run stored procedures
optimizing a query
transactions and integrity
complicate the matter
object object relational
adts can define
define user defined
user defined types
form a first
form each tuple
remove the restriction
restriction of first
efficient to map
internal pure relational
lecture on object
query language constructs
relative short comings
comings and advantages
advantages of odbms
emerges of ordbms
ordbms or object
specifications the informix
server and sql
support for ordbms
means as elegant
nice um specification
issues like query
managing xml data
mentioned earlier xml
mark up language
standard for information
power of xml
read and understood
schema is describe
describing data set
continue with xml
data are stored
area of interest
sense that xml
xml is elicited
disciplines because information
facets of information
points of information
information and integrating
integrating them interchanging
standards in specific
domains like banking
banking or finance
finance or bio
defined um xml
area of concern
start by acknowledging
talk by jayant
vldb summer school
school um held
held in bangalore
studied about xml
mentioned before xml
independent and standardized
standardized extensible mark
specific thing platform
thing platform independent
xml in plain
plain vanilla text
vanilla text character
text character data
support textual data
xml data set
tag should end
ness and validness
language the mark
kinds of tags
kind of tag
notice and slash
data is embedded
description is valid
standard for data
simple building blocks
blocks like elements
elements and attributes
attributes and nesting
formed xml fragment
valid xml fragment
formed xmls fragment
fragment essentially conforms
xml structural requirements
xml um document
nesting is proper
proper every begin
tag is closed
tag and tag
valid xml data
nt be valid
valid however valid
document type definition
definition a dtd
significance of xml
understanding and human
open an xml
editor like notepad
notepad or emax
simple hierarchical structure
easier to enforce
easy to build
kinds of tree
easier to navigate
xml data sets
xml is eliciting
communities and information
problem with database
computer science researchers
domain of concern
information interchange problem
stated it means
integrate the varying
varying or desperate
sources of information
information that exists
system um fpml
slo as shown
essentially um standardizes
kinds of contracts
contracts or transaction
transaction data sets
routinely specified generated
pertaining to banking
banking or stock
sources and fpml
easier to integrate
places similarly bioml
bioml as shown
bio informatics applications
annotating gene sequence
gene sequence data
long sequences comprising
four different characters
set of code
kinds of code
code on strings
genes are annotated
annotation is done
researchers um trained
trained to sequence
annotating different parts
text for annotations
place any constraints
bioml in addition
fpml or bioml
schema also supports
supports full text
full text queries
commonly used standard
protocol which stands
stands for simple
simple object access
object access protocol
sense the building
blocks of web
software can access
access a remote
remote um object
object or invoke
invoke a send
methods to remote
simply a message
provided the xml
xml is parsed
object and question
object that performs
kind of calculation
kind of currency
currency conversion object
object is soap
object or speaking
component um sends
xml parser embedded
parses the xml
document and divides
divides the xml
parts a header
header contains meta
kind of message
shows a schematic
parse an xml
tree and create
document validator document
validator document validator
document is validated
xml is ready
accepts different kinds
queries using xquery
xquery or xpath
model which comprises
comprises of elements
attributes and data
rooted tree structure
comments and processing
instructions and namespace
schema which specifies
specifies the meta
meta data structure
define regular expressions
expressions over xml
tree which begins
begins at imdb
imdb and slash
internet movie database
source of xml
sto it stores
stores a lot
lot of movie
movie related information
element called show
show and show
show year equal
equal to nineteen
review one starts
review two starts
set of box
box office numbers
xml plus free
simple xml fragment
start your dtd
attributes so imdb
show start show
start show star
star essentially means
similarly the show
element contains title
title comma review
reviews um review
attribute called year
data and title
title is character
fragment in contrast
fast replacing dtds
typed um language
supports a types
importantly an xml
xml schema document
parser to parse
parsing an xml
equal to show
declaring the schema
element is declared
sequence um sequence
element is closed
declaration in dtd
element called review
mixed um data
text and xml
choice um element
choice between box
office or seasons
sequence so note
show itself comprises
title um review
sense and box
element is year
simple um xml
parse this xml
enforce the constraints
parsing xml data
notion of naming
two xml fragments
fragment is shown
first xml fragment
worked with html
fragment and html
formed html fragments
tag is paired
nice hierarchical structure
fragment which begins
begins at table
table and ends
ends at slash
row which begins
cell which begins
table slash table
width and length
african coffee table
coffee table eighty
single xml document
kind of pcdata
parsed character data
data contains html
declare some thing
thing called table
order to resolve
table and slash
slash h table
question still remains
notion of names
spaces becomes valid
important a namespace
namespace essentially defines
defines a unique
define a unique
unique name space
remember the notion
identifier a url
http colon slash
colon slash slash
slash slash osl
slash osl dot
osl dot iitb
dot iitb dot
dot ac dot
single ip address
concept of uris
conflicts in xml
put a prefix
means a specific
created the xml
xml um fragment
uri it means
replaces f colon
slash osl triple
osl triple itb
triple itb dot
dot in oslwiki
uri remains distinguishable
define a separate
separate name spaces
spaces were names
xmlnx xml namespace
namespace prefix equal
namespace or coated
define a namespace
unique um meta
uri the address
identify a namespace
resolving naming conflicts
check or validate
defines this names
related to cdata
data um character
define an element
easy for xml
parser might flag
script and slash
element that defines
define a function
function or defines
defines some script
greater than symbols
symbols and ampersand
ends the cdata
rules for cdata
defines the end
cdata sec sections
implies that nesting
nesting of cdata
nt have nested
nested cdata sections
spaces or line
line brakes inside
querying xml data
kinds of query
languages are present
paradigms of query
query queries exist
common querying tasks
filtering and selecting
selecting navigation selection
navigation selection extraction
kind of joins
joins or aggregation
convert one form
problem or fundamental
issue of xml
two specific kinds
kinds of xml
querying is performed
paradigms of xml
kind of impacts
kind of xml
full navigational parser
parser that means
dom or document
document object model
parser which requires
requires an entire
entire xml document
dom basically creates
programs in order
order to query
query the xml
application requirements state
provide full navigational
full navigational access
partial um xml
parser to start
parsing and kind
dom essentially creates
creates a docu
creates an object
document element dot
element dot getelementsbytagname
dot getelementsbytagname show
dereference an element
returns an element
give an xml
dtd or xml
dom parser performs
performs both parsing
parsing and validation
application the application
calling the dom
stream based parsing
stream based parser
parser is sax
microsoft windows platform
independent and programmable
programmable um programmatic
sax in contrast
contrast to dom
require full navigational
stream the xml
xml data parses
put a sax
sending you xml
xml data streams
streams through sax
means that sax
xml um stream
codes change data
change data streamed
parser a sax
sax like parser
feature of call
interrupt the application
dom just creates
creates a dom
parser just creates
call the object
read only access
sax parser works
entire um document
document um parses
parser and validator
turn sends sax
sends sax events
application keeps interrupting
parser keeps interrupting
interrupting the application
application by sending
sending appropriate signals
signals or events
specific um tasks
found an element
begins the sax
sax um sax
back the application
xml query languages
parsing techniques lets
languages like xpath
xpath um xpath
xpath two dot
commonly used language
navigations or selections
convert um xml
xml to text
form of xml
render an render
render an xml
xslt query language
document in return
kind of language
takes an xml
document as input
out another xml
document as output
queries which takes
takes a relation
relation as input
strongly typed xml
strongly typed query
typed query language
large scale database
scale database accesses
syntax for defining
directory like parts
order to define
define xml stands
stands or xml
computer file system
osl dot triple
dot triple itb
element and grace
element is equal
simple file system
file system language
directory contains defines
defines the element
element called catalog
element called book
return all titles
imdb um xml
element is imdb
imdb and title
title can occur
slash essentially means
slash the beginning
return a show
year is greater
full text operators
operators like text
text contains russell
level um return
return that element
introduction to xpath
system like language
language for representing
hierarchy or tree
beco become significant
easy to express
express a tree
done in xpath
easy to enforce
non root level
root level node
long file system
system like path
identifies each element
paradigm um xquery
data and xquery
xml to xml
xml um converter
query an xml
document and return
return an xml
algebra um query
query a relation
relation an xquery
xquery in turn
part of xquery
people would term
sql for xml
analogous to sql
xml document returns
returns an xml
sophisticated query operators
operators some thing
thing like select
query like select
select all papers
collection of papers
document called citeseer
give complex expressions
complex expressions based
kind of kind
kind of class
xml xquery features
queries or flwr
return um repeat
condition initial condition
repeat these queries
sql like select
sort by operators
sort elements based
transforming one xml
xquery basically supports
basically supports strong
supports strong typing
specific to integers
integers versus character
versus character strings
supports for processing
actor return box
return box office
box office receipts
receipts of films
past two years
imdb xml document
element called receipt
elements like box
office or actor
element called receipts
receipts and slash
actors and totals
xml document comprising
comprising of character
element called total
films per box
office um receipts
first define variables
pascal like syntax
dollar imdb equal
imdb basically specifies
actor in imdb
box office element
element and year
actor and total
actor has grossed
world wide webs
parsers or sax
parsers or xpath
xquery um standards
affect the query
dom and sax
documents or create
application can access
application can send
dom parser requires
requires a entire
kind of implication
parsed using dom
navigated and parsed
object and return
imdb slash actor
processed as part
traditional database setting
database is static
returns query results
query is standing
query is static
database or data
data set parses
query returns backs
call returns events
events or performs
data set matching
matching the query
satisfying this criterion
criterion it returns
returns a receipt
fragment by calling
started with xml
resolve naming conflicts
assigning a unique
unique globally unique
globally unique uri
cdata handling issues
braces and ampersand
navigational um parsing
entire document versus
document versus stream
versus stream parsing
looked at xpath
xpath and xqueries
techniques can impact
session on introduction
introduction to xml
primarily into xml
benefits of xml
xml or data
interchange using xml
queries or schemas
stored or transmitted
set of existing
existing data stores
semi structured data
structured data management
management um semi
specific rigid structures
post internet world
defined by semi
semi structure data
structured organized data
structured data possess
possess some unique
problems in fact
motivate those problems
providing any solutions
areas of active
motivating the problems
analogies and instances
conclude this session
terms of semi
summer school held
bangalore in june
june two thousand
analogies and jokes
back at xml
learnt about xml
remember that xml
platform independent standardized
standardized and extensible
written in character
support character data
set of keywords
describing the data
describing the xml
tags or meta
data that describe
semantics to attach
plain hierarchical structure
easy to navigate
navigate and easy
enforce and easy
easy to parse
xpath which translate
translate an xml
directory like path
understandable or parsable
document in notepad
starting tag doesn
space extra space
space that xml
xml in character
form on disk
compress xml data
actual disk space
address the question
question of data
platform independent source
data um representation
linux the end
solaris or mac
services using soap
xml based message
based message parsing
message parsing protocol
provide those services
xml data store
continue to exist
interchange will balled
interface these databases
databases using xml
common interchange language
updated through existing
common interchange format
provide xml wrapping
wrapping to existing
existing data bases
bases and soap
parsing between objects
long before xml
object middle wares
wares like corba
supported message parsing
complaint in order
kind of platform
message is parsed
wrapper so soap
generalization over message
message parsing frame
parsing frame works
works in distributed
distributed um object
object base systems
small um distributed
larger web base
web base services
analogy also exists
integration were data
databases in pre
pre existing forms
forms and pre
wrapping the data
assuming relational databases
world are relational
assuming that existing
platforms a simple
convert relational tables
form to xml
two different columns
columns um last
xml document actors
actors and slash
rooted xml document
flat xml document
document is fixed
actors document comprises
children called row
row and slash
children each child
simple to map
canonical flat xml
flat xml file
forward to map
question of storing
storing xml documents
commercial implementations oracle
supports xml storage
xml based updates
approaches to storing
issues that occur
issues like data
organize the xml
map xml data
map an xml
kind of object
store xml data
native xml form
prone to updates
fix the schema
attributes are added
added or existing
deleted or modified
database is modified
database is oriented
oriented the relational
valid structural update
invalid structural update
standard flower queries
project and join
supported in xquery
xquery in addition
addition to recursion
recursion or document
input xml document
output xml document
maintain meta data
attribute and value
store full text
full text indexing
search a full
elements or data
efficiently in addition
kinds of indexes
essentially um talk
relationships between structural
requirements like scalability
recovery in case
failures concurrency control
control um updates
storage that storage
termed as flat
stream um based
storage or native
native xml storage
storage and colonial
flat stream based
stream based xml
based xml storage
storage essentially stores
essentially stores xml
stores xml data
stored as clobs
blob a blob
character large large
large large object
character large object
mechanisms of access
access and retrieval
storing any multi
multi media object
relational object relational
store xml documents
support any xml
xml centric queries
query the database
based on object
object relational constructs
specific um query
constructs like flower
database storage strategy
storage um native
storage essentially means
database from scratch
scratch for storing
storing xml data
xml data optimized
optimized for storing
thought about lets
designing a relational
storage structure block
structure block accesses
physical storage structure
storage structure indexing
structure indexing structures
recovery mechanisms concurrency
mechanisms concurrency control
control um transaction
maintain efficient transactions
designing any conventional
designing this native
examples of databases
databases supporting native
supporting native xml
strategy a colonial
strategy essentially means
map every xml
xml um storage
storage as character
character large objects
relational um table
decomposes or deconstructs
deconstructs an xml
document into relational
constructs and reconstructs
xml related query
provide like xpath
return in sql
constructs and sql
constructs and vice
limitation the advantage
worry about number
number of techniques
worry about storage
storage structures block
block um storage
storage structures concurrency
structures concurrency control
huge performance overhead
terms of mapping
mapping an xquery
avail and running
running the sql
strategy of native
redefining or redesigning
designing a native
disk and physical
disk is organized
pages disk pages
pages or disk
blocks be organized
indexing of phrases
indexes that talks
elements are related
address query support
support what kinds
queries are supported
efficient um query
access control concurrency
control concurrency control
concurrency control updates
managing or storing
physical um disk
xml tree mapped
physical disk blocks
essentially an xml
trees like title
title year box
year box office
divide this tree
physical data blocks
kind of division
division makes sense
dividing a tree
tree into disk
based on sub
show sub tree
entire sub tree
user just navigates
opens an element
tree and opens
opens another element
file system navigation
kinds of navigational
user is navigating
navigating the navigation
open this sub
read an entire
access itself suppose
access every data
element which stores
stores the show
element in order
order to access
answer attribute kind
attribute kind kind
answering navigational kind
database storage structure
cluster similar elements
imdb and show
show and title
title year seasons
storing an entire
level are clustered
elements are clustered
red data block
single data block
blue data block
cdata or pcdata
sense the dual
earlier um mechanism
efficient for answering
answering attribute queries
elements or return
return all show
term the fugitive
access this block
find a pointer
data block access
lesser data blocks
access all title
store so answering
answering a attribute
simpler however answering
query becomes difficult
thing it depends
thing is clustered
lowest level elements
difficult to navigate
open a title
title to year
based on parts
based on single
clustering similar elements
techniques cluster similar
cluster similar paths
cluster all paths
form imdb show
show and year
databases the answer
single um technique
universally most efficient
storing xml databases
extent it depends
store sub trees
trees within data
full text searches
problem of indexing
indexing xml documents
indexing um indexing
indexing requirements arise
arise for xml
addition to attribute
attribute value indexing
two other kinds
termed as full
text um free
free text data
write a paragraph
indexing full text
index an inverted
numbers or section
document would index
index different keywords
found and keyword
keyword based indexing
aware um keyword
xml unaware keyword
unaware keyword indexing
two xml unaware
give a keyword
jerry sign field
document and keywords
keywords are searched
searched this table
unaware keyword keyword
keyword keyword searches
term that appears
stores the document
reference which document
hand an xml
xml aware keyword
xml aware index
term fugitive appearing
element whose key
attribute based searches
title sub element
element of show
xml aware indexing
aware indexing makes
sense than xml
xml unaware indexing
side of xml
increase and keywords
keywords are repeated
amount of combinational
term nineteen ninety
kinds of elements
xml native xml
native xml databases
natix or goxml
built from scratch
built over existing
addressed in native
diversity or wide
kind of features
full text searchers
searchers and xpath
searchers and xquery
kind of apis
unknown and natix
low level primitives
support for xquery
managing semi structured
tool to manage
manage semi structured
important to study
study about semi
data which doesn
doesn t conform
rigid structuring mechanism
kinds of definitions
inherently self describing
data itself defines
defines its schema
generated half hand
world um semi
data structured ness
harder to impose
impose and define
define an impose
huge um data
structure in fact
semblance of structure
meta data tags
href hyper link
hyper link references
define um specific
impose the structure
huge semi structured
structured data stores
stores are characterized
characterized by rapid
rapid or dyna
data not defined
formalize um semi
nice formal model
formalize a semi
examples for semi
data like web
web information systems
systems and digital
integration from heterogeneous
heterogeneous data sources
structured data problem
impossible or impractical
easier to treat
large semi structured
semi structured database
talking about xml
makes a semi
information about movies
movies each movie
movie may belong
star cast fields
related or movie
actors and actresses
record that makes
elements may annotate
annotate more information
represent an actress
data gets added
difficult to enforce
ascertain what structure
formulate um queries
queries and formulate
formulate query languages
structure of data
providing the dataset
dataset first defines
defines the structure
structure is embedded
problem of discovery
discovery of structure
structure is indicative
indicative in nature
constraining in nature
structure that evolves
constrain the database
termed as traditional
traditional data management
organized and data
uod is first
model and populated
dependents and salary
sets of data
add that employee
constraints are enforce
query just takes
takes the model
uod and queries
queries the database
post internet data
internet data management
problem with semi
semi structure databases
add um movie
populates the database
common mental model
database is populated
populated in fact
query is searching
searching the data
data to search
basically the schema
schema discovery problem
implicit um schema
problem often encounters
encounters the problem
schematic um schematic
maximalist world notion
minimalist world model
traditional database system
schema is forbidden
kind of exclusivist
things are thrown
schema discovery process
relationships between data
elements are permitted
apriori um define
define what kinds
exist between data
world of movies
accept a data
movie contain ten
ten different movie
typical relational schema
include data integration
design an interface
integrate different desperate
data sources coming
kinds of semi
structured data coming
areas like genome
databases that talks
talks about scientific
scientific documents similar
documents similar documents
similar documents citations
documents citations references
published and ratings
business to business
difficult or impractical
specific schematic structure
resort to semi
structure data management
management when managing
two b business
discovery of structures
addressing the discovery
involve a separate
rules which talk
set of desperate
kind of regularity
artificial intelligence kind
intelligence kind techniques
fit a structure
structure discovery process
supported for semi
data in add
add in addition
addition to xquery
meant for xml
xml um databases
keyword based searches
full text searching
kinds of primitives
navigation based queries
queries or searching
searching for patterns
temporal queries based
data element evolves
embodiment of semi
structure over xml
data can reduced
reduced to discovery
set of xml
xpath and xquery
xquery expressions based
idea of semi
lecture to explore
looked at native
storage and xml
storage um structures
proposed for xml
important for semi
part one database
database design dr.s.srinath
aspects of dbms
typical life cycle
system that deals
deals with information
information flow management
flow management storage
management storage retrieval
storage retrieval handling
typical dbms system
kinds of actors
entity relationship based
relationship based design
design for conceptual
call the physical
database schema appears
utilize this dbms
table um relation
relation or normalization
normalization functional dependencies
correspondent relational schema
right so today
typical case study
study ok database
database design case
design case study
designing an application
system um note
talking about design
talking about uods
taking toy examples
data management requirements
real life databases
reminded about banks
banks and railway
massive database systems
database systems indian
systems indian railways
amount of transactions
transactions that happen
happen and amount
generated and stored
disservice in fact
complexity that lies
implement as part
management systems existence
systems existence practice
taking is shown
conference management system
based um interface
activities and data
simplified conference management
real life database
complete gory details
committee of people
people who decide
decide which paper
committee is headed
program committee chair
members of program
committee will act
act as reviewers
set of requirements
paper is authored
unique contact author
right so correspondence
paper is accepted
process of review
real life conferences
bit more relaxed
program committee member
stringent um stringent
make things simpler
publish any papers
authors an author
author may submit
submit a paper
summit a published
block of requirements
paper is reviewed
send a paper
reviewer will give
accept or reject
reject the paper
reject a paper
right so based
based on reviewer
comments pc chair
prepares a set
set of paper
paper for acceptance
tho those set
set of papers
papers are accepted
two um things
specific forbidden condition
number of requirements
requirements or number
number of things
required nor forbidden
reviewer can review
review five papers
papers ten papers
design our application
application um suppose
suppose you design
design a dbms
specific um answer
requirements neither requires
systems development life
development life cycle
system development life
systems requirements specifications
explicitly required conditions
explicitly forbidden conditions
high level design
turn you reduce
low level design
model ok relational
schema plus transactions
set of application
design from requirements
design to low
sets of processes
processes involve human
involve human activity
activity or human
common with human
actions the system
reflect the systems
systems requirements specs
reflect the requirement
two important concepts
designing real life
real life system
liveness and safety
definitions of liveness
set of requirement
member may push
forbid the behavior
forbid this activities
forbidden usually constitutes
constitutes of safety
order to safe
guard the system
system against integrity
form to build
build a safe
build a system
integrity violations simple
violations simple don
start the system
system that doesn
database system doesn
make a system
right in addition
addition to safety
require certain behavior
system should perform
perform certain activities
talk about mis
matches now suppose
systems requirements spec
set of forbidden
build the final
final system model
denote the set
denote the ses
set of safety
talk about building
building a system
kinds of mismatches
capturing user requirements
list of things
wrong in fact
fact in addition
model is incomplete
don t implement
don t factor
factor a subset
srs in addition
spec in fact
model actually forbids
incorrect it forbids
forbids certain required
required behavior right
performing more activities
model has extraneous
model is doing
extraneous and unsafe
set of guidelines
separating the requirements
requirements into set
behavior and set
srs that means
model is unsafe
forbid certain things
model is conservative
conservative again doesn
violating a liveness
hampering the liveness
building a safe
safe um model
divide our requirements
kinds of required
real life examples
factor a requirements
behavior or liveness
behavior or set
required and forbidden
entities there attributes
attributes the relationships
relationships between entities
complete er model
model and perform
accept a paper
system should flag
flag an error
reviewer must comment
rejected or neutral
reviewer should give
accepted nor rejected
right a paper
forbidden explicitly forbidden
conditions and forbidden
model also forbids
forbids those conditions
step and start
start identifying entities
kinds of bec
conference is decided
program committee headed
find several entities
conference ok conference
logical existence program
existence program committee
essentially the nouns
author and attribute
author may write
relate to equate
entity called journal
finishing the identification
identification of entities
identifying ent entities
statement the entities
candidates for relationships
part already forms
forms a relationship
conference is handled
handled by program
technical program decided
conference one program
made program committee
classes a week
existence is defined
relationship that defines
defines a week
shown by double
committee totally participates
statement the technical
technical program committee
committee of large
chair same statement
chair heads program
heads program committee
heads a program
chair is clear
chair can head
head any number
number of program
committee whatever headed
committee um program
committee um consists
consists of reviewers
members of prog
two separate relationships
isolation they don
don t form
form a consistent
consistent um set
violating a forbidden
violating a condition
remember the extended
extended er model
part of reviewer
chair and vice
committee would consist
consist of members
committee can consist
member n number
number of members
basically in addition
give a cardinality
relationships a paper
straightaway here paper
authored by authors
author can submit
submit any number
number of papers
relationship pc chair
thing after taking
draw the entire
entire um set
set of relationships
person ok note
entity called person
person and make
make a disjoint
specialization between member
entity called member
entity called author
talking in english
conference or journal
entities and form
form a union
form a single
make an entity
entity called event
paper is submitted
thing is make
cardinality of event
event an event
journal ok calling
calling a journal
sounding in terms
term than event
similarly a paper
reviewed by reviewers
papers is reviewed
statement a reviewer
means the reviewer
give a result
reject or neutral
attribute called result
nt assign result
belong to relationships
instance not exist
paper is assigned
back to attributes
identify key attributes
case a conference
key key attribute
similarly um program
week entity type
initials and title
turn has multiple
multiple other attributes
attributes say first
age or date
identifying a person
persons pan number
contact email address
numbers and phone
multi valued attribute
attribute which means
multiple phone numbers
right a composite
made of multiple
attributes may belong
right whereas first
attribute and composite
give an author_id
author a login
inherited by author
author is suppose
number and date
birth and phone
similarly for paper
form the primary
subject of expertise
right and journal
journal _id year
year of publication
entire um system
big er schema
turn by reviewing
reviewing this schema
conference ya conference
program committee consists
chair may head
forming an event
reviews a paper
paper or paper
reviewed by reviewer
reviewer the review
result being assigned
author and members
address and telephone
telephone number email
person are inherited
members and authors
attributes of conference
conference and journals
attributes of members
members are inherited
inherited by reviewers
privileges or benefits
shared by reviewer
fairly um complicated
search the internet
guess open source
open source conference
source conference management
back end database
system in order
research um conference
conference management tool
significantly more complicated
level of complication
level of detail
requirements that arrive
right and contact
tricky um details
individual um chunks
chunks or pieces
lower relational schema
kinds of tricky
tricky situations arise
finish this class
session in dbms
kind of assumptions
first few sets
sets of lectures
blocks of conceptual
kinds of nuances
nuances in conceptual
characteristics of relational
dependencies and normalization
kinds of rules
class and start
start by explaining
explaining which kinds
kinds of transactions
transactions on top
looked into transactions
transactions as part
series of lectures
transactions and transaction
sets of classes
defining um transactions
sets of requirements
cover the large
first few aspects
design the architecting
high level transaction
level transaction design
transactions um transaction
make a detail
relational schema design
today s work
fairly um comprehensive
real life conference
life conference management
kind of captures
captures the main
requirements the technical
conference is headed
adjective called large
handle small conference
designers or systems
committee in turn
turn is headed
right a program
heads the program
reviewer and vice
chunk of requirements
imposing this constraint
give a decision
accepts or rejects
papers and prepares
papers for acceptance
good to review
relational model design
explicitly required behavior
explicitly forbidden behavior
forbidden behavior right
forbidden behavior constitutes
interest of safety
violate that constraint
constraint it means
compromising the integrity
required behavior constitute
constitute the liveness
completely safe system
make a soldier
form the liveness
addition to liveness
cases the uod
call that call
depen um depending
mid way area
tool can offer
offer an edge
conference management tools
management tools manages
tools manages birth
manages birth dates
sends greeting cards
first few steps
kind of address
srs we created
design um add
level design low
design low level
static so add
adding the transactions
ideally um reflect
systems requirement spec
good to classify
classify this deviations
kinds which helps
helps us understand
systems model deviating
required um requirement
incomplete and incorrect
systems model incomplete
satisfy all requirements
forbids certain requirements
satisfy certain required
super set proper
set proper super
proper super set
providing an extra
extra feature doesn
potentially be unsafe
behavior actually trespasses
set of srs
srs um asks
blocking certain liveness
stopping certain behaviors
minus f srs
reviewer must give
decision either accepted
accepted or rejected
model a paper
committee to review
review the paper
author each paper
requirement um sentence
sentence by sentence
sentence and identified
identified several kinds
big er diagram
bit by bit
conference a conference
conceptual schema design
human centric process
sense in order
handles a conference
defines the existence
program committee consist
set of members
members are divided
set of specialized
member a member
similarly a reviewer
reviewer may review
assigned any papers
number of reviewers
paper the reviewer
assign um result
process of reviewing
reviewing a paper
addition the paper
related to authors
authors ok note
condition forbidden condition
authors and members
form a disjoint
specialization for person
store certain personal
address name date
birth phone numbers
choose to submit
submitting a paper
schema as part
columns and rows
rows and attributes
relationships then foreign
decomposition of tables
tables and functional
first um set
out with conference
conference is defined
attributes like conference
conference name place
place date topic
table called conference
attributes of table
primary key right
program committee program
committee program committee
table called program
entity called program
add the attributes
attributes of program
conference name program
key of conference
conference and make
conference um table
shown the entire
entire er diagram
relationship here defines
member is defined
attribute called member_id
general entity class
attribute every subclass
entity um type
type also inherits
inherits the key
chair also inherits
inherits the member_id
attribute of program
heads may head
head several program
table is trivial
chair and put
chair in addition
attributes of member
table and make
make the key
general entity type
type called member
chair ma make
make into composite
attribute was conference
attribute called conference
put the member_id
forming the conference
conference name attribute
key a primary
attribute which defines
program committee table
generalized entity type
type this member_id
member_id is inherited
forms a part
made a table
chair with member_id
mem with member_id
table for reviewer
table for members
members itself members
members itself note
mutually exclusive relationship
relationship between reviewer
special identity assigned
define the complete
larger um relationship
relationship a program
committee may comprise
make a separate
calling this table
table as membership
pro primary keys
reduced by creating
creating a separate
set of reduction
attribute called paper_id
paper_id whereas author
attribute called author_id
entity called paper
paper with paper
table called paper
paper with paper_id
key one table
table called author
author with author_id
table called authored
paper_id and author_id
author_id as part
add the author_id
multiple entity type
actual relational schema
authors are persons
needed to capture
identify a person
person the phone
numbers the address
address name last
person and author
authors are disjoint
specific um safety
papers by authors
members have member_ids
authors have author_ids
table for member
table for author
table for person
person and pan
number of phone
numbers a person
number another person
numbers another person
order to deal
deal with multi
multi valued attributes
key for person
key may repeat
number may change
table called person
authors because members
system is concern
requirements is concern
number and bring
details of person
person and bring
member or author
form a valid
valid derivation schema
bring pan number
two key attributes
number and member_id
associate with phone
member_id with phone
member_id plus phone
author_id and phone
perform any kind
kind of systems
system um expect
add more categories
categories of people
registrant or conference
case the conference
number and pan
associate phone number
associating the phone
phone number attribute
wont have separate
interest of anticipating
idea in future
information system design
design is full
write a software
software that works
sufficient your software
extensible and extensible
extensible with minimal
makes a good
table called member
chair and author
put pan number
paper maybe submitted
playing an active
journal and conference
key and journal
journal has journal_id
model um conference
table called journal
key and attributes
two primary keys
put both journal
journal or conference
don t define
define the existence
characteristic of foreign
reviewer should assign
assign some result
reviewer in fact
relationship called paper
key here make
key here member_id
paper_id this member_id
gave this result
table in order
order to reduce
final relational schema
conference place topic
pro program committee
represents the week
type called program
takes the primary
attributes like strength
attributes like subject_of_expertise
table were member_id
attributes like number
number of conferences
attributes from members
members or persons
turn a person
table ok remember
created a separate
table called membership
key foreign keys
key then pan
number is inherited
order to denote
number of authors
right similarly person
created the separate
interest of extensibility
last name date
birth and put
common sense decision
kind of persons
persons maybe added
number and phone
phone number combination
details any number
conferences or journals
journal_id in fact
requirement of journal
add an integrity
journal_id and conference_id
non null attributes
paper or reviewer
create table tables
statements so create
create table conference
table conference conf_name
conference conf_name place
primary key conf
key conf conf_name
create table program
table program committee
key is conference
set of table
write corresponding sql
statements and give
turn can create
create a tables
transactions or designing
designing the dynamics
lot of details
whats a transaction
set of tasks
tasks which represents
represents one semantic
activity or set
tasks like read
read write update
acid basically means
means um stands
activities or tasks
form a transaction
performed in isolation
transactions should interfere
kind of system
make some assumptions
client server architecture
stateless mean meaning
remember previous client
previous client interaction
perform this activities
transactions some simple
author or user
form in front
person or author
verify those details
register multiple times
update the table
form one semantic
right similarly login
field for syntactic
provide my user
password for login
login then read
table ok author
author pc chair
chair reviewer table
reviewer table match
match specified user
care of password
start designing transactions
two um attributes
back and change
change those make
sessions um session
detail here upload
upload paper transaction
assign reviewers submit
reviewers submit review
submit review arbitrate
activities which perform
develop the relational
business logic manager
handles multiple transactions
idea um give
takes into designing
design of databases
databases using model
today are based
relational model rate
base or tables
modeling for databases
answer that question
database um design
captures the gist
remember that databases
database is embedded
solution the databases
embedded within railway
railway reservation solution
setup a company
discourse the universe
discourse basically tells
block that make
talk about designing
designing a database
uod and collecting
make an analysis
conduct its operations
operations what kinds
identifies a correct
imagine that database
requirements are handled
handled by dbms
solution to give
build a car
build a bus
designing the application
larger information system
high-level conceptual design
understandable by human
understand the solution
taking up today
analysis you analyze
opening an account
making a bank
holdup these functions
analysis are made
high-level transaction specifications
transaction specifications infact
revisiting this topic
topic called transactions
club different operations
functional ana analysis
dbms independent process
meant by dbms
process it means
means that doesn
mysql or postgres
understand your uod
dependent um processes
two different streams
process is happening
schema in turn
design the physical
data itself resides
dbms dependent process
stores its data
physical design results
high-level transactions specifications
impact the physical
suppose certain kinds
kinds of operation
sense to design
slightly lose fashion
high-level transaction specs
specs in order
make your physical
application program design
design and transaction
finally the application
important for database
understand or uod
discourse it tells
handle and based
requirements what kinds
building banking solution
customers or account
kinds of logs
logs and ledgers
ledgers and account
represents some kinds
design would identify
includes the description
entities that makeup
entity an account
entity a ledger
kinds of entity
holds an account
account an account
sbi account balance
account in order
make a term
imposed by physics
modeling a railway
two trains starting
constraints that exist
exist among data
details here note
schema is ease
ease of understanding
understand your understanding
things we identify
company has departments
departments each employee
speak to employees
employees we find
project may span
span different departments
department we note
covered in someway
someway or supported
supported in someway
kinds of things
things like departments
departments projects employee
projects employee dependence
department id manager
project id location
pan pan number
pan number address
colon like departments
projects or entity
entities say department
manager or location
means they belong
occurring after department
department here belongs
department the department
department id belongs
project id belongs
belongs to project
project and address
belongs to employee
employee an employee
paying income taxes
notation of representing
representing entity types
types are represented
represented by rectangles
entity and attributes
department like department
department identifier manager
form of ovals
balloons handy hanging
independent ex existence
note that term
term independent existence
entity because address
entity called employee
independently occurring object
entity has entity
entity has attributes
properties that describe
age and date
classify this attributes
thing about characteristic
classifications of attributes
attributes is simple
simple verses composite
years old thirty
thirty age equal
equal to thirty
back one value
composite attribute versus
versus a simple
attribute again age
thirty five years
find many colors
defined by multiple
attribute now composite
closely is made
mister doctor misses
thing any string
attributes many attributes
color ok blue
blue green red
green red white
attributes versus derived
versus derived attributes
database your date
give some date
today s date
attribute a good
good database design
today an employee
wont be thirty
years old right
suppose a student
two elective courses
two different slots
slots ok elective
unknown or missing
back to entities
entities and define
respect to entity
word entity type
defined this term
entity type department
represents all departments
collection of entities
departments plus accounting
two different departments
type as oppose
type is set
set to describe
describe the schema
entity or entities
systems programming department
designated as manager
entity type describes
representations entities types
types are defined
boxes and attributes
defined by ovals
kinds of ovals
similarly derived attributes
derived attributes derived
attributes derived attributes
talking about entity
manager and address
identify each department
ten it means
department no matter
supplies and accounts
department called administration
code in post
identifies each entity
department id attribute
attribute is unique
department that belonging
identify um entities
attributes or keys
underlined um definition
case all attributes
attributes which form
case the key
key is made
made by combining
key is minimal
number ten supplies
supplies is redundant
redundant we don
identify a department
minimal in nature
enhanced er model
retention of key
identify an element
house right key
key should open
identify a house
identify a machine
identify the machine
keys that define
types or entities
relationship in order
definition of definition
meant by domain
domain of attributes
domain to put
years the domain
nature imposed restriction
attribute can reside
attribute is cartesian
domains of individual
types like department
department project employee
composed of first
concept that important
notion of relationships
type an entity
entity set attributes
attributes different kinds
keys and domains
precise relationship type
type um defines
defines a relationship
entity type employee
relationship type specifies
make some definitions
definitions ok first
meant by relationship
number of entities
entities and defines
set of associations
carefully a relationship
instance or entity
entity or entity
define one instance
meant by relationships
type its simply
establishes an association
type of degree
department is managed
managed by relationship
binary relation relationship
relation relationship binary
entity types involved
types of relationships
carefully the first
picture above shows
shows employee work
work for department
picture below shows
entity and department
department and attribute
works in describe
describe the characteristics
departments and employees
employees have separate
existences or seperate
confuse this problem
attribute because department
first picture shows
picture shows employee
shows employee works
works for department
attribute and put
first one correct
show that employee
separate relation depicts
relationship between employee
characteristic that describe
characteristics of employee
relationships versus attributes
slightly a tricky
functional data models
form of attributes
databases you talk
talk about relationship
storing an object
object and vise
emply employee object
similarly in relational
study much deeper
relationships are established
table that describes
describes one kind
foreign key attribute
talking about relationship
talk about relationships
relationships are defined
establish a constraint
person can manage
constraints from employee
employee to department
constrain from department
department to employee
constraints and relationship
call as cardinality
ratios and participation
participation constraints lets
replaced this managed
relationship called works
slightly more general
general than managed
general then managed
mandate a requirement
two different ways
employee can work
represent a cardinality
constraint or cardinality
defined or constrained
shows another relationship
department and handles
developing some kind
kind of software
project depart depends
relationship um exist
project entity type
entity type exist
existence self project
project is dependent
doesn t participate
participate it doesn
entity types existence
existence is dependent
attributes for relationships
handles certain projects
project totally participated
attribute called budget
project is handled
project for working
means the department
move the attributes
first figure shows
move this budget
budget is allocated
lose any semantics
things that definitions
shows a figure
employee is identified
identified by pan
received pan number
prepare some kind
entity called insurance
defines an insurance
insurance details identifies
details identifies insurance
identifies insurance record
ties in insurance
record totally participates
entity types department
department and project
project in participation
defined by double
pursue a summary
similarly um attributes
oval a key
meant by conceptual
database is meant
meant for non-technical
composed of diagrammatic
notations like entities
entities entity type
entity type entity
type entity sets
entity sets attributes
sets attributes multi-valued
attributes multi-valued attributes
attributes and key
relationships an identifying
relationships and weak
identify this entity
modeling of database
continuing discussion
transactions database
database systems
fact looked
produce consistency
consistency results
fact transaction
transaction execution
important things
database system
cbse results
state board
board results
results announced
large number
whats result
simultaneous heats
system fails
system number
simultaneous users
railway information
information system
notice summer
railway tickets
tickets online
thirty thousand
railway reservation
critical systems
systems database
losing consistency
ticket overwrites
inconsistent state
system state
important requirement
last class
populated protocol
simultaneous transactions
data items
reservation case
transaction finishes
finishes operating
transaction manager
locking phase
deadlock scenario
commit point
phase locking
transaction throughput
optimistic algorithms
pessimistic algorithm
optimistic class
stamp algorithms
locking algorithms
based algorithms
popular algorithms
pessimistic algorithms
detail fashion
algorithms case
database transactions
transactions notice
admission control
last point
consistencies check
consistency check
execution verses
correct value
executing transactions
people proceed
wrong values
consistency criteria
assume lots
optimistic spectrum
pessimistic end
full spectrum
grade detail
pessimistic side
stamping protocols
optimistic protocols
protocol call
stamping protocol
locking kind
stamping algorithm
stamp based
based protocols
multi version
version protocol
version protocols
multiple copies
data item
protocols concurrency
concurrency control
control protocols
locking protocol
basic version
version multi
multi protocol
version locking
optimistic kind
large extends
applied depends
large extent
system configuration
optimistic side
preferred seats
theatre compared
convenient place
aspect means
high conflict
conflict data
small set
small percentage
transactions operated
single seat
multiple people
ten people
end database
pessimistic concurrency
pessimistic kind
consistency enforced
transactions concerned
sample graph
start showing
consistency checks
incoming transaction
entry point
end point
makes consistency
consistency criterion
precedence relationship
specific order
correct order
conflicting data
transive relationship
evening snacks
first event
dinner event
breakfast event
future relations
relations doesn
transition cycle
consistent execution
problem verses
optimistic concurrency
control algorithms
transaction graph
graph fix
control algorithm
done consistent
timestamp algorithm
wil disallow
serializable schedules
conflicting operations
ultimately transaction
transaction boils
operations performed
operations transaction
transaction performs
correct subscribe
transaction number
operation number
first transaction
xth data
manipulate including
including data
executing context
actual shows
sample transactions
banking transactions
withdrawing cash
individual accounts
balance amount
current balance
consistent results
simple read
right operation
conflict operation
withdrawing money
final result
interested finding
produces inconsistent
inconsistent results
operation executed
transaction suffix
actual operation
operation suffix
ago transaction
conflicting operation
item data
minute thing
start executed
lock remember
previous lock
lock point
finishes transaction
release locked
obtained lock
importance condition
problem cycle
explanation makes
consistency requirement
transaction starts
start execution
issues relate
execution model
done case
optimistic scenario
optimistic algorithm
transaction data
earlier case
set transaction
manipulated set
items relating
previous things
things done
validation check
transactions takes
takes value
local copy
intuitive explanation
understand whats
whats happening
detail discussion
value produced
finish execution
validate phase
manipulated value
produce value
result difficult
detected submit
produced inconsistent
start executing
optimistic things
locking overhead
validation phase
pass validation
pessimistic scenario
transactions operate
thing data
affect means
start reworking
larger number
excellent results
transaction processing
processing system
stamping scheme
detail transcriptor
c.udayakumar database
database management
management system
system prof
prof d.janakiram
d.janakiram lecture
control part
broad class
based concurrency
concurrency algorithms
stamping algorithms
operations done
based algorithm
algorithm check
results consistency
stamp algorithm
algorithms work
recovery properties
properties commit
commit properties
concurrency algorithm
earlier lecture
locking algorithm
commit protocol
commit based
simple graph
basic algorithm
algorithm concurrency
basic things
first thing
real life
lord venkataeswara
tirupathi tirupathi
tirupathi devasathanam
times sticker
band means
people whats
stamp serialize
increasing order
serialize order
important concept
concept notion
distributed transactions
single transaction
sub transactions
multiple sides
wrist watch
additional problem
problem solved
zone foe
zone chennai
generating transactions
single clock
concurrency problem
distributed databases
simple level
system giving
basic steps
transaction start
consistent fashion
read write
write operations
stamp read
read operations
stamp write
ten twenty
eleven thirty
laterc point
data base
highest transaction
stamp transactions
earlier transactions
write operation
validity criterion
preliminary thing
algorithm maintains
actual execution
transaction issues
read operation
current transaction
stamp value
operations understand
stamp order
senior junior
junior relationship
value return
case transaction
issuing transaction
transaction issuing
higher order
stamp restart
higher values
current values
rts wts
rts shows
transaction larger
wts shows
rts rts
rts value
consistency thing
earlier return
written value
transaction succeeding
line operation
operation transaction
issues write
similar case
current value
value wts
inconsistent situation
stale value
read value
reject means
higher stamp
stamp transaction
counter value
higher number
large means
entire earlier
earlier history
physical clock
stamp generating
clock takes
interesting algorithm
starting point
transaction excepted
iit gate
transaction didn
interesting ways
algorithm works
transaction read
write check
abort conditions
updated rts
write stamp
highest value
typically rts
counters data
data counters
transaction value
algorithm verses
remember write
simple case
acquire lock
finishes release
important thing
locking criteria
initial point
optimal execution
locking strategy
attempting accessing
accessing data
access data
access lock
release lock
point onwards
transactions manager
validation point
transaction commit
transaction commits
cascading abort
similar thing
commit protocols
simple mechanism
simple exercise
transactions writes
write takes
modified value
transaction coming
transaction depend
transactions affects
pre write
write instruction
write transaction
rep writes
permanent storage
pre writes
consistency point
transaction updating
commit stage
transactions pre
actual database
modification taking
taking pre
integrating commit
concurrency protocols
transactions issues
database times
times stamp
buffered pre
stamp buffered
buffered item
write pre
subsequence reads
actual wts
system reads
item doesn
make things
obvious reasons
write value
read issuing
aborted transaction
case read
write buffered
buffered means
actual writes
read transaction
read transactions
write happen
writes affects
pre buffered
buffered writes
minor modification
lecturer transcriptor
last lecturer
control techniques
stamp mechanism
mechanism works
stamp protocol
stamping techniques
transactions incoming
incoming read
concurrency requirement
optimistic version
based protocol
optimistic sense
version concurrency
version solved
solved problems
control solve
consequent problem
degenerated case
temporal database
changed value
database concepts
interesting accept
version based
last lecturers
questions review
review questions
optimistic protocol
first phase
read phase
extra phase
phase make
write phase
subsequent validation
required things
transaction passes
transaction doesn
fails validation
validation validation
required data
system checks
transactions passes
right phase
right value
read sets
write sets
transactions read
transactions validate
consistencies produced
value transaction
phase irrespective
phase depending
transaction enters
validation sice
system proceeds
pessimistic case
transaction aborted
results write
done correct
wrong results
true optimistic
needing lot
transaction don
write set
set conflict
conflict write
write write
write conflict
committed set
set done
maintain information
committed transactions
data sets
committed database
committed sets
sets depending
strict order
conflicts coming
experiment explanation
committed transaction
non conflict
write phases
pre processing
thing happened
transaction writer
writer programmer
reads sets
phase starting
phase end
true conflicting
items produced
read values
validated conflict
common items
write item
read set
phase started
start reading
first condition
theread phase
common data
separate data
start read
phase staring
read start
phase start
condition satisfied
reads happened
transaction supposed
phase validation
transactions conflict
phase ensures
valid regerates
regerates reads
future transactions
interesting fact
vehicles coming
iit chennai
open air
air theatre
theatre student
student activites
activites centre
limited parking
parking lot
limited space
hundred cars
gate level
cars inside
gate raised
first car
car enter
transaction committing
specific lot
gate doesn
makes sense
cars enter
system doesn
high contention
pessimistic approach
aborted transactions
fifteen cars
inside put
large restriction
approach doesn
quiet good
trans actions
transactions proceed
basic concurrency
algorithm discussion
broad perspective
algorithms belonging
pessimistic broad
fifteen twenty
twenty minutes
complete set
multiple versions
version gnome
problem concurrency
banking database
people withdrawing
finishes writing
multiple version
value produce
value produces
versions produces
older value
generated case
historical databases
value twenty
database values
stock prices
stock price
price stock
stock value
tcs stock
means component
component value
entire history
version database
previous value
keeping values
previous values
simple multi
control protocol
specific case
earlier extension
general multi
produced value
transaction producing
value remember
transactions leading
highest tome
tome stamp
highest version
version produced
latest value
earlier condition
simple compare
highest rts
current read
highest read
basic multi
specific limit
highest cost
database storage
storage overhead
tricky versions
larger cost
protocol extension
read lock
write lock
lock read
shared lock
exclusive lock
transaction holding
lock item
read clock
item things
lock call
certified lock
return value
lock data
data value
value item
item read
lock database
question mark
value write
intention lock
transaction executes
commit commits
higher level
level concurrency
additional lock
locking extension
interesting extension
distributed transcation
transcation models
data executing
single system
explicitly state
underline assumption
model transaction
transaction model
single computer
computer system
operating system
system image
transactions models
reservation system
train leaving
delhi sitting
physical connectivity
telephone line
lease line
display interface
wide area
area network
local area
distributed system
computer systems
single node
node kind
end user
transactions execute
system computer
banking system
chennai sbi
sbi branch
fund transfer
hundred rupees
chennai branch
mumbai branch
network doesn
underlined network
atm network
optic network
satellite network
connectivity exist
vice versa
account account
begin transaction
transaction end
end transaction
entire transaction
remote access
remote information
system case
acid properties
transaction debiting
power fails
log records
consistent state
transaction executed
credit part
debit part
log logs
transaction depending
transaction logs
logs record
imagine account
node account
executed part
important issue
friends separated
requires phone
phone call
phone ring
present show
make assumptions
communication compare
communication primitives
multiple nodes
protocols takes
extra dimension
system node
fail network
partition network
temporary network
network failure
thing happen
distributed transaction
model model
concepts relating
model starting
high level
transaction models
essential difference
centralized system
system database
distributed data
data systems
credit debit
debit transaction
debit portion
credit portion
chennai node
root transactions
root transaction
complete transaction
transactions agent
sub transaction
main transaction
transaction agent
node agent
access account
atomicity concurrency
concurrency isolation
isolation durability
rupees detected
durability properties
highest level
root agent
agent spawning
local node
sub portions
transaction properties
commit property
nodes manager
manager running
dtm stands
distribution distributed
manager distributed
node ensures
local execution
ltm ltm
local transaction
ltm stands
earlier side
transaction property
preserved acid
acid property
credit credit
credit transaction
ltm preservers
related things
centralized database
database context
ltm make
started node
agent starts
local machine
node obeys
complete model
transaction distributed
centralized scenario
values modifying
items modify
modified values
distributed scenario
multiple agents
agents running
reason node
protocol commit
specialized protocol
general agreement
agreement problem
protocol case
agents involved
achieving consciences
first part
node failure
failure partitions
phase commit
actual commitment
natural integrates
phase extension
sudden things
things happen
phase protocol
failures occur
protocol blocks
failure occurs
occurs wait
good property
distributed systems
system resilent
protocol works
control mechanism
transaction systems
protocol means
actual agent
nodes distributed
complete part
finish debit
debit transactions
sufficient funds
coordinate transaction
first coordinator
local agent
full detail
steps done
coordinator participant
coordinator imitates
prepare message
prepared message
special message
coordinator enters
wait state
final outcome
weight state
out period
replies doesn
negative side
safer decision
layer point
participant abort
decision relating
undecided state
state wait
ready message
message means
successfully part
coordinator assumes
transaction tomorrow
required locks
locks participant
participant writes
locks preserving
manager ltm
ltm ensures
local transactions
transactions properties
ready messages
means phase
preparing phase
phase phase
separate phases
reason participant
abort answer
answer message
abort message
message participant
transaction participant
coordinator receives
commit decision
enters phase
decision commit
period coordinator
coordinator receive
coordinator received
agents transaction
commit message
write decision
stable storage
logical thing
message commit
commit log
stable log
participant receives
message receives
transaction committed
send acknowledgement
complete log
successful completion
done phase
first action
participant make
stable logs
point enter
enter phase
commit messages
participant replies
coordinator waits
abort decision
failures scenario
state transition
transition diagram
coordinator state
diagram coordinator
state diagram
initial state
participants show
commit command
command commit
coordinator reaches
commit state
abort command
command message
sufficient replies
period reach
participant state
ready state
acknowledgement message
message abort
abort state
initial stage
protocol resilent
failures transcriptor
basic protocol
participant protocol
coordinator protocol
protocol working
coordinators starts
prepares message
participant failed
basic part
participant site
participant start
coordinator decision
failure scenarios
phase participant
phase network
first kind
participant fails
participants fails
coordinator times
decision coordinator
participant failures
recovery check
participant checks
coordinator tells
replied message
decision depending
read message
participant failure
final log
participant fail
coordinator failure
coordinator fail
commit restarted
restarted protocol
reentered means
number fails
election algorithm
basically protocol
interesting problem
phase means
participant received
live participant
live participants
coordinator fails
participant doesn
simple scenario
recording person
blocking protocol
automatic modes
coordinators fails
nice thing
participant suffer
failure suffer
suffer means
non blocked
interesting case
sub cases
first case
simple thing
participant elect
leader coordinator
earlier coordinator
coordinator recovers
recover wait
coordinator failures
participants sides
coordinator coordinator
important case
bit lucky
remain participant
protocol recover
typical problem
system crash
trouble recovery
recover recover
coordinator moving
reach prepare
prepare commit
harm done
coordinator part
usual send
commit participants
state message
message message
timeout message
participant reaches
case participant
debit state
state call
receives prepare
final decision
commit instruction
additional state
fails reach
commit abort
actual failure
usual participant
similar similar
coordinator failing
recovery takes
takes place
last phase
sub case
case coordinator
coordinators state
directly don
interesting thing
leader election
ascending order
highest node
live node
participant discovers
participant discover
basically discovers
process finding
node live
fail participant
coordinator starts
recovery protocol
failures tolerate
failure figure
coordinator takes
algorithm protocol
reenter protocol
multiple failures
reentrance protocol
understand point
node decision
coordinator realizes
entire protocol
protocol staring
phase things
protocol terminate
pcm state
elected coordinator
participant based
protocol terminates
forward direction
state depending
node failures
network failures
recovery process
delhi node
back bone
bone network
involved connectivity
concerned doesn
message chennai
node doesn
positive thing
basically network
normal case
timeout case
bangalore node
complicated network
southern nodes
northern nodes
problem translates
reachable bangalore
required messages
participants failure
coordinator depending
participant nodes
participants nodes
distinction network
complicated situation
multiple partitions
network partition
interesting assignment
network partitioning
majority partition
ended problem
network partitions
distinction failure
basic commit
concurrency protocol
class transcriptor
earlier lecturer
face commit
protocols work
growing phase
transactions acquires
actual point
acquiring locks
shrinking phase
serializable order
basically transaction
execution point
start point
right assume
earlier value
general execution
locking commit
commit phase
continued execution
finished execution
execution phase
isolation property
earlier diagram
diagram nut
simple extension
protocol make
make sense
commit transaction
route transaction
node transaction
spawn sub
actual commit
acquire locks
protocol outcome
blocked transaction
simple reason
case data
actual nodes
local data
locals data
remote data
items assume
remote lock
send request
request lock
takes care
transaction sub
lock requires
lock request
root node
node root
children node
root acquires
transaction children
children transactions
tree structure
child nodes
leaf nodes
process data
intermediate nodes
nested transactions
nested transaction
intermediate node
processing involve
higher nodes
locks acquired
doing processing
serializability condition
returning lock
ensure serializability
lock acquired
simple tree
structure nodes
inherent order
execution proceed
finish right
serilaizability requirement
distributive system
earlier discussion
discussion transaction
stamping schemes
basic stamping
logical lock
lock value
local clock
synchronized clock
logical synchronization
stamp reflect
total order
significant bit
higher bit
synchronized bit
clocks clocks
transaction originating
transaction entering
stamp corresponds
node synchronizing
logical locks
mutual extension
extension algorithm
lamports clock
mutual exclusion
write data
data based
timestamp timestamp
increasing value
stamp distributed
global system
serializability order
distributed execution
stamp scheme
straight forward
case ensuring
logical clocks
interesting extensions
optimistic extension
send set
optimistic scheme
replicated database
transactions modification
update list
basically commit
read list
write list
set consist
non conflicting
wts tools
tools applied
condition doesn
transaction wts
consistency rules
pending list
conflicting list
dash direction
list transaction
earlier transaction
conflicting transaction
execution sequence
sequence node
conflict pending
differ making
differing voting
good idea
clock case
case vote
clock didn
future things
list clear
transactions waiting
vote case
majority votes
majority vote
permanent write
conflicting things
scenario verses
locking based
interesting scheme
visting tirupathi
tirupathi temple
scheduling transaction
order inn
basically end
end finish
ten thirty
serializabililty condition
give start
transaction finish
clocks times
consistency condition
conflicting transactions
executing times
operation concerned
execution concerned
system dr.s.srinath
dr.s.srinath lecture
transaction recovery
session today
today staring
recover data
failures failures
disk crashes
crashes power
power shutdown
network connection
connection failure
main memory
persistent storage
disk good
good recovery
crash schedule
database processing
processing environment
correct recovery
wrong recovery
recovery based
separate topic
transaction transaction
vast topic
recovery aspect
term oltp
online transaction
application program
interactively process
process database
database transaction
accurate fashion
air line
line railway
reservation systems
main characteristic
railway ticket
conform ticket
waiting list
people accessing
queuing system
transactions happening
cash dispensed
wire transfer
transfer mechanism
doubt environments
environments require
require super
super market
checkout systems
hospitals trading
brokage system
shares happening
oltp environment
small banking
users performing
net banking
money deposit
account number
transaction begin
database operations
operations begin
initiate database
concurrent applications
thread process
scheduling processes
processes running
account holder
performing wire
wire transferred
depositing amount
thousand rupees
previous transaction
transaction finished
small bug
previous balance
fifty thousand
unrealistic situation
booking train
train tickets
telephone calls
concurrent activities
inconsistent database
first activity
separate distinct
distinct activity
separate break
break activity
logical units
transaction activities
database activities
activities transaction
logical unit
program execution
entire activity
account depositing
account constitutes
database updates
account vice
transactions depending
handle transactions
users environment
withdrawal money
meaningful semantic
semantic activity
semantic process
environment wire
operations network
network done
activities reading
meaningful activity
control recovery
cases users
users depend
water considered
considered transaction
database level
combine database
maintain consistency
process transactions
atomic unit
stringent definition
atomic atomic
smaller works
perform ninety
ninety percent
percent transaction
entire set
consistent database
database returns
work concurrency
atomic units
managed concurrency
concurrency recovery
times define
make transactions
valid state
oltp application
correct transaction
transaction lead
synthesis enter
basic properties
properties transaction
transaction acid
acid stands
atomicity consistency
consistency isolation
property atomicity
inducible unit
transaction performed
consistency consistency
databases consistent
consistent transaction
violates integrity
integrity content
integrity constraints
enforced database
transaction violating
violating isolations
readings updates
writes operation
simultaneous fashion
net effect
serial order
establish equivalence
serial sequence
transaction completed
last property
term commit
made database
physical activity
expensing money
commit operation
committed money
back money
commit operations
transaction involves
involves wire
dot balance
balance minus
balance balance
amount amount
amount number
reason databases
databases crashes
disk crash
atomic operation
recovery operation
amount perform
performing half
atomic transaction
query planned
thread performing
balances added
transaction fails
transaction consistent
normative failure
violated integrity
integrity constraint
odd raf
users account
maintain consistencies
concurrent operations
person holding
holding account
reading account
account balance
balance debiting
amount account
begin operations
serializable schedule
serialize schedule
thing committed
money dispense
dispense information
dispense money
whats happened
active set
initial set
last statement
transaction discovers
longer proceeds
normal execution
violation integrity
violation requirement
fail state
successfully dispense
aborted state
terminated state
active state
partial commit
reach fail
committed state
state turns
simple technique
shadow copy
copy shadow
simple inefficient
sophisticated techniques
maintaining acid
transaction shadow
copy transaction
transaction assume
single file
consistency durability
transaction make
databases okays
orginal database
updated copy
original database
entire database
entire file
safe commit
original file
unsafe delete
properties database
performed consistency
shadow copies
support isolation
file remains
transaction terminates
failed transactions
previous shadow
notion serializability
concurrent transaction
transaction taking
taking place
taking fifty
fifty rupees
account putting
account transaction
ten percent
serial schedule
correct schedule
serial schedules
activities pertaining
color activities
times point
begin read
minus fifty
activites performing
data element
first operation
operation involved
involving data
serialized schedule
schedule finishes
first activities
database activites
term conflict
conflict serilazability
first defining
execution order
contents data
element doesn
activities database
database schedule
schedule activities
transaction perform
encountering conflicts
conflict equivalent
equivalent schedule
serilaizable schedule
equivalent criteria
conflict equivalence
conflict serializable
alternate weaker
weaker notion
notion serialzability
view serialzability
serialzability conflict
conflict serializablity
stringent property
conflict serializability
view serializability
item queue
queue suppose
dbms system
element queue
initial value
value queue
dependency maintained
last operation
final write
whichever schedule
reads data
view equivalent
schedule note
pure serialize
reading data
write dependency
writes write
last transaction
first data
read queue
last element
swap updates
encounter conflict
database view
find view
blind water
water blind
blind write
hall mark
blind writes
last concept
recoverable schedule
database recovery
read data
performing read
durability condition
transaction events
database crash
cascading roll
cascading rollback
rollback situation
cascading effect
roll backs
large amount
system failure
undesirable undesirable
undesirable thing
lease role
role undoing
oltp environments
recoverable cascade
cascade list
bring end
introduction session
dealing database
note operation
atomic atomicity
atomicity transition
recoverable schedules
conflict view
list schedule
rollback non
non transaction
eventhough transactions
orginal transaction
session lecture
previous session
recovery mechanisms
back ground
atomic form
log based
based recovery
suggests log
recovery means
transactions happen
happen cert
log files
transactional requirement
data bases
mechanisms log
base system
system failures
media crashes
disc crash
communication failures
databases started
machines failed
failed communication
transaction failures
reasons including
constraints transaction
dead locker
last case
transaction failure
account doesn
volatile memory
providing recovery
require atomicity
atomicity means
performed half
similarly consistency
consistency requirements
consistent data
valid transaction
cons integrity
atomicity requirement
isolation constraint
property states
multiple transaction
transactional updates
first update
inter living
conflict serialisibility
view serialisibility
physical operation
dispensing money
money succeeds
atm dispenses
required amount
money shouldn
base systems
transaction lies
first state
failed state
states require
require recovery
lost atomicity
base crashes
system crashes
cases undo
transaction finds
transaction rolls
transactional activities
base activities
conflicting activities
data elements
data data
earlier schedule
operations data
update operations
eventually end
conflict serialize
recovery mechanism
stock prize
dis displayed
changed data
prevent non
occurring simple
preventing non
modified data
turn modified
modified element
operation tells
committing crashes
crashed transactions
long running
running transaction
hrs transaction
short transactions
transaction crashes
media crash
systematic fashion
date base
recovery strategies
deferred update
update strategies
strategies deferred
update techniques
techniques update
transaction reaches
deferred updates
updates update
techniques data
transaction progresses
recovery techniques
impacts recovery
first issue
cache management
operating systems
buffer caches
caches buffer
buffered areas
disk block
disk sector
systems perform
disk sectors
buffer cache
disk sanity
sanity checks
systems crashed
crashed midway
system construct
application programs
user level
level programs
base recovery
write operating
defer writings
management systems
cache pages
dbms caches
cache flush
system crashed
shadow paging
recovery technique
paging technique
cache contents
maintain logs
log file
history information
growing forever
check point
check pointing
separate process
introduce check
check points
involves suspension
pointing criteria
memory buffers
point note
force write
pointing operation
resume transaction
fussy check
usual check
pointing techniques
techniques note
pointing requires
requires suspension
impacts data
base performance
biggest overhead
main overhead
disk blocks
activities resume
point entry
flushing actives
actives activities
previous checkpoint
older log
log entries
background operation
point operations
cache buffer
update recovery
updates means
run half
point database
force written
perform recovery
single user
user environment
sequential data
base engine
simplistic case
techniques technique
technique works
process starts
last check
user operation
first element
disk note
write items
items logs
item belonging
previous check
active transactions
physical operations
ten data
values back
update technique
redo operations
commit tag
active transaction
multi user
concurrent transactions
serialized fashion
recovery part
concurrency manager
managing concurrency
systems design
locking ess
write locks
read locks
exclusive locks
element read
technique shown
recovery algorithm
recover make
serializability conditions
pointing event
event happened
pointing data
pone data
long transaction
update operation
redo operation
updated transaction
syste system
updates recovery
tranasc data
efficiency issues
small thing
last update
previous update
making updates
updates moving
moving backwards
undo operations
disk operations
enormous amounts
large transactions
recovery data
base updates
updates happening
log entry
finished transactions
undo operation
perform undo
extra element
transaction log
write element
item element
element belongs
reverse order
oldest value
idempotent operations
idempotent operation
undo couldn
undo process
transactions list
undo policy
user environments
redo policy
cache logs
base update
update transaction
transaction deferred
updates happen
physical activities
upper application
force writing
writing logs
issues concerned
affect recovery
recovery processes
efficiency disk
impact recovery
dbms cache
safely throw
historical information
techniques deferred
idempotent undo
prevent cascading
crash recovery
base management
logical conclusion
entails database
non frequent
frequent kind
classify failures
failures system
common kinds
failure system
machine crashes
common transaction
failures entail
entail failures
illegal transaction
encounter communication
transaction midway
frequent failures
disk developing
bad sectors
physical damage
physical memories
primary memory
main property
bases follow
transferring money
transaction shou
base consistency
automatically triggers
commercial data
base starts
multiple transactions
efficiency reasons
concurrent fashion
updates made
serial fashion
atm transaction
automatic teller
teller machine
machine transaction
dispensed money
terminated transaction
familiar shows
schematic fashion
failed transaction
transaction depends
depends depending
back operation
recent consistent
state half
crash happened
bank account
balance account
read element
crash suppose
transaction reads
recovery log
wla write
logging addresses
logging write
techniques based
transaction makes
point transaction
committed entry
bases updated
logging suggests
techniques requires
general idea
user system
user data
perform lets
enforce isolation
base item
values written
huge spurt
entire life
life span
heavy disk
undo slash
slash redo
redo transact
redo recovery
fail transaction
successfully perform
unfinished transactions
historical data
increasing file
log suppose
undo based
transaction undo
undo variety
recovery protocols
redo slash
slash undo
tech update
based transactions
pure undo
backward chaining
previous operation
compensating log
compensating operation
compensating transaction
credit thousand
compensating operations
backward chain
based operation
transaction activity
transactions data
balancing factor
store versus
impedes performance
widen interval
first suspend
costly operation
large data
railway zone
southern railway
possibly hundreds
requests coming
cancellations lets
people waiting
reservation centers
centers waiting
remember taking
fuzzy check
normal check
resume operations
physical layer
point log
quiescent state
non quiescent
quiescent check
unlike fuzzy
physical disk
uncommitted transactions
start check
transactions running
end check
log backwards
last entry
entry onwards
incomplete transactions
pointing operations
normal quiescent
quiescent based
based check
base pages
logical entities
disk cooperation
updated data
original data
data side
updated page
original page
perform multiple
multiple write
multiple update
paging suffers
extended period
technique work
small illustration
page table
page address
current page
page pointer
shadow page
modification request
shadow pointer
shadow pages
current pages
page make
first modification
point requires
requires creation
quiescent mode
mode check
main issue
idempotent remember
word idem
idem potent
potent idempotent
make undo
operations idempotent
manipulating pointers
basically place
larger data
lose data
media failures
fortunately media
crashes happen
frequent fashion
power offer
system hanging
taking backups
simply taking
line media
huge amount
giga byte
giga bytes
operational data
tera bytes
optical storage
storage takes
backup storage
online fashion
railway reservations
everyday twenty
reservation activities
book train
perform online
online backup
backup operations
basic idea
online operations
complexities involved
archival level
full dump
entire archival
entire data
archival storage
level incremental
incremental dump
last archival
online archival
pointing check
archival requires
archival process
dbms activities
base operations
last consistent
dump operation
simple algorithm
begin dump
logging operation
archival data
data transferred
enter end
end dump
recent full
incremental dumps
base log
surviving log
logging method
undo log
redo log
operations depending
logging operations
commercial dbms
dbms systems
systems today
right trade
pure redo
verdant research
research centre
aries protocols
aries depend
transaction states
acid criteria
crashes media
crashes transaction
pages created
encountering garbage
garbage system
system pages
taking online
online backups
handling media
incremental backup
backup based
conventional idea
topic occurs
implicit assumptions
clerical users
retrieving data
operational aspects
larger system
ticket entry
efficiently search
make modifications
day today
today operations
strategic decisions
tactical decisions
operational people
folk sitting
ticket counter
reservation counter
people traveling
first class
offer concessions
class sleeper
operational issues
operational situations
people coming
booking tickets
books tickets
nearest reservation
address information
turn show
base design
usage scenario
data usage
strategic decision
decision making
making usage
data warehousing
warehousing data
term warehousing
inventory stocks
strategic importance
civil engineering
engineering project
prime importance
importance depending
transportation logistics
logistics coordination
large infrastructure
infrastructure project
cost constraints
crucial strategic
analogous sense
data warehouse
data sources
analytical processing
analytical nature
operational nature
transactional nature
analytical queries
vast subject
research papers
commercial implementations
data warehouses
small part
vast ocean
important difference
processing versus
traditional data
data cleaning
data integration
parts deal
warehouse core
data models
thumb rules
warehouse design
index structures
hash based
based indexes
divide data
withdraw money
pin number
frequent updates
daily basis
account information
functional dependencies
redundancies occurring
update anomalies
anomalies suppose
redundant copies
address branch
branch location
location balance
balance transaction
transaction history
local relevance
geographic location
point queries
point query
individual tuple
last set
ten transactions
specific tuple
relevant information
long period
long set
data collected
past ten
ten years
peak times
people travel
salary range
range travel
sleeper classes
data set
infrequent updates
queries requires
huge amounts
average age
person traveling
sleeper tickets
integrated data
global relevance
data source
reservation center
larger set
performance issues
data occurs
query times
update times
aggregate operations
return query
query results
interactive response
large period
transactional data
data limits
oltp systems
transactional processing
processing systems
maintain transactions
operational queries
employee number
salary field
phone number
supplies department
references find
suppliers department
manager managers
typical analytical
analytical produce
typical transactional
transactional queries
create transactions
employee attrition
attrition scene
scene changing
attrition information
aggregate employee
manufacturing unit
tai taiwan
vague query
financial viability
viability profits
information sources
support olap
olap queries
queries involving
aggregations aggregated
aggregated queries
post retrieval
retrieval processing
query retrieval
decision maker
schematic diagram
oral architecture
oltp units
large organization
life insurance
insurance corporation
indian railways
huge number
elements everyday
integration process
dirty data
oltp sources
data scrubbing
data marts
data mart
specific kind
specific oltp
oltp segment
segment suppose
express train
train reservations
express trains
rajdhani express
rajdhani expresses
warehouse data
small warehouses
obtain data
oltp data
uniform standard
data representation
duplicate information
sources suppose
open suppose
booked tickets
significant period
buying tickets
erroneous information
erroneous aggregate
aggregate information
aggregate queries
general model
integration unit
black box
cleaning unit
data flows
unidirectional process
sources pass
cleaning pass
back flushing
change representations
suggests data
cleaning operations
multiple encodings
ascii base
encodings multiple
multiple locales
locales multiple
multiple languages
standard encoding
spurious abbreviations
writes mahatma
mahatma gandhi
gandhi road
m.g road
buy tickets
semantic equivalence
intelligent algorithm
equivalence chennai
data note
official documents
extra knowledge
governmental policies
multiple standards
metric systems
duplicate data
age field
entered sales
sales values
typographical errors
duplication appearing
bala sudar
center sighting
phone numbers
semantic duplication
inconsistencies incorrect
base designer
center number
cost considerations
outdated meaning
class sleepers
longer exists
railways today
inconsistent duplicate
inconsistent associations
total sales
sales figure
semantic inconsistencies
february thirty-first
integrative violations
referential integrity
referential inconsistency
ten lakh
lakh rupees
rupees sales
sales reported
data crop
single biggest
research problem
single thumb
thumb rule
out suppose
correct rules
junk data
junk outputs
output data
cleaning requires
considerable knowledge
tacit knowledge
geography governmental
policies metrics
size fits
cleaning complexity
complexity increases
history span
typical data
data process
cleaning process
data analysis
meta data
transformation rules
clean data
user specifies
data level
transforms dirty
test test
test data
sample data
back flow
cleaned data
great detail
typical examples
illegal values
mix min
cardinality criteria
max min
illegal value
spelling mistakes
gram outliers
gram transformation
gram ash
grams based
checking spelling
compare values
values sets
missing values
number rows
null values
data training
duplicate elimination
hash merge
merge algorithm
storage structures
structures session
tuple run
hashing function
tuples duplicate
duplicate tuples
duplicate values
hash key
eliminate duplicates
person information
fifty lvl
lvl road
sorted neighborhood
neighborhood techniques
detecting misspelling
algorithm shown
previous case
table based
misspellings theer
high likelihood
actual spelling
k.j amit
real spelling
multiple passes
misspelling detection
last algorithms
graph based
transitive closure
neighborhood algorithm
equivalence relation
transitive relationship
essential idea
naive sliding
sliding window
window size
eliminating duplicates
common banner
schema integration
integration entails
entails forming
integrated schematic
schematic structure
desperate data
common schematic
merging data
serial number
number model
model color
color stereo
stereo glass
glass tint
retail center
cars cars
serien numeral
data types
performing schema
naming differences
structural differences
differences data
data type
type differences
semantic differences
missing fields
generic architecture
schema integrator
specific stages
extractor maps
standard schema
schema set
common schema
mediator constructs
handles query
query based
extracts data
data crates
logical wrapper
similarly mediator
logical mediator
extracted data
common tool
life easier
eti star
important differences
oltp queries
warehousing system
oltp fields
major issue
proof reading
vidya database
janakiram lecture
first semester
data structures
structures file
file systems
concepts covered
background material
lecture module
hour duration
transacting processing
initial sections
database design
basic concepts
todays lecture
process introduce
term databases
store data
digital form
integral part
today life
today transactions
airline ticket
ticket reservation
underlining databases
costumer data
information user
user information
regular transactions
business processes
underlining data
sense databases
business processing
processing world
key entity
entity interms
applications business
business process
process applications
importance database
recent times
business transaction
business transactions
lic policies
normal sense
paper copy
copy posted
postal mail
bank cheque
transactions business
data online
premium online
email box
entire business
work flow
lic portal
data relating
due dates
lone information
pay premium
paid online
lic database
informations relating
single point
point access
online premium
premium payment
city bank
bank debit
debit card
sbi account
sbi net
sbi database
state bank
gateway payment
payment gateway
database give
confirm life
insurance con
con transactions
transactions detail
client code
indian rupees
service charge
indian institute
technology chennai
payment request
paying premium
payment gate
payment click
confirmation mail
full registration
future requirements
future conform
future reference
organizations databases
doing business
issues involved
double payment
online sitting
sitting right
bank officials
lic officials
customer access
important important
important subject
clear drip
drip trip
trip dot
make payments
underlining examples
simple application
iit madras
database model
database application
purchase computer
competitive rate
rate contract
computer peripherals
processes done
varying rates
computer items
competitive vendor
contract system
purchase procedure
changing interms
regular intervals
required papers
paper based
based system
purchase department
word processing
microsoft word
word providing
comparative statement
computer configurations
manual processing
details provided
varies members
entire process
process starting
vendors quoting
involve lot
large quantity
members involved
good case
business case
automated processing
choosing databases
introducing data
flow elements
first cut
cut requirements
initial flow
key things
contract details
faculty members
note book
book computers
iit specification
specification number
number wise
specifications iit
ten specifications
fourth specification
infotech limited
specific processor
cpu clock
clock speed
cannocial electronics
private limited
specifications matching
specification matching
put order
information organized
back end
information stored
data model
vendor number
required values
navigational query
paradigm programming
grid computing
iit serial
unit price
price unit
monitor category
category thing
table organization
business purposes
flat tables
real world
world data
parts maruti
object data
engine maruti
objects linking
flat model
flat table
table base
base model
relational model
storing data
relational database
developing applications
computer rate
model fix
give information
information infact
eighteen thousand
case assuming
additional component
component cost
cost component
entire relational
system concept
concept makes
vendor doesn
key challenges
conceptual thing
transactions work
important requirements
create tables
underneath server
underscore april
april underscore
tables underneath
approved quotations
approved quotation
note books
vendors quote
pick information
key entities
quotation computers
number chipset
chipset vendor
vendor entity
company user
easy thing
relational tables
create problems
multiple locations
designing database
design concepts
entity relationship
relationship diagram
essential part
price bulk
bulk price
monitor brand
database designed
schema change
schemas change
systems evolve
evolve business
processes evolved
systems evolved
evolved schema
earlier interms
php admin
dev systems
quoted intel
quote bulk
local vendor
acer tft
tft monitors
quoted twenty
default samtel
approved data
approved systems
database tables
computer configuration
first level
level search
database table
last thing
thing happening
happening underneath
required information
twelve thousand
underneath database
summarize whats
underneath tables
database models
case searching
contract allowing
related computer
underlining database
critical interms
supporting automating
proof read
shobana database
system lecture
case study
lecture today
world dbms
relational algebra
query processing
processing engine
indexing methods
world context
interesting real
world database
mysql database
remarkable phenomenon
open source
free software
software phenomenon
software design
source code
completely free
software foundation
allocate free
detail mysql
popular open
source database
gnu public
public license
inter cases
software provided
specific variety
wide variety
embedded systems
large scale
scale information
information systems
operating platforms
www dot
dot mysql
mysql dot
dot org
features mysql
recent phenomenon
mysql stems
small sql
sql engine
simple sql
allowed users
sql queries
simple databases
tweak msql
msql msql
form mysql
company mysql
swedish company
run run
commercial versions
mysql team
free version
application programming
programming interface
eiffel java
java perl
perl php
programs written
send sql
sql commands
database client
tree based
disk tables
storage structure
structure structure
performs index
index compression
storage engines
transactional operations
operations remember
transactional operation
acid semantics
provide atomicity
sense implies
implies recovery
multi threaded
threaded engine
system supports
supports threads
kernel level
level mysql
supports multiple
multiple processors
multi processor
processor machine
process processors
memory allocation
allocation system
thread based
based memory
process based
light weight
weight process
process manages
nice features
fast joins
optimized algorithm
pass operation
join techniques
techniques merge
merge join
join hash
hash join
fast joints
temporary tables
virtual tables
nested sql
sql query
memory hash
hash tables
mysql server
double features
embedded server
mysql supports
atomic data
date type
character strings
set data
enumerated set
atomic types
unsigned integers
tiny int
small int
big int
floating point
point numbers
double precision
precision numbers
numbers characters
characters varchar
variable number
binary large
large object
media object
visual file
variable length
length records
record length
single database
supports functions
sql statement
statement remember
field names
attribute names
select average
total marks
sixty percent
recent addition
sql standard
initial sql
sql standards
supports mysql
outer joins
outer join
join lets
matching values
first table
usual conventional
conventional join
join operator
left outer
dual operation
right outer
supports aliases
recent versions
mysql version
student database
employee database
single query
large databases
sixty thousand
thousand tables
sixteen columns
supports prefix
prefix based
similar strings
prefix match
match strings
indexes rath
complete string
user privileges
password based
based authentication
authenticated user
user logs
authentication privileges
allowed access
evolutionary streams
dbms supports
mysql versions
ansi standard
client connects
standard sql
default mode
minus minus
minus sql
sql mode
default standard
ansi sql
minus ansi
ansi option
command line
set command
set sql
ansi mode
set mode
mysql treats
real suppose
default treat
real number
point number
single precision
precision floating
double cotes
repre representing
string data
double pipe
pipe operator
concatenation operator
vertical lines
ignores spaces
first parenthesis
parenthesis suppose
sql server
function call
default mysql
first parentheses
function names
column names
variable names
sql modes
parsing implications
oracle database
database work
double pipes
double quotes
identifier quotes
ignore space
maxdb maxdb
enterprise application
transactional semantics
large enterprise
enterprise applications
microsoft sql
postgres sql
mysql forty
forty dot
sql extensions
slid etime
comment means
slash star
star slash
macro operations
processing operations
selective execution
query depending
exclamation mark
commented part
select distinct
sql semantics
single sql
file system
separate directory
existing file
case sen
insensitive depending
unix based
linux based
small letters
system commands
rename files
extensions dot
dot myd
myd dot
dot myi
dot frm
employees database
employee dot
myd employee
change employee
files names
storage engine
first place
updation policy
transaction semantics
atomic updates
isolated updates
support recovery
primary storage
earlier versions
isam storage
myisam storage
engine isam
sequential access
access mode
transactional support
support ther
heap storage
managing tables
memory storage
merge storage
isam tables
single merge
merge table
transaction safe
safe updates
provide support
first version
code form
pre compile
compile binaries
bdb storage
ndb clusters
clusters storage
implement mysql
computational cluster
system interface
processing power
support tables
ndb cluster
recent storage
source form
binary forms
compiled versions
relative advantages
specific acid
semantics suppose
debit credit
credit updates
money transaction
full transaction
transactional storage
atomic operations
setting auto
auto commit
transactional atomic
transaction storage
isolation based
based semantics
support log
support durability
durability aspect
concurrent operation
support acid
acid updates
interesting feature
table basis
critical table
full acid
stored procedures
procedures stored
sql statements
stored functions
multiple values
specific semantics
procedures support
latest version
communication complexity
flip side
stored procedure
huge load
compiled libraries
libraries written
specific language
create procedure
create function
function constructs
call constructs
call procedure
embed function
specific value
functions return
input parameters
returns statement
returns clause
thing returns
stored function
specific database
average working
working hours
salaries database
database note
multiple databases
store procedure
implicit command
procedure terminates
prep ending
employeerecords dot
performs updates
employee records
important implication
special kind
eca rules
previous sessions
preliminary support
events mysql
supports views
virtual table
materialized view
transactional applications
applications views
analytical applications
real tables
practical purposes
access privilege
privilege system
read privilege
write privilege
privilege write
drop privilege
view updation
virtual views
create view
view command
replace view
replace construct
mysql handle
handle constraints
calling constrai
handling constraints
specific constraints
primary key
key constraint
unique constraint
constraint ese
null right
transaction rollback
transactional engine
stops execution
offending row
stop execution
constraint violations
null constructs
default constructs
default value
attribute value
query parsing
parsing stage
invalid values
numerical field
numerical overflow
enumerated data
invalid value
enumerated type
element number
based environment
download mysql
internet www
binary versions
pre complied
complied binaries
linux distribution
suse linux
mandrax linux
hat linux
binary rpm
rpm package
red hat
hat package
package manager
linux distributions
static option
static libraries
linking violations
error occurring
mysql client
client packages
complete functional
functional dbms
server part
client part
mysql shared
shared compat
backward compatibility
newer version
mysql mysql
mysql servers
default installed
directory var
var lib
lib mysql
mysql demon
server start
rpm minus
install command
version number
automatically perform
mysql install
installation procedures
directory structure
databases mysql
database holding
holding information
test database
sample database
mysql show
show mysql
columns underscore
underscore prev
host tables
tables underscore
underscore priv
priv user
holds user
valid users
tables privileges
table privileges
based privileges
columns based
based privilege
privilege information
make mysql
dot star
dot dot
command mysql
dot server
global configuration
configuration file
dot cnf
typical global
database directory
user owning
client program
mysql minus
host minus
mysql prompt
user session
issuing sql
quit command
programming interfaces
perl java
apis tht
client library
data structure
structure representing
struct struct
struct structure
struct data
database connection
mysql underscore
underscore res
res represents
underscore init
mysql structure
base connection
real connect
underscore query
mysql fetch
fetch row
row fashion
first row
database semantics
larger application
mysql today
interesting database
source dbms
data sizes
transaction support
limited support
window mac
embedding application
session transcription
srinath lec
conceptual design
design greeting
conceptual modeling
typical database
database process
development process
uod revels
data requirements
application requirements
database runs
application context
database analysis
high-level description
specific terms
specific issues
end users
data requirement
popular models
perform performing
conceptual schema
relationship model
relationship modeling
building blocks
blocks entities
exhaustive review
main points
entity type
simple rectangle
independent existence
entity account
entity manager
logical u-net
department share
intern define
eighteen years
domain represents
attribute lies
normal attribute
simple attribute
multi-valued attribute
composite attribute
sub attributes
derived attribute
present date
key attributes
suppose employees
employee identification
identification number
income tax
permanent account
pan number
number identifies
attributes identifies
entity types
key attribute
front door
back door
default basis
key frequent
weak entity
insurance record
building block
cardinality constraints
cardinality constraint
department managed
employee works
identifying relationship
strong entity
identifying relationships
total participation
department managers
managers project
separate key
project identification
department number
participation implies
relationship implies
greater expressiveness
eer notations
essentially face
is-a relationship
entity class
car is-a
is-a vehicle
monkey is-a
is-a primate
primate is-a
is-a animal
manager is-a
is-a employee
relationship identifies
general class
left hand
hand side
interesting properties
specialization relationship
type car
registration number
type vehicles
car entity
vehicle entity
super class
subclasses undergo
undergo type
type inheritance
call vehicle
road vehicles
vehicles suppose
controlling mechanism
driver seat
steering wheel
special classes
specialized class
class entities
relationship types
class entity
entity participates
relationship type
road vehicle
hold anymore
subclass subclass
subclass entity
entity arise
special generalization
special class
correct inheritance
inheritance relationship
incorrect inheritance
straight line
identify entities
identify attributes
general classes
pan attributes
key inheritance
creating subclasses
type suppose
requires vehicles
require vans
require cars
require trucks
inheritance tree
reverse fashion
company talk
forward process
usage context
generalization classes
first property
specialization classes
generalized class
class objects
smaller number
auto pilots
airplane requires
scale sets
glider requires
forward thing
identify is-a
system context
inheritance semantics
generalization processes
company database
short hand
identified manager
experience field
types sharing
special cla
special cases
common attributes
employee class
specialized classes
classes remain
experience remains
job type
professor belongs
academic jobs
secretary belongs
administrative jobs
distinguished form
form entities
specialized case
predicate-defined subclass
academic right
disjoined set
specialized entity
chair professors
professors chair
external sources
external funding
funding sources
normal normal
normal professors
inheritance trees
overlapping subclasses
total overlapping
chair professor
total overlap
normal activities
partial overlap
generalization technique
union type
banking scenario
cases accounts
account holders
institution institution
individual entity
top run
similar co-notations
subclassing subclass
partial union
complete union
entity set
individuals form
union relationship
full union
crucial concept
unnecessary details
horse power
order relationships
supplier part
supplier project
supplier supplies
ternary relationship
number suppliers
binary relationships
losing meaning
binary relationship
ternary rela
rela relationship
supplier stocks
project requires
quiet close
suppler stocks
parts doesn
higher-order relationships
lower order
instructor offers
instructor taught_during
instructor can_teach
courses offered_in
can_teach instructor
taught_during semester
courses offered
instructor taught
binary ration
ration relationships
relationships exist
higher higher-order
put cardinality
higher-order relationship
examples shows
instructor semester
course-semester combination
course-semester relationship
instructor course-semester
course-semester pair
semester pair
knowledge management
abstraction introduced
aggregated entity
instructor offering
sema semester
offering entity
generalized classes
bus is-a
aggregation offers
aggregation brings
offering requires
major parts
eer notation
university database
gen generalization
small university
means exhaustive
complete database
typical problems
typical kinds
basic entity
students faculty
roll number
birth address
faculty member
quiet similar
non teaching
teaching staff
gender date
faculty staff
specialization tree
person entity
faculty works
faculty heads
heads department
association constraints
member belongs
sponsored project
project means
project entity
non governmental
governmental organization
foundation supports
supports department
relationships foundations
support department
higher-order relation
relation relationship
member collaborates
faculty entity
collaboration extends
lose semantics
enhanced entity
relationship concepts
learn today
first concept
achieve abstraction
losing semantics
subclass inherits
attributes including
disjoined subclasses
union types
order relationship
final concept
abstraction relationship
concepts transcription
vidhya database
design especi
high-level design
users today
design process
databases design
mobile phones
database requirements
functional requirements
functionality requirement
programming requirements
requirements intern
gave rest
parallel processes
requirements gave
previous class
upper stream
give rise
physical schema
human understanding
machine understanding
essentially efficiency
quick updates
updates quick
quick inserts
easy searches
relational data
databases today
telephone exchanges
internal schema
schema structure
nineteen seventies
early seventies
ibm research
web search
codd today
seminar papers
network model
internal storage
retrieval complexity
retrieval searches
main concept
mathematical relation
discrete mathematics
set constitutes
domains forms
intuitive terms
normal english
employees ver
ver verses
underlining basis
standard database
transactional databases
essential concepts
small table
first column
last column
row corresponds
schematic data
ananth kumar
independent data
table represents
related data
data values
table comprising
columns roll
bit deeper
crucial elements
first definition
atomic attribute
person intern
intern comprises
atomic attributes
atomic values
valid student
student roll
roll numbers
indian cities
relation schema
relational schema
crucial definition
student record
date date
role played
domain plays
analogies fashion
attributes roll
student records
cross product
student names
names times
registration dates
model ordering
tuples tha
tuples ordering
mathematical model
ordered roll
sorted order
reality ordering
attributes note
relational scheme
first value
value corresponds
speaking infact
number value
registration value
first normal
normal form
form assumption
assumption infact
first step
normal forms
enhanced maintenance
enhance maintenance
maintenance easy
easy addition
easy searching
easy updation
semantic values
first constraints
domain constraints
obvious right
valid roll
numbers range
domain constraint
constraint specification
unique value
super keys
number forms
combine roll
unique roll
entire record
worst case
entire tuple
multi multiple
multiple tuples
multi set
similar fashion
minimal superkeys
talk talks
table roll
super key
minimal super
employee record
identify tuples
candidate key
candidate keys
company contacts
identify people
performance records
salary statements
student relation
good primary
entity constraints
entity integrity
slight change
relation model
department entity
employee entity
existing tuple
foreign key
relation set
rules hold
first rule
department record
referencing attribute
referencing relation
existing tuples
diagrammatic fashion
relational schemes
employee schema
department schema
foreign keys
constraints hold
last kind
semantic integrity
application specific
basic relational
algebra operations
delete operations
retrieval operations
basic operations
select select
project operation
select operation
simple operation
existing relation
data tuples
salary greater
sigma salary
employee relation
attributes salary
general form
select condition
condition relation
conditional expression
formal grammar
essentially condition
logical expression
attributes names
select salary
male employees
unary operator
select operator
operator operates
select relation
selection criteria
operation note
select operati
operati operation
output relation
input relation
employee table
tuples return
number tuples
compact fashion
select input
last properties
properties shows
quiet interesting
select based
project operator
entire tuples
hand wha
projector operator
salary attributes
salary columns
selected set
general forms
form project
project attribute
attribute list
operator returns
main properties
employee numbers
forming duplicates
project operations
operations removes
removes duplicates
returns results
first point
project includes
incorrect expression
relation composition
relational operator
operator select
select operators
operators returns
project return
important property
relational operators
shows project
outermost operator
innermost operator
relation doesn
operator finish
finish finishes
created forms
salary statement
conclude today
major question
operators expect
department relation
spans employee
cartesian join
project operators
operators require
rudimentary operator
efficient ways
cartesian product
lab attribute
attribute lab
lab table
faculty heading
lab belongs
relational query
tables select
select student
student dot
dot lab
lab dot
table equal
combine student
query evaluating
relations student
big relation
dot roll
number student
lab lab
dot faculty
dot department
cartesian cartesian
join represents
canonical join
first tuple
lab record
made sense
student works
cartesian joint
joining tables
ten thousand
thousand records
ten records
theoretical interest
canonical form
operator requires
join operators
theta join
algebra constructs
optimized performance
human consumption
human beings
build sound
sound software
mathematical formulism
produce relations
combining relations
combine relations
sophisticated forms
srinath lecture
mathematical concept
relation represents
valid assignments
mathematical underpinnings
underpinnings bet
machine consumption
efficient storage
storage retrieval
data modal
attributes belongs
students belongs
age attributes
valid age
relation relation
student compressing
registration date
algebra expressions
tuples founds
concept today
valid value
basic retrieval
retrieval operators
operators select
operators represented
greek letter
letter sigma
sense specific
specific columns
project relation
specific relation
relations remember
first relation
lesser number
first join
operator shows
join symbol
product symbol
parallel lines
join combines
join condition
operator theta
lab relation
shows student
join operations
lab condition
join lab
joint condition
lab relations
student times
times lab
join con
con join
lab tables
operator starts
join computed
general answer
equality student
join relation
subscript join
join conditions
equality condition
logical condition
condition thy
join attributes
sets student
logical operator
comparison operator
equijoin operator
equijoin condition
natural join
student star
star lab
middle attribute
common attribute
attributes match
renaming operator
modify student
modify lab
achieve modification
assignment yesterday
first expression
projects roll
lab attributes
turn assign
teaching assistant
number attribute
lab replaced
incoming relation
assignment statement
rename operator
greek symbol
symbol row
relational expression
rename expression
operator work
first form
entire relation
row subscript
relation remains
theoretic operators
specific sets
theoretic operations
unions intersection
intersection set
set difference
compatible relations
compatible relation
union operator
union operators
union compatibility
formal definition
operators roll
union intersection
stu student
intersection operator
difference operator
standard properties
division operator
unintuitive operator
identify data
element occur
denote conditions
valid result
employee named
sense divides
relation based
additional relational
outer union
join recall
operator takes
match condition
existing attribute
join includes
referencing attributes
includes tuples
referenced attributes
inclusive operator
inclusive join
operator computes
union based
compatible subset
inclusive union
select project
project union
union set
theoretic operation
quiet obvious
cartesian products
return relations
output relations
multiple occurrences
present notion
element occurs
mul multi-set
cases bags
relational models
average marks
marks obtain
project marks
marks based
average mark
total number
correct fashion
losing information
remove duplicates
normal set
computing aggregate
aggregate relations
tolerate duplicates
relational expressions
considerable amounts
computing projects
unions duplicate
duplicate removal
significant amount
projects project
union operations
terrible inefficient
compute project
tolerate bags
tolerate multi-sets
intermediate output
relation expression
multi-sets affect
first bag
set-theoretic operations
operations based
disjoined union
occur multiple
multiple times
minimum number
negative number
tuple appears
out number
out tuples
requested columns
requested attributes
algebraic expression
algebraic expressions
first algebraic
resulting set
tuple occurs
right hand
common tuple
tuple vanishes
specific counter
sets expression
union select
simple counter
disjoint union
tolerating bags
unique problems
unique issues
nut shell
constitutes relational
write queries
algebra queries
database schema
schema comprising
relations employee
employee department
department department
department locations
locations projects
middle initials
employees pan
number date
address gender
gender salary
primary keys
shown underline
start date
manager department
department location
department numb
numb number
project shows
project number
number location
similarly works_on
works_on talks
typical queries
queries query
first query
research department
select dname
dnumber recall
employee work
query asked
last query
projects controlled
employees work
employee project
pan numbers
comb combine
operation series
learnt today
schema rela
relation domains
operations change
user requirement
algebra query
step fashion
structured query
query language
level schema
schema design
low level
level schemas
schemas today
today basis
database user
database administrator
sql language
standard query
language today
query languages
facto standard
relational databases
database users
database arena
academic institution
companies industries
sybase microsoft
microsoft sequel
sequel server
server mysql
mysql postgres
port application
write software
common query
speak sql
huge company
flow procedures
database query
sql sql
sql stands
seminal paper
internet search
good papers
earlier days
today sql
set operators
earlier session
mathematical foundations
relational calculus
model based
mathematical relations
similarities bet
database independent
independent language
data definition
definition language
data manipulation
manipulation language
defines data
relation attributes
attributes domains
domains values
values constraints
define constraints
attribute relationships
key constraints
modify data
terms relation
relation tuple
table rows
standard defines
schematic structures
create schema
schema command
schema univ
univ authorization
authorization dean
manipulation operations
default values
table deleting
table adding
adding rows
typical owner
sql terminology
named collection
table table
command create
create table
table command
form create
column descriptions
syntax enclosed
box braces
optional structures
table belongs
table univ
univ dot
numeric domain
int float
float real
data word
formatted numbers
digits occur
decimal point
define character
fixed length
varying length
sixty characters
big strings
special data
binary objects
character string
transactional database
standard transactional
create domain
domain construct
domain roll
number type
store student
domain definition
null constraint
first constraint
default construct
construct shows
key constructs
unique values
distinct values
alternate key
secondary key
key note
key construct
existing aspects
table referring
existing row
formal terms
table creation
table employee
attribute descriptions
first attribute
variable character
sixteen letters
distinct pan
emp number
attribute employee
address salary
employee reports
record belonging
reportsto suppose
enter details
key constrain
manager record
reportsto employee
management deletion
tables tables
table deletion
drop table
optional attributes
dependent cascade
dependent clause
employee dependent
table holds
key constrains
cascading process
table references
cascading fashion
restrict option
references incoming
incoming references
entire schema
drop schema
similar syntax
cascade option
restrich restrict
modify tables
table definition
table definitions
alter table
command note
existing data
deleting data
table schema
table company
company dot
dot employee
employee add
add job
job varchar
varchar twenty
domain varchar
maximum size
twenty characters
null suppose
reads alter
default condition
command company
null attributes
default employee
shop floor
specific rows
specific column
deleting tables
key word
drop pan
column refers
column definition
constraint set
set set
shows alter
reportsto set
set default
reportsto column
null set
whichever employee
command shows
employee alter
alter reportsto
reportsto drop
drop default
add data
retrieve data
sql operation
retrieval operation
sql select
major difference
considers relations
algebra expects
expects relation
algebraic conditions
default considers
considers tables
select attribute
table list
select employee
attributes emp
basic operation
multiple tables
single table
table department
department address
supply department
employee employee
algebra select
tables employee
department corresponds
disambiguate attributes
department table
department dot
strange reason
arvind kulkarni
kulkarni reports
table names
query shown
dot reportsto
dot emp
first employee
situation sql
entire query
select boss
boss dot
boss report
report employee
emp employee
employee reportsto
reportsto number
select statement
relation logy
clauses omitted
select star
algebra expression
entire row
complete cartesian
default relations
sql tables
duplicates suppose
first sort
aggregate properties
distinct names
default union
lakh union
operator assumes
pure sets
disjoint intersection
intersection remember
item occurs
occurs multiple
distinct construct
select statements
previous examples
term union
bag intersection
perform comparisons
character attributes
string attributes
partial strings
comparing wild
wild cards
first examples
percent arun
arun percent
percentage symbol
percent symbol
symbol matches
matches employee
single character
underscore symbol
underscore arun
arun underscore
underscore underscore
arun occurs
arithmetic operators
addition subtraction
subtraction multiplication
arithmetic operator
select clause
times salary
figures salary
salary figures
existing values
first session
attribute domains
null unique
unique default
alter schemas
table constructs
table structures
key references
key reference
reference coming
nested select
sql operator
varied number
operator treats
treats tables
distinct clause
standard tables
tables attributes
schemata schemata
database querying
advanced aspects
tables rows
creating tables
secondary keys
generic form
condition holds
disambiguate attribute
disambiguating names
employee tables
set operations
sql table
duplicates removed
perform set
default assume
employee union
compare substrings
field shown
non null
domain department
specific declarations
references employee
minus star
arithmetic operations
parameter lies
form select
query returns
records select
case note
multiplication operator
star occurs
query selects
salary attribute
small query
previous query
complete tuples
ordering attribute
sql querying
bigger queries
small queries
nested query
colors white
outer queries
outer quer
quer query
set membership
number belongs
select dnumber
query wha
select department
department numbers
outer query
database show
highlighted query
yellow part
non-highlighted query
nested queries
case returns
complete relation
complete table
query belongs
query begins
query step
maximum salary
unqualified attribute
query applies
aliasing employee
selects reportsto
query works
query calls
select reportsto
employee ids
employee names
definitions pertaining
greater correlation
query occurs
select query
query assume
membership function
number occurs
recursive fashion
exists returns
exist returns
returns false
dot head
alias department
query select
reportsto equal
means give
explicit sets
defined sets
set comparison
empty sets
exists condition
explicit fashion
reportsto field
reportsto attribute
attribute holds
sql command
sql keyword
null cap
cap capital
null value
semantic value
dot salary
dot reports
interior query
condition exists
valid employee
renaming table
employee underscore
employee attributes
larger query
simple select
dot dnumber
dnumber dno
dno remember
employee join
join department
dnumber note
equating dnumber
condition note
star operator
join constrict
finds attributes
rename relations
main idea
common names
required set
natural joins
full outer
aggregate functions
match match
aggregate function
query result
result sum
single numeric
numeric attribute
attribute average
numeric attributes
attributes max
minimum values
total ordering
compare characters
ascii equivalent
select count
salary min
salary max
salary sum
salary elements
set count
count star
field max
attributes sum
single value
applying set
aggregation function
heads departments
first searching
employee heads
names note
aggregation functions
sub groups
average salary
employee group
table count
people working
tuples based
aggregate property
individual property
property note
note note
select dno
number count
department return
twenty people
working show
average salaries
salaries note
clause select
individual tuples
condition applies
specifies conditions
function list
function remember
ten times
times ten
ten star
star salary
salary increases
grouping attributes
group condition
finally order
sorting condition
adding data
modifying tables
tables deleting
modifying data
insert command
employee values
complete record
field bharath
bharath kumar
kumar stands
entire employee
partial set
dnumber values
values arun
implicit constraint
null constraints
operation returns
select command
attributes employee
employee manager
number manager
manager number
insert tuples
insert statement
unique constructs
constraint fails
turn insert
unique construct
violated insert
table insert
manager entity
exist referent
integrity fails
fails multiple
single insert
giving multiple
form delete
tuple note
tuples note
tuples corresponds
table exists
modify tuples
update tuples
simple syntax
form update
update set
update employee
employee set
set salary
salary times
percent rise
update statement
databases view
related details
technical details
project related
view created
project manager
base table
base tables
views views
data contained
simple construct
fields empl
empl mgr
view definition
done views
drop view
efficient implementation
tricky problem
view maintenance
separate session
execute queries
standards tables
attributes values
constraints entity
select operations
operations select
disambiguation aliasing
aliasing selecting
tables set
multi-set operations
operations substring
substring operations
existence checks
null checks
checks nested
insertion deletion
relational mapping
main kinds
representing data
managing data
company databases
human comprehension
conceptual database
logical schema
independent models
companies database
logical extreme
relational schemata
functional dependences
automated techniques
fourth normal
first map
dat database
study today
today form
lifecycle tools
database lifecycle
entire lifecycle
systems starting
actual implementation
logical database
database schemata
show end
problem domain
high-level database
implementation details
entities relationships
machine conception
create anomalies
delete data
automated optimization
optimization techniques
redundant data
keys forms
crucial role
study translation
logical entity
solid lines
lines surrounded
type employee
current system
weak entities
record doesn
record entity
dashed lines
dotted lines
employee handles
handles project
normal relationship
strong entities
double lines
domain attributes
solid line
tax payer
multi-valued attributes
combination form
form form
derived attributes
current date
smaller values
value set
term domain
relationship diamond
relationship unary
unary relationship
n-ary relationship
keys plays
plays play
relational modal
minimal superkey
superkey anymore
relation refers
relation embedded
form student
commercial tools
lifecycle tool
schema talk
functionality requirements
human intervention
domain knowledge
computer associates
simple relation
simple entity
attributes department
type department
simple attributes
composite attributes
forward fashion
attribute remember
region number
location ids
exa shows
retained department
app appears
simple components
simple component
composite key
map relationships
insurance details
employee type
turn delete
record relations
insurance records
cascade options
translating relationships
simplest form
figure shows
relevant attributes
secretary attribute
first create
relationship create
rdbms model
primary entity
base entity
primary relation
manager relation
integrity stipulate
key refers
made department
base relation
hand department
participation choose
relation include
relationship attributes
types project
identify project
tree relationship
employees works
relationships identify
first type
unique identification
record number
relationships note
similarly department
department relationship
separate relation
department ids
number attributes
deputedto relation
recorded record
record numbers
shows summarizes
relations pertaining
deputedto relationship
participating entity
employees working
extra relationship
extra relation
form part
lower half
relation shows
color attribute
entity entity
bird colors
combinely define
bird color
birds species
species eggs
species attribute
bird relation
n-ary relation
relation ships
n-ary relationships
entities forming
forming part
suppliers supplies
supplies part
sales tax
tax registration
streg number
supplies relation
separate relations
participating relations
first identify
part relation
supplies relationship
project primary
part primary
comprehensive set
tool software
software tool
entity relation
relationship relation
simple part
database designers
entities exist
relationship exist
relationship schema
common terms
entity schema
case tools
automated tools
optimal form
notion today
formal techniques
mat doesn
frame work
systematic design
relational schemas
systematic options
operational domain
formal fashion
define keys
correct normalized
normalized schemas
design database
functional dependency
definition reads
uniquely determine
right arrow
dependencies define
define properties
mathematical notion
unique definition
relation comprising
title year
year length
length filmtype
filmtype studio
standard definitions
common sense
sense reasoning
reasoning identify
film type
art movie
commercial movie
social documentary
comedy tragedy
film studio
movie star
supplies work
administrative works
clerical job
defines job
define salary
first functional
relations satisfying
small generalization
relation instances
instances satisfying
trivial functional
quiet important
form title
year def
def defines
defines title
attributes defines
non trivial
non-trivial functional
circular dependencies
quiet tricky
removed triviality
important aspect
term closure
operand operands
universe perform
dependencies defined
uniquely define
combine sets
attributes contained
trivial property
trivial triviality
triviality rule
compute closure
prime defines
repeat step
relation exists
transitivity rule
dependencies exist
closure property
movie relation
year film
year define
minimal basis
dependencies behave
tri triviality
year defines
defines length
movie determines
add studio
dependency holds
last rule
operation takes
original relation
year attribute
determines length
year doesn
earlier relation
involve attributes
current relation
formal set
basis rule
anymore closures
undesirable property
redundant information
first anomalies
updation suppose
update clause
spelling mistake
deletion anomalies
essentially search
creates anomalies
remove redundancies
length studio
determine length
determines star
khan hrithik
last field
forms part
boyce-codd normal
property suppose
non-trivial note
double prime
dependency exist
violates bcnf
violating bcnf
remaining set
decomposed relation
relation movies
attributes title
dependency hold
length title
determines studio
uniquely detr
detr det
det determines
bcnf violating
determine star
star attribute
retain title
define length
define studio
bcnf complaint
bcnf relations
attribute relations
relations suppose
attribute relation
decomposed relations
title theater
drama troop
drama played
drama theater
theater lets
guru nanak
nanak bhavan
defining city
fact title
city form
key title
city define
define theater
title drama
drama title
identify theater
bcnf violation
decomposition rule
decompose drama
city base
base based
defines city
decompose relations
theater entries
theater theater
identify city
attribute theater
theater city
city combination
discrepancies occur
violating constraint
theater defines
extra condition
prime attribute
form relation
form relations
multi-valued dependencies
theater director
social commentary
comedy dramas
social commentaries
multi-valued dependency
non-trivial multi-valued
non-trivial property
prime union
proper subset
removing duplicates
removing redundancy
transitivity reflexivity
augmentation extra
model mapping
mapping entity
data database
database life
life cycle
cycle tools
level database
updates wha
line surrounded
normal relation
relation type
physical schemata
straight straight
key made
relation incase
employee rela
rela entity
employees employee
bird species
supplier primary
logical aspects
machine comprehension
storage device
understanding storage
first things
memory hierarchy
first question
data stored
hard disks
disks floppy
floppy disks
computer ram
random access
access memory
cache memory
memory devices
storage devices
secondary storage
hierarchy primary
primary storages
cpu registers
registers cache
memory ram
ram dram
dram sram
fast memory
hold data
magnetic disks
hard disk
magnetic tape
archiving data
read-only cdroms
write-once cdroms
read-write cdroms
flash memory
memory flash
erasable programmable
programmable read
perform data
data transfer
existing storage
common theme
persistent fashion
concern hassles
memory database
memory databases
large main
main memories
implement databases
large size
access device
sequential device
magnetic disk
access devices
sequential searches
block read
hundredth block
first ninty
data access
classified devices
read-write devices
write-once devices
read-only devices
magnetic tapes
read-only device
incorporate data
small databases
character devices
block devices
data character
large amounts
tape devices
block data
read request
request reads
entire block
block access
read aheads
increase data
transfer efficiency
storing databases
storage requirements
databases pose
databases required
longer periods
involve strategies
search data
cla claims
square area
physical dimensions
dimensions today
data stores
small device
data store
changing definition
twelve bytes
data petabytes
ten power
power fifteen
fifteen bytes
web related
search engines
collect data
data storage
imperative today
agile data
manage data
efficient fashion
secondary memory
primary data
storage talks
secondary file
file structures
augmenting file
speedup access
important secondary
file organizations
database starts
auxiliary files
secondary files
provide pointers
secondary devices
organizations data
logical structures
sql parlance
logical records
physical blocks
logical ordering
term terms
record depending
def define
term file
file organization
organization refers
storage medium
pile file
sorted file
hashing file
earlier represents
inter related
length remember
length strings
length integers
records comprise
relational parlance
physical unit
virtual memory
memory systems
block stores
stores records
system structure
structure blocks
length blocks
unlike records
physical characteristics
contiguous sets
blocking factor
block blocking
blocks divided
block divided
block size
record size
floor function
lower integer
integer value
divide block
factor times
size number
wastage manage
wasted block
block area
wasted spaces
spanned records
multiple blocks
fourth record
extra space
span record
remaining space
space leaving
small amount
logical sequence
block begins
remaining part
record organizations
spanning organizations
spanning organization
storing records
store records
record sizes
record allocation
average number
blocks required
size divided
average size
records divided
organization techniques
organization technique
unordered file
term meaning
file record
system underneath
linear search
pile files
files deletion
deletion posses
fragmentation problems
delete record
insertion algorithm
inserts records
records int
appends records
deletion strategy
unique problem
record modification
variable size
modification results
earlier record
back record
auxiliary data
sorted files
files sorted
disk based
ordering field
back records
field ordering
key field
ordering key
key ordering
ordinal domain
lexical ordering
files insertion
physical migration
made simpler
binary search
small algorithm
search space
previous search
binary searches
bounds left
upper bound
lower bound
first record
last block
mid point
key value
form block
upper half
lower bounds
bounds cross
detailed analysis
search technique
technique requires
search requires
disk accesses
block accesses
updation note
logical sorting
move record
insert record
file remain
remain sorted
expensive operation
insertion operations
overflow file
unsorted fashion
master file
merge algorithms
flow file
files searching
pure binary
overflow files
key base
base searches
devices note
tape device
device quiet
sequential devices
problem insertion
move records
word key
key based
based retrievals
hashing hashing
fast access
search conditions
condition based
attributes attribute
query hashing
hashing techniques
hashing functions
randomizing functions
hosting records
file techniques
internal hashing
systems hashing
quickly access
internal data
static array
simple candidate
hashing algorithms
hash buckets
external hashing
hashing technique
hashing array
typical hashing
hashing process
first put
function maps
index entry
sequential search
single block
hash bucket
contiguous blocks
non-contiguous blocks
records size
contentious issue
small number
randomizing function
key values
records stored
overflow management
open addressing
function hashes
sequential scan
linear scan
bucket space
managing overflows
chaining chaining
link list
blocks acting
perform sequential
long chain
first hashing
function doesn
overflow bucket
manage overflows
main buckets
overflow buckets
pointers point
point point
exact records
record pointer
overflow record
static hashing
dynamic hashing
quiet simple
single bucket
separate buckets
process continuous
simple dynamic
small diagram
internal bucket
leaf bucket
external bucket
leaf buckets
binary strings
edges joining
first bucket
keys start
key start
upper bucket
hash table
internal node
bucket holds
start node
previous configuration
extensible hashing
similar kind
shrink buckets
global directory
bucket addresses
global depth
order bits
bucket pointers
differing capacity
keys starting
last bucket
bucket overflows
top bucket
lower bucket
storage media
classify storage
volatile non-volatile
non-volatile primary
primary secondary
access sequential
characteristics impact
records blocks
disks records
sequential records
append records
poses problems
disks based
attribute sorted
tricky problems
varying lengths
hash files
block number
hash functions
dynamically grow
indexing techniques
single level
data management
logical perspective
represent data
physical form
data form
mathematical models
represent relationships
storage method
basic kinds
insertion updation
storage files
primary file
data file
actual data
index files
accessing whichever
whichever data
index methods
permanent fashion
longs period
longer period
typical user
mega bytes
peta bytes
web log
web databases
google altavista
storage technology
larger amounts
smaller surface
surface area
lower prices
storage bytes
big problem
problem storage
bigger problem
stored peta
relevant data
search engine
search results
data size
peta byte
giving results
vast amounts
auxiliary file
efficiently access
primary databases
physical counter
counter part
files stores
physical considerations
maximum file
file length
general sense
relation records
length fixed
text field
sql par
par lens
smallest unit
block storage
information transferred
character blocks
typical dbms
storage capacity
data bus
lesser overheads
seeks seek
correct block
seek operations
important term
pure multiple
unspanned records
records unspanned
extra spaces
space unused
easy accessing
logical block
unspanned record
record storage
organization mechanism
unsorted files
hashing files
files unsorted
input records
file unsorted
sequential fashion
tremendous overhead
unsorted file
physical sorting
records helps
easy access
organization incurs
hash file
terrrible overheads
main topic
concern today
actual index
index file
access structure
search methods
data record
level indexes
multi level
record addresses
level index
multiple levels
index structure
last level
block addresses
indexing field
indexing attribute
whichever field
field based
ordering filed
primary index
physically order
order records
clustering index
unique remember
key fields
non key
non unique
secondary index
non-ordering field
index comprises
ordered file
block address
field number
first field
first block
primary indexes
file appears
anchor records
anchor address
sparse index
dense index
indexed file
index search
deletion insertion
block spanning
entire range
sub range
hundred fifty
fifty students
twenty records
wasted space
blocks wasted
waste wastage
moving records
deletion takes
index remember
multiple addresses
multiple block
values pertaining
small change
distinct student
first occurrence
sorted data
records pertaining
pertaining number
record pertaining
field department
indexed field
address note
indexed files
first entry
indexing record
logical blocks
first start
number number
single entry
entry existed
index field
cluster indexing
indexing file
records insertion
sorted mechanism
sorted form
last record
longer point
perform insertions
alternative solution
insertion insertions
distinct value
clustering field
specific organization
separate block
separate blocks
separate pointer
number eighty
records exist
block organization
organization results
wastage space
block structures
exploring today
secondary structure
index fields
ordering fields
secondary indexes
non dense
index assume
number field
maintain block
record address
record begins
record pointers
index entries
file forms
seconday index
multiple records
index note
handling duplicates
index duplicates
duplicate index
entries duplicate
entries means
index records
turn point
direction levels
level points
first option
duplicate occurrence
complicated binary
search works
search starts
binary index
bound compare
duplicate entries
require restructuring
index table
length recording
recording record
record schemes
address fields
key index
bit complicated
repeating multiple
multiple keys
entry appears
single index
valid block
addresses add
non spanning
spanning records
scheme secondary
index scheme
handle duplicates
extra redirection
redirection levels
turn holds
unique addresses
distinct record
usual secondary
file comprising
indexed fields
first points
storing addresses
index value
indirection levels
extra indirection
indirection level
handling duplicate
duplicate record
search complications
usual binary
complete block
block blocks
cases block
block overflows
retrieval requires
block file
keys order
sequence starting
key variety
duplicate address
distinct index
field values
records contained
files lecture
dynamic indexes
structures index
primary files
files index
database sizes
recent past
main problem
searching data
elements based
indexes clustering
clustering indexes
non-key attributes
complex index
key definitions
retrieval process
single auxiliary
recorded results
offset value
non ordering
field key
uniqueness constraint
field helps
longer constrained
uniqueness constraints
longer requirement
record record
index data
file comprises
records structure
data records
anchoring record
address block
index indexing
indexing structure
file stores
field takes
field attributes
field note
physical ordering
physical order
index attribute
file shown
left side
length record
indexed records
ordering attribure
extra levels
extra level
level levels
distinct key
value disk
stored block
block wise
value occurs
multilevel indexes
unique data
key varieties
secondary non
index depending
main advantages
ordered files
average case
ideal case
times log
requires times
memory accesses
record accesses
physical storage
logical equivalent
physical nature
efficient data
term blocking
blocks storing
index block
good implementation
implementation block
log log
base fan
tremendous factor
base level
top level
index stores
stores information
present address
indexing scheme
records starting
usual primary
levels depending
binary tree
factor number
starts reducing
important consideration
representing hierarchies
balance tree
right side
entire tree
average behavior
case behavior
unbalanced tree
balanced tree
deletions happen
balanced property
index trees
tree property
dynamic multi
index tree
dynamic index
tree data
pre determined
determined maximum
maximum fan
block corresponds
tree node
logical tree
tree forms
node forms
parent node
parent depending
non root
leave nodes
lowest level
level nodes
leaf node
node points
typical structure
triangle represents
sub tree
sub trees
filled leftmost
internal sub
tree pointers
data pointers
keys note
keys embed
pointers embed
sorted sequence
leftmost right
right key
tree nodes
upper integer
tree building
building procedure
suitable algorithm
suitable algorithms
deletion algorithm
deletion algorithms
insertion algorithms
common index
commercial rdbms
non leaf
address pointers
nodes form
separate kind
ordered access
file records
block pointers
data pointer
pointer pointing
logical leaf
nodes keys
key sequence
keys filled
perform search
analogous fashion
searching algorithm
peary search
search key
start form
current node
key corresponds
first left
first sub
key pointer
value key
left sub
main contribution
insert records
exact algorithm
standard text
text books
illustration serves
tree starts
first key
split nodes
created node
split operation
tree starting
balanced fashion
out factor
arbitrary sequence
key node
key pointers
node overflows
small error
level node
balance property
insert keys
tree deletion
analogous problem
alteast half
last aspect
indexing structures
multiple attributes
indexing attributes
simple indexes
attributes forming
number combine
maintain indexes
existing indexing
main techniques
indexing multiple
index multiple
ordered index
sort based
simplest solution
partition hashing
key elements
bucket numbers
bucket address
grid files
grid file
establishes grid
grid structure
student ranges
ranges form
fairly uniform
key ranges
buckets forms
grid structures
structures form
major techniques
techniques column
space filling
filling curves
values roll
grade roll
grid corresponds
cell corresponds
bucket pool
main topics
internal internal
internal nodes
balancing tree
tree structures
maintain index
database managements
managements systems
logical models
conceptual perspective
physical perspective
physical requirements
specific kinds
physical data
retrieval strategies
relevant tuple
relevant record
physiological question
late ninety
ranching debate
world wide
wide web
large database
true collection
bags impose
additional constraints
logical checks
maintaining collections
collections link
list trees
making checks
set property
maintain checks
tuples relation
relational constrains
entity constraint
referential constraints
strong constraints
value lie
tuple form
systems triggers
active database
term integrity
term implies
implies integrity
valid set
correctness validity
usage perspective
marks obtained
invalid number
obtained ninety
ninety marks
entered fifty
enforce validity
elements stored
ensure correctness
fundamental form
relational constraint
entity existence
existence entity
relation forbids
constraint stipulates
null attribute
field verses
key relation
referential key
key integrity
constraint states
non existent
existent department
employee tuple
first circle
circle shows
physical aspects
enforcing constraints
declared primary
constraint note
index indexes
table weather
reference table
referencing table
existent tuple
default sql
department tuple
sql rejects
referencing tuple
manager tuple
manager table
department sql
keys dangling
delete deletes
reference tuple
mere cascade
tuple make
referencing tuples
number fifty
simple cascade
set null
null option
relation shown
relation creates
key specification
first construct
delete set
update cascade
null note
statement means
reason deleted
key foreign
deferred constraint
constraint checks
constraint check
essentially state
checks deferred
deferred constraints
constraints checks
circular constraints
circular referential
figure shown
figure show
department field
batch mode
deferred integrity
integrity check
deferrable option
dbms defers
defers integrity
integrity checks
present transaction
wired transfer
operations belongs
semantic entity
credit credited
perfect integrity
deferrable constructs
deferred means
dbms engine
type manager
attribute constraint
attribute constraints
check option
general kind
character char
check gender
valid characters
minimum age
check constraint
check age
physical constraint
physical world
age greater
normative constraint
local laws
correct behavior
minimum working
working age
formal constraint
kind sort
interesting question
enforce referential
integrity referential
small declaration
check department
relation referential
check statement
check fails
check doesn
check condition
attribute basis
tuple wide
wide basis
perform checks
age int
legal age
company setting
separate field
separate attribute
give names
actual conditions
legal employee
named tuples
alter constraints
delete constraints
alter commands
first command
employee drop
drop constraint
longer enforced
future additions
future updates
alter statement
statement shows
add constraints
constraints allworks
manager tuples
powerful kind
schema level
level constraints
tuple level
key level
level tuple
specific instances
level constraint
hand acts
database wide
powerful constraint
powerful general
general purpose
purpose constraint
assertions assertions
purpose checks
specific assertion
assertion fails
create assertion
assertion command
assertion statement
assign departments
database update
assertions holds
drop assertion
assertion nobench
longer holds
trigles triggers
eca rule
rule expands
condition action
action rule
active databases
commercial databases
wide constraint
events occur
eca stands
event condition
event occurs
condition check
condition hold
rule performs
handle eca
action part
happen make
older values
update events
newer value
modified tuple
update event
database operation
highlighted form
create trigger
statement creates
update note
balance attribute
set block
attribute block
pre-paid account
trigger operation
rules eca
rule writers
writers responsibility
rules terminate
cascading triggers
cascading action
rule write
cyclic rule
triggers rule
turn triggers
infinite rules
systems termination
infinite cycles
nesting level
maximum threshold
operations including
database state
infine looping
sql based
based database
privileges authorization
privileges talk
user enjoys
privileges users
user authorized
account details
salary details
read authorization
inset authorization
user allowed
update authorization
authorization delete
delete authorization
authorization index
index authorization
delete indexes
security constraint
drop authorizations
specific authorizations
based view
employee salary
details perks
actual employee
personal details
view authorization
authorization checks
providing authorizations
grant command
grant privilege
privilege list
slids shows
grant insert
insert update
select privileges
public public
public means
privilege names
select privilege
insert privilege
update privilege
privileges suppose
specific user
revoke privileges
revoke command
revoke privilege
user list
familiar terms
cascade restrict
cascade privilege
checks domains
tuple constraints
complete tuple
events happen
turn prompts
restricted fashion
biggest challenge
challenge facing
larger amount
small devices
devices today
data devices
wear inside
problem today
area required
tremendous proportions
massive amounts
years today
meant hundreds
data ten
elements form
efficient retrieval
crucial element
effective retrieval
query execution
execution strategies
optimization strategies
effective query
efficient query
effective operations
good query
quick calculation
calculation suppose
thousand mega
server class
transfer rates
mega bit
mega byte
mega bits
thousand seconds
bad query
execution plan
data times
effective form
equi join
million seconds
processing depends
affect query
fragmented storage
contiguous block
affect queries
execution times
system mechanisms
high end
underlying operating
decrease response
response times
incorrect information
query plans
ineffective queries
plan estimates
entire strategy
query cataloging
table size
building indexes
query catalogs
crucial roll
execution process
typical steps
execution steps
typical compiler
compiler complies
level language
language construct
machine language
user description
query complier
lexical analysis
read character
token stream
turn parses
query constructs
syntax tree
semantic checks
intermediate form
logical query
query plan
plan tree
algebra representation
intermediate query
query tree
based searches
execution tree
equivalent query
query representation
query optimizer
turn generates
final physical
physical query
query optimization
heuristics based
based optimization
optimization strategy
cost based
separate language
internal queries
physical files
query code
code generator
interpreted mode
generates machine
machine code
complied mode
operations required
database processor
query executions
relation algebra
algebra equivalent
expression tree
algebra operators
actual domains
domains form
actual relations
generate generate
equivalent tree
execution plans
logical form
greater detail
plan comprises
basic set
lower level
internal query
tuple based
accessing tables
operations note
physical implementation
plan operators
physical code
execution code
first operator
table scan
scan operator
main operations
blocks note
blocks belonging
index scan
plan language
sort scan
operator scans
level whichever
external sorting
external sort
sort merge
merge techniques
plan operator
iterator iterator
physical management
done programming
standard template
template libraries
unix environments
active template
microsoft environments
term iterator
composite operand
iterator operates
linked list
getnext function
first function
function open
iterator object
composite object
iterator function
logical record
logical node
last operator
close closes
closes control
scan iterator
open getnext
open function
open construct
construct initializes
logical data
last tuple
means set
assign oldt
return oldt
getnext operator
reached end
function performs
memories freed
close assume
function note
physical level
close function
close operator
bag union
set union
empty contents
multi bag
represent relations
relation form
union iterator
relation dot
dot getnext
getnext returns
sub sequent
sequent getnext
getnext operations
current rel
currel relation
calling getnext
dot close
close don
good measure
good programming
programming practice
close operators
plan program
program programming
programming language
scan index
index scans
algebra operator
executed inside
divide algorithms
based methods
methods hash
index based
sorting based
based method
hash function
quickly search
index base
base methods
methods resort
balance trees
access based
access requirements
first requirement
query requires
full relation
relation unary
unary operators
relation binary
binary operators
theortic operators
execution requirements
algorithmic strategies
pass algorithms
pass algorithm
relation multiple
times limiting
limiting assumption
reasonable assumptions
reasonable assumption
single relation
single pass
unary operation
input buffer
buffer perform
output buffer
relation iterator
iterator returns
returns tuple
simple single
answer answer
unary operations
unique function
statement suppose
unique employee
relation knowledge
required value
general strategy
algorithmic strategy
unique operator
structure holding
unique entry
holding history
simple accept
augmenting data
groupby operator
performing grouping
space allocated
vary depending
binary operator
smaller relation
larger relation
word set
bigger relation
simple strategy
structure start
memory check
output result
implicit assumption
store tuples
set intersection
in-memory data
memory index
tables structure
memory tuple
difference set
differs depending
commutative operation
in-memory index
hash structure
algorithm change
first read
final output
matching tuple
common tuples
memory locations
common set
relation read
hashing based
tuple match
scan sort
scan etcetera
project unique
unique groupby
binary relation
extra blocks
memory blocks
perform book
book keeping
great extend
engine decides
algebra operation
large part
buffers thinking
relation size
good estimation
crucial area
important intermediate
intermediate steps
language constructs
perform low
level operations
physically access
base related
related operations
relational constructs
iterators tables
tables scans
scans sort
sort scans
scans etcetera
plan constructors
big question
handling joins
crucial aspect
dbms design
design note
term dbms
design verses
small amounts
cheap cost
cost infact
affordable cost
data retrieval
elements today
crucial technologies
impact database
coming years
storage world
hash structures
fast data
retrieval happen
users query
making query
processing interactive
suppose google
search query
query suppose
search peta
relevant results
intelligent query
processing techniques
faster processors
bad algorithm
processing efficient
good dbms
query processor
database grows
limit query
memory size
impact query
query performance
lexical analyzer
turn return
token streams
syntactic tree
parse tree
syntax analysis
semantics checks
validating phase
tree comprises
plan written
dbms interpreter
language comprises
scan constructs
project set
union difference
interpreted dbms
complied dbms
last step
system run
database runtime
execution stages
first stage
plan representation
physical execution
query operators
language sql
external query
internal language
answering queries
retrieve tuples
additional operators
iterator objects
operator opens
getnext invocation
required tuple
parse algorithms
first category
single parse
single tuple
parse algorithm
isolation relation
block left
relation requires
smaller relations
data relation
procuring good
good estimates
relation sizes
estimation algorithm
relation wont
wont fit
memory bytes
multi pass
studying today
reading part
memory writing
alternative alternation
intermediate result
result generation
intermediate results
algorithms sorting
indexed base
memory elements
basic structure
skeletal algorithms
pass sorting
sorting algorithms
algorithm alternates
reading intermediate
performing computations
nary operators
alternating phase
read part
disk sort
continue steps
query handles
sorted tuples
query merge
techniques remember
merge technique
single list
efficient algorithms
produce results
linear order
merging perform
pass sortings
examples follow
sql unique
sorted set
separate file
relation sorted
sorted sub
sub list
last data
data intermediate
smallest tuple
rolling forward
move pass
present tuple
merge elimination
elimination takes
sorted block
block set
result block
block sets
merging algorithms
merging algorithm
list comprising
first set
entire thing
first blocks
set sets
simple answer
start rolling
sorting remember
binary operation
computing set
union algorithm
previous algorithm
read blocks
relation sort
read belongs
reading tuples
elimination merging
merging technique
sorting techniques
techniques set
read relations
separate buffer
buffer pool
common elements
roll relation
left shift
output pool
block list
last algorithm
sorting strategy
join function
common component
tuple contents
small problem
start outputting
case conditions
intermediate operations
external merging
slow operation
disk writes
intermediate sorted
sorted relations
accesses happen
matching tuples
combined note
join attribute
relation find
expensive technique
underlying data
read relation
file note
similar tuples
buckets anymore
based techniques
buffer list
sorted buffer
based technique
bucket number
turn points
usual algorithms
memory read
relation block
memory remember
internal hash
internal index
memory data
small relation
pass sort
operations union
operations involving
separate hash
based file
first hash
file corresponds
standard property
perform union
perform intersection
buckets bucket
quiet straight
last technique
join algorithm
join operation
partition hash
pure hash
learned today
studied today
query query
physical queries
plan construct
based strategies
base strategies
hashing base
visit index
optimization iii
optimization issues
design normalization
hand query
processing issues
issues concern
concern design
design issues
efficiently process
user query
dbms detect
typical query
typical process
processing takes
parsing phase
query parse
syntactic structure
structure formulated
formulated query
heuristic rules
cost estimation
dbms optimizes
extent based
intermediate language
typical building
physical plan
query operations
access algorithm
algorithm based
multi parse
required relation
removing duplicate
memory space
space left
basically generalizations
intermediate storage
storage handling
handling phases
relation perform
sorting hashing
sorting function
last method
indexing function
sorted index
order based
algorithms index
user index
computation phase
selection functions
zig zag
zag join
computing joins
operation based
operation involves
base selection
selection condition
select key
inequality conditions
inequality condition
condition involves
indexed attribute
set theory
theory algorithms
general pattern
set base
base operators
design algorithms
search relation
sorting index
represent relation
logical key
found perform
zag fashion
storage disk
efficient algorithm
plan query
plan languages
query answering
upper level
parse trees
tree representing
make assertions
resulting parse
original parse
query instance
estimate cost
tree incurs
rewriting parse
syntactic structures
programming languages
structure represents
hierarchical structure
post order
order traversal
trees execute
small relational
project department
manager join
manager dot
department relations
set projecting
tree shows
operation project
project query
queries expressed
syntactic check
syntactic checks
operator correct
operator project
single child
entity checks
checks entity
derived view
view remember
view expansion
attributes checks
valid attributes
type checks
attribute participating
proper type
performed parse
rewrite rules
conditions hold
maximum extent
relevant parse
first rewrite
rewrite rule
pushing selects
beneficial remember
probally giga
small fraction
great amount
smaller dataset
based optimizations
common optimizations
query rewriting
department tuples
join tuples
thousand managers
fifty mangers
fifty manager
rewriting rules
cascading select
conjunctive selects
certs space
point suppose
equivalence condition
smaller set
index searches
pushing select
push selects
exception occurs
relations movie
starsin movie
film stars
attribute title
flim actor
relations title
filmstar worked
bengali movies
film star
sql point
select starname
join starsin
starsin note
language attributes
projecting starname
relation bengali
select language
base tuple
language field
star worked
select tuple
relation selects
selection relation
rewritten parse
separate select
rules involving
involving selects
joined set
movies database
movie starsin
bengali movie
movie relations
stars acted
director satyajit
satyajit ray
select director
starsin relation
project starname
project director
relations based
director field
ray select
inserting projects
query involves
involves projection
large relation
large tuple
examples shown
department project
dept department
birth employee
extra projects
project dnumber
candidate parse
cost estimate
cost estimates
cost components
affect execution
execution cost
access cost
storage cost
intermediate files
computation cost
memory usage
usage cost
communication cost
dbms server
distributed database
dbms servers
factors affect
database catalog
value estimates
meta information
table specific
specific metadata
wide tools
specific information
typical information
field specific
specific attribute
distincts values
combined tuple
simple cost
estimation techniques
bigger picture
equality selection
good estimate
uniform probability
selection query
composite condition
relation satisfy
satisfy condition
tuples satisfy
demorgans law
size estimate
single attribute
tuples combining
numberator remains
simole attribute
selects cascading
cascading selects
pulling selects
extra project
query relating
database manager
previous lectures
properties atomicity
simple examples
account transfer
transfer transaction
transaction transfer
interest payment
payment transaction
percent interest
add thousand
fourth operation
subsequent operations
first instruction
writes happening
actions form
transaction set
operation constituting
instructions constituting
constituting transaction
transactions operations
interleaved fashion
constitute transaction
operations constitute
important criterion
schedules produce
proper consistent
executed transactions
serial execution
database manger
forward case
stated execution
simplistic view
first inference
important notion
case shown
writing data
revere direction
serialzable schedule
schedule shows
operations executed
non serial
dirty reads
read conflicts
write read
read conflict
conflict shows
value read
actual value
conflicts serializability
conflict serializablitiy
locking technique
achieving conflict
conflict serailizability
manager achieves
dbms ensure
recovery manager
manager recovery
recovery manger
transactions survive
software failures
manager ensures
ensuring atomicity
logical errors
cases transaction
simple address
temporary failure
power failure
started transactions
atm stops
stops functioning
functioning atm
atm failed
basically system
system errors
crash system
disk failure
system didt
didt perform
windows machine
unix machines
editor mode
corrupted state
guarantee fot
critical data
failures happen
predictable state
ordinary file
systems implemented
database implemented
commercial systems
safe properties
storage types
simple volatile
volatile storage
survive system
non volatile
crash occurs
table storage
replicated copies
multiple non
higher diasters
diasters occur
durab durability
previous state
state transaction
transaction abort
abort requires
requires roll
transaction occurs
file retains
information relating
atomicity property
transactions starts
first log
begin log
log transacting
transacting begin
last instruction
log indicating
log shows
recovery purposes
earlier occurs
logs pertain
logs records
produced logs
back logs
values relating
entry relating
entries relating
first instance
item values
log values
first write
logs relating
things relating
completeness sake
shown the4
initial values
starts executing
initial log
started executing
start log
computed value
fifty similarity
last computation
finished executing
occurred undo
start entry
commit entry
crashes occur
commit entries
finish stage
item entries
log book
book showing
operations relating
checkpoint record
system writes
log exists
control properties
essential properties
programs transactions
durability atomicity
atomicity ensures
consistency ensures
transaction operates
durability ensure
returned value
consistency property
consistency management
control mechanisms
basic foundations
basic notion
ensuring consistency
serilable serializable
transaction system
simple schedule
actual schedule
database read
updated value
extra operations
execution commit
commit means
abort means
transaction decides
operations write
seat numbers
current reservation
reservation information
express availability
passenger finds
passenger didn
lower berth
transaction tone
radhani express
process continues
commits value
end result
end value
inconsistent operation
consistent schedules
ony program
correct results
trivandrum mail
end results
database performance
first important
serial equivalence
equivalence schedule
equivalence schedules
define equivalent
conflicting doesn
conflict serial
serial ability
operation oaky
conflicts serialabitlity
performed operations
database item
operation occur
fixed order
obeying conflict
operations interleaved
final order
conflicting orders
equivalent schedules
random order
equivalent conflict
decipher produce
produce consistent
consistent schedule
tone executed
double dash
non-conflicting operations
effect conflict
schedules conflict
transactions produce
database imagine
general operation
transaction close
break point
complete schedule
slightly change
completed transactions
complete projection
partial schedule
total set
completed set
simple check
graph showing
provide arc
arc showing
cycle assume
first arc
produce non
cycle prevents
current sequence
allowed grow
basics concept
correct thing
debit occurs
credit occurs
operational semantics
transaction execute
deeper treatment
previous transactions
view equivalence
conflict operations
operations equivalent
final writes
producing consistent
typical case
credit transactions
connect ness
simple queue
front pointer
rear pointer
consistent condition
rear end
front end
concurrent assuming
conditions adds
pointer delete
dot add
dot delete
basically semantics
semantics knowing
adds working
add level
rear level
semantic consistency
greater level
consistency criterions
produced equivalence
operation point
showed view
writes produced
commutative operations
produce conflict
popular protocol
essential property
protocols exploit
excellent burnstien
basic foundation
foundation thing
lecture lecture
syrup transactions
correct execution
conflict serializibility
serialzible transactions
today class
specific concurrency
concurrent execution
produce correct
achieving serializability
broad classes
algorithms based
optimistic fashion
pessimistic fashion
narrow pass
pass bridge
low traffic
traffic bridge
narrow bridge
opposite ends
high traffic
vehicles finding
classify conflicts
high ace
traffic signal
traffic lights
involves lot
hard work
optimistic approach
pessimistic scenarios
system assuming
mount road
gagendra circle
traffic light
class class
lock based
algorithms assume
popular algorithm
pessimistic class
phase algorithm
algorithm implemented
systems call
exclusion problem
critical section
share data
shared data
lock operator
mutually exclusion
right lock
lock means
item transaction
transaction acquires
extra write
single data
students ccpa
tuple tuple
tuple means
reduce granularity
granularity transactions
small item
increasing granularity
entire iit
iit access
person entering
room level
grandnulauty item
consistent criteria
locking explains
reach execution
execution points
simple transaction
accessing bank
bank card
card database
earlier examples
balance data
entire account
items form
place room
lock acquisition
lock release
important condition
subtle condition
enforces serializability
fact making
small proof
affect produces
dead locks
dead lock
continuous loop
system wait
system performance
system throughput
lock condition
condition problems
deadlock occurs
deadlock require
optimal schedules
optimal schedule
phases locking
locking ensures
acquires locks
transaction proceed
conflicting fashion
sense optimal
stamping produces
schedules compare
earlier class
serialization graph
existing transactions
graph growing
write things
pre copy
pre value
possibilities depending
read pre
advanced algorithms
color protocol
transaction graphs
produces sort
long live
live transactions
live transaction
year ending
normal transactions
transactions run
items acquires
affect introduces
introduces lot
short live
affect lock
locking condition
give reference
transactions commits
transaction begins
begins execution
values modified
inter relation
relation ship
transaction modifies
concurrent control
create difficulties
transactions reading
protocols works
familiar thing
release locks
commit points
locking protocols
protocols start
start operating
protocol releases
value modified
protocol issues
cascading aborts
algorithms taking
avoid cascading
key point
point holding
transactions commit
holding starts
starts holding
reach reaches
isolation isolation
isolation means
transaction results
transaction values
control aspects
isolation properties
commits protocols
protocols ensure
ensure commit
protocols integrate
atomicity properties
recoverability properties
complete picture
lowest tier
database items
properties algorithms
serializiblity conidition
record table
lock requests
transaction holds
transaction locks
simple execution
effect producing
lead lead
affect prevents
happen first
letting transaction
sacrifice isolation
lecture transcription
study oracle
microsoft access
case studies
oracle dbms
access dbms
microsoft office
office suite
commercial software
main structures
specific version
oracle oracle
dbms oracle
oracle corporation
corporation headed
larry wall
early player
commercial database
data grids
data grid
business intelligence
intelligence kinds
basic elements
oracle databases
earlier oracle
research community
similar kinds
commercial field
database engine
makes lot
terminology mismatches
oracle server
server server
data files
oracle considers
stored data
data including
including log
control files
academic community
oracle instance
processes including
including oracle
oracle system
system processes
server runs
user processes
processes created
specific instance
oracle support
support oracle
sql oracle
procedural query
pure query
programmatic constructs
generic structure
procedural language
complete procedural
define variables
define control
control flow
looping constructs
embed sql
procedural constructs
database structure
physical structure
logical structure
structure refers
physical organization
structure corresponds
oracle mange
oracle manages
manages data
larger logical
update rules
oracle stores
stores data
unlike lets
mysql oracle
buffer management
management policies
based implementation
comparing mysql
oracle mysql
level system
system calls
system call
system kernel
data block
affect dbms
dbms operations
successful operation
hand oracle
means oracle
oracle decides
files remember
redo based
control information
file names
trace files
alert logs
logs trace
background processes
oracles oracle
oracle runs
runs oracle
system monitors
monitor events
call triggers
enable triggers
background files
logs maintains
major events
supports mechanism
configure oracle
multiple devices
media failure
database organization
database organized
logical sense
physical sense
call operation
schema objects
schema object
relevant entity
indexes clusters
sense serialized
object orientation
orientation methodology
objects definition
object represents
table accesses
accesses access
table row
row wise
wise access
data dictionary
system catalog
cataloging information
user names
security information
access privileges
modification date
creation date
turn trigger
audit trails
auditing information
logical organization
table space
physical space
tables space
turn manages
specific definition
entire oracle
set comprising
oracle processes
servers operation
global area
memory area
system wide
database buffer
flush buffers
basically control
log buffer
periodic intervals
shared pool
entire system
processes comprising
kernel processes
memory buffer
specific analogy
global processes
server instance
server process
server processes
processes depending
threaded server
concurrent server
database files
system global
database file
logical arrow
processes deal
detail oracle
handle request
oracle client
dedicated server
multithreaded server
client connections
kernel doesn
support threads
main functionalities
essentially perform
background process
process wakes
asynchronous late
processes wakes
read command
data blocks
turn reads
main functionality
provide parallelism
roles sum
asynchronous operations
database writer
writer process
log writer
writer background
data processes
log flushing
flushing process
point background
modified buffers
log data
pointing process
process versus
background data
perf perform
system monitor
performs recovery
performs redo
based log
log recovery
manages storage
storage areas
recovers transactions
process monitor
monitor background
recovery operations
user process
process fails
fails note
data return
inconsisten inconsistent
online log
recoverer processes
database setting
issues pertaining
lock processes
multithreaded configurations
route request
locking process
parallel server
server mode
oracle supports
supports ansi
concerned oracle
standards data
definition statements
manipulation statements
session control
control semantics
embedded sql
relational extension
oriented semantics
method calls
calls triggers
inheritances associations
user defined
defined data
user program
program invokes
oracle methods
oracle method
procedure concept
user programs
sql constructs
relational context
active rule
rule capability
storage organization
physical allocation
table spaces
system table
user table
space maintains
maintains data
unique system
dictionary objects
space manages
data page
smallest level
disk accepts
accepts data
disks accept
accept data
sector size
enhanced capability
write multiple
contiguous sectors
multiple contiguous
contiguous sector
sector forms
term extents
specific number
contiguous data
minimum unit
specific data
table directory
directory information
row directory
free space
space information
table oracle
oracle allocates
extents allocated
extent remains
index exists
data segments
index segments
handle elements
segments belongs
non cluster
cluster table
data segment
create index
index command
index segment
temporary segments
temporary work
work areas
allocate data
rollback segments
undoing transactions
sql support
addition oracle
plane vennila
vennila sql
declaration part
executable part
exception part
typical procedural
declare variables
end construct
exception handlers
part written
part handles
handles error
error conditions
defined errors
popular commercial
supports data
object relational
spatial databases
write control
flow constructs
supports transactions
access microsoft
included microsoft
tailor made
technical user
graphical interfaces
learning curve
gui based
graphical user
user interface
interface based
based mechanism
definition data
user interfaces
visual basic
hyper links
native data
access database
file call
dot mdb
mdb files
open database
database connectivity
connectivity mechanisms
common interface
single common
data validation
screen shorts
invalid inputs
validation rules
rules default
values data
types index
key relationships
automatic inference
key relationship
qbe interface
perform joins
drop operations
form addition
expression builders
reports generation
gui fashion
database doesn
return data
reporting mechanism
underlying database
report generation
generation wizards
database report
additional features
cross tab
tab queries
perform group
ole objects
objects ole
object linking
embedding mechanism
microsoft applications
word document
power point
point presentation
level security
security based
server model
performs multi
supports multi
user operations
concurrent clients
technical end
main feature
formulating queries
graphical query
query specification
source names
odbc interface
access databases
databases oracle
odbc comply
database objects
screen shots
design view
entering data
screen shot
actual form
mailing list
last screen
data mining
knowledge discovery
interesting aspect
interesting application
database technologies
recent years
years data
number amount
commercial domain
commercial utility
research interest
public debates
non disclosure
pan door
technical aspects
basic algorithms
traditional operations
basic underlying
underlying concepts
mining concepts
mining algorithms
tabular mining
clustering approaches
sequence data
streaming data
warehousing concepts
managerial perspective
perspective lets
commercial world
wealth generation
precise definition
term wealth
right decisions
financial portfolio
analyzing trends
trends analyzing
customers behave
recently data
security purposes
mining network
network logs
network streaming
abnormal behavioral
behavioral patterns
abnormal activity
important application
application area
technical perspective
generic term
hidden patterns
hidden pattern
students performing
quotes discovered
give queries
pattern exists
correlation exists
mining query
mining algorithm
broad sense
making things
interestingness criteria
interesting pattern
obvious question
common kind
tabular data
dimensional form
data array
data coming
common form
rich source
spatial data
coordinates system
temporal data
network traffic
forms streaming
activity logs
database activity
activity log
xml databases
graph data
bio molecular
molecular data
volvoid web
big graph
text data
arbitrary text
multi media
unknown nuggets
similarly rarity
abnormal behavior
interestingness pattern
pattern correlation
consistent occurrence
behavior pattern
banking customers
customers behavior
first month
fifty times
behavioral pattern
consistent pattern
anal analysis
detects periodicity
statistical inference
mining software
statistical concepts
statistical algorithms
fundamental difference
renewed interest
mining versus
conceptual model
null hypothesis
statistical inferencing
inferencing process
correct sampling
representative sample
statistical sampling
user preferences
market analysis
present questioner
users based
opposite process
huge data
weighed notion
interestingness based
algorithm data
interesting patterns
hypothesis discovery
complete hypothesis
fundamental concepts
core algorithms
apriori based
items sets
india wins
cricket sales
hand suppose
interesting item
item set
people buying
buying school
school uniforms
buy school
school bags
association rule
frequent occurrences
true versus
item sets
first consumer
bought books
bought bag
bag uniform
set bag
uniform occur
ten rows
uniform occurring
dataset supports
fifty percent
percent support
buy uniform
uniform bag
bag occurs
school uniform
interesting association
association tools
association rules
single item
case bag
single element
element item
set uniform
set crayons
size size
famous algorithm
apriori algorithm
discovery process
frequent item
efficient manner
simple idea
explain apriori
sub sets
important conclusion
important observation
consumer database
previous consumer
consumers buying
school utilities
apriori algo
algo miner
frequent occurrence
threshold parameter
minimum support
greater right
sets occur
thirty percent
uniform crayons
crayons pencil
books bag
times uniform
times crayons
bag crayons
crayons bag
bag pencil
pencil bag
bag books
books uniform
crayons uniform
uniform pencil
pencil uniform
uniform books
book occur
occur uniform
books occur
smaller subset
iceberg queries
large item
consult results
previous iteration
present iteration
construct candidates
required support
interestingness criterion
individual elements
first generating
candidate set
set size
size reaches
candidate elements
current iteration
set bags
bags uniforms
place bags
higher probability
rule mining
mining requires
minimum confidence
mine association
general procedure
support threshold
thing means
customer buys
buys uniform
rule means
school bag
rule holds
seventy percent
rules bag
uniform uniform
plain english
crayons implies
implies uniform
similarly people
buys crayons
percent confidence
buy bags
direct marketing
mining association
rules simple
lhs part
rhs part
side part
form lhs
lhs implies
implies rhs
lhs divided
thing divided
rhs div
set mining
consumer coming
fourth customer
normalized form
bill number
uniform length
bill numbers
ordering make
performing group
group bys
bill represents
number represents
perform apriori
frequent patterns
single group
run apriori
aggregate behavior
running apriori
performed group
behavior changed
sense consistent
entire period
beginning data
sub field
technology perspective
defense perspective
security perspective
perspective commerce
business perspective
security reasons
behavior patterns
privacy reasons
learning theory
data mine
complete field
unknown patterns
mining process
dan data
mining frequent
discovery part
fundamental algorithms
simple algorithms
mining activities
discovering classification
classification trees
discovering clusters
mining sequence
stream data
pattern existed
mining setting
data tree
data graph
mining streaming
rare patterns
classification tree
closely classification
classification maps
maps data
pre determine
determine classes
classes based
difference differences
hand clustering
clustering groups
groups data
groups based
classes apriori
classi classes
clustering process
process begins
classification techniques
decision tree
classify data
cricket matches
unpredictable weather
thirty degrees
degrees play
fifteen degrees
play wasn
sixteen degrees
classification problem
classify weather
weather conditions
classification classes
weather criteria
decision trees
identifying decision
simple first
temperature field
numeric value
hand classification
numerical values
classes warm
parameter affects
cricket match
cases cricket
bivalence state
continue play
parameter temperature
cases warm
overcast warm
abandon play
conclusively state
warm decide
decide remains
conditions play
bivalent state
play today
set tells
univalent state
element types
decision classes
adding element
decision class
done remove
subsequent iterations
conclusive decision
fuzzy classification
clustering techniques
philosophical difference
marked difference
essentially partitions
equivalence classes
equivalence class
members belonging
geometric similarity
hyper cubes
dimensional spaces
euclidian distance
distance measures
manhattan distance
clustering algorithm
nearest neighbor
neighbor clustering
algorithm takes
maximum distance
find clusters
simple process
element find
small threshold
threshold distance
iterative partitional
partitional clustering
clustering technique
neighbor technique
fixed apriori
unlike classification
elements belong
statistical sense
first centroid
element assign
closest cluster
cluster center
made compute
cluster centroids
nearest centroid
nearest cluster
algorithm converges
algorithm stabilizes
clusters lie
iterative clustering
dimensional data
ordinal classes
infer classification
term sequence
sequence sequence
ordered collection
ordering matters
subscripted element
web browsing
http logs
dna sequences
patient history
medical history
history changing
events happened
formulating algorithm
finite length
pencil pen
pen ink
pen pencil
pencil ink
eraser ink
fourth element
ruler pencil
single customer
stationary store
set matters
set doesn
ink pencil
term sub
sub sequence
definitions suppose
seq sequence
sequence pen
apriori gen
gen algorithm
main question
candidate generation
generation algorithm
candidate algorithms
interesting sequences
candidate sequences
sequences found
set denotes
usage sessions
interesting sub
sub sequences
min minsub
order matters
process stops
mining problem
users behave
user behave
page numb
numb page
hypothetical machine
simplest kind
state machine
deterministic finite
finite automate
finite state
complexity considerations
practical considerations
model representing
representing user
user behavior
input sequences
language inference
trickiest problem
strings abc
abc aabc
aabc aabbc
fours strings
abbc abc
single state
general state
specific state
right kind
specific algorithm
shortest run
run generalization
generalize based
run technique
previous algorithms
generalization works
first string
encounter aabcb
string aac
accept aac
end state
accepts aabcb
form aabc
end states
machine recognize
machine recognizes
recognizes aabc
hidden variables
machine generalize
edges coming
data streaming
newer interest
mining community
interesting applications
streaming audio
audio streaming
streaming video
video network
data sequences
infinite data
start mining
stock market
market quotes
mine streaming
query streaming
running queries
standing queries
traditional database
ret return
data streams
aggregate behaviors
behaviors based
simple standing
data stream
running average
times average
average times
add number
running query
running variance
standard deviation
number minus
minus average
square distances
number ranges
square minus
number times
average square
number square
previous sum
times number
number star
star average
number compute
maintain sigma
single number
stock quotes
market giving
square root
num square
average star
gamma consistency
market crashes
event starts
interesting events
support based
based interestingness
sustained support
frames rate
minus gamma
small hole
hole underneath
vast area
first fashion
representative algorithms
mining problems
object oriented
oriented databases
understand data
implicit theme
data pertaining
main assumption
fact object
last decade
twentieth century
nineteen nineties
model database
sound theory
complete data
nice theoretical
theoretical framework
reasons whi
sustain lot
cad application
application computer
computer aided
aided design
electrical circuits
mechanical circuit
implicitly assume
electronic design
electrical design
design comprises
cad applications
complex data
data objects
multimedia databases
term multimedia
databases databases
store multimedia
multimedia objects
encounter objects
menus scroll
scroll bars
bars drawing
drawing areas
flash animation
typical cad
design comprise
printed circuit
circuit board
voltage source
control sou
sou grounds
current sources
main theme
fundamental objects
multimedia applications
cad projects
multimedia projects
sense built
objects cad
apply voltage
structural abstraction
behavioral abstraction
instance variables
orientation concepts
oriented programming
programming point
view object
started right
oriented database
fundamental building
oriented system
object belongs
specific classes
specific car
structural properties
behavioral properties
multimedia database
default selection
abstraction provided
object encapsulates
encapsulates structure
function calls
external world
world entities
changing attributes
break pedal
clutch pedal
engine behaves
wheels behave
software interface
current state
method call
object state
concepts pertaining
message passing
world entity
entity invokes
turn invoke
invoke method
inheritance polymorphism
generalization specialization
general entity
sports utility
utility vehicles
correct generalization
specific property
specific method
cad databases
cad database
method signature
behaviors depending
signature giving
giving rise
oriented languages
method signatures
add int
passing framework
native types
single entity
fundamental data
hybrid object
semi object
procedural programming
extra features
persistence persistence
persistent object
object exist
persistence storage
persistent objects
object identifier
slight differences
oid versus
key object
database relation
object identifiers
separate attributes
entire object
objects belonging
input voltage
output voltage
object database
direct correspond
direct correspondence
world objects
class level
languages objects
derived class
class reuses
base class
valid oid
operator polymorphism
object identity
identity aspect
system generated
generated unique
unique identifier
unique object
logical number
physical address
object suppose
stored object
directory tree
database parlance
formal model
structure defines
state space
object structure
type constructor
object databases
databases define
type constructors
tuple set
set lists
lists bags
bags arrays
atom type
specific atomic
atomic value
atomic entity
tuple represents
ordered list
values unordered
unordered collection
atom object
basic values
type atom
atomic entities
start composing
composing objects
object inside
composition association
graph structure
objects remember
custom types
custom classes
pseudo code
representing types
omdg standard
user defines
employee comprising
salary supervisor
tuple comprising
declaring objects
important factor
object behavior
object lik
object interface
unique interface
behavioral abstractions
logic gate
provide ground
provide inputs
logic inputs
logical inputs
logical outputs
input pin
pure object
method declarations
method interfaces
method definitions
standard programming
provide primitives
define methods
existing object
method interface
embedding methods
number employees
world calls
create department
constructor method
assign employee
object persistence
implementation level
valid object
unique oid
oid object
cad tool
program refers
naming mechanism
specific object
turn translates
big computer
larger database
practical thing
referencing objects
object graph
named object
reachable object
system lets
class definitions
department set
application definition
program finishes
finishes execution
pascal exsyntax
department object
persistent set
type definition
definition class
class definition
naming conventions
type hierarchies
type hierarchy
define person
address age
social security
security number
define student
type rectangle
systems extents
entity sets
type defined
type coupled
instances forms
typed objects
root class
objects class
default extent
object extent
root extent
class hierarchy
sub extents
dep depending
complex objects
database form
structured storage
complex object
unstructured storage
structure storage
nested structure
constructors type
video sequence
audio sequence
specific structure
binary data
large objects
database standards
store objects
electronic circuit
mechanical design
code perspective
odmg standard
management group
group standard
basic object
object model
object definition
salient features
great details
main features
identifier life
attribute collections
collections structures
interface definition
default objects
default classes
default object
default class
collection class
collection objects
collection interface
main type
root object
date timestamp
timestamp interval
interval set
bag dictionary
partial type
relational storage
standard odmg
previous lecture
management problems
data entity
electronic component
object performs
current source
specific set
abstraction forum
oid relationship
attributes doesn
general object
correct specialization
objects based
oid references
programming system
transient objects
defining object
detail today
standard provide
slow shown
main reasons
include portability
defining objects
querying objects
object query
existing programming
application programmers
programmers programming
odmg objects
odmg databases
databases system
standard objects
object types
literal types
atomic objects
objects collections
typical interface
interface tells
type declarations
operation declarations
type object
predefined set
odmg database
object class
database belongs
sub class
collection is_empty
supports insert_element
collection remove
remove _element
collection contains_element
searching element
template library
interface collector
class interface
iterator mechanism
operator definition
standard def
set template
template mechanism
type note
collection comprising
class transistor
proper_subset_of superset
bag template
derived types
arbitrary objects
create_intersection difference
list object
object type
unlike set
list list
list position
array object
dictionary data
collection data
table implementation
value pairs
dictionary returns
dictionary object
bind unbind
sense delete
interface hierarchy
complete classes
defines interfaces
level object
oriented language
sub interface
interface elements
hierarchy right
sets lists
specific types
language independent
independent mechanism
odl definition
schematic constructs
structural elements
schema note
specific languages
language bindings
odl constructs
odmg data
oql query
oid management
programmer refers
reachability condition
named persistent
case entry
iterator variables
dot dname
dot college
departments remember
extent extent
class departments
visible attribute
invisible attribute
access attribute
method invocation
visible attributes
hidden attributes
define views
created view
has_minors department
dot minors
separate declaration
query nested
nested oql
computer science
specific element
aggregation operator
collection operators
aggregate operators
min max
max count
count sum
sum average
similarly count
defined has_minors
view defined
earlier gpa
visible numeric
invisible numeric
gpa values
aggregation operators
objects comprising
numerical attribute
numerical object
define memberships
quantifications operators
collection object
quantification operators
predicate logic
universal operators
collection expressions
faculty dot
sorted list
specific elements
highest salary
relationship properties
obd database
normalized database
nested relation
nested tuples
inheritance inheritance
alien concept
classes inheriting
tuples inheriting
schema written
extended entity
entity rel
rel eer
eer model
model extended
odb schema
schema corresponded
eer entity
middle path
rdbms space
pure odbms
odbms database
query handling
indexing storage
database realm
applications dealing
satellite imaging
weather forecasting
rdbms systems
support objects
extensible data
types remember
introduce inheritances
type extensions
defined routines
implicit notion
traditional indexing
mini case
informix universal
universal server
traditional relational
data blade
blade modules
actual meaning
blade cutting
additional data
opaque type
opaque table
sense cut
existing database
opaque tables
blade module
distinct types
row type
collection type
defined functions
supports stored
effect define
arguments arg
returns boolean
end function
informix univ
univ universal
server doesn
party language
informix server
data inheritance
ordbms data
tuple type
type engineer
engineer type
variables degree
sub type
extra fields
define function
indexing extensions
defined methods
show shows
sho show
index emp_city
employee city
city address
city method
tree index
data blades
image data
abstract data
ordbms support
earlier sql
ordbms requirements
sql framework
framework sql
sql foundation
sql bindings
sql object
object part
transaction aspects
stored modules
call level
level interfacing
relational support
large large
binary dump
data object
music file
attribute type
tuple types
create abstract
type tuples
create row
thirty characters
creates emp_row_type
type emp_row
emp_row _type
existing rows
type comp_row_type
employee ref
ref employee
employee row
row types
defined type
adts nested
nested adts
composite type
composite data
type comprising
constructor function
observer function
put operation
adt defines
mutator function
user functions
implementation issues
implementation system
dbms implementing
implementing sql
defined function
client server
server issues
run queries
creating indexes
defining inheritances
access functions
behavioral characteristics
large unknown
object object
define user
defined types
atomic elements
user abstraction
internal pure
oql queries
relative short
short comings
rdbms prompted
xml-advanced concepts
dbms couch
managing xml
xml data
earlier xml
information interchange
operating platform
describing data
elicited interest
interchanging information
common problem
specific domains
bio informatics
xml dtds
specific area
der derived
invited talk
jayant haritsa
vldb summer
summer school
platform independent
standardized extensible
extensible mark
specific thing
thing platform
store xml
plain vanilla
vanilla text
text character
character data
textual data
underlying encoding
standardized mark
specific rules
rooted tree
begin tag
end tag
form ness
tag notice
slash notice
describing dataset
separate descriptor
separate set
simple standard
data interchange
simple building
formed xml
xml fragment
valid xml
formed xmls
xmls fragment
structural requirements
tag names
special character
document type
xml schema
exchanging data
xml document
text editor
simple hierarchical
build parsers
tree algorithms
eliciting interest
computing community
database researchers
science researchers
interchange problem
desperate sources
xml standard
finance industry
finance domain
stock trading
allied activities
common features
validity period
contract expire
amount involved
contractual interchange
contractual specifications
informatics applications
annotating gene
gene sequence
gene sequences
long sequences
sequences comprising
characters eighty
long sequence
genome sequence
genome sequences
gene folds
sequence genomes
human genome
genome string
free text
full text
text queries
sequence matching
soap protocol
simple object
object access
access protocol
web services
send methods
remote object
services provided
actual message
currency conversion
conversion object
soap compliant
clients speaking
sends messages
xml format
xml parser
parser embedded
xml input
xml processing
xml tree
info set
document validator
validator document
input dtd
storage system
answer queries
key concepts
elements attributes
processing instructions
namespace declarations
regular expressions
xml tags
xml element
formed element
slash imdb
imdb stands
internet movie
movie database
huge source
xml information
movie related
related information
show year
nineteen ninety
angular braces
show element
box office
office numbers
sun times
mixed xml
roger ebert
reviewer tag
rating tag
simple xml
typical dtd
doctype declaration
root element
show start
start show
show star
review star
review elements
replacing dtds
schema document
element declaration
imdb declaration
complex type
string right
maxoccurs unbounded
star declaration
sequence finishes
elements title
slash element
specific problem
parsing xml
naming conflicts
xml fragments
first xml
html fragment
formed html
html fragments
start tag
table fragment
slash table
table descriptor
table cell
table slash
african coffee
coffee table
table eighty
single xml
parsed character
semantics require
naming conflict
resolve conflicts
html table
colon character
xml table
xml documents
names spaces
unique space
globally world
web remember
uri uniform
resource identifier
http colon
colon slash
slash slash
slash osl
osl dot
dot iitb
iitb dot
table tag
specific uri
thing slash
osl triple
triple itb
itb dot
oslwiki slash
uri remains
namespace attribute
previous slides
xmlnx xml
xml namespace
namespace prefix
child elements
children elements
uri address
resolving naming
uri exists
uri defines
issues related
cdata cdata
character text
xml parsers
html data
flag errors
declaring cdata
cdata section
specific tag
slash script
defines cdata
ampersand symbols
cdata sections
cdata sec
sec sections
nested comments
nested cdata
line brakes
brakes inside
querying xml
query queries
queries exist
common querying
querying tasks
selecting navigation
navigation selection
selection extraction
sql data
fundamental problem
fundamental issue
xml parsing
full navigational
navigational parser
document object
entire xml
full complete
dom object
requirements state
navigational access
xml string
dom parser
start parsing
docu creates
document element
element dot
dot getelementsbytagname
getelementsbytagname show
show elements
element object
parser works
parser performs
dom instance
start calling
stream based
based parser
microsoft windows
windows platform
programmatic api
data parses
sax parser
network stream
sax creates
sax performs
codes change
change data
data streamed
call backs
creates events
application decides
typed notes
place updates
streaming xml
turn sends
sends sax
sax events
application begins
xml query
parsing techniques
techniques lets
transformation language
convert xml
xslt query
html document
xquery kind
composible language
xquery takes
typed xml
typed query
scale database
database accesses
defining parts
defines parts
parts structures
define xml
xml stands
xml elements
path expressions
computer file
xpath expression
dot triple
xpath selects
book element
catalog element
price attribute
ten point
root directory
simple file
system language
double slash
shows released
text operators
russell crowe
navigational aspects
enforce constraints
root level
query paradigm
xquery paradigm
xpath expressions
query expressions
term xquery
document returns
sophisticated query
citeseer papers
complex expressions
expressions based
xml xquery
xquery features
flower queries
flwr queries
repeat queries
looping kind
initial condition
condition matches
sort elements
xml construction
strong typing
versus character
query return
xquery language
actor return
return box
office receipts
last part
xquery document
xquery engine
imdb engine
imdb xml
languages returning
slash receipts
document comprising
first define
dollar imdb
basically specifies
imdb actor
variable note
dollar sign
actor stands
actor element
imdb document
office element
receipts elements
www links
wide webs
dom parsers
sax parsers
xpath queries
parser problem
parser affect
create documents
create objects
send messages
parser requires
elements parse
imdb slash
slash actor
standing query
query parses
returns query
set parses
returns backs
call returns
returns events
performs call
set matching
query finds
receipt kind
xml namespaces
resolve naming
unique globally
globally unique
unique uri
cdata handling
handling issues
entire document
document versus
versus stream
stream parsing
query paradigms
query behaves
final session
xml queries
pre existing
larger problem
semi structured
structured data
specific rigid
rigid structures
post internet
internet world
semi structure
structure data
organized data
data possess
fundamental problems
active research
school held
independent standardized
support character
key words
give declarations
xml store
path expression
traverse directories
specific directory
thing fails
starting tag
tag doesn
ending tag
space extra
xml takes
character form
compress xml
actual disk
disk space
xml xml
independent source
xml based
based message
message parsing
parsing protocol
xml wrapper
existing databases
large periods
common interchange
interchange language
existing interfaces
interchange format
provide xml
xml wrapping
objects existed
object middle
middle wares
supported message
corba complaint
platform needed
support corba
parsing frame
frame works
object base
larger web
web base
base services
similar analogy
data exists
existing forms
xml wrappers
convert databases
database implementations
document actors
slash actors
rooted xml
flat xml
actors file
actors document
document comprises
row row
slash row
row comprises
relational table
canonical flat
xml file
storing xml
implementations oracle
supports xml
xml storage
based updates
treat xml
map xml
xml dataset
native xml
xml form
text form
actual structure
existing attributes
modified database
xml database
explicit schema
valid structural
structural update
invalid structural
constraints exists
query supports
standard flower
return kind
based queries
document construction
input xml
output xml
maintain meta
retrieve elements
value index
text indexing
inverted indexes
structural indexes
structural relationships
general requirements
failures concurrency
storage paradigms
storage mechanisms
flat stream
based storage
colonial storage
based xml
stores xml
object comprising
relational object
centric queries
database based
xml constructs
xml specific
storage strategy
native storage
data optimized
structure block
structure indexing
query mechanisms
mechanisms concurrency
efficient transactions
conventional dbms
databases supporting
colonial strategy
existing paradigm
relational paradigm
xml construct
relational construct
first strategy
put xml
xml related
related query
xquery constructs
structures block
structures concurrency
huge performance
performance overhead
xquery construct
sql construct
recursive kind
data organized
pages disk
disk pages
value indexes
optimize queries
pre process
access control
control concurrency
control updates
transactions recovery
tree mapped
year box
division makes
trees based
show sub
stores pointers
simple advantages
entire sub
navigational queries
element underneath
explorer kind
system navigation
navigation path
disk access
show show
title element
attribute kind
kind kind
counter productive
navigational kind
similar elements
year seasons
title elements
red data
year elements
blue data
maintain pointers
answering attribute
attribute queries
first access
lesser data
attribute query
level elements
cluster based
single elements
similar paths
form imdb
imdb show
store sub
attribute searches
text searches
indexing xml
indexing requirements
requirements arise
value indexing
rdbms indexing
common mechanism
inverted index
text book
page numbers
section numbers
maintain links
keyword based
xml aware
keyword indexing
xml unaware
unaware keyword
keyword searches
keyword search
jerry sign
sign field
keyword keyword
document reference
keyword appears
aware keyword
aware index
element index
term fugitive
fugitive appearing
title sub
sub element
aware indexing
indexing makes
unaware indexing
element pair
term nineteen
births date
release date
show date
table shows
pure sense
wide ray
wide diversity
text searchers
xpath searchers
xquery searches
natix doesn
level primitives
partial support
managing semi
comprehensive tool
manage semi
rigid structuring
structuring mechanism
rigid schema
generated half
half hand
todays world
data structured
structured ness
unstructured data
data tags
html text
href hyper
hyper link
link references
huge semi
defined apriori
nice formal
graph structures
web information
digital libraries
heterogeneous data
data problem
common structure
large semi
structured database
continuous examples
star cast
cast fields
stores movies
movie category
direction team
movie element
independent sources
schema restriction
formulate query
user providing
main challenge
academic institute
employee doesn
internet data
structure databases
user scan
movie data
common mental
mental model
schema discovery
discovery problem
large schematic
maximalist world
world notion
minimalist world
world model
inclusive model
discourse schema
discover lot
movie based
people add
producer reporting
movie stars
actual schema
typical relational
application areas
include data
sources coming
genome databases
scientific databases
scientific documents
similar documents
documents citations
citations references
e-commerce applications
structure problem
business systems
specific schematic
business house
structures problem
implicit structure
machine learning
artificial intelligence
intelligence kind
kind techniques
structure discovery
forbidden relationships
text searching
navigation based
temporal queries
queries based
element evolves
natural choice
desperate set
xquery expressions
xml publishing
design dr.s.srinath
typical life
information flow
flow management
management storage
retrieval handling
relationship based
based design
physical model
disk storage
schema appears
design case
taking toy
toy examples
management requirements
life databases
massive database
stored everyday
actual complexity
huge system
actual system
class project
systems existence
existence practice
conference management
conferences today
web based
wer wer
simplified conference
life database
complete gory
gory details
technical program
large conference
program committee
committee chair
submit papers
unique contact
contact author
life conferences
committee member
stringent meaning
unique identity
selecting papers
published paper
give suggestion
actual decision
rare cases
reviewer comments
chair prepares
conference activities
explicit set
specific forbidden
forbidden condition
reviewer review
papers ten
ten papers
application design
capture requirements
requirements tells
systems development
development life
early stages
system development
systems requirements
requirements specifications
required conditions
forbidden conditions
entire uod
level design
system model
application logic
constraints triggers
processes involve
human activity
human creativity
specific right
requirements specs
requirement specification
red spot
requirements specification
important concepts
life system
english definitions
liveness means
unfair advantage
safety requirement
safe guard
integrity violations
safe system
violations simple
simple don
ensuring safety
liveness requirement
mis matches
requirements spec
forbidden behavior
safety constraints
final system
liveness criteria
ses set
safety criteria
requirement spec
capturing user
user requirements
tentative list
proper set
srs require
forbidden behaviors
model address
behavior right
extraneous behavior
added feature
birth date
desirable feature
extra behavior
value addition
safety conditions
unsafe behaviors
forbidden things
requirements require
model forbids
conservative doesn
required behavior
step approach
requirements coming
life examples
liveness behavior
start identifying
problems statement
perform normalizations
required condition
give comments
journal right
required behaviors
identifying entities
logical item
circular definition
problem statement
committee headed
logical existence
existence program
potential entities
make author
paper entity
design author
identified entities
identifying ent
ent entities
verb statements
prime candidates
program decided
made program
week entity
modeling classes
defining relationship
double arrows
conference entities
chair heads
heads program
program committees
explicit specification
chair head
large committee
separate relationships
basically form
disjoint entities
entity instance
turn consist
identify relationships
liberal model
conservative model
contact authors
disjoint relationship
membership requirement
earlier thing
member remember
specialization condition
correct sounding
english definition
accept reject
assign result
relationship existing
relationship instance
result existing
relationship requires
requirements doesn
application designers
major attributes
place topic
key key
earlier right
title initials
conference setting
persons pan
email address
contact email
multi valued
valued attribute
multiple phone
single letter
initial right
values belong
unique key
paper paper_id
paper content
give member_id
thing reviewers
conference headed
respective entities
journal _id
_id year
spen spend
committee consists
journal forming
form forming
reviewer reviews
reviewer assigns
telephone number
number email
separate member
source conference
manage activities
microsoft research
management tool
major conferences
major kinds
conceptual requirements
author list
form tricky
idea forward
lower relational
tricky situations
situations arise
specific aspects
define transactions
informal sense
level transaction
transaction design
business logic
detail design
life conference
main essence
small conference
systems designers
systems analyst
program reviewer
realistic requirement
turn means
separate entity
rejects papers
requirement specifications
model design
behavior constitutes
behavior constitute
battle field
liveness properties
permitted behavior
management tools
tools manages
manages birth
birth dates
sends greeting
greeting cards
add dynamics
systems requirement
srs document
systems model
characteristic features
helps understand
model performs
super set
set proper
proper super
extra feature
feature doesn
good thing
liveness behaviors
required functionality
accept papers
schema bit
human centric
centric process
conference defines
committee consist
disjoint set
specialized members
condition forbidden
authorless papers
addition authors
birth phone
event event
things step
place date
date topic
conference key
entity conference
key right
committee program
chair table
attribute right
add member_id
committee table
member _id
generalized entity
exclusive relationship
special identity
identity assigned
previous context
separate table
pro primary
table right
paper _id
earlier tables
multiple entity
taking parts
schema breaking
actual relational
person relationship
maintaining records
safety condition
valued attributes
phone details
member table
author table
valid derivation
derivation schema
bring pan
bad design
conference registrant
conference volunteer
conference delegate
safest bet
associate phone
person attribute
system design
implicit requirements
minimal impact
good design
bring bring
person bring
put pan
active role
integrity violation
constraint violation
papers reviewed
result belongs
relationship make
define tuples
make part
member_id gave
final relational
conference table
conference place
pro program
reviewer table
membership table
conference committee
respective tables
similarly person
person details
made person
mathematical rule
sense decision
person table
number combination
relationship reviewed
reviewer right
table tables
table conference
conference conf_name
conf_name place
key conf
conf conf_name
table program
table specifications
dbms client
designing transactions
database tasks
write update
simplistic definition
detail acid
design transactions
system architecture
server architecture
databases serve
client sessions
previous client
client interaction
simple transactions
syntactic errors
tables verify
duplicate registrations
register multiple
reads happening
created user
verify user
password field
syntactic correctness
chair reviewer
table match
maintain sessions
session management
upload paper
paper transaction
assign reviewers
reviewers submit
submit review
review arbitrate
semantic activities
manage transactions
logic manager
handles multiple
today secession
model rate
fundamental aspect
model coming
simplified representation
banking solution
reservation solution
university setup
collecting requirements
build databases
first understand
bank conduct
correct operations
incorrect operation
complete solution
analogy dbms
larger information
high-level conceptual
solution problems
similar process
functional analysis
functions opening
bank transfer
correct function
incorrect function
high-level transaction
transaction specifications
specifications infact
separate module
functional ana
ana analysis
independent process
dbms dependent
database stream
functional stream
application stream
physical design
dependent process
slight variations
design results
high-level transactions
transactions specifications
lose fashion
transaction specs
program design
transaction implementation
application software
concise description
data related
examples suppose
building banking
monitory transactions
account books
customer holds
account transfers
term working
physical reality
trains starting
non-technical user
non-technical nature
departments projects
projects employee
employee dependence
pan pan
number address
entity project
entity employee
address belongs
employee date
birth belongs
paying income
income taxes
attributes define
formulates things
standards notation
representing entity
department identifier
identifier manager
balloons handy
entity represents
existence note
term independent
entity independent
occurring object
first classifications
simple verses
thirty years
thirty age
nick names
attribute versus
single-valued attribute
snap shot
mister doctor
doctor misses
takes color
denote color
blue green
green red
smaller attributes
stored attributes
good database
put age
today today
stored attribute
elective courses
missing value
unknown value
application forms
word entity
specific collection
supplies departments
accounting department
systems programming
programming department
defined address
percent designated
type describes
representations entities
entities types
double line
attributes derived
dotted line
key issue
means supplies
pin code
post letters
attributes departments
house door
computer network
ethernet address
ethernet connects
default key
informal fashion
physical limitations
nature imposed
imposed restriction
room domains
individual attributes
entire attribute
project employee
set attributes
relate entities
precise relationship
type specifies
delve deeper
defined relationships
relationship binary
types involved
unary relationships
ternary relationships
array relationships
shows employee
separate existences
first picture
picture shows
relation depicts
relationships versus
versus attributes
functional data
object reference
entity object
vise versa
emply employee
employee object
employee managing
simplest constraints
cardinality ratios
participation constraints
constraints lets
multiple departments
participation constraint
project suppose
develop developing
project depart
depart depends
type exist
case project
exist anymore
types existence
allocate attributes
shows department
department handles
first figure
budget attribute
project site
last things
received pan
company prepare
details identifies
identifies insurance
types department
relationships types
underline underline
non-technical users
diagrammatic notations
entities entity
type entity
sets attributes
first secession
continuing
discussion
execution
transactions
database
systems
fact
looked
things
controlled
produce
consistency
results
transaction
important
system
affect
performance
typically
notice
cbse
state
board
announced
lot
people
access
net
stored
realize
large
number
simultaneously
result
whats
curious
simultaneous
heats
point
fails
respond
requests
equivalent
throughput
users
catered
coming
drastically
challenge
terms
process
execute
interesting
railway
information
summer
book
tickets
online
counters
last
couple
days
peeking
thirty
thousand
day
handle
peoples
reservation
critical
losing
user
booked
ticket
accesing
overwrites
details
seat
allotted
two
birth
inconsistent
guaranteed
body
basically
understand
solve
problem
give
marinating
requirement
class
phases
populated
protocol
employed
ensure
executing
log
data
items
case
discussing
minutes
back
train
locked
finishes
operating
item
coordination
done
manager
executed
consistencies
ensured
observe
locking
phase
prone
dead
deadlock
scenario
locks
released
commit
achieved
kind
algorithms
change
suddenly
doesn
improve
possibly
explore
classify
optimistic
pessimistic
algorithm
showed
stamp
conflicts
continue
based
popular
producing
compare
liitle
detail
fashion
essentially
difference
spectrums
checking
admit
databases
consistent
doing
admission
control
beginning
start
check
end
executions
verses
waste
finish
told
respect
aborted
work
redo
ensuring
applied
hand
teacher
side
shoulder
step
value
correct
stops
wait
conservative
proceed
submit
working
assuming
wrong
values
thing
accepted
depends
criteria
apply
assume
lots
times
operate
set
allowed
independently
approach
ends
spectrum
marking
protocols
lie
full
grade
falls
variety
stamping
fall
fully
completely
call
basic
earlier
concurrency
modify
version
notably
multi
map
versions
reads
writes
means
multiple
copies
manipulated
modification
part
modified
shows
gamet
shown
picture
wide
poured
extends
extent
configuration
worth
putting
mapping
good
movie
theatre
choice
seats
preferred
compared
kinds
visited
convenient
place
sit
view
aspect
preferences
high
conflict
viewed
manipulate
small
percentage
requires
ensures
operated
constructed
works
ultimately
single
customer
ten
compete
manipulations
abort
proceeding
taking
alow
blocked
deeper
enforced
concerned
sample
graph
showing
grown
cases
idea
checks
points
resolving
diagram
sense
order
incoming
four
talking
entry
happen
figuring
out
makes
criterion
satisfies
satisfied
lightly
arc
precedence
relationship
carefully
follow
discuss
entered
replace
disturb
specific
happening
maintain
conflicting
force
wont
insert
sequence
actions
violates
longer
relation
transive
ate
breakfast
lunch
evening
snacks
dinner
first
event
perform
occurs
violative
long
future
relations
violate
write
relationships
talked
cycle
break
introduces
intensities
transition
avoided
illustrate
position
fix
condition
checked
prevent
allowing
disallow
fail
commitment
don
stop
committing
violating
restriction
basis
timestamp
wil
informally
produces
serializable
schedules
lets
operations
boils
performed
performs
subscribe
make
operation
transcation
complete
notation
accesses
meaning
manipulation
xth
including
context
actual
theses
banking
withdraw
cash
account
withdrawing
individual
accounts
minute
bank
amount
conflictive
balance
current
simple
read
right
starts
worry
money
matter
started
person
added
inconsistencies
final
interested
finding
explain
suffix
drop
belong
imagine
ago
happened
defined
lock
obtained
jet
granted
equation
fit
regular
xyz
equations
release
similarly
proceeded
writing
remember
imposed
previous
meant
releases
supposed
asked
intuitively
reason
importance
put
excepted
ended
prevented
required
prevents
explanation
entrance
permanently
waiting
sufficient
acquire
issues
relate
overhead
issue
move
model
possibilities
relating
validation
passes
purely
takes
local
copy
manipulates
intuitive
stage
depth
bother
arrives
produced
validate
detected
show
isbactually
equals
paper
passed
slip
difficult
affets
intensity
properties
dependency
restart
pure
wasted
computing
sat
inputs
loss
unnecessarily
found
didn
aborts
minus
generally
disjoint
tou
simply
reduced
proceeds
doors
keys
pass
thatall
tend
reworking
larger
effects
chance
succeeding
serialize
rush
key
eat
organized
applying
lecturer
applications
contentions
low
lecturers
gamete
excellent
processing
scheme
transcriptor
c.udayakumar
management
prof
d.janakiram
lecture
lectures
recap
broad
mention
notion
serialiazation
necessarily
formulate
validity
recovery
integrated
excersie
integrate
real
life
darshan
lord
venkataeswara
tirupathi
devasathanam
band
maens
sticker
words
serialized
queue
ways
generated
viewing
similar
enters
giving
increasing
fixed
higher
committed
serializes
concept
serilization
distributed
split
sub
sides
carrying
wrist
watch
additional
solved
zone
foe
london
chennai
generating
problems
clock
automatically
zones
making
events
address
level
excepting
steps
subsequently
tagged
twenty
eleven
laterc
forty
base
fifty
highest
lower
rts
qualify
wrote
stamps
tells
preliminary
maintains
wts
greater
shared
written
lesser
careful
avoid
implies
return
strictly
reading
senior
junior
passing
batch
violation
older
issuing
sured
restarted
add
concern
largest
shareable
exclusive
issued
distractions
line
conditions
true
lead
situation
modifying
stale
rejected
reject
explains
provide
discussed
counter
logically
eventually
infinitely
reach
period
forget
entire
history
logical
decide
physical
machine
generate
limited
validating
generation
starting
generates
extremely
perspective
entering
iit
tick
leave
gate
close
interest
twelve
ending
intelligently
doubt
forgot
accept
immediately
update
met
earliest
rtx
updated
made
equal
wtx
reflect
initial
optimal
strategy
shifted
mark
overlap
significantly
attempting
accessing
accessed
recollect
finished
reaches
effectly
onwards
matters
permits
straightly
sort
exercise
fore
integrating
commits
create
cascading
mechanism
returned
reached
rolled
potentially
creates
depend
relaxing
isolating
affects
difficulty
replaced
pre
instruction
rep
permanent
storage
buffered
updating
subsequence
stay
buffer
concurrently
obvious
reasons
tsp
postponed
minor
additionally
handled
properly
host
techniques
ordering
introduced
enter
today
models
slightly
include
preserved
preserving
elevated
maintaining
consequent
paying
huge
space
degenerated
temporal
record
changed
concepts
scope
series
encourage
material
bit
constitutes
figures
review
questions
attempt
prepared
thought
faces
needed
extra
validated
subsequent
sets
agree
irrespective
depending
answer
sice
logs
approaches
solving
needing
physically
activities
worried
front
strict
progressively
existing
explaining
experiment
cleared
enforcing
non
appary
assumption
begin
gave
writer
programmer
compiler
superset
knowing
parse
waited
marked
consumed
clear
early
valid
common
resolved
theread
relax
separate
notionally
staring
rewrite
find
previously
regerates
onec
crossed
safely
vehicles
wheelers
campus
raising
program
open
air
student
activites
centre
parking
enforce
win
car
hundred
cars
numbers
turned
forcing
inside
rule
raised
faster
token
park
struck
reserve
rare
parked
spending
fuel
contention
fifteen
quiet
sum
trans
wastage
block
road
applicable
belonging
classes
termed
overwrite
gnome
traditional
lost
possiblw
depositing
severe
historical
preserve
elements
records
stock
prices
price
company
tcs
component
recording
degenerate
keeping
dealing
extension
general
extended
leading
tome
simpler
xthe
latest
setting
sizes
satisfying
limit
cost
store
tricky
presence
matrices
holding
requested
grant
disallowed
introduce
certified
wholes
question
returning
wnow
upgrade
gain
matrix
certifies
advantage
hold
intention
intending
executes
form
fill
topic
implicitly
explicitly
underline
node
resident
computer
image
running
sitting
booking
leaving
delhi
connectivity
telephone
lease
interface
display
located
present
dispersed
connected
area
network
abstraction
nodes
assumes
sbi
branch
mumbai
fund
transfer
debate
rupees
credit
locations
underlined
atm
fibre
optic
satellite
exist
affectively
vice
versa
suppose
remote
ideally
debiting
adding
power
failed
acid
credting
debit
figure
undo
complicated
crediting
firstly
friends
separated
ascertain
friend
phone
ring
involved
coordinate
activity
room
easier
pick
busy
assumptions
behavior
telegram
mode
communication
ringing
primitives
study
dimension
partition
temporary
failure
reachable
essential
centralized
build
top
portions
portion
root
spawn
agents
agent
main
debited
atomicity
isolation
durability
middle
unsure
preserver
property
atomically
finis
computation
achieve
spawning
responsible
inconsistency
viceversa
agreement
module
includes
responsibility
dtm
stands
distribution
participating
ltm
preservers
related
telling
obeys
loom
studied
roll
specialized
achieving
consciences
partitions
scenarios
focus
suggest
participations
natural
integrates
sudden
failures
occur
blocks
forward
resilent
robust
circumstances
correctly
talk
rest
concentrate
closed
deal
funds
participate
coordinator
act
submitted
participants
initiate
response
decision
inform
terminate
participant
replying
behalf
reply
imitates
imitating
send
messages
sending
prepare
message
special
prepares
decided
outcome
weight
replies
received
responding
puts
negative
safer
layer
decides
waits
undecided
ready
successfully
tomorrow
replied
observed
maintained
receives
preparing
commit0ting
explained
sends
aborting
forced
deciding
decisions
receive
stable
recover
acknowledgement
ack
receiving
completed
successful
completion
action
communicated
presented
ton
input
command
speaking
arrow
reaching
acknowledge
summarizes
2-phase
3-phase
stopped
parts
coordinators
bound
site
noise
resilient
timeout
resource
feed
choose
stages
arrived
elect
correspondingly
elected
live
reentered
occurred
election
atleast
conveyed
implemented
normal
shooting
tea
backs
blocking
automatic
modes
job
nice
suffer
indefinitely
electing
remaining
leader
contradict
recovers
lucky
remain
reelect
discover
trouble
typical
face
crash
easy
ambiguity
introducing
directly
moving
harm
die
remove
tolerate
usual
responded
initially
failing
recorded
examine
moved
signing
ids
ascending
unique
assign
dictate
discovers
option
elects
turn
run
reentrancy
reentrance
recovering
reenter
tolerant
configured
proactive
enforces
realizes
ignore
conducts
pcm
terminates
direction
possibility
interpreting
timings
bone
providing
surfaces
detect
kicking
translates
positive
treated
transients
translated
bangalore
connecting
connects
hub
southern
northern
partitioning
consisting
detecting
handling
delivering
discovered
distinction
assignment
states
majority
remains
growing
acquires
releasing
axis
acquiring
shrinking
acquired
scale
continued
sacrificed
uncommitted
nut
integration
involving
route
resources
tension
locals
correspond
request
9is
nested
care
children
inherited
require
held
relived
tree
structure
child
leaf
intermediate
consist
nesting
divide
covert
separately
dash
involve
aggregated
parent
obey
serializability
inheriting
branches
inherent
finishing
inherently
aware
spawns
serilaizability
distributive
schemes
synchronized
synchronization
clocks
total
bits
significant
originating
corresponds
synchronizing
mutual
lamports
exclusion
preventing
extend
global
globally
ordered
straight
extensions
replicated
locally
vote
votes
summarize
list
voting
communicate
tools
beacsue
serilazability
rst
rules
proposal
stil
pending
voted
heard
clearer
finally
differ
differing
bet
succeeded
fate
progressive
confusion
easily
updates
throw
visting
temple
scheduling
virtual
inn
schedule
serializabililty
violated
fara
saving
dr.s.srinath
introduction
session
bring
disk
crashes
shutdown
connection
processed
memory
ram
persistent
semantics
environment
title
define
covered
vast
aspects
isn
term
oltp
type
stand
application
accessories
networks
suggests
interactively
defines
accurate
environments
classified
examples
characteristics
characteristic
experienced
internet
delay
conform
instance
status
country
queuing
booth
dispensed
atms
wire
super
market
checkout
customers
baggage
bought
praised
hotels
hospitals
trading
brokage
buying
selling
shares
continuously
sessions
performing
percent
deposit
enchased
sixty
wired
transferred
withdrawal
deducted
concurrent
threads
due
thread
swapped
note
processes
holder
standing
whatis
bug
cheque
unrealistic
facilities
web
calls
sms
mobiles
situations
conceptually
distinct
functionally
units
anonyms
unit
combination
independent
definition
fests
meaningful
semantic
semantically
updation
granularity
water
considered
club
combine
atomic
calling
stringent
subdivided
smaller
half
ninety
returns
managed
motivated
angels
anonymous
definitions
levels
consolidate
synthesis
inducible
integrity
content
constraints
isolations
readings
effect
serial
establish
equivalence
rollback
expensing
expect
durable
dispense
chased
withdrew
at6
involves
dot
brought
game
query
planned
balances
payment
deduct
normative
constraint
odd
raf
deals
transferring
reflected
precedes
begins
safe
active
statement
partially
terminated
schematically
depicts
partial
turns
technique
shadow
inefficient
practice
sophisticated
file
okays
succeed
delete
orginal
created
original
unsafe
intreactiacal
satisfy
deleted
left
supported
copying
support
pertaining
interleaved
color
continues
element
changing
brings
defining
serialzable
transformed
referring
contents
determine
serialazable
swap
swapping
encountering
serilaizable
alternate
weaker
serialzability
serializablity
strong
dbms
inj
preceeds
whichever
relevant
byt
dependencies
encounter
converse
blind
hall
recoverable
requirements
displace
displayed
supoose
sees
rolls
backed
impossible
rolling
recoverability
defer
dependent
undesirable
role
undoing
cascade
ground
eventhough
mechanisms
specifically
cert
logged
files
briefly
learnt
transactional
bases
pertinent
subject
media
disc
machines
led
locker
functional
submitting
hoping
succeeds
exception
intimating
crashed
booted
guarantee
star
volatile
assure
credited
cons
inter
lived
living
serialisibility
entile
yesterday
dispensing
dispenses
error
shouldn
solutions
lies
undone
wouldn
designed
shortly
resubmit
stets
finds
subjected
undoes
interlude
verify
arranging
collect
displaying
prize
dis
occurring
stipulate
runs
hrs
short
tackle
systematic
restoring
date
restore
strategies
deferred
updations
formalize
progresses
impacts
cache
caches
areas
acts
sector
sectors
flushed
sanity
midway
construct
programs
aid
writings
impact
pages
flushing
flush
paging
mentioned
forever
bigger
thrown
frequencies
pointing
intervals
suspension
temporarily
costly
suspend
buffers
encountered
persistently
lose
resume
fussy
efficient
frequently
biggest
seek
imagined
actives
checkpoint
entries
background
sequential
engine
simplistic
helps
understanding
lists
utmost
purposes
behaviour
profile
abc
tag
default
serialization
managing
contexts
design
ess
obtains
whater
optimize
disks
free
slides
pone
anymore
undergo
resubmitted
removed
syste
tranasc
unaffected
efficiency
backwards
noticed
enormous
amounts
sake
redoing
belongs
dint
reverse
oldest
idempotent
couldn
reduce
transact
policy
track
load
uniformly
burstive
launching
missile
upper
cached
categorized
varieties
advantages
disadvantages
conclusion
entails
thinking
frequent
types
retained
entail
privileges
illegal
geographically
developing
bad
damage
memories
primary
shou
completes
notions
triggers
commercial
permitted
purview
teller
feds
wheth
calculate
reverted
familiar
schematic
recent
forming
leaves
invoked
buy
pre-requisites
printed
encounters
logging
abbreviated
wla
addresses
wal
touched
spurt
span
heavy
thrash
slash
unfinished
monotonically
truncate
manage
conclusively
completeness
tech
chain
backward
chaining
pointer
compensating
clr
tuple
frequency
balancing
factor
versus
head
incur
quos
interval
impedes
widen
bringing
hundreds
thousands
places
reservations
cancellations
rescheduling
seconds
size
impairs
centers
stall
obviate
fuzzy
watching
removing
quiescent
unlike
appeared
resuming
meet
incomplete
trace
addition
complement
sys
entities
cooperation
location
discard
page
revert
suffers
fragmentation
fragment
illustration
table
tuples
existed
modifications
null
wondering
creating
creation
evident
replacing
word
idem
potent
copied
manipulating
pointers
discarded
garbage
fundamental
development
rely
fortunately
offer
hanging
archiving
backups
giga
byte
bytes
operational
tera
optical
hours
backup
everyday
week
complexities
distinguish
archivals
archival
dump
incremental
archived
similarity
archive
began
reconstruct
dumps
surviving
archives
method
topics
esp
trade
rates
famous
aries
search
proposed
ibm
verdant
research
brevity
determines
overheads
conventional
implicit
clerical
retrieving
efficiently
reserving
cancel
concessions
strategic
contrast
tactical
folk
city
traveling
trains
year
sleeper
qualitatively
nature
closely
fed
retrieved
books
nearest
usage
warehousing
warehouse
inventory
stocks
sources
civil
engineering
project
prime
factors
transportation
logistics
infrastructure
building
flyover
accessible
crucial
analogous
captured
gathered
leads
olap
analytical
queries
papers
implementations
warehouses
touching
ocean
partitioned
exploration
geared
cleaning
core
thumb
index
structures
trees
hash
indexes
quotes
pin
daily
normalizations
normalize
redundancies
anomalies
redundant
fields
occurrences
field
minimize
tables
normalized
fragmented
phrases
relevance
emphasized
opened
queried
routed
geographic
operationalization
trends
collected
past
years
peak
travel
salary
range
undergoes
infrequent
months
infrequently
aggregation
average
age
sold
source
trend
center
aggregate
interactive
terminal
maximum
limits
exam
mr.misra
employee
charge
supplies
department
references
managers
suppliers
sql
attrition
scene
caliber
decreasing
plot
financially
viable
manufacturing
tai
taiwan
pretty
vague
financial
viability
profits
incurring
costs
gaining
gratuitous
aggregations
post
retrieval
reporting
complex
maker
oral
architecture
obtain
organization
insurance
corporation
india
indian
railways
dirty
clean
scrubbing
marts
collection
mart
segment
express
rajdhani
fast
expresses
feeds
expand
box
populate
uniform
standard
representation
duplicate
password
erroneous
clubbed
recognize
black
flows
unidirectional
garner
representations
dcu
dirt
lack
standardization
cities
encodings
ascii
unicode
edsidec
locales
languages
represented
encoding
language
spurious
abbreviations
mahatma
gandhi
m.g
answering
intelligent
expansion
fairly
madras
officially
official
documents
knowledge
governmental
policies
standards
identify
duplications
metric
miles
feet
kilometers
mile
missing
hamper
avera
correlation
probability
incorrectly
sales
typographical
errors
duplication
appearing
forms
bala
sudar
registered
sighting
bough
sundar
thee
incorrect
codes
gender
character
designer
evolved
considerations
redesigned
outdated
sleepers
exists
persons
associations
provided
typed
february
thirty-first
referred
march
integrative
violations
referential
lakh
reported
crop
cleaner
cleaned
automated
automate
learn
burma
myanmar
gigo
junk
outputs
output
hard
cleanliness
considerable
tacit
kilometer
exquisite
geography
metrics
paraphrase
fits
complexity
increases
increase
analysis
analyzing
meta
transformation
transform
specifies
transforms
test
incorporate
flow
repopulate
interchangeably
theer
great
mix
min
deviation
cardinality
window
max
spelling
mistakes
gram
outliers
diff
letters
hashing
grams
ash
shi
hin
cluster
layers
clusters
column
rows
match
appreciation
training
elimination
merge
function
mapped
bucket
duplicates
reduces
searching
eliminating
eliminate
amit
lvl
buckets
sorted
neighborhood
misspelling
identified
misspellings
likelihood
clustered
k.j
aman
sorting
tens
sliding
merges
detection
transitive
closure
improvement
transitivity
infer
established
naive
comparing
banner
schema
desperate
merging
schemata
stereo
glass
tint
retail
names
german
english
autos
serien
numeral
farbe
challenges
naming
differences
structural
generic
integrator
consists
wrapper
extractor
maps
mediator
constructs
federation
handles
extracts
crates
constructor
extracted
tool
sink
eti
ssa
populating
major
transcription
shobana
proof
vidya
janakiram
introductory
taught
semester
graduate
expected
understood
prerequisites
sections
hour
duration
instructors
covering
transacting
instructor
srinath
modeling
todays
digitized
digital
corporates
organizations
increased
kilobytes
terabytes
integral
airline
underlining
costumer
business
world
entity
interms
assumed
realized
pay
premium
lic
reminder
posted
postal
mail
remainder
carry
receipt
spend
digitization
storing
realizing
inaudible
email
office
inch
portal
ability
login
premiums
paid
dates
lone
receipts
informations
options
confirm
secured
card
pushing
gateway
con
client
code
service
institute
technology
underlying
click
print
confirmation
registration
interestingly
electronically
digitally
signed
signature
reference
deny
protected
double
clicks
carried
reflex
late
night
intervention
officials
exposed
hassles
usable
drip
trip
payments
principles
huf
developed
components
incrementally
develop
purchase
peripherals
faculty
vendors
supply
competitive
rate
contract
varying
bid
vendor
chosen
procedure
quote
purchasing
supplied
personal
microsoft
comparative
configurations
manual
tds
typing
circulation
varies
members
weeks
minimum
quoting
selection
quantity
choosing
improved
automating
cut
approved
menus
printers
scanners
computers
specification
wise
specifications
brand
processor
fourth
quoted
infotech
chipset
prove
searched
infact
cpu
speed
cannocial
electronics
private
matching
retrieve
matches
navigate
drilling
navigating
navigational
students
paradigm
programming
grid
intersection
monitor
category
flat
extensively
object
unstructured
maruti
objects
linking
relational
enables
enabled
guest
moment
eighteen
calculation
comments
confirms
quotation
situated
conceptual
underneath
mysql
server
underscore
april
quotations
domain
select
attributes
converting
designing
convert
duplicated
piece
arrive
bulk
discount
stuff
supplying
vat
included
schemas
evolve
cope
php
admin
browse
dev
intel
viewsonic
acer
tft
monitors
inserted
samtel
picked
picks
browser
apposed
modal
supporting
production
elegant
vidhya
learned
algebra
indexing
methods
phenomenon
remarkable
software
innovations
realm
freely
download
freedom
foundation
allocate
licensed
gpl
gnu
public
license
gist
redistribute
resell
widely
embedded
largely
ported
platforms
website
www
org
features
genesis
stems
msql
guess
stood
sweden
tweak
endeavor
arose
formed
swedish
team
install
tune
warranty
apis
eiffel
java
perl
commands
embed
myisam
compression
engines
threaded
supports
kernel
hardware
processors
scalable
utilize
allocation
light
manages
joins
computed
optimized
join
algo
computes
joints
integers
strings
characters
enamor
enumerated
unsigned
lengths
tiny
int
big
float
floating
precision
varchar
string
variable
text
blob
binary
audio
visual
length
functions
clauses
attribute
marks
scored
clause
primarily
outer
joining
equijoin
operator
compute
nulls
dual
aliases
columns
heading
scalability
tested
billion
sixteen
prefix
rath
authentication
authenticated
comply
evolving
evolution
felt
evolutionary
streams
complies
trajectory
operates
clients
ansi
mysqld
selected
implications
treats
named
treat
cotes
identifiers
identifying
repre
representing
pipe
concatenation
vertical
lines
ignores
spaces
parenthesis
implication
clash
parsing
parentheses
repeated
oracle
compatible
pipes
identifier
enumerate
maxdb
variant
oriented
enterprise
mssql
postgres
slid
etime
comment
macro
selective
exclamation
commented
nuances
selectively
masking
enabling
directory
sensitive
sen
insensitive
unix
linux
capital
windows
renamed
dropped
rename
myd
myi
frm
employees
contractor
isolated
shift
isam
indexed
ther
heap
ino
bdb
compile
binaries
alot
platform
ndb
implement
computational
combined
exploits
capability
noted
compiled
relative
simulated
auto
stated
uptime
feature
save
procedures
statements
flip
sever
libraries
parameters
declaring
month
salaries
invoke
spans
connect
prep
employeerecords
updatesalary
tiem
spec
eca
triggered
comprehensive
views
materialized
practical
privilege
constrai
ese
offending
row
prior
keyword
inserts
catch
invalid
numerical
overflow
insertion
visit
complied
suse
mandrax
red
hat
dban
easiest
installation
rpm
package
packages
distributions
static
compat
compatibility
upgrading
newer
servers
installed
var
lib
owner
demon
boot
installs
directories
lok
prev
func
priv
holds
passwords
authorized
stared
shell
cnf
socket
port
listening
owning
prompt
quit
interfaces
tht
inorder
api
library
struct
represents
par
presently
res
init
initializes
fetch
fetches
contributed
mac
embedding
lec
greeting
uod
universe
discourse
revels
metafer
bus
analyze
high-level
description
analyzed
conceptualization
describe
exhaustive
described
rectangle
existence
staff
u-net
intension
share
departments
intern
domains
multi-valued
peacock
colors
composite
derived
depicted
diagrams
uniquely
identification
income
tax
pan
identifies
nt
house
door
weak
ties
association
cer
identity
participation
totally
funding
projects
notations
expressiveness
perceive
enhanced
eer
subclassing
inheritance
is-a
subclass
vehicle
monkey
primate
animal
specialization
trucks
bicycles
scooters
generalization
generalizations
subclasses
wheels
cou
rocket
controlling
driver
bicycle
truck
van
steering
wheel
member
participates
rockets
airplanes
moon
arise
inheritances
specializations
replacements
establishes
employer
vans
buses
motorbikes
listed
airplane
glider
planning
generalized
gliders
wings
controls
learning
fly
paragraphs
skills
flying
sophistication
plan
journey
push
button
pilots
opposite
secretary
experience
sharing
cla
hierarchy
precisely
professor
academy
academic
jobs
administrative
distinguished
predicate-defined
predicates
denoting
drawn
circle
denote
denotes
disjoined
mutually
secretaries
professors
university
chair
external
overlapping
teaching
union
banker
represent
institution
families
dynasties
holders
abstractions
family
unions
co-notations
individuals
institutions
abstract
unnecessary
horse
abstracting
degree
recall
relates
supplier
ternary
designated
closest
simulate
rela
fair
simulating
suppler
higher-order
offers
taught_during
can_teach
courses
offered_in
offered
reducing
instances
ration
course-semester
teach
semesters
pair
ontology
aggregates
composition
offering
sema
containment
prerequisite
throws
talks
conclude
gen
generalize
specialize
universities
characterizes
heads
headed
sponsored
foundations
collaborates
collaborate
collaboration
inherits
categories
abstracted
especi
targeting
revisit
contained
mobile
phones
makeup
interrelated
functionality
parallel
stream
inturn
rise
human
communicating
quick
searches
pro
banks
exchanges
internal
nineteen
seventies
ted
codd
seminar
influential
hierarchical
amenable
mathematical
discrete
mathematics
linkage
ver
flatfile
guessed
adithya
ananth
kumar
comprising
delve
comeback
comprises
initials
fractions
sho
population
million
played
plays
analogies
subset
cross
product
tha
mathematically
conformance
reality
dereference
maintenance
enhance
stipulated
utilizing
superkey
worst
bag
minimal
superkeys
government
candidate
contacts
purpose
quires
insertions
slight
nomenclature
appoint
foreign
referencing
diagrammatic
works_in
reports_to
refers
verified
quickly
denoted
sigma
subscript
parameter
conditional
expression
formal
grammar
male
unary
operand
argument
emerges
operati
bounded
compact
commutative
absorbed
wha
projector
deter
projected
projecting
removes
substring
operators
dynamically
statically
expects
composability
composed
outermost
innermost
assigned
cartesian
rudimentary
combining
lab
evaluating
mach
pink
canonical
joined
joint
theoretical
theta
consumption
beings
formalism
sound
formulism
elegantly
exploring
revise
assignments
underpinnings
describes
referenced
conforms
compressing
expressions
traditionally
entirety
founds
desirable
greek
letter
selects
mandate
multi-set
solution
mappings
expensive
symbol
combines
equality
thy
comparison
renaming
assistant
braces
theoretic
formally
stu
division
unintuitive
divided
div
worked
arun
divides
simplicity
replaces
inclusive
relaxation
perfectly
theoretically
expressed
products
relaxes
multi-sets
mul
bags
querying
removal
deep
terrible
set-theoretic
repeating
appears
canceling
cancelled
algebraic
distributivity
principle
resulting
vanishes
occurrence
selecting
tolerating
pose
mind
works_on
supervisor
numb
dname
dnumber
comb
formulating
structured
saga
concrete
administrator
facto
arena
commercially
companies
industries
sybase
sequel
adopted
speak
logic
objectives
additions
federating
geneses
seminal
cord
calculus
similarities
terminology
ddl
dml
methodologies
univ
authorization
dean
owned
security
authorizations
authorizes
deleting
catalog
descriptions
syntax
enclosed
optional
commonly
numeric
formatted
decimal
digits
digit
char
vary
integer
placing
disallows
secondary
brush
emp
reportsto
reports
constrain
deletion
restrict
constrains
dropping
restrich
alter
adds
altering
filled
wanted
shop
floor
detailed
reemphasis
considers
retrace
stipulating
disambiguate
preppened
strange
matched
disambiguating
prepending
arvind
kulkarni
ambiguous
opportunity
aliasing
boss
alias
report
omit
logy
omitted
combinations
bhadriah
tolerated
reorder
wan
retain
contribute
earning
comparisons
wild
cards
preceded
arithmetic
subtraction
multiplication
perks
effectively
multiplying
basics
nest
varied
tolerates
summary
explorations
sta
advanced
spe
prepened
qualifier
substrings
declarations
slashes
lakhs
tie
orders
compositionality
compose
convenience
white
yellow
quer
membership
taka
pays
highlighted
non-highlighted
dnumbers
subordinates
disambiguation
unqualified
applies
bosses
correlated
recursive
empty
false
explicit
parenthesize
cap
unknown
interior
subordinate
dno
equate
constitute
equating
printing
subsets
constrict
accommodate
illustrated
keywords
count
counts
ordinal
treating
counting
retuning
groups
group
scans
variants
grouping
inserting
bharath
seventy
ysehwanthpur
oth
format
emd
referent
commas
deletes
truncating
leg
projection
suitable
technical
empl
mgr
characterization
characterized
implementation
addressing
titles
scratch
surface
positions
comprehension
extreme
dependences
bcnf
dat
lifecycle
attributed
popularly
conception
optimization
systematically
correctness
appearance
comprise
translation
rectangles
solid
surrounded
dashed
dotted
diamond
associating
ovals
oval
payer
bird
derive
reside
n-ary
play
decomposing
translate
seizes
translating
erwin
associates
region
sev
alphabets
exa
ret
app
loaded
combinely
ascribe
delated
locate
deletions
simplest
invo
managedby
repeat
rdbms
rational
consultant
consultation
consulted
deputedto
deputed
deput
asso
collapse
cascaded
attractive
collapsing
preferable
species
birds
eggs
paired
ships
streg
totality
associate
designers
formulize
mat
frame
obtaining
determining
analogously
movies
filmtype
studio
reasoning
film
art
social
documentary
comedy
tragedy
actors
actor
acted
stars
inferring
trivial
def
antecedent
non-trivial
triviality
circular
fds
operands
subtract
als
closures
trivially
superscript
inferred
axioms
behave
armstrong
axiom
reflexivity
tri
theater
argumentation
shot
throwing
normalizing
optimizing
badly
redundancy
mistake
shahrukh
khan
hrithik
roshan
decomposition
decompose
boyce-codd
emphasis
decomposed
detr
det
complaint
dos
normalization
drama
troop
kalamandira
guru
nanak
bhavan
basecs
yugant
dose
discrepancies
suffice
director
genre
genres
commentary
dramas
commentaries
direct
proper
lenient
augmentation
possessions
ref
ord
comp
combinedly
invol
incase
claimed
misnomer
device
ripe
residing
devices
capable
floppy
cdrom
random
registers
draw
storages
dram
sram
switched
magnetic
tape
cdroms
read-only
write-once
read-write
flash
eeproms
electrically
erasable
programmable
tapes
theme
cheaper
slower
inquire
implementing
sizable
influence
categorize
mag
hundredth
rewound
ninty
pauses
erase
runtime
manufacture
altered
stores
coupled
aheads
periods
realistic
loading
claims
progress
beaten
moore
law
packed
square
dimensions
gigabytes
pockets
watches
pens
dramatically
byproduct
coined
megabytes
slowly
petabytes
google
altavista
imperative
agile
auxiliary
augmenting
speedup
leaps
bounds
locating
analogs
parlance
correspondence
medium
interlinked
unsorted
pile
lastly
defragmented
contiguous
constant
bfr
formula
spanned
unused
spanning
grater
compulsory
unordered
appended
organizing
arrival
linear
posses
reclaim
cognizant
appends
grow
recommended
impose
lexical
migration
iteration
mid
midpoint
success
mitigate
periodically
weekends
merged
master
retrievals
randomizing
hosting
suited
array
candidates
mod
folding
twisted
folded
randomly
sampling
augmented
allocated
indirection
non-contiguous
contentious
overflows
dataset
skewed
reasonable
distributes
overflowed
capacity
hashes
scan
link
acting
terribly
rehashing
exact
limitation
overflowing
dynamic
shrink
continuous
splitting
underflow
labels
edges
partner
edge
labeled
extensible
decreased
diffent
non-volatile
append
poses
faced
graduated
friendly
ore
metadata
concentrating
surveying
summarizing
longs
mega
peta
routinely
beating
cheap
goggle
unthinkable
bored
parallels6.49
spread
offset
unduly
wasteful
lens
smallest
rarely
seeks
unspanned
spam
consideration
reorganization
tremendous
incurs
queued
dealt
terrrible
hashed
remedy
built
filed
clustering
posed
non-ordering
anchor
sparse
dense
moments
re-computation
re-ordering
repetitions
exhaust
re-orderings
alternative
eighty
assurance
arbitrarily
shaped
seconday
restructuring
complications
pertain
redirection
label
repetition
reserved
afford
fashions
weather
multi-level
exponentially
non-key
uniqueness
constrained
illustrations
cover
anchoring
twos
threes
rectified
assigning
densed
luxury
attribure
motivate
multilevel
resort
ideal
determined
explored
fan
clarity
pointed
replica
hierarchies
balanced
traversal
evenly
unbalanced
problematic
adjustments
overcome
b-trees
terminologies
lowest
triangle
leftmost
adjure
etcetera
sealing
distance
hops
linked
slide35.48
links
peary
lying
contribution
illustrating
serves
clarify
parents
incorporated
newly
arbitrary
spilt
spit
suitably
reordered
height
contend
alteast
sibling
variations
concatenating
ranges
hypercube
filling
curves
ranging
grades
cell
pool
managements
physiological
ranching
tempted
argue
collections
absolutely
tupels
arrays
imposes
adhere
forbids
prevalent
strive
pertains
deference
indistinguishable
stipulates
manger
existent
acceptable
circles
depict
declared
probe
rejects
rejection
alterations
dangling
instructs
mere
instruct
differently
recently
upgraded
porting
sustain
deferrable
defers
intrusion
debits
credits
perfect
legal
laws
norms
declaration
talent
encouraging
declare
allworks
powerful
assertions
assertion
nobench
bench
asserted
trigles
expands
trigger
differs
awakened
unrelated
alert
alerted
reger
overdraft
pre-paid
nrow
writers
triggering
cyclic
infinite
termination
cycles
iterations
crosses
threshold
infine
looping
enjoys
enjoy
grants
inset
authorize
intentionally
unintentionally
alternation
answered
slids
revoke
revoked
lifetime
prompts
restricted
facing
wear
shrunk
proportions
fallen
tremendously
affordability
massive
resulted
story
effective
usability
unusablity
rendered
unusable
ineffective
rehash
equi
considerably
override
overrule
decrease
insufficient
plans
vastly
estimates
catalogs
cataloging
estimating
infor
estimate
parsed
complier
scanning
tokens
recognized
parser
parses
interoptability
heuristics
optimizer
rewrites
broadly
yield
generator
interpreted
rewritten
preferably
iterating
flavor
parameterized
predicate
sorts
iterator
programmed
template
iterates
getnext
iterators
closes
variables
programm
iterated
exhausted
increment
incremented
oldt
freed
initialize
fist
mess
regard
sequent
rel
currel
measure
effectiveness
scanned
theortic
algorithmic
limiting
groupby
iterate
outputting
outline
in-memory
generality
equates
x,y
y,z
overview
wrongly
estimated
thrashing
estimation
concentrated
constructors
nowadays
roughly
envisaged
affordable
occupies
reterving
technologies
alternatives
render
useless
grows
defragmanted
preview
analyzer
syntactic
interpreter
section
opens
getindex
invocation
incrementing
table123
procuring
studying
paradigms
skeletal
alternates
computations
nary
alternating
extract
sortings
skeleton
multiply
bottom
eliminated
obviating
tagging
shifting
slow
algoithms
reiterate
cornered
ups
iii
formulated
un-usability
heuristic
rewritings
optimizes
rewriting
atmost
chunk
contrasted
zig
zag
inequality
theory
pattern
sequentially
chossing
compliers
recursively
traversals
arguments
inherit
expanded
hooked
cats
symatics
beneficial
whenver
probally
fraction
optimizations
pushed
mangers
conjunctive
conjunction
certs
illustrates
starsin
flim
bengalimovies
bengali
filmstar
starname
blindly
satyajit
ray
pairing
directors
dept
focused
claim
profound
sequences
occupied
distincts
representative
cude
demorgans
denominator
numberator
simole
detain
pulling
explanatory
constituting
instructions
interleavings
interchanged
calculating
payable
corrupt
voice
inference
reducable
serializibilty
revere
decipher
serlizable
decrements
decrementing
decrement
serilize
serializablitiy
serailizability
achieves
serilizable
survive
press
functioning
corrupted
didt
editor
edit
fot
document
saved
predictable
ordinary
survives
diasters
durab
restored
retains
helpful
indicating
the4
recomputed
covey
vale
fifiy
reset
redone
malign
visible
serilable
fetched
passengers
passenger
berth
abbreviate
availability
desires
tone
radhani
som
characterize
ony
trivandrum
restraining
oaky
respecting
serializing
serialabitlity
obeying
deciphering
benchmark
non-conflicting
arriving
regularly
reducible
treatment
appose
ness
rear
happing
parallely
criterions
indicators
commute
constructing
exploit
burnstien
fundamentals
elmasri
navathe
sham
chapter
syrup
interrupted
serializibility
serialzible
narrow
bridge
crossing
traffic
hit
ace
signal
lights
backtrack
advisable
believing
mount
optimistically
chaos
gagendra
cumbersome
overkill
protects
excludes
unlock
unlocks
ere
distinguishing
gradunality
transitions
ccpa
aty
grandnulauty
rooms
acquisition
subtle
deeply
consequences
gradation
requesting
loop
deadlocks
resolve
directions
prex
graphs
annual
savings
calculated
milliseconds
effected
touch
ship
modifies
interaction
difficulties
req
tier
sits
subsystem
serializiblity
conidition
coordinated
repeats
scarifying
letting
sacrifice
s.srinath
studies
shipped
suite
reviewing
proprietary
manufactured
larry
wall
player
10g
grids
touted
targeted
intelligence
invented
community
evolutions
mismatches
procedural
programmatic
mange
lit
flushes
oracles
enable
multiplexed
configure
resilience
roles
orientation
methodology
services
dictionary
statistics
audit
trails
auditing
governs
bas
segments
snapshot
analogy
periodic
serve
interact
sgr
interacting
interacts
dedicated
multithreaded
connections
functionalities
asynchronous
tho
mediate
delayed
wakes
parallelism
reliability
mediates
perf
midst
inconsisten
recoverer
dispatchers
elaborate
utilities
invokes
abstracts
caps
extents
accepts
header
allocates
lan
expose
cobol
pascal
pl
plane
vennila
executable
mandatory
handlers
spatial
tailor
ease
graphical
curve
gui
macros
hyper
url
native
mdb
odbc
guis
screen
shorts
formatting
layout
masks
facility
graphically
qbe
programmatically
switch
drag
builders
tightly
wizards
styles
tab
aggregating
ole
presentation
dsns
excel
shots
wizard
mailing
assets
clicked
unclicked
beauty
mining
discovery
eliciting
researchers
utility
debates
legalities
ethics
rights
disclosure
privacy
destructive
tabular
classification
streaming
managerial
invest
answers
patterns
nuggets
wealth
precise
portfolio
behaving
abnormal
behavioral
controversial
hidden
apparent
summation
knew
interestingness
performances
dimensional
rich
mine
regions
encoded
coordinates
packets
flowing
packet
spatio
xml
bio
molecular
volvoid
genes
dnas
rarity
norm
tenth
periodicity
anal
detects
misconception
statistical
comprehensively
renewed
hypothesis
exams
june
inferencing
literature
refute
questioner
weighed
apriori
wins
cricket
sweets
imply
won
school
uniforms
confidence
ratio
distilled
purchases
consumers
consumer
crayons
pencil
buys
manner
observation
pencils
miner
thrice
agai
filtered
visualize
iceberg
consult
crayon
plain
marketing
lhs
rhs
precedent
minconf
peculiar
peculiarity
bill
bys
grouped
interpret
elucidated
perspectives
defense
commerce
raged
pros
spond
relays
surprised
nugget
dan
distilling
discovering
classi
notorious
rains
unpredictable
abandon
sunny
temperature
degrees
overcast
wasn
discontinued
outlook
hunt
warm
chilly
pleasant
dividing
temperatures
abandoned
cloudy
bivalence
cast
uncertainty
bivalency
bivalent
tol
univalent
concluded
oneth
conclusive
indecisiveness
probabilities
philosophical
philosophically
amplifying
measures
geometric
cubes
euclidian
manhattan
neighbor
giv
clust
nearer
existive
iterative
partitional
rearrange
centroid
centroids
converges
stabilizes
apripri
converted
subscripted
browsing
http
dna
patient
medical
finite
pen
ink
eraser
ruler
stationary
seq
curly
minsub
permutation
concatenations
poss
concatenate
concatenated
hypothetical
deterministic
modeled
recognizes
trickiest
aabc
aabbc
abbc
fours
shortest
behaviors
aabcb
haven
aac
doe
tails
tail
exemplified
video
impractical
accumulate
jus
variance
bar
distances
multiplied
num
gamma
vicinity
frames
sustained
leakage
beaker
poring
hole
leaks
indication
breadth
tip
decade
twentieth
century
nineties
oppose
framework
whi
cited
contraries
cad
aided
electrical
circuits
mechanical
circuit
electronic
icm
capacitor
resistor
transistor
multimedia
scroll
bars
drawing
animation
pcb
voltage
sou
grounds
reduction
behaves
pnp
npn
describing
pins
emulates
transistors
oopls
instantiate
menu
encapsulation
encapsulates
fold
exposes
gear
pedals
pedal
clutch
driving
drive
signatures
acceleration
cruising
param
polymorphism
substitute
suvs
sports
qualis
scorpio
ridden
overridden
substituted
emulate
hybrid
semi
persistence
recreated
reread
oid
tangibly
instantiated
oopl
reused
reuse
reuses
oids
overloading
migrated
triple
atom
composing
necess
custom
pseudo
omdg
lik
implements
gates
instantiates
internally
reachability
unnamed
odbms
seamless
transient
exsyntax
conventions
reachabilty
subtype
supertype
gpa
geometric_object
width
geometric_objects
ide
ent
dep
structuring
atoms
blobs
expanse
survived
concretely
odmg
seamlessly
interoperability
bindings
salient
odmgs
forum
tracking
speci
opl
standardize
portability
smalltalk
programmers
standardized
aids
sai
literal
proposes
predefined
is_empty
insert_element
_element
contains_element
creating_iteratives
wer
collectors
collector
create_union
create_intersection
create_difference
subset_of
proper_subset_of
proper_superset
pairs
bind
unbind
binding
dictionaries
templates
timp
odl
oql
college
interprets
invisible
has_minors
minors
invoking
science
raise
contrary
animals
averages
memberships
quantifications
colon
quantification
existential
universal
designation
desc
fro
odbs
obd
alien
odb
corresponded
ordbms
path
implementational
reinvented
imaging
forecasting
efforts
routines
mini
informix
blade
modules
racer
cutting
fabric
opaque
argued
arg
boolean
party
stub
engineer
employee_type
emp_city
blades
inline
interfacing
lob
music
adt
emp_row_type
emp_row
_type
comp_row_type
employment
adts
observer
mutator
hinder
complicate
comings
prompted
contented
xml-advanced
couch
interchange
humans
elicited
disciplines
facets
interchanging
finance
informatics
dtds
acknowledging
der
invited
jayant
haritsa
vldb
vanilla
textual
rooted
validness
tags
descriptor
restrictions
xmls
dtd
significance
exchanging
notepad
emax
enforcement
parsers
stacks
browsers
communities
fpml
slo
industry
standardizes
contracts
loaning
allied
parties
expire
contractual
bioml
annotating
gene
genome
organism
folds
annotated
annotation
trained
genomes
annotations
soap
sim
wrapped
currency
conversion
compliant
info
validator
validates
xquery
xpath
requ
namespace
headers
imdb
sto
angular
hyphens
reviews
sun
mixed
roger
ebert
reviewer
thumbs
rating
doctype
emerging
expressive
strongly
importantly
minoccurs
maxoccurs
unbounded
seasons
fragments
html
african
coffee
pcdata
discriminated
prefixed
identical
prefixes
namespaces
uri
osl
iitb
uris
decr
itb
oslwiki
distinguishable
xmlnx
coated
qualified
cdata
ampersand
buggy
confused
flag
script
symbols
sec
brakes
tasks
filtering
navigation
extraction
dom
docu
getelementsbytagname
fugitive
sax
streamed
interrupt
applica
notes
interrupting
signals
navigations
selections
extractions
xslt
composible
grace
russell
crowe
beco
converter
sighted
citeseer
flower
flwr
construction
transforming
films
starred
totals
dollar
sign
reg
iteratively
grossed
webs
navigated
xqueries
delving
benefits
transmitted
exchanged
rigid
possess
motivating
jokes
attach
traverse
understandable
parsable
compress
decompress
solaris
unifying
balled
wrapping
wares
corba
dcom
wrappers
impression
organize
tact
datas
recursion
inverted
siblings
choices
colonial
clobs
clob
reinvent
centric
supportive
ports
colonize
decomposes
deconstructs
reconstructs
avail
redefining
redesigning
navigates
explorer
productive
blue
paths
universally
paragraph
unaware
jerry
bothers
combinational
births
xyleme
natix
goxml
exelon
tamino
addressed
diversity
searchers
harder
semblance
href
rapid
dyna
rapidly
heterogeneous
classic
journal
serials
documentaries
actresses
directed
annotate
actress
indicative
constraining
evolves
oops
dependents
populates
mental
maximalist
minimalist
forbidden
exclusivist
producer
scientific
citations
published
ratings
e-commerce
mig
skip
revolved
regularity
generalizing
regularities
artificial
embodiment
revisited
publishing
driven
correspondent
uods
toy
reminded
disservice
simplifying
severals
conference
conferences
simplified
gory
hope
committee
reviewers
reviewed
authored
authors
contact
author
relaxed
publish
summit
suggestion
neutral
acceptance
pause
capture
silent
greatly
creativity
specs
spot
liveness
safety
alive
compromise
unfair
compromised
forbid
guard
mis
srs
ses
capturing
tentative
factored
extraneous
born
guidelines
separating
forbidding
hampering
bec
nouns
sentence
sentences
potential
ideas
verb
arrows
committees
prog
chairs
straightaway
liberal
noun
implied
sounding
wou
strength
cultures
valued
varchars
author_id
paper_id
member_id
expertise
respective
_id
publication
journal_id
spen
assigns
autho
journals
confman
msrcmt
complication
manifest
chunks
pieces
expecting
informal
architecting
target
architectural
captures
essence
adjective
analyst
imposing
repercations
opinion
suitability
compromising
battle
danger
bullet
soldier
depen
sdlc
dynamics
wildly
deviations
deviating
quantify
evaluate
trespasses
trespass
asks
stopping
disjoints
authorless
conversions
mem
collectively
breaking
member_ids
author_ids
derivation
delegate
registrant
volunteer
safest
anticipating
robustness
playing
whene
subject_of_expertise
extensibility
conference_id
conf_name
conf
interfere
ano
powered
stateless
register
registrations
upload
arbitrate
served
secession
relevants
setup
collecting
conduct
layering
opening
holdup
revisiting
ana
resides
observations
concise
monitory
ledgers
ledger
transfers
physics
exit
non-technical
dependence
someway
noting
taxes
formulates
balloons
handy
classifications
countries
nick
single-valued
snap
mister
doctor
misses
green
elective
differents
slots
accounting
boxes
administration
retention
ethernet
limitations
likewise
existences
seperate
confuse
tight
vise
emply
ratios
depart
participated
budget
pursue
rhombus
