client to maintain
maintain validity information
amount of callback
server is excessive
server can break
callbacks and reclaim
reclaim some storage
unilaterally notifying clients
clients and revoking
revoking the validity
callback state maintained
maintained by venus
out of sync
inconsistency may result
venus also caches
contents of directories
directories and syncbolic
translation each component
callback is established
venus does lookups
fids no requests
requests are forwarded
cache with callbacks
future open calls
file will involve
involve no network
callback is broken
directory for reasons
reasons of integrity
integrity the vice
interface has well-defined
copy to avoid
re-fetching the directory
17.6.4 implementation client
implementation client processes
processes are interfaced
set of system
calls the kernel
kernel is modified
slightly to detect
references to vice
forward the requests
client-level venus process
carries out path-name
out path-name translation
path-name translation component
component by component
cache that associates
volumes to server
locations in order
order to avoid
avoid server interrogation
contacts any server
requests the location
enters that information
cache unless venus
connection to fetch
fetch the file
file or directory
directory connection establishment
establishment is needed
needed for authentication
authentication and security
file is found
found and cached
copy is created
local disk venus
venus then returns
opens the cached
copy and returns
returns its handle
unix file system
low-level storage system
servers and clients
clients the client
workstation s disk
directory are files
files whose names
names are placeholders
entries both venus
venus and server
server processes access
processes access unix
access unix files
inodes to avoid
avoid the expensive
expensive path-name-to-inode translation
path-name-to-inode translation routine
internal inode interface
visible to client-level
processes are client-level
set of additional
additional system calls
calls was added
journaling file system
system to improve
performance and reliability
reliability over ufs
manages two separate
two separate caches
bounded in size
file is flushed
server to remove
remove the callback
file the status
servicing of stat
calls the data
cache is resident
unix i buffering
i buffering mechanism
caching of disk
blocks in memory
transparent to venus
single client-level process
file server services
services all file
req1.1ests from clients
clients this process
package with non-preemptible
scheduling to service
service many client
client requests concurrently
concurrently the rpc
package is integrated
allowing the file
make or service
service one rpc
rpc per lightweight
process the rpc
package is built
built on top
low-level datagram abstraction
datagram abstraction whole-file
abstraction whole-file transfer
transfer is implemented
calls one rpc
rpc connection exists
exists per client
binding of lightweight
pool of lightweight
lightweight processes services
processes services client
services client requests
single multithreaded server
multithreaded server process
caching of data
data structures needed
needed to service
single server process
effect of paralyzing
system whose clients
devices are dispersed
single centralized data
centralized data repository
multiple independent storage
independent storage devices
centralized file system
system the multiplicity
multiplicity and dispersion
servers and storage
distinguish between local
local and remote
dfs to locate
locate the files
data a transparent
transparent dfs facilitates
dfs facilitates client
facilitates client mobility
mobility by bringing
bringing the client
client s environment
approaches to naming
files are named
guarantees a unique
popularized by nfs
means to attach
attach remote directories
directories to local
giving the appearance
coherent directory tree
requests to access
access a remote
two complementary methods
methods with remote
requests for accesses
accesses are delivered
server machine performs
performs the accesses
results are forwarded
client with caching
needed to satisfy
satisfy the access
data is brought
accesses are performed
copy the idea
retain recently accessed
recently accessed disk
accessed disk blocks
additional network traffic
traffic a replacement
cache size bounded
bounded the problem
problem of keeping
keeping the cached
cached copies consistent
approaches to server-side
tracks each file
file the client
simply provides blocks
stateful versus stateless
versus stateless service
stateless service paradigms
replication of files
redundancy for improving
improving availability multimachine
availability multimachine replication
replication can benefit
selecting a nearby
replica to serve
serve an access
access request results
results in shorter
feature-rich dfs characterized
characterized by location
independence and location
imposes significant consistency
significant consistency semantics
consistency semantics caching
caching and replication
discuss whether afs
afs and nfs
discuss whether clients
systems can obtain
inconsistent or stale
afs b sprite
sprite c nfs
stateful distributed file
distributed file system
system what actions
performed to recover
crash in order
order to preserve
preserve the consistency
discuss the advantages
advantages and disadvantages
disadvantages of path-name
ships the entire
requesting a translation
prefer a locationtransparent
prefer a location-independent
location-independent dfs discuss
discuss the reasons
chapter would handle
handle a large
multiclient database application
explain your answer
benefits of mapping
objects into virtual
compare and contrast
contrast the teclmiques
teclmiques of caching
caching disk blocks
totally reliable network
consistency and recovery
control for replicated
files are examined
examined by davcev
davcev and burkhard
management of replicated
environncent is covered
covered by brereton
discusses the issue
issue of file
placement on distributed
distributed computer systems
systems a detailed
centralized file servers
file servers appears
appears in svobodova
sun s network
network file system
described by callaghan
system is discussed
discussed by morris
information about openafs
covered in detail
including unix united
locus unix united
united is described
described by brownbridge
discussed by popek
popek and walker
system is described
distributed file systems
systems for mobile
mobile storage devices
devices are discussed
discussed in kistler
kistler and satyanarayanan
performed on cluster-based
cluster-based distributed file
lee and thekkath
distributed storage systems
systems for large-scale
settings are presented
presented in dabek
described various mechanisms
processes to synchronize
synchronize their actions
discussed a number
number of schemes
schemes to ensure
ensure the atomicity
transaction that executes
transactions in chapter
described various methods
examine how centralized
centralized synchronization mechanisms
methods for handling
describe various methods
methods for achieving
achieving mutual exclusion
explain how atomic
concurrency-control schemes discussed
discussed in chapter
schemes for handling
handling deadlock prevention
determine the order
two events occurred
single common memory
memory and clock
applications may require
aft-er the resource
granted a distributed
events occurred first
first the happened-before
events in distributed
ability to define
define a total
ordering is crucial
present a distributed
algorithm for extending
extending the happened-before
consistent total ordering
18.1.1 the happened-before
law of causality
define the happenedbefore
set of events
assuming that sending
sending and receiving
receiving a message
constitutes an event
event of sending
sending a message
event of receiving
receiving that message
a + band
irreflexive partial ordering
events were executed
illustrate the definitions
definitions of concurrency
concurrency and happened-before
happened-before the horizontal
horizontal direction represents
direction represents space
vertical direction represents
labeled vertical lines
vertical lines denote
lines denote processes
labeled dots denote
dots denote events
events a wavy
wavy line denotes
denotes a message
events are concurrent
relation il figure
two concurrent events
event can affect
processes that care
concurrent events agree
agree on son1.e
implementation to determine
event a happened
perfectly synchronized clocks
first we associate
define the requirement
pair of events
enforce the global
global ordering requirement
environment we define
lci the logical
simple counter incremented
two successive events
successive events executed
assigns a unique
event a occurs
occurs before event
event bin process
event this scheme
process the global
orderil g requirement
requirement is met
met across processes
processes to illustrate
illustrate the problem
sends a message
receives the message
logical clock ticks
violates our requirement
resolve this difficulty
require a process
process to advance
advance its logical
receives a message
message whose timestamp
timestamp is greater
clock in particulm
process pi receives
tlcenit should advance
advance its clock
realize a total
process identity numbers
numbers to break
create a total
discussed in section
present a number
algorithms for implementing
implementing mutual exclusion
environment we assume
processor to simplify
simplify our discussion
assume that processes
processes are numbered
one-to-one mapping exists
exists between processes
processes and processors
18.2.1 centralized approach
approach to providing
providing mutual exclusion
system is chosen
chosen to coordinate
coordinate the entry
section each process
invoke mutual exclusion
mutual exclusion sends
sends a request
enter its critical
section after exiting
exiting its critical
sends a release
coordinator and proceeds
receiving a request
coordinator immediately sends
request is queued
receives a release
sends a reply
algorithm ensures mutual
ensures mutual exclusion
exclusion in addition
coordinator is fair-such
fair-such as first-come
starvation can occur
occur this scheme
requires three messages
messages per critical-section
coordinator process fails
describe some algorithms
algorithms for electing
electing a unique
unique new coordinator
system to reconstruct
reconstruct its request
computation can resume
18.2.2 fully distributed
fully distributed approach
distribute the decision
complicated one approach
event-ordering scheme described
described in section
sends the message
send a reply
sending a reply
queueing incmning requests
requests and deferring
sends reply messages
decision whether process
process pi replies
message or defers
defers its reply
reply is based
incoming request made
made by process
reply is deferred
exclusion is obtained
freedom from deadlock
deadlock is ensured
freedom from starvation
starvation is ensured
section is scheduled
ordering the timestamp
timestamp ordering ensures
ensures that processes
processes are served
served in fcfs
number of messages
represents the minimum
number of required
entry when processes
consisting of processes
suppose that processes
enter their critical
critical sections process
process p3 sends
logical clocks described
process p2 receives
receives these request
immediately when process
process p1 receives
receives the request
request from process
message is greater
process p3 receives
message from process
reply to process
requires the participation
joins the group
group of processes
process must receive
receive the names
group the interested
reader is referred
entire scheme collapses
monitoring the state
processes are notified
longer send request
send request messages
initiate the procedure
rejoin the group
entered their critical
section must pause
frequently to assure
assure other processes
intend to enter
enter the critical
suited for small
sets of cooperating
18.2.3 token-passing approach
approach another method
method of providilcg
providilcg mutual exclusion
circulate a token
ilc the system
type of message
passed from process
process to process
entitles the holder
holder to enter
logically organized ilc
physical communication network
processes are connected
implement a logical
ring to implement
implement mutual exclusion
pass the token
receives the token
keeping the token
exits its critical
token is passed
receiving the token
passes the token
neighbor this scheme
scheme is similar
similar to algorithm
token is substituted
ring is unidirectional
ensured the number
required to implement
exclusion may vary
message per entry
case of high
case of low
types of failure
token is lost
lost an election
established in section
present an election
algorithm for reconstructing
reconstructing the ring
ring is left
introduced the concept
executed to completion
ensuring the atomicity
system this difficulty
transaction the failure
communication link connecting
connecting the sites
result in erroneous
execution of transactions
distributed system preserves
system preserves atomicity
local transaction coordinator
responsible for coordinating
coordinating the execution
coordinator is responsible
starting the execution
breaking the transaction
number of subtransactions
subtransactions and distributing
distributing these subtransactions
sites for execution
coordinating the termination
transactions being committed
sites or aborted
sites we assume
local site maintains
maintains a log
log for recovery
18.3.1 the two-phase
two-phase commit protocol
protocol for atomicity
executed must agree
sites to ensure
ensure this property
widely used commit
initiated at site
completes its execution-that
-then c starts
adds the record
log and forces
forces the record
record onto stable
sends a prepare
executed on receiving
receiving the message
commit its portion
adds a record
responds by sending
sending an abort
storage the transaction
manager then replies
committed or aborted
received a ready
log and forced
forced onto stable
receives that message
records the message
unconditionally abort tat
sending the message
coordinator the ready
site to follow
follow the coordinator
coordinator s order
order to commit
tor to abort
site can make
information is stored
stored in stable
crashes after sending
unable to make
unanimity is required
required to commit
commit a transaction
responds with abort
unilaterally to abort
executed the final
writes that verdict
commit or abort
sends an acknowledge
coordinator has received
received the acknowledge
18.3.2 failure handling
examine in detail
types of failures
failure may result
result in blocking
examine its log
log to determine
determine the fate
midst of execution
failure occurred suppose
commit t record
site executes redo
abort t record
site executes undo
ready t record
site must consult
out the fate
sending a query-status
system on receiving
tted or aborted
abort nor commit
postponed until s1c
s1c can obtain
obtain the needed
resend the query-status
information the site
absence of control
control records implies
implies that s1c
failed before responding
failure of s1c
s1c must execute
protocol for transaction
sites must decide
decide the fate
sites must wait
decided to commit
draw this conclusion
decided to abort
preferable to abort
tin this case
preceding cases holds
additional control records
coordinator has failed
impossible to determine
is-until the coordinator
fate oft remains
remains in doubt
continue to hold
hold system resources
locks on data
data at active
situation is undesirable
undesirable because hours
hours or days
days may pass
forced to wait
data are unavailable
amount of unavailable
unavailable data increases
grows this situation
pending the recovery
recovery of site
number of links
network may partition
two possibilities exist
exist the coordinator
participants may remain
participants may belong
coordinator are lost
reducing the case
issue of concurrency
distributed database system
database system manages
manages the execution
access data stored
manager is responsible
responsible for maintaining
maintaining a log
scheme to coordinate
coordinate the concurrent
concurrency schemes described
described in chapter
modified to accommodate
accommodate the distribution
distribution of transactions
18.4.1 locking protocols
protocols the two-phase
two-phase locking protocols
locking protocols described
needed is iil
manager is implemented
schemes the first
replication is allowed
case where data
assume the existence
18.4.1.1 nonreplicated scheme
data are replicated
locking schemes described
maintains a local
local lock manager
manager whose function
administer the lock
lock and unlock
data items stored
wishes to lock
lock data item
item qat site
manager at site
requesting a lock
request is delayed
lock n1.anager sends
advantage of simple
implementation it requires
requires two message
two message transfers
transfers for handling
handling lock requests
transfer for handling
handling unlock requests
deadlock-handling algorithms discussed
modifications are discussed
18.4.1.2 single-coordinator approach
approach several concurrency-control
maintains a single
single lock manager
manager that resides
single chosen site-say
requests are made
made at site
lock a data
sends a lock
lock manager determines
request was initiated
initiated the transaction
transaction can read
read the data
data item resides
implementation this scheme
requires two messages
messages for handling
message for handling
handling lmlock requests
simple deadlock handling
bottleneck the site
site si fails
controller is lost
lost either processing
processing must stop
function is distributed
sites each lock
lock manager administers
administers the lock
items this distribution
reduces the degree
complicates deadlock handling
18.4.1.3 majority protocol
protocol the majority
nonreplicated data scheme
data scheme presented
scheme presented earlier
earlier the system
maintains a lock
site each manager
controls the locks
data or replicas
replicas of data
send a lock
request to nlore
nlore than one-half
stored each lock
lock manager detern1.ines
response is delayed
granted the transaction
obtained a lock
deals with replicated
avoiding the drawbacks
drawbacks of central
implementation the majority
complicated to implement
schemes it requires
deadlock can occur
locked to illustrate
sites and full
suppose that transactions
exclusive mode transaction
succeed in locking
wait to acquire
deadlock has occurred
18.4.1.4 biased protocol
protocol the biased
protocol is similar
protocol the difference
requests for shared
requests for exclusive
locks the system
manages the locks
shared and exclusive
locks are handled
requests a lock
advantage of imposing
imposing less overhead
overhead on read
protocol this advantage
significant in common
frequency of reads
frequency of writes
overhead on writes
biased protocol shares
shares the majority
protocol s disadvantage
disadvantage of complexity
complexity in handling
18.4.1.5 primary copy
precisely one site
call the primary
handle concurrency control
unreplicated data implementation
method is simple
timestamping the principal
timestamping scheme discussed
decide the serialization
order our first
generalizing the centralized
develop a method
method for generating
generating unique timestamps
generation of unique
timestamps two primary
two primary methods
generate unique timestamps
site is chosen
chosen for distributing
distributing the timestamps
timestamps the site
generates a local
local unique timestamp
clock the global
global unique timestamp
timestamp is obtained
obtained by concatenation
order of concatenation
concatenation is important
position to ensure
global timestamps generated
compare this technique
technique for generating
presented in section
18.1.2 for generating
generating unique na1nes
site generates local
generates local timestamps
site s logical
sites a mechanism
mechanism is needed
needed to ensure
ensure that local
timestamps are generated
accomplish the fair
generation of timestamps
generates the local
clocks are synchronized
site local unique
unique timestamp site
timestamp site identifier
global unique identifier
unique identifier figure
timestarnp x,y visits
site and xis
site si advances
advances its logical
timestamps are assigned
clock that runs
fast or slow
18.4.2.2 timestamp-ordering scheme
scheme the basic
basic timestamp scheme
timestamp scheme introduced
introduced in section
rollbacks may result
prevent a transaction
transaction from reading
reading a data
data item value
committed to eliminate
eliminate cascading rollbacks
bine the basic
scheme of section
protocol of section
obtain a protocol
protocol that ensures
rollbacks we leave
leave the development
scheme just described
property that conflicts
conflicts between transactions
transactions are resolved
resolved through rollbacks
waits to alleviate
alleviate this problem
read and write
place without causing
aborts a read
exists a transaction
perform a wri
requires each site
site to maintain
maintain a read
write queue consisting
delayed to preserve
preserve the property
property just described
present the scheme
deadlock-detection algorithms presented
presented in chapter
18.5.1 deadlock prevention
prevention and avoidance
avoidance the deadlock-prevention
deadlock-prevention and deadlock-avoidance
deadlock-avoidance algorithms presented
modifications are made
resource-ordering deadlock-prevention technique
defining a global
system are assigned
assigned unique numbers
process may request
request a resource
holding a resource
unique number greater
banker s algorithm
systenl by designating
process that maintains
maintains the information
out the banker
algorithm every resource
global resource-ordering deadlock-prevention
resource-ordering deadlock-prevention scheme
scheme is simple
simple to implement
environment and requires
requires little overhead
overhead the banker
banker s scheme
deadlock-prevention scheme based
approach with resource
approach can handle
handle any deadlock
control the preemption
assign a unique
unique priority number
process these numbers
back this scheme
scheme prevents deadlocks
possibility of starvation
starvation some processes
extremely low priorities
back this difficulty
timestamps each process
system is assigned
assigned a unique
created two complementary
two complementary deadlock-prevention
complementary deadlock-prevention schemes
schemes using timestamps
scheme this approach
approach is based
teclmique when process
requests a resource
resource currently held
allowed to wait
approach when process
schemes can avoid
avoid starvation provided
process is rolled
timestamp since timestamps
timestamps always increase
two schemes operate
process must wait
release its resource
older the process
wait by contrast
process never waits
process pi dies
requested a resource
held by process
sequence of requests
die several times
times before acquiring
acquiring the needed
needed resource contrast
contrast this series
series of events
wound-wait scheme process
wounded and rolled
resource it holds
restarted and requests
requests the resource
fewer rollbacks occur
rollbacks may occur
18.5.2 deadlock detection
detection the deadlock-prevention
algorithm may preempt
occurred to prevent
prevent um ecessary
algorithm we construct
construct a wait-for
wait-for graph describing
describing the resourceallocation
wait-for graph represents
represents a deadlock
system is deciding
maintain the wait-for
graph we illustrate
illustrate this problem
problem by describing
describing several common
techniques to deal
issue these schemes
require each site
local wait-for graph
graph the nodes
holding or requesting
maintaining its local
wait-for graph note
note that processes
processes have requested
local wait-for graphs
graphs are constructed
manner for local
processes and resources
graph of site
two local wait-for
global wait-for graph
graph for figure
occurred the fact
find no cycles
depicted in figure
graph is acyclic
system to prove
graphs is acyclic
acyclic the graph
two wait-for graphs
graphs of figure
number of methods
organize the wait-for
system we describe
describe several common
18.5.2.1 centralized approach
graph is constructed
types of wait-for
graphs the real
real graph describes
describes the real
real but unknown
observer the constructed
algorithm the constructed
algorithm is invoked
results are correct
correct by correct
deadlock is reported
easy to construct
construct such correct
edge is inserted
invoke the cycledetection
searches its global
cycle is found
victim is selected
coordinator must notify
selected as victiitl
victiitl the sites
back the victim
graph-construction options listed
send a message
coordinator to notify
modification on receiving
updates its global
site can send
send a number
single message periodically
message periodically returning
process will maintain
maintain the global
graph as depicted
inserts the edge
similarly when site
deletes the edge
released a resource
false may exist
graph to illustrate
illustrate this point
system as depicted
releases the resource
holding in site
message from site
coordinator may discover
discover the false
aborted for reasons
process has exceeded
exceeded its allocated
decides to abort
coordinator has discovered
discovered a cycle
cycle and picked
centralized deadlock-detection algorithm
algorithm using option
detects all deadlocks
detect false deadlocks
deadlocks to avoid
avoid the report
report of false
require that requests
requests coordinator figure
local and global
global wait-for graphs
sites be appended
appended with unique
message with timestamp
received the request
grant the requested
resource a request
site is handled
sends an initiating
receiving this message
sends its local
graph the graph
reflects an instantaneous
synchronized with respect
controller has received
constructs a graph
algorithm was invoked
invoked as result
18.5.2.2 fully distributed
equally the responsibility
responsibility for detecting
deadlock every site
constructs a waitfor
graph that represents
represents a part
system the idea
graphs we present
construction of partial
graph a local
add one additional
additional node pex
graph an arc
site being held
site is waiting
waiting to acquire
acquire a resource
illustrate this situation
shown in figure
cycle involving pex
implies the possibility
augmented local wait-for
graphs from figure
deadlock does exist
invoke a distributed
distributed deadlock -detection
deadlock -detection algorithm
cycle involving node
involving node pex
pex this cycle
acquire a data
data item located
sj on discovering
discovering this cycle
site si sends
sends to site
message containing information
site si receives
receives this deadlock-detection
updates its local
newly constructed wait-for
constructed wait-for graph
cycle not involving
deadlock is found
scheme is iiwoked
pex is discovered
transmits a deadlock-detection
repeats the procedure
number of rounds
deadlock is discovered
deadlock-detection computation halts
illustrate this procedure
discovers the cycle
item in site
deadlock-detection message describing
describing that cycle
cycle is transmitted
transmitted from site
receives this message
obtaining the wait-for
graph of figure
include node pex
discovered the cycle
message to site
sites will discover
discover the cycle
two deadlock-detection messages
results in unnecessary
unnecessary message transfer
transfer and overhead
overhead in updating
graphs and searching
searching for cycles
graph in site
5.z of figure
reduce message traffic
site sk discovers
form it sends
sends a deadlock-detection
site s1c continues
continues its normal
leaving the burden
burden of initiating
initiating the deadlock-detection
illustrate this scheme
wait-for graphs maintained
maintained at sites
suppose that suppose
suppose both sites
discover these local
cycle in site
send a deadlock-detection
wait-for graph site
graph and discovers
out in section
distributed algorithms employ
employ a coordinator
process that performs
performs functions needed
systenc these functions
functions include enforcing
include enforcing mutual
enforcing mutual exclusion
maintaining a global
graph for deadlock
replacing a lost
controlling an input
input or output
process fails due
system can continue
algorithms that determine
election algorithms assume
system for ease
ease of notation
number of process
assume a one-to-one
correspondence between processes
processes and sites
processes the coordinator
largest priority number
algorithm must elect
elect that active
number this number
system in addition
algorithm must provide
provide a mechanism
process to identify
identify the current
examples of election
two different configurations
configurations of distributed
systems the first
first algorithm applies
applies to systems
process can send
require n2 messages
number of processes
system we assume
takes appropriate actions
actions to rejoin
rejoin the set
set of active
bully algorithm suppose
suppose that process
coordinator this task
task is completed
sends an election
higher priority number
priority number process
response is received
processes with numbers
failed and elects
coordinator and sends
message to inform
inform all active
processes with priority
answer is received
waiting to receive
receive a message
process is electing
electing itself coordinator
report the results
message is received
number is assumed
restart the algorithm
messages from process
records this information
started an election
sends a response
process that completes
completes its algorithm
processes with lower
failed process recovers
immediately begins execution
processes with higher
recovered process forces
forces all processes
algorithm is termed
demonstrate the operation
processes are active
fail p2 determines
failed by sending
sending a request
begins its election
algorithm by sending
sending an election
response and begins
sends the number
receive the number
recovers and notifies
sends no election
18.6.2 the ring
algorithm the assumes
links between processes
processes are unidirectional
sends its messages
right the main
main data structure
list the algorithm
detects a coordinator
right and adds
adds the number
first elect message
j-thatis,ifthe message received
-then pi adds
list and forwards
forwards the message
-then the active
determine the largest
list to identify
recovering process determines
determines the number
current coordinator process
process one solution
requires a recovering
process to send
send an inquiry
message this message
message is forwarded
set of processes
processes to agree
resulting in lost
lost or garbled
resultilcg lie unpredictable
lie unpredictable process
unpredictable process behavior
stopping their execution
execution without deviating
normal execution pattern
processes may send
garbled or incorrect
divisions byzantine army
surround an enemy
camp the byzantine
generals must reach
attack the enemy
enemy at dawn
divisions would result
result lie defeat
generals can communicate
messengers who run
run from camp
camp to camp
camp the generals
two major reasons
unable to deliver
deliver their messages
messages this situation
corresponds to unreliable
prevent the loyal
generals from reaching
reaching an agreement
agreement this situation
corresponds to faulty
faulty processes lie
lie a computer
18.7.1 unreliable communications
medium is unreliable
message to process
received the message
decide to compute
compute a functionfoo
received its message
compute a function
out a message
sends an acknowledgment
receives the acknowledgment
retransmit its message
message and wait
acknowledgment this procedure
system that site
compute boo note
two viable alternatives
situations has occurred
received its acknowledgment
presence of failure
accomplish this task
environment for processes
prove this claim
sequence of message
message transfers exists
agree to compute
message will arrive
sequence without affecting
affecting the decision
contradicting our assumption
assumption and showing
18.7.2 faulty processes
medium is reliable
processes can fail
fail in unpredictable
devise an algorithm
construct a vector
delay for reaching
agreement is proportionate
required for reaching
agreement is large
large no single
process is trustworthy
processes must collect
collect all information
information and make
presenting a general
present an algorithm
requires two rounds
rounds of information
sends its private
sends the information
refuse to send
process can choose
choose an arbitrary
value and pretend
rounds are completed
construct its vector
reported for process
rounds of exchange
set the value
value of ai,f
determine the exact
two events occur
occur the happened-before
distributed system timestamps
provide a consistent
consistent event ordering
variety of ways
making is distributed
system a distributed
applicable to ring-structured
sites or aborts
execute a commit
case of locking
case of timestamping
timestamping and validation
mechanism for generating
generating unique global
unique global timestamps
timestamps the mechanism
concatenate a local
identification or advance
advance local clocks
method for dealing
dealing with deadlocks
environment is deadlock
detection the main
problem is deciding
wait-for graph methods
methods for organizing
organizing the wait-for
wait-for graph include
include a centralized
distributed algorithms require
maintaining a backup
ready to assume
fails another approach
failed the algorithms
algorithms two algorithms
coordinator in case
case of failures
hierarchical deadlock-detection algorithm
graph is distributed
tree each non-leaf
non-leaf controller maintains
maintains a wait-for
lowest common ancestor
suppose that node
node ti appears
graph of controllers
graph of controller
exists a path
system is deadlocked
company is building
building a comp1.1ter
asked to develop
develop a scheme
scheme for dealing
explain your choice
derive an election
algorithm for bidirectional
messages are needed
building a computer
asked to write
write an algorithm
algorithm for achieving
achieving distributed mutual
distributed mutual exclusion
exclusion which scheme
model for faulty
faulty processors processors
processors processors follow
follow the prescribed
fail at unexpected
simply stop functioning
continue to participate
design an algorithm
algorithm for reaching
set of processors
discuss the conditions
wait-die scheme perform
scheme for granting
concurrently executing transactions
failure that occurs
2pc ensures transaction
ensures transaction atomicity
logical clock timestamp
clock timestamp scheme
timestamp scheme presented
order two events
two events based
timestamps the fact
timestamp of event
event c happened
happened before event
system discuss ways
extended to distinguish
distinguish concurrent events
events from events
system was developed
developed by lamport
characterize the behavior
behavior of distributed
found in fidge
babaoglu and marzullo
schwarz and mattern
first general algorithm
algorithm for implementing
lamport s scheme
ricart and agrawala
proposed a distributed
algorithm that requires
messages their algorithm
algorithm is presented
18.2.2 a squareroot
algorithm for distributed
exclusion is described
described by maekawa
algorithm for rilcg-structured
rilcg-structured systems presented
systems presented ilc
presented ilc section
18.2.3 was developed
developed by lann
carvalho and roucairol
discusses mutual exclusion
exclusion in computer
agrawal and abbadi
describes an efficient
efficient and fault-tolerant
solution of distributed
exclusion a simple
taxonomy for distributed
distributed mutual-exclusion algorithms
algorithms is presented
presented by raynal
issue of distributed
synchronization is discussed
discussed by reed
reed and kanodia
totally disjoint processes
problem is presented
presented by chang
protocol was developed
developed by lampson
lampson and sturgis
two modified versions
commit and presume
reduce the overhead
2pc by defilling
defilling default assumptions
fate of transactions
mohan and lindsay
problems of implementillg
implementillg the transaction
database were presented
presented by gray
spector and schwarz
offer comprehensive discussions
discussions of distributed
distributed concurrency control
concurrency control rosenkrantz
timestamp distributed deadlock-prevention
distributed deadlock-prevention algorithm
fully distributed deadlock-detection
distributed deadlock-detection scheme
deadlock-detection scheme presented
presented ill section
18.5.2 was developed
developed by obermarck
hierarchical deadlock-detection scheme
scheme of exercise
appears in menasce
menasce and muntz
surveys of deadlock
detection in distributed
detected by takilcg
takilcg global snapshots
discussed ill chandy
chandy and lamport
byzantine generals problem
problem is discussed
discussed by lamport
presented by garcia-molina
system was written
written by larue
coverage of operating-system
general-purpose computing systems
systems with requirements
system that requires
results be correct
results be produced
deadline period results
period results produced
deadline has passed-even
passed-even if correct-may
traditional operating-system scheduling
operating-system scheduling algorithms
modified to meet
meet the stringent
stringent timing deadlines
multimedia data multimedia
data multimedia data
multimedia data consist
consist of continuous-media
audio and video
conventional data continuous-media
data continuous-media data-such
data-such as frames
frames of video-must
video-must be delivered
demands of handling
handling continuous-media data
continuous-media data require
data require significant
notably in memory
desktop and server
turn our attention
attention to real-time
real-time computing systems
systems the requirements
requirements of real-time
real-time systems differ
largely because real-time
systems must produce
provide an overview
overview of real-time
real-time computer systems
systems and describe
describe how real-time
real-time operating systems
constructed to meet
stringent timing requirements
explain the timing
distinguish between hard
hard and soft
soft real-time systems
discuss the defining
characteristics of real-time
describe scheduling algorithms
algorithms for hard
hard real-time systems
deadline has passedeven
passedeven if correct-may
value to illustrate
robot that delivers
vision-control system identifies
identifies a wall
robot has walked
identifying the wall
met its requirement
contrast this timing
interactive desktop computer
desktop computer system
desirable to provide
provide a quick
real-time systems executing
executing on traditional
traditional computer hardware
range of applications
applications in addition
embedded in specialized
ordinary home appliances
ovens and dishwashers
consumer digital devices
cameras and mp3
telephones and blackberry
blackberry handheld devices
present in larger
automobiles and airplanes
airplanes an embedded
system for controlling
controlling a home
options for scheduling
scheduling the operation
dishwasher-the water temperature
type of cleaning
light or heavy
dishwasher is unaware
fact a computer
embedded system controlling
system controlling antilock
controlling antilock brakes
automobile each wheel
sliding and traction
traction are occurring
sensor continually sends
sends its data
system controller taking
taking the results
tells the braking
pressure to apply
embedded computer system
important to note
systems are real-time
systems are identified
identified as safety-critical
incorrect operation-usually due
missed deadline -results
sort of catastrophe
examples of safety-critical
safety-critical systems include
systems include weapons
include weapons systems
antilock brake systems
health-related embedded systems
system must respond
respond to events
injury-or worse-might occur
majority of embedded
qualify as safety-critical
including fax machines
switches and routers
missing deadline requirements
deadline requirements results
soft a hard
hard real-time system
guaranteeing that critical
critical realtime tasks
tasks be completed
deadlines safety-critical systems
typically hard real-time
systems a soft
soft real-time system
critical real-time task
task will receive
retain that priority
completes many commercial
linux-provide soft real-time
soft real-time support
explore the characteristics
systems and address
address issues related
related to designing
designing both soft
soft and hard
hard real-time operating
real-time operating systencs
characteristics are typical
single purpose small
purpose small size
size inexpensively mass-produced
inexpensively mass-produced specific
mass-produced specific timing
specific timing requirements
system typically serves
brakes or delivering
real-time system controlling
controlling an airliner
airliner s navigation
real-time operating system
operating system reflects
reflects its single-purpose
real-time systems exist
exist in environments
environments where physical
space is constrained
amount of space
result of space
real-time systems lack
cpu processing power
amount of memory
standard desktop pcs
real-time systems run
gigabytes of physical
required to run
run the operating
memory is limited
systems are implemented
found in home
appliances and consumer
consumer devices devices
thermostats are mass-produced
microprocessors for real-time
technique for reducing
reducing the cost
technique for organizing
organizing the components
organizing the computer
provide the mechanism
mechanism intercom1ectin.g individual
intercom1ectin.g individual components
embedded system controllers
memorymouse keyboard printer
keyboard printer figure
attached peripheral ports
single integrated circuit
circuit the soc
typically less expensive
organization of figure
final characteristic identified
soft real-time operating
support the timing
issue real-time operating
operating systems meet
systems meet tim.ing
meet tim.ing requirements
algorithms that give
give real-time processes
processes the highest
highest schedulil1.g priorities
schedulers must ensure
technique for addressing
addressing timing requirements
minimizing the response
discuss the features
designing an operating
system that supports
supports real-time processes
typically not needed
system we begin
begin by examining
examining several features
operatil1.g systems discussed
versions of windows
windows these systems
systems typically provide
typically provide support
variety of peripheral
dvd drives protection
protection and security
security mechanisms multiple
mechanisms multiple users
multiple users supporting
supporting these features
features often results
sophisticated -and large-kernel
forty million lines
lines of source
code in contrast
typical real-time operating
written in thousands
millions of lines
expect these simple
systems to il1.clude
il1.clude the features
nt real-time systems
real-time systems provide
provide these features
crucial to standard
real-time systems serve
serve a single
features found il1
il1 a desktop
support a disk
drive or dvd
typical real-time system
include the notion
user the system
system simply supports
supports a small
number of tasks
input from hardware
supported by standard
standard desktop operating
desktop operating systems
systems are impossible
impossible to provide
provide without fast
processors and large
amounts of memory
unavailable in real-time
real-time systems due
due to space
earlier in addition
realtime systems lack
systems lack sufficient
lack sufficient space
space to support
support peripheral disk
peripheral disk drives
drives or graphical
systems may support
support file systems
systems using nonvolatile
supporting features common
common in standard
physical memory figure
translation in real-time
increase the cost
cost of real-time
make such systems
systems economically impractical
additional considerations arise
real-time system providing
system providing virtual
providing virtual memory
virtual memory features
features as described
include a memory-management
logical to physical
mmus typically increase
cost and power
required to translate
translate logical addresses
addresses to physical
translation look-aside buffer
miss-may be prohibitive
hard real-time environment
examine several approaches
approaches for translating
addresses in real-time
strategies for managing
managing address translation
designers of real-time
cpu generates logical
generates logical address
mapped to physical
bypass logical addresses
cpu generate physical
generate physical addresses
physical addresses directly
directly this teclmique-kn.own
teclmique-kn.own as real-addressing
mode-does not employ
employ virtual memory
virtual memory techniques
problem with real-addressil1.g
absence of memory
protection between processes
processes real-addressing mode
require that programmers
programs are loaded
loaded into memory
spent on address
common in embedded
systems with hard
hard real-time constraints
constraints in fact
operating systems rum1.ing
rum1.ing on microprocessors
mmu actually disable
disable the mmu
mmu to gain
gain the performance
benefit of referencing
referencing physical addresses
strategy for translating
dynamic relocation register
relocation register shown
program is loaded
generated by adding
adding the contents
real-time systems configure
configure the mmu
mmu to perform
easily translate logical
system still suffers
lack of memory
system to provide
provide full virtual
full virtual memory
virtual memory functionality
functionality as described
address translation takes
translation takes place
place via page
tlb in addition
addition to allowing
allowing a program
processes for systems
systems without attached
attached disk drives
paging and swapping
systems may provide
provide such features
features using nvram
nvram flash memory
memory the lynxos
systems are examples
examples of real-time
operating systems providing
systems providing full
providing full support
support for virtual
keeping in mind
identify the features
implementing a real-time
system this list
provide more features
systems provide fewer
priority-based scheduling preemptive
scheduling preemptive kernel
preemptive kernel minimized
kernel minimized latency
latency one notable
feature we omit
list is networking
support networking protocols
system must provide
provide networking capabilities
system that gathers
gathers real-time data
data and transmits
include networking features
self-contained embedded system
embedded system requiring
requiring no interaction
obvious networking requirencent
examine the basic
basic requirements listed
19.4.1 priority-based scheduling
requires the cpu
system must support
support a priority-based
algorithm with preemption
recall that priority-based
priority-based scheduling algorithms
scheduling algorithms assign
assign each process
process a priority
tasks are assigned
assigned higher priorities
deemed less important
scheduler also supports
process currently running
algorithms are discussed
discussed in detail
detail in chapter
soft real-time scheduling
real-time scheduling features
linux operating systems
systems assigns real-time
assigns real-time processes
highest scheduling priority
highest levelspriority values
reserved for real-time
real-time processes solaris
solaris and linux
linux have similar
similar prioritization schemes
providing a preemptive
scheduler only guarantees
guarantees soft real-time
soft real-time functionality
real-time functionality hard
functionality hard real-time
guarantee that real-time
serviced in accord
requirem ~ ents
making such guarantees
guarantees may require
require additional scheduling
additional scheduling features
features in section
cover scheduling algorithms
19.4.2 preemptive kernels
preemptive kernels nonpreemptive
kernels nonpreemptive kernels
nonpreemptive kernels disallow
kernels disallow preemption
running in kernel
process will run
exits kernel mode
voluntarily yields control
cpu in contrast
kernel mode designing
mode designing preemptive
designing preemptive kernels
traditional user-oriented applications
require such quick
quick response times
commercial desktop operating
desktop operating systems-such
systems-such as windows
windows xp-are nonpreemptive
meet the timing
hard real-time systems-preemptive
real-time systems-preemptive kernels
kernels are mandatory
wait an arbitrarily
arbitrarily long period
task was active
strategies for making
making a kernel
preemptible one approach
insert preemption points
points in long-duration
long-duration system calls
calls a preemption
preemption point checks
context switch takes
switch takes place
high-priority process terminates
interrupted process continues
system call preemption
call preemption points
kernel data structures
strategy for making
data being updated
updated are protected
protected from modification
19.4.3 minimizing latency
system the system
event in real
events may arise
expires-or in hardware-as
remote-controlled vehicle detects
approaching an obstruction
antilock brake system
wheel first detects
controlling the antilock
milliseconds to respond
control the situation
situation any response
response that takes
longer might result
automobile s veering
out of control
control in contrast
first occurs event
occurs event latency
event latency real-time
latency real-time system
real-time system responds
system controlling radar
airliner might tolerate
tolerate a latency
types of latencies
affect the performance
performance of real-time
interrupt latency dispatch
latency dispatch latency
dispatch latency interrupt
latency interrupt latency
interrupt latency refers
routine that services
services the interrupt
occursf the operating
complete the instruction
executing and determine
determine the type
type of interrupt
interrupt that occurred
save the state
process before servicing
servicing the interrupt
specific interrupt service
interrupt service routine
total time required
required to perform
perform these tasks
crucial for real-time
task t running
determine or interrupt
interrupt type owitocontiex
owitocontiex t interrupt
ish i figure
systems to minimize
minimize interrupt latency
latency to ensure
ensure that real-time
real-time tasks receive
receive immediate attention
important factor contributing
contributing to interrupt
disabled while kernel
updated real-time operating
operating systems require
require that interrupts
interrupts be disabled
fact be bounded
bounded to guarantee
guarantee the deterministic
deterministic behavior required
required of hard
hard real-time kernels
schedulil g dispatcher
dispatcher to stop
stop one process
process and start
dispatch latency providing
latency providing real-time
providing real-time tasks
mandates that real-time
operating systems minimize
minimize this latency
technique for keeping
keeping dispatch latency
dispatch latency low
provide preemptive kernels
diagram the makeup
makeup of dispatch
latency the conflict
phase of dispatch
release by low-priority
processes of resources
latency with preemption
milliseconds with preemption
affect dispatch latency
dispatch latency arises
read or modify
modify kernel data
beil g accessed
process-or a chain
chain of lower-priority
processes as kernel
kernel event response
response to event
event ~ --------response
process made interrupt
interrupt available processing
----1 ~ _....
real-time process execution
resource the situation
process is preempted
preempted in favor
follow the order
assume that process
process h requires
accessed by process
finish using resource
lower priority -process
priority -process m-has
-process m-has affected
affected how long
accessing resources needed
higher-priority process inherit
inherit the higher
resources in question
protocol allows process
inherit the priority
priority of process
preempting its execution
execution when process
finished using resource
relinquishes its inherited
assumes its original
priority as resource
process h -not
coverage of scheduling
primarily on soft
systems as mentioned
preference over noncritical
noncritical processes hard
processes hard real-time
systems have stricter
requirements a task
deadline ; service
deadline has expired
scheduling for hard
define certain characteristics
processes are considered
require the cpu
cpu at constant
fixed processing timet
acquires the cpu
period1 d period2
illustrates the execution
relationship and assign
deadline or rate
form of scheduling
announce its deadline
scheduler either admits
admits the process
process will complete
rejects the request
request as impossible
explore scheduling algorithms
algorithms that address
address the deadline
requirements of hard
19.5.1 rate-monotonic scheduling
scheduling the rate-monotonic
rate-monotonic scheduling algorithm
scheduling algorithm schedules
algorithm schedules periodic
schedules periodic tasks
static priority policy
policy with preemption
process is running
preempt the lower-priority
process upon entering
entering the system
task is assigned
assigned a priority
priority inversely based
period the shorter
shorter the period
higher the priority
longer the period
lower the priority
priority the rationale
assign a higher
priority to tasks
tasks that require
rate-monotonic scheduling assumes
complete its cpu
schedule these tasks
meets its deadlines
measure the cpu
-the cpu utilization
total cpu utilization
meet their deadlines
leave the cpu
suppose we assign
first and completes
completes its cpu
scheduler has caused
miss its deadline
scheduling of tasks
figure 19.8 rate-monotonic
19.8 rate-monotonic scheduling
processes is shown
meeting its first
deadline p2 starts
point and runs
burst p1 completes
point the scheduler
deadline the system
system is idle
scheduling is considered
algorithm that assigns
assigns static priorities
examine a set
scheduling would assign
period the total
shows the scheduling
scheduling of processes
running and n.ms
cpu burst process
process p1 n.ms
misses the deadline
deadline for completion
utilization is bounded
maximize cpu resources
resources the worst-case
worst-case cpu utilization
utilization for scheduling
scheduling n processes
percent combined cpu
combined cpu utilization
two processes scheduled
scheduled in figures
algorithm is guaranteed
guaranteed to schedule
deadlines with rate-monotonic
scheduled in figure
19.5.2 earliest-deadline-first scheduling
earliest-deadline-first scheduling earliest-deadline-first
scheduling dynamically assigns
dynamically assigns priorities
deadline the earlier
earlier the deadline
process becomes runnable
adjusted to reflect
reflect the deadline
newly rmmable process
differs from rate-monotonic
priorities are fixed
illustrate edf scheduling
schedule the processes
failed to meet
meet deadline requirements
requirements under rate-monotonic
rate-monotonic scheduling recall
priority is higher
process p2 process
process p2 begins
scheduling allows process
meet their first
first deadlines process
meeting its deadline
scheduled to run
unlike the rate-monotonic
require that processes
processes be periodic
require a constant
amount of cpu
a1mom1ce its deadline
runnable the appeal
appeal of edf
process can meet
meet its deadline
requirements and cpu
percent in practice
impossible to achieve
achieve this level
level of cpu
cpu utilization due
cost of context
switching between processes
processes and interrupt
19.5.3 proportional share
proportional share scheduling
share scheduling proportional
scheduling proportional share
proportional share schedulers
share schedulers operate
operate by allocating
allocating t shares
applications an application
application can receive
receive n shares
shares of timef
timef thus ensuring
shares this scheme
percent o total
schedulers must work
work in conjunction
admission control policy
policy to guarantee
receives its allocated
admit a client
number of shares
shares if sufficient
process d requested
controller would deny
deny d entry
19.5.4 pthread scheduling
scheduling the posix
extensions for real-time
posix pthread api
pthread api related
related to scheduling
scheduling real-time threads
real-time threads pthreads
threads pthreads defines
defines two scheduling
two scheduling classes
classes for real-time
sched __fifo sched_rr
__fifo sched_rr sched__fifo
sched_rr sched__fifo schedules
sched__fifo schedules threads
queue as outlined
outlined in section
slicing among threads
threads of equal
highest-priority real-time thread
granted the cpu
terminates or blocks
sincilar to sched_fifo
equal priority pthreads
class-scheddther-but its implementation
implementation is undefined
undefined and system
pthread api specifies
setting the scheduling
set of attributes
current scheduling policy
function both functions
functions return non-zero
return non-zero values
pthread.h # include
stdio.h # define
policy ; pthread_t
attributes i pthread_attr_init
set the scheduling
unable to set
create the threads
thread will begin
function i void
pthread scheduling api
illustrate a pthread
api this program
program first determines
determines the current
sets the scheduling
algorithm to scheddther
popular real-time operating
operating system providing
providing hard real-time
hard real-time support
real-time support vxworks
developed by wind
wind river systems
consumer and industrial
rovers-spirit and opportunity-that
opportunity-that began exploring
exploring the planet
organizationofvxworks is shown
vxworks is centered
wind microkernel recall
discussion in section
2.7.3 that microkernels
microkernels are designed
minimum of features
features ; additional
provided in libraries
kernel this approach
offers many benefits
minimizing the size
kernel-a desirable feature
requiring a small
wind microkernel supports
processes the wind
microkernel provides support
support for individual
processes and threads
similar to linux
distinguish between processes
embedded real-time application
real-time application figure
organization of vxworks
operating .systent isbe
incre ~ singlyinreai-time
enviroft ~ ments.yve
hav ~ alreadycovered
alreadycovered its softr
softr ~ fil-ti,nteschedv,ling.fe
fil-ti,nteschedv,ling.fe ~ tur
,whereby real-time tasl
real-time tasl sareassignt
sareassignt ; d.thehj.ghe
d.thehj.ghe ~ tpriorityi
release ofthe kernel
ofthe kernel makelinux
kernel makelinux even,more
makelinux even,more suitilb
suitilb le fot
fot .embedded systems
.embedded systems thes
fullr pree ptive
pree ptive kernel
tinte regardless ofthe
arc ~ itecttlresbydi
itecttlresbydi \ tlcljng
tlcljng another strategy
integrah1lg linux iftto
linux iftto reanill1e
iftto reanill1e .envirof
operat ~ s,.systt
s,.systt ; it1
vith a mallreal-.ti
mallreal-.ti ! fle
fle ~ ernet
tht ; reby
cts as botl
real-tipte ~ ystem
ystem this .is
ppt ; rat
systerrl in .rtlinux
standard lirn.tx kernel
lirn.tx kernel run
real ~ htt1eikerllelj
alliftterrupts.-,-directing each interrupt
ndarclkerrtel.or to anintef
anintef ~ rupt.randler
prevents the shtndar
shtndar \ i.linuxkernel
difft ; rent
schec1ul ~ j1g
earliest ~ deadline-first
scheduling the wind
two separate scheduling
separate scheduling models
scheduling and nonpreemptive
nonpreemptive round-robin scheduling
levels the scheduler
supports the posix
api for real-time
covered in section
interrupts the wind
microkernel also manages
interrupts to support
support hard real-time
hard real-time requirements
interrupt and dispatch
dispatch latency times
times are bounded
communication the wind
wind micro kernel
memory and message
passing as mechanisms
mechanisms for communication
communication between separate
tasks to communicate
mechanism that behaves
communicate by writing
fik the pipe
protect data shared
shared by separate
vxworks provides semaphores
semaphores and mutex
priority inheritance protocol
protocol to prevent
prevent priority mversion
microkernet vxworks includes
includes several component
libraries that provide
allowing the designer
system to customize
customize the system
system this strategy
include only required
minimizing the size-or
footprint-of the operating
takes an interesting
approach to memory
supporting two levels
levels of virtual
memory the first
basis this policy
enables an application
pages as non-cacheable
non-cacheable when data
separate tasks running
data can reside
reside in separate
separate caches local
local to individual
supports a cache-coherency
policy to ensure
maintain a consistent
level of virtual
virtual memory requires
requires the optional
optional virtual memory
virtual memory component
memory component vxvmi
component is loaded
task to mark
mark certain data
areas as private
private a data
data area marked
marked as private
task it belongs
vxworks allows pages
pages containing kernel
declared as read-only
distinguish between user
user and kernel
run in kernel
giving an application
entire address space
computer system requiring
requiring that results
period ; results
deadline has passed
systems are embedded
embedded in consumer
types of real-time
assigning real-time tasks
real-time tasks higher
tasks higher scheduling
higher scheduling priority
tasks hard real-time
systems must guarantee
tasks are serviced
periods in addition
addition to strict
strict timing requirements
purpose and running
running on small
meet timing requirements
systems must employ
employ various techniques
techniques the scheduler
favor of higher-priority
higher-priority real-time tasks
real-time tasks real-time
tasks real-time operating
systems also address
address specific timing
specific timing issues
issues by minimizing
minimizing both interrupt
real-time scheduling algorithms
scheduling algorithms include
algorithms include rate-monotonic
rate-monotonic and earliestdeadline
earliestdeadline first scheduling
first scheduling rate-monotonic
scheduling rate-monotonic scheduling
rate-monotonic scheduling assignb
scheduling assignb tasks
priority than tasks
earliest-deadline-first scheduling assigns
scheduling assigns priority
upcoming deadlines-the earlier
technique of dividing
dividing up processor
shares and assigning
assigning each process
process a number
guaranteeing each process
process its proportional
share of cpu
features for scheduling
explain why interrupt
identify whether hard
hard or soft
household b control
nuclear power plant
plant c fuel
fuel economy system
automobile d landing
processes be scheduled
scheduled using rate-monotonic
rate-monotonic scheduling illustrate
illustrate your answer
illustrate the scheduling
processes using earliestdeadline
priority inversion problem
system also discuss
proportional share scheduler
circumstances is rate-monotonic
rate-monotonic scheduling inferior
inferior to earliest-deadline-first
scheduling in meeting
meeting the deadlines
processes the scheduling
rate monotonic scheduling
scheduling and earliest-deadline-first
presented in liu
liu and layland
algorithms and extensions
extensions to previous
algorithms are presented
presented in jensen
describes a dynamic
dynamic priority-assignment algorithm
algorithm called least-laxity-first
least-laxity-first scheduling stoica
analyze the proportional
proportional share algorithm
algorithm useful information
popular operating systems
obtained from http
directions and important
important research issues
field of embedded
systems are discussed
article by stankovic
operating systems handle
systems handle conventional
handle conventional data
handle other kinds
kinds of data
trend in technology
incorporation of multimedia
data into computer
conventional files continuous-media
files continuous-media data
continuous-media data differ
differ from conventional
explore the demands
demands of continuous-media
affect the design
design of operating
systems that support
support the requirements
requirements of multimedia
objectives to identify
identify the characteristics
characteristics of multimedia
examine several algorithms
compress multimedia data
explore the operating
cpu and disk
scheduling and network
multimedia the term
term multimedia describes
describes a wide
popular use today
today these include
mp3 audio files
short video clips
clips of movie
previews or news
news stories downloaded
internet multimedia applications
applications also include
include live web
live web casts
world wide web
speeches or sporting
viewer in manhattan
manhattan to observe
cafe in paris
paris multimedia applications
audio or video
application often includes
includes a combination
movie may consist
consist of separate
applications be delivered
desktop personal computers
directed toward smaller
including personal digital
personal digital assistants
stock quotes delivered
delivered in real
explore several characteristics
systems and examine
examine how multimedia
standards for representing
video and audio
20.1.1 media delivery
media delivery multimedia
delivery multimedia data
data are stored
data the major
accessing the regular
regular file requires
requires no special
video is represented
series of images
displayed in rapid
succession the faster
faster the frames
frames are displayed
smoother the video
appears in general
smooth to human
retains the image
presentation the video
requirements as multimedia
local file system
data are delivered
delivery as examples
examples include watching
watching a dvd
computer or listening
mp3 audio file
handheld mp3 player
comprise a regular
system and played
viewed or listened
server and delivered
cellular telephone data
data from live
live continuous media
continuous media -such
-such as live
live webcams -are
-are also streamed
server to clients
types of streaming
download and real-time
file containing audio
video is downloaded
downloaded and stored
client s local
back the media
small media files
differs from progressive
file is streamed
-and not stored
-by the client
streaming is preferable
preferable to progressive
download for media
videos and internet
client to move
fast-forward and rewind
controller to move
5-minute streaming video
video or replay
clip the ability
ability to move
streaming and ondemand
deliver an event
occurring a radio
radio program broadcast
live real-time stream
stream in fact
text regularly listens
favorite radio station
station from vermont
home in utah
internet live real-time
live real-time streaming
webcams and video
video conferencing due
type of real-time
clients random access
stream in addition
live delivery means
client who wishes
wishes to view
progress will join
join the session
missing earlier portions
missed the first
deliver media streams
movies and archived
lectures the difference
difference between live
live and on-demand
event is occurring
watching a live
watching a news
watching an on-demand
viewing a movie
notion of arriving
type of on-demand
examples of well-known
well-known streaming media
streaming media products
media products include
products include realplayer
windows media player
player these products
include both servers
servers that stream
stream the media
media and client
client media players
systems the demands
demands of multimedia
systems are unlike
unlike the demands
demands of traditional
applications in general
100-minute mpeg-1 video
mpeg-1 video file
video file requires
1.125gb of storage
minutes of high-defuution
storage a server
server storing hundreds
hundreds or thousands
thousands of digital
digital video files
require several terabytes
terabytes of storage
media may require
require very high
high data rates
rates consider digital
frame of color
video is displayed
bits to represent
represent the color
bits of data
bandwidth in excess
mbps is required
applications are sensitive
sensitive to timing
delays during playback
file is delivered
delivery must continue
rate during playback
listener or viewer
subjected to pauses
20.1.3 operating-system issues
system to deliver
deliver continuous-media data
guarantee the specific
rate and timing
requirements-of continuous media
providing these qos
qos guarantees affects
affects several components
system and influences
influences such operating-system
issues as cpu
network management specific
management specific examples
specific examples include
compression and decoding
decoding may require
require significant cpu
significant cpu processing
priorities to ensure
meeting the deadline
requirements of continuous
efficient to meet
meet the rate
protocols must support
support bandwidth requirements
requirements while minimizing
delay and jitter
related to qos
techniques for compressing
compressing multimedia data
data as suggested
compression makes significant
makes significant demands
size and rate
space for storage
client more quickly
content is beilcg
cormection in discussing
discussing file compression
original file size
accessed a feature
compress the file
decompression compression algorithms
algorithms are classified
data are lost
file is decoded
lossless compression ensures
form in generat
generat lossy techniques
lossy techniques provide
provide much higher
higher cone pression
cone pression ratios
types of data
data can tolerate
tolerate lossy compression-namely
video lossy compression
lossy compression algorithms
algorithms often work
work by eliminating
eliminating certain data
high or low
detect some lossy
operate by storing
differences between successive
successive frames lossless
frames lossless algorithms
compressing text files
restore these compressed
lossy compression schemes
schemes for continuous-media
moving picture experts
picture experts group
set of file
formats and compression
standards for digital
video because digital
standards is divided
media file layer
player to multiplex
multiplex the audio
synchronized during playback
major mpeg standards
stream the resolution
quality slightly lower
conventional vcr videos
vcr videos mp3
videos mp3 audio
medium for storing
mpeg-1 for video
mpeg-1 can achieve
achieve a compression
practice compression ratios
require high data
download short video
compressing dvd movies
movies and digital
including high-definition television
identifies a number
number of levels
levels and profiles
profiles of video
characterizes the video
video s quality
quality in general
higher the level
level of resolution
higher the required
required data rate
data rate typical
rate typical bit
typical bit rates
mpeg-2 encoded files
mpeg-2 requires higher
requires higher rates
lmsuitable for delivery
delivery of video
two-dimensional and three-dimensional
three-dimensional animation layers
animation layers animation
layers animation makes
users to interact
file during playback
potential home buyer
buyer can download
moving from room
room to room
chooses another appealing
level of quality
slow network connections
56-i bps modems
high-speed local area
local area networks
networks with rates
providing a scalable
delivered to wireless
including handheld computers
mpeg standards discussed
discussed here perform
perform lossy compression
compression to achieve
achieve high compression
high compression ratios
ratios the fundamental
idea behind mpeg
store the differences
cover further details
mpeg performs compression
encourage the interested
reader to consult
consult the bibliographical
applications often require
levels of service
system that differ
requirements of traditional
tin1.ing and rate
issues of foremost
playback of audio
video data demands
data be delivered
fixed rate traditional
rate traditional applications
tasks that request
data at constant
video might require
require a rate
maintaining this rate
frame be delivered
context of deadlines
assume that frame
frame f1 succeeds
deadline for displaying
system is unable
unable to display
display the frame
requirements and deadlines
quality of service
makes a best-effort
attempt to satisfy
satisfy the requirements
guarantees are made
treats different types
types of traffic
giving certain traffic
traffic streams higher
streams higher priority
requirements are guaranteed
traditional operating systems-the
operating systems-the systems
provide only best-effort
amount of resources
workload would demand
demand if demand
demand exceeds resource
exceeds resource capacity
system however next-generation
next-generation multimedia systems
make such assumptions
assumptions these systems
systems must provide
provide continuous-media applications
explore various techniques
techniques that enable
enable multimedia systems
systems to provide
provide such service-level
number of parameters
parameters defining qos
qos for multimedia
amount of work
interval for multimedia
request is first
result is produced
requests a media
stream is delivered
jitter is related
related to delay
client must wait
wait to receive
receive a stream
refers to delays
delays that occur
occur during playback
stream certain multimedia
on-demand real-time streaming
tolerate this sort
sort of delay
generally considered unacceptable
unacceptable for continuous-media
long pauses-or lost
pauses-or lost frames-during
lost frames-during playback
frames-during playback clients
compensate for jitter
jitter by buffering
amount of data-say
seconds  worth-before
worth-before beginning playback
errors are handled
handled during transmission
transmission and processing
processing of continuous
continuous media errors
errors may occur
due to lost
network or processing
cpu in these-and
packets typically arrive
arrive too late
levels of quality
higher the quality
rate a client
client may negotiate
negotiate a specific
specific data rate
quality during playback
client to configure
configure the player
client s connection
client to receive
receive a streaming
data rate specific
client is negotiating
provide qos guarantees
simply the practice
practice of admitting
admitting a request
request for service
server has sufficient
resources to satisfy
satisfy the request
theater only admits
situations in everyday
life where admission
system becomes unable
unable to meet
meet its qos
discussed using semaphores
method of implementing
implementing a simple
simple admission-control policy
exist a finite
number of nonshareable
resource is requested
grant the request
semaphores to implement
implement an admission-control
policy by first
initializing a semaphore
number of resources
resource is made
resource is released
invocation of signal
calls to wait
technique for implementing
implementing admission control
server may include
include the cpu
note that resources
exclusive or shared
single or multiple
client must make
make a reservation
resource il1 advance
reservation is denied
denied an admission-control
admission-control scheme assigns
type of resource
requests for resources
required data rates
resource manager determines
resource can meet
meet the qos
level of qos
request is accepted
resource manager reserves
reserves the resources
assuring the client
desired qos requirements
met in section
examine the admission-control
ensure qos guarantees
cineblitz multimedia storage
multimedia storage server
covers real-time systems
systems simply give
simply give scheduling
give scheduling priority
priority to critical
processes a soft
real-time system ensures
requirement of continuous
deadline ; data
deadline are unusable
unusable multimedia systems
systems thus require
require hard real-time
hard real-time scheduling
scheduling to ensure
withii1 a guaranteed
scheduling issue concerns
distinction first discussed
process will remain
static priority scheduling
priority scheduling algorithms
algorithms that assign
assign dynamic priorities
priorities allow priorities
priorities to change
systems use dynamic
priorities when scheduling
scheduling non-real-time tasks
intention of giving
giving higher priority
priority to interactive
scheduling real-time tasks
systems assign static
assign static priorities
real-time scheduling strategies
scheduling strategies discussed
rate and deadline
deadline qos requirements
requirements of continuous-media
first discussed disk
discussed disk scheduling
scheduling in chapter
primarily on systems
systems that handle
goals are fairness
fairness and throughput
traditional disk schedulers
disk schedulers employ
employ some form
constraints that conventional
conventional data files
deadlines and rate
satisfied to preserve
preserve qos guarantees
conflict continuous-media files
files typically require
high disk-bandwidth rates
rates to satisfy
satisfy their data-rate
low transfer rates
high latency rates
schedulers must reduce
reduce the latency
times to ensure
ensure high bandwidth
reducing latency times
times may result
explore two diskscheduling
two diskscheduling algorithms
algorithms that meet
requirements for continuous-media
20.5.1 earliest-deadline-first scheduling
presented the earliest-deadline-first
algorithm in section
queue to order
edf is similar
similar to shortest-seek-time-first
servicing the request
deadline is serviced
deadline may result
result in higher
higher seek tim.es
heads may move
suppose a disk
queue of cylinders
strict edf scheduling
head will move
passes over cylinder
serviced the request
request for cylinder
route to cylinder
preserved the deadline
requirement for cylinder
20.5.2 scan-edf scheduling
scheduling the fundamental
problem with strict
ignores the position
heads will swil
leading to unacceptable
unacceptable seek times
negatively affect disk
affect disk throughput
disk throughput recall
faced with fcfs
context of cpu
address this issue
issue by adopting
adopting scan schedulil
whereil the disk
disk arm moves
disk arm reaches
reaches the end
direction this strategy
strategy optimizes seek
optimizes seek times
algorithm that combines
edf with scan
starts with edf
ordering but services
usil g scan
scan-edf may batch
ordering to service
techniques for batching
requests with similar
prevent a request
deadline if deadlines
organized in groups
requests per batch
requests whose deadlines
followil g requests
head is moving
moving toward cylinder
last batch requests
first service request
request d note
downward in cylinder
heads begin moving
begin moving upward
upward in cylinders
servicing requests hand
foremost qos issue
issue with multimedia
multimedia systems concerns
systems concerns preserving
concerns preserving rate
preserving rate requirements
view a video
service greatly depends
system s ability
ability to deliver
deliver the frames
coverage of issues
cpu and disk-scheduling
algorithms has focused
meet the quality-ofservice
network-perhaps the internet-issues
delivers the multimedia
affect how qos
demands are met
explore several network
network issues related
demands of continuous
noting that computer
networks in general
-and the internet
internet in particular
provide network protocols
ensure the delivery
delivery of data
data with timing
protocols-notably those running
running on cisco
prioritized to meet
meet qos requirements
data are routed
transmission will encounter
network traffic issues-issues
data for multimedia
delivering the content
protocol that addresses
addresses timing issues
standard for delivering
delivering real-time data
transporting media formats
files and video
video files compressed
compressed using mpeg
provide any qos
guarantees ; rathe1
receiver to remove
remove jitter introduced
introduced by delays
delays and congestion
two other approaches
approaches for handling
handling the unique
unicasting and multicasting
multicasting in general
methods for delivering
delivers the content
server must establish
establish a separate
,  nh
receive the content
group of receivers
unicasting and broadcasting
issue with unicast
separate unicast session
wasteful for live
server must make
make several copies
receive the stream
server to deliver
deliver a single
difficulty with multicasting
routers that relay
relay the content
client must cross
cross intermediate routers
incurred during routing
routing may result
result in violation
client is connected
unable to receive
receive the multicast
media are delivered
delivered across unicast
server and clients
sites are connected
connected to multicasting
reasonable physical proximity
routers the organization
deliver a presentation
chief executive officer
officer using multicasting
20.6.2 real-time streaming
real-time streaming protocol
protocol in section
described some features
features of streaming
access a media
replaying or pausing
answer this question
delivered to clients
clients one approach
standard web server
hypertext transport protocol
play media streamed
client first requests
uniform resource locatm
streaming media file
file this metafile
metafile is delivered
client s web
browser then starts
type of media
real audio stream
stream would require
require the realplayer
play back streaming
back streaming windows
streaming windows media
media the media
player then contacts
contacts the web
server and requests
requests the streaming
media the stream
conventional web server
player using standard
standard http requests
requests this process
process is outlined
outlined in figure
problem with delivering
delivering streaming media
http is considered
considered a protocol
maintain the state
client to pause
delivery of streaming
streaming media content
pausing would require
require the web
stream to begin
wished to resume
playback an alternative
specifically for streaming
media one protocol
designed for communication
communication between streaming
servers and media
significant advantage rtsp
pause or seek
seek to random
media using rtsp
rtsp is similar
similar to delivery
delivery using http
media is delivered
protocol the operation
operation of rtsp
rtsp is shown
defines several commands
commands as part
rtsp streaming server
server the commands
server allocates resources
delivers a stream
client session established
server suspends delivery
stream but maintains
maintains the resources
connection and frees
frees up resources
states are triggered
http for streaming
streaming media offers
related to networking
text we encourage
encourage interested readers
readers to consult
chapter for sources
server that supports
supports both continuous
media with rate
text and images
refers to clients
clients with rate
rate constraints cine
constraints cine blitz
cine blitz guarantees
guarantees to meet
clients by implementing
implementing an admission
admitting a client
explore the cineblitz
disk-schedulu1.g and admission-control
setup play tear
tear down pause
finite-state machine representing
machine representing rtsp
20.7.1 disk scheduling
scheduling the cineblitz
cineblitz disk scheduler
disk scheduler services
scheduler services requests
discussions of c-scan
disk heads move
reach the end
pure scan disk
scan disk scheduling
20.7.2 admission control
control the admission-control
algorithm in cil
eblitz must monitor
real-time and non-real-time
classes of clients
clients receive service
controller must provide
provide the rate
rate guarantees required
required by real-time
clients to ensure
explore the admission
controller for real-time
term client refers
controller in cineblitz
monitors various system
bandwidth and disk
space the cineblitz
cineblitz admission controller
admission controller admits
admits a client
bandwidth and buffer
space to retrieve
cineblitz queues requests
requests for continuous
continuous media files
request r requests
queue are served
served in cyclic
order in rounds
rounds of time-length
measured in seconds
buffer is allocated
retrieve the data
data from disk
disk to buffer
process is illustrated
illustrated in figure
total buffer space
space b required
fundamental idea behil
requests for entry
request is admitted
estimated service times
exceed the duration
duration of service
bits be retrieved
clients currently active
controller must ensure
f---1 double buffer
double buffer total
buffer total buffer
buffering in cinebiitz
explore the details
number of disk
disk blocks thatcanberetrievedforrequest
blocks thatcanberetrievedforrequest r1c
thatcanberetrievedforrequest r1c duringeachcycleis
bits to span
span the last
causing two blocks
disk block involves
contailling the block
desired track arrive
head as described
c-scan disk-scheduling algorithm
blocks are retrieved
tscek and trot
seek and rotational
rotational delay times
maximum latency incurred
incurred for servicil1g
servicil1g n requests
tseek component refers
maximum disk-seek latency
disk-seek latency incurred
reflects the sum
disk blocks multiplied
worst-case rotational delay
data for request
bits for requests
sum of equation
cineblitz only admits
bits of free
free buffer space
equation is satisfied
modern computer systems
multimedia files include
files include video
delivered to systems
desktop computersf personal
computersf personal digital
personal digital assistantsf
assistantsf and cell
phones the primary
distinction between multimedia
data and conventional
data have specific
deadline requiren ents
files have specific
specific timing requirementsf
requirementsf the data
compressed before delivery
client for playback
playback multimedia data
qualityof service requirementsf
requirementsf and conventional
conventional operating systems
make quality-of-service guarantees
guarantees to provide
quality of servicef
servicef multimedia systems
provide a form
form of admission
accepts a request
meet the quality-of-service
providing quality-of-service guarantees
quality-of-service guarantees requires
guarantees requires evaluating
operating system performs
system performs cpu
performs cpu schedulingf
cpu schedulingf disk
schedulingf disk schedulingf
schedulingf and network
scheduling criterion network
criterion network management
network management requires
protocols that handle
allowing a client
pause or move
stream during playback
traditional internet protocols
protocols for transmitting
sufficient to provide
provide the quality-of-service
quality-of-service guarantees required
multimedia system discuss
required to provide
provide the qos
contrast unicastingf multicastingf
multicastingf and broadcasting
broadcasting as techniques
techniques for delivering
compress a digital
digital video file
technology the target
target bit rate
represent each colorf
ratio to achieve
achieve the desired
desired bit rate
represent each color
deliver this file
file next assuming
deliver the compressed
multimedia application consists
minutes of videof
minutes of audio
audio the compressed
videof and audio
images were compressed
audio were compressed
audio before compression
real-time streaming applications
applications can tolerate
tolerate jitter live
jitter live real-time
real-time streaming on-demand
streaming on-demand real-time
distinguish between progressive
number of requests
deadlines and cylinders
requests with deadlines
batched the disk
scan-edf disk scheduling
order of requests
cine blitz system
system in performing
performing admission control
control for requests
requests for media
illustrate the schedulil1.g
overview of multimedia
multimedia systems topics
systems topics related
delivery of multimedia
multimedia through networks
found in kurose
kurose and ross
support for multimedia
multimedia is discussed
discussed in steinmetz
management for resources
capability and memory
buffers is discussed
discussed in mercer
druschel and peterson
reddy and wyllie
give a good
overview of issues
model for developing
developing multimedia applications
applications are presented
presented in regehr
admission control system
scheduler is considered
considered in lauzac
present a system
system for serving
serving video data
data and discuss
discuss the schedule-management
issues that arise
system the details
found at http
tutorial on mpeg-2
mpeg-2 a tutorial
tutorial on video
video compression techniques
integrate the concepts
book by describing
describing real operating
real operating systems
two such systems
systems are covered
covered in great
detaiilinux and windows
represents a full-featured
full-featured unix system
student of operating
systems an opportunity
opportunity to read-and
read-and modifyrea operating-system
modifyrea operating-system source
operating-system source code
detail this recent
recent operating system
system from microsoft
microsoft is gaining
market we chose
study a modern
modern operating system
design and implementation
highly influential operating
influential operating systems
chosen the order
order of presentation
presentation to highlight
highlight the similarities
similarities and differences
reflect the relative
provide on-line coverage
systems the freebsd
linux combines features
freebsd is based
model of unix
unix freebsd source
freebsd source code
linux source code
mach operating system
compatibility with bsd
bsd unix windows
microsoft for intel
compatible with ms-dos
ms-dos and microsoft
microsoft windows applications
presents an in-depth
linux operating system
exam.ining a complete
version of unix
popularity in recent
history and development
development of linux
linux and cover
cover the user
user and programmer
interfaces that linux
owe a great
discuss the internal
implements these interfaces
rapidly evolving operating
evolving operating system
chapter describes developments
released in late
explore the history
unix operating system
linux is derived
linux is designed
examine the linux
linux process model
model and illustrate
illustrate how linux
linux schedules processes
management in linux
explore how linux
implements file systems
systems and manages
major design goal
systems its development
wrote and christened
small but self-contained
true 32-bit processor
processor in intel
intel s range
range of pc-compatible
code was made
made available free
linux s history
implemented a small
unix system services
system has grown
grown to include
include much unix
linux development revolved
operating-system kernel-the core
executive that n1.anages
n1.anages all system
kernel to produce
produce a full
full operating systeitl
make the distinction
piece of software
developed from scratch
includes a multitude
multitude of components
written from scratch
created in collaboration
basic linux system
environment for applications
applications and user
enforce any standard
means of managing
linux has matured
layer of functionality
functionality on top
distributions a includes
set of administrative
tools to simplify
simplify the initial
installation and subsequent
upgrading of linux
installation and removal
system a modern
typically includes tools
tools for management
management of file
creation and management
management of user
administration of networks
21.1.1 the linux
kernel the first
first linux kernel
linux kernel released
public was version
80386-compatible intel processors
extremely limited device-driver
limited device-driver support
support the virtual
virtual memory subsystem
basic and included
included no support
support for memorymapped
early incarnation supported
incarnation supported shared
supported shared pages
pages with copy-on-write
file system supported
minix file system
file system -the
-the first linux
first linux kernels
kernels were cross-developed
kernel did implement
implement proper unix
proper unix processes
processes with protected
protected address spaces
released on march
culminated three years
years of rapid
biggest new feature
feature was networking
support for unix
unix s standard
standard tcp lip
tcp lip networking
lip networking protocols
bsd-compatible socket interface
interface for networking
networking programming device-driver
programming device-driver support
support was added
added for running
ppp or slip
lines or modems
kernel also included
enhanced file system
original minix file
system and supported
supported a range
range of scsi
controllers for high-performance
high-performance disk access
access the developers
extended the virtual
subsystem to support
paging to swap
files and memory
mapping of arbitrary
read-only memory mapping
mapping was implemented
range of extra
extra hardware support
intel pc platform
support had grown
floppy-disk and cd-rom
range of mice
international keyboards floating-point
keyboards floating-point emulation
emulation was provided
coprocessor ; system
system v unix-style
unix-style inclllding shared
inclllding shared memory
implemented simple support
loadable and unloadable
unloadable kernel modules
modules was supplied
numerous bug-fix patches
patches were released
pattern was adopted
standard numbering convention
convention for linux
linux kernels kernels
odd minor-version number
evennumbered minor-version numbers
numbers are stable
kernels are intended
kernels may include
kernel was released
released this release
improvement in functionality
variety of hardware
pci hardware bus
hardware bus architecture
bus architecture developers
architecture developers added
added another pc-specific
cpu s virtual8086
mode-to allow emulation
dos operating system
updated the networking
stack to provide
protocol and made
implementation more complete
complete by including
accounting and firewalling
final pc-only linux
pc-only linux kernel
kernel the source
distribution for linux
included partially implemented
partially implemented support
support for sparc
concentrated on wider
wider hardware support
implementations of existing
main kernel source
kernel source code
released as linux
major version-number increment
increment on account
major new capabilities
support for multiple
including a 64-bit
64-bit native alpha
native alpha port
support for multiprocessor
multiprocessor architectures linux
architectures linux distributions
linux distributions based
motorola 68000-series processors
sun s sparc
systems a derived
version of linux
running on top
microkernel also runs
improved to provide
provide a unified
cache for file-system
file-system data independent
caching of block
offered greatly increased
greatly increased file-system
file-system and virtual
virtual memory performance
caching was extended
extended to networked
networked file systems
writable memory-mapped regions
included much improved
protocols were added
including apple talk
ax.25 anlateur radio
anlateur radio networking
support the ability
ability to mount
mount remote netware
netware and smb
volumes was added
support for internal
internal kernel threads
dependencies between loadable
loading of modules
modules on demand
demand dynamic configuration
kernel at run
standardized configuration interface
additional new features
features included file-system
included file-system quotas
quotas and posix-compatible
posix-compatible real-time process-scheduling
real-time process-scheduling classes
release of linux
port for ultrasparc
systems was added
networking was enhanced
routing and traffic
support for tcp
tcp large window
window and selective
selective acks acorn
nfs was enhanced
kernel-mode nfs daemon
nfs daemon added
daemon added signal
added signal handling
i were locked
improve symmetric multiprocessor
kernel include increased
include increased support
support for smp
journaling file systems
system the process
scheduler was modified
modified in version
providing an efficient
algorithm in addition
allowing a process
preempted while running
21.1.2 the linux
linux kernel forms
forms the core
complete linux operating
kernel is composed
software that makes
exclusive to linux
number of unix-like
unix-like operating systems
developed as part
part of berkeley
berkeley s bsd
bsd operating system
free software foundation
foundation s gnu
sharing of tools
tools has worked
directions the main
main system libraries
libraries of linux
linux were originated
community greatly improved
improved the libraries
libraries by addressing
bugs other components
sufficiently high quality
directly in linux
linux the networkingadministration
tools under linux
linux were derived
derived from code
code first developed
recent bsd derivatives
code from linux
linux in return
return examples include
include the intel
intel floating-point-emulation math
floating-point-emulation math library
sound-hardware device drivers
network of developers
groups or individuals
individuals having responsibility
responsibility for maintaining
maintaining the integrity
integrity of specific
number of public
public internet file-transfer-protocol
archive sites act
facto standard repositories
components the document
means of ensuring
standard linux file
linux file system
directory names configuration
names configuration files
run-time data files
21.1.3 linux distributions
distributions in theory
install a linux
system by fetching
fetching the latest
sites and compiling
linux s early
out as linux
individuals and groups
groups have attempted
attempted to make
make this job
job less painful
painful by providing
sets of packages
packages for easy
typically include extra
include extra system-installation
system-installation and management
precompiled and ready-to-install
common unix tools
text-processing and editing
first distributions managed
managed these packages
providing a means
means of unpacking
contributions of modem
modem dish ibutions
advanced package management
package management today
linux distributions include
include a package-tracking
days of linux
collection of linux
lacked the packagemanagement
tools now expected
expected of linux
distributions the distribution
represented a great
poor package management
widely installed distributions
commercial and noncommercial
noncommercial limlx distributions
commercial linux support
linux support company
free-software linux community
commercially supported versions
versions of linux
linux include distributions
distributions from cz,ldera
germany has resulted
dedicated german-language distributions
distributions in circulation
variety of distributions
compatibility across linux
rpm package file
package file format
majority of distributions
commercial applications distributed
installed and run
accept rpm files
21.1.4 linux licensing
licensing the linux
kernel is distributed
gnu general public
general public license
out the free
free software fmmdation
software fmmdation linux
public-domain software implies
authors have waived
waived copyright rights
rights in linux
linux is free
sense that people
people can copy
implications of linux
linux s licensing
creating a derivative
derivative of linux
make the derived
derived product proprietary
product proprietary software
proprietary software released
camwt be redistributed
software that includes
includes any components
make source code
code available alongside
alongside any binary
selling-binary-only software distributions
reasonable distribution charge
nonmicrokernel unix implementation
set of unix-compatible
unix-compatible tools linux
linux s file
file system adheres
adheres to traditional
traditional unix semantics
standard unix networking
unix networking model
model is implemented
details of linux
system s development
variety of platforms
architecture a great
development was carried
out by individual
development or research
start linux attempted
attempted to squeeze
limited resources today
linux can run
machine with hundreds
hundreds of megabytes
megabytes of main
gigabytes of disk
capable of operating
memory and hard
disks became cheaper
minimalist limix kernels
limix kernels grew
grew to implement
implement more unix
unix functionality speed
speed and efficiency
important design goals
recent and current
work on linux
linux has concentrated
diversity of unix
source code written
compile or run
calls are present
two different unix
posix standards comprise
comprise a set
set of specifications
aspects of operating-system
documents for common
common operating-system functionality
threads and real-time
real-time operations linux
relevant posix documents
two linux distributions
distributions have achieved
achieved official posix
official posix certification
presents few surprises
familiar with unix
detail these interfaces
linux by default
linux programming interface
programming interface adheres
adheres to svr4
svr4 unix semantics
behavior a separate
set of libraries
implement bsd semantics
semantics in places
two behaviors differ
certification of linux
linux with respect
slowed because certification
involved in certifying
certifying an operating
system s compliance
standards is substantial
supporting a wide
base of applications
applications is important
implementation of standards
goal for linux
certified in addition
linux currently supports
posix threading extensions-pthreads
-and a subset
real-time process control
system the linux
system is composed
bodies of code
traditional unix implementations
kernel the kernel
kernel is responsible
including such things
things as virtual
memory and processes
libraries the system
system libraries define
define a standard
set of functions
applications can interact
kernel these functions
privileges of kernel
utilities the system
utilities are programs
programs that perform
specialized management tasks
tasks some system
initialize and configure
configure some aspect
system ; othersknown
othersknown as daemons
daemons in unix
terminology -may run
handling such tasks
tasks as responding
responding to incoming
incoming network connections
accepting logon requests
requests from terminals
updating log files
components that make
full linux system
kernel code executes
processor s privileged
mode with full
computer linux refers
mode as kernel
kernel under linux
code is built
kernel any operating-system-support
modern operating systems
systems have adopted
adopted a messagepassing
kernel is created
binary the main
code and data
iil a single
single address space
calls an operating-system
interrupt is delivered
linux kernel loadable
kernel loadable kernel
loadable kernel modules
kernel modules figure
scheduling and virtual
virtual memory code
including all device
kernel components share
room for modularity
applications can load
load shared libraries
libraries at run
piece of code
kernel can load
dynamically at run
advance which modules
independent loadable components
services to give
arbitrated and protected
access to hardware
resources the kernel
required to qualify
operating system provided
features of unix
unix application expects
operating-system interface visible
visible to running
applications make calls
call the operatingsystem
system libraries provide
provide many types
types of functionality
applications to make
make kernel-system service
kernel-system service requests
service requests making
making a system
system call involves
call involves transferring
involves transferring control
control from tmprivileged
tmprivileged user mode
mode to privileged
privileged kernel mode
vary from architecture
architecture to architecture
architecture the libraries
libraries take care
care of collecting
collecting the system-call
arranging those arguments
make the system
call the libraries
provide more complex
basic system calls
language s buffered
buffered file-handling functions
providing more advanced
control of file
basic kernel system
kernel system calls
calls the libraries
libraries also provide
correspond to system
support the running
running of unix
applications are implemented
limix system includes
includes a wide
variety of user-mode
user-mode programs-both system
programs-both system utilities
utilities and user
system utilities include
initialize the system
configure network devices
load kernel modules
modules continually running
running server programs
programs also com1.t
com1.t as system
programs handle user
handle user login
user login requests
standard utilities serve
utilities serve key
serve key system-administration
key system-administration functions
unix user environment
number of standard
simple everyday tasks
moving and deleting
displaying the contents
file more complex
utilities can perform
perform text-processing functions
sorting textual data
data and performing
performing pattern searches
searches on input
form a standard
standard tool set
set that users
users can expect
perform any operating-system
basic limix system
ability to load
load and unload
unload arbitrary sections
sections of kernel
code on demand
demand these loadable
kernel modules run
run in privileged
consequence have full
run in theory
module is allowed
module might implement
implement a device
modules are convenient
code is free
wanting to write
write kernel code
compile a modified
reboot to load
reloading the entire
cycle to undertake
kernel to test
driver is written
users can benefit
rebuild their kernels
released with proprietary
proprietary components added
demand the kernel
kernel s module
parties to write
write and distribute
drivers or file
standard minimal kernet
extra device drivers
device drivers built
system at startup
startup or loaded
system on demand
demand and unloaded
mounted and unloaded
unloaded from memory
support under linux
drivers to reserve
reserve hardware resources
protect those resources
resources from accidental
21.3.1 module management
module management loading
loading a module
loading its binary
contents into kernel
memory the system
references the module
makes to kernel
symbols or entry
points are updated
updated to point
kernel s address
address space linux
space linux deals
updating by splitting
splitting the job
job of module
two separate sections
management of sections
sections of module
code in kernel
handling of symbols
symbols that modules
modules are allowed
allowed to reference
maintains an internal
internal syncbol table
kernel this symbol
set of symbols
kernel the set
set of exported
exported symbols constitutes
constitutes a well-defined
module can interact
kernel function requires
requires an explicit
effort is needed
needed to import
import those symbols
module a module
standard external linking
external symbols referenced
marked as unresolved
final module binary
module binary produced
utility first scans
scans the module
references all symbols
resolved are looked
kernel s symbol
kernel are substituted
module s code
kernel for loading
resolve any references
module is rejected
module is performed
two stages first
moduleloader utility asks
asks the kernel
kernel to reserve
reserve a continuous
area of virtual
virtual kernel memory
module the kernel
returns the address
address to relocate
relocate the module
module s machine
correct loading address
call then passes
passes the module
kernel the module
previously allocated space
table is updated
final module-management component
requestor the kernel
defines a communication
program can connect
kernel will inform
inform the management
requests a device
give the manager
manager the opportunity
opportunity to load
load that service
service the original
original service request
request will complete
module is loaded
loaded the manager
process regularly queries
queries the kernel
dynamically loaded module
unloads that module
longer actively needed
21.3.2 driver registration
region of memory
lets the rest
kernel maintains dynamic
maintains dynamic tables
set of routines
calls a module
module s startup
loaded and calls
calls the module
module s cleanup
module is unloaded
routines are responsible
responsible for registering
registering the module
module s functionality
module may register
register many types
types of drivers
register two separate
two separate mechanisms
mechanisms for accessing
accessing the device
device registration tables
registration tables include
drivers these drivers
drivers include character
include character devices
including all disk
network interface devices
systems the file
linux s virtual-file-system
virtual-file-system calling routines
implement a format
format for storing
virtual file system
system whose contents
contents are generated
protocols a module
module may implement
implement an entire
entire networking protocot
set of packet-filtering
format this format
type of executable
addition a module
module can register
set of entries
sysctl and tables
21.3.3 conflict resolution
conflict resolution commercial
resolution commercial unix
commercial unix implementations
sold to run
hardware one advantage
number of configurations
drivers for devices
controllers and video
video display adapters
adapters the problem
problem of managing
managing the hardware
severe when modular
modular device drivers
set of devices
central conflict-resolution mechanism
resources its aims
modules from clashing
clashing over access
resources to prevent
auto-detect device configuration-from
device configuration-from interfering
interfering with existing
existing device drivers
drivers to resolve
conflicts among multiple
parallel printer driver
parallel printer port
kernel maintains lists
lists of allocated
allocated hardware resources
hardware i address
i address space
expected to reserve
reserve the resource
kernel database first
first this requirement
administrator to determine
module is expected
mechanism to reserve
reserve in advance
advance any hardware
reservation is rejected
fail its initialization
initialization and request
alternative hardware resources
activity is serviced
process model similar
versions of unix
unix linux operates
review the traditional
traditional unix process
unix process model
21.4.1 the fork
model the basic
principle of unix
unix process management
separate two operations
process is created
program is run
call to exec
two distinctly separate
distinctly separate functions
created with fork
program being run-the
run-the new subprocess
subprocess simply continues
continues to execute
process was running
process be created
process may call
program starts executing
advantage of great
call that runs
runs that program
program simply runs
parent process wishes
wishes to modify
modify the environment
running the original
make any system
calls it requires
requires to modify
modify that child
system must maintain
maintain to track
track the context
program under linux
number of specific
process properties fall
21.4.1.1 process identity
identity a process
process identity consists
identifier the pid
makes a system
call to signal
process additional identifiers
additional identifiers associate
associate the process
tree of processes
single user command
credentials each process
groups are discussed
determine the rights
process to access
access system resources
resources and files
personality process personalities
found on unix
linux each process
modify the semantics
libraries to request
request that system
calls be compatible
varieties of unix
group and session
group or session
session its credentials
security checks howeve1
process is unchangeable
identifies that process
process until termination
21.4.1.2 process environment
environment a process
process s environment
environment is inherited
two null-terminated vectors
vector the argument
vector simply lists
lists the command-line
invoke the running
pairs that associates
associates named environment
named environment variables
variables with arbitrary
arbitrary textual values
values the environment
held in kernel
user-mode address space
process s stack
argument and environment
process will inherit
inherit the environment
completely new environment
environment is set
program is invoked
invoked on calling
supply the environment
program the kernel
passes these enviromnent
replacing the process
process s current
environment the kernel
kernel otherwise leaves
leaves the environment
environment and command-line
command-line vectors alone-their
vectors alone-their interpretation
interpretation is left
libraries and applications
passing of environment
process provide flexible
provide flexible ways
ways to pass
information to components
user-mode system software
software various important
important environment variables
variables have conventional
meanings to related
variable is set
type of terminal
user s login
variable to determine
user s display
moving the cursor
cursor and scrolling
scrolling a region
region of text
programs with multilingual
language to display
display system messages
messages for programs
programs that include
include multilingual support
environment-variable mechanism custom-tailors
custom-tailors the operating
users can choose
languages or select
21.4.1.3 process context
context the process
identity and environment
exits a process
process may choose
choose to change
change some aspects
alter its environment
environment in contrast
constantly process context
process context includes
scheduling context-the information
suspend and restart
restart the process
process this information
information includes saved
includes saved copies
process s registers
registers floating-point registers
registers are stored
incur the overhead
overhead of saving
saving that state
state the scheduling
context also includes
information about scheduling
outstanding signals waiting
process a key
process s kernel
area of kernel
kernel memory reserved
exclusively by kernel-mode
code both system
calls and interrupts
interrupts that occur
process is executing
accounting the kernel
kernel maintains accounting
maintains accounting information
total resources consumed
table the file
array of pointers
pointers to kernel
kernel file structures
making file-i system
file-i system calls
file table lists
lists the existing
existing open files
file-system context applies
applies to requests
requests to open
open new files
files the current
root and default
searches are stored
signal-handler table unix
table unix systems
systems can deliver
deliver asynchronous signals
process in response
events the signal-handler
signal-handler table defines
defines the routine
process s address
specific signal arrives
virtual memory context
context the virtual
memory context describes
describes the full
process s private
private address space
functionality of duplicating
duplicating a process
ability to create
threads in fact
task-rather than process
process or thread-when
flow of control
program when clone
passed a set
set of flags
flags that determine
parent and child
passed the flags
tasks will share
current working directory
set of open
files using clone
fashion is equivalent
equivalent to creating
creating a thread
parent task shares
flags is set
set when clone
sharing takes place
resulting in functionality
lack of distinction
distinction between processes
hold a process
process s entire
main process data
process data structure
holds the context
context within independent
process s file-system
context are held
held in separate
separate data structures
structures the process
simply contains pointers
share a subcontext
subcontext by pointing
subcontexts to copy
create new subcontext
subcontext data struch1res
data struch1res initialized
subcontext data structures
parent the fork
case of clone
copies all subcontexts
job of allocating
running and interrupting
interrupting of processes
aspect of scheduling
important to linux
kernel tasks kernel
tasks kernel tasks
kernel tasks encompass
encompass both tasks
process and tasks
tasks that execute
internally on behalf
21.5.1 process scheduling
process scheduling linux
two separate process-scheduling
separate process-scheduling algorithms
algorithm for fair
scheduling among multiple
designed for real-time
important than fairness
routine time-sharing tasks
time-sharing tasks received
received a major
overhaul with version
kernel earlier versions
linux kernel ran
ran a variation
traditional unix scheduling
unix scheduling algorithm
provide adequate support
grows the overhaul
scheduler with version
algorithm that runs
runs in constant
including processor affin.ity
affin.ity and load
fairness and support
support for interactive
relative priority highest
priority highest lowest
lowest time quantum
relationship between priorities
priorities and time-slice
two separate priority
separate priority ranges
nice value ranging
two ranges map
global priority scheme
numerically lower values
values indicate higher
linux scheduler assigns
scheduler assigns higher-priority
assigns higher-priority tasks
higher-priority tasks longer
longer time quanta
quanta and lower-priority
shorter time quanta
length is shown
rum able task
task is considered
eligible for execution
task has exhausted
quanta the kernel
maintains a list
runqueue data structure
runqueue and schedules
two priority arrays-active
arrays-active and expired
expired the active
priority arrays includes
includes a list
list of tasks
chooses the task
array for execution
processor is scheduling
scheduling the highest-priority
tasks have exhausted
array is empty
two priority arrays
arrays are exchanged
array and vice-versa
assigned dynamic priorities
minus a value
ether a value
value is added
task s nice
nice value depends
task a task
task s interactivity
interactivity is determined
sleeping while waiting
typically have longer
longer sleep times
favors such interactive
tasks with shorter
shorter sleep times
task s dynamic
priority is recalculated
two active array
active array priority
expired array priority
assigned new priorities
scheduling is simpler
simpler still linux
two realtime scheduling
realtime scheduling classes
scheduling classes required
required by posix.lb
priority irt addition
scheduling class processes
priorities can compete
extent in time-sharing
scheduler always runs
runs the process
priority among processes
processes of equal
difference between fcfs
fcfs and round-robin
fcfs processes continue
exit or block
unlike routine time-sharing
assigned static priorities
linux s real-time
scheduling is soft-rather
soft-rather than hard-real
scheduler offers strict
offers strict guarantees
priorities of real-time
offer any guarantees
quickly a reahim.e
21.5.2 kernel synchronization
processes a request
request for kernel-mode
execution can occur
ways a running
program may request
request an operating-system
call or implicitly-for
page fault occurs
controller may deliver
deliver a hardware
cpu to start
executing a kernel-defined
access the sanl.e
sanl.e internal data
internal data structures
middle of accessing
accessing some data
service routine executes
access or modify
data without risking
risking data corruption
corruption this fact
idea of critical
sections-portions of code
code that access
access shared data
allowed to execute
kernel synchronization involves
scheduling a framework
framework is required
tasks to run
run without violating
violating the integrity
integrity of shared
prior to version
nonpreernptive kernet meaning
run with version
kernel provides spinlocks
spinlocks and semaphores
kernel on smp
fundamental locking mechanism
kernel is designed
spinlock is held
durations on single-processor
spinlocks are inappropriate
replaced by enabling
enabling and disabling
disabling kernel preemption
holding a spinlock
task disables kernel
disables kernel preemption
release the spinlock
enables kernel preemption
preemption this pattern
pattern is summarized
approach to disable
disable and enable
enable kernel preemption
two simple system
simple system calls-preempldisable
disabling and enabling
enabling kernel preemption
task is holding
holding a lock
enforce this rule
structure that includes
includes the field
indicating the number
number of locks
locks being held
task the counter
counter is incremented
lock is acquired
acquired and decremented
lock is released
value of preemplcount
task currently running
running is greater
safe to preempt
preempt the kernet
task currently holds
holds a lock
safely be interrupted
calls to preempt_disable
spinlocks-along with enabling
disabling of kernel
kernel preemption -are
lock is held
held for short
held for longer
applies to critical
sections that occur
occur in interrupt
interrupt service routines
routines the basic
processor s interrupt-control
hardware by disabling
risk of concurrent
access to shared
shared data structures
penalty for disabling
enable and disable
instructions are expensive
long as interrupts
interrupts remain disabled
i is suspended
waiting for servicing
wait until interrupts
interrupts are reenabled
degrades the linux
long critical sections
sections to run
disabled this ability
code an interrupt
network device driver
driver can signal
signal the arrival
entire network packet
deal of code
code being executed
executed to disassemble
forward that packet
kernel-system service routines
interrupt protection levels
implements this architecture
architecture by separating
separating interrupt service
normal interrupt service
routine that runs
runs with recursive
recursive interrupts disabled
disabled ; interrupts
priority may interrupt
interrupt the routine
priority are disabled
routine is run
scheduler that ensures
ensures that bottom
halves never interrupt
scheduler is invoked
service routine exits
kernel can complete
complete any complex
done in response
interrupt without worrying
half is executing
interrupt can request
bottom half execute
completes each execution
similar bottom half
architecture is completed
mechanism for disabling
disabling selected bottom
selected bottom halves
halves while executing
foreground kernel code
code the kernel
kernel can code
code critical sections
system interrupt handlers
handlers can code
code their critical
sections as bottom
enter a critical
disable any relevant
relevant bottom halves
halves to prevent
sections from interrupting
kernel can reenable
reenable the bottom
halves and run
run any bottom-half
queued by top-half
top-half interrupt service
levels of interrupt
kernel each level
interrupted by code
time-sharing scheduling interrupt
scheduling interrupt occurs
21.5.3 symmetric multiprocessing
multiprocessing the linux
first stable linux
stable linux kernel
kernel to support
allowing separate processes
processes to execute
execute in parallel
parallel on separate
implementation of smp
imposed the restriction
executing kernel-mode code
single kernel spinlock
bkl for big
big kernel lock
level of locking
granularity later releases
made the smp
implementation more scalable
scalable by splitting
splitting this single
spinlock into multiple
kernel s data
structures such spinlocks
spinlocks are described
kernel provided additional
provided additional smp
additional smp enhancements
including processor affinity
affinity and load-balancing
management under linux
components the first
deals with allocating
allocating and freeing
freeing physical memory-pages
groups of pages
blocks of memory
handles virtual memory
space of running
examine the mechanisms
program are brought
brought il lto
lto a process
process s virtual
memory in response
management of physical
physical memory due
due to specific
specific hardware characteristics
linux separates physical
separates physical memory
zone_dma zone_normal zone_highmem
zone_highmem these zones
zones are architecture
intel 80x86 architecture
industry standard architecture
access the lower
memory using dma
physical memory comprise
memory comprise zonldma
comprise zonldma zone_normal
zonldma zone_normal identifies
zone_normal identifies physical
identifies physical memory
cpu s address
space this zone
routine memory requests
requests for architectures
limit what dma
dma can access
refers to physical
kernel address space
32-bit intel architecture
4-gb address space
kernel is mapped
memory is referred
allocated from zone_highmem
zone_highmem the relationship
relationship of zones
zones and physical
architecture is shown
list of free
request for physical
physical memory arrives
satisfies the request
priinary physical-memory manager
lil lux kernel
allocator each zone
responsible for allocating
freeing all physical
capable of allocating
physically contiguous pages
pages on request
request the allocator
units of allocatable
memory are paired
allocatable memory region
two allocated partner
allocated partner regions
regions are freed
combined to form
form a larger
larger region-a buddy
region-a buddy heap
heap that larger
combine to form
larger free region
small memory request
satisfied by allocation
existing small free
small free region
partners to satisfy
request separate linked
separate linked lists
record the free
free memory regions
smallest size allocatable
single physical page
physical page figure
smallest available region
region is broken
kernel are ncade
drivers that reserve
reserve a contiguous
area of memory
memory during system
allocator to reserve
memory several specialized
specialized memory-management subsystems
underlying page allocator
allocator to manage
pools of memory
virtual memory system
memory for kernel
caching pages belonging
belonging to files
allocate entire pages
memory are required
required the kernel
16kb 4kb figure
splitting of memory
allocator for arbitrary-sized
language s malloc
service allocates entire
allocates entire pages
pages on demand
pieces the kernel
lists of pages
service allocating memory
allocating memory involves
memory involves determining
taking the first
first free piece
list or allocating
page and splitting
memory regions clainled
system are allocated
reallocate or reclaim
reclaim these regions
regions in response
response to memory
adopted by linux
linux for allocating
allocating kernel memory
allocation a slab
pages a consists
unique kernel data
kernel data structure
data structure representing
structure representing process
representing process descriptors
cache for file
cache for semaphores
cache is populated
structure the cache
cache representing semaphores
representing semaphores stores
semaphores stores instances
instances of semaphore
cache representing process
process descriptors stores
descriptors stores instances
instances of process
process descriptor objects
objects the relationship
relationship among slabs
objects is shown
shows two kernel
two kernel objects
size these objects
objects are stored
algorithm uses caches
caches to store
store kernel objects
cache is created
number of objects
objects are allocated
cache the number
contiguous 4-kb pages
cache are marked
marked as free
structure is needed
allocator can assign
assign any free
free kernel objects
3-kb i objects
7-kb objects figure
allocator in linux
cache to satisfy
request the object
cache is marked
kernel requests memory
representing a process
descriptor in linux
type struct task_struct
linux kernel creates
struct task_struct object
cache the cache
cache will fulfill
fulfill the request
full all objects
slab are marked
empty all objects
partial the slab
allocator first attempts
attempts to satisfy
object is assigned
slab is allocated
allocated from contiguous
contiguous physical pages
pages and assigned
cache ; memory
object is allocated
two other main
subsystems in linux
system these systems
kernel s main
cache for block
devices is performed
native linux diskbased
linux diskbased file
diskbased file systems
nfs networked file
networked file system
page cache stores
cache stores entire
stores entire pages
pages of file
limited to block
cache networked data
data the virtual
memory system manages
manages the contents
virtual address space
two systems interact
reading a page
page of data
page cache requires
cache requires mapping
requires mapping pages
system in greater
21.6.2 virtual memory
memory the limn
limn virtual memory
system is responsible
maintaining the address
address space visible
process it creates
pages of virtual
memory on demand
demand and manages
loading those pages
pages from disk
disk and swapping
out to disk
disk as required
required under linux
virtual memory manager
memory manager maintains
maintains two separate
two separate views
set of separate
set of pages
system has received
address space consists
set of nonoverlapping
representing a continuous
space each region
region is described
single vm_area_struct structure
structure that defines
defines the properties
including the process
process s read
region the regions
space are linked
balanced binary tree
view is stored
hardware page tables
process the pagetable
pagetable entries identify
identify the exact
exact current location
page of virtual
memory the physical
view is managed
kernel s software-interrupt
access a page
tables each vm_area_struct
field that points
table of functions
functions that implement
implement the key
key page-management functions
virtual memory region
region all requests
requests to read
read or write
write an unavailable
central memorymanagement routines
details of managing
type of memory
21.6.2.1 virtual memory
virtual memory regions
memory regions linux
regions linux implements
implements several types
types of virtual
regions one property
property that characterizes
characterizes virtual memory
regions are backed
type of virtual
region represents demand-zero
represents demand-zero memory
read a page
back a page
page of memory
filled with zeros
table is filled
kernel s page
page of physical
process s page
mapped that file
space any number
processes can map
reaction to writes
writes the mapping
private or shared
privately mapped region
process in contrast
shared region result
result in updating
mapping that object
space the kernel
kernel will create
call the first
case is easy
program is executed
completely empty virtual
empty virtual address
routines for loading
loading the program
program to populate
populate the address
space with virtual
process with fork
creating a concplete
copies the parent
process s vm_area_struct
set of page
child the parent
parent s page
tables are copied
covered is incremented
pages of memory
special case occurs
copying operation reaches
reaches a virtual
privately any pages
process has written
region are private
update the page
regions are copied
marked for copy-on-write
modifies these pages
two processes share
modify a copy-on-write
page is checked
copies the page
page s contents
ensures that private
private data pages
pages are shared
shared between processes
copies are made
swapping and paging
paging an important
memory from physical
inemory is needed
needed early unix
early unix systems
unix systems performed
performed this relocation
relocation by swapping
out the contents
contents of entire
movement of individual
memory between physical
memory and disk
implement whole-process swapping
newer paging mechanism
two sections first
out the transfer
transfer and pages
pages data back
back into physical
linux s pageuut
9.4.5.2 under linux
clock the age
precisely a measure
page s youthfulness
activity the page
recently frequently accessed
frequently accessed pages
pages will attain
attain a higher
higher age value
infrequently accessed pages
pages will drop
pass this age
pager to select
pages to page
page out based
paging mechanism supports
mechanism supports paging
dedicated swap devices
devices and partitions
significantly slower due
extra overhead incurred
file system blocks
blocks are allocated
maintained in physical
times the allocator
write out pages
pages to continuous
runs of disk
blocks for improved
performance the allocator
records the fact
tables on modern
entry s page-not-present
bit is set
allowing the rest
21.6.2.4 kernel virtual
kernel virtual memory
virtual memory linux
memory linux reserves
process the page-table
entries that map
pages are marked
marked as protected
visible or modifiable
processor is running
running in user
mode this kernel
virtual memory area
regions the first
translation from physical
physical to virtual
virtual addresses occurs
occurs when kernel
code is run
run the core
normal page allocator
kernel s reserved
section of address
specific purpose page-table
purpose page-table entries
kernel to point
areas of memory
memory the kernel
pair of facilities
memory the vmalloc
allocates an arbitrary
number of physical
virtually contiguous kernel
contiguous kernel memory
memory the vremap
maps a sequence
sequence of virtual
addresses to point
driver for memory-mapped
execution and loading
loading of user
programs the linux
kernel s execution
execution of user
programs is triggered
call this exec
commands the kernel
kernel to run
overwriting the current
current execution context
program the first
process has permission
file being executed
invokes a loader
routine to start
running the program
program the loader
load the contents
file into physical
program into virtual
routine in linux
linux for loadil1.g
maintains a table
function the opportunity
call is made
made the initial
format for linux
linux s binary
files was changed
changed older linux
older linux kernels
linux kernels understood
format for binary
files-a relatively simple
simple format common
common on older
older unix systems
unix systems newer
systems newer linux
newer linux systems
modern elf format
current unix implementations
unix implementations elf
number of advantages
flexibility and extensibility
extensibility new sections
add extra debugging
extra debugging information
causing the loader
confused by allowing
registration of multiple
multiple loader routines
support the elf
out binary formats
single rmming system
loading and running
running of elf-format
binaries the procedure
procedure for loading
binaries is simpler
similar in operation
mapping of programs
programs into memory
memory under linux
load a binary
file are mapped
mapped into regions
regions of virtual
page fault result
page into physical
memory using demand
kernel s binary
loader to set
initial memory mapping
mapping an elf-format
elf-format binary file
binary file consists
sections the elf
elf loader works
works by reading
reading the header
header and mapping
mapping the sections
file into separate
shows the typical
layout of memory
memory regions set
address space sits
sits the kernet
region of virtual
virtual memory inaccessible
inaccessible to normal
normal user-mode programs
programs the rest
rest of virtual
kernel s memory-mapping
functions to create
regions that map
map a portion
loader s job
program to start
start the regions
il1.clude the stack
program s text
text and data
stack is created
user-mode virtual memory
downward toward lower-numbered
addresses it includes
arguments and environment
il1 the exec
regions are created
end of virtual
memory the sections
contail1 program text
invisible to user-mode
user-mode code figure
data are mapped
mapped into memory
write-protected region writable
region writable initialized
writable initialized data
private demand-zero region
region that programs
programs can expand
expand as needed
needed to hold
hold data allocated
allocated at run
processes can extend
extend or contract
contract their brk
single system call
initializes the process
process s program-counter
starting point recorded
static and dynamic
functions are embedded
program s executable
executable binary file
statically linked executables
executables can commence
disadvantage of static
common system library
system library functions
memory and disk-space
load the system
libraries into ltl.emory
loading to happen
linux implements dynamic
implements dynamic linking
linking in user
special linker library
dynamically linked program
statically linked function
starts this static
function just maps
maps the link
library into memory
memory and runs
runs the code
link library determines
determines the dynamic
dynamic libraries required
variables and functions
libraries by reading
reading the information
contained in sections
maps the libraries
middle of virtual
memory and resolves
resolves the references
memory these shared
libraries are mapped
compiled into position-independent
address in memory
linux retains unix
standard file-system model
model in unix
stored on disk
disk or fetched
remote file server
capable of handling
handling the input
stream of data
data device drivers
channels or network
linux kernel handles
types of files
files by hiding
hiding the implementation
single file type
layer of software
cover the virtual
discuss the standard
linux file system-ext2fs
vfs is designed
designed around object-oriented
set of definitions
objects are allowed
layer o software
software to manipulate
manipulate the objects
objects the vfs
defines four main
four main object
main object types
inode object represents
represents an individual
file object represents
represents an open
superblock object represents
represents an entire
entire file system
dentry object represents
ldividual directory entry
four object types
defines a set
set of operations
table the function
function table lists
lists the addresses
implement the defined
object s operations
open a file
memory-map a file
specific file type
implement each function
vfs software layer
layer can perform
perform an operation
objects by calling
object s function
kind of object
represents a networked
file s read
layer will call
call that function
function without caring
inode and file
files an inode
structure containing pointers
actual file contents
represents a point
point of access
file a process
access an inode
contents without first
obtaining a file
file object pointing
inode the file
object keeps track
file the process
reading or writing
track of sequential
asked for write
file was opened
opened and tracks
tracks the process
process s activity
fetching file data
data into memory
requests the data
objects typically belong
vfs to improve
future all cached
cached file data
data are linked
file s inode
object the inode
inode also maintains
maintains standard information
files are dealt
files the unix
unix programming interface
programming interface defines
defines a number
number of operations
operations on directories
renaming a file
directory the system
open the files
unlike the case
case for reading
data the vfs
vfs therefore defines
defines these directory
represents a connected
set of files
files that form
form a self-contained
self-contained file system
system the operating-system
operating-system kernel maintains
single superblock object
disk device mounted
system currently connected
connected the main
access to inodes
inodes the vfs
identifies every inode
unique file-system number
object to return
return the inode
represents a directory
values is represented
separate dentry object
wishes to open
open the file
editor because linux
linux treats directory
treats directory names
names as files
translating this path
path requires first
requires first obtaining
obtaining the inode
file to obtain
obtain the inode
continue this process
obtains the inode
linuxmaintains a cache
cache of dentry
consulted during path-name
path-name translation obtaining
read the on-disk
21.7.2 the linux
linux ext2fs file
ext2fs file system
system the standard
standard on-disk file
on-disk file system
historical reasons linux
minix-compatible file system
ease exchanging data
minix development system
restricted by 14-character
14-character file-name limits
maximum file-system size
system was superseded
christened the extended
extended file system
performance and scalability
missing features led
bsd fast file
fast file system
mechanism for locating
locating the data
storing data-block pointers
pointers in indirect
levels of indirection
files are stored
contents are interpreted
differently each block
directory file consists
list of entries
differences between ext2fs
ext2fs and ffs
policies in ffs
disk is allocated
allocated to files
files in blocks
blocks are subdivided
subdivided into fragments
storage of small
partially filled blocks
ends of files
files in contrast
allocations in smaller
units the default
default block size
size on ext2fs
maintain high performance
perform i operations
operations in large
clustering physically adjacent
adjacent l requests
l requests clustering
requests clustering reduces
reduces the per-request
per-request overhead incurred
incurred by device
1-kb i request
i request size
small to maintain
maintain good performance
ext2fs uses allocation
allocation policies designed
designed to place
place logically adjacent
logically adjacent blocks
physically adjacent blocks
blocks on disk
ext2fs allocation policy
system is partitioned
partitioned into multiple
multiple block groups
block groups ffs
concept of cylinder
modern disk-drive technology
disk-drive technology packs
technology packs sectors
fixed-sized cylinder groups
disk s geometry
allocating a file
select the block
attempts to allocate
allocate the file
allocated for inode
selects the block
file s parent
parent directory resides
nondirectory files directory
files directory files
groups these policies
policies are designed
out the disk
disk s block
groups to reduce
reduce the fragmentation
allocations physically contiguous
maintains a bitmap
group when allocating
allocating the first
extending a file
continues the search
file the search
search is performed
entire free byte
fails to find
search for free
free bytes aims
aims to allocate
allocate disk space
space in chunks
search is extended
block is encountered
byte is found
backward extension prevents
extension prevents ext2fs
ext2fs from leaving
leaving a hole
recently allocated block
previous nonzero byte
bit or byte
extends the allocation
blocks and preallocates
allocating scattered free
scattered free blocks
free blocks allocating
blocks allocating continuous
allocating continuous free
continuous free blocks
free blocks block
block fj block
allocator ___ bitmap
___ bitmap search
bitmap search bit
search bit boundary
bit boundary byte
boundary byte boundary
byte boundary figure
ext2fs block-allocation policies
file this preallocation
helps to reduce
fragmentation during in.terleaved
writes to separate
reduces the cpu
cost of disk
allocation by allocating
allocating multiple blocks
multiple blocks simultaneously
simultaneously the preallocated
blocks are returned
file is closed
illustrates the allocation
policies each row
represents a sequence
sequence of set
set and unset
find any free
matter how fragmented
blocks are close
run than allocating
allocating isolated blocks
blocks to separate
files once large
large free areas
areas become scarce
scarce on disk
found a free
free block close
allocated that byte
end up creating
creating a fragmented
area of free
make this allocation
forward to satisfy
satisfy the default
journaling one popular
system is journaling
journal a set
operations that performs
performs a specific
transaction is written
system call modifying
modifying the file
journal entries relating
transaction are replayed
actual file-system structures
pointer is updated
actions have completed
entire committed transaction
transaction is concpleted
journal the journal
separate disk spindle
separate read-write heads
decreasing head contention
contention and seek
transactions may remain
journal those transactions
recovers the transactions
work is complete
file-system structures remain
structures remain consistent
preserving the consistency
system this recovery
eliminating all problems
problems with consistency
faster than non-journaling
proceed much faster
on-disk data structures
structures the reason
improvement is found
advantage of sequential
i over random
i costly synchronous
costly synchronous random
synchronous random writes
system are turned
costly synchronous sequential
synchronous sequential writes
system s journal
turn are replayed
asynchronously via random
gain in performance
performance of file-system
file-system metadata-oriented operations
creation and deletion
provided in ext2fs
common file system
based on ext2fs
unux process file
process file system
system the flexibility
linux vfs enables
implement a file
functionality the linux
linux process file
computed on demand
file i requests
unique to linux
linux svr4 unix
svr4 unix introduced
kernel s process
process debugging support
file system corresponded
system a listing
file system reveals
reveals one directory
directory per process
asch decimal representation
process s unique
unique process identifier
system but extends
greatly by adding
adding a number
number of extra
directories and text
system s root
programs to access
access this information
information as plain
plain text files
standard unix user
environment provides powerful
tools to process
process such files
unix ps command
command for listing
listing the states
process that reads
reads the process
kernel s virtual
memory under lim1x
parses and formats
formats the information
system must implement
implement two things
system is defined
file and directory
directory inodes identified
file system nmst
system nmst define
define a unique
unique and persistent
persistent inode number
number to identify
operation is required
perform a lookup
inode when data
data are read
system will collect
mapping from inode
number to information
information type splits
splits the inode
fields in linux
bits the top
number are interpreted
remaining bits define
define what type
type of information
inode contains global-rather
global-rather than process-specificinformation
separate global files
global files exist
files exist iil
drivers currently numing
range are reserved
reserved the kernel
kernel can allocate
maintaining a bitmap
bitmap of allocated
allocated in ode
maintains a tree
tree data structure
structure of registered
global i pro
pro c file-system
entries each entry
generate the file
file s contents
drivers can register
register and deregister
reserved for kernel
kernel variables files
tree are managed
set of common
reading and writing
administrator can tune
tune the value
value of kernel
simply by writing
out in ascii
subtree is made
special system call
reads and writes
variables in binary
file system sysctl
dynamic entry tree
tree to identify
identify the variables
application is referring
system in linux
normal files users
users can open
open an access
administrator can create
create special files
specific device driver
normal file-protection device
file-protection device driver
device driver driver
user application character
application character device
character device file
device file character
file character device
character device driver
.  network
device driver figure
device-driver block structure
access which file
administrator can set
set access permissions
splits all devices
network devices figure
include all devices
blocks of data
including hard disks
disks and floppy
flash memory block
memory block devices
store file systems
programs can create
create and repair
repair the file
device contains applications
access these block
application may prefer
prefer to perform
out of data
general-purpose file system
mice and keyboards
difference between block
block and character
devices is random
random access-block devices
dvd but makes
makes no sense
differently from block
character devices users
directly transfer data
data to network
indirectly by opening
opening a connection
kernel s networking
subsystem we discuss
discuss the interface
interface to network
separately in section
21.8.1 block devices
block devices block
devices block devices
block devices provide
provide the main
important for disks
functionality to ensure
ensure that disk
functionality is achieved
context of block
represents the unit
performs i wl1en
wl1en a block
block is read
read into memory
software that manages
manages the reading
writing of buffer
list of requests
algorithm that exploits
exploits the order
requests are inserted
lists the request
lists are maintained
maintained in sorted
order of increasing
increasing starting-sector number
accepted for processing
fronc the list
i is complete
point the driver
request ncanager attempts
attempts to merge
i operations changed
kernel the fundamental
i operations concentrated
disk can result
result in starvation
starvation of requests
disk the deadline
deadline i scheduler
associates a deadline
addressing the starvation
issue by default
deadline for read
seconds the deadline
sched ~ uler
maintains a sorted
queue of pending
pending i operations
i operations ordered
ordered by sector
two other queues-a
queues-a read queue
queue for read
queue for write
queues are ordered
i operations occur
operations are scheduled
request this policy
operation will wait
wait no longer
21.8.2 character devices
devices a character-device
offer random access
access to fixed
data any character-device
character-device drivers registered
register a set
implement the file
file i operations
driver can handle
handle the kernel
passes the request
device in question
question and lets
lets the device
subset of character-device
drivers that implement
implement terminal devices
devices the kernel
maintains a standard
drivers by means
set of tty
tty struct structures
structures provides buffering
buffering and flow
device and feeds
feeds those data
common line discipline
glues the terminal
terminal s data
input and output
user s running
allowing those processes
processes to communicate
user s terminal
terminal this job
job is complicated
tty line discipline
discipline is responsible
responsible for attaching
attaching and detaching
detaching the terminal
terminal s input
processes are suspended
suspended or awakened
process the ppp
protocols are ways
ways of encoding
encoding a networking
line these protocols
protocols are implemented
implemented under linux
linux as drivers
system as line
system as network-device
matter of letting
letting another process
event has occurred
involve transferring data
synchronization and signals
signals the standard
standard lim.ix mechanism
mechanism for informing
informing a process
restrictions on signals
number of signals
signal has occurred
processes the kernel
kernel also generates
send a signal
process when data
signals to communicate
communicate with processes
ruml.ing in kernel
process is expecting
expecting an event
event to occm
signals to receive
communication about incoming
incoming asynchronous events
kernel takes place
states and wai
wai t_queue structures
structures these mechanisms
mechanisms allow kernel-mode
processes to inform
generated by device
event to complete
event and tells
tells the scheduler
event has completed
wait this procedure
procedure allows multiple
processes to wait
read a file
mechanism for communicating
communicating asynchronous events
events among processes
linux also implements
implements the semaphore
mechanism of system
system v unix
unix a process
process can wait
numbers of semaphores
shared among multiple
multiple independent processes
operations on multiple
standard linux wait
linux wait queue
wait queue mechanism
queue mechanism synchronizes
mechanism synchronizes processes
communicating with semaphores
passing of data
data among processes
processes linux offers
offers several mechanisms
mechanisms for passing
processes the standard
standard unix mechanism
process to inherit
inherit a communication
parent ; data
type of inode
inode to virtual-filesystem
pair of wait
queues to synchronize
synchronize the reader
reader and writer
unix also defines
set of networking
streams of data
remote processes networking
networking is covered
process communications method
large or small
amounts of data
data any data
shared memory region
mapped that region
space the main
disadvantage of shared
offers no synchronization
piece of shared
region in linux
created or deleted
deleted by processes
object is treated
independent address space
space the linux
linux paging algorithms
algorithms can elect
elect to page
disk shared-memory pages
out a process
process s data
pages the shared-memory
shared-memory object acts
store for shared-memory
file can act
memory-mapped memory region
file is mapped
faults that occur
mapped into virtual
shared-memory mappings direct
mappings direct page
direct page faults
faults to map
map in pages
persistent shared-memory object
sharedmemory objects remember
remember their contents
area of functionality
functionality for linux
support the standard
standard internet protocols
implements a number
number of protocols
non-unix operating systems
primarily on pcs
appletalk and ipx
kernel is implemented
layers of software
socket interface protocol
interface protocol drivers
protocol drivers network-device
drivers network-device drivers
user applications perform
perform all networking
interface this interface
interface is designed
bsd socket layer
designed to make
sockets will run
run on linux
interface is described
bsd socket interface
general to represent
represent network addresses
range of networking
protocols this single
linux to access
implemented on standard
standard bsd systems
similar in organization
organization to bsd
bsd  sown
networking data arrive
application s socket
data are expected
protocols can communicate
internet protocol set
separate protocols manage
protocols manage routing
retransmission of lost
layer may rewrite
create new packets
split or reassemble
packets into fragments
simply discard incoming
discard incoming data
layer has finished
processing a set
set of packets
data are destined
connection or downward
remotely the protocol
protocol layer decides
socket or device
send the packet
stack is performed
performed by passing
passing single skbuff
set of pointers
single continuous area
representing a buffer
inside which network
constructed the valid
skbuff s buffer
end the networking
code can add
result still fits
skbuff this capacity
important on modern
improvements in cpu
outstripped the performance
performance of main
memory the skbuff
architecture allows flexibility
flexibility in manipulating
manipulating packet headers
headers and checksums
checksums while avoiding
avoiding any unnecessary
unnecessary data copying
set of protocols
linux networking system
suite this suite
comprises a number
number of separate
protocol implements routing
network on top
protocol are built
built the udp
protocols the udp
udp protocol carries
protocol carries arbitrary
carries arbitrary individual
arbitrary individual datagrams
datagrams between hosts
hosts the tcp
tcp protocol implements
protocol implements reliable
implements reliable connections
connections between hosts
hosts with guaranteed
guaranteed in-order delivery
delivery of packets
packets and automatic
data the icmp
carry various error
error and status
messages between hosts
stack s protocol
software is expected
internal identifier indicating
indicating the protocol
packet is relevant
relevant different networking-device
networking-device drivers encode
encode the protocol
protocol for incoming
driver the device
passes the packet
protocol new protocols
table as kernel-loadable
incoming ip packets
packets are delivered
driver the job
routing after deciding
forwards the packet
internal protocol driver
locally or injects
selected network-device-driver queue
host it performs
performs the routing
persistent forwarding information
forwarding information base
cache of recent
recent routing decisions
decisions the fib
fib holds routing-configuration
holds routing-configuration information
specific destination address
wildcard representing multiple
representing multiple destinations
destinations the fib
fib is organized
set of hash
hash tables indexed
indexed by destination
searched first successful
first successful lookups
table are added
wildcards are stored
quickly an entry
route cache expires
software passes packets
section of code
code for management-selective
filtering of packets
purposes the firewall
firewall manager maintains
maintains a number
chains are reserved
reserved for separate
packets being input
host each chain
chain is held
list of rules
data for matching
two other functions
reassembly of large
maintains an ipfrag
datagram being assembled
assembled incoming fragments
fragments are matched
match is found
fragment is added
ipq is created
fragment has arrived
completely new skbuff
skbuff is constructed
constructed to hold
packet is passed
host are passed
drivers the udp
udp and tcp
tcp protocols share
share a means
means of associating
packets with source
source and destination
pair of sockets
destination port numbers
numbers the socket
lists are linked
linked to hash
hash tables keyed
four address-port values
values for socket
lookup on incoming
packets the tcp
deal with unreliable
maintains ordered lists
lists of unacknowledged
unacknowledged outgoing packets
packets to retransmit
incoming out-of-order packets
data have arrived
linux s security
related to typical
typical unix security
unix security mechanisms
access the system
system without first
entry rights access
rights access control
access control providing
providing a mechanism
mechanism for checking
right to access
object and preventing
access to objects
objects as required
required 21.11.1 authentication
21.11.1 authentication authentication
authentication in unix
typically been performed
publicly readable password
readable password file
file a user
user s password
password is combined
random salt value
result is encoded
one-way transformation function
function and stored
one-way function means
original password cam1ot
cam1ot be deduced
trial and error
presents a password
password is recombined
salt value stored
file and passed
matches the contents
password is accepted
combine a dictionary
commonly used passwords
chance of matching
gaining lmauthorized access
encrypted password secret
methods of encoding
encoding the password
introduced that limit
limit the times
user is permitted
permitted to connect
exist to distribute
distribute authentication information
developed by unix
vendors to address
address authentication problems
problems the system
system is based
users an implementation
pam allows authentication
loaded on demand
system-wide configuration file
mechanism is added
change their passwords
21.11.2 access control
access control access
control access control
control under unix
unique numeric identifiers
identifiers a user
identifies a single
set of access
rights a group
identify rights belonging
control is applied
system every file
system is protected
standard access-control mechanism
sections and semaphores
system under user
user and group
group access control
process s uid
matches the uid
matches the gid
linux performs access
performs access control
control by assigning
specifies which access
granted to processes
processes with owner
access but denied
denied write access
uid a process
uid is granted
granted automatic access
bypassing normal access
normal access checks
checks such processes
permission to perform
perform privileged operations
reading any physical
memory or opening
opening reserved network
reserved network sockets
sockets this mechanism
kernel to prevent
prevent normal users
users from accessing
accessing these resources
kernel s key
key internal resources
implements the standard
standard unix setuid
unix setuid mechanism
setuid mechanism described
a.3.2 this mechanism
program to run
run with privileges
submits a job
system s print
running that program
implementation of setuid
process s real
real and effective
uid the real
file s owner
mechanism is augmented
two ways first
implements the posix
specification s saved
saved user-id mechanism
process to drop
drop and reacquire
reacquire its effective
effective uid repeatedly
repeatedly for security
waiving the privileges
perform selected operations
privileges standard unix
standard unix implementations
unix implementations achieve
achieve this capacity
swapping the real
previous effective uid
uid is remembered
program s real
program saved uids
process to set
set its effective
modify the real
provided by linux
characteristic that grants
rights are granted
granted to files
property is set
uid or gid
gid is set
fsuid and fsgid
files on behalf
user without taking
mechanism to serve
killed or suspended
mechanism for flexible
passing of rights
program to another-a
common in modern
local network socket
process a file
receives a duplicate
duplicate file descriptor
file this mechanism
client to pass
process without granting
granting that process
user who submits
pass the server
server file descriptors
denying the server
free operating system
operating system based
based on unix
designed to run
reliably on common
common pc hardware
interface and user
user interface compatible
compatible with standard
standard unix systems
run a large
number of unix
including an increasing
number of comm.ercially
comm.ercially supported applications
vacuum a complete
complete linux system
linux system includes
includes many components
independently of linux
linux the core
core linux operating-system
linux operating-system kernel
existing free unix
free unix software
software to run
entire unix-compatible operating
unix-compatible operating system
operating system free
free from proprietary
traditional monolithic kernel
kernel for performance
loaded and unloaded
unloaded at run
processes and running
running multiple processes
scheduler newly created
newly created processes
processes can share
share selective parts
allowing multithreaded programming
multithreaded programming interprocess
programming interprocess communication
communication is supported
system v mechanisms-message
shared memory-and bsd
bsd s socket
socket interface multiple
interface multiple networking
multiple networking protocols
system uses page
sharing and copy-on-write
copy-on-write to minimize
minimize the duplication
duplication of data
pages are loaded
out to backing
algorithm if physical
file system appears
hierarchical directory tree
tree that obeys
obeys unix semantics
layer to manage
manage multiple file
multiple file systems
file systems device-oriented
virtual file systems
systems are supported
supported device-oriented file
device-oriented file systems
file systems access
systems access disk
access disk storage
disadvantages of making
symbols defined inside
inside a kernel
loadable kernel module
linux scheduler implements
scheduler implements soft
implements soft real-time
scheduling what features
real-time programming tasks
tasks are missing
linux setuid feature
setuid feature differ
feature in standard
implement an intercomputer
intercomputer file-transfer program
program what type
program s address
copy-on-write attribute enabled
costs are incurred
creation and scheduling
platforms what steps
steps must linux
system is portable
processors and memory-management
minimize the ammmt
ammmt of architecture-specific
architecture-specific kernel code
commonly used programming
programming technique describe
ways to implement
user process request
request an operation
operation that results
demand-zero memory region
loading kernel modules
disadvantages of writing
writing an operating
shared libraries perform
perform many operations
advantage of keeping
keeping this functionality
out of kernel
memory what effect
kernel s design
system could include
including the linux
support different file-system
file-system types affect
affect the structure
classify linux threads
threads as user-level
kernel-level threads support
support your answer
disk-layout optimizations based
position of disk
optimize for sequential
sequential data access
characteristics does sequential
access take advantage
optimization no longer
supported by linux
support both processes
system-call sequence fork
preferable the linux
documentation on linux
key sites reference
linux cross-reference pages
maintain current listil1.gs
amount of information
linux 2.x kernels
kernels this site
site also includes
major mailing lists
linux documentation project
lists many books
books on linux
format as part
project the project
project also hosts
hosts the linux
linux how-to guides
hints and tips
relating to aspects
aspects of linux
hackers  guide
guide to kernel
internals in general
constantly expandil1.g site
site is located
located at http
kernel newbies website
resource for introducing
introducing the linux
kernel to newcomers
mailing lists devoted
devoted to linux
important are maintained
e-mail address maj
address maj ordomo
maj ordomo vger
ordomo vger rutgers
rutgers edu send
mail s body
body for information
access the list
finally the linux
internet complete linux
complete linux distributions
community also maintains
archives of current
current system components
addition to investigating
investigating internet resources
kernel in bovet
bovet and cesati
windows xp operating
32-i 64-bit preemptive
64-bit preemptive multitasking
preemptive multitasking operating
multitasking operating system
system for amd
microprocessors the successor
successor to windows
intended to replace
replace the windows
discuss the key
goals of windows
explore the principles
principles underlying windows
explain how windows
run programs designed
provide a detailed
windows xp file
illustrate the networking
networking protocols supported
supported in windows
describe the interface
system and application
microsoft and ibm
cooperated to develop
os operating system
language for single-processor
decided to make
make a fresh
portable operating system
system that supported
posix application-programming interfaces
dec vax operating
vax operating system
charter of building
api as nts
nts native environment
32-bit windows api
reflecting the popularity
popularity of windows
windows nt version
adopted the windows
interface and incorporated
incorporated internet web-server
web-server and webbrowser
software in addition
code were moved
kernel to improve
effect of decreased
decreased system reliability
reliability although previous
released in february
supported only intel
due to marketplace
marketplace factors windows
added active directory
x.soo-based directory service
networking and laptop
support for plug-and-play
desktop operating system
replacement for windows
windows .net server
windows xp updated
updated the graphical
graphical user interface
recent hardware advances
features were added
automatically repair problems
problems in applications
networking and device
including zero-configuration wireless
dramatic performance improvements
desktop and large
reliability and security
security than earlier
earlier windows operating
windows operating systems
implement multiple operating-system
multiple operating-system personalities
processes called subsystems
subsystems the subsystem
architecture allows enhancements
personality without affecting
affecting the application
multiuser operating system
supporting simultaneous access
access through distributed
windows terminal server
server the server
versions of wil,dows
wil,dows xp support
support simultaneous terminal
simultaneous terminal server
terminal server sessions
sessions from windows
windows desktop systems
systems the desktop
versions of terminal
terminal server multiplex
multiplex the keyboard
monitor between virtual
virtual terminal sessions
user this feature
fast user switching
users to preempt
version of windows
windows to ship
ship a 64-bit
native nt file
integers where appropriate-so
appropriate-so the major
64-bit in wil,dows
support for large
two desktop versions
windows xp windows
windows xp professional
premium desktop system
system for power
users at work
windows xp personal
reliability and ease
advanced features needed
needed to work
seamlessly with active
directory or run
run posix applications
.net server family
versions but add
add a range
range of features
print file servers
large datacenter machines
machines the large
processors on ia32
processors on ia64
microsoffs design goals
goals for windows
windows xp included
posix application compatibility
support we discuss
22.2.1 security windows
windows xp goals
receive a c-2
c-2 security classification
signifies a moderate
level of protection
protection from defective
software and malicious
extensive code review
review and testing
testing were combined
combined with sophisticated
sophisticated automatic analysis
automatic analysis tools
tools to identify
identify and investigate
investigate potential defects
represent security vuh1erabilities
22.2.2 reliability windows
stable operating system
operating system microsoft
extensive stress testing
errors in drivers
drivers the requirements
requirements for windows
microsoft used extensive
manual and automatic
automatic code review
review to identify
issues not detected
detected by testing
set about reviewing
reviewing each area
area to verify
windows xp extended
extended driver verification
verification to catch
catch more subtle
improved the facilities
facilities for catching
catching programming errors
errors in user-level
subjected third-party applications
rigorous certification process
certification process furthermme
windows xp added
facilities for monitoring
monitoring the health
including downloading fixes
fixes for problems
encountered by users
users the perceived
reliability of windows
improved by making
making the graphical
user interface easier
users can discover
perform common tasks
compatibility as mentioned
update of windows
primarily on compatibility
compatibility for business
applications the requirements
applications that ran
ran on windows
difficult to achieve
implementation of apis
latent application bugs
windows xp introduced
introduced a compatibility
layer that falls
falls between applications
apis this layer
layer makes windows
compatible with previuus
windows windows xpf
xpf like earlier
earlier nt releasesf
releasesf maintains support
support for running
running many 16-bit
thunkingf or conversionf
layer that translates
translates 16-bit api
16-bit api calls
calls into equivalent
equivalent 32-bit calls
32-bit calls similarlyf
similarlyf the 64-bit
translates 32-bit api
32-bit api calls
calls into native
native 64-bit calls
calls in additionf
additionf posix support
support in windows
subsystem called interix
unix-compatible software compiles
compiles and runs
runs under interix
interix without modification
22.2.4 high performance
high performance windows
designed to provide
provide on desktop
multithreaded and multiprocessor
locking and cache-line
management are keys
keys to scalability
satisfy performance requirements
variety of techniques
protocols for networks
caching of file-system
data the memory-management
memory-management and synchronization
algorithms were designed
performance considerations related
related to cache
lines and multiprocessors
performance by reducing
reducing the code-path
length in critical
algorithms and per-processor
per-processor data structures
coloring for numa
non-uniform n1emory access
implementing more scalable
scalable locking protocols
locking protocols helped
protocols helped reduce
helped reduce system
reduce system bus
system bus cycles
cycles and included
included lock-free lists
lists and queues
atomic read-modify-write operations
advanced locking techniques
subsystems that constitute
windows xp communicate
local procedure call
highperformance message passing
kernel dispatcherf threads
subsystems of windows
preempted by higherpriority
quickly to external
events in addition
designed for symmetrical
threads can run
22.2.5 extensibility refers
advances in computing
technology to facilitate
change over tim.e
developers implemented windows
architecture the windows
windows xp executive
runs in kernel
kernel or protected
basic system services
services on top
server subsystems operate
operate in user
emulate different operating
written for ms-dos
posix all run
run on windows
information on environmental
additional environmental subsystems
added without affecting
affecting the executive
executive in addition
system is running
system and supports
supports distributed processing
processing by remote
remote procedure calls
open software foundation
portability an operating
code is isolated
dynamic link library
process the upper
windows xp kernel
windows xp portability
portability the hal
hal manipulates hardware
isolating the rest
rest of windows
market reasons windows
intel ia32 compatible
ia32 compatible platforms
tested on ia32
ia32 and dec
dec alpha platforms
prior to release
release to ensure
ensure portability windows
windows xp runs
runs on ia32-compatible
ia32-compatible and ia64
ia64 processors microsoft
processors microsoft recognizes
recognizes the importance
importance of multiplatform
development and testing
22.2.7 international support
international support windows
api provides specialized
routines to format
money in accordance
accordance with national
national customs string
customs string comparisons
comparisons are specialized
specialized to acc01mt
acc01mt for varying
varying character sets
character sets unicode
unicode is windows
native character code
character code windows
windows xp supports
supports ansi characters
characters by converting
characters before manipulating
system text strings
replaced to localize
localize the system
languages multiple locales
important to multilingual
individuals and businesses
architecture of windows
system of modules
run in protected
collection of subsystems
subsystems and services
services that run
run in user
mode the user-mode
user-mode subsystems fall
provide security functions
advantages of type
type of architecture
interactions between modules
simple the remainder
describes these layers
layers and subsystems
package t security
security account manq.ger
account manq.ger database
manq.ger database figure
windows xp block
22.3.1 hardware-abstraction layer
layer the hal
software that hides
hides hardware differences
differences from upper
windows xp portable
portable the hal
exports a virtual
virtual machine interface
drivers one advantage
driver is required-it
platforms without porting
porting the driver
code the hal
support for symmetric
symmetric multiprocessing device
multiprocessing device drivers
device drivers map
drivers map devices
devices and access
details of mapping
configuring i buses
setting up dma
coping with motherboard-specific
kernel of windows
four main responsibilities
interrupt and exception
low-level processor synchronization
failure the kernel
kernel is object
oriented an object
type in windows
system-defined data type
set of methods
functions or operations
type the kernel
performs its job
set of kernel
objects whose attributes
store the kernel
perform the kernel
22.3.2.1 kernel dispatcher
dispatcher the kernel
out of ncemmy
preempted its main
thread sched llling
implementation of synchronization
asynchronous and deferred
deferred procedure calls
threads and scheduling
threads for executable
code each process
including actual priority
thread is waiting
waiting to run
highest-priority ready thread
thread is moved
thread to run
state a thread
processor it runs
execution time ends
signaling i completion
completion a thread
waits for resources
execution a thread
enters the state
32-level priority scheme
scheme to determine
order of thread
thread execution priorities
priorities are divided
class and real-time
class the variable
class contains threads
threads having priorities
threads with priorities
priority and traverses
traverses the set
set of queues
queues from highest
highest to lowest
finds a thread
ready to run
dispatcher skips past
thread is found
executes a special
clock interrupt queues
queues a quantum-end
quantum-end deferred procedure
deferred procedure call
processor in order
order to reschedule
reschedule the processor
priority is lowered
lowered the priority
base priority lowering
lowering the thread
thread s priority
limit the cpu
consumption of compute-bound
thread is released
boosts the priority
priority the amount
thread was waiting
waiting for keyboard
large priority increase
give good response
good response times
times to interactive
mouse and windows
enables i threads
i devices busy
busy while permitting
permitting compute-bound threads
spare cpu cycles
time-sharing operating systems
unix in addition
user s active
active gui window
gui window receives
receives a priority
boost to enhance
enhance its response
enters the ready
ready or wait
priority or processor
higher-priority real-tince thread
thread becomes ready
thread is running
thread is preempted
real-time thread preferential
thread preferential access
thread will start
start to execute
synchronization primitives key
primitives key operating-system
key operating-system data
operating-system data structures
structures are managed
managed as objects
objects using common
facilities for allocation
dispatching and synchronization
record an event
synchronize this occurrence
action notification events
notification events signal
signal all waiting
synchronization events signal
signal a single
single waiting thread
kernel-mode or user-mode
user-mode mutual exclusion
notion of ownership
deadlock-free mutual exclusion
defsemaphore object acts
counter or gate
gate to control
control the number
number of threads
threads that access
access a resource
encapsulates a virtual
timeouts when operations
objects are accessed
accessed from user
operation that returns
returns a handle
handle the user-mode
user-mode code polls
polls or waits
waits on handles
handles to synchronize
22.3.2.4 software interrupts
calls the dispatcher
implements two types
types of software
asynchronous procedure calls
calls and deferred
calls an asynchronous
asynchronous procedure call
thread and calls
calls a procedure
apcs are queued
queued to specific
system to execute
execute both system
system and user
process s context
postpone interrupt processing
handling all blocked
blocked device-interrupt processes
schedules the remaining
processing by queuing
queuing a dpc
dispatcher schedules software
schedules software interrupts
block other lsrs
lsrs in addition
addition to deferring
deferring deviceinterrupt processing
dispatcher uses dpcs
dpcs to process
process timer expirations
preempt thread execution
execution of dpcs
dpcs prevents threads
apcs from signaling
signaling the completion
completion of dpc
maintains a pool
pool of worker
worker threads isrs
isrs and dpcs
dpcs queue work
queue work itencs
worker threads dpc
threads dpc routines
routines are restricted
out of memory
call system services
attempt to block
object unlike apcs
dpc routines make
make no assumptions
context the processor
processor is executing
exceptions and interrupts
interrupts the kernel
handling for exceptions
generated by hardware
hardware or software
windows xp defines
defines several architectureindependent
memory-access violation integer
violation integer overflow
integer overflow floating-point
overflow floating-point overflow
overflow or underflow
underflow integer divide
illegal instruction data
instruction data misalignment
data misalignment privileged
misalignment privileged instruction
privileged instruction page-read
instruction page-read error
page-read error access
error access violation
access violation paging
violation paging file
paging file quota
file quota exceeded
quota exceeded debugger
exceeded debugger breakpoint
debugger breakpoint debugger
breakpoint debugger single
debugger single step
step the trap
trap handlers deal
deal with simple
simple exceptions elaborate
exceptions elaborate exception
elaborate exception handling
handling is performed
kernel s exception
dispatcher the neve
creates an exception
exception an exception
handler to deal
occurs in kernel
dispatcher simply calls
calls a routine
routine to locate
locate the exception
handler is found
fatal system error
system error occurs
user is left
infamous blue screen
screen of death
death that signifies
signifies system failure
complex for user-mode
exception handler sends
sends the exception
handle that exception
attempts to find
catch the error
error for debugging
debugger is running
process s exception
port to give
give the environmental
subsystem a chance
chance to translate
translate the exception
posix environment translates
environment translates windows
windows xp exception
signals before sending
thread that caused
caused the exception
kernel simply terminates
terminates the process
kernel handles interrupts
interrupts by calling
kernel trap-handler routine
routine the interrupt
interrupt is represented
needed to handle
handle the interrupt
interrupt object makes
makes it easy
easy to associate
associate interrupt-service routines
access the interrupt
intel and dec
types and numbers
numbers of interrupts
interrupts for portability
interrupt dispatcher maps
maps the hardware
set the interrupts
interrupts are prioritized
serviced in priority
interrupt request levels
represent hardware interrupts
windows xp interrupts
interrupts are defined
defined in figure
bind each interrupt
compute1 ~ windows
separate interrupt-dispatch table
processor s irql
independently to mask
mask out interrupts
interrupts all interrupts
processor are blocked
irql is lowered
returning from interrupt
interrupt processing windows
windows xp takes
interrupts to deliver
apcs and dpcs
perform system functions
start thread dispatches
check or bus
bus error power
error power fail
power fail interprocessor
fail interprocessor notification
request another processor
processor to act
act ; e.g
dispatch a process
process or update
update the tlb
traditional pc irq
irq hardware interrupts
hardware interrupts dispatch
dispatch and deferred
windows xp interrupt
executive the windows
set of services
services are grouped
procedure call facility
security reference monitor
plug-and-play and power
22.3.3.1 object manager
manager for managing
managing kernel-mode entities
set of interfaces
manipulated by user-mode
user-mode programs windows
windows xp calls
calls these entities
component that manipulates
table containing entries
entries that track
track the objects
process user-mode code
user-mode code accesses
accesses these objects
apis object handles
created by duplicating
duplicating an existing
examples of objects
objects are semaphores
dispatcher objects threads
threads can block
kernel dispatcher waiting
virtual memory apis
apis use process
process and thread
handles to identify
identify the process
process or thread
objects include files
internal i objects
objects file objects
maintain the open
state of files
files and devices
map files open
files open files
files are described
described in terms
terms of file
file objects local-communication
objects local-communication endpoints
endpoints are implemented
implemented as port
object manager maintains
maintains the windows
windows xp internal
internal name space
space in contrast
contrast to unix
roots the system
system name space
abstract name space
space and connects
connects the file
systems as devices
manager provides interfaces
interfaces for defining
defining both object
types and object
names to objects
maintaining the abstract
directories and symbolic
managing object creation
counts in protected-mode
code and handles
handles in user-mode
apis as user-mode
handles to manipulate
handle and stored
process the abstract
persist across reboots
configuration information stored
plug-and-play device discovery
creation of objects
objects by system
process ncay create
create a named
opens a handle
object and shares
first process processes
objects by duplicating
handles between processes
case the objects
permanent or temporary
temporary a perrnanent
perrnanent name represents
represents an entity
process is accessing
temporary nance exists
holds a handle
names are structured
structured like file
file path names
names in ms-dos
ms-dos and unix
unix name space
directories are represented
directory the object
object name space
space is extended
addition of device
device objects representing
objects representing volumes
volumes containing file
objects are manipulated
set of virtual
functions with implementations
manager to search
make security checks
opens or closes
closes an object
duplicates a handle
extend the abstract
space to include
files the translation
file object begins
space path-name components
components are separated
separated by whack
unix each component
component is looked
current parse directory
space internal nodes
directories or symbolic
object is found
path-name components remaining
object is returned
object s parse
procedure is invoked
-most notably -device
notably -device objects
-device objects representing
objects representing file
representing file systems
systems the parse
device object type
object type allocates
allocates a file
object and mitiates
mitiates an open
open or create
create i operation
system if successful
file object fields
fields are filled
describe the file
traverse the object-manager
translatilcg the original
original absolute path
pair this pair
object the file
unix file systems
permit multiple nicknamesor
multiple nicknamesor aliases-for
file the implemented
windows xp object
files with aliases
directory in unix
map standard ms-dos
standard ms-dos drive
ms-dos drive letters
letters to drive
drive names drive
names drive letters
letters are symbolic
remapped to suit
suit the convenience
user or administrator
space in windows
global each logged-on
set of drive
users can avoid
server sessions share
share all processes
session basenamedobj ects
named objects created
manager s parse
access a named
attencpts to open
open an object
object that resides
object manager calls
calls the parse
redirector this results
operation that accesses
accesses the file
objects are instances
object type specifies
specifies how instances
objects these functions
functions implement operations
closing and deleting
manager keeps track
object the pointer
number of distinct
distinct references made
object protected-mode code
code that refers
refers to objects
objects to ensure
number of handle
handle table entries
table entries referring
object each handle
object is closed
object s close
case of file
handle the cleanup
cleanup operation tells
tells the file
accessed by user
handle close removes
removes a reference
internal system components
components may retain
retain additional references
reference is removed
object s delete
manager to send
send the file
system a close
system to deallocate
deallocate any internal
temporary object completes
object is deleted
deleted from memory
memory the object
manager can make
make an object
taking an extra
manager is removed
object is made
object manager removes
removes the extra
deleted permanent objects
objects are rare
directory and symbolic
symbolic link objects
calls the object
manager s open
reference is inserted
process s object
handle is returned
handle by creating
creating an object
opening an existing
receiving a duplicated
inheriting a handle
descriptor these handles
rights and states
process s open
kinds of objects
descriptor in unix
process that confers
confers the ability
ability to access
access and manipulate
manipulate a system
system resource handles
whert child processes
processes are created
out-of-process execution contexts
contexts are implemented
entity that generates
generates object handles
place to check
security the object
object manager checks
access an object
open the object
object the object
manager also enforces
memory a process
charging a process
objects and refusing
refusing to allocate
allocate more memory
accumulated charges exceed
exceed the process
process s quota
login process authenticates
authenticates a user
token is attached
user s process
process the access
token contains information
default access-control list
list the services
services and objects
objects a user
user can access
access are determined
token that controls
making the access
token is missing
missing and defaults
code on behalf
threads to impersonate
impersonate a client
client s token
object is protected
ids and access
access rights granted
attempts to access
compares the security
thread s access
object s access-control
list to determine
determine whether access
permitted the check
check is performed
object is opened
open occurs operating-system
occurs operating-system components
operating-system components executing
executing in kernel
kernel mode bypass
bypass the access
code is assumed
code must avoid
avoid security vulnerabilities
leaving checks disabled
disabled while creating
creating a user-modeaccessible
determines the access-control
type s open
user s access-token
field that controls
auditing of object
audited are logged
system s security
user an administrator
monitors this log
log to discover
attempts to break
access protected objects
22.3.3.2 virtual memory
manager the executive
component that manages
manages the virtual
physical memory allocation
underlying hardware supports
hardware supports virtual-to-physical
supports virtual-to-physical mapping
transparent cache coherence
coherence on multiprocessor
allowing multiple pagetable
multiple pagetable entries
entries to map
physical page frame
manager in windows
page-based management scheme
pages of data
disk or mapped
local or remote
remote file system
file system pages
fills the page
page with zeros
erasing the previous
4-gb virtual address
space the upper
mode to access
access the operating-system
data structures key
structures key areas
references a process
page using physical
physical page-frame numbers
maps the page
single 4-mb region
accessed through virtual
virtual addresses hyperspace
addresses hyperspace maps
maps the current
process s working-set
kernel-mode address space
share the win32
system the lower
user and kernel-mode
threads certain configurations
configurations of windows
windows xp reserve
3gb of address
address space rum1ing
rum1ing the system
mode drastically reduces
reduces the amount
amount of data
applications that manage
larger user-mode address
worth the loss
loss of caching
process to allocate
allocate user memory
first step reserves
reserves a portion
commits the allocation
allocation by assigning
assigning virtual memory
virtual memory space
memory or space
windows xp limits
limits the amount
amount of virtual
space a process
consumes by enforcing
enforcing a quota
quota on committed
process decommits memory
free up virtual
processes the apis
reserve virtual addresses
addresses and commit
commit virtual memory
process to control
control the virtual
environmental subsystems manage
manage the memory
process to lock
lock selected pages
pages in physical
paging file processes
processes also allocate
allocate raw physical
raw physical mernory
address space ia32
space ia32 processors
physical address extension
64gb of physical
system this memory
windows xp makes
address windowing extension
allocate physical memory
space onto part
windows xp implements
implements shared memory
memory by defining
maps the memory
space this portion
redefines its view
object to gain
process can control
shared-memory section object
ways the maximum
bounded the section
backed by disk
meaning the section
attempting to access
protection of pages
no-access page raises
raises an exception
exception if accessed
faulty program iterates
user-mode memory allocator
special kernel allocator
configured to map
map each allocation
page to detect
detect buffer overruns
copy-on-write mechanism enables
memory more efficiently
processes want independent
places a single
single shared copy
copy into virtual
memory and activates
activates the copy-on-write
makes a private
virtual address translation
translation in windows
multilevel page table
table for ia32
physical address extensions
address extensions enabled
bytes in size
size each pde
size each pte
4-kb in physical
memory the total
pages out individual
out individual tables
tables to disk
directory and page
tables are referenced
hardware via physical
addresses to improve
self-maps the page
manager to translate
translate a virtual
pde or pte
pte without additional
additional memory accesses
context is changed
single page-directory entry
changed to map
variety of reasons
directory or page
page table occupy
occupy a sii
sii gle page
number of pdes
pdes or ptes
ptes that fit
determine how virtual
addresses are translated
translated into physical
addresses on ia32-compatible
value can represent
value can select
select any entry
table this property
virtual address pointer
pointer is translated
address in physical
memory a 32-bit
32-bit virtual-memory address
address is split
directory this address
selects one page-directory
table the memory-management
address to select
select a pte
page table layout
specifies a page
frame in physical
memory the remaining
frame the mmu
creates a pointer
byte in physical
memory by concatenating
bits to describe
describe the state
page the ia32
ia32 hardware reserves
system the rest
accessed or written
page is globat
pte is valid
ia32 processors running
running with pae
pdes and ptes
ptes in order
order to represent
represent the larger
larger 24-bit page-frame
24-bit page-frame number
page-frame number field
secondlevel page directories
address space requires
requires an extra
level of page
four pdes translation
32-bit virtual address
top-level directory index
second-level page directories
avoid the overhead
overhead of translating
translating every virtual
pde and pte
associative memory cache
cache for mapping
mapping virtual pages
pages to ptes
unlike the ia32
tlb is maintained
virtual-to-physical address translation
translation on ia32
invokes a software-trap
supply translations missing
flexibility in choosing
choosing the data
three-level tree structure
structure is chosen
chosen for rnapping
rnapping user-mode virtual
user-mode virtual addresses
bits  worth
bits of top-level
bits of second-level
bits of page
space for windows
processor but represents
represents a tradeoff
number of memory
memory references required
required to handle
handle tlb misses
address space supported
satisfy zero-on-demand faults
copy of information
information already stored
disk standby pages
prefetched to exploit
page is unusable
page frame allocated
allocated in physical
defines the format
bits invalid pages
number of states
represented by bits
pte page-file pages
mapped through section
section objects encode
encode a pointer
section object pages
information to find
find the page
page on disk
pte is shown
bits for page
bits for page-file
bits to select
select the paging
bits that describe
describe the page
state a page-file
pte is marked
invalid virtual address
mmu since executable
code and memorymapped
copy on disk
system data structure
file and offset
invalid virtual addresses
number of temporary
page is removed
page-file page-table entry
entry the valid
written to disk
list if written
page is reclaimed
read from disk
manager uses idle
idle cpu cycles
list and move
zeroed list transition
list transition pages
allocated a physical
awaiting the completion
marked as valid
objects to describe
sharable between processes
processes each process
virtual page tables
object also includes
includes a set
process page table
table is marked
hardware mmu reads
reads the page
directly from memory
page is made
pte is edited
edited to point
object are virtual
created and trimmed
trimmed as needed
prototype pies needed
greatly improves performance
kernel virtual addresses
protection and state
shared page generates
generates a page
copy-on-write page marked
makes a copy
page and marks
marks the pte
page any longer
longer shared pages
pages of physical
memory in system
system the entry
n1.anager can maintain
page page frames
frames not referenced
pte are linked
linked to lists
shared physical page
page is marked
removed from memory
count of valid
back to disk
finds a physical
page to hold
hold the data
data for zero-on-demand
find a page
list is chosen
page is zeroed
read in fron1
unmapped or trimmed
standby or modified
list the thread
thread either waits
reclaims the page
issued to read
read the page
file or file
standby list pages
disk and transferred
working-set manager trims
manager trims pages
pages from memory
page in physical
memory is unmapped
pages from processes
process is started
assigned a default
default minimum working-set
minimum working-set size
windows xp monitors
monitors the page
size and adjusts
adjusts the working-set
replaces and trims
age the age
page is determin.ed
cycles have occurred
pte trimmed pages
pages are moved
page s pte
page immediately needed
array or fetching
fetching sequential instructions
instructions that form
form the executable
pages this prefetching
reduce the total
number of page
page faults writes
clustered to reduce
reduce the number
number of independent
independent t operations
addition to managing
managing committed memory
manages each process
process s reserved
space each process
tree that describes
describes the ranges
ranges of virtual
manager to fault
fault in page
tables as needed
process s tree
information to fill
pte and retrieve
retrieve the page
allocated and initialized
22.3.3.3 process manager
manager the windows
windows xp process
manager provides services
services for creating
kn.owledge about parent-child
relationships or process
refinements are left
subsystem that owns
owns the process
process the process
setting the priorities
priorities and affinities
affinities in processes
created thread scheduling
thread scheduling takes
scheduling takes place
collected into large
objects allows limits
affinities that control
control multiple processes
manage large data-center
large data-center machines
win32 api environncent
win32 api application
api application calls
application calls createprocess
win32 api subsystem
subsystem to notify
process then calls
calls an api
create the process
process manager calls
manager to create
create a process
object and returns
returns the object
handle to win32
win32 api calls
calls the process
create a thread
process and returns
windows xp apis
apis for manipulating
manipulating virtual memory
memory and threads
subsystems can perform
operations on behalf
thread is created
call is delivered
thread to prompt
prompt the start
start of execution
user-mode image loader
loader the loader
library automatically mapped
newly created process
created process windows
supports a unix
style of process
creation in order
order to support
support the posix
posix environmental subsystem
win32 api environment
api environment calls
apis to create
manager also implements
implements the queuing
queuing and delivery
delivery of asynchronous
system to initiate
initiate thread execution
threads and processes
attach debuggers user-mode
debuggers user-mode code
queue an apc
thread for delivery
delivery of signal-like
notifications to support
manager provides apis
apis that send
alerts to threads
threads to unblock
process manager includes
includes the capability
capability to suspend
suspend and resume
threads that begin
set a thread
thread s register
context and access
access another process
process this method
originating a work
manager also supports
impersonation a thread
security token belonging
user can set
set a thread-specific
thread-specific token belonging
user this facility
facility is fundamental
clientserver computing model
act on behalf
variety of clients
22.3.3.4 local procedure
facility the implementation
implementation of windows
nlodel the environn
environn ental subsystems
subsystems are servers
servers that implement
implement particular operating-system
personalities the client-server
implementing a variety
variety of operating-system
environmental subsystems security
subsystems security management
network file systems
features are implemented
model to reduce
reduce the memory
user-mode thread-pool facilities
facilities to share
threads and wait
wait for messages
facility to pass
requests and results
results between client
client and server
windows xp subsystems
lpc is similar
systems for distributed
processing across networks
lpc is optimized
system the windows
windows xp implementation
implementation of open
mechanism the server
server process publishes
globally visible connection-port
visible connection-port object
client wants services
subsystem s corn1.ection-port
object and sends
sends a connection
port the server
creates a channel
channel and returns
client the charn1.el
pair of private
private communication ports
server-to-client messages communication
messages communication channels
communication channels support
support a callback
server can accept
expecting a reply
channel is created
technique is suitable
suitable for small
port s message
messages are copied
sharedmemory section object
object is created
pointer and size
size information referring
object this avoids
copy large messages
messages the sender
sender places data
ique uses apis
apis that read
space the lpc
lpc provides functions
functions and synchronization
server can access
access the data
win32 api window
api window manager
form of message
executive lpc facilities
dedicated server thread
thread to handle
64-kb section object
object an event-pair
subsysten to provide
thread has copied
copied a message
win32 api server
versa the section
section object passes
passes the messages
event-pair object performs
object performs synchronization
section object eliminates
object eliminates message
eliminates message copying
represents a region
region of shared
event-pair object eliminates
eliminates the overhead
object to pass
messages containing pointers
pointers and lengths
server thread eliminates
overhead of determining
determining which client
thread is calling
calling the server
thread per client
kernel gives scheduling
dedicated server threads
threads to improve
22.3.3.5 i manager
responsible for file
systems are loaded
requests it works
manager to provide
provide memory-mapped file
i and controls
controls the windows
entire i system
operation to complete
models of asynchronous
asynchronous i completion
setting of events
delivery of apcs
apcs to initiating
i completion ports
thread to process
process i completions
drivers are arranged
converts the requests
requests it receives
forwards the irp
stack for processing
processes the irp
forward the irp
processing is finished
complete the operation
driver is performing
performing its part
forced to block
queue the irp
thread to continue
returns a status
request is pending
thread can continue
executing in parallel
processed in interrupt-service
routines and completed
context that initiated
final i processing
stack is built
opportunity to insert
stack as filter
drivers can examine
l operation mount
operation mount management
striping and mirroring
examples of functionality
implemented using filter
drivers that execute
beneath the file
stack file-system filter
file-system filter drivers
filter drivers execute
hierarchical storage management
storage management single
management single instancing
instancing of files
files for remote
dynamic forncat conversion
conversion third parties
drivers to implement
implement virus detection
drivers for windows
windows driver model
specification this model
requirements for device
layer filter drivers
share common code
code for handling
power and plug-and-play
build correct cancellation
correct cancellation logic
writing a full
full wdm device
wdm device driver
device can involve
involve an excessive
makes it unnecessary
class of similar
shares a common
port driver implements
calls device-specific routines
implement device-specific functionality
22.3.3.6 cache manager
caching is done
centralized caching facility
facility the works
provide cache services
i manager caching
caching in windows
based on files
address space comprise
comprise the system
cache manager maps
manager maps files
manager to handle
cache is divided
divided into blocks
block can hold
hold a view
file each cache
block is described
stores the virtual
address and file
view the vacbs
single array maintained
cache manager maintains
maintains a separate
separate vacb index
vacb index array
array that describes
describes the caching
file this array
s-entry vacb index
array an entry
index array points
i manager receives
receives a file
file s user-level
user-level read request
i manager sends
sends an irp
resides the file
file system attempts
request specifically asks
cache manager calculates
calculates which entry
file s vacb
index array corresponds
request the entry
entry either points
cache manager allocates
allocates a cache
maps the view
block the cache
manager then attempts
attempts to copy
caller s buffer
operation is completed
page fault figure
send a non
non cached read
cached read request
sends another request
requesting a paging
bypasses the cache
manager and reads
reads the data
manager upon completion
vacb is set
set to point
page the data
original i request
request is completed
shows an overview
operations on cached
i is handled
mechanism this mechanism
parallels the normal
i but calls
irp is involved
reaches the file
system and calls
calls the cache
attempts the operation
normal irp path
kernel-level read operation
operation is similar
buffer in user
structures that describe
manager s mapping
interface to read
read the metadata
manager s pinning
interface a page
locks the page
physical-memory page frame
move or page
out the page
page after updating
updating the metadata
file system asks
asks the cache
manager to unpin
unpin the page
page a modified
flushes the page
page to disk
disk the metadata
metadata are stored
history of read
attempts to predict
predict future requests
cache manager finds
finds a pattern
previous three requests
sequential access forward
forward or backward
request is submitted
finds its data
wait for disk
i the win32
win32 apt openfile
passed the file_flag_sequentialscan
thread s requests
windows xp performs
performs i operations
operations in chunks
times the normal
responsible for telling
manager to flush
flush the contents
manager s default
behavior is write-back
thread when write-through
caching is needed
process can set
set a flag
flag when opening
opening the file
process can call
call an explicit
explicit cache-flush function
free cache pages
chance to wake
flush the pages
pages to disk
cache writer prevents
prevents a process
process from flooding
flooding the system
w11en the amount
amount of free
free cache memory
memory becomes low
manager temporarily blocks
temporarily blocks processes
blocks processes attempting
attempting to write
data and wakes
wakes the cachewriter
thread to flush
retransmitted this retransmission
retransmission would waste
waste network bandwidth
bandwidth to prevent
prevent such waste
redirectors can instruct
instruct the cache
manager to limit
limit the backlog
backlog of writes
interface to move
move the data
data directly moving
directly moving data
data directly avoids
22.3.3.7 security reference
reference monitor centralizing
monitor centralizing management
management of system
object manager enables
manager enables windows
mechanism to perform
perform run-time access
run-time access validation
validation and audit
checks the process
process s security
responsible for manipulating
manipulating the privileges
privileges in security
security tokens special
tokens special privileges
privileges are required
required for users
users to perform
backup or restore
operations on file
users restricted tokens
restrict the damage
done by execution
execution of untrusted
srm is logging
logging security audit
security audit events
c-2 security rating
security rating requires
ability to detect
detect and log
log all attempts
easier to trace
attempts at unauthorized
srm is responsible
responsible for making
making access checks
managers the operating
plug--and-play to recognize
recognize and adapt
configuration for pnp
pnp to work
driver must support
support the pnp
standard the pnp
manager automatically recognizes
automatically recognizes installed
recognizes installed devices
devices and detects
operates the manager
track of resources
care of loading
drivers this management
management of hardware
hardware resources-primarily interrupts
i memory ranges-has
ranges-has the goal
goal of determining
determining a hardware
manager will assign
study system resources
resources before installing
installing new hardware
determine which devices
resources the proliferation
proliferation of pcmcia
devices also dictates
dictates the support
dynamically configurable resources
pnp manager handles
manager handles dynamic
handles dynamic reconfiguration
list of devices
loads the installed
sends an add-device
device the pnp
pnp manager figures
out the optimal
optimal resource assignments
assignments and sends
sends a start-device
pnp manager sends
sends a query-stop
asks the driver
driver can disable
disable the device
operations are completed
operations are prevented
prevented from starting
sends a stop
reconfigure the device
supports other requests
ready to eject
eject a pccard
similar to query-stop
query-stop the surprise-remove
removes a pccard
device without stopping
stopping it first
first the remove
remove request tells
tells the driver
driver to stop
device and release
release all resources
supports sophisticated power
sophisticated power management
systems to reduce
reduce power consumption
extending the battery
life of laptops
laptops the system
system and individual
moved to low-power
standby or sleep
directed at physical
retention the system
system can turn
packets are received
opens a laptop
laptop or pushes
pushes a soft
soft power button
power button windows
hibernate a system
system by storing
storing physical memory
physical memory contents
contents to disk
restoring the system
point before execution
strategies for reducing
reducing power consumption
consumption are supported
cpu is idle
windows xp moves
moves the system
state requiring lower
requiring lower power
lower power consumption
cpu is underutilized
windows xp reduces
cpu clock speed
save significant power
22.3.3.9 registry windows
hives for system
default user preferences
required to boot
boot the system
system successfully boots
saves the system
hive as last
last known good
user installs software
produces a system-hive
hive from installing
installing third-party applications
applications and drivers
common that windows
saves the hives
states like driver
executables and configuration
previously working state
state in cases
operates as expected
booting the booting
bios begins executing
executing from rom
rom the bios
booted and loads
loads and executes
executes the bootstrap
disk this loader
format to load
load the ntldr
system device ntldr
determines what device
drivers are needed
needed to boot
ntldr begins kernel
begins kernel execution
initializes the system
system and creates
creates two processes
internal worker threads
executes in user
mode the first
first user-mode process
user-mode process created
created is smss
process in unix
establishing the paging
files and loading
loading device drivers
creates the winlogon
winlogon and csrss
csrss processes csrss
including the lsass
lsass security subsystem
remaining services needed
needed to run
run the system
optimizes the boot
process by pre-loading
files from disk
based on previous
system disk access
disk access patterns
patterns at boot
lay out system
out system files
files on disk
disk to reduce
i operations required
required to start
start the system
system are reduced
reduced by grouping
reduction in system
sleep and hibernation
capabilities of windows
users to power
subsystems are user-mode
user-mode processes layered
services to enable
including 16-bit windows
posix each environmental
win32 api subsysten1
main operating environment
starts all processes
application is executed
api subsystem calls
manager to load
load the application
application s executable
code the memory
memory manager returns
status to win32
indicating the type
native win32 api
win32 api executable
api environment checks
subsystem is running
process the subsystem
subsystem then takes
facility to provide
provide operatingsystem services
services to client
processes the windows
windows xp subsystem
architecture keeps applications
applications from mixing
mixing api routines
environments for instance
api application cam1.ot
application cam1.ot make
posix system call
subsystem is run
separate user-mode process
processes the exception
exception is win32
graphical display capabilities
disabled and requires
requires a reboot
api environment categorizes
environment categorizes applications
graphical or character
thinks interactive output
window win32 api
win32 api transforms
transforms the output
window this transformation
transformation is easy
environmental subsystem calls
calls a win32
routine to display
display the text
api environment performs
performs this function
transfer screen text
text between windows
works for ms-dos
posix command-line applications
22.4.1 ms-dos environment
environment the ms-dos
windows xp environmental
windows xp application
application the vdm
execute or emulate
routines to emulate
emulate the ms-dos
ms-dos rom bios
bios and int
virtual device drivers
ports the vdm
vdm is based
based on ms-dos
windows xp command
program that creates
creates a window
run both 16-bit
16-bit and 32-bit
application is run
command shell starts
starts a vdm
process to execute
execute the program
ms-dos graphical applications
graphical applications run
run in full-screen
applications can run
run full screen
ms-dos applications run
ms-dos applications access
access the disk
fail to run
access is restricted
restricted to protect
protect the file
system in general
directly access hardware
hardware will fail
fail to operate
operate under windows
hog the cpu
cpu for instance
delays or pauses
pauses in execution
execution the scheduler
kernel dispatcher detects
detects such delays
throttles the cpu
application to operate
22.4.2 16-bit windows
16-bit windows environment
environment the win16
win16 execution environment
environment is provided
vdm that incorporates
incorporates additional software
software called windows
windows on windows
routines and stub
routines for window-manager
window-manager and graphical-device-interface
functions the call
win32 api subroutines-converting
addresses into 32-bit
32-bit addresses applications
16-bit window manager
manager or gdi
underlying win32 api
win32 api implementation
true 16-bit windows
wow32 can multi
processes on windows
application can run
applications are single
tlueaded and reside
queue these features
application that stops
stops receivil1.g input
input will block
application can crash
crash other win16
applications by corrupting
corrupting the address
space the user
user can enable
enable multiple win16
multiple win16 environments
environments to coexist
usil1.g the command
applications that users
continue to run
run on wmdows
mclude common installation
wow32 environment conti11.ues
conti11.ues to exist
il1.stalled on windows
22.4.3 32-bit windows
32-bit windows environment
environment on ia64
ia64 the native
environment for windows
windows on ia64
native ia64 il1.struction
ia64 il1.struction set
set to execute
execute ia32 programs
requires a thunking
layer to translate
translate 32-bit win32
32-bit win32 api
calls-just as 16-bit
16-bit applications require
applications require translation
64-bit windows supports
supports the wow64
environment the implementations
implementations of 32-bit
32-bit and 64-bit
processor provides direct
execution of ia32
achieves a higher
level of compatibility
compatibility than wow32
22.4.4 win32 environment
environment as mentioned
subsystem in windows
runs win32 api
win32 api applications
applications and manages
manages all keyboard
robust several features
win32 api contribute
queue the window
window manager dispatches
dispatches all input
process s input
enables the user
user to terminate
needed the win32
api also validates
validates all objects
invalid or wrong
handle the win32
api subsystem verifies
verifies the type
object the reference
object manager prevent
manager prevent objects
achieve a high
compatibility with windows
applications be run
modifies the win32
approximate the behavior
system and fail
applications have latent
running an application
behavior much closer
closer to windows
-though with reduced
performance and limited
22.4.5 posix subsystem
subsystem the posix
subsysten1 is designed
posix applications written
written to follow
follow the posix
model posix applications
application posix applications
posix subsystem server
subsystem server psxss
server psxss exe
posix dynamic link
link library psxdll
library psxdll dll
posix console session
console session manager
tl1e posix standard
windows xp redirection
applications have access
windows xp system
posix environment enforces
environment enforces unix-like
enforces unix-like permissions
permissions on directory
due to scheduling
system in windows
separately for professional
professional desktop systems
systems and servers
compatibility with unix
applications than previous
commonly available unix
compile and run
run without change
version of interix
logon and security
objects on windows
winlogon is responsible
responsible for responding
secure attention sequence
n1echanism for keeping
keeping an application
application from acting
horse only winlogon
winlogon can intercept
intercept this sequence
sequence in order
order to put
lock the workstation
account and provide
provide the password
card and personal
personal identification number
policies in effect
local security authority
security authority subsystem
process that generates
generates access tokens
tokens to represent
system it calls
authentication using information
subsystem or network
database and checks
password is correct
correct the security
subsystem then generates
generates the access
opening a handle
privileges and quotas
quotas the default
default authentication package
package for windows
windows xp domains
domains is kerberos
responsibility for implementing
implementing security policy
encryption of data
data and keys
system the 16-bit
16-bit fat file
fat file system
including internal fragmentation
lack of access
protection for files
32-bit fat file
system has solved
solved the size
size and fragmentation
performance and features
weak by comparison
comparison with modern
modern file systems
systems the ntfs
ntfs file system
designed to include
include many features
including data recovery
files and file
multiple data streams
volume shadow copies
basic file system
windows xp continues
advantages of ntfs
important for interoperability
interoperability of media
media with windows
supports additional file-system
additional file-system types
22.5.1 ntfs internal
layout the fundamental
entity in ntfs
volume a volume
volume is created
windows xp logical
logical disk management
disk management utility
logical disk partition
partition a volume
volume may occupy
occupy a portion
occupy an entire
span several disks
deal with individual
units of disk
size is configured
system is formatted
default cluster size
size for volumes
small size reduces
amount of internal
lost to internal
wo11ld be lost
lost when storing
addresses it assigns
system can calculate
calculate a physical
physical disk offset
multiplying the lcn
file in ntfs
simple byte stream
structured object consisting
consisting of typed
typed each attribute
independent byte stream
written some attribute
types are standard
including the file
file has aliases
descriptor that specifies
specifies access control
access control user
control user data
data is stored
stored in data
traditional data files
unnamed data attribute
file s data
additional data streams
created with explicit
names for instance
macintosh files stored
windows xp server
named data stream
stream the iprop
component object model
stream to store
properties on ordinary
thumbnails of images
images in general
attribute syntax ntfs
syntax ntfs returns
returns the size
response to file-query
rmming the dir
ntfs is described
master file table
record is determined
system is created
attributes are stored
unnamed bulk data
extent is stored
attribute may fit
inside the mft
pointers are needed
needed to point
fragments -one record
file is described
pointers to overflow
hold the additional
pointers and attributes
quantity that consists
48-bit file number
16-bit sequence number
number the file
mft that describes
describes the file
file the sequence
number is incremented
entry is reused
reused the sequence
sequence number enables
number enables ntfs
ntfs to perform
perform internal consistency
internal consistency checks
catching a stale
namespace is organized
hierarchy of directories
directories each directory
store an index
cost of reorganizing
reorganizing the tree
tree is eliminated
level contains pointers
pointers to disk
hold the remainder
tree each entry
timestamp and file
file s resident
information are stored
gather these attributes
22.5.1.2 ntfs metadata
metadata the ntfs
volume s metadata
stored in files
files the first
mft is damaged
special in purpose
purpose they include
include the files
records all metadata
version of ntfs
ntfs that formatted
formatted the volume
bit that tells
checked for consistency
volume are allocated
code for windows
simple rom bootstrap
rom bootstrap loader
loader the boot
volume ; ntfs
record for error
simple file systems
damage the file-system
file-system data structures
volume is scrambled
unix store redundant
store redundant metadata
recover from crashes
program to check
structures and restore
consistent state restoring
involves deleting damaged
deleting damaged files
files and freeing
freeing data clusters
written with user
system s metadata
structures this checking
loss of significant
approach to file-system
robustness in ntfs
filesystem data-structure updates
updates are performed
performed inside transactions
structure is altered
writes a log
redo and undo
writes a commit
log to signify
system can restore
restore the file-system
state by processing
processing the log
redoing the operations
operations for committed
undoing the operations
operations for transactions
record is written
log the system
checkpoint to recover
grow without bounds
bounds the first
volume is accessed
ntfs automatically performs
automatically performs file-system
performs file-system recovery
contents are correct
undamaged and reflect
reflect some consistent
state that existed
extend the transaction
scheme to cover
cover user files
log is stored
fixed maximum size
queue of log
holds context information
area where ntfs
ntfs should start
recovery in fact
restart area holds
holds two copies
copy is damaged
functionality is provided
addition to writing
writing the log
records and performing
performing recovery actions
service keeps track
log-file service queues
service queues pending
queues pending transactions
in-progress operations complete
flush all data
resets the log
file and performs
performs the queued
security the security
volume is derived
ntfs file references
references a security
states the access
access privileges granted
user having access
permissions on traversal
traversal of directories
directories in file
enabled traversal checks
inherently more expensive
parsing of file
names uses prefix
opening of directory
22.5.4 volume management
management and fault
fault tolerance ftdisk
fault-tolerant disk driver
driver for windows
ways to combine
combine multiple disk
multiple disk drives
22.5.4.1 volume set
combine multiple disks
logically to form
form a large
large logical volume
128001-7833611 d logical
partitions a volume
extended without disturbance
data already stored
system the bitmap
extended to cover
newly added space
added space ntfs
space ntfs continues
single physical disk
ftdisk driver supplies
supplies the mapping
22.5.4.2 stripe set
combine multiple physical
multiple physical partitions
interleave their blocks
blocks in round-robin
fashion to form
volume are stored
lcns 0-15 lcns
lcns 16-31 lcns
lcns 32-47 lcns
lcns 48-63 lcns
lcns 64-79 lcns
set with parity
partition has contributed
allocation wraps ar01md
block a stripe
stripe set forms
forms one large
layout can improve
disks can transfer
data in parallel
22.5.4.3 stripe set
parity a variation
raid levels suppose
disks will store
store data stripes
disk will store
store a parity
stripe the parity
stripes is destroyed
system can reconstruct
reconstruct the data
data by calculating
calculating the exclusive
ability to reconstruct
reconstruct data makes
makes the disk
data in case
stripe also requires
stripe seven concurrent
stripes thus require
disks to avoid
creating this bottleneck
spread the parity
disks by assigning
style to build
build a stripe
equal-sized partitions located
22.5.4.4 disk mirroring
comprises two equal-sized
two equal-sized partitions
application writes data
writes the data
partitions are identical
copy safely stored
mirror mirror sets
copy of drive
giving each mirror
workload to protect
two separate disk
separate disk controllers
controllers this arrangement
22.5.4.5 sedor sparing
sparing and cluster
remapping to deal
deal with disk
technique called sector
technique called cluster
hardware capability provided
creates a map
map from logical
logical block numbers
numbers to good
leaves extra sectors
extra sectors unmapped
instructs the disk
drive to substitute
substitute a spare
software technique performed
disk goes bad
block by changing
changing any affected
ntfs also makes
makes a note
block goes bad
loss but sector
sparing or cluster
combined with fault-tolerant
volumes to mask
mask the failure
reconstructs the missing
data by reading
reading the mirror
exclusive or parity
parity the reconstructed
obtained by sector
compression and encryption
ntfs can perform
perform data compression
compression on individual
directory to compress
compress a file
divides the file
unit is written
algoritln11 is applied
version is stored
stored when reading
ntfs can determine
determine whether data
stored compression unit
clusters to improve
performance when reading
reading contiguous compression
contiguous compression units
prefetches and decompresses
files or files
technique to save
save space clusters
allocated or stored
gaps are left
sequence of virtual-duster
virtual-duster numbers stored
file when reading
reading a file
finds a gap
zero-fills that portion
buffer this technique
ntfs supports encryption
encryption of files
files individual files
files or entire
encryption the security
security system manages
manages the keys
retrieve lost keys
22.5.6 mount points
mount points mount
points mount points
form of symbolic
symbolic link specific
specific to directories
directories on ntfs
ntfs they provide
mechanism for organizing
organizing disk volumes
point is implemented
points will supplant
supplant drive letters
long transition due
22.5.7 change journal
change journal ntfs
file system user-mode
system user-mode services
services can receive
identify what files
files have changed
changed the content-indexing
journal to identify
re-indexed the filereplication
22.5.8 volume shadow
shadow copies windows
implements the capability
capability of bringing
bringing a volume
creating a shadow
making a shadow
form of copy-on-write
created are stored
copy to achieve
achieve a consistent
requires the cooperation
cooperation of applications
maintain old versions
versions of files
stored on file
existed at earlier
feature to recover
out a backup
supports both peer-to-peer
peer-to-peer and client-server
facilities for network
management the networking
components in windows
windows xp provide
provide data transport
ability to send
send print jobs
jobs to remote
22.6.1 network interfaces
interfaces to describe
networking in windows
internal networking interfaces
3com to separate
separate network adapters
adapters from transport
changed without affecting
data-link and network
model and enables
enables many protocols
protocols to operate
adapters in terms
enables any session-layer
similar reasoning led
mechanism in unix
supports both connection-based
connection-based and connectionless
functions to send
send any type
type of data
22.6.2 protocols windows
implements transport protocols
protocols as drivers
practice the system
discuss a number
provide a variety
variety of network
22.6.2.1 server-message block
block the protocol
protocol was first
introduced in ms-dos
protocol to send
network the smb
four message types
message types session
types session control
session control messages
messages are commands
commands that start
start and end
end a redirector
server a redirector
redirector uses file
messages to access
server printer messages
remote print queue
receive status information
workstation the smb
protocol was published
number of operating
22.6.2.2 network basic
basic input system
interface for networks
bios hardware-abstraction interface
hardware-abstraction interface devised
devised for pcs
pcs running ms-dos
running ms-dos netbios
becmne a standard
standard network-programming interface
network-programming interface netbios
establish logical names
establish logical connections
two logical names
support reliable data
reliable data transfer
netbios or smb
22.6.2.3 netbios extended
netbios extended user
extended user interface
introduced by ibm
efficient networking protocol
protocol for windows
windows for workgroups
limitations of netbeui
22.6.2.4 transmission control
control protocol protocol
protocol the transmission
facto standard networking
standard networking infrastructure
lip to connect
variety of operating
systems and hardware
platforms the windows
windows xp tcp
tcp lip package
lip package includes
includes the simple
simple network-management protocol
dynamic host-configuration protocol
internet name service
22.6.2.5 point-to-point tunneling
point-to-point tunneling protocol
communicate remote-access server
remote-access server modules
server modules running
running on windows
internet the remote-access
servers can encrypt
22.6.2.6 novell netware
novell netware protocols
protocols then ovell
ovell n etware
ipx datagram service
spx transport layer
lans the windows
windows xp nwlink
nwlink protocol connects
connects the netbios
netbios to netware
networks in combination
microsoft s client
service for netware
netware or novell
novell s netware
client for windows
enables a windows
windows xp client
client to connect
22.6.2.7 web-distributed authoring
authoring and versioning
versioning protocol web-distributed
protocol web-distributed authoring
protocol for collaborative
windows xp builds
builds a webdav
file system building
building this support
file system enables
system enables webdav
webdav to work
encryption personal files
22.6.2.8 appletalk protocol
ocoi was designed
connection by apple
computers to share
share files windows
windows xp systems
systems can share
files and printers
printers with macintosh
computers via apple
network is running
running the windows
services for macintosh
22.6.3 distributed-processing mechanisms
mechanisms although windows
distributed operating system
support distributed applications
distributed applications mechanisms
mechanisms that support
support distributed processing
processing on windows
windows xp include
pipes and mailslots
microsoft interface definition
interface definition language
netbios in windows
applications can communicate
network using netbeui
22.6.3.2 named pipes
connection-oriented messaging mechanism
messaging mechanism named
mechanism named pipes
interface to netbios
network a process
pipes to communicate
machine since na1ned
pipes are accessed
apply to named
format of pipe
typical remote file
file name format
server_name \ share_name
identifies a server
network ; share_name
identifies any resource
normal file path
connectionless messaging mechanism
unreliable when accessed
intended recipient receives
receives it mailslots
windows computer browser
computer browser service
windows xp sockets
sockets api winsock
compatible with unix
windows xp extensions
winsock-compliant protocol stack
22.6.3.5 remote procedure
calls a remote
remote procedure call
mechanism that enables
ake a procedure
call to code
machine the client
calls a local
local procedure-a stub
procedure-a stub routine-which
stub routine-which packs
packs its arguments
message and sends
process the client-side
client-side stub routine
routine then blocks
unpacks the message
calls the procedure
packs the return
stub the client
client stub unblocks
unpacks the results
rpc and returns
caller this packing
packing of argunlents
windows xp rpc
widely computing-environment standard
standard for rpc
windows xp rpcs
portable the rpc
standard is detailed
detailed it hides
differences among computers
sizes of binary
order of bytes
bytes and bits
bits in computer
standard data formats
formats for rpc
send rpc messages
messages using netbios
winsock on tcp
pipes on lan
lan manager networks
networks the lpc
similar to rpc
case of lpc
lpc the messages
messages are passed
two processes running
22.6.3.6 microsoft interface
tedious and error-prone
error-prone to write
write the code
code to marshal
marshal and transmit
unmarshal and execute
execute the remote
marshal and send
send the return
unmarshal and return
describe the remote
remote procedure names
results the compiler
language generates header
generates header files
files that declare
declare the stubs
arguments and return-value
generates source code
unmarshaller and dispatcher
application is linked
routines are included
executes the rpc
generated code handles
handles the rest
22.6.3.7 component object
model the jbjecj
mechanism for interprocess
communication was developed
developed for windows
windows com objects
provide a well-defined
interface to manipulate
manipulate the data
object for instance
microsoft s technology
technology for inserting
spreadsheets into microsoft
network utilizing rpc
rpc to provide
provide a transparent
method of developing
developing distributed applications
redirectors and servers
servers in windows
api to access
computer is running
running a cifs
provided by windows
earlier windows systems
object that forwards
forwards i requests
requests to remote
server for performance
performance and security
remote file occurs
manager to request
file be opened
standard unc format
i manager builds
i request packet
file and calls
calls a driver
mup to avoid
cache to remember
remember which redirector
redirector can handle
handle this file
sends the network
remote-system network drivers
network drivers receive
receive the request
request and pass
server driver hands
hands the request
proper local file-system
local file-system driver
proper device driver
results are returned
sends the data
redirector the redirector
redirector then returns
returns the data
similar process occurs
occurs for applications
win32 api network
api network api
api for network
transport the requests
smb protocol mentioned
mentioned in section
22.6.2 the list
list of redirectors
redirectors is maintained
system registry database
22.6.4.1 distributed file
file system unc
system unc names
multiple file servers
names explicitly include
supports a protocol
administrator to serve
serve up files
files multiple servers
distributed name space
22.6.4.2 folder redirection
redirection and client-side
caching to improve
experience for business
switch among computers
administrators to give
users  preferences
settings on servers
store a user
user s documents
takes a laptop
airplane to give
give users off-line
users off-line access
computer is online
performance the files
files are pushed
computer becomes disconnected
server is deferred
tinle the computer
domains many networked
environments have natural
groups of users
laboratory at school
school or employees
access shared resources
group to manage
manage the global
global access rights
maps internet host
internet host names
windows xp domain
group of windows
windows xp workstations
workstations and servers
servers that share
share a common
common security policy
policy and user
database since windows
protocol for trust
trust and authentication
kerberos realm previous
realm previous versions
idea of primary
primary and backup
backup domain controllers
controllers in addition
previous versions required
required the setup
setup of one-way
trusts between domains
hierarchical approach based
based on dns
hierarchy this approach
reduces the number
number of trusts
trust the domain
controller to give
give correct information
user s access
retain the ability
ability to restrict
22.6.5.1 domain trees
trees and forests
manage multiple domains
contiguous dns naming
dns naming hierarchy
hierarchy for managing
managing multiple domains
research.bell-labs.com and pez.bell-labs.com
pez.bell-labs.com as children-domains
research and pez
set of noncontiguous
trees bell-labs.conz andlucent.com
andlucent.com a forest
22.6.5.2 trust relationships
trust relationships trust
relationships trust relationships
allowed only one-way
relationship is configured
band b trusts
trusts are two-way
two-way by default
default transitive trusts
trusts are enabled
enabled by default
authentication traffic suppose
suppose that domains
standard transitive trust
requests must traverse
two leaf nodes
trust the authentications
22.6.6 active directory
directory ,.,.,cu i.n
implementation of services
services active directory
active directory stores
stores the topology
accounts and passwords
store for technologies
administrators use group
policies to establish
establish uniform standards
standards for desktop
preferences and software
corporate information-technology groups
uniformity drastically reduces
reduces the cost
cost of computing
conjunction with group
class of user
22.6.7 name resolution
process of converting
converting a computer
including windows internet
describe only wins
wins servers maintain
maintain a dynamic
database of name-to-if
name-to-if address bindings
software to query
query the servers
service can survive
survive a server
spread over multiple
dhcp updates address
updates address configurations
dhcp client starts
broadcasts a discover
message each dhcp
server that receives
address and configuration
client the client
configurations and sends
selected dhcp server
server the dhcp
dhcp server responds
information it gave
address the lease
client the right
attempts to renew
renew the lease
client must obtain
describes five main
access to kernel
sharing of objects
objects between processes
sa.lpsecuritydescriptor = null
null ; sa.binherithandle
sa.binherithandle = true
true ; handle
a_semaphore = createsemaphore
ostring a_semaphore ends
ends ; createprocess
enabling a child
child to share
share an object
object by inheriting
services that application
application programs obtain
obtain these services
services by manipulating
manipulating kernel objects
objects a process
process gains access
kernel object named
object named xxx
xxx by calling
calling the createxxx
function to open
open a handle
handle to xxx
xxx this handle
handle is unique
return a special
special constant named
constant named invalid.j1andllvalue
invalid.j1andllvalue a process
process can close
close any handle
handle by calling
calling the closehandle
system may delete
delete the object
count of processes
22.7.2 sharing objects
ways to share
processes the first
inherit a handle
calls the createxxx
supplies a securities__attributes
blnheri thandle field
thandle field set
set to true
true this field
creates an inheritable
passing a value
value of true
function s binheri
binheri thandle argument
thandle argument figure
shows a code
sample that creates
creates a semaphore
semaphore handle inherited
assuming the child
handles are shared
child can achieve
achieve interprocess communication
first command-line argument
shares the semaphore
process to give
give the object
process to open
space is global
type for instance
applications 1nay create
create an object
object named pipe
distinct-and possibly differentobjects
differentobjects are desired
advantage that unrelated
first process calls
functions and supplies
handle to share
process a handle
handle a_semaphore createsemaphore
process b handle
handle b_semaphore opensemaphore
code for sharing
sharing an object
object by calling
method of interprocess
communication to pass
pass the duplicated
method is shown
22.7.3 process management
management in windows
unit of code
threads a process
calls the createprocess
routine this routine
loads any dynamic
dynamic link libraries
process and creates
creates a additional
process b access
semaphore ii process
send the value
semaphore to process
message or shared
shared memory object
object ii process
process_a = openprocess
b_semaphore ; duplicatehandle
b_semaphore to access
access the semaphore
object by passing
passing a handle
argument to create
functions maintain state
state in static
guard against unsynchronized
access the wrapper
wrapper function beginthreadex
22.7.3.1 instance handles
handles every dynamic
library or executable
executable file loaded
process is identified
file is loaded
loaded an application
space by passing
module to getmodulehandle
null is passed
process is returned
returned the lowest
de-reference a null
environment are based
windows xp scheduling
chosen win32 api
four priority classes
real time_priority _class
exe would run
run the cbserver
realtime_ pridrity _class
_class only users
increase scheduling priority
scheduling priority privilege
privilege can move
move a process
administrators and power
privilege by default
22.7.3.2 scheduling rule
user is running
running an interactive
provide especially good
special scheduling rule
rule for processes
normalpriority _class windows
windows xp distinguishes
windows xp increases
increases the scheduling
process three times
longer to run
time-sharing preemption occurs
22.7.3.3 thread priorities
priorities a thread
initial priority determined
class the priority
function this function
takes an argument
argument that specifies
specifies a priority
two other designations
adjust the priority
recall from section
two priority classes
variable-priority class thread_priority
class thread_priority _idle
thread_priority _idle sets
sets the priority
adjusts the priority
thread dynamically depending
bound or cpu
bound the win32
method to disable
disable this adjustment
adjustment via setprocesspriori
22.7.3.4 thread synchronization
synchronization a thread
makes it eligible
function the suspend
opposite these functions
set a counter
thread is suspended
synchronize the concurrent
objects by threads
kernel provides synchronization
semaphores and mutexes
synchronization of threads
functions another method
method of synchronization
section a critical
region of code
establishes a critical
section by calling
calling ini tializecri
ini tializecri ticalsection
application must call
call entercri ticalsection
entering the critical
section and leavecri
two routines guarantee
multiple threads attempt
attempt to enter
permitted to proceed
routine the critical-section
mechanism is faster
allocate kernel objects
first encounters contention
user-defined scheduling algorithm
algorithm a process
threads a major
difference between threads
threads and fibers
threads can execute
tin1e is permitted
permitted to execute
hardware this mechanism
mechanism is included
included in windows
facilitate the porting
legacy unix applications
model the system
creates a fiber
fiber by calling
calling either convertthreadtofi
executing the fiber
created to begin
call swi tchtofiber
application can terminate
terminate a fiber
22.7.3.6 thread pool
thread pool repeated
pool repeated creation
deletion of threads
expensive for applications
applications and services
services that perform
perform small amounts
amounts of work
instantiation the thread
pool provides user-mode
callbacks to waitable
registerwai tforsingleobj ect
apis to bind
callbacks to timeouts
pool s goal
increase performance threads
executing one thing
thread pool attempts
attempts to reduce
number of outstanding
slightly delaying work
delaying work requests
reusing each thread
providing enough threads
utilize the machine
machine s cpus
cpus the wait
wait and timer-callback
devote one thread
thread to servicing
servicing each waitable
22.7.4 lnterprocess communication
lnterprocess communication win32
communication win32 api
api applications handle
applications handle interprocess
handle interprocess communication
sharing kernel objects
popular for windows
windows gui applications
applications one thread
thread can send
window by calling
.posting a message
message and sending
routines are asynchronous
routines are synchronous
block the caller
delivered and processed
addition to sending
processes have separate
separate address spaces
copied the system
system copies data
data by calling
message of type
copydatastruct data structure
length and address
windows xp copies
copies the data
block of memory
win32 api thread
input is received
address space void
space void buf
buf = virtualalloc
mem_reserve i mem_top_down
commit the upper
allocated space virtualalloc
buf + ox800000
decommit the memory
allocated address space
address space virtualfree
fragments for allocating
allocating virtual memory
shared input queue
application to block
marks the application
22.7.5 memory management
management the win32
22.7.5.1 virtual memory
memory an application
application calls virtualalloc
reserve or commit
memory and virtualfree
decommit or release
release the memory
memory these functions
enable the application
memory is allocated
operate on multiples
memory page size
greater than ox10000
process may lock
pages into physical
memory by calling
number of pages
pages a process
process can lock
process first calls
first calls setprocessworkingsetsize
increase the maximum
maximum working-set size
22.7.5.2 memory-mapping files
memory-mapping a file
address space memory
space memory mapping
processes to share
virtual memory memory
memory memory mapping
map some address
share a memory
file is needed
needed the process
process calls createfilemapping
handle of oxffffffff
size the resulting
resulting file-mapping object
shared by inheritance
file or create
exist handle hfile
hfile = createfile
generic_read i generic_write
file_share_read i file_share_write
create the file
8mb in size
size handle hmap
hmap = createfilemapping
space mapped void
mapped void buf
buf = mapviewoffile
unmap the file
fragments for memory
heaps heaps provide
memory a heap
region of reserved
win32 api process
process is initialized
win32 api functions
heap is synchronized
synchronized to protect
protect the heap
heap s space-allocation
space-allocation data structures
damaged by concurrent
updates by multiple
process can allocate
allocate and manage
manage a private
heap these functions
functions are heapcreate
functions to enable
enable a thread
thread to gain
gain exclusive access
perform only synchronization
22.7.5.4 thread-local storage
storage the fourth
thread-local storage mechanism
storage mechanism functions
rely on global
global or static
data typically fail
fail to work
environment for instance
runtime function strtok
position while parsing
parsing a string
two concurrent threads
threads to execute
separate current position
current position variables
variables the thread-local
storage mechanism allocates
mechanism allocates global
allocates global storage
dynamic and static
methods of creating
creating thread-local storage
storage the dynamic
method is illustrated
thread-local static variable
declares the variable
reserve a slot
variable dword var_index
var_index = t1salloc
value int var
int var t1sgetvalue
release the index
code for dynamic
dynamic thread-local storage
microsoft design.ed windows
operating system -one
techniques and hardware
supports multiple operating
multiple operating environments
environments and symmetric
including both 32-bit
processors and numa
objects to provide
provide basic services
support for client-server
support a wide
variety of application
run programs compiled
compiled for ms-dos
preemptive scheduling windows
supports a security
security model stronger
previous microsoft operating
microsoft operating systems
systems and includes
includes internationalization features
internationalization features windows
windows xp nms
variety of computers
choose cu1.d upgrade
cu1.d upgrade hardware
hardware to match
match their budgets
budgets and performance
requirements without needing
needing to alter
alter the applications
applications they run
describe the booting
managed in windows
no-access page facility
page facility provided
provided in windows
procedure calls facility
facility in windows
main architectural layers
layers of windows
environment what limitations
limitations are imposed
programs executing inside
inside this environment
protection guarantees provided
applications executing inside
inside the win16
application executing inside
fiber abstraction provided
describe two user-mode
two user-mode processes
processes that enable
run programs developed
describe the management
manager improve performance
call what settings
ntfs handle data
handle data structures
recovery takes place
processes that windows
processors contain registers
address a 64-bit
64-bit address space
limits the address
space of user
ntfs directory structure
directory structure differ
unix operating systems
obtain a handle
solomon and russinovich
give an overview
overview of windows
considerable technical detail
detail about system
internals and components
server resource kit
six-volume set helpful
microsoft developer network
developer network library
supplies a wealth
wealth of information
information on windows
windows xp active
active directory richter
discussion on writing
win32 api silberschatz
understand the fundamental
concepts of operating
position to examine
highlights the similarities
chronological or ordered
ordered by importance
describe early systems
style and flavor
explain how operating-system
operating-system features migrate
large computer systems
systems to smaller
historically important operating
important operating systems
reason to study
study early architectures
architectures and operating
eventually have made
i11.to very small
examination of operating
systems for mainframes
mainframes and microcomputers
adopted for microcomputers
classes of computers
handhelds to understand
understand modern operating
recognize the theme
theme of feature
feature migration started
information and computing
operating system multics
multics was developed
institute of technology
migration of operating-system
concepts and features
complex mainframe computer
developed for multics
development of multics
design of unix
unix the unix
system was designed
basis for unix-like
systems on microcomputers
features are included
recent operatirlg systems
systems for microcomputers
mac osx operating
osx operating system
operating system linux
system linux includes
found on pdas
overview of early
early computer systems
history of computing
computers with looms
looms and calculators
described in frah
graphically in frauenfelder
begin our discussion
devices were designed
designed and implemented
implemented to perform
fixed tasks modifying
required a great
deal of effort
effort and manual
1940s when alan
turing and john
john von neumann
store provides instructions
fundamental computer concept
concept quickly generated
generated a number
number of general-purpose
machines is blurred
development during world
first working stored-program
working stored-program general-purpose
stored-program general-purpose computer
first commercial computer
early computing efforts
efforts are described
described by rojas
rojas and hashagen
physically enormous machines
enormous machines run
run from consoles
write a program
operate the program
operator s console
manually into memory
front panel switches
pushed to set
set the starting
start the execution
programmer i operator
operator could monitor
monitor its execution
console if errors
errors were discovered
programmer could halt
halt the program
examine the contents
contents of memory
memory and registers
debug the program
output was printed
punched onto paper
tape or cards
23.2.1 dedicated computer
dedicated computer systems
software and hardware
hardware were developed
developed card readers
tape became commonplace
linkers were designed
designed to ease
ease the programming
programming task libraries
libraries of common
functions were created
created common functions
providing software reusability
routines that performed
requiring careful programming
programming a special
subroutine-called a device
device driver-was written
device a device
type of device
reading a character
involve complex sequences
sequences of device-specific
compilers for fortran
making the programming
task much easier
computer more complex
complex to prepare
prepare a fortran
program for execution
load the fortran
computer the compiler
drive the program
reader and written
tape the fortran
fortran compiler produced
compiler produced assembly-language
produced assembly-language output
assembled this procedure
procedure required mounting
mounting another tape
assembler the output
linked to supporting
supporting library routines
binary object form
ready to execute
memory and debugged
job each job
loading the fortran
fortran compiler tape
compiler tape running
running the compiler
unloading the compiler
compiler tape loading
loading the assembler
assembler tape running
running the assembler
unloading the assembler
assembler tape loading
loading the object
object program running
running the object
beginning each job
step might involve
involve the loading
loading and unloading
unloading of magnetic
problem while tapes
programmer was operating
operating the console
cpu sat idle
sat idle remember
expensive a computer
millions of dollars
including the operational
costs of power
wanted their computers
23.2.2 shared computer
shared computer systems
systems the solution
solution was twofold
professional computer operator
operator was hired
programmer no longer
operated the machine
job was finished
operator could start
experience with mounting
provided whatever cards
cards or tapes
tapes were needed
debug an incorrect
understand the program
case of program
dump of memory
dumping the memory
allowed the operator
operator to continue
job but left
left the programmer
difficult debugging problem
jobs with similar
group to reduce
suppose the operator
received one fortran
load the compiler
two fortran programs
observing the console
normal or abnormal
memory and register
restart the computer
overcome this idle
first rudimentary operating
rudimentary operating systems
created to transfer
computer was turned
monitor was invoked
program to execute
data were introduced
introduced to provide
provide this information
monitor the idea
idea is simple
simple in addition
program or data
included the control
resident monitor indicating
indicating what program
normal user program
program might require
programs to run
user s program
separate control card
ftn-execute the fortran
asm-execute the assembler
run-execute the user
monitor which program
tvw additional control
additional control cards
cards to define
define the boundaries
job $ end-final
defirte the job
operator to load
load or unload
unload a tape
problem with conh
conh ol cards
data or program
cards the usual
character or pattern
card several systems
identify a control
ibm s job
job control language
first two columns
two columns figure
shows a sample
sample card-deck setup
simple batch system
responsible for reading
reading and carrying
out the insh
point of execution
interpreter to load
load system programs
system programs an.d
programs an.d application
an.d application programs
memory at intervals
programs are linked
saving memory space
space and programming
batch systems work
monitor provides automatic
automatic job sequencing
loads the program
program into memory
memory and transfers
cycle is repeated
cards are interpreted
monitor automatically continues
switch to batch
systems with automatic
sequencing was made
made to improve
performance the problem
desirable to replace
replace human operation
operation with operating-system
operating-system software automatic
software automatic job
job sequencing elim.inates
idle the problem
mechanical i devices
slower than electronic
slow cpu works
thousands of instructions
fast card reader
read 1,200 cards
cards per minute
difference in speed
orders of magnitude
improvements in technology
resulted in faster
faster i devices
cpu speeds increased
increased even faster
replace slow card
slow card readers
1960s were batch
batch systems reading
reading from card
readers and writing
writing to line
printers or card
punches the cpu
card was needed
needed for input
record was read
output was written
tape were pri
readers and lilce
printers were operated
advantage of off-line
readers and line
faster magnetic tape
magnetic tape units
card reader line
reader line printer
card reader tape
reader tape drives
tape drives tape
drives tape drives
tape drives iine
drives iine printer
iine printer figure
online and off-line
gain in off-line
reader-to-tape and tape-to-printer
cpu can process
reader can read
two readers working
simultaneously can produce
produce enough tape
however-a longer delay
first be read
read onto tape
jobs are read
tape to fill
free tape drive
drive this process
unreasonable for batch
preparation of jobs
systems disk systems
improved on off-line
operation the problem
problem with tape
rewound and read
nature devices disk
devices disk systems
disk systems eliminated
eliminated this problem
head is moved
reader to store
store new cards
cpu to read
cards are read
disk the location
location of card
images is recorded
job is executed
operating system satisfies
satisfies its requests
requests for card-reader
input by reading
requests the printer
printer to output
output a line
line is copied
job is cmttpleted
printed this form
form of processing
acronym for simultaneous
simultaneous peripheral operation
peripheral operation on-line
operation on-line spooling
buffer for reading
storing output files
disk line printer
line printer figure
data at remote
sites the cpu
data via communication
accepts an entire
entire input job
remote card reader
processing is done
intervention the cpu
processing is completed
batch of data
reading the input
job while printing
printing the output
reading its cards
cards from disk
disk and printing
printing its output
direct beneficial effect
i devices working
higher rates spooling
rates spooling leads
naturally to multiprogramming
atlas operating system
university of manchester
manchester in england
parts of modern
operating systems device
systems device drivers
calls were added
set of special
instructions called extra
batch operating system
system with spooling
spooling spooling allowed
allowed the system
system to schedule
availability of peripheral
paper tape readers
paper tape punches
feature of atlas
drum for primary
memory the atlas
amount of core
drum demand paging
information between core
computer with 48-bit
48-bit words addresses
encoded in decimal
extremely large address
large address space
space the physical
memory for atlas
words of core
memory was divided
divided into 512-word
frames in physical
memory an associative
implemented the mapping
page fault occurred
invoked one memory
transfer could start
immediately the page-replacement
page-replacement algorithm attempted
attempted to predict
predict future memory-accessing
future memory-accessing behavior
memory-accessing behavior based
based on past
behavior a reference
frame was set
frame was accessed
accessed the reference
bits were read
retained this history
last two references
pages were chosen
chosen for replacement
page is considered
replace the page
page-replacement algorithm assumes
assumes that programs
programs access memory
memory in loops
reference is expected
page is replaced
xds-940 operating system
lichtenberger and pirtle
university of california
california at berkeley
paging for memory
unlike the atlas
process was made
memory was made
words each page
page was made
words the page
registers since physical
memory was larger
larger than virtual
number of users
increased by sharing
sharing of pages
contained read-only reentrant
read-only reentrant code
reentrant code processes
system was constructed
xds-930 the modifications
modifications were typical
properly a user-monitor
ltlode was added
i and halt
privileged an attempt
attempt to execute
execute a privileged
instruction in user
mode would trap
instruction was added
user-mode instruction set
create new resources
allowing the operating
manage the physical
physical resources files
allocated in 256-word
drum a bit
manage free drum
free drum blocks
blocks each file
block with pointers
actual data blocks
data blocks index
blocks index blocks
blocks were chained
system also provided
provided system calls
processes to create
subprocesses a programmer
programmer could construct
construct a system
system of processes
processes separate processes
processes could share
memory for communication
communication and synchronization
synchronization process creation
process creation defined
defined a tree
subprocesses are nodes
create more subprocesses
mckeag and wilson
batch system running
words the system
set of concurrent
concurrent processes employing
processes employing semaphores
semaphores for synchronization
system was static
static the operating
set of cooperating
processes in addition
processes were created
created that served
agents to compile
print user programs
process would return
queue to select
select another job
priority cpu-scheduling algorithm
priorities were recomputed
scheme gave higher
gave higher priority
management was limited
lack of hardware
system was limited
limited and user
software paging scheme
compiler automatically generated
automatically generated calls
calls to system
drum a 512-word
lru page-replacement strategy
system was deadlock
control the banker
provide deadlock avoidance
semaphores to synchronize
processes the lower
design were implemented
implemented in microcode
howeve1 ~ providing
system the memory
management was changed
changed to paged-segmented
computer by regnecentralen
design a batch
specific system rathel
create an operating-system
complete operating system
structure was layered
levels-comprising the kernel-were
supported a collection
collection of concurrent
processes a round-robin
round-robin cpu scheduler
processes could communicate
exchanging fixed-sized rnessages
words in length
length all messages
stored in buffers
common buffer pool
process it contained
messages were removed
queue in fifo
order the system
supported four primitive
four primitive operations
last two operations
two operations allowed
operations allowed processes
processes to exchange
exchange several messages
service its message
processes were handling
handling its messages
messages to remove
remove these restrictions
provided two additional
two additional communication
additional communication primitives
primitives that allowed
allowed a process
process to wait
answer and service
service its queue
treated as processes
processes the device
drivers were code
code that converted
converted the device
interrupts and registers
registers into messages
process would write
terminal by sending
sending that terminal
terminal a message
message the device
driver would receive
receive the message
message and output
output the character
terminal an input
character would interrupt
interrupt the system
system and transfer
driver would create
create a message
character and send
compatible time-sharing system
designed at mit
experimental time-sharing system
users the users
users were provided
set of interactive
commands that allowed
32-kb memory made
words the monitor
users user memory
user memory images
images were swapped
swapped between memory
fast drum cpu
drum cpu scheduling
cpu scheduling employed
employed a multilevelfeedback
multilevelfeedback queue algorithm
quantum for level
finish its cpu
first the initial
program was determined
succeeded in demonstrating
convenient and practical
mode of computing
computing one result
result of ctss
ctss was increased
development of time-sharing
systems another result
multics operating system
corbato and vyssotsky
extension of ctss
early tin e-sharing
tin e-sharing systems
desire to proceed
quickly to bigger
systems as larger
designers of ctss
out to create
create a time-sharing
provided like electrical
electrical power large
power large computer
connected by telephone
wires to terminals
terminals in offices
offices and homes
city the operating
time-shared system running
vast file system
system of shared
programs and data
multics was designed
team from mit
sold its computer
department to honeywell
computer was modified
addition of pagedsegmentation
pagedsegmentation memory hardware
address was composed
18-bit segment number
16-bit word offset
offset the segments
paged in 1-kb-word
second-chance page-replacement algorithm
segmented virtual address
space was merged
segments were addressed
file the file
multilevel tree structure
users to create
multilevel feedback queue
queue for cpu
protection was accomplished
set of protection
rings for executing
processes the system
lines of code
allowing a cpu
out of service
service for maintenance
system continued running
line of operating-system
computers the early
early ibm computers
development of common
common l subroutines
simple batch processing
processing these systems
systems were developed
ibm was faced
designed to alter
alter this situation
ibm was designed
family of computers
spanning the complete
range from small
small business machines
machines to large
large scientific machines
set of software
arrangement was intended
intended to reduce
reduce maintenance problems
problems for ibm
users to move
programs and applications
file system included
included a type
field that defined
defined the type
types were defined
defined for fixed-length
fixed-length and variable-length
blocked and unblocked
guess the size
file the job
making it incomprehensible
routines were hampered
base-register addressing mode
program could access
access and modify
modify the base
addresses were generated
cpu this arrangement
arrangement prevented dynamic
prevented dynamic relocation
program was bound
bound to physical
memory at load
two separate versions
system were produced
language by thousands
thousands of programmers
resulting in millions
code the operating
system itself required
required large amounts
code and tables
tables operating-system overhead
overhead often consumed
total cpu cycles
versions were released
released to add
add new features
fixing one error
error often caused
remained fairly constant
memory was added
architecture the underlying
underlying hardware provided
provided a segmented-paged
segmented-paged virtual memory
memory new versions
ways os created
created one large
large virtual address
space and ran
ran os lie
lie that virtual
programs os release
provided each user
basically a batch
system the ctss
system was run
developers at mit
ibm s successor
small for multics
switched vendors ibm
ibm then decided
decided to create
lett and konigsford
tss was supposed
utility the basic
architecture was modified
provide virtual memory
memory several sites
tss was delayed
developed as temporary
ibm s cambridge
cambridge scientific center
scientific center developed
center developed cms
provide a virtual
machine to run
meyer and seawright
site would switch
sharing on ibm
tso under mvs
tss nor multics
multics achieved commercial
achieved commercial success
purposes minicomputers died
replaced by general
general and special-purpose
servers although personal
personal computers continue
continue to increase
increase in capacity
capacity and performance
tend to stay
number and speed
servers typically run
run in data
centers or machine
personal computers sit
desks and talk
network the desktop
rivalry between apple
apple and microsoft
microsoft continues today
windows and mac
usability and application
functionality other operating
two leading desktop
leading desktop operating
continues to gain
gain in popularity
technical users -and
users on systems
children s connected
connected computer network
freiberger and swaine
operating system traces
traces its ancestry
accent operating system
operating system developedatcarnegiemellon
system developedatcarnegiemellon university
rashid and robertson
mach s communication
system and philosophy
philosophy are derived
derived from accent
system and task
task and thread
1989l and accetta
scheduler was described
described in detail
detail by tevanian
shared-memory and memory-mapping
system was presented
presented by tevanian
goals in mind
system can run
correctly under mach
supports many memory
parallel and distributed
simpler and easier
easier to modify
mach s development
path from bsd
bsd unix systems
initially developed inside
inside the 4.2bsd
kernet with bsd
bsd kernel components
kernel components replaced
replaced by mach
components were completed
completed the bsd
components were updated
memory and communication
subsystems were running
dec vax computer
vax computer family
including multiprocessor versions
workstations followed shortly
multimax and sequent
sequent balance multiprocessor
balance multiprocessor versions
first official releases
mach provided compatibility
systems by including
features and capabilities
capabilities of mach
made the kernels
bsd kernels mach
moved the bsd
microkernel this system
implements only basic
basic mach features
evicted to run
run in user-mode
user-mode servers excluding
servers excluding unix-specific
excluding unix-specific code
rom the kernel
replacement of bsd
execution of multiple
multiple operating-system interfaces
interfaces on top
microkernel in addition
addition to bsd
developed for dos
macintosh operating system
osf this approach
approach has similarities
virtual machine concept
machine is defined
defined by software
mach kernel interface
hardware with release
variety of systems
including single processor
single processor sun
machines and multiprocessor
mach was propelled
forefront of industry
brainchild of steve
apple computer fame
release of osf
occurred a year
system of choice
members osf members
osf members i.j.l.cluded
members i.j.l.cluded key
i.j.l.cluded key technological
key technological companies
changed its direction
developed without regard
regard for multiprocessing
mach incorporates multiprocessing
incorporates multiprocessing support
ranging rom shared-memory
rom shared-memory systems
systems to systems
shared between processors
mach uses lightweight
form of multiple
threads of execution
multiprocessing and parallel
computation its extensive
communication method ensures
ensures that protection
mechanisms are complete
complete and efficient
efficient by integrating
mach also ensures
ensures that messages
system use messages
messages to communicate
managing the backing
mach provides great
tasks by providing
buik mach reduces
reduces the size
kernel while permitting
permitting operating-system emulation
ibm s virtual-machine
editions of operating
operating system concepts
system concepts included
included an entire
chapter on mach
mach this chapter
properties the mcp
mcp operating system
language it supported
segmentation and multiple
cpus the scope
scope operating system
system the coordination
coordination and synchronization
surprisingly well designed
history is littered
littered with operating
systems that suited
suited a purpose
replaced by operating
supported newer hardware
trend will continue
page replacement algorithm
clock algorithm discussed
ctss and multics
suppose a program
operation and blocks
units are allocated
scheduled for execution
minimize the discrepancy
discrepancy between cpu
speeds on early
evolution of operating
systems to gain
maintain validity
validity information
information maintained
break callbacks
notifying clients
cached files
callback state
state maintained
caches contents
syncbolic links
pathname translation
fetched directories
path-name traversal
intermediate directories
target file
future open
open calls
network communication
caching policy
vice interface
well-defined operations
venus reflects
cached copy
implementation client
client processes
unix kernel
usual set
system calls
detect references
vice files
relevant operations
client-level venus
venus process
venus carries
path-name translation
translation component
mapping cache
server locations
avoid server
server interrogation
volume location
venus contacts
location information
directory connection
connection establishment
security purposes
local disk
disk venus
client process
unix file
file system
low-level storage
storage system
afs servers
client cache
local directory
server processes
processes access
access unix
unix files
expensive path-name-to-inode
path-name-to-inode translation
translation routine
internal inode
inode interface
client-level processes
additional system
added dfs
journaling file
improve performance
venus manages
separate caches
simple least-recently-used
venus notifies
status cache
virtual memory
rapid servicing
data cache
buffering mechanism
disk blocks
single client-level
client-level process
file server
server services
file req1.1ests
lightweight-process package
non-preemptible scheduling
client requests
requests concurrently
rpc package
lightweight process
low-level datagram
datagram abstraction
whole-file transfer
side effect
rpc calls
rpc connection
connection exists
priori binding
lightweight processes
processes services
services client
multithreaded server
server process
data structures
structures needed
service requests
negative side
single server
disastrous effect
file-service system
storage devices
distributed system
service activity
centralized data
data repository
multiple independent
independent storage
centralized file
made transparent
client interface
remote files
transparent dfs
dfs facilitates
facilitates client
client mobility
client logs
naming schemes
simplest approach
unique system-wide
attach remote
remote directories
local directories
coherent directory
directory tree
remote file
complementary methods
remote service
server machine
machine performs
data needed
access request
client accesses
accessed disk
repeated accesses
additional network
network traffic
replacement policy
cache size
size bounded
cached copies
copies consistent
master file
cache-consistency problem
server-side information
server tracks
stateful versus
versus stateless
stateless service
service paradigms
improving availability
availability multimachine
multimachine replication
benefit performance
nearby replica
request results
shorter service
feature-rich dfs
dfs characterized
location independence
location transparency
significant consistency
consistency semantics
semantics caching
nfs provide
obtain inconsistent
stale data
distributed file
server crash
consistency guaranteed
client ships
entire path
server requesting
client prefer
locationtransparent dfs
location-independent dfs
dfs discuss
dfss discussed
multiclient database
database application
mapping objects
apollo domain
caching disk
client system
system running
reliable network
recovery control
replicated files
unix environncent
file placement
distributed computer
computer systems
detailed survey
file servers
servers appears
network file
afs system
interesting dfss
including unix
unix united
locus unix
locus system
sprite system
file systems
mobile storage
considerable research
distributed storage
storage systems
wide-area settings
operating system
deadlock problem
centralized synchronization
synchronization mechanisms
distributed environment
discuss methods
handling deadlocks
mutual exclusion
atomic transactions
concurrency-control schemes
schemes discussed
present schemes
handling deadlock
deadlock prevention
deadlock avoidance
deadlock detection
centralized system
events occurred
single common
common memory
determine order
resource-allocation scheme
common clock
occurred first
happened-before relation
partial ordering
distributed systems
total ordering
distributed algorithm
consistent total
sequential processes
events executed
single process
totally ordered
happenedbefore relation
message constitutes
bare events
band b
irreflexive partial
affect event
space-time diagram
horizontal direction
direction represents
represents space
vertical direction
vertical lines
lines denote
denote processes
labeled dots
dots denote
denote events
wavy line
line denotes
path exists
events related
concurrent events
happened first
concurrent processes
events agree
son1.e order
synchronized clocks
physical clocks
system event
global ordering
ordering requirement
logical lci
logical clock
simple counter
counter incremented
successive events
increasing value
unique number
event bin
bin process
scheme ensures
global orderil
clock ticks
situation violates
current value
timestamp-ordering scheme
process identity
identity numbers
break ties
system consists
one-to-one mapping
mapping exists
centralized approach
critical section
exclusion sends
request message
process receives
reply message
process sends
release message
coordinator checks
coordinator receives
request messages
scheduling algorithm
requesting process
algorithm ensures
scheduling policy
scheme requires
critical-section entry
coordinator process
process fails
request queue
distributed approach
decision making
entire system
algorithm based
event-ordering scheme
scheme described
message request
queueing incmning
incmning requests
reply messages
deferred requests
request timestamp
incoming request
request made
algorithm exhibits
desirable behavior
timestamp ordering
ordering ensures
fcfs order
number represents
minimum number
required messages
processes act
algorithm functions
system consisting
critical sections
sections process
logical clocks
clocks described
replies immediately
receiving replies
undesirable consequences
process joins
processes participating
mutual-exclusion algorithm
interested reader
bibliographical notes
entire scheme
scheme collapses
longer send
send request
failed process
process recovers
stable sets
cooperating processes
token-passing approach
processes ilc
special type
process possession
token entitles
single token
organized ilc
physical communication
communication network
logical ring
process exits
process receiving
messages required
high contention
infinite number
low contention
election algorithm
atomic transaction
program unit
difficulty occurs
single transaction
communication link
link connecting
erroneous computations
system preserves
preserves atomicity
local transaction
transaction coordinator
transactions initiated
transaction breaking
execution coordinating
local site
site maintains
recovery purposes
two-phase commit
commit protocol
final outcome
commit protocols
transaction initiated
executed inform
record prepare
stable storage
transaction manager
sites determines
portion oft
record ready
log records
received responses
pre-specified interval
aborted transaction
participating sites
aborted depending
record commit
record abort
coordinator sends
site receives
message ready
commit tor
needed information
site crashes
site responds
coordinator site
final verdict
coordinator writes
site sends
record complete
failure handling
major disadvantage
coordinator failure
coordinator recovers
participating site
failure occurred
occurred suppose
site executes
executes redo
executes undo
fate oft
corrnni tted
control records
records implies
s1c failed
s1c means
execute undo
coordinator fails
failed coordinator
active site
abort tin
preceding cases
cases holds
active sites
additional control
decision is-until
oft remains
hold system
system resources
hold locks
unavailable data
data increases
blocking problem
link fails
destinations intact
sites connected
previous schemes
links fail
possibilities exist
link failure
concurrency control
distributed database
database system
system manages
access data
data stored
global transaction
concurrency-control scheme
concurrent execution
transactions executing
concurrency schemes
locking protocols
two-phase locking
protocols described
change needed
lock manager
first deals
data replication
general case
nonreplicated scheme
locking schemes
local lock
unlock requests
data items
items stored
transaction wishes
lock data
data item
lock mode
incompatible mode
lock request
lock n1.anager
n1.anager sends
initiator indicating
simple implementation
message transfers
handling lock
lock requests
ncessage transfer
handling unlock
deadlock handling
single site
deadlock-handling algorithms
algorithms discussed
single-coordinator approach
system maintains
single lock
single chosen
chosen site-say
manager determines
item resides
write operation
handling lmlock
lmlock requests
simple deadlock
scheme include
concurrency controller
recovery scheme
lockmanager function
manager administers
distribution reduces
complicates deadlock
majority protocol
nonreplicated data
data scheme
presented earlier
manager controls
replicated inn
manager detern1.ines
scheme deals
replicated data
decentralized manner
central control
full replication
exclusive mode
mode transaction
biased protocol
shared locks
favorable treatment
exclusive locks
manager manages
site shared
read operations
common cases
additional overhead
protocol shares
primary copy
primary site
scheme enables
handle concurrency
unreplicated data
data implementation
principal idea
timestamping scheme
scheme discussed
unique timestamp
serialization order
first task
centralized scheme
distributed scheme
generating unique
unique timestamps
previous protocols
nonreplicated environment
primary methods
logical counter
local clock
site generates
local unique
global unique
site identifier
sign.ificant position
global timestamps
timestamps generated
site compare
unique na1nes
local timestamps
faster rate
fast site
fair generation
local timestamp
site local
timestamp site
unique identifier
identifier figure
x,y visits
system clock
generate timestamps
basic timestamp
timestamp scheme
scheme introduced
straightforward mamler
centralized case
cascading rollbacks
item value
eliminate cascading
con bine
ensures serializability
described suffers
undesirable property
write operations
causing aborts
read queue
write queue
queue consisting
write requests
deadlock-detection algorithms
algorithms presented
distributed algorithms
deadlock-avoidance algorithms
resource-ordering deadlock-prevention
deadlock-prevention technique
unique numbers
unique nl1mber
number greater
resource request
global resource-ordering
deadlock-prevention scheme
scheme based
timestampordering approach
resource preemption
deadlock situation
single instance
resource type
unique priority
priority number
scheme prevents
prevents deadlocks
wait-for graph
higher priority
low priorities
complementary deadlock-prevention
deadlock-prevention schemes
wait-die scheme
nonpreemptive teclmique
smaller timestamp
resource held
wound-wait scheme
preemptive technique
wait-die approach
larger timestamp
avoid starvation
starvation provided
smallest timestamp
significant differences
schemes operate
older process
younger process
needed resource
resource contrast
scheme process
fewer rollbacks
rollbacks occur
major problem
unnecessary rollbacks
deadlock-prevention algorithm
preempt resources
ecessary preemptions
deadlockdetection algorithm
graph describing
resourceallocation state
single resource
graph represents
main problem
common techniques
schemes require
local wait-for
graph correspond
graph note
requested resources
wait-for graphs
usual manner
local processes
global wait-for
system depicted
deadlock exists
local graphs
deadlocked state
common schemes
communication delay
real graph
graph describes
unknown state
ormliscient observer
constructed graph
approximation generated
detection algorithm
reported results
correct algorithms
deadlock-detection coordinator
cycledetection algorithm
deadlock-detection algorithm
coordinator searches
global graph
victim process
graph-construction options
options listed
local graph
coordinator updates
single message
message periodically
periodically returning
false cycle
deadlock recovery
reasons unrelated
rolled back1
centralized deadlock-detection
false deadlocks
requests coordinator
coordinator figure
unique identifiers
requested resource
controller sends
initiating message
local information
graph reflects
instantaneous state
initiating messages
controllers share
detecting deadlock
site constructs
waitfor graph
total graph
dynamic behavior
partial graphs
involves construction
scheme differs
additional node
node pex
pex exists
arc pex
graphs results
involve node
cycle involving
involving pex
distributed deadlock
deadlock -detection
-detection algorithm
involving node
item located
deadlock-detection message
site sic
finite number
deadlock-detection computation
computation halts
message describing
include node
worst case
deadlock-detection messages
situation results
unnecessary message
message transfer
reduce message
message traffic
site s1c
s1c continues
normal execution
graphs maintained
sites discover
local cycles
graph site
algorithms employ
performs functions
functions needed
functions include
lost token
output device
continue execution
election algorithms
algorithms assume
active process
one-to-one correspondence
largest priority
recovered process
current coordinator
present examples
first algorithm
algorithm applies
systems organized
algorithms require
active processes
bully algorithm
algorithm suppose
election message
number process
priority numbers
message informing
higher number
highest number
lower numbers
begins execution
higher numbers
process forces
active coordinator
lower number
election request
election requests
ring algorithm
main data
data structure
algorithm ends
process maintains
active list
algorithm works
initially empty
message elect
first elect
elect message
j-thatis,ifthe message
message received
pisnumber -then
system process
largest number
recovering process
process determines
solution requires
inquiry message
turn sends
common value
communication medium
garbled messages
resultilcg lie
unpredictable process
process behavior
processes fail
execution pattern
incorrect messages
failed processes
divisions byzantine
byzantine army
enemy camp
byzantine generals
reach agreement
generals agree
result lie
lie defeat
major reasons
situation corresponds
unreliable communication
computer system
loyal generals
faulty processes
processes lie
unreliable communications
unreliable suppose
function boo
hardware failure
detect failures
acknowledgment message
time-out occurs
procedure continues
first case
compute boo
boo note
viable alternatives
respective states
minimal sequence
transfers exists
processes agree
compute foo
last message
message delivery
decision procedure
original sequence
unpredictable ways
faulty suppose
private value
nonfaulty process
conditions exist
nonfaulty processes
correct algorithm
worst-case delay
reaching agreement
proportionate tom
message-passing delays
general solution
simple case
algorithm requires
information exchange
first round
faulty process
send messages
arbitrary value
values reported
majority value
default value-say
exact order
events occur
system timestamps
consistent event
event ordering
ring-structured networks
validation schemes
unique global
site identification
local clocks
message arrives
primary method
graph methods
graph include
backup coordinator
assume responsibility
centralized environment
hierarchical deadlock-detection
non-leaf controller
controller maintains
relevant information
lowest common
common ancestor
cycle exists
comp1.1ter network
deadlock-detection scheme
deadlockprevention scheme
bidirectional rings
computer network
achieving distributed
failure model
faulty processors
processors processors
processors follow
prescribed protocol
unexpected points
processors fail
processors discuss
scheme perform
granting resources
executing transactions
ensures transaction
transaction atomicity
clock timestamp
scheme presented
cam1.0t order
events based
system discuss
discuss ways
distinguish concurrent
first general
general algorithm
squareroot algorithm
token-passing algorithm
rilcg-structured systems
systems presented
presented ilc
ilc section
computer networks
fault-tolerant solution
simple taxonomy
distributed mutual-exclusion
mutual-exclusion algorithms
distributed synchronization
shared-memory environment
disjoint processes
distributed solution
dilling-philosophers problem
modified versions
presume commit
presume abort
defilling default
default assumptions
papers dealing
transaction concept
comprehensive discussions
distributed concurrency
control rosenkrantz
timestamp distributed
distributed deadlock-prevention
distributed deadlock-detection
offer surveys
global snapshots
generals problem
ring-structured system
operating-system issues
general-purpose computing
computing systems
real-time system
computed results
deadline period
period results
results produced
real value
traditional operating-system
operating-system scheduling
scheduling algorithms
stringent timing
timing deadlines
multimedia system
conventional data
text files
word-processing documents
multimedia data
data multimedia
data consist
continuous-media data
data continuous-media
handling continuous-media
data require
operatingsystem structure
network management
server systems
real-time computing
real-time systems
systems differ
produce results
real-time computer
real-time operating
operating systems
timing requirements
soft real-time
defining characteristics
describe scheduling
hard real-time
computing results
autonomous robot
delivers mail
office complex
vision-control system
system identifies
requirement contrast
timing requirement
strict demands
interactive desktop
desktop computer
quick response
interactive user
batch-processing system-m.ay
systems executing
traditional computer
computer hardware
wide range
specialized devices
ordinary home
home appliances
microwave ovens
consumer digital
digital devices
mp3 players
communication devices
cellular telephones
blackberry handheld
handheld devices
larger entities
embedded system
computing device
larger system
home dishwasher
dishwasher-the water
water temperature
timer indicating
computer embedded
system controlling
controlling antilock
antilock brakes
sensor detecting
system controller
controller taking
controller tells
braking mechanism
braking pressure
embedded computer
embedded systems
home furnace
real-time requirements
safety-critical systems
safety-critical system
missed deadline
deadline -results
catastrophe examples
systems include
include weapons
weapons systems
antilock brake
brake systems
flight-management systems
worse-might occur
significant majority
including fax
fax machines
networking devices
missing deadline
deadline requirements
requirements results
unhappy user
stringent requirements
critical realtime
realtime tasks
critical real-time
real-time task
receive priority
commercial operating
linux-provide soft
real-time support
address issues
issues related
operating systencs
single purpose
small size
mass-produced specific
specific timing
unlike pcs
mp3 player
navigation system
play dvds
system reflects
single-purpose nature
systems exist
physical space
microwave oven-it
space constraints
systems lack
cpu processing
processing power
standard desktop
desktop pcs
contemporary desktop
systems run
physical memory
memory required
small footprints
consumer devices
devices devices
digital cameras
costconscious environments
embedded controller
alternative technique
structure shown
buses provide
mechanism intercom1ectin.g
individual components
system controllers
including cache
memorymouse keyboard
keyboard printer
printer figure
bus-oriented organization
attached peripheral
peripheral ports
usb ports
integrated circuit
soc strategy
final characteristic
characteristic identified
primary task
real-time tasks
chapter focuses
issue real-time
systems meet
tim.ing requirements
give real-time
real-time processes
highest schedulil1.g
schedulil1.g priorities
addressing timing
features provided
operatil1.g systems
systems discussed
including linux
provide support
peripheral devices
graphical displays
dvd drives
drives protection
security mechanisms
mechanisms multiple
multiple users
users supporting
sophisticated -and
-and large-kernel
forty million
million lines
source code
typical real-time
simple design
simple systems
features listed
systems provide
systems serve
features found
found il1
digital wristwatch
disk drive
small number
hardware devices
vision identification
features supported
desktop operating
fast processors
large amounts
explained earlier
realtime systems
sufficient space
peripheral disk
disk drives
support file
nonvolatile memory
supporting features
relocation register
memory figure
address translation
computing environments
additional considerations
considerations arise
system providing
memory features
system include
memory-management unit
physical addresses
power consumption
logical addresses
look-aside buffer
real-time environment
translating addresses
managing address
cpu generates
logical address
physical address
first approach
cpu generate
addresses directly
real-addressing mode-does
employ virtual
memory techniques
real-addressil1.g mode
memory protection
processes real-addressing
real-addressing mode
physical location
real-time constraints
performance benefit
dynamic relocation
register shown
memory location
systems configure
obvious benefit
last approach
full virtual
memory functionality
translation takes
takes place
page tables
attached disk
demand paging
nvram flash
flash memory
core systems
systems providing
full support
means absolute
priority-based scheduling
preemptive kernel
kernel minimized
minimized latency
notable feature
networking support
support networking
networking protocols
provide networking
networking capabilities
gathers real-time
real-time data
networking features
system requiring
obvious networking
networking requirencent
basic requirements
requirements listed
important feature
real-time process
process requires
priority-based algorithm
preemption recall
algorithms assign
priority based
important tasks
higher priorities
supports preemption
higher-priority process
real-time scheduling
scheduling features
linux operating
systems assigns
scheduling priority
priority levels
highest levelspriority
levelspriority values
processes solaris
similar prioritization
prioritization schemes
priority-based scheduler
real-time functionality
functionality hard
deadline requirem
additional scheduling
preemptive kernels
nonpreemptive kernels
kernels disallow
disallow preemption
process running
kernel mode
kernel-mode process
exits kernel
yields control
task running
mode designing
traditional user-oriented
user-oriented applications
word processors
web browsers
response times
commercial desktop
xp-are nonpreemptive
real-time systems-in
real-time systems-preemptive
systems-preemptive kernels
long period
kernel preemptible
insert preemption
preemption points
long-duration system
preemption point
point checks
high-priority process
context switch
switch takes
process terminates
interrupted process
process continues
system call
call preemption
safe locations
kernel data
minimizing latency
event-driven nature
occur events
timer expires-or
remote-controlled vehicle
vehicle detects
event occurs
event latency
latency requirements
latency requirement
brake system
occurs event
system responds
controlling radar
latency period
latencies affect
interrupt latency
latency dispatch
dispatch latency
latency interrupt
latency refers
interrupt occursf
current process
specific interrupt
interrupt service
service routine
running interrupt
interrupt type
type owitocontiex
tasks receive
important factor
factor contributing
updated real-time
systems require
short periods
deterministic behavior
behavior required
real-time kernels
latency providing
cpu mandates
systems minimize
effective technique
keeping dispatch
conflict phase
kernel release
low-priority processes
resources needed
preemption disabled
preemption enabled
affect dispatch
latency arises
modify kernel
lower-priority process-or
lower-priority processes
kernel event
event response
--------response interval
process made
process execution
lower-priority process
priorities follow
requires resource
preempting process
lower priority
priority -process
-process m-has
long process
relinquish resource
priority inversion
priority-inheritance protocol
accessing resources
process inherit
priorities revert
original values
preventing process
inherited priority
original priority
critical process
noncritical processes
processes hard
stricter requirements
individual schedulers
considered periodic
constant intervals
periodic process
fixed processing
processing timet
periodic task
assign priorities
rate requirements
admission-control algorithm
rate-monotonic scheduling
algorithm schedules
periodic tasks
static priority
priority policy
scheduling assumes
cpu burst
process acquires
processil1.g times
cpu utilization
period -ti
-the cpu
total cpu
starts execution
first deadline
milliseconds remaining
scheduler resumes
static priorities
rate-monotonic algorithm
assign process
shorter period
burst process
worst-case cpu
processes approaches
percent combined
combined cpu
processes scheduled
schedule deadlines
missing deadlines
earliest-deadline-first scheduling
dynamically assigns
assigns priorities
edf policy
system priorities
rmmable process
illustrate edf
edf scheduling
processes shown
meet deadline
scheduling recall
earliest deadline
initial priority
continue running
first deadlines
deadlines process
begins rum1ing
earlier deadline
resumes execution
process require
constant amount
process a1mom1ce
schedule processes
context switching
interrupt handling
proportional share
share scheduling
share schedulers
schedulers operate
total processor
examplef assume
total oft
admission control
control policy
application receives
allocated shares
client requesting
sufficient shares
admission controller
pthread scheduling
posix standard
pthread api
api related
real-time threads
threads pthreads
pthreads defines
scheduling classes
sched __fifo
__fifo sched_rr
sched_rr sched__fifo
sched__fifo schedules
schedules threads
first-served policy
fifo queue
equal priority
real-time thread
blocks sched_rr
priority pthreads
system specific
api specifies
pthread_attr_t attr
int policy
first parameter
current scheduling
integer value
pthread_attr setsched_policy
functions return
non-zero values
error occurs
include pthread.h
include stdio.h
define num_threads
int main
int argc
char argv
pthread_t tid
default attributes
set policy
begin control
void runner
void param
scheduling api
pthread program
describe vxworks
popular real-time
support vxworks
wind river
river systems
industrial devices
networking equipment
routers vxworks
opportunity-that began
began exploring
planet mars
wind microkernel
microkernel recall
operating-system kernel
bare minimum
additional utilities
approach offers
including minimizing
desirable feature
small footprint
microkernel supports
basic features
individual processes
real-time application
application figure
operating .systent
.systent isbe
singlyinreai-time enviroft
,whereby real-time
real-time tasl
tasl sareassignt
kernel makelinux
even,more suitilb
.embedded systems
systems thes
fullr pree
pree ptive
ptive kernel
.efficient sched-lli11g
ofthe number
enthardlare arc
strategy jew
integrah1lg linux
linux iftto
iftto reanill1e
reanill1e .envirof
involves combini
linux operat
ernet tht
.is theappro
lil_1cux ppt
standard lirn.tx
lirn.tx kernel
kernel run
real7tirlle ketnel
itc tl1rlotac1c11atencyto.thereal-timesystem.rj
ies difft
rent schedulingpolicies
tnd earliest
deadline-first scheduling
separate scheduling
scheduling models
preemptive scheduling
nonpreemptive round-robin
round-robin scheduling
posix api
manages interrupts
latency times
interprocess communication
wind micro
micro kernel
shared memory
message passing
separate tasks
pipes-a mechanism
special fik
protect data
data shared
mutex locks
priority inheritance
inheritance protocol
prevent priority
priority mversion
microkernet vxworks
component libraries
operating-system designer
required features
size-or footprint-of
vxworks takes
interesting approach
memory management
first level
per-page basis
policy enables
tasks running
multiprocessor architecture
shared data
individual processors
architecture supports
cache-coherency policy
data residing
main memory
tasks maintain
consistent view
memory requires
optional virtual
memory component
component vxvmi
processor support
memorymanagement unit
optional component
data areas
data area
area marked
kernel code
interrupt vector
kernel modes
applications run
application access
entire address
address space
results arrive
results arriving
deadline periods
strict timing
inexpensive devices
meet timing
timing issues
algorithms include
earliestdeadline first
first scheduling
scheduling assignb
assignb tasks
scheduling assigns
assigns priority
control system
nuclear power
power plant
fuel economy
economy system
landing system
jet airliner
scheduling illustrate
gantt chart
inversion problem
share scheduler
scheduling inferior
monotonic scheduling
previous algorithms
dynamic priority-assignment
priority-assignment algorithm
least-laxity-first scheduling
scheduling stoica
share algorithm
popular operating
future directions
important research
research issues
research article
earlier chapters
systems handle
wordprocessing documents
recent trend
conventional files
files continuous-media
data differ
differences affect
multimedia systems
chapter objectives
compress multimedia
system requirements
including cpu
disk scheduling
term multimedia
multimedia describes
include audio
video files
mp3 audio
audio files
dvd movies
short video
video clips
movie previews
news stories
stories downloaded
internet multimedia
multimedia applications
live web
web casts
world wide
wide web
sporting events
live webcams
observe customers
paris multimedia
multimedia application
separate audio
video tracks
personal computers
smaller devices
personal digital
digital assistants
stock trader
stock quotes
quotes delivered
multimedia files
common standards
representing multimedia
media delivery
delivery multimedia
major difference
regular file
multimedia file
specific rate
file requires
special timing
rapid succession
video appears
human eyes
eye retains
choppy-looking presentation
video file
rate consistent
local file
remote server
examples include
laptop computer
audio file
handheld mp3
data comprise
personal computer
smaller device
handheld computer
cellular telephone
telephone data
live continuous
continuous media
streaming techniques
progressive download
real-time streaming
media file
small media
media files
long videos
internet radio
rewind operations
dvd controller
dvd disc
5-minute streaming
streaming video
movie clip
media stream
live streaming
ondemand streaming
radio program
program broadcast
live real-time
real-time stream
favorite radio
radio station
internet live
video conferencing
live delivery
random access
delivery means
live stream
earlier portions
radio broadcast
on-demand streaming
deliver media
media streams
full-length movies
archived lectures
news broadcast
on-demand stream
dvd player
convenient time-there
well-known streaming
streaming media
media products
products include
include realplayer
apple quicktime
windows media
media player
client media
media players
traditional applications
100-minute mpeg-1
mpeg-1 video
storage space
high-defuution television
server storing
storing hundreds
digital video
high data
data rates
color video
frame requires
timing delays
continuous-media file
deliver continuous-media
requirements-of continuous
qos guarantees
guarantees affects
cpu scheduling
management specific
specific examples
significant cpu
multimedia tasks
ensure meeting
network protocols
support bandwidth
bandwidth requirements
minimizing delay
compressing multimedia
compression makes
significant demands
original form
smaller form
quickly compression
network cormection
discussing file
file compression
original file
file size
compressed file
compression ratio
file affects
decompression compression
compression algorithms
lossy compression
original data
lossless compression
compression ensures
generat lossy
lossy techniques
techniques provide
higher cone
cone pression
pression ratios
lossy compression-namely
video lossy
low frequencies
human ear
video operate
successive frames
frames lossless
lossless algorithms
compressing text
computer programs
compressed files
compression schemes
moving picture
picture experts
experts group
mpeg refers
file formats
compression standards
audio portion
layers layers
video portions
file layer
timing information
mpeg player
major mpeg
mpeg standards
audio stream
conventional vcr
vcr videos
videos mp3
popular medium
storing music
audio layer
practice compression
compression ratios
compressing dvd
digital television
including high-definition
high-definition television
video compression
required data
data rate
typical bit
bit rates
encoded files
higher rates
local playback
transmit audio
three-dimensional animation
animation layers
layers animation
animation makes
end users
potential home
home buyer
virtual tour
appealing feature
scalable level
allowing delivery
slow network
network connections
bps modems
high-speed local
local area
area networks
wireless devices
including handheld
handheld computers
cell phones
standards discussed
perform lossy
high compression
fundamental idea
mpeg performs
performs compression
characteristics described
require levels
spreadsheets tin1.ing
foremost concern
video data
data demands
fixed rate
rate constraints
request data
constant intervals-or
playback maintaining
rate requires
succeeds frame
video playback
displaying frame
qos levels
system makes
best-effort attempt
level treats
traffic streams
best-effort service
quality-of-service requirements
traditional operating
operating systems-the
systems-the systems
total amount
worst-case workload
demand exceeds
exceeds resource
resource capacity
manual intervention
next-generation multimedia
provide continuous-media
continuous-media applications
guarantees made
hard qos
enable multimedia
service-level guarantees
parameters defining
defining qos
work done
delay refers
desired result
jitter refers
on-demand real-time
delay jitter
pauses-or lost
frames-during playback
playback clients
worth-before beginning
beginning playback
reliability refers
media errors
lost packets
processing delays
these-and other-scenarios
specific data
streaming service
negotiating quality
content provider
provide qos
sufficient resources
everyday lives
movie theater
everyday life
admission-control policy
multimedia environment
simple admission-control
nonshareable resources
first initializing
subsequent calls
common technique
implementing admission
multiple instances
reservation request
resource il1
il1 advance
admission-control scheme
scheme assigns
resource requests
resource arrives
resource manager
qos demands
lower level
manager reserves
requesting client
desired qos
qos requirements
ensure qos
cineblitz multimedia
multimedia storage
storage server
covers real-time
critical processes
system ensures
noncritical process
typical requirement
unusable multimedia
critical task
guaranteed period
scheduling issue
issue concerns
scheduler assigns
priority scheduling
dynamic priorities
non-real-time tasks
interactive processes
systems assign
scheduling strategies
strategies discussed
deadline qos
discussed disk
handle conventional
scheduling goals
traditional disk
disk schedulers
schedulers employ
continuous-media files
data files
preserve qos
diskscheduling algorithms
conflict continuous-media
high disk-bandwidth
disk-bandwidth rates
data-rate requirements
low transfer
transfer rates
high latency
latency rates
high bandwidth
reducing latency
continuous-media systems
cpu-scheduling algorithm
deadlines edf
disk-scheduling algorithm
order requests
request closest
current cylinder
closest deadline
servicing requests
higher seek
seek tim.es
disk heads
current position
disk head
strict edf
head passes
disk scheduler
deadline requirement
scan-edf scheduling
fundamental problem
read-write heads
unacceptable seek
seek times
affect disk
disk throughput
throughput recall
issue faced
fcfs scheduling
adopting scan
scan schedulil
disk arm
arm moves
arm reaches
reverse direction
strategy optimizes
optimizes seek
hybrid algorithm
combines edf
scan scheduling
scan-edf starts
edf ordering
services requests
deadline usil
scan order
batch requests
scan ordering
batching requests
similar deadlines
reordering requests
deadlines fall
requested cylinder
batching scheme
first batch
last batch
service request
moving downward
cylinder nun1.bers
first service
heads begin
moving upward
requests hand
final batch
foremost qos
qos issue
systems concerns
concerns preserving
preserving rate
client wishes
video compressed
required rate
disk-scheduling algorithms
quality-ofservice requirements
internet-issues relating
network delivers
network issues
unique demands
worth noting
general -and
provide network
proprietary protocols-notably
meet qos
proprietary protocols
encounter congestion
traffic issues-issues
end hosts
server delivering
client playing
internet standard
including audio
transporting media
media formats
files compressed
mpeg rtf
remove jitter
jitter introduced
unique requirements
delivering content
server delivers
single client
separate unicast
method lies
unicast delivery
unicast session
public internet
multicasting appears
reasonable compromise
single copy
clients indicating
practical standpoint
intermediate routers
originating server
support multicasting
delays incurred
intermediate router
multicast stream
unicast channels
multicasting routers
reasonable physical
physical proximity
chief executive
executive officer
streaming protocol
randomly access
standard web
web server
hypertext transport
transport protocol
deliver documents
play media
media streamed
uniform resource
resource locatm
web browser
real audio
streaming windows
conventional web
standard http
http requests
delivering streaming
media content
client wished
resume playback
alternative strategy
protocol designed
streaming servers
significant advantage
advantage rtsp
random positions
playback delivery
streami.j.1.g media
streaming server
rtsp protocol
rtsp defines
rtsp streaming
commands i.j.1.clude
server allocates
allocates resources
client session
session established
setup command
server suspends
suspends delivery
server breaks
resources allocated
state machine
rtsp server
server receives
rtsp commands
media offers
networking issues
interested readers
high-performance media
cineblitz refers
constraints cine
cine blitz
blitz guarantees
real-time clients
data retrieval
cineblitz disk-schedulu1.g
admission-control algorithms
setup play
play tear
pause figure
finite-state machine
machine representing
representing rtsp
cineblitz disk
scheduler services
service cycle
earlier discussions
heads move
reversing direction
pure scan
scan disk
cil eblitz
monitor requests
non-real-time clients
clients receive
receive service
rate guarantees
guarantees required
ensure fairness
term client
client refers
real-time client
cineblitz monitors
disk bandwidth
disk latency
keeping track
buffer space
cineblitz admission
controller admits
retrieve data
cineblitz queues
queues requests
cyclic order
transfer data
total buffer
idea behil
bound requests
estimated service
service times
admitted requests
double buffer
buffer total
double buffering
admission policy
disk block
maximum number
blocks thatcanberetrievedforrequest
thatcanberetrievedforrequest r1c
r1c duringeachcycleis
r1c bits
last portion
block involves
track contailling
rotational delay
desired track
c-scan disk-scheduling
sorted order
worst-case seek
delay times
maximum latency
latency incurred
tseek component
component refers
maximum disk-seek
disk-seek latency
component reflects
blocks multiplied
worst-case rotational
transfer rate
yic bits
request r1c
r11 bits
free buffer
modern computer
files include
include video
audio filesf
desktop computersf
digital assistantsf
primary distinction
deadline requiren
requiren ents
timing requirementsf
playback multimedia
multimedia server
network connection
qualityof service
service requirementsf
conventional operating
quality-of-service guarantees
provide quality
servicef multimedia
system accepts
quality-of-service level
providing quality-of-service
guarantees requires
system performs
performs cpu
cpu schedulingf
schedulingf disk
disk schedulingf
continuous-media task
scheduling criterion
criterion network
management requires
handle delay
jitter caused
traditional internet
internet protocols
transmitting data
contrast unicastingf
unicastingf multicastingf
target bit
bit rate
desired bit
color assuming
application consists
compressed sizes
streaming applications
tolerate delay
tolerate jitter
jitter live
streaming on-demand
cylinders requests
deadlines occurring
scan-edf disk
requests batched
repeat exercise
operating principle
blitz system
performing admission
general overview
systems topics
topics related
operating-system support
resource management
processing capability
memory buffers
good overview
issues relating
programming model
developing multimedia
rate-monotonic scheduler
serving video
schedule-management issues
compression techniques
concepts described
real operating
great detaiilinux
chose linux
full-featured unix
unix system
operating-system source
great detail
recent operating
gaining popularity
stand-alonemachine market
workgroup-server market
chose windows
modern operating
influential operating
relative importance
on-line coverage
freebsd system
linux combines
combines features
bsd model
unix freebsd
freebsd source
linux source
mach operating
bsd unix
unix windows
intel pentium
microsoft windows
windows applications
chapter presents
in-depth examination
real system
gained popularity
recent years
programmer interfaces
linux presents-interfaces
great deal
unix tradition
internal methods
linux implements
interfaces linux
evolving operating
chapter describes
describes developments
unix operating
linux process
process model
linux schedules
schedules processes
unix compatibility
major design
design goal
linux project
development began
finnish student
linus torvalds
christened linux
self-contained kernel
first true
pc-compatible cpus
initial kernel
small subset
system services
linux system
unix functionality
early days
linux development
development revolved
central operating-system
privileged executive
full operating
operating systeitl
linux kernel
original piece
software developed
linux con1.munity
development projects
basic linux
standard environment
user programming
standard means
linux distributions
standard components
administrative tools
initial installation
subsequent upgrading
manage installation
modern distribution
includes tools
user accounts
first linux
kernel released
80386-compatible intel
intel processors
device-driver support
memory subsystem
memorymapped files
early incarnation
incarnation supported
shared pages
system supported
minix file
system -the
linux kernels
minix platform
implement proper
proper unix
unix processes
protected address
address spaces
milestone version
release culminated
rapid development
limlx kernel
single biggest
included support
standard tcp
tcp lip
lip networking
bsd-compatible socket
socket interface
networking programming
programming device-driver
slip protocols
serial lines
enhanced file
original minix
scsi controllers
high-performance disk
disk access
developers extended
support paging
swap files
memory mapping
arbitrary files
read-only memory
extra hardware
hardware support
cd-rom devices
sound cards
international keyboards
floating-point emulation
math coprocessor
unix-style inclllding
message queues
implemented simple
simple support
unloadable kernel
kernel modules
development started
kernel stream
numerous bug-fix
bug-fix patches
standard numbering
numbering convention
kernels kernels
odd minor-version
minor-version number
evennumbered minor-version
minor-version numbers
stable updates
stable kernels
remedial versions
development kernels
untested functionality
wider variety
pci hardware
hardware bus
bus architecture
architecture developers
developers added
pc-specific feature-support
virtual8086 mode-to
dos operating
networking stack
ipx protocol
including accounting
firewalling functionality
final pc-only
pc-only linux
source distribution
implemented support
full integration
stable kernel
release concentrated
wider hardware
complete implementations
existing functionality
main kernel
kernel source
development stream
functionality added
major version-number
version-number increment
multiple architectures
64-bit native
native alpha
alpha port
multiprocessor architectures
architectures linux
distributions based
motorola 68000-series
68000-series processors
sparc systems
derived version
linux running
mach microkernel
powermac systems
memory-management code
unified cache
file-system data
block devices
kernel offered
memory performance
file-system caching
networked file
writable memory-mapped
memory-mapped regions
improved tcp
including apple
apple talk
anlateur radio
radio networking
isdn support
mount remote
remote netware
microsoft lanmanager
network volumes
major improvements
internal kernel
kernel threads
handling dependencies
loadable modules
automatic loading
dynamic configuration
standardized configuration
configuration interface
features included
file-system quotas
posix-compatible real-time
real-time process-scheduling
process-scheduling classes
improvements continued
ultrasparc systems
added networking
flexible firewalling
traffic management
large window
selective acks
acks acorn
kernel-mode nfs
nfs daemon
daemon added
signal handling
finer level
symmetric multiprocessor
kernel include
include increased
increased support
smp systems
memorymanagement system
process scheduler
kernel forms
components make
complete linux
code written
supporting software
unix-like operating
tools developed
bsd operating
window system
free software
software foundation
gnu project
main system
system libraries
linux community
addressing omissions
high quality
networkingadministration tools
recent bsd
bsd derivatives
borrowed code
return examples
intel floating-point-emulation
floating-point-emulation math
math library
sound-hardware device
device drivers
loose network
developers collaborating
small groups
specific components
internet file-transfer-protocol
archive sites
sites act
standard repositories
ensuring compatibility
system components
standard specifies
standard linux
linux file
directory names
names configuration
configuration files
system binaries
run-time data
latest revisions
ftp sites
linux user
carry out
precompiled sets
easy installation
extra system-installation
management utilities
ready-to-install packages
common unix
unix tools
news servers
editing tools
first distributions
distributions managed
important contributions
modem dish
dish ibutions
advanced package
package management
management today
distributions include
package-tracking database
sls distribution
first collection
linux packages
complete distribution
single entity
sls lacked
packagemanagement tools
distribution represented
great improvement
poor package
installed distributions
noncommercial limlx
limlx distributions
popular distributions
commercial linux
linux support
support company
free-software linux
supported versions
linux include
include distributions
large linux
german-language distributions
including versions
prohibit compatibility
rpm package
package file
file format
commercial applications
applications distributed
accept rpm
rpm files
linux licensing
gnu general
public license
software fmmdation
fmmdation linux
public-domain software
software implies
waived copyright
copyright rights
linux code
authors linux
main implications
licensing terms
legitimate exercise
derived product
product proprietary
proprietary software
software released
gpl camwt
binary-only product
release software
components covered
make source
binary distributions
resh iction
prohibit ntaking-or
selling-binary-only software
software distributions
receives binaries
reasonable distribution
distribution charge
linux resembles
nonmicrokernel unix
unix implementation
multitasking system
full set
unix-compatible tools
tools linux
system adheres
traditional unix
unix semantics
standard unix
unix networking
networking model
internal details
linux runs
wide variety
early development
individual enthusiasts
well-funded development
research facilities
start linux
linux attempted
limited resources
resources today
multiprocessor machine
disk space
hard disks
minimalist limix
limix kernels
kernels grew
functionality speed
important design
design goals
current work
prices paid
unix implementations
unix systems
posix standards
standards comprise
operating-system behavior
common operating-system
operating-system functionality
process threads
real-time operations
operations linux
relevant posix
posix documents
achieved official
official posix
posix certification
standard interfaces
linux presents
programmer interface
user interface
linux programming
programming interface
interface adheres
svr4 unix
bsd behavior
separate set
implement bsd
bsd semantics
behaviors differ
standards exist
unix world
full certification
expense involved
wide base
major goal
formally certified
basic posix
posix threading
threading extensions-pthreads
process control
main bodies
important abstractions
libraries define
standard set
functions implement
full privileges
system utilities
perform individual
specialized management
management tasks
unix terminology
incoming network
accepting logon
logon requests
updating log
log files
full linux
important distinction
code executes
privileged mode
full access
physical resources
computer linux
linux refers
user-mode code
operating-system-support code
messagepassing architecture
kernel internals
linux retains
historical model
monolithic binary
main reason
single address
context switches
process calls
operating-system function
hardware interrupt
loadable kernel
modules figure
core scheduling
memory code
networking code
kernel components
components share
m.elting pot
user applications
shared libraries
needed piece
independent loadable
loadable components
run processes
protected access
hardware resources
kernel implements
features required
system provided
extra features
unix application
application expects
operating-system interface
running applications
applications make
make calls
turn call
operatingsystem services
libraries provide
simplest level
kernel-system service
requests making
call involves
transferring control
tmprivileged user
user mode
privileged kernel
transfer vary
system-call arguments
special form
complex versions
basic system
file-handling functions
advanced control
basic kernel
kernel system
provide routines
sorting algorithms
mathematical functions
string-manipulation routines
limix system
system includes
user-mode programs-both
programs-both system
user utilities
utilities include
configure network
network devices
load kernel
server programs
programs handle
handle user
user login
login requests
printer queues
standard utilities
utilities serve
key system-administration
system-administration functions
unix user
user environment
large number
simple everyday
everyday tasks
listing directories
deleting files
complex utilities
text-processing functions
textual data
performing pattern
pattern searches
input text
utilities form
standard tool
tool set
important part
basic limix
arbitrary sections
modules run
hardware capabilities
kernel module
device driver
networking protocol
reasons linux
write kernel
modified kernel
entire kernel
cumbersome cycle
driver-the driver
already-rmming kernel
gpl license
proprietary components
components added
module interface
standard minimal
minimal kernet
extra device
drivers built
cd-rom driver
module support
reserve hardware
module management
management loading
module requires
binary contents
kernel memory
module makes
kernel symbols
entry points
correct locations
space linux
linux deals
reference updating
module loading
separate sections
module code
linux maintains
internal syncbol
syncbol table
symbol table
symbols defined
exported symbols
symbols constitutes
well-defined interface
exporting symbols
kernel function
function requires
explicit request
special effort
module writer
standard external
external linking
external symbols
symbols referenced
final module
module binary
binary produced
system utility
unresolved references
correct addresses
running kernel
module passed
moduleloader utility
utility asks
continuous area
virtual kernel
kernel returns
memory allocated
loader utility
machine code
correct loading
loading address
allocated space
final module-management
module-management component
module requestor
kernel defines
communication interface
module-management program
connection established
management process
process requests
network service
original service
manager process
loaded module
driver registration
isolated region
kernel maintains
dynamic tables
kernel makes
startup routine
cleanup routine
separate mechanisms
device registration
registration tables
tables include
drivers include
include character
character devices
network interface
interface devices
implements linux
virtual-file-system calling
calling routines
storing files
virtual file
entire networking
networking protocot
packet-filtering rules
network firewall
binary format
format specifies
executable file
conflict resolution
commercial unix
single-supplier solution
software vendor
good idea
hardware configurations
vast number
large numbers
network cards
video display
display adapters
hardware configuration
modular device
active set
central conflict-resolution
conflict-resolution mechanism
arbitrate access
prevent modules
prevent aui
oprobes-device-driver probes
configuration-from interfering
existing device
resolve conflicts
multiple drivers
parallel printer
printer driver
network driver
printer port
maintains lists
allocated hardware
limited number
dma channels
kernel database
database first
system administrator
alternative hardware
basic context
user-requested activity
unix linux
linux operates
key places
unix process
introduce linux
threading model
basic principle
process management
separate functions
call exec
rumung program
program starts
starts executing
existing process
great simplicity
existing environment
parent process
process wishes
original program
child process
process encompasses
single execution
single program
specific sections
process properties
properties fall
identity consists
lmique identifier
application makes
additional identifiers
identifiers associate
process group
processes forked
single user
user command
login session
group ids
user groups
access system
personality process
process personalities
personality identifier
emulation libraries
limited control
session identifiers
security checks
checks howeve1
primary pid
uniquely identifies
process environment
null-terminated vectors
argument vector
enviromnent vector
command-line arguments
running program
environment vector
value pairs
named environment
environment variables
arbitrary textual
textual values
user-mode address
first datum
environment vectors
parent possesses
calling exec
kernel passes
enviromnent variables
current environment
command-line vectors
alone-their interpretation
user-mode libraries
process provide
flexible ways
pass information
user-mode system
system software
important environment
conventional meanings
related parts
terminal com1.ected
perform operations
text programs
multilingual support
display system
system messages
environment-variable mechanism
mechanism custom-tailors
per-process basis
process context
environment properties
constantly process
context includes
scheduling context
scheduling context-the
context-the information
information includes
saved copies
registers floating-point
floating-point registers
floating-point arithmetic
includes information
outstanding signals
signals waiting
key part
kernel stack
separate area
memory reserved
kernel-mode code
accounting information
total resources
resources consumed
entire lifetime
file table
file structures
file-system context
table lists
open files
context applies
current root
default directories
file searches
signal-handler table
table unix
asynchronous signals
external events
table defines
specific signal
signal arrives
memory context
context describes
full contents
private address
threads linux
traditional functionality
process linux
create threads
term task-rather
thread-when referring
child tasks
flags clone_fs
file-system information
current working
working directory
memory space
signal handlers
parent task
task shares
child task
sharing takes
entire context
main process
process data
independent subcontexts
separate data
arguments passed
subcontext data
data struch1res
struch1res initialized
special case
allocating cpu
kernel tasks
tasks kernel
tasks encompass
running process
process scheduling
scheduling linux
separate process-scheduling
process-scheduling algorithms
time-sharing algorithm
multiple processes
absolute priorities
time-sharing tasks
tasks received
major overhaul
earlier versions
kernel ran
unix scheduling
adequate support
system grows
linux scheduler
constant time-known
including processor
processor affin.ity
maintaining fairness
interactive tasks
numeric priority
relative priority
highest lowest
time-slice length
separate priority
priority ranges
real-time range
nice value
value ranging
ranges map
global priority
priority scheme
lower values
unlike schedulers
assigns higher-priority
higher-priority tasks
lower-priority tasks
unique nature
runnable tasks
runqueue data
processor maintains
active array
expired array
expired tasks
priority arrays
arrays includes
tasks indexed
scheduler chooses
highest priority
multiprocessor machines
highest-priority task
runqueue structure
value depends
longer sleep
sleep times
scheduler favors
shorter sleep
priorities lowered
dynamic priority
array priority
task lists
o-o figure
realtime scheduling
classes required
priority irt
irt addition
scheduling class
class processes
time-sharing scheduling
waiting longest
fcfs processes
processes continue
round-robill process
scheduling queue
round-robin processes
unlike routine
scheduler offers
strict guarantees
relative priorities
reahim.e process
kernel synchronization
kernel schedules
kernel-mode execution
operating-system service
page fault
fault occurs
device controller
start executing
kernel-defined handler
problem posed
sanl.e internal
internal data
kernel task
routine executes
risking data
data corruption
fact relates
critical sections-portions
access shared
synchronization involves
nonpreernptive kernet
kernet meaning
higherpriority process
limix kernel
readerwriter versions
smp machines
fundamental locking
locking mechanism
short durations
single-processor machines
disabling kernel
kernel preemption
task disables
disables kernel
enables kernel
enable kernel
simple system
-for disabling
enabling kernel
kernel-mode task
thread-info structure
field preempt_count
counter indicating
outstanding calls
longer periods
protection technique
linux applies
service routines
basic tool
interrupt-control hardware
disabling interrupts
kernel guarantees
concurrent access
hardware architectures
interrupt enable
disable instructions
interrupts remain
device waiting
performance degrades
synchronization architecture
entire duration
interrupts disabled
network device
entire network
network packet
user-mode programs
interrupt protection
protection levels
separating interrupt
top half
bottom half
normal interrupt
recursive interrupts
interrupts enabled
miniature scheduler
bottom halves
bottom-half scheduler
routine exits
separation means
complex processing
interrupt occurs
half execute
running completes
similar bottom
disabling selected
selected bottom
foreground kernel
system interrupt
interrupt handlers
relevant bottom
tl1e end
bottom-half tasks
top-half interrupt
code running
higher level
user processes
scheduling interrupt
symmetric multiprocessing
first stable
stable linux
support hardware
separate processes
separate processors
smp imposed
single kernel
kernel spinlock
termed bkl
big kernel
kernel lock
kernel concurrently
bkl provided
coarse level
locking granularity
kernel made
smp implementation
multiple locks
kernel provided
additional smp
smp enhancements
processor affinity
load-balancing algorithms
physical memory-pages
small blocks
memory mapped
running processes
specific hardware
hardware characteristics
linux separates
zone_dma zone_normal
zone_normal zone_highmem
architecture specific
industry standard
standard architecture
memory comprise
comprise zonldma
zonldma zone_normal
zone_normal identifies
routine memory
memory requests
high memory
kernel address
32-bit intel
intel architecture
remaining memory
intel80x86 architecture
free pages
memory arrives
kernel satisfies
priinary physical-memory
physical-memory manager
lil lux
lux kernel
page allocator
physical pages
allocating ranges
contiguous pages
buddy system
adjacent units
allocatable memory
memory region
adjacent partner
allocated partner
partner regions
larger region-a
region-a buddy
buddy heap
larger region
larger free
free region
small memory
memory request
small free
linked lists
free memory
memory regions
allowable size
smallest size
single physical
physical page
page figure
buddy-heap allocation
desired size
memory allocations
contiguous area
system boot
kernel functions
basic allocator
reserve memory
memory-management subsystems
underlying page
memory system
variable-length allocator
slab allocator
allocating memory
page cache
caching pages
pages belonging
entire pages
smaller blocks
additional allocator
arbitrary-sized requests
service allocates
allocates entire
smaller pieces
service allocating
memory involves
first free
free piece
memory shortages
strategy adopted
allocating kernel
slab allocation
single cache
unique kernel
representing process
process descriptors
file objects
cache represents
cache representing
representing semaphores
semaphores stores
stores instances
semaphore objects
descriptors stores
process descriptor
descriptor objects
figure shows
kernel objects
respective caches
slab-allocation algorithm
store kernel
cache depends
free kernel
objects figure
object assigned
kernel requests
requests memory
object representing
linux systems
type struct
struct task_struct
kernel creates
task_struct object
slab consists
free objects
free object
partial slab
empty slab
empty slabs
contiguous physical
main subsystems
main cache
memory-mapped files
main mechanism
native linux
linux diskbased
diskbased file
nfs networked
cache stores
stores entire
file contents
networked data
virtual address
systems interact
cache requires
mapping pages
greater detail
creates pages
manages loading
memory manager
manager maintains
separate views
separate regions
first view
logical view
describing instructions
space consists
nonoverlapping regions
region representing
page-aligned subset
single vm_area_struct
vm_area_struct structure
execute permissions
balanced binary
binary tree
fast lookllp
physical view
hardware page
pagetable entries
entries identify
exact current
current location
virtual mernory
software-interrupt handlers
address-space description
key page-management
page-management functions
unavailable page
function table
central memorymanagement
memorymanagement routines
regions linux
backing store
region backed
simplest type
region represents
demand-zero memory
memory filled
file acts
page table
process writes
mapped region
pager detects
shared region
region result
object mapped
process runs
empty virtual
concplete copy
kernel copies
vm_area_struct descriptors
reference count
page covered
child share
case occurs
copying operation
operation reaches
page-table entries
process modifies
processes share
copy-on-write page
process copies
brand-new page
mechanism ensures
private data
data pages
important task
relocate pages
early unix
systems performed
entire processes
modern versions
paging-the movement
individual pages
disk linux
whole-process swapping
paging mechanism
paging system
pages data
data back
pageuut policy
modified version
standard clock
algorithm described
multiplepass clock
accessed pages
higher age
age value
age valuing
select pages
mechanism supports
supports paging
dedicated swap
swap devices
normal files
slower due
extra overhead
overhead incurred
system blocks
next-fit algorithm
out pages
continuous runs
improved performance
allocator records
modern processors
page-table entry
page-not-present bit
pagetable entry
index identifying
memory linux
linux reserves
architecture-dependent region
kernel pages
kernel virtual
memory area
static area
page-table references
simple translation
virtual addresses
addresses occurs
pages allocated
normal page
reserved section
specific purpose
address range
function allocates
arbitrary number
single region
contiguous kernel
function maps
user programs
call commands
current execution
execution context
initial context
first job
system service
calling process
permission rights
kernel invokes
loader routine
program file
single routine
loader functions
initial reason
loader table
standard format
binary files
changed older
older linux
kernels understood
out format
binary files-a
simple format
older unix
systems newer
newer linux
modern elf
elf format
current unix
implementations elf
including flexibility
elf binary
extra debugging
debugging information
loader routines
allowing registration
multiple loader
binary formats
single rmming
rmming system
elf-format binaries
out binaries
binary loader
binary file
fault result
initial memory
elf-format binary
file consists
page-aligned sections
elf loader
loader works
typical layout
regions set
reserved region
space sits
privileged region
normal user-mode
memory-mapping functions
create regions
application data
data regions
user-mode virtual
lower-numbered addresses
includes copies
program il1
bottom end
program text
code figure
write-protected region
writable initialized
initialized data
uninitialized data
private demand-zero
demand-zero region
fixed-sized regions
variable-sized region
hold data
data allocated
current extent
data region
brk region
single system
loader initializes
program-counter register
starting point
point recorded
elf header
dynamic linking
run functions
library functions
simplest case
executable binary
linked executables
main disadvantage
static linking
program generated
common system
system library
disk-space usage
single loading
special linker
linker library
linked program
linked function
static function
link library
library determines
dynamic libraries
libraries required
information contained
symbols contained
position-independent code
retains unix
standard file-system
file-system model
object stored
data device
interprocesscommunication channels
kernel handles
implementation details
single file
file type
file system-ext2fs
linux vfs
object-oriented principles
vfs defines
main object
object types
inode object
object represents
individual file
file object
open file
superblock object
entire file
dentry object
ldividual directory
directory entry
actual functions
defined operations
abbreviated api
operations includes
ssize_t read
ssize_t write
int mmap
complete definition
struct file_operations
specific file
vfs software
software layer
file-system objects
inode represents
disk file
network socket
directory file
access files
actual file
first obtaining
object pointing
sequential file
process asked
write permissions
perform adaptive
fetching file
file data
inode objects
standard information
directory files
unix programming
interface defines
directory operations
files concerned
writing data
connected set
self-contained file
single superblock
disk device
device mounted
main responsibility
provide access
vfs identifies
number pair
inode number
directory entries
separate dentry
dentry objects
linux treats
treats directory
path requires
file include
file stdio
time-consuming task
translation obtaining
dentry cache
on-disk file
linux ext2fs
ext2fs file
standard on-disk
historical reasons
minix-compatible file
ease exchanging
exchanging data
minix development
development system
14-character file-name
file-name limits
maximum file-system
file-system size
extended file
missing features
features led
linuxs ext2fs
bsd fast
fast file
similar mechanism
data blocks
storing data-block
data-block pointers
indirect blocks
interpreted differently
linked list
entry refers
main differences
ffs lie
disk-allocation policies
small files
filled blocks
smaller units
default block
block size
high performance
large chunks
requests clustering
clustering reduces
per-request overhead
disk-controller hardware
request size
good performance
allocation policies
policies designed
adjacent blocks
single operation
ext2fs allocation
allocation policy
multiple block
block groups
groups ffs
similar concept
cylinder groups
group corresponds
single cylinder
physical disk
modern disk-drive
disk-drive technology
technology packs
packs sectors
cylinder sizes
fixed-sized cylinder
block group
inode allocations
parent directory
directory resides
nondirectory files
files directory
related information
disk load
reducing fragmentation
free blocks
first blocks
free block
ext2fs searches
entire free
free byte
free bit
free bytes
bytes aims
allocate disk
extended backward
allocated block
backward extension
extension prevents
prevents ext2fs
previous nonzero
nonzero byte
byte found
byte search
ext2fs extends
allocation forward
blocks allocating
continuous free
blocks block
ieee block
block selected
allocator ___
___ bitmap
bitmap search
search bit
bit boundary
boundary byte
byte boundary
boundary figure
ext2fs block-allocation
block-allocation policies
extra blocks
preallocation helps
reduce fragmentation
in.terleaved writes
separate files
cpu cost
disk allocation
allocating multiple
multiple blocks
blocks simultaneously
preallocated blocks
free-space bitmap
row represents
unset bits
allocation bitmap
disk seeks
long run
isolated blocks
large free
free areas
block close
fragmented area
free space
allocation preceding
allocation flush
default allocation
popular feature
specific task
call modifying
user process
journal entries
entries relating
actual file-system
file-system structures
committed transaction
circular buffer
separate section
separate disk
disk spindle
separate read-write
decreasing head
head contention
system crashes
system recovers
structures remain
remain consistent
problem occurs
system crashed
consistency checking
non-journaling systems
updates proceed
in-memory journal
on-disk data
performance advantage
synchronous random
random writes
synchronous sequential
sequential writes
significant gain
file-system metadata-oriented
metadata-oriented operations
file creation
common file
unux process
process file
vfs enables
store data
user file
linux svr4
unix introduced
efficient interface
process debugging
debugging support
system corresponded
current system
system reveals
asch decimal
decimal representation
unique process
process identifier
extra directories
root directory
entries correspond
loaded drivers
plain text
powerful tools
privileged process
process state
unprivileged program
directory structu.re
directory inodes
inodes identified
inode numbers
system nmst
nmst define
persistent inode
file inode
directory inode
textual form
read buffer
information type
type splits
remaining bits
bits define
pid field
separate global
global files
files exist
exist iil
report information
kernel version
performance statistics
inode mappings
ode numbers
tree data
file-system entries
ode number
access permissions
special functions
contents drivers
deregister entries
special section
kernel variables
variables files
common handlers
kernel parameters
desired values
ascii decimal
efficient access
special system
system sysctl
extra facility
dynamic entry
entry tree
files users
access channel
special files
specific device
user opening
device referenced
normal file-protection
file-protection device
driver driver
user application
application character
character device
device file
file character
protocol dlsciptlne
driver figure
device-driver block
block structure
set access
linux splits
devices figure
device-driver system
fixed-sized blocks
floppy disks
memory block
direct access
block device
fine-tuned laying
general-purpose file
fundamental difference
random access-block
access-block devices
accessed serially
pointil1.g device
devices users
networking subsystem
devices block
devices provide
main interface
disk devices
block-device system
provide functionality
block represents
kernel performs
request manager
buffer contents
block-device driver
separate list
request lists
increasing starting-sector
starting-sector number
removed fronc
driver continues
active request
request ncanager
ncanager attempts
merge requests
operations changed
elevator algorithm
operations concentrated
specific region
starvation issue
read requests
deadline sched
uler maintains
sorted queue
operations ordered
sector number
queues-a read
operations occur
deadline expires
expired request
policy ensures
character-device driver
offer random
fixed blocks
character-device drivers
drivers registered
lim.jx kernel
file read
write request
device deal
main exception
special subset
implement terminal
terminal devices
standard interface
tty struct
struct structures
flow control
data stream
terminal device
line discipline
common line
tty discipline
standard input
output streams
tty line
processes connected
line disciplines
networking connection
serial line
terminal system
networking system
network-device drivers
data appearing
network-device driver
rich environment
involve transferring
transferring data
standard lim.ix
lim.ix mechanism
processes owned
carry information
generates signals
data arrive
network channel
child terminates
waiting process
timer expires
receive notification
asynchronous events
kernel takes
scheduling states
wai t_queue
t_queue structures
kernel-mode processes
relevant events
wait queue
single event
semaphore mechanism
independent processes
multiple semaphores
linux wait
queue mechanism
mechanism synchronizes
synchronizes processes
processes linux
linux offers
passing data
unix mechanism
communication channel
data written
virtual-filesystem software
wait queues
writer unix
networking facilities
send streams
remote processes
processes networking
process communications
communications method
small amounts
suspend execution
write occurs
interprocess-communication mechanism
missing synchronization
shared-memory region
persistent object
independent address
linux paging
paging algorithms
shared-memory pages
shared-memory object
object acts
shared-memory regions
memory-mapped memory
virtual-address-space region
page faults
shared-memory mappings
direct page
persistent shared-memory
sharedmemory objects
objects remember
key area
standard internet
unix-to-unix communications
protocols native
non-unix operating
large workstations
server-class systems
interface protocol
protocol drivers
applications perform
networking requests
bsd socket
socket layer
programs designed
berkeley sockets
represent network
network addresses
single interface
protocols implemented
standard bsd
bsd systems
protocols supported
protocol stack
sown framework
networking data
network protocol
internet protocol
protocol set
separate protocols
protocols manage
manage routing
error reporting
reliable retransmission
lost data
protocol layer
rewrite packets
reassemble packets
discard incoming
incoming data
finished processing
local connection
layer decides
single skbuff
socket buffer
single continuous
buffer inside
network packets
valid data
add data
trim data
modern microprocessors
cpu speed
skbuff architecture
manipulating packet
packet headers
unnecessary data
data copying
important set
linux networking
protocol suite
suite comprises
protocol implements
implements routing
routing protocol
icmp protocols
udp protocol
protocol carries
arbitrary individual
individual datagrams
tcp protocol
reliable connections
guaranteed in-order
in-order delivery
automatic retransmission
icmp protocol
status messages
protocol software
internal identifier
identifier indicating
networking-device drivers
drivers encode
protocol type
hash table
networking-protocol identifiers
kernel-loadable modules
perform routing
driver forwards
internal protocol
protocol driver
network-device-driver queue
routing decision
persistent forwarding
forwarding information
information base
recent routing
routing decisions
fib holds
holds routing-configuration
routing-configuration information
routes based
specific destination
destination address
wildcard representing
representing multiple
multiple destinations
hash tables
tables indexed
tables representing
specific routes
searched first
successful lookups
route-caching table
caches routes
route cache
cache expires
fixed period
software passes
passes packets
management-selective filtering
arbitrary criteria
firewall manager
separate chain
chain chains
separate purposes
forwarded packets
data generated
ordered list
rule specifies
firewall-decision functions
arbitrary data
matching purposes
functions performed
large packets
outgoing packet
smaller fragments
receiving host
driver maintains
ipfrag object
fragment awaiting
assembled incoming
incoming fragments
final fragment
packets identified
tcp protocols
protocols share
associating packets
destination sockets
connected pair
destination addresses
destination port
port numbers
socket lists
tables keyed
address-port values
socket lookup
incoming packets
unreliable connections
ordered lists
unacknowledged outgoing
outgoing packets
out-of-order packets
missing data
security model
typical unix
unix security
security concerns
authentication making
entry rights
rights access
access control
control providing
preventing access
authentication authentication
readable password
password file
random salt
salt value
one-way transformation
transformation function
one-way function
function means
original password
password cam1ot
user presents
value stored
result matches
problems passwords
salt values
good chance
lmauthorized access
accounts compromised
password mechanism
encrypted password
password secret
longer passwords
secure methods
authentication mechanisms
mechanisms exist
distribute authentication
authentication information
related systems
security mechanism
unix vendors
address authentication
authentication problems
shared library
system component
authenticate users
linux pam
authentication modules
system-wide configuration
configuration file
authentication mechanism
pam modules
authentication methods
account restrictions
sessionsetup functions
password-changing functions
users change
control access
unique numeric
numeric identifiers
user identifier
single set
access rights
group identifier
extra identifier
identify rights
rights belonging
standard access-control
access-control mechanism
shared objects
shared-memory sections
group access
single uid
single gid
uid matches
process matches
linux performs
performs access
assigning objects
world access
full read
execute access
read access
write access
privileged uid
special uid
automatic access
normal access
access checks
granted permission
privileged operations
reserved network
network sockets
normal users
key internal
internal resources
root uid
unix setuid
setuid mechanism
mechanism described
section a.3.2
user running
lpr program
print queue
print queues
setuid distinguishes
effective uid
real uid
posix specification
user-id mechanism
uid repeatedly
security reasons
safe mode
privileges granted
setuid status
selected operations
implementations achieve
effective uids
previous effective
program saved
saved uids
previous value
enhancement provided
effective ids
serve files
flexible passing
another-a mechanism
local network
file descriptor
duplicate file
pass access
print server
print job
print client
server file
file descriptors
server access
free operating
system based
unix standards
unix applications
increasing number
supported applications
core linux
linux operating-system
free unix
unix software
entire unix-compatible
unix-compatible operating
proprietary code
traditional monolithic
monolithic kernel
performance reasons
multiuser system
providing protection
running multiple
time-sharing scheduler
created processes
selective parts
execution environment
parent processes
multithreaded programming
programming interprocess
mechanisms-message queues
memory-and bsd
interface multiple
multiple networking
memory-management system
page sharing
processes pages
lfu algorithm
system appears
hierarchical directory
abstraction layer
manage multiple
multiple file
device-oriented file
systems access
access disk
disk storage
defined inside
scheduler implements
real-time programming
programming tasks
linux setuid
setuid feature
feature differ
socket type
intercomputer file-transfer
file-transfer program
network explain
user program
copy-on-write attribute
attribute enabled
extra costs
cloned thread
hardware platforms
linux developers
memory-management architectures
architecture-specific kernel
programming technique
technique describe
implement threads
linux clone
alternative mechanism
cd-rom vendors
process request
primary goals
loading kernel
high-level language
libraries perform
drawbacks explain
design decision
directory structure
include files
file-system types
types affect
classify linux
linux threads
user-level threads
kernel-level threads
threads support
optimizations based
rotation position
disk data
modern implementations
sequential data
data access
sequential access
rotational optimization
operation supported
system-call sequence
sequence fork
key sites
sites reference
linux cross-reference
cross-reference pages
maintain current
current listil1.gs
large amount
information relating
includes lil1.ks
home pages
major mailing
mailing lists
linux documentation
documentation project
source format
tips relating
kernel hackers
internet-based guide
expandil1.g site
kernel newbies
newbies website
lists devoted
mailing-list manager
e-mail address
address maj
maj ordomo
ordomo vger
vger rutgers
send e-mail
single line
list server
internet complete
home sites
companies concerned
maintains archives
investigating internet
internet resources
preemptive multitasking
multitasking operating
key goals
layered architecture
principles underlying
underlying windows
run programs
detailed discussion
application programmers
ibm cooperated
assembly language
single-processor intel
fresh start
portable operating
application-programming interfaces
dave cutler
team planned
nts native
native environment
32-bit windows
windows api
win32 api
first versions
advanced server
incorporated internet
internet web-server
webbrowser software
user-interface routines
graphics code
decreased system
system reliability
previous versions
microprocessor architectures
marketplace factors
factors windows
active directory
x.soo-based directory
directory service
laptop support
plug-and-play devices
server versions
.net server
graphical user
visual design
recent hardware
hardware advances
numerous features
repair problems
device experience
including zero-configuration
zero-configuration wireless
instant messaging
digital photography
dramatic performance
performance improvements
large multiprocessors
earlier windows
windows operating
client-server architecture
implement multiple
multiple operating-system
operating-system personalities
user-level processes
subsystem architecture
operating-system personality
application compatibility
multiuser operating
simultaneous access
distributed services
terminal server
simultaneous terminal
server sessions
windows desktop
desktop systems
desktop versions
server multiplex
virtual terminal
terminal sessions
logged-on user
fast user
user switching
first version
64-bit version
win32 apis
64-bit integers
major extension
large addresses
premium desktop
desktop system
power users
home windows
advanced features
features needed
server family
core components
webserver farms
clustered systems
large datacenter
datacenter machines
ia32 systems
ia64 systems
microsoffs design
included security
international support
security windows
goals required
design standards
enabled windows
c-2 security
security classification
u.s government
moderate level
defective software
malicious attacks
extensive code
code review
sophisticated automatic
automatic analysis
analysis tools
potential defects
represent security
security vuh1erabilities
reliability windows
stable operating
system microsoft
extensive stress
stress testing
automatic detection
stringent microsoft
extensive manual
automatic code
source files
extended driver
driver verification
subtle bugs
catching programming
programming errors
user-level code
third-party applications
rigorous certification
certification process
process furthermme
added facilities
including downloading
downloading fixes
perceived reliability
interface easier
simpler menus
measured improvements
common tasks
business applications
consumer applications
application checks
latent application
application bugs
previous system
compatibility layer
layer makes
bug-for-bug compatible
previuus versions
windows windows
windows xpf
releasesf maintains
maintains support
16-bit applications
conversionf layer
api calls
calls similarlyf
thunking layer
native 64-bit
64-bit calls
additionf posix
posix support
posix subsystem
unix-compatible software
software compiles
performance windows
multiprocessor environments
cache-line management
satisfy performance
performance requirements
optimized protocols
kernel-based graphics
synchronization algorithms
performance considerations
considerations related
cache lines
code-path length
critical functionsf
per-processor data
memory coloring
non-uniform n1emory
n1emory access
scalable locking
queued spinlocks
protocols helped
helped reduce
reduce system
system bus
bus cycles
lock-free lists
atomic read-modify-write
read-modify-write operations
interlocked increment
advanced locking
locking techniques
constitute windows
local procedure
procedure call
highperformance message
kernel dispatcherf
dispatcherf threads
higherpriority threads
symmetrical multiprocessing
multiprocessor computer
extensibility refers
computing technology
facilitate change
developers implemented
implemented windows
executive runs
protected mode
server subsystems
subsystems operate
programs written
microsoft windowsf
environmental subsystems
modular structure
additional environmental
loadable drivers
running windows
client-server model
supports distributed
remote procedure
procedure calls
open software
hardware architecture
processor-dependent code
dynamic link
upper layers
kernel depend
hal interfaces
underlying hardware
bolstering windows
hal manipulates
manipulates hardware
hardware differences
market reasons
reasons windows
intel ia32
compatible platforms
dec alpha
alpha platforms
ensure portability
portability windows
ia64 processors
processors microsoft
microsoft recognizes
multiplatform development
practical matter
maintaining portability
support windows
nls api
specialized routines
format dates
national customs
customs string
string comparisons
varying character
character sets
sets unicode
native character
character code
code windows
supports ansi
ansi characters
unicode characters
system text
text strings
resource files
languages multiple
multiple locales
multilingual individuals
layered system
main layers
user-mode subsystems
subsystems fall
provide security
security functions
chief advantages
section describes
auth.entication package
security account
account manq.ger
manq.ger database
database figure
block diagram
hardware-abstraction layer
hides hardware
upper levels
make windows
hal exports
virtual machine
machine interface
kernel dispatcher
single version
required-it runs
driver code
multiprocessing device
drivers map
map devices
administrative details
mapping memory
motherboard-specific facilities
main responsibilities
thread scheduling
exception handling
low-level processor
processor synchronization
power failure
object oriented
object type
system-defined data
data type
data values
attributes store
methods perform
kernel activities
synchronization primitives
timer managencent
software interrupts
deferred procedure
exception dispatching
executable code
scheduling state
actual priority
cpu-usage information
thread states
highest-priority ready
ready thread
multiprocessor system
standby state
preempted thread
allotted execution
dispatcher object
event signaling
thread enters
finishes execution
32-level priority
thread execution
execution priorities
variable class
real-time class
priorities ranging
dispatcher skips
dispatcher executes
special thread
idle thread
quantum runs
clock interrupt
interrupt queues
variable-priority class
base priority
priority lowering
cpu consumption
compute-bound threads
variable-priority thread
wait operation
dispatcher boosts
boost depends
thread waiting
large priority
priority increase
disk operation
good response
interactive threads
devices busy
spare cpu
cpu cycles
time-sharing operating
active gui
gui window
window receives
priority boost
scheduling occurs
wait state
thread terminates
higher-priority real-tince
real-tince thread
lower-priority thread
preferential access
access windows
key operating-system
operating-system data
common facilities
reference counting
control dispatching
objects include
event occurrence
action notification
notification events
waiting threads
synchronization events
single waiting
waiting thread
user-mode mutual
deadlock-free mutual
defsemaphore object
signal timeouts
periodic activity
dispatcher objects
open operation
code polls
dispatcher implements
asynchronous procedure
executing thread
procedure apcs
begin execution
terminate processes
deliver notification
completed apcs
specific threads
user code
postpone interrupt
interrupt processing
device-interrupt processes
remaining processing
dispatcher schedules
schedules software
device interrupts
deferring deviceinterrupt
deviceinterrupt processing
process timer
timer expirations
scheduling quantum
dpcs prevents
prevents threads
current processor
dpc routines
extended anwunt
dispatcher maintains
worker threads
threads isrs
dpcs queue
queue work
work itencs
threads dpc
call system
block execution
unlike apcs
routines make
trap handling
interrupts generated
software windows
architectureindependent exceptions
memory-access violation
violation integer
integer overflow
overflow floating-point
floating-point overflow
integer divide
floating-point divide
illegal instruction
instruction data
data misalignment
misalignment privileged
privileged instruction
page-read error
error access
access violation
violation paging
paging file
file quota
quota exceeded
exceeded debugger
debugger breakpoint
breakpoint debugger
debugger single
single step
trap handlers
handlers deal
simple exceptions
exceptions elaborate
elaborate exception
exception dispatcher
neve d.,.
exception record
exception handler
exception occurs
fatal system
system error
infamous blue
blue screen
signifies system
system failure
user-mode processes
environmental subsystem
debugger port
exception port
handler sends
dispatcher attempts
posix environment
environment translates
exception messages
interrupt dispatcher
handles interrupts
kernel trap-handler
trap-handler routine
interrupt object
information needed
object makes
interrupt-service routines
interrupt hardware
processor architectures
dispatcher maps
hardware interrupts
priority order
interrupt request
request levels
represent hardware
interrupt level
multiprocessor compute1
separate interrupt-dispatch
interrupt-dispatch table
out interrupts
kernel-level thread
isr returning
processing windows
takes advantage
deliver apcs
perform system
system functions
synchronizing threads
thread dispatches
handle timers
machine check
bus error
error power
power fail
fail interprocessor
interprocessor notification
irq hardware
interrupts dispatch
passive figure
enviromnental subsystems
object manager
process manager
call facility
cache manager
security reference
reference monitor
power managers
kernel-mode entities
generic set
programs windows
entities objects
executive component
object table
process user-mode
code accesses
opaque value
apis object
object handles
existing handle
process examples
objects threads
dispatcher waiting
memory apis
thread handles
objects file
open state
devices sections
map files
objects local-communication
local-communication endpoints
port objects
object instances
translating names
internal directories
symbolic links
managing object
object creation
deletion objects
reference counts
protected-mode code
kernel-mode components
manipulate objects
kernel handle
configuration information
information stored
system registry
plug-and-play device
device discovery
process ncay
ncay create
named object
process opens
first process
process processes
share objects
duplicating handles
temporary nance
nance exists
process holds
object names
file path
path names
space directories
device objects
objects representing
representing volumes
virtual functions
implementations provided
query jlame
make security
object operations
security descriptor
parse procedure
object begins
space path-name
path-name components
whack characters
current parse
parse directory
internal nodes
leaf object
components remaining
remaining path
parse procedures
objects belonging
wilcdows gui
configuration manager
-device objects
representing file
device object
type allocates
object fields
object-manager namespace
original absolute
absolute path
relative path
permit multiple
multiple nicknamesor
nicknamesor aliases-for
provide files
standard ms-dos
ms-dos drive
drive letters
drive names
sessions share
session basenamedobj
basenamedobj ects
named objects
objects created
process attencpts
remote computer
manager calls
parse method
network redirector
type specifies
data fields
implement operations
mapping names
applying security
pointer count
distinct references
references made
object protected-mode
handle count
handle table
table entries
entries referring
close routine
cleanup operation
last handle
operation tells
longer accessed
sharing restrictions
range locks
open routine
handle close
close removes
internal system
additional references
final reference
delete procedure
close operation
temporary object
object completes
object permanent
current boot
extra reference
permanent objects
last reference
permanent object
manager removes
deleted permanent
drive-letter mappings
symbolic link
link objects
managed objects
user-mode api
existing object
duplicated handle
open handles
standardized interface
object handle
identifier unique
system resource
resource handles
whert child
child processes
out-of-process execution
execution contexts
natural place
check security
manager checks
enforces quotas
maximum amount
memory occupied
referenced objects
accumulated charges
charges exceed
login process
process authenticates
access token
primary group
default access-control
access-control list
controls access
thread making
thread token
process token
execute code
clients windows
security ids
rights granted
thread attempts
system compares
deny access
open occurs
occurs operating-system
operating-system components
components executing
mode bypass
access check
avoid security
security vulnerabilities
leaving checks
checks disabled
user-modeaccessible handle
untrusted process
object determines
default list
access-token object
controls auditing
object accesses
security log
administrator monitors
discover attempts
access protected
protected objects
memory allocation
manager assumes
hardware supports
virtual-to-physical mapping
paging mechanisnc
transparent cache
cache coherence
multiprocessor systems
allowing multiple
page frame
page-based management
management scheme
page size
la32-compatible processors
ia64 pages
system pages
previous contents
la32 processors
operating-system code
key areas
kernel-mode region
hardware references
physical page-frame
page-frame numbers
manager maps
addresses hyperspace
hyperspace maps
working-set information
kernel-mode address
session space
session-specific drivers
terminal-server session
kernel-mode threads
space rum1ing
data caching
large applications
sql databases
larger user-mode
two-step process
allocate user
user memory
first step
step reserves
step commits
paging files
process consumes
committed memory
process decommits
decommits memory
process object
subsystems manage
selected pages
file processes
raw physical
physical mernory
map regions
space ia32
ia32 processors
address extension
address windowing
windowing extension
allocate physical
awe facility
sql database
implements shared
section object
process maps
memory portion
process redefines
gain access
entire object
shared-memory section
maximum size
system-paging file
section appears
processes attempting
protection settings
no-access page
page raises
faulty program
program iterates
user-mode memory
memory allocator
special kernel
kernel allocator
device verifier
detect buffer
buffer overruns
copy-on-write mechanism
mechanism enables
independent copies
manager places
shared copy
copy-on-write property
modify data
manager makes
private copy
multilevel page
address extensions
extensions enabled
pde points
pte points
total size
manager pages
individual tables
page directory
manager self-maps
additional memory
memory accesses
single page-directory
page-directory entry
hardware requires
table occupy
sii gle
gle page
page determine
ia32-compatible processors
pae enabled
10-bit value
address pointer
byte address
32-bit virtual-memory
virtual-memory address
address selects
table layout
pte specifies
specific byte
mmu creates
32-bit pte
ia32 hardware
hardware reserves
caching attributes
access mode
processors running
page-frame number
number field
secondlevel page
page directories
space requires
extra level
pdes translation
32-bit virtual
top-level directory
directory index
second-level page
associative memory
memory cache
virtual pages
ia32 architecture
virtual-to-physical address
hardware mmu
ta64 invokes
software-trap routine
supply translations
translations missing
manager flexibility
three-level tree
tree structure
rnapping user-mode
ptes occupy
top-level pdes
second-level pdes
page offset
user portion
current version
full advantage
ia64 processor
memory references
references required
handle tlb
tlb misses
space supported
valid page
free page
zeroed page
zero-on-demand faults
modified page
standby page
disk standby
standby pages
modified pages
exploit locality
bad page
hardware error
transition page
frame allocated
valid bit
manager defines
bits invalid
invalid pages
states represented
pte page-file
page-file pages
files mapped
section objects
objects encode
object pages
page file
actual structure
page-file pte
page protection
page-file offset
page state
invalid virtual
pte structure
significant bit
system data
temporary states
page-file page-table
working set
modified list
standby list
free list
idle cpu
zeroed list
list transition
transition pages
describe pages
virtual page
process page
mmu reads
shared page
prototype pte
prototype pies
pies needed
mapped view
improves performance
page-frame address
state bits
first access
page generates
normal manner
page marked
longer shared
physical m.emory
turn points
page page
page frames
valid pte
page type
valid pies
page-frame database
marked dirty
manager finds
zero-on-demand pages
first choice
faulted page
fron1 disk
file systein
list pages
thread blocks
working-set manager
manager trims
trims pages
per-process first-in
default minimum
working-set size
pages windows
page faulting
minimum working-set
manager replaces
trimming cycles
pte trimmed
trimmed pages
modified bit
research shows
memory referencing
adjacent pages
sequential instructions
manager faults
total number
faults writes
reserved memory
splay tree
faulting address
manager searches
missing pte
page-table page
parent-child relationships
process hierarchies
created thread
scheduling takes
threads processes
large units
job objects
cpu usage
processor affinities
control multiple
large data-center
data-center machines
process creation
api environncent
api application
application calls
calls createprocess
api subsystem
original process
returns handles
process handle
initial thread
user-mode image
image loader
created process
process windows
unix fork
posix environmental
api environment
environment calls
cross-process nature
subsystem process
threads apcs
terminate threads
debuggers user-mode
signal-like notifications
send alerts
debugger support
manager includes
resume threads
suspended mode
process-manager apis
register context
existing threads
process originating
work request
supports impersonation
thread running
security token
thread-specific token
token belonging
clientserver computing
computing model
client-server nlodel
environn ental
ental subsystems
operating-system services
subsystems security
security management
printer spooling
web services
memory footprint
multiple services
user-mode thread-pool
thread-pool facilities
share threads
pass requests
single machine
request services
subsystems lpc
rpc mechanisms
local machine
message-passing mechanism
process publishes
visible connection-port
connection-port object
corn1.ection-port object
connection request
server creates
charn1.el consists
private communication
communication ports
client-to-server messages
server-to-client messages
messages communication
communication channels
channels support
callback mechanism
accept requests
lpc channel
message-passing tecl111.iques
first technique
small messages
hundred bytes
message queue
intermediate storage
larger messages
sharedmemory section
channel messages
size information
information referring
large messages
sender places
places data
shared section
receiver views
teclu ique
api window
window manager
executive lpc
lpc facilities
client asks
window-manager messaging
server sets
dedicated server
server thread
handle requests
event-pair object
provide notification
client thread
api server
vice versa
object passes
object performs
performs synchronization
object eliminates
eliminates message
message copying
port object
pass messages
thread eliminates
scheduling preference
server threads
network drivers
filter drivers
manages buffers
memory-mapped file
handles caching
including setting
initiating threads
completion ports
single thread
manager converts
standard form
first driver
driver processes
worker thread
continue processing
system context
original thread
driver returns
status indicating
arbitrary context
final processing
originating thread
stack model
driver stack
operation mount
mount management
partition management
functionality implemented
execute beneath
stack file-system
file-system filter
drivers execute
implement functionalities
hierarchical storage
storage management
management single
single instancing
remote boot
dynamic forncat
forncat conversion
implement virus
virus detection
windows driver
driver model
model lays
layer filter
common code
handling power
plug-and-play requests
correct cancellation
cancellation logic
full wdm
wdm device
hardware device
excessive amount
model makes
similar devices
audio drivers
scsi devices
ethernet controllers
device shares
common driver
port driver
driver implements
standard operations
device-specific routines
device-specific functionality
centralized caching
caching facility
manager caching
raw blocks
system recall
space comprise
system area
manager allocates
system cache
maps files
cache block
memory-mapped region
control block
file offset
vacbs reside
single array
array maintained
separate vacb
vacb index
index array
s-entry vacb
array points
manager receives
user-level read
read request
manager sends
device-driver stack
file resides
system attempts
requested data
noncached read
manager calculates
array corresponds
byte offset
vacb array
copy data
mapped file
copy succeeds
fault figure
copy fails
non cached
cached read
paging operation
page allocated
completed figure
synchronous operations
mechanism parallels
normal irp-based
extended period
operation fails
normal irp
irp path
kernel-level read
read operation
user space
file-system metadata
mapping interface
pinning interface
page locks
physical-memory page
system asks
manager flushes
small history
history attempts
future requests
access forward
prefetches data
application finds
win32 apt
apt openfile
file_flag_sequentialscan flag
normal amount
default behavior
write-back caching
cachewriter thread
write-through caching
cache-flush function
fast-writing process
free cache
cache pages
cache-writer thread
cache writer
writer prevents
cache memory
blocks processes
write data
flush pages
network transfers
waste network
network bandwidth
network redirectors
move data
dma interface
data directly
directly moving
moving data
directly avoids
intermediate buffer
monitor centralizing
centralizing management
system entities
manager enables
uniform mechanism
run-time access
access validation
audit checks
security tokens
special privileges
restore operations
debug processes
access objects
users restricted
restricted tokens
untrusted code
logging security
security audit
audit events
security rating
rating requires
trace attempts
unauthorized access
making access
audit records
security-event log
pnp standard
pnp manager
installed devices
system operates
potential resources
takes care
memory ranges-has
remove device
installing device
study system
pcmcia cards
laptop docks
hot-pluggable devices
configurable resources
manager handles
dynamic reconfiguration
bus driver
installed driver
add-device request
manager figures
optimal resource
resource assignments
start-device request
resource assignment
query-stop request
temporarily disabled
pending operations
stop request
pccard device
surprise-remove request
device fails
user removes
remove request
request tells
supports sophisticated
sophisticated power
power management
home systems
reduce power
promoting ease
quicker access
battery life
individual devices
low-power mode
sleep mode
data retention
phone line
modem rings
user opens
soft power
power button
button windows
memory contents
execution continues
reducing power
processor loop
state requiring
lower power
cpu clock
clock speed
significant power
registry windows
internal database
registry database
separate hives
system information
default user
user preferences
software installation
registry manager
system hive
user installs
installs software
system-hive configuration
last-known-good configuration
software states
driver executables
working state
system boots
hardware powers
bios begins
bios identifies
bootstrap loader
file-system format
ntldr program
system device
device ntldr
ntldr loads
hal library
boot device
boot drivers
ntldr begins
begins kernel
kernel execution
kernel initializes
internal worker
first user-mode
user-mode process
process created
unix smss
including establishing
loading device
csrss processes
processes csrss
winlogon brings
lsass security
security subsystem
remaining services
services needed
system optimizes
boot process
pre-loading files
disk based
previous boots
system disk
access patterns
out system
system files
operations required
processes required
grouping services
approaches contribute
dramatic reduction
hibernation capabilities
quickly resume
processes layered
native windows
executive services
enable windows
single application
api subsysten1
main operating
operating environment
subsystem starts
subsystem calls
manager returns
win32 indicating
native win32
environment checks
takes control
application startup
lpc facility
provide operatingsystem
mixing api
api routines
application cam1.ot
cam1.ot make
separate user-mode
graphical display
display capabilities
environment categorizes
categorizes applications
character based
character-based application
interactive output
window win32
api transforms
graphical representation
command window
output routine
win32 routine
environment performs
characterbased windows
screen text
transformation works
ms-dos applications
command-line applications
ms-dos environment
emulate intel
ms-dos rom
rom bios
software-interrupt services
virtual device
command shell
32-bit executables
ms-dos application
shell starts
vdm process
ia32-compatible processor
graphical applications
full-screen mode
character applications
full screen
applications access
disk hardware
access hardware
multitasking environment
busy loops
dispatcher detects
offending application
windows environment
win16 execution
additional software
kernel routines
stub routines
api subroutines-converting
16-bit addresses
32-bit addresses
addresses applications
internal structure
16-bit window
underlying win32
api implementation
multi task
win16 application
input queue
features imply
receivil1.g input
win16 applications
enable multiple
multiple win16
win16 environments
command start
command line
common installation
wow32 environment
environment conti11.ues
native ia64
ia64 il1.struction
il1.struction set
execute ia32
ia32 programs
environment requires
32-bit win32
applications require
require translation
64-bit windows
windows supports
wow64 environment
direct execution
ia32 instructions
wow64 achieves
win32 environment
main subsystem
runs win32
api applications
controlling environment
extremely robust
api contribute
win16 environment
win32 process
manager dispatches
terminate applications
longer needed
prevent crashes
wrong handle
subsystem verifies
handle points
manager prevent
prevent objects
high level
individual applications
behavior expected
applications expect
latent bugs
implementation running
shims enabled
reduced performance
limited interoperability
posix subsysten1
applications written
unix model
subsystem server
server psxss
psxss exe
library psxdll
psxdll dll
posix console
console session
session manager
redirection mechanism
environment enforces
unix-like permissions
directory trees
scheduling issues
posix system
professional desktop
latest version
security subsystems
logon service
winlogon winlogon
secure attention
attention sequence
required n1echanism
trojan horse
logon screen
change passwords
user logs
smart card
personal identification
identification number
security policies
local security
security authority
authority subsystem
generates access
access tokens
represent users
perform authentication
logon subsystem
network server
authentication package
account information
local database
quota limits
user attempts
checks privileges
default authentication
kerberos lsass
implementing security
security policy
strong passwords
authenticating users
performing encryption
ms-dos systems
file-allocation table
16-bit fat
fat file
internal fragmentation
size limitation
access protection
32-bit fat
fragmentation problems
modern file
ntfs file
including data
data recovery
fault tolerance
large files
multiple data
data streams
unicode names
sparse files
volume shadow
shadow copies
basic file
read floppies
removable media
fat32 continues
additional file-system
common formats
dvd media
fundamental entity
logical disk
disk management
management utility
disk partition
entire disk
individual sectors
disk sectors
cluster size
default cluster
sector size
larger volumes
size reduces
disk addresses
disk offset
simple byte
byte stream
structured object
object consisting
independent byte
attribute types
ms-dos shortname
specifies access
control user
user data
data attributes
traditional data
unnamed data
data attribute
additional data
explicit names
macintosh files
files stored
resource fork
named data
iprop interfaces
component object
object model
store properties
ordinary files
including thumbnails
attribute syntax
syntax ntfs
ntfs returns
unnamed attribute
file-query operations
dir command
array stored
special file
small attributes
mft record
large attributes
unnamed bulk
bulk data
small file
fit inside
-one record
overflow records
additional pointers
ntfs volume
file reference
64-bit quantity
48-bit file
file number
16-bit sequence
sequence number
record number
array slot
mft entry
number enables
enables ntfs
internal consistency
consistency checks
stale reference
deleted file
ntfs namespace
file names
top level
large directory
disk extents
update timestamp
resident attributes
mft copies
directory listing
efficiently generated
update times
mft entries
ntfs metadata
first file
files described
metadata updates
file-system hierarchy
startup code
disk address
simple rom
rom bootstrap
boot file
bad areas
error recovery
simple file
entire volume
unix store
store redundant
redundant metadata
sck program
consistent state
state restoring
damaged files
freeing data
data clusters
metadata structures
slow process
significant amounts
ntfs takes
file-system robustness
filesystem data-structure
data-structure updates
performed inside
inside transactions
transaction writes
log record
undo information
commit record
transaction succeeded
first redoing
committed transactions
checkpoint record
log file
system_ startup
file-system recovery
user-file contents
metadata files
transaction scheme
cover user
user files
metadata file
fixed maximum
circular queue
holds context
context information
logging area
start reading
restart area
area holds
logging functionality
performing recovery
recovery actions
log-file service
service queues
queues pending
pending transactions
ntfs halts
in-progress operations
ntfs calls
queued transactions
file references
access privileges
normal operation
enforce permissions
enabled traversal
traversal checks
modem parsing
prefix matching
component-by-component opening
volume management
tolerance ftdisk
fault-tolerant disk
disk driver
combine multiple
multiple disk
logical volume
volume set
multiple disks
large logical
logical drive
physical partitions
bitmap metadata
added space
space ntfs
ntfs continues
lcn mechanism
ftdisk driver
driver supplies
logical-volume offset
stripe set
round-robin fashion
raid level
stripe size
first disk
physical partition
allocation wraps
wraps ar01md
set forms
physical layout
raid levels
levels suppose
data stripes
data stripe
eighth disk
parity stripe
byte-wise exclusive
reconstruct data
data makes
disk array
lose data
disk failure
requires recalculation
concurrent writes
require updates
parity stripes
data disks
avoid creating
round-robin style
equal-sized partitions
partitions located
separate disks
disk mirroring
robust scheme
application writes
writes data
mirror set
ftdisk writes
data contents
partition fails
mirror mirror
mirror sets
mirror half
disk controller
disk controllers
sedor sparing
cluster remapping
hardware technique
sector sparing
software technique
hardware capability
capability provided
logical block
block numbers
good sectors
extra sectors
sectors unmapped
sector fails
ftdisk instructs
technique performed
ntfs substitutes
unallocated block
affected pointers
mft ntfs
bad block
usual outcome
data loss
fault-tolerant volumes
read fails
system reconstructs
reconstructed data
encryption ntfs
perform data
data compression
individual tlles
ntfs divides
contiguous clusters
compression unit
data-compression algoritln11
result fits
compressed version
stored compression
contiguous compression
compression units
ntfs prefetches
application requests
save space
space clusters
virtual-duster numbers
numbers stored
ntfs finds
ntfs supports
supports encryption
individual files
entire directories
security system
key-recovery service
lost keys
mount points
points mount
organizing disk
disk volumes
global names
mount point
true volume
long transition
drive-letter scheme
journal ntfs
journal describing
system user-mode
user-mode services
receive notifications
content-indexing service
change journal
identify files
filereplication service
copies windows
shadow copy
volume making
blocks modified
volume requires
stable state
server version
documents stored
earlier points
recover files
previous version
backup tape
client-server networking
networking components
provide data
data transport
i11terprocess communication
file sharing
send print
print jobs
remote printers
network interfaces
describe networking
internal networking
networking interfaces
separate network
network adapters
transport protocols
network layers
iso model
transport layer
session layer
interface enables
session-layer component
transport mechanism
similar reasoning
reasoning led
streams mechanism
tdi supports
connectionless transport
protocols windows
implements transport
change windows
network functionality
server-message block
smb protocol
message types
types session
session control
control messages
redirector corldection
shared resource
file messages
server printer
printer messages
send data
remote print
receive status
status information
message messages
hardware-abstraction interface
bios hardware-abstraction
interface devised
pcs running
running ms-dos
ms-dos netbios
standard network-programming
network-programming interface
interface netbios
logical names
logical connections
reliable data
data transfer
smb requests
netbios extended
extended user
efficient networking
default protocol
peer networking
workgroups windows
share resources
transmission control
facto standard
standard networking
networking infrastructure
lip package
package includes
simple network-management
network-management protocol
dynamic host-configuration
host-configuration protocol
windows internet
netbios support
point-to-point tunneling
tunneling protocol
protocol provided
remote-access server
server modules
modules running
server machines
client systems
remote-access servers
encrypt data
novell netware
netware protocols
etware protocols
ipx datagram
datagram service
spx transport
nwlink protocol
protocol connects
netware networks
client service
netware client
protocol enables
netware server
web-distributed authoring
versioning protocol
http-based protocol
collaborative authoring
network windows
webdav redirector
system building
system enables
enables webdav
personal files
public place
appletalk protocol
low-cost connection
macintosh computers
share files
files windows
windows services
macintosh package
distributed-processing mechanisms
distributed operating
support distributed
distributed applications
applications mechanisms
distributed processing
include netbios
named pipes
windows sockets
microsoft interface
interface definition
definition language
netbios applications
connection-oriented messaging
messaging mechanism
mechanism named
high-level interface
netbios connections
na1ned pipes
file-system interface
pipe names
typical remote
server_name identifies
share_name identifies
network users
normal file
connectionless messaging
intended recipient
recipient receives
broadcast applications
finding components
windows computer
computer browser
browser service
sockets api
api winsock
session-layer interface
unix sockets
added windows
addressing schemes
winsock application
winsock-compliant protocol
client-server mechanism
client calls
local procedure-a
procedure-a stub
routine-which packs
client-side stub
stub routine
server unpacks
return results
client stub
stub unblocks
rpc mechanism
computing-environment standard
rpc messages
highly portable
rpc standard
architectural differences
binary numbers
computer words
standard data
data formats
send rpc
lan manager
manager networks
discussed earlie1
processes running
transmit arguments
simple description
procedure names
language generates
generates header
header files
remote procedures
data types
return-value messages
generates source
client side
server side
application executes
rpc stub
generated code
code handles
objects provide
inserting spreadsheets
microsoft documents
distributed extension
network utilizing
utilizing rpc
transparent method
windows systems
client-side object
servers run
detait access
file occurs
standard unc
unc format
manager builds
request packet
manager recognizes
mup sends
registered redirectors
request responds
redirector sends
network request
remote system
remote-system network
drivers receive
server driver
driver hands
local file-system
file-system driver
proper device
requesting redirector
calling application
similar process
process occurs
api network
network api
unc services
multi-provider router
tdi api
network transport
higher-level protocol
protocol mentioned
system unc
unc names
server windows
network administrator
files multiple
multiple servers
folder redirection
client-side caching
business users
give users
longer attached
user takes
off-line access
redirected files
server files
networked environments
natural groups
computer laboratory
shared resources
global access
relationship whatsoever
domain-name system
maps internet
internet host
host names
common security
user database
kerberos protocol
kerberos realm
backup domain
domain controllers
versions required
one-way trusts
domains windows
hierarchical approach
approach based
transitive trusts
approach reduces
trusts required
domain trust
domain controller
correct information
users retain
restrict access
domain trees
multiple domains
single organization
contiguous dns
dns naming
managing multiple
children-domains research
noncontiguous names
domain tree
trust relationships
relationships trust
cross-link versions
trust domain
trusts band
call trust
authentication traffic
traffic suppose
leaf nodes
standard transitive
transitive trust
authentication requests
cross-linking trust
directory stores
topology information
doncain-based user
group accounts
domain-based store
group policies
establish uniform
uniform standards
desktop preferences
corporate information-technology
information-technology groups
computing intellimirror
corporate server
resolving www.bell-labs.com
including windows
broadcast-name resolution
lmhosts file
wins servers
servers maintain
dynamic database
name-to-if address
address bindings
client software
wins service
server failure
name-resolution workload
multiple machines
dhcp updates
updates address
address configurations
wins database
administrator intervention
dhcp client
client starts
discover message
dhcp server
message replies
offer message
client chooses
selected dhcp
server responds
client attempts
fundamental interface
main aspects
handle a_semaphore
char comand_line
ostrstream ostring
ostring a_semaphore
a_semaphore ends
_process exe
code enabling
application programs
programs obtain
manipulating kernel
process gains
gains access
kernel object
object named
named xxx
createxxx function
process depending
function fails
special constant
constant named
named invalid.j1andllvalue
object drops
sharing objects
processes windows
parent calls
parent supplies
securities__attributes structure
blnheri thandle
thandle field
field set
field creates
inheritable handle
binheri thandle
thandle argument
argument figure
code sample
semaphore handle
handle inherited
achieve interprocess
first command-line
command-line argument
named pipe
unrelated processes
createxxx functions
lpszname parameter
a_semaphore createsemaphore
handle b_semaphore
b_semaphore opensemaphore
calling openxxx
method requires
executing instance
routine loads
link libraries
additional threads
give process
memory object
handle process_a
semaphore figure
run-time functions
maintain state
static variables
multithread application
unsynchronized access
wrapper function
function beginthreadex
instance handles
file loaded
instance handle
base address
null pointer
scheduling model
priority values
chosen win32
priority classes
idle_priority _class
priority level4
normal_priority _class
priority level
high_priority _class
priority levell3
real time_priority
time_priority _class
priority level24
typically members
normalpriority _class
idllpridrity _class
priority class
setpriori tyclass
start command
cbserver exe
cbserver program
realtime_ pridrity
pridrity _class
increase scheduling
priority privilege
realtimlpriority_class administrators
scheduling rule
interactive program
special scheduling
_class windows
foreground process
background processes
process moves
performance option
system section
control panel
time-sharing preemption
preemption occurs
thread priorities
thread starts
priority determined
function takes
thread_priority _below_normal
thread_priority _normal
thread_priority _above_normal
thread_priority _highest
priority recall
realtime class
class thread_priority
thread_priority _idle
_idle sets
variable-priority threads
thread_pridritltimlcritical sets
kernel adjusts
cpu bound
setprocesspriori tyboost
setthreadpriori tyboost
thread synchronization
thread makes
suspend thread
functions set
synchronization objects
synchronized region
thread establishes
calling ini
ini tializecri
tializecri ticalsection
call entercri
entercri ticalsection
leavecri ticalsection
routines guarantee
multiple threads
threads attempt
critical-section mechanism
kernel-synchronization objects
allocate kernel
encounters contention
user-defined scheduling
multiple fibers
multiprocessor hardware
legacy unix
fiber-execution model
system creates
convertthreadtofi ber
primary difference
call swi
swi tchtofiber
calling deletefiber
thread pool
pool repeated
repeated creation
work requests
bind callbacks
waitable handles
registerwai tforsingleobj
tforsingleobj ect
,and apis
increase performance
performance threads
pool attempts
outstanding threads
delaying work
timer-callback apis
fewer threads
waitable handle
lnterprocess communication
communication win32
applications handle
handle interprocess
sharing kernel
passing messages
windows gui
gui applications
calling postmessage
,or sendmessagecallback
message differ
post routines
calling thread
send routines
separate address
system copies
copies data
calling sendmessage
type wm_copydata
copydatastruct data
receiving process
unlike threads
16-bit windows
api thread
receives messages
space void
void buf
space virtualalloc
memory virtualfree
allocated address
space virtualfree
code fragments
shared input
separate queues
stuck application
block input
call getmessage
handle events
queue fills
system marks
thread-local storage
calls virtualalloc
memory page
starting address
allocated region
ox10000 examples
committed pages
calling virtuallock
calls setprocessworkingsetsize
memory-mapping files
space memory
share memory
processes map
memory memory
multistage process
file handle
file-mapping object
handle hfile
file mapping
size handle
handle hmap
space mapped
file unmapviewoffile
reserved address
api process
api functions
default heap
space-allocation data
concurrent updates
heap-management functions
private heap
exclusive access
unlike virtuallock
functions perform
lock pages
storage mechanism
mechanism functions
static data
multithreaded environment
runtime function
function strtok
static variable
concurrent threads
execute strt
separate current
position variables
mechanism allocates
global storage
per-thread basis
static methods
dynamic method
thread-local static
application declares
dword cur_pos
variable dword
dword var_index
value int
int var
var t1sgetvalue
index t1sfree
dynamic thread-local
design.ed windows
system -one
hardware windows
supports multiple
operating environments
64-bit processors
numa computers
basic services
client-server computing
application environments
programs compiled
scheduling windows
model stronger
previous microsoft
microsoft operating
includes internationalization
internationalization features
features windows
cu1.d upgrade
upgrade hardware
booting process
windows32 api
page facility
facility provided
calls facility
main architectural
architectural layers
programs executing
executing inside
protection guarantees
guarantees provided
applications executing
application executing
32-bit application
fiber abstraction
abstraction provided
threads abstraction
programs developed
manager improve
communicating data
message-passing teclllliques
ntfs handle
handle data
system crash
recovery takes
64-bit address
decision made
ntfs directory
structure differ
manages caching
process obtain
handle solomon
considerable technical
technical detail
system internals
components tate
good reference
server resource
resource kit
six-volume set
deploying windows
microsoft developer
developer network
network library
microsoft products
directory richter
writing programs
api silberschatz
good discussion
fundamental concepts
one-of-a-kind systems
presentation highlights
early systems
include references
technical content
operating-system features
features migrate
large computer
important operating
huge systems
small systems
microcomputers shows
operating-system concepts
feature migration
long history
migration started
multiplexed information
computing services
system multics
massachusetts institute
complex mainframe
mainframe computer
bell laboratories
original partners
pdp-11 minicomputer
recent operatirlg
operatirlg systems
mac osx
osx operating
system linux
linux includes
historical overview
early computer
computing starts
twentieth century
computing devices
perform specific
fixed tasks
tasks modifying
tasks required
manual labor
alan turing
john von
von neumann
general-purpose computer
program store
data store
fundamental computer
computer concept
general-purpose computers
world war
first working
working stored-program
manchester mark
first commercial
commercial computer
ferranti mark
early computing
computing efforts
early computers
enormous machines
machines run
front panel
panel switches
paper tape
punched cards
program ran
display lights
console output
dedicated computer
developed card
card readers
lil1.e printers
magnetic tape
commonplace assemblers
programming task
task libraries
common functions
providing software
software reusability
careful programming
special subroutine-called
driver-was written
control bits
status bits
simple task
paper-tape reader
complex sequences
device-specific operations
languages appeared
fortran program
fortran compiler
proper tape
tape drive
card reader
compiler produced
produced assembly-language
assembly-language output
procedure required
supporting library
library routines
binary object
object form
significant amount
job consisted
separate steps
compiler tape
tape running
compiler unloading
tape loading
assembler tape
assembler unloading
object program
program running
error occurred
job step
magnetic tapes
paper tapes
punch cards
job set-up
real problem
cpu sat
sat idle
idle remember
cost millions
operational costs
owners wanted
shared computer
professional computer
computer operator
longer operated
mounting tapes
programmer provided
short description
incorrect program
program error
dump dumping
registers allowed
difficult debugging
debugging problem
operator received
fortran job
cobol job
compiler tapes
fortran programs
saving operator
monitor figure
resident monitor
job stopped
abnormal termination
dump memory
people developed
first rudimentary
rudimentary operating
small program
moni loj
transfer control
program terminated
return control
programmer included
control cards
contained directives
monitor indicating
normal user
separate control
control card
job-first card
end-final card
machine resources
programmer parameters
account number
program cards
usual solution
special character
dollar-sign character
first colun
code ibm
job control
control language
slash marks
columns figure
sample card-deck
card-deck setup
simple batch
batch system
identifiable parts
insh uctions
control-card interpreter
load system
system programs
an.d application
providing continuity
saving memory
batch systems
systems work
automatic job
job sequencing
monitor loads
transfers control
program completes
card deck
human operation
operating-system software
sequencing elim.inates
human set-up
electronic devices
slow cpu
cpu works
licrosecond range
instructions executed
fast card
technology resulted
cpu speeds
speeds increased
common solution
slow card
input devices
line printers
output devices
magnetic-tape units
systems reading
card punches
separate device
equivalent record
lilce printers
main computer
obvious advantage
off-line operation
mam computer
longer constrained
tape units
reader line
line printer
reader tape
tape drives
drives tape
drives iine
iine printer
similar equipment
real gain
multiple reader-to-tape
tape-to-printer systems
process input
read cards
readers working
cpu busy
however-a longer
longer delay
job run
additional jobs
free tape
similar jobs
off-line preparation
jobs continued
systems disk
disk systems
tape systems
cpu read
entire tape
nature devices
devices disk
systems eliminated
position needed
disk system
card images
system satisfies
card-reader input
job requests
system buffer
simultaneous peripheral
peripheral operation
operation on-line
on-line spooling
huge buffer
storing output
output files
disk line
processing data
remote sites
cpu sends
communication paths
remote printer
entire input
input job
remote card
remote processing
cpu intervention
spooling overlaps
simple systen
output lines
direct beneficial
beneficial effect
devices working
rates spooling
spooling leads
atlas operating
standard parts
systems device
major part
special instructions
extra codes
batch operating
spooling spooling
schedule jobs
tape readers
tape punches
fuce printers
remarkable feature
primary memory
atlas system
small amount
core memory
drum demand
transfer information
british computer
48-bit words
words addresses
large address
98-kb-word drum
512-word pages
registers implemented
fault occurred
page-replacement algorithm
memory frame
drum transfer
start immediately
algorithm attempted
future memory-accessing
memory-accessing behavior
behavior based
past behavior
reference bit
reference bits
recent reference
largest t2
algorithm assumes
programs access
access memory
xds-940 operating
time-shared system
pages contained
reentrant code
code processes
xds-940 system
modified xds-930
basic computer
user-monitor ltlode
system-call instruction
user-mode instruction
instruction set
resources files
256-word blocks
bit map
free drum
drum blocks
index block
actual data
blocks index
index blocks
provided system
destroy subprocesses
synchronization process
creation defined
technische hogeschool
dutch computer
clean design
layer structure
processes employing
employing semaphores
active agents
print user
priority cpu-scheduling
scheme gave
software paging
paging scheme
algol compiler
generated calls
system routines
requested information
512-kb-word drum
512-word page
lru page-replacement
page-replacement strategy
major concern
deadlock control
provide deadlock
venus system
layer-structured design
synchronize processes
lower levels
faster system
paged-segmented memory
time-sharing system
design concepts
specific system
system rathel
operating-system nucleus
complete operating
system structure
lower levels-comprising
kernel supported
round-robin cpu
cpu scheduler
primary communication
synchronization itl.echanism
kernel processes
fixed-sized rnessages
common buffer
buffer pool
ncessage buffer
longer required
common pool
fifo order
primitive operations
out buffer
out sender
out message
out resul
out result
operations allowed
allowed processes
primitives required
process service
developers provided
additional communication
communication primitives
input character
compatible time-sharing
experimental time-sharing
interactive users
interactive commands
manipulate files
memory made
36-bit words
users user
memory images
fast drum
drum cpu
multilevelfeedback queue
queue algorithm
highest level
shortest quantum
run first
initial level
practical mode
increased development
time-sharing systems
multics operating
natural extension
ctss ctss
early tin
e-sharing systems
larger computers
ctss set
time-sharing utility
computing service
electrical power
telephone wires
vast file
shared programs
computer department
pagedsegmentation memory
memory hardware
18-bit segment
segment number
16-bit word
word offset
1-kb-word pages
second-chance page-replacement
file segments
multilevel tree
allowing users
subdirectory structures
multilevel feedback
feedback queue
access list
protection rings
executing processes
system continued
longest line
operating-system development
ibm computers
early ibm
prime examples
privileged instructions
batch processing
independent sites
computers spanning
complete range
small business
business machines
large scientific
scientific machines
reduce maintenance
maintenance problems
move programs
ibm system
system included
type field
file types
variable-length records
unblocked files
contiguous allocation
output file
added parameters
average user
memory-management routines
base-register addressing
addressing mode
base register
absolute addresses
arrangement prevented
separate versions
fixed regions
variable regions
tables operating-system
operating-system overhead
fix errors
remote part
system remained
hardware provided
segmented-paged virtual
large virtual
ctss system
mit decided
switched vendors
vendors ibm
time-shared utility
sites purchased
tiine-sharing systems
temporary systems
time-sharing option
cambridge scientific
scientific center
center developed
developed cms
single-user system
temporary system
ibm systems
multics achieved
commercial success
wrong part
advanced systems
purposes minicomputers
minicomputers died
special-purpose servers
computers continue
servers tend
cpus today
data centers
machine rooms
computers sit
desktop rivalry
microsoft continues
continues today
application functionality
long-term competitors
leading desktop
forms continues
technical users
nontechnical users
connected computer
system traces
accent operating
system developedatcarnegiemellon
developedatcarnegiemellon university
communication system
significant portions
thread management
mach scheduler
early version
mach shared-memory
memory-mapping system
critical goals
executable files
memory models
distributed computing
evolutionary path
mach code
developed inside
4.2bsd kernet
bsd kernel
components replaced
mach components
bsd components
communication subsystems
dec vax
vax computer
computer family
including multiprocessor
multiprocessor versions
vax versions
encore multimax
sequent balance
balance multiprocessor
including task
thread support
first official
official releases
provided compatibility
mach made
bsd kernels
kernels mach
bsd code
kernet leaving
smaller microkernel
system implements
basic mach
mach features
unix-specific code
user-mode servers
servers excluding
excluding unix-specific
simultaneous execution
operating-system interfaces
user-mode implementations
macintosh operating
machine concept
mach kernel
kernel interface
including single
single processor
processor sun
intet ibm
dec machines
multiprocessor dec
encore systems
industry attention
steve jobs
apple computer
computer fame
initial release
system competed
operati.j.l.g system
members osf
osf members
i.j.l.cluded key
key technological
technological companies
dec l.jn
unlike unix
incorporates multiprocessing
multiprocessing support
ranging rom
shared-memory systems
memory shared
processors mach
support multiprocessing
parallel computation
communication method
method ensures
protection mechanisms
integrating messages
daemons managing
great 1exibility
memory-objectmanaging tasks
complex functions
buik mach
mach reduces
operating-system emulation
user levet
virtual-machine systems
previous editions
system concepts
concepts included
entire chapter
fourth edition
lwww os-book
interesting properties
mcp operating
burroughs computer
system.programming language
supported segmentation
multiple cpus
scope operating
multi-cpu system
newer hardware
page replacement
replacement algorithm
clock algorithm
algorithm discussed
client
maintain
validity
information
amount
callback
chapter
maintained
server
excessive
break
callbacks
reclaim
storage
unilaterally
notifying
clients
revoking
cached
files
state
venus
out
sync
servers
inconsistency
result
caches
contents
directories
syncbolic
links
pathname
translation
component
path
fetched
established
lookups
locally
fids
requests
forwarded
end
path-name
traversal
intermediate
target
file
cache
future
open
calls
involve
network
communication
broken
exception
caching
policy
modification
directory
made
directly
responsible
reasons
integrity
vice
interface
well-defined
operations
purposes
reflects
copy
avoid
re-fetching
17.6.4
implementation
processes
interfaced
unix
kernel
usual
set
system
modified
slightly
detect
references
relevant
forward
client-level
process
workstation
carries
described
mapping
associates
volumes
locations
order
interrogation
volume
location
present
contacts
comcection
enters
connection
establishes
fetch
establishment
needed
authentication
security
found
created
local
disk
returns
opens
handle
low-level
afs
names
placeholders
entries
access
inodes
expensive
path-name-to-inode
routine
namei
internal
inode
visible
additional
added
dfs
journaling
improve
performance
reliability
ufs
manages
two
separate
status
data
simple
least-recently-used
lru
algorithm
bounded
size
flushed
notifies
remove
virtual
memory
rapid
servicing
stat
file-status-returning
resident
i
buffering
mechanism
blocks
transparent
single
services
req1.1ests
lightweight-process
package
non-preemptible
scheduling
service
concurrently
rpc
integrated
allowing
make
lightweight
built
top
datagram
abstraction
whole-file
transfer
implemented
side
effect
exists
priori
binding
connections
pool
multithreaded
structures
negative
crash
disastrous
paralyzing
file-service
devices
dispersed
sites
distributed
activity
carried
centralized
repository
multiple
independent
ideally
conventional
multiplicity
dispersion
distinguish
remote
locate
arrange
transport
facilitates
mobility
bringing
environment
site
logs
approaches
naming
schemes
simplest
approach
named
combination
host
guarantees
unique
system-wide
popularized
nfs
means
attach
giving
appearance
coherent
tree
handled
complementary
methods
accesses
delivered
machine
performs
results
back
satisfy
request
brought
performed
idea
retain
recently
accessed
repeated
traffic
replacement
problem
keeping
copies
consistent
master
cache-consistency
server-side
tracks
simply
knowledge
stateful
versus
stateless
paradigms
replication
machines
redundancy
improving
availability
multimachine
benefit
selecting
nearby
replica
serve
shorter
feature-rich
characterized
independence
transparency
imposes
significant
consistency
semantics
discuss
provide
systems
obtain
inconsistent
stale
scenarios
occur
sprite
actions
recover
preserve
guaranteed
advantages
disadvantages
ships
entire
requesting
circumstances
prefer
locationtransparent
location-independent
preferences
vlhich
dfss
discussed
large
multiclient
database
application
efficiently
explain
answer
benefits
objects
apollo
domain
drawbacks
compare
contrast
teclmiques
remotely
aspects
select
running
totally
reliable
recovery
control
replicated
examined
davcev
burkhard
management
environncent
covered
brereton
purdin
wah
discusses
issue
placement
computer
detailed
survey
appears
svobodova
sun
callaghan
sandberg
morris
howard
satyanarayanan
openafs
http
interesting
detail
text
including
united
locus
brownbridge
popek
walker
ousterhout
nelson
mobile
kistler
sobti
considerable
research
cluster-based
anderson
lee
thekkath
large-scale
wide-area
settings
presented
dabek
kubiatowicz
mechanisms
synchronize
number
ensure
atomicity
transaction
executes
isolation
transactions
operating
deal
deadlock
examine
synchronization
extended
handling
deadlocks
describe
achieving
mutual
exclusion
atomic
show
concurrency-control
prevention
avoidance
detection
determine
events
occurred
common
clock
applications
require
resource-allocation
scheme
resource
aft-er
granted
impossible
first
happened-before
relation
partial
ordering
ability
define
total
crucial
extending
18.1.1
sequential
executed
ordered
law
causality
message
received
happenedbefore
denoted
assuming
sending
receiving
constitutes
event
bare
a
band
b
happen
irreflexive
related
case
causally
affect
space-time
diagram
figure
illustrate
definitions
concurrency
horizontal
direction
represents
space
vertical
labeled
lines
denote
processors
dots
wavy
line
denotes
concurrent
q3
sil
happened
important
relative
care
agree
son1.e
18.1.2
perfectly
synchronized
clocks
defil
physical
associate
requirement
pair
timestamp
converse
true
enforce
global
logical
lci
counter
incremented
successive
increasing
value
assigns
occurs
bin
ensures
orderil
met
communicate
suppose
sends
lc1
receives
lc2
processor
slower
ticks
slowly
situation
violates
greater
resolve
difficulty
advance
current
particulm
tlcenit
finally
realize
observe
timestamp-ordering
timestamps
identity
numbers
ties
create
tirnestamps
section
18.4.2
algorithms
implementing
assume
consists
resides
simplify
discussion
numbered
uniquely
one-to-one
18.2.1
providing
chosen
coordinate
entry
critical
invoke
coordinator
reply
enter
exiting
release
proceeds
execution
checks
immediately
queued
removes
messages
queue
accordance
clear
addition
fair-such
first-come
firstserved
fcfs
scheduling-no
starvation
requires
critical-section
reques
fails
place
electing
elected
poll
reconstruct
constructed
computation
resume
18.2.2
fully
distribute
decision
making
solution
complicated
based
event-ordering
generates
send
defer
queueing
incmning
deferring
deferred
replies
defers
factors
entered
compares
incoming
asked
exhibits
desirable
behavior
obtained
freedom
ensured
scheduled
served
n-1
minimum
required
act
independently
functions
consisting
sections
participation
undesirable
consequences
joins
group
participating
mutual-exclusion
receive
gro11p
task
trivial
circulating
interested
reader
referred
bibliographical
notes
collapses
continuously
monitoring
notified
longer
failed
recovers
initiate
procedure
rejoin
pause
frequently
assure
intend
difficulties
protocol
suited
small
stable
sets
cooperating
18.2.3
token-passing
method
providilcg
circulate
token
ilc
special
type
passed
possession
entitles
holder
logically
organized
ring
long
connected
implement
pass
exits
passes
neighbor
similar
substituted
shared
variable
unidirectional
vary
high
contention
infinite
low
types
failure
considered
lost
election
generate
development
reconstructing
left
exercise
introduced
concept
program
unit
completion
dealing
ensuring
link
connecting
erroneous
computations
preserves
function
coordinating
initiated
starting
breaking
subtransactions
distributing
termination
committed
aborted
maintains
log
18.3.1
two-phase
commit
final
outcome
abort
property
execute
widely
protocols
completes
execution-that
inform
completed
-then
starts
2pc
phase
adds
record
prepare
forces
manager
determines
portion
oft
responds
ready
records
responses
pre-specified
interval
elapsed
essage
depending
verdict
forced
point
fate
sealed
unconditionally
tat
prior
promise
follow
tor
stored
crashes
unable
good
unanimity
note
decide
determined
writes
implementations
acknowledge
complete
18.3.2
failures
major
disadvantage
blocking
postponed
18.3.2.1
midst
alternatives
redo
undo
consult
tells
find
query-status
corrnni
tted
s1c
periodically
resend
inforn1.ation
absence
implies
responding
response
18.3.2.2
cases
wait
active
decided
draw
conclusion
preferable
tin
preceding
holds
made-or
is-until
remains
doubt
continue
hold
resources
locking
locks
hours
days
unavailable
increases
downtime
grows
blocked
pending
18.3.2.3
routed
arrive
destinations
intact
viewpoint
previous
apply
fail
partition
possibilities
exist
participants
remain
alternatively
belong
partitions
participant
reducing
move
part
maintaining
executing
accommodate
distribution
18.4.1
change
iil
lock
deals
allowed
general
existence
18.4.1.1
nonreplicated
applied
administer
unlock
items
wishes
item
qat
mode
locked
incompatible
delayed
n1.anager
initiator
indicating
advantage
transfers
ncessage
complex
deadlock-handling
modifications
18.4.1.2
single-coordinator
site-say
read
write
operation
involved
writing
lmlock
include
bottleneck
processed
vulnerability
controller
processing
stop
compromise
achieved
lockmanager
administers
subset
reduces
degree
complicates
18.4.1.3
majority
earlier
controls
replicas
inn
nlore
one-half
detern1.ines
concerned
operate
successfully
decentralized
manner
avoiding
central
suffers
four
full
exclusive
succeed
acquire
18.4.1.4
biased
difference
favorable
treatment
differently
imposing
overhead
frequency
reads
shares
complexity
18.4.1.5
primary
alternative
choose
reside
precisely
call
enables
unreplicated
inaccessible
accessible
timestamping
principal
serialization
generalizing
develop
generating
18.4.2.1
generation
purpose
concatenation
identifier
sign.ificant
position
generated
technique
na1nes
faster
rate
fast
larger
fairly
accomplish
fair
timestarnp
x,y
visits
xis
advances
assigned
provided
runs
slow
accurate
18.4.2.2
basic
6.9.4.3
straightforward
mamler
cascading
rollbacks
prevent
reading
eliminate
con
bine
serializability
leave
conflicts
resolved
waits
alleviate
buffer
delay
assured
causing
aborts
perform
wri
done
similarly
deadlock-prevention
deadlock-avoidance
deadlock-detection
18.5.1
resource-ordering
defining
nl1mber
holding
banker
systenl
designating
carry
channeled
easily
practical
turn
timestampordering
preemption
arise
simplicity
instance
assign
priority
higher
rolled
prevents
edge
wait-for
graph
cycle
possibility
extremely
priorities
avoided
proposed
wait-die
nonpreemptive
teclmique
held
smaller
older
dies
wound-wait
preemptive
counterpart
younger
wounded
returning
preempted
increase
eventually
smallest
differences
requested
reissue
sequence
restarted
die
times
acquiring
series
fewer
unnecessary
18.5.2
preempt
ecessary
preemptions
deadlockdetection
construct
describing
resourceallocation
main
deciding
techniques
nodes
correspond
nonlocal
graphs
inserted
fact
cycles
depicted
acyclic
prove
union
implying
deadlocked
organize
18.5.2.1
tmion
real
describes
unknown
ormliscient
observer
approximation
invoked
reported
correct
properly
easy
points
removed
cycledetection
searches
victim
selected
notify
victiitl
roll
graph-construction
options
listed
option
updates
inserts
deletes
released
matter
situations
false
snapshot
releases
resulting
deletion
insert
arrives
delete
discover
picked1
unrelated
exceeded
allocated
decides
discovered
picked
back1
detects
report
appended
identifiers
label
grant
initiating
instantaneous
respect
constructs
vertex
step
18.5.2.2
controllers
share
equally
responsibility
detecting
waitfor
dynamic
involves
construction
differs
add
node
pex
arc
waiting
shown
involving
augmented
ascertain
-detection
form
located
sj
discovering
newly
iiwoked
transmits
sic
return
repeats
finite
rounds
halts
discovers
transmitted
obtaining
worst
updating
searching
5.z
reduce
continues
normal
leaving
burden
pointed
employ
systenc
enforcing
replacing
controlling
input
output
device
due
restarting
ease
notation
correspondence
largest
elect
recovered
identify
examples
configurations
applies
physically
takes
18.6.1
bully
answered
assumed
assumes
elects
restarts
howeve1
begins
informing
restart
started
highest
lower
reason
termed
demonstrate
respond
begin
18.6.2
right
structure
lisi
list
ends
works
creates
initially
empty
ways
ifi
j-thatis,ifthe
pisnumber
forwards
j-that
recovering
inquiry
agreement
medium
faulty
garbled
resultilcg
lie
unpredictable
hope
clean
stopping
deviating
pattern
incorrect
collaborate
attempt
analogy
divisions
byzantine
army
commanded
surround
enemy
camp
generals
reach
attack
dawn
defeat
geographically
messengers
run
caught
deliver
corresponds
unreliable
18.7.1
traitors
loyal
reaching
18.7.2
communications
proceed
compute
functionfoo
boo
hardware
16.7.1
specifies
acknowledgment
safely
conclude
time-out
retransmit
foo
viable
words
agreed
turns
presence
completely
respective
states
claim
minimal
last
pj
delivery
affecting
original
contradicting
assumption
showing
private
devise
nonfaulty
vector
conditions
vi
solutions
properties
devised
worst-case
proportionate
tom
message-passing
delays
trustworthy
collect
decisions
presenting
exchange
round
refuse
arbitrary
pretend
ai,l
a,2
ai,3
values
ai,f
default
value-say
nil-is
exact
variety
applicable
ring-structured
networks
commits
validation
concatenate
identification
organizing
backup
hierarchical
non-leaf
subtree
lowest
ancestor
children
company
building
comp1.1ter
deadlockprevention
choice
derive
bidirectional
rings
efficient
model
prescribed
unexpected
functioning
participate
design
reached
granting
guarantee
cam1.0t
necessarily
developed
lamport
1978b
discussions
characterize
fidge
raynal
singhal
babaoglu
marzullo
schwarz
mattern
subsequently
ricart
agrawala
squareroot
maekawa
rilcg-structured
lann
carvalho
roucairol
agrawal
abbadi
fault-tolerant
taxonomy
reed
kanodia
shared-memory
1978a
sclmeider
disjoint
dilling-philosophers
chang
lampson
sturgis
gray
versions
presume
defilling
assumptions
mohan
lindsay
papers
problems
implementillg
traiger
spector
bernsteill
offer
comprehensive
rosenkrantz
obermarck
menasce
muntz
knapp
surveys
detected
takilcg
snapshots
chandy
pease
garcia-molina
written
larue
coverage
operating-system
issues
focused
general-purpose
computing
specialpurpose
requirements
real-time
computed
produced
deadline
period
passed-even
correct-may
traditional
meet
stringent
timing
deadlines
multimedia
programs
word-processing
documents
consist
continuous-media
audio
video
data-such
frames
video-must
restrictions
demands
operatingsystem
notably
desktop
attention
differ
largely
produce
limits
overview
hard
soft
characteristics
passedeven
autonomous
robot
delivers
mail
office
vision-control
identifies
wall
walked
correctly
identifying
strict
interactive
quick
user
mandatory
-such
batch-processing
system-m.ay
whatsoever
wide
range
embedded
specialized
ordinary
home
appliances
microwave
ovens
dishwashers
consumer
digital
exarnple
cameras
mp3
players
cellular
telephones
blackberry
handheld
entities
automobiles
airplanes
obvious
dishwasher
dishwasher-the
water
temperature
cleaning
light
heavy
timer
start
unaware
appliance
antilock
brakes
automobile
wheel
sensor
sliding
traction
occurring
continually
taking
sensors
braking
pressure
driver
apparent
furnace
identified
safety-critical
operation-usually
missed
-results
sort
catastrophe
weapons
brake
flight-management
health-related
pacemakers
injury-or
worse-might
qualify
fax
wristwatches
networking
switches
routers
missing
unhappy
guaranteeing
realtime
tasks
typically
restrictive
commercial
systems-as
linux-provide
support
explore
address
designing
systencs
typical
inexpensively
mass-produced
specific
unlike
pcs
put
serves
delivering
music
player
airliner
navigation
play
dvds
single-purpose
nature
environments
constrained
wristwatch
oven-it
considerably
constraints
lack
cpu
power
standard
contemporary
64-bit
16-bit
gigabytes
megabyte
footprint
limited
footprints
thermostats
costconscious
microprocessors
cost
components
buses
intercom1ectin.g
individual
strategy
memorymouse
keyboard
printer
bus-oriented
organization
management-unit
mmu
attached
peripheral
ports
usb
contained
circuit
soc
characteristic
remainder
focuses
tim.ing
give
schedulil1.g
schedulers
degrade
addressing
minimizing
il1.terrupts
features
supports
examining
operatil1.g
linux
windows
graphical
displays
drives
dvd
protection
users
supporting
sophisticated
-and
large-kernel
forty
million
source
code
thousands
millions
expect
il1.clude
nt
prominent
il1
drive
notion
await
vision
supported
amounts
explained
sufficient
nonvolatile
nvram
relocation
register
greatly
economically
impractical
considerations
memory-management
translating
addresses
mmus
consumption
translate
addresses-especially
look-aside
tlb
miss-may
prohibitive
illustrates
strategies
managing
designers
scenario
mapped
bypass
teclmique-kn.own
real-addressing
mode-does
effectively
stating
equals
real-addressil1.g
programmers
loaded
spent
rum1.ing
disable
gain
referencing
adding
configure
functionality
page
tables
demand
paging
swapping
flash
lynxos
core
mind
variations
absolute
priority-based
minimized
latency
notable
feature
omit
tcp
capabilities
gathers
self-contained
requiring
interaction
requirencent
19.4.1
scheduler
recall
importance
deemed
higher-priority
solaris
levels
levelspriority
31-are
reserved
prioritization
serviced
accord
requirem
ents
cover
19.4.2
kernels
disallow
kernel-mode
voluntarily
yields
difficult
user-oriented
spreadsheets
word
web
browsers
systems-such
xp-are
systems-in
systems-preemptive
arbitrarily
preemptible
long-duration
high-priority
context
switch
terminates
interrupted
safe
kernel-that
updated
protected
19.4.3
event-driven
software
-as
expires-or
hardware-as
remote-controlled
vehicle
approaching
obstruction
quickly
elapses
milliseconds
meaning
veering
radar
tolerate
seconds
latencies
interrupt
dispatch
refers
arrival
occursf
instruction
save
isr
obviouslyf
owitocontiex
ish
minimize
factor
contributing
amomrt
interrupts
disabled
short
periods
deterministic
schedulil
dispatcher
mandates
effective
makeup
conflict
low-priority
hundred
enabled
reduced
millisecond
arises
modify
beil
lower-priority
process-or
chain
--------response
----1
_....
finish
favor
ordinarily
howevet
runnable
preempting
indirectly
-process
m-has
affected
relinquish
inversion
solved
priority-inheritance
accessing
inherit
finished
question
revert
temporarily
preventing
relinquishes
inherited
-not
-will
primarily
mentioned
preference
noncritical
stricter
expired
details
periodic
constant
intervals
fixed
timet
acquires
relationship
expressed
period1
period2
period3
unusual
announce
admission-control
admits
rejects
19.5.1
rate-monotonic
schedules
static
entering
inversely
rationale
burst
duration
respectively-that
processil1.g
schedule
meets
measure
utilization
ratio
-ti
-the
20j50
percent
caused
miss
19.8
meeting
remaining
resumes
idle
optimal
j80
shows
n.ms
misses
limitation
maximize
falls
approximately
combined
figures
19.5.2
earliest-deadline-first
edf
dynamically
adjusted
reflect
rmmable
earliest
initial
rmming
beginning
rum1ing
finishing
a1mom1ce
appeal
theoretically
optimal-theoretically
practice
achieve
level
switching
19.5.3
proportional
allocating
timef
examplef
divided
processesf
sharesf
work
conjunction
admission
admit
deny
19.5.4
pthread
posix
extensions
computingposix
api
threads
pthreads
defines
classes
sched
__fifo
sched_rr
sched__fifo
first-served
fifo
outlined
5.3.1
slicing
equal
highest-priority
thread
front
round-robin
sincilar
sched_fifo
class-scheddther-but
undefined
behave
setting
pthread_attr_getsched_policy
pthread_attr_t
attr
int
pthread_attr_setsched_policy
parameter
pointer
attributes
integer
sched_other
pthread_attr
setsched_policy
non-zero
error
pthread.h
stdio.h
num_threads
argc
char
argv
pthread_t
tid
pthread_attr_init
&attr
pthread_attr_getschedpolicy
&policy
fprintf
stderr
printf
pthread_attr_setschedpolicy
pthread_create
&tid
,&attr,runner,null
join
pthread_join
null
void
runner
param
pthread_exi
scheddther
vxworks
popular
commercially
wind
river
industrial
equipment
rovers-spirit
opportunity-that
began
exploring
planet
mars
organizationofvxworks
centered
microkernel
2.7.3
microkernels
designed
utilities
graphics
libraries
offers
kernel-a
referring
thelinux
.systent
isbe
incre
singlyinreai-time
enviroft
ments.yve
hav
alreadycovered
softr
fil-ti,nteschedv,ling.fe
tur
secti
5.6.3
,whereby
tasl
sareassignt
d.thehj.ghe
tpriorityi
cst
additionaueatures
2,6
ofthe
makelinux
even,more
suitilb
fot
.embedded
thes
i.nclud
fullr
pree
ptive
.efficient
sched-lli11g
orith
vhic
p.ll1sij
tinte
tas
ac.tive
.stero
the2.6release
enthardlare
itecttlresbydi
tlcljng
jew
integrah1lg
iftto
reanill1e
.envirof
combini
operat
s,.systt
it1
vith
mallreal-.ti
fle
ernet
tht
reby
systell1
cts
botl
gene
s.e
tnd
real-tipte
ystem
.is
theappro
tctken1
jy.t
lil_1cux
ppt
rat
systerrl
.rtlinux
lirn.tx
sll1ctll
l-timeoperating
syste1n
htt1eikerllelj
les
alliftterrupts.-,-directing
handler
ndarclkerrtel.or
anintef
rupt.randler
real7tirlle
ketnel
tlin
shtndar
i.linuxkernel
disablb
intefrl_lpts
tus.ens11rirtg
itc
tl1rlotac1c11atencyto.thereal-timesystem.rj
lirtux.ctls0
ies
difft
rent
schedulingpolicies
includingrate-mo1lot
schec1ul
j1g
sechonj9.5.1
deadline-first
section19
models
interprocess
micro
passing
pipes-a
behaves
fik
pipe
protect
semaphores
mutex
inheritance
mversion
microkernet
includes
java
optionat
designer
customize
library
excluded
image
size-or
footprint-of
per-page
basis
pages
non-cacheable
multiprocessor
architecture
cache-coherency
residing
view
optional
vxvmi
memorymanagement
mark
areas
area
marked
belongs
declared
read-only
modes
arriving
useless
assigning
inexpensive
earliestdeadline
assignb
upcoming
deadlines-the
dividing
thermostat
household
nuclear
plant
fuel
economy
landing
jet
gantt
chart
19.7-19.10
addressed
inferior
monotonic
liu
layland
jensen
lehoczky
audsley
mok
stoica
priority-assignment
least-laxity-first
analyze
directions
field
article
stankovic
chapters
generally
binaries
wordprocessing
kinds
recent
trend
technology
incorporation
streamed
objectives
compress
term
today
movies
clips
movie
previews
news
stories
downloaded
internet
live
casts
broadcast
world
speeches
sporting
webcams
viewer
manhattan
customers
cafe
paris
personal
computers
increasingly
directed
assistants
pdas
stock
trader
quotes
pda
standards
representing
20.1.1
media
regular
represented
images
formally
displayed
succession
smoother
smooth
human
eyes
eye
retains
frame
continuous
choppy-looking
presentation
watching
laptop
listening
comprise
played
viewed
listened
telephone
-are
streaming
progressive
download
entirety
ultimately
-by
videos
radio
broadcasts
stream
fast-forward
rewind
disc
5-minute
replay
clip
ondemand
concert
lecture
authors
regularly
listens
favorite
station
vermont
utah
conferencing
random
poil1.ts
listen
progress
session
late
portions
thing
00p.m
10p.m
minutes
on-demand
streams
full-length
archived
lectures
viewing
convenient
time-there
well-known
products
realplayer
apple
quicktime
playback
20.1.2
100-minute
mpeg-1
1.125gb
high-defuution
television
hdtv
storing
hundreds
terabytes
rates
color
resolution
bits
represent
pixel
roughly
colors
11,520
bandwidth
excess
mbps
sensitive
listener
subjected
pauses
20.1.3
requirements-also
qos
requirements-of
affects
influences
compression
decoding
jitter
compressing
suggested
makes
compressed
content
beilcg
cormection
discussing
800-kb
encoded
decompressed
decompression
classified
lossy
decoded
lossless
restored
generat
cone
pression
ratios
compression-namely
eliminating
frequencies
ear
restore
moving
picture
experts
mpeg
formats
layers
layer
multiplex
mpeg-2
mpeg-4
bitrate
quality
vcr
high-definition
profiles
characterizes
bit
lmsuitable
transmit
two-dimensional
three-dimensional
animation
interact
potential
buyer
tour
purchasing
room
chooses
appealing
scalable
56-i
bps
modems
high-speed
megabits
wireless
cell
phones
fundamental
store
encourage
compilers
tin1.ing
foremost
concern
intervals-or

hundredths
succeeds
displaying
display
omitted
best-effort
treats
quality-of-service
systems-the
far-typically
rely
tend
workload
exceeds
capacity
manual
intervention
next-generation
enable
service-level
parameters
throughput
submitted
desired
unacceptable
pauses-or
frames-during
compensate
data-say
worth-before
errors
transmission
packets
these-and
other-scenarios
corrected
negotiate
agreeing
speed
negotiating
provider
admitting
everyday
lives
theater
seats
life
practiced
great
nonshareable
initializing
semaphore
invocation
signal
subsequent
block
instances
reservation
denied
requirements-for
rejected
negotiated
accepted
reserves
assuring
20.7.2
cineblitz
covers
distinguished
unusable
withii1
concerns
distinction
unchanged
non-real-time
intention
goals
fairness
scan
12.4.3
c-scan
12.4.4
algorithn
satisfied
diskscheduling
optimized
disk-bandwidth
data-rate
disks
prioritize
20.5.1
.5.2
cpu-scheduling
disk-scheduling
shortest-seek-time-first
sstf
12.4.2
closest
cylinder
deadline-the
strictly
seek
tim.es
heads
randomly
regard
head
cylinders
travels
route
preserved
20.5.2
scan-edf
ignores
read-write
swil
wildly
fro
leading
negatively
faced
12.4.1
adopting
whereil
arm
moves
proximity
reaches
reverse
optimizes
hybrid
combines
usil
close
batch
batching
reordering
batches
groups
size-say
fall
threshold-say
followil
-
kj
time0
downward
nun1.bers
fron
upward
hand
preserving
depends
quality-ofservice
network-perhaps
internet-issues
relating
significantly
worth
noting
particular
proprietary
protocols-notably
cisco
routers-that
prioritized
generalized
encounter
congestion
issues-issues
originator
hosts
playing
real-thne
rrrf
rtp
transporting
rtf
rathe1
receiver
20.6.1
unicasting
multicasting
establish
unicast
,
nh
receivers
lies
broadcasting
wasteful
suffice
public
reasonable
standpoint
relay
originating
cross
incurred
routing
violation
router
multicast
channels
corporation
country
chief
executive
officer
20.6.2
noted
replaying
pausing
hypertext
http-the
realplaye1
cajj.u
possibly
uniform
locatm
url
metafile
browser
wished
specifically
rtsp
positions
streami.j.1.g
commands
i.j.1.clude
allocates
setup
command
suspends
breaks
frees
illustrated
transitions
triggered
scope
readers
sources
high-performance
cine
blitz
retrieval
disk-schedulu1.g
tear
finite-state
20.7.1
inc-scan
reversing
pure
beginr1ing
cil
eblitz
monitor
fraction
monitors
track
retrieve
queues
r11
cyclic
time-length
tpically
measured
double
mod
behil
bound
criteria
estimated
admitted
sum
exceed
lett
retrieved
rater
retrieving
f---1
cinebiitz
maximum
thatcanberetrievedforrequest
r1c
duringeachcycleis
formula
yjc
span
contailling
rotational
sorted
tscek
trot
servicil1g
tseek
1-b-l
equation
disk-seek
retrievals
multiplied
dislu
ansfer
yic
raisk
free
diok
modern
filesf
computersf
assistantsf
requiren
requirementsf
qualityof
servicef
accepts
evaluating
schedulingf
criterion
transmitting
unicastingf
multicastingf
colorf
480f
usedf
imagesf
videof
sizes
mbf
table
batched
,j,c
..ji
r10
repeat
principle
performing
fuhrt
topics
kurose
ross
steinmetz
leslie
capability
buffers
mercer
druschel
peterson
reddy
wyllie
programming
developing
regehr
lauzac
bolosky
serving
schedule-management
tudor
tutorial
integrate
concepts
book
detaiilinux
chose
freely
full-featured
student
opportunity
read-and
microsoft
gaining
popularity
stand-alonemachine
market
workgroup-server
study
drastically
briefly
highly
influential
highlight
similarities
chronological
on-line
freebsd
bsd
mach
compatibility
intel
pentium
compatible
ms-dos
presents
in-depth
examination
exam.ining
relate
version
gained
years
history
programmer
interfaces
presents-interfaces
owe
tradition
implements
rapidly
evolving
developments
derived
principles
feels
goal
project
finnish
linus
torvalds
wrote
christened
32-bit
pc-compatible
cpus
early
collaboration
exclusively
partially
grown
revolved
kernel-the
privileged
n1.anages
interacts
systeitl
piece
scratch
con1.munity
multitude
borrowed
projects
teams
matured
arisen
distributions
administrative
tools
installation
upgrading
manage
removal
packages
creation
accounts
administration
21.1.1
dated
ran
80386-compatible
device-driver
subsystem
included
memorymapped
incarnation
copy-on-write
minix
cross-developed
platform
proper
spaces
milestone
march
culminated
limlx
biggest
lip
bsd-compatible
socket
ethernet
ppp
slip
serial
enhanced
limitations
scsi
developers
swap
extra
restricted
floppy-disk
cd-rom
sound
cards
mice
international
keyboards
floating-point
emulation
math
coprocessor
unix-style
inclllding
loadable
unloadable
modules
supplied
numerous
bug-fix
patches
adopted
numbering
convention
odd
minor-version
and2.1
evennumbered
intended
remedial
newer
untested
improvement
wider
pci
bus
pc-specific
feature-support
virtual8086
mode-to
dos
stack
ipx
accounting
firewalling
pc-only
sparc
alpha
mips
integration
architectures
concentrated
existing
jmce
version-number
increment
account
native
port
motorola
68000-series
powermac
substantially
improved
unified
file-system
offered
increased
networked
writable
memory-mapped
regions
talk
ax.25
anlateur
isdn
mount
netware
smb
lanmanager
improvements
dependencies
automatic
loading
configuration
standardized
quotas
posix-compatible
process-scheduling
continued
january
ultrasparc
flexible
window
selective
acks
acorn
daemon
finer
symmetric
smp
enhancements
limix
21.1.2
forms
composed
unix-like
berkeley
mit
foundation
gnu
sharing
worked
originated
community
omissions
li1.efficiencies
bugs
sufficiently
networkingadministration
derivatives
floating-point-emulation
sound-hardware
drivers
loose
collaborating
individuals
file-transfer-protocol
ftp
archive
facto
repositories
document
layout
run-time
21.1.3
theory
install
fetching
latest
revisions
compiling
attempted
job
painful
precompiled
collections
system-installation
ready-to-install
text-processing
editing
games
managed
unpacking
places
contributions
modem
dish
ibutions
advanced
package-tracking
installed
upgraded
painlessly
sls
dating
collection
recognizable
entity
lacked
packagemanagement
expected
poor
slackware
noncommercial
free-software
cz,ldera
germany
resulted
dedicated
german-language
circulation
prohibit
rpm
format
understood
accept
21.1.4
licensing
license
gpl
terms
fmmdation
public-domain
waived
copyright
rights
sense
people
implications
liimx
creating
derivative
legitimate
product
camwt
redistributed
binary-only
alongside
binary
resh
iction
ntaking-or
selling-binary-only
charge
resembles
nonmicrokernel
multiuser
multitasking
unix-compatible
adheres
influenced
heavily
platforms
enthusiasts
well-funded
facilities
squeeze
happily
megabytes
capable
usefully
ram
powerful
cheaper
minimalist
grew
efficiency
standardization
prices
paid
diversity
compile
specifications
compliant
official
certification
surprises
familiar
a.3
a.4
svr4
behaviors
slowed
fee
expense
certifying
compliance
substantial
base
certified
threading
extensions-pthreads
21.2.1
bodies
abstractions
things
privileges
initialize
aspect
othersknown
daemons
terminology
-may
permanently
accepting
logon
terminals
user-mode
operating-system-support
messagepassing
internals
historical
monolithic
m.elting
pot
modularity
san1.e
load
pull
unload
-they
arbitrated
expects
kernel-system
transferring
tmprivileged
collecting
system-call
arguments
arranging
language
buffered
file-handling
routines
sorting
mathematical
string-manipulation
programs-both
com1.t
login
key
system-administration
listing
deleting
textual
tool
consequence
restriction
module
wanting
reboot
recompiling
relinking
reloading
cumbersome
undertake
test
driver-the
compiled
already-rmming
rebuild
implication
parties
kernet
explicitly
startup
automatically
unloaded
mounted
dismounted
rest
reserve
accidental
21.3.1
symbols
reference
splitting
syncbol
symbol
defined
compilation
exported
exporting
explicit
effort
import
writer
external
linking
referenced
unresolved
compiler
utility
scans
looked
stages
moduleloader
asks
loader
relocate
export
copied
verbatim
previously
module-management
requestor
connect
queries
unloads
actively
21.3.2
registration
isolated
region
lets
cleanup
registering
character
virtual-file-system
calling
nfs1
protocot
ipx1
packet-filtering
rules
firewall
executable
sysctl
configured
21.7.4
21.3.3
sold
single-supplier
vendor
vast
adapters
severe
modular
conflict-resolution
arbitrate
aims
clashing
aui
oprobes-device-driver
probes
auto-detect
configuration-from
interfering
hardware-for
parallel
parallel-line
pup
lists
dma
incidentally
administrator
initialization
user-requested
operates
review
a.3.2
introduce
21.4.1
fork
exec
distinctly
run-the
subprocess
parent
rumung
terminated
child
encompasses
broadly
21.4.1.1
pid
lmique
forked
credentials
ids
10.6.2
personality
personalities
traditionally
varieties
changed
subject
unchangeable
21.4.1.2
null-terminated
vectors
argument
enviromnent
command-line
conventionally
pairs
variables
datum
altered
possesses
supply
leaves
alone-their
interpretation
inheriting
meanings
parts
terminal
com1.ected
cursor
scrolling
multilingual
lang
environment-variable
custom-tailors
per-process
languages
editors
21.4.1.3
alter
constantly
context-the
suspend
saved
registers
separately
arithmetic
incur
saving
outstanding
signals
consumed
lifetime
array
pointers
index
root
signal-handler
asynchronous
21.4.2
duplicating
clone
task-rather
thread-when
flow
flags
clone_fs
clone_vm
clone_sighand
clone_files
working
handlers
fashion
equivalent
subcontexts
file-descriptor
subcontext
pointing
struch1res
initialized
interrupting
encompass
internally
behalf
21.5.1
time-sharing
overhaul
variation
adequate
scale
time-known
-regardless
affin.ity
balancing
numeric
quantum
time-slice
length
ranges
nice
ranging
map
numerically
quanta
lim.ix
rum
eligible
slice
exhausted
runqueue
arrays-active
slices
arrays
indexed
exchanged
vice-versa
minus
ether
subtracted
interactivity
sleeping
sleep
adjustments
closer
favors
conversely
cpu-bound
lowered
recalculated
moved
o-o
o-o-o
simpler
posix.lb
5.3.4
irt
class
compete
extent
longest
exit
round-robill
time-share
soft-rather
hard-real
reahim.e
21.5.2
fundamentally
implicitly-for
fault
kernel-defined
posed
sanl.e
middle
risking
corruption
relates
sections-portions
framework
violating
nonpreernptive
-even
higherpriority
spinlocks
readerwriter
spinlock
durations
single-processor
inappropriate
replaced
enabling
disabling
disables
summarized
calls-preempldisable
preemplenable
-for
rule
thread-info
preempt_count
acquired
decremented
preemplcount
count
preempt_disable
spinlocks-along
interrupt-control
risk
penalty
instructions
suspended
reenabled
degrades
packet
disassemble
separating
half
bottom
recursive
miniature
halves
bottom-half
separation
worrying
foreground
tl1e
reenable
top-half
summarizes
21.5.3
multiprocessing
originally
imposed
bkl
big
coarse
granularity
protects
affinity
load-balancing
freeing
memory-pages
handles
lto
21.6.1
separates
zones
zone_dma
zone_normal
zone_highmem
80x86
isa
industry
zonldma
zone
limit
4-gb
intel80x86
satisfies
priinary
physical-memory
lil
lux
allocator
lntel80x86
contiguous
buddy
9.8.1
adjacent
units
allocatable
paired
partner
freed
region-a
heap
combine
allocation
subdivided
partners
linked
allowable
buddy-heap
4-kb
recursively
ultim.ately
allocations
ncade
statically
boot
subsystems
underlying
pools
21.6.2
kmalloc
variable-length
slab
belonging
allocate
8kb
16kb
4kb
arbitrary-sized
bytes
analogous
malloc
splits
pieces
determining
clainled
reallocate
shortages
slabs
descriptors
populated
instantiations
stores
descriptor
3-kb
7-kb
slab-allocation
12-kb
2-kb
object
struct
task_struct
fulfill
attempts
closely
21.8.1
diskbased
limn
views
nonoverlapping
page-aligned
vm_area_struct
permissions
balanced
lookllp
laintains
pagetable
mernory
software-interrupt
address-space
description
page-management
dispatched
21.6.2.1
backing
backed
demand-zero
filled
zeros
acts
viewport
offset
reaction
privately
pager
21.6.2.2
populate
concplete
copying
update
page-table
modifies
checked
brand-new
absolutely
21.6.2.3
inemory
paging-the
movement
whole-process
pageuut
second-chance
9.4.5.2
multiplepass
age
youthfulness
attain
infrequently
drop
valuing
lfu
bitmap
next-fit
paged
page-not-present
21.6.2.4
architecture-dependent
modifiable
vmalloc
virtually
vremap
maps
21.6.3
overwriting
verify
permission
invokes
loadil1.g
files-a
elf
flexibility
extensibility
debugging
confused
21.6.3.1
21.6.3.2
concentrate
elf-format
header
sits
memory-mapping
lower-numbered
contail1
invisible
write-protected
uninitialized
fixed-sized
variable-sized
expand
brk
extend
contract
-sbrko
mappings
initializes
program-counter
recorded
executables
commence
disk-space
usage
ltl.emory
linker
resolves
position-independent
pic
interprocesscommunication
hiding
systen1
vfs
system-ext2fs
object-oriented
manipulate
superblock
dentry
ldividual
actual
abbreviated
ssize_t
-read
mmap
memory-map
definition
file_operations
irnplementation
havil
kind
caring
remembers
opened
adaptive
read-ahead
owner
dealt
renaming
fil
stdio
usr
editor
obtains
time-consuming
linuxmaintains
consulted
on-disk
21.7.2
ext2fs
programmed
minix-compatible
exchanging
severely
14-character
file-name
superseded
extfs
redesign
scalability
led
linuxs
ffs
a.7.7
locating
data-block
indirect
indirection
interpreted
disk-allocation
policies
fragments
chunks
clustering
per-request
disk-controller
1-kb
submit
partitioned
disk-drive
packs
sectors
densities
center
geometry
selects
nondirectory
spread
fragmentation
search
byte
backward
encountered
extension
hole
nonzero
extends
preallocates
scattered
ieee
___
boundary
block-allocation
preallocation
helps
in.terleaved
simultaneously
preallocated
returned
free-space
closed
row
unset
fragmented
compensated
seeks
scarce
flush
21.7.3
sequentially
journal
journat
modifying
replayed
incomplete
concpleted
circular
spindle
decreasing
-that
crashed
undone
checking
non-journaling
in-memory
costly
synchronous
turned
asynchronously
metadata-oriented
ext3
unux
persistently
subdirectory
corresponded
reveals
asch
decimal
representation
statistics
plain
past
lim1x
unprivileged
parses
structu.re
nmst
persistent
lookup
fields
valid
global-rather
process-specificinformation
numing
ode
registered
pro
deregister
tree-appearing
directoryis
tune
ascii
facility
channel
file-devices
opening
file-protection
1etwork
llne-l
dlsciptlne
.
floppy
cd-roms
direct
repair
fine-tuned
laying
access-block
serially
seeking
pointil1.g
mouse
block-device
wl1en
unidirectional-elevator
exploits
starting-sector
fronc
rernoved
ncanager
merge
elevator
uler
sector
queues-a
expires
expiration
21.8.2
character-device
lim.jx
preprocessing
tty
feeds
discipline
interpreter
glues
attaching
detaching
awakened
disciplines
encoding
network-device
appearing
rich
letting
21.9.1
owned
sigrl.als
ruml.ing
expecting
occm
notification
wai
t_queue
wake
communicating
atomically
synchronizes
21.9.2
pipes
virtual-filesystem
interprocess-communication
deleted
treated
virtual-address-space
faults
sharedmemory
remember
unix-to-unix
non-unix
workstations
server-class
appletalk
sockets
source-code
a.9.1
sown
laye1
tagged
desire
reporting
retransmission
rewrite
split
reassemble
discard
destined
skbuff
inside
trim
fits
outstripped
manipulating
headers
checksums
suite
comprises
udp
icmp
datagrams
in-order
networking-device
encode
hash
networking-protocol
kernel-loadable
injects
network-device-driver
forwarding
fib
routing-configuration
routes
destination
wildcard
searched
successful
route-caching
wildcards
hits
management-selective
filtering
matched
chains
firewall-decision
matching
disassembly
reassembly
outgoing
reassembled
ipfrag
fragment
awaiting
ipq
assembled
match
arrived
associating
keyed
address-port
unacknowledged
timeout
out-of-order
proving
21.11.1
publicly
readable
password
salt
one-way
transformation
cam1ot
deduced
trial
recombined
matches
historically
passwords
characters
attacker
dictionary
commonly
chance
lmauthorized
compromised
encrypted
secret
secure
permitted
vendors
authenticate
pam
date
sessionsetup
password-changing
21.11.2
uid
gid
access-control
uids
conferred
modes-read
execute-are
bypassing
implicitly
setuid
lpr
submits
print
distinguishes
specification
user-id
reacquire
repeatedly
waiving
remembered
enhancement
grants
fsuid
fsgid
vulnerable
killed
another-a
duplicate
selectively
printed
denying
reliably
comm.ercially
evolved
vacuum
mechanisms-message
memory-and
duplication
reclaimed
obeys
device-oriented
intercomputer
file-transfer
tests
attribute
costs
compared
cloned
steps
portable
ammmt
architecture-specific
multithreading
worse
clones
high-level
classify
user-level
kernel-level
disk-layout
optimizations
rotation
optimize
optimization
vfork
documentation
cross-reference
listil1.gs
browsable
crossreferenced
linux-hq
2.x
lil1.ks
archives
mailing
books
how-to
guides
hints
tips
hackers
guide
internet-based
expandil1.g
newbies
website
introducing
newcomers
devoted
mailing-list
e-mail
maj
ordomo
vger
rutgers
body
subscribe
companies
investigating
bovet
cesati
love
32-i
amd
successor
replace
layered
mid-1980s
ibm
cooperated
assembly
fresh
application-programming
apis
october
dave
cutler
architect
dec
vax
hired
charter
team
planned
nts
win32
reflecting
incorporated
web-server
webbrowser
user-interface
decreased
ported
microprocessor
february
marketplace
x.soo-based
plug-and-play
.net
gui
visual
experience
zero-configuration
instant
messaging
photography
dramatic
multiprocessors
client-server
simultaneous
wil,dows
sessions
logged-on
console
ship
integers
appropriate-so
professional
premium
lacks
seamlessly
mernbers
family
webserver
farms
clustered
datacenter
64gb
ia32
ia64
microsoffs
portability
22.2.1
adherence
c-2
classification
u.s
government
signifies
moderate
defective
malicious
attacks
extensive
testing
analysis
investigate
defects
vuh1erabilities
22.2.2
shipped
maturity
stress
63,000
reviewing
verification
catch
subtle
catching
third-party
rigorous
furthermme
health
downloading
fixes
perceived
easier
menus
22.2.3
business
depend
quirks
latent
masked
bug-for-bug
previuus
xpf
releasesf
thunkingf
conversionf
translates
similarlyf
thunking
additionf
interix
compiles
22.2.4
cache-line
keys
kernel-based
awareness
code-path
functionsf
per-processor
coloring
numa
non-uniform
n1emory
helped
lock-free
read-modify-write
interlocked
constitute
lpc
highperformance
dispatcherf
symmetrical
22.2.5
facilitate
tim.e
emulate
windowsf
environmental
rpcs
22.2.6
processor-dependent
dll
hal
upper
bolstering
manipulates
isolating
tested
ia32-compatible
recognizes
multiplatform
lose
22.2.7
locales
nls
dates
money
national
customs
string
comparisons
acc01mt
varying
unicode
ansi
converting
8-bit
conversion
strings
localize
businesses
categories
interactions
auth.entication
manq.ger
22.3.1
hardware-abstraction
hides
exports
required-it
porting
configuring
coping
motherboard-specific
22.3.2
responsibilities
oriented
system-defined
activities
22.3.2.1
ncemmy
llling
primitives
managencent
dispatching
22.3.2.2
cpu-usage
standby
transition
allotted
signaling
signaled
finishes
32-level
traverses
finds
skips
quantum-end
dpc
reschedule
variable-priority
lowering
compute-bound
boosts
boost
busy
permitting
spare
background
enhance
real-tince
preferential
22.3.2.3
counting
occurrence
action
ownership
deadlock-free
defsemaphore
gate
encapsulates
timeouts
polls
22.7.1
22.3.2.4
apc
apcs
terminate
dpcs
postpone
device-interrupt
queuing
lsrs
deviceinterrupt
expirations
anwunt
worker
isrs
itencs
22.3.2.5
exceptions
trap
architectureindependent
memory-access
overflow
underflow
divide
illegal
misalignment
page-read
quota
debugger
breakpoint
elaborate
neve
d.,.
fatal
infamous
blue
screen
death
trap-handler
interrupt-service
irqls
bind
compute1
interrupt-dispatch
processm
irql
mask
synchronizing
dispatches
timers
3-26
check
interprocessor
e.g
irq
passive
22.3.3
enviromnental
grouped
managers
registry
booting
22.3.3.1
generic
manipulated
opaque
mutexes
operated
local-communication
endpoints
roots
abstract
connects
symbolic
counts
protected-mode
persist
reboots
discovery
ncay
permanent
temporary
perrnanent
nance
structured
query.jlame
,parse
explanation
query
jlame
parse
closes
duplicates
separated
whack
slashes
leaf
procedures
wilcdows
-most
-device
mitiates
summary
traverse
object-manager
namespace
translatilcg
fills
permit
nicknamesor
aliases-for
aliases
letters
remapped
suit
convenience
basenamedobj
ects
attencpts
redirector
closing
applying
distinct
reflected
deallocate
rare
drive-letter
supervise
duplicated
confers
whert
out-of-process
contexts
natural
enforces
charging
occupied
refusing
accumulated
charges
authenticates
defaults
impersonate
trusted
vulnerabilities
user-modeaccessible
untrusted
creator
access-token
auditing
audited
logged
22.3.3.2
virtual-to-physical
mechanisnc
coherence
page-based
la32-compatible
zero-fill-on-demand
erasing
la32
identical
page-frame
4-mb
hyperspace
working-set
session-specific
terminal-server
3gb
3-gb
sql
databases
loss
two-step
consumes
decommits
raw
pae
windowing
awe
redefines
system-paging
attempting
-write
read-write-execute
execute-only
no-access
raises
iterates
verifier
overruns
activates
multilevel
1,024
pdes
pde
pte
4mb
self-maps
self-map
page-directory
occupy
sii
gle
ptes
fit
translated
10-bit
1,023
virtual-memory
concatenating
globat
24-bit
secondlevel
top-level
second-level
associative
ta64
software-trap
translations
choosing
three-level
rnapping
8-tb
tradeoff
zeroed
bad
zero-on-demand
prefetched
exploit
locality
invalid
page-file
faulted
zero-ondemand
processs
sharable
prototype
pies
edited
trimmed
improves
marks
m.emory
reused
dirty
fron1
unmapped
reclaims
issued
systein
transferred
trims
first-in
first-out
faulting
adjusts
replaces
determin.ed
trimming
iterating
prefetching
splay
fill
transparently
22.3.3.3
jobs
kn.owledge
parent-child
relationships
hierarchies
refinements
owns
affinities
collected
data-center
createprocess
prompt
ntdll.dll
style
cross-process
debuggers
signal-like
notifications
alerts
unblock
process-manager
injected
impersonation
thread-specific
clientserver
22.3.3.4
nlodel
environn
ental
spooling
plug-andplay
thread-pool
respects
osf
publishes
globally
connection-port
corn1.ection-port
charn1.el
client-to-server
server-to-client
tecl111.iques
suitable
avoids
sender
teclu
ique
window-manager
64-kb
event-pair
subsysten
versa
eliminates
lengths
22.3.3.5
filter
completions
arranged
converts
irp
potentially
striping
mirroring
beneath
functionalities
instancing
forncat
virus
wdm
lays
build
cancellation
logic
richness
fortunately
device-specific
22.3.3.6
2gb
vacb
vacbs
256-kb
chunk
2-mb
s-entry
noncached
calculates
caller
non
bypasses
parallels
irp-based
metadata
pinning
unpin
flushes
predict
prefetches
apt
openfile
createfile
file_flag_sequentialscan
flag
hint
prefetch
telling
write-back
accumulates
wakes
cachewriter
write-through
cache-flush
fast-writing
cache-writer
flooding
w11en
retransmitted
waste
redirectors
instruct
backlog
22.3.3.7
centralizing
audit
user-accessible
srm
tokens
debug
restrict
damage
logging
rating
trace
unauthorized
security-event
22.3.3.8
plug--and-play
recognize
adapt
pnp
resources-primarily
ranges-has
reconfigure
installing
proliferation
pcmcia
docks
infiniband
hot-pluggable
dictates
configurable
reconfiguration
loads
installs
add-device
assignments
start-device
assignment
reconfigured
query-stop
prevented
query-remove
eject
pccard
surprise-remove
promoting
quicker
battery
laptops
low-power
retention
phone
pushes
button
hibernate
shutting
restoring
spin
loop
underutilized
22.3.3.9
hives
boots
saves
hive
produces
system-hive
last-known-good
22.3.3.10
powers
bios
rom
booted
bootstrap
ntldr
smss
init
establishing
winlogon
csrss
brings
lsass
pre-loading
patterns
lay
grouping
contribute
reduction
hibernation
vironm.en
subsysten1
mixing
cam1.ot
categorizes
character-based
thinks
transforms
characterbased
clipboard
22.4.1
vdm
shell
full-screen
hog
loops
throttles
offending
incorrectly
22.4.2
win16
incorporates
wow32
stub
graphical-device-interface
gdi
subroutines-converting
thunlcing
multi
tlueaded
imply
stops
receivil1.g
wi11.dows
3.x
corrupting
coexist
usil1.g
win16application
wmdows
mclude
conti11.ues
il1.stalled
22.4.3
il1.struction
calls-just
wow64
essentially
achieves
22.4.4
robust
robushl.ess
validates
wrong
verifies
approximate
exposed
shims
-though
interoperability
22.4.5
psxss
exe
psxdll
printing
printers
redirection
trees
22.4.6
authenticated
control-alt-delete
n1echanism
acting
trojan
horse
intercept
smart
card
authority
domains
kerberos
strong
authenticating
encryption
file-allocation
fat
shortcomings
weak
comparison
ntfs
tolerance
sparse
shadow
focus
fat16
floppies
removable
fat32
22.5.1
clusters
cluster
formatted
512mb
1.6-gb
16,000
17mb
wo11ld
calculate
multiplying
lcn
typed
shortname
unnamed
macintosh
iprop
thumbnails
syntax
file-query
dir
mft
bulk
attributes-or
-one
quantity
48-bit
slot
22.5.1.1
hierarchy
reorganizing
eliminated
extents
gather
22.5.1.2
damaged
corrupted
22.5.2
scrambled
redundant
sck
forcibly
robustness
filesystem
data-structure
signify
succeeded
redoing
undoing
checkpoint
discarded
grow
bounds
system_
user-file
undamaged
existed
---l
log-file
in-progress
resets
22.5.3
inherently
parsing
prefix
component-by-component
22.5.4
ftdisk
22.5.4.1
ilcns
128001-7833611
disturbance
supplies
logical-volume
22.5.4.2
stripe
interleave
raid
lcns
0-15
16-31
32-47
48-63
64-79
80-95
parity
contributed
wraps
ar01md
22.5.4.3
stripes
eighth
byte-wise
destroyed
calculating
notice
recalculation
equal-sized
22.5.4.4
mirror
mirrors
arrangement
22.5.4.5
sedor
sparing
remapping
spares
instructs
substitute
substitutes
unallocated
changing
reconstructs
reconstructed
22.5.5
tlles
divides
data-compression
algoritln11
decompresses
gaps
virtual-duster
gap
zero-fills
key-recovery
22.5.6
supplant
dependence
22.5.7
content-indexing
re-indexed
filereplication
22.5.8
cooperation
accidentally
pulling
tape
peer-to-peer
i11terprocess
22.6.1
mention
3com
ndis
data-link
iso
tdi
session-layer
reasoning
connection-based
connectionless
22.6.2
rebooted
22.6.2.1
server-message
corldection
published
cifs
22.6.2.2
netbios
1980s
becmne
network-programming
22.6.2.3
peer
workgroups
netbeui
22.6.2.4
infrastructure
network-management
snm
host-configuration
dhcp
wins
22.6.2.5
point-to-point
tunneling
remote-access
encrypt
multi-protocol
vpns
22.6.2.6
novell
ovell
etware
spx
lans
nwlink
22.6.2.7
web-distributed
authoring
versioning
webdav
http-based
collaborative
builds
securely
22.6.2.8
ocoi
low-cost
22.6.3
distributed-processing
mailslots
22.6.3.1
22.6.3.2
connection-oriented
na1ned
unc
server_name
share_name
22.6.3.3
mailslot
recipient
finding
22.6.3.4
winsock
winsock-compliant
22.6.3.5
ake
procedure-a
routine-which
client-side
unpacks
unblocks
packing
argunlents
computing-environment
architectural
lan
earlie1
22.6.3.6
tedious
error-prone
marshal
unmarshal
declare
stubs
return-value
unmarshaller
22.6.3.7
jbjecj
inserting
utilizing
22.6.4
locat
detait
mup
remote-system
hands
multi-provider
higher-level
22.6.4.1
22.6.4.2
folder
administrators
autonlatically
airplane
off-line
redirected
esc
online
pushed
disconnected
tinle
22.6.5
students
laboratory
school
employees
department
members
domain-name
dns
trust
realm
trusts
transitive
22.6.5.1
forests
departments
bell-labs.com
research.bell-labs.com
pez.bell-labs.com
children-domains
pez
noncontiguous
bell-labs.conz
andlucent.com
forest
22.6.5.2
cross-link
told
two-way
cut
cross-linking
authentications
22.6.6
,.,.,cu
i.n
topology
doncain-based
domain-based
technologies
corporate
information-technology
uniformity
intellimirror
22.6.7
resolving
www.bell-labs.com
135.104.1.14
broadcast-name
lmhosts
name-to-if
bindings
survive
name-resolution
gave
lease
renew
renewed
security_attributes
sa.nlength
sizeof
sa.lpsecuritydescriptor
sa.binherithandle
a_semaphore
createsemaphore
&sa
comand_line
ostrstream
ostring
command_line
_process
gains
xxx
createxxx
invalid.j1andllvalue
closehandle
drops
22.7.2
securities__attributes
blnheri
thandle
inheritable
binheri
sample
1nay
distinct-and
differentobjects
readily
lpszname
mysem1
b_semaphore
opensemaphore
semaphore_all_access
openxxx
duplicatehandle
22.7.3
createthread
process_a
openprocess
process_all_access
process_id_of....a
getcurrentprocess
&b_semaphore
duplicate_same_access
errno
multithread
guard
unsynchronized
wrapper
beginthreadex
22.7.3.1
getmodulehandle
de-reference
idle_priority
_class
level4
normal_priority
high_priority
levell3
time_priority
level24
normalpriority
idllpridrity
setpriori
tyclass
cbserver
realtime_
pridrity
privilege
realtimlpriority_class
22.7.3.2
factor-typically
panel
22.7.3.3
setthreadpriori
thread_priority
_lowest
_below_normal
_normal
_above_normal
_highest
designations
adjust
_idle
thread_pridritltimlcritical
adjustment
setprocesspriori
tyboost
22.7.3.4
resumethread
opposite
resumed
waitforsingleobject
waitformultipleobjects
ini
tializecri
ticalsection
entercri
leavecri
kernel-synchronization
encounters
22.7.3.5
fibers
user-defined
fiber
tin1e
legacy
fiber-execution
convertthreadtofi
ber
createfiber
swi
tchtofiber
deletefiber
22.7.3.6
instantiation
queueuserworkitern
waitable
registerwai
tforsingleobj
ect
,and
createtirnerqueue
createtirnerqueuetirner
delaying
reusing
utilize
timer-callback
devote
22.7.4
lnterprocess
postmessage
postthreadmessage
sendmessage
sendthreadmessage
,or
sendmessagecallback
.posting
post
wm_copydata
copydatastruct
16mb
buf
virtualalloc
ox1000000
mem_reserve
mem_top_down
age_readwrite
8mb
ox800000
mem_commit
page_readwrite
decommit
virtualfree
mem_decommit
mem_release
stuck
getmessage
22.7.5
heaps
thread-local
22.7.5.1
multiples
ox10000
virtuallock
setprocessworkingsetsize
22.7.5.2
multistage
createfilemapping
oxffffffff
file-mapping
hfile
somefile
generic_read
generic_write
file_share_read
file_share_write
open_always
file_attribute_normal
hmap
sec_commit
shm_l
mapviewoffile
file_map_all_access
unmap
unmapviewoffile
22.7.5.3
1-mb
space-allocation
heap-management
heapcreate
heapalloc
heaprealloc
heapsize
heapfree
heapdestroy
heaplock
heapunlock
22.7.5.4
fourth
runtime
strtok
strt
per-thread
declares
declspec
dword
cur_pos
var_index
t1salloc
t1ssetvalue
var
t1sgetvalue
t1sfree
design.ed
extensible
winl6
stronger
internationalization
nms
cu1.d
upgrade
budgets
needing
windows32
conducive
teclllliques
solomon
russinovich
technical
tate
kit
2000b
six-volume
helpful
deploying
developer
2000a
quarterly
wealth
iseminger
richter
silberschatz
understand
xds-940
one-of-a-kind
highlights
flavor
migrate
huge
i11.to
mainframes
microcomputers
minicomputers
handhelds
theme
migration
multiplexed
multics
massachusetts
institute
mainframe
ideas
bell
laboratories
pdp-11
minicomputer
operatirlg
mac
osx
looms
calculators
frah
graphically
frauenfelder
twentieth
century
1940s
labor
alan
turing
john
von
neumann
colleagues
blurred
secrecy
war
stored-program
manchester
offspring
ferranti
sale
efforts
rojas
hashagen
ceruzzi
enormous
consoles
operator
manually
paper
punched
buttons
lights
halt
23.2.1
lil1.e
magnetic
commonplace
assemblers
loaders
linkers
reusability
careful
subroutine-called
driver-was
paper-tape
sequences
writil1.g
fortran
cobol
appeared
assembly-language
mounting
assembler
debugged
consisted
unloading
tapes
punch
set-up
sat
dollars
operational
cooling
valuable
owners
wanted
investments
23.2.2
twofold
dump
dumping
stopped
observing
abnormal
overcome
rudimentary
moni
loj
directives
ftn
asm
ftn-execute
asm-execute
run-execute
tvw
boundaries
job-first
end-final
defirte
charged
ftmctions
conh
dollar-sign
colun
jcl
slash
columns
card-deck
identifiable
carrying
insh
uctions
control-card
an.d
continuity
sequencing
deck
humans
elim.inates
mechanical
intrinsically
electronic
licrosecond
1,200
minute
orders
magnitude
speeds
exacerbated
23.2.3
overlapped
magnetic-tape
1950s
1960s
punches
pri
n.ted
lilce
mam
iine
plotters
reader-to-tape
tape-to-printer
however-a
rewound
hand-carried
unreasonable
preparation
card-reader
cmttpleted
acronym
essence
paths
spool
overlaps
systen
spooler
beneficial
leads
naturally
multiprogramming
atlas
kilburn
howarth
university
england
codes
fuce
remarkable
drum
british
98-kb-word
16-kb
512-word
page-replacement
memory-accessing
retained
iff
t2
lichtenberger
pirtle
california
time-shared
reentrant
swapped
xds-930
user-monitor
ltlode
256-word
chained
destroy
subprocesses
dijkstra
mckeag
wilson
technische
hogeschool
eindhoven
netherlands
dutch
27-bit
employing
agents
recomputed
algol
512-kb-word
liskov
layer-structured
microcode
paged-segmented
danish
regnecentralen
brinch-hansen
objective
rathel
nucleus
levels-comprising
kernel-were
itl.echanism
rnessages
primitive
send-message
wait-message
send-answer
resul
wait-answer
wait-event
previous-buffer
next-buffer
get-event
converted
ctss
corbato
experimental
32-kb
36-bit
5-kb
employed
multilevelfeedback
shortest
demonstrating
vyssotsky
organick
e-sharing
bigger
electrical
wires
offices
homes
city
honeywell
dropped
pagedsegmentation
18-bit
segment
segments
1-kb-word
segmented
merged
feedback
accomplished
comprised
300,000
maintenance
undoubtedly
prime
subroutines
spanning
scientific
mealy
fixed-length
unblocked
guess
incomprehensible
average
hampered
base-register
fix
fixing
remained
segmented-paged
mvs
basically
switched
konigsford
supposed
purchased
anticipation
tiine-sharing
tso
cambridge
cms
single-user
meyer
seawright
parmelee
renamed
success
died
special-purpose
stay
centers
rooms
sit
desks
rivalry
outdo
usability
amigaos
long-term
competitors
nontechnical
freiberger
swaine
traces
ancestry
accent
developedatcarnegiemellon
cmu
rashid
robertson
philosophy
tevanian
1989l
accetta
1987a
black
1987b
4.3bsd
evolutionary
4.2bsd
shortly
encore
multimax
sequent
balance
unix-specific
evicted
excluding
intet
propelled
forefront
announced
brainchild
steve
fame
year
competed
operati.j.l.g
i.j.l.cluded
technological
l.jn
exceedingly
integrating
1exibility
memory-objectmanaging
buik
levet
virtual-machine
editions
edition
lwww
os-book
mcp
burroughs
system.programming
segmentation
cdc
multi-cpu
coordination
surprisingly
littered
faded
marketed
consistently
discrepancy
conclusions
drawn
evolution
