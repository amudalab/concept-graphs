data/NNS/data structures/NNS/structures and/CC/and programming/NN/programming stacks/NNS/stacks and/CC/and queues/NNS/queues the/DT/the first/JJ/first data/NNS/data structures/NNS/structures we/PRP/we will/MD/will study/VB/study this/DT/this semester/NN/semester will/MD/will be/VB/be lists/NNS/lists which/WDT/which have/VBP/have the/DT/the property/NN/property that/IN/that the/DT/the order/NN/order in/IN/in which/WDT/which the/DT/the items/NNS/items are/VBP/are used/VBN/used is/VBZ/is determined/VBN/determined by/IN/by the/DT/the order/NN/order they/PRP/they arrive/NNP/arrive. stacks/NNS/stacks are/VBP/are data/NNS/data structures/NNS/structures which/WDT/which maintain/NN/maintain the/DT/the order/NN/order of/IN/of last-in/JJ/last-in /,/, first-out/JJ/first-out queues/NNS/queues are/VBP/are data/NNS/data structures/NNS/structures which/WDT/which maintain/NN/maintain the/DT/the order/NN/order of/IN/of first-in/JJ/first-in /,/, first-out/JJ/first-out queues/NNS/queues might/MD/might seem/VB/seem fairer/NN/fairer /,/, which/WDT/which is/VBZ/is why/WRB/why lines/NNS/lines at/IN/at stores/NNS/stores are/VBP/are organized/VBN/organized as/IN/as queues/NNS/queues instead/RB/instead of/IN/of stacks/NNS/stacks /,/, but/CC/but both/DT/both have/VBP/have important/JJ/important applications/NNS/applications in/IN/in programs/NNS/programs as/IN/as a/DT/a data/NN/data structure/NNP/structure. operations/NNS/operations on/IN/on stacks/NNS/stacks the/DT/the terminology/NN/terminology associated/VBN/associated with/IN/with stacks/NNS/stacks comes/VBZ/comes from/IN/from the/DT/the spring/NN/spring loaded/VBD/loaded plate/NN/plate containers/NNS/containers common/JJ/common in/IN/in dining/NN/dining halls/NNP/halls. when/WRB/when a/DT/a new/JJ/new plate/NN/plate is/VBZ/is washed/VBN/washed it/PRP/it is/VBZ/is pushed/VBN/pushed on/IN/on the/DT/the stack/NNP/stack. when/WRB/when someone/NN/someone is/VBZ/is hungry/JJ/hungry /,/, a/DT/a clean/JJ/clean plate/NN/plate is/VBZ/is popped/VBN/popped off/RP/off the/DT/the stack/NNP/stack. a/DT/a stack/NN/stack is/VBZ/is an/DT/an appropriate/JJ/appropriate data/NNS/data structure/NN/structure for/IN/for this/DT/this task/NN/task since/IN/since the/DT/the plates/NNS/plates don/VBP/don t/NN/t care/NN/care about/IN/about when/WRB/when they/PRP/they are/VBP/are used/VBN/used maintaining/VBG/maintaining procedure/NN/procedure calls/NNS/calls stacks/NNS/stacks are/VBP/are used/VBN/used to/TO/to maintain/VB/maintain the/DT/the return/NN/return points/NNS/points when/WRB/when modula-3/-NONE-/modula-3 procedures/VBZ/procedures call/NN/call other/JJ/other procedures/NNS/procedures which/WDT/which call/NN/call other/JJ/other procedures/NNS/procedures /:/... jacob/NN/jacob and/CC/and esau/NN/esau in/IN/in the/DT/the biblical/JJ/biblical story/NN/story /,/, jacob/NN/jacob and/CC/and esau/NN/esau were/VBD/were twin/VBN/twin brothers/NNS/brothers where/WRB/where esau/NN/esau was/VBD/was born/VBN/born first/JJ/first and/CC/and thus/RB/thus inherited/VBN/inherited issac/NN/issac s/NNS/s birthright/NNP/birthright. however/RB/however /,/, jacob/NN/jacob got/VBD/got esau/NN/esau to/TO/to give/VB/give it/PRP/it away/RB/away for/IN/for a/DT/a bowl/NN/bowl of/IN/of soup/NN/soup /,/, and/CC/and so/RB/so jacob/NN/jacob went/VBD/went to/TO/to become/VB/become a/DT/a patriarch/NN/patriarch of/IN/of israel/NNP/israel. but/CC/but why/WRB/why was/VBD/was jacob/JJ/jacob justified/VBN/justified in/IN/in so/RB/so tricking/VBG/tricking his/PRP$/his brother/NN/brother rashi/NN/rashi /,/, a/DT/a famous/JJ/famous 11th/JJ/11th century/NN/century jewish/NN/jewish commentator/NN/commentator /,/, explained/VBD/explained the/DT/the problem/NN/problem by/IN/by saying/VBG/saying jacob/NN/jacob was/VBD/was conceived/VBN/conceived first/JJ/first /,/, then/RB/then esau/VB/esau second/JJ/second /,/, and/CC/and jacob/NN/jacob could/MD/could not/RB/not get/VB/get around/IN/around the/DT/the narrow/NN/narrow tube/NN/tube to/TO/to assume/VB/assume his/PRP$/his rightful/JJ/rightful place/NN/place first/RB/first in/IN/in line/NN/line abstract/NN/abstract operations/NNS/operations on/IN/on a/DT/a stack/NN/stack push/NN/push /:/( x,s/JJ/x,s /NN/) and/CC/and pop/VB/pop /:/( x,s/JJ/x,s /NN/) /:/- stack/NN/stack s/NNS/s /,/, item/NN/item x/NNP/x. note/NN/note that/IN/that there/EX/there is/VBZ/is no/DT/no search/NN/search operation/NNP/operation. initialize/NN/initialize /:/( s/NNS/s /VBP/) /,/, full/JJ/full /:/( s/NNS/s /VBP/) /,/, empty/JJ/empty /NN/( s/NNS/s /:/) /,/, /:/- the/DT/the latter/NN/latter two/CD/two are/VBP/are boolean/JJ/boolean queries/NNP/queries. defining/NN/defining these/DT/these abstract/NN/abstract operations/NNS/operations lets/NNS/lets us/PRP/us build/VBP/build a/DT/a stack/NN/stack module/NN/module to/TO/to use/VB/use and/CC/and reuse/VB/reuse without/IN/without knowing/NN/knowing the/DT/the details/NNS/details of/IN/of the/DT/the implementation/NNP/implementation. the/DT/the easiest/JJS/easiest implementation/NN/implementation uses/NNS/uses an/DT/an array/NN/array with/IN/with an/DT/an index/NN/index variable/JJ/variable to/TO/to represent/VB/represent the/DT/the top/JJ/top of/IN/of the/DT/the stack/NNP/stack. an/DT/an alternative/NN/alternative implementation/NN/implementation /,/, using/VBG/using linked/VBN/linked lists/NNS/lists is/VBZ/is sometimes/RB/sometimes better/RBR/better /,/, for/IN/for it/PRP/it can/MD/can t/VB/t ever/RB/ever overflow/NNP/overflow. note/NN/note that/IN/that we/PRP/we can/MD/can change/VB/change the/DT/the implementations/NNS/implementations without/IN/without the/DT/the rest/NN/rest of/IN/of the/DT/the program/NN/program knowing/NN/knowing declarations/NNS/declarations for/IN/for a/DT/a stack/NN/stack interface/NN/interface stack/NN/stack /:/( stack/NN/stack of/IN/of integer/JJR/integer elements/NNS/elements /:/) type/NN/type et/NN/et =/:/= integer/NN/integer /:/( element/NN/element type/NN/type /:/) procedure/NN/procedure push/NN/push /:/( elem/NN/elem et/NN/et /:/) /:/( adds/VBZ/adds element/NN/element to/TO/to top/VB/top of/IN/of stack/NN/stack /:/) procedure/NN/procedure pop/NN/pop /:/( /:/) et/NN/et /:/( removes/NNS/removes and/CC/and returns/NNS/returns top/VBP/top element/JJ/element /NN/) procedure/NN/procedure empty/NN/empty /:/( /:/) boolean/JJ/boolean /NN/( returns/NNS/returns true/JJ/true if/IN/if stack/NN/stack is/VBZ/is empty/JJ/empty /NN/) procedure/NN/procedure full/JJ/full /NN/( /:/) boolean/JJ/boolean /NN/( returns/NNS/returns true/JJ/true if/IN/if stack/NN/stack is/VBZ/is full/JJ/full /NN/) end/NN/end stack/NNP/stack. stack/NN/stack implementation/NN/implementation module/NN/module stack/NN/stack /:/( 14.07.94/CD/14.07.94 rm/NN/rm /,/, lb/NN/lb /:/) /:/( implementation/NN/implementation of/IN/of an/DT/an integer/NN/integer stack/NN/stack /:/) const/NN/const max/NN/max =/:/= 8/CD/8 /CD/( maximum/NN/maximum number/NN/number of/IN/of elements/NNS/elements on/IN/on stack/NN/stack /:/) type/NN/type s/NNS/s =/:/= record/NN/record info/NN/info array/NN/array /:/[ 1/CD/1 /:/.. max/NN/max /:/] of/IN/of et/NN/et top/NN/top cardinal/JJ/cardinal =/NN/= 0/-NONE-/0 /./( initialize/NN/initialize stack/NN/stack to/TO/to empty/JJ/empty /NN/) end/NN/end /:/( s/NNS/s /VBP/) var/NN/var stack/NN/stack s/NNS/s /:/( instance/NN/instance of/IN/of stack/NN/stack /:/) procedure/NN/procedure push/NN/push /:/( elem/NN/elem et/NN/et /:/) =/:/= /:/( adds/VBZ/adds element/NN/element to/TO/to top/VB/top of/IN/of stack/NN/stack /:/) begin/NN/begin inc/NN/inc /:/( stack.top/JJ/stack.top /NN/) stack.info/-NONE-/stack.info /./[ stack.top/JJ/stack.top /NN/] =/:/= elem/NN/elem end/NN/end push/NN/push procedure/NN/procedure pop/NN/pop /:/( /:/) et/NN/et =/:/= /:/( removes/NNS/removes and/CC/and returns/NNS/returns top/VBP/top element/JJ/element /NN/) begin/NN/begin dec/NN/dec /:/( stack.top/JJ/stack.top /NN/) return/NN/return stack.info/-NONE-/stack.info /./[ stack.top/JJ/stack.top +/NN/+ 1/CD/1 /CD/] end/NN/end pop/NN/pop procedure/NN/procedure empty/NN/empty /:/( /:/) boolean/JJ/boolean =/NN/= /:/( returns/NNS/returns true/VBP/true if/IN/if stack/NN/stack is/VBZ/is empty/JJ/empty /NN/) begin/NN/begin return/NN/return stack.top/JJ/stack.top =/NN/= 0/-NONE-/0 end/NN/end empty/NN/empty procedure/NN/procedure full/JJ/full /NN/( /:/) boolean/JJ/boolean =/NN/= /:/( returns/NNS/returns true/VBP/true if/IN/if stack/NN/stack is/VBZ/is full/JJ/full /NN/) begin/NN/begin return/NN/return stack.top/JJ/stack.top =/NN/= max/NN/max end/NN/end full/JJ/full begin/NN/begin end/NN/end stack/NNP/stack. using/VBG/using the/DT/the stack/NN/stack type/NN/type module/NN/module stackuser/NN/stackuser exports/NNS/exports main/JJ/main /NN/( 14.02.95/CD/14.02.95. lb/NN/lb /:/) /:/( example/NN/example client/NN/client of/IN/of the/DT/the integer/NN/integer stack/NN/stack /:/) from/IN/from stack/NN/stack import/NN/import push/NN/push /,/, pop/NN/pop /,/, empty/JJ/empty /,/, full/JJ/full from/IN/from sio/NN/sio import/NN/import error/NN/error /,/, getint/NN/getint /,/, putint/NN/putint /,/, puttext/JJ/puttext /,/, nl/NN/nl </:/< fatal/JJ/fatal error/NN/error >/:/> /:/( suppress/NN/suppress warning/NN/warning /:/) begin/NN/begin puttext/NN/puttext /:/( "/:/" stack/NN/stack user/NNP/user. please/NN/please enter/NN/enter numbers/NNS/numbers \/:/\ n/NN/n "/:/" /:/) while/IN/while not/RB/not full/JJ/full /:/( /NN/) do/VBP/do push/JJ/push /NN/( getint/NN/getint /:/( /:/) /:/) /:/( add/NN/add entered/VBD/entered number/NN/number to/TO/to stack/VB/stack /:/) end/NN/end while/IN/while not/RB/not empty/JJ/empty /NN/( /:/) do/VBP/do putint/JJ/putint /NN/( pop/NN/pop /:/( /:/) /:/) /:/( remove/IN/remove number/NN/number from/IN/from stack/NN/stack and/CC/and return/NN/return it/PRP/it /VBP/) end/NN/end nl/NN/nl /:/( /:/) end/NN/end stackuser/NNP/stackuser. fifo/NN/fifo queues/NNS/queues queues/NNS/queues are/VBP/are more/RBR/more difficult/JJ/difficult to/TO/to implement/NN/implement than/IN/than stacks/NNS/stacks /,/, because/IN/because action/NN/action happens/NNS/happens at/IN/at both/DT/both ends/NNP/ends. the/DT/the easiest/JJS/easiest implementation/NN/implementation uses/NNS/uses an/DT/an array/NN/array /,/, adds/VBZ/adds elements/NNS/elements at/IN/at one/CD/one end/NN/end /,/, and/CC/and moves/NNS/moves all/DT/all elements/NNS/elements when/WRB/when something/NN/something is/VBZ/is taken/VBN/taken off/RP/off the/DT/the queue/NNP/queue. it/PRP/it is/VBZ/is very/RB/very wasteful/JJ/wasteful moving/NN/moving all/DT/all the/DT/the elements/NNS/elements on/IN/on each/DT/each dequeue/NNP/dequeue. can/MD/can we/PRP/we do/VBP/do better/RBR/better more/RBR/more efficient/JJ/efficient queues/NNS/queues suppose/VBP/suppose that/IN/that we/PRP/we maintaining/VBG/maintaining pointers/NNS/pointers to/TO/to the/DT/the first/JJ/first /NN/( head/NN/head /:/) and/CC/and last/JJ/last /NN/( tail/NN/tail /:/) elements/NNS/elements in/IN/in the/DT/the array/queue/JJ/array/queue note/NN/note that/IN/that there/EX/there is/VBZ/is no/DT/no reason/NN/reason to/TO/to explicitly/RB/explicitly clear/JJ/clear previously/RB/previously unused/VBN/unused cells/NNP/cells. now/RB/now both/DT/both enqueue/NN/enqueue and/CC/and dequeue/NN/dequeue are/VBP/are fast/RB/fast /,/, but/CC/but they/PRP/they are/VBP/are wasteful/JJ/wasteful of/IN/of space/NNP/space. we/PRP/we need/VBP/need a/DT/a array/NN/array bigger/NN/bigger than/IN/than the/DT/the total/JJ/total number/NN/number of/IN/of enqueues/NNS/enqueues /,/, instead/RB/instead of/IN/of the/DT/the maximum/NN/maximum number/NN/number of/IN/of items/NNS/items stored/VBN/stored at/IN/at a/DT/a particular/JJ/particular time/NNP/time. circular/NN/circular queues/NNS/queues circular/JJ/circular queues/NNS/queues let/VBP/let us/PRP/us reuse/VBP/reuse empty/JJ/empty space/NN/space note/NN/note that/IN/that the/DT/the pointer/NN/pointer to/TO/to the/DT/the front/NN/front of/IN/of the/DT/the list/NN/list is/VBZ/is now/RB/now behind/IN/behind the/DT/the back/NN/back pointer/NN/pointer when/WRB/when the/DT/the queue/NN/queue is/VBZ/is full/JJ/full /,/, the/DT/the two/CD/two pointers/NNS/pointers point/NN/point to/TO/to neighboring/VBG/neighboring elements/NNP/elements. there/RB/there are/VBP/are lots/NNS/lots of/IN/of possible/JJ/possible ways/NNS/ways to/TO/to adjust/VB/adjust the/DT/the pointers/NNS/pointers for/IN/for circular/JJ/circular queues/NNP/queues. all/DT/all are/VBP/are tricky/JJ/tricky how/WRB/how do/VBP/do you/PRP/you distinguish/VB/distinguish full/JJ/full from/IN/from empty/NN/empty queues/NNS/queues /,/, since/IN/since their/PRP$/their pointer/NN/pointer positions/NNS/positions might/MD/might be/VB/be identical/JJ/identical the/DT/the easiest/JJS/easiest way/NN/way to/TO/to distinguish/VB/distinguish full/JJ/full from/IN/from empty/NN/empty is/VBZ/is with/IN/with a/DT/a counter/NN/counter of/IN/of how/WRB/how many/JJ/many elements/NNS/elements are/VBP/are in/IN/in the/DT/the queue/NNP/queue. fifo/NN/fifo queue/NN/queue interface/NN/interface interface/NN/interface fifo/NN/fifo /:/( 14.07.94/CD/14.07.94 rm/NN/rm /,/, lb/NN/lb /:/) /:/( a/DT/a queue/NN/queue of/IN/of text/NN/text elements/NNS/elements /:/) type/NN/type et/NN/et =/:/= text/NN/text /:/( element/NN/element type/NN/type /:/) procedure/NN/procedure enqueue/NN/enqueue /:/( elem/NN/elem et/NN/et /:/) /:/( adds/VBZ/adds element/NN/element to/TO/to end/VB/end /:/) procedure/NN/procedure dequeue/NN/dequeue /:/( /:/) et/NN/et /:/( removes/NNS/removes and/CC/and returns/NNS/returns first/RB/first element/JJ/element /NN/) procedure/NN/procedure empty/NN/empty /:/( /:/) boolean/JJ/boolean /NN/( returns/NNS/returns true/JJ/true if/IN/if queue/JJ/queue is/VBZ/is empty/JJ/empty /NN/) procedure/NN/procedure full/JJ/full /NN/( /:/) boolean/JJ/boolean /NN/( returns/NNS/returns true/JJ/true if/IN/if queue/JJ/queue is/VBZ/is full/JJ/full /NN/) end/NN/end fifo/NNP/fifo. priority/NN/priority queue/NN/queue implementation/NN/implementation module/NN/module fifo/NN/fifo /:/( 14.07.94/CD/14.07.94 rm/NN/rm /,/, lb/NN/lb /:/) /:/( implementation/NN/implementation of/IN/of a/DT/a fifo/NN/fifo queue/NN/queue of/IN/of text/NN/text elements/NNS/elements /:/) const/IN/const max/NN/max =/:/= 8/CD/8 /CD/( maximum/NN/maximum number/NN/number of/IN/of elements/NNS/elements in/IN/in fifo/NN/fifo queue/NN/queue /:/) type/NN/type fifo/NN/fifo =/:/= record/NN/record info/NN/info array/NN/array /:/[ 0/-NONE-/0 /:/.. max/NN/max /:/- 1/CD/1 /CD/] of/IN/of et/NN/et in/IN/in /,/, out/IN/out /,/, n/NN/n cardinal/JJ/cardinal =/NN/= 0/-NONE-/0 end/NN/end /:/( fifo/NN/fifo /:/) var/NN/var w/NN/w fifo/NN/fifo /:/( contains/NNS/contains a/DT/a fifo/NN/fifo queue/NN/queue /:/) procedure/NN/procedure enqueue/NN/enqueue /:/( elem/NN/elem et/NN/et /:/) =/:/= /:/( adds/VBZ/adds element/NN/element to/TO/to end/VB/end /:/) begin/NN/begin w.info/-NONE-/w.info /./[ w.in/JJ/w.in /NN/] =/:/= elem/NN/elem /:/( stores/NNS/stores new/JJ/new element/NN/element /:/) w.in/JJ/w.in =/NN/= /:/( w.in/JJ/w.in +/NN/+ 1/CD/1 /CD/) mod/NN/mod max/NN/max /:/( increments/NNS/increments in-pointer/JJ/in-pointer in/IN/in ring/NN/ring /:/) inc/NN/inc /:/( w.n/JJ/w.n /NN/) /:/( increments/NNS/increments number/NN/number of/IN/of stored/VBN/stored elements/NNS/elements /:/) end/NN/end enqueue/NN/enqueue procedure/NN/procedure dequeue/NN/dequeue /:/( /:/) et/NN/et =/:/= /:/( removes/NNS/removes and/CC/and returns/NNS/returns first/RB/first element/JJ/element /NN/) var/NN/var e/NN/e et/NN/et begin/NN/begin e/NN/e =/:/= w.info/JJ/w.info /NN/[ w.out/IN/w.out /CD/] /CD/( removes/NNS/removes oldest/JJS/oldest element/NN/element /:/) w.out/IN/w.out =/CD/= /CD/( w.out/-NONE-/w.out +/:/+ 1/CD/1 /CD/) mod/NN/mod max/NN/max /:/( increments/NNS/increments out-pointer/JJ/out-pointer in/IN/in ring/NN/ring /:/) dec/NN/dec /:/( w.n/JJ/w.n /NN/) /:/( decrements/NNS/decrements number/NN/number of/IN/of stored/VBN/stored elements/NNS/elements /:/) return/NN/return e/NN/e /:/( returns/NNS/returns the/DT/the read/NN/read element/NN/element /:/) end/NN/end dequeue/NN/dequeue utility/NN/utility routines/NNS/routines procedure/VBP/procedure empty/JJ/empty /NN/( /:/) boolean/JJ/boolean =/NN/= /:/( returns/NNS/returns true/VBP/true if/IN/if queue/JJ/queue is/VBZ/is empty/JJ/empty /NN/) begin/NN/begin return/NN/return w.n/NN/w.n =/:/= 0/-NONE-/0 end/NN/end empty/NN/empty procedure/NN/procedure full/JJ/full /NN/( /:/) boolean/JJ/boolean =/NN/= /:/( returns/NNS/returns true/VBP/true if/IN/if queue/JJ/queue is/VBZ/is full/JJ/full /NN/) begin/NN/begin return/NN/return w.n/NN/w.n =/:/= max/NN/max end/NN/end full/JJ/full begin/NN/begin end/NN/end fifo/NNP/fifo. user/NN/user module/NN/module module/NN/module fifouser/NN/fifouser exports/NNS/exports main/JJ/main /NN/( 14.07.94/CD/14.07.94. lb/NN/lb /:/) /:/( example/NN/example client/NN/client of/IN/of the/DT/the text/NN/text queue/NNP/queue. /NNP/) from/IN/from fifo/NN/fifo import/NN/import enqueue/NN/enqueue /,/, dequeue/NN/dequeue /,/, empty/JJ/empty /,/, full/JJ/full /:/( operations/NNS/operations of/IN/of the/DT/the queue/NN/queue /:/) from/IN/from sio/NN/sio import/NN/import error/NN/error /,/, gettext/JJ/gettext /,/, puttext/JJ/puttext /,/, nl/NN/nl </:/< fatal/JJ/fatal error/NN/error >/:/> /:/( supress/NN/supress warning/NN/warning /:/) begin/NN/begin puttext/NN/puttext /:/( "/:/" fifo/NN/fifo user/NNP/user. please/NN/please enter/NN/enter texts/NNS/texts \/:/\ n/NN/n "/:/" /:/) while/IN/while not/RB/not full/JJ/full /:/( /NN/) do/VBP/do enqueue/JJ/enqueue /NN/( gettext/NN/gettext /:/( /:/) /:/) end/NN/end while/IN/while not/RB/not empty/JJ/empty /NN/( /:/) do/VBP/do puttext/JJ/puttext /NN/( dequeue/NN/dequeue /:/( /:/) &/CC/& "/NNP/" "/NNP/" /NNP/) end/NN/end nl/NN/nl /:/( /:/) end/NN/end fifouser/NNP/fifouser. other/JJ/other queues/NNS/queues double-ended/JJ/double-ended queues/NNS/queues /:/- these/DT/these are/VBP/are data/NNS/data structures/NNS/structures which/WDT/which support/NN/support both/DT/both push/NN/push and/CC/and pop/VB/pop and/CC/and enqueue/dequeue/JJ/enqueue/dequeue operations/NNP/operations. priority/NN/priority queues/NNS/queues /:/( heaps/NNS/heaps /VBP/) /:/- supports/NNS/supports insertions/NNS/insertions and/CC/and remove/VB/remove minimum/JJ/minimum operations/NNS/operations which/WDT/which useful/JJ/useful in/IN/in simulations/NNS/simulations to/TO/to maintain/VB/maintain a/DT/a queue/NN/queue of/IN/of time/NN/time events/NNP/events. in/IN/in this/DT/this lecture/NN/lecture we/PRP/we introduce/VBP/introduce another/DT/another commonly/RB/commonly used/JJ/used data/NNS/data structure/NN/structure called/VBN/called a/DT/a stack/NNP/stack. we/PRP/we practice/NN/practice again/RB/again writing/VBG/writing an/DT/an interface/NN/interface /,/, and/CC/and then/RB/then implementing/VBG/implementing the/DT/the interface/NN/interface using/VBG/using linked/VBN/linked lists/NNS/lists as/IN/as for/IN/for queues/NNP/queues. we/PRP/we also/RB/also discuss/VBZ/discuss how/WRB/how to/TO/to check/VB/check whether/IN/whether a/DT/a linked/VBN/linked list/NN/list is/VBZ/is circular/JJ/circular or/CC/or not/NNP/not. 2/CD/2 stack/NN/stack interface/NN/interface stacks/NNS/stacks are/VBP/are similar/JJ/similar to/TO/to queues/NNS/queues in/IN/in that/DT/that we/PRP/we can/MD/can insert/VB/insert and/CC/and remove/VB/remove items/NNP/items. but/CC/but we/PRP/we remove/VBP/remove them/PRP/them from/IN/from the/DT/the same/JJ/same end/NN/end that/IN/that we/PRP/we add/VBP/add them/PRP/them /,/, which/WDT/which makes/VBZ/makes stacks/NNS/stacks a/DT/a lifo/NN/lifo /:/( last/JJ/last in/IN/in first/JJ/first out/IN/out /NNP/) data/NNS/data structure/NNP/structure. here/RB/here is/VBZ/is our/PRP$/our interface/NN/interface type/NN/type elem/NN/elem must/MD/must be/VB/be defined/VBN/defined typedef/NN/typedef struct/NN/struct stack/NN/stack stack/NN/stack bool/NN/bool is_empty/NN/is_empty /:/( stack/NN/stack s/NNS/s /:/) //:// o/NN/o /:/( 1/CD/1 /CD/) //CD// stack/NN/stack s_new/NNP/s_new /NNP/( /NNP/) //NNP// o/NN/o /:/( 1/CD/1 /CD/) //CD// void/JJ/void push/NN/push /:/( elem/NN/elem x/NN/x /,/, stack/NN/stack s/NNS/s /:/) //:// o/NN/o /:/( 1/CD/1 /CD/) //CD// elem/NN/elem pop/NN/pop /:/( stack/NN/stack s/NNS/s /:/) //:// o/NN/o /:/( 1/CD/1 /CD/) //CD// we/PRP/we want/VBP/want the/DT/the creation/NN/creation of/IN/of a/DT/a new/JJ/new /NN/( empty/NN/empty /:/) stack/NN/stack as/IN/as well/RB/well as/IN/as pushing/VBG/pushing and/CC/and popping/VBG/popping an/DT/an item/NN/item all/DT/all to/TO/to be/VB/be constant-time/JJ/constant-time operations/NNP/operations. we/PRP/we are/VBP/are being/VBG/being slightly/RB/slightly more/JJR/more abstract/NN/abstract here/RB/here than/IN/than in/IN/in the/DT/the case/NN/case of/IN/of queues/NNS/queues in/IN/in that/DT/that we/PRP/we do/VBP/do not/RB/not write/VB/write /,/, in/IN/in this/DT/this file/NN/file /,/, what/WP/what type/NN/type the/DT/the elements/NNS/elements of/IN/of the/DT/the stack/NN/stack have/VBP/have to/TO/to be/NNP/be. instead/RB/instead we/PRP/we assume/VBP/assume that/IN/that before/IN/before the/DT/the file/NN/file is/VBZ/is read/VBN/read /,/, we/PRP/we have/VBP/have already/RB/already defined/VBN/defined a/DT/a lecture/NN/lecture notes/NNS/notes september/NN/september 16/CD/16 /,/, 2010/CD/2010 stacks/NNS/stacks l8.2/-NONE-/l8.2 type/NN/type elem/NN/elem for/IN/for the/DT/the type/NN/type of/IN/of stack/NN/stack elements/NNP/elements. we/PRP/we say/VBP/say that/IN/that the/DT/the implementation/NN/implementation is/VBZ/is generic/JJ/generic or/CC/or polymorphic/JJ/polymorphic in/IN/in the/DT/the type/NN/type of/IN/of the/DT/the elements/NNP/elements. unfortunately/RB/unfortunately /,/, neither/DT/neither c/NN/c nor/CC/nor c0/NNP/c0 provide/NN/provide a/DT/a good/JJ/good way/NN/way to/TO/to enforce/VB/enforce this/DT/this in/IN/in the/DT/the language/NN/language and/CC/and we/PRP/we have/VBP/have to/TO/to rely/RB/rely on/IN/on programmer/NN/programmer discipline/NNP/discipline. 3/CD/3 stack/NN/stack implementation/NN/implementation the/DT/the idea/NN/idea is/VBZ/is to/TO/to reuse/VB/reuse linked/VBN/linked lists/NNP/lists. but/CC/but since/IN/since all/DT/all operations/NNS/operations work/VBP/work on/IN/on one/CD/one end/NN/end of/IN/of the/DT/the list/NN/list /,/, we/PRP/we do/VBP/do not/RB/not need/VB/need two/CD/two pointers/NNS/pointers but/CC/but just/RB/just one/CD/one which/WDT/which we/PRP/we call/VBP/call top/NNP/top. a/DT/a typical/JJ/typical stack/NN/stack then/RB/then has/VBZ/has the/DT/the following/VBG/following form/NN/form 3/CD/3 2/CD/2 1/CD/1 top/JJ/top data/NNS/data next/JJ/next note/NN/note that/IN/that the/DT/the end/NN/end of/IN/of the/DT/the linked/VBN/linked list/NN/list is/VBZ/is marked/VBN/marked with/IN/with the/DT/the special/JJ/special null/NN/null pointer/NN/pointer that/WDT/that can/MD/can not/RB/not be/VB/be dereferenced/NNP/dereferenced. we/PRP/we define/VBP/define struct/NN/struct list/NN/list /:/{ elem/NN/elem data/NNS/data struct/NN/struct list/NN/list next/IN/next /NN/} typedef/NN/typedef struct/NN/struct list/NN/list list/NN/list struct/NN/struct stack/NN/stack /:/{ list/NN/list top/NN/top /:/} to/TO/to test/NN/test if/IN/if some/DT/some structure/NN/structure is/VBZ/is a/DT/a valid/JJ/valid stack/NN/stack /,/, we/PRP/we only/RB/only need/VBP/need to/TO/to check/VB/check that/IN/that the/DT/the list/NN/list starting/VBG/starting at/IN/at top/JJ/top ends/NNS/ends in/IN/in null/NN/null /,/, which/WDT/which is/VBZ/is the/DT/the same/JJ/same as/IN/as checking/NN/checking that/IN/that this/DT/this is/VBZ/is a/DT/a list/NN/list segment/NN/segment /:/( as/IN/as introduced/VBN/introduced in/IN/in the/DT/the last/JJ/last lecture/NN/lecture /:/) /./. bool/NN/bool is_stack/NNP/is_stack /NNP/( stack/NN/stack s/VBZ/s /:/) /:/{ return/NN/return is_segment/NN/is_segment /:/( s/JJ/s- >/NN/> top/JJ/top /,/, null/JJ/null /NN/) /:/} lecture/NN/lecture notes/NNS/notes september/NN/september 16/CD/16 /,/, 2010/CD/2010 stacks/NNS/stacks l8.3/-NONE-/l8.3 to/TO/to check/VB/check if/IN/if the/DT/the stack/NN/stack is/VBZ/is empty/JJ/empty /,/, we/PRP/we only/RB/only need/VBP/need to/TO/to verify/VB/verify that/IN/that top/JJ/top is/VBZ/is null/NNP/null. bool/NN/bool is_empty/NNP/is_empty /NNP/( stack/NN/stack s/VBZ/s /:/) @/IN/@ requires/NNS/requires is_stack/NNP/is_stack /NNP/( s/VBZ/s /:/) /:/{ return/NN/return s/NN/s- >/:/> top/JJ/top =/NN/= =/:/= null/NN/null /:/} creating/VBG/creating a/DT/a new/JJ/new stack/NN/stack is/VBZ/is very/RB/very simple/JJ/simple /,/, since/IN/since we/PRP/we only/RB/only need/VBP/need to/TO/to set/VB/set top/JJ/top to/TO/to null/VB/null after/IN/after allocating/VBG/allocating it/NNP/it. stack/NN/stack s_new/NNP/s_new /NNP/( /NNP/) @/NNP/@ ensures/VBZ/ensures is_stack/NNP/is_stack /NNP/( \/NNP/\ result/NN/result /:/) @/NN/@ ensures/NNS/ensures is_empty/NNP/is_empty /NNP/( \/NNP/\ result/NN/result /:/) /NN/{ stack/NN/stack s/NNS/s =/:/= alloc/NN/alloc /:/( struct/NN/struct stack/NN/stack /:/) s/JJ/s- >/NN/> top/JJ/top =/NN/= null/NN/null return/NN/return s/VBZ/s /:/} to/TO/to push/VB/push an/DT/an element/NN/element onto/IN/onto the/DT/the stack/NN/stack /,/, we/PRP/we create/VBP/create a/DT/a new/JJ/new list/NN/list item/NN/item /,/, set/VBN/set its/PRP$/its data/NNS/data field/NN/field and/CC/and then/RB/then its/PRP$/its next/JJ/next field/NN/field to/TO/to the/DT/the current/JJ/current top/JJ/top of/IN/of the/DT/the stack/NNP/stack. finally/RB/finally /,/, we/PRP/we need/VBP/need to/TO/to update/VB/update the/DT/the top/JJ/top field/NN/field of/IN/of the/DT/the stack/NN/stack to/TO/to point/NN/point to/TO/to the/DT/the new/JJ/new list/NN/list item/NNP/item. while/IN/while this/DT/this is/VBZ/is simple/JJ/simple /,/, it/PRP/it is/VBZ/is still/RB/still a/DT/a good/JJ/good idea/NN/idea to/TO/to draw/VB/draw a/DT/a diagram/NNP/diagram. we/PRP/we go/VBP/go from/IN/from 3/CD/3 2/CD/2 1/CD/1 top/JJ/top data/NNS/data next/JJ/next lecture/NN/lecture notes/NNS/notes september/NN/september 16/CD/16 /,/, 2010/CD/2010 stacks/NNS/stacks l8.4/-NONE-/l8.4 to/TO/to 3/CD/3 2/CD/2 1/CD/1 top/JJ/top data/NNS/data next/JJ/next 4/CD/4 in/IN/in code/NN/code void/VBD/void push/NN/push /:/( elem/NN/elem x/NN/x /,/, stack/NN/stack s/NNS/s /:/) @/IN/@ requires/NNS/requires is_stack/NNP/is_stack /NNP/( s/VBZ/s /:/) @/IN/@ ensures/NNS/ensures is_empty/NNP/is_empty /NNP/( s/VBZ/s /:/) /:/{ list/NN/list first/RB/first =/./= alloc/NN/alloc /:/( struct/NN/struct list/NN/list /:/) first/JJ/first- >/NN/> data/NNS/data =/:/= x/NN/x first/-NONE-/first- >/./> next/JJ/next =/NN/= s/NN/s- >/:/> top/JJ/top s/NN/s- >/:/> top/JJ/top =/NN/= first/RB/first /./} finally/RB/finally /,/, to/TO/to pop/VB/pop an/DT/an element/NN/element from/IN/from the/DT/the stack/NN/stack we/PRP/we just/RB/just have/VBP/have to/TO/to move/VB/move the/DT/the top/JJ/top pointer/NN/pointer to/TO/to follow/VB/follow the/DT/the next/JJ/next pointer/NN/pointer from/IN/from the/DT/the top/JJ/top of/IN/of the/DT/the stack/NNP/stack. as/IN/as in/IN/in the/DT/the case/NN/case of/IN/of dequeuing/VBG/dequeuing an/DT/an element/NN/element from/IN/from the/DT/the previous/JJ/previous lecture/NN/lecture /,/, the/DT/the list/NN/list item/NN/item that/WDT/that previously/RB/previously constituted/VBD/constituted the/DT/the top/JJ/top of/IN/of the/DT/the stack/NN/stack will/MD/will no/RB/no longer/RBR/longer be/VB/be accessible/JJ/accessible and/CC/and be/VB/be garbage/NN/garbage collected/VBN/collected as/IN/as needed/VBN/needed by/IN/by the/DT/the runtime/NN/runtime system/NNP/system. we/PRP/we go/VBP/go from/IN/from 3/CD/3 2/CD/2 1/CD/1 top/JJ/top data/NNS/data next/JJ/next lecture/NN/lecture notes/NNS/notes september/NN/september 16/CD/16 /,/, 2010/CD/2010 stacks/NNS/stacks l8.5/-NONE-/l8.5 to/TO/to 3/CD/3 2/CD/2 1/CD/1 top/JJ/top data/NNS/data next/JJ/next in/IN/in code/NN/code elem/NN/elem pop/NN/pop /:/( stack/NN/stack s/NNS/s /:/) @/IN/@ requires/NNS/requires is_stack/NNP/is_stack /NNP/( s/VBZ/s /:/) @/IN/@ ensures/NNS/ensures is_stack/NNP/is_stack /NNP/( s/VBZ/s /:/) /:/{ assert/NN/assert /:/( s/NN/s- >/:/> top/JJ/top =/NN/= null/NN/null /,/, "/:/" can/MD/can not/RB/not pop/VB/pop empty/JJ/empty stack/NN/stack "/:/" /:/) /:/{ elem/NN/elem x/NN/x =/:/= s/JJ/s- >/NN/> top/NN/top- >/:/> data/NNS/data s/-NONE-/s- >/:/> top/JJ/top =/NN/= s/NN/s- >/:/> top/JJ/top- >/NN/> next/IN/next return/NN/return x/NN/x /:/} /:/} this/DT/this completes/VBZ/completes the/DT/the implementation/NN/implementation of/IN/of stacks/NNS/stacks /,/, which/WDT/which are/VBP/are a/DT/a very/RB/very simple/JJ/simple and/CC/and pervasive/JJ/pervasive data/NNS/data structure/NNP/structure. we/PRP/we will/MD/will exercise/VB/exercise them/PRP/them in/IN/in the/DT/the next/JJ/next lecture/NN/lecture when/WRB/when we/PRP/we implement/VBP/implement a/DT/a virtual/JJ/virtual machine/NNP/machine. 4/CD/4 detecting/VBG/detecting circularity/NN/circularity checking/VBG/checking whether/IN/whether a/DT/a stack/NN/stack or/CC/or a/DT/a queue/NN/queue satisify/NN/satisify their/PRP$/their data/NNS/data structure/NN/structure invariant/NN/invariant raises/VBZ/raises an/DT/an interesting/JJ/interesting question/NN/question what/WP/what if/IN/if /,/, somehow/VBP/somehow /,/, we/PRP/we created/VBD/created a/DT/a list/NN/list that/WDT/that lecture/NN/lecture notes/VBZ/notes september/NN/september 16/CD/16 /,/, 2010/CD/2010 stacks/NNS/stacks l8.6/-NONE-/l8.6 contains/VBZ/contains a/DT/a cycle/NN/cycle /,/, such/JJ/such as/IN/as 1/CD/1 2/CD/2 3/CD/3 4/CD/4 start/NN/start data/NNS/data next/JJ/next 6/CD/6 5/CD/5 in/IN/in that/DT/that case/NN/case /,/, following/VBG/following next/JJ/next pointers/NNS/pointers until/IN/until we/PRP/we reach/VBP/reach null/JJ/null actually/RB/actually never/RB/never terminates/NNP/terminates. the/DT/the program/NN/program for/IN/for checking/VBG/checking a/DT/a segment/NN/segment will/MD/will get/VB/get into/IN/into an/DT/an infinite/JJ/infinite loop/NNP/loop. in/IN/in general/JJ/general /,/, contracts/NNS/contracts should/MD/should terminate/VB/terminate and/CC/and have/VB/have no/DT/no effects/NNP/effects. it/PRP/it is/VBZ/is marginally/RB/marginally acceptable/JJ/acceptable if/IN/if a/DT/a contract/NN/contract diverges/NNS/diverges /,/, because/IN/because it/PRP/it will/MD/will not/RB/not incorrectly/RB/incorrectly claim/VBP/claim that/IN/that the/DT/the contract/NN/contract it/PRP/it satisfied/VBD/satisfied /,/, but/CC/but it/PRP/it would/MD/would clearly/RB/clearly be/VB/be better/JJR/better if/IN/if it/PRP/it explicitly/RB/explicitly rejected/VBD/rejected a/DT/a circular/JJ/circular list/NNP/list. but/CC/but how/WRB/how do/VBP/do we/PRP/we check/VB/check that/IN/that before/IN/before you/PRP/you read/VBP/read on/IN/on /,/, you/PRP/you should/MD/should seriously/RB/seriously think/VB/think about/IN/about the/DT/the problem/NN/problem /,/, like/IN/like our/PRP$/our class/NN/class did/VBD/did in/IN/in lecture/NNP/lecture. lecture/NN/lecture notes/NNS/notes september/NN/september 16/CD/16 /,/, 2010/CD/2010 stacks/NNS/stacks l8.7/-NONE-/l8.7 here/RB/here is/VBZ/is the/DT/the original/JJ/original is_segment/NNP/is_segment predicate/NNP/predicate. bool/NN/bool is_segment/NNP/is_segment /NNP/( list/NN/list start/NN/start /,/, list/NN/list end/NN/end /:/) /:/{ list/NN/list p/NN/p =/:/= start/NN/start while/IN/while /CD/( p/NN/p =/:/= end/NN/end /:/) /:/{ if/IN/if /CD/( p/NN/p =/:/= =/:/= null/JJ/null /NN/) return/NN/return false/NN/false p/NN/p =/:/= p/JJ/p- >/NN/> next/IN/next /NN/} return/NN/return true/NN/true /:/} one/CD/one the/DT/the simplest/JJS/simplest solutions/NNS/solutions proposed/VBD/proposed in/IN/in class/NN/class keeps/NNS/keeps a/DT/a copy/NN/copy of/IN/of the/DT/the start/NN/start pointer/NNP/pointer. then/RB/then when/WRB/when we/PRP/we advance/VBP/advance p/NN/p we/PRP/we run/VBP/run through/IN/through an/DT/an auxiliary/JJ/auxiliary loop/NN/loop to/TO/to check/VB/check if/IN/if the/DT/the next/JJ/next element/NN/element is/VBZ/is already/RB/already in/IN/in the/DT/the list/NNP/list. the/DT/the code/NN/code would/MD/would be/VB/be something/NN/something like/IN/like bool/NN/bool is_segment/NNP/is_segment /NNP/( list/NN/list start/NN/start /,/, list/NN/list end/NN/end /:/) /:/{ list/NN/list p/NN/p =/:/= start/NN/start while/IN/while /CD/( p/NN/p =/:/= end/NN/end /:/) /:/{ if/IN/if /CD/( p/NN/p =/:/= =/:/= null/JJ/null /NN/) return/NN/return false/NN/false /:/{ list/NN/list q/NN/q =/:/= start/NN/start while/IN/while /CD/( q/NN/q =/:/= p/NN/p /:/) /:/{ if/IN/if /CD/( q/NN/q =/:/= =/:/= p/JJ/p- >/NN/> next/IN/next /NN/) return/NN/return false/NN/false circular/NN/circular q/NN/q =/:/= q/JJ/q- >/NN/> next/IN/next /NN/} /:/} p/NN/p =/:/= p/JJ/p- >/NN/> next/IN/next /NN/} return/NN/return true/NN/true /:/} unfortunately/RB/unfortunately this/DT/this solution/NN/solution requires/VBZ/requires o/NN/o /:/( n/NN/n 2/CD/2 /CD/) time/NN/time for/IN/for a/DT/a list/NN/list with/IN/with n/NN/n elements/NNS/elements /,/, whether/IN/whether it/PRP/it is/VBZ/is circular/JJ/circular or/CC/or not/NNP/not. again/RB/again /,/, consider/NN/consider if/IN/if you/PRP/you can/MD/can find/VB/find a/DT/a better/JJR/better solution/NN/solution before/IN/before reading/NN/reading on/NNP/on. lecture/NN/lecture notes/NNS/notes september/NN/september 16/CD/16 /,/, 2010/CD/2010 stacks/NNS/stacks l8.8/-NONE-/l8.8 the/DT/the idea/NN/idea for/IN/for a/DT/a more/RBR/more efficient/JJ/efficient solution/NN/solution is/VBZ/is to/TO/to create/VB/create two/CD/two pointers/NNS/pointers /,/, let/VB/let s/NNS/s name/VB/name them/PRP/them t/VB/t and/CC/and h/NNP/h. t/NN/t traverses/NNS/traverses the/DT/the list/NN/list like/IN/like the/DT/the pointer/NN/pointer p/NN/p before/IN/before /,/, in/IN/in single/JJ/single steps/NNP/steps. h/NN/h /,/, on/IN/on the/DT/the other/JJ/other hand/NN/hand /,/, skips/NNS/skips two/CD/two elements/NNS/elements ahead/RB/ahead for/IN/for every/DT/every step/NN/step taken/VBN/taken by/IN/by p/NNP/p. if/IN/if the/DT/the slower/JJR/slower one/CD/one t/NN/t ever/RB/ever gets/VBZ/gets into/IN/into a/DT/a loop/NN/loop /,/, the/DT/the other/JJ/other pointer/NN/pointer h/NN/h will/MD/will overtake/VB/overtake it/PRP/it from/IN/from behind/NNP/behind. and/CC/and this/DT/this is/VBZ/is the/DT/the only/JJ/only way/NN/way that/IN/that this/DT/this is/VBZ/is possible/NNP/possible. let/NN/let s/VBZ/s try/NN/try it/PRP/it on/IN/on our/PRP$/our list/NNP/list. we/PRP/we show/VBP/show the/DT/the state/NN/state of/IN/of t/NN/t and/CC/and h/NN/h on/IN/on every/DT/every iteration/NNP/iteration. 1/CD/1 2/CD/2 3/CD/3 4/CD/4 data/NNS/data next/JJ/next 6/CD/6 5/CD/5 t/NN/t h/NN/h 1/CD/1 2/CD/2 3/CD/3 4/CD/4 data/NNS/data next/JJ/next 6/CD/6 5/CD/5 t/NN/t h/NN/h 1/CD/1 2/CD/2 3/CD/3 4/CD/4 data/NNS/data next/JJ/next 6/CD/6 5/CD/5 t/NN/t h/NN/h lecture/NN/lecture notes/NNS/notes september/NN/september 16/CD/16 /,/, 2010/CD/2010 stacks/NNS/stacks l8.9/-NONE-/l8.9 1/CD/1 2/CD/2 3/CD/3 4/CD/4 data/NNS/data next/JJ/next 6/CD/6 5/CD/5 t/NN/t h/NN/h in/IN/in code/NN/code bool/NN/bool is_circular/NNP/is_circular /NNP/( list/NN/list l/NN/l /:/) /:/{ if/IN/if /CD/( l/NN/l =/:/= =/:/= null/JJ/null /NN/) return/NN/return false/NN/false /:/{ list/NN/list t/NN/t =/:/= l/NN/l tortoise/NN/tortoise list/NN/list h/NN/h =/:/= l/JJ/l- >/NN/> next/IN/next hare/NN/hare while/IN/while /CD/( t/NN/t =/:/= h/NN/h /:/) @/IN/@ loop_invariant/NNP/loop_invariant is_segment/NNP/is_segment /NNP/( t/NN/t /,/, h/NN/h /:/) /:/{ if/IN/if /CD/( h/NN/h =/:/= =/:/= null/JJ/null h/NN/h- >/:/> next/JJ/next =/NN/= =/:/= null/NN/null /:/) return/NN/return false/NN/false t/NN/t =/:/= t/JJ/t- >/NN/> next/IN/next h/NN/h =/:/= h/JJ/h- >/NN/> next/NN/next- >/:/> next/JJ/next /NN/} return/NN/return true/NN/true /:/} /:/} a/DT/a few/JJ/few points/NNS/points about/IN/about this/DT/this code/NN/code in/IN/in the/DT/the condition/NN/condition inside/NN/inside the/DT/the loop/NN/loop we/PRP/we exploit/VBP/exploit the/DT/the short-circuiting/JJ/short-circuiting evaluation/NN/evaluation of/IN/of the/DT/the logical/JJ/logical or/CC/or so/RB/so we/PRP/we only/RB/only follow/VBP/follow the/DT/the next/JJ/next pointer/NN/pointer for/IN/for h/NN/h when/WRB/when we/PRP/we know/VBP/know it/PRP/it is/VBZ/is not/RB/not null/NNP/null. guarding/NN/guarding against/IN/against trying/VBG/trying to/TO/to dereference/NN/dereference a/DT/a null/NN/null pointer/NN/pointer is/VBZ/is an/DT/an extremely/RB/extremely important/JJ/important consideration/NN/consideration when/WRB/when writing/VBG/writing pointer/NN/pointer manipulation/NN/manipulation code/NN/code such/JJ/such as/IN/as this/NNP/this. this/DT/this algorithm/NN/algorithm has/VBZ/has been/VBN/been called/VBN/called the/DT/the tortoise/NN/tortoise and/CC/and the/DT/the hare/NN/hare and/CC/and is/VBZ/is due/JJ/due to/TO/to floyd/NNP/floyd. we/PRP/we have/VBP/have chosen/VBN/chosen t/NN/t to/TO/to stand/VB/stand for/IN/for tortoise/NN/tortoise and/CC/and h/NN/h to/TO/to stand/VB/stand for/IN/for hare/NNP/hare. this/DT/this algorithm/NN/algorithm has/VBZ/has complexity/NN/complexity o/NN/o /:/( n/NN/n /:/) /./. an/DT/an easy/JJ/easy way/NN/way to/TO/to see/VB/see this/DT/this was/VBD/was suggested/VBN/suggested by/IN/by a/DT/a student/NN/student in/IN/in class/NN/class when/WRB/when there/EX/there is/VBZ/is no/DT/no loop/NN/loop /,/, the/DT/the hare/NN/hare will/MD/will stumble/VB/stumble over/IN/over null/JJ/null after/IN/after o/NN/o /:/( n/NN/n /:/) steps/NNP/steps. if/IN/if there/EX/there is/VBZ/is a/DT/a loop/NN/loop /,/, then/RB/then consider/JJR/consider the/DT/the point/NN/point when/WRB/when the/DT/the tortoise/NN/tortoise enters/VBZ/enters the/DT/the loop/NNP/loop. at/IN/at this/DT/this point/NN/point /,/, the/DT/the hare/NN/hare must/MD/must already/RB/already be/VB/be somewhere/RB/somewhere in/IN/in the/DT/the loop/NNP/loop. now/RB/now for/IN/for every/DT/every step/NN/step the/DT/the tortoise/NN/tortoise takes/VBZ/takes in/IN/in the/DT/the loop/NN/loop the/DT/the hare/NN/hare takes/VBZ/takes two/CD/two /,/, so/RB/so on/IN/on every/DT/every iteration/NN/iteration it/PRP/it comes/VBZ/comes one/CD/one closer/NNP/closer. the/DT/the hare/NN/hare will/MD/will catch/VB/catch the/DT/the tortoise/NN/tortoise after/IN/after at/IN/at most/JJS/most half/NN/half the/DT/the size/NN/size of/IN/of the/DT/the loop/NNP/loop. therefore/NN/therefore the/DT/the overall/JJ/overall complexity/NN/complexity of/IN/of o/NN/o /:/( n/NN/n /:/) the/DT/the tortoise/NN/tortoise will/MD/will not/RB/not complete/VB/complete a/DT/a full/JJ/full trip/NN/trip around/IN/around the/DT/the loop/NNP/loop. 