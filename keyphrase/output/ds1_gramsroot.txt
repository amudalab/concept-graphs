structures and algorithms::structures and algorithms
today some basic::today some basic
terminology regarding data::terminology regarding data
definitions an algorithm::definitions an algorithm
organize the data::organize the data
structures an array::structures an array
array or list::array or list
list for instance::list for instance
lot more data::lot more data
solve that problem::solve that problem
process develop data::process develop data
develop data structures::develop data structures
organizing the data::organizing the data
problem okay whats::problem okay whats
whats an algorithmic::whats an algorithmic
problem an algorithmic::problem an algorithmic
specification a sorted::specification a sorted
sorted non decreasing::sorted non decreasing
non decreasing sequence::non decreasing sequence
sequence of natural::sequence of natural
numbers of non::numbers of non
non zero finite::non zero finite
completely specified input::completely specified input
input which meet::input which meet
meet the specification::meet the specification
sequence of sorted::sequence of sorted
non decreasing numbers::non decreasing numbers
form a input::form a input
infinitely many input::infinitely many input
describing the actions::describing the actions
infinitely many algorithms::infinitely many algorithms
algorithms for solving::algorithms for solving
notion of good::notion of good
right so good::right so good
efficient is good::efficient is good
takes less memory::takes less memory
working with right::working with right
measures of efficiency::measures of efficiency
spending with running::spending with running
analyzing this space::analyzing this space
spend in worrying::spend in worrying
efficiency of algorithms::efficiency of algorithms
function of input::function of input
input becomes ten::input becomes ten
ten times larger::ten times larger
size of input::size of input
algorithm you implement::algorithm you implement
algorithm which means::algorithm which means
means you write::means you write
write a program::write a program
language you run::language you run
run the program::run the program
program with varying::program with varying
varying data sets::varying data sets
smaller some larger::smaller some larger
larger data sets::larger data sets
kinds varying composition::kinds varying composition
right and clock::right and clock
utility like system::utility like system
current time millis::current time millis
millis to clock::millis to clock
out how good::out how good
good your algorithms::good your algorithms
call an experimental::call an experimental
limitations so put::limitations so put
implement the algorithm::implement the algorithm
mine how good::mine how good
good your algorithm::good your algorithm
set of inputs::set of inputs
number of instances::number of instances
run your experimental::run your experimental
experimental small set::experimental small set
set of instances::set of instances
algorithm is taking::algorithm is taking
right by platform::right by platform
hardware and software::hardware and software
imagine different machines::imagine different machines
machines would make::machines would make
machines in fact::machines in fact
users were working::users were working
make a difference::make a difference
develop the general::develop the general
develop a high::develop a high
high level description::high level description
describing an algorithm::describing an algorithm
description to det::description to det
out the running::out the running
system a methodology::system a methodology
evaluate the efficency::evaluate the efficency
give a high::give a high
call a pseudo::call a pseudo
doing this algorithm::doing this algorithm
takes an array::takes an array
stores an integer::stores an integer
find the maximum::find the maximum
mixture of natural::mixture of natural
high level programming::high level programming
level programming construct::level programming construct
things are required::things are required
program is doing::program is doing
doing is starting::doing is starting
starting its keeping::starting its keeping
maximum variable maximum::maximum variable maximum
variable called current::variable called current
current maximum element::current maximum element
element the element::element the element
element under consideration::element under consideration
update current max::update current max
return current max::return current max
doing pseudo code::doing pseudo code
computer its pseudo::computer its pseudo
coveys the idea::coveys the idea
idea it coveys::idea it coveys
coveys the concepts::coveys the concepts
structured pseudo code::structured pseudo code
code most structured::code most structured
structured than usual::structured than usual
standard numerical numeric::standard numerical numeric
numerical numeric boolean::numerical numeric boolean
numeric boolean expression::numeric boolean expression
quality operator quality::quality operator quality
operator quality relationship::operator quality relationship
relationship in java::relationship in java
parameter it takes::parameter it takes
kinds of programming::kinds of programming
make a call::make a call
method the argument::method the argument
low level operation::low level operation
level operation examples::level operation examples
operation examples data::operation examples data
examples data movement::examples data movement
routine call return::routine call return
operations or logical::operations or logical
call primitive operations::call primitive operations
inspect the pseudo::inspect the pseudo
pseudo code count::pseudo code count
count the number::count the number
number of primitive::number of primitive
sequence of numbers::sequence of numbers
non decreasing order::non decreasing order
input any set::input any set
set of numbers::set of numbers
make an output::make an output
right your algorithm::right your algorithm
algorithm should sort::algorithm should sort
sort the numbers::sort the numbers
produce the sequence::produce the sequence
running time depend::running time depend
sorted these numbers::sorted these numbers
algorithm using right::algorithm using right
first sorting technique::first sorting technique
game of cards::game of cards
strategy you follow::strategy you follow
picking up set::picking up set
set of cards::set of cards
start with empty::start with empty
hand you pick::hand you pick
hand already lets::hand already lets
cards and inserted::cards and inserted
code for insertion::code for insertion
understand i give::understand i give
input an array::input an array
array of integers::array of integers
input the output::input the output
input output specification::input output specification
variables two indices::variables two indices
element i put::element i put
insert the key::insert the key
loop its starts::loop its starts
value it starts::value it starts
value j minus::value j minus
found the right::found the right
find an element::find an element
loop will continue::loop will continue
key this loop::key this loop
loop will terminate::loop will terminate
reach i equals::reach i equals
case that means::case that means
moved every thing::moved every thing
insert the element::insert the element
shifting the element::shifting the element
shifted to right::shifted to right
element once step::element once step
insert the right::insert the right
place i shift::place i shift
shift nine right::shift nine right
right one step::right one step
location becomes empty::location becomes empty
put him key::put him key
find the right::find the right
element and insert::element and insert
analyze this algorithm::analyze this algorithm
algorithm okay put::algorithm okay put
arrow please make::arrow please make
make a correction::make a correction
two primitive operation::two primitive operation
reflect just represent::reflect just represent
counting the number::counting the number
number of times::number of times
operations is executed::operations is executed
executed is done::executed is done
done n times::done n times
two then assign::two then assign
roughly n times::roughly n times
minus one times::minus one times
done n minus::done n minus
times lets forget::times lets forget
sub j reflects::sub j reflects
reflects the counts::reflects the counts
counts the number::counts the number
shift an element::shift an element
shift two elements::shift two elements
counting that quantity::counting that quantity
reach this part::reach this part
checking this condition::checking this condition
condition so first::condition so first
reach this condition::reach this condition
condition t subject::condition t subject
condition is sum::condition is sum
operation please correct::operation please correct
statement is part::statement is part
loop is done::loop is done
right t sub::right t sub
quantity which depends::quantity which depends
instances not problem::instances not problem
problem right difference::problem right difference
sorting the instance::sorting the instance
instance is set::instance is set
numbers the sequence::numbers the sequence
difference t sub::difference t sub
sub j makes::sub j makes
sorted t sub::sorted t sub
compare the element::compare the element
order the number::order the number
insert is smaller::insert is smaller
element the fourth::element the fourth
case t sub::case t sub
sub j equal::sub j equal
equal j note::equal j note
kind n squared::kind n squared
case the running::case the running
times n minus::times n minus
right the behavior::right the behavior
talking of asymptotic::talking of asymptotic
case the total::case the total
times some constant::times some constant
minus some constant::minus some constant
linear time algorithm::linear time algorithm
case would expect::case would expect
right an average::right an average
worst and average::worst and average
input i suppose::input i suppose
interest in sorting::interest in sorting
sorting n numbers::sorting n numbers
worst case define::worst case define
define the worst::define the worst
case is defined::case is defined
infinitely many bars::infinitely many bars
give as values::give as values
compute worst case::compute worst case
case best case::case best case
case average case::case average case
create a plot::create a plot
case an average::case an average
topic monotonically increasing::topic monotonically increasing
monotonically increasing parts::monotonically increasing parts
size the input::size the input
increases the size::increases the size
algorithm will increase::algorithm will increase
size become larger::size become larger
easiest to work::easiest to work
work with worst::work with worst
bound it tells::bound it tells
long your algorithm::long your algorithm
case many algorithms::case many algorithms
algorithms um occurs::algorithms um occurs
algorithm is close::algorithm is close
right in fact::right in fact
squared and worst::squared and worst
quantity to compete::quantity to compete
kind of average::kind of average
instances are drawn::instances are drawn
instance is drawn::instance is drawn
quantity to work::quantity to work
measure of interest::measure of interest
kind of thing::kind of thing
analyze the running::analyze the running
read of superficial::read of superficial
constant n squared::constant n squared
times would depend::times would depend
hardware the compiler::hardware the compiler
right and show::right and show
bother about distinguish::bother about distinguish
ahs the running::ahs the running
size its doubles::size its doubles
running time increases::running time increases
increases fore fold::increases fore fold
interested in capturing::interested in capturing
increase with increase::increase with increase
instance in input::instance in input
big oh notation::big oh notation
represent the input::represent the input
non negative functions::non negative functions
size is increases::size is increases
increases the value::increases the value
non decreasing functions::non decreasing functions
drawn two functions::drawn two functions
function is read::function is read
function this function::function this function
examples would clarify::examples would clarify
non linear function::non linear function
point of crossing::point of crossing
crossing what point::crossing what point
line any constant::line any constant
displaces by suitable::displaces by suitable
out a constant::out a constant
pick a larger::pick a larger
squared is big::squared is big
out this things::out this things
simple rule suppose::simple rule suppose
function if fifty::function if fifty
fifty n log::fifty n log
drop all constants::drop all constants
constants an lower::constants an lower
lower order terms::lower order terms
terms so forget::terms so forget
forget the constant::forget the constant
drop the constant::drop the constant
constant an lower::constant an lower
minus three big::minus three big
drop all lower::drop all lower
fastest growing term::fastest growing term
squared n term::squared n term
drop my constant::drop my constant
function is big::function is big
quantity this large::quantity this large
times n square::times n square
larger than sum::larger than sum
limit this quantity::limit this quantity
times this quantity::times this quantity
quantity in fact::quantity in fact
equal to fifty::equal to fifty
provide as strong::provide as strong
statement is true::statement is true
sub sequence slides::sub sequence slides
express the number::express the number
executed during run::executed during run
algorithm which takes::algorithm which takes
operations is big::operations is big
primitive operations big::primitive operations big
input size grows::input size grows
input size doubles::input size doubles
increase fore fold::increase fore fold
similarly our algorithm::similarly our algorithm
hierarchy this kind::hierarchy this kind
square and algorithm::square and algorithm
running time big::running time big
algorithm with running::algorithm with running
word of caution::word of caution
algorithm whose running::algorithm whose running
times n right::times n right
doing whole lot::doing whole lot
create such algorithm::create such algorithm
two n squared::two n squared
achieved very late::achieved very late
large for small::large for small
two n square::two n square
array of numbers::array of numbers
numbers n numbers::numbers n numbers
output an array::output an array
compute each element::compute each element
array a right::array a right
compute a ten::compute a ten
doing to compute::doing to compute
computing a ten::computing a ten
taking the value::taking the value
running the index::running the index
ten this accumulator::ten this accumulator
dividing the value::dividing the value
accumulator with eleven::accumulator with eleven
eleven twelve thirteen::eleven twelve thirteen
twelve thirteen fourteen::twelve thirteen fourteen
right and lets::right and lets
times this step::times this step
executed its executed::executed its executed
executed i times::executed i times
minus one right::minus one right
thing is done::thing is done
roughly n square::roughly n square
executed n square::executed n square
executed this step::executed this step
executed n times::executed n times
algorithm is big::algorithm is big
repeating of computation::repeating of computation
computation so hand::computation so hand
right the single::right the single
prefix the sum::prefix the sum
compute ith element::compute ith element
finish ith run::finish ith run
run ith iteration::run ith iteration
doing two steps::doing two steps
steps two primitive::steps two primitive
two primitive operations::two primitive operations
right that makes::right that makes
order n times::order n times
loop is executed::loop is executed
linear and quadratic::linear and quadratic
log n polynomial::log n polynomial
constant and algorithm::constant and algorithm
big omega notation::big omega notation
notation and big::notation and big
big theta notation::big theta notation
notation the big::notation the big
bound right function::bound right function
two more related::two more related
related asymptotic notations::related asymptotic notations
non tight logs::non tight logs
logs of big::logs of big
non tight analogs::non tight analogs
analogs of big::analogs of big
analogy the real::analogy the real
numbers when number::numbers when number
equal to theta::equal to theta
theta is equal::theta is equal
talk of equality::talk of equality
equality a functions::equality a functions
slides the formal::slides the formal
algorithms whose running::algorithms whose running
hundred n twenty::hundred n twenty
twenty n log::twenty n log
largest problems size::largest problems size
minute one hour::minute one hour
largest problem size::largest problem size
solve roughly twenty::solve roughly twenty
lets say twenty::lets say twenty
problem of size::problem of size
solve the problem::solve the problem
thirty sixth hundred::thirty sixth hundred
algorithm still large::algorithm still large
large in increase::large in increase
solve for problem::solve for problem
millions of years::millions of years
behavior that bothers::behavior that bothers
stop this lecture::stop this lecture
notation and terminology::notation and terminology
data structures::data structures
learn today::learn today
basic terminology::basic terminology
simple definitions::simple definitions
computational procedure::computational procedure
programming language::programming language
data structure::data structure
process develop::process develop
develop data::develop data
algorithmic problem::algorithmic problem
sorted non::sorted non
non decreasing::non decreasing
decreasing sequence::decreasing sequence
natural numbers::natural numbers
finite length::finite length
output specification::output specification
decreasing numbers::decreasing numbers
input instance::input instance
input instances::input instances
good algorithm::good algorithm
efficient algorithm::efficient algorithm
efficient efficient::efficient efficient
input sizes::input sizes
small input::small input
algorithm running::algorithm running
ten times::ten times
twenty times::twenty times
hundred times::hundred times
measure running::measure running
efficiency running::efficiency running
experimental study::experimental study
varying data::varying data
data sets::data sets
larger data::larger data
kinds varying::kinds varying
varying composition::varying composition
program takes::program takes
clock watch::clock watch
system utility::system utility
huge overhead::huge overhead
considerable amount::considerable amount
limited set::limited set
small set::small set
software environment::software environment
point make::point make
first lecture::first lecture
general methodology::general methodology
first develop::first develop
high level::high level
level description::level description
algorithm describing::algorithm describing
det figure::det figure
environment independent::environment independent
first point::first point
pseudo code::pseudo code
earlier courses::earlier courses
algorithm doing::algorithm doing
algorithm takes::algorithm takes
maximum element::maximum element
natural language::natural language
level programming::level programming
programming construct::programming construct
keeping track::keeping track
variable maximum::variable maximum
current max::current max
first element::first element
remaining element::remaining element
array compare::array compare
current maximum::current maximum
current element::current element
loop terminates::loop terminates
simple algorithm::simple algorithm
doing pseudo::doing pseudo
structured pseudo::structured pseudo
formal programming::formal programming
standard numerical::standard numerical
numerical numeric::numerical numeric
numeric boolean::numeric boolean
boolean expression::boolean expression
assignment operator::assignment operator
left arrow::left arrow
quality operator::quality operator
operator quality::operator quality
quality relationship::quality relationship
single equivalent::single equivalent
declare methods::declare methods
index array::index array
procedure terminates::procedure terminates
return value::return value
value return::value return
analyze algorithms::analyze algorithms
primitive operations::primitive operations
low level::low level
level operation::level operation
operation examples::operation examples
examples data::examples data
data movement::data movement
control statement::control statement
routine call::routine call
call return::call return
arithmetic operations::arithmetic operations
logical operations::logical operations
code count::code count
decreasing order::decreasing order
increasing order::increasing order
first sorting::first sorting
sorting technique::sorting technique
playing game::playing game
sorted order::sorted order
empty hand::empty hand
first card::first card
place suppose::place suppose
right place::right place
insertion sort::insertion sort
original numbers::original numbers
input output::input output
sorted sequence::sorted sequence
key key::key key
assured insert::assured insert
first place::first place
element shifted::element shifted
empty location::empty location
lets start::lets start
small mistake::small mistake
lets count::lets count
primitive operation::primitive operation
computer system::computer system
entire program::entire program
operation done::operation done
small errors::small errors
times lets::times lets
lets forget::lets forget
comment statement::comment statement
subject times::subject times
total number::total number
assignment operation::assignment operation
procedure takes::procedure takes
constant work::constant work
right difference::right difference
subject depends::subject depends
instance lets::instance lets
last element::last element
fourth element::fourth element
constant times::constant times
asymptotic analysis::asymptotic analysis
constant minus::constant minus
worst case::worst case
average case::average case
quantity summation::quantity summation
suppose interest::suppose interest
case define::case define
size size::size size
compute worst::compute worst
case average::case average
inputs size::inputs size
increasing parts::increasing parts
input increases::input increases
input size::input size
takes lesser::takes lesser
upper bound::upper bound
difficult quantity::difficult quantity
average right::average right
harder quantity::harder quantity
symptotonic analysis::symptotonic analysis
superficial details::superficial details
quadratic behavior::quadratic behavior
increases fore::increases fore
algorithm increases::algorithm increases
crucial point::crucial point
algorithm increase::algorithm increase
negative functions::negative functions
decreasing functions::decreasing functions
exist constants::exist constants
linear function::linear function
exponential scale::exponential scale
blue line::blue line
function red::function red
previous line::previous line
line displaces::line displaces
suitable amount::suitable amount
simple rule::simple rule
rule suppose::rule suppose
lower order::lower order
order terms::order terms
constant fifty::constant fifty
function fifty::function fifty
complicated function::complicated function
log squared::log squared
growing term::growing term
squared log::squared log
square log::square log
large sum::large sum
common error::common error
fifty times::fifty times
strong amount::strong amount
sub sequence::sub sequence
sequence slides::sequence slides
function input::function input
first algorithm::first algorithm
size grows::size grows
size doubles::size doubles
fore fold::fore fold
kind log::kind log
square running::square running
squared right::squared right
small instances::small instances
million times::million times
numbers sitting::numbers sitting
value ten::value ten
eleven right::eleven right
thirteen fourteen::thirteen fourteen
lets compute::lets compute
step executed::step executed
entire thing::entire thing
total running::total running
square times::square times
dominant thing::dominant thing
simple problem::simple problem
last step::last step
single variable::single variable
makes order::makes order
free linear::free linear
asymptotic running::asymptotic running
linear algorithm::linear algorithm
quadratic logarithmic::quadratic logarithmic
big omega::big omega
omega notation::omega notation
big theta::big theta
theta notation::theta notation
lower bound::lower bound
right function::right function
picture illustrate::picture illustrate
part tells::part tells
related asymptotic::related asymptotic
asymptotic notations::asymptotic notations
non tight::non tight
tight logs::tight logs
tight analogs::tight analogs
real numbers::real numbers
number omega::number omega
omega corresponds::omega corresponds
formal definition::formal definition
largest problems::largest problems
problems size::problems size
largest problem::largest problem
problem size::problem size
roughly twenty::roughly twenty
differences happening::differences happening
problem nineteen::problem nineteen
thirty sixth::thirty sixth
sixth hundred::sixth hundred
huge increase::huge increase
large increase::large increase
logging algorithm::logging algorithm
square algorithm::square algorithm
size hundred::size hundred
solve means::solve means
lecture today::lecture today
initial notation::initial notation
data::data
structures::structures
algorithms::algorithms
learn::learn
today::today
basic::basic
terminology::terminology
notations::notations
rest::rest
begin::begin
simple::simple
definitions::definitions
algorithm::algorithm
outline::outline
steps::steps
program::program
right::right
computational::computational
procedure::procedure
hand::hand
implementation::implementation
programming::programming
language::language
structure::structure
organize::organize
effectively::effectively
familiar::familiar
array::array
list::list
instance::instance
lot::lot
problem::problem
solve::solve
process::process
develop::develop
organizing::organizing
whats::whats
algorithmic::algorithmic
essentially::essentially
specifications::specifications
input::input
output::output
specification::specification
sorted::sorted
non::non
decreasing::decreasing
sequence::sequence
natural::natural
numbers::numbers
finite::finite
length::length
comp::comp
completely::completely
two::two
examples::examples
meet::meet
instances::instances
form::form
infinitely::infinitely
describing::describing
actions::actions
decide::decide
solving::solving
slightly::slightly
bring::bring
notion::notion
good::good
efficient::efficient
small::small
running::running
takes::takes
memory::memory
measures::measures
efficiency::efficiency
working::working
spending::spending
space::space
analyzing::analyzing
spend::spend
worrying::worrying
interested::interested
function::function
sizes::sizes
imagine::imagine
noise::noise
amount::amount
ten::ten
times::times
larger::larger
grow::grow
twenty::twenty
hundred::hundred
behavior::behavior
increase::increase
size::size
interest::interest
short::short
slides::slides
measure::measure
important::important
put::put
experimental::experimental
study::study
implement::implement
means::means
write::write
run::run
varying::varying
sets::sets
smaller::smaller
kinds::kinds
composition::composition
clock::clock
sits::sits
watch::watch
system::system
utility::utility
current::current
millis::millis
figure::figure
out::out
call::call
limitations::limitations
first::first
determine::determine
mine::mine
implemented::implemented
huge::huge
overhead::overhead
considerable::considerable
spent::spent
doing::doing
experiments::experiments
done::done
limited::limited
set::set
inputs::inputs
number::number
large::large
indicative::indicative
taking::taking
considered::considered
experiment::experiment
platforms::platforms
comparison::comparison
platform::platform
hardware::hardware
software::software
environment::environment
machines::machines
make::make
fact::fact
users::users
point::point
difference::difference
messy::messy
part::part
infact::infact
lecture::lecture
general::general
methodology::methodology
analyze::analyze
high::high
level::level
description::description
det::det
account::account
evaluate::evaluate
efficency::efficency
independent::independent
give::give
pseudo::pseudo
code::code
purpose::purpose
earlier::earlier
courses::courses
stores::stores
integer::integer
find::find
maximum::maximum
element::element
written::written
syntax::syntax
wrong::wrong
mixture::mixture
construct::construct
loop::loop
meant::meant
bother::bother
semicolon::semicolon
colon::colon
things::things
required::required
compiler::compiler
understanding::understanding
clear::clear
starting::starting
keeping::keeping
track::track
variable::variable
max::max
initialized::initialized
remaining::remaining
compare::compare
consideration::consideration
update::update
terminates::terminates
return::return
understand::understand
computer::computer
coveys::coveys
idea::idea
concepts::concepts
question::question
structured::structured
usual::usual
formal::formal
standard::standard
numerical::numerical
numeric::numeric
boolean::boolean
expression::expression
assignment::assignment
operator::operator
equal::equal
java::java
left::left
arrow::arrow
quality::quality
relationship::relationship
equals::equals
single::single
equivalent::equivalent
declare::declare
methods::methods
manner::manner
parameter::parameter
statement::statement
repeat::repeat
index::index
i.j::i.j
value::value
method::method
argument::argument
object::object
type::type
identify::identify
primitive::primitive
operations::operations
low::low
operation::operation
movement::movement
control::control
branch::branch
routine::routine
arithmetic::arithmetic
logical::logical
inspect::inspect
count::count
executed::executed
sorting::sorting
permutation::permutation
order::order
hindi::hindi
requirements::requirements
nt::nt
sort::sort
produce::produce
increasing::increasing
depend::depend
elements::elements
depends::depends
long::long
technique::technique
lets::lets
playing::playing
game::game
cards::cards
strategy::strategy
follow::follow
picking::picking
dealt::dealt
start::start
empty::empty
pick::pick
card::card
inserted::inserted
place::place
suppose::suppose
jack::jack
queen::queen
inserting::inserting
insertion::insertion
picked::picked
appropriately::appropriately
integers::integers
original::original
variables::variables
indices::indices
minus::minus
location::location
insert::insert
vary::vary
key::key
decrease::decrease
starts::starts
move::move
found::found
happening::happening
continue::continue
terminate::terminate
reach::reach
case::case
moved::moved
thing::thing
assured::assured
shifting::shifting
shifted::shifted
step::step
note::note
shift::shift
eventually::eventually
mistake::mistake
correction::correction
comparing::comparing
depending::depending
four::four
reflect::reflect
represent::represent
unit::unit
care::care
counting::counting
entire::entire
assigning::assigning
assign::assign
incremented::incremented
check::check
counted::counted
errors::errors
roughly::roughly
forget::forget
comment::comment
sub::sub
reflects::reflects
counts::counts
previous::previous
quantity::quantity
checking::checking
condition::condition
iteration::iteration
subject::subject
total::total
sum::sum
last::last
exit::exit
similarly::similarly
reason::reason
correct::correct
knew::knew
constant::constant
work::work
computed::computed
makes::makes
immediately::immediately
fourth::fourth
end::end
summation::summation
kind::kind
squared::squared
constants::constants
talking::talking
asymptotic::asymptotic
analysis::analysis
behave::behave
linear::linear
average::average
expect::expect
worst::worst
half::half
points::points
minute::minute
specific::specific
define::define
defined::defined
smallest::smallest
bars::bars
values::values
compute::compute
create::create
plot::plot
topic::topic
monotonically::monotonically
parts::parts
increases::increases
happen::happen
lesser::lesser
easiest::easiest
upper::upper
bound::bound
tells::tells
occurs::occurs
fairly::fairly
close::close
bad::bad
differences::differences
difficult::difficult
compete::compete
drawn::drawn
distribution::distribution
expected::expected
typically::typically
harder::harder
symptotonic::symptotonic
goal::goal
read::read
superficial::superficial
details::details
dependent::dependent
showed::showed
factors::factors
show::show
distinguish::distinguish
ahs::ahs
square::square
quadratic::quadratic
doubles::doubles
fore::fore
fold::fold
capturing::capturing
limit::limit
crucial::crucial
brings::brings
big::big
notation::notation
functions::functions
measuring::measuring
negative::negative
exist::exist
green::green
continues::continues
clarify::clarify
wondering::wondering
scale::scale
exponential::exponential
axis::axis
blue::blue
line::line
crossing::crossing
red::red
displaces::displaces
suitable::suitable
intercept::intercept
choose::choose
violated::violated
rule::rule
fifty::fifty
log::log
drop::drop
lower::lower
terms::terms
complicated::complicated
fastest::fastest
growing::growing
term::term
common::common
error::error
provide::provide
strong::strong
true::true
express::express
grows::grows
double::double
hierarchy::hierarchy
cube::cube
word::word
caution::caution
million::million
achieved::achieved
late::late
careful::careful
sitting::sitting
basically::basically
computing::computing
summing::summing
accumulator::accumulator
dividing::dividing
eleven::eleven
twelve::twelve
thirteen::thirteen
fourteen::fourteen
initially::initially
dominant::dominant
solution::solution
accumulating::accumulating
repeating::repeating
computation::computation
prefix::prefix
prefixes::prefixes
divide::divide
finish::finish
reuse::reuse
free::free
logarithmic::logarithmic
polynomial::polynomial
introduce::introduce
omega::omega
theta::theta
picture::picture
illustrate::illustrate
lies::lies
thinking::thinking
related::related
tight::tight
logs::logs
analogs::analogs
analogy::analogy
real::real
sense::sense
definition::definition
greater::greater
talk::talk
equality::equality
corresponds::corresponds
strictly::strictly
miss::miss
great::great
largest::largest
problems::problems
hour::hour
nineteen::nineteen
thirty::thirty
sixth::sixth
logging::logging
millions::millions
years::years
bothers::bothers
questions::questions
stop::stop
looked::looked
initial::initial
