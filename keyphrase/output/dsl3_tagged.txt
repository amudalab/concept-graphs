data/NNS/data structures/NNS/structures and/CC/and algorithms/NNS/algorithms dr/NNP/dr. naveen/IN/naveen garg/NN/garg department/NN/department of/IN/of computer/NN/computer science/NN/science and/CC/and engineering/NN/engineering indian/NN/indian institute/NN/institute of/IN/of technology/NN/technology /,/, delhi/NN/delhi lecture/NN/lecture 3/CD/3 queues/NNS/queues and/CC/and linked/VBD/linked lists/NNS/lists in/IN/in the/DT/the last/JJ/last lecture/NN/lecture we/PRP/we looked/VBD/looked at/IN/at stacks/NNS/stacks as/IN/as a/DT/a data/NN/data type/NNP/type. we/PRP/we saw/VBD/saw how/WRB/how to/TO/to implement/VB/implement stacks/NNS/stacks using/VBG/using an/DT/an array/NNP/array. today/NN/today we/PRP/we are/VBP/are going/VBG/going to/TO/to look/VB/look at/IN/at queues/NNS/queues and/CC/and linked/VBD/linked list/NN/list and/CC/and in/IN/in the/DT/the later/JJ/later part/NN/part of/IN/of the/DT/the class/NN/class /,/, we/PRP/we are/VBP/are going/VBG/going to/TO/to do/VB/do sequences/NNP/sequences. in/IN/in particular/JJ/particular the/DT/the first/JJ/first part/NN/part of/IN/of the/DT/the class/NN/class i/PRP/i am/VBP/am going/VBG/going to/TO/to do/VB/do queues/NNS/queues /,/, linked/VBD/linked list/NN/list and/CC/and double/JJ/double ended/VBD/ended queues/NNP/queues. what/WP/what is/VBZ/is the/DT/the queue/NN/queue and/CC/and how/WRB/how does/VBZ/does it/PRP/it differ/VBP/differ from/IN/from the/DT/the stack/NN/stack the/DT/the stack/NN/stack followed/VBD/followed the/DT/the last-in/JJ/last-in first-out/NN/first-out principle/NN/principle /,/, the/DT/the element/NN/element that/IN/that was/VBD/was inserted/VBN/inserted last/JJ/last in/IN/in to/TO/to stack/VB/stack was/VBD/was the/DT/the one/CD/one that/WDT/that was/VBD/was removed/VBN/removed first/NNP/first. queue/NN/queue on/IN/on the/DT/the other/JJ/other hand/NN/hand follows/VBZ/follows the/DT/the first-in-first-out/NN/first-in-first-out principle/NNP/principle. whoever/NN/whoever joins/VBZ/joins the/DT/the queue/NN/queue earlier/JJR/earlier is/VBZ/is the/DT/the first/JJ/first to/TO/to be/VB/be removed/VBN/removed from/IN/from the/DT/the queues/NNS/queues that/WDT/that is/VBZ/is first/RB/first to/TO/to be/VB/be processed/NNP/processed. you/PRP/you are/VBP/are all/DT/all familiar/JJ/familiar with/IN/with the/DT/the queues/NNP/queues. in/IN/in a/DT/a queue/NN/queue for/IN/for instance/NN/instance there/EX/there is/VBZ/is a/DT/a notion/NN/notion of/IN/of a/DT/a first/JJ/first element/NN/element and/CC/and the/DT/the notion/NN/notion of/IN/of the/DT/the rear/JJ/rear element/NNP/element. when/WRB/when an/DT/an element/NN/element is/VBZ/is inserted/VBN/inserted in/IN/in to/TO/to the/DT/the queue/NN/queue /,/, it/PRP/it comes/VBZ/comes at/IN/at the/DT/the rear/NNP/rear. if/IN/if i/PRP/i remove/VBP/remove an/DT/an element/NN/element from/IN/from queue/NN/queue it/PRP/it is/VBZ/is the/DT/the element/NN/element which/WDT/which is/VBZ/is sitting/VBG/sitting at/IN/at the/DT/the front/NN/front end/NN/end would/MD/would be/VB/be removed/NNP/removed. we/PRP/we always/RB/always insert/VBP/insert an/DT/an element/NN/element at/IN/at the/DT/the end/NN/end and/CC/and when/WRB/when we/PRP/we remove/VBP/remove an/DT/an element/NN/element it/PRP/it is/VBZ/is always/RB/always the/DT/the element/NN/element at/IN/at the/DT/the front/NN/front is/VBZ/is removed/NNP/removed. the/DT/the queue/NN/queue is/VBZ/is also/RB/also an/DT/an abstract/NN/abstract data/NNS/data type/NN/type and/CC/and we/PRP/we can/MD/can define/VB/define a/DT/a few/JJ/few methods/NNS/methods on/IN/on the/DT/the queue/NNP/queue. the/DT/the methods/NNS/methods given/VBN/given in/IN/in the/DT/the slide/NN/slide are/VBP/are the/DT/the standard/JJ/standard operations/NNP/operations. the/DT/the method/NN/method new/JJ/new would/MD/would create/VB/create a/DT/a queue/NN/queue and/CC/and enqueue/NN/enqueue is/VBZ/is the/DT/the method/NN/method to/TO/to add/VB/add an/DT/an element/NN/element to/TO/to the/DT/the queue/NN/queue and/CC/and dequeue/NN/dequeue is/VBZ/is to/TO/to remove/VB/remove an/DT/an element/NN/element from/IN/from the/DT/the queue/NNP/queue. when/WRB/when you/PRP/you dequeue/VBP/dequeue a/DT/a queue/NN/queue or/CC/or when/WRB/when you/PRP/you remove/VBP/remove an/DT/an element/NN/element from/IN/from the/DT/the queue/NN/queue /,/, you/PRP/you get/VBP/get another/DT/another queue/NNP/queue. the/DT/the front/NN/front is/VBZ/is the/DT/the method/NN/method which/WDT/which gives/VBZ/gives the/DT/the first/JJ/first element/NN/element of/IN/of the/DT/the queue/NNP/queue. how/WRB/how it/PRP/it does/VBZ/does differ/VB/differ from/IN/from dequeue/JJ/dequeue it/PRP/it does/VBZ/does not/RB/not remove/VB/remove the/DT/the front/NN/front element/NN/element /,/, it/PRP/it only/RB/only tell/VBP/tell us/PRP/us which/WDT/which is/VBZ/is the/DT/the front/NN/front element/NN/element of/IN/of the/DT/the queue/NNP/queue. we/PRP/we also/RB/also have/VBP/have some/DT/some other/JJ/other support/NN/support methods/NNS/methods /,/, to/TO/to implement/VB/implement the/DT/the queue/NNP/queue. one/CD/one could/MD/could be/VB/be size/NN/size and/CC/and the/DT/the other/JJ/other is/VBZ/is isempty/NNP/isempty. size/NN/size would/MD/would tell/VB/tell us/PRP/us how/WRB/how many/JJ/many elements/NNS/elements are/VBP/are there/RB/there in/IN/in the/DT/the queue/NN/queue and/CC/and isempty/NN/isempty would/MD/would tell/VB/tell us/PRP/us whether/IN/whether the/DT/the queue/NN/queue is/VBZ/is empty/JJ/empty or/CC/or not/NNP/not. it/PRP/it would/MD/would return/VB/return true/JJ/true if/IN/if the/DT/the queue/NN/queue is/VBZ/is empty/JJ/empty else/NN/else it/PRP/it would/MD/would return/VB/return false/NNP/false. just/RB/just as/IN/as we/PRP/we defined/VBD/defined axioms/NNS/axioms for/IN/for the/DT/the stacks/NNS/stacks /,/, you/PRP/you can/MD/can define/VB/define similar/JJ/similar axioms/NNS/axioms for/IN/for queues/NNP/queues. if/IN/if i/PRP/i create/VBP/create a/DT/a new/JJ/new queue/NN/queue and/CC/and i/PRP/i insert/VBP/insert an/DT/an element/NN/element or/CC/or enqueue/VB/enqueue an/DT/an element/NN/element v/NN/v and/CC/and then/RB/then when/WRB/when i/PRP/i say/VBP/say what/WP/what is/VBZ/is the/DT/the element/NN/element at/IN/at the/DT/the front/NN/front of/IN/of the/DT/the queue/NNP/queue. it/PRP/it should/MD/should be/VB/be v/NN/v and/CC/and suppose/VB/suppose i/PRP/i create/VB/create a/DT/a new/JJ/new queue/NN/queue and/CC/and enqueue/NN/enqueue an/DT/an element/NN/element and/CC/and then/RB/then i/PRP/i dequeue/VBP/dequeue an/DT/an element/NN/element /,/, then/RB/then i/PRP/i should/MD/should get/VB/get the/DT/the empty/NN/empty queue/NN/queue which/WDT/which is/VBZ/is the/DT/the same/JJ/same as/IN/as whatever/NN/whatever obtained/VBD/obtained if/IN/if i/PRP/i just/RB/just called/VBN/called new/NNP/new. similarly/RB/similarly if/IN/if i/PRP/i had/VBD/had a/DT/a queue/NN/queue and/CC/and i/PRP/i enqueued/VBD/enqueued an/DT/an element/NN/element w/NN/w /,/, which/WDT/which means/VBZ/means i/PRP/i added/VBD/added an/DT/an element/NN/element to/TO/to the/DT/the queue/NNP/queue. then/RB/then i/PRP/i added/VBD/added another/DT/another element/NN/element v/NN/v to/TO/to the/DT/the queue/NN/queue /,/, thus/RB/thus w/VB/w is/VBZ/is ahead/RB/ahead of/IN/of v/NN/v in/IN/in the/DT/the queue/NNP/queue. if/IN/if i/PRP/i call/VBP/call front/JJ/front /,/, first/JJ/first i/PRP/i will/MD/will get/VB/get all/DT/all the/DT/the elements/NNS/elements of/IN/of the/DT/the queue/NN/queue /,/, followed/VBN/followed by/IN/by w/NN/w and/CC/and then/RB/then followed/VBD/followed by/IN/by v/NNP/v. the/DT/the element/NN/element in/IN/in the/DT/the front/NN/front of/IN/of /NNP/( q/NN/q /,/, w/NN/w /:/) is/VBZ/is the/DT/the element/NN/element at/IN/at the/DT/the front/NN/front of/IN/of the/DT/the queue/NNP/queue. why/WRB/why i/PRP/i have/VBP/have written/VBN/written front/NN/front of/IN/of /NNP/( q/NN/q /,/, w/NN/w /:/) and/CC/and not/RB/not front/JJ/front of/IN/of queue/NN/queue if/IN/if i/PRP/i have/VBP/have just/RB/just written/VBN/written front/NN/front of/IN/of queue/NN/queue /,/, then/RB/then it/PRP/it would/MD/would not/RB/not have/VB/have been/VBN/been defined/NNP/defined. if/IN/if a/DT/a queue/NN/queue is/VBZ/is empty/JJ/empty then/RB/then there/RB/there is/VBZ/is no/DT/no notion/NN/notion of/IN/of front/NN/front of/IN/of the/DT/the queue/NN/queue that/IN/that is/VBZ/is why/WRB/why i/PRP/i have/VBP/have written/VBN/written front/NN/front /:/( enqueue/NN/enqueue /:/( q/NN/q /,/, w/NN/w /:/) /:/) /./. same/JJ/same thing/NN/thing as/IN/as before/IN/before in/IN/in which/WDT/which i/PRP/i had/VBD/had a/DT/a queue/NN/queue q/NN/q /,/, if/IN/if i/PRP/i insert/VBP/insert w/JJ/w in/IN/in to/TO/to the/DT/the queue/NN/queue then/RB/then i/PRP/i insert/VBP/insert a/DT/a v/NN/v and/CC/and then/RB/then i/PRP/i removed/VBD/removed an/DT/an element/NNP/element. the/DT/the element/NN/element which/WDT/which was/VBD/was at/IN/at the/DT/the front/NN/front of/IN/of queue/NN/queue would/MD/would be/VB/be removed/VBN/removed /,/, if/IN/if the/DT/the queue/NN/queue was/VBD/was empty/JJ/empty then/RB/then it/PRP/it would/MD/would have/VB/have been/VBN/been w/NNP/w. the/DT/the following/VBG/following operation/NN/operation is/VBZ/is the/DT/the same/JJ/same as/IN/as in/IN/in which/WDT/which i/PRP/i had/VBD/had a/DT/a q/NN/q /,/, i/PRP/i added/VBD/added w/NN/w to/TO/to the/DT/the queue/NN/queue then/RB/then i/PRP/i removed/VBD/removed an/DT/an element/NN/element from/IN/from the/DT/the queue/NN/queue /,/, then/RB/then i/PRP/i added/VBD/added v/NN/v again/NNP/again. the/DT/the queue/NN/queue that/IN/that i/PRP/i have/VBP/have obtained/VBN/obtained as/IN/as the/DT/the result/NN/result of/IN/of the/DT/the below/NN/below mentioned/VBD/mentioned 2/CD/2 procedures/NNS/procedures should/MD/should be/VB/be the/DT/the same/NNP/same. dequeue/NN/dequeue /:/( enqueue/NN/enqueue /:/( enqueue/NN/enqueue /:/( q,w/JJ/q,w /NN/) ,v/NN/,v /:/) /:/) =/:/= enqueue/NN/enqueue /:/( dequeue/NN/dequeue /:/( enqueue/NN/enqueue /:/( q,w/JJ/q,w /NN/) /:/) ,v/NN/,v /:/) let/NN/let us/PRP/us check/VBP/check out/RP/out whether/IN/whether the/DT/the result/NN/result is/VBZ/is true/NNP/true. let/NN/let us/PRP/us assume/VBP/assume that/IN/that the/DT/the queue/NN/queue was/VBD/was initially/RB/initially empty/NNP/empty. what/WP/what does/VBZ/does this/DT/this statement/NN/statement dequeue/NN/dequeue /:/( enqueue/NN/enqueue /:/( enqueue/NN/enqueue /:/( q/NN/q /,/, w/NN/w /:/) /,/, v/NN/v /:/) /:/) gives/NNS/gives first/RB/first i/PRP/i added/VBD/added w/NN/w then/RB/then added/VBD/added v/NN/v and/CC/and then/RB/then i/PRP/i removed/VBD/removed an/DT/an element/NNP/element. if/IN/if i/PRP/i removed/VBD/removed an/DT/an element/NN/element from/IN/from the/DT/the queue/NN/queue i/PRP/i would/MD/would get/VB/get w/VB/w /,/, that/IN/that is/VBZ/is w/NN/w is/VBZ/is removed/NNP/removed. then/RB/then i/PRP/i get/VBP/get v/RB/v as/IN/as the/DT/the remaining/VBG/remaining queue/NNP/queue. let/NN/let us/PRP/us look/VBP/look at/IN/at this/DT/this enqueue/NN/enqueue /:/( dequeue/NN/dequeue /:/( enqueue/NN/enqueue /:/( q/NN/q /,/, w/NN/w /:/) /:/) /,/, v/NN/v /:/) /./. queue/NN/queue is/VBZ/is empty/JJ/empty /,/, i/PRP/i added/VBD/added w/NN/w to/TO/to the/DT/the queue/NN/queue then/RB/then i/PRP/i removed/VBD/removed an/DT/an element/NN/element and/CC/and once/RB/once again/RB/again i/PRP/i have/VBP/have left/VBN/left with/IN/with an/DT/an empty/JJ/empty queue/NNP/queue. then/RB/then i/PRP/i enqueue/VBP/enqueue v/NN/v /,/, thus/RB/thus the/DT/the queue/NN/queue has/VBZ/has v/NN/v in/IN/in it/NNP/it. if/IN/if queue/NN/queue is/VBZ/is empty/JJ/empty then/RB/then in/IN/in both/DT/both the/DT/the cases/NNS/cases the/DT/the queue/NN/queue will/MD/will have/VB/have only/RB/only v/VB/v in/IN/in it/PRP/it at/IN/at the/DT/the end/NN/end of/IN/of the/DT/the procedure/NNP/procedure. if/IN/if queue/NN/queue is/VBZ/is not/RB/not empty/JJ/empty then/RB/then i/PRP/i enqueued/VBD/enqueued w/NN/w /,/, then/RB/then i/PRP/i enqueued/VBD/enqueued v/NN/v again/NNP/again. hence/NN/hence i/PRP/i have/VBP/have a/DT/a queue/NN/queue in/IN/in which/WDT/which first/JJ/first i/PRP/i have/VBP/have all/PDT/all the/DT/the elements/NNS/elements of/IN/of q/NN/q /,/, followed/VBN/followed by/IN/by w/NN/w /,/, followed/VBN/followed by/IN/by v/NNP/v. when/WRB/when i/PRP/i dequeued/VBD/dequeued /,/, i/PRP/i will/MD/will be/VB/be left/VBN/left with/IN/with the/DT/the original/JJ/original q/NN/q without/IN/without the/DT/the front/NN/front element/NN/element /,/, followed/VBN/followed by/IN/by w/NN/w and/CC/and then/RB/then followed/VBD/followed by/IN/by v/NNP/v. let/NN/let us/PRP/us see/VBP/see if/IN/if we/PRP/we get/VBP/get the/DT/the same/JJ/same thing/NN/thing in/IN/in enqueue/NN/enqueue /:/( dequeue/NN/dequeue /:/( enqueue/NN/enqueue /:/( q/NN/q /,/, w/NN/w /:/) /:/) /,/, v/NN/v /:/) /./. i/PRP/i started/VBD/started with/IN/with q/NN/q and/CC/and i/PRP/i added/VBD/added w/NN/w to/TO/to it/NNP/it. now/RB/now i/PRP/i have/VBP/have queue/JJ/queue which/WDT/which has/VBZ/has q/RB/q and/CC/and w/NNP/w. then/RB/then i/PRP/i dequeued/VBD/dequeued which/WDT/which means/NNS/means i/PRP/i removed/VBD/removed the/DT/the front/NN/front element/NN/element of/IN/of queue/NNP/queue. the/DT/the queue/NN/queue contains/VBZ/contains all/DT/all the/DT/the elements/NNS/elements except/IN/except the/DT/the front/NN/front element/NN/element /,/, then/RB/then i/PRP/i have/VBP/have w/JJ/w in/IN/in that/DT/that queue/NN/queue and/CC/and i/PRP/i added/VBD/added v/NN/v at/IN/at the/DT/the end/NNP/end. thus/RB/thus i/PRP/i get/VBP/get the/DT/the same/JJ/same result/NNP/result. how/WRB/how do/VBP/do we/PRP/we implement/VB/implement a/DT/a queue/NN/queue we/PRP/we are/VBP/are going/VBG/going to/TO/to use/VB/use an/DT/an array/NN/array in/IN/in a/DT/a circular/JJ/circular fashion/NN/fashion to/TO/to implement/VB/implement the/DT/the queue/NNP/queue. what/WP/what does/VBZ/does it/PRP/it mean/VB/mean suppose/JJ/suppose someone/NN/someone tells/NNS/tells that/WDT/that the/DT/the queue/NN/queue is/VBZ/is never/RB/never going/VBG/going to/TO/to be/VB/be larger/JJR/larger than/IN/than n/NN/n elements/NNP/elements. i/PRP/i am/VBP/am going/VBG/going to/TO/to allocate/VB/allocate an/DT/an array/NN/array of/IN/of size/NN/size n/NNP/n. i/PRP/i am/VBP/am going/VBG/going to/TO/to have/VB/have 2/CD/2 variables/NNS/variables f/NN/f and/CC/and r/NN/r /,/, f/NN/f for/IN/for front/NN/front and/CC/and r/NN/r for/IN/for rear/NNP/rear. f/NN/f is/VBZ/is the/DT/the index/NN/index of/IN/of the/DT/the front/NN/front element/NN/element that/WDT/that is/VBZ/is f/NN/f will/MD/will be/VB/be referring/VBG/referring to/TO/to the/DT/the front/NN/front element/NN/element of/IN/of the/DT/the queue/NNP/queue. r/NN/r is/VBZ/is an/DT/an index/NN/index which/WDT/which is/VBZ/is the/DT/the element/NN/element following/VBG/following the/DT/the rear/NN/rear element/NNP/element. the/DT/the blue/JJ/blue part/NN/part is/VBZ/is the/DT/the one/CD/one which/WDT/which is/VBZ/is occupied/VBN/occupied by/IN/by the/DT/the queue/NNP/queue. /NNP/( refer/NN/refer slide/NN/slide time/NN/time /:/: 08/CD/08 /:/: 11/CD/11 /CD/) how/WRB/how did/VBD/did the/DT/the queue/NN/queue reach/NN/reach the/DT/the blue/JJ/blue colored/VBN/colored part/NN/part i/PRP/i would/MD/would have/VB/have started/VBN/started with/IN/with the/DT/the front/NN/front that/IN/that is/VBZ/is the/DT/the first/JJ/first element/NN/element i/PRP/i inserted/VBD/inserted must/MD/must have/VB/have come/VBN/come to/TO/to the/DT/the 0th/JJ/0th location/NNP/location. then/RB/then the/DT/the next/JJ/next element/NN/element i/PRP/i inserted/VBD/inserted must/MD/must have/VB/have come/VBN/come to/TO/to the/DT/the 1st/CD/1st location/NN/location and/CC/and the/DT/the 3rd/JJ/3rd element/NN/element must/MD/must have/VB/have come/VBN/come to/TO/to the/DT/the 2nd/CD/2nd location/NN/location and/CC/and so/RB/so on/NNP/on. then/RB/then i/PRP/i also/RB/also delete/JJ/delete the/DT/the elements/NNP/elements. when/WRB/when i/PRP/i delete/VBP/delete /,/, an/DT/an element/NN/element goes/VBZ/goes away/NNP/away. in/IN/in effect/NN/effect the/DT/the elements/NNS/elements in/IN/in the/DT/the queue/NN/queue drift/NN/drift right/RB/right and/CC/and hence/NN/hence the/DT/the front/NN/front and/CC/and the/DT/the rear/NN/rear element/NN/element has/VBZ/has moved/VBN/moved to/TO/to right/NNP/right. this/DT/this implies/VBZ/implies that/IN/that we/PRP/we have/VBP/have deleted/VBN/deleted f-1/-NONE-/f-1 elements/NNP/elements. it/PRP/it is/VBZ/is not/RB/not completely/RB/completely accurate/NNP/accurate. i/PRP/i had/VBD/had said/VBN/said something/NN/something like/IN/like in/IN/in a/DT/a circular/JJ/circular fashion/NNP/fashion. what/WP/what does/VBZ/does the/DT/the circular/JJ/circular fashion/NN/fashion mean/NN/mean and/CC/and why/WRB/why am/NN/am i/PRP/i saying/VBG/saying such/JJ/such a/DT/a thing/NN/thing let/NN/let us/PRP/us say/VBP/say that/IN/that we/PRP/we kept/VBD/kept inserting/VBG/inserting the/DT/the elements/NNS/elements in/IN/in queue/NNP/queue. i/PRP/i insert/VBP/insert another/DT/another element/NN/element then/RB/then i/PRP/i insert/VBP/insert another/DT/another element/NN/element and/CC/and at/IN/at one/CD/one stage/NN/stage i/PRP/i can/MD/can not/RB/not insert/VB/insert anymore/RB/anymore elements/NNS/elements because/IN/because i/PRP/i have/VBP/have already/RB/already reached/VBN/reached the/DT/the end/NN/end of/IN/of this/DT/this array/NNP/array. but/CC/but i/PRP/i have/VBP/have a/DT/a space/NN/space available/JJ/available in/IN/in the/DT/the front/NN/front then/RB/then i/PRP/i will/MD/will wrap/VB/wrap around/IN/around and/CC/and start/NN/start inserting/VBG/inserting the/DT/the elements/NNP/elements. your/PRP$/your queue/NN/queue in/IN/in some/DT/some point/NN/point will/MD/will look/VB/look like/IN/like the/DT/the one/CD/one which/WDT/which is/VBZ/is given/VBN/given in/IN/in the/DT/the slide/NN/slide below/NNP/below. the/DT/the front/NN/front was/VBD/was at/IN/at the/DT/the left/NN/left of/IN/of the/DT/the rear/JJ/rear but/CC/but now/RB/now front/VBP/front is/VBZ/is at/IN/at the/DT/the right/NN/right of/IN/of the/DT/the rear/JJ/rear because/IN/because we/PRP/we have/VBP/have queue/JJ/queue which/WDT/which is/VBZ/is now/RB/now starting/VBG/starting from/IN/from the/DT/the right/NN/right side/NN/side and/CC/and going/VBG/going to/TO/to the/DT/the left/NN/left side/NNP/side. when/WRB/when i/PRP/i insert/VBP/insert an/DT/an element/NN/element it/PRP/it will/MD/will still/RB/still come/VB/come to/TO/to the/DT/the th/NN/th r/NN/r location/NN/location and/CC/and then/RB/then to/TO/to the/DT/the next/JJ/next location/NN/location and/CC/and so/RB/so on/NNP/on. when/WRB/when we/PRP/we started/VBD/started the/DT/the front/NN/front was/VBD/was referring/VBG/referring to/TO/to 0th/CD/0th location/NN/location that/WDT/that is/VBZ/is f/NN/f should/MD/should have/VB/have been/VBN/been at/IN/at minus/NN/minus one/CD/one /,/, because/IN/because the/DT/the front/NN/front refers/NNS/refers to/TO/to the/DT/the first/JJ/first element/NN/element of/IN/of the/DT/the queue/NNP/queue. if/IN/if there/EX/there is/VBZ/is nothing/NN/nothing in/IN/in the/DT/the queue/NN/queue then/RB/then f/NN/f should/MD/should be/VB/be minus/RB/minus one/CD/one and/CC/and rear/JJ/rear refers/NNS/refers to/TO/to 0/-NONE-/0 /,/, because/IN/because rear/JJ/rear refers/NNS/refers to/TO/to an/DT/an empty/NN/empty location/NNP/location. what/WP/what does/VBZ/does if/IN/if at/IN/at some/DT/some point/NN/point i/PRP/i reach/VBP/reach a/DT/a situation/NN/situation when/WRB/when f/NN/f =/:/= r/NN/r is/VBZ/is that/IN/that empty/JJ/empty or/CC/or full/JJ/full what/WP/what will/MD/will happen/VB/happen when/WRB/when it/PRP/it becomes/VBZ/becomes empty/JJ/empty suppose/NN/suppose if/IN/if i/PRP/i kept/VBD/kept removing/VBG/removing the/DT/the elements/NNS/elements starting/VBG/starting from/IN/from the/DT/the th/NN/th f/NN/f location/NN/location /,/, i/PRP/i did/VBD/did not/RB/not add/VB/add any/DT/any other/JJ/other element/NN/element and/CC/and then/RB/then i/PRP/i removed/VBD/removed all/DT/all the/DT/the elements/NNS/elements before/IN/before th/NN/th r/NN/r location/NNP/location. where/WRB/where f/NN/f would/MD/would be/VB/be located/VBN/located f/NN/f would/MD/would be/VB/be increment/JJ/increment to/TO/to r/VB/r /,/, so/RB/so f/NN/f becomes/VBZ/becomes r/NNP/r. when/WRB/when f/NN/f is/VBZ/is r/NN/r /,/, queue/NN/queue is/VBZ/is empty/NNP/empty. suppose/NN/suppose i/PRP/i kept/VBD/kept adding/VBG/adding the/DT/the elements/NNS/elements to/TO/to the/DT/the queue/NNP/queue. when/WRB/when i/PRP/i add/VBP/add /,/, r/NN/r will/MD/will move/VB/move one/CD/one step/NN/step /,/, another/DT/another step/NN/step and/CC/and so/RB/so on/NNP/on. when/WRB/when i/PRP/i add/VBP/add an/DT/an element/NN/element close/NN/close to/TO/to th/VB/th f/NN/f location/NN/location /,/, then/RB/then r/VB/r would/MD/would be/VB/be referring/VBG/referring to/TO/to f/NNP/f. again/RB/again f/NN/f equals/NNS/equals r/NNP/r. we/PRP/we will/MD/will add/VB/add the/DT/the th/NN/th n/NN/n element/NNP/element. there/EX/there is/VBZ/is an/DT/an ambiguity/NN/ambiguity and/CC/and we/PRP/we have/VBP/have to/TO/to resolve/VB/resolve it/PRP/it in/IN/in some/DT/some manner/NNP/manner. f/NN/f =/:/= r/NN/r means/VBZ/means /,/, both/DT/both empty/NN/empty and/CC/and full/NNP/full. since/IN/since we/PRP/we will/MD/will have/VB/have a/DT/a problem/NN/problem /,/, if/IN/if you/PRP/you do/VBP/do not/RB/not know/VB/know whether/IN/whether the/DT/the queue/NN/queue is/VBZ/is empty/JJ/empty or/CC/or full/NNP/full. we/PRP/we will/MD/will try/VB/try and/CC/and ensure/NN/ensure that/IN/that we/PRP/we never/RB/never had/VBD/had n/VBN/n elements/NNS/elements to/TO/to the/DT/the queue/NNP/queue. when/WRB/when the/DT/the queue/NN/queue has/VBZ/has only/RB/only n-1/-NONE-/n-1 one/CD/one elements/NNS/elements /,/, we/PRP/we will/MD/will declare/VB/declare it/PRP/it before/NNP/before. that/IN/that is/VBZ/is what/WP/what we/PRP/we are/VBP/are going/VBG/going to/TO/to do/NNP/do. let/VB/let us/PRP/us look/VB/look at/IN/at the/DT/the code/NN/code for/IN/for enqueue/NNP/enqueue. this/DT/this is/VBZ/is just/RB/just pseudo/RB/pseudo code/NNP/code. if/IN/if the/DT/the size/NN/size of/IN/of the/DT/the queue/NN/queue or/CC/or the/DT/the number/NN/number of/IN/of elements/NNS/elements in/IN/in the/DT/the queue/NN/queue is/VBZ/is n-1/-NONE-/n-1 /,/, then/RB/then we/PRP/we are/VBP/are going/VBG/going to/TO/to stop/VB/stop and/CC/and say/VB/say that/IN/that the/DT/the queue/NN/queue is/VBZ/is full/JJ/full and/CC/and we/PRP/we will/MD/will return/VB/return the/DT/the queue/NN/queue full/JJ/full exception/NNP/exception. otherwise/NN/otherwise if/IN/if it/PRP/it is/VBZ/is not/RB/not the/DT/the case/NN/case then/RB/then add/VBD/add the/DT/the rear/JJ/rear location/NN/location /,/, put/VBD/put the/DT/the element/NN/element that/IN/that you/PRP/you are/VBP/are trying/VBG/trying to/TO/to insert/VB/insert and/CC/and increment/NN/increment r/NNP/r. the/DT/the modn/NN/modn is/VBZ/is required/VBN/required /,/, because/IN/because we/PRP/we need/VBP/need to/TO/to do/VB/do the/DT/the wrap/NN/wrap around/IN/around since/IN/since it/PRP/it is/VBZ/is circular/NNP/circular. indices/NNS/indices goes/VBZ/goes from/IN/from 0/-NONE-/0 through/IN/through n-1/-NONE-/n-1 only/RB/only /,/, r/NN/r is/VBZ/is already/RB/already n-1/-NONE-/n-1 and/CC/and i/PRP/i increment/VBP/increment r/JJ/r at/IN/at this/DT/this r/NN/r /:/( r/NN/r +/:/+ 1/CD/1 /CD/) modn/NN/modn point/NNP/point. then/RB/then i/PRP/i do/VBP/do not/RB/not want/VB/want it/PRP/it to/TO/to become/VB/become n/JJ/n /,/, but/CC/but i/PRP/i want/VBP/want it/PRP/it to/TO/to become/VB/become 0/-NONE-/0 and/CC/and hence/NN/hence modn/NN/modn is/VBZ/is 0/-NONE-/0 and/CC/and i/PRP/i will/MD/will have/VB/have it/PRP/it in/IN/in r/NNP/r. in/IN/in the/DT/the pseudo-code/JJ/pseudo-code /,/, size/NN/size is/VBZ/is the/DT/the method/NN/method and/CC/and it/PRP/it should/MD/should have/VB/have been/VBN/been enclosed/VBN/enclosed in/IN/in brackets/NNP/brackets. what/WP/what does/VBZ/does the/DT/the method/NN/method size/NN/size do/VBP/do it/PRP/it returns/VBZ/returns /:/( n-f/JJ/n-f +/NN/+ r/NN/r /:/) value/NNP/value. why/WRB/why it/PRP/it should/MD/should not/RB/not return/VB/return r-f/NNP/r-f. r-f/NNP/r-f is/VBZ/is negative/JJ/negative in/IN/in the/DT/the setting/NN/setting which/WDT/which is/VBZ/is given/VBN/given in/IN/in the/DT/the slide/NN/slide /,/, but/CC/but in/IN/in the/DT/the setting/NN/setting which/WDT/which is/VBZ/is given/VBN/given in/IN/in the/DT/the slide/NN/slide /,/, r-f/JJ/r-f tells/NNS/tells me/PRP/me exactly/RB/exactly the/DT/the number/NN/number of/IN/of elements/NNS/elements in/IN/in the/DT/the queue/NNP/queue. r-f/NNP/r-f is/VBZ/is the/DT/the correct/NN/correct thing/NN/thing except/IN/except it/PRP/it might/MD/might be/VB/be negative/NNP/negative. how/WRB/how many/JJ/many elements/NNS/elements are/VBP/are there/RB/there in/IN/in the/DT/the queue/NN/queue which/WDT/which is/VBZ/is given/VBN/given in/IN/in the/DT/the above/NN/above slide/NN/slide it/PRP/it should/MD/should be/VB/be n/-NONE-/n- r/NN/r +/:/+ f/NN/f or/CC/or n-f/JJ/n-f +/NN/+ r/NN/r /,/, which/WDT/which is/VBZ/is anyone/NN/anyone of/IN/of these/NNP/these. the/DT/the quantity/NN/quantity /:/( n-f/JJ/n-f +/NN/+ r/NN/r /:/) would/MD/would be/VB/be the/DT/the number/NN/number of/IN/of elements/NNS/elements that/WDT/that you/PRP/you would/MD/would get/VB/get and/CC/and this/DT/this quantity/NN/quantity is/VBZ/is always/RB/always positive/JJ/positive /,/, because/IN/because r-f/JJ/r-f can/MD/can at/IN/at worst/JJS/worst be/VB/be minus/RB/minus n/NNP/n. thus/RB/thus n/VB/n +/:/+ r-f/JJ/r-f would/MD/would always/RB/always be/VB/be a/DT/a positive/JJ/positive quantity/NNP/quantity. you/PRP/you can/MD/can return/VB/return this/DT/this /NN/( n-f/NN/n-f +/:/+ r/NN/r /:/) as/IN/as the/DT/the size/NN/size /,/, as/IN/as this/DT/this will/MD/will tell/VB/tell you/PRP/you the/DT/the right/NN/right number/NN/number of/IN/of elements/NNP/elements. check/NN/check this/DT/this out/NN/out if/IN/if you/PRP/you are/VBP/are confused/NNP/confused. isempty/NN/isempty /:/( /:/) is/VBZ/is a/DT/a method/NN/method and/CC/and we/PRP/we said/VBD/said queue/NN/queue is/VBZ/is empty/JJ/empty if/IN/if f/NN/f =/:/= r/NNP/r. there/RB/there was/VBD/was an/DT/an ambiguity/NN/ambiguity and/CC/and we/PRP/we never/RB/never had/VBD/had more/JJR/more than/IN/than n-1/-NONE-/n-1 elements/NNS/elements into/IN/into the/DT/the queue/NNP/queue. if/IN/if f/NN/f =/:/= r/NN/r /,/, that/IN/that means/NNS/means the/DT/the queue/NN/queue is/VBZ/is empty/JJ/empty and/CC/and it/PRP/it is/VBZ/is not/RB/not full/NNP/full. thus/RB/thus f/NN/f =/:/= r/NN/r returns/NNS/returns empty/JJ/empty also/RB/also it/PRP/it returns/VBZ/returns true/JJ/true for/IN/for this/DT/this /NN/( algorithm/NN/algorithm isempty/NN/isempty /:/( /:/) /:/) method/NNP/method. for/IN/for front/NN/front if/IN/if the/DT/the queue/NN/queue is/VBZ/is empty/JJ/empty then/RB/then it/PRP/it raises/VBZ/raises an/DT/an exception/NN/exception /,/, otherwise/RB/otherwise just/RB/just return/VBP/return a/DT/a front/NN/front element/NNP/element. we/PRP/we are/VBP/are not/RB/not removing/VBG/removing the/DT/the front/NN/front element/NN/element as/IN/as we/PRP/we are/VBP/are doing/VBG/doing it/PRP/it in/IN/in the/DT/the dequeue/NN/dequeue method/NNP/method. in/IN/in the/DT/the case/NN/case of/IN/of dequeue/NN/dequeue method/NN/method /,/, we/PRP/we will/MD/will increment/VB/increment the/DT/the front/NN/front index/NN/index and/CC/and remove/VB/remove the/DT/the front/NN/front element/NN/element by/IN/by setting/NN/setting q/NN/q /:/( f/NN/f /:/) null/NNP/null. you/PRP/you can/MD/can also/RB/also implement/VB/implement the/DT/the queue/NN/queue using/VBG/using a/DT/a linked/JJ/linked list/NNP/list. we/PRP/we saw/VBD/saw an/DT/an array/NN/array to/TO/to implement/VB/implement our/PRP$/our queue/NNP/queue. the/DT/the disadvantage/NN/disadvantage of/IN/of using/VBG/using an/DT/an array/NN/array is/VBZ/is fixed/VBN/fixed size/-NONE-/size. if/IN/if you/PRP/you know/VBP/know the/DT/the maximum/NN/maximum size/NN/size that/WDT/that the/DT/the queue/NN/queue can/MD/can take/VB/take then/RB/then it/PRP/it is/VBZ/is ok/NN/ok /,/, but/CC/but if/IN/if you/PRP/you have/VBP/have no/DT/no idea/NN/idea about/IN/about the/DT/the maximum/NN/maximum size/NN/size /,/, then/RB/then you/PRP/you could/MD/could either/VB/either use/NN/use the/DT/the method/NN/method which/WDT/which we/PRP/we did/VBD/did in/IN/in the/DT/the last/JJ/last class/NN/class were/VBD/were in/IN/in when/WRB/when the/DT/the size/NN/size increases/NNS/increases beyond/IN/beyond what/WP/what we/PRP/we have/VBP/have allotted/VBN/allotted /,/, then/RB/then we/PRP/we double/JJ/double the/DT/the size/NN/size of/IN/of the/DT/the queue/NNP/queue. you/PRP/you could/MD/could either/VB/either do/VB/do that/DT/that or/CC/or you/PRP/you could/MD/could use/VB/use an/DT/an implementation/NN/implementation which/WDT/which uses/NNS/uses a/DT/a linked/VBN/linked list/NNP/list. what/WP/what is/VBZ/is essentially/RB/essentially a/DT/a linked/VBN/linked list/NN/list it/PRP/it has/VBZ/has nodes/VBZ/nodes and/CC/and it/PRP/it has/VBZ/has pointers/NNS/pointers which/WDT/which are/VBP/are basically/RB/basically referring/VBG/referring to/TO/to the/DT/the next/JJ/next nodes/NNS/nodes in/IN/in the/DT/the list/NNP/list. the/DT/the first/JJ/first node/NN/node is/VBZ/is referred/VBN/referred to/TO/to as/RB/as head/VB/head of/IN/of the/DT/the list/NN/list and/CC/and the/DT/the last/JJ/last node/NN/node is/VBZ/is referred/VBN/referred to/TO/to as/RB/as the/DT/the tail/NN/tail of/IN/of list/NNP/list. each/DT/each of/IN/of the/DT/the nodes/NNS/nodes has/VBZ/has some/DT/some element/NN/element or/CC/or some/DT/some data/NNS/data in/IN/in it/NNP/it. if/IN/if i/PRP/i am/VBP/am going/VBG/going to/TO/to use/VB/use a/DT/a linked/VBN/linked list/NN/list to/TO/to implement/VB/implement the/DT/the queue/NN/queue /,/, then/RB/then the/DT/the question/NN/question is/VBZ/is which/WDT/which should/MD/should be/VB/be the/DT/the front/NN/front of/IN/of the/DT/the queue/NN/queue /,/, whether/IN/whether the/DT/the head/NN/head node/NN/node should/MD/should be/VB/be the/DT/the front/NN/front of/IN/of queue/NN/queue or/CC/or the/DT/the tail/NN/tail node/NN/node should/MD/should be/VB/be the/DT/the front/NN/front of/IN/of the/DT/the queue/NNP/queue. the/DT/the head/NN/head of/IN/of the/DT/the list/NN/list should/MD/should be/VB/be the/DT/the front/NN/front of/IN/of the/DT/the queue/NN/queue /,/, the/DT/the tail/NN/tail of/IN/of the/DT/the list/NN/list can/MD/can not/RB/not be/VB/be the/DT/the front/NN/front of/IN/of the/DT/the queue/NNP/queue. why/WRB/why the/DT/the tail/NN/tail of/IN/of the/DT/the list/NN/list can/MD/can not/RB/not be/VB/be the/DT/the front/NN/front of/IN/of the/DT/the queue/NN/queue why/WRB/why can/MD/can not/RB/not i/VB/i have/VBP/have my/PRP$/my queue/NN/queue in/IN/in which/WDT/which the/DT/the 1st/CD/1st element/NN/element is/VBZ/is this/DT/this /,/, the/DT/the 2nd/JJ/2nd second/JJ/second element/NN/element is/VBZ/is this/DT/this and/CC/and the/DT/the third/JJ/third element/NN/element is/VBZ/is this/DT/this the/DT/the problem/NN/problem is/VBZ/is with/IN/with removing/VBG/removing /,/, note/NN/note that/IN/that i/PRP/i can/MD/can not/RB/not remove/VB/remove the/DT/the torcezo/NN/torcezo element/NNP/element. the/DT/the linked/VBN/linked list/NN/list does/VBZ/does not/RB/not permit/VB/permit me/PRP/me to/TO/to do/VB/do this/NNP/this. can/MD/can i/VB/i remove/VB/remove the/DT/the torcezo/NN/torcezo element/NN/element from/IN/from linked/VBN/linked list/NN/list not/RB/not directly/RB/directly /,/, because/IN/because to/TO/to remove/VB/remove that/IN/that element/NN/element i/PRP/i have/VBP/have to/TO/to change/VB/change the/DT/the 2nd/CD/2nd pointer/NNP/pointer. but/CC/but there/EX/there is/VBZ/is no/DT/no way/NN/way of/IN/of accessing/VBG/accessing that/IN/that pointer/JJR/pointer and/CC/and hence/NN/hence i/PRP/i can/MD/can not/RB/not remove/VB/remove that/IN/that element/NNP/element. i/PRP/i can/MD/can remove/VB/remove the/DT/the rome/NN/rome element/NN/element /,/, there/EX/there is/VBZ/is no/DT/no problem/NN/problem in/IN/in it/PRP/it /,/, but/CC/but i/PRP/i can/MD/can not/RB/not remove/VB/remove the/DT/the torcezo/NN/torcezo element/NNP/element. in/IN/in a/DT/a queue/NN/queue the/DT/the removal/NN/removal is/VBZ/is being/VBG/being done/NN/done at/IN/at the/DT/the front/NN/front that/IN/that is/VBZ/is we/PRP/we remove/VBP/remove the/DT/the element/NN/element at/IN/at the/DT/the front/NN/front of/IN/of the/DT/the queue/NNP/queue. since/IN/since i/PRP/i can/MD/can not/RB/not remove/VB/remove the/DT/the element/NN/element which/WDT/which is/VBZ/is sitting/VBG/sitting at/IN/at the/DT/the last/JJ/last place/NN/place and/CC/and i/PRP/i can/MD/can not/RB/not call/VB/call this/DT/this as/IN/as the/DT/the front/NN/front of/IN/of the/DT/the queue/NNP/queue. i/PRP/i would/MD/would like/VB/like to/TO/to have/VB/have rome/VBN/rome as/IN/as the/DT/the front/NN/front of/IN/of my/PRP$/my queue/NNP/queue. let/NN/let us/PRP/us see/VBP/see how/WRB/how we/PRP/we are/VBP/are going/VBG/going to/TO/to implement/VB/implement our/PRP$/our methods/NNP/methods. suppose/NN/suppose i/PRP/i have/VBP/have to/TO/to dequeue/VB/dequeue which/WDT/which means/NNS/means that/WDT/that the/DT/the front/NN/front of/IN/of the/DT/the queue/NN/queue is/VBZ/is the/DT/the one/CD/one which/WDT/which is/VBZ/is at/IN/at your/PRP$/your left/NNP/left. head/NN/head part/NN/part is/VBZ/is the/DT/the front/NN/front of/IN/of the/DT/the queue/NN/queue and/CC/and the/DT/the tail/NN/tail part/NN/part is/VBZ/is going/VBG/going to/TO/to be/VB/be the/DT/the rear/JJ/rear of/IN/of the/DT/the queue/NNP/queue. if/IN/if i/PRP/i have/VBP/have to/TO/to remove/VB/remove the/DT/the element/NN/element at/IN/at the/DT/the front/NN/front of/IN/of the/DT/the queue/NN/queue that/IN/that is/VBZ/is to/TO/to dequeue/VB/dequeue /,/, i/PRP/i should/MD/should point/VB/point the/DT/the head/NN/head to/TO/to the/DT/the 2nd/CD/2nd node/NNP/node. thus/RB/thus the/DT/the front/NN/front element/NN/element will/MD/will get/VB/get removed/VBN/removed and/CC/and i/PRP/i just/RB/just increment/JJ/increment or/CC/or just/RB/just making/VBG/making the/DT/the head/NN/head point/NN/point to/TO/to 2nd/CD/2nd node/NNP/node. in/IN/in this/DT/this manner/NN/manner i/PRP/i can/MD/can delete/VB/delete the/DT/the head/NN/head element/NN/element very/RB/very easily/RB/easily and/CC/and also/RB/also i/PRP/i can/MD/can insert/VB/insert a/DT/a new/JJ/new element/NN/element to/TO/to the/DT/the head/NN/head easily/NNP/easily. i/PRP/i just/RB/just create/VB/create a/DT/a new/JJ/new node/NN/node /,/, connect/NN/connect the/DT/the new/JJ/new node/NN/node and/CC/and make/VB/make the/DT/the head/NN/head point/NN/point to/TO/to the/DT/the new/JJ/new node/NNP/node. thus/RB/thus inserting/VBG/inserting at/IN/at the/DT/the head/NN/head is/VBZ/is very/RB/very easy/NNP/easy. the/DT/the head/NN/head is/VBZ/is the/DT/the front/NN/front of/IN/of the/DT/the queue/NN/queue /,/, i/PRP/i can/MD/can just/RB/just move/VB/move the/DT/the head/NN/head to/TO/to one/CD/one step/VB/step right/RB/right and/CC/and in/IN/in that/DT/that manner/NN/manner /,/, remove/VBP/remove the/DT/the front/NN/front element/NN/element of/IN/of the/DT/the queue/NNP/queue. if/IN/if i/PRP/i have/VBP/have to/TO/to add/VB/add an/DT/an element/NN/element /,/, enqueue/NN/enqueue has/VBZ/has to/TO/to be/VB/be done/VBN/done at/IN/at the/DT/the rear/JJ/rear of/IN/of the/DT/the queue/NNP/queue. in/IN/in the/DT/the above/NN/above slide/NN/slide /,/, first/JJ/first diagram/NN/diagram is/VBZ/is my/PRP$/my queue/NN/queue and/CC/and the/DT/the last/JJ/last element/NN/element is/VBZ/is the/DT/the rear/JJ/rear of/IN/of the/DT/the queue/NNP/queue. i/PRP/i need/VBP/need to/TO/to add/VB/add a/DT/a new/JJ/new element/NN/element at/IN/at the/DT/the rear/JJ/rear end/NN/end of/IN/of the/DT/the queue/NNP/queue. the/DT/the pointer/NN/pointer should/MD/should now/RB/now get/VB/get modified/VBN/modified to/TO/to point/NN/point to/TO/to the/DT/the newly/RB/newly added/VBD/added element/NN/element and/CC/and the/DT/the tail/NN/tail should/MD/should be/VB/be update/JJ/update to/TO/to the/DT/the next/JJ/next node/NN/node because/IN/because that/DT/that will/MD/will become/VB/become tail/NN/tail and/CC/and the/DT/the pointer/NN/pointer after/IN/after the/DT/the rear/JJ/rear element/NN/element should/MD/should be/VB/be null/NNP/null. i/PRP/i can/MD/can always/RB/always add/VB/add an/DT/an element/NN/element at/IN/at the/DT/the tail/NN/tail but/CC/but it/PRP/it is/VBZ/is difficult/JJ/difficult to/TO/to remove/VB/remove an/DT/an element/NN/element in/IN/in constant/NN/constant time/NN/time /,/, because/IN/because to/TO/to remove/VB/remove the/DT/the tail/NN/tail node/NN/node /,/, i/PRP/i need/VBP/need to/TO/to access/NN/access the/DT/the previous/JJ/previous node/NNP/node. the/DT/the only/JJ/only way/NN/way you/PRP/you can/MD/can to/TO/to do/VB/do in/IN/in this/DT/this kind/NN/kind of/IN/of list/NN/list is/VBZ/is to/TO/to start/VB/start from/IN/from the/DT/the beginning/NN/beginning and/CC/and move/VB/move all/DT/all the/DT/the way/NN/way to/TO/to the/DT/the right/NN/right till/IN/till you/PRP/you get/VBP/get to/TO/to the/DT/the tail/NN/tail node/NNP/node. then/RB/then you/PRP/you will/MD/will be/VB/be able/JJ/able to/TO/to access/NN/access the/DT/the previous/JJ/previous node/NNP/node. what/WP/what is/VBZ/is problem/NN/problem in/IN/in removing/NN/removing in/IN/in the/DT/the tail/NN/tail node/NN/node the/DT/the problem/NN/problem is/VBZ/is that/IN/that after/IN/after i/PRP/i remove/VBP/remove the/DT/the tail/NN/tail node/NN/node /,/, what/WP/what is/VBZ/is the/DT/the new/JJ/new tail/NN/tail of/IN/of the/DT/the list/NNP/list. it/PRP/it is/VBZ/is the/DT/the last/JJ/last before/IN/before node/NN/node /,/, i/PRP/i have/VBP/have to/TO/to make/VB/make the/DT/the tail/NN/tail point/NN/point to/TO/to that/DT/that last/JJ/last before/IN/before node/NNP/node. how/WRB/how do/VBP/do i/PRP/i get/VB/get to/TO/to that/DT/that last/JJ/last before/IN/before node/NN/node i/PRP/i need/VBP/need to/TO/to go/VB/go through/RP/through the/DT/the entire/JJ/entire list/NN/list /,/, to/TO/to get/VB/get to/TO/to this/DT/this node/NNP/node. i/PRP/i am/VBP/am not/RB/not saying/VBG/saying that/IN/that it/PRP/it is/VBZ/is not/RB/not possible/JJ/possible /,/, but/CC/but it/PRP/it is/VBZ/is a/DT/a very/RB/very expensive/JJ/expensive operation/NNP/operation. it/PRP/it is/VBZ/is not/RB/not worth/JJ/worth while/IN/while to/TO/to remove/VB/remove at/IN/at the/DT/the tail/NN/tail and/CC/and so/RB/so we/PRP/we will/MD/will remove/VB/remove at/IN/at the/DT/the head/NN/head and/CC/and add/VBD/add at/IN/at the/DT/the tail/NN/tail /,/, which/WDT/which means/VBZ/means the/DT/the front/NN/front of/IN/of our/PRP$/our queue/NN/queue will/MD/will be/VB/be at/IN/at the/DT/the head/NN/head and/CC/and the/DT/the rear/NN/rear of/IN/of the/DT/the queue/NN/queue would/MD/would be/VB/be the/DT/the tail/NNP/tail. so/RB/so far/RB/far we/PRP/we have/VBP/have seen/VBN/seen the/DT/the queue/NN/queue data/NNS/data type/NNP/type. now/RB/now i/PRP/i am/VBP/am going/VBG/going to/TO/to introduce/VB/introduce another/DT/another data/NN/data type/NN/type called/VBN/called double-ended/JJ/double-ended queue/NNP/queue. what/WP/what is/VBZ/is the/DT/the double-ended/JJ/double-ended queue/NN/queue it/PRP/it is/VBZ/is a/DT/a queue/NN/queue in/IN/in which/WDT/which we/PRP/we support/VBP/support /,/, insert/NN/insert and/CC/and delete/JJ/delete operations/NNS/operations at/IN/at both/DT/both the/DT/the ends/NNP/ends. we/PRP/we have/VBP/have insert/VBN/insert first/JJ/first which/WDT/which is/VBZ/is to/TO/to insert/VB/insert at/IN/at the/DT/the front/NN/front of/IN/of the/DT/the queue/NN/queue /,/, insert/NN/insert last/JJ/last is/VBZ/is to/TO/to insert/VB/insert at/IN/at the/DT/the end/NN/end of/IN/of the/DT/the queue/NN/queue /,/, remove/VBP/remove first/JJ/first is/VBZ/is to/TO/to remove/VB/remove at/IN/at the/DT/the front/NN/front of/IN/of the/DT/the queue/NN/queue and/CC/and remove/VB/remove last/JJ/last is/VBZ/is to/TO/to remove/VB/remove an/DT/an element/NN/element at/IN/at the/DT/the end/NN/end of/IN/of the/DT/the queue/NNP/queue. also/RB/also we/PRP/we have/VBP/have the/DT/the first/JJ/first and/CC/and the/DT/the last/JJ/last operations/NNP/operations. such/JJ/such a/DT/a thing/NN/thing is/VBZ/is called/VBN/called double-ended/JJ/double-ended queue/NN/queue /,/, at/IN/at both/DT/both the/DT/the ends/NNS/ends we/PRP/we can/MD/can do/VB/do both/DT/both the/DT/the operations/NNS/operations of/IN/of insert/NN/insert and/CC/and delete/NNP/delete. a/DT/a singly/RB/singly linked/VBN/linked list/NN/list is/VBZ/is not/RB/not a/DT/a good/JJ/good idea/NN/idea to/TO/to implement/VB/implement such/JJ/such a/DT/a double-ended/JJ/double-ended queue/NNP/queue. why/WRB/why because/IN/because as/IN/as i/PRP/i have/VBP/have said/VBN/said repeatedly/RB/repeatedly /,/, we/PRP/we can/MD/can not/RB/not remove/VB/remove the/DT/the element/NN/element at/IN/at the/DT/the tail/NN/tail or/CC/or it/PRP/it is/VBZ/is very/RB/very expensive/NNP/expensive. what/WP/what is/VBZ/is the/DT/the good/JJ/good solution/NN/solution to/TO/to this/DT/this problem/NN/problem we/PRP/we are/VBP/are going/VBG/going to/TO/to use/VB/use doubly/RB/doubly linked/VBN/linked list/NN/list to/TO/to implement/VB/implement double-ended/JJ/double-ended queues/NNP/queues. what/WP/what is/VBZ/is the/DT/the doubly/RB/doubly linked/VBN/linked list/NN/list a/DT/a doubly/RB/doubly linked/VBN/linked list/NN/list has/VBZ/has nodes/NNS/nodes with/IN/with two/CD/two pointers/NNS/pointers /,/, one/CD/one is/VBZ/is next/JJ/next pointer/NN/pointer and/CC/and the/DT/the other/JJ/other is/VBZ/is the/DT/the previous/JJ/previous pointer/NNP/pointer. we/PRP/we are/VBP/are also/RB/also going/VBG/going to/TO/to have/VB/have two/CD/two sentinel/JJ/sentinel nodes/NNP/nodes. each/DT/each node/NN/node has/VBZ/has two/CD/two pointers/NNS/pointers /,/, one/CD/one pointing/VBG/pointing to/TO/to the/DT/the next/JJ/next and/CC/and one/CD/one pointing/VBG/pointing to/TO/to the/DT/the previous/NNP/previous. using/VBG/using such/JJ/such a/DT/a list/NN/list we/PRP/we can/MD/can implement/VB/implement all/PDT/all the/DT/the operations/NNS/operations of/IN/of double-ended/JJ/double-ended queue/NN/queue in/IN/in constant/NN/constant time/NNP/time. the/DT/the problem/NN/problem earlier/JJR/earlier was/VBD/was how/WRB/how to/TO/to delete/VB/delete the/DT/the node/NN/node which/WDT/which is/VBZ/is at/IN/at the/DT/the end/NNP/end. the/DT/the head/NN/head and/CC/and the/DT/the trailer/NN/trailer nodes/VBZ/nodes are/VBP/are the/DT/the 2/CD/2 sentinel/NN/sentinel nodes/NNP/nodes. i/PRP/i have/VBP/have a/DT/a pointer/NN/pointer to/TO/to 2/CD/2 sentinel/NN/sentinel nodes/VBZ/nodes and/CC/and to/TO/to get/VB/get to/TO/to the/DT/the last/JJ/last element/NN/element /,/, i/PRP/i just/RB/just follow/VBP/follow the/DT/the pointer/NN/pointer once/RB/once and/CC/and get/VB/get to/TO/to that/DT/that element/NNP/element. to/TO/to delete/VB/delete that/IN/that node/NN/node /,/, move/NN/move to/TO/to the/DT/the previous/JJ/previous port/NN/port and/CC/and set/VBD/set its/PRP$/its next/JJ/next pointer/NN/pointer to/TO/to trailer/VB/trailer and/CC/and send/VB/send the/DT/the previous/JJ/previous pointer/NN/pointer of/IN/of trailer/NN/trailer to/TO/to that/DT/that node/NNP/node. /NNP/) we/PRP/we need/VBP/need header/NN/header and/CC/and trailer/NN/trailer nodes/NNS/nodes in/IN/in a/DT/a doubly/RB/doubly linked/VBN/linked list/NNP/list. these/DT/these nodes/NNS/nodes are/VBP/are called/VBN/called sentinel/NN/sentinel nodes/NNS/nodes or/CC/or dummy/NN/dummy nodes/NNS/nodes because/IN/because they/PRP/they do/VBP/do not/RB/not contain/VB/contain any/DT/any data/NNS/data inside/VBP/inside them/PRP/them and/CC/and they/PRP/they are/VBP/are just/RB/just there/RB/there to/TO/to mark/VB/mark the/DT/the start/NN/start and/CC/and the/DT/the end/NNP/end. this/DT/this is/VBZ/is useful/NNP/useful. how/WRB/how do/VBP/do you/PRP/you delete/VB/delete at/IN/at the/DT/the end/NN/end i/PRP/i have/VBP/have to/TO/to delete/VB/delete san/JJ/san francisco/NN/francisco out/IN/out of/IN/of this/DT/this list/NNP/list. all/DT/all i/PRP/i have/VBP/have to/TO/to do/VB/do is/VBZ/is make/VB/make the/DT/the sentinel/NN/sentinel node/NN/node point/NN/point to/TO/to the/DT/the previous/JJ/previous node/NN/node and/CC/and make/VB/make that/IN/that previous/JJ/previous node/NN/node to/TO/to point/NN/point to/TO/to the/DT/the sentinel/NN/sentinel node/NNP/node. then/RB/then the/DT/the last/JJ/last node/NN/node is/VBZ/is deleted/VBN/deleted and/CC/and in/IN/in the/DT/the slide/NN/slide the/DT/the last/JJ/last one/CD/one becomes/VBZ/becomes my/PRP$/my new/JJ/new list/NNP/list. that/WDT/that was/VBD/was the/DT/the only/JJ/only thing/NN/thing i/PRP/i could/MD/could not/RB/not do/VB/do in/IN/in a/DT/a singly/RB/singly linked/VBN/linked list/NN/list and/CC/and i/PRP/i have/VBP/have shown/VBN/shown it/PRP/it here/NNP/here. hence/NN/hence all/DT/all the/DT/the other/JJ/other operations/NNS/operations can/MD/can be/VB/be done/VBN/done in/IN/in constant/JJ/constant time/NNP/time. thus/RB/thus using/VBG/using a/DT/a doubly/RB/doubly linked/VBN/linked list/NN/list /,/, we/PRP/we can/MD/can implement/VB/implement all/PDT/all the/DT/the operations/NNS/operations of/IN/of double-ended/JJ/double-ended queue/NN/queue in/IN/in constant/NN/constant time/NNP/time. we/PRP/we can/MD/can insert/VB/insert at/IN/at the/DT/the front/NN/front /,/, insert/NN/insert at/IN/at the/DT/the end/NN/end /,/, delete/JJ/delete at/IN/at the/DT/the front/NN/front or/CC/or delete/JJ/delete at/IN/at the/DT/the end/NN/end all/DT/all in/IN/in constant/JJ/constant time/NNP/time. what/WP/what is/VBZ/is meant/VBN/meant by/IN/by constant/NN/constant time/NN/time it/PRP/it is/VBZ/is the/DT/the time/NN/time which/WDT/which is/VBZ/is independent/JJ/independent of/IN/of number/NN/number of/IN/of elements/NNS/elements in/IN/in the/DT/the list/NN/list and/CC/and your/PRP$/your running/NN/running time/NN/time will/MD/will not/RB/not be/VB/be depended/VBN/depended upon/IN/upon the/DT/the time/NNP/time. double-ended/JJ/double-ended queue/NN/queue is/VBZ/is a/DT/a fairly/RB/fairly generic/JJ/generic data/NNS/data type/NN/type /,/, it/PRP/it can/MD/can used/VB/used to/TO/to implement/VB/implement other/JJ/other data/NNS/data types/NNS/types also/NNP/also. suppose/NN/suppose you/PRP/you had/VBD/had an/DT/an implementation/NN/implementation of/IN/of double-ended/JJ/double-ended queue/NN/queue and/CC/and you/PRP/you can/MD/can use/VB/use that/IN/that to/TO/to make/VB/make a/DT/a stack/NN/stack or/CC/or a/DT/a queue/NNP/queue. let/NN/let us/PRP/us see/VBP/see the/DT/the implementation/NN/implementation of/IN/of a/DT/a double-ended/JJ/double-ended queue/NNP/queue. i/PRP/i can/MD/can use/VB/use the/DT/the methods/NNS/methods of/IN/of this/DT/this implementation/NN/implementation to/TO/to implement/VB/implement a/DT/a stack/NNP/stack. for/IN/for instance/NN/instance in/IN/in the/DT/the method/NN/method top/NN/top /:/( /:/) /,/, the/DT/the top/JJ/top element/NN/element of/IN/of the/DT/the stack/NN/stack would/MD/would correspond/VB/correspond to/TO/to the/DT/the last/JJ/last element/NN/element of/IN/of our/PRP$/our double-ended/JJ/double-ended queue.thus/JJ/queue.thus the/DT/the method/NN/method top/NN/top /:/( /:/) would/MD/would return/VB/return the/DT/the last/JJ/last element/NN/element of/IN/of the/DT/the double-ended/JJ/double-ended queue/NNP/queue. the/DT/the method/NN/method push/NN/push /:/( /:/) would/MD/would correspond/VB/correspond to/TO/to inserting/VB/inserting at/IN/at the/DT/the end/NN/end of/IN/of my/PRP$/my double/JJ/double ended/VBD/ended queue/JJ/queue and/CC/and the/DT/the method/NN/method pop/NN/pop /:/( /:/) would/MD/would correspond/VB/correspond to/TO/to deleting/VB/deleting at/IN/at the/DT/the end/NN/end of/IN/of my/PRP$/my double/JJ/double ended/VBD/ended queue/NNP/queue. i/PRP/i could/MD/could also/RB/also make/VB/make the/DT/the last/JJ/last /NN/( /:/) to/TO/to correspond/VB/correspond to/TO/to the/DT/the front/NN/front element/NN/element of/IN/of my/PRP$/my double/JJ/double ended/VBD/ended queue/NNP/queue. in/IN/in that/DT/that case/NN/case the/DT/the last/JJ/last /NN/( /:/) would/MD/would have/VB/have been/VBN/been my/PRP$/my front/NN/front and/CC/and insert/NN/insert last/JJ/last /NN/( 0/-NONE-/0 /./) would/MD/would have/VB/have been/VBN/been insert/VBN/insert front/NN/front /:/( /:/) and/CC/and remove/VB/remove last/JJ/last /NN/( /:/) would/MD/would have/VB/have been/VBN/been my/PRP$/my remove/NN/remove front/NN/front /:/( /:/) /./. you/PRP/you can/MD/can use/VB/use it/PRP/it either/DT/either way/NN/way you/PRP/you like/IN/like it/NNP/it. size/NN/size /:/( /:/) just/RB/just corresponds/VBZ/corresponds to/TO/to the/DT/the size/NN/size of/IN/of my/PRP$/my double/JJ/double ended/VBD/ended queue/JJ/queue and/CC/and isempty/NN/isempty /:/( /:/) corresponds/NNS/corresponds to/TO/to isempty/NN/isempty of/IN/of my/PRP$/my double-ended/JJ/double-ended queue/NNP/queue. because/IN/because these/DT/these are/VBP/are only/RB/only dependent/JJ/dependent upon/IN/upon the/DT/the number/NN/number of/IN/of elements/NNS/elements in/IN/in the/DT/the queue/NNP/queue. similarly/RB/similarly i/PRP/i can/MD/can use/VB/use a/DT/a double-ended/JJ/double-ended queue/NN/queue to/TO/to implement/VB/implement the/DT/the queue/NNP/queue. front/NN/front /:/( /:/) gives/NNS/gives the/DT/the first/JJ/first element/NN/element of/IN/of the/DT/the double-ended/JJ/double-ended queue/NN/queue /,/, enqueue/NN/enqueue /:/( /:/) corresponds/NNS/corresponds to/TO/to last/JJ/last that/IN/that is/VBZ/is it/PRP/it inserts/VBZ/inserts at/IN/at the/DT/the rear/NNP/rear. when/WRB/when i/PRP/i say/VBP/say dequeue/JJ/dequeue /,/, it/PRP/it removes/VBZ/removes the/DT/the first/JJ/first element/NN/element of/IN/of the/DT/the double-ended/JJ/double-ended queue/NNP/queue. if/IN/if i/PRP/i have/VBP/have a/DT/a dequeue/NN/dequeue implementation/NN/implementation /,/, i/PRP/i can/MD/can use/VB/use the/DT/the methods/NNS/methods to/TO/to implement/VB/implement a/DT/a stack/NN/stack or/CC/or a/DT/a queue/NN/queue or/CC/or one/CD/one of/IN/of these/DT/these data/NNS/data types/NNP/types. we/PRP/we have/VBP/have used/VBN/used a/DT/a double-ended/JJ/double-ended queue/NN/queue to/TO/to implement/VB/implement a/DT/a stack/NN/stack or/CC/or queue/VB/queue and/CC/and this/DT/this is/VBZ/is an/DT/an example/NN/example of/IN/of an/DT/an adapter/NN/adapter pattern/NNP/pattern. thus/RB/thus adapter/JJR/adapter patterns/NNS/patterns implements/NNS/implements a/DT/a class/NN/class using/VBG/using methods/NNS/methods of/IN/of another/DT/another class/NNP/class. in/IN/in general/JJ/general /,/, adapter/NN/adapter classes/NNS/classes specialize/VBP/specialize general/JJ/general classes/NNS/classes and/CC/and we/PRP/we can/MD/can have/VB/have certain/JJ/certain applications/NNP/applications. one/CD/one application/NN/application is/VBZ/is that/IN/that we/PRP/we can/MD/can just/RB/just implement/VB/implement by/IN/by changing/NN/changing some/DT/some methods/NNP/methods. for/IN/for example/NN/example we/PRP/we can/MD/can implement/VB/implement a/DT/a stack/NN/stack by/IN/by using/VBG/using a/DT/a double-ended/JJ/double-ended queue/NNP/queue. another/DT/another application/NN/application would/MD/would be/VB/be an/DT/an implementation/NN/implementation of/IN/of a/DT/a stack/NNP/stack. we/PRP/we define/VBP/define an/DT/an interface/NN/interface called/VBN/called stack/NN/stack and/CC/and implemented/VBD/implemented it/PRP/it using/VBG/using an/DT/an array/NNP/array. that/IN/that implementation/NN/implementation is/VBZ/is called/VBN/called an/DT/an array/NN/array stack/NNP/stack. what/WP/what are/VBP/are the/DT/the contents/NNS/contents of/IN/of array/NN/array stack/NN/stack they/PRP/they are/VBP/are any/DT/any arbitrary/JJ/arbitrary objects/NNS/objects and/CC/and i/PRP/i can/MD/can adapt/VB/adapt arraystack/NN/arraystack implementation/NN/implementation to/TO/to an/DT/an implementation/NN/implementation called/VBN/called integerarraystack/NN/integerarraystack which/WDT/which only/RB/only uses/VBZ/uses integer/JJR/integer objects/NNS/objects in/IN/in it/NNP/it. all/DT/all i/PRP/i have/VBP/have to/TO/to do/VB/do is/VBZ/is suitably/RB/suitably cast/VBN/cast the/DT/the type/NN/type of/IN/of the/DT/the objects/NNS/objects that/WDT/that i/PRP/i am/VBP/am pushing/VBG/pushing in/IN/in to/TO/to the/DT/the stack/NN/stack or/CC/or removing/VBG/removing out/RP/out of/IN/of the/DT/the stack/NNP/stack. there/RB/there is/VBZ/is another/DT/another data/NN/data structures/NNS/structures called/VBN/called circularly/RB/circularly linked/VBN/linked list/NN/list and/CC/and it/PRP/it is/VBZ/is very/RB/very simple/NNP/simple. in/IN/in that/DT/that the/DT/the last/JJ/last element/NN/element is/VBZ/is pointing/VBG/pointing to/TO/to the/DT/the first/JJ/first element/NN/element of/IN/of the/DT/the list.there/JJ/list.there are/VBP/are no/DT/no 2/CD/2 pointers/NNS/pointers head/NN/head and/CC/and tail/NN/tail that/IN/that is/VBZ/is there/EX/there is/VBZ/is only/RB/only one/CD/one pointer/NN/pointer which/WDT/which is/VBZ/is pointing/VBG/pointing to/TO/to the/DT/the start/NN/start of/IN/of the/DT/the circular/JJ/circular list/NN/list and/CC/and you/PRP/you can/MD/can use/VB/use the/DT/the data/NNS/data structure/VBP/structure which/WDT/which is/VBZ/is given/VBN/given in/IN/in the/DT/the above/NN/above slide/NN/slide to/TO/to implement/VB/implement both/DT/both queue/NN/queue and/CC/and the/DT/the stack/NNP/stack. how/WRB/how will/MD/will you/PRP/you use/VB/use this/DT/this data/NN/data structure/NN/structure to/TO/to implement/VB/implement a/DT/a queue/NN/queue in/IN/in a/DT/a queue/NN/queue we/PRP/we will/MD/will make/VB/make the/DT/the first/JJ/first node/NN/node as/IN/as the/DT/the front/NN/front of/IN/of the/DT/the queue/NN/queue and/CC/and the/DT/the last/JJ/last node/NN/node as/IN/as the/DT/the rear/NN/rear of/IN/of the/DT/the queue/NNP/queue. how/WRB/how will/MD/will i/VB/i add/JJ/add an/DT/an element/NN/element at/IN/at the/DT/the rear/JJ/rear to/TO/to add/VB/add an/DT/an element/NN/element before/IN/before the/DT/the first/JJ/first node/NN/node /,/, make/VBP/make the/DT/the pointer/NN/pointer point/NN/point to/TO/to the/DT/the first/JJ/first node/NN/node and/CC/and make/VB/make the/DT/the head/NN/head point/NN/point to/TO/to /,/, it/PRP/it is/VBZ/is not/RB/not straight/RB/straight forward/RB/forward because/IN/because if/IN/if you/PRP/you mean/VBP/mean the/DT/the big/JJ/big pointer/NN/pointer then/RB/then how/WRB/how you/PRP/you will/MD/will make/VB/make this/DT/this to/TO/to point/NN/point to/TO/to the/DT/the new/JJ/new node/NN/node you/PRP/you have/VB/have just/RB/just created/NNP/created. we/PRP/we want/VBP/want to/TO/to create/VB/create a/DT/a new/JJ/new node/NN/node at/IN/at the/DT/the end/NNP/end. make/VBP/make the/DT/the element/NN/element which/WDT/which you/PRP/you are/VBP/are inserting/VBG/inserting to/TO/to go/VB/go into/IN/into the/DT/the new/JJ/new node/NN/node and/CC/and create/VB/create a/DT/a new/JJ/new node/NN/node and/CC/and copy/VB/copy the/DT/the element/NN/element rome/NN/rome into/IN/into the/DT/the new/JJ/new node/NNP/node. make/VBP/make the/DT/the head/NN/head point/NN/point to/TO/to that/DT/that new/JJ/new node/NN/node and/CC/and copying/VBG/copying is/VBZ/is not/RB/not costly/RB/costly because/IN/because here/RB/here you/PRP/you are/VBP/are copying/VBG/copying only/RB/only the/DT/the reference/NNP/reference. think/VBP/think about/IN/about the/DT/the circular/JJ/circular list/NN/list and/CC/and it/PRP/it is/VBZ/is a/DT/a very/RB/very straight/JJ/straight forward/NNP/forward. in/IN/in this/DT/this manner/NN/manner you/PRP/you can/MD/can insert/VB/insert an/DT/an element/NN/element in/IN/in the/DT/the queue/NN/queue /,/, if/IN/if you/PRP/you are/VBP/are using/VBG/using this/DT/this circular/NN/circular list/NN/list to/TO/to implement/VB/implement the/DT/the queue/NNP/queue. removing/NN/removing an/DT/an element/NN/element corresponds/VBZ/corresponds to/TO/to removing/VBG/removing the/DT/the first/JJ/first one/NNP/one. how/WRB/how do/VBP/do you/PRP/you remove/VB/remove the/DT/the first/JJ/first one/CD/one if/IN/if i/PRP/i have/VBP/have to/TO/to just/RB/just remove/VB/remove the/DT/the first/JJ/first element/NN/element in/IN/in the/DT/the list/NN/list /,/, then/RB/then how/WRB/how do/VBP/do i/PRP/i make/VB/make the/DT/the pointer/NN/pointer from/IN/from the/DT/the last/JJ/last node/NN/node to/TO/to point/NN/point to/TO/to the/DT/the 2nd/CD/2nd node/NNP/node. there/RB/there is/VBZ/is a/DT/a problem/NN/problem in/IN/in doing/NN/doing this/NNP/this. what/WP/what do/VBP/do you/PRP/you do/VB/do again/RB/again let/VB/let us/PRP/us remove/VB/remove the/DT/the 2nd/CD/2nd node/NN/node and/CC/and copy/VB/copy the/DT/the contents/NNS/contents of/IN/of that/DT/that node/NN/node to/TO/to the/DT/the 1st/CD/1st node/NNP/node. we/PRP/we have/VBP/have to/TO/to remove/VB/remove the/DT/the rome/NNP/rome. how/WRB/how do/VBP/do i/PRP/i remove/VB/remove the/DT/the rome/NN/rome i/PRP/i copy/VBP/copy seattle/JJ/seattle to/TO/to rome/NNP/rome. thus/RB/thus rome/VB/rome has/VBZ/has seattle/JJ/seattle in/IN/in it/PRP/it and/CC/and i/PRP/i remove/VBP/remove the/DT/the 2nd/JJ/2nd node/NNP/node. copying/NN/copying just/RB/just means/VBZ/means changing/VBG/changing the/DT/the reference/NNP/reference. hence/NN/hence we/PRP/we discusses/VBZ/discusses about/IN/about queues/NNS/queues and/CC/and double-ended/JJ/double-ended queues/NNP/queues. we/PRP/we are/VBP/are going/VBG/going to/TO/to the/DT/the second/JJ/second part/NN/part where/WRB/where we/PRP/we will/MD/will quickly/RB/quickly look/VB/look at/IN/at some/DT/some sequences/NNP/sequences. we/PRP/we are/VBP/are going/VBG/going to/TO/to talk/VB/talk about/IN/about vectors/NNS/vectors /,/, positions/NNS/positions /,/, list/NN/list and/CC/and general/JJ/general sequences/NNP/sequences. we/PRP/we will/MD/will be/VB/be using/VBG/using the/DT/the data/NNS/data structures/NNS/structures like/IN/like arrays/NNS/arrays and/CC/and linked/VBD/linked lists/NNS/lists to/TO/to implement/VB/implement these/DT/these data/NNS/data types/NNP/types. what/WP/what is/VBZ/is the/DT/the vector/NN/vector data/NNS/data type/NN/type vector/NN/vector data/NNS/data type/NN/type is/VBZ/is a/DT/a sequence/NN/sequence of/IN/of n/NN/n elements/NNS/elements that/WDT/that supports/NNS/supports the/DT/the following/VBG/following methods/NNS/methods which/WDT/which are/VBP/are given/VBN/given in/IN/in the/DT/the slide/NN/slide below/NNP/below. these/DT/these are/VBP/are indicative/JJ/indicative methods/NNS/methods and/CC/and not/RB/not all/DT/all the/DT/the methods/NNP/methods. essentially/RB/essentially in/IN/in a/DT/a vector/NN/vector it/PRP/it is/VBZ/is a/DT/a sequence/NN/sequence where/WRB/where there/EX/there is/VBZ/is a/DT/a notion/NN/notion of/IN/of rank/NN/rank with/IN/with every/DT/every element/NN/element of/IN/of the/DT/the sequence/NNP/sequence. think/VBP/think of/IN/of sequence/NN/sequence of/IN/of elements/NNS/elements right/RB/right 7,11,13,19/CD/7,11,13,19. we/PRP/we know/VBP/know that/IN/that 7/CD/7 was/VBD/was the/DT/the 1st/CD/1st element/NN/element /,/, 1l/CD/1l was/VBD/was the/DT/the 2nd/CD/2nd element/NN/element /,/, 13/CD/13 was/VBD/was the/DT/the 3rd/JJ/3rd element/NN/element and/CC/and 5/CD/5 was/VBD/was the/DT/the 4th/JJ/4th element/NNP/element. with/IN/with each/DT/each element/NN/element there/RB/there is/VBZ/is a/DT/a notion/NN/notion of/IN/of rank/NN/rank /,/, and/CC/and then/RB/then i/PRP/i can/MD/can have/VB/have methods/NNS/methods like/IN/like elematrank/NN/elematrank r/NNP/r. rank/NN/rank here/RB/here corresponds/VBZ/corresponds to/TO/to let/VB/let us/PRP/us say/VB/say rank/NN/rank /:/( r/NN/r /:/) integers/NNP/integers. first/JJ/first element/NN/element was/VBD/was the/DT/the element/NN/element at/IN/at rank/NN/rank 1/CD/1 and/CC/and 2nd/CD/2nd element/NN/element was/VBD/was the/DT/the element/NN/element at/IN/at rank/NN/rank 2/CD/2 and/CC/and so/RB/so on/NNP/on. suppose/NN/suppose if/IN/if i/PRP/i ask/VBP/ask to/TO/to give/VB/give the/DT/the element/NN/element at/IN/at rank/NN/rank r/NN/r or/CC/or replace/NN/replace the/DT/the element/NN/element at/IN/at rank/NN/rank r/NN/r by/IN/by the/DT/the element/NN/element e/NN/e /,/, insert/NN/insert an/DT/an element/NN/element e/NN/e at/IN/at rank/NN/rank r/NN/r or/CC/or delete/JJ/delete the/DT/the element/NN/element at/IN/at rank/NN/rank r/NNP/r. i/PRP/i could/MD/could have/VB/have such/JJ/such methods/NNP/methods. when/WRB/when i/PRP/i remove/VBP/remove the/DT/the element/NN/element at/IN/at rank/NN/rank r/NN/r /,/, for/IN/for instance/NN/instance let/NN/let us/PRP/us say/VBP/say the/DT/the rank/NN/rank of/IN/of the/DT/the students/NNS/students in/IN/in a/DT/a particular/JJ/particular class/NNP/class. there/RB/there is/VBZ/is a/DT/a departmental/JJ/departmental rank/NN/rank 1/CD/1 /,/, the/DT/the departmental/JJ/departmental rank/NN/rank 2/CD/2 and/CC/and departmental/JJ/departmental rank/NN/rank 3/CD/3 and/CC/and so/RB/so on/NNP/on. suppose/NN/suppose the/DT/the departmental/JJ/departmental rank/NN/rank 4/CD/4 changes/NNS/changes and/CC/and goes/VBZ/goes to/TO/to some/DT/some other/JJ/other department/NNP/department. the/DT/the department/NN/department rank/NN/rank 4/CD/4 is/VBZ/is the/DT/the rank/NN/rank of/IN/of the/DT/the one/CD/one who/WP/who had/VBD/had the/DT/the rank/NN/rank 5/CD/5 before/NNP/before. the/DT/the same/JJ/same notion/NN/notion follows/VBZ/follows and/CC/and everyone/NN/everyone would/MD/would move/VB/move up/RP/up by/IN/by 1/CD/1 rank/NNP/rank. let/NN/let us/PRP/us see/VBP/see how/WRB/how to/TO/to implement/VB/implement the/DT/the data/NNS/data type/NN/type using/VBG/using arrays/NNP/arrays. i/PRP/i am/VBP/am going/VBG/going to/TO/to have/VB/have an/DT/an array/NN/array /,/, in/IN/in which/WDT/which i/PRP/i will/MD/will have/VB/have the/DT/the element/NN/element with/IN/with rank/NN/rank 1/CD/1 /,/, rank/NN/rank 2/CD/2 and/CC/and rank/NN/rank 3/CD/3 and/CC/and so/RB/so on/NNP/on. if/IN/if i/PRP/i have/VBP/have to/TO/to insert/VB/insert an/DT/an element/NN/element at/IN/at rank/NN/rank r/NN/r /,/, i/PRP/i have/VBP/have to/TO/to put/VB/put an/DT/an element/NN/element in/IN/in the/DT/the th/NN/th r/NN/r location/NN/location /,/, which/WDT/which means/VBZ/means i/PRP/i have/VBP/have to/TO/to shift/VB/shift all/DT/all these/DT/these elements/NNS/elements to/TO/to one/CD/one step/VB/step right/NNP/right. that/IN/that is/VBZ/is what/WP/what i/PRP/i am/VBP/am doing/VBG/doing and/CC/and i/PRP/i put/VBD/put an/DT/an element/NN/element in/IN/in that/DT/that location/NNP/location. in/IN/in a/DT/a for/IN/for loop/NN/loop /,/, first/JJ/first we/PRP/we are/VBP/are moving/VBG/moving n-1/-NONE-/n-1 one/CD/one step/NN/step to/TO/to the/DT/the right/NN/right by/IN/by this/DT/this statement/NN/statement s/VBZ/s /:/[ i/PRP/i +/VBP/+ 1/CD/1 /CD/] s/NNS/s /:/[ i/PRP/i /VBP/] /./. first/JJ/first we/PRP/we are/VBP/are doing/VBG/doing this/DT/this for/IN/for n-1/-NONE-/n-1 /,/, then/RB/then n-2/-NONE-/n-2 where/WRB/where n-2/-NONE-/n-2 is/VBZ/is moved/VBN/moved one/CD/one step/NN/step to/TO/to the/DT/the right/NN/right till/IN/till r/NN/r is/VBZ/is moved/VBN/moved to/TO/to the/DT/the one/CD/one step/NN/step right/NNP/right. finally/RB/finally element/JJ/element e/NN/e is/VBZ/is put/VBN/put at/IN/at position/NN/position r/NN/r and/CC/and the/DT/the size/NN/size is/VBZ/is increased/VBN/increased by/IN/by 1/CD/1 where/WRB/where n/JJ/n sores/NNS/sores the/DT/the size/NN/size of/IN/of the/DT/the vector/NNP/vector. s/VBZ/s /:/[ r/NN/r /:/] e/NN/e n/NN/n n/NN/n +/:/+ 1/CD/1 similarly/RB/similarly when/WRB/when i/PRP/i am/VBP/am removing/VBG/removing an/DT/an element/NN/element at/IN/at rank/NN/rank r/NN/r /,/, i/PRP/i am/VBP/am essentially/RB/essentially shifting/VBG/shifting the/DT/the entire/JJ/entire elements/NNS/elements one/CD/one step/NN/step to/TO/to the/DT/the left/NNP/left. all/DT/all elements/NNS/elements starting/VBG/starting from/IN/from r/NN/r to/TO/to n-2/-NONE-/n-2 and/CC/and then/RB/then s/VBZ/s /:/[ i/PRP/i /VBP/] gets/NNS/gets s/NNS/s /VBP/[ i/PRP/i +/VBP/+ 1/CD/1 /CD/] /./. at/IN/at the/DT/the location/NN/location r/NN/r /,/, i/PRP/i will/MD/will get/VB/get the/DT/the element/NN/element which/WDT/which was/VBD/was sitting/VBG/sitting at/IN/at location/NN/location r/NN/r +/:/+ 1/CD/1. how/WRB/how expensive/JJ/expensive are/VBP/are these/DT/these operations/NNS/operations in/IN/in the/DT/the worst/JJS/worst case/NN/case order/NN/order n/NN/n in/IN/in the/DT/the worst/JJS/worst case/NN/case because/IN/because we/PRP/we might/MD/might have/VB/have to/TO/to shift/VB/shift up/RP/up to/TO/to n/VB/n elements/NNS/elements to/TO/to the/DT/the right/NN/right or/CC/or to/TO/to the/DT/the left/NNP/left. this/DT/this implementation/NN/implementation is/VBZ/is expensive/JJ/expensive from/IN/from this/DT/this point/NN/point of/IN/of view/NN/view /,/, if/IN/if i/PRP/i have/VBP/have to/TO/to do/VB/do these/DT/these two/CD/two operations/NNS/operations insert/NN/insert at/IN/at a/DT/a certain/JJ/certain rank/NN/rank or/CC/or remove/VB/remove at/IN/at a/DT/a certain/JJ/certain rank/NNP/rank. i/PRP/i have/VBP/have 2/CD/2 in/IN/in the/DT/the worst/JJS/worst case/NN/case spent/NN/spent order/NN/order n/NN/n time/NNP/time. the/DT/the other/JJ/other operations/NNS/operations are/VBP/are faster/NNP/faster. how/WRB/how much/JJ/much time/NN/time does/VBZ/does the/DT/the elematrank/NN/elematrank /:/( r/NN/r /:/) takes/VBZ/takes /,/, because/IN/because i/PRP/i just/RB/just go/VBP/go to/TO/to the/DT/the th/NN/th r/NN/r location/NN/location in/IN/in that/DT/that array/NN/array and/CC/and retrieve/VB/retrieve the/DT/the elements/NNS/elements sitting/VBG/sitting there/NNP/there. replaceatrank/NN/replaceatrank /:/( r/NN/r /,/, e/NN/e /:/) again/RB/again order/JJR/order one/CD/one /,/, because/IN/because i/PRP/i just/RB/just go/VBP/go to/TO/to the/DT/the th/NN/th r/NN/r location/NN/location and/CC/and replace/NN/replace that/IN/that element/NN/element with/IN/with element/NN/element e/NNP/e. the/DT/the chart/NN/chart given/VBN/given below/IN/below shows/NNS/shows the/DT/the time/NN/time complexity/NN/complexity of/IN/of various/JJ/various methods/NNP/methods. all/DT/all methods/NNS/methods except/IN/except inserted/VBN/inserted at/IN/at rank/NN/rank and/CC/and remove/VB/remove at/IN/at rank/NN/rank take/VB/take constant/JJ/constant time/NN/time but/CC/but these/DT/these two/CD/two methods/NNS/methods could/MD/could take/VB/take order/NN/order n/NN/n time/NN/time in/IN/in the/DT/the worst/JJS/worst case/NNP/case. can/MD/can you/PRP/you think/VB/think of/IN/of some/DT/some other/JJ/other way/NN/way of/IN/of implementing/VBG/implementing this/DT/this list/NN/list we/PRP/we can/MD/can implement/VB/implement through/IN/through doubly/RB/doubly linked/VBN/linked list/NNP/list. can/MD/can you/PRP/you use/VB/use a/DT/a doubly/RB/doubly linked/VBN/linked list/NN/list to/TO/to implement/VB/implement a/DT/a vector/NN/vector i/PRP/i am/VBP/am showing/VBG/showing you/PRP/you here/RB/here the/DT/the operation/NN/operation of/IN/of inserting/VBG/inserting at/IN/at a/DT/a certain/JJ/certain rank/NNP/rank. there/RB/there are/VBP/are 3/CD/3 diagrams/NNS/diagrams in/IN/in the/DT/the above/NN/above slide/NNP/slide. in/IN/in the/DT/the 1st/CD/1st diagram/NN/diagram /,/, the/DT/the 1st/JJ/1st node/NN/node is/VBZ/is the/DT/the header/NN/header and/CC/and the/DT/the next/JJ/next one/CD/one is/VBZ/is the/DT/the element/NN/element at/IN/at rank/NN/rank 1/CD/1. following/VBG/following one/CD/one is/VBZ/is the/DT/the element/NN/element at/IN/at rank/NN/rank 2/CD/2 and/CC/and the/DT/the next/JJ/next one/CD/one is/VBZ/is the/DT/the element/NN/element at/IN/at rank/NN/rank 3/CD/3. suppose/NN/suppose i/PRP/i want/VBP/want to/TO/to insert/VB/insert an/DT/an element/NN/element at/IN/at rank/NN/rank 2/CD/2 /,/, i/PRP/i have/VBP/have to/TO/to make/VB/make a/DT/a new/JJ/new node/NN/node and/CC/and put/VBD/put it/PRP/it between/IN/between 1/CD/1 and/CC/and 3/CD/3. how/WRB/how much/JJ/much time/NN/time does/VBZ/does it/PRP/it take/VB/take create/JJ/create the/DT/the node/NN/node and/CC/and to/TO/to insert/VB/insert it/PRP/it /,/, i/PRP/i make/VBP/make a/DT/a pointer/NN/pointer point/NN/point to/TO/to the/DT/the next/JJ/next node/NN/node and/CC/and make/VB/make the/DT/the previous/JJ/previous pointer/NN/pointer point/NN/point to/TO/to the/DT/the previous/JJ/previous node/NNP/node. this/DT/this is/VBZ/is how/WRB/how i/PRP/i insert/VBP/insert newyork/NN/newyork and/CC/and the/DT/the 3rd/JJ/3rd diagram/NN/diagram is/VBZ/is the/DT/the one/CD/one which/WDT/which i/PRP/i get/VBP/get after/IN/after insertion/NNP/insertion. there/RB/there are/VBP/are 2/CD/2 issues/NNP/issues. first/RB/first if/IN/if i/PRP/i know/VBP/know where/WRB/where i/PRP/i have/VBP/have to/TO/to insert/VB/insert /,/, then/RB/then i/PRP/i take/VBP/take constant/JJ/constant time/NN/time but/CC/but to/TO/to find/VB/find out/RP/out where/WRB/where i/PRP/i have/VBP/have to/TO/to insert/VB/insert takes/VBZ/takes order/NN/order n/NN/n times/NNP/times. because/IN/because if/IN/if i/PRP/i have/VBP/have to/TO/to insert/VB/insert at/IN/at rank/NN/rank 17/CD/17 then/RB/then i/PRP/i have/VBP/have to/TO/to step/VB/step through/RP/through that/IN/that linked/VBN/linked list/NN/list till/IN/till 17th/CD/17th position/NN/position and/CC/and then/RB/then i/PRP/i would/MD/would know/VB/know to/TO/to insert/VB/insert at/IN/at that/DT/that location.once/NN/location.once i/PRP/i know/VBP/know to/TO/to insert/VB/insert at/IN/at this/DT/this location/NN/location then/RB/then it/PRP/it is/VBZ/is easy/NNP/easy. i/PRP/i will/MD/will insert/VB/insert the/DT/the element/NN/element in/IN/in 3/CD/3 or/CC/or 4/CD/4 pointer/NN/pointer changes/NNP/changes. the/DT/the following/VBG/following would/MD/would be/VB/be a/DT/a java/NN/java code/NN/code for/IN/for inserting/NN/inserting at/IN/at a/DT/a rank/NNP/rank. i/PRP/i am/VBP/am assuming/VBG/assuming the/DT/the existence/NN/existence of/IN/of the/DT/the procedure/NN/procedure nodeatrank/NN/nodeatrank /:/( rank/NN/rank /:/) /./. this/DT/this is/VBZ/is the/DT/the method/NN/method that/IN/that i/PRP/i am/VBP/am going/VBG/going to/TO/to be/VB/be defining/VBG/defining shortly/NNP/shortly. what/WP/what does/VBZ/does this/DT/this method/NN/method do/VBP/do given/VBN/given a/DT/a rank/NN/rank /,/, it/PRP/it tells/VBZ/tells me/PRP/me which/WDT/which is/VBZ/is the/DT/the node/NN/node at/IN/at that/DT/that rank/NNP/rank. for/IN/for instance/NN/instance /,/, to/TO/to insert/VB/insert the/DT/the node/NN/node at/IN/at rank/NN/rank 2/CD/2 /,/, first/JJ/first i/PRP/i will/MD/will call/VB/call the/DT/the procedure/NN/procedure with/IN/with rank/NN/rank 2/CD/2 it/PRP/it will/MD/will give/VB/give me/PRP/me the/DT/the 2nd/CD/2nd node/NN/node of/IN/of the/DT/the 1st/CD/1st diagram/NN/diagram because/IN/because that/DT/that is/VBZ/is the/DT/the node/NN/node at/IN/at rank/NN/rank 2/CD/2. i/PRP/i have/VBP/have to/TO/to get/VB/get to/TO/to the/DT/the previous/JJ/previous node/NN/node of/IN/of that/DT/that node/NNP/node. if/IN/if i/PRP/i get/VBP/get to/TO/to this/DT/this node/NN/node /:/( next/JJ/next /NN/) at/IN/at rank/NN/rank 2/CD/2 /,/, then/RB/then i/PRP/i get/VBP/get to/TO/to the/DT/the previous/JJ/previous node/NN/node /:/( next.getprev/NN/next.getprev /:/( /:/) /:/) and/CC/and this/DT/this is/VBZ/is the/DT/the node/NN/node previous/JJ/previous to/TO/to rank/VB/rank 2/CD/2 which/WDT/which is/VBZ/is at/IN/at rank/NN/rank 1/CD/1. the/DT/the new/JJ/new node/NN/node that/WDT/that i/PRP/i have/VBP/have to/TO/to insert/VB/insert has/VBZ/has to/TO/to be/VB/be between/IN/between next/JJ/next and/CC/and prev/NNP/prev. i/PRP/i create/VBP/create the/DT/the new/JJ/new node/NN/node and/CC/and i/PRP/i set/VBD/set its/PRP$/its previous/JJ/previous field/NN/field to/TO/to refer/VB/refer to/TO/to the/DT/the previous/JJ/previous node/NN/node and/CC/and i/PRP/i set/VBD/set its/PRP$/its next/JJ/next field/NN/field to/TO/to refer/VB/refer to/TO/to the/DT/the next/JJ/next node/NNP/node. dlnode/NN/dlnode next/IN/next =/NN/= nodeatrank/NN/nodeatrank /:/( rank/NN/rank /:/) ;/:/; dlnode/NN/dlnode prev/NN/prev =/:/= next.getprev/NN/next.getprev /:/( /:/) ;/:/; dlnode/NN/dlnode node/NN/node =/:/= new/JJ/new dlnode/NN/dlnode /:/( element/NN/element /,/, prev/NN/prev /,/, next/JJ/next /NN/) ;/:/; dlnode/NN/dlnode prev/NN/prev =/:/= next.getprev/NN/next.getprev /:/( /:/) ;/:/; this/DT/this was/VBD/was the/DT/the node/NN/node at/IN/at rank/NN/rank 1/CD/1 and/CC/and dlnode/NN/dlnode next/IN/next =/NN/= nodeatrank/NN/nodeatrank /:/( rank/NN/rank /:/) ;/:/; was/VBD/was the/DT/the node/NN/node earlier/JJR/earlier at/IN/at rank/NN/rank 2/CD/2. in/IN/in this/DT/this manner/NN/manner i/PRP/i create/VBP/create the/DT/the new/JJ/new node/NN/node at/IN/at the/DT/the appropriate/JJ/appropriate place/NN/place and/CC/and then/RB/then i/PRP/i also/RB/also need/VBP/need to/TO/to check/VB/check the/DT/the previous/JJ/previous and/CC/and next/JJ/next field/NN/field of/IN/of the/DT/the prev/NN/prev and/CC/and next/JJ/next node/NNP/node. that/IN/that is/VBZ/is what/WP/what i/PRP/i am/VBP/am doing/VBG/doing here/NNP/here. next.setprev/NNP/next.setprev /NNP/( node/NN/node /:/) ;/:/; prev.setnext/JJ/prev.setnext /NN/( node/NN/node /:/) ;/:/; size/NN/size +/:/+ +/:/+ ;/:/; do/VBP/do not/RB/not get/VB/get intimated/VBN/intimated by/IN/by this/DT/this code/NN/code /,/, it/PRP/it is/VBZ/is just/RB/just doing/VBG/doing what/WP/what is/VBZ/is shown/VBN/shown in/IN/in the/DT/the picture/NNP/picture. i/PRP/i am/VBP/am assuming/VBG/assuming the/DT/the existence/NN/existence of/IN/of this/DT/this procedure/NN/procedure dlnode/NN/dlnode next/IN/next =/NN/= nodeatrank/NN/nodeatrank /:/( rank/NN/rank /:/) in/IN/in which/WDT/which /,/, the/DT/the given/VBN/given rank/NN/rank will/MD/will tell/VB/tell me/PRP/me which/WDT/which is/VBZ/is the/DT/the node/NN/node at/IN/at that/DT/that rank/NN/rank in/IN/in the/DT/the original/JJ/original list/NNP/list. i/PRP/i will/MD/will show/VB/show you/PRP/you the/DT/the process/NN/process of/IN/of deletion/NNP/deletion. if/IN/if i/PRP/i have/VBP/have to/TO/to remove/VB/remove the/DT/the element/NN/element at/IN/at rank/NN/rank 3/CD/3 /,/, i/PRP/i will/MD/will first/RB/first find/VB/find out/RP/out the/DT/the node/NN/node which/WDT/which is/VBZ/is at/IN/at this/DT/this rank/NN/rank so/IN/so i/PRP/i get/VBP/get to/TO/to the/DT/the node/NN/node which/WDT/which is/VBZ/is selected/VBN/selected in/IN/in the/DT/the 2nd/JJ/2nd diagram/NN/diagram and/CC/and then/RB/then i/PRP/i have/VBP/have to/TO/to go/VB/go to/TO/to the/DT/the next/JJ/next node/NN/node /,/, go/VBP/go to/TO/to the/DT/the previous/JJ/previous node/NN/node and/CC/and update/VB/update their/PRP$/their next/JJ/next and/CC/and previous/JJ/previous pointers/NNP/pointers. thus/RB/thus the/DT/the pointer/NN/pointer will/MD/will point/VB/point to/TO/to the/DT/the next/JJ/next node/NN/node and/CC/and previous/JJ/previous node/NN/node and/CC/and in/IN/in this/DT/this manner/NN/manner i/PRP/i will/MD/will get/VB/get rid/JJ/rid of/IN/of that/DT/that node/NN/node and/CC/and at/IN/at the/DT/the end/NN/end i/PRP/i will/MD/will get/VB/get the/DT/the 3rd/JJ/3rd diagram/NN/diagram as/IN/as the/DT/the final/JJ/final node/NNP/node. similarly/RB/similarly i/PRP/i can/MD/can write/VB/write down/RP/down the/DT/the java/NN/java code/NN/code for/IN/for doing/VBG/doing this/NNP/this. once/RB/once again/RB/again i/PRP/i am/VBP/am assuming/VBG/assuming the/DT/the procedure/NN/procedure nodeatrank/NN/nodeatrank /,/, which/WDT/which tells/NNS/tells me/PRP/me about/IN/about the/DT/the node/NN/node which/WDT/which is/VBZ/is sitting/VBG/sitting at/IN/at that/DT/that rank/NNP/rank. how/WRB/how do/VBP/do i/PRP/i implement/VB/implement this/DT/this procedure/NN/procedure nodeatrank/NN/nodeatrank there/EX/there is/VBZ/is nothing/NN/nothing else/RB/else i/PRP/i can/MD/can do/VB/do except/IN/except that/DT/that i/PRP/i march/VBP/march to/TO/to the/DT/the list/NN/list and/CC/and keep/VB/keep incrementing/VBG/incrementing my/PRP$/my counter/NN/counter till/NN/till i/PRP/i reach/VBP/reach that/IN/that rank/NNP/rank. i/PRP/i have/VBP/have done/VBN/done essentially/RB/essentially that/IN/that except/IN/except a/DT/a small/JJ/small improvement/NN/improvement /,/, that/IN/that if/IN/if the/DT/the rank/NN/rank is/VBZ/is less/JJR/less than/IN/than the/DT/the number/NN/number of/IN/of the/DT/the size/NN/size of/IN/of the/DT/the list/NN/list by/IN/by 2/CD/2 /,/, then/RB/then i/PRP/i start/VBP/start from/IN/from the/DT/the header/NN/header and/CC/and if/IN/if it/PRP/it is/VBZ/is more/RBR/more than/IN/than size/NN/size by/IN/by 2/CD/2 i/PRP/i start/VBP/start from/IN/from the/DT/the tail/NNP/tail. just/RB/just to/TO/to small/JJ/small improvement/NN/improvement nothing/NN/nothing more/JJR/more you/PRP/you do/VBP/do such/JJ/such a/DT/a thing/NN/thing /,/, because/IN/because if/IN/if your/PRP$/your list/NN/list has/VBZ/has hundred/VBN/hundred elements/NNS/elements and/CC/and you/PRP/you are/VBP/are looking/VBG/looking for/IN/for the/DT/the element/NN/element at/IN/at rank/NN/rank 98/CD/98 /,/, then/RB/then there/EX/there is/VBZ/is no/DT/no point/NN/point to/TO/to start/VB/start from/IN/from the/DT/the header/NN/header it/PRP/it is/VBZ/is better/RBR/better to/TO/to start/VB/start from/IN/from the/DT/the tail/NNP/tail. that/IN/that is/VBZ/is as/IN/as far/RB/far as/IN/as the/DT/the vector/NN/vector abstract/NN/abstract data/NNS/data type/NN/type is/VBZ/is concerned/VBN/concerned except/IN/except that/DT/that when/WRB/when i/PRP/i say/VBP/say remove/JJ/remove the/DT/the element/NN/element at/IN/at a/DT/a particular/JJ/particular rank/NN/rank or/CC/or insert/NN/insert the/DT/the element/NN/element at/IN/at a/DT/a particular/JJ/particular rank/NNP/rank. as/IN/as you/PRP/you have/VBP/have seen/VBN/seen both/DT/both the/DT/the implementations/NNS/implementations we/PRP/we have/VBP/have a/DT/a problem/NNP/problem. whether/IN/whether we/PRP/we use/VBP/use an/DT/an array/NN/array or/CC/or a/DT/a list/NN/list to/TO/to do/VB/do that/DT/that implementation/NN/implementation /,/, we/PRP/we seem/VBP/seem to/TO/to require/VB/require order/NN/order n/NN/n time/NN/time in/IN/in the/DT/the worst/JJS/worst case/NN/case /,/, just/RB/just to/TO/to be/VB/be able/JJ/able to/TO/to find/VB/find out/RP/out where/WRB/where the/DT/the element/NN/element correspond/NN/correspond to/TO/to that/DT/that rank/NN/rank is/NNP/is. in/IN/in an/DT/an array/NN/array /,/, we/PRP/we know/VBP/know the/DT/the element/NN/element corresponding/VBG/corresponding to/TO/to that/DT/that rank/NN/rank is/VBZ/is and/CC/and we/PRP/we have/VBP/have to/TO/to move/VB/move the/DT/the elements/NNS/elements when/WRB/when we/PRP/we insert/VBP/insert or/CC/or delete/NNP/delete. linked/VBD/linked lists/NNS/lists are/VBP/are better/RBR/better in/IN/in supporting/NN/supporting node/NN/node based/VBN/based operations/NNP/operations. i/PRP/i have/VBP/have a/DT/a linked/VBN/linked list/NN/list and/CC/and i/PRP/i tell/VBP/tell you/PRP/you delete/VBP/delete this/DT/this node/NN/node /,/, if/IN/if it/PRP/it is/VBZ/is a/DT/a doubly/RB/doubly linked/VBN/linked list/NN/list you/PRP/you can/MD/can delete/VB/delete that/IN/that node/NN/node in/IN/in constant/NN/constant time/NNP/time. if/IN/if i/PRP/i say/VBP/say this/DT/this is/VBZ/is a/DT/a node/NN/node and/CC/and insert/NN/insert a/DT/a new/JJ/new node/NN/node after/IN/after this/DT/this node/NN/node i/PRP/i could/MD/could insert/VB/insert a/DT/a new/JJ/new node/NN/node after/IN/after that/DT/that node/NN/node in/IN/in constant/NN/constant time/NN/time or/CC/or if/IN/if i/PRP/i say/VBP/say delete/JJ/delete the/DT/the inserted/JJ/inserted node/NN/node before/IN/before this/DT/this node/NN/node /,/, again/RB/again i/PRP/i can/MD/can insert/VB/insert a/DT/a node/NN/node in/IN/in constant/NN/constant time/NNP/time. we/PRP/we have/VBP/have the/DT/the data/NNS/data structure/VBP/structure which/WDT/which is/VBZ/is very/RB/very efficient/JJ/efficient /,/, which/WDT/which can/MD/can do/VB/do constant/JJ/constant time/NN/time operations/NNS/operations provided/VBN/provided that/IN/that we/PRP/we give/VBP/give access/NN/access to/TO/to the/DT/the node/NNP/node. some/DT/some how/WRB/how i/PRP/i access/VBP/access the/DT/the particular/JJ/particular node/NN/node at/IN/at which/WDT/which we/PRP/we want/VBP/want to/TO/to insert/VB/insert or/CC/or delete/NNP/delete. that/IN/that is/VBZ/is what/WP/what mentioned/VBN/mentioned below/NNP/below. removeatnode/NN/removeatnode /:/( node/NN/node v/NN/v /:/) and/CC/and insertafternode/NN/insertafternode /:/( node/NN/node v/NN/v /,/, object/NN/object e/NN/e /:/) you/PRP/you can/MD/can remove/VB/remove at/IN/at a/DT/a node/NN/node or/CC/or you/PRP/you can/MD/can insert/VB/insert after/IN/after a/DT/a node/NN/node and/CC/and you/PRP/you can/MD/can insert/VB/insert before/IN/before a/DT/a node/NN/node all/DT/all in/IN/in constant/JJ/constant time/NNP/time. however/RB/however when/WRB/when i/PRP/i give/VBP/give you/PRP/you access/NN/access to/TO/to a/DT/a particular/JJ/particular node/NN/node then/RB/then in/IN/in some/DT/some sense/NN/sense /,/, i/PRP/i am/VBP/am also/RB/also telling/VBG/telling you/PRP/you how/WRB/how i/PRP/i have/VBP/have implemented/VBN/implemented my/PRP$/my list/NNP/list. whether/IN/whether it/PRP/it is/VBZ/is a/DT/a doubly/RB/doubly linked/VBN/linked list/NN/list or/CC/or a/DT/a singly/RB/singly linked/VBN/linked list/NN/list and/CC/and what/WP/what are/VBP/are the/DT/the pointers/NNS/pointers and/CC/and stuff/NN/stuff like/IN/like that/NNP/that. suppose/NN/suppose i/PRP/i want/VBP/want to/TO/to hide/VB/hide all/DT/all those/DT/those information/NN/information /,/, so/RB/so that/IN/that you/PRP/you can/MD/can still/RB/still use/VB/use node/NN/node based/VBN/based operation/NN/operation without/IN/without knowing/NN/knowing the/DT/the actual/JJ/actual implementation/NN/implementation of/IN/of how/WRB/how the/DT/the thing/NN/thing was/VBD/was done/NNP/done. so/RB/so one/CD/one can/MD/can have/VB/have different/JJ/different implementations/NNP/implementations. we/PRP/we are/VBP/are going/VBG/going to/TO/to do/VB/do this/DT/this using/VBG/using a/DT/a notion/NN/notion of/IN/of positions/NNP/positions. position/NN/position is/VBZ/is an/DT/an abstract/NN/abstract data/NNS/data type/NN/type which/WDT/which intuitively/RB/intuitively captures/VBZ/captures the/DT/the place/NN/place where/WRB/where a/DT/a certain/JJ/certain element/NN/element is/VBZ/is stored/NNP/stored. in/IN/in your/PRP$/your data/NNS/data structure/NN/structure /,/, there/EX/there is/VBZ/is only/RB/only one/CD/one method/NN/method which/WDT/which is/VBZ/is associated/VBN/associated with/IN/with the/DT/the position/NN/position and/CC/and is/VBZ/is the/DT/the method/NN/method element/NNP/element. given/NN/given an/DT/an object/NN/object of/IN/of this/DT/this data/NN/data type/NN/type position/NN/position /,/, i/PRP/i can/MD/can only/RB/only call/VB/call this/DT/this method/NN/method element/NN/element on/IN/on that/DT/that object/NN/object and/CC/and that/IN/that will/MD/will tell/VB/tell me/PRP/me about/IN/about the/DT/the element/NN/element which/WDT/which is/VBZ/is sitting/VBG/sitting at/IN/at that/DT/that particular/JJ/particular position/NNP/position. if/IN/if this/DT/this is/VBZ/is not/RB/not making/VBG/making much/RB/much sense/NN/sense /,/, then/RB/then think/VBP/think of/IN/of position/NN/position as/IN/as reference/NN/reference to/TO/to a/DT/a particular/JJ/particular node/NNP/node. think/NN/think of/IN/of it/PRP/it as/IN/as a/DT/a pointer/NN/pointer /,/, because/IN/because using/VBG/using that/IN/that pointer/JJR/pointer you/PRP/you can/MD/can access/VB/access the/DT/the element/NN/element which/WDT/which is/VBZ/is situated/VBN/situated in/IN/in the/DT/the node/NN/node and/CC/and nothing/NN/nothing else/NNP/else. you/PRP/you can/MD/can not/RB/not use/VB/use that/IN/that pointer/JJR/pointer to/TO/to update/VB/update the/DT/the next/JJ/next or/CC/or the/DT/the previous/JJ/previous fields/NNS/fields /,/, or/CC/or you/PRP/you do/VBP/do not/RB/not even/RB/even know/VB/know how/WRB/how the/DT/the node/NN/node is/VBZ/is implemented/NNP/implemented. you/PRP/you do/VBP/do not/RB/not need/VB/need to/TO/to know/VB/know whether/IN/whether the/DT/the implementer/NN/implementer has/VBZ/has used/VBN/used a/DT/a doubly/RB/doubly linked/VBN/linked list/NN/list or/CC/or singly/RB/singly linked/VBN/linked list/NN/list or/CC/or a/DT/a circular/JJ/circular list/NNP/list. it/PRP/it is/VBZ/is an/DT/an abstract/NN/abstract data/NNS/data type/NN/type which/WDT/which hides/VBZ/hides all/DT/all the/DT/the details/NNS/details and/CC/and you/PRP/you can/MD/can only/RB/only use/VB/use the/DT/the method/NN/method element/NN/element /:/( /:/) /,/, on/IN/on the/DT/the abstract/NN/abstract data/NNS/data type/NN/type position/NNP/position. with/IN/with the/DT/the notion/NN/notion of/IN/of position/NN/position /,/, there/EX/there will/MD/will be/VB/be a/DT/a relative/JJ/relative order/NN/order of/IN/of positions/NNS/positions jus/VBZ/jus as/RB/as in/IN/in the/DT/the case/NN/case of/IN/of a/DT/a linked/VBN/linked list/NNP/list. there/RB/there is/VBZ/is the/DT/the 1st/CD/1st element/NN/element in/IN/in your/PRP$/your linked/VBN/linked list/NN/list /,/, 2nd/CD/2nd element/NN/element and/CC/and the/DT/the position/NN/position is/VBZ/is referring/VBG/referring to/TO/to the/DT/the 1st/CD/1st element/NN/element or/CC/or the/DT/the 1st/CD/1st node/NN/node or/CC/or the/DT/the 2nd/CD/2nd node/NN/node or/CC/or the/DT/the 3rd/JJ/3rd node/NN/node of/IN/of the/DT/the list/NNP/list. similarly/RB/similarly 1st/CD/1st position/NN/position /,/, the/DT/the 2nd/JJ/2nd position/NN/position /,/, the/DT/the 3rd/JJ/3rd position/NN/position and/CC/and so/RB/so on/NNP/on. given/VBN/given a/DT/a position/NN/position that/WDT/that /,/, there/EX/there is/VBZ/is the/DT/the notion/NN/notion of/IN/of the/DT/the position/NN/position before/IN/before which/WDT/which refers/NNS/refers to/TO/to the/DT/the node/NN/node before/IN/before that/IN/that position/NN/position and/CC/and a/DT/a position/NN/position after/IN/after that/DT/that position/NNP/position. we/PRP/we can/MD/can now/RB/now define/VB/define a/DT/a list/NN/list abstract/NN/abstract datatype/NN/datatype which/WDT/which uses/NNS/uses the/DT/the positions/NNP/positions. what/WP/what would/MD/would this/DT/this abstract/NN/abstract datatype/NN/datatype have/VBP/have it/PRP/it would/MD/would have/VB/have generic/JJ/generic methods/NNS/methods like/IN/like size/NN/size /:/( /:/) and/CC/and isempty/NN/isempty /:/( /:/) and/CC/and it/PRP/it could/MD/could have/VB/have query/NN/query method/NN/method /,/, given/VBN/given a/DT/a particular/JJ/particular position/NN/position i/PRP/i can/MD/can have/VB/have a/DT/a method/NN/method which/WDT/which asks/VBZ/asks is/VBZ/is this/DT/this the/DT/the first/JJ/first position/NN/position of/IN/of my/PRP$/my list/NNP/list. if/IN/if it/PRP/it is/VBZ/is this/DT/this will/MD/will say/VB/say yes/NNS/yes and/CC/and otherwise/VB/otherwise say/NN/say no/DT/no and/CC/and whether/IN/whether it/PRP/it is/VBZ/is the/DT/the last/JJ/last position/NN/position of/IN/of the/DT/the list/NNP/list. i/PRP/i can/MD/can have/VB/have excessive/JJ/excessive methods/NNS/methods like/IN/like first/JJ/first /CD/( /CD/) /,/, last/JJ/last /NN/( /:/) /,/, before/IN/before /NNP/( p/NN/p /:/) and/CC/and after/IN/after /CD/( p/NN/p /:/) /./. first/JJ/first will/MD/will give/VB/give me/PRP/me the/DT/the first/JJ/first position/NN/position /,/, last/JJ/last would/MD/would give/VB/give me/PRP/me the/DT/the last/JJ/last position/NN/position /,/, before/IN/before /NNP/( p/NN/p /:/) will/MD/will give/VB/give me/PRP/me the/DT/the position/NN/position before/IN/before this/DT/this position/NN/position p/NN/p and/CC/and after/IN/after will/MD/will give/VB/give me/PRP/me after/IN/after this/DT/this position/NN/position p/NNP/p. i/PRP/i can/MD/can have/VB/have update/JJ/update methods/NNS/methods like/IN/like swapelements/NNS/swapelements /VBP/( p/NN/p /,/, q/NN/q /:/) /./. what/WP/what does/VBZ/does this/DT/this do/VB/do given/VBN/given a/DT/a positions/NNS/positions p/VBP/p and/CC/and q/NN/q /,/, it/PRP/it swaps/VBZ/swaps the/DT/the contents/NNS/contents of/IN/of these/DT/these positions/NNP/positions. whatever/NN/whatever may/MD/may be/VB/be the/DT/the elements/NNS/elements sitting/VBG/sitting at/IN/at these/DT/these 2/CD/2 positions/NNS/positions it/PRP/it swaps/VBZ/swaps the/DT/the contents/NNP/contents. i/PRP/i can/MD/can replace/VB/replace the/DT/the element/NN/element at/IN/at position/NN/position p/NN/p with/IN/with e/NN/e /:/( replaceelement/NN/replaceelement /:/( p/NN/p /,/, e/NN/e /:/) /:/) and/CC/and similarly/RB/similarly i/PRP/i can/MD/can insert/VB/insert the/DT/the element/NN/element e/NN/e /:/( insertfirst/JJ/insertfirst /NN/( e/NN/e /:/) /:/) at/IN/at the/DT/the very/RB/very first/JJ/first position/NNP/position. i/PRP/i can/MD/can insert/VB/insert the/DT/the element/NN/element e/NN/e /:/( insertlast/NN/insertlast /:/( e/NN/e /:/) /:/) at/IN/at the/DT/the last/JJ/last position/NN/position and/CC/and so/RB/so on/NNP/on. using/VBG/using a/DT/a doubly/RB/doubly linked/VBN/linked list/NN/list you/PRP/you can/MD/can actually/RB/actually implement/VB/implement all/DT/all of/IN/of these/DT/these methods/NNS/methods in/IN/in constant/JJ/constant time/NNP/time. the/DT/the list/NN/list abstract/NN/abstract datatype/NN/datatype is/VBZ/is just/RB/just as/IN/as the/DT/the same/JJ/same as/IN/as your/PRP$/your linked/VBN/linked list/NN/list data/NNS/data structure/NN/structure except/IN/except that/DT/that we/PRP/we are/VBP/are getting/VBG/getting an/DT/an abstract/NN/abstract datatype/NN/datatype implementation/NN/implementation of/IN/of it/NNP/it. we/PRP/we are/VBP/are trying/VBG/trying to/TO/to capture/VB/capture all/DT/all of/IN/of those/DT/those methods/NNS/methods that/IN/that you/PRP/you can/MD/can do/VB/do on/IN/on a/DT/a linked/VBN/linked list/NN/list as/IN/as an/DT/an abstract/NN/abstract datatype/NNP/datatype. this/DT/this datatype/NN/datatype can/MD/can be/VB/be implemented/VBN/implemented using/VBG/using a/DT/a double/JJ/double linked/VBN/linked list/NN/list and/CC/and it/PRP/it can/MD/can be/VB/be implemented/VBN/implemented using/VBG/using a/DT/a singly/RB/singly linked/VBN/linked list/NN/list except/IN/except that/DT/that it/PRP/it is/VBZ/is more/RBR/more efficient/JJ/efficient if/IN/if you/PRP/you implement/VBP/implement it/PRP/it using/VBG/using a/DT/a doubly/RB/doubly linked/VBN/linked list/NNP/list. in/IN/in the/DT/the doubly/RB/doubly linked/VBN/linked list/NN/list all/DT/all of/IN/of these/DT/these methods/NNS/methods can/MD/can be/VB/be done/VBN/done at/IN/at a/DT/a constant/JJ/constant time/NNP/time. using/NN/using a/DT/a singly/RB/singly linked/VBN/linked list/NN/list some/DT/some of/IN/of these/DT/these methods/NNS/methods might/MD/might take/VB/take linear/JJ/linear time/NN/time in/IN/in the/DT/the worst/JJS/worst case/NNP/case. finally/RB/finally we/PRP/we have/VBP/have the/DT/the notion/NN/notion of/IN/of a/DT/a sequence/NN/sequence abstract/NN/abstract data/NNS/data type/NNP/type. we/PRP/we talked/VBD/talked of/IN/of the/DT/the vector/NN/vector abstract/NN/abstract data/NNS/data type/NN/type where/WRB/where there/EX/there is/VBZ/is a/DT/a notion/NN/notion of/IN/of rank/NN/rank associated/VBN/associated with/IN/with each/DT/each element/NNP/element. then/RB/then there/RB/there is/VBZ/is a/DT/a list/NN/list data/NN/data type/NN/type where/WRB/where there/EX/there is/VBZ/is a/DT/a notion/NN/notion of/IN/of positions/NNS/positions and/CC/and the/DT/the sequence/NN/sequence abstract/NN/abstract data/NNS/data type/NN/type has/VBZ/has both/DT/both of/IN/of these/NNP/these. it/PRP/it combines/VBZ/combines the/DT/the vector/NN/vector and/CC/and the/DT/the list/NN/list abstract/NN/abstract data/NNS/data type/NN/type and/CC/and it/PRP/it inherits/VBZ/inherits both/DT/both of/IN/of these/DT/these interfaces/NNS/interfaces and/CC/and that/IN/that is/VBZ/is multiple/JJ/multiple inheritance/NNP/inheritance. besides/VBZ/besides the/DT/the methods/NNS/methods that/WDT/that are/VBP/are listed/VBN/listed for/IN/for vector/NN/vector and/CC/and list/NN/list abstract/NN/abstract data/NNS/data type/NN/type /,/, it/PRP/it has/VBZ/has two/CD/two additional/JJ/additional methods/NNS/methods which/WDT/which helps/NNS/helps you/PRP/you to/TO/to go/VB/go from/IN/from one/CD/one to/TO/to other/NNP/other. given/RB/given a/DT/a particular/JJ/particular rank/NN/rank r/NN/r /,/, the/DT/the method/NN/method atrank/NN/atrank /:/( r/NN/r /:/) will/MD/will return/VB/return me/PRP/me the/DT/the position/NN/position corresponding/VBG/corresponding to/TO/to this/DT/this rank/NNP/rank. given/NN/given a/DT/a position/NN/position p/NN/p the/DT/the method/NN/method rankof/IN/rankof /CD/( p/NN/p /:/) will/MD/will tell/VB/tell me/PRP/me the/DT/the rank/NN/rank corresponding/VBG/corresponding to/TO/to this/DT/this position/NNP/position. you/PRP/you could/MD/could have/VB/have an/DT/an implementation/NN/implementation of/IN/of the/DT/the kind/NN/kind which/WDT/which was/VBD/was given/VBN/given in/IN/in the/DT/the slide/NN/slide for/IN/for a/DT/a sequence/NNP/sequence. in/IN/in the/DT/the above/NN/above slide/NN/slide /,/, given/VBN/given an/DT/an array/NN/array in/IN/in which/WDT/which each/DT/each element/NN/element of/IN/of the/DT/the array/NN/array refers/NNS/refers to/TO/to the/DT/the position/NN/position and/CC/and the/DT/the point/NN/point 2/CD/2 is/VBZ/is same/JJ/same in/IN/in both/DT/both the/DT/the cases/NNP/cases. with/IN/with the/DT/the given/VBN/given particular/JJ/particular location/NN/location /,/, i/PRP/i can/MD/can identify/VB/identify the/DT/the rank/NN/rank which/WDT/which it/PRP/it corresponds/VBZ/corresponds to/TO/to by/IN/by looking/NN/looking at/IN/at the/DT/the element/NNP/element. how/WRB/how is/VBZ/is the/DT/the method/NN/method rankof/IN/rankof /CD/( p/NN/p /:/) implemented/VBN/implemented p/NN/p corresponds/NNS/corresponds to/TO/to a/DT/a position/NN/position /,/, a/DT/a position/NN/position here/RB/here is/VBZ/is the/DT/the thing/NN/thing which/WDT/which is/VBZ/is given/VBN/given in/IN/in the/DT/the middle/NN/middle of/IN/of the/DT/the diagram/NNP/diagram. given/NN/given a/DT/a particular/JJ/particular position/NN/position and/CC/and how/WRB/how do/VBP/do i/PRP/i know/VB/know the/DT/the rank/NN/rank corresponding/VBG/corresponding to/TO/to that/DT/that position/NNP/position. i/PRP/i just/RB/just look/VBP/look in/IN/in to/TO/to the/DT/the 3rd/JJ/3rd element/NN/element that/WDT/that gives/VBZ/gives me/PRP/me the/DT/the rank/NN/rank corresponding/VBG/corresponding to/TO/to that/DT/that position/NNP/position. given/RB/given a/DT/a particular/JJ/particular rank/NN/rank how/WRB/how do/VBP/do i/PRP/i determine/VB/determine the/DT/the position/NN/position corresponding/VBG/corresponding to/TO/to that/DT/that rank/NNP/rank. suppose/NN/suppose you/PRP/you gave/VBD/gave me/PRP/me rank/VBP/rank 1/CD/1 /,/, when/WRB/when i/PRP/i follow/VBP/follow 1st/JJ/1st reference/NN/reference /,/, 1/CD/1 is/VBZ/is the/DT/the position/NN/position corresponding/VBG/corresponding to/TO/to this/DT/this rank/NNP/rank. at/IN/at that/DT/that position/NN/position there/EX/there is/VBZ/is an/DT/an element/NN/element stored/VBD/stored which/WDT/which is/VBZ/is newyork/NNP/newyork. at/IN/at the/DT/the position/NN/position besides/VBZ/besides the/DT/the element/NN/element /,/, there/EX/there is/VBZ/is something/NN/something else/RB/else stored/VBD/stored which/WDT/which is/VBZ/is kind/VBP/kind of/IN/of provides/NNS/provides cross/IN/cross reference/NNP/reference. at/IN/at each/DT/each of/IN/of these/DT/these positions/NNS/positions i/PRP/i have/VBP/have an/DT/an element/NN/element stored/VBD/stored and/CC/and a/DT/a rank/NN/rank of/IN/of that/DT/that element/NN/element in/IN/in my/PRP$/my sequence/NNP/sequence. suppose/NN/suppose i/PRP/i had/VBD/had to/TO/to insert/VB/insert an/DT/an element/NN/element at/IN/at rank/NN/rank 2/CD/2 /,/, i/PRP/i am/VBP/am going/VBG/going to/TO/to create/VB/create new/JJ/new position/NN/position and/CC/and the/DT/the element/NN/element would/MD/would sit/VB/sit in/IN/in that/DT/that position/NN/position and/CC/and 2/CD/2 would/MD/would refer/VB/refer to/TO/to that/DT/that position/NN/position and/CC/and all/DT/all of/IN/of these/DT/these will/MD/will have/VB/have to/TO/to move/VB/move to/TO/to one/CD/one step/VB/step right/NNP/right. not/RB/not only/RB/only have/VBP/have to/TO/to move/VB/move to/TO/to the/DT/the right/NN/right /,/, we/PRP/we have/VBP/have to/TO/to change/VB/change the/DT/the ranks/NNS/ranks and/CC/and update/VB/update the/DT/the position/NNP/position. again/RB/again inserting/VBG/inserting at/IN/at the/DT/the particular/JJ/particular rank/NN/rank will/MD/will take/VB/take order/NN/order n/NN/n time/NN/time of/IN/of the/DT/the worst/JJS/worst case/NN/case and/CC/and similarly/RB/similarly deleting/VBG/deleting an/DT/an element/NNP/element. if/IN/if i/PRP/i had/VBD/had given/VBN/given particular/JJ/particular position/NN/position and/CC/and if/IN/if i/PRP/i wanted/VBD/wanted to/TO/to delete/VB/delete the/DT/the element/NN/element at/IN/at that/DT/that position/NNP/position. how/WRB/how do/VBP/do we/PRP/we delete/VB/delete an/DT/an element/NN/element at/IN/at a/DT/a certain/JJ/certain position/NN/position in/IN/in the/DT/the case/NN/case of/IN/of a/DT/a doubly/RB/doubly linked/VBN/linked list/NN/list you/PRP/you need/VBP/need to/TO/to think/VB/think about/IN/about this/NNP/this. so/RB/so leave/VBP/leave it/PRP/it as/IN/as an/DT/an exercise/NNP/exercise. this/DT/this is/VBZ/is a/DT/a comparison/NN/comparison of/IN/of sequence/NN/sequence operations/NNS/operations /,/, you/PRP/you can/MD/can implement/VB/implement a/DT/a sequence/NN/sequence using/VBG/using an/DT/an array/NN/array in/IN/in the/DT/the picture/NN/picture i/PRP/i have/VBP/have shown/VBN/shown you/PRP/you previously/RB/previously and/CC/and you/PRP/you can/MD/can also/RB/also implement/VB/implement a/DT/a sequence/NN/sequence using/VBG/using a/DT/a doubly/RB/doubly linked/VBN/linked list/NNP/list. this/DT/this would/MD/would be/VB/be the/DT/the worst/JJS/worst case/NN/case of/IN/of running/VBG/running time/NNP/time. you/PRP/you can/MD/can see/VB/see in/IN/in the/DT/the case/NN/case of/IN/of an/DT/an array/NN/array implementation/NN/implementation /,/, if/IN/if you/PRP/you want/VBP/want to/TO/to insert/VB/insert an/DT/an element/NN/element at/IN/at a/DT/a certain/JJ/certain rank/NN/rank or/CC/or you/PRP/you want/VBP/want to/TO/to remove/VB/remove an/DT/an element/NN/element at/IN/at a/DT/a certain/JJ/certain rank/NNP/rank. it/PRP/it will/MD/will take/VB/take order/NN/order n/NN/n time/NNP/time. if/IN/if you/PRP/you want/VBP/want to/TO/to insert/VB/insert after/IN/after or/CC/or insert/NN/insert before/IN/before a/DT/a certain/JJ/certain position/NN/position /,/, this/DT/this will/MD/will also/RB/also take/VB/take order/NN/order n/NN/n time/NN/time and/CC/and if/IN/if you/PRP/you need/VBP/need to/TO/to remove/VB/remove an/DT/an element/NN/element at/IN/at a/DT/a certain/JJ/certain position/NN/position /,/, this/DT/this will/MD/will also/RB/also take/VB/take order/NN/order n/NN/n time/NNP/time. not/RB/not so/RB/so in/IN/in the/DT/the case/NN/case of/IN/of a/DT/a doubly/RB/doubly linked/VBN/linked list/NN/list because/IN/because then/RB/then you/PRP/you can/MD/can just/RB/just zap/VB/zap out/RP/out the/DT/the element/NN/element from/IN/from there/NNP/there. you/PRP/you can/MD/can just/RB/just update/VB/update the/DT/the pointers/NNS/pointers before/IN/before and/CC/and after/IN/after and/CC/and do/VBP/do these/DT/these in/IN/in constant/JJ/constant time/NNP/time. but/CC/but then/RB/then what/WP/what becomes/VBZ/becomes more/JJR/more expensive/JJ/expensive is/VBZ/is /,/, because/IN/because in/IN/in a/DT/a doubly/RB/doubly linked/VBN/linked list/NN/list you/PRP/you can/MD/can not/RB/not figure/VB/figure out/RP/out the/DT/the rank/NN/rank of/IN/of an/DT/an element/NNP/element. i/PRP/i have/VBP/have to/TO/to go/VB/go to/TO/to the/DT/the entire/JJ/entire list/NN/list to/TO/to figure/VB/figure out/RP/out the/DT/the rank/NNP/rank. any/DT/any rank/NN/rank based/VBN/based operation/NN/operation will/MD/will take/VB/take order/NN/order n/NN/n time/NN/time /,/, whether/IN/whether you/PRP/you want/VBP/want to/TO/to find/VB/find the/DT/the rank/NN/rank of/IN/of n/NN/n element/NN/element or/CC/or you/PRP/you want/VBP/want to/TO/to find/VB/find out/RP/out the/DT/the element/NN/element at/IN/at a/DT/a particular/JJ/particular rank/NN/rank /,/, find/VBP/find out/RP/out the/DT/the position/NN/position corresponding/VBG/corresponding to/TO/to certain/JJ/certain rank/NN/rank /,/, all/DT/all of/IN/of these/DT/these would/MD/would take/VB/take order/NN/order n/NN/n time/NNP/time. we/PRP/we learnt/VBP/learnt about/IN/about queues/NNS/queues /,/, double/JJ/double ended/VBD/ended queues/NNS/queues and/CC/and also/RB/also how/WRB/how to/TO/to use/VB/use linked/VBN/linked list/NN/list and/CC/and doubly/RB/doubly linked/VBN/linked list/NN/list to/TO/to implement/VB/implement the/DT/the these/DT/these data/NNS/data types/NNP/types. then/RB/then we/PRP/we also/RB/also looked/VBD/looked at/IN/at the/DT/the vector/NN/vector abstract/NN/abstract data/NNS/data type/NN/type /,/, the/DT/the list/NN/list abstract/NN/abstract data/NNS/data type/NN/type which/WDT/which is/VBZ/is essentially/RB/essentially a/DT/a concretization/NN/concretization of/IN/of the/DT/the linked/VBN/linked list/NN/list data/NNS/data structure/NN/structure and/CC/and we/PRP/we also/RB/also looked/VBD/looked at/IN/at sequence/NN/sequence data/NNS/data types/NNS/types which/WDT/which is/VBZ/is basically/RB/basically inheriting/VBG/inheriting all/DT/all the/DT/the methods/NNS/methods of/IN/of your/PRP$/your list/NN/list data/NNS/data type/NN/type and/CC/and your/PRP$/your vector/NN/vector data/NNS/data type/NNP/type. 