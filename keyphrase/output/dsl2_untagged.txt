data structures and algorithms dr naveen garg department of computer science and engineering indian institute of technology  delhi lecture 2 stacks let us see about stacks we will mainly see about stacks  besides we will talk about abstract data types  interfaces  exceptions  how stacks are implemented in java and application to the analysis of time series we will also talk about growable stacks  which do a little bit of amortized analysis and then we will talk about stacks in java virtual machine what is an abstract data type it is basically a specification of the instances and the set of axioms that define the semantics of the operations on those instances what does it all mean you know the data types like integer  real numbers and so on you can understand the notion of addition and that is the same way as you add 2 integers in mathematics similarly we will define data types and certain operations on those data types those operations would be defined through an interface which basically gives us the signature of the operation that is the parameters that operation requires and so on we will also specify the results of those operations through a set of axioms just as in the case of integers  you know the sum of 2 integers as defined in mathematics for example if you add a variable of type a and another variable of type b if you sum them up  then the answer will be of type variable as you would know it from your mathematics class we will be clear if we see an example the operations that you have been talking about are essentially of three kinds one would be just a constructor operation which is as same as the constructor method in java using this method you can create an instance of that particular data type when you are talking about sophisticated data types  this method has to do a lot of work access functions are the functions which let us to access elements of the data type and manipulation procedure would let us to manipulate or modify the data type why are we talking about data types data types help us to identify the requirements for the building blocks of our algorithmic procedure it provides a language which will help us to talk at a higher level of abstraction as just as we are talking in terms of adding up of integers or in terms of stacks or queues or any of the advanced data type they encapsulate the data structure like how the data is organized and the algorithms that work on that data structures also they help us to separate the issues of correctness and efficiency we will see more of this as we see the example of data types let me start by giving a simple example of the data type and that is a dynamic set a set is defined as a collection of objects suppose we also had operations  which would let us modify that collection of objects  which means add or remove an object of that collection such a set we would call it as a dynamic set  refer slide time  4  47  we call it as dynamic  because we are changing the set which is the collection of objects we will create data types for such dynamic sets what are the kinds of methods that you have in a dynamic set you would have a method to create a dynamic set  which would be a method new there would be a method insert  to insert an element in to a dynamic set s is the dynamic set and this method has two parameters let us say  the set s and the element the result is an instance of the set itself which gives a new set  another set and also includes the element v in it similarly the delete method removes the element v from the set s these are the two methods for updating the set new method is for creating or constructing the set and isin is one of the access methods all of it is telling us whether the element is in the set or not the return value is of type boolean if v is in the set then it is true otherwise false axioms are the one which define how the operations should behave we can write axioms in the following form when i create a new set and if the set is empty then the answer should be always false  no matter what v is if i have a dynamic set s and i insert an element v in it then the resulting set which has v in it should be true.if i have a set s and when i insert u in it  then the resulting set has u in it then if i where to ask whether v is in the resulting set  i will know that only if v was in the previous set s thus the answer to this operation isin  delete  s  u   v   should be the same as the answer to this operation isin  s  v   provided v is different from u isin  delete  s  u   v  = isin  s  v   if v u suppose i have a set s and i delete v from it if i ask whether v is in the resulting set  then the answer should be false these are some basic axioms that define the nature of these operations and also the functionality of these operations still we did not specify how to do these operations or we did not talk about an algorithm or any procedure at the least we have talked about the code for implementing the dynamic set when you are talking about abstract data types  we are interested in more of the specification that is what the instances would be like and what are the operations permitted on those instances  and the axioms that govern those operations  refer slide time  6  46  some simple abstract data type that you may be familiar with is queue  but we will be doing it later let us see about stacks  refer slide time  8  52  what is the stack it is the collection of elements but this collection follows the last-infirst-out principle what does it mean it means that the element which is inserted last would be removed first if i insert an element and then i remove an element from this collection then the element that would be removed was the one which was inserted at the last the operation of inserting an element is called pushing onto the stack and the operation of removing an element is called popping off the stack  refer slide time  9  10  some of you might have seen this kind of toys it has a collection of elements for instance may be stack of trays in your mess what you do is when you put a tray  you put it on the top and when you remove it you would always remove the one which is at the top when you remove or pop of an element  it is always the one which you inserted at the last we are going to define the abstract data type that is supported by four methods which are the key methods the new is a method to create a stack in the push method when i specify an element o it adds this element to the abstract data type it inserts an object o on to the top of the stack  refer slide time  9  52  pop takes stack as the parameter and it does not take any parameter other than abstract data type when i say pop the stack  it just removes the top element from the stack if the stack is empty  they should flag an error stating that the stack is empty the top operation returns the top element  it does not remove it and that is how it differs from the pop pop operation removes that element but the top tell us only about the top element again if the stack is empty then top does not make any sense  it should flag an error  refer slide time  10  22  we can also have some support methods which will help us do these operations size is one such method size tells us about how many elements are there in the stack and isempty tell us whether the stack is empty or not the 6 methods that we saw are push  pop  new  top  size and isempty these are all the methods and hope you all understood about what these methods are doing  refer slide time  11  34  axiom governs the behavior of these methods if s is the stack  when i push an element on to s and then when i pop it  i should get back s while doing a top operation  when i push an element on to a stack and then when i do a top operation i should get v  because v would be the top element of the stack so far we have defined about the stack abstract data type  the methods and 2 axioms axioms may not be complete but this is what the axioms would look like how do we translate abstract data type into code we need 2 constructs for that and they are the interfaces and exceptions what is an interface an interface is a way to declare about what a class has to do and what are the various methods associated with the class it does not tell us about how those methods are done that would be a part of the implementation of that interface or a class for an interface we just right down the various names of the methods and the parameters it is going to take in fact we do not even specify the names of parameter  we just have to specify the types of the parameter when we write a class for an interface  we will actually provide the code for those various methods i might specify an interface for a stack and i am going to ask you to write the classes for that interface different people will write different classes to implement the interface in a completely different ways i can still use your classes or any implementation of the interface  in a program that i have written  provided that must meet the interface specification which i have given to you all i need to know is that the implementation meets the specification so that i can use that in the coding of my own program it helps us to separate the implementation from the specification and that is why it is a very useful programming technique let us see about how a stack implementation looks like in java java has a built-in stack data structure but nevertheless we will define a stack interface we just define the various methods that are going to be a part of this interface there is one method called size  in which i need to specify the types of the parameters and the return type of the method i have not specified how these methods are implemented this is just an interface in an interface we need to know the types of the parameter when i am pushing  it takes a parameter of type object object is the generic type in java and all objects are derived from this type the method isempty returns boolean it just tells us whether the stack is empty or not the top gives you the top element in the stack and it returns an object it throws stackemptyexception  if this stack is empty then top   method should somehow signal that the stack is empty we are going to do that using the notion of exceptions void means it does not return any object or any value it does not return a stack but it is a method which is executed on this stack and it modifies the stack thus stack can not be considered as a parameter what is an exception exceptions are the mechanisms to handle errors when we have an error or when we reach some exceptional condition or an exceptional case in the execution of program  we throw an exception the term used in java is throw  refer slide time  18  07  as soon as an exception is thrown  the flow of control moves from the current method to the point where the method was called the idea essentially is that  when an exception occurs you delegate the responsibility of handling that exceptional case  to the procedure which called that particular method you will be clear  if you see an example i have two methods  one is an eat pizza method which throws a stomachache exception  also there is some dotted code if you eat too much of pizza  then there is a problem and you throw stomachacheexception the procedure public void eatpizza   throws was called in the method eatpizza    which is inside the stimulate meeting procedure when this stomachacheexception is thrown  the flow of control will come to ta.eatpizza    thus when this stomachacheexception is thrown  we will exist this method eatpizza   and go to ta.eatpizza    in the coding after   there are bunches of other statements that would not be executed the flow of control would interrupt the dotted point and would reach ta.eatpizza    there is also a notion of try and catch blocks when the exception is thrown what happens to the variable that we have modified it depends upon the procedure call  think as if we are returning from this procedure stomachacheexception or a method if those are local variables then you do not want to see them if they are global variables and if it is modified in the if-loop  then those modifications are carried over to the ta.eatpizza   method there is something called as a try and a catch block if you think that there could be possible exception in this  ta.eatpizza    method  then you enclose the method within a try block start it with a try  open a bracket  and then include the method which you are calling and close it with a bracket if there was no exception raised in ta.eatpizza   method or this particular exception stomachacheexception did not get raised in this method  then we will just skip the catch block  then go on to the statement  after the catch block if an exception was raised in this  ta.eatpizza    method  because this method might raise many exceptions if this  stomachacheexception  exception was raised in the method  then we would come in to the catch block and execute the statements if the method raises an exception  then if that exception is caught through a catch block  then we would execute the statements which are written inside the catch block any kind of statements can be written inside the catch block  not necessarily system.out.exception what would happen  if i did not write the catch block this procedure simulate meeting  would throw the exception to the point from where its parent procedure was called when stomachacheexception throws an exception  the ta.eatpizza   method would also throw an exception  then the control will go to procedure from where simulate meeting is called it is fine if it catches the exception at that point  if not it will throw an exception to the high level procedure and finally your procedure will stop with your exception appearing at your console in this manner it is getting propagated all the way up to  where your procedure stops and the exception is shown to the user system.out.println is just the method to print the statement an exception is really a java class in which i am creating an object or an instance for this class then i am initializing that instance with any parameter and i can specify some set of parameters in the statement given below stomachacheexception  ouch  ; stomachacheexception itself is a class and for this class  i am creating an object by making a call to the statement stomachacheexception  ouch  ; when the catch statement is caught  e in that statement would get assigned to the object that is created by stomachacheexception  ouch  statement the try and catch block would come together if the method were not enclosed between try and catch  then the exception would just get propagate upwards in the procedural hierarchy stomachacheexception would throw an exception and the calling procedure of simulate meeting would throw an exception  till it is caught at some point if not it reaches the console what does the name of the class followed by brackets and some parameters written would signify in java for example  stomachacheexception  ouch  ; in java it signifies  that you are creating an object for this class and you are invoking the constructor method with ouch as the parameters the try and catch block are a method for listening exceptions and catching them as i mentioned before  a catch block can contain anything it does not mean that it should have only system.out.println  it can also throw an exception in turn it also helps us to exit from the program when an exception occurs if you throw an exception in any method  then you need to add a throws class next to the method name when we wrote the method eatpizza   we had  throws stomachacheexception a method can throw more than one exception in java everything is really an object stomachacheexception is the name of the class public class stomachacheexception extends and the statement given below is the constructor method for the class thus the name of the constructor method is the same as the class name public stomachacheexception  string err  the constructor method takes a single parameter  which is a string super means that it is calling the super class with the same parameter.again as i mentioned before  if you never catch an exception it will propagate upwards  along with the chain of method calls  till it reaches the console since the stomach ache exception is extending a run time exception  it will call the constructor method for the run time exception if a particular method throws more than one exception  then you will have to specify all those exceptions which it throws  next to the method name even in the try block you can have many catch statements first we can catch one particular exception followed by some other exception and so on look at your java book for more details let us look at the stacks we had created the interface for our stack we are going to implement the methods and there are many ways of implementing a stack first we are going to implement using an array let us say the maximum size of our stack is n and i am going to have an array of n elements of the stack i am going to have a variable t  which will tell about the location of the top element of the stack the variable t gives the index of the top element in the array s the first element will be at location 0 and then when i push another element it will move to the next location and so on  refer slide time  29  43  i have actually listed out an entire implementation for our stack interface my implementation is called array stack because i am using an array to implement the stack the statement mentioned below says that i am implementing the stack interface public class arraystack implements stack implement stack means  it is implementing the stack interface that we provided i have set with a default capacity for the stack which is 1024  otherwise the capacity of the stack would be in the variable n final is just specifying that the value of capacity is always a constant and it can never be changed  refer slide time  30  48  s is an array which is going to hold the elements of the stack thus s is an array of object and t is the index of the top element initially t = -1  because there is nothing inside the t t = 0 means the top element is in the location 0 and when the stack is empty t = -1 public arraystack   public arraystack  int cap  the above two statements are the constructor methods if you do not specify anything or if you just call the array stack without any parameters  then i am going to create a stack whose capacity is 1024 if you call array stack with some number let us say 37  then i am going to create a stack of size 37 what should size do size should just return how many elements are there in my stack if t is the index of the top element  then t + 1 elements are there because we just started from zero the stack is empty if t = -1 that is t 