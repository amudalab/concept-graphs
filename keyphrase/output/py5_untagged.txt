csc 108h  introduction to computer programming summer 2011 marek janicki june 9 2011 administration just to be clear  it 's okay to ask questions about the assignment at office hours  even if it 's in the last 24 hours assignment 2 will come out over the weekend  and the deadline will be moved to the 27th  office hours will be held monday instead of tuesday that week the midterm will be held june 30th at the regular lecture time and regular lecture room june 9 2011 administration there is a request for a volunteer note-taker there is a student in this class who requires a volunteer notetaker as an accommodation for a disability by signing up and posting your notes  you can make a significant difference for this individual 's capacity to fully participate in this course go to  http  //www.studentlife.utoronto.ca/accessibility/pcourselist.aspx or come in person to accessibility services 215 huron st suite 939 many students notice the quality of their notetaking improves through volunteering you will also receive a certificate of recognition june 9 2011 immutable objects so far all we 've seen are immutable objects that is objects do n't change instead of making an old int into a new one  we make a new int  and throw the old one away june 9 2011 immutable objects what if we want to change an immutable object it 's a lot of work  we need to make a new object that is identical to the old one except for our changes this is fine for small things like ints and strings  but takes a lot of time for large things like images june 9 2011 mutable objects if we want to change a really large object without keeping the original  then making a big copy  modifying it and tossing the rest is wasteful instead  we can use a mutable object  that we 're allowed to change this also allows us to define functions that change objects  rather than return new ones june 9 2011 aliasing consider  x = 10 y = x x = 5 print x  y we know this will print 5 10 to the screen  because ints are immutable june 9 2011 aliasing let pic be an already initialised picture and consider  x = pic y = x # sets the green to 0 for pixel in x  media.set_green  pixel,0  media.show  y  pics are mutable  so this will show a picture with no green june 9 2011 aliasing and functions when one calls a function  one is effectively beginning with a bunch of assignment statements that is  the parameters are assigned to the local variables but with mutable objects  these assignment statements mean that the local variable refers to a mutable object that it can change this is why functions can change mutable objects  but not immutable ones june 9 2011 break  the first june 9 2011 lists recall from the assignment that you had to refer to each co-ordinate by a variable this is annoying  and can easily be really slow in high-dimensional spaces python has a way of grouping similar items called a list denoted by  list_name =  list_elt0  list_elt1    list_eltn  june 9 2011 lists to get to the i-th element of a list we use  list_name  i-1  we use i-1 because lists are indexed from 0 this means to refer to the elements of a 4 element list named list_name we use list_name  0   list_name  1   list_name  2   list_name  3  lists are mutable june 9 2011 lists you can also have an empty list     you can index into lists from the back list_name  -i  returns the ith element from the back lists are heterogeneous  that is  the elements in a list need not be the same type  can have ints and strings can even have lists themselves june 9 2011 lists  functions lists come with lots of useful functions and methods len  list_name   as with strings  returns the length of the list min  list_name  and max  list_name  return the min and max so long as the list is well defined sum  list_name  returns the sum of elements so long as they 're numbered not defined for lists of strings june 9 2011 lists  methods append  value  – adds the value to the end of the list sort    sorts the list so long as this is well defined  need consistent notions of > and = =  insert  index  value  – inserts the element value at the index specified remove  value  – removes the first instance of value count  value  – counts the number of instances of value in the list june 9 2011 looping over lists often we want to do a similar operation to every element of the list python allows us to do this using for loops for item in list  block this is equivalent to  item = list  0  block item = list  1  block  june 9 2011 looping over lists loops can be tricky with immutable objects for item in list  block here  item is immutable  so we ca n't alter the list elements if we want to alter the list elements  we need to refer to the indices of the list june 9 2011 looping over lists to do that  we use the range   function range  i  returns an ordered list of ints ranging from 0 to i-1 range  i,j  returns an ordered list of ints ranging from i to j-1 inclusive range  i,j,k  returns a list of ints ranging from i to j-1 with a step of at least k between ints so range  i,k  = = range  i,k,1  to modify a list element by element we use  for i in range  len  list    block june 9 2011 list slicing sometimes we want to perform operations on a sublist to refer to a sublist we use list slicing y = x  i  j  gives us a list y with the elements from i to j-1 inclusive x    makes a list that contains all the elements of the original x  i   makes a list that contains the elements from i to the end x   j  makes a list that contains the elements from the beginning to j-1 y is a new list  so that it is not aliased with x june 9 2011 break  the second june 9 2011 tuples sometimes we want our lists to be immutable can help if we 're worried about aliasing carelessness to do that we can make a tuple tuple_name =  item0,item1,item2  items are referenced by tuple_name  i  not tuple_name  i  single element tuples must be defined with a comma to avoid ambiguity –  8 + 3  vs  8 + 3   june 9 2011 strings revisted strings can be considered tuples of individual characters  since they are immutable   in particular  this means that we can use the list knowlege that we gained  an apply it to strings can reference individual characters by string  + /-i   strings are not heterogenous  they can only contain characters min   and max   defined on strings  but sum   is not you can slice strings just as you can lists june 9 2011 string methods revisted now that we know that we can index into strings  we can look at some more string methods find  substring   give the index of the first character in a matching the substring from the left or -1 if no such character exists rfind  substring   same as above  but from the right find  substring,i,j   same as find    but looks only in string  i  j   june 9 2011 nested lists because lists are heterogeneous  we can have lists of lists this is useful if we want matrices  or to represent a grid or higher dimenstional space we then reference elements by list_name  i   j  if we want the jth element of the ith list so then naturally  if we wish to loop over all the elements we need nested loops  for item in list_name  for item2 in item  block csc 108h  introduction to computer programming summer 2011 marek janicki june 9 2011 administration just to be clear  it 's okay to ask questions about the assignment at office hours  even if it 's in the last 24 hours assignment 2 will come out over the weekend  and the deadline will be moved to the 27th  office hours will be held monday instead of tuesday that week the midterm will be held june 30th at the regular lecture time and regular lecture room june 9 2011 administration there is a request for a volunteer note-taker there is a student in this class who requires a volunteer notetaker as an accommodation for a disability by signing up and posting your notes  you can make a significant difference for this individual 's capacity to fully participate in this course go to  http  //www.studentlife.utoronto.ca/accessibility/pcourselist.aspx or come in person to accessibility services 215 huron st suite 939 many students notice the quality of their notetaking improves through volunteering you will also receive a certificate of recognition june 9 2011 immutable objects so far all we 've seen are immutable objects that is objects do n't change instead of making an old int into a new one  we make a new int  and throw the old one away june 9 2011 immutable objects what if we want to change an immutable object it 's a lot of work  we need to make a new object that is identical to the old one except for our changes this is fine for small things like ints and strings  but takes a lot of time for large things like images june 9 2011 mutable objects if we want to change a really large object without keeping the original  then making a big copy  modifying it and tossing the rest is wasteful instead  we can use a mutable object  that we 're allowed to change this also allows us to define functions that change objects  rather than return new ones june 9 2011 aliasing consider  x = 10 y = x x = 5 print x  y we know this will print 5 10 to the screen  because ints are immutable june 9 2011 aliasing let pic be an already initialised picture and consider  x = pic y = x # sets the green to 0 for pixel in x  media.set_green  pixel,0  media.show  y  pics are mutable  so this will show a picture with no green june 9 2011 aliasing and functions when one calls a function  one is effectively beginning with a bunch of assignment statements that is  the parameters are assigned to the local variables but with mutable objects  these assignment statements mean that the local variable refers to a mutable object that it can change this is why functions can change mutable objects  but not immutable ones june 9 2011 break  the first june 9 2011 lists recall from the assignment that you had to refer to each co-ordinate by a variable this is annoying  and can easily be really slow in high-dimensional spaces python has a way of grouping similar items called a list denoted by  list_name =  list_elt0  list_elt1    list_eltn  june 9 2011 lists to get to the i-th element of a list we use  list_name  i-1  we use i-1 because lists are indexed from 0 this means to refer to the elements of a 4 element list named list_name we use list_name  0   list_name  1   list_name  2   list_name  3  lists are mutable june 9 2011 lists you can also have an empty list     you can index into lists from the back list_name  -i  returns the ith element from the back lists are heterogeneous  that is  the elements in a list need not be the same type  can have ints and strings can even have lists themselves june 9 2011 lists  functions lists come with lots of useful functions and methods len  list_name   as with strings  returns the length of the list min  list_name  and max  list_name  return the min and max so long as the list is well defined sum  list_name  returns the sum of elements so long as they 're numbered not defined for lists of strings june 9 2011 lists  methods append  value  – adds the value to the end of the list sort    sorts the list so long as this is well defined  need consistent notions of > and = =  insert  index  value  – inserts the element value at the index specified remove  value  – removes the first instance of value count  value  – counts the number of instances of value in the list june 9 2011 looping over lists often we want to do a similar operation to every element of the list python allows us to do this using for loops for item in list  block this is equivalent to  item = list  0  block item = list  1  block  june 9 2011 looping over lists loops can be tricky with immutable objects for item in list  block here  item is immutable  so we ca n't alter the list elements if we want to alter the list elements  we need to refer to the indices of the list june 9 2011 looping over lists to do that  we use the range   function range  i  returns an ordered list of ints ranging from 0 to i-1 range  i,j  returns an ordered list of ints ranging from i to j-1 inclusive range  i,j,k  returns a list of ints ranging from i to j-1 with a step of at least k between ints so range  i,k  = = range  i,k,1  to modify a list element by element we use  for i in range  len  list    block june 9 2011 list slicing sometimes we want to perform operations on a sublist to refer to a sublist we use list slicing y = x  i  j  gives us a list y with the elements from i to j-1 inclusive x    makes a list that contains all the elements of the original x  i   makes a list that contains the elements from i to the end x   j  makes a list that contains the elements from the beginning to j-1 y is a new list  so that it is not aliased with x june 9 2011 break  the second june 9 2011 tuples sometimes we want our lists to be immutable can help if we 're worried about aliasing carelessness to do that we can make a tuple tuple_name =  item0,item1,item2  items are referenced by tuple_name  i  not tuple_name  i  single element tuples must be defined with a comma to avoid ambiguity –  8 + 3  vs  8 + 3   june 9 2011 strings revisted strings can be considered tuples of individual characters  since they are immutable   in particular  this means that we can use the list knowlege that we gained  an apply it to strings can reference individual characters by string  + /-i   strings are not heterogenous  they can only contain characters min   and max   defined on strings  but sum   is not you can slice strings just as you can lists june 9 2011 string methods revisted now that we know that we can index into strings  we can look at some more string methods find  substring   give the index of the first character in a matching the substring from the left or -1 if no such character exists rfind  substring   same as above  but from the right find  substring,i,j   same as find    but looks only in string  i  j   june 9 2011 nested lists because lists are heterogeneous  we can have lists of lists this is useful if we want matrices  or to represent a grid or higher dimenstional space we then reference elements by list_name  i   j  if we want the jth element of the ith list so then naturally  if we wish to loop over all the elements we need nested loops  for item in list_name  for item2 in item  block csc 108h  introduction to computer programming summer 2011 marek janicki june 9 2011 administration just to be clear  it 's okay to ask questions about the assignment at office hours  even if it 's in the last 24 hours assignment 2 will come out over the weekend  and the deadline will be moved to the 27th  office hours will be held monday instead of tuesday that week the midterm will be held june 30th at the regular lecture time and regular lecture room june 9 2011 administration there is a request for a volunteer note-taker there is a student in this class who requires a volunteer notetaker as an accommodation for a disability by signing up and posting your notes  you can make a significant difference for this individual 's capacity to fully participate in this course go to  http  //www.studentlife.utoronto.ca/accessibility/pcourselist.aspx or come in person to accessibility services 215 huron st suite 939 many students notice the quality of their notetaking improves through volunteering you will also receive a certificate of recognition june 9 2011 immutable objects so far all we 've seen are immutable objects that is objects do n't change instead of making an old int into a new one  we make a new int  and throw the old one away june 9 2011 immutable objects what if we want to change an immutable object it 's a lot of work  we need to make a new object that is identical to the old one except for our changes this is fine for small things like ints and strings  but takes a lot of time for large things like images june 9 2011 mutable objects if we want to change a really large object without keeping the original  then making a big copy  modifying it and tossing the rest is wasteful instead  we can use a mutable object  that we 're allowed to change this also allows us to define functions that change objects  rather than return new ones june 9 2011 aliasing consider  x = 10 y = x x = 5 print x  y we know this will print 5 10 to the screen  because ints are immutable june 9 2011 aliasing let pic be an already initialised picture and consider  x = pic y = x # sets the green to 0 for pixel in x  media.set_green  pixel,0  media.show  y  pics are mutable  so this will show a picture with no green june 9 2011 aliasing and functions when one calls a function  one is effectively beginning with a bunch of assignment statements that is  the parameters are assigned to the local variables but with mutable objects  these assignment statements mean that the local variable refers to a mutable object that it can change this is why functions can change mutable objects  but not immutable ones june 9 2011 break  the first june 9 2011 lists recall from the assignment that you had to refer to each co-ordinate by a variable this is annoying  and can easily be really slow in high-dimensional spaces python has a way of grouping similar items called a list denoted by  list_name =  list_elt0  list_elt1    list_eltn  june 9 2011 lists to get to the i-th element of a list we use  list_name  i-1  we use i-1 because lists are indexed from 0 this means to refer to the elements of a 4 element list named list_name we use list_name  0   list_name  1   list_name  2   list_name  3  lists are mutable june 9 2011 lists you can also have an empty list     you can index into lists from the back list_name  -i  returns the ith element from the back lists are heterogeneous  that is  the elements in a list need not be the same type  can have ints and strings can even have lists themselves june 9 2011 lists  functions lists come with lots of useful functions and methods len  list_name   as with strings  returns the length of the list min  list_name  and max  list_name  return the min and max so long as the list is well defined sum  list_name  returns the sum of elements so long as they 're numbered not defined for lists of strings june 9 2011 lists  methods append  value  – adds the value to the end of the list sort    sorts the list so long as this is well defined  need consistent notions of > and = =  insert  index  value  – inserts the element value at the index specified remove  value  – removes the first instance of value count  value  – counts the number of instances of value in the list june 9 2011 looping over lists often we want to do a similar operation to every element of the list python allows us to do this using for loops for item in list  block this is equivalent to  item = list  0  block item = list  1  block  june 9 2011 looping over lists loops can be tricky with immutable objects for item in list  block here  item is immutable  so we ca n't alter the list elements if we want to alter the list elements  we need to refer to the indices of the list june 9 2011 looping over lists to do that  we use the range   function range  i  returns an ordered list of ints ranging from 0 to i-1 range  i,j  returns an ordered list of ints ranging from i to j-1 inclusive range  i,j,k  returns a list of ints ranging from i to j-1 with a step of at least k between ints so range  i,k  = = range  i,k,1  to modify a list element by element we use  for i in range  len  list    block june 9 2011 list slicing sometimes we want to perform operations on a sublist to refer to a sublist we use list slicing y = x  i  j  gives us a list y with the elements from i to j-1 inclusive x    makes a list that contains all the elements of the original x  i   makes a list that contains the elements from i to the end x   j  makes a list that contains the elements from the beginning to j-1 y is a new list  so that it is not aliased with x june 9 2011 break  the second june 9 2011 tuples sometimes we want our lists to be immutable can help if we 're worried about aliasing carelessness to do that we can make a tuple tuple_name =  item0,item1,item2  items are referenced by tuple_name  i  not tuple_name  i  single element tuples must be defined with a comma to avoid ambiguity –  8 + 3  vs  8 + 3   june 9 2011 strings revisted strings can be considered tuples of individual characters  since they are immutable   in particular  this means that we can use the list knowlege that we gained  an apply it to strings can reference individual characters by string  + /-i   strings are not heterogenous  they can only contain characters min   and max   defined on strings  but sum   is not you can slice strings just as you can lists june 9 2011 string methods revisted now that we know that we can index into strings  we can look at some more string methods find  substring   give the index of the first character in a matching the substring from the left or -1 if no such character exists rfind  substring   same as above  but from the right find  substring,i,j   same as find    but looks only in string  i  j   june 9 2011 nested lists because lists are heterogeneous  we can have lists of lists this is useful if we want matrices  or to represent a grid or higher dimenstional space we then reference elements by list_name  i   j  if we want the jth element of the ith list so then naturally  if we wish to loop over all the elements we need nested loops  for item in list_name  for item2 in item  block page 1 6.189 worksheet session 9 administrivia name  instructions  1 err..complete the questions    2 no calculators  no laptops  etc 3 when we ask for output  you do n't have to write the spaces/newlines in program text  print “ x ”  print “ x ”  output  xx problem 1  common errors each of the following code snippets represents a common error made by an introductory programming student  i know this because i ripped these errors from an introductory programming website  what did they do wrong assume that the following definitions occur before every code snippet program text  my_string = " this is a sentence " my_list =  4,2,6,8  user_input = " 100 " my_integer = 27 1 convert my_string to lowercase program text  my_string.lower   answer  page 2 2 print every element in my_list in reverse order program text  for i in my_list.reverse    print i  answer  3 reverse the order of elements in my_list program text  my_list.reverse answer  4 user_input contains a string representation of a number entered by the user multiply it by 10 and add the resulting value to my_list as a string program text  bigger_input = user_input + 0 my_list.append  user_input  answer  5 create a backup copy of my_list  then remove the largest element from my_list program text  new_list = my_list my_list.remove  max  my_list   answer  page 3 5 this function finds the position of the last instance of an element e in a list hints  1  there are no syntax errors 2  the function always returns the correct value program text  def rindex  my_list  e   " " " finds the position of the last occurrence of e in my_list if e is not in l  returns -1 " " " if e not in my_list  return -1 my_list.reverse   for i in range  len  my_list    if my_list  i  = = e  return len  my_list   1  i answer  6 prints all elements of my_list program text  for i in my_ list  print i i = i + 1 answer  7 finds the largest element in a list program text  def find_max  list   " " " finds the largest integer in list assumes list contains only positive integers " " " max = 0 for i in my_list  if i > max  return i return max page 4 answer  problem 2  meaningful names ! disclaimer  this example is a bit exaggerated you ’ ll learn more about programming style in subsequent courses  but one thing we want to imprint in you now is using meaningful variable names every variable is created for a reason – its name should reflect the values you choose to store in it the following code is something an introductory student could have written for a class imagine being the ta trying to find the bug in it program text  def f3  ll   # all stuff in ll between 0 and 1000000 j = 0 k = 0 for i in range  len  ll    if ll  i  > ll  j   j = i elif ll  i  < ll  k   k = i l = ll  j  ll  k  = ll  l  ll  j  = ll  k  your task is to find the bug in the above code the function should swap the maximum and minimum elements in a list well..maybe that ’ s too mean here – i ’ ll give you some meaningful variable names for the above code 3 swap_max_min max_position temp list min_position answer  page 5 problem 3  test cases we ’ ve written a function that calculates the square root of a number if given a negative number  our function returns 0  if you ever write a square root function  don ’ t do that  p  we ’ re using this function in a much larger program that controls our 6.01 robot  so its kind of important that the know the function works correctly how can we tell if a function works correctly staring at it for 30 minutes is probably not the best solution..instead  we ’ re going to write a couple of test cases to make sure it works program text  sq_3 =  # assume sqrt_3 has been initialized to the square root # of 3  1.717  test_cases =  _____  _____  _____  _____  _____  _____  test_case_answers =  _____  _____  _____  _____  _____  _____  def custom_sqrt  num   " returns the square root of num  or 0 if num < 0 "   code snipped  for i in range  len  test_cases    if custom_sqrt  test_cases  i   ! = test_case_answers  i   print " test case # " ,i  " failed ! " note  you can use the built-in zip function to make the last three lines prettier  look it up at some point fill in the blanks below to complete our testing code you ’ ll want to use as many unique cases as possible – don ’ t just test 1,2,3,4,5,6 at least one of your test cases should be a negative number  for example we gave you six blanks  but you don ’ t need to use all of them you want a wide variety of test cases in order to catch as many bugs as possible  but you also don ’ t want to test every random number you can think of it ’ s a delicate balance   – just do your best page 1 6.189 – notes session 8 day 6  immutable objects earlier  we made a big deal about the fact that lists are mutable the reason this is important is because certain objects are immutable – once created  their value can not be changed strings are a prime example of this although we treated strings the same as primitives like integers and booleans earlier  strings are actually objects why did we do this think about this  if an object is immutable  it does n't matter whether two variables are pointing to the same string or two different strings with the same value ! thus  while strings are actually immutable objects  we can treat them as we have before – as primitives the only new meaning this revelation has is that like lists  strings have member functions for strings  and tuples  when we get to them   its easiest to think of them like primitives – directly stored in the variable table day 6  strings revisited most of the member functions in lists modified the list and had no return value strings are immutable  though – how do string member functions work it turns out that member functions of strings tend to return a new string program text  message = " hello " print message message.lower   # no effect print message message = message.lower   print message output  hello hello hello note  lower   is a function that converts a string into lowercase here is a list of some useful string functions do n't try to memorize these ! even i do n't remember them – instead  when i need to look up a function i go to the python quick reference website shown in class  and on the website  page 2 a quick reminder before starting  remember that " a " and " a " are completely different characters ! when writing functions that manipulate strings  its generally a good idea to deal with a single case  usually lowercase   functions that return a new string ­ str.capitalize   / str.lower    returns a copy of str with all letters converted to uppercase / lowercase ­ str.strip    returns a copy of str with all whitespace  spaces/tabs/newlines  from the beginning and end of the string removed example  " test " .strip   = = " test "  ­ str.replace  old,new   returns a copy of str with all instances of old within the string replaced with new example  " hallo all ! " .replace  " al "  " el "  = = " hello ell ! "  functions which return information about a string ­ str.count  substring   returns the number of times substring appears within str ­ str.find  substring  / str.rfind  substring   returns the position of the first instance of substring within str rfind returns the position of the last instance of substring ­ s.startswith  substring  / str.endswith  substring   returns true if the string starts with / ends with substring example  " hello " .startswith  “ he ”  = = false  but “ hello ” .endswith  “ lo ”  = = true functions which transform the string into other types ­ str.split  separator   returns a list of words in str  using separator as the delimiter string example  " hello world  mihir here " .split  " "  returns  " hello "  " world  "  " mihir "  " here "   example  " mississippi " .split  " s "  returns  " mi "  " "  " i "  " "  " ippi "   ­ separator.join  seq   this one is tricky it takes a list of strings seq and combines them into a string each element in seq is separated by separator in the returned string example  " " .join   " hello "  " world "   = = " hello world " day 4  tuples tuples are the immutable counterpart of lists unlike a list  tuples can not be changed why/where are tuples useful think of a tuple as multi-dimensional data  just like you can store an integer 5 in a variable  you can also store a two-dimensional coordinate  6,-3   you 'll develop an instinct for when to use tuples versus lists as you continue in course 6 – just remember that it tends to be much easier to use tuples whenever you can get away with it you can create tuples by using parentheses   1,3,8  creates the tuple with elements 1  3  8 as you should expect  tuples are ordered   1,3  ! =  3,1  uple  a tuple with one element   you can use 5 se three formats using that teger   whereas the latter is a tuple that contains three elements ered in the next ples of sequences e of characters nything e syntax e item  or character  at the length of a sequence eq ring  e.g plus operator to some integer ach ch pic of this class   where lists stored a sequence of items  dictionaries store a table if you want to create a singleton le  5   5   ! mer is a tuple and  4,6  ! =  4,6  convert between th st  x  you can nest tuples in tuples ! not uple that contains two elements  one tuple and one i ree elements will be co lists  strings and tuples are all exa he case of strings  you can think of them as a sequen sequence is n't an official term or e are very similar in fact  they share much of the sa will return t returns the equence x in eck if a substring is in a s  you can use th me type you can times fo  we learned that the any sequence for strings  it iterates through and so we come to the last major t are an mutable object that we can use to store dat es store a table tu they have completely different types  the fo one is a tuple and the other is a list similarl l the former is a two elements  one tuple and one integer   whereas the latter is a tuple that contains t of ordered items in on that all three of the  0  3  = is equal to combine two sequences of the s actually works on  like lists  dictionarie object that we can use to store data where lists stored a sequence of items  dictionar page 3 if you want to create a singleton tuple  a tuple with one element   you can use tup le  5  or use the notation  5    note that  5   ! = 5 – they have completely different types  the for mer is a tuple and the latter is an integer also note that  4,6  ! =  4,6  – one is a tuple and the other is a list similarly   " a "  " b "  ! = " ab "  you can convert between these three formats using str  x   tuple  x   and list  x   though you can nest tuples in tuples ! note that   1,2  ,3  ! =  1,2,3  – the former is a t uple that contains two elements  one tuple and one integer   whereas the latter is a tuple that contains three elements notation for using tuples will be covered in the next section day  sequence notation lists  strings and tuples are all examples of sequences – a series of ordered items in t he case of strings  you can think of them as a sequence of characters sequence is n't an official term or anything – just an observation that all three of thes e are very similar in fact  they share much of the same syntax ­ indexing seq  i  will return the item  or character  at the ith position ­ length len  seq  returns the length of a sequence ­ slicing you can slice sequences the same way you sliced lists " hello "  0  3  = = " hel " ­ in  not in operators x in seq is true if and only if an item of seq is equal to x for strings  you can check if a substring is in a string  e.g " ello " in " hello " returns true ­ concatenation you can use the plus operator to combine two sequences of the sa me type you can use * to duplicate it n times for some integer n  e.g " yay ! " * 5 ­ for loops we learned that the for operator works on lists for actually works on any sequence – for strings  it iterates through each character in the string day 7  dictionaries and so we come to the last major topic of this class  dictionaries like lists  dictionaries are an mutable object that we can use to store data where lists stored a sequence of items  dictionaries store a table page 4 note that dictionaries are considered to be unordered – it does n't matter what order we list entries in we call the names on the left keys and the values on the right values you can store primitives and immutable objects  like strings and tuples  as keys you can store anything  e.g lists  as a value as we go through the dictionary notation  notice that a lot of it is consistent with the sequence notation above – the notation below should seem intuitive to you remember that dictionaries are fundamentally different from sequences  though – especially the fact that dictionaries are unordered ­ you can create a new dictionary using curly braces example  example_dict =   creates an empty dictionary example  example_dict =  " a "  5  " test "   1,2   27  " test "  creates the above table the amount of spacing around the colon  is irrelevant ­ len  d  works on dictionaries too  use it to find the number of entries in the dictionary  the above dictionary has length 3  ­ to access or change a value  use the same index notation example  print example_dict  " a "  prints 5 example  example_dict  " a "  = 7 note that this implies that a dictionary can not contain two identical keys – writing example_dict  " a "  = 7 would just change the value that a is mapped to this should make sense  though – remember that dictionaries are unordered also  you can have a dictionary with identical values ­ use del example_dict  " a "  to remove that entry from the dictionary ­ k in d will return true if the dictionary d contains an entry with key k example   27 in example_dict  = = true example   5 in example_dict  = = false day 7  dictionary member functions like other objects  dictionaries have member functions you do n't really need to use these much  though – here are a few that might be useful ­ d.clear    removes all items from d ­ d.copy    returns a copy of the dictionary d ­ d.pop  k   removes the entry with key k and returns its corresponding value this is just like del d  k   except that the function also returns the value of d  k   day 7  for loops and dictionaries remember how k in d will return true if k is mapped to something you can also use for loops with dictionaries for loops will iterate over all the keys in the dictionary  page 5 program text  example_dict =  " a "  5  " b "  true  for k in example_dict  print k  " ; "  example_dict  k  output  a ; 5 b ; true 