in computer science  a data structure is a particular way of organizing data in a computer so that it can be used efficiently  1   2  data structures can implement one or more particular abstract data types  adt   which are the means of specifying the contract of operations and their complexity in comparison  a data structure is a concrete implementation of the contract provided by an adt different kinds of data structures are suited to different kinds of applications  and some are highly specialized to specific tasks for example  databases use b-tree indexes for small percentages of data retrieval and compilers and databases use dynamic hash tables as look up tables data structures provide a means to manage large amounts of data efficiently for uses such as large databases and internet indexing services usually  efficient data structures are key to designing efficient algorithms some formal design methods and programming languages emphasize data structures  rather than algorithms  as the key organizing factor in software design storing and retrieving can be carried out on data stored in both main memory and in secondary memory.data structures are generally based on the ability of a computer to fetch and store data at any place in its memory  specified by a pointer ? a bit string  representing a memory address  that can be itself stored in memory and manipulated by the program thus  the array and record data structures are based on computing the addresses of data items with arithmetic operations ; while the linked data structures are based on storing addresses of data items within the structure itself many data structures use both principles  sometimes combined in non-trivial ways  as in xor linking   the implementation of a data structure usually requires writing a set of procedures that create and manipulate instances of that structure the efficiency of a data structure can not be analyzed separately from those operations this observation motivates the theoretical concept of an abstract data type  a data structure that is defined indirectly by the operations that may be performed on it  and the mathematical properties of those operations  including their space and time cost  .there are numerous types of data structures  generally built upon simpler primitive data types  an array  also called list  is a number of elements in a specific order  typically all of the same type elements are accessed using an integer index to specify which element is required  although the elements may be of almost any type   typical implementations allocate contiguous memory words for the elements of arrays  but this is not always a necessity   arrays may be fixed-length or resizable an associative array  also called a dictionary  map or object  is a more flexible variation on an array  in which name-value pairs can be added and deleted freely a hash table is a common implementation of an associative array a record  also called a tuple or struct  is an aggregate data structure a record is a value that contains other values  typically in fixed number and sequence and typically indexed by names the elements of records are usually called fields or members a union type specifies which of a number of permitted primitive types may be stored in its instances  e.g float or long integer contrast with a record  which could be defined to contain a float and an integer ; whereas in a union  there is only one value at a time enough space is allocated to contain the widest member datatype a tagged union  also called a variant  variant record  discriminated union  or disjoint union  contains an additional field indicating its current type  for enhanced type safety a set is an abstract data structure that can store specific values  in no particular order and with no duplicate values graphs and trees are linked abstract data structures composed of nodes each node contains a value and one or more pointers to other nodes arranged in a hierarchy graphs can be used to represent networks  while variants of trees can be used for sorting and searching  having their nodes arranged in some relative order based on their values an object contains data fields  like a record  as well as various methods which operate on the contents of the record in the context of object-oriented programming  records are known as plain old data structures to distinguish them from objects.most assembly languages and some low-level languages  such as bcpl  basic combined programming language   lack built-in support for data structures on the other hand  many high-level programming languages and some higher-level assembly languages  such as masm  have special syntax or other built-in support for certain data structures  such as records and arrays for example  the c and pascal languages support structs and records  respectively  in addition to vectors  one-dimensional arrays  and multi-dimensional arrays  3   4  most programming languages feature some sort of library mechanism that allows data structure implementations to be reused by different programs modern languages usually come with standard libraries that implement the most common data structures examples are the c + + standard template library  the java collections framework  and microsoft 's .net framework modern languages also generally support modular programming  the separation between the interface of a library module and its implementation some provide opaque data types that allow clients to hide implementation details object-oriented programming languages  such as c + +  java and smalltalk may use classes for this purpose many known data structures have concurrent versions that allow multiple computing threads to access the data structure simultaneously 