class we discussed
collision resolution techniques
first saw chaining
chaining then last
double hashing linear
hashing linear programming
bit of analysis
right in today
talk about trees
trees some data
structures for trees
top most trees
notion of parent
parent and children
parent of node
difference between ancestor
ancestor and grandparent
siblings please note
children of node
great grand parent
term just call
terms we defined
nature of family
right the extremists
leaf a leaf
tree so leaf
leaves more definitions
nodes right node
associate a notion
notion of level
node the root
level zero children
level two right
depth in level
depth zero depth
depth two depth
node the height
point the degree
node the number
number of children
leaves have degree
basically basic terminology
terminology quite intuitive
represent the hierarchy
lets called electronics
r&d one divisions
divisions another purchasing
purchasing another manufacturing
manufacturing fourth division
fourth division sales
lets say domestic
division an international
represent the organizational
tree to represent
represent the table
table of contents
lets say book
book called student
chapters overview grading
overview grading environment
grading environment programming
environment programming support
programming support code
sections called exams
homework s programs
build up tree
tree your file
directory certain directory
two sub directories
directories in mat
homework s assignment
start using definitions
node are ordered
put this child
child right suppose
draw family tree
draw the eldest
move from left
notion of ordered
reflect that order
notion of order
two sub directory
sub directory trees
nt really make
make a sense
convey any additional
children s right
tree a binary
notion of left
four five leaves
children this node
children one child
defined the notion
interchange the top
top two nodes
stil remain ordered
remain ordered wont
ordered wont wont
wont be ordered
ordered be started
manner which means
means i put
move this entire
two different binary
representing an information
change the order
define a binary
binary tree recursive
tree recursive format
right a binary
read the single
node a leaf
attached two trees
two trees binary
trees binary tree
tree this part
left sub tree
right sub tree
construct any binary
node i attached
attached left sub
tree right sub
sub tree recursive
obtained by taking
taking a node
node and attaching
attaching to left
right sub trees
attached both right
right so remember
remember this term
introduce other terms
terms left sub
piece this piece
examples of binary
binary trees arithmetic
trees arithmetic expressions
expression and suppose
parenthesized this manner
node would correspond
evaluate this expression
draw a tree
tree whose root
operator one child
child is sub
tree that obtained
built this tree
representing yeah decision
make much sense
star bucks cafe
bucks cafe paragon
tree each node
decision tree corresponds
top root node
meal the answer
bucks the answer
trees why binary
follow the decision
terminology and examples
right so lets
competes stuff lets
stuff lets define
define a complete
complete binary tree
call a tree
tree a complete
sense its full
right every node
tree okay lets
children every internal
children then telling
case every node
two two children
children some nodes
children every node
leaf that means
means every internal
two nodes level
two four level
tree we call
maximum level number
tree that means
nodes that means
number of leaves
leaves complete binary
tree of height
number of internal
minus one right
nodes the number
nodes is number
binary tree number
number of nodes
right lets call
call this number
tree n node
tree n nodes
whats the number
half the nodes
nodes are leaves
half our internal
tree is log
log of number
number of complete
height h whats
nodes then whats
whats it height
height is log
tree is number
roughly the total
whats the binary
start suitably large
suitably large complete
large complete binary
right for instance
matter what tree
tree i wanted
right this picture
obtain any binary
tree at level
tree is obtained
obtained from complete
tree by pruning
nodes at level
binary tree height
node at level
nodes that binary
rewrite this suppose
suppose i told
rearranged is greater
greater than log
tree which achieves
achieves this equality
tree which acquires
acquires the smallest
create a binary
tree i give
minimum possible height
height of log
whats the maximum
height that binary
nodes has height
height n minus
nodes here height
tree so binary
nodes minimum height
mistake many people
assume that binary
binary tree means
tree means height
tree have right
whats the minimum
minimum number leaves
prove the number
nodes any binary
tree the number
node internal nodes
nt have child
leaf so base
cases when number
case left hand
left hand side
side the right
right hand side
assume the statement
statement is true
minus one internal
true for trees
internal nodes suppose
nodes right lets
sub one internal
nodes to internal
tree now lets
apply the induction
hypothesis the number
tree so total
proof which shows
shows the number
leaves is equal
height the tree
leaves and number
achieves the equality
right how small
equal to number
implies the number
done just number
nodes is greater
mind binary tree
half the number
equality was achieved
number that tree
type of data
abstract data types
care generic container
generic container methods
methods of size
tree is empty
position based container
based container methods
container methods kind
list or sequence
sequence data types
right so swap
positions as references
position data type
positions the tree
objects this positions
access the element
element swap elements
swapping the elements
two positions replace
positions replace element
replacing the element
external or leafs
correspond to leaf
access a methods
root an object
object of type
returns the root
root means reference
reference of type
parent node children
return if children
return an sequence
sequence an object
object type sequence
access the data
data the update
typically application specific
method okay binary
derived class tree
method will describe
left child give
child or give
data your keeping
reference to key
key or data
node any element
element that sitting
make any sense
access the left
child by invoking
invoking the left
left child method
invoke element method
implement the position
node its parent
parent the root
child the left
node right child
child um member
referring to null
null any questions
care of arbitrary
arbitrary trees lets
lets say unbounded
right this node
node has lets
reach the last
members three members
members right parent
left most child
referred to left
questions some question
sense in left
binary tree left
right only make
make sense binary
sense binary tree
return left child
right first child
child such thing
child then lets
lets you access
access its siblings
children throughout linked
list any questions
end our discussion
discussion on binary
binary trees today
reversals of trees
last class
collision resolution
resolution techniques
double hashing
hashing linear
linear programming
binary trees
data structures
turn parent
great grand
grand parent
family tree
real trees
generic terms
internal nodes
internal node
term depth
maximum level
basic terminology
company lets
fourth division
division sales
domestic sales
sub division
organizational structure
out tree
student guide
chapters overview
grading environment
environment programming
programming support
support code
exams homework
file system
unix environment
windows environment
root directory
sub directories
sub directory
todays class
doubt kind
ordered tree
draw family
eldest child
younger child
order lets
directory trees
picture concerned
additional information
binary tree
left child
right child
stil remain
remain ordered
ordered wont
wont wont
entire piece
recursive format
single node
left sub
sub tree
right sub
tree recursive
sub trees
terms left
arithmetic expressions
arithmetic expression
resulting value
decision trees
star bucks
bucks cafe
cafe paragon
decision tree
tree corresponds
top root
root node
fast meal
competes stuff
stuff lets
lets define
complete binary
equivalent right
evry node
node level
nodes level
level number
leaves complete
leaf nodes
tree number
total number
right lets
lets call
tree lets
simple counting
leafy kind
large complete
pieces cut
important fact
tree height
last level
maximum number
smallest height
shortest height
nodes close
minimum height
maximum height
zig zag
manner height
nodes minimum
people make
tree means
means height
minimum number
number leaves
lets figure
inequality number
induction induction
base case
base cases
case left
left hand
hand side
right hand
inequality suspect
read statement
nodes suppose
induction hypothesis
simple proof
mind binary
leafy term
dryer trees
right whats
abstract type
data types
generic methods
abstract data
generic container
container methods
method list
position based
based container
methods kind
sequence data
swap elements
position data
data type
elements sitting
method positions
position objects
positions methods
tree references
element method
positions access
element swap
positions replace
replace element
query methods
leaf access
methods root
call root
type position
understand difference
root means
means reference
type casting
position return
parent node
node children
object type
type sequence
position position
update methods
typically application
generic method
sub class
derived class
class tree
additional methods
position give
child give
sibling right
node structure
node suppose
root method
child method
invoke element
parent link
arbitrary trees
trees lets
unbounded trees
data members
create space
linked list
last element
first field
node empty
right parent
right sibling
tree left
make sense
return left
trees today
last
class
discussed
hashing
collision
resolution
techniques
first
chaining
double
linear
programming
bit
analysis
right
today
talk
trees
binary
data
structures
tree
root
top
nt
notion
parent
children
node
argument
turn
ancestor
grandparent
understand
difference
descendents
fact
siblings
sibling
note
ancestors
great
grand
term
call
terms
defined
nature
family
real
leaves
upside
extremists
leaf
generic
nodes
child
definitions
internal
associate
level
two
depth
thing
height
maximum
questions
point
degree
number
basically
basic
terminology
intuitive
represent
hierarchy
organization
instance
company
lets
electronics
divisions
r&d
purchasing
manufacturing
fourth
division
sales
domestic
sub
international
organizational
structure
out
table
contents
book
student
guide
chapters
overview
grading
environment
support
code
chapter
sections
exams
homework
programs
subsections
build
file
system
unix
windows
organized
directory
directories
mat
assignment
todays
start
classes
doubt
kind
ordered
means
put
left
suppose
draw
eldest
younger
move
reflect
order
make
sense
picture
concerned
convey
additional
information
four
change
impact
interchange
stil
remain
wont
started
slightly
manner
entire
piece
dependent
application
representing
meaning
front
clear
define
recursive
format
read
single
attached
part
construct
obtained
taking
attaching
null
remember
introduce
examples
arithmetic
expressions
expression
parenthesization
parenthesized
numbers
correspond
operations
evaluate
sum
operator
resulting
value
adding
operation
built
decision
star
bucks
cafe
paragon
corresponds
fast
meal
answer
coffee
place
typically
follow
competes
stuff
complete
equal
full
equivalent
evry
give
quickly
show
telling
case
requirement
implies
counter
count
definition
squared
minus
total
step
whats
equals
half
remaining
similarly
log
directly
simple
counting
doing
mind
large
roughly
leafy
suitably
cut
matter
wanted
pieces
proof
obtain
pruning
branches
important
square
rewrite
told
quantity
rearranged
greater
achieves
equality
acquires
smallest
create
shortest
packing
close
filling
levels
minimum
zig
zag
mistake
people
assume
figure
prove
inequality
induction
base
cases
hand
side
suspect
satisfy
statement
true
apply
hypothesis
shows
power
small
rearrange
done
replace
achieved
dryer
showed
abstract
type
types
methods
care
container
size
empty
element
method
list
elements
position
based
sequence
swap
positions
references
access
sitting
objects
parameters
invoke
swapping
replacing
query
external
leafs
times
return
object
returns
reference
casting
update
specific
treated
derived
continue
describe
skip
keeping
key
stored
invoking
datas
implement
links
link
referring
member
arbitrary
unbounded
members
space
linked
pointing
head
essentially
reach
field
referred
question
end
discussion
reversals
