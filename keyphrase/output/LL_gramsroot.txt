lists in chapter::lists in chapter
disadvantages as data::disadvantages as data
data storage structures::data storage structures
searching is slow::searching is slow
insertion is slow::insertion is slow
kinds of arrays::kinds of arrays
deletion is slow::deletion is slow
data storage structure::data storage structure
structure that solves::structure that solves
problems the linked::problems the linked
linked list linked::linked list linked
list linked lists::list linked lists
commonly used generalpurpose::commonly used generalpurpose
generalpurpose storage structures::generalpurpose storage structures
structures after arrays::structures after arrays
arrays the linked::arrays the linked
versatile mechanism suitable::versatile mechanism suitable
kinds of general::kinds of general
general purpose databases::general purpose databases
replace an array::replace an array
stacks and queues::stacks and queues
queues in fact::queues in fact
frequent random access::frequent random access
access to individual::access to individual
index linked lists::index linked lists
linked lists aren::linked lists aren
data storage problems::data storage problems
investigate their strengths::investigate their strengths
strengths and weaknesses::strengths and weaknesses
simple linked lists::simple linked lists
doubly linked lists::doubly linked lists
lists with iterators::lists with iterators
approach to random::approach to random
access to list::access to list
examine the idea::examine the idea
idea of abstract::idea of abstract
abstract data types::abstract data types
viewed as adts::viewed as adts
implemented as linked::implemented as linked
item is embedded::item is embedded
link a link::link a link
list a field::list a field
link this relationship::link this relationship
relationship is shown::relationship is shown
shown in figure::shown in figure
linked lists linked::linked lists linked
lists linked list::lists linked list
list first data::list first data
first data link::first data link
link next data::link next data
link next null::link next null
link class link::link class link
public int idata::public int idata
int idata data::int idata data
idata data public::idata data public
data public double::data public double
public double ddata::public double ddata
double ddata data::double ddata data
ddata data public::ddata data public
data public link::data public link
link next reference::link next reference
kind of class::kind of class
two data items::two data items
link an int::link an int
social security number::social security number
items class link::items class link
inventoryitem ii object::inventoryitem ii object
object holding data::object holding data
holding data public::holding data public
references and basic::references and basic
easily get confused::easily get confused
confused about references::confused about references
context of linked::context of linked
put a field::put a field
field of type::field of type
type link inside::type link inside
inside the class::inside the class
compiler be confused::compiler be confused
out how big::out how big
big to make::big to make
make a link::make a link
big a link::big a link
java a link::java a link
link object doesn::link object doesn
object a reference::object a reference
number that refers::number that refers
object s address::object s address
computer s memory::computer s memory
number that tells::number that tells
compiler to figure::compiler to figure
big this field::big this field
construct an entire::construct an entire
entire link object::entire link object
link object note::link object note
int and double::int and double
double are stored::double are stored
differently than objects::differently than objects
fields containing primitive::fields containing primitive
actual numerical values::actual numerical values
definition like double::definition like double
creates a space::creates a space
space in memory::space in memory
memory and puts::memory and puts
puts the number::puts the number
object like link::object like link
alink = somelink::alink = somelink
puts a reference::puts a reference
object of type::object of type
alink the somelink::alink the somelink
isn t moved::isn t moved
create an object::create an object
somelink field doesn::somelink field doesn
doesn t hold::doesn t hold
hold an object::hold an object
reference the object::reference the object
differently than java::differently than java
field like link::field like link
referential class definition::referential class definition
put a pointer::put a pointer
link in class::link in class
link a pointer::link a pointer
pointer is similar::pointer is similar
mind how java::mind how java
java handles objects::java handles objects
objects this usage::objects this usage
counter intuitive links::counter intuitive links
objects and references::objects and references
references in memory::references in memory
linked lists differ::linked lists differ
differ from arrays::differ from arrays
array each item::array each item
position this position::position this position
row of houses::row of houses
chain of elements::chain of elements
harry where bob::harry where bob
bob is harry::bob is harry
jane saw bob::jane saw bob
leave the office::leave the office
sally s cell::sally s cell
phone she dropped::phone she dropped
linked lists alink::linked lists alink
lists alink somelink::lists alink somelink
alink somelink object::alink somelink object
type link memory::type link memory
link memory alink::link memory alink
alink and somelink::alink and somelink
type link peter::type link peter
peter s office::peter s office
access a data::access a data
items to locate::items to locate
linklist workshop applet::linklist workshop applet
applet the linklist::applet the linklist
delete a data::delete a data
key these operations::key these operations
array workshop applet::array workshop applet
applet in chapter::applet in chapter
general purpose database::general purpose database
purpose database application::purpose database application
database application figure::database application figure
list the linklist::list the linklist
applet the insert::applet the insert
press the ins::press the ins
prompted to enter::prompted to enter
enter a key::enter a key
presses will generate::presses will generate
generate a link::generate a link
press on ins::press on ins
ins will redraw::ins will redraw
redraw the list::redraw the list
newly inserted link::newly inserted link
inserted link lines::inserted link lines
links this redrawing::links this redrawing
doesn t represent::doesn t represent
represent anything happening::represent anything happening
makes the display::makes the display
display neater figure::display neater figure
link being inserted::link being inserted
inserted the find::inserted the find
button the find::button the find
find a link::find a link
value when prompted::value when prompted
continue to press::continue to press
press the button::press the button
red arrow move::red arrow move
link a message::link a message
finds the link::finds the link
type a non::type a non
non existent key::non existent key
existent key value::existent key value
arrow will search::arrow will search
list before reporting::list before reporting
found the delete::found the delete
delete a key::delete a key
repeatedly press del::repeatedly press del
arrow will move::arrow will move
removes that link::removes that link
link and connects::link and connects
connects the arrow::connects the arrow
previous link straight::previous link straight
links are removed::links are removed
removed the reference::removed the reference
link is changed::link is changed
changed to point::changed to point
link a final::link a final
final keypress redraws::final keypress redraws
redraws the picture::redraws the picture
evenly spaced links::evenly spaced links
links for aesthetic::links for aesthetic
reasons the length::reasons the length
doesn t correspond::doesn t correspond
note the linklist::note the linklist
applet can create::applet can create
create both unsorted::create both unsorted
unsorted and sorted::unsorted and sorted
sorted lists unsorted::sorted lists unsorted
applet for sorted::applet for sorted
lists a simple::lists a simple
simple linked list::simple linked list
list our first::list our first
first example program::first example program
demonstrates a simple::demonstrates a simple
list are inserting::list are inserting
inserting an item::inserting an item
deleting the item::deleting the item
list to display::list to display
display its contents::display its contents
contents these operations::contents these operations
easy to carry::easy to carry
complete linklist.java program::complete linklist.java program
link and linklist::link and linklist
classes the link::classes the link
complete class definition::complete class definition
class definition class::class definition class
definition class link::definition class link
idata data item::idata data item
data item public::data item public
item public double::item public double
ddata data item::ddata data item
item public link::item public link
link in list::link in list
list public link::list public link
initialize data ddata::initialize data ddata
set to null::set to null
public void displaylink::public void displaylink
end class link::end class link
link in addition::link in addition
displays the link::displays the link
link s data::link s data
object to naming::object to naming
naming this method::naming this method
spirit of polymorphism::spirit of polymorphism
makes the listing::makes the listing
listing somewhat harder::listing somewhat harder
harder to understand::harder to understand
forgotten whether current::forgotten whether current
initializes the data::initializes the data
null value means::null value means
means it doesn::means it doesn
link is connected::link is connected
made the storage::made the storage
provide public methods::provide public methods
methods to access::methods to access
require extra code::require extra code
making the listing::making the listing
longer and harder::longer and harder
harder to read::harder to read
restrict link object::restrict link object
link object access::link object access
access to methods::access to methods
default access specifier::default access specifier
give the data::give the data
data package access::data package access
restricted to classes::restricted to classes
makes it clear::makes it clear
isn t private::isn t private
link class private::link class private
private the linklist::private the linklist
class the linklist::class the linklist
item a reference::item a reference
list this reference::list this reference
information the list::information the list
links it finds::links it finds
chain of references::chain of references
references from first::references from first
field class linklist::field class linklist
link first ref::link first ref
ref to first::ref to first
link on list::link on list
list public void::list public void
public void linklist::public void linklist
first = null::first = null
null no items::null no items
items on list::items on list
public boolean isempty::public boolean isempty
true if list::true if list
list is empty::list is empty
constructor for linklist::constructor for linklist
first to null::first to null
null this isn::null this isn
references are set::references are set
explicit constructor makes::explicit constructor makes
begins when first::begins when first
fact to determine::fact to determine
empty the insertfirst::empty the insertfirst
method the insertfirst::method the insertfirst
method of linklist::method of linklist
place to insert::place to insert
insert a link::insert a link
link because first::link because first
first already points::first already points
link to insert::link to insert
newly created link::newly created link
link to point::link to point
link this situation::link this situation
situation is shown::situation is shown
link in insertfirst::link in insertfirst
begin by creating::begin by creating
passed as arguments::passed as arguments
change the link::change the link
insert at start::insert at start
start of list::start of list
public void insertfirst::public void insertfirst
make new link::make new link
link link newlink::link link newlink
newlink old first::newlink old first
first = newlink::first = newlink
newlink first newlink::newlink first newlink
last two statements::last two statements
symbolized by arrows::symbolized by arrows
statements with figure::statements with figure
figure this kind::figure this kind
kind of reference::kind of reference
heart of linked::heart of linked
linked list algorithms::linked list algorithms
algorithms the deletefirst::algorithms the deletefirst
method the deletefirst::method the deletefirst
reverse of insertfirst::reverse of insertfirst
disconnects the first::disconnects the first
link by rerouting::link by rerouting
first to point::first to point
link is found::link is found
first link public::first link public
link public link::link public link
public link deletefirst::public link deletefirst
delete first item::delete first item
list not empty::list not empty
temp = first::temp = first
first save reference::first save reference
reference to link::reference to link
first = first.next::first = first.next
return temp return::return temp return
temp return deleted::temp return deleted
return deleted link::return deleted link
remove the first::remove the first
list we choose::list we choose
return the link::return the link
temp before deleting::temp before deleting
return the value::return the value
value of temp::value of temp
shows how first::shows how first
first is rerouted::first is rerouted
rerouted to delete::rerouted to delete
delete the object::delete the object
worry about deleting::worry about deleting
deleting the link::deleting the link
garbage collection process::garbage collection process
process will destroy::process will destroy
assumes the list::assumes the list
empty before calling::empty before calling
program should verify::program should verify
verify this fact::verify this fact
linked lists figure::linked lists figure
deleting a link::deleting a link
link the displaylist::link the displaylist
method to display::method to display
display the list::display the list
start at first::start at first
follow the chain::follow the chain
references from link::references from link
link to link::link to link
link a variable::link a variable
variable current points::variable current points
link in turn::link in turn
turn it starts::turn it starts
starts off pointing::starts off pointing
pointing to first::pointing to first
holds a reference::holds a reference
link the statement::link the statement
current = current.next::current = current.next
current.next changes current::current.next changes current
current to point::current to point
method public void::method public void
public void displaylist::public void displaylist
start at beginning::start at beginning
beginning of list::beginning of list
end of list::end of list
print data current::print data current
last link pointing::last link pointing
pointing to null::pointing to null
null it started::null it started
link was created::link was created
deletion first first::deletion first first
first first null::first first null
first null null::first null null
condition to terminate::condition to terminate
reaches the end::reaches the end
shows how current::shows how current
current.next current figure::current.next current figure
calls the displaylink::calls the displaylink
display the data::display the data
link the linklist.java::link the linklist.java
linklist.java program listing::linklist.java program listing
shows the complete::shows the complete
linklist.java program linklist.java::linklist.java program linklist.java
program linklist.java demonstrates::program linklist.java demonstrates
linklist.java demonstrates linked::linklist.java demonstrates linked
demonstrates linked list::demonstrates linked list
list to run::list to run
run this program::run this program
program c java::program c java
java linklistapp class::java linklistapp class
linklistapp class link::linklistapp class link
class link class::class link class
link class linklist::link class linklist
list public linklist::list public linklist
continued public void::continued public void
end class linklist::end class linklist
class linklist class::class linklist class
linklist class linklistapp::linklist class linklistapp
public static void::public static void
static void main::static void main
make new list::make new list
insert four items::insert four items
four items thelist.insertfirst::four items thelist.insertfirst
alink = thelist.deletefirst::alink = thelist.deletefirst
delete link system.out.print::delete link system.out.print
display it alink.displaylink::display it alink.displaylink
end class linklistapp::end class linklistapp
linked lists listing::linked lists listing
continued in main::continued in main
four new links::four new links
remove the items::remove the items
empty the empty::empty the empty
output from linklist.java::output from linklist.java
finding and deleting::finding and deleting
deleting specified links::deleting specified links
program adds methods::program adds methods
methods to search::methods to search
search a linked::search a linked
delete an item::delete an item
applet the complete::applet the complete
complete linklist2.java program::complete linklist2.java program
program is shown::program is shown
shown in listing::shown in listing
linklist2.java program linklist2.java::linklist2.java program linklist2.java
program linklist2.java demonstrates::program linklist2.java demonstrates
linklist2.java demonstrates linked::linklist2.java demonstrates linked
java linklist2app class::java linklist2app class
linklist2app class link::linklist2app class link
class link finding::class link finding
null no links::null no links
links on list::links on list
first it points::first it points
newlink now first::newlink now first
public link find::public link find
assumes non empty::assumes non empty
non empty list::non empty list
return null didn::return null didn
didn t find::didn t find
return current found::return current found
public link delete::public link delete
search for link::search for link
link link previous::link link previous
previous = current::previous = current
previous.next = current.next::previous.next = current.next
bypass it return::bypass it return
linklist class linklist2app::linklist class linklist2app
make list thelist.insertfirst::make list thelist.insertfirst
display list link::display list link
link with key::link with key
key + f.idata::key + f.idata
key + d.idata::key + d.idata
end class linklist2app::end class linklist2app
linklist2app the main::linklist2app the main
makes a list::makes a list
inserts four items::inserts four items
displays the resulting::displays the resulting
item with key::item with key
deletes the item::deletes the item
displays the list::displays the list
method the find::method the find
program the reference::program the reference
current initially points::current initially points
links by setting::links by setting
repeatedly to current.next::repeatedly to current.next
link s key::link s key
key is found::key is found
link if find::link if find
list without finding::list without finding
finding the desired::finding the desired
null the delete::null the delete
method the delete::method the delete
method is similar::method is similar
similar to find::similar to find
maintain a reference::maintain a reference
preceding the current::preceding the current
deletes the current::deletes the current
connect the preceding::connect the preceding
link is located::link is located
current is set::current is set
set to current.next::set to current.next
previous is set::previous is set
set to current::set to current
link preceding current::link preceding current
current to delete::current to delete
delete the current::delete the current
link is set::link is set
link a special::link a special
special case arises::special case arises
link is pointed::link is pointed
linklist s first::linklist s first
case the link::case the link
link is deleted::link is deleted
deleted by changing::deleted by changing
point to first.next::point to first.next
code that covers::code that covers
two possibilities found::two possibilities found
current.next bypass link::current.next bypass link
link other methods::link other methods
methods to insert::methods to insert
insert and delete::insert and delete
item and delete::item and delete
method could find::method could find
value and insert::value and insert
talk about list::talk about list
current next null::current next null
null first null::null first null
first null previous::first null previous
null previous current::null previous current
double ended lists::double ended lists
lists a double::lists a double
double ended list::double ended list
list is similar::list is similar
ordinary linked list::ordinary linked list
feature a reference::feature a reference
lists first last::lists first last
list the reference::list the reference
last link permits::last link permits
ordinary single ended::ordinary single ended
single ended list::single ended list
list by iterating::list by iterating
reach the end::reach the end
approach is inefficient::approach is inefficient
makes the double::makes the double
ended list suitable::ended list suitable
situation is implementing::situation is implementing
implementing a queue::implementing a queue
demonstrates a doubleended::demonstrates a doubleended
don t confuse::don t confuse
confuse the double::confuse the double
doubly linked list::doubly linked list
firstlastlist.java program firstlastlist.java::firstlastlist.java program firstlastlist.java
program firstlastlist.java demonstrates::program firstlastlist.java demonstrates
firstlastlist.java demonstrates list::firstlastlist.java demonstrates list
list with first::list with first
first and last::first and last
references to run::references to run
java firstlastapp class::java firstlastapp class
firstlastapp class link::firstlastapp class link
public long ddata::public long ddata
long ddata data::long ddata data
display this link::display this link
link class firstlastlist::link class firstlastlist
first link private::first link private
link private link::link private link
private link last::private link last
link last ref::link last ref
ref to last::ref to last
last link public::last link public
link public firstlastlist::link public firstlastlist
list yet last::list yet last
last = null::last = null
insert at front::insert at front
front of list::front of list
last = newlink::last = newlink
newlink newlink last::newlink newlink last
newlink last newlink.next::newlink last newlink.next
public void insertlast::public void insertlast
insert at end::insert at end
newlink else last.next::newlink else last.next
last.next = newlink::last.next = newlink
newlink old last::newlink old last
last newlink last::last newlink last
public long deletefirst::public long deletefirst
delete first link::delete first link
temp = first.ddata::temp = first.ddata
item double ended::item double ended
null null last::null null last
null last first::null last first
end class firstlastlist::end class firstlastlist
class firstlastlist class::class firstlastlist class
firstlastlist class firstlastapp::firstlastlist class firstlastapp
list firstlastlist thelist::list firstlastlist thelist
insert at rear::insert at rear
first two items::first two items
two items thelist.deletefirst::two items thelist.deletefirst
end class firstlastapp::end class firstlastapp
continued for simplicity::continued for simplicity
reduced the number::reduced the number
number of data::number of data
makes it easier::makes it easier
easier to display::easier to display
display the link::display the link
inserts three items::inserts three items
deletes the first::deletes the first
items and displays::items and displays
notice how repeated::notice how repeated
reverse the order::reverse the order
preserve the order::preserve the order
order the double::order the double
ended list class::ended list class
firstlastlist as discussed::firstlastlist as discussed
null the class::null the class
list this process::list this process
process involves modifying::process involves modifying
involves modifying last.next::involves modifying last.next
last.next to point::last.next to point
last to point::last to point
insertion first last::insertion first last
list the insertion::list the insertion
insertion and deletion::insertion and deletion
routines are similar::routines are similar
routines must watch::routines must watch
link if inserting::link if inserting
beginning with insertfirst::beginning with insertfirst
first is set::first is set
set to point::set to point
end with insertlast::end with insertlast
last is set::last is set
point to null::point to null
making a list::making a list
list double ended::list double ended
double ended doesn::double ended doesn
delete the last::delete the last
changed to null::changed to null
link were deleted::link were deleted
traverse the entire::traverse the entire
list to find::list to find
find the last::find the last
linked list efficiency::linked list efficiency
list efficiency insertion::list efficiency insertion
fast they involve::fast they involve
specific item requires::specific item requires
item requires searching::item requires searching
half the items::half the items
list this requires::list this requires
comparisons an array::comparisons an array
item is inserted::item is inserted
inserted or deleted::inserted or deleted
deleted the increased::deleted the increased
takes much longer::takes much longer
advantage of linked::advantage of linked
lists over arrays::lists over arrays
expand to fill::expand to fill
memory the size::memory the size
array is fixed::array is fixed
leads to inefficiency::leads to inefficiency
out of room::out of room
solve this problem::solve this problem
expand in fixed::expand in fixed
fixed sized increments::fixed sized increments
doubling the size::doubling the size
linked list abstract::linked list abstract
list abstract data::list abstract data
gears and discuss::gears and discuss
discuss a topic::discuss a topic
general than linked::general than linked
linked lists abstract::linked lists abstract
lists abstract data::lists abstract data
adt roughly speaking::adt roughly speaking
data structure focusing::data structure focusing
linked lists stacks::linked lists stacks
queues are examples::queues are examples
examples of adts::examples of adts
implemented using arrays::implemented using arrays
discussion of adts::discussion of adts
implemented using linked::implemented using linked
lists this discussion::lists this discussion
discussion will demonstrate::discussion will demonstrate
demonstrate the abstract::demonstrate the abstract
nature of stacks::nature of stacks
implementation a stack::implementation a stack
created a stack::created a stack
stack in chapter::stack in chapter
ordinary java array::ordinary java array
array to hold::array to hold
hold the stack::hold the stack
stack s data::stack s data
data the stack::data the stack
stack s push::stack s push
out by array::out by array
data and data::data and data
data = arr::data = arr
list to hold::list to hold
hold a stack::hold a stack
case the push::case the push
out by operations::out by operations
operations like thelist.insertfirst::operations like thelist.insertfirst
data = thelist.deletefirst::data = thelist.deletefirst
stack class calls::stack class calls
class calls push::class calls push
items without knowing::items without knowing
stack is implemented::stack is implemented
linked list listing::linked list listing
class called linkstack::class called linkstack
purists would argue::purists would argue
stack because users::stack because users
linkstack.java program linkstack.java::linkstack.java program linkstack.java
program linkstack.java demonstrates::program linkstack.java demonstrates
demonstrates a stack::demonstrates a stack
java linkstackapp class::java linkstackapp class
linkstackapp class link::linkstackapp class link
item on list::item on list
list yet public::list yet public
return temp.ddata return::return temp.ddata return
temp.ddata return deleted::temp.ddata return deleted
linklist class linkstack::linklist class linkstack
private linklist thelist::private linklist thelist
linklist thelist public::linklist thelist public
thelist public linkstack::thelist public linkstack
public void push::public void push
item on top::item on top
top of stack::top of stack
public long pop::public long pop
item from top::item from top
true if stack::true if stack
stack is empty::stack is empty
public void displaystack::public void displaystack
end class linkstack::end class linkstack
class linkstack class::class linkstack class
linkstack class linkstackapp::linkstack class linkstackapp
make stack abstract::make stack abstract
stack abstract data::stack abstract data
push items thestack.push::push items thestack.push
display stack thestack.push::display stack thestack.push
display stack thestack.pop::display stack thestack.pop
pop items thestack.pop::pop items thestack.pop
end class linkstackapp::end class linkstackapp
linkstackapp the main::linkstackapp the main
creates a stack::creates a stack
pushes two items::pushes two items
displays the stack::displays the stack
two more items::two more items
pops two items::pops two items
program the main::program the main
linkstackapp class relates::linkstackapp class relates
class the linkstack::class the linkstack
linkstack class relates::linkstack class relates
communication between main::communication between main
statement in main::statement in main
calls the push::calls the push
method in turn::method in turn
turn calls insertfirst::turn calls insertfirst
display the stack::display the stack
code in main::code in main
list based linkstack::list based linkstack
based linkstack class::based linkstack class
array based stack::array based stack
based stack class::based stack class
shows a queue::shows a queue
double ended linked::double ended linked
ended linked list::ended linked list
linkqueue.java program linkqueue.java::linkqueue.java program linkqueue.java
program linkqueue.java demonstrates::program linkqueue.java demonstrates
linkqueue.java demonstrates queue::linkqueue.java demonstrates queue
demonstrates queue implemented::demonstrates queue implemented
implemented as double::implemented as double
java linkqueueapp class::java linkqueueapp class
linkqueueapp class link::linkqueueapp class link
first item private::first item private
item private link::item private link
last item public::last item public
item public firstlastlist::item public firstlastlist
firstlastlist class linkqueue::firstlastlist class linkqueue
private firstlastlist thelist::private firstlastlist thelist
firstlastlist thelist public::firstlastlist thelist public
thelist public linkqueue::thelist public linkqueue
ended list public::ended list public
list public boolean::list public boolean
true if queue::true if queue
queue is empty::queue is empty
public void insert::public void insert
rear of queue::rear of queue
public long remove::public long remove
front of queue::front of queue
public void displayqueue::public void displayqueue
end class linkqueue::end class linkqueue
class linkqueue class::class linkqueue class
linkqueue class linkqueueapp::linkqueue class linkqueueapp
insert items thequeue.insert::insert items thequeue.insert
display queue thequeue.insert::display queue thequeue.insert
display queue thequeue.remove::display queue thequeue.remove
remove items thequeue.remove::remove items thequeue.remove
creates a queue::creates a queue
inserts two items::inserts two items
removes two items::removes two items
operations the queue::operations the queue
queue is displayed::queue is displayed
class are implemented::class are implemented
substituted a linked::substituted a linked
implement the queue::implement the queue
linkstack.java and linkqueue.java::linkstack.java and linkqueue.java
linkqueue.java programs emphasize::linkqueue.java programs emphasize
emphasize that stacks::emphasize that stacks
queues are conceptual::queues are conceptual
implementations a stack::implementations a stack
stack is abstract::stack is abstract
continued the push::continued the push
implement these operations::implement these operations
list as opposed::list as opposed
stack or queue::stack or queue
queue one consideration::queue one consideration
predict the amount::predict the amount
amount of data::amount of data
isn t clear::isn t clear
major consideration data::major consideration data
consideration data types::consideration data types
types and abstraction::types and abstraction
term abstract data::term abstract data
abstract data type::abstract data type
data type part::data type part
return to abstract::return to abstract
types the phrase::types the phrase
phrase data type::phrase data type
data type covers::data type covers
covers a lot::covers a lot
lot of ground::lot of ground
applied to built::applied to built
built in types::built in types
hear the term::hear the term
things a data::things a data
characteristics and permissible::characteristics and permissible
type int variables::type int variables
variables in java::variables in java
type s permissible::type s permissible
understanding the type::understanding the type
type means understanding::type means understanding
understanding what operations::understanding what operations
advent of object::advent of object
object oriented programming::object oriented programming
types using classes::types using classes
data types represent::data types represent
types represent numerical::types represent numerical
represent numerical quantities::represent numerical quantities
similar to primitive::similar to primitive
define a class::define a class
fields for hours::fields for hours
class for fractions::class for fractions
numerator and denominator::numerator and denominator
class for extra::class for extra
extra long numbers::extra long numbers
represent the digits::represent the digits
added and subtracted::added and subtracted
subtracted like int::subtracted like int
methods with functional::methods with functional
notation like add::notation like add
quantity oriented classes::quantity oriented classes
applied to classes::applied to classes
classes that don::classes that don
aspect in fact::aspect in fact
represents a data::represents a data
class is made::class is made
queue is represented::queue is represented
type a stack::type a stack
arrangement of data::arrangement of data
set of operations::set of operations
linked lists abstraction::linked lists abstraction
abstraction the word::abstraction the word
word abstract means::word abstract means
abstract means considered::abstract means considered
specifications or implementation::specifications or implementation
implementation an abstraction::implementation an abstraction
essence or important::essence or important
office of president::office of president
occupy that office::occupy that office
office the powers::office the powers
powers and responsibilities::powers and responsibilities
individual office holders::individual office holders
considered without regard::considered without regard
list of operations::list of operations
operations specifically excluded::operations specifically excluded
out their tasks::out their tasks
told what methods::told what methods
methods to call::methods to call
work the meaning::work the meaning
meaning of abstract::meaning of abstract
applied to data::applied to data
means the data::means the data
data is stored::data is stored
stored become invisible::stored become invisible
store the data::store the data
work the user::work the user
tree the interface::tree the interface
interface an adt::interface an adt
class user sees::class user sees
similar methods form::similar methods form
form the interface::form the interface
interface adt lists::interface adt lists
list a list::list a list
group of items::group of items
string or houses::string or houses
street lists support::street lists support
support certain fundamental::support certain fundamental
insert an item::insert an item
read an item::read an item
confuse the adt::confuse the adt
chapter a list::chapter a list
list is defined::list is defined
interface the specific::interface the specific
arrays and linked::arrays and linked
lists the list::lists the list
data structures abstract::data structures abstract
structures abstract data::structures abstract data
tool the adt::tool the adt
software design process::software design process
last item inserted::last item inserted
inserted the first::inserted the first
key an item::key an item
answering such questions::answering such questions
represent the data::represent the data
code the methods::code the methods
methods that access::methods that access
access the data::access the data
data by decoupling::data by decoupling
decoupling the specification::decoupling the specification
simplify the design::simplify the design
make it easier::make it easier
easier to change::easier to change
change the implementation::change the implementation
implementation without breaking::implementation without breaking
breaking the user::breaking the user
user s code::user s code
underlying data structure::underlying data structure
chosen to make::chosen to make
operations as efficient::operations as efficient
access to element::access to element
linked list representation::linked list representation
list representation isn::list representation isn
good because random::good because random
random access isn::random access isn
array note remember::array note remember
conceptual tool data::conceptual tool data
tool data storage::tool data storage
adts a linked::adts a linked
implement another data::implement another data
queue a linked::queue a linked
array type structure::array type structure
context sorted lists::context sorted lists
requirement that data::requirement that data
data be stored::data be stored
stored in order::stored in order
maintain the data::maintain the data
data in sorted::data in sorted
items are arranged::items are arranged
arranged in sorted::arranged in sorted
order by key::order by key
key value deletion::key value deletion
array the advantages::array the advantages
array are speed::array are speed
speed of insertion::speed of insertion
list can expand::list can expand
lists available memory::lists available memory
array is limited::array is limited
difficult to implement::difficult to implement
application for sorted::application for sorted
sorted lists sorting::sorted lists sorting
lists sorting data::lists sorting data
data a sorted::data a sorted
implement a priority::implement a priority
implementation the linklist::implementation the linklist
workshop applet introduced::workshop applet introduced
chapter demonstrates sorted::chapter demonstrates sorted
sorted lists work::sorted lists work
button to create::button to create
button the result::button the result
list with data::list with data
button to insert::button to insert
traverses the links::traverses the links
finds the correct::finds the correct
press of ins::press of ins
redrawn to regularize::redrawn to regularize
regularize its appearance::regularize its appearance
button and delete::button and delete
del button java::del button java
button java code::button java code
code to insert::code to insert
list to insert::list to insert
place to put::place to put
put the item::put the item
link and changing::link and changing
cases the link::cases the link
code public void::code public void
insert in order::insert in order
previous = null::previous = null
first link current::first link current
current = first::current = first
first until end::first until end
null && key::null && key
previous.next = newlink::previous.next = newlink
newlink old prev::newlink old prev
prev newlink newlink.next::prev newlink newlink.next
newlink.next = current::newlink.next = current
newlink old current::newlink old current
maintain a previous::maintain a previous
modify the previous::modify the previous
field to point::field to point
link after creating::link after creating
linked lists prepare::linked lists prepare
prepare to search::prepare to search
point by setting::point by setting
current to first::current to first
previous to null::previous to null
null this step::null this step
step is important::step is important
value to determine::value to determine
loop is similar::loop is similar
condition the loop::condition the loop
key is inserted::key is inserted
loop also terminates::loop also terminates
terminates if current::terminates if current
current is null::current is null
element is null::element is null
empty to begin::empty to begin
case we set::case we set
field to current::field to current
value the sortedlist.java::value the sortedlist.java
program the sortedlist.java::program the sortedlist.java
sortedlist.java example shown::sortedlist.java example shown
presents a sortedlist::presents a sortedlist
class with insert::class with insert
counterpart in non::counterpart in non
non sorted lists::non sorted lists
sorted lists listing::sorted lists listing
sortedlist.java program sortedlist.java::sortedlist.java program sortedlist.java
program sortedlist.java demonstrates::program sortedlist.java demonstrates
sortedlist.java demonstrates sorted::sortedlist.java demonstrates sorted
demonstrates sorted list::demonstrates sorted list
java sortedlistapp class::java sortedlistapp class
sortedlistapp class link::sortedlistapp class link
link class sortedlist::link class sortedlist
list public sortedlist::list public sortedlist
return & delete::return & delete
save first first::save first first
delete first return::delete first return
first return temp::first return temp
temp return value::temp return value
end class sortedlist::end class sortedlist
class sortedlist class::class sortedlist class
sortedlist class sortedlistapp::sortedlist class sortedlistapp
create new list::create new list
list sortedlist thesortedlist::list sortedlist thesortedlist
display list thesortedlist.insert::display list thesortedlist.insert
display list thesortedlist.remove::display list thesortedlist.remove
remove an item::remove an item
end class sortedlistapp::end class sortedlistapp
sortedlistapp in main::sortedlistapp in main
insert two items::insert two items
items with key::items with key
values are inserted::values are inserted
routine correctly handles::routine correctly handles
handles these special::handles these special
remove one item::remove one item
list is displayed::list is displayed
output from sortedlist.java::output from sortedlist.java
efficiency of sorted::efficiency of sorted
sorted linked lists::sorted linked lists
linked lists insertion::linked lists insertion
deletion of arbitrary::deletion of arbitrary
sorted linked list::sorted linked list
linked list require::linked list require
found by stepping::found by stepping
application frequently accesses::application frequently accesses
accesses the minimum::accesses the minimum
fast insertion isn::fast insertion isn
isn t critical::isn t critical
choice a priority::choice a priority
list insertion sort::list insertion sort
sort a sorted::sort a sorted
fairly efficient sorting::fairly efficient sorting
efficient sorting mechanism::efficient sorting mechanism
sorting mechanism suppose::sorting mechanism suppose
array of unsorted::array of unsorted
unsorted data items::unsorted data items
array and insert::array and insert
sorted order automatically::sorted order automatically
list and put::list and put
sorted this type::sorted this type
type of sort::type of sort
substantially more efficient::substantially more efficient
usual insertion sort::usual insertion sort
described in chapter::described in chapter
process because inserting::process because inserting
inserting each item::inserting each item
sorted list involves::sorted list involves
list involves comparing::list involves comparing
average of half::average of half
items to insert::items to insert
item is copied::item is copied
shows the listinsertionsort.java::shows the listinsertionsort.java
items of type::items of type
listinsertionsort.java program listinsertionsort.java::listinsertionsort.java program listinsertionsort.java
program listinsertionsort.java demonstrates::program listinsertionsort.java demonstrates
listinsertionsort.java demonstrates sorted::listinsertionsort.java demonstrates sorted
sorting to run::sorting to run
java listinsertionsortapp class::java listinsertionsortapp class
listinsertionsortapp class link::listinsertionsortapp class link
initialize list public::initialize list public
null initialize list::null initialize list
copy array insert::copy array insert
null && k.ddata::null && k.ddata
prev k k.next::prev k k.next
k.next = current::k.next = current
class sortedlist sorted::class sortedlist sorted
sortedlist sorted lists::sortedlist sorted lists
continued class listinsertionsortapp::continued class listinsertionsortapp
array of links::array of links
array with links::array with links
random number int::random number int
make link linkarray::make link linkarray
put in array::put in array
display array contents::display array contents
array contents system.out.print::array contents system.out.print
initialized with array::initialized with array
array sortedlist thesortedlist::array sortedlist thesortedlist
links from list::links from list
list to array::list to array
end class listinsertionsortapp::end class listinsertionsortapp
listinsertionsortapp this program::listinsertionsortapp this program
displays the values::displays the values
sample output unsorted::sample output unsorted
output unsorted array::output unsorted array
continued the output::continued the output
values are generated::values are generated
constructor for sortedlist::constructor for sortedlist
takes an array::takes an array
array of link::array of link
argument and inserts::argument and inserts
inserts the entire::inserts the entire
newly created list::newly created list
list by doing::list by doing
helps make things::helps make things
make things easier::make things easier
made a change::made a change
accepts a link::accepts a link
store link objects::store link objects
create each link::create each link
long value passed::long value passed
argument the downside::argument the downside
array based insertion::array based insertion
based insertion sort::based insertion sort
memory the array::memory the array
array and linked::array and linked
linked list class::linked list class
list class handy::list class handy
arrays that aren::arrays that aren
large doubly linked::large doubly linked
examine another variation::examine another variation
list a potential::list a potential
problem with ordinary::problem with ordinary
ordinary linked lists::ordinary linked lists
difficult to traverse::difficult to traverse
list a statement::list a statement
statement like current::statement like current
previous link depending::previous link depending
limitation could pose::limitation could pose
imagine a text::imagine a text
store the text::store the text
text each text::text each text
screen is stored::screen is stored
string object embedded::string object embedded
editor s user::editor s user
moves the cursor::moves the cursor
link to manipulate::link to manipulate
manipulate or display::manipulate or display
link this isn::link this isn
make a single::make a single
single step upward::single step upward
list the secret::list the secret
link this type::link this type
type of list::type of list
list is shown::list is shown
list the beginning::list the beginning
public link previous::public link previous
link previous previous::link previous previous
previous previous link::previous previous link
insert or delete::insert or delete
delete a link::delete a link
two two attachments::two two attachments
linked list doesn::linked list doesn
keeping a reference::keeping a reference
show the complete::show the complete
doublylinkedlist class traversal::doublylinkedlist class traversal
traversal two display::traversal two display
two display methods::two display methods
display methods demonstrate::display methods demonstrate
methods demonstrate traversal::methods demonstrate traversal
list the displayforward::list the displayforward
lists the displaybackward::lists the displaybackward
similar but starts::similar but starts
list and proceeds::list and proceeds
element s previous::element s previous
field this code::field this code
code fragment shows::code fragment shows
process works link::process works link
works link current::works link current
current = last::current = last
start at end::start at end
current = current.previous::current = current.previous
move to previous::move to previous
last next prev::last next prev
prev next prev::prev next prev
prev null null::prev null null
terms like previous::terms like previous
substitute directionneutral terms::substitute directionneutral terms
left and right::left and right
included several insertion::included several insertion
class the insertfirst::class the insertfirst
link this process::link this process
process is shown::process is shown
first link prev::first link prev
null new link::null new link
last else first.previous::last else first.previous
first.previous = newlink::first.previous = newlink
newlink the insertlast::newlink the insertlast
image of insertfirst::image of insertfirst
bit more complicated::bit more complicated
found this procedure::found this procedure
procedure is handled::procedure is handled
last next current::last next current
null null figure::null null figure
field must point::field must point
last must point::last must point
code that deals::code that deals
newlink.next = null::newlink.next = null
null newlink null::null newlink null
newlink null last::newlink null last
newlink.next = current.next::newlink.next = current.next
current.next.previous = newlink::current.next.previous = newlink
newlink.previous = current::newlink.previous = current
current old current::current old current
current newlink current.next::current newlink current.next
current.next = newlink::current.next = newlink
two dot operators::two dot operators
single dot operator::single dot operator
operator the expression::operator the expression
expression current.next.previous means::expression current.next.previous means
means the previous::means the previous
link current deletion::link current deletion
deletion routines deletefirst::deletion routines deletefirst
straightforward in deletekey::straightforward in deletekey
key being deleted::key being deleted
deleted is current::deleted is current
assuming the link::assuming the link
field of current.previous::field of current.previous
point to current.next::point to current.next
field of current.next::field of current.next
current.next is set::current.next is set
point to current.previous::point to current.previous
current.previous this disconnects::current.previous this disconnects
disconnects the current::disconnects the current
two statements carry::two statements carry
current.previous.next = current.next::current.previous.next = current.next
current.next.previous = current.previous::current.next.previous = current.previous
current.previous doubly linked::current.previous doubly linked
first current.prev last::first current.prev last
prev prev prev::prev prev prev
null null current::null null current
null current current.next::null current current.next
current current.next figure::current current.next figure
deleting an arbitrary::deleting an arbitrary
arbitrary link special::arbitrary link special
link special cases::link special cases
special cases arise::special cases arise
first or last::first or last
list because first::list because first
code from deletekey::code from deletekey
dealing with link::dealing with link
first = current.next::first = current.next
first old previous::first old previous
last item last::last item last
last = current.previous::last = current.previous
current.previous old previous::current.previous old previous
last old previous::last old previous
current.previous the doublylinked.java::current.previous the doublylinked.java
doublylinked.java program listing::doublylinked.java program listing
complete doublylinked.java program::complete doublylinked.java program
routines just discussed::routines just discussed
doublylinked.java program doublylinked.java::doublylinked.java program doublylinked.java
program doublylinked.java demonstrates::program doublylinked.java demonstrates
demonstrates doubly linked::demonstrates doubly linked
java doublylinkedapp class::java doublylinkedapp class
doublylinkedapp class link::doublylinkedapp class link
link class doublylinkedlist::link class doublylinkedlist
item public doublylinkedlist::item public doublylinkedlist
linked lists public::linked lists public
lists public boolean::lists public boolean
last newlink newlink.previous::last newlink newlink.previous
newlink.previous = last::newlink.previous = last
last old last::last old last
last else first.next.previous::last else first.next.previous
first.next.previous = null::first.next.previous = null
public link deletelast::public link deletelast
delete last link::delete last link
link doubly linked::link doubly linked
temp = last::temp = last
null else last.previous.next::null else last.previous.next
last.previous.next = null::last.previous.next = null
null old previous::null old previous
previous null last::previous null last
last = last.previous::last = last.previous
last.previous old previous::last.previous old previous
previous last return::previous last return
last return temp::last return temp
key public boolean::key public boolean
public boolean insertafter::public boolean insertafter
match is found::match is found
return false didn::return false didn
current newlink return::current newlink return
newlink return true::newlink return true
return true found::return true found
public link deletekey::public link deletekey
current.previous return current::current.previous return current
return current return::return current return
current return value::current return value
public void displayforward::public void displayforward
display data current::display data current
public void displaybackward::public void displaybackward
end class doublylinkedlist::end class doublylinkedlist
class doublylinkedlist class::class doublylinkedlist class
doublylinkedlist class doublylinkedapp::doublylinkedlist class doublylinkedapp
list doublylinkedlist thelist::list doublylinkedlist thelist
list forward thelist.displaybackward::list forward thelist.displaybackward
display list backward::display list backward
list backward thelist.deletefirst::list backward thelist.deletefirst
first item thelist.deletelast::first item thelist.deletelast
delete last item::delete last item
last item thelist.deletekey::last item thelist.deletekey
list forward thelist.insertafter::list forward thelist.insertafter
end class doublylinkedapp::end class doublylinkedapp
doublylinkedapp in main::doublylinkedapp in main
insert some items::insert some items
display the items::display the items
forward and backward::forward and backward
delete the first::delete the first
isn t empty::isn t empty
simplicity we don::simplicity we don
don t show::don t show
list before attempting::list before attempting
attempting such insertions::attempting such insertions
insertions and deletions::insertions and deletions
deletions doubly linked::deletions doubly linked
list as basis::list as basis
basis for deques::basis for deques
list can find::list can find
method the method::method the method
list and examines::list and examines
examines each link::examines each link
finds one matching::finds one matching
matching the search::matching the search
key other operations::key other operations
link or inserting::link or inserting
don t give::don t give
give the user::give the user
user any control::user any control
suppose you wanted::suppose you wanted
wanted to traverse::wanted to traverse
traverse a list::traverse a list
performing some operation::performing some operation
imagine a personnel::imagine a personnel
personnel file stored::personnel file stored
increase the wages::increase the wages
paid minimum wage::paid minimum wage
minimum or suppose::minimum or suppose
list of mailorder::list of mailorder
decided to delete::decided to delete
delete all customers::delete all customers
operations are easy::operations are easy
increment the index::increment the index
index to point::index to point
fixed index numbers::fixed index numbers
provide a list::provide a list
list s user::list s user
repeatedly use find::repeatedly use find
requires many comparisons::requires many comparisons
comparisons to find::comparisons to find
find each link::find each link
efficient to step::efficient to step
step from link::step from link
meets certain criteria::meets certain criteria
criteria and performing::criteria and performing
examine or modify::examine or modify
modify the link::modify the link
increment the reference::increment the reference
access the link::access the link
assuming we create::assuming we create
installed one possibility::installed one possibility
access a link::access a link
link using current::link using current
current and increment::current and increment
current to move::current to move
link one problem::link one problem
user to create::user to create
object oriented language::object oriented language
natural to embed::natural to embed
embed each reference::embed each reference
object this object::object this object
class an iterator::class an iterator
iterator class objects::iterator class objects
objects containing references::objects containing references
references to items::references to items
items in data::items in data
traverse these structures::traverse these structures
commonly called iterators::commonly called iterators
private link current::private link current
link the iterator::link the iterator
iterator currently points::iterator currently points
user might create::user might create
create a list::create a list
create an iterator::create an iterator
letting the list::letting the list
create the iterator::create the iterator
iterator is easier::iterator is easier
pass the iterator::pass the iterator
iterator certain information::iterator certain information
add a getiterator::add a getiterator
class this method::class this method
returns a suitable::returns a suitable
suitable iterator object::suitable iterator object
user would invoke::user would invoke
invoke an iterator::invoke an iterator
iterator public static::iterator public static
make list listiterator::make list listiterator
list listiterator iter1::list listiterator iter1
iter1 = thelist.getiterator::iter1 = thelist.getiterator
linked lists link::linked lists link
lists link alink::lists link alink
alink = iter1.getcurrent::alink = iter1.getcurrent
link at iterator::link at iterator
made the iterator::made the iterator
link it points::link it points
statements we call::statements we call
call the iterator::call the iterator
iterator object iter1::iterator object iter1
iter1 to emphasize::iter1 to emphasize
make more iterators::make more iterators
iterator always points::iterator always points
shows two iterators::shows two iterators
two iterators pointing::two iterators pointing
pointing to links::pointing to links
null current list::null current list
current list iterator::current list iterator
linked list current::linked list current
list current list::list current list
list iterators additional::list iterators additional
iterators additional iterator::iterators additional iterator
additional iterator features::additional iterator features
previous field made::previous field made
field made performing::field made performing
performing certain operations::performing certain operations
change the value::change the value
list s first::list s first
field for instance::field for instance
access a private::access a private
list one solution::list one solution
list to pass::list to pass
pass a reference::pass a reference
creates the iterator::creates the iterator
iterator this reference::iterator this reference
reference is stored::reference is stored
iterator the list::iterator the list
iterator to change::iterator to change
first these linklist::first these linklist
introduces an element::introduces an element
element of risk::element of risk
class that incorporates::class that incorporates
incorporates these additional::incorporates these additional
methods class listiterator::methods class listiterator
link current reference::link current reference
reference to current::reference to current
current link private::current link private
private link previous::private link previous
link previous reference::link previous reference
reference to previous::reference to previous
previous link private::previous link private
link private linklist::link private linklist
private linklist ourlist::private linklist ourlist
linklist ourlist reference::linklist ourlist reference
reference to parent::reference to parent
parent list public::parent list public
public void reset::public void reset
set to start::set to start
current = ourlist.getfirst::current = ourlist.getfirst
current first previous::current first previous
null previous null::null previous null
public void nextlink::public void nextlink
current set previous::current set previous
provided by making::provided by making
making the iterator::making the iterator
class a friend::class a friend
armor of data::armor of data
data hiding iterator::data hiding iterator
hiding iterator methods::hiding iterator methods
iterator methods additional::iterator methods additional
methods additional methods::methods additional methods
methods can make::methods can make
make the iterator::make the iterator
iterator a flexible::iterator a flexible
flexible and powerful::flexible and powerful
class all operations::class all operations
operations previously performed::operations previously performed
class that involve::class that involve
sets the iterator::sets the iterator
moves the iterator::moves the iterator
returns the link::returns the link
deletes the link::deletes the link
iterator the user::iterator the user
user can position::user can position
position the iterator::position the iterator
iterator using reset::iterator using reset
list with atend::list with atend
operations shown deciding::operations shown deciding
deciding which tasks::deciding which tasks
easy an insertbefore::easy an insertbefore
handled with getcurrent::handled with getcurrent
iterator the interiterator.java::iterator the interiterator.java
program the interiterator.java::program the interiterator.java
interiterator.java program includes::interiterator.java program includes
includes an interactive::includes an interactive
interface that permits::interface that permits
permits the user::permits the user
user to control::user to control
control the iterator::control the iterator
started the program::started the program
actions by typing::actions by typing
letter s show::letter s show
show the list::show the list
contents r reset::contents r reset
reset the iterator::reset the iterator
link b insert::link b insert
link a insert::link a insert
link d delete::link d delete
current link listing::current link listing
complete interiterator.java program::complete interiterator.java program
interiterator.java program listing::interiterator.java program listing
interiterator.java program interiterator.java::interiterator.java program interiterator.java
program interiterator.java demonstrates::program interiterator.java demonstrates
interiterator.java demonstrates iterators::interiterator.java demonstrates iterators
listlistiterator to run::listlistiterator to run
java interiterapp import::java interiterapp import
interiterapp import java.io::interiterapp import java.io
data item iterators::data item iterators
public link getfirst::public link getfirst
value of first::value of first
public void setfirst::public void setfirst
public listiterator getiterator::public listiterator getiterator
return new listiterator::return new listiterator
linklist class listiterator::linklist class listiterator
link current current::link current current
current current link::current current link
ourlist our linked::ourlist our linked
linked list public::linked list public
list public listiterator::list public listiterator
ourlist = list::ourlist = list
public boolean atend::public boolean atend
true if last::true if last
public link getcurrent::public link getcurrent
public void insertafter::public void insertafter
current link link::current link link
current = newlink::current = newlink
public void insertbefore::public void insertbefore
newlink.next = ourlist.getfirst::newlink.next = ourlist.getfirst
newlink.next = previous.next::newlink.next = previous.next
public long deletecurrent::public long deletecurrent
item at current::item at current
value = current.ddata::value = current.ddata
end class listiterator::end class listiterator
class listiterator class::class listiterator class
listiterator class interiterapp::listiterator class interiterapp
iter long value::iter long value
long value iter1.insertafter::long value iter1.insertafter
insert items iter1.insertafter::insert items iter1.insertafter
enter first letter::enter first letter
letter of show::letter of show
choice = getchar::choice = getchar
user s option::user s option
case s show::case s show
case r reset::case r reset
case n advance::case n advance
value = iter1.getcurrent::value = iter1.getcurrent
returned + value::returned + value
case b insert::case b insert
insert before current::insert before current
value to insert::value to insert
value = getint::value = getint
case a insert::case a insert
insert after current::insert after current
case d delete::case d delete
delete current item::delete current item
value = iter1.deletecurrent::value = iter1.deletecurrent
deleted + value::deleted + value
break default system.out.println::break default system.out.println
public static string::public static string
static string getstring::static string getstring
public static char::public static char
static char getchar::static char getchar
public static int::public static int
static int getint::static int getint
end class interiterapp::end class interiterapp
interiterapp the main::interiterapp the main
user to interact::user to interact
resets the iterator::resets the iterator
forward two links::forward two links
list again enter::list again enter
delete r enter::delete r enter
delete n enter::delete n enter
delete g returned::delete g returned
delete b enter::delete b enter
delete a enter::delete a enter
program will give::program will give
class is deciding::class is deciding
iterator should point::iterator should point
item with deletecurrent::item with deletecurrent
end up pointing::end up pointing
keeping the iterator::keeping the iterator
item is convenient::item is convenient
out other operations::out other operations
reset the list::reset the list
list s previous::list s previous
move the iterator::move the iterator
deleted the item::deleted the item
iterator is set::iterator is set
list following calls::list following calls
calls to insertbefore::calls to insertbefore
return with current::return with current
newly inserted item::newly inserted item
item the atend::item the atend
last valid link::last valid link
iterator points past::iterator points past
past the last::past the last
list becomes awkward::list becomes awkward
perform an operation::perform an operation
link before checking::link before checking
terminating the loop::terminating the loop
singly linked list::singly linked list
careful when writing::careful when writing
writing a loop::writing a loop
loop that iterates::loop that iterates
linked lists iterative::linked lists iterative
lists iterative operations::lists iterative operations
traverse the list::traverse the list
fragment that displays::fragment that displays
list s displaylist::list s displaylist
first long value::first long value
.ddata display link::.ddata display link
display link system.out.println::display link system.out.println
display it system.out.println::display it system.out.println
check with isempty::check with isempty
delete all items::delete all items
items with keys::items with keys
insert links iter1.insertafter::insert links iter1.insertafter
display list iter1.reset::display list iter1.reset
first link link::first link link
link link alink::link link alink
interiterapp we insert::interiterapp we insert
insert five links::insert five links
links and display::links and display
deleting those links::deleting those links
links with keys::links with keys
important to check::important to check
linked lists::linked lists
data storage::data storage
storage structures::storage structures
unordered array::unordered array
ordered array::ordered array
storage structure::storage structure
linked list::linked list
list linked::list linked
generalpurpose storage::generalpurpose storage
versatile mechanism::versatile mechanism
general purpose::general purpose
purpose databases::purpose databases
frequent random::frequent random
random access::random access
individual items::individual items
index linked::index linked
lists aren::lists aren
storage problems::storage problems
popular structures::popular structures
doubleended lists::doubleended lists
sorted lists::sorted lists
list elements::list elements
abstract data::abstract data
data types::data types
arrays links::arrays links
data item::data item
similar links::similar links
makes sense::makes sense
separate class::separate class
link object::link object
first link::first link
lists linked::lists linked
first data::first data
data link::data link
null figure::null figure
class link::class link
link class::link class
public int::public int
int idata::int idata
idata data::idata data
public double::public double
double ddata::double ddata
ddata data::ddata data
public link::public link
class definition::class definition
data items::data items
typical application::typical application
personnel record::personnel record
social security::social security
security number::security number
items class::items class
public inventoryitem::public inventoryitem
object holding::object holding
holding data::holding data
basic types::basic types
type link::type link
link inside::link inside
odd wouldn::odd wouldn
compiler doesn::compiler doesn
object doesn::object doesn
magic number::magic number
entire link::entire link
object note::object note
primitive types::primitive types
objects fields::objects fields
actual numerical::actual numerical
numerical values::numerical values
variable definition::variable definition
double salary::double salary
link alink::link alink
somelink puts::somelink puts
somelink object::somelink object
link somelink::link somelink
somelink field::somelink field
field doesn::field doesn
handle objects::handle objects
referential class::referential class
java handles::java handles
handles objects::handles objects
counter intuitive::counter intuitive
intuitive links::intuitive links
memory relationship::memory relationship
major ways::major ways
lists differ::lists differ
item occupies::item occupies
index number::index number
human relations::human relations
harry doesn::harry doesn
thinks jane::thinks jane
jane jane::jane jane
bob leave::bob leave
cell phone::cell phone
dropped bob::dropped bob
lists alink::lists alink
alink somelink::alink somelink
link memory::link memory
memory alink::memory alink
link peter::link peter
first item::first item
linklist workshop::linklist workshop
workshop applet::workshop applet
list operations::list operations
array workshop::array workshop
purpose database::purpose database
database application::database application
application figure::application figure
insert button::insert button
unlucky number::unlucky number
link press::link press
ins button::ins button
key value::key value
subsequent presses::subsequent presses
simplest approach::simplest approach
insert links::insert links
final press::final press
inserted link::inserted link
link lines::link lines
redrawing doesn::redrawing doesn
display neater::display neater
neater figure::neater figure
find button::find button
existing link::existing link
red arrow::red arrow
arrow move::arrow move
message informs::message informs
arrow finds::arrow finds
non existent::non existent
existent key::existent key
delete button::delete button
value type::value type
repeatedly press::repeatedly press
press del::press del
previous link::previous link
link straight::link straight
preceding link::preceding link
final keypress::final keypress
keypress redraws::keypress redraws
spaced links::spaced links
aesthetic reasons::aesthetic reasons
arrows doesn::arrows doesn
program note::program note
lists unsorted::lists unsorted
operations allowed::operations allowed
list deleting::list deleting
list iterating::list iterating
complete linklist.java::complete linklist.java
linklist.java program::linklist.java program
important parts::important parts
linklist classes::linklist classes
data part::data part
complete class::complete class
definition class::definition class
list public::list public
initialize data::initialize data
data ddata::data ddata
public void::public void
void displaylink::void displaylink
end class::end class
object purists::object purists
method displaylink::method displaylink
linklist object::linklist object
constructor initializes::constructor initializes
null value::null value
value means::value means
storage type::storage type
link fields::link fields
public methods::public methods
extra code::extra code
listing longer::listing longer
restrict link::restrict link
object access::object access
linklist class::linklist class
inheritance relationship::inheritance relationship
default access::default access
access specifier::access specifier
data package::data package
package access::package access
access restricted::access restricted
demo programs::demo programs
public specifier::public specifier
data isn::data isn
data fields::data fields
class private::class private
permanent information::permanent information
list maintains::list maintains
field class::field class
class linklist::class linklist
private link::private link
void linklist::void linklist
public boolean::public boolean
boolean isempty::boolean isempty
linklist sets::linklist sets
explicit constructor::explicit constructor
constructor makes::constructor makes
first begins::first begins
value null::value null
linklist inserts::linklist inserts
easiest place::easiest place
created link::created link
null null::null null
data passed::data passed
link references::link references
noted insert::noted insert
void insertfirst::void insertfirst
link link::link link
link newlink::link newlink
first first::first first
first field::first field
upstream connections::upstream connections
reference manipulation::reference manipulation
list algorithms::list algorithms
link public::link public
link deletefirst::link deletefirst
delete first::delete first
assumes list::assumes list
link temp::link temp
first save::first save
save reference::save reference
first.next delete::first.next delete
return temp::return temp
temp return::temp return
return deleted::return deleted
deleted link::deleted link
temp figure::temp figure
similar languages::similar languages
garbage collection::garbage collection
collection process::collection process
responsibility notice::responsibility notice
method assumes::method assumes
lists figure::lists figure
variable current::variable current
current points::current points
technically refers::technically refers
entire displaylist::entire displaylist
void displaylist::void displaylist
first last::first last
print data::print data
current.next move::current.next move
last link::last link
link pointing::link pointing
first null::first null
list figure::list figure
current steps::current steps
current.next current::current.next current
current figure::current figure
method calls::method calls
program listing::program listing
routine listing::routine listing
program linklist.java::program linklist.java
linklist.java demonstrates::linklist.java demonstrates
java linklistapp::java linklistapp
linklistapp class::linklistapp class
public linklist::public linklist
class linklistapp::class linklistapp
public static::public static
static void::static void
void main::void main
linklist thelist::linklist thelist
display list::display list
delete link::delete link
end main::end main
lists listing::lists listing
empty list::empty list
linklist.java list::linklist.java list
program adds::program adds
adds methods::adds methods
operations carried::operations carried
complete linklist2.java::complete linklist2.java
linklist2.java program::linklist2.java program
program linklist2.java::program linklist2.java
linklist2.java demonstrates::linklist2.java demonstrates
java linklist2app::java linklist2app
linklist2app class::linklist2app class
link finding::link finding
first points::first points
link find::link find
int key::int key
find link::find link
assumes non::assumes non
return null::return null
null didn::null didn
current found::current found
link delete::link delete
first search::first search
first.next change::first.next change
current.next bypass::current.next bypass
class linklist2app::class linklist2app
make list::make list
list link::list link
find item::find item
found link::found link
delete item::delete item
routine makes::routine makes
resulting list::resulting list
output list::output list
method works::method works
desired link::desired link
returns null::returns null
current link::current link
link preceding::link preceding
continued figure::continued figure
preceding current::preceding current
special case::special case
case arises::case arises
possibilities found::possibilities found
bypass link::bypass link
delete items::delete items
list methods::list methods
list iterators::list iterators
chapter finding::chapter finding
previous current::previous current
null previous::null previous
double ended::double ended
ended lists::ended lists
ended list::ended list
additional feature::additional feature
first figure::first figure
link permits::link permits
ordinary single::ordinary single
single ended::single ended
entire list::entire list
inefficient access::inefficient access
beginning makes::beginning makes
handle efficiently::handle efficiently
technique works::technique works
section listing::section listing
firstlastlist.java program::firstlastlist.java program
doubleended list::doubleended list
program firstlastlist.java::program firstlastlist.java
firstlastlist.java demonstrates::firstlastlist.java demonstrates
demonstrates list::demonstrates list
last references::last references
java firstlastapp::java firstlastapp
firstlastapp class::firstlastapp class
public long::public long
long ddata::long ddata
class firstlastlist::class firstlastlist
last ref::last ref
public firstlastlist::public firstlastlist
newlink newlink::newlink newlink
last newlink.next::last newlink.next
void insertlast::void insertlast
last newlink::last newlink
long deletefirst::long deletefirst
long temp::long temp
last first::last first
first.next first::first.next first
firstlastlist class::firstlastlist class
class firstlastapp::class firstlastapp
list firstlastlist::list firstlastlist
firstlastlist thelist::firstlastlist thelist
rear thelist.insertlast::rear thelist.insertlast
link contents::link contents
program inserts::program inserts
repeated insertions::repeated insertions
list reverse::list reverse
end preserve::end preserve
list class::list class
last item::last item
last point::last point
process involves::process involves
insertion figure::insertion figure
deletion routines::deletion routines
insertion routines::insertion routines
link deleting::link deleting
ended doesn::ended doesn
list efficiency::list efficiency
efficiency insertion::efficiency insertion
specific item::specific item
item requires::item requires
increased efficiency::increased efficiency
copy takes::copy takes
important advantage::important advantage
small vectors::small vectors
expandable arrays::expandable arrays
sized increments::sized increments
list abstract::list abstract
shift gears::shift gears
lists abstract::lists abstract
data structure::data structure
structure focusing::structure focusing
lists stacks::lists stacks
abstract nature::abstract nature
stack implemented::stack implemented
ordinary java::ordinary java
java array::java array
array operations::array operations
insert data::insert data
stack class::stack class
class calls::class calls
list listing::list listing
class shouldn::class shouldn
linkstack.java program::linkstack.java program
program linkstack.java::program linkstack.java
linkstack.java demonstrates::linkstack.java demonstrates
java linkstackapp::java linkstackapp
linkstackapp class::linkstackapp class
return temp.ddata::return temp.ddata
temp.ddata return::temp.ddata return
class linkstack::class linkstack
private linklist::private linklist
public linkstack::public linkstack
void push::void push
put item::put item
long pop::long pop
void displaystack::void displaystack
top bottom::top bottom
linkstack class::linkstack class
class linkstackapp::class linkstackapp
linkstack thestack::linkstack thestack
make stack::make stack
stack abstract::stack abstract
push items::push items
display stack::display stack
stack thestack.pop::stack thestack.pop
pop items::pop items
routine creates::routine creates
stack object::stack object
output stack::output stack
class relates::class relates
turn calls::turn calls
calls insertfirst::calls insertfirst
calls deletefirst::calls deletefirst
calls displaylist::calls displaylist
class user::class user
writing code::writing code
list based::list based
based linkstack::based linkstack
array based::array based
based stack::based stack
stack.java program::stack.java program
queue implemented::queue implemented
adt implemented::adt implemented
continued listing::continued listing
linkqueue.java program::linkqueue.java program
program linkqueue.java::program linkqueue.java
linkqueue.java demonstrates::linkqueue.java demonstrates
demonstrates queue::demonstrates queue
java linkqueueapp::java linkqueueapp
linkqueueapp class::linkqueueapp class
class linkqueue::class linkqueue
private firstlastlist::private firstlastlist
public linkqueue::public linkqueue
return thelist.isempty::return thelist.isempty
void insert::void insert
long remove::long remove
void displayqueue::void displayqueue
front rear::front rear
linkqueue class::linkqueue class
class linkqueueapp::class linkqueueapp
linkqueue thequeue::linkqueue thequeue
insert items::insert items
display queue::display queue
queue thequeue.insert::queue thequeue.insert
remove items::remove items
program creates::program creates
output queue::output queue
methods insert::methods insert
queue.java program::queue.java program
linkqueue.java programs::linkqueue.java programs
programs emphasize::programs emphasize
conceptual entities::conceptual entities
underlying mechanism::underlying mechanism
major consideration::major consideration
consideration data::consideration data
term abstract::term abstract
data type::data type
type part::type part
phrase data::phrase data
type covers::type covers
primitive type::primitive type
permissible operations::permissible operations
type int::type int
int variables::int variables
number values::number values
inseparable part::inseparable part
identity understanding::identity understanding
type means::type means
means understanding::means understanding
object oriented::object oriented
oriented programming::oriented programming
types represent::types represent
numerical quantities::numerical quantities
denominator fields::denominator fields
extra long::extra long
long numbers::long numbers
string represent::string represent
functional notation::functional notation
quantity oriented::quantity oriented
oriented classes::oriented classes
quantitative aspect::quantitative aspect
class represents::class represents
lists abstraction::lists abstraction
word abstract::word abstract
abstract means::abstract means
detailed specifications::detailed specifications
important characteristics::important characteristics
office remain::office remain
individual office::individual office
office holders::office holders
class considered::class considered
methods carry::methods carry
data structures::data structures
user users::user users
methods work::methods work
user doesn::user doesn
adt specification::adt specification
user sees::user sees
similar methods::similar methods
methods form::methods form
interface adt::interface adt
adt lists::adt lists
linear list::linear list
items arranged::items arranged
linear order::linear order
street lists::street lists
lists support::lists support
fundamental operations::fundamental operations
adt list::adt list
specific methods::specific methods
including arrays::including arrays
structures abstract::structures abstract
design tool::design tool
adt concept::adt concept
software design::software design
design process::design process
store data::store data
item inserted::item inserted
position answering::position answering
questions leads::questions leads
implementation details::implementation details
user relates::user relates
adt interface::adt interface
underlying data::underlying data
list representation::list representation
representation isn::representation isn
access isn::access isn
efficient operation::efficient operation
array note::array note
note remember::note remember
conceptual tool::conceptual tool
tool data::tool data
implement adts::implement adts
list interface::list interface
array type::array type
type structure::type structure
basic structure::basic structure
context sorted::context sorted
sorted order::sorted order
sorted list::sorted list
value deletion::value deletion
sorted array::sorted array
elements don::elements don
fixed size::fixed size
lists sorting::lists sorting
sorting data::sorting data
priority queue::priority queue
common implementation::common implementation
applet introduced::applet introduced
chapter demonstrates::chapter demonstrates
unsorted lists::unsorted lists
lists work::lists work
sorted button::sorted button
item type::item type
list watch::list watch
algorithm traverses::algorithm traverses
insertion place::insertion place
correct location::correct location
del button::del button
button java::button java
java code::java code
algorithm finds::algorithm finds
special cases::special cases
code public::code public
long key::long key
null start::null start
link current::link current
key current.ddata::key current.ddata
key current::key current
current current::current current
prev newlink::prev newlink
current newlink::current newlink
end insert::end insert
previous reference::previous reference
lists prepare::lists prepare
insertion point::insertion point
added condition::added condition
loop terminates::loop terminates
usual case::usual case
last element::last element
sortedlist.java program::sortedlist.java program
sortedlist class::sortedlist class
non sorted::non sorted
program sortedlist.java::program sortedlist.java
sortedlist.java demonstrates::sortedlist.java demonstrates
java sortedlistapp::java sortedlistapp
sortedlistapp class::sortedlistapp class
class sortedlist::class sortedlist
public sortedlist::public sortedlist
first return::first return
return value::return value
class sortedlistapp::class sortedlistapp
list sortedlist::list sortedlist
sortedlist thesortedlist::sortedlist thesortedlist
list thesortedlist.insert::list thesortedlist.insert
item thesortedlist.displaylist::item thesortedlist.displaylist
key values::key values
sortedlist.java list::sortedlist.java list
continued efficiency::continued efficiency
lists insertion::lists insertion
arbitrary items::arbitrary items
list require::list require
minimum value::minimum value
minimum item::minimum item
fast insertion::fast insertion
insertion isn::insertion isn
effective choice::effective choice
list insertion::list insertion
insertion sort::insertion sort
efficient sorting::efficient sorting
sorting mechanism::sorting mechanism
mechanism suppose::mechanism suppose
unsorted data::unsorted data
order automatically::order automatically
sort turns::sort turns
usual insertion::usual insertion
simple sorting::simple sorting
fewer copies::fewer copies
list involves::list involves
copies compares::copies compares
copies listing::copies listing
listinsertionsort.java program::listinsertionsort.java program
unsorted items::unsorted items
array listing::array listing
program listinsertionsort.java::program listinsertionsort.java
listinsertionsort.java demonstrates::listinsertionsort.java demonstrates
java listinsertionsortapp::java listinsertionsortapp
listinsertionsortapp class::listinsertionsortapp class
initialize list::initialize list
null initialize::null initialize
copy array::copy array
array insert::array insert
k.ddata current.ddata::k.ddata current.ddata
sortedlist sorted::sortedlist sorted
continued class::continued class
class listinsertionsortapp::class listinsertionsortapp
int size::int size
create array::create array
links link::links link
fill array::fill array
random number::random number
number int::number int
make link::make link
link linkarray::link linkarray
newlink put::newlink put
display array::display array
array contents::array contents
unsorted array::unsorted array
list initialized::list initialized
array sortedlist::array sortedlist
array linkarray::array linkarray
program displays::program displays
sorting operation::sorting operation
sample output::sample output
output unsorted::output unsorted
initial values::initial values
generated randomly::generated randomly
sortedlist takes::sortedlist takes
link objects::link objects
entire contents::entire contents
created list::created list
make things::make things
store link::store link
routine create::routine create
long value::long value
value passed::value passed
based insertion::based insertion
class handy::class handy
sort arrays::sort arrays
potential problem::potential problem
traverse backward::traverse backward
current.next steps::current.next steps
link depending::link depending
pose problems::pose problems
text editor::text editor
text line::text line
string object::string object
object embedded::object embedded
user moves::user moves
cursor downward::cursor downward
program steps::program steps
cursor upward::cursor upward
single step::single step
step upward::step upward
ordinary lists::ordinary lists
previous previous::previous previous
extra reference::extra reference
list doesn::list doesn
complete listing::complete listing
doublylinked.java program::doublylinked.java program
doublylinkedlist class::doublylinkedlist class
class traversal::class traversal
display methods::display methods
methods demonstrate::methods demonstrate
demonstrate traversal::demonstrate traversal
previous field::previous field
code fragment::code fragment
fragment shows::fragment shows
process works::process works
works link::works link
last start::last start
current.previous move::current.previous move
prev null::prev null
preferred direction::preferred direction
directionneutral terms::directionneutral terms
right insertion::right insertion
method inserts::method inserts
link prev::link prev
link figure::link figure
last field::last field
first.previous field::first.previous field
first newlink.next::first newlink.next
process applied::process applied
mirror image::mirror image
current prev::current prev
arbitrary location::arbitrary location
null newlink::null newlink
newlink null::newlink null
current.next newlink::current.next newlink
dot operators::dot operators
natural extension::natural extension
single dot::single dot
dot operator::dot operator
current.next.previous means::current.next.previous means
link referred::link referred
current deletion::current deletion
routines deletefirst::routines deletefirst
fairly straightforward::fairly straightforward
current assuming::current assuming
statements carry::statements carry
current.next current.next.previous::current.next current.next.previous
first current.prev::first current.prev
prev prev::prev prev
null current::null current
current.next figure::current.next figure
arbitrary link::arbitrary link
cases arise::cases arise
link connections::link connections
current.next first::current.next first
previous last::previous last
complete doublylinked.java::complete doublylinked.java
discussed listing::discussed listing
program doublylinked.java::program doublylinked.java
doublylinked.java demonstrates::doublylinked.java demonstrates
java doublylinkedapp::java doublylinkedapp
doublylinkedapp class::doublylinkedapp class
class doublylinkedlist::class doublylinkedlist
public doublylinkedlist::public doublylinkedlist
link deletelast::link deletelast
delete last::delete last
previous null::previous null
last return::last return
key public::key public
boolean insertafter::boolean insertafter
return false::return false
false didn::false didn
newlink return::newlink return
return true::return true
true found::true found
link deletekey::link deletekey
current.previous return::current.previous return
current return::current return
void displayforward::void displayforward
display data::display data
void displaybackward::void displaybackward
class doublylinkedapp::class doublylinkedapp
list doublylinkedlist::list doublylinkedlist
doublylinkedlist thelist::doublylinkedlist thelist
list backward::list backward
last items::last items
continued list::continued list
deletion methods::deletion methods
method assume::method assume
list isn::list isn
preceding chapter::preceding chapter
capability iterators::capability iterators
method starts::method starts
search key::search key
methods don::methods don
item suppose::item suppose
personnel file::personnel file
file stored::file stored
minimum wage::minimum wage
affecting employees::affecting employees
mailorder customers::mailorder customers
array index::array index
suitable candidate::suitable candidate
links don::links don
fixed index::fixed index
index numbers::index numbers
approach requires::approach requires
link pointed::link pointed
reference assuming::reference assuming
array indices::array indices
oriented language::oriented language
class object::class object
list object::list object
iterator class::iterator class
class objects::class objects
java classes::java classes
preliminary idea::preliminary idea
class listiterator::class listiterator
current field::current field
term points::term points
generic sense::generic sense
iterator object::iterator object
list create::list create
method returns::method returns
suitable iterator::suitable iterator
abbreviated code::abbreviated code
iterator public::iterator public
list listiterator::list listiterator
listiterator iter1::listiterator iter1
make iter::make iter
lists link::lists link
access link::access link
iterator iter1.nextlink::iterator iter1.nextlink
move iter::move iter
object iter1::object iter1
iterators pointing::iterators pointing
current list::current list
list iterator::list iterator
additional iterator::additional iterator
iterator features::iterator features
field made::field made
private field::private field
change first::change first
linklist methods::linklist methods
additional fields::additional fields
methods class::methods class
current reference::current reference
linklist ourlist::linklist ourlist
ourlist reference::ourlist reference
parent list::parent list
void reset::void reset
current first::current first
first previous::first previous
void nextlink::void nextlink
current set::current set
current.next set::current.next set
friend classes::friend classes
data hiding::data hiding
hiding iterator::hiding iterator
iterator methods::iterator methods
additional methods::additional methods
powerful class::powerful class
involve iterating::involve iterating
iterator includes::iterator includes
methods reset::methods reset
list nextlink::list nextlink
link getcurrent::link getcurrent
iterator atend::iterator atend
returns true::returns true
iterator insertbefore::iterator insertbefore
iterator deletecurrent::iterator deletecurrent
operations shown::operations shown
shown deciding::shown deciding
interiterator.java program::interiterator.java program
program includes::program includes
interactive interface::interactive interface
iterator directly::iterator directly
list contents::list contents
link listing::link listing
complete interiterator.java::complete interiterator.java
program interiterator.java::program interiterator.java
interiterator.java demonstrates::interiterator.java demonstrates
demonstrates iterators::demonstrates iterators
linked listlistiterator::linked listlistiterator
java interiterapp::java interiterapp
interiterapp import::interiterapp import
import java.io::import java.io
item iterators::item iterators
link getfirst::link getfirst
void setfirst::void setfirst
public listiterator::public listiterator
listiterator getiterator::listiterator getiterator
return iterator::return iterator
linklist list::linklist list
list reset::list reset
boolean atend::boolean atend
void insertafter::void insertafter
newlink iterators::newlink iterators
current.next current.next::current.next current.next
newlink nextlink::newlink nextlink
void insertbefore::void insertbefore
previous.next previous.next::previous.next previous.next
newlink current::newlink current
long deletecurrent::long deletecurrent
listiterator class::listiterator class
class interiterapp::class interiterapp
throws ioexception::throws ioexception
value iter1.insertafter::value iter1.insertafter
first letter::first letter
int choice::int choice
option switch::option switch
show list::show list
break case::break case
current item::current item
.ddata system.out.println::.ddata system.out.println
current system.out.print::current system.out.print
enter value::enter value
delete current::delete current
break default::break default
default system.out.println::default system.out.println
invalid entry::invalid entry
end switch::end switch
static string::static string
string getstring::string getstring
inputstreamreader isr::inputstreamreader isr
continued bufferedreader::continued bufferedreader
static char::static char
char getchar::char getchar
static int::static int
int getint::int getint
routine inserts::routine inserts
sample interaction::sample interaction
user displays::user displays
enter first::enter first
continued enter::continued enter
iterator moves::iterator moves
delete links::delete links
iterator point::iterator point
design issues::design issues
iterator end::iterator end
previous item::previous item
list keeping::list keeping
deleted item::deleted item
inserted item::inserted item
iterator points::iterator points
last valid::last valid
valid link::valid link
first approach::first approach
loop condition::loop condition
approach doesn::approach doesn
longer point::longer point
lists iterative::lists iterative
iterative operations::iterative operations
performing operations::performing operations
first long::first long
.ddata display::.ddata display
display link::display link
link system.out.println::link system.out.println
calling getcurrent::calling getcurrent
code shows::code shows
revised main::revised main
iter iter1.insertafter::iter iter1.insertafter
list iter1.reset::list iter1.reset
calling deletecurrent::calling deletecurrent
linked::linked
lists::lists
chapter::chapter
arrays::arrays
disadvantages::disadvantages
data::data
storage::storage
structures::structures
unordered::unordered
array::array
searching::searching
slow::slow
ordered::ordered
insertion::insertion
kinds::kinds
deletion::deletion
size::size
changed::changed
created::created
structure::structure
solves::solves
problems::problems
list::list
commonly::commonly
generalpurpose::generalpurpose
versatile::versatile
mechanism::mechanism
suitable::suitable
general::general
purpose::purpose
databases::databases
replace::replace
basis::basis
stacks::stacks
queues::queues
fact::fact
cases::cases
frequent::frequent
random::random
access::access
individual::individual
items::items
index::index
aren::aren
solution::solution
surprisingly::surprisingly
conceptually::conceptually
simpler::simpler
popular::popular
trees::trees
investigate::investigate
strengths::strengths
weaknesses::weaknesses
simple::simple
doubleended::doubleended
sorted::sorted
doubly::doubly
iterators::iterators
approach::approach
elements::elements
examine::examine
idea::idea
abstract::abstract
types::types
adts::adts
viewed::viewed
implemented::implemented
links::links
item::item
embedded::embedded
link::link
object::object
class::class
similar::similar
makes::makes
sense::sense
separate::separate
distinct::distinct
reference::reference
field::field
first::first
relationship::relationship
shown::shown
figure::figure
null::null
part::part
definition::definition
public::public
int::int
idata::idata
double::double
ddata::ddata
kind::kind
referential::referential
case::case
type::type
show::show
two::two
typical::typical
application::application
personnel::personnel
record::record
address::address
social::social
security::security
number::number
title::title
salary::salary
fields::fields
inventoryitem::inventoryitem
holding::holding
references::references
basic::basic
easily::easily
confused::confused
context::context
review::review
work::work
put::put
inside::inside
odd::odd
wouldn::wouldn
compiler::compiler
out::out
big::big
make::make
doesn::doesn
answer::answer
java::java
refers::refers
computer::computer
memory::memory
don::don
value::value
treat::treat
magic::magic
tells::tells
system::system
matter::matter
problem::problem
construct::construct
entire::entire
note::note
primitive::primitive
stored::stored
differently::differently
objects::objects
actual::actual
numerical::numerical
values::values
variable::variable
creates::creates
space::space
puts::puts
alink::alink
somelink::somelink
located::located
isn::isn
moved::moved
statement::statement
create::create
hold::hold
languages::languages
handle::handle
write::write
pointer::pointer
programmers::programmers
mind::mind
handles::handles
usage::usage
counter::counter
intuitive::intuitive
position::position
major::major
ways::ways
differ::differ
occupies::occupies
directly::directly
accessed::accessed
row::row
houses::houses
find::find
house::house
element::element
follow::follow
chain::chain
human::human
relations::relations
harry::harry
bob::bob
thinks::thinks
jane::jane
leave::leave
office::office
sally::sally
call::call
cell::cell
phone::phone
dropped::dropped
peter::peter
relationships::relationships
locate::locate
start::start
linklist::linklist
workshop::workshop
applet::applet
operations::operations
insert::insert
search::search
key::key
delete::delete
explored::explored
database::database
shows::shows
started::started
initially::initially
button::button
unlucky::unlucky
press::press
ins::ins
prompted::prompted
enter::enter
subsequent::subsequent
presses::presses
generate::generate
version::version
inserted::inserted
beginning::beginning
simplest::simplest
final::final
redraw::redraw
newly::newly
lines::lines
redrawing::redrawing
represent::represent
happening::happening
program::program
display::display
neater::neater
existing::existing
preferably::preferably
middle::middle
continue::continue
red::red
arrow::arrow
move::move
message::message
informs::informs
finds::finds
non::non
existent::existent
end::end
reporting::reporting
found::found
repeatedly::repeatedly
del::del
simply::simply
removes::removes
connects::connects
previous::previous
straight::straight
removed::removed
preceding::preceding
point::point
keypress::keypress
redraws::redraws
picture::picture
evenly::evenly
spaced::spaced
aesthetic::aesthetic
reasons::reasons
length::length
arrows::arrows
correspond::correspond
unsorted::unsorted
default::default
discuss::discuss
linklist.java::linklist.java
demonstrates::demonstrates
allowed::allowed
inserting::inserting
deleting::deleting
iterating::iterating
contents::contents
fairly::fairly
easy::easy
carry::carry
stack::stack
complete::complete
important::important
parts::parts
classes::classes
constructor::constructor
initialize::initialize
automatically::automatically
set::set
void::void
displaylink::displaylink
ourself::ourself
system.out.print::system.out.print
addition::addition
method::method
displays::displays
format::format
purists::purists
naming::naming
arguing::arguing
shorter::shorter
spirit::spirit
polymorphism::polymorphism
listing::listing
harder::harder
understand::understand
current.display::current.display
forgotten::forgotten
current::current
initializes::initializes
explicitly::explicitly
clarity::clarity
means::means
situation::situation
connected::connected
made::made
private::private
provide::provide
methods::methods
require::require
extra::extra
code::code
making::making
longer::longer
read::read
ideally::ideally
restrict::restrict
inheritance::inheritance
convenient::convenient
specifier::specifier
keyword::keyword
give::give
package::package
restricted::restricted
directory::directory
effect::effect
demo::demo
programs::programs
occupy::occupy
clear::clear
permanent::permanent
information::information
maintains::maintains
location::location
ref::ref
boolean::boolean
isempty::isempty
true::true
empty::empty
return::return
sets::sets
noted::noted
explicit::explicit
begins::begins
determine::determine
insertfirst::insertfirst
inserts::inserts
easiest::easiest
place::place
points::points
change::change
begin::begin
creating::creating
passed::passed
arguments::arguments
newlink::newlink
newlink.next::newlink.next
comments::comments
last::last
statements::statements
downstream::downstream
upstream::upstream
connections::connections
symbolized::symbolized
compare::compare
manipulation::manipulation
heart::heart
algorithms::algorithms
deletefirst::deletefirst
reverse::reverse
disconnects::disconnects
rerouting::rerouting
assumes::assumes
temp::temp
save::save
first.next::first.next
deleted::deleted
remove::remove
choose::choose
convenience::convenience
user::user
rerouted::rerouted
worry::worry
disconnected::disconnected
garbage::garbage
collection::collection
process::process
destroy::destroy
future::future
responsibility::responsibility
notice::notice
calling::calling
verify::verify
displaylist::displaylist
technically::technically
turn::turn
starts::starts
pointing::pointing
holds::holds
current.next::current.next
current.displaylink::current.displaylink
print::print
system.out.println::system.out.println
loop::loop
condition::condition
terminate::terminate
reaches::reaches
steps::steps
stepping::stepping
calls::calls
components::components
main::main
routine::routine
run::run
linklistapp::linklistapp
continued::continued
static::static
string::string
args::args
thelist::thelist
thelist.insertfirst::thelist.insertfirst
four::four
thelist.displaylist::thelist.displaylist
thelist.isempty::thelist.isempty
thelist.deletefirst::thelist.deletefirst
alink.displaylink::alink.displaylink
displayed::displayed
output::output
finding::finding
adds::adds
carried::carried
linklist2.java::linklist2.java
linklist2app::linklist2app
current.idata::current.idata
match::match
didn::didn
previous.next::previous.next
bypass::bypass
thelist.find::thelist.find
f.idata::f.idata
thelist.delete::thelist.delete
d.idata::d.idata
resulting::resulting
searches::searches
deletes::deletes
works::works
setting::setting
checks::checks
returns::returns
desired::desired
maintain::maintain
connect::connect
cycle::cycle
special::special
arises::arises
pointed::pointed
changing::changing
covers::covers
possibilities::possibilities
imagine::imagine
insertafter::insertafter
talk::talk
ended::ended
ordinary::ordinary
additional::additional
feature::feature
permits::permits
single::single
reach::reach
inefficient::inefficient
situations::situations
efficiently::efficiently
implementing::implementing
queue::queue
technique::technique
section::section
firstlastlist.java::firstlastlist.java
incidentally::incidentally
confuse::confuse
explore::explore
firstlastapp::firstlastapp
long::long
firstlastlist::firstlastlist
front::front
insertlast::insertlast
last.next::last.next
first.ddata::first.ddata
thelist.insertlast::thelist.insertlast
rear::rear
simplicity::simplicity
reduced::reduced
easier::easier
remember::remember
repeated::repeated
insertions::insertions
order::order
preserve::preserve
discussed::discussed
involves::involves
modifying::modifying
routines::routines
watch::watch
prior::prior
conveniently::conveniently
traverse::traverse
efficient::efficient
efficiency::efficiency
fast::fast
involve::involve
takes::takes
specific::specific
requires::requires
average::average
half::half
comparisons::comparisons
faster::faster
increased::increased
significant::significant
copy::copy
comparison::comparison
advantage::advantage
expand::expand
fill::fill
fixed::fixed
leads::leads
inefficiency::inefficiency
large::large
running::running
room::room
small::small
vectors::vectors
expandable::expandable
solve::solve
extent::extent
sized::sized
increments::increments
doubling::doubling
overflow::overflow
shift::shift
gears::gears
topic::topic
adt::adt
roughly::roughly
speaking::speaking
focusing::focusing
ignoring::ignoring
job::job
examples::examples
discussion::discussion
demonstrate::demonstrate
nature::nature
considered::considered
separately::separately
implementation::implementation
push::push
pop::pop
arr::arr
top::top
knowing::knowing
needing::needing
linkstack::linkstack
argue::argue
users::users
shouldn::shouldn
linkstack.java::linkstack.java
linkstackapp::linkstackapp
temp.ddata::temp.ddata
displaystack::displaystack
bottom::bottom
thestack::thestack
thestack.push::thestack.push
thestack.displaystack::thestack.displaystack
thestack.pop::thestack.pop
pushes::pushes
finally::finally
pops::pops
organization::organization
relates::relates
communication::communication
specifically::specifically
operation::operation
similarly::similarly
writing::writing
difference::difference
based::based
stack.java::stack.java
linkqueue.java::linkqueue.java
linkqueueapp::linkqueueapp
linkqueue::linkqueue
displayqueue::displayqueue
thequeue::thequeue
thequeue.insert::thequeue.insert
thequeue.displayqueue::thequeue.displayqueue
thequeue.remove::thequeue.remove
substituted::substituted
implement::implement
queue.java::queue.java
emphasize::emphasize
conceptual::conceptual
entities::entities
implementations::implementations
equally::equally
underlying::underlying
opposed::opposed
consideration::consideration
accurately::accurately
predict::predict
amount::amount
flexibility::flexibility
speed::speed
abstraction::abstraction
term::term
phrase::phrase
lot::lot
ground::ground
applied::applied
built::built
hear::hear
referring::referring
things::things
characteristics::characteristics
permissible::permissible
variables::variables
2,147,483,648::2,147,483,648
2,147,483,647::2,147,483,647
operators::operators
inseparable::inseparable
identity::identity
understanding::understanding
performed::performed
advent::advent
oriented::oriented
programming::programming
quantities::quantities
define::define
hours::hours
minutes::minutes
seconds::seconds
fractions::fractions
numerator::numerator
denominator::denominator
numbers::numbers
characters::characters
digits::digits
added::added
subtracted::subtracted
functional::functional
notation::notation
add::add
sub::sub
fit::fit
naturally::naturally
quantity::quantity
quantitative::quantitative
aspect::aspect
represents::represents
extension::extension
represented::represented
referred::referred
defined::defined
arrangement::arrangement
word::word
detailed::detailed
specifications::specifications
essence::essence
president::president
powers::powers
responsibilities::responsibilities
remain::remain
holders::holders
regard::regard
description::description
instructions::instructions
excluded::excluded
details::details
tasks::tasks
told::told
results::results
expect::expect
meaning::meaning
extended::extended
fundamentals::fundamentals
invisible::invisible
store::store
exist::exist
tree::tree
interface::interface
specification::specification
sees::sees
form::form
mention::mention
linear::linear
group::group
arranged::arranged
lined::lined
beads::beads
street::street
support::support
fundamental::fundamental
discussing::discussing
interact::interact
including::including
design::design
tool::tool
concept::concept
aid::aid
software::software
answering::answering
questions::questions
completely::completely
decoupling::decoupling
simplify::simplify
breaking::breaking
designed::designed
carefully::carefully
chosen::chosen
representation::representation
good::good
divided::divided
cleanly::cleanly
wrapped::wrapped
act::act
determined::determined
requirement::requirement
applications::applications
characteristic::characteristic
limited::limited
smallest::smallest
largest::largest
advantages::advantages
difficult::difficult
sorting::sorting
priority::priority
heap::heap
heaps::heaps
common::common
introduced::introduced
click::click
result::result
fall::fall
algorithm::algorithm
traverses::traverses
correct::correct
redrawn::redrawn
regularize::regularize
appearance::appearance
larger::larger
usual::usual
current.ddata::current.ddata
prev::prev
modify::modify
prepare::prepare
step::step
terminates::terminates
examined::examined
smaller::smaller
appropriately::appropriately
sortedlist.java::sortedlist.java
presents::presents
sortedlist::sortedlist
counterpart::counterpart
sortedlistapp::sortedlistapp
thesortedlist::thesortedlist
thesortedlist.insert::thesortedlist.insert
thesortedlist.displaylist::thesortedlist.displaylist
thesortedlist.remove::thesortedlist.remove
showing::showing
correctly::correctly
removal::removal
arbitrary::arbitrary
n::-NONE-
minimum::minimum
frequently::frequently
accesses::accesses
critical::critical
effective::effective
choice::choice
sort::sort
suppose::suppose
back::back
turns::turns
substantially::substantially
described::described
fewer::fewer
copies::copies
comparing::comparing
copied::copied
compares::compares
favorably::favorably
listinsertionsort.java::listinsertionsort.java
places::places
listinsertionsortapp::listinsertionsortapp
linkarr::linkarr
argument::argument
linkarr.length::linkarr.length
k.ddata::k.ddata
k.next::k.next
linkarray::linkarray
java.lang.math.random::java.lang.math.random
.ddata::.ddata
initialized::initialized
afterward::afterward
sample::sample
initial::initial
generated::generated
randomly::randomly
doing::doing
helps::helps
client::client
accepts::accepts
downside::downside
compared::compared
handy::handy
variation::variation
potential::potential
backward::backward
depending::depending
limitation::limitation
pose::pose
text::text
editor::editor
line::line
screen::screen
moves::moves
cursor::cursor
downward::downward
manipulate::manipulate
upward::upward
equivalent::equivalent
capability::capability
forward::forward
secret::secret
deal::deal
attachments::attachments
bigger::bigger
necessarily::necessarily
keeping::keeping
include::include
doublylinked.java::doublylinked.java
doublylinkedlist::doublylinkedlist
traversal::traversal
displayforward::displayforward
displaybackward::displaybackward
proceeds::proceeds
fragment::fragment
current.previous::current.previous
people::people
view::view
preferred::preferred
direction::direction
terms::terms
inappropriate::inappropriate
prefer::prefer
substitute::substitute
directionneutral::directionneutral
left::left
right::right
included::included
first.previous::first.previous
mirror::mirror
image::image
bit::bit
complicated::complicated
procedure::procedure
handled::handled
assuming::assuming
deals::deals
current.next.previous::current.next.previous
newlink.previous::newlink.previous
unfamiliar::unfamiliar
dot::dot
expression::expression
natural::natural
operator::operator
deletelast::deletelast
deletekey::deletekey
straightforward::straightforward
disconnection::disconnection
current.previous.next::current.previous.next
current.prev::current.prev
arise::arise
dealing::dealing
includes::includes
doublylinkedapp::doublylinkedapp
first.next.previous::first.next.previous
last.previous.next::last.previous.next
last.previous::last.previous
false::false
thelist.displayforward::thelist.displayforward
thelist.displaybackward::thelist.displaybackward
thelist.deletelast::thelist.deletelast
thelist.deletekey::thelist.deletekey
thelist.insertafter::thelist.insertafter
assume::assume
attempting::attempting
deletions::deletions
deques::deques
deque::deque
mentioned::mentioned
examines::examines
matching::matching
looked::looked
control::control
wanted::wanted
performing::performing
file::file
increase::increase
wages::wages
employees::employees
paid::paid
wage::wage
affecting::affecting
mailorder::mailorder
customers::customers
decided::decided
months::months
track::track
operate::operate
increment::increment
candidate::candidate
analogous::analogous
checking::checking
meets::meets
criteria::criteria
installed::installed
possibility::possibility
indices::indices
language::language
embed::embed
iterator::iterator
enumerators::enumerators
preliminary::preliminary
listiterator::listiterator
pointers::pointers
generic::generic
letting::letting
pass::pass
getiterator::getiterator
abbreviated::abbreviated
invoke::invoke
iter1::iter1
thelist.getiterator::thelist.getiterator
iter::iter
iter1.getcurrent::iter1.getcurrent
iter1.nextlink::iter1.nextlink
iter2::iter2
features::features
instance::instance
getfirst::getfirst
setfirst::setfirst
weakness::weakness
introduces::introduces
risk::risk
revised::revised
incomplete::incomplete
incorporates::incorporates
reset::reset
nextlink::nextlink
ourlist::ourlist
parent::parent
ourlist.getfirst::ourlist.getfirst
connection::connection
typically::typically
provided::provided
friend::friend
controversial::controversial
chink::chink
armor::armor
hiding::hiding
flexible::flexible
powerful::powerful
previously::previously
getcurrent::getcurrent
atend::atend
insertbefore::insertbefore
deletecurrent::deletecurrent
check::check
perform::perform
deciding::deciding
interiterator.java::interiterator.java
interactive::interactive
actions::actions
typing::typing
letter::letter
listlistiterator::listlistiterator
interiterapp::interiterapp
import::import
java.io::java.io
ourlist.isempty::ourlist.isempty
ourlist.setfirst::ourlist.setfirst
throws::throws
ioexception::ioexception
iter1.insertafter::iter1.insertafter
iter1.insertbefore::iter1.insertbefore
system.out.flush::system.out.flush
getchar::getchar
option::option
switch::switch
break::break
iter1.reset::iter1.reset
advance::advance
iter1.atend::iter1.atend
returned::returned
getint::getint
iter1.deletecurrent::iter1.deletecurrent
invalid::invalid
entry::entry
getstring::getstring
inputstreamreader::inputstreamreader
isr::isr
system.in::system.in
bufferedreader::bufferedreader
br.readline::br.readline
char::char
s.charat::s.charat
integer.parseint::integer.parseint
waits::waits
interaction::interaction
resets::resets
experimenting::experimenting
feeling::feeling
issues::issues
vicinity::vicinity
chances::chances
carrying::carrying
task::task
question::question
valid::valid
past::past
iterate::iterate
awkward::awkward
terminating::terminating
late::late
couldn::couldn
singly::singly
careful::careful
iterates::iterates
iterative::iterative
keys::keys
multiples::multiples
alink.ddata::alink.ddata
divisible::divisible
