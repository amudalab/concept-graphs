continue on discussion
discussion on avl
insertion and deletion
started this discussion
discussion on insertion
insert a node
insert a key
whats a process
process of insertion
binary search tree
first you find
place you put
put the key
started the discussion
insertion it doesn
remain an avl
height balance property
property is violated
nodes whose height
height could change
call the define
define the height
nodes whose heights
heights could change
subtree has changed
changed as result
node its subtree
node their height
height might change
change and change
height might increase
imbalance or unbalanced
height balance problem
balance problem height
problem height problem
height problem means
height imbalanced height
imbalanced height imbalance
height imbalance means
means one left
subtree the difference
difference in heights
node v travel
tree which means
pin the parent
identify the node
find the first
grandparent is unbalanced
find the node
grandchild which grandchild
grandchild the grandchild
tree so fifty
larger smaller larger
smaller larger smaller
nodes so note
heights are changed
earlier this node
node had height
two this node
path whose height
fifty no difference
difference of height
node is changed
changed the height
path would change
imbalance happens lets
grandchild means parent
parent sorry childs
child so child
rebalance this tree
rebalance this subtree
subtree subtree rooted
performing the rotation
today is understand
subtree this subtree
forty eight fifty
fifty four sixty
sixty two seventy
seventy eight eighty
nodes but organized
node height imbalanced
understand this process
lets first understand
locally re organizing
organizing the binary
tree no node
tree i don
property of binary
lets just forget
forget these links
links okay lets
put the links
happened what happened
search tree properties
properties still holds
done some local
suppose the insertion
drawn the links
out these links
avoid the clutter
root the root
four different cases
denote the height
thing the height
increasing in height
increase in height
height of node
increased and height
increased because height
right and height
balanced after insertion
two the fact
two right lets
right lets continue
continue this argument
repeating the argument
imbalanced because original
two so height
right so height
rotation and stuff
reduce its size
thing we argued
rotation do rotation
recalls will remain
piece will remain
shown the link
heights the height
properties are maintained
argue that height
height balanced properties
height imbalanced happening
balanced no difference
done a rotation
number of operations
four different reference
constant number independent
number of nodes
thing is happened
happened the original
rotation the height
rotation the remains
inserted and dead
dead the rotation
done i don
repeat the argument
symmetric lets assume
means the height
two now lets
originally not balanced
height has increased
imbalanced the height
make any difference
rotation we ended
ended up making
root the middle
key we ended
making the root
two step rotation
rotation so first
remains the left
remains the right
switch is loyalties
right of subtree
two has height
four has height
height balanced height
done the job
remain the right
two as left
lets compute heights
right so final
happening you understand
right we ended
ended up doing
middle key ended
split the thing
height here imbalance
height imbalance happening
kind of split
uniformly the heights
rotation take constant
four different ways
ways to rotate
recap you understand
doing this thing
balanced picture height
picture height balanced
height balanced picture
sort the double
case after rotation
picture you don
single and double
rotations are done
tree the difference
node the difference
delete a node
deleting the node
deleting a node
node i copied
copied the content
node and deleted
deleted the successor
node i deleted
end up deleting
ended up deleting
means this node
tree and node
deleting a leaf
deleting a parent
deleting the leaf
leaf and copying
copying the content
leaf or parent
first unbalanced node
happen the ancestors
height could reduce
unbalanced so lets
unbalanced node encountered
perform it rotation
rotation to restore
restore the balance
case of insertion
rotation you don
stop after doing
doing the rotation
unbalanced and repeat
repeat the rotation
reach the root
device the child
higher larger height
four i started
tree i found
right so whats
whats a problem
node i identified
identified which hadn
imbalanced that happened
happened here earlier
decreased the height
four has reduced
minus one lets
minus three kind
balanced okay good
minus one right
two h minus
last two slides
kind of rotation
heights h minus
continue the argument
height is reduced
bigger thing height
height as reduced
height of subtree
height and height
two because height
minus one good
pick the root
rotation of mine
mine the previous
question here asked
single rotation case
pick the left
pick the right
picked it pick
minus one height
nodes and tress
double rotation step
step so first
child sub tress
happen x moves
height h minus
make that argument
done single rotation
make this kind
kind of argument
happened is final
tree has height
right you understand
height has reduced
require a proof
right so thing
satisfied by checking
checking the parent
insert and delete
insertion we spent
insert why log
log n height
proportional to height
height we argued
doing a rotation
log n deletion
deletion um recall
recall that insertion
insert the node
tree to find
find the place
occurs the first
satisfy the height
insertion basically requires
basically requires order
requires order log
spend order log
takes a log
log n order
order time deletion
hand also requires
requires only order
bit more work
right the reason
delete the node
node to recall
cases the node
node is deleting
deleting is leaf
find the success
find the successor
successor swap contents
delete the successor
occurs having found
rotation that rotation
solve your problem
solve the problem
problem of height
restore height balance
number of rotations
moving one level
log n rotations
rotations only taking
taking a constant
total time require
total time required
entire delete operation
deletion in avl
operations of insert
search and delete
done in log
avl trees
deletion procedure
last class
avl tree
key right
binary search
search tree
height balance
balance property
large tree
insertion process
balance problem
problem height
height problem
problem means
imbalanced height
height imbalance
imbalance means
left subtree
essentially travel
parent pointer
first node
larger smaller
smaller larger
imbalanced fifty
right difference
lets call
first place
grandchild means
means parent
childs child
subtree subtree
subtree rooted
nodes forty
fifty fifty
node height
height imbalanced
process today
first understand
system rotation
huge tree
right subtree
right child
left child
null tree
rotation step
slow motion
tree properties
local reorganization
remember lets
insertion happened
increasing height
imbalanced right
means height
height remains
increased implies
implies height
original height
right lets
lets continue
balanced height
final thing
first thing
big piece
entire thing
height balanced
balanced properties
single rotation
constant number
number independent
interesting thing
subtree remains
symmetric case
symmetric lets
lets assume
height moves
middle key
smallest right
previous rotation
middle child
step rotation
double rotation
compute heights
original subtree
final tree
original tree
key ended
imbalance happening
heights reduced
quick recap
rotate node
balanced picture
picture height
double rotations
binary tree
actual node
successor node
leaf node
lets lets
unbalanced node
link counter
reduce right
node encountered
larger height
ancestor nodes
unbalanced repeat
lets understand
valid question
imbalanced node
higher larger
imbalanced imbalance
guy decreased
wrong statement
bigger tree
bigger thing
thing height
higher level
rotation height
first part
previous case
rotation case
case height
child sub
sub tress
nodes height
ancestors ancestors
correct right
good question
spent log
imbalance occurs
requires order
order log
spend order
left find
successor swap
swap contents
delete delete
restore height
performer rotation
rotations put
entire delete
delete operation
end today
insert search
today
continue
discussion
avl
trees
insertion
deletion
procedure
begin
started
last
class
suppose
insert
node
tree
right
key
whats
process
binary
search
first
find
place
put
consequence
doesn
remain
height
balance
property
violated
nodes
change
result
call
define
subtree
rooted
large
heights
ancestors
return
understand
changed
remains
flow
ancestor
increased
add
increase
imbalance
unbalanced
culprit
problem
means
imbalanced
left
difference
essentially
travel
pin
parent
pointer
identify
grandparent
unbalance
grandchild
travels
path
grandchildren
show
clearer
child
situation
fifty
four
larger
smaller
balanced
note
earlier
two
noise
student
lets
childs
rebalance
performing
rotation
happen
picture
forty
sixty
seventy
eighty
organized
manner
previous
system
locally
organizing
part
huge
subtrees
null
don
care
keys
step
forget
links
replay
slow
motion
sufficiently
back
happened
properties
holds
done
local
reorganization
remember
moves
rotations
drawn
clear
children
slides
pictures
out
avoid
clutter
completely
relationships
counted
leaf
root
questions
point
cases
times
case
denote
thing
originally
tol
adding
increasing
hindi
fact
implies
original
argument
argued
repeating
roughly
guys
guy
initially
question
face
television
stuff
reduce
size
good
quickly
final
things
values
pair
rotate
move
pardon
write
recalls
big
piece
entire
shown
link
written
maintained
argue
restored
happening
single
operation
constant
number
operations
reference
independent
graph
interesting
inserted
dead
important
marching
moving
symmetric
handle
trust
leave
repeat
assuming
assume
make
bit
middle
largest
smallest
recall
line
top
ended
making
similar
double
moved
switch
loyalties
copied
job
compute
doing
split
uniformly
coming
kind
reduced
quick
recap
ways
sort
understood
principle
delete
deleting
successor
content
deleted
actual
end
copying
mind
slightly
differently
counter
encountered
traveling
defining
lef
perform
restore
worry
stop
reason
reach
device
minute
valid
ignore
minus
higher
found
decreased
choosing
follow
draw
walking
identified
hadn
simple
relationship
straight
wrong
statement
bigger
wave
level
pick
mine
asked
give
picked
copy
tress
sub
strictly
require
continuing
proof
correct
youe
satisfied
checking
answer
running
spent
log
finding
proportional
start
occurs
satisfy
basically
requires
order
spend
takes
hand
work
success
swap
contents
solve
performer
taking
total
required
eventually
