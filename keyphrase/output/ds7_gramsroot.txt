class we looked::class we looked
looked at definitions::looked at definitions
definitions of trees::definitions of trees
complete binary tree::complete binary tree
things are today::things are today
discussion on trees::discussion on trees
traversal or tree::traversal or tree
visiting the nodes::visiting the nodes
two different traversals::two different traversals
first visit process::first visit process
process each node::process each node
process it children::process it children
examples of follow::examples of follow
follow this clearer::follow this clearer
process the node::process the node
examples preorder tree::examples preorder tree
preorder tree traversals::preorder tree traversals
construct a tree::construct a tree
lets say result::lets say result
result such paper::result such paper
first section lets::first section lets
title second section::title second section
section one section::section one section
section two section::section two section
two such sub::two such sub
sub sections section::sub sections section
two ? section::two ? section
two sub sections::two sub sections
reading the paper::reading the paper
read the paper::read the paper
suppose your reading::suppose your reading
end to end::end to end
read the abstract::read the abstract
start with section::start with section
section sub section::section sub section
table of contents::table of contents
book are listed::book are listed
contents are listed::contents are listed
nodes of tree::nodes of tree
node one right::node one right
ten then eleven::ten then eleven
thirteen then fourteen::thirteen then fourteen
right and pseudo::right and pseudo
code for preorder::code for preorder
call preorder traversal::call preorder traversal
visit the node::visit the node
node so visit::node so visit
doing some computations::doing some computations
computations that node::computations that node
book as table::book as table
contents then visit::contents then visit
visit would correspond::visit would correspond
correspond to print::correspond to print
print the title::print the title
print the heading::print the heading
instance each node::instance each node
nodes and repeat::nodes and repeat
repeat the process::repeat the process
process there repeat::process there repeat
sub sub sections::sub sub sections
point one point::point one point
first first visit::first first visit
node then visit::node then visit
visit this node::visit this node
node this correspond::node this correspond
correspond to visit::correspond to visit
node this corresponds::node this corresponds
visit its children::visit its children
reading a document::reading a document
document from beginning::document from beginning
beginning to end::beginning to end
postorder traversal recall::postorder traversal recall
root directory courses::root directory courses
two sub directory::two sub directory
file called grades::file called grades
compute the total::compute the total
total space occupied::total space occupied
file system lets::file system lets
two up add::two up add
add this node::add this node
node to obtain::node to obtain
obtain the total::obtain the total
total spaces required::total spaces required
sense the computation::sense the computation
visiting this node::visiting this node
node or doing::node or doing
doing some computation::doing some computation
done the computation::done the computation
two children nodes::two children nodes
computed the total::computed the total
computed total spaces::computed total spaces
doing this right::doing this right
perform a postorder::perform a postorder
postorder here corresponds::postorder here corresponds
corresponds to finding::corresponds to finding
finding the total::finding the total
total spaces occupied::total spaces occupied
space is occupied::space is occupied
sense the order::sense the order
computation is done::computation is done
disk usage command::disk usage command
usage command unix::usage command unix
command in unix::command in unix
typing this command::typing this command
directory it tells::directory it tells
type the disk::type the disk
out the total::out the total
end it list::end it list
done this computation::done this computation
directory its first::directory its first
total space required::total space required
child second child::child second child
child third child::child third child
child fourth child::child fourth child
child is visited::child is visited
left is leftmost::left is leftmost
drawn your trees::drawn your trees
preorder first visit::preorder first visit
visit the childrens::visit the childrens
nodes in postorder::nodes in postorder
visit the children::visit the children
node then visits::node then visits
visits the nodes::visits the nodes
case of binary::case of binary
first saying visit::first saying visit
right it depends::right it depends
application so first::application so first
first say visit::first say visit
child so note::child so note
work this work::work this work
work by making::work by making
making the call::making the call
doing a preorder::doing a preorder
child the difference::child the difference
difference between preorder::difference between preorder
preorder and postorder::preorder and postorder
traversal on left::traversal on left
visit a node::visit a node
out the contents::out the contents
right so lets::right so lets
thing get printed::thing get printed
root a right::root a right
preorder traversal left::preorder traversal left
traversal left sub::traversal left sub
left sub tree::left sub tree
tree and first::tree and first
print the node::print the node
node first visit::node first visit
node visit corresponds::node visit corresponds
corresponds to printing::corresponds to printing
printing the content::printing the content
sub tree left::sub tree left
tree left sub::tree left sub
node here means::node here means
means printing contents::means printing contents
tree is null::tree is null
right sub tree::right sub tree
tree because first::tree because first
visited the node::visited the node
traversal of right::traversal of right
tree which means::tree which means
means we done::means we done
entire sub tree::entire sub tree
tree right sub::tree right sub
tree any questions::tree any questions
right answer lets::right answer lets
done postorder traversal::done postorder traversal
print this node::print this node
right child null::right child null
ready to operate::ready to operate
operate the content::operate the content
tree then postorder::tree then postorder
print this content::print this content
content so postorder::content so postorder
print the content::print the content
done the postorder::done the postorder
done with postorder::done with postorder
means which print::means which print
print the root::print the root
works okay good::works okay good
evaluating arithmetic expression::evaluating arithmetic expression
evaluate this expression::evaluate this expression
expression this sub::expression this sub
corresponds to sub::corresponds to sub
right whatever values::right whatever values
value the entire::value the entire
compute first value::compute first value
compute the value::compute the value
right a procedure::right a procedure
evaluate the expression::evaluate the expression
return the variable::return the variable
value the leaf::value the leaf
corresponds to numbers::corresponds to numbers
evaluate the left::evaluate the left
evaluate v dot::evaluate v dot
dot left child::dot left child
child this arrow::child this arrow
value of right::value of right
right and return::right and return
return that value::return that value
value of expression::value of expression
hope you understand::hope you understand
essentially it corresponds::essentially it corresponds
postorder traversal small::postorder traversal small
traversal small modification::traversal small modification
small modification question::small modification question
addressing that problem::addressing that problem
problem of generating::problem of generating
generating this tree::generating this tree
incorporate the priority::incorporate the priority
evaluate the tree::evaluate the tree
tree expression correspond::tree expression correspond
inorder traversal preorder::inorder traversal preorder
traversal preorder traversal::traversal preorder traversal
traversal and postorder::traversal and postorder
kind of traversal::kind of traversal
traversal so recall::traversal so recall
recall that preorder::recall that preorder
traversal we visited::traversal we visited
visit then node::visit then node
tree so pseudo::tree so pseudo
code for inorder::code for inorder
traversal right child::traversal right child
threes binary trees::threes binary trees
understood inorder traversal::understood inorder traversal
first the left::first the left
sub tree inorder::sub tree inorder
tree inorder traversal::tree inorder traversal
entire inorder traversal::entire inorder traversal
traversing a tree::traversing a tree
rule right suppose::rule right suppose
basically the drawn::basically the drawn
drawn in blue::drawn in blue
hit a leaf::hit a leaf
traversal of binary::traversal of binary
preorder traversal postorder::preorder traversal postorder
traversal postorder traversal::traversal postorder traversal
traversal that inorder::traversal that inorder
cases of eulers::cases of eulers
basically getting visited::basically getting visited
touching this node::touching this node
times we touches::times we touches
touches any node::touches any node
qualify every internal::qualify every internal
node of degree::node of degree
set an arithmetic::set an arithmetic
print this arithmetic::print this arithmetic
out with parenthesis::out with parenthesis
draw the parenthesis::draw the parenthesis
walk this thing::walk this thing
tree ill print::tree ill print
print an left::print an left
print the right::print the right
right this corresponds::right this corresponds
corresponds to taking::corresponds to taking
taking this path::taking this path
out the content::out the content
node was visited::node was visited
right essentially print::right essentially print
first ill touch::first ill touch
touch this node::touch this node
node from left::node from left
print first bracket::print first bracket
bracket then touch::bracket then touch
left ill print::left ill print
print other left::print other left
bracket i touch::bracket i touch
left i print::left i print
print another left::print another left
left another bracket::left another bracket
bracket to begin::bracket to begin
node for leaf::node for leaf
print a star::print a star
print a left::print a left
out the arithmetic::out the arithmetic
expression some kind::expression some kind
kind of euler::kind of euler
right a generic::right a generic
method for tree::method for tree
traversal or postorder::traversal or postorder
postorder traversal inorder::postorder traversal inorder
traversal inorder traversal::traversal inorder traversal
traverse this node::traverse this node
method called external::method called external
method left external::method left external
method you invoke::method you invoke
node you touch::node you touch
touch the node::touch the node
invoke this method::invoke this method
continue with right::continue with right
create the traversal::create the traversal
traversal of choice::traversal of choice
specialize this binary::specialize this binary
binary tree traversal::binary tree traversal
traversal the generic::traversal the generic
generic tree traversal::generic tree traversal
class which means::class which means
result in external::result in external
result external left::result external left
left below right::left below right
left unspecified right::left unspecified right
class you left::class you left
left you leave::left you leave
leave certain methods::leave certain methods
create a sub::create a sub
sub class sub::sub class sub
class sub class::class sub class
class which specifies::class which specifies
specifies these methods::specifies these methods
specializes this generic::specializes this generic
tree traversal procedure::tree traversal procedure
class for printing::class for printing
printing out arithmetic::printing out arithmetic
out arithmetic expressions::out arithmetic expressions
compute the space::compute the space
left the left::left the left
left child directory::left child directory
left child compute::left child compute
dot left result::dot left result
result r dot::result r dot
dot right result::dot right result
compute the sum::compute the sum
printing arithmetic expression::printing arithmetic expression
out the element::out the element
position just print::position just print
touch a node::touch a node
out a left::out a left
out the left::out the left
out the right::out the right
specialized these methods::specialized these methods
extending binary tree::extending binary tree
invoke the traversal::invoke the traversal
class binary tree::class binary tree
right by specializing::right by specializing
specializing these methods::specializing these methods
slightly different manner::slightly different manner
manner so lets::manner so lets
continue our discussion::continue our discussion
discussion on preorder::discussion on preorder
traversal and inorder::traversal and inorder
suppose i give::suppose i give
give you preorder::give you preorder
preorder traversal preorder::preorder traversal preorder
preorder traversal inorder::preorder traversal inorder
out the trees::out the trees
necessarily the tree::necessarily the tree
put down node::put down node
inorder traversal inorder::inorder traversal inorder
right the green::right the green
tree and blue::tree and blue
traversal the first::traversal the first
first five elements::first five elements
preorder preorder traversal::preorder preorder traversal
manage to identify::manage to identify
preorder and inorder::preorder and inorder
tree the rep::tree the rep
rep order inorder::rep order inorder
order inorder traversal::order inorder traversal
nodes the right::nodes the right
problem recursively reduce::problem recursively reduce
piece of code::piece of code
require some thought::require some thought
compute the postorder::compute the postorder
compute the tree::compute the tree
traversal this tree::traversal this tree
give the result::give the result
arbitrary c sequence::arbitrary c sequence
out an error::out an error
rep and inorder::rep and inorder
traversal given post::traversal given post
tree right suppose::tree right suppose
suppose i gave::suppose i gave
tree so recall::tree so recall
recall what wee::recall what wee
preorder very first::preorder very first
postorder the last::postorder the last
root so first::root so first
find the root::find the root
divides the thing::divides the thing
number of nodes::number of nodes
first the first::first the first
first five nodes::first five nodes
right sub trees::right sub trees
post and inorder::post and inorder
question given preorder::question given preorder
determine the tree::determine the tree
right three nodes::right three nodes
nodes from tree::nodes from tree
tree this preorder::tree this preorder
right one don::right one don
examples many trees::examples many trees
tree some nodes::tree some nodes
node the tree::node the tree
complete every internal::complete every internal
tree internal node::tree internal node
tree every internal::tree every internal
node has binary::node has binary
postorder to determine::postorder to determine
whats the first::whats the first
draw the root::draw the root
ahs two children::ahs two children
visits postorder traversal::visits postorder traversal
right no right::right no right
right one element::right one element
showing you showing::showing you showing
level in fact::level in fact
right the code::right the code
idea is assignment::idea is assignment
tree order traversal::tree order traversal
similarly for postorder::similarly for postorder
similarly for inorder::similarly for inorder
give the inorder::give the inorder
trees same inorder::trees same inorder
case two doesn::case two doesn
case it doesn::case it doesn
tree some internal::tree some internal
right more questions::right more questions
tree binary trees::tree binary trees
count the number::count the number
number of binary::number of binary
lets say preorder::lets say preorder
power n minus::power n minus
minus one right::minus one right
tree right wee::tree right wee
right child right::right child right
absolute minimum right::absolute minimum right
lots and lots::lots and lots
lots of things::lots of things
compute the close::compute the close
close form expression::close form expression
ways of traversing::ways of traversing
trees um inorder::trees um inorder
traversal for binary::traversal for binary
notion of inorder::notion of inorder
traversal for general::traversal for general
right after visiting::right after visiting
visiting the first::visiting the first
notion of left::notion of left
right so first::right so first
first you visit::first you visit
visit the left::visit the left
visit the right::visit the right
last class::last class
binary tree::binary tree
complete binary::complete binary
tree traversal::tree traversal
tree traversals::tree traversals
preorder traversal::preorder traversal
postorder traversal::postorder traversal
visit process::visit process
preorder tree::preorder tree
first section::first section
section lets::section lets
abstract discuss::abstract discuss
reference section::reference section
sub sections::sub sections
sections section::sections section
right suppose::right suppose
paper end::paper end
title read::title read
section sub::section sub
sub section::sub section
first node::first node
eleven twelve::eleven twelve
pseudo code::pseudo code
call preorder::call preorder
first visit::first visit
generic term::generic term
title print::title print
heading print::heading print
node corresponds::node corresponds
children nodes::children nodes
child nodes::child nodes
section subsection::section subsection
sub sub::sub sub
recursive traversal::recursive traversal
visit correspond::visit correspond
means visit::means visit
corresponds visit::corresponds visit
doing visit::doing visit
traversal recall::traversal recall
directory structure::directory structure
root directory::root directory
directory courses::directory courses
sub directory::sub directory
total space::total space
space occupied::space occupied
file system::file system
system lets::system lets
entire directory::entire directory
total spaces::total spaces
spaces required::spaces required
spaces occupied::spaces occupied
disk usage::disk usage
usage command::usage command
command unix::command unix
recursive manner::recursive manner
space required::space required
child hood::child hood
ordered trees::ordered trees
first child::first child
fourth child::fourth child
leftmost child::leftmost child
binary trees::binary trees
general trees::general trees
childrens nodes::childrens nodes
postorder visit::postorder visit
children node::children node
nodes lets::nodes lets
specialized case::specialized case
generic computation::generic computation
left child::left child
right child::right child
recursive procedure::recursive procedure
calling order::calling order
visit lets::visit lets
understand lets::understand lets
first thing::first thing
traversal left::traversal left
left sub::left sub
sub tree::sub tree
first print::first print
node visit::node visit
visit corresponds::visit corresponds
tree left::tree left
root node::root node
printing contents::printing contents
right sub::right sub
entire sub::entire sub
right answer::right answer
answer lets::answer lets
done postorder::done postorder
child null::child null
single node::single node
procedure works::procedure works
arithmetic expression::arithmetic expression
evaluate expressions::evaluate expressions
sub expression::sub expression
compute value::compute value
entire thing::entire thing
first value::first value
operator sitting::operator sitting
leaf corresponds::leaf corresponds
internal node::internal node
first evaluate::first evaluate
dot left::dot left
small modification::small modification
modification question::modification question
priority rules::priority rules
tree expression::tree expression
expression correspond::expression correspond
inorder traversal::inorder traversal
traversal preorder::traversal preorder
order kind::order kind
understood inorder::understood inorder
first inorder::first inorder
order traversal::order traversal
tree inorder::tree inorder
entire inorder::entire inorder
traversals priority::traversals priority
eulers rule::eulers rule
generic traversal::generic traversal
traversal postorder::traversal postorder
special cases::special cases
visited thrice::visited thrice
node lets::node lets
touch thrice::touch thrice
parenthesis print::parenthesis print
euler walk::euler walk
left bracket::left bracket
right bracket::right bracket
node understand::node understand
print bracket::print bracket
first bracket::first bracket
left print::left print
generic method::generic method
traversal inorder::traversal inorder
external node::external node
external right::external right
method left::method left
leaf node::leaf node
generic tree::generic tree
abstract class::abstract class
java details::java details
external external::external external
external left::external left
unspecified right::unspecified right
methods unspecified::methods unspecified
manner create::manner create
sub class::sub class
class sub::class sub
manner specializes::manner specializes
traversal procedure::traversal procedure
arithmetic expressions::arithmetic expressions
left result::left result
child directory::child directory
child compute::child compute
right result::right result
final value::final value
value return::value return
right print::right print
print traversal::print traversal
traversal method::traversal method
parenthesis form::parenthesis form
class binary::class binary
directories structure::directories structure
lets continue::lets continue
preorder preorder::preorder preorder
rep order::rep order
order inorder::order inorder
node tree::node tree
assignment put::assignment put
web today::web today
postorder inorder::postorder inorder
first figure::first figure
first element::first element
last element::last element
sub trees::sub trees
unique tree::unique tree
child suppose::child suppose
full tree::full tree
indian tree::indian tree
node ahs::node ahs
visits postorder::visits postorder
single element::single element
high level::high level
huge number::huge number
tree order::tree order
internal nodes::internal nodes
sufficient right::sufficient right
tree binary::tree binary
child right::child right
minimum number::minimum number
absolute minimum::absolute minimum
minimum right::minimum right
finite number::finite number
close form::close form
form expression::form expression
stop today::stop today
traversing trees::traversing trees
last::last
class::class
looked::looked
definitions::definitions
trees::trees
tree::tree
binary::binary
complete::complete
height::height
things::things
today::today
continue::continue
discussion::discussion
talk::talk
traversal::traversal
traversals::traversals
visiting::visiting
nodes::nodes
order::order
two::two
first::first
preorder::preorder
postorder::postorder
visit::visit
process::process
node::node
children::children
show::show
examples::examples
follow::follow
clearer::clearer
done::done
lets::lets
clarified::clarified
doubt::doubt
problem::problem
suppose::suppose
recall::recall
book::book
paper::paper
construct::construct
out::out
organization::organization
result::result
sections::sections
section::section
title::title
abstract::abstract
discuss::discuss
end::end
references::references
books::books
papers::papers
publication::publication
reference::reference
sub::sub
point::point
right::right
start::start
reading::reading
read::read
listing::listing
table::table
contents::contents
listed::listed
chapter::chapter
referring::referring
accessing::accessing
four::four
ten::ten
eleven::eleven
twelve::twelve
thirteen::thirteen
fourteen::fourteen
noise::noise
pseudo::pseudo
code::code
begin::begin
call::call
root::root
generic::generic
term::term
doing::doing
computations::computations
case::case
correspond::correspond
print::print
heading::heading
instance::instance
corresponds::corresponds
thing::thing
repeat::repeat
child::child
arbitrary::arbitrary
subsection::subsection
kind::kind
recursive::recursive
means::means
gave::gave
document::document
beginning::beginning
whats::whats
directory::directory
structure::structure
courses::courses
cs252::cs252
file::file
grades::grades
files::files
compute::compute
total::total
space::space
occupied::occupied
system::system
entire::entire
subdirectory::subdirectory
add::add
obtain::obtain
spaces::spaces
required::required
sense::sense
computation::computation
computed::computed
perform::perform
finding::finding
reverse::reverse
pervious::pervious
fact::fact
disk::disk
usage::usage
command::command
unix::unix
typing::typing
tells::tells
type::type
list::list
eventually::eventually
manner::manner
clear::clear
question::question
hood::hood
visited::visited
ordered::ordered
notion::notion
fourth::fourth
drawn::drawn
left::left
leftmost::leftmost
depends::depends
shown::shown
general::general
childrens::childrens
visits::visits
specialized::specialized
null::null
application::application
note::note
procedure::procedure
calling::calling
work::work
making::making
difference::difference
understand::understand
printing::printing
printed::printed
content::content
guy::guy
questions::questions
answer::answer
ready::ready
operate::operate
single::single
hindi::hindi
works::works
good::good
showing::showing
evaluating::evaluating
arithmetic::arithmetic
expression::expression
evaluate::evaluate
expressions::expressions
minus::minus
essence::essence
value::value
quantity::quantity
values::values
operator::operator
sitting::sitting
division::division
leaf::leaf
return::return
variable::variable
stored::stored
numbers::numbers
internal::internal
dot::dot
arrow::arrow
direction::direction
hope::hope
essentially::essentially
small::small
modification::modification
addressing::addressing
generating::generating
incorporate::incorporate
priority::priority
rules::rules
generated::generated
worried::worried
inorder::inorder
possibilities::possibilities
threes::threes
understood::understood
printout::printout
traversing::traversing
eulers::eulers
rule::rule
tours::tours
tour::tour
basically::basically
blue::blue
hit::hit
parent::parent
viewed::viewed
special::special
cases::cases
thrice::thrice
coming::coming
touching::touching
times::times
touches::touches
account::account
touch::touch
qualify::qualify
degree::degree
set::set
parenthesis::parenthesis
draw::draw
euler::euler
walk::walk
bracket::bracket
finish::finish
taking::taking
path::path
exact::exact
star::star
multiplication::multiplication
method::method
traverse::traverse
position::position
external::external
invoke::invoke
methods::methods
create::create
choice::choice
specialize::specialize
java::java
details::details
unspecified::unspecified
leave::leave
object::object
specifies::specifies
specializes::specializes
store::store
back::back
utilize::utilize
sum::sum
final::final
thast::thast
element::element
extending::extending
form::form
directories::directories
specializing::specializing
slightly::slightly
give::give
mention::mention
figure::figure
sir::sir
true::true
necessarily::necessarily
happen::happen
find::find
put::put
search::search
green::green
elements::elements
information::information
manage::manage
identify::identify
recursion::recursion
rep::rep
plug::plug
don::don
recursively::recursively
reduce::reduce
sees::sees
translate::translate
piece::piece
require::require
thought::thought
assignment::assignment
web::web
student::student
arrays::arrays
input::input
user::user
simple::simple
sequence::sequence
flag::flag
error::error
sequences::sequences
possibly::possibly
post::post
wee::wee
neatly::neatly
divides::divides
number::number
plugged::plugged
uniquely::uniquely
determine::determine
reason::reason
unique::unique
concerned::concerned
happening::happening
full::full
indian::indian
exercise::exercise
quickly::quickly
ahs::ahs
worked::worked
picture::picture
descends::descends
managed::managed
divide::divide
high::high
level::level
algorithms::algorithms
idea::idea
learn::learn
program::program
efficiently::efficiently
write::write
line::line
huge::huge
combinations::combinations
rise::rise
knowledge::knowledge
similarly::similarly
suffices::suffices
purposes::purposes
doesn::doesn
told::told
sufficient::sufficient
count::count
power::power
make::make
option::option
minimum::minimum
absolute::absolute
lots::lots
finite::finite
finitely::finitely
function::function
close::close
stop::stop
ways::ways
applications::applications
raise::raise
