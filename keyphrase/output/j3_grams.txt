introduction to java
programming language created
created by james
gosling from sun
publicly available version
version of java
microsystems was acquired
steermanship for java
versions of java
released the current
java is java
java programming language
language the java
java platform evolved
evolved the java
platform allows software
developers to write
write program code
java virtual machine
machine the java
java core libraries
java and open
open source software
started to make
gnu general public
general public license
continues this project
project called openjdk
computer that executes
machine is written
specific operating system
linux a special
implementation is required
windows java programs
programs are compiled
compiler into bytecode
bytecode the java
virtual machine interprets
interprets this bytecode
bytecode and executes
executes the java
java runtime environment
environment vs java
java development kit
kit a java
java class libraries
functionality to start
start java programs
programs the jdk
create java programs
jdk therefore consists
characteristics of java
java the target
target of java
write a program
run this program
program on multiple
multiple operating systems
operating systems java
machine as abstraction
access the operating
operating system directly
directly this makes
makes java programs
programs highly portable
portable a java
windows or linux
linux object-orientated programming
object-orientated programming language
primitive data types
elements in java
java are objects
objects strongly-typed programming
strongly-typed programming language
java is strongly-typed
pre-defined and conversion
interpreted and compiled
java source code
code is transferred
platform these bytecode
hotspot-compiler which translates
translates performance critical
performance critical bytecode
critical bytecode instructions
instructions into native
native code instructions
code instructions automatic
instructions automatic memory
automatic memory management
manages the memory
allocation and de-allocation
de-allocation for creating
creating new objects
objects the program
memory the so-called
so-called garbage collector
collector automatically deletes
automatically deletes objects
active pointer exists
exists the java
syntax is similar
java is case-sensitive
variables called myvalue
myvalue and myvalue
myvalue are treated
process with java
java java source
java source files
files are written
written as plain
plain text documents
documents the programmer
programmer typically writes
typically writes java
writes java source
integrated development environment
programming an ide
supports the programmer
task of writing
point the programmer
calls the java
java compiler creates
creates the bytecode
instructions these instructions
instructions are stored
stored in .class
collector the jvm
jvm automatically re-collects
re-collects the memory
objects the java
java garbage collector
garbage collector checks
checks all object
references and finds
finds the objects
garbage collector relieves
relieves the programmer
explicitly manage memory
unneeded object references
memory keeping unneeded
keeping unneeded object
typically called memory
classpath the classpath
compiler and java
files to load
load these instructions
external java library
add this library
installation of java
installation to run
run java programs
jre is installed
path by opening
opening a console
cmd and press
commands print information
skip the java
java installation description
command line returns
returns the information
java on ubuntu
ubuntu on ubuntu
command line sudo
line sudo apt-get
sudo apt-get install
apt-get install openjdk-7-jdk
windows for microsofts
website the central
website for installing
java is located
problems installing java
search via google
jdk on your_os
result in helpful
helpful links replace
links replace your_os
validate installation switch
line and run
command java -version
-version the output
output java version
1.7.0_25 " openjdk
openjdk runtime environment
openjdk 64-bit server
64-bit " string
64-bit version java
version java version
compile and run
run a java
write source code
program is developed
developed under linux
line the process
select or create
description the path
path \ home
home \ vogella
vogella \ javastarter
temp \ javastarter
javastarter this path
open a text
editor which supports
supports plain text
gedit under linux
linux or notepad
notepad under windows
windows and write
small java program
java program public
program public class
public class helloworld
public static void
static void main
editor like microsoft
word or libreoffice
libreoffice for writing
writing java code
plain text editor
writing java programs
text editor save
save the source
java source file
equal the class
run your java
java program open
open a shell
shell for command
command line access
line access tip
command cd javadir
dir under microsoft
compile your java
command javac helloworld.java
helloworld.java afterwards list
command the directory
compiled your first
first java source
code into bytecode
tip by default
puts each class
separate destination directory
start your compiled
compiled java program
java program ensure
directory and enter
command to start
start your java
java program java
program java helloworld
helloworld the system
system should write
command line compiling
compiling and running
running java programs
classpath to run
run the program
windows start run
start run cmd
run cmd switch
class is stored
system will show
show an error
exception in thread
thread " main
main " java.lang.noclassdeffounderror
replace " mydirectory
helloworld " output
output java -classpath
-classpath " mydirectory
mydirectory " helloworld
java language structure
class and object
important to understand
understand the base
terminology of java
java in terms
terms of packages
classes and objects
objects this section
package java groups
java groups classes
classes into functional
functional packages packages
classes into logical
package called com.vogella.webapplication.views
company as top
top level package
starts with com.vogella
com.vogella other main
usage of packages
avoid name collisions
collisions of classes
two programmers give
class in java
programmer may create
create a java
class called test
test another programmer
create a class
system which class
class to call
first programmer puts
puts the test
class into package
puts his class
xmlreader.test or report.test
template that describes
describes the data
data and behavior
note the class
object it describes
object is created
created in java
code a class
class is defined
letter the body
class is surrounded
test ; class
stored in variables
class or object
object is implemented
implemented with methods
methods a class
class is contained
class the object
actions each object
inheritance a class
case this class
subclass another common
extends another class
class the class
subclass is derived
class to inherit
inherit the behavior
behavior and data
class can extend
extend another class
java a class
extend a maximum
class package com.vogella.javaintro.base
com.vogella.javaintro.base ; class
override public void
class myextensionclass extends
myextensionclass extends mybaseclass
object as superclass
superclass every object
object in java
java implicitly extends
extends the object
object is equal
returns the class
returns an identifier
current object tostring
interface in java
java an interfaces
class an interface
interface defines methods
defines methods classes
classes can implement
implement the interfaces
obey the contract
clast provide implementation
abstract methods defined
default and static
methods in interfaces
interfaces an interface
methods and default
methods a default
method is defined
interfaces are public
public and abstract
abstract – explicit
modifiers is optional
static and final
interface package testing
testing ; public
public interface myinterface
constant definition string
definition string url
public abstract methods
abstract methods void
methods void test
default method default
method default string
default string reservestring
return new stringbuilder
implements this interface
implement the abstract
interfaces a class
class can implement
implement an interface
provide concrete implementations
abstract interface methods
implement a method
compiler can give
number of arguments
arguments package com.vogella.javaintro.base
com.vogella.javaintro.base ; public
public class myclassimpl
class myclassimpl implements
myclassimpl implements myinterface
public void test
public void write
interfaces before java
adding new methods
change would break
break existing implementations
existing implementations java
introduced default methods
extend an interface
interface without breaking
suppling a default
source an binary
binary compatible change
change a class
override a default
inheritance of methods
implements two interfaces
resolves the correct
class can inherit
inherit a method
inherts the superclass
true for concrete
concrete and abstract
abstract superclass methods
methods this rule
implies that default
superclass chain subtypes
chain subtypes win
win over supertypes
inherts the method
cases the class
implement the default
listing demonstrates listing
demonstrates listing number
class c implements
call the super
method you prefer
prefer public class
interfaces all interfaces
functional interfaces functional
interfaces functional interfaces
expressions see section
type of lambdas
interface the java
compiler automatically identifies
automatically identifies functional
identifies functional interfaces
capture the design
annotation several default
default java interfaces
interfaces are functional
java.lang.runnable java.util.concurrent.callable java.io.filefilter
java.util.concurrent.callable java.io.filefilter java.util.comparator
java.io.filefilter java.util.comparator java.beans.propertychangelistener
java.util.comparator java.beans.propertychangelistener java
java basic terms
inherits the methods
change these methods
override these methods
methods to override
override a method
intention to override
superclass package com.vogella.javaintro.base
class myextensionclass2 extends
myextensionclass2 extends mybaseclass
java compiler validates
override all methods
methods as intended
intended and prevents
system of java
primitives and references
references java distinguishes
distinguishes between primitive
char and byte
object and string
primitives primitive types
primitive types variables
types variables represents
represents the number
methods on variables
primitive types operators
supported for primitive
reference type string
string to concatenate
reference types reference
types reference types
reference types variables
represents a reference
change the value
reference type variable
null which represents
represents the non-existing
non-existing object reference
object reference changing
changing the value
change the attributes
changing the contents
affect the value
autoboxing and wrapper
types every primitive
java a fitting
fitting reference type
type this reference
store the value
java.lang.integer for int
converting a primitive
type and vice
unboxing java performs
performs these operations
primitive as parameter
method which expects
expects an object
type this automatic
boxing and unboxing
variables and methods
program to store
program a variable
variable a primitive
compare two reference
two reference variables
object to compare
instance variable instance
variable instance variable
objects instance variables
final or transient
transient instance variables
instance variables marked
marked as final
local variable local
access modifiers final
variables this modifier
first assignment local
assignment local variables
methods a method
block of code
code with parameters
object package com.vogella.javaintro.base
public class mymethodexample
declared with var-args
case the method
declares a parameter
parameter which accepts
exact same return
arguments the return
overload a method
method a public
public static method
start a java
typically called main
main method public
method public static
constructor a class
class contains constructors
invoked to create
create objects based
class definition constructor
definition constructor declarations
type a class
parameters each class
class must define
expects a parameter
parameter package com.vogella.javaintro.base
public class myconstructorexample2
constructor is defined
compiler implicitly adds
adds a constructor
class is sub-classed
constructor without parameters
compiler would create
create one package
public class myconstructorexample
compiler if left
left out public
out public myconstructorexample
convention for creating
creating a constructor
constructor this constructor
access modifiers keywords
protected and private
four access levels
default and private
private they define
element is visible
classes or methods
declared the access
access levels protected
protected and default
default are similar
similar a protected
package and sub-classes
describes the visibility
access level modifier
level modifier class
modifier class package
class package subclass
package subclass world
subclass world public
modifiers final methods
subclass abstract method
method body synchronized
body synchronized method
access control native
control native methods
platform dependent code
class or method
usage of import
statements in java
access a class
add import statements
statements for classes
classes or packages
static imports static
imports static import
fields and methods
public static access
static access modifier
member is defined
defined the feature
mechanism to include
constants into code
reference the class
defined the field
java language constructs
methods and class
class variables class
variables class methods
method or class
variable name class
variables are declared
static keyword class
keyword class methods
variables or static
field is println
object of type
call the println
define a static
runtime environment associates
associates one class
class no matter
exist the static
demonstrates the usage
usage of static
static fields package
fields package com.vogella.javaintro.base
public class mystaticexample
static string placeholder
static void test
public class tester
defined as constant
keyword the static
static method runs
directly access non-static
access non-static variables
variables or methods
class and methods
class and method
declared as abstract
abstract an abstract
class is abstract
define the methods
shows an abstract
abstract class package
public abstract class
abstract class myabstractclass
abstract double returndouble
working with classes
classes while programming
create several classes
package test table
class called mynewclass
mynewclass package test
test ; public
public class mynewclass
var1 of type
mynewclass class package
class package test
private string var1
create a constructor
parameter and assigns
assigns the value
var1 instance variable
instance variable package
variable package test
var1 ; public
var1 = para1
this.var1 = para1
method called dosomething
return a value
parameters package test
public void dosomething
method called dosomething2
person package test
public void dosomething2
class which returns
returns an int
public int dosomething3
class called myotherclass
two instance variables
store a string
store a dog
dog create getter
getter and setter
variables package test
public class myotherclass
myvalue ; dog
dog ; public
public string getmyvalue
public void setmyvalue
this.myvalue = myvalue
public dog getdog
public void setdog
this.dog = dog
working with local
variable a local
variable of type
type string string
string string variable1
variable1 ; declare
string and assign
assign " test
type person person
person person person
person ; declare
object and assign
assign the variable
object person person
declare an array
array of type
string string array
person and create
create an array
persons person array
int variable var1
assign the existing
existing variable pers2
exiting variable pers1
pers1 ; pers1
pers1 = pers2
pers2 ; declare
declare an arraylist
objects of type
type person arraylist
arraylist < person
person > persons
persons ; create
arraylist with objects
person and assign
existing variable persons
variable persons persons
environment the previous
previous chapter explained
create and compile
compile a java
line a java
java integrated development
lots of ease
functionality for creating
creating java programs
eclipse ide tutorial
tutorial the remaining
refers to creating
creating a java
project in eclipse
follow the required
creating java objects
objects and methods
create a person
class and instantiate
instantiate it create
class called person
add three instance
storing the first
storing the last
storing the age
object to set
set the values
default value add
add a tostring
method as described
codeing and solve
solve the todo
todo this method
convert the object
representation @ override
override public string
public string tostring
class called main
create an instance
add a constructor
class which takes
age as parameter
assign the values
main method create
object as parameter
setter methods define
methods define methods
read the values
setter and getter
getters should start
variable is capitalized
setter should start
start with set
variable called firstname
setter method change
change your main
create one person
method to change
change the last
create an address
address object create
object called address
address the address
store the address
create a getter
result after section
exercises.exercise04 ; class
exercises.exercise04 ; public
public class main
calls the tostring
pers object system.out.println
com.vogella.javastarter.exercises1 ; class
firstname ; string
lastname ; int
age ; public
age = value
com.vogella.javastarter.exercises1 ; public
variable and assign
public string getfirstname
public void setfirstname
this.firstname = firstname
public string getlastname
public void setlastname
this.lastname = lastname
public int getage
public void setage
this.age = age
jill gets married
married to jim
public class address
private string street
street ; private
private string number
number ; private
private string postalcode
postalcode ; private
private string city
city ; private
private string country
country ; public
public string getstreet
public void setstreet
this.street = street
public string getnumber
public void setnumber
this.number = number
public string getpostalcode
public void setpostalcode
this.postalcode = postalcode
public string getcity
public void setcity
this.city = city
public string getcountry
public void setcountry
this.country = country
age ; private
private address address
address ; public
public address getaddress
public void setaddress
this.address = address
person person pers
set the age
testing i write
system.out.println always calls
address address address
assign the address
reference to address
address object address
address = null
person is moving
statements the java
java language defines
defines certain statements
if-then and if-then-else
if-then-else the if-then
control flow statement
statement a block
evaluates to true
true the optional
optional else block
block is executed
evaluates to false
shows a class
methods the first
first method demonstrates
usage of if-then
usage of if-then-else
switch the switch
handle several alternatives
constant value switch
command ; break
executed case constant2
true ; case
compare two primitives
two different objects
objects are equal
short circuit methods
methods which means
interpreted as false
ensures that var
null before doing
doing the real
real check table
boolean operations description
case of objects
objects the system
reference variable point
compare the content
checks if string
string a equals
equals b a.equalsignorecase
ignoring lower cases
true if value
loops in java
repetition control structure
write a block
executed a specific
number of times
times the syntax
initialization ; expression
expression ; update_statement
code to run
loop public class
public class fortest
tip for arrays
arrays and collections
enhanced for loop
loop is covered
specific condition evaluates
false the syntax
public class whiletest
loop the do-while
loop is similar
condition is checked
execution the syntax
do-while loop public
public class dotest
arrays in java
java an array
object that holds
holds a fixed
number of values
type an item
element every element
index the first
array is addressed
com.vogella.javaintro.array ; public
public class testmain
declares an array
array of integers
initialize values array
initialize second element
loop for arrays
simpler for loop
body of code
demonstrates its usage
usage package com.vogella.javaintro.array
element at index
strings in java
java the string
string class represents
class represents character
represents character strings
strings all string
implemented as instances
class an instance
strings are immutable
string object creates
pool in java
java for memory
memory efficiency java
pool the string
pool allows string
java are immutable
string is created
string literal assigned
java to compare
compare the string
method a string
checks for object
object reference equality
work as expected
statement is true
comparison would fail
statement is false
working with strings
common string operations
string operations table
description " testing
testing " .equals
true if text1
text1 is equal
check is case-sensitive
case-sensitive " testing
testing " .equalsignorecase
variable length str.charat
return the character
character at position
strings are arrays
arrays of chars
removes the first
first characters str.substring
string " test
string str returns
returns the index
string " ing
string str stringbuffer
support this method
convert the stringbuffer
stringbuffer to string
string via method
method tostring str.endswith
true if str
ends with string
ing " str.startswith
true if string
string str starts
starts with string
leading and trailing
trailing spaces str.replace
replaces all occurrences
occurrences of str1
str1 by str2
end of str2
converts the string
string to lower
lower or uppercase
str1 + str2
str2 concatenate str1
str1 and str2
array = mystring.split
array2 = mystring.split
splits the character
character separated mystring
array of strings
meaning in regular
lambdas the java
programming language supports
language supports lambdas
expects a functional
interface as parameter
expression in java
closure a lambda
defined as parameter
parameter a closure
function which closes
defined this means
list and assigned
variable java supports
java supports lambdas
purpose of lambda
expressions using lambdas
condensed syntax compared
java programming constructs
collections in java
method which accepts
accepts a lambda
lambda expression list
list < string
string > list
lambda expression method
expression method reference
method reference define
define the method
streams in java
sequence of elements
source that supports
supports aggregate operations
create a stream
stream of sequence
sequence of primitive
primitive int-valued elements
int-valued elements supporting
elements supporting sequential
sequential and parallel
parallel aggregate operations
aggregate operations package
operations package com.vogella.java.streams
com.vogella.java.streams ; import
java.util.arraylist ; import
java.util.list ; import
java.util.stream.intstream ; public
public class intstreamexample
printout the numbers
create a list
list of integers
list < integer
integer > list
operations with streams
streams and lambdas
com.vogella.java.streams ; public
public class task
private string summary
summary ; private
private int duration
duration ; public
this.summary = summary
summary ; this.duration
this.duration = duration
public string getsummary
public void setsummary
public int getduration
public void setduration
java.util.random ; import
java.util.stream.collectors ; import
public class streamtester
generate a list
list of random
random task list
list < task
task > values
distinct task summary
task summary field
summary field list
string > resultlist
resultlist = values.stream
string of task
hours string collect
collect = values.stream
types java requires
types an explicit
conversion to string
types to strings
convert from int
int to string
convert from double
double to string
convert from boolean
boolean to string
convert from date
date to string
conversion from string
string to number
string to int
conversion from float
float to int
conversion from double
double to int
number is independent
notification for number
notification a correct
correct number format
thed german number
error to convert
class the challenge
class would create
create a long
casted to double
complex conversion class
conversion class private
class private double
private double convertstringtodouble
result = double.parsedouble
sql date conversions
convert a date
sql date package
date package test
test ; import
java.text.dateformat ; import
java.text.parseexception ; import
java.text.simpledateformat ; public
public class convertdatetosqldate
private void convertdatetosql
sqldate = java.sql.date.valueof
schedule tasks java
tasks a scheduled
tasks can perform
java.util.timer and java.util.timertask
tasks the object
object which implements
history java
programming language
language created
james gosling
sun microsystems
oracle corporation
enhanced versions
current version
java programming
java platform
platform evolved
software developers
write program
program code
virtual machine
java core
core libraries
open source
source software
sun started
make java
gnu general
public license
oracle continues
software implementation
executes programs
real machine
specific operating
operating system
special implementation
windows java
java programs
java compiler
machine interprets
java program
java runtime
runtime environment
java development
development kit
java distribution
java class
class libraries
start java
development tools
create java
multiple operating
operating systems
systems java
platform independent
system directly
makes java
highly portable
supported platforms
object-orientated programming
primitive data
data types
strongly-typed programming
programmer interpreted
compiled language
java source
source code
bytecode format
target platform
bytecode instructions
translates performance
critical bytecode
native code
code instructions
automatic memory
memory management
java manages
memory allocation
direct access
so-called garbage
garbage collector
deletes objects
active pointer
pointer exists
java syntax
development process
java java
source files
plain text
text documents
writes java
integrated development
development environment
ide supports
writing code
important keywords
compiler creates
.class files
java garbage
collector checks
object references
automatically released
collector relieves
explicitly manage
manage memory
unneeded object
memory keeping
keeping unneeded
memory leaks
classpath defines
external java
java library
check installation
run java
current path
enter cmd
press enter
java -version
commands print
print information
java installation
installation description
bit version
command line
line returns
install java
line sudo
sudo apt-get
apt-get install
install openjdk-7-jdk
microsofts windows
native installer
oracle website
central website
installing java
platforms java.com
installation problems
problems installing
install jdk
helpful links
links replace
replace your_os
validate installation
installation switch
command java
output java
java version
openjdk runtime
mixed mode
bit system
64-bit version
version java
write source
text editor
description select
microsoft windows
supports plain
small java
program public
public class
class helloworld
public static
static void
void main
rich editor
microsoft word
writing java
java code
editor save
javadir directory
helloworld.java filename
source file
.java extension
program open
line access
access tip
javastarter command
directory compile
class file
command javac
javac helloworld.java
dir command
file helloworld.class
first java
bytecode tip
compiler puts
separate destination
destination directory
compiler flag
compiled java
program ensure
jardir directory
program java
java helloworld
line compiling
running java
directory switch
windows start
run cmd
cmd switch
compiled class
error message
command replace
test directory
java -classpath
java language
language structure
base terminology
package java
java groups
groups classes
functional packages
packages packages
group classes
logical units
graphical views
common practice
reverse domain
top level
level package
java packages
company starts
main reason
collision occurs
programmers give
java consists
first programmer
programmer puts
test class
package report
package xmlreader
class def
class note
class keyword
capital letter
package test
class myclass
object def
real element
perform actions
class definition
common phrase
class extends
superclass inheritance
data definitions
codes demonstrates
class package
package com.vogella.javaintro.base
class mybaseclass
public void
class myextensionclass
myextensionclass extends
extends mybaseclass
object class
class defines
java object
current object
object hashcode
object tostring
string representation
java interfaces
interface keyword
interface defines
defines methods
methods classes
contract defined
clast provide
provide implementation
abstract methods
methods defined
static methods
default methods
default method
default keyword
method signature
explicit declaration
optional interfaces
code shows
interface package
package testing
public interface
interface myinterface
constant definition
definition string
string url
public abstract
methods void
void test
void write
method default
default string
string reservestring
class implements
abstract method
implementing interfaces
concrete implementations
abstract interface
interface methods
method defined
override annotation
arguments package
class myclassimpl
myclassimpl implements
implements myinterface
myclassimpl impl
lars vogel
evolving interfaces
existing implementations
implementations java
introduced default
breaking clients
default implementation
binary compatible
compatible change
multiple inheritance
interfaces provide
java resolves
correct method
superclass wins
class inherts
superclass method
abstract superclass
superclass methods
rule implies
superclass chain
chain subtypes
subtypes win
listing demonstrates
demonstrates listing
listing number
default void
super method
functional interfaces
lambda expressions
functional interface
design intent
functionalinterface annotation
default java
java.lang.runnable java.util.concurrent.callable
java.util.concurrent.callable java.io.filefilter
java.io.filefilter java.util.comparator
java.util.comparator java.beans.propertychangelistener
java.beans.propertychangelistener java
java.util.function package
boolean-valued property
object consumer
object function
function transforming
basic terms
override methods
code demonstrates
superclass package
class myextensionclass2
myextensionclass2 extends
good practice
compiler validates
prevents errors
type system
references java
java distinguishes
primitive types
reference types
types variables
variables represents
call methods
types operators
reference type
type string
concatenate strings
types reference
real object
variable points
non-existing object
object reference
reference changing
variable referring
wrapper types
primitive type
fitting reference
int converting
primitive value
wrapper type
vice versa
unboxing java
java performs
automatic boxing
variable variables
store values
primitive variable
reference variable
reference variables
compare objects
method call
variable instance
access works
objects instance
instance variables
access control
transient instance
variables marked
local variable
variable local
variable declarations
access modifiers
local variables
modifier defines
first assignment
default values
return value
object package
class mymethodexample
void tester
method declares
last parameter
method overwrite
return parameter
overload methods
overloaded method
return type
main method
static method
java application
create objects
objects based
definition constructor
constructor declarations
method declarations
class expects
parameter package
class myconstructorexample2
public myconstructorexample2
explicit constructor
super class
empty constructor
class myconstructorexample
public myconstructorexample
naming convention
constructor method
first statement
modifiers keywords
access levels
java objects
levels protected
protected class
default class
table describes
access level
level modifier
modifier class
package subclass
subclass world
final methods
subclass abstract
method body
body synchronized
synchronized method
thread safe
native methods
platform dependent
dependent code
methods strictfp
import statements
add import
related classes
package qualifier
static imports
static import
static access
access modifier
typesafe mechanism
include constants
language constructs
class methods
class variables
variables class
class method
static keyword
keyword class
static variables
static fields
static field
type printstream
static variable
environment associates
global variable
fields package
class mystaticexample
static string
string placeholder
class tester
final keyword
method runs
directly access
non-static variables
abstract class
directly instantiated
instantiated sub-classes
keyword abstract
class myabstractclass
double returndouble
cheat sheets
programming java
test table
mynewclass package
class mynewclass
mynewclass class
private string
string var1
string parameter
var1 instance
instance variable
variable package
public mynewclass
string para1
parameters package
void dosomething
person package
void dosomething2
person person
int value
public int
int dosomething3
dog create
create getter
variables package
class myotherclass
string myvalue
dog dog
public string
string getmyvalue
return myvalue
void setmyvalue
public dog
dog getdog
return dog
void setdog
method table
string string
string variable1
string variable2
type person
object person
string array
persons person
person array
variable var1
variable pers2
variable pers1
hold objects
person arraylist
variable persons
persons persons
previous chapter
chapter explained
java integrated
creating java
powerful ides
eclipse ide
ide tutorial
remaining description
java project
required steps
person class
person add
person object
default value
value add
tostring method
string tostring
todo replace
lastname return
method create
constructor add
parameter assign
define getter
setter methods
methods define
define methods
getter getters
first letter
capitalized setter
getter method
setter method
method change
address object
object create
expected result
class person
string firstname
string lastname
int age
return firstname
class main
pers object
public person
string getfirstname
void setfirstname
string getlastname
return lastname
void setlastname
int getage
return age
void setage
class address
string street
string number
string postalcode
string city
string country
string getstreet
return street
void setstreet
string getnumber
return number
void setnumber
string getpostalcode
return postalcode
void setpostalcode
string getcity
return city
void setcity
string getcountry
return country
void setcountry
private address
address address
public address
address getaddress
return address
void setaddress
person pers
console system.out.println
address address.setcity
person pers.setaddress
dispose reference
object address
java statements
language defines
predefined meaning
description lists
if-then statement
control flow
flow statement
part evaluates
first method
method demonstrates
switch statement
constant value
value switch
case constant1
executed case
case constant2
return true
boolean operations
short circuit
circuit methods
false usage
real check
operations description
system checks
variable point
lower cases
value false
repetition control
control structure
specific number
class fortest
string args
array description
specific condition
condition evaluates
class whiletest
do-while loop
class dotest
container object
fixed number
single type
first element
package com.vogella.javaintro.array
class testmain
integers int
allocates memory
integers array
initialize values
values array
element array
collections arrays
usage package
string class
class represents
represents character
character strings
string literals
object strings
string object
object creates
string pool
memory efficiency
efficiency java
literal assigned
operator forces
string copy
compare strings
string objects
string comparison
reference equality
correct result
expected string
fail string
common string
string operations
operations table
command description
stringbuffer str1
variable length
length str.charat
chars starting
first characters
characters str.substring
character str.indexof
string str
str returns
first occurrence
string str.lastindexof
last occurrence
str stringbuffer
method tostring
tostring str.endswith
returns true
str ends
str starts
removes leading
trailing spaces
spaces str.replace
str2 str2.concat
concatenates str1
str2 str.tolowercase
uppercase str1
str2 concatenate
concatenate str1
str2 string
character separated
strings attention
split string
regular expression
special characters
regular expressions
language supports
supports lambdas
lambda expression
parameters lambdas
method expects
anonymous function
access variables
parameter list
variable java
java supports
condensed syntax
syntax compared
programming constructs
foreach method
expression list
method references
expression method
method reference
reference define
instancemethod someclass
staticmethod someclass
instancemethod list
java.util.stream package
aggregate operations
primitive int-valued
int-valued elements
elements supporting
parallel aggregate
operations package
package com.vogella.java.streams
import java.util.arraylist
import java.util.list
import java.util.stream.intstream
class intstreamexample
reduction operations
class task
string summary
private int
int duration
public task
string getsummary
return summary
void setsummary
int getduration
return duration
void setduration
import java.util.random
import java.util.stream.collectors
class streamtester
random random
random task
task list
distinct task
task summary
summary field
field list
duration longer
hours string
string collect
type conversion
types java
java requires
explicit conversion
tue jun
int int
locale settings
english notification
correct number
number format
thed german
german number
numberformat class
complex conversion
conversion class
private double
double convertstringtodouble
double result
return result
sql date
date conversions
date package
import java.text.parseexception
class convertdatetosqldate
private void
void convertdatetosql
simpledateformat template
java.util.date enddate
java.sql.date sqldate
convertdatetosqldate date
schedule tasks
tasks java
scheduled tasks
times java.util.timer
implements timetask
timer based
introduction
java
history
programming
language
created
james
gosling
sun
microsystems
first
publicly
version
released
acquired
oracle
corporation
steermanship
enhanced
versions
current
platform
evolved
software
developers
write
program
code
languages
runs
virtual
machine
core
libraries
open
source
started
make
gnu
general
public
license
gpl
continues
project
openjdk
jvm
implementation
computer
executes
programs
real
written
specifically
specific
operating
system
e.g
linux
special
required
windows
compiled
compiler
bytecode
interprets
runtime
environment
development
kit
distribution
typically
two
flavors
jre
jdk
consists
class
functionality
start
additionally
tools
create
characteristics
target
run
multiple
systems
properties
independent
abstraction
access
directly
makes
highly
portable
standard-compliant
rules
unmodified
supported
platforms
object-orientated
primitive
data
types
elements
objects
strongly-typed
variables
pre-defined
conversion
strict
done
cases
programmer
interpreted
transferred
format
depend
instructions
hotspot-compiler
translates
performance
critical
native
automatic
memory
management
manages
allocation
de-allocation
creating
direct
so-called
garbage
collector
automatically
deletes
active
pointer
exists
syntax
similar
case-sensitive
myvalue
treated
process
files
plain
text
documents
writes
integrated
ide
supports
task
writing
auto-formating
highlighting
important
keywords
point
calls
javac
creates
stored
.class
executed
re-collects
referred
checks
object
references
finds
relieves
explicitly
manage
ensure
unneeded
release
keeping
leaks
classpath
defines
load
external
library
add
installation
check
installed
case
test
path
opening
console
win
enter
cmd
press
typing
command
-version
commands
print
information
skip
description
note
bit
section
line
returns
found
install
ubuntu
sudo
apt-get
openjdk-7-jdk
microsofts
installer
website
central
installing
located
url
java.com
problems
search
google
your_os
result
helpful
links
replace
mac
validate
switch
output
1.7.0_25
icedtea
2.3.10
7u25-2.3.10-1ubuntu0.13.04.2
64-bit
server
build
23.7-b01
mixed
mode
string
exercise
compile
developed
editor
covered
select
directory
home
vogella
javastarter
microsoft
temp
javadir
gedit
notepad
small
helloworld
static
void
main
args
system.out.println
world
warning
rich
word
libreoffice
doubt
save
helloworld.java
filename
file
equal
end
.java
extension
shell
tip
nt
dir
verify
list
content
helloworld.class
successfully
default
puts
separate
destination
flag
jardir
compiling
running
place
type
show
error
message
exception
thread
java.lang.noclassdeffounderror
mydirectory
-classpath
structure
basics
package
understand
base
terminology
terms
packages
classes
overview
groups
functional
group
logical
units
graphical
views
application
com.vogella.webapplication.views
common
practice
reverse
domain
company
top
level
vogella.com
starts
com.vogella
reason
usage
avoid
collisions
collision
occurs
programmers
give
fully
qualified
dot
call
report
xmlreader
distinguish
xmlreader.test
report.test
def
template
describes
behavior
instance
blueprint
defined
keyword
capital
letter
body
surrounded
myclass
implemented
methods
contained
element
perform
actions
based
definition
inheritance
derived
subclass
phrase
extends
superclass
inherit
definitions
codes
demonstrates
extend
maximum
com.vogella.javaintro.base
mybaseclass
override
myextensionclass
implicitly
equals
checking
getclass
hashcode
identifier
tostring
representation
interfaces
interface
implement
obey
contract
clast
provide
abstract
method
beginning
signature
explicit
declaration
modifiers
optional
constants
final
shows
testing
myinterface
constant
http
reservestring
return
stringbuilder
.reverse
.tostring
implements
implementing
concrete
implementations
annotation
mis-typed
number
arguments
myclassimpl
impl
impl.reservestring
lars
vogel
evolving
adding
change
break
existing
introduced
breaking
clients
simply
suppling
binary
compatible
supply
resolves
correct
wins
superinterface
inherts
true
rule
implies
declared
chain
subtypes
supertypes
subtype
listing
super
prefer
a.super.m
advantage
lambda
expressions
lambdas
learn
identifies
requirement
capture
design
intent
functionalinterface
java.lang.runnable
java.util.concurrent.callable
java.io.filefilter
java.util.comparator
java.beans.propertychangelistener
java.util.function
frequently
predicate
boolean-valued
property
consumer
action
performed
function
transforming
supplier
factory
unaryoperator
binaryoperator
basic
inherits
reader
intention
myextensionclass2
good
validates
intended
prevents
errors
primitives
distinguishes
boolean
short
int
double
float
char
byte
reference
represents
character
operators
concatenate
strings
variable
value
points
null
non-existing
changing
attributes
pointing
contents
affect
referring
autoboxing
wrapper
fitting
store
java.lang.integer
converting
vice
versa
boxing
unboxing
performs
operations
parameter
expects
values
compare
object1.equals
object2
works
control
marked
transient
changed
assigned
local
stack
declarations
modifier
assignment
initialized
block
parameters
mymethodexample
tester
var-args
declares
accepts
last
overwrite
exact
overload
overloaded
constructor
constructors
invoked
define
myconstructorexample2
this.s
adds
sub-classed
empty
unnecessary
myconstructorexample
left
out
naming
convention
classname
statement
protected
private
four
levels
visible
components
freely
accessed
sub-classes
table
visibility
overwritten
synchronized
safe
dependent
apply
strictfp
import
statements
full-qualified
i.e
related
qualifier
imports
feature
members
fields
member
typesafe
mechanism
include
originally
field
constructs
println
printstream
associates
matter
instances
exist
global
mystaticexample
placeholder
mystaticexample.placeholder
mystaticexample.test
declare
non-static
instantiated
myabstractclass
returndouble
cheat
sheets
working
mynewclass
attribute
var1
assigns
para1
this.var1
dosomething
dosomething2
person
dosomething3
myotherclass
dog
getter
setter
getmyvalue
setmyvalue
this.myvalue
getdog
setdog
this.dog
variable1
assign
variable2
array
hold
persons
pers2
exiting
pers1
arraylist
previous
chapter
explained
lots
ease
powerful
ides
eclipse
tutorial
remaining
refers
follow
steps
exercises
instantiate
com.vogella.javastarter.exercises1
storing
age
set
described
codeing
solve
todo
convert
firstname
lastname
takes
read
getters
capitalized
getfirstname
setfirstname
address
solution
expected
exercises.exercise04
jim
knopf
pers
reuse
henry
ford
this.firstname
getlastname
setlastname
this.lastname
getage
setage
this.age
jill
sanders
married
p2.setlastname
street
postalcode
city
country
getstreet
setstreet
this.street
getnumber
setnumber
this.number
getpostalcode
setpostalcode
this.postalcode
getcity
setcity
this.city
getcountry
setcountry
this.country
getaddress
setaddress
this.address
pers.setage
address.setcity
heidelberg
address.setcountry
germany
address.setnumber
address.setpostalcode
address.setstreet
musterstr
pers.setaddress
dispose
moving
house
pers.getaddress
.setnumber
predefined
meaning
lists
if-then
if-then-else
flow
part
evaluates
false
handle
alternatives
expression
constant1
prevent
constant2
cat.getlevel
cat.getname
.equalsignorecase
req.getcategory
req.getsubcategory
circuit
means
terminate
evaluation
clear
var
var.method1
ensures
doing
a.equals
a.equalsignorecase
ignoring
lower
negotiation
loops
loop
repetition
times
initialization
update_statement
fortest
arrays
collections
condition
whiletest
do-while
checked
execution
dotest
container
holds
fixed
single
item
index
addressed
com.vogella.javaintro.array
testmain
integers
allocates
initialize
processed
simpler
literals
immutable
pool
efficiency
reused
literal
places
copy
operator
forces
allocated
s1.equals
comparison
incorrect
equality
work
fail
.equals
text1
stringbuffer
str1
length
str.charat
position
chars
starting
str.substring
removes
characters
substring
str.indexof
str
occurrence
str.lastindexof
ing
support
str.endswith
ends
str.startswith
str.trim
leading
trailing
spaces
str.replace
str2
replaces
occurrences
str2.concat
concatenates
str.tolowercase
str.touppercase
converts
uppercase
mystring.split
array2
splits
separated
mystring
attention
split
regular
quote
quoted
backslashes
pass
difference
closure
anonymous
closes
closures
purpose
condensed
compared
foreach
list.add
google.com
heise.de
list.foreach
system.out
calledfrom
instancemethod
someclass
staticmethod
streams
stream
java.util.stream
sequence
aggregate
intstream
int-valued
supporting
sequential
parallel
com.vogella.java.streams
java.util.arraylist
java.util.list
java.util.stream.intstream
intstreamexample
printout
numbers
intstream.range
.foreach
integer
size
list.size
reduction
summary
duration
this.summary
this.duration
getsummary
setsummary
getduration
setduration
java.util.random
java.util.stream.collectors
streamtester
random
generate
values.add
random.nextint
distinct
resultlist
values.stream
.filter
t.getduration
.map
t.getsummary
.distinct
.collect
collectors.tolist
concatenated
longer
hours
collect
collectors.joining
requires
examples
string.valueof
math.pi
date
tue
jun
cest
integer.parseint
float.parsefloat
double.parsedouble
locale
settings
english
notification
thed
german
8,20
numberformat
challenge
long
casted
complex
convertstringtodouble
locale.setdefault
numberformat.getinstance
class.forname
java.lang.long
.isinstance
nf.parse
catch
classnotfoundexception
e1.printstacktrace
parseexception
sql
conversions
java.text.dateformat
java.text.parseexception
java.text.simpledateformat
convertdatetosqldate
convertdatetosql
simpledateformat
yyyy-mm-dd
java.util.date
enddate
java.sql.date
sqldate
java.sql.date.valueof
template.format
date.convertdatetosql
schedule
tasks
scheduled
java.util.timer
java.util.timertask
timetask
timer
