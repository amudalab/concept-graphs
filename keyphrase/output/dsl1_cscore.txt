worst case::12.0
primitive operation::10.0
current max::8.0
number of times::7.92481250361
primitive operations::7.0
input size::7.0
number of primitive::6.33985000288
average case::6.0
asymptotic analysis::5.0
data structure::5.0
pseudo code::5.0
constant times::5.0
lower order terms::4.75488750216
times some constant::4.75488750216
algorithm whose running::4.75488750216
sequence of numbers::4.75488750216
data structures::4.0
real numbers::4.0
input instance::4.0
decreasing order::4.0
right place::4.0
algorithm will increase::3.16992500144
good your algorithm::3.16992500144
make a difference::3.16992500144
talk of equality::3.16992500144
return current max::3.16992500144
implement the algorithm::3.16992500144
loop will terminate::3.16992500144
function in red::3.16992500144
location becomes empty::3.16992500144
measures of efficiency::3.16992500144
high level description::3.16992500144
size of input::3.16992500144
largest problem size::3.16992500144
current maximum element::3.16992500144
numbers of non-zero::3.16992500144
sequence of natural::3.16992500144
roughly n times::3.16992500144
linear time algorithm::3.16992500144
hardware and software::3.16992500144
done n times::3.16992500144
algorithms for solving::3.16992500144
input size doubles::3.16992500144
problem size::3.0
algorithm increases::3.0
asymptotic running::2.0
data movement::2.0
software environment::2.0
key key::2.0
computer system::2.0
algorithm takes::2.0
large increase::2.0
natural numbers::2.0
input instances::2.0
subroutine call::2.0
algorithmic problem::2.0
value returned::2.0
increasing order::2.0
output specification::2.0
program takes::2.0
logical operations::2.0
last element::2.0
sorted order::2.0
experimental study::2.0
programming language::2.0
insertion sort::2.0
good algorithm::2.0
return value::2.0
process develop data::1.58496250072
algorithm which takes::1.58496250072
array current max::1.58496250072
structures and algorithms::1.58496250072
language how pseudo-code::1.58496250072
function the function::1.58496250072
doing two primitive::1.58496250072
worst case average::1.58496250072
,because this constant::1.58496250072
out the running::1.58496250072
efficiency of algorithms::1.58496250072
conveys the idea::1.58496250072
1,000,000 n algorithm::1.58496250072
linear and quadratic::1.58496250072
specification a sorted::1.58496250072
function of input::1.58496250072
takes less memory::1.58496250072
sorting the input::1.58496250072
behavior of increase::1.58496250072
increases an hour::1.58496250072
straight line displaced::1.58496250072
order terms forget::1.58496250072
system a methodology::1.58496250072
stores an integer::1.58496250072
taking the value::1.58496250072
low level operation::1.58496250072
analyzing the space::1.58496250072
start by assigning::1.58496250072
drawn two functions::1.58496250072
working with asymptotic::1.58496250072
notation and big-theta::1.58496250072
hour the largest::1.58496250072
arrow please make::1.58496250072
similarly on x-axis::1.58496250072
algorithm is implementing::1.58496250072
constant and lower::1.58496250072
operations is executed::1.58496250072
shifting the element::1.58496250072
doubles the running::1.58496250072
analogy of real::1.58496250072
lot of data::1.58496250072
create a plot::1.58496250072
compute worst case::1.58496250072
kinds of programming::1.58496250072
variables or indices::1.58496250072
out the worst::1.58496250072
compute the running::1.58496250072
interested in capturing::1.58496250072
write a program::1.58496250072
monotonically increasing plots::1.58496250072
set of cards::1.58496250072
talk about asymptotic::1.58496250072
running the index::1.58496250072
sorting the instance::1.58496250072
non decreasing sequence::1.58496250072
call a method::1.58496250072
high-level programming concepts::1.58496250072
analyze the running::1.58496250072
reach this condition::1.58496250072
notation the big-omega::1.58496250072
amount the green::1.58496250072
achieved very late::1.58496250072
rid of superficial::1.58496250072
output an array::1.58496250072
varying data sets::1.58496250072
make a correction::1.58496250072
current time millis::1.58496250072
good algorithm good::1.58496250072
program with varying::1.58496250072
millions of years::1.58496250072
instances and algorithms::1.58496250072
case the total::1.58496250072
kind of repeating::1.58496250072
,c3 ,c4 ,c5::1.58496250072
drop all lower::1.58496250072
drop all constants::1.58496250072
numeric and boolean::1.58496250072
leave the comment::1.58496250072
brings the notion::1.58496250072
concepts thus pseudo-code::1.58496250072
operation is done::1.58496250072
loop will continue::1.58496250072
sorting n numbers::1.58496250072
inspect the pseudo::1.58496250072
input size increases::1.58496250072
point of crossing::1.58496250072
easiest to work::1.58496250072
drop the constant::1.58496250072
order n times::1.58496250072
scale the scale::1.58496250072
give an array::1.58496250072
steps are executed::1.58496250072
takes an array::1.58496250072
represent the amount::1.58496250072
compare the element::1.58496250072
increase four fold::1.58496250072
array algorithm array::1.58496250072
divide this sum::1.58496250072
develop data structures::1.58496250072
size becomes larger::1.58496250072
worst and average::1.58496250072
pick a larger::1.58496250072
game of cards::1.58496250072
algorithm is taking::1.58496250072
displaced by suitable::1.58496250072
finite length forms::1.58496250072
call or return::1.58496250072
word of caution::1.58496250072
cards and inserted::1.58496250072
express the number::1.58496250072
operations or logical::1.58496250072
two more related::1.58496250072
running time depends::1.58496250072
case the worst::1.58496250072
analysis clearly explains::1.58496250072
,c4 ,c5 ,c6::1.58496250072
definitions an algorithm::1.58496250072
input and output::1.58496250072
terminates and return::1.58496250072
,c2 ,c3 ,c4::1.58496250072
completely specified input::1.58496250072
represents the input::1.58496250072
problem an algorithmic::1.58496250072
sorted the output::1.58496250072
analyze this algorithm::1.58496250072
variable called current::1.58496250072
order of log::1.58496250072
takes and clock::1.58496250072
set of numbers::1.58496250072
simple rule suppose::1.58496250072
numbers as input::1.58496250072
statement is true::1.58496250072
set of inputs::1.58496250072
quantity which depends::1.58496250072
times the steps::1.58496250072
input an algorithm::1.58496250072
instance is drawn::1.58496250072
sort the numbers::1.58496250072
functions the function::1.58496250072
language data structure::1.58496250072
numbers and output::1.58496250072
blue in color::1.58496250072
definition for little-oh::1.58496250072
count that quantity::1.58496250072
red colored line::1.58496250072
integers as input::1.58496250072
executed during run::1.58496250072
long your algorithm::1.58496250072
measure of interest::1.58496250072
big-oh and big-omega::1.58496250072
jack and queen::1.58496250072
difficult to compute::1.58496250072
find the right::1.58496250072
error the function::1.58496250072
case is defined::1.58496250072
operations that makes::1.58496250072
interested to distinguish::1.58496250072
count the number::1.58496250072
insert this loop::1.58496250072
first sorting technique::1.58496250072
takes the number::1.58496250072
x-axis the red::1.58496250072
limit is achieved::1.58496250072
determine how good::1.58496250072
language you run::1.58496250072
card and insert::1.58496250072
forget the constant::1.58496250072
evaluate the efficiency::1.58496250072
sorted these numbers::1.58496250072
programming language data::1.58496250072
examples of asymptotic::1.58496250072
put the key::1.58496250072
hand you start::1.58496250072
equal little-oh corresponds::1.58496250072
input any set::1.58496250072
function in green::1.58496250072
organize the data::1.58496250072
infinitely many input::1.58496250072
case average case::1.58496250072
minus some constant::1.58496250072
times n minus::1.58496250072
key this statement::1.58496250072
dividing the value::1.58496250072
log n algorithm::1.58496250072
solving certain problem::1.58496250072
mixture of natural::1.58496250072
meets the specification::1.58496250072
comparison platform means::1.58496250072
specifies the type::1.58496250072
times this quantity::1.58496250072
constant k algorithm::1.58496250072
forms an instance::1.58496250072
algorithms worst case::1.58496250072
set of instances::1.58496250072
update the current::1.58496250072
make an output::1.58496250072
move it right::1.58496250072
element one step::1.58496250072
executed n times::1.58496250072
insert the element::1.58496250072
larger data sets::1.58496250072
two primitive operations::1.58496250072
shift an element::1.58496250072
syntax is wrong::1.58496250072
times just leave::1.58496250072
kind of thing::1.58496250072
number of instances::1.58496250072
solve for problem::1.58496250072
examples would clarify::1.58496250072
algorithm is close::1.58496250072
thing is done::1.58496250072
worst case occurs::1.58496250072
times the total::1.58496250072
describing an algorithm::1.58496250072
quantity to work::1.58496250072
develop the general::1.58496250072
checking this condition::1.58496250072
bound the function::1.58496250072
measure the running::1.58496250072
years to solve::1.58496250072
parameter it takes::1.58496250072
give the values::1.58496250072
place to insert::1.58496250072
loop it starts::1.58496250072
n-1 this entire::1.58496250072
times i start::1.58496250072
terminologies regarding data::1.58496250072
instance a sorted::1.58496250072
point would make::1.58496250072
pseudo-code for insertion::1.58496250072
things the first::1.58496250072
compute each element::1.58496250072
description to figure::1.58496250072
kinds of varying::1.58496250072
out these things::1.58496250072
doing is clear::1.58496250072
place i run::1.58496250072
describing the actions::1.58496250072
doing this algorithm::1.58496250072
similarly our algorithm::1.58496250072
non decreasing order::1.58496250072
examples of input::1.58496250072
examples the function::1.58496250072
utility like system::1.58496250072
good your algorithms::1.58496250072
develop a high::1.58496250072
operation * data::1.58496250072
strategy you follow::1.58496250072
related asymptotic notations::1.58496250072
program is doing::1.58496250072
problem you solve::1.58496250072
analogs of big-oh::1.58496250072
increase in input::1.58496250072
limit this quantity::1.58496250072
object used calls::1.58496250072
analyzing the running::1.58496250072
arithmetic an logical::1.58496250072
find an element::1.58496250072
produce the sequence::1.58496250072
step 9th location::1.58496250072
run your experiment::1.58496250072
hierarchy of functions::1.58496250072
number of elements::1.58496250072
increases with increase::1.58496250072
algorithm array max::1.58496250072
out a constant::1.58496250072
work with worst::1.58496250072
1size of size::1.58496250072
defines the difference::1.58496250072
code and count::1.58496250072
run the program::1.58496250072
makes an order::1.58496250072
structured than usual::1.58496250072
part the formal::1.58496250072
large for small::1.58496250072
notion of good::1.58496250072
element and insert::1.58496250072
sequence of sorted::1.58496250072
max if current::1.58496250072
,c6 just represent::1.58496250072
spend considerable amount::1.58496250072
find the maximum::1.58496250072
algorithm should sort::1.58496250072
quadratic and logarithmic::1.58496250072
machines would make::1.58496250072
interested in sorting::1.58496250072
algorithm good algorithm::1.58496250072
counting the number::1.58496250072
array of integers::1.58496250072
loop is executed::1.58496250072
relationship in java::1.58496250072
fastest growing term::1.58496250072
organizing the data::1.58496250072
counts the number::1.58496250072
provide as strong::1.58496250072
increases four fold::1.58496250072
drop my constant::1.58496250072
usual prose::1.0
data sets::1.0
remaining element::1.0
simple problem::1.0
original numbers::1.0
first algorithm::1.0
big-theta notation::1.0
operation takes::1.0
crucial point::1.0
natural language::1.0
output algorithm::1.0
control statement::1.0
limited set::1.0
non decreasing::1.0
small instances::1.0
simple algorithm::1.0
first card::1.0
object method::1.0
total running::1.0
assignment operator::1.0
formal definition::1.0
left arrow::1.0
varying composition::1.0
first lecture::1.0
linear running::1.0
huge increase::1.0
single variable::1.0
empty location::1.0
running times::1.0
non-tight analogs::1.0
equality relationship::1.0
system utility::1.0
arithmetic operations::1.0
little-oh notation::1.0
dominant thing::1.0
playing game::1.0
green line::1.0
operation key::1.0
repeating computations::1.0
if-then-else statement::1.0
total number::1.0
3rd element::1.0
nondecreasing order::1.0
algorithm doing::1.0
simple definitions::1.0
complicated function::1.0
suitable amount::1.0
value j-1::1.0
bigomega notation::1.0
quadratic behavior::1.0
programming construct::1.0
big-oh notation::1.0
index array::1.0
place suppose::1.0
software environments::1.0
maximum element::1.0
small errors::1.0
linear algorithm::1.0
nondecreasing numbers::1.0
exponential scale::1.0
the1st element::1.0
harder quantity::1.0
big-oh o-notation::1.0
subsequent slides::1.0
efficient efficient::1.0
dotted line::1.0
lower bound::1.0
order terms::1.0
declare methods::1.0
non-decreasing sequence::1.0
e.g addition::1.0
blue line::1.0
upper bound::1.0
non-linear function::1.0
big-omega notation::1.0
general methodology::1.0
exist constants::1.0
empty hand::1.0
numbers sitting::1.0
program running::1.0
4th element::1.0
basic terminologies::1.0
analyze algorithms::1.0
huge overhead::1.0
object specifies::1.0
procedure terminates::1.0
superficial details::1.0
efficient algorithm::1.0
earlier courses::1.0
inputs size::1.0
program hope::1.0
decrease index::1.0
first element::1.0
entire thing::1.0
nonnegative functions::1.0
finite length::1.0
first place::1.0
computational procedure::1.0
infinite bars::1.0
8th location::1.0
differences happening::1.0
loop terminates::1.0
small mistake::1.0
takes algorithm::1.0
small set::1.0
common error::1.0
non-decreasing order::1.0
scale increases::1.0
nondecreasing functions::1.0
constant minus::1.0
strong amount::1.0
small input::1.0
equality operator::1.0
boolean expressions::1.0
last step::1.0
function returns::1.0
input increases::1.0
current element::1.0
problem problem::1.0
sorted sequence::1.0
littleomega corresponds::1.0
comment statement::1.0
decreasing sequence::1.0
standard numeric::1.0
step mentioned::1.0
last line::1.0
entire program::1.0
size doubles::0.0
code::0.0
forget::0.0
limited::0.0
crucial::0.0
green::0.0
four::0.0
messy::0.0
expressions::0.0
bars::0.0
depend::0.0
prefixes::0.0
process develop::0.0
environment::0.0
late::0.0
j-1::0.0
account::0.0
worst::0.0
jack::0.0
decide::0.0
arrow::0.0
difference::0.0
condition::0.0
level::0.0
list::0.0
solution::0.0
leave::0.0
small::0.0
related::0.0
first sorting::0.0
inserting::0.0
smaller::0.0
harder::0.0
fold::0.0
nondecreasing::0.0
7th::0.0
defines::0.0
implemented::0.0
machines::0.0
linear::0.0
blue::0.0
index::0.0
errors::0.0
accumulating::0.0
specification::0.0
find::0.0
experiment::0.0
run::0.0
order::0.0
movement::0.0
args::0.0
concepts::0.0
understanding::0.0
x-axis::0.0
fairly::0.0
doubles::0.0
i.e::0.0
strong::0.0
terminologies::0.0
high level::0.0
colored::0.0
clarify::0.0
shift::0.0
study::0.0
amount::0.0
loop::0.0
permutation::0.0
implement::0.0
suitable::0.0
makes::0.0
operation.how::0.0
divide::0.0
logical::0.0
boolean::0.0
analyzing::0.0
clock::0.0
1st::0.0
summation::0.0
counts::0.0
total::0.0
plot::0.0
1size::0.0
working::0.0
two::0.0
comparing::0.0
program::0.0
call::0.0
wondering::0.0
memory::0.0
type::0.0
sort::0.0
exit::0.0
brings::0.0
line::0.0
important::0.0
terminates::0.0
big::0.0
basically::0.0
varying::0.0
easiest::0.0
capturing::0.0
word::0.0
hour::0.0
work::0.0
array max::0.0
huge::0.0
values::0.0
learn::0.0
growing::0.0
control::0.0
compare::0.0
figure::0.0
give::0.0
process::0.0
high::0.0
effectively::0.0
counting::0.0
rid::0.0
requirements::0.0
goal::0.0
non-linear::0.0
sit::0.0
write::0.0
methodology::0.0
considerable amount::0.0
,c4 ,c5::0.0
non-decreasing::0.0
inputs::0.0
continues::0.0
description::0.0
specifications::0.0
max::0.0
imagine::0.0
produce::0.0
develop::0.0
constants::0.0
natural::0.0
outline::0.0
computations::0.0
provide::0.0
algorithms::0.0
definitions::0.0
make::0.0
talk::0.0
fastest::0.0
operations::0.0
vary::0.0
rule suppose::0.0
years::0.0
organize::0.0
low level::0.0
left::0.0
mentioned::0.0
introduced::0.0
the1st::0.0
non-zero::0.0
9th::0.0
forms::0.0
algorithmic::0.0
choose::0.0
return::0.0
greater::0.0
entire::0.0
finish::0.0
bound::0.0
lesser::0.0
sorted::0.0
scale::0.0
represents::0.0
term::0.0
equality::0.0
parameter::0.0
grows::0.0
courses::0.0
good::0.0
follow::0.0
crossing::0.0
meets::0.0
doing::0.0
idea::0.0
operator::0.0
increases::0.0
expect::0.0
measure::0.0
out::0.0
3rd::0.0
space::0.0
squared::0.0
increase::0.0
lecture::0.0
millions::0.0
occurs::0.0
programming concepts::0.0
earlier::0.0
standard::0.0
indices::0.0
completely::0.0
complicated::0.0
3600seconds::0.0
put::0.0
sitting::0.0
beginning::0.0
card::0.0
log::0.0
definition::0.0
pseudo-code::0.0
o-notation::0.0
language::0.0
e.g::0.0
programming::0.0
wrong::0.0
times::0.0
thing::0.0
length::0.0
4th::0.0
place::0.0
assign::0.0
first::0.0
little-omega::0.0
upper::0.0
variables::0.0
number::0.0
instances::0.0
0,1,2,3::0.0
done::0.0
array::0.0
dividing::0.0
2-n::0.0
straight::0.0
size::0.0
asymptotic::0.0
decrease::0.0
similarly::0.0
data::0.0
system::0.0
construct::0.0
i-1::0.0
returns::0.0
quadratic::0.0
listed::0.0
red colored::0.0
structures::0.0
low::0.0
largest problem::0.0
varying data::0.0
relationship::0.0
line displaced::0.0
minute::0.0
slides::0.0
technique::0.0
growing term::0.0
picked::0.0
kind::0.0
analyze::0.0
subroutine::0.0
0-10::0.0
structured::0.0
iteration::0.0
executed::0.0
param2::0.0
cards::0.0
illustrates::0.0
playing::0.0
declare::0.0
correction::0.0
argument::0.0
summing::0.0
environments::0.0
analysis::0.0
increment::0.0
initialized::0.0
close::0.0
element::0.0
tells::0.0
20n::0.0
sandwiched::0.0
smallest::0.0
depending::0.0
efficient::0.0
bigomega::0.0
note::0.0
integers::0.0
asymptotic notations::0.0
solve::0.0
behaves::0.0
begin::0.0
track::0.0
decreasing::0.0
reach::0.0
little-oh::0.0
inserted::0.0
sorting technique::0.0
picture::0.0
y-axis::0.0
takes::0.0
considered::0.0
clear::0.0
spend::0.0
part::0.0
400n::0.0
analogy::0.0
usual::0.0
typically::0.0
notion::0.0
terms forget::0.0
queen::0.0
terminate::0.0
syntax::0.0
notations::0.0
large::0.0
careful::0.0
high-level::0.0
current::0.0
minus::0.0
accumulator::0.0
hierarchy::0.0
corresponds::0.0
constant::0.0
hope::0.0
meant::0.0
monotonically::0.0
mixture::0.0
dominant::0.0
notation::0.0
means::0.0
dependent::0.0
familiar::0.0
express::0.0
methods::0.0
,c3 ,c4::0.0
actions::0.0
drawn::0.0
insertion::0.0
comparison platform::0.0
it.this::0.0
increasing::0.0
method::0.0
bad::0.0
common::0.0
counted::0.0
bother::0.0
set::0.0
computed::0.0
achieved::0.0
violated::0.0
case occurs::0.0
identify::0.0
depends::0.0
computer::0.0
1,000,000::0.0
1,20,908,909,100000,1000000000::0.0
1_j-1::0.0
error::0.0
subsequent::0.0
initially::0.0
increasing plots::0.0
check::0.0
terms::0.0
size increases::0.0
language data::0.0
superficial::0.0
7n-3::0.0
key::0.0
picking::0.0
distribution::0.0
last::0.0
taking::0.0
equal::0.0
thinking::0.0
intercept::0.0
experimental::0.0
sum::0.0
comment::0.0
solving::0.0
point::0.0
simple::0.0
2nd::0.0
distinguish::0.0
colon::0.0
platform::0.0
numbers::0.0
largest::0.0
,c5 ,c6::0.0
semicolon::0.0
dealt::0.0
addition::0.0
create::0.0
strategy::0.0
defined::0.0
red::0.0
logarithmic::0.0
interest::0.0
basic::0.0
expected::0.0
location::0.0
,c4::0.0
,c5::0.0
,c2::0.0
big-oh::0.0
essentially::0.0
stopwatch::0.0
understand::0.0
big-omega::0.0
general::0.0
assigning::0.0
little-oh corresponds::0.0
case::0.0
platform means::0.0
exponential::0.0
starts::0.0
straight line::0.0
value::0.0
lower order::0.0
simple rule::0.0
suppose::0.0
procedure::0.0
mistake::0.0
independent::0.0
1,000,000n::0.0
non::0.0
hardware::0.0
related asymptotic::0.0
prose::0.0
limit::0.0
level description::0.0
elements::0.0
things::0.0
millis::0.0
units::0.0
finite::0.0
composition::0.0
difficult::0.0
slightly::0.0
high-level programming::0.0
assignment::0.0
pick::0.0
average::0.0
running::0.0
caution::0.0
purpose::0.0
implementation::0.0
infinite::0.0
,c2 ,c3::0.0
big-theta::0.0
infact::0.0
lower::0.0
roughly::0.0
object::0.0
double::0.0
array algorithm::0.0
sets::0.0
polynomial::0.0
algorithms worst::0.0
stores::0.0
half::0.0
rest::0.0
detail::0.0
integer::0.0
previous::0.0
move::0.0
current maximum::0.0
instance::0.0
,because::0.0
color::0.0
level operation::0.0
input::0.0
remaining::0.0
details::0.0
real::0.0
reuse::0.0
checking::0.0
evaluate::0.0
game::0.0
returned::0.0
littleomega::0.0
formal::0.0
insert::0.0
displaced::0.0
sorting::0.0
analogs::0.0
efficiency::0.0
sizes::0.0
length forms::0.0
continue::0.0
output::0.0
specifies::0.0
right::0.0
sequence::0.0
develop data::0.0
experiments::0.0
examples::0.0
conveys::0.0
drop::0.0
organizing::0.0
users::0.0
describing::0.0
steps::0.0
limitations::0.0
measures::0.0
infinitely::0.0
compiler::0.0
inspect::0.0
update::0.0
step::0.0
shifting::0.0
java::0.0
repeating::0.0
comparison::0.0
non-tight::0.0
larger data::0.0
statement::0.0
calls::0.0
for3::0.0
software::0.0
primitive::0.0
computational::0.0
lies::0.0
algorithm array::0.0
determine::0.0
utility::0.0
spending::0.0
plots::0.0
11,12,13,14::0.0
explains::0.0
long::0.0
start::0.0
lot::0.0
overhead::0.0
function::0.0
4,5,6,7::0.0
n-1::0.0
differences::0.0
strictly::0.0
numeric::0.0
larger::0.0
true::0.0
considerable::0.0
happening::0.0
count::0.0
equal little-oh::0.0
compute::0.0
algorithm::0.0
happen::0.0
platforms::0.0
represent::0.0
implementing::0.0
maximum::0.0
if-then-else::0.0
empty::0.0
hand::0.0
problem::0.0
case average::0.0
,c6::0.0
required::0.0
operation::0.0
computing::0.0
pseudo::0.0
moved::0.0
nonnegative::0.0
single::0.0
exist::0.0
behavior::0.0
,c3::0.0
functions::0.0
dotted::0.0
end::0.0
interested::0.0
branch::0.0
arithmetic::0.0
repeat::0.0
kinds::0.0
knew::0.0
variable::0.0
eventually::0.0
param::0.0
omega::0.0
structure::0.0
freely::0.0
factors::0.0
colored line::0.0
rule::0.0
fact::0.0
quantity::0.0
original::0.0
8th::0.0
