talking about stacks
talking about abstract
abstract data types
data types interfaces
interfaces and exceptions
exceptions how stacks
stacks are implemented
implemented in java
application one application
series will talk
talk about global
bit of mortise
talk about stacks
stacks in java
java virtual machines
machines okay whats
whats an abstract
abstract data type
basically a specification
set of axioms
axioms that define
define this semantics
types for instances
integer this right
understand the notion
notion of addition
add two integers
integers in math
define data types
define certain operations
case of integers
defined in math
add n variable
variable of type
kind of operations
method in java
create an instance
talking about sophisticated
sophisticated data types
types this method
lot of work
work access functions
access functions functions
type and manipulation
manipulate or modify
modify the data
talking about data
types here data
talk at higher
level of abstraction
talk in terms
terms of integer
adding to integers
stacks or queues
advanced data type
encapsulate the data
data is organized
algorithms that work
structures they encapsulate
encapsulate that right
separate the issues
issues of correctness
correctness and efficiency
give you start
start by giving
giving a simple
high school classes
collection of objects
objects and suppose
modify that collection
objects which means
add an object
remove an object
dynamic set dynamic
changing the set
changing the collection
create data types
kind of methods
method to create
create dynamic set
insert to insert
insert an element
result an instance
set another set
includes the element
removes the element
methods for updating
updating the set
method for creating
method the return
true otherwise false
talked about axioms
axioms which define
operations should behave
set its empty
false no matter
operation yeah provided
set is present
implement the dynamic
talking abstract data
axioms that govern
govern those operations
operations that dictate
operations are doing
simple abstract data
stacks and stacks
skip to stacks
collection of elements
last in first
first out principle
remove an element
inserted the last
operation of inserting
inserting an element
operation of removing
removing an element
popping the stack
kind of toys
stack of trays
put a stack
stack a tray
create a stack
element o push
adds this element
type it inserts
stack pop pop
taking any parameter
taking the stack
pop the stack
remove the top
stack is empty
flag an error
top operation returns
returns the top
differs from push
differ from pop
pop also removes
removes that element
empty then top
doesnt not making
making any sense
operation so size
method so size
talked of push
pop new top
methods are doing
axioms which govern
stack when push
push an element
stack abstract data
define the methods
methods we define
define two axioms
translate abstract data
type into code
machine of interfaces
interface an interface
methods are done
names of parameter
types of parameter
write a class
provide the code
implement that interface
interface right write
write the classes
write different classes
implement the interface
completely different ways
classes your implementation
provided the meet
meet the specification
provide the meet
meet the interface
class any implementation
provided that implementation
meets this specification
meets the interface
helps us separate
separate the implementation
technique so lets
built in stack
stack data structure
define a stack
method called size
method and stuff
pushing it takes
takes a parameter
parameter of type
object right object
type in java
java all objects
objects are derived
instance the method
method is empty
empty returns boolean
returns boolean right
right just tells
recall the top
returns an object
stack empty exception
signal that right
notion of exceptions
nt um return
return a stack
stack it modifies
modifies the stack
nt consider stack
exceptions are mechanisms
mechanisms to handle
reach some exceptional
conditional or exceptional
execution of program
program we throw
term is throw
throw with throw
throw an exception
exception is thrown
thrown the flow
flow of control
delegate the responsibility
responsibility of handling
handling that exceptional
exceptional case upwards
upwards you delegate
handling that problem
eat pizza method
method which throws
throws a stomachache
throw stomachache exception
exception this procedure
stimulate meeting procedure
exist this method
statement these dot
dot dot dot
dot dot means
bunch of statements
executed the flow
control would interrupt
interrupt this point
block and catch
depends your question
variables locals variables
modification get carried
enclose the method
method you calling
calling those bracket
skip this catch
block which means
exception was raised
method might raise
raise many exceptions
block and execute
execute the statements
raises an exception
execute whatever statements
system a dot
dot out exception
right to explain
write this catch
nt not write
procedure simulate meeting
throw the exception
thrown an exception
exception the control
catching this exception
high level procedure
finally you procedure
procedure will stop
exception finally appearing
method to print
out the statement
creating an object
creating an instance
initializing that instance
set of parameters
making this call
propagate upward move
upward move upward
exception was thrown
procedure would throw
reach the console
console that signifies
java in java
java that signifies
class your invoking
invoking the constructor
method of listening
listening for exceptions
mention before catch
dot out dot
out dot printline
threw an exception
exception in turn
exception has happen
add a throws
wrote the method
throws this exception
exception yes proc
proc a method
defining a stomachache
stomach ache exception
class right recall
taking a single
calling the super
catch an exception
chain of methods
reaches the console
console any questions
questions it calls
calls the constructor
constructor of parent
class the class
class this classes
run time exception
pass that question
understand little bit
bit more java
java before right
catch this exception
catch third exception
created the interface
ways of implementing
implementing a stack
stack is capital
element this array
hold the elements
elements would stack
push another element
out an entire
array to implement
implement the stack
implementing the stack
array stack implement
stack implement stack
stack by implement
implement stack means
interface we provide
set a default
variable n final
elements of stack
right t equals
equals zero means
means the top
minus one right
two constructor methods
call array stack
stack whose capacity
capacity are thousand
lets say thirty
stack of size
size should return
empty the stack
method could return
push an object
push this object
stack already equals
throw a stack
stack full exception
put the object
location incremented location
increment then put
check the stack
control would exit
return the top
element is empty
element in location
element i decrement
removing the top
element and lets
location i set
set a null
null i dereference
right because earlier
remove that object
top element pop
element pop returns
remove those objects
understand your question
array of objects
access the tth
operations were taking
required time propositional
number of elements
methods take order
creation of stack
hand whats size
whats size stack
large size stack
waste of memory
allocate very small
run our procedure
procedure to completion
stack is full
full the stack
raise a stack
make a stack
grow the stack
application of stacks
daily stock prices
prices of lets
price on day
span s sub
number of consecutives
make it clear
number of days
days the price
span of stock
day five equals
equals four inclusive
inclusive of kind
make clear right
instance for days
compute this span
array of numbers
numbers i give
compute s sub
stock on day
day i minus
two i minus
moment you find
find a case
price of stock
stop you stop
stop this loop
done is true
repeat until loop
loop if done
span then span
span stock price
implementing this doing
doing this thing
computing this span
times this loop
case i times
executed i times
number of times
square n square
algorithm is big
case so question
talking of stacks
compute the span
closet day preceding
stock prices greater
greater than price
closest day preceding
day preceding day
price of day
call this quantity
quantity closet day
price is greater
conventionally lets defined
determine s sub
sub i span
span this span
told you price
closest tape preceding
price is larger
larger than price
two is larger
similarly that day
store these indices
compare the price
day six suppose
suppose the price
compare with price
first price larger
update my stack
things and lets
compare that price
recall the previous
right the index
stack will give
recall from previous
done becomes true
true when done
found a price
current days price
stack becomes empty
exit this loop
loop the stack
top value stack
push i back
execute whole lot
lot of times
execute a lot
case n square
stack each element
element is pushed
loop is executed
executed yeah pop
pop of elements
elements ever pushed
times loop executes
loop this execute
times exactly execute
execute so whats
whats the total
number of total
square i hear
grow this loop
move an element
pushed n elements
elements total total
total total number
give maximum size
stack yeah suppose
pushing an elemnt
elemnt the size
array of length
array i copy
increase the size
push i increment
increment the top
push top location
strategy for growth
increment the size
increment additive increment
strategy we double
double the size
regular push push
push the element
takes one unit
create a larger
stack and copy
copy the elements
form the earlier
earlier stack stack
created a stack
unit you copied
special push operation
lets see lets
incrementing the size
initially i started
array of size
size four right
push this first
enlarge my stack
cost one unit
create an array
cost becomes cost
four four units
twelve i copy
phase one size
beginning of phase
copy the previous
previous four elements
minus one elements
cost of copying
copying the element
array gets fulled
four regular pushes
doing c pushes
cost of phase
phases and total
two c times
quantity this sum
roughly n square
approximately n order
equal to order
tight strategy concerned
case the analysis
analysis would change
creating an array
quickly through growth
strategy i start
first element create
double this array
size two push
push this element
element i double
size two size
four and push
push ill pushing
size of array
size eight copy
copy these element
analyze the cost
cost of creating
creating the array
created an array
array of cost
two we copied
copied one element
cost of pushing
pushing we created
pushing the elements
define a face
two we call
four we call
call it phase
array has size
size eight phase
left after copied
minus one cost
log in phases
discussion about stacks
stacks next class
queues and linked
linked lists stop
todays class
abstract data
data types
types interfaces
java application
global stacks
mortise analysis
virtual machines
data type
real numbers
define data
operation required
mathematic class
constructor operation
constructor method
sophisticated data
work access
access functions
functions functions
access elements
manipulation procedure
building blocks
algorithmic procedure
higher level
advanced data
data structure
data structures
dynamic set
high school
school classes
add operations
collection remove
create data
dynamic sets
method insert
creating constructing
access method
return value
type boolean
write axioms
resulting set
previous set
basic axioms
behavior functionality
algorithm procedure
talking abstract
simple abstract
doing today
out principle
instance stack
tray put
key methods
stack push
push adds
stack pop
pop pop
top element
top operation
operation returns
element top
top doesnt
support methods
size tells
empty tells
push pop
top size
methods understand
govern behavior
stack abstract
translate abstract
methods asscoaited
interface implementation
write implement
implementation provided
specification provide
interface specification
implementation stick
implementation meets
specification meets
programming technique
stack implementation
stack data
stack interface
return type
type object
generic type
empty returns
boolean right
stack empty
empty exception
exception exception
void means
handle errors
exceptional conditional
exceptional case
java term
control moves
current method
exception occurs
case upwards
delegate responsibility
eat pizza
pizza method
stomachache exception
dot coded
procedure eatpizza
stimulate meeting
meeting procedure
method eatpizza
dot dot
dot means
catch blocks
procedure call
variables locals
locals variables
global variables
catch block
method raises
statements return
out exception
procedure simulate
simulate meeting
parent procedure
high level
level procedure
procedure stops
java class
call creating
calling procedure
propagate upward
upward move
move upward
procedural hierarchyright
signifies creating
parameters written
signifying java
exceptions catching
system dot
out dot
dot printline
throws class
previous slides
method epizza
single parameter
super class
propagate upwards
parent class
stomach ache
ache exception
extending run
methods throw
catch statement
java book
implement methods
array lets
maximum size
first element
entire implementation
array stack
stack implement
implement stack
stack means
default capacity
thousand twenty
constructor methods
call array
number lets
size thirty
easy right
return false
full exception
location incremented
incremented location
location element
earlier index
top location
location number
location thirty
element pop
pop returns
type class
private member
tth element
array implementation
operations required
virtual depend
upper bound
default value
hand whats
whats size
size stack
large size
small stack
pop methods
stock prices
daily stock
stock price
maximum number
consecutives days
days price
clear right
price day
decrementing incrementing
true done
exit repeat
span stock
thing computing
worst case
last class
total number
closet day
day preceding
closest day
preceding day
first day
quantity closet
quantities suppose
closest tape
tape preceding
first compare
first price
price larger
previous lecture
true means
current days
top value
value stack
computation great
loop execute
elements stack
elements begin
loop executed
loop executes
times loop
statements execute
iteration put
loop move
element stack
elements total
elements pushed
good question
give maximum
stack grow
original stack
regular thing
top counter
tight strategy
growth strategy
additive increment
regular push
push push
special push
larger stack
elements form
earlier stack
stack stack
total cost
push operation
regular pushes
size twelve
element twelve
call phase
right lets
small problem
multiplication operator
previous array
phase total
square times
order square
strategy concerned
purposes analysis
element create
array size
array create
cost push
cost pushing
size sixteen
copy elements
elements left
stop discussion
discuss queues
linked lists
lists stop
todays
class
talking
stacks
abstract
data
types
interfaces
exceptions
implemented
java
application
analysis
series
talk
global
bit
mortise
virtual
machines
whats
type
basically
specification
instances
set
axioms
define
semantics
operations
integer
right
real
numbers
two
integers
addition
understand
notion
add
math
similarly
defined
interface
giving
signature
operation
parameters
required
results
case
sum
variable
answer
mathematic
clearer
kind
essentially
constructor
method
create
instance
sophisticated
lot
work
access
functions
elements
manipulation
procedure
manipulate
modify
identify
requirements
building
blocks
algorithmic
out
language
higher
level
abstraction
terms
adding
queues
advanced
discuss
encapsulate
structure
organized
algorithms
structures
separate
issues
correctness
efficiency
show
give
start
simple
dynamic
high
school
classes
collection
objects
suppose
means
object
remove
changing
sets
methods
insert
element
result
includes
removes
updating
creating
constructing
telling
return
value
boolean
true
false
talked
behave
write
form
empty
matter
resulting
asked
previous
provided
delete
present
basic
nature
behavior
functionality
algorithm
thing
code
implement
interested
permitted
govern
dictate
doing
familiar
nt
today
skip
stack
last
first
principle
inserted
removed
inserting
pushing
removing
popping
toys
trays
mess
put
tray
top
pop
supported
four
key
push
adds
inserts
taking
parameter
flag
error
returns
differs
differ
doesnt
making
sense
support
size
tells
pushed
back
complete
translate
construct
machine
declare
asscoaited
done
part
implementation
slight
names
fact
provide
short
completely
ways
meet
program
written
stick
meets
coding
helps
programming
technique
lets
built
stuff
question
takes
generic
derived
recall
exception
signal
minute
void
executed
modifies
mechanisms
handle
errors
reach
exceptional
conditional
execution
throw
term
thrown
flow
control
moves
current
point
idea
occurs
delegate
responsibility
handling
upwards
problem
clear
eat
pizza
throws
stomachache
dot
coded
ate
eatpizza
stimulate
meeting
exist
statement
statements
bunch
interrupt
block
catch
depends
modified
call
returning
variables
locals
modification
carried
thought
enclose
bracket
calling
raised
raise
execute
follow
raises
caught
system
explain
happen
simulate
parent
catching
finally
stop
appearing
console
manner
propagated
stops
shown
user
print
initializing
assign
created
moved
enclosed
propagate
upward
move
procedural
hierarchyright
signifies
brackets
signifying
invoking
side
listening
mention
printline
threw
turn
things
gracefully
exit
slides
wrote
epizza
proc
defining
stomach
ache
single
string
super
chain
reaches
questions
calls
extending
run
pass
book
implementing
array
maximum
capital
hold
index
location
listed
entire
earlier
default
capacity
thousand
twenty
final
constant
changed
declared
initially
minus
inside
equals
number
thirty
easy
started
full
increment
incremented
check
decrement
null
dereference
necessarily
deference
rid
lie
memory
clarify
private
member
tth
continue
propositional
depend
order
working
upper
bound
creation
hand
allocate
large
waste
small
completion
requirement
artifact
make
grow
quickly
stock
prices
daily
price
day
span
sub
consecutives
days
equal
inclusive
counting
compute
moment
find
loop
decrementing
incrementing
quantity
repeat
determine
enters
computing
squared
square
repeatedly
comparing
worst
times
varying
summation
total
running
big
closet
preceding
greater
closest
conventionally
computed
easily
quantities
told
definition
tape
larger
values
store
indices
bottom
compare
bar
drawn
comparison
update
lecture
found
computation
great
student
begin
executes
hear
iteration
good
fulled
elemnt
length
copy
original
rename
locations
increase
regular
counter
chosen
strategies
adopt
tight
strategy
growth
additive
double
kinds
space
unit
special
copied
units
cost
behaves
enlarge
pushes
fill
twelve
phase
curved
pound
multiplication
operator
multiply
beginning
copying
faces
phases
roughly
approximately
concerned
change
slightly
purposes
analyze
face
sixteen
spent
left
tminus
log
discussion
linked
lists
