two four trees::two four trees
trees in today::trees in today
operation of insert::operation of insert
search and delete::search and delete
kind of performance::kind of performance
case in avl::case in avl
kind of search::kind of search
binary search trees::binary search trees
trees so recall::trees so recall
happening the tree::happening the tree
point so nodes::point so nodes
four actually refers::four actually refers
number of children::number of children
children and node::children and node
right such trees::right such trees
children but satisfy::children but satisfy
multi way search::multi way search
two which means::two which means
right any number::right any number
two each node::two each node
node of tree::node of tree
tree also stored::tree also stored
stored a collection::stored a collection
collection of items::collection of items
items the form::items the form
form key coma::form key coma
key coma element::key coma element
search each node::search each node
node was storing::node was storing
storing one key::storing one key
lets say reference::lets say reference
key was lets::key was lets
lets say student::lets say student
student record student::student record student
record student entry::record student entry
student entry number::student entry number
number the student::number the student
key comma element::key comma element
binary search tree::binary search tree
minus one search::minus one search
pairs or items::pairs or items
generalizing a binary::generalizing a binary
helps us helps::helps us helps
helps us determine::helps us determine
child second child::child second child
child third child::child third child
child fourth child::child fourth child
minus one difference::minus one difference
difference keys sitting::difference keys sitting
children this node::children this node
node the number::node the number
number of keys::number of keys
instance this node::instance this node
node the key::node the key
key is determined::key is determined
determined what set::determined what set
set of keys::set of keys
left sub tree::left sub tree
right sub tree::right sub tree
first sub tree::first sub tree
last sub tree::last sub tree
ten would lie::ten would lie
middle sub tree::middle sub tree
minus one keys::minus one keys
keys or items::keys or items
two consecutive keys::two consecutive keys
follow one child::follow one child
searching is similar::searching is similar
binary search procedure::binary search procedure
left most sub::left most sub
right most sub::right most sub
node for instance::node for instance
two eight lies::two eight lies
searching for twenty::searching for twenty
sequence of steps::sequence of steps
found the twenty::found the twenty
found that twelve::found that twelve
keys is lies::keys is lies
lies between right::lies between right
key which keys::key which keys
left most child::left most child
right most child::right most child
driver in traversal::driver in traversal
recall inorder traversal::recall inorder traversal
traversal says left::traversal says left
print the data::print the data
right so first::right so first
print the key::print the key
child then print::child then print
correspond to inorder::correspond to inorder
first go left::first go left
finishes inorder traversal::finishes inorder traversal
finish the inorder::finish the inorder
print this key::print this key
printed this key::printed this key
doing inorder traversal::doing inorder traversal
tree this sub::tree this sub
eleven first thirteen::eleven first thirteen
first thirteen fourteen::first thirteen fourteen
eighteen nineteen twenty::eighteen nineteen twenty
nineteen twenty twenty::nineteen twenty twenty
finishes the inorder::finishes the inorder
keys in sorted::keys in sorted
easy to prove::easy to prove
out these key::out these key
order of printing::order of printing
two four tree::two four tree
properties each node::properties each node
tree okay multi::tree okay multi
tree each node::tree each node
node has atmost::node has atmost
forget this square::forget this square
level two right::level two right
two addition properties::two addition properties
addition properties search::addition properties search
properties search tree::properties search tree
four tree node::four tree node
node okay don::node okay don
base two right::base two right
tree be maximum::tree be maximum
complete binary tree::complete binary tree
tree and complete::tree and complete
height is log::height is log
log n base::log n base
height is maximum::height is maximum
maximum the tree::maximum the tree
height is minimum::height is minimum
nodes are closer::nodes are closer
closer to root::closer to root
find the height::find the height
tree is log::tree is log
nodes always lies::nodes always lies
two its lies::two its lies
lies between log::lies between log
two and log::two and log
base four log::base four log
half of log::half of log
basically the height::basically the height
four tree lies::four tree lies
lies between half::lies between half
two for search::two for search
lets say suppose::lets say suppose
eleven with twelve::eleven with twelve
comparing with ten::comparing with ten
four tree height::four tree height
essentially now compare::essentially now compare
node and node::node and node
require one right::require one right
require three comparison::require three comparison
right to determine::right to determine
node times log::node times log
number of node::number of node
node you require::node you require
tree you required::tree you required
searching i start::searching i start
keys to determine::keys to determine
four different branches::four different branches
make three comparison::make three comparison
shown the node::shown the node
shown each node::shown each node
insert as twenty::insert as twenty
insert we insert::insert we insert
found that element::found that element
lets see twenty::lets see twenty
insert so twenty::insert so twenty
twenty one lies::twenty one lies
lies between thirteen::lies between thirteen
thirteen and twenty::thirteen and twenty
out i compare::out i compare
eighty its larger::eighty its larger
larger then eighteen::larger then eighteen
sit this node::sit this node
hit the leaf::hit the leaf
node is empty::node is empty
empty the right::empty the right
heat the null::heat the null
put the node::put the node
space no problem::space no problem
insert the twenty::insert the twenty
twenty three lie::twenty three lie
lie between twenty::lie between twenty
two and thirty::two and thirty
link out twenty::link out twenty
right and twenty::right and twenty
insert that node::insert that node
problem with forty::problem with forty
forty with thirty::forty with thirty
space i put::space i put
insert a node::insert a node
insert a key::insert a key
kind of thing::kind of thing
right so twenty::right so twenty
follow this twenty::follow this twenty
split the node::split the node
node which node::node which node
split this node::split this node
twenty six twenty::twenty six twenty
twenty eight twenty::twenty eight twenty
two okay lets::two okay lets
remove this node::remove this node
understand why twenty::understand why twenty
promoted up twenty::promoted up twenty
promoted one key::promoted one key
parent and inserted::parent and inserted
inserted that key::inserted that key
insert the key::insert the key
parent the parent::parent the parent
child we follow::child we follow
node two nodes::node two nodes
two nodes created::two nodes created
four five children::four five children
node and promoted::node and promoted
two left children::two left children
children the first::children the first
first two children::first two children
node the right::node the right
keys which means::keys which means
means three children::means three children
split the parent::split the parent
thirteen gets promoted::thirteen gets promoted
root the height::root the height
understand the procedure::understand the procedure
put the key::put the key
done very simple::done very simple
split that node::split that node
lower two lower::lower two lower
two lower keys::two lower keys
two higher keys::two higher keys
node the largest::node the largest
promoted up promoted::promoted up promoted
promoted up means::promoted up means
problem otherwise repeat::problem otherwise repeat
repeat the split::repeat the split
node so split::node so split
split my cascading::split my cascading
process of insertion::process of insertion
doing the split::doing the split
constant time independent::constant time independent
node split takes::node split takes
split takes constant::split takes constant
total time order::total time order
suppose i wanted::suppose i wanted
wanted to delete::wanted to delete
search for twenty::search for twenty
twenty one find::twenty one find
case of binary::case of binary
tree we recall::tree we recall
recall deletion require::recall deletion require
two child cases::two child cases
node two children::node two children
found the successor::found the successor
successor or predecessor::successor or predecessor
form the predecessor::form the predecessor
move the predecessor::move the predecessor
delete the predecessor::delete the predecessor
similar here lets::similar here lets
lets see suppose::lets see suppose
right go left::right go left
twenty one right::twenty one right
problem deleting twenty::problem deleting twenty
violating the property::violating the property
tree we require::tree we require
require each node::require each node
shown the process::shown the process
twenty five right::twenty five right
twenty five bite::twenty five bite
predecessor of twenty::predecessor of twenty
find the predecessor::find the predecessor
find the largest::find the largest
key its twenty::key its twenty
four so predecessor::four so predecessor
remove the twenty::remove the twenty
note that predecessor::note that predecessor
search tree lets::search tree lets
tree lets check::tree lets check
check this point::check this point
tree the predecessor::tree the predecessor
node right suppose::node right suppose
finding the predecessor::finding the predecessor
predicessor of ten::predicessor of ten
right keep taking::right keep taking
taking the right::taking the right
child is null::child is null
children are null::children are null
remove that leaf::remove that leaf
four and twenty::four and twenty
read of twenty::read of twenty
imagine problem raising::imagine problem raising
delete a key::delete a key
leaf becomes empty::leaf becomes empty
right so lets::right so lets
deleting a key::deleting a key
key and node::key and node
node becomes empty::node becomes empty
borrow a key::borrow a key
right i reach::right i reach
twenty so twenty::twenty so twenty
twenty is removed::twenty is removed
node not permitted::node not permitted
borrow from sibling::borrow from sibling
right because search::right because search
right for instance::right for instance
problem wait lets::problem wait lets
sibling we merge::sibling we merge
sibling we combine::sibling we combine
sibling okay suppose::sibling okay suppose
twenty three right::twenty three right
guy everyone understand::guy everyone understand
solve our problem::solve our problem
node which separate::node which separate
merge okay lets::merge okay lets
moving the key::moving the key
parent node corresponds::parent node corresponds
corresponds to deletion::corresponds to deletion
deleting the key::deleting the key
node this procedure::node this procedure
cascading right cascading::cascading right cascading
height can reduce::height can reduce
height has shrink::height has shrink
insertion may height::insertion may height
understand this procedure::understand this procedure
insertion may split::insertion may split
point is doing::point is doing
great so lets::great so lets
lets conclude today::lets conclude today
theta of log::theta of log
deletion was concern::deletion was concern
looked at vaning::looked at vaning
tree to search::tree to search
log n step::log n step
step each step::step each step
merging with sibling::merging with sibling
constant time operation::constant time operation
operation right borrowing::operation right borrowing
borrowing could corresponds::borrowing could corresponds
search insertion deletion::search insertion deletion
complicated data structure::complicated data structure
structure called red::structure called red
red black tree::red black tree
fast data structure::fast data structure
structure for implementing::structure for implementing
four trees today::four trees today
helpful in understanding::helpful in understanding
red black trees::red black trees
black trees functions::black trees functions
insert search::insert search
data structure::data structure
performance guarantee::performance guarantee
avl trees::avl trees
search trees::search trees
binary search::binary search
binary tree::binary tree
first point::first point
search properties::search properties
internal node::internal node
search tree::search tree
form key::form key
key coma::key coma
coma element::coma element
student record::student record
record student::record student
student entry::student entry
entry number::entry number
kind key::kind key
search pairs::search pairs
keys helps::keys helps
search process::search process
first child::first child
fourth child::fourth child
difference keys::difference keys
keys sitting::keys sitting
node determined::node determined
sub trees::sub trees
key twenty::key twenty
sub tree::sub tree
left sub::left sub
right sub::right sub
first sub::first sub
last sub::last sub
middle sub::middle sub
first key::first key
consecutive keys::consecutive keys
key value::key value
consecutive pairs::consecutive pairs
tree searching::tree searching
search procedure::search procedure
success visit::success visit
last key::last key
order driver::order driver
traversal tree::traversal tree
inorder traversal::inorder traversal
recall inorder::recall inorder
print twenty::print twenty
first twenty::first twenty
middle child::middle child
right child::right child
finishes inorder::finishes inorder
doing inorder::doing inorder
first thirteen::first thirteen
thirteen fourteen::thirteen fourteen
twenty twenty::twenty twenty
entire thing::entire thing
sorted order::sorted order
key right::key right
valid node::valid node
lets understand::lets understand
important property::important property
leaf nodes::leaf nodes
leaf node::leaf node
square boxes::square boxes
level suppose::level suppose
numbering level::numbering level
addition properties::addition properties
properties search::properties search
tree node::tree node
worst case::worst case
last level::last level
complete binary::complete binary
right log::right log
tree height::tree height
level sixteen::level sixteen
tree lies::tree lies
takes search::takes search
key lets::key lets
eleven lets::eleven lets
compare eleven::compare eleven
change color::change color
order height::order height
maximum number::maximum number
right node::right node
node times::node times
times log::times log
order log::order log
first element::first element
search terminates::search terminates
insert element::insert element
right pointer::right pointer
null pointer::null pointer
comparing twenty::comparing twenty
twenty lets::twenty lets
empty space::empty space
insertion lets::insertion lets
out twenty::out twenty
inserted order::inserted order
move twenty::move twenty
last node::last node
compare twenty::compare twenty
insert forty::insert forty
forty forty::forty forty
inserting twenty::inserting twenty
promote twenty::promote twenty
search property::search property
largest key::largest key
parent doesn::parent doesn
nodes created::nodes created
left node::left node
parent node::parent node
sufficient split::sufficient split
made children::made children
smaller node::smaller node
left children::left children
node twenty::node twenty
remember right::remember right
root thirteen::root thirteen
tree increases::tree increases
space great::space great
lower keys::lower keys
higher keys::higher keys
lower part::lower part
split process::split process
clear search::clear search
node split::node split
split takes::split takes
takes constant::takes constant
delete twenty::delete twenty
recall deletion::recall deletion
deletion require::deletion require
child cases::child cases
problem twenty::problem twenty
find twenty::find twenty
problem deleting::problem deleting
deleting twenty::deleting twenty
instance suppose::instance suppose
problem note::problem note
tree lets::tree lets
lets check::lets check
null right::null right
left child::left child
swapped twenty::swapped twenty
right twenty::right twenty
simple case::simple case
imagine problem::imagine problem
problem raising::problem raising
sibling lets::sibling lets
removed problem::removed problem
empty node::empty node
guys means::guys means
avl tree::avl tree
problem wait::problem wait
wait lets::wait lets
small catch::small catch
adjusting sibling::adjusting sibling
merge combine::merge combine
node corresponds::node corresponds
parent deleting::parent deleting
child left::child left
sibling key::sibling key
deletion height::deletion height
means height::means height
lets conclude::lets conclude
conclude today::conclude today
discussion height::discussion height
search insertion::search insertion
insertion deletion::insertion deletion
complicated data::complicated data
fast data::fast data
implementing dictionaries::implementing dictionaries
trees today::trees today
red black::red black
black trees::black trees
trees functions::trees functions
two::two
four::four
trees::trees
today::today
class::class
talking::talking
representing::representing
additionally::additionally
operation::operation
insert::insert
search::search
delete::delete
data::data
structure::structure
kind::kind
performance::performance
guarantee::guarantee
case::case
avl::avl
classes::classes
begin::begin
binary::binary
recall::recall
happening::happening
tree::tree
node::node
children::children
right::right
first::first
point::point
nodes::nodes
refers::refers
number::number
satisfy::satisfy
properties::properties
multi::multi
internal::internal
child::child
means::means
stored::stored
collection::collection
items::items
form::form
key::key
coma::coma
element::element
storing::storing
lets::lets
reference::reference
student::student
record::record
entry::entry
similar::similar
pairs::pairs
pair::pair
minus::minus
generalizing::generalizing
keys::keys
left::left
helps::helps
determine::determine
similarly::similarly
process::process
fourth::fourth
difference::difference
sitting::sitting
showing::showing
clear::clear
back::back
show::show
instance::instance
read::read
determined::determined
set::set
sub::sub
twenty::twenty
ten::ten
last::last
lie::lie
middle::middle
concept::concept
understand::understand
follow::follow
previous::previous
code::code
consecutive::consecutive
elements::elements
value::value
searching::searching
procedure::procedure
suppose::suppose
compare::compare
find::find
lies::lies
success::success
visit::visit
found::found
sequence::sequence
steps::steps
twelve::twelve
extrimate::extrimate
check::check
larger::larger
simple::simple
order::order
driver::driver
traversal::traversal
question::question
inorder::inorder
print::print
correspond::correspond
part::part
finishes::finishes
finish::finish
parent::parent
printed::printed
doing::doing
give::give
eleven::eleven
thirteen::thirteen
fourteen::fourteen
seventeen::seventeen
eighteen::eighteen
nineteen::nineteen
entire::entire
thing::thing
sorted::sorted
easy::easy
prove::prove
out::out
printing::printing
true::true
put::put
valid::valid
organized::organized
manner::manner
great::great
atmost::atmost
important::important
property::property
leaf::leaf
level::level
forget::forget
square::square
boxes::boxes
numbering::numbering
addition::addition
height::height
don::don
log::log
base::base
worst::worst
maximum::maximum
noise::noise
leafs::leafs
basically::basically
complete::complete
argued::argued
forge::forge
setting::setting
minimum::minimum
closer::closer
root::root
sixteen::sixteen
sixty::sixty
analysis::analysis
quantities::quantities
essentially::essentially
half::half
takes::takes
change::change
color::color
comparing::comparing
doesn::doesn
correct::correct
require::require
comparison::comparison
branch::branch
times::times
careful::careful
required::required
start::start
branches::branches
make::make
insertion::insertion
largest::largest
shown::shown
location::location
space::space
pointers::pointers
terminates::terminates
exist::exist
eighty::eighty
sit::sit
hit::hit
empty::empty
pointer::pointer
null::null
place::place
continue::continue
hindi::hindi
heat::heat
wound::wound
ring::ring
page::page
filled::filled
wait::wait
week::week
problem::problem
thirty::thirty
link::link
inserted::inserted
move::move
forty::forty
inserting::inserting
happen::happen
split::split
smaller::smaller
remove::remove
guy::guy
originally::originally
promote::promote
promoted::promoted
smallest::smallest
created::created
sufficient::sufficient
made::made
guys::guys
create::create
disappear::disappear
remember::remember
eventually::eventually
increases::increases
done::done
decided::decided
lower::lower
higher::higher
mans::mans
successful::successful
repeat::repeat
cascading::cascading
questions::questions
splits::splits
constant::constant
independent::independent
total::total
deletion::deletion
wanted::wanted
cases::cases
distinguish::distinguish
worried::worried
successor::successor
predecessor::predecessor
deleting::deleting
violating::violating
deleted::deleted
mark::mark
bite::bite
swap::swap
note::note
finding::finding
predicessor::predicessor
line::line
taking::taking
stop::stop
situation::situation
permitted::permitted
swapped::swapped
imagine::imagine
raising::raising
borrow::borrow
sibling::sibling
reach::reach
removed::removed
fifteen::fifteen
rotation::rotation
wondering::wondering
merge::merge
combine::combine
small::small
catch::catch
jumble::jumble
adjusting::adjusting
solve::solve
separate::separate
separating::separating
siblings::siblings
moves::moves
non::non
diverse::diverse
moving::moving
corresponds::corresponds
lead::lead
reduce::reduce
shrink::shrink
copy::copy
conclude::conclude
discussion::discussion
theta::theta
concern::concern
looked::looked
vaning::vaning
step::step
borrowing::borrowing
merging::merging
complicated::complicated
reason::reason
red::red
black::black
fast::fast
implementing::implementing
dictionaries::dictionaries
learnt::learnt
helpful::helpful
understanding::understanding
functions::functions
