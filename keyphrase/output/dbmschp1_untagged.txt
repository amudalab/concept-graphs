a database-management system  dbms  is a collection of interrelated data and a set of programs to access those data the collection of data  usually referred to as the database  contains information relevant to an enterprise the primary goal of a dbms is to provide a way to store and retrieve database information that is both convenient and efficient database systems are designed to manage large bodies of information management of data involves both defining structures for storage of information and providing mechanisms for the manipulation of information in addition  the database system must ensure the safety of the information stored  despite system crashes or attempts at unauthorized access if data are to be shared among several users  the system must avoid possible anomalous results because information is so important in most organizations  computer scientists have developed a large body of concepts and techniques for managing data these concepts and techniques form the focus of this book this chapter briefly introduces the principles of database systems 1.1 database-system applications databases are widely used here are some representative applications  ? enterprise information sales  for customer  product  and purchase information accounting  for payments  receipts  account balances  assets and other accounting information human resources  for information about employees  salaries  payroll taxes  and benefits  and for generation of paychecks manufacturing  for management of the supply chain and for tracking production of items in factories  inventories of items inwarehouses and stores  and orders for items 1 thesumit67.blogspot.com 2 chapter 1 introduction online retailers  for sales data noted above plus online order tracking  generation of recommendation lists  and maintenance of online product evaluations ? banking and finance banking  for customer information  accounts  loans  and banking transactions credit card transactions  for purchases on credit cards and generation of monthly statements finance  for storing information about holdings  sales  and purchases of financial instruments such as stocks and bonds ; also for storing real-time market data to enable online trading by customers and automated trading by the firm ? universities  for student information  course registrations  and grades  in addition to standard enterprise information such as human resources and accounting   ? airlines  for reservations and schedule information airlines were among the first to use databases in a geographically distributed manner ? telecommunication  for keeping records of calls made  generating monthly bills  maintaining balances on prepaid calling cards  and storing information about the communication networks as the list illustrates  databases form an essential part of every enterprise today  storing not only types of information that are common to most enterprises  but also information that is specific to the category of the enterprise over the course of the last four decades of the twentieth century  use of databases grewin all enterprises in the early days  very few people interacted directly with database systems  although without realizing it  they interacted with databases indirectly ? through printed reports such as credit card statements  or through agents such as bank tellers and airline reservation agents then automated teller machines came along and let users interact directly with databases phone interfaces to computers  interactive voice-response systems  also allowed users to deal directly with databases ? a caller could dial a number  and press phone keys to enter information or to select alternative options  to find flight arrival/departure times  for example  or to register for courses in a university the internet revolution of the late 1990s sharply increased direct user access to databases organizations converted many of their phone interfaces to databases into web interfaces  and made a variety of services and information available online for instance  when you access an online bookstore and browse a book or music collection  you are accessing data stored in a database when you enter an order online  your order is stored in a database.when you access a bankweb site and retrieve your bank balance and transaction information  the information is retrieved from the bank ? s database system.when you access aweb site  informathesumit67 blogspot.com 1.2 purpose of database systems 3 tion about you may be retrieved from a database to select which advertisements you should see furthermore  data about your web accesses may be stored in a database thus  although user interfaces hide details of access to a database  and most people are not even aware they are dealing with a database  accessing databases forms an essential part of almost everyone ? s life today the importance of database systems can be judged in another way ? today  database system vendors like oracle are among the largest software companies in the world  and database systems form an important part of the product line of microsoft and ibm 1.2 purpose of database systems database systems arose in response to early methods of computerized management of commercial data as an example of such methods  typical of the 1960s  consider part of a university organization that  among other data  keeps information about all instructors  students  departments  and course offerings one way to keep the information on a computer is to store it in operating system files to allow users to manipulate the information  the system has a number of application programs that manipulate the files  including programs to  ? add new students  instructors  and courses ? register students for courses and generate class rosters ? assign grades to students  compute grade point averages  gpa   and generate transcripts system programmers wrote these application programs to meet the needs of the university new application programs are added to the system as the need arises for example  suppose that a university decides to create a new major  say  computer science  .as a result  the university creates a newdepartment and creates new permanent files  or adds information to existing files  to record information about all the instructors in the department  students in that major  course offerings  degree requirements  etc the university may have to write new application programs to deal with rules specific to the new major new application programs may also have to be written to handle new rules in the university thus  as time goes by  the system acquires more files and more application programs this typical file-processing system is supported by a conventional operating system the system stores permanent records in various files  and it needs different application programs to extract records from  and add records to  the appropriate files before database management systems  dbmss  were introduced  organizations usually stored information in such systems keeping organizational information in a file-processing system has a number of major disadvantages  thesumit67.blogspot.com 4 chapter 1 introduction ? data redundancy and inconsistency since different programmers create the files and application programs over a long period  the various files are likely to have different structures and the programs may bewritten in several programming languages moreover  the same information may be duplicated in several places  files   for example  if a student has a double major  say  music and mathematics  the address and telephone number of that student may appear in a file that consists of student records of students in the music department and in a file that consists of student records of students in the mathematics department this redundancy leads to higher storage and access cost in addition  it may lead to data inconsistency ; that is  the various copies of the same datamayno longer agree for example  a changed student address may be reflected in the music department records but not elsewhere in the system ? difficulty in accessing data suppose that one of the university clerks needs to find out the names of all students who live within a particular postal-code area the clerk asks the data-processing department to generate such a list because the designers of the original system did not anticipate this request  there is no application program on hand to meet it there is  however  an application program to generate the list of all students the university clerk has now two choices  either obtain the list of all students and extract the needed information manually or ask a programmer to write the necessary application program both alternatives are obviously unsatisfactory suppose that such a program is written  and that  several days later  the same clerk needs to trim that list to include only those students who have taken at least 60 credit hours as expected  a program to generate such a list does not exist again  the clerk has the preceding two options  neither of which is satisfactory the point here is that conventional file-processing environments do not allow needed data to be retrieved in a convenient and efficientmanner more responsive data-retrieval systems are required for general use ? data isolation because data are scattered in various files  and files may be in different formats  writing new application programs to retrieve the appropriate data is difficult ? integrity problems the data values stored in the database must satisfy certain types of consistency constraints suppose the university maintains an account for each department  and records the balance amount in each account suppose also that the university requires that the account balance of a department may never fall below zero developers enforce these constraints in the system by adding appropriate code in the various application programs however  when new constraints are added  it is difficult to change the programs to enforce them the problem is compoundedwhen constraints involve several data items from different files ? atomicity problems a computer system  like any other device  is subject to failure in many applications  it is crucial that  if a failure occurs  the data thesumit67.blogspot.com 1.2 purpose of database systems 5 be restored to the consistent state that existed prior to the failure consider a program to transfer $ 500 from the account balance of department a to the account balance of department b if a system failure occurs during the execution of the program  it is possible that the $ 500 was removed from the balance of department a butwas not credited to the balance of department b  resulting in an inconsistent database state clearly  it is essential to database consistency that either both the credit and debit occur  or that neither occur that is  the funds transfer must be atomic ? it must happen in its entirety or not at all it is difficult to ensure atomicity in a conventional file-processing system ? concurrent-access anomalies for the sake of overall performance of the system and faster response  many systems allow multiple users to update the data simultaneously indeed  today  the largest internet retailers may have millions of accesses per day to their data by shoppers in such an environment  interaction of concurrent updates is possible and may result in inconsistent data consider department a  with an account balance of $ 10,000 if two department clerks debit the account balance  by say $ 500 and $ 100  respectively  of department a at almost exactly the same time  the result of the concurrent executions may leave the budget in an incorrect  or inconsistent  state suppose that the programs executing on behalf of each withdrawal read the old balance  reduce that value by the amount beingwithdrawn  and write the result back if the two programs run concurrently  they may both read the value $ 10,000  and write back $ 9500 and $ 9900  respectively depending on which one writes the value last  the account balance of department a may contain either $ 9500 or $ 9900  rather than the correct value of $ 9400 to guard against this possibility  the system must maintain some form of supervision but supervision is difficult to provide because data may be accessed by many different application programs that have not been coordinated previously as another example  suppose a registration program maintains a count of students registered for a course  in order to enforce limits on the number of students registered.when a student registers  the program reads the current count for the courses  verifies that the count is not already at the limit  adds one to the count  and stores the count back in the database suppose two students register concurrently  with the count at  say  39 the two program executions may both read the value 39  and both would then write back 40  leading to an incorrect increase of only 1  even though two students successfully registered for the course and the count should be 41 furthermore  suppose the course registration limit was 40 ; in the above case both students would be able to register  leading to a violation of the limit of 40 students ? security problems not every user of the database system should be able to access all the data for example  in a university  payroll personnel need to see only that part of the database that has financial information they do not need access to information about academic records but  since application programs are added to the file-processing system in an ad hoc manner  enforcing such security constraints is difficult thesumit67.blogspot.com 6 chapter 1 introduction these difficulties  among others  prompted the development of database systems in what follows  we shall see the concepts and algorithms that enable database systems to solve the problems with file-processing systems in most of this book  we use a university organization as a running example of a typical data-processing application 1.3 view of data a database system is a collection of interrelated data and a set of programs that allow users to access and modify these data a major purpose of a database system is to provide users with an abstract view of the data that is  the system hides certain details of how the data are stored and maintained 1.3.1 data abstraction for the system to be usable  it must retrieve data efficiently the need for efficiency has led designers to use complex data structures to represent data in the database since many database-system users are not computer trained  developers hide the complexity from users through several levels of abstraction  to simplify users ? interactions with the system  ? physical level the lowest level of abstraction describes how the data are actually stored the physical level describes complex low-level data structures in detail ? logical level the next-higher level of abstraction describes what data are stored in the database  and what relationships exist among those data the logical level thus describes the entire database in terms of a small number of relatively simple structures although implementation of the simple structures at the logical level may involve complex physical-level structures  the user of the logical level does not need to be aware of this complexity this is referred to as physical data independence database administrators  who must decide what information to keep in the database  use the logical level of abstraction ? view level the highest level of abstraction describes only part of the entire database even though the logical level uses simpler structures  complexity remains because of the variety of information stored in a large database many users of the database system do not need all this information ; instead  they need to access only a part of the database the view level of abstraction exists to simplify their interaction with the system the system may provide many views for the same database figure 1.1 shows the relationship among the three levels of abstraction an analogy to the concept of data types in programming languages may clarify the distinction among levels of abstraction many high-level programming thesumit67.blogspot.com 1.3 view of data 7 view 1 view 2 logical level physical level ? view n view level figure 1.1 the three levels of data abstraction languages support the notion of a structured type for example  we may describe a record as follows  1 type instructor = record id  char  5  ; name  char  20  ; dept name  char  20  ; salary  numeric  8,2  ; end ; this code defines a new record type called instructor with four fields each field has a name and a type associated with it a university organization may have several such record types  including ? department  with fields dept name  building  and budget ? course  with fields course id  title  dept name  and credits ? student  with fields id  name  dept name  and tot cred at the physical level  an instructor  department  or student record can be described as a block of consecutive storage locations the compiler hides this level of detail from programmers similarly  the database system hides many of the lowest-level storage details from database programmers database administrators  on the other hand  may be aware of certain details of the physical organization of the data 1the actual type declaration depends on the language being used c and c + + use struct declarations java does not have such a declaration  but a simple class can be defined to the same effect thesumit67.blogspot.com 8 chapter 1 introduction at the logical level  each such record is described by a type definition  as in the previous code segment  and the interrelationship of these record types is defined as well programmers using a programming language work at this level of abstraction similarly  database administrators usually work at this level of abstraction finally  at the view level  computer users see a set of application programs that hide details of the data types at the view level  several views of the database are defined  and a database user sees some or all of these views in addition to hiding details of the logical level of the database  the views also provide a security mechanism to prevent users from accessing certain parts of the database for example  clerks in the university registrar office can see only that part of the database that has information about students ; they can not access information about salaries of instructors 1.3.2 instances and schemas databases change over time as information is inserted and deleted the collection of information stored in the database at a particular moment is called an instance of the database the overall design of the database is called the database schema schemas are changed infrequently  if at all the concept of database schemas and instances can be understood by analogy to a program written in a programming language.adatabase schema corresponds to the variable declarations  along with associated type definitions  in a program each variable has a particular value at a given instant the values of the variables in a program at a point in time correspond to an instance of a database schema database systems have several schemas  partitioned according to the levels of abstraction the physical schema describes the database design at the physical level  while the logical schema describes the database design at the logical level a database may also have several schemas at the view level  sometimes called subschemas  that describe different views of the database of these  the logical schema is by far the most important  in terms of its effect on application programs  since programmers construct applications by using the logical schema the physical schema is hidden beneath the logical schema  and can usually be changed easily without affecting application programs application programs are said to exhibit physical data independence if they do not depend on the physical schema  and thus need not be rewritten if the physical schema changes we study languages for describing schemas after introducing the notion of data models in the next section 1.3.3 data models underlying the structure of a database is the data model  a collection of conceptual tools for describing data  data relationships  data semantics  and consistency constraints a data model provides a way to describe the design of a database at the physical  logical  and view levels thesumit67.blogspot.com 1.4 database languages 9 there are a number of different data models that we shall cover in the text the data models can be classified into four different categories  ? relational model the relational model uses a collection of tables to represent both data and the relationships among those data each table has multiple columns  and each column has a unique name tables are also known as relations the relational model is an example of a record-based model record-based models are so named because the database is structured in fixed-format records of several types each table contains records of a particular type each record type defines a fixed number of fields  or attributes the columns of the table correspond to the attributes of the record type the relational data model is the most widely used data model  and a vast majority of current database systems are based on the relational model chapters 2 through 8 cover the relational model in detail ? entity-relationship model the entity-relationship  e-r  data model uses a collection of basic objects  called entities  andrelationships among these objects an entity is a ? thing ? or ? object ? in the real world that is distinguishable from other objects the entity-relationship model is widely used in database design  and chapter 7 explores it in detail ? object-based data model.object-oriented programming  especially in java  c + +  or c #  has become the dominant software-development methodology this led to the development of an object-oriented data model that can be seen as extending the e-r model with notions of encapsulation  methods  functions   and object identity the object-relational data model combines features of the object-oriented data model and relational data model chapter 22 examines the object-relational data model ? semistructured data model the semistructured data model permits the specification of data where individual data items of the same type may have different sets of attributes this is in contrast to the data models mentioned earlier  where every data item of a particular type must have the same set of attributes the extensible markup language  xml  is widely used to represent semistructured data chapter 23 covers it historically  the network data model and the hierarchical data model preceded the relational data model these modelswere tied closely to the underlying implementation  and complicated the task of modeling data as a result they are used little now  except in old database code that is still in service in some places they are outlined online in appendices d and e for interested readers 1.4 database languages a database system provides a data-definition language to specify the database schema and a data-manipulation language to express database queries and upthesumit67 blogspot.com 10 chapter 1 introduction dates in practice  the data-definition and data-manipulation languages are not two separate languages ; instead they simply form parts of a single database language  such as the widely used sql language 1.4.1 data-manipulation language a data-manipulation language  dml  is a language that enables users to access or manipulate data as organized by the appropriate data model the types of access are  ? retrieval of information stored in the database ? insertion of new information into the database ? deletion of information from the database ? modification of information stored in the database there are basically two types  ? procedural dmls require a user to specify what data are needed and how to get those data ? declarative dmls  also referred to as nonprocedural dmls  require a user to specify what data are needed without specifying how to get those data declarative dmls are usually easier to learn and use than are procedural dmls however  since a user does not have to specify how to get the data  the database system has to figure out an efficient means of accessing data a query is a statement requesting the retrieval of information the portion of a dml that involves information retrieval is called a query language although technically incorrect  it is common practice to use the terms query language and data-manipulation language synonymously there are a number of database query languages in use  either commercially or experimentally.we study the most widely used query language  sql  inchapters 3  4  and 5 we also study some other query languages in chapter 6 the levels of abstraction that we discussed in section 1.3 apply not only to defining or structuring data  but also to manipulating data at the physical level  we must define algorithms that allow efficient access to data at higher levels of abstraction  we emphasize ease of use the goal is to allow humans to interact efficiently with the system the query processor component of the database system  which we study in chapters 12 and 13  translates dml queries into sequences of actions at the physical level of the database system 1.4.2 data-definition language we specify a database schema by a set of definitions expressed by a special language called a data-definition language  ddl   the ddl is also used to specify additional properties of the data thesumit67.blogspot.com 1.4 database languages 11 we specify the storage structure and access methods used by the database system by a set of statements in a special type of ddl called a data storage and definition language these statements define the implementation details of the database schemas  which are usually hidden from the users the data values stored in the database must satisfy certain consistency constraints for example  suppose the university requires that the account balance of a department must never be negative the ddl provides facilities to specify such constraints the database system checks these constraints every time the database is updated in general  a constraint can be an arbitrary predicate pertaining to the database.however  arbitrary predicates may be costly to test thus  database systems implement integrity constraints that can be testedwith minimal overhead  ? domain constraints a domain of possible values must be associated with every attribute  for example  integer types  character types  date/time types   declaring an attribute to be of a particular domain acts as a constraint on the values that it can take domain constraints are the most elementary form of integrity constraint they are tested easily by the system whenever a new data item is entered into the database ? referential integrity there are cases where we wish to ensure that a value that appears in one relation for a given set of attributes also appears in a certain set of attributes in another relation  referential integrity   for example  the department listed for each course must be one that actually exists more precisely  the dept name value in a course record must appear in the dept name attribute of some record of the department relation database modifications can cause violations of referential integrity.when a referential-integrity constraint is violated  the normal procedure is to reject the action that caused the violation ? assertions an assertion is any condition that the database must always satisfy domain constraints and referential-integrity constraints are special forms of assertions however  there are many constraints that we can not express by using only these special forms for example  ? every department must have at least five courses offered every semester ? must be expressed as an assertion when an assertion is created  the system tests it for validity if the assertion is valid  then any future modification to the database is allowed only if it does not cause that assertion to be violated ? authorization we may want to differentiate among the users as far as the type of access they are permitted on various data values in the database these differentiations are expressed in terms of authorization  the most common being  read authorization  which allows reading  but not modification  of data ; insert authorization  which allows insertion of new data  but not modification of existing data ; update authorization  which allows modification  but not deletion  of data ; and delete authorization  which allows deletion of data we may assign the user all  none  or a combination of these types of authorization thesumit67.blogspot.com 12 chapter 1 introduction the ddl  just like any other programming language  gets as input some instructions  statements  and generates some output the output of the ddl is placed in the data dictionary,which contains metadata ? that is  data about data the data dictionary is considered to be a special type of table that can only be accessed and updated by the database system itself  not a regular user   the database system consults the data dictionary before reading or modifying actual data 1.5 relational databases a relational database is based on the relational model and uses a collection of tables to represent both data and the relationships among those data it also includes a dml and ddl in chapter 2 we present a gentle introduction to the fundamentals of the relational model most commercial relational database systems employ the sql language  which we cover in great detail in chapters 3  4  and 5 in chapter 6 we discuss other influential languages 1.5.1 tables each table has multiple columns and each column has a unique name figure 1.2 presents a sample relational database comprising two tables  one shows details of university instructors and the other shows details of the various university departments the first table  the instructor table  shows  for example  that an instructor named einstein with id 22222 is a member of the physics department and has an annual salary of $ 95,000 the second table  department  shows  for example  that the biology department is located in the watson building and has a budget of $ 90,000 of course  a real-world university would have many more departments and instructors we use small tables in the text to illustrate concepts a larger example for the same schema is available online the relational model is an example of a record-based model record-based models are so named because the database is structured in fixed-format records of several types each table contains records of a particular type each record type defines a fixed number of fields  or attributes the columns of the table correspond to the attributes of the record type it is not hard to see how tables may be stored in files for instance  a special character  such as a comma  may be used to delimit the different attributes of a record  and another special character  such as a new-line character  may be used to delimit records the relational model hides such low-level implementation details from database developers and users we also note that it is possible to create schemas in the relational model that have problems such as unnecessarily duplicated information for example  suppose we store the department budget as an attribute of the instructor record then  whenever the value of a particular budget  say that one for the physics department  changes  that change must to be reflected in the records of all instructors thesumit67.blogspot.com 1.5 relational databases 13 id name dept name salary 22222 einstein physics 95000 12121 wu finance 90000 32343 el said history 60000 45565 katz comp sci 75000 98345 kim elec eng 80000 76766 crick biology 72000 10101 srinivasan comp sci 65000 58583 califieri history 62000 83821 brandt comp sci 92000 15151 mozart music 40000 33456 gold physics 87000 76543 singh finance 80000  a  the instructor table dept name building budget comp sci taylor 100000 biology watson 90000 elec eng taylor 85000 music packard 80000 finance painter 120000 history painter 50000 physics watson 70000  b  the department table figure 1.2 a sample relational database associated with the physics department in chapter 8  we shall study how to distinguish good schema designs from bad schema designs 1.5.2 data-manipulation language the sql query language is nonprocedural a query takes as input several tables  possibly only one  and always returns a single table here is an example of an sql query that finds the names of all instructors in the history department  select instructor.name from instructor where instructor.dept name = ? history ? ; the query specifies that those rows fromthe table instructor where the dept name is historymust be retrieved  and the name attribute of these rows must be displayed more specifically  the result of executing this query is a table with a single column thesumit67.blogspot.com 14 chapter 1 introduction labeled name  and a set of rows  each of which contains the name of an instructor whose dept name  is history if the query is run on the table in figure 1.2  the result will consist of two rows  one with the name el said and the other with the name califieri queries may involve information from more than one table for instance  the following query finds the instructor id and department name of all instructors associated with a department with budget of greater than $ 95,000 select instructor.id  department.dept name from instructor  department where instructor.dept name = department.dept name and department.budget > 95000 ; if the above query were run on the tables in figure 1.2  the system would find that there are two departments with budget of greater than $ 95,000 ? computer science and finance ; there are five instructors in these departments thus  the result will consist of a table with two columns  id  dept name  and five rows   12121  finance    45565  computer science    10101  computer science    83821  computer science   and  76543  finance   1.5.3 data-definition language sql provides a rich ddl that allows one to define tables  integrity constraints  assertions  etc for instance  the following sql ddl statement defines the department table  create table department  dept name char  20   building char  15   budget numeric  12,2   ; execution of the above ddl statement creates the department table with three columns  dept name  building  and budget  each of which has a specific data type associated with it.we discuss data types in more detail in chapter 3 in addition  the ddl statement updates the data dictionary  which contains metadata  see section 1.4.2   the schema of a table is an example of metadata 1.5.4 database access from application programs sql is not as powerful as a universal turing machine ; that is  there are some computations that are possible using a general-purpose programming language but are not possible using sql sql also does not support actions such as input from users  output to displays  or communication over the network such computations and actions must be written in a host language  such as c  c + +  or java  with embedded sql queries that access the data in the database application programs are programs that are used to interact with the database in this fashion thesumit67.blogspot.com 1.6 database design 15 examples in a university system are programs that allow students to register for courses  generate class rosters  calculate student gpa  generate payroll checks  etc to access the database  dml statements need to be executed from the host language there are two ways to do this  ? by providing an application program interface  set of procedures  that can be used to send dml and ddl statements to the database and retrieve the results the open database connectivity  odbc  standard for use with the c language is a commonly used application program interface standard the java database connectivity  jdbc  standard provides corresponding features to the java language ? by extending the host language syntax to embed dml calls within the host language program usually  a special character prefaces dml calls  and a preprocessor  called the dml precompiler  converts the dml statements to normal procedure calls in the host language 1.6 database design database systems are designed to manage large bodies of information these large bodies of information do not exist in isolation they are part of the operation of some enterprise whose end product may be information from the database or may be some device or service for which the database plays only a supporting role database design mainly involves the design of the database schema the design of a complete database application environment that meets the needs of the enterprise being modeled requires attention to a broader set of issues in this text  we focus initially on the writing of database queries and the design of database schemas chapter 9 discusses the overall process of application design 1.6.1 design process a high-level data model provides the database designerwith a conceptual framework in which to specify the data requirements of the database users  and how the database will be structured to fulfill these requirements the initial phase of database design  then  is to characterize fully the data needs of the prospective database users the database designer needs to interact extensively with domain experts and users to carry out this task the outcome of this phase is a specification of user requirements next  the designer chooses a data model  and by applying the concepts of the chosen datamodel  translates these requirements into a conceptual schema of the database the schema developed at this conceptual-design phase provides a detailed overview of the enterprise the designer reviews the schema to confirm that all data requirements are indeed satisfied and are not in conflict with one another the designer can also examine the design to remove any redundant thesumit67.blogspot.com 16 chapter 1 introduction features the focus at this point is on describing the data and their relationships  rather than on specifying physical storage details in terms of the relational model  the conceptual-design process involves decisions on what attributes we want to capture in the database and how to group these attributes to form the various tables the ? what ? part is basically a business decision  and we shall not discuss it further in this text the ? how ? part is mainly a computer-science problem there are principally two ways to tackle the problem the first one is to use the entity-relationship model  section 1.6.3  ; the other is to employ a set of algorithms  collectively known as normalization  that takes as input the set of all attributes and generates a set of tables  section 1.6.4   a fully developed conceptual schema indicates the functional requirements of the enterprise in a specification of functional requirements  users describe the kinds of operations  or transactions  that will be performed on the data example operations include modifying or updating data  searching for and retrieving specific data  and deleting data at this stage of conceptual design  the designer can review the schema to ensure it meets functional requirements the process of moving from an abstract data model to the implementation of the database proceeds in two final design phases in the logical-design phase  the designer maps the high-level conceptual schema onto the implementation data model of the database system that will be used the designer uses the resulting system-specific database schema in the subsequent physical-design phase  in which the physical features of the database are specified these features include the form of file organization and the internal storage structures ; they are discussed in chapter 10 1.6.2 database design for a university organization to illustrate the design process  let us examine how a database for a university could be designed the initial specification of user requirements may be based on interviews with the database users  and on the designer ? s own analysis of the organization the description that arises from this design phase serves as the basis for specifying the conceptual structure of the database here are the major characteristics of the university ? the university is organized into departments each department is identified by a unique name  dept name   is located in a particular building  and has a budget ? each department has a list of courses it offers each course has associated with it a course id  title  dept name  and credits  and may also have have associated prerequisites ? instructors are identified by their unique id each instructor has name  associated department  dept name   and salary ? students are identified by their unique id each student has a name  an associated major department  dept name   and tot cred  total credit hours the student earned thus far   thesumit67.blogspot.com 1.6 database design 17 ? the university maintains a list of classrooms  specifying the name of the building  room number  and room capacity ? the university maintains a list of all classes  sections  taught each section is identified by a course id  sec id  year  and semester  and has associated with it a semester  year  building  room number  and time slot id  the time slot when the class meets   ? the department has a list of teaching assignments specifying  for each instructor  the sections the instructor is teaching ? the university has a list of all student course registrations  specifying  for each student  the courses and the associated sections that the student has taken  registered for   a real university database would be much more complex than the preceding design.howeverwe use this simplified model to help you understand conceptual ideas without getting lost in details of a complex design 1.6.3 the entity-relationship model the entity-relationship  e-r  data model uses a collection of basic objects  called entities  and relationships among these objects an entity is a ? thing ? or ? object ? in the real world that is distinguishable from other objects for example  each person is an entity  and bank accounts can be considered as entities entities are described in a database by a set of attributes for example  the attributes dept name  building  and budget may describe one particular department in a university  and they form attributes of the department entity set similarly  attributes id  name  and salary may describe an instructor entity.2 the extra attribute id is used to identify an instructor uniquely  since it may be possible to have two instructors with the same name and the same salary   a unique instructor identifier must be assigned to each instructor in the united states  many organizations use the social-security number of a person  a unique number the u.s government assigns to every person in the united states  as a unique identifier arelationship is an association among several entities for example  a member relationship associates an instructor with her department the set of all entities of the same type and the set of all relationships of the same type are termed an entity set and relationship set  respectively the overall logical structure  schema  of a database can be expressed graphically by an entity-relationship  e-r  diagram there are several ways in which to draw these diagrams one of the most popular is to use the unified modeling language  uml   in the notation we use  which is based on uml  an e-r diagram is represented as follows  2the astute reader will notice that we dropped the attribute dept name from the set of attributes describing the instructor entity set ; this is not an error in chapter 7 we shall provide a detailed explanation of why this is the case thesumit67.blogspot.com 18 chapter 1 introduction instructor id name salary department dept_name building budget member figure 1.3 a sample e-r diagram ? entity sets are represented by a rectangular box with the entity set name in the header and the attributes listed below it ? relationship sets are represented by a diamond connecting a pair of related entity sets the name of the relationship is placed inside the diamond as an illustration  consider part of a university database consisting of instructors and the departments with which they are associated figure 1.3 shows the corresponding e-r diagram the e-r diagram indicates that there are two entity sets  instructor and department  with attributes as outlined earlier the diagram also shows a relationship member between instructor and department in addition to entities and relationships  the e-r model represents certain constraints to which the contents of a database must conform one important constraint is mapping cardinalities  which express the number of entities to which another entity can be associated via a relationship set for example  if each instructor must be associated with only a single department  the e-r model can express that constraint the entity-relationship model iswidely used in database design  and chapter 7 explores it in detail 1.6.4 normalization another method for designing a relational database is to use a process commonly known as normalization the goal is to generate a set of relation schemas that allows us to store information without unnecessary redundancy  yet also allows us to retrieve information easily the approach is to design schemas that are in an appropriate normal form to determine whether a relation schema is in one of the desirable normal forms  we need additional information about the real-world enterprise that we are modeling with the database the most common approach is to use functional dependencies  which we cover in section 8.4 to understand the need for normalization  let us look at what can go wrong in a bad database design among the undesirable properties that a bad design may have are  ? repetition of information ? inability to represent certain information thesumit67.blogspot.com 1.6 database design 19 id name salary dept name building budget 22222 einstein 95000 physics watson 70000 12121 wu 90000 finance painter 120000 32343 el said 60000 history painter 50000 45565 katz 75000 comp sci taylor 100000 98345 kim 80000 elec eng taylor 85000 76766 crick 72000 biology watson 90000 10101 srinivasan 65000 comp sci taylor 100000 58583 califieri 62000 history painter 50000 83821 brandt 92000 comp sci taylor 100000 15151 mozart 40000 music packard 80000 33456 gold 87000 physics watson 70000 76543 singh 80000 finance painter 120000 figure 1.4 the faculty table we shall discuss these problems with the help of a modified database design for our university example suppose that instead of having the two separate tables instructor and department  we have a single table  faculty  that combines the information from the two tables  as shown in figure 1.4   notice that there are two rows in faculty that contain repeated information about the history department  specifically  that department ? s building and budget the repetition of information in our alternative design is undesirable repeating information wastes space furthermore  it complicates updating the database suppose that we wish to change the budget amount of the history department from $ 50,000 to $ 46,800 this change must be reflected in the two rows ; contrast this with the original design  where this requires an update to only a single row thus  updates are more costly under the alternative design than under the original design when we perform the update in the alternative database  we must ensure that every tuple pertaining to the history department is updated  or else our database will show two different budget values for the history department now  let us shift our attention to the issue of ? inability to represent certain information ? suppose we are creating a new department in the university in the alternative design above,we can not represent directly the information concerning a department  dept name  building  budget  unless that department has at least one instructor at the university this is because rows in the faculty table require values for id  name  and salary this means that we can not record information about the newly created department until the first instructor is hired for the new department one solution to this problem is to introduce null values the null value indicates that the value does not exist  or is not known   an unknown value may be either missing  the value does exist  but we do not have that information  or not known  we do not know whether or not the value actually exists   as we thesumit67.blogspot.com 20 chapter 1 introduction shall see later  null values are difficult to handle  and it is preferable not to resort to them if we are not willing to deal with null values  then we can create a particular itemof department information only when the department has at least one instructor associated with the department furthermore  we would have to delete this information when the last instructor in the department departs clearly  this situation is undesirable  since  under our original database design  the department information would be available regardless of whether or not there is an instructor associated with the department  and without resorting to null values an extensive theory of normalization has been developed that helps formally define what database designs are undesirable  and how to obtain desirable designs chapter 8 covers relational-database design  including normalization 1.7 data storage and querying a database system is partitioned into modules that deal with each of the responsibilities of the overall system the functional components of a database system can be broadly divided into the storage manager and the query processor components the storage manager is important because databases typically require a large amount of storage space corporate databases range in size from hundreds of gigabytes to  for the largest databases  terabytes of data a gigabyte is approximately 1000 megabytes  actually 1024   1 billion bytes   and a terabyte is 1 million megabytes  1 trillion bytes   since the main memory of computers can not store this much information  the information is stored on disks data are moved between disk storage and main memory as needed since the movement of data to and from disk is slow relative to the speed of the central processing unit  it is imperative that the database system structure the data so as to minimize the need to move data between disk and main memory the query processor is important because it helps the database system to simplify and facilitate access to data the query processor allows database users to obtain good performance while being able to work at the view level and not be burdened with understanding the physical-level details of the implementation of the system it is the job of the database system to translate updates and queries written in a nonprocedural language  at the logical level  into an efficient sequence of operations at the physical level 1.7.1 storage manager the storage manager is the component of a database system that provides the interface between the low-level data stored in the database and the application programs and queries submitted to the system the storage manager is responsible for the interaction with the file manager the raw data are stored on the disk using the file system provided by the operating system the storage manager translates the various dml statements into low-level file-system commands thesumit67.blogspot.com 1.7 data storage and querying 21 thus  the storage manager is responsible for storing  retrieving  and updating data in the database the storage manager components include  ? authorization and integrity manager  which tests for the satisfaction of integrity constraints and checks the authority of users to access data ? transaction manager  which ensures that the database remains in a consistent  correct  state despite system failures  and that concurrent transaction executions proceed without conflicting ? file manager  which manages the allocation of space on disk storage and the data structures used to represent information stored on disk ? buffer manager,which is responsible for fetching data from disk storage into main memory  and deciding what data to cache in main memory the buffer manager is a critical part of the database system  since it enables the database to handle data sizes that are much larger than the size of main memory the storage manager implements several data structures as part of the physical system implementation  ? data files  which store the database itself ? data dictionary  which stores metadata about the structure of the database  in particular the schema of the database ? indices  which can provide fast access to data items like the index in this textbook  a database index provides pointers to those data items that hold a particular value for example  we could use an index to find the instructor record with a particular id  or all instructor records with a particular name hashing is an alternative to indexing that is faster in some but not all cases we discuss storage media  file structures  and buffer management in chapter 10 methods of accessing data efficiently via indexing or hashing are discussed in chapter 11 1.7.2 the query processor the query processor components include  ? ddl interpreter,which interprets ddl statements and records the definitions in the data dictionary ? dml compiler,which translates dml statements in a query language into an evaluation plan consisting of low-level instructions that the query evaluation engine understands thesumit67.blogspot.com 22 chapter 1 introduction a query can usually be translated into any of a number of alternative evaluation plans that all give the same result the dmlcompiler also performs query optimization ; that is  it picks the lowest cost evaluation plan from among the alternatives ? query evaluation engine  which executes low-level instructions generated by the dml compiler query evaluation is covered in chapter 12,while themethods bywhich the query optimizer chooses from among the possible evaluation strategies are discussed in chapter 13 1.8 transaction management often  several operations on the database form a single logical unit of work an example is a funds transfer  as in section 1.2  in which one department account  say a  is debited and another department account  say b  is credited clearly  it is essential that either both the credit and debit occur  or that neither occur that is  the funds transfer must happen in its entirety or not at all this all-or-none requirement is called atomicity in addition  it is essential that the execution of the funds transfer preserve the consistency of the database that is  the value of the sum of the balances of aand b must be preserved this correctness requirement is called consistency finally  after the successful execution of a funds transfer  the new values of the balances of accounts a and b must persist  despite the possibility of system failure this persistence requirement is called durability a transaction is a collection of operations that performs a single logical function in a database application each transaction is a unit of both atomicity and consistency thus  we require that transactions do not violate any databaseconsistency constraints that is  if the database was consistent when a transaction started  the database must be consistent when the transaction successfully terminates however  during the execution of a transaction  it may be necessary temporarily to allow inconsistency  since either the debit of a or the credit of b must be done before the other this temporary inconsistency  although necessary  may lead to difficulty if a failure occurs it is the programmer ? s responsibility to define properly the various transactions  so that each preserves the consistency of the database for example  the transaction to transfer funds from the account of department a to the account of department b could be defined to be composed of two separate programs  one that debits account a  and another that credits account b the execution of these two programs one after the otherwill indeed preserve consistency.however  each program by itself does not transform the database from a consistent state to a new consistent state thus  those programs are not transactions ensuring the atomicity and durability properties is the responsibility of the database system itself ? specifically  of the recovery manager in the absence of failures  all transactions complete successfully  and atomicity is achieved easily thesumit67.blogspot.com 1.9 database architecture 23 however  because of various types of failure  a transaction may not always complete its execution successfully if we are to ensure the atomicity property  a failed transaction must have no effect on the state of the database thus  the database must be restored to the state in which it was before the transaction in question started executing the database system must therefore perform failure recovery  that is  detect system failures and restore the database to the state that existed prior to the occurrence of the failure finally  when several transactions update the database concurrently  the consistency of data may no longer be preserved  even though each individual transaction is correct it is the responsibility of the concurrency-control manager to control the interaction among the concurrent transactions  to ensure the consistency of the database the transaction manager consists of the concurrency-control manager and the recovery manager the basic concepts of transaction processing are covered in chapter 14 the management of concurrent transactions is covered in chapter 15 chapter 16 covers failure recovery in detail the concept of a transaction has been applied broadly in database systems and applications while the initial use of transactions was in financial applications  the concept is now used in real-time applications in telecommunication  as well as in the management of long-duration activities such as product design or administrative workflows these broader applications of the transaction concept are discussed in chapter 26 1.9 database architecture we are now in a position to provide a single picture  figure 1.5  of the various components of a database system and the connections among them the architecture of a database system is greatly influenced by the underlying computer system on which the database system runs database systems can be centralized  or client-server  where one server machine executes work on behalf of multiple client machines database systems can also be designed to exploit parallel computer architectures distributed databases span multiple geographically separated machines in chapter 17 we cover the general structure of modern computer systems chapter 18 describes how various actions of a database  in particular query processing  can be implemented to exploit parallel processing chapter 19 presents a number of issues that arise in a distributed database  and describes how to deal with each issue the issues include how to store data  how to ensure atomicity of transactions that execute at multiple sites  how to perform concurrency control  and how to provide high availability in the presence of failures distributed query processing and directory systems are also described in this chapter most users of a database system today are not present at the site of the database system  but connect to it through a network we can therefore differentiate between client machines  on which remote database users work  and server machines  on which the database system runs thesumit67.blogspot.com 24 chapter 1 introduction database applications are usually partitioned into two or three parts  as in figure 1.6 in a two-tier architecture  the application resides at the client machine  where it invokes database system functionality at the server machine through naive users  tellers  agents  web users  query processor storage manager disk storage indices data statistical data data dictionary application programmers application interfaces application program object code compiler and linker buffer manager file manager authorization and integrity manager transaction manager dml compiler and organizer query evaluation engine dml queries ddl interpreter application programs query tools administration tools sophisticated users  analysts  database administrators use write use use figure 1.5 system structure thesumit67.blogspot.com 1.10 data mining and information retrieval 25 user application database system network  a  two-tier architecture client server user application client database system network application server  b  three-tier architecture figure 1.6 two-tier and three-tier architectures query language statements application program interface standards like odbc and jdbc are used for interaction between the client and the server in contrast  in a three-tier architecture  the client machine acts as merely a front end and does not contain any direct database calls instead  the client end communicates with an application server  usually through a forms interface the application server in turn communicates with a database system to access data the business logic of the application  which says what actions to carry out under what conditions  is embedded in the application server  instead of being distributed across multiple clients three-tier applications are more appropriate for large applications  and for applications that run on the worldwideweb 1.10 data mining and information retrieval the term data mining refers loosely to the process of semiautomatically analyzing large databases to find useful patterns like knowledge discovery in artificial intelligence  also called machine learning  or statistical analysis  data mining attempts to discover rules and patterns from data however  data mining differs from machine learning and statistics in that it deals with large volumes of data  stored primarily on disk that is  data mining deals with ? knowledge discovery in databases ? some types of knowledge discovered from a database can be represented by a set of rules the following is an example of a rule  stated informally  ? young womenwith annual incomes greater than $ 50,000 are the most likely people to buy small sports cars ? of course such rules are not universally true  but rather have thesumit67.blogspot.com 26 chapter 1 introduction degrees of ? support ? and ? confidence ? other types of knowledge are represented by equations relating different variables to each other  or by other mechanisms for predicting outcomes when the values of some variables are known there are a variety of possible types of patterns that may be useful  and different techniques are used to find different types of patterns in chapter 20 we study a few examples of patterns and see how they may be automatically derived from a database usually there is a manual component to data mining  consisting of preprocessing data to a form acceptable to the algorithms  and postprocessing of discovered patterns to find novel ones that could be useful there may also be more than one type of pattern that can be discovered from a given database  and manual interaction may be needed to pick useful types of patterns for this reason  data mining is really a semiautomatic process in real life however  in our description we concentrate on the automatic aspect of mining businesses have begun to exploit the burgeoning data online to make better decisions about their activities  such as what items to stock and how best to target customers to increase sales many of their queries are rather complicated  however  and certain types of information can not be extracted even by using sql several techniques and tools are available to help with decision support several tools for data analysis allow analysts to view data in different ways other analysis tools precompute summaries of very large amounts of data  in order to give fast responses to queries the sql standard contains additional constructs to support data analysis large companies have diverse sources of data that they need to use for making business decisions to execute queries efficiently on such diverse data  companies have built data warehouses data warehouses gather data from multiple sources under a unified schema  at a single site thus  they provide the user a single uniform interface to data textual data  too  has grown explosively textual data is unstructured  unlike the rigidly structured data in relational databases querying of unstructured textual data is referred to as information retrieval information retrieval systems have much in common with database systems ? in particular  the storage and retrieval of data on secondary storage however  the emphasis in the field of information systems is different from that in database systems  concentrating on issues such as querying based on keywords ; the relevance of documents to the query ; and the analysis  classification  and indexing of documents in chapters 20 and 21  we cover decision support  including online analytical processing  data mining  data warehousing  and information retrieval 1.11 specialty databases several application areas for database systems are limited by the restrictions of the relational data model as a result  researchers have developed several datamodels to deal with these application domains  including object-based data models and semistructured data models thesumit67.blogspot.com 1.12 database users and administrators 27 1.11.1 object-based data models object-oriented programming has become the dominant software-development methodology this led to the development of an object-oriented data model that can be seen as extending the e-r model with notions of encapsulation  methods  functions   and object identity inheritance  object identity  and encapsulation  information hiding   with methods to provide an interface to objects  are among the key concepts of object-oriented programming that have found applications in data modeling the object-oriented data model also supports a rich type system  including structured and collection types in the 1980s  several database systems based on the object-oriented data model were developed the major database vendors presently support the object-relational data model  a data model that combines features of the object-oriented datamodel and relational data model it extends the traditional relational model with a variety of features such as structured and collection types  as well as object orientation chapter 22 examines the object-relational data model 1.11.2 semistructured data models semistructured data models permit the specification of data where individual data items of the same type may have different sets of attributes this is in contrast with the data models mentioned earlier  where every data item of a particular type must have the same set of attributes the xml language was initially designed as a way of adding markup information to text documents  but has become important because of its applications in data exchange xml provides a way to represent data that have nested structure  and furthermore allows a great deal of flexibility in structuring of data  which is important for certain kinds of nontraditional data chapter 23 describes the xml language  different ways of expressing queries on data represented in xml  and transforming xml data from one form to another 1.12 database users and administrators a primary goal of a database system is to retrieve information from and store new information into the database people who work with a database can be categorized as database users or database administrators 1.12.1 database users and user interfaces there are four different types of database-system users  differentiated by the way they expect to interact with the system different types of user interfaces have been designed for the different types of users ? na ? ve users are unsophisticated users who interact with the system by invoking one of the application programs that have been written previously for example  a clerk in the university who needs to add a new instructor to thesumit67.blogspot.com 28 chapter 1 introduction department a invokes a program called new hire this program asks the clerk for the name of the new instructor  her new id  the name of the department  that is  a   and the salary the typical user interface for na ? ve users is a forms interface  where the user can fill in appropriate fields of the form na ? ve users may also simply read reports generated from the database as another example  consider a student  who during class registration period  wishes to register for a class by using a web interface such a user connects to a web application program that runs at a web server the application first verifies the identity of the user  and allows her to access a form where she enters the desired information the form information is sent back to the web application at the server  which then determines if there is room in the class  by retrieving information from the database  and if so adds the student information to the class roster in the database ? application programmers are computer professionalswho write application programs application programmers can choose frommany tools to develop user interfaces rapid application development  rad  tools are tools that enable an application programmer to construct forms and reportswith minimal programming effort ? sophisticated users interact with the system without writing programs instead  they form their requests either using a database query language or by using tools such as data analysis software analysts who submit queries to explore data in the database fall in this category ? specialized users are sophisticated users who write specialized database applications that do not fit into the traditional data-processing framework among these applications are computer-aided design systems  knowledgebase and expert systems  systems that store data with complex data types  for example  graphics data and audio data   and environment-modeling systems chapter 22 covers several of these applications 1.12.2 database administrator one of the main reasons for using dbmss is tohave central control of both thedata and the programs that access those data a person who has such central control over the system is called a database administrator  dba   the functions of a dba include  ? schema definition the dba creates the original database schema by executing a set of data definition statements in the ddl ? storage structure and access-method definition ? schema and physical-organization modification thedbacarries out changes to the schema and physical organization to reflect the changing needs of the organization  or to alter the physical organization to improve performance thesumit67.blogspot.com 1.13 history of database systems 29 ? granting of authorization for data access by granting different types of authorization  the database administrator can regulate which parts of the database various users can access the authorization information is kept in a special system structure that the database system consults whenever someone attempts to access the data in the system ? routine maintenance examples of the database administrator ? s routine maintenance activities are  periodically backing up the database  either onto tapes or onto remote servers  to prevent loss of data in case of disasters such as flooding ensuring that enough free disk space is available for normal operations  and upgrading disk space as required monitoring jobs running on the database and ensuring that performance is not degraded by very expensive tasks submitted by some users 1.13 history of database systems information processing drives the growth of computers  as it has from the earliest days of commercial computers in fact  automation of data processing tasks predates computers punched cards  invented by herman hollerith  were used at the very beginning of the twentieth century to record u.s census data  and mechanical systemswere used to process the cards and tabulate results punched cards were later widely used as a means of entering data into computers techniques for data storage and processing have evolved over the years  ? 1950s and early 1960s  magnetic tapes were developed for data storage data processing tasks such as payroll were automated  with data stored on tapes processing of data consisted of reading data from one or more tapes and writing data to a new tape data could also be input from punched card decks  and output to printers for example  salary raises were processed by entering the raises on punched cards and reading the punched card deck in synchronization with a tape containing themaster salary details the records had to be in the same sorted order the salary raises would be added to the salary read from the master tape  and written to a new tape ; the new tape would become the new master tape tapes  and card decks  could be read only sequentially  and data sizeswere much larger than main memory ; thus  data processing programs were forced to process data in a particular order  by reading and merging data fromtapes and card decks ? late 1960s and 1970s  widespread use of hard disks in the late 1960s changed the scenario for data processing greatly  since hard disks allowed direct access to data the position of data on disk was immaterial  since any location on disk could be accessed in just tens of milliseconds data were thus freed from thesumit67.blogspot.com 30 chapter 1 introduction the tyranny of sequentiality.with disks  network and hierarchical databases could be created that allowed data structures such as lists and trees to be stored on disk programmers could construct and manipulate these data structures a landmark paper by codd  1970  defined the relational model and nonprocedural ways of querying data in the relational model  and relational databaseswere born the simplicity of the relational model and the possibility of hiding implementation details completely from the programmer were enticing indeed codd later won the prestigious association of computing machinery turing award for his work ? 1980s  although academically interesting  the relational model was not used in practice initially  because of its perceived performance disadvantages ; relational databases could notmatch the performance of existing network and hierarchical databases that changed with system r  a groundbreaking project at ibm research that developed techniques for the construction of an efficient relational database system excellent overviews of system r are provided by astrahan et al  1976  and chamberlin et al  1981   the fully functional system r prototype led to ibm ? s first relational database product  sql/ds at the same time  the ingres system was being developed at the university of california at berkeley it led to a commercial product of the same name initial commercial relational database systems  such as ibm db2  oracle  ingres  and dec rdb  played a major role in advancing techniques for efficient processing of declarative queries by the early 1980s  relational databases had become competitivewith network and hierarchical database systems even in the area of performance relational databases were so easy to use that they eventually replaced network and hierarchical databases ; programmers using such databases were forced to deal with many low-level implementation details  and had to code their queries in a procedural fashion most importantly  they had to keep efficiency in mind when designing their programs  which involved a lot of effort in contrast  in a relational database  almost all these low-level tasks are carried out automatically by the database  leaving the programmer free to work at a logical level since attaining dominance in the 1980s  the relational model has reigned supreme among data models the 1980s also saw much research on parallel and distributed databases  as well as initial work on object-oriented databases ? early 1990s  the sql language was designed primarily for decision support applications  which are query-intensive  yet the mainstay of databases in the 1980s was transaction-processing applications  which are update-intensive decision support and querying re-emerged as a major application area for databases tools for analyzing large amounts of data saw large growths in usage many database vendors introduced parallel database products in this period database vendors also began to add object-relational support to their databases 