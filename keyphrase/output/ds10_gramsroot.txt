talking about quick::talking about quick
series of lectures::series of lectures
lectures the first::lectures the first
argued a worst::argued a worst
worst case running::worst case running
order n squared::order n squared
squared so today::squared so today
today the quick::today the quick
quick sort algorithm::quick sort algorithm
average in expectation::average in expectation
expectation it takes::expectation it takes
algorithm in practice::algorithm in practice
place sorting algorithm::place sorting algorithm
algorithm an algorithm::algorithm an algorithm
sort in place::sort in place
require any additional::require any additional
two more variables::two more variables
sort a large::sort a large
collection of numbers::collection of numbers
divide and conquer::divide and conquer
lot of divide::lot of divide
level the idea::level the idea
idea behind divide::idea behind divide
solve you divide::solve you divide
divide the problem::divide the problem
pieces you solve::pieces you solve
solve the problem::solve the problem
case of quick::case of quick
partition our array::partition our array
numbers and partitioned::numbers and partitioned
partitioned it break::partitioned it break
call the lower::call the lower
call the higher::call the higher
part the property::part the property
part every number::part every number
sort the lower::sort the lower
sort the higher::sort the higher
put all elements::put all elements
thing is sorted::thing is sorted
sorted the lower::sorted the lower
part is sorted::part is sorted
sorted the higher::sorted the higher
part every elements::part every elements
partition is done::partition is done
give a algorithm::give a algorithm
linear time procedure::linear time procedure
partitioning is done::partitioning is done
lower half lower::lower half lower
half lower part::half lower part
takes us parameters::takes us parameters
parameters the array::parameters the array
partitions the sub::partitions the sub
pivot element t.k::pivot element t.k
value p minus::value p minus
location this location::location this location
array the sub::array the sub
lop while true::lop while true
true which means::true which means
reach a location::reach a location
reach a locations::reach a locations
equal to ten::equal to ten
reached a location::reached a location
sense called prints::sense called prints
means just sort::means just sort
sort these contents::sort these contents
ort these contents::ort these contents
contents so blue::contents so blue
part and orange::part and orange
ten ya good::ten ya good
find an element::find an element
stop these things::stop these things
means our job::means our job
job is done::job is done
means they crossed::means they crossed
return the procedure::return the procedure
returning the value::returning the value
half my left::half my left
dos this procedure::dos this procedure
utmost ten times::utmost ten times
times the size::times the size
incremented at utmost::incremented at utmost
utmost the size::utmost the size
loop is done::loop is done
utmost n times::utmost n times
times this loop::times this loop
increment or decrement::increment or decrement
times rite questions::times rite questions
slightly different manner::slightly different manner
taking the pivot::taking the pivot
compare every element::compare every element
pivot and put::pivot and put
first few locations::first few locations
locations rite nit::locations rite nit
require more memory::require more memory
array and copy::array and copy
copy that array::copy that array
additional memory space::additional memory space
inside by taking::inside by taking
taking order order::taking order order
repeat until loop::repeat until loop
statement total number::statement total number
number of times::number of times
statement executed utmost::statement executed utmost
decrement only utmost::decrement only utmost
times this step::times this step
step is executed::step is executed
complete quick sort::complete quick sort
sort on lets::sort on lets
array rite array::array rite array
call for quick::call for quick
make any sense::make any sense
find the partition::find the partition
invoke the previous::invoke the previous
rearranges the part::rearranges the part
half later part::half later part
return it returns::return it returns
returns the demarcating::returns the demarcating
recursively invoke quick::recursively invoke quick
invoke quick sort::invoke quick sort
condition is met::condition is met
entire partition procedure::entire partition procedure
replace sorting algorithm::replace sorting algorithm
call quick sort::call quick sort
recursively so note::recursively so note
copy the array::copy the array
create more copies::create more copies
creating additional copies::creating additional copies
local these parameters::local these parameters
taking any additional::taking any additional
sir in quick::sir in quick
understands quick sort::understands quick sort
element you partitioned::element you partitioned
partitioned the array::partitioned the array
sort this left::sort this left
sort this right::sort this right
solve the left::solve the left
write a quick::write a quick
quick sort procedure::quick sort procedure
quick sort takes::quick sort takes
partition procedure takes::partition procedure takes
procedure takes order::procedure takes order
order n times::order n times
sort will depend::sort will depend
split is happening::split is happening
half but left::half but left
sort is taking::sort is taking
dividing the array::dividing the array
two equal halves::two equal halves
means that half::means that half
half the elements::half the elements
half elements ended::half elements ended
picked a pivot::picked a pivot
two parts equal::two parts equal
parts equal parts::parts equal parts
taking rite lets::taking rite lets
divide this array::divide this array
two n times::two n times
array of size::array of size
divide this sort::divide this sort
manner am taking::manner am taking
tree of mine::tree of mine
order n log::order n log
excuse me sir::excuse me sir
ten rite total::ten rite total
means i decrease::means i decrease
utmost m times::utmost m times
send the quality::send the quality
minus one elements::minus one elements
writing the recurrence::writing the recurrence
sort n elements::sort n elements
procedure was quick::procedure was quick
sort the left::sort the left
left part lets::left part lets
sort the right::sort the right
recurrence and lets::recurrence and lets
solve this recurrence::solve this recurrence
done its sorted::done its sorted
two plus theta::two plus theta
eventually becomes theta::eventually becomes theta
make it clear::make it clear
four plus theta::four plus theta
theta is bothering::theta is bothering
simple skewed split::simple skewed split
skewed split split::skewed split split
pictorially n divided::pictorially n divided
minus one divided::minus one divided
two n minus::two n minus
minus two divided::minus two divided
input is sorted::input is sorted
sorted already lets::sorted already lets
case would happen::case would happen
sorted in ascending::sorted in ascending
element in right::element in right
right half wil::right half wil
happen rite similar::happen rite similar
happened in insertion::happened in insertion
remember insertion sort::remember insertion sort
recall in insertion::recall in insertion
taking an element::taking an element
element and figuring::element and figuring
place to put::place to put
put that element::put that element
end to find::end to find
sorted in decreasing::sorted in decreasing
array was sorted::array was sorted
sorted in increasing::sorted in increasing
move back anymore::move back anymore
takes constant amount::takes constant amount
comparison with insertion::comparison with insertion
sorted increasing sorted::sorted increasing sorted
increasing sorted decreasing::increasing sorted decreasing
half an half::half an half
tenth nine tenth::tenth nine tenth
side and ninety::side and ninety
call this lucky::call this lucky
ten got divided::ten got divided
side one tenth::side one tenth
number of elements::number of elements
similarly the total::similarly the total
level were continued::level were continued
number is smaller::number is smaller
level is decreasing::level is decreasing
decrementing by half::decrementing by half
log n base::log n base
out the map::out the map
constant times log::constant times log
height is order::height is order
taking a total::taking a total
number of levels::number of levels
levels is log::levels is log
moving the left::moving the left
providing an upper::providing an upper
manner one tenth::manner one tenth
sacrosanct one tenth::sacrosanct one tenth
order argue log::order argue log
spectacular or special::spectacular or special
fraction of numbers::fraction of numbers
side a constant::side a constant
end up taking::end up taking
taking n squared::taking n squared
fraction one tenth::fraction one tenth
millionth the height::millionth the height
analysis from starting::analysis from starting
alternate the lucky::alternate the lucky
lucky and unlucky::lucky and unlucky
prove a log::prove a log
log n depth::log n depth
case n minus::case n minus
minus one operation::minus one operation
minus one operations::minus one operations
operations or comparisons::operations or comparisons
comparisons i managed::comparisons i managed
managed to split::managed to split
two n comparisons::two n comparisons
side and lets::side and lets
expected time expected::expected time expected
half best thing::half best thing
find a median::find a median
pick the median::pick the median
two equal parts::two equal parts
sort the numbers::sort the numbers
find the median::find the median
finding median element::finding median element
procedure for doing::procedure for doing
..some what close::..some what close
median by dividing::median by dividing
number of small::number of small
array then find::array then find
log n times::log n times
compute a median::compute a median
element in linear::element in linear
fairly a involved::fairly a involved
pick a random::pick a random
element and declare::element and declare
nt want top::nt want top
pick a specific::pick a specific
pick the last::pick the last
sequence is lets::sequence is lets
order or increasing::order or increasing
call a randomized::call a randomized
making some kind::making some kind
kind of random::kind of random
analyze the running::analyze the running
randomized quick sort::randomized quick sort
assume all elements::assume all elements
elements are distinct::elements are distinct
distinct we partition::distinct we partition
element a pivot::element a pivot
pick any element::pick any element
element at random::element at random
kind of splits::kind of splits
element each element::element each element
picked with equal::picked with equal
pick the tens::pick the tens
tens smallest element::tens smallest element
versus n minus::versus n minus
minus ten split::minus ten split
probability of picking::probability of picking
picking the tens::picking the tens
picked any element::picked any element
eleven smallest element::eleven smallest element
twelve smallest element::twelve smallest element
examples of randomization::examples of randomization
tool for designing::tool for designing
modify the randomize::modify the randomize
randomize the partition::randomize the partition
procedure and call::procedure and call
call it randomized::call it randomized
array between locations::array between locations
begin by finding::begin by finding
generates a random::generates a random
recall was taking::recall was taking
taking the last::taking the last
put my pivot::put my pivot
exchange the pivot::exchange the pivot
call my partition::call my partition
randomized partition procedure::randomized partition procedure
partition it calls::partition it calls
calls randomized partition::calls randomized partition
partition the rest::partition the rest
choice of pivot::choice of pivot
pivot is crucial::pivot is crucial
choose the pivot::choose the pivot
lets say increasing::lets say increasing
picking a random::picking a random
element to partition::element to partition
sequence as input::sequence as input
happen that today::happen that today
today you run::today you run
run the algorithm::run the algorithm
tomorrow you run::tomorrow you run
numbers are selected::numbers are selected
random numbers selected::random numbers selected
numbers selected decide::numbers selected decide
decide the pivot::decide the pivot
crucial in deciding::crucial in deciding
splitting the things::splitting the things
pivots were turning::pivots were turning
.all possible inputs::.all possible inputs
sequence of random::sequence of random
numbers is generated::numbers is generated
fix an input::fix an input
change the input::change the input
today and tomorrow::today and tomorrow
tomorrow and day::tomorrow and day
sorting that specific::sorting that specific
specific input sequence::specific input sequence
denote the expected::denote the expected
number of comparisons::number of comparisons
required by quick::required by quick
required the number::required the number
required to sort::required to sort
sort n numbers::sort n numbers
numbers will depend::numbers will depend
sort does quick::sort does quick
sort first partitions::sort first partitions
partition n numbers::partition n numbers
numbers no matter::numbers no matter
minus one comparisons::minus one comparisons
number is compared::number is compared
pivot are put::pivot are put
require n minus::require n minus
comparisons every number::comparisons every number
partition rite depending::partition rite depending
minus one lets::minus one lets
minus i elements::minus i elements
taking to quick::taking to quick
compute expectations expectations::compute expectations expectations
forgetting your expectations::forgetting your expectations
expectations i roll::expectations i roll
roll a dice::roll a dice
throw a dice::throw a dice
dice rite throw::dice rite throw
value so expectation::value so expectation
expectation is defined::expectation is defined
random variable random::random variable random
variable random variable::variable random variable
random variable lets::random variable lets
variable lets call::variable lets call
random variables takes::random variables takes
values each value::values each value
probability x equals::probability x equals
equals i equals::equals i equals
throwing this dice::throwing this dice
recording the outcome::recording the outcome
outcome keep doing::outcome keep doing
doing this forever::doing this forever
suppose you throw::suppose you throw
throw this dice::throw this dice
means the probability::means the probability
sufficiently many times::sufficiently many times
times your outcome::times your outcome
probability the random::probability the random
random variable takes::random variable takes
takes the value::takes the value
value one times::value one times
takes the random::takes the random
random variable ten::random variable ten
two so probability::two so probability
thinking of expectation::thinking of expectation
variable is taking::variable is taking
taking a set::taking a set
set of discrete::set of discrete
compute the value::compute the value
times the value::times the value
taking this value::taking this value
quantity also varies::quantity also varies
means every term::means every term
minus one appears::minus one appears
write this part::write this part
required to insert::required to insert
randomly chosen permutation::randomly chosen permutation
binary search tree::binary search tree
tree some variable::tree some variable
class we solved::class we solved
solved this recurrence::solved this recurrence
showed the solution::showed the solution
required by randomized::required by randomized
fact any questions::fact any questions
sort so lets::sort so lets
lets quickly summarize::lets quickly summarize
quick sort worst::quick sort worst
sort worst case::sort worst case
squared best case::squared best case
behavior is similar::behavior is similar
insert n elements::insert n elements
sequence is sorted::sequence is sorted
roughly the median::roughly the median
lets just recap::lets just recap
quick sort depends::quick sort depends
numbers were generated::numbers were generated
input the running::input the running
random numbers generated::random numbers generated
value is tomorrow::value is tomorrow
compute this value::compute this value
value it turns::value it turns
input was sorted::input was sorted
pick my pivot::pick my pivot
happened the running::happened the running
nt really depend::nt really depend
random number choice::random number choice
make any fix::make any fix
input no matter::input no matter
matter what input::matter what input
beat my algorithm::beat my algorithm
sequence such sequence::sequence such sequence
matter what sequence::matter what sequence
sequence of numbers::sequence of numbers
make an algorithm::make an algorithm
kind of input::kind of input
make it independent::make it independent
making a random::making a random
.for that kind::.for that kind
knew what kinds::knew what kinds
kinds of inputs::kinds of inputs
sense to design::sense to design
design the algorithm::design the algorithm
kind of inputs::kind of inputs
designing the algorithm::designing the algorithm
sequence or specific::sequence or specific
times of input::times of input
class for binary::class for binary
make this difference::make this difference
difference very clear::difference very clear
doing an average::doing an average
run it today::run it today
run it tomorrow::run it tomorrow
choices being made::choices being made
factorial different permutations::factorial different permutations
understand the difference::understand the difference
difference the recurrence::difference the recurrence
call an average::call an average
average case analysis::average case analysis
factorial different inputs::factorial different inputs
average rite today::average rite today
algorithm our algorithm::algorithm our algorithm
algorithm was taking::algorithm was taking
taking different times::taking different times
taking the average::taking the average
inputs the input::inputs the input
input was fixed::input was fixed
today s lecture::today s lecture
expected time analysis::expected time analysis
analysis for randomized::analysis for randomized
quick sort::quick sort
sorting algorithm::sorting algorithm
insertion sort::insertion sort
worst case::worst case
case running::case running
sort algorithm::sort algorithm
quick algorithm::quick algorithm
small constants::small constants
place sorting::place sorting
place sort::place sort
additional memory::additional memory
good thing::good thing
large collection::large collection
algorithm falls::algorithm falls
conquer algorithms::conquer algorithms
high level::high level
smaller pieces::smaller pieces
divide step::divide step
lower part::lower part
higher part::higher part
entire thing::entire thing
combining part::combining part
conquer algorithm::conquer algorithm
pivot element::pivot element
lower half::lower half
larger part::larger part
larger array::larger array
sub array::sub array
element t.k::element t.k
pivot ten::pivot ten
left part::left part
right part::right part
orange part::orange part
found find::found find
first element::first element
exit return::exit return
left half::left half
right half::right half
procedure takes::procedure takes
taking order::taking order
speaks hindi::speaks hindi
decremented utmost::decremented utmost
done utmost::done utmost
memory space::memory space
group inside::group inside
order order::order order
statement total::statement total
total number::total number
lops put::lops put
statement executed::statement executed
executed utmost::executed utmost
complete quick::complete quick
initial call::initial call
previous procedure::previous procedure
initial part::initial part
demarcating lines::demarcating lines
upper half::upper half
larger half::larger half
loop forever::loop forever
loop stops::loop stops
break statement::break statement
entire partition::entire partition
partition procedure::partition procedure
replace sorting::replace sorting
additional copies::additional copies
single array::single array
random number::random number
fixed number::fixed number
sort procedure::sort procedure
sort takes::sort takes
takes order::takes order
times linear::times linear
elements end::elements end
taking lets::taking lets
point suppose::point suppose
equal halves::equal halves
median lets::median lets
elements ended::elements ended
equal parts::equal parts
partitioning takes::partitioning takes
write theta::write theta
inter change::inter change
quality good::quality good
recurrence relation::recurrence relation
elements equals::elements equals
first step::first step
part lets::part lets
lets solve::lets solve
lets make::lets make
basically theta::basically theta
constant times::constant times
skewed split::skewed split
split split::split split
last element::last element
increasing order::increasing order
upper part::upper part
ascending order::ascending order
descending order::descending order
smallest element::smallest element
half wil::half wil
similar kind::similar kind
thing happened::thing happened
remember insertion::remember insertion
decreasing order::decreasing order
constant amount::constant amount
app occur::app occur
lets continue::lets continue
ten percent::ten percent
ninety percent::ninety percent
elements change::elements change
first stage::first stage
ten elements::ten elements
tenth means::tenth means
ten number::ten number
right num::right num
largest number::largest number
largest guy::largest guy
base ten::base ten
decreasing decrementing::decreasing decrementing
order log::order log
times log::times log
sir moving::sir moving
upper bound::upper bound
strange manner::strange manner
constant fraction::constant fraction
thirty seventh::thirty seventh
order argue::order argue
argue log::argue log
important thing::important thing
formal analysis::formal analysis
unlucky cases::unlucky cases
unlucky case::unlucky case
lucky case::lucky case
prove lets::prove lets
word expected::word expected
partition half::partition half
median element::median element
pivot pick::pivot pick
first place::first place
odd number::odd number
small array::small array
small arrays::small arrays
involved procedure::involved procedure
random element::random element
top pick::top pick
specific element::specific element
square running::square running
randomized algorithm::randomized algorithm
random choices::random choices
equal probability::equal probability
minus ten::minus ten
ten split::ten split
ten versus::ten versus
designing algorithms::designing algorithms
randomized quick::randomized quick
randomized partition::randomized partition
last location::last location
calling partition::calling partition
random elements::random elements
random choice::random choice
good question::good question
specific input::specific input
sorted sequence::sorted sequence
interesting thing::interesting thing
random numbers::random numbers
numbers selected::numbers selected
selected decide::selected decide
algorithm today::algorithm today
input sequence::input sequence
expected number::expected number
comparisons required::comparisons required
first partitions::first partitions
partition process::partition process
left side::left side
right place::right place
thirteen minus::thirteen minus
minus thirteen::minus thirteen
quantity summed::quantity summed
compute expectations::compute expectations
expectations expectations::expectations expectations
expected value::expected value
unloaded dice::unloaded dice
variable random::variable random
random variable::random variable
variable lets::variable lets
lets call::lets call
random variables::random variables
expectation expectation::expectation expectation
probability means::probability means
variable takes::variable takes
probability ten::probability ten
variable ten::variable ten
discrete values::discrete values
value times::value times
value summed::value summed
lets revert::lets revert
probability times::probability times
quantity varies::quantity varies
last class::last class
chosen permutation::chosen permutation
binary search::binary search
search tree::search tree
sort worst::sort worst
crucial difference::crucial difference
doing today::doing today
done today::done today
sort depends::sort depends
value today::value today
value tomorrow::value tomorrow
numbers generated::numbers generated
fixed input::fixed input
pivot lets::pivot lets
squared times::squared times
input order::input order
number choice::number choice
make things::make things
fix element::fix element
makes sense::makes sense
specific times::specific times
specific amount::specific amount
specific algorithm::specific algorithm
input sequences::input sequences
vast difference::vast difference
average case::average case
case analysis::case analysis
times depending::times depending
end today::end today
lecture-10::lecture-10
today::today
talking::talking
quick::quick
sort::sort
sorting::sorting
algorithm::algorithm
discussing::discussing
series::series
lectures::lectures
first::first
insertion::insertion
argued::argued
worst::worst
case::case
running::running
order::order
squared::squared
argue::argue
average::average
expectation::expectation
takes::takes
log::log
practice::practice
fast::fast
small::small
constants::constants
property::property
place::place
nt::nt
require::require
additional::additional
memory::memory
assume::assume
numbers::numbers
array::array
two::two
variables::variables
typically::typically
good::good
thing::thing
space::space
premium::premium
large::large
collection::collection
falls::falls
paradine::paradine
divide::divide
conquer::conquer
point::point
lot::lot
algorithms::algorithms
high::high
level::level
idea::idea
problem::problem
solve::solve
pieces::pieces
smaller::smaller
step::step
partition::partition
chose::chose
partitioned::partitioned
break::break
parts::parts
call::call
lower::lower
part::part
higher::higher
element::element
number::number
put::put
elements::elements
follow::follow
entire::entire
sorted::sorted
combining::combining
trivial::trivial
done::done
combine::combine
examples::examples
understand::understand
give::give
partitioning::partitioning
linear::linear
procedure::procedure
pivot::pivot
half::half
larger::larger
instance::instance
parameters::parameters
limits::limits
refers::refers
location::location
partitions::partitions
sub::sub
end::end
means::means
t.k::t.k
ten::ten
doing::doing
value::value
minus::minus
assigned::assigned
start::start
interested::interested
lop::lop
true::true
continue::continue
loop::loop
out::out
repeat::repeat
equal::equal
index::index
decrementing::decrementing
reach::reach
decrement::decrement
locations::locations
counting::counting
reached::reached
stopped::stopped
incrementing::incrementing
greater::greater
recall::recall
left::left
right::right
sense::sense
prints::prints
exchange::exchange
contents::contents
ort::ort
blue::blue
denote::denote
orange::orange
find::find
found::found
stop::stop
things::things
moving::moving
immediately::immediately
head::head
nineteen::nineteen
swap::swap
marked::marked
searching::searching
position::position
crossed::crossed
job::job
exit::exit
return::return
returning::returning
tells::tells
boundary::boundary
halves::halves
stud::stud
dos::dos
clear::clear
taking::taking
speaks::speaks
hindi::hindi
times::times
decremented::decremented
utmost::utmost
size::size
incremented::incremented
increment::increment
questions::questions
simple::simple
manner::manner
slightly::slightly
compare::compare
nit::nit
copy::copy
back::back
purse::purse
group::group
inside::inside
wait::wait
lets::lets
loops::loops
statement::statement
total::total
executed::executed
run::run
iteration::iteration
lops::lops
file::file
sum::sum
complete::complete
initial::initial
length::length
general::general
equals::equals
make::make
invoke::invoke
previous::previous
rearranges::rearranges
returns::returns
demarcating::demarcating
lines::lines
upper::upper
separately::separately
recursively::recursively
sir::sir
forever::forever
stops::stops
condition::condition
met::met
replace::replace
note::note
create::create
copies::copies
creating::creating
local::local
passing::passing
created::created
track::track
ignoring::ignoring
variab::variab
sitting::sitting
single::single
random::random
fixed::fixed
coming::coming
minute::minute
understands::understands
repeatedly::repeatedly
notion::notion
write::write
analyze::analyze
depend::depend
split::split
happening::happening
determine::determine
suppose::suppose
dividing::dividing
started::started
lucky::lucky
median::median
ended::ended
picked::picked
divided::divided
happened::happened
four::four
effect::effect
tree::tree
drawn::drawn
levels::levels
mine::mine
eventually::eventually
naveen::naveen
excuse::excuse
big::big
theta::theta
omega::omega
inter::inter
change::change
increase::increase
decrease::decrease
increased::increased
exact::exact
constant::constant
send::send
quality::quality
side::side
situation::situation
writing::writing
recurrence::recurrence
relation::relation
earlier::earlier
assuming::assuming
term::term
basically::basically
bothering::bothering
skewed::skewed
pictorially::pictorially
height::height
makes::makes
scheme::scheme
last::last
begin::begin
input::input
increasing::increasing
happen::happen
ascending::ascending
descending::descending
smallest::smallest
wil::wil
similar::similar
kind::kind
remember::remember
figuring::figuring
decreasing::decreasing
front::front
move::move
anymore::anymore
amount::amount
comparison::comparison
app::app
occur::occur
analysis::analysis
tenth::tenth
percent::percent
ninety::ninety
stage::stage
hundred::hundred
tenths::tenths
guy::guy
similarly::similarly
continued::continued
figure::figure
num::num
largest::largest
route::route
factor::factor
base::base
tens::tens
work::work
map::map
providing::providing
bound::bound
strange::strange
fraction::fraction
sacrosanct::sacrosanct
thirty::thirty
seventh::seventh
spectacular::spectacular
special::special
important::important
afford::afford
bad::bad
hundredth::hundredth
thousandth::thousandth
millionth::millionth
formal::formal
starting::starting
motivation::motivation
alternate::alternate
unlucky::unlucky
cases::cases
prove::prove
depth::depth
operations::operations
operation::operation
comparisons::comparisons
managed::managed
worry::worry
formally::formally
scenarios::scenarios
expect::expect
word::word
expected::expected
bit::bit
pick::pick
great::great
laugh::laugh
strategy::strategy
finding::finding
straight::straight
forward::forward
..some::..some
close::close
odd::odd
arrays::arrays
compute::compute
fairly::fairly
involved::involved
learn::learn
declare::declare
top::top
specific::specific
sequence::sequence
struck::struck
square::square
randomized::randomized
making::making
choices::choices
distinct::distinct
probability::probability
splits::splits
kinds::kinds
versus::versus
picking::picking
eleven::eleven
twelve::twelve
randomization::randomization
tool::tool
designing::designing
modify::modify
randomize::randomize
generates::generates
including::including
calling::calling
calls::calls
rest::rest
choice::choice
crucial::crucial
choose::choose
difference::difference
question::question
gong::gong
fact::fact
interesting::interesting
pivots::pivots
randomly::randomly
selected::selected
tomorrow::tomorrow
depends::depends
decide::decide
deciding::deciding
nice::nice
splitting::splitting
roughly::roughly
evenly::evenly
turning::turning
.all::.all
inputs::inputs
averaging::averaging
generated::generated
fix::fix
day::day
required::required
function::function
matter::matter
process::process
compared::compared
depending::depending
leave::leave
thirteen::thirteen
quantity::quantity
summed::summed
expectations::expectations
forgetting::forgetting
roll::roll
dice::dice
outcomes::outcomes
equally::equally
occurs::occurs
doubt::doubt
throw::throw
values::values
appears::appears
unloaded::unloaded
defined::defined
variable::variable
throwing::throwing
recording::recording
outcome::outcome
billion::billion
experiment::experiment
sufficiently::sufficiently
event::event
written::written
thinking::thinking
set::set
discrete::discrete
revert::revert
slides::slides
varies::varies
summing::summing
class::class
insert::insert
chosen::chosen
permutation::permutation
binary::binary
search::search
solved::solved
showed::showed
solution::solution
quickly::quickly
summarize::summarize
dint::dint
intuitively::intuitively
behavior::behavior
inserting::inserting
recap::recap
essentially::essentially
turns::turns
aggregate::aggregate
independent::independent
adversely::adversely
beat::beat
quit::quit
turn::turn
.for::.for
knew::knew
design::design
aware::aware
listen::listen
carefully::carefully
made::made
sequences::sequences
factorial::factorial
permutations::permutations
vast::vast
looked::looked
computed::computed
hand::hand
lecture::lecture
