structures and programming::structures and programming
stacks and queues::stacks and queues
queues the first::queues the first
first data structures::first data structures
study this semester::study this semester
order they arrive::order they arrive
stacks are data::stacks are data
structures which maintain::structures which maintain
maintain the order::maintain the order
order of last-in::order of last-in
queues are data::queues are data
order of first-in::order of first-in
lines at stores::lines at stores
stores are organized::stores are organized
organized as queues::organized as queues
applications in programs::applications in programs
data structure operations::data structure operations
operations on stacks::operations on stacks
stacks the terminology::stacks the terminology
spring loaded plate::spring loaded plate
loaded plate containers::loaded plate containers
plate containers common::plate containers common
common in dining::common in dining
plate is washed::plate is washed
plate is popped::plate is popped
stack a stack::stack a stack
don t care::don t care
maintaining procedure calls::maintaining procedure calls
procedure calls stacks::procedure calls stacks
maintain the return::maintain the return
modula-3 procedures call::modula-3 procedures call
call other procedures::call other procedures
procedures which call::procedures which call
jacob and esau::jacob and esau
esau were twin::esau were twin
brothers where esau::brothers where esau
esau was born::esau was born
issac s birthright::issac s birthright
jacob got esau::jacob got esau
esau to give::esau to give
bowl of soup::bowl of soup
patriarch of israel::patriarch of israel
tricking his brother::tricking his brother
famous 11th century::famous 11th century
11th century jewish::11th century jewish
century jewish commentator::century jewish commentator
explained the problem::explained the problem
jacob was conceived::jacob was conceived
tube to assume::tube to assume
assume his rightful::assume his rightful
first in line::first in line
line abstract operations::line abstract operations
item x note::item x note
search operation initialize::search operation initialize
two are boolean::two are boolean
boolean queries defining::boolean queries defining
defining these abstract::defining these abstract
abstract operations lets::abstract operations lets
lets us build::lets us build
build a stack::build a stack
reuse without knowing::reuse without knowing
knowing the details::knowing the details
implementation the easiest::implementation the easiest
variable to represent::variable to represent
represent the top::represent the top
stack an alternative::stack an alternative
change the implementations::change the implementations
program knowing declarations::program knowing declarations
stack interface stack::stack interface stack
stack of integer::stack of integer
element to top::element to top
top of stack::top of stack
removes and returns::removes and returns
returns top element::returns top element
true if stack::true if stack
stack is empty::stack is empty
stack is full::stack is full
end stack stack::end stack stack
stack stack implementation::stack stack implementation
stack implementation module::stack implementation module
implementation module stack::implementation module stack
number of elements::number of elements
elements on stack::elements on stack
record info array::record info array
stack to empty::stack to empty
instance of stack::instance of stack
elem end push::elem end push
end push procedure::end push procedure
push procedure pop::push procedure pop
end pop procedure::end pop procedure
pop procedure empty::pop procedure empty
begin return stack.top::begin return stack.top
end empty procedure::end empty procedure
empty procedure full::empty procedure full
stack.top = max::stack.top = max
max end full::max end full
end full begin::end full begin
full begin end::full begin end
begin end stack::begin end stack
stack type module::stack type module
type module stackuser::type module stackuser
module stackuser exports::module stackuser exports
stackuser exports main::stackuser exports main
stack import push::stack import push
full from sio::full from sio
sio import error::sio import error
user please enter::user please enter
add entered number::add entered number
number to stack::number to stack
number from stack::number from stack
stack and return::stack and return
end stackuser fifo::end stackuser fifo
stackuser fifo queues::stackuser fifo queues
fifo queues queues::fifo queues queues
difficult to implement::difficult to implement
implement than stacks::implement than stacks
ends the easiest::ends the easiest
moves all elements::moves all elements
efficient queues suppose::efficient queues suppose
clear previously unused::clear previously unused
previously unused cells::previously unused cells
enqueue and dequeue::enqueue and dequeue
wasteful of space::wasteful of space
number of enqueues::number of enqueues
number of items::number of items
circular queues circular::circular queues circular
queues circular queues::queues circular queues
reuse empty space::reuse empty space
empty space note::empty space note
queue is full::queue is full
two pointers point::two pointers point
point to neighboring::point to neighboring
ways to adjust::ways to adjust
adjust the pointers::adjust the pointers
pointers for circular::pointers for circular
full from empty::full from empty
identical the easiest::identical the easiest
queue fifo queue::queue fifo queue
fifo queue interface::fifo queue interface
queue interface interface::queue interface interface
interface interface fifo::interface interface fifo
queue of text::queue of text
element to end::element to end
returns first element::returns first element
true if queue::true if queue
queue is empty::queue is empty
end fifo priority::end fifo priority
fifo priority queue::fifo priority queue
priority queue implementation::priority queue implementation
queue implementation module::queue implementation module
implementation module fifo::implementation module fifo
elements in fifo::elements in fifo
fifo = record::fifo = record
var w fifo::var w fifo
stores new element::stores new element
in-pointer in ring::in-pointer in ring
number of stored::number of stored
end enqueue procedure::end enqueue procedure
enqueue procedure dequeue::enqueue procedure dequeue
removes oldest element::removes oldest element
out-pointer in ring::out-pointer in ring
returns the read::returns the read
end dequeue utility::end dequeue utility
dequeue utility routines::dequeue utility routines
utility routines procedure::utility routines procedure
routines procedure empty::routines procedure empty
begin return w.n::begin return w.n
w.n = max::w.n = max
begin end fifo::begin end fifo
end fifo user::end fifo user
fifo user module::fifo user module
user module module::user module module
module module fifouser::module module fifouser
module fifouser exports::module fifouser exports
fifouser exports main::fifouser exports main
fifo import enqueue::fifo import enqueue
fifouser other queues::fifouser other queues
queues double-ended queues::queues double-ended queues
structures which support::structures which support
support both push::support both push
push and pop::push and pop
operations priority queues::operations priority queues
insertions and remove::insertions and remove
remove minimum operations::remove minimum operations
simulations to maintain::simulations to maintain
maintain a queue::maintain a queue
lecture we introduce::lecture we introduce
commonly used data::commonly used data
stack we practice::stack we practice
practice again writing::practice again writing
writing an interface::writing an interface
implementing the interface::implementing the interface
interface using linked::interface using linked
list is circular::list is circular
stack interface stacks::stack interface stacks
stacks are similar::stacks are similar
similar to queues::similar to queues
insert and remove::insert and remove
stacks a lifo::stacks a lifo
last in first::last in first
interface type elem::interface type elem
defined typedef struct::defined typedef struct
typedef struct stack::typedef struct stack
struct stack stack::struct stack stack
stack stack bool::stack stack bool
stack bool is_empty::stack bool is_empty
pushing and popping::pushing and popping
popping an item::popping an item
slightly more abstract::slightly more abstract
case of queues::case of queues
type the elements::type the elements
file is read::file is read
defined a lecture::defined a lecture
lecture notes september::lecture notes september
stacks l8.2 type::stacks l8.2 type
l8.2 type elem::l8.2 type elem
type of stack::type of stack
implementation is generic::implementation is generic
generic or polymorphic::generic or polymorphic
provide a good::provide a good
rely on programmer::rely on programmer
implementation the idea::implementation the idea
reuse linked lists::reuse linked lists
top a typical::top a typical
data next note::data next note
list is marked::list is marked
special null pointer::special null pointer
dereferenced we define::dereferenced we define
define struct list::define struct list
elem data struct::elem data struct
data struct list::data struct list
typedef struct list::typedef struct list
struct list list::struct list list
list list struct::list list struct
list struct stack::list struct stack
starting at top::starting at top
ends in null::ends in null
l8.3 to check::l8.3 to check
verify that top::verify that top
top is null::top is null
null bool is_empty::null bool is_empty
top to null::top to null
null after allocating::null after allocating
allocating it stack::allocating it stack
top = null::top = null
push an element::push an element
set its data::set its data
update the top::update the top
stack to point::stack to point
idea to draw::idea to draw
draw a diagram::draw a diagram
data next lecture::data next lecture
code void push::code void push
first = alloc::first = alloc
first > data::first- > data
pop an element::pop an element
move the top::move the top
pointer to follow::pointer to follow
case of dequeuing::case of dequeuing
dequeuing an element::dequeuing an element
constituted the top::constituted the top
longer be accessible::longer be accessible
collected as needed::collected as needed
code elem pop::code elem pop
pop empty stack::pop empty stack
top > data::top- > data
completes the implementation::completes the implementation
implementation of stacks::implementation of stacks
simple and pervasive::simple and pervasive
pervasive data structure::pervasive data structure
implement a virtual::implement a virtual
detecting circularity checking::detecting circularity checking
satisify their data::satisify their data
data structure invariant::data structure invariant
structure invariant raises::structure invariant raises
raises an interesting::raises an interesting
created a list::created a list
list that lecture::list that lecture
terminates the program::terminates the program
program for checking::program for checking
checking a segment::checking a segment
loop in general::loop in general
contracts should terminate::contracts should terminate
contract it satisfied::contract it satisfied
rejected a circular::rejected a circular
lecture lecture notes::lecture lecture notes
original is_segment predicate::original is_segment predicate
is_segment predicate bool::is_segment predicate bool
predicate bool is_segment::predicate bool is_segment
simplest solutions proposed::simplest solutions proposed
proposed in class::proposed in class
loop to check::loop to check
list the code::list the code
return false circular::return false circular
solution before reading::solution before reading
reading on lecture::reading on lecture
l8.8 the idea::l8.8 the idea
create two pointers::create two pointers
traverses the list::traverses the list
skips two elements::skips two elements
list we show::list we show
show the state::show the state
code bool is_circular::code bool is_circular
inside the loop::inside the loop
loop we exploit::loop we exploit
exploit the short-circuiting::exploit the short-circuiting
dereference a null::dereference a null
extremely important consideration::extremely important consideration
consideration when writing::consideration when writing
writing pointer manipulation::writing pointer manipulation
pointer manipulation code::pointer manipulation code
due to floyd::due to floyd
stand for tortoise::stand for tortoise
stand for hare::stand for hare
hare this algorithm::hare this algorithm
algorithm has complexity::algorithm has complexity
student in class::student in class
hare will stumble::hare will stumble
stumble over null::stumble over null
enters the loop::enters the loop
step the tortoise::step the tortoise
loop the hare::loop the hare
closer the hare::closer the hare
hare will catch::hare will catch
catch the tortoise::catch the tortoise
half the size::half the size
complete a full::complete a full
data structures::data structures
programming stacks::programming stacks
first data::first data
arrive stacks::arrive stacks
first-out queues::first-out queues
important applications::important applications
data structure::data structure
structure operations::structure operations
spring loaded::spring loaded
loaded plate::loaded plate
plate containers::plate containers
dining halls::dining halls
clean plate::clean plate
plates don::plates don
maintaining procedure::maintaining procedure
procedure calls::procedure calls
calls stacks::calls stacks
return points::return points
procedures call::procedures call
biblical story::biblical story
twin brothers::twin brothers
inherited issac::inherited issac
brother rashi::brother rashi
famous 11th::famous 11th
11th century::11th century
century jewish::century jewish
jewish commentator::jewish commentator
narrow tube::narrow tube
rightful place::rightful place
line abstract::line abstract
abstract operations::abstract operations
stack push::stack push
search operation::search operation
operation initialize::operation initialize
boolean queries::boolean queries
queries defining::queries defining
operations lets::operations lets
stack module::stack module
easiest implementation::easiest implementation
alternative implementation::alternative implementation
linked lists::linked lists
overflow note::overflow note
program knowing::program knowing
knowing declarations::knowing declarations
stack interface::stack interface
interface stack::interface stack
integer elements::integer elements
element type::element type
procedure push::procedure push
adds element::adds element
procedure pop::procedure pop
returns top::returns top
procedure empty::procedure empty
end stack::end stack
stack stack::stack stack
stack implementation::stack implementation
implementation module::implementation module
module stack::module stack
integer stack::integer stack
const max::const max
maximum number::maximum number
record info::record info
info array::info array
initialize stack::initialize stack
var stack::var stack
elem end::elem end
end push::end push
push procedure::push procedure
begin dec::begin dec
end pop::end pop
pop procedure::pop procedure
returns true::returns true
begin return::begin return
end empty::end empty
empty procedure::empty procedure
max end::max end
full begin::full begin
begin end::begin end
stack type::stack type
type module::type module
module stackuser::module stackuser
stackuser exports::stackuser exports
stack import::stack import
import push::import push
sio import::sio import
import error::import error
fatal error::fatal error
suppress warning::suppress warning
begin puttext::begin puttext
stack user::stack user
enter numbers::enter numbers
add entered::add entered
entered number::entered number
remove number::remove number
end stackuser::end stackuser
stackuser fifo::stackuser fifo
fifo queues::fifo queues
queues queues::queues queues
adds elements::adds elements
wasteful moving::wasteful moving
efficient queues::efficient queues
queues suppose::queues suppose
maintaining pointers::maintaining pointers
unused cells::unused cells
array bigger::array bigger
total number::total number
items stored::items stored
circular queues::circular queues
empty space::empty space
space note::space note
back pointer::back pointer
pointers point::pointers point
neighboring elements::neighboring elements
empty queues::empty queues
pointer positions::pointer positions
queue fifo::queue fifo
fifo queue::fifo queue
queue interface::queue interface
interface interface::interface interface
interface fifo::interface fifo
text elements::text elements
procedure enqueue::procedure enqueue
procedure dequeue::procedure dequeue
end fifo::end fifo
fifo priority::fifo priority
priority queue::priority queue
queue implementation::queue implementation
module fifo::module fifo
type fifo::type fifo
mod max::mod max
increments number::increments number
stored elements::stored elements
end enqueue::end enqueue
enqueue procedure::enqueue procedure
oldest element::oldest element
decrements number::decrements number
read element::read element
end dequeue::end dequeue
dequeue utility::dequeue utility
utility routines::utility routines
routines procedure::routines procedure
return w.n::return w.n
fifo user::fifo user
user module::user module
module module::module module
module fifouser::module fifouser
fifouser exports::fifouser exports
text queue::text queue
fifo import::fifo import
import enqueue::import enqueue
supress warning::supress warning
enter texts::enter texts
end fifouser::end fifouser
double-ended queues::double-ended queues
operations priority::operations priority
priority queues::priority queues
supports insertions::supports insertions
minimum operations::minimum operations
linked list::linked list
interface stacks::interface stacks
remove items::remove items
makes stacks::makes stacks
interface type::interface type
type elem::type elem
defined typedef::defined typedef
typedef struct::typedef struct
struct stack::struct stack
stack bool::stack bool
bool is_empty::bool is_empty
stack s_new::stack s_new
void push::void push
elem pop::elem pop
constant-time operations::constant-time operations
lecture notes::lecture notes
notes september::notes september
stack elements::stack elements
programmer discipline::programmer discipline
operations work::operations work
call top::call top
typical stack::typical stack
top data::top data
special null::special null
null pointer::null pointer
define struct::define struct
struct list::struct list
elem data::elem data
data struct::data struct
list list::list list
list struct::list struct
list top::list top
valid stack::valid stack
list starting::list starting
top ends::top ends
list segment::list segment
last lecture::last lecture
bool is_stack::bool is_stack
return is_segment::return is_segment
null bool::null bool
requires is_stack::requires is_stack
ensures is_stack::ensures is_stack
ensures is_empty::ensures is_empty
null return::null return
list item::list item
data field::data field
current top::current top
top field::top field
good idea::good idea
code void::code void
top pointer::top pointer
previous lecture::previous lecture
garbage collected::garbage collected
runtime system::runtime system
code elem::code elem
empty stack::empty stack
pervasive data::pervasive data
virtual machine::virtual machine
detecting circularity::detecting circularity
circularity checking::circularity checking
queue satisify::queue satisify
structure invariant::structure invariant
invariant raises::invariant raises
interesting question::interesting question
start data::start data
infinite loop::infinite loop
contract diverges::contract diverges
circular list::circular list
lecture lecture::lecture lecture
original is_segment::original is_segment
is_segment predicate::is_segment predicate
predicate bool::predicate bool
bool is_segment::bool is_segment
list start::list start
list end::list end
return false::return false
return true::return true
simplest solutions::simplest solutions
solutions proposed::solutions proposed
start pointer::start pointer
auxiliary loop::auxiliary loop
false circular::false circular
solution requires::solution requires
efficient solution::efficient solution
single steps::single steps
code bool::code bool
bool is_circular::bool is_circular
tortoise list::tortoise list
loop_invariant is_segment::loop_invariant is_segment
condition inside::condition inside
short-circuiting evaluation::short-circuiting evaluation
null guarding::null guarding
important consideration::important consideration
writing pointer::writing pointer
pointer manipulation::pointer manipulation
manipulation code::manipulation code
tortoise enters::tortoise enters
tortoise takes::tortoise takes
hare takes::hare takes
full trip::full trip
data::data
structures::structures
programming::programming
stacks::stacks
queues::queues
first::first
study::study
semester::semester
lists::lists
property::property
order::order
items::items
determined::determined
arrive::arrive
maintain::maintain
last-in::last-in
first-out::first-out
first-in::first-in
fairer::fairer
lines::lines
stores::stores
organized::organized
important::important
applications::applications
programs::programs
structure::structure
operations::operations
terminology::terminology
spring::spring
loaded::loaded
plate::plate
containers::containers
common::common
dining::dining
halls::halls
washed::washed
pushed::pushed
stack::stack
hungry::hungry
clean::clean
popped::popped
task::task
plates::plates
don::don
care::care
maintaining::maintaining
procedure::procedure
calls::calls
return::return
points::points
modula-3::modula-3
procedures::procedures
call::call
jacob::jacob
esau::esau
biblical::biblical
story::story
twin::twin
brothers::brothers
born::born
inherited::inherited
issac::issac
birthright::birthright
give::give
bowl::bowl
soup::soup
patriarch::patriarch
israel::israel
justified::justified
tricking::tricking
brother::brother
rashi::rashi
famous::famous
11th::11th
century::century
jewish::jewish
commentator::commentator
explained::explained
problem::problem
conceived::conceived
narrow::narrow
tube::tube
assume::assume
rightful::rightful
place::place
line::line
abstract::abstract
push::push
x,s::x,s
pop::pop
item::item
note::note
search::search
operation::operation
initialize::initialize
full::full
empty::empty
two::two
boolean::boolean
queries::queries
defining::defining
lets::lets
build::build
module::module
reuse::reuse
knowing::knowing
details::details
implementation::implementation
easiest::easiest
array::array
index::index
variable::variable
represent::represent
top::top
alternative::alternative
linked::linked
overflow::overflow
change::change
implementations::implementations
rest::rest
program::program
declarations::declarations
interface::interface
integer::integer
elements::elements
type::type
element::element
elem::elem
adds::adds
removes::removes
returns::returns
true::true
end::end
14.07.94::14.07.94
const::const
max::max
maximum::maximum
number::number
record::record
info::info
cardinal::cardinal
var::var
instance::instance
begin::begin
stack.top::stack.top
stack.info::stack.info
dec::dec
stackuser::stackuser
exports::exports
main::main
14.02.95::14.02.95
client::client
import::import
sio::sio
error::error
getint::getint
putint::putint
puttext::puttext
fatal::fatal
suppress::suppress
warning::warning
user::user
enter::enter
numbers::numbers
add::add
entered::entered
remove::remove
fifo::fifo
difficult::difficult
implement::implement
action::action
ends::ends
moves::moves
queue::queue
wasteful::wasteful
moving::moving
dequeue::dequeue
efficient::efficient
suppose::suppose
pointers::pointers
head::head
last::last
tail::tail
reason::reason
explicitly::explicitly
clear::clear
previously::previously
unused::unused
cells::cells
enqueue::enqueue
fast::fast
space::space
bigger::bigger
total::total
enqueues::enqueues
stored::stored
circular::circular
pointer::pointer
front::front
list::list
back::back
point::point
neighboring::neighboring
lots::lots
ways::ways
adjust::adjust
tricky::tricky
distinguish::distinguish
positions::positions
identical::identical
counter::counter
text::text
priority::priority
out::out
w.info::w.info
w.in::w.in
mod::mod
increments::increments
in-pointer::in-pointer
ring::ring
w.n::w.n
w.out::w.out
oldest::oldest
out-pointer::out-pointer
decrements::decrements
read::read
utility::utility
routines::routines
fifouser::fifouser
gettext::gettext
supress::supress
texts::texts
double-ended::double-ended
support::support
heaps::heaps
supports::supports
insertions::insertions
minimum::minimum
simulations::simulations
events::events
lecture::lecture
introduce::introduce
commonly::commonly
practice::practice
writing::writing
implementing::implementing
discuss::discuss
check::check
similar::similar
insert::insert
makes::makes
lifo::lifo
defined::defined
typedef::typedef
struct::struct
bool::bool
is_empty::is_empty
s_new::s_new
void::void
creation::creation
pushing::pushing
popping::popping
constant-time::constant-time
slightly::slightly
case::case
write::write
file::file
notes::notes
september::september
l8.2::l8.2
generic::generic
polymorphic::polymorphic
provide::provide
good::good
enforce::enforce
language::language
rely::rely
programmer::programmer
discipline::discipline
idea::idea
work::work
typical::typical
form::form
marked::marked
special::special
null::null
dereferenced::dereferenced
define::define
test::test
valid::valid
starting::starting
checking::checking
segment::segment
introduced::introduced
is_stack::is_stack
is_segment::is_segment
l8.3::l8.3
verify::verify
requires::requires
creating::creating
simple::simple
set::set
allocating::allocating
ensures::ensures
result::result
alloc::alloc
create::create
field::field
current::current
finally::finally
update::update
draw::draw
diagram::diagram
l8.4::l8.4
code::code
first::first-
move::move
follow::follow
dequeuing::dequeuing
previous::previous
constituted::constituted
longer::longer
accessible::accessible
garbage::garbage
collected::collected
needed::needed
runtime::runtime
system::system
l8.5::l8.5
assert::assert
top::top-
completes::completes
pervasive::pervasive
exercise::exercise
virtual::virtual
machine::machine
detecting::detecting
circularity::circularity
satisify::satisify
invariant::invariant
raises::raises
interesting::interesting
question::question
created::created
l8.6::l8.6
cycle::cycle
start::start
reach::reach
terminates::terminates
infinite::infinite
loop::loop
general::general
contracts::contracts
terminate::terminate
effects::effects
marginally::marginally
acceptable::acceptable
contract::contract
diverges::diverges
incorrectly::incorrectly
claim::claim
satisfied::satisfied
rejected::rejected
class::class
l8.7::l8.7
original::original
predicate::predicate
false::false
simplest::simplest
solutions::solutions
proposed::proposed
copy::copy
advance::advance
run::run
auxiliary::auxiliary
solution::solution
find::find
reading::reading
l8.8::l8.8
traverses::traverses
single::single
steps::steps
hand::hand
skips::skips
step::step
slower::slower
overtake::overtake
show::show
state::state
iteration::iteration
l8.9::l8.9
is_circular::is_circular
tortoise::tortoise
hare::hare
loop_invariant::loop_invariant
next::next-
condition::condition
inside::inside
exploit::exploit
short-circuiting::short-circuiting
evaluation::evaluation
logical::logical
guarding::guarding
dereference::dereference
extremely::extremely
consideration::consideration
manipulation::manipulation
algorithm::algorithm
due::due
floyd::floyd
chosen::chosen
stand::stand
complexity::complexity
easy::easy
suggested::suggested
student::student
stumble::stumble
enters::enters
takes::takes
closer::closer
catch::catch
half::half
size::size
complete::complete
trip::trip
