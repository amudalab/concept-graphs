lecture notes september::12.6797000058
data struct::11.0
data structure::10.0
returns true::8.0
true if queue::6.33985000288
removes and returns::6.33985000288
true if stack::6.33985000288
linked list::5.0
top data::5.0
adds element::5.0
stack is empty::4.75488750216
queue is full::4.75488750216
return false::4.0
fifo queue::4.0
lecture notes::4.0
data structures::4.0
queue is empty::3.16992500144
returns top element::3.16992500144
top of stack::3.16992500144
number of stored::3.16992500144
record info array::3.16992500144
element to top::3.16992500144
stack interface stack::3.16992500144
begin return w.n::3.16992500144
queue of text::3.16992500144
begin return stack.top::3.16992500144
stack is full::3.16992500144
returns first element::3.16992500144
full begin end::3.16992500144
top = null::3.16992500144
end full begin::3.16992500144
user please enter::3.16992500144
max end full::3.16992500144
maintain the order::3.16992500144
structures which maintain::3.16992500144
full from empty::3.16992500144
empty procedure full::3.16992500144
data next lecture::3.16992500144
end empty procedure::3.16992500144
call other procedures::3.16992500144
sio import error::3.16992500144
number of elements::3.16992500144
jacob and esau::3.16992500144
element to end::3.16992500144
list start::3.0
maximum number::3.0
list item::3.0
requires is_stack::3.0
procedure empty::3.0
struct list::3.0
return true::3.0
struct stack::2.0
integer stack::2.0
circular queues::2.0
ensures is_empty::2.0
begin return::2.0
text elements::2.0
stored elements::2.0
begin puttext::2.0
procedure push::2.0
element type::2.0
easiest implementation::2.0
end stack::2.0
list end::2.0
first-out queues::2.0
procedure enqueue::2.0
linked lists::2.0
stack s_new::2.0
ensures is_stack::2.0
const max::2.0
end fifo::2.0
mod max::2.0
fatal error::2.0
module stackuser exports::1.58496250072
is_segment predicate bool::1.58496250072
jacob was conceived::1.58496250072
completes the implementation::1.58496250072
struct list list::1.58496250072
stack we practice::1.58496250072
stacks l8.2 type::1.58496250072
code bool is_circular::1.58496250072
removes oldest element::1.58496250072
queues double-ended queues::1.58496250072
fifo queues queues::1.58496250072
begin end stack::1.58496250072
order of first-in::1.58496250072
typedef struct stack::1.58496250072
11th century jewish::1.58496250072
stores are organized::1.58496250072
list struct stack::1.58496250072
operations priority queues::1.58496250072
applications in programs::1.58496250072
traverses the list::1.58496250072
stacks are similar::1.58496250072
modula-3 procedures call::1.58496250072
set its data::1.58496250072
fifo = record::1.58496250072
fifouser exports main::1.58496250072
draw a diagram::1.58496250072
loop to check::1.58496250072
two are boolean::1.58496250072
checking a segment::1.58496250072
move the top::1.58496250072
stand for tortoise::1.58496250072
fifo import enqueue::1.58496250072
user module module::1.58496250072
stack stack implementation::1.58496250072
first in line::1.58496250072
pop an element::1.58496250072
program for checking::1.58496250072
code elem pop::1.58496250072
lecture lecture notes::1.58496250072
variable to represent::1.58496250072
update the top::1.58496250072
define struct list::1.58496250072
reuse without knowing::1.58496250072
stack to point::1.58496250072
first > data::1.58496250072
queue fifo queue::1.58496250072
loaded plate containers::1.58496250072
stack to empty::1.58496250072
allocating it stack::1.58496250072
contracts should terminate::1.58496250072
structures which support::1.58496250072
pointer to follow::1.58496250072
returns the read::1.58496250072
created a list::1.58496250072
consideration when writing::1.58496250072
century jewish commentator::1.58496250072
module module fifouser::1.58496250072
elements on stack::1.58496250072
end dequeue utility::1.58496250072
type of stack::1.58496250072
implementation of stacks::1.58496250072
complete a full::1.58496250072
stackuser exports main::1.58496250072
stand for hare::1.58496250072
spring loaded plate::1.58496250072
stackuser fifo queues::1.58496250072
enqueue and dequeue::1.58496250072
var w fifo::1.58496250072
number of items::1.58496250072
data structure operations::1.58496250072
number to stack::1.58496250072
interface type elem::1.58496250072
show the state::1.58496250072
queue implementation module::1.58496250072
program knowing declarations::1.58496250072
top a typical::1.58496250072
two pointers point::1.58496250072
l8.2 type elem::1.58496250072
data next note::1.58496250072
predicate bool is_segment::1.58496250072
point to neighboring::1.58496250072
special null pointer::1.58496250072
stack an alternative::1.58496250072
defined typedef struct::1.58496250072
elements in fifo::1.58496250072
plate is washed::1.58496250072
pop empty stack::1.58496250072
list we show::1.58496250072
stack type module::1.58496250072
esau was born::1.58496250072
closer the hare::1.58496250072
list that lecture::1.58496250072
pop procedure empty::1.58496250072
end push procedure::1.58496250072
similar to queues::1.58496250072
defining these abstract::1.58496250072
create two pointers::1.58496250072
adjust the pointers::1.58496250072
build a stack::1.58496250072
reuse empty space::1.58496250072
issac s birthright::1.58496250072
list list struct::1.58496250072
line abstract operations::1.58496250072
hare will catch::1.58496250072
add entered number::1.58496250072
catch the tortoise::1.58496250072
previously unused cells::1.58496250072
end stack stack::1.58496250072
top to null::1.58496250072
order of last-in::1.58496250072
contract it satisfied::1.58496250072
algorithm has complexity::1.58496250072
push and pop::1.58496250072
skips two elements::1.58496250072
ends in null::1.58496250072
module fifouser exports::1.58496250072
stack.top = max::1.58496250072
list is circular::1.58496250072
jacob got esau::1.58496250072
stores new element::1.58496250072
stacks a lifo::1.58496250072
difficult to implement::1.58496250072
proposed in class::1.58496250072
empty space note::1.58496250072
practice again writing::1.58496250072
routines procedure empty::1.58496250072
famous 11th century::1.58496250072
student in class::1.58496250072
null bool is_empty::1.58496250072
l8.3 to check::1.58496250072
ways to adjust::1.58496250072
code void push::1.58496250072
pointers for circular::1.58496250072
structure invariant raises::1.58496250072
abstract operations lets::1.58496250072
defined a lecture::1.58496250072
verify that top::1.58496250072
lets us build::1.58496250072
elem data struct::1.58496250072
l8.8 the idea::1.58496250072
pushing and popping::1.58496250072
ends the easiest::1.58496250072
simulations to maintain::1.58496250072
lines at stores::1.58496250072
queues are data::1.58496250072
stack interface stacks::1.58496250072
efficient queues suppose::1.58496250072
procedure calls stacks::1.58496250072
queues circular queues::1.58496250072
case of queues::1.58496250072
lecture we introduce::1.58496250072
queues the first::1.58496250072
push an element::1.58496250072
type module stackuser::1.58496250072
loop we exploit::1.58496250072
implementation module stack::1.58496250072
typedef struct list::1.58496250072
stack and return::1.58496250072
solution before reading::1.58496250072
reuse linked lists::1.58496250072
generic or polymorphic::1.58496250072
inside the loop::1.58496250072
longer be accessible::1.58496250072
enters the loop::1.58496250072
number from stack::1.58496250072
stack stack bool::1.58496250072
change the implementations::1.58496250072
stacks are data::1.58496250072
raises an interesting::1.58496250072
plate is popped::1.58496250072
null after allocating::1.58496250072
rejected a circular::1.58496250072
popping an item::1.58496250072
dequeuing an element::1.58496250072
extremely important consideration::1.58496250072
exploit the short-circuiting::1.58496250072
satisify their data::1.58496250072
interface interface fifo::1.58496250072
support both push::1.58496250072
brothers where esau::1.58496250072
number of enqueues::1.58496250072
due to floyd::1.58496250072
stack import push::1.58496250072
struct stack stack::1.58496250072
stumble over null::1.58496250072
implementation is generic::1.58496250072
tube to assume::1.58496250072
item x note::1.58496250072
begin end fifo::1.58496250072
case of dequeuing::1.58496250072
search operation initialize::1.58496250072
procedures which call::1.58496250072
hare this algorithm::1.58496250072
list the code::1.58496250072
end stackuser fifo::1.58496250072
priority queue implementation::1.58496250072
end fifo user::1.58496250072
out-pointer in ring::1.58496250072
file is read::1.58496250072
insert and remove::1.58496250072
organized as queues::1.58496250072
esau to give::1.58496250072
stacks and queues::1.58496250072
writing pointer manipulation::1.58496250072
top is null::1.58496250072
half the size::1.58496250072
interface using linked::1.58496250072
implementation the easiest::1.58496250072
constituted the top::1.58496250072
fifouser other queues::1.58496250072
slightly more abstract::1.58496250072
step the tortoise::1.58496250072
moves all elements::1.58496250072
loop the hare::1.58496250072
terminates the program::1.58496250072
assume his rightful::1.58496250072
reading on lecture::1.58496250072
stack of integer::1.58496250072
fifo priority queue::1.58496250072
w.n = max::1.58496250072
starting at top::1.58496250072
knowing the details::1.58496250072
explained the problem::1.58496250072
rely on programmer::1.58496250072
wasteful of space::1.58496250072
first data structures::1.58496250072
queue interface interface::1.58496250072
plate containers common::1.58496250072
identical the easiest::1.58496250072
end fifo priority::1.58496250072
structures and programming::1.58496250072
fifo user module::1.58496250072
implement a virtual::1.58496250072
in-pointer in ring::1.58496250072
push procedure pop::1.58496250072
represent the top::1.58496250072
original is_segment predicate::1.58496250072
end enqueue procedure::1.58496250072
elem end push::1.58496250072
remove minimum operations::1.58496250072
implementation module fifo::1.58496250072
operations on stacks::1.58496250072
enqueue procedure dequeue::1.58496250072
bowl of soup::1.58496250072
boolean queries defining::1.58496250072
clear previously unused::1.58496250072
detecting circularity checking::1.58496250072
dereferenced we define::1.58496250072
fifo queue interface::1.58496250072
dereference a null::1.58496250072
instance of stack::1.58496250072
last in first::1.58496250072
don t care::1.58496250072
dequeue utility routines::1.58496250072
stack bool is_empty::1.58496250072
idea to draw::1.58496250072
end pop procedure::1.58496250072
first = alloc::1.58496250072
utility routines procedure::1.58496250072
provide a good::1.58496250072
writing an interface::1.58496250072
maintaining procedure calls::1.58496250072
simple and pervasive::1.58496250072
type the elements::1.58496250072
data struct list::1.58496250072
stack a stack::1.58496250072
hare will stumble::1.58496250072
circular queues circular::1.58496250072
esau were twin::1.58496250072
stacks the terminology::1.58496250072
full from sio::1.58496250072
insertions and remove::1.58496250072
order they arrive::1.58496250072
data structure invariant::1.58496250072
loop in general::1.58496250072
top > data::1.58496250072
study this semester::1.58496250072
maintain a queue::1.58496250072
pointer manipulation code::1.58496250072
pervasive data structure::1.58496250072
patriarch of israel::1.58496250072
implementing the interface::1.58496250072
tricking his brother::1.58496250072
implement than stacks::1.58496250072
commonly used data::1.58496250072
return false circular::1.58496250072
collected as needed::1.58496250072
simplest solutions proposed::1.58496250072
stack implementation module::1.58496250072
list is marked::1.58496250072
maintain the return::1.58496250072
implementation the idea::1.58496250072
common in dining::1.58496250072
alternative implementation::1.0
infinite loop::1.0
supress warning::1.0
overflow note::1.0
stack stack::1.0
valid stack::1.0
null return::1.0
makes stacks::1.0
condition inside::1.0
stack implementation::1.0
programming stacks::1.0
initialize stack::1.0
typical stack::1.0
interesting question::1.0
short-circuiting evaluation::1.0
begin dec::1.0
call top::1.0
good idea::1.0
constant-time operations::1.0
solution requires::1.0
elem pop::1.0
var stack::1.0
last lecture::1.0
abstract operations::1.0
stack push::1.0
wasteful moving::1.0
tortoise takes::1.0
read element::1.0
procedure pop::1.0
text queue::1.0
priority queue::1.0
brother rashi::1.0
biblical story::1.0
void push::1.0
stack elements::1.0
list segment::1.0
efficient solution::1.0
top pointer::1.0
items stored::1.0
empty queues::1.0
total number::1.0
runtime system::1.0
stack interface::1.0
stack user::1.0
tortoise enters::1.0
enter texts::1.0
previous lecture::1.0
list top::1.0
end fifouser::1.0
full trip::1.0
procedure dequeue::1.0
array bigger::1.0
clean plate::1.0
bool is_segment::1.0
narrow tube::1.0
maintaining pointers::1.0
null guarding::1.0
null pointer::1.0
fifo user::1.0
decrements number::1.0
twin brothers::1.0
module fifo::1.0
virtual machine::1.0
remove items::1.0
back pointer::1.0
top field::1.0
arrive stacks::1.0
stack module::1.0
circular list::1.0
supports insertions::1.0
list starting::1.0
bool is_empty::1.0
type elem::1.0
operations work::1.0
plates don::1.0
inherited issac::1.0
single steps::1.0
module stack::1.0
bool is_stack::1.0
tortoise list::1.0
remove number::1.0
contract diverges::1.0
neighboring elements::1.0
type fifo::1.0
loop_invariant is_segment::1.0
begin end::1.0
programmer discipline::1.0
increments number::1.0
dining halls::1.0
rightful place::1.0
return points::1.0
enter numbers::1.0
adds elements::1.0
typedef struct::1.0
top ends::1.0
integer elements::1.0
start data::1.0
start pointer::1.0
implementation module::1.0
garbage collected::1.0
return is_segment::1.0
current top::1.0
data field::1.0
hare takes::1.0
pointer positions::1.0
auxiliary loop::1.0
suppress warning::1.0
queue satisify::1.0
important applications::1.0
represent::0.0
code::0.0
loop_invariant::0.0
jewish commentator::0.0
end empty::0.0
follow::0.0
oldest::0.0
const::0.0
warning::0.0
program knowing::0.0
created::0.0
elem end::0.0
case::0.0
original is_segment::0.0
void::0.0
enqueue::0.0
14.07.94::0.0
jacob::0.0
special::0.0
notes::0.0
supress::0.0
list::0.0
brother::0.0
item::0.0
adjust::0.0
record info::0.0
enforce::0.0
solutions::0.0
patriarch::0.0
writing::0.0
writing pointer::0.0
w.n::0.0
current::0.0
11th::0.0
suppose::0.0
exercise::0.0
notes september::0.0
full::0.0
utility routines::0.0
detecting circularity::0.0
algorithm::0.0
procedure calls::0.0
sio import::0.0
consideration::0.0
change::0.0
search::0.0
property::0.0
increments::0.0
tortoise::0.0
first-out::0.0
items::0.0
study::0.0
commonly::0.0
queue::0.0
loop::0.0
action::0.0
short-circuiting::0.0
implement::0.0
narrow::0.0
makes::0.0
manipulation code::0.0
puttext::0.0
predicate bool::0.0
plate containers::0.0
explained::0.0
marked::0.0
texts::0.0
semester::0.0
boolean::0.0
total::0.0
takes::0.0
is_segment predicate::0.0
dereferenced::0.0
interface interface::0.0
circularity checking::0.0
call::0.0
trip::0.0
type::0.0
century jewish::0.0
popped::0.0
biblical::0.0
acceptable::0.0
inherited::0.0
code void::0.0
floyd::0.0
easiest::0.0
fatal::0.0
language::0.0
work::0.0
soup::0.0
arrive::0.0
numbers::0.0
claim::0.0
elem data::0.0
give::0.0
organized::0.0
code elem::0.0
implementations::0.0
pushed::0.0
minimum::0.0
garbage::0.0
tube::0.0
end::0.0
returns top::0.0
provide::0.0
verify::0.0
write::0.0
stackuser exports::0.0
sio::0.0
circular::0.0
dequeue utility::0.0
max::0.0
is_stack::0.0
diagram::0.0
procedures call::0.0
efficient queues::0.0
data::0.0
predicate::0.0
alloc::0.0
famous::0.0
counter::0.0
lines::0.0
element::0.0
end pop::0.0
complexity::0.0
enter::0.0
order::0.0
typical::0.0
operations::0.0
circularity::0.0
september::0.0
find::0.0
satisfied::0.0
list struct::0.0
program::0.0
push procedure::0.0
runtime::0.0
move::0.0
constituted::0.0
chosen::0.0
special null::0.0
l8.8::0.0
condition::0.0
double-ended::0.0
cardinal::0.0
main::0.0
defining::0.0
stackuser::0.0
good::0.0
return w.n::0.0
introduce::0.0
bool is_circular::0.0
l8.3::0.0
front::0.0
discuss::0.0
maintaining::0.0
pervasive::0.0
line abstract::0.0
routines::0.0
events::0.0
positions::0.0
l8.5::0.0
fifo priority::0.0
idea::0.0
allocating::0.0
solution::0.0
rashi::0.0
marginally::0.0
end stackuser::0.0
operations priority::0.0
operation::0.0
ring::0.0
popping::0.0
out::0.0
issac::0.0
washed::0.0
stumble::0.0
11th century::0.0
null bool::0.0
lecture::0.0
x,s::0.0
operations lets::0.0
dereference::0.0
first-in::0.0
reason::0.0
loaded plate::0.0
initialize::0.0
detecting::0.0
hand::0.0
interface stack::0.0
care::0.0
advance::0.0
overtake::0.0
fifo queues::0.0
applications::0.0
last-in::0.0
is_empty::0.0
place::0.0
enqueues::0.0
dec::0.0
top::0.0
first::0.0
student::0.0
w.out::0.0
number::0.0
slower::0.0
array::0.0
ways::0.0
size::0.0
story::0.0
fifouser::0.0
end dequeue::0.0
enqueue procedure::0.0
system::0.0
esau::0.0
priority::0.0
needed::0.0
returns::0.0
structures::0.0
lists::0.0
interface fifo::0.0
task::0.0
first data::0.0
manipulation::0.0
copy::0.0
completes::0.0
full begin::0.0
iteration::0.0
halls::0.0
routines procedure::0.0
determined::0.0
priority queues::0.0
false::0.0
maintaining procedure::0.0
half::0.0
guarding::0.0
in-pointer::0.0
simplest solutions::0.0
empty procedure::0.0
client::0.0
note::0.0
maintain::0.0
stack.info::0.0
build::0.0
begin::0.0
queue implementation::0.0
removes::0.0
queues queues::0.0
unused::0.0
adds::0.0
segment::0.0
class::0.0
don::0.0
neighboring::0.0
clear::0.0
hungry::0.0
points::0.0
programming::0.0
show::0.0
terminate::0.0
overflow::0.0
entered number::0.0
finally::0.0
implementation::0.0
wasteful::0.0
efficient::0.0
explicitly::0.0
plate::0.0
contracts::0.0
satisify::0.0
original::0.0
introduced::0.0
reading::0.0
suggested::0.0
remove::0.0
getint::0.0
unused cells::0.0
w.in::0.0
common::0.0
queries::0.0
pointers::0.0
knowing::0.0
set::0.0
s_new::0.0
ends::0.0
module::0.0
result::0.0
spring loaded::0.0
israel::0.0
polymorphic::0.0
alternative::0.0
closer::0.0
instance::0.0
is_circular::0.0
incorrectly::0.0
record::0.0
lots::0.0
constant-time::0.0
state::0.0
simplest::0.0
justified::0.0
stack import::0.0
module module::0.0
empty space::0.0
pushing::0.0
creating::0.0
pointer::0.0
clean::0.0
typedef::0.0
supports::0.0
add::0.0
structure invariant::0.0
interface::0.0
last::0.0
w.info::0.0
programmer::0.0
implementing::0.0
space::0.0
contract::0.0
user module::0.0
interesting::0.0
knowing declarations::0.0
point::0.0
simple::0.0
distinguish::0.0
twin::0.0
invariant::0.0
ensures::0.0
double-ended queues::0.0
dequeue::0.0
queries defining::0.0
entered::0.0
containers::0.0
define::0.0
lifo::0.0
suppress::0.0
question::0.0
assert::0.0
catch::0.0
false circular::0.0
virtual::0.0
define struct::0.0
lecture lecture::0.0
error::0.0
max end::0.0
add entered::0.0
procedure::0.0
decrements::0.0
birthright::0.0
century::0.0
simulations::0.0
fifo::0.0
return::0.0
boolean queries::0.0
generic::0.0
bowl::0.0
linked::0.0
checking::0.0
l8.9::0.0
queues suppose::0.0
l8.2::0.0
plates::0.0
structure operations::0.0
l8.6::0.0
l8.4::0.0
difficult::0.0
space note::0.0
practice::0.0
conceived::0.0
null::0.0
queue fifo::0.0
pointers point::0.0
import enqueue::0.0
moving::0.0
user::0.0
infinite::0.0
stack::0.0
single::0.0
cycle::0.0
modula-3::0.0
traverses::0.0
exports::0.0
programs::0.0
queue interface::0.0
elem::0.0
invariant raises::0.0
effects::0.0
heaps::0.0
stores::0.0
proposed::0.0
true::0.0
rest::0.0
end push::0.0
stored::0.0
interface type::0.0
fairer::0.0
l8.7::0.0
previous::0.0
discipline::0.0
enters::0.0
struct::0.0
dining::0.0
due::0.0
module stackuser::0.0
lets::0.0
bigger::0.0
easy::0.0
reach::0.0
import push::0.0
collected::0.0
identical::0.0
evaluation::0.0
reuse::0.0
insert::0.0
read::0.0
tricking::0.0
module fifouser::0.0
operation initialize::0.0
pop::0.0
step::0.0
integer::0.0
out-pointer::0.0
mod::0.0
code bool::0.0
tail::0.0
skips::0.0
famous 11th::0.0
exploit::0.0
index::0.0
queues::0.0
terminology::0.0
accessible::0.0
stackuser fifo::0.0
spring::0.0
creation::0.0
back::0.0
born::0.0
defined typedef::0.0
loaded::0.0
brothers::0.0
pointer manipulation::0.0
inside::0.0
machine::0.0
14.02.95::0.0
commentator::0.0
rejected::0.0
run::0.0
hare::0.0
list list::0.0
interface stacks::0.0
dequeuing::0.0
is_segment::0.0
stack type::0.0
pervasive data::0.0
stacks::0.0
stand::0.0
slightly::0.0
create::0.0
stack bool::0.0
previously::0.0
pop procedure::0.0
two::0.0
raises::0.0
import::0.0
next::0.0
empty stack::0.0
end enqueue::0.0
utility::0.0
rely::0.0
fast::0.0
extremely::0.0
fifouser exports::0.0
support::0.0
minimum operations::0.0
start::0.0
oldest element::0.0
terminates::0.0
var::0.0
info array::0.0
rightful::0.0
procedures::0.0
head::0.0
complete::0.0
form::0.0
import error::0.0
jewish::0.0
stack.top::0.0
search operation::0.0
line::0.0
auxiliary::0.0
info::0.0
cells::0.0
declarations::0.0
maximum::0.0
assume::0.0
calls stacks::0.0
empty::0.0
problem::0.0
similar::0.0
diverges::0.0
defined::0.0
abstract::0.0
general::0.0
file::0.0
moves::0.0
check::0.0
important consideration::0.0
gettext::0.0
solutions proposed::0.0
field::0.0
valid::0.0
bool::0.0
details::0.0
test::0.0
putint::0.0
draw::0.0
elements::0.0
fifo import::0.0
update::0.0
important::0.0
steps::0.0
variable::0.0
structure::0.0
tricky::0.0
insertions::0.0
longer::0.0
calls::0.0
requires::0.0
type module::0.0
logical::0.0
text::0.0
push::0.0
starting::0.0
