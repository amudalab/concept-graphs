java programming language was originally developed by sun microsystems which was initiated by james gosling and released in 1995 as core component of sun microsystems ’ java platform  java 1.0  j2se    as of december 2008  the latest release of the java standard edition is 6  j2se   with the advancement of java and its widespread popularity  multiple configurations were built to suite various types of platforms ex  j2ee for enterprise applications  j2me for mobile applications sun microsystems has renamed the new j2 versions as java se  java ee and java me  respectively java is guaranteed to be write once  run anywhere java is  • object oriented  in java  everything is an object java can be easily extended since it is based on the object model • platform independent  unlike many other programming languages including c and c + +  when java is compiled  it is not compiled into platform specific machine  rather into platform independent byte code this byte code is distributed over the web and interpreted by virtual machine  jvm  on whichever platform it is being run • simple  java is designed to be easy to learn if you understand the basic concept of oop,java would be easy to master • secure  with java 's secure feature  it enables to develop virus-free  tamper-free systems authentication techniques are based on public-key encryption • architectural-neutral  java compiler generates an architecture-neutral object file format  which makes the compiled code to be executable on many processors  with the presence of java runtime system • portable  being architectural-neutral and having no implementation dependent aspects of the specification makes java portable compiler injava is written in ansi c with a clean portability boundary which is a posix subset • robust  java makes an effort to eliminate error prone situations by emphasizing mainly on compile time error checking and runtime checking chapter 1 • multithreaded  with java 's multithreaded feature  it is possible to write programs that can do many tasks simultaneously this design feature allows developers to construct smoothly running interactive applications • interpreted  java byte code is translated on the fly to native machine instructions and is not stored anywhere the development process is more rapid and analytical since the linking is an incremental and lightweight process • high performance  with the use of just-in-time compilers  java enables high performance • distributed  java is designed for the distributed environment of the internet • dynamic  java is considered to be more dynamic than c or c + + since it is designed to adapt to an evolving environment java programs can carry extensive amount of run-time information that can be used to verify and resolve accesses to objects on run-time history of java  james gosling initiated the java language project in june 1991 for use in one of his many set-top box projects the language  initially called oak after an oak tree that stood outside gosling 's office  also went by the name green and ended up later being renamed as java  from a list of random words sun released the first public implementation as java 1.0 in 1995 it promised write once  run anywhere  wora   providing no-cost run-times on popular platforms on 13 november 2006  sun released much of java as free and open source software under the terms of the gnu general public license  gpl   on 8 may 2007  sun finished the process  making all of java 's core code free and open-source  aside from a small portion of code to which sun did not hold the copyright tools you will need  for performing the examples discussed in this tutorial  you will need a pentium 200-mhz computer with a minimum of 64 mb of ram  128 mb of ram recommended   you also will need the following softwares  • linux 7.1 or windows 95/98/2000/xp operating system • java jdk 5 • microsoft notepad or any other text editor this tutorial will provide the necessary skills to create gui  networking  and web applications using java next chapter will guide you to where you can obtain java and its documentation finally  it instructs you on how to install java and prepare an environment to develop java applications java environment setup before we proceed further  it is important that we set up the java environment correctly this section guides you on how to download and set up java on your machine please follow the following steps to set up the environment java se is freely available from the link download java so you download a version based on your operating system follow the instructions to download java and run the .exe to install java on your machine once you installed java on your machine  you would need to set environment variables to point to correct installation directories  setting up the path for windows 2000/xp  assuming you have installed java in c  \ program files \ java \ jdk directory  • right-click on 'my computer ' and select 'properties' • click on the 'environment variables ' button under the 'advanced ' tab • now  alter the 'path ' variable so that it also contains the path to the java executable example  if the path is currently set to 'c  \ windows \ system32 '  then change your path to read 'c  \ windows \ system32 ; c  \ program files \ java \ jdk \ bin' setting up the path for windows 95/98/me  assuming you have installed java in c  \ program files \ java \ jdk directory  • edit the 'c  \ autoexec.bat ' file and add the following line at the end  'set path = % path % ; c  \ program files \ java \ jdk \ bin ' setting up the path for linux  unix  solaris  freebsd  environment variable path should be set to point to where the java binaries have been installed refer to your shell documentation if you have trouble doing this example  if you use bash as your shell  then you would add the following line to the end of your '.bashrc  export path = /path/to/java  $ path ' chapter 2 popular java editors  to write your java programs  you will need a text editor there are even more sophisticated ides available in the market but for now  you can consider one of the following  • notepad  on windows machine  you can use any simple text editor like notepad  recommended for this tutorial   textpad • netbeans  is a java ide that is open-source and free which can be downloaded fromhttp  //www.netbeans.org/index.html • eclipse  is also a java ide developed by the eclipse open-source community and can be downloaded from http  //www.eclipse.org/ next chapter will teach you how to write and run your first java program and some of the important basic syntaxes in java needed for developing applications java basic syntax when we consider a java program  it can be defined as a collection of objects that communicate via invoking each other 's methods let us now briefly look into what do class  object  methods and instance variables mean • object  objects have states and behaviors example  a dog has states-color  name  breed as well as behaviors -wagging  barking  eating an object is an instance of a class • class  a class can be defined as a template/blue print that describes the behaviors/states that object of its type support • methods  a method is basically a behavior a class can contain many methods it is in methods where the logics are written  data is manipulated and all the actions are executed • instance variables  each object has its unique set of instance variables an object 's state is created by the values assigned to these instance variables first java program  let us look at a simple code that would print the words hello world public class myfirstjavaprogram  / * this is my first java program * this will print 'hello world ' as the output * / public static void main  string   args   system.out.println  " hello world "  ; // prints hello world   let 's look at how to save the file  compile and run the program please follow the steps given below  • open notepad and add the code as above • save the file as  myfirstjavaprogram.java • open a command prompt window and go o the directory where you saved the class assume it 's c  \  • type ' javac myfirstjavaprogram.java ' and press enter to compile your code if there are no errors in your code  the command prompt will take you to the next line  assumption  the path variable is set   chapter 3 • now  type ' java myfirstjavaprogram ' to run your program • you will be able to see ' hello world ' printed on the window c  > javac myfirstjavaprogram.java c  > java myfirstjavaprogram helloworld basic syntax  about java programs  it is very important to keep in mind the following points • case sensitivity  java is case sensitive  which means identifier hello and hello would have different meaning in java • class names  for all class names  the first letter should be in upper case if several words are used to form a name of the class  each inner word 's first letter should be in upper case example class myfirstjavaclass • method names  all method names should start with a lower case letter if several words are used to form the name of the method  then each inner word 's first letter should be in upper case example public void mymethodname   • program file name  name of the program file should exactly match the class name when saving the file  you should save it using the class name  remember java is case sensitive  and append '.java ' to the end of the name  if the file name and the class name do not match your program will not compile   example  assume 'myfirstjavaprogram ' is the class name  then the file should be saved as'myfirstjavaprogram.java ' • public static void main  string args     java program processing starts from the main   method  which is a mandatory part of every java program java identifiers  all java components require names names used for classes  variables and methods are called identifiers in java  there are several points to remember about identifiers they are as follows  • all identifiers should begin with a letter  a to z or a to z   currency character  $  or an underscore  _   • after the first character  identifiers can have any combination of characters • a keyword can not be used as an identifier • most importantly identifiers are case sensitive • examples of legal identifiers  age  $ salary  _value  __1_value • examples of illegal identifiers  123abc  -salary java modifiers  like other languages  it is possible to modify classes  methods  etc  by using modifiers there are two categories of modifiers  • access modifiers  default  public  protected  private • non-access modifiers  final  abstract  strictfp we will be looking into more details about modifiers in the next section java variables  we would see following type of variables in java  • local variables • class variables  static variables  • instance variables  non-static variables  java arrays  arrays are objects that store multiple variables of the same type however  an array itself is an object on the heap we will look into how to declare  construct and initialize in the upcoming chapters java enums  enums were introduced in java 5.0 enums restrict a variable to have one of only a few predefined values the values in this enumerated list are called enums with the use of enums  it is possible to reduce the number of bugs in your code for example  if we consider an application for a fresh juice shop  it would be possible to restrict the glass size to small  medium and large this would make sure that it would not allow anyone to order any size other than the small  medium or large example  class freshjuice  enum freshjuicesize  small  meduim  large  freshjuicesize size ;  public class freshjuicetest  public static void main  string args     freshjuice juice = new freshjuice   ; juice.size = freshjuice.freshjuicesize.meduim ;   note  enums can be declared as their own or inside a class methods  variables  constructors can be defined inside enums as well java keywords  the following list shows the reserved words in java these reserved words may not be used as constant or variable or any other identifier names abstract assert boolean break byte case catch char class const continue default do double else enum extends final finally float for goto if implements import instanceof int interface long native new package private protected public return short static strictfp super switch synchronized this throw throws transient try void volatile while comments in java java supports single-line and multi-line comments very similar to c and c + +  all characters available inside any comment are ignored by java compiler public class myfirstjavaprogram  / * this is my first java program * this will print 'hello world ' as the output * this is an example of multi-line comments * / public static void main  string   args   // this is an example of single line comment / * this is also an example of single line comment * / system.out.println  " hello world "  ;   using blank lines  a line containing only whitespace  possibly with a comment  is known as a blank line  and java totally ignores it inheritance  java classes can be derived from classes basically  if you need to create a new class and here is already a class that has some of the code you require  then it is possible to derive your new class from the already existing code this concept allows you to reuse the fields and methods of the existing class without having to rewrite the code in a new class in this scenario  the existing class is called the superclass and the derived class is called the subclass interfaces  in java language  an interface can be defined as a contract between objects on how to communicate with each other interfaces play a vital role when it comes to the concept of inheritance an interface defines the methods  a deriving class  subclass  should use but the implementation of the methods is totally up to the subclass the next section explains about objects and classes in java programming at the end of the session  you will be able to get a clear picture as to what are objects and what are classes in java java object & classes java is an object-oriented language as a language that has the object oriented feature  java supports the following fundamental concepts  • polymorphism • inheritance • encapsulation • abstraction • classes • objects • instance • method • message parsing in this chapter  we will look into the concepts classes and objects • object  objects have states and behaviors example  a dog has states-color  name  breed as well as behaviors -wagging  barking  eating an object is an instance of a class • class  a class can be defined as a template/blue print that describes the behaviors/states that object of its type support objects in java  let us now look deep into what are objects if we consider the real-world we can find many objects around us  cars  dogs  humans  etc all these objects have a state and behavior if we consider a dog  then its state is  name  breed  color  and the behavior is  barking  wagging  running if you compare the software object with a real world object  they have very similar characteristics software objects also have a state and behavior a software object 's state is stored in fields and behavior is shown via methods so in software development  methods operate on the internal state of an object and the object-to-object communication is done via methods chapter 4 classes in java  a class is a blue print from which individual objects are created a sample of a class is given below  public class dog  string breed ; int age ; string color ; void barking     void hungry     void sleeping      a class can contain any of the following variable types • local variables  variables defined inside methods  constructors or blocks are called local variables the variable will be declared and initialized within the method and the variable will be destroyed when the method has completed • instance variables  instance variables are variables within a class but outside any method these variables are instantiated when the class is loaded instance variables can be accessed from inside any method  constructor or blocks of that particular class • class variables  class variables are variables declared within a class  outside any method  with the static keyword a class can have any number of methods to access the value of various kinds of methods in the above example  barking    hungry   and sleeping   are methods below mentioned are some of the important topics that need to be discussed when looking into classes of the java language constructors  when discussing about classes  one of the most important subtopic would be constructors every class has a constructor if we do not explicitly write a constructor for a class the java compiler builds a default constructor for that class each time a new object is created  at least one constructor will be invoked the main rule of constructors is that they should have the same name as the class a class can have more than one constructor example of a constructor is given below  public class puppy  public puppy     public puppy  string name   // this constructor has one parameter  name   java also supports singleton classes where you would be able to create only one instance of a class singleton classes the singleton 's purpose is to control object creation  limiting the number of objects to one only since there is only one singleton instance  any instance fields of a singleton will occur only once per class  just like static fields singletons often control access to resources such as database connections or sockets for example  if you have a license for only one connection for your database or your jdbc driver has trouble with multithreading  the singleton makes sure that only one connection is made or that only one thread can access the connection at a time implementing singletons  example 1  the easiest implementation consists of a private constructor and a field to hold its result  and a static accessor method with a name like getinstance    the private field can be assigned from within a static initializer block or  more simply  using an initializer the getinstance   method  which must be public  then simply returns this instance  // file name  singleton.java public class singleton  private static singleton singleton = new singleton   ; / * a private constructor prevents any other * class from instantiating * / private singleton     / * static 'instance ' method * / public static singleton getinstance    return singleton ;  / * other methods protected by singleton-ness * / protected static void demomethod    system.out.println  " demomethod for singleton "  ;   // file name  singletondemo.java public lasssingletondemo  public staticvoid main  string   args   singleton tmp = singleton.getinstance   ; tmp.demomethod   ;   this would produce the following result  demomethod for singleton example 2  following implementation shows a classic singleton design pattern  public class classicsingleton  private static classicsingleton instance = null ; protected classicsingleton    // exists only to defeat instantiation  public static classicsingleton getinstance    if  instance = = null   instance = new classicsingleton   ;  return instance ;   the classicsingleton class maintains a static reference to the lone singleton instance and returns that reference from the static getinstance   method here classicsingleton class employs a technique known as lazy instantiation to create the singleton ; as a result  the singleton instance is not created until the getinstance   method is called for the first time this technique ensures that singleton instances are created only when needed creating an object  as mentioned previously  a class provides the blueprints for objects so basically an object is created from a class in java the new keyword is used to create new objects there are three steps when creating an object from a class  • declaration  a variable declaration with a variable name with an object type • instantiation  the 'new ' keyword is used to create the object • initialization  the 'new ' keyword is followed by a call to a constructor this call initializes the new object example of creating an object is given below  public class puppy  public puppy  string name   // this constructor has one parameter  name system.out.println  " passed name is  " + name  ;  public static void main  string   args   // following statement would create an object mypuppy puppy mypuppy = new puppy  " tommy "  ;   if we compile and run the above program  then it would produce the following result  passednameis  tommy accessing instance variables and methods  instance variables and methods are accessed via created objects to access an instance variable the fully qualified path should be as follows  / * first create an object * / objectreference = new constructor   ; / * now call a variable as follows * / objectreference.variablename ; / * now you can call a class method as follows * / objectreference.methodname   ; example  this example explains how to access instance variables and methods of a class  public class puppy  int puppyage ; public puppy  string name   // this constructor has one parameter  name system.out.println  " passed name is  " + name  ;  public void setage  int age   puppyage = age ;  public int getage    system.out.println  " puppy 's age is  " + puppyage  ; return puppyage ;  public static void main  string   args   / * object creation * / puppy mypuppy = newpuppy  " tommy "  ; / * call class method to set puppy 's age * / mypuppy.setage  2  ; / * call another class method to get puppy 's age * / mypuppy.getage   ; / * you can access instance variable as follows as well * / system.out.println  " variable value  " + mypuppy.puppyage  ;   if we compile and run the above program  then it would produce the following result  passedname is  tommy puppy 's age is  2 variable value  2 source file declaration rules  as the last part of this section  let ’ s now look into the source file declaration rules these rules are essential when declaring classes  import statements and package statements in a source file • there can be only one public class per source file • a source file can have multiple non public classes simply easy learning • the public class name should be the name of the source file as well which should be appended by .java at the end for example  the class name is  public class employee   then the source file should be as employee.java • if the class is defined inside a package  then the package statement should be the first statement in the source file • if import statements are present then they must be written between the package statement and the class declaration if there are no package statements then the import statement should be the first line in the source file • import and package statements will imply to all the classes present in the source file it is not possible to declare different import and/or package statements to different classes in the source file classes have several access levels and there are different types of classes ; abstract classes  final classes  etc i will be explaining about all these in the access modifiers chapter apart from the above mentioned types of classes  java also has some special classes called inner classes and anonymous classes java package  in simple  it is a way of categorizing the classes and interfaces when developing applications in java  hundreds of classes and interfaces will be written  therefore categorizing these classes is a must as well as makes life much easier import statements  in java if a fully qualified name  which includes the package and the class name  is given  then the compiler can easily locate the source code or classes import statement is a way of giving the proper location for the compiler to find that particular class for example,the following line would ask compiler to load all the classes available in directory java_installation/java/io import java.io * ; a simple case study  for our case study  we will be creating two classes they are employee and employeetest first open notepad and add the following code remember this is the employee class and the class is a public class now  save this source file with the name employee.java the employee class has four instance variables name  age  designation and salary the class has one explicitly defined constructor  which takes a parameter import java.io * ; public class employee  string name ; int age ; string designation ; double salary ; // this is the constructor of the class employee public employee  string name   this.name = name ;  // assign the age of the employee to the variable age public void empage  int empage   age = empage ;  / * assign the designation to the variable designation * / public void empdesignation  string empdesig   designation = empdesig ;  / * assign the salary to the variable salary * / public void empsalary  double empsalary   salary = empsalary ;  / * print the employee details * / public void printemployee    system.out.println  " name  " + name  ; system.out.println  " age  " + age  ; system.out.println  " designation  " + designation  ; system.out.println  " salary  " + salary  ;   as mentioned previously in this tutorial  processing starts from the main method therefore in-order for us to run this employee class there should be main method and objects should be created we will be creating a separate class for these tasks given below is the employeetest class  which creates two instances of the class employee and invokes the methods for each object to assign values for each variable save the following code in employeetest.java file import java.io * ; publicclassemployeetest  publicstaticvoid main  string args     / * create two objects using constructor * / employee empone = newemployee  " james smith "  ; employee emptwo = newemployee  " mary anne "  ; // invoking methods for each object created empone.empage  26  ; empone.empdesignation  " senior software engineer "  ; empone.empsalary  1000  ; empone.printemployee   ; emptwo.empage  21  ; emptwo.empdesignation  " software engineer "  ; emptwo.empsalary  500  ; emptwo.printemployee   ;   now  compile both the classes and then run employeetest to see the result as follows  c  > javac employee.java c  > vi employeetest.java c  > javac employeetest.java c  > java employeetest name  jamessmith age  26 designation  seniorsoftwareengineer salary  1000.0 name  maryanne age  21 designation  softwareengineer salary  500.0 next session will discuss basic data types in java and how they can be used when developing java applications java basic data types variables are nothing but reserved memory locations to store values this means that when you create a variable you reserve some space in memory based on the data type of a variable  the operating system allocates memory and decides what can be stored in the reserved memory therefore  by assigning different data types to variables  you can store integers  decimals  or characters in these variables there are two data types available in java  • primitive data types • reference/object data types primitive data types  there are eight primitive data types supported by java primitive data types are predefined by the language and named by a keyword let us now look into detail about the eight primitive data types byte  • byte data type is an 8-bit signed two 's complement integer • minimum value is -128  -2 ^ 7  • maximum value is 127  inclusive   2 ^ 7 -1  • default value is 0 • byte data type is used to save space in large arrays  mainly in place of integers  since a byte is four times smaller than an int • example  byte a = 100  byte b = -50 short  • short data type is a 16-bit signed two 's complement integer chapter 5 • minimum value is -32,768  -2 ^ 15  • maximum value is 32,767  inclusive   2 ^ 15 -1  • short data type can also be used to save memory as byte data type a short is 2 times smaller than an int • default value is 0 • example  short s = 10000  short r = -20000 int  • int data type is a 32-bit signed two 's complement integer • minimum value is  2,147,483,648  -2 ^ 31  • maximum value is 2,147,483,647  inclusive    2 ^ 31 -1  • int is generally used as the default data type for integral values unless there is a concern about memory • the default value is 0 • example  int a = 100000  int b = -200000 long  • long data type is a 64-bit signed two 's complement integer • minimum value is -9,223,372,036,854,775,808  -2 ^ 63  • maximum value is 9,223,372,036,854,775,807  inclusive    2 ^ 63 -1  • this type is used when a wider range than int is needed • default value is 0l • example  int a = 100000l  int b = -200000l float  • float data type is a single-precision 32-bit ieee 754 floating point • float is mainly used to save memory in large arrays of floating point numbers • default value is 0.0f • float data type is never used for precise values such as currency • example  float f1 = 234.5f double  • double data type is a double-precision 64-bit ieee 754 floating point • this data type is generally used as the default data type for decimal values  generally the default choice • double data type should never be used for precise values such as currency • default value is 0.0d • example  double d1 = 123.4 boolean  • boolean data type represents one bit of information • there are only two possible values  true and false • this data type is used for simple flags that track true/false conditions • default value is false • example  boolean one = true char  • char data type is a single 16-bit unicode character • minimum value is ' \ u0000 '  or 0   • maximum value is ' \ uffff '  or 65,535 inclusive   • char data type is used to store any character • example  char lettera = 'a ' reference data types  • reference variables are created using defined constructors of the classes they are used to access objects these variables are declared to be of a specific type that can not be changed for example  employee  puppy  etc • class objects and various types of array variables come under reference data type • default value of any reference variable is null • a reference variable can be used to refer to any object of the declared type or any compatible type • example  animal animal = new animal  " giraffe "  ; 