python overview python is a high-level  interpreted  interactive and object-oriented scripting language python was designed to be highly readable which uses english keywords frequently where as other languages use punctuation and it has fewer syntactical constructions than other languages python is interpreted  this means that it is processed at runtime by the interpreter and you do not need to compile your program before executing it this is similar to perl and php python is interactive  this means that you can actually sit at a python prompt and interact with the interpreter directly to write your programs python is object-oriented  this means that python supports object-oriented style or technique of programming that encapsulates code within objects python is beginner 's language  python is a great language for the beginner programmers and supports the development of a wide range of applications from simple text processing to www browsers to games history of python  python was developed by guido van rossum in the late eighties and early nineties at the national research institute for mathematics and computer science in the netherlands python is derived from many other languages  including abc  modula-3  c  c + +  algol-68  smalltalk and unix shell and other scripting languages python is copyrighted like perl  python source code is now available under the gnu general public license  gpl   python is now maintained by a core development team at the institute  although guido van rossum still holds a vital role in directing its progress python features  python 's feature highlights include  -to-learn  python has relatively few keywords  simple structure  and a clearly defined syntax this allows the student to pick up the language in a relatively short period of time -to-read  python code is much more clearly defined and visible to the eyes -to-maintain  python 's success is that its source code is fairly -to-maintain a broad standard library  one of python 's greatest strengths is the bulk of the library is very portable and cross-platform compatible on unix  windows and macintosh chapter 1 interactive mode  support for an interactive mode in which you can enter results from a terminal right to the language  allowing interactive testing and debugging of snippets of code portable  python can run on a wide variety of hardware platforms and has the same interface on all platforms extendable  you can add low-level modules to the python interpreter these modules enable programmers to add to or customize their tools to be more efficient databases  python provides interfaces to all major commercial databases gui programming  python supports gui applications that can be created and ported to many system calls  libraries and windows systems  such as windows mfc  macintosh and the x window system of unix scalable  python provides a better structure and support for large programs than shell scripting apart from the above-mentioned features  python has a big list of good features  few are listed below  support for functional and structured programming methods as well as oop it can be used as a scripting language or can be compiled to byte-code for building large applications very high-level dynamic data types and supports dynamic type checking supports automatic garbage collection it can be easily integrated with c  c + +  com  activex  corba and java python environment before we start writing our python programs  let 's understand how to set up our python environment python is available on a wide variety of platforms including linux and mac os x try opening a terminal window and type " python " to find out if its already installed and which version you have if it is installed unix  solaris  linux  freebsd  aix  hp/ux  sunos  irix  etc  win 9x/nt/2000 macintosh  intel  ppc  68k  os/2 dos  multiple versions  palmos nokia mobile phones windows ce acorn/risc os beos amiga vms/openvms qnx vxworks psion python has also been ported to the java and .net virtual machines chapter 2 getting python  the most up-to-date and current source code  binaries  documentation  news  etc is available at the official website of python  python official website  http  //www.python.org/ you can download python documentation from the following site the documentation is available in html  pdf and postscript formats python documentation website  www.python.org/doc/ install python  python distribution is available for a wide variety of platforms you need to download only the binary code applicable for your platform and install python if the binary code for your platform is not available  you need a c compiler to compile the source code manually compiling the source code offers more flexibility in terms of choice of features that you require in your installation here is a quick overview of installing python on various platforms  unix & linux installation  here are the simple steps to install python on unix/linux machine open a web browser and go to http  //www.python.org/download/ follow the link to download zipped source code available for unix/linux download and extract files editing the modules/setup file if you want to customize some options run ./configure script make make install this will install python in a standard location /usr/local/bin and its libraries are installed in/usr/local/lib/pythonxx where xx is the version of python that you are using windows installation  here are the steps to install python on windows machine open a web browser and go to http  //www.python.org/download/ follow the link for the windows installer python-xyz.msi file where xyz is the version you are going to install to use this installer python-xyz.msi  the windows system must support microsoft installer 2.0 just save the installer file to your local machine and then run it to find out if your machine supports msi run the downloaded file by double-clicking it in windows explorer this brings up the python install wizard  which is really to use just accept the default settings  wait until the install is finished  and you 're ready to roll ! macintosh installation  recent macs come with python installed  but it may be several years out of date see http  //www.python.org/download/mac/ for instructions on getting the current version along with extra tools to support development on the mac for older mac os 's before mac os x 10.3  released in 2003   macpython is available " jack jansen maintains it and you can have full access to the entire documentation at his web site  jack jansen website  http  //www.cwi.nl/ ~ jack/macpython.html just go to this link and you will find complete installation detail for mac os installation setting up path  programs and other executable files can live in many directories  so operating systems provide a search path that lists the directories that the os searches for executables the path is stored in an environment variable  which is a named string maintained by the operating system these variables contain information available to the command shell and other programs the path variable is named path in unix or path in windows  unix is case-sensitive ; windows is not   in mac os  the installer handles the path details to invoke the python interpreter from any particular directory  you must add the python directory to your path setting path at unix/linux  to add the python directory to the path for a particular session in unix  in the csh shell  type setenv path " $ path  /usr/local/bin/python " and press enter in the bash shell  linux   type export path = " $ path  /usr/local/bin/python " and press enter in the sh or ksh shell  type path = " $ path  /usr/local/bin/python " and press enter note  /usr/local/bin/python is the path of the python directory setting path at windows  to add the python directory to the path for a particular session in windows  at the command prompt  type path % path % ; c  \ python and press enter note  c  \ python is the path of the python directory python environment variables  here are important environment variables  which can be recognized by python  variable description pythonpath has a role similar to path this variable tells the python interpreter where to locate the module files you import into a program pythonpath should include the python source library directory and the directories containing your python source code pythonpath is sometimes preset by the python installer pythonstartup contains the path of an initialization file containing python source code that is executed every time you start the interpreter  similar to the unix .profile or .login file   this file  often named .pythonrc.py in unix  usually contains commands that load utilities or modify pythonpath pythoncaseok used in windows to instruct python to find the first case-insensitive match in an import statement set this variable to any value to activate it pythonhome an alternative module search path it 's usually embedded in the pythonstartup or pythonpath directories to make switching module libraries  running python  there are three different ways to start python   1  interactive interpreter  you can enter python and start coding right away in the interactive interpreter by starting it from the command line you can do this from unix  dos or any other system  which provides you a command-line interpreter or shell window $ python # unix/linux or python % # unix/linux or c  > python # windows/dos here is the list of all the available command line options  option description -d provide debug output -o generate optimized bytecode  resulting in .pyo files  -s do not run import site to look for python paths on startup -v verbose output  detailed trace on import statements  -x disable class-based built-in exceptions  just use strings  ; obsolete starting with version 1.6 -c cmd run python script sent in as cmd string file run python script from given file  2  script from the command line  a python script can be executed at command line by invoking the interpreter on your application  as in the following  $ python script.py # unix/linux or python % script.py # unix/linux or c  > python script.py # windows/dos note  be sure the file permission mode allows execution  3  integrated development environment you can run python from a graphical user interface  gui  environment as well all you need is a gui application on your system that supports python unix  idle is the very first unix ide for python windows  pythonwin is the first windows interface for python and is an ide with a gui macintosh  the macintosh version of python along with the idle ide is available from the main website  downloadable as either macbinary or binhex 'd files before proceeding to next chapter  make sure your environment is properly set up and working perfectly fine if you are not able to set up the environment properly  then you can take help from your system admin all the examples given in subsequent chapters have been executed with python 2.4.3 version available on centos flavor of linux python basic syntax the python language has many similarities to perl  c and java however  there are some definite differences between the languages this chapter is designed to quickly get you up to speed on the syntax that is expected in python first python program  interactive mode programming  invoking the interpreter without passing a script file as a parameter brings up the following prompt  $ python python 2.4.3  # 1  nov 11 2010  13  34  43   gcc 4.1.2 20080704  red hat 4.1.2-48   on linux2 type " help "  " copyright "  " credits " or " license " for more information > > > type the following text to the right of the python prompt and press the enter key  > > > print " hello  python ! " ; if you are running new version of python  then you would need to use print statement with parenthesis like print  " hello  python ! "  ;  however at python version 2.4.3  this will produce following result  hello  python ! script mode programming  invoking the interpreter with a script parameter begins execution of the script and continues until the script is finished when the script is finished  the interpreter is no longer active let us write a simple python program in a script all python files will have extension .py so put the following source code in a test.py file print " hello  python ! " ; here  i assumed that you have python interpreter set in path variable now  try to run this program as follows  $ python test.py chapter 3 this will produce the following result  hello  python ! let 's try another way to execute a python script below is the modified test.py file  # ! /usr/bin/python print " hello  python ! " ; here  i assumed that you have python interpreter available in /usr/bin directory now  try to run this program as follows  $ chmod + x test.py # this is to make file executable $ ./test.py this will produce the following result  hello  python ! python identifiers  a python identifier is a name used to identify a variable  function  class  module or other object an identifier starts with a letter a to z or a to z or an underscore  _  followed by zero or more letters  underscores and digits  0 to 9   python does not allow punctuation characters such as @  $ and % within identifiers python is a case sensitive programming language thus  manpower and manpower are two different identifiers in python here are following identifier naming convention for python  class names start with an uppercase letter and all other identifiers with a lowercase letter starting an identifier with a single leading underscore indicates by convention that the identifier is meant to be private starting an identifier with two leading underscores indicates a strongly private identifier if the identifier also ends with two trailing underscores  the identifier is a language-defined special name reserved words  the following list shows the reserved words in python these reserved words may not be used as constant or variable or any other identifier names all the python keywords contain lowercase letters only and exec not assert finally or break for pass class from print continue global raise def if return del import try elif in while else is with except lambda yield lines and indentation  one of the first caveats programmers encounter when python is the fact that there are no braces to indicate blocks of code for class and function definitions or flow control blocks of code are denoted by line indentation  which is rigidly enforced the number of spaces in the indentation is variable  but all statements within the block must be indented the same amount both blocks in this example are fine  if true  print " true " else  print " false " however  the second block in this example will generate an error  if true  print " answer " print " true " else  print " answer " print " false " thus  in python all the continous lines indented with similar number of spaces would form a block following is the example having various statement blocks  note  do n't try to understand logic or different functions used just make sure you undertood various blocks even if they are without braces # ! /usr/bin/python import sys try  # open file stream file = open  file_name  " w "  except ioerror  print " there was an error writing to "  file_name sys.exit   print " enter ' "  file_finish  print " ' when finished " while file_text ! = file_finish  file_text = raw_input  " enter text  "  if file_text = = file_finish  # close the file file.close break file.write  file_text  file.write  " \ n "  file.close   file_name = raw_input  " enter filename  "  if len  file_name  = = 0  print " next time please enter something " sys.exit   try  file = open  file_name  " r "  except ioerror  print " there was an error reading file " sys.exit   file_text = file.read   file.close   print file_text multi line statements  statements in python typically end with a new line python does  however  allow the use of the line continuation character  \  to denote that the line should continue for example  total = item_one + \ item_two + \ item_three statements contained within the      or   brackets do not need to use the line continuation character for example  days =  'monday '  'tuesday '  'wednesday '  'thursday '  'friday '  quotation in python  python accepts single  '   double  "  and triple  '' ' or " " " '  quotes to denote string literals  as long as the same type of quote starts and ends the string the triple quotes can be used to span the string across multiple lines for example  all the following are legal  word = 'word ' sentence = " this is a sentence " paragraph = " " " this is a paragraph it is made up of multiple lines and sentences " " " comments in python  a hash sign  #  that is not inside a string literal begins a comment all characters after the # and up to the physical line end are part of the comment and the python interpreter ignores them # ! /usr/bin/python # first comment print " hello  python ! " ; # second comment this will produce the following result  hello  python ! a comment may be on the same line after a statement or expression  name = " madisetti " # this is again comment you can comment multiple lines as follows  # this is a comment # this is a comment  too # this is a comment  too # i said that already using blank lines  a line containing only whitespace  possibly with a comment  is known as a blank line and python totally ignores it in an interactive interpreter session  you must enter an empty physical line to terminate a multiline statement waiting for the user  the following line of the program displays the prompt  press the enter key to exit and waits for the user to press the enter key  # ! /usr/bin/python raw_input  " \ n \ npress the enter key to exit "  here  " \ n \ n " are being used to create two new lines before displaying the actual line once the user presses the key  the program ends this is a nice trick to keep a console window open until the user is done with an application multiple statements on a single line  the semicolon  ;  allows multiple statements on the single line given that neither statement starts a new code block here is a sample snip using the semicolon  import sys ; x = 'foo ' ; sys.stdout.write  x + ' \ n '  multiple statement groups as suites  a group of individual statements  which make a single code block are called suites in python compound or complex statements  such as if  while  def  and class  are those which require a header line and a suite header lines begin the statement  with the keyword  and terminate with a colon    and are followed by one or more lines  which make up the suite for example  if expression  suite elif expression  suite else  suite command line arguments  you may have seen  for instance  that many programs can be run so that they provide you with some basic information about how they should be run python enables you to do this with -h  $ python -h usage  python  option    -c cmd | -m mod | file |    arg   options and arguments  and corresponding environment variables   -c cmd  program passed in as string  terminates option list  -d  debug output from parser  also pythondebug = x  -e  ignore environment variables  such as pythonpath  -h  print this help message and exit  etc  you can also program your script in such a way that it should accept various options accessing command line arguments  python provides a getopt module that helps you parse command-line options and arguments $ python test.py arg1 arg2 arg3 the python sys module provides access to any command-line arguments via the sys.argv this serves two purpose  sys.argv is the list of command-line arguments len  sys.argv  is the number of command-line arguments here sys.argv  0  is the program ie script name example  consider the following script test.py  # ! /usr/bin/python import sys print 'number of arguments  '  len  sys.argv   'arguments ' print 'argument list  '  str  sys.argv  now run above script as follows  $ python test.py arg1 arg2 arg3 this will produce following result  number of arguments  4 arguments argument list   'test.py '  'arg1 '  'arg2 '  'arg3 '  note  as mentioned above  first argument is always script name and it is also being counted in number of arguments parsing command line arguments  python provided a getopt module that helps you parse command-line options and arguments this module provides two functions and an exception to enable command-line argument parsing this tutorial would discuss about one method and one exception  which are sufficient for your programming requirements getopt.getopt method  this method parses command-line options and parameter list following is simple syntax for this method  getopt.getopt  args  options   long_options   here is the detail of the parameters  args  this is the argument list to be parsed options  this is the string of option letters that the script wants to recognize  with options that require an argument should be followed by a colon     long_options  this is optional parameter and if specified  must be a list of strings with the names of the long options  which should be supported long options  which require an argument should be followed by an equal sign  ' = '   to accept only long options  options should be an empty string this method returns value consisting of two elements  the first is a list of  option  value  pairs the second is the list of program arguments left after the option list was stripped each option-and-value pair returned has the option as its first element  prefixed with a hyphen for short options  e.g  '-x '  or two hyphens for long options  e.g  '--long-option '   exception getopt.getopterror  this is raised when an unrecognized option is found in the argument list or when an option requiring an argument is given none the argument to the exception is a string indicating the cause of the error the attributes msg and opt give the error message and related option example consider we want to pass two file names through command line and we also want to give an option to check the usage of the script usage of the script is as follows  usage  test.py -i < inputfile > -o < outputfile > here is the following script to test.py  # ! /usr/bin/python import sys  getopt def main  argv   inputfile = ' ' outputfile = ' ' try  opts  args = getopt.getopt  argv  " hi  o  "   " ifile = "  " ofile = "   except getopt.getopterror  print 'test.py -i < inputfile > -o < outputfile > ' sys.exit  2  for opt  arg in opts  if opt = = '-h '  print 'test.py -i < inputfile > -o < outputfile > ' sys.exit   elif opt in  " -i "  " --ifile "   inputfile = arg elif opt in  " -o "  " --ofile "   outputfile = arg print 'input file is " '  inputfile print 'output file is " '  outputfile if __name__ = = " __main__ "  main  sys.argv  1    now  run above script as follows  $ test.py -h usage  test.py -i < inputfile > -o < outputfile > $ test.py -i bmp -o usage  test.py -i < inputfile > -o < outputfile > $ test.py -i inputfile input file is " inputfile output file is " python variable types variables are nothing but reserved memory locations to store values this means that when you create a variable you reserve some space in memory based on the data type of a variable  the interpreter allocates memory and decides what can be stored in the reserved memory therefore  by assigning different data types to variables  you can store integers  decimals or characters in these variables assigning values to variables  python variables do not have to be explicitly declared to reserve memory space the declaration happens automatically when you assign a value to a variable the equal sign  =  is used to assign values to variables the operand to the left of the = operator is the name of the variable and the operand to the right of the = operator is the value stored in the variable for example  # ! /usr/bin/python counter = 100 # an integer assignment miles = 1000.0 # a floating point name = " john " # a string print counter print miles print name here  100  1000.0 and " john " are the values assigned to counter  miles and name variables  respectively while running this program  this will produce the following result  100 1000.0 john multiple assignment  python allows you to assign a single value to several variables simultaneously for example  a = b = c = 1 chapter 4 here  an integer object is created with the value 1  and all three variables are assigned to the same memory location you can also assign multiple objects to multiple variables for example  a  b  c = 1  2  " john " here  two integer objects with values 1 and 2 are assigned to variables a and b  and one string object with the value " john " is assigned to the variable c standard data types  the data stored in memory can be of many types for example  a person 's age is stored as a numeric value and his or her address is stored as alphanumeric characters python has various standard types that are used to define the operations possible on them and the storage method for each of them python has five standard data types  numbers string list tuple dictionary python numbers  number data types store numeric values they are immutable data types which means that changing the value of a number data type results in a newly allocated object number objects are created when you assign a value to them for example  var1 = 1 var2 = 10 you can also delete the reference to a number object by using the del statement the syntax of the del statement is  del var1  ,var2  ,var3  ....,varn     you can delete a single object or multiple objects by using the del statement for example  del var del var_a  var_b python supports four different numerical types  int  signed integers  long  long integers  can also be represented in octal and hexadecimal   float  floating point real values  complex  complex numbers  examples  here are some examples of numbers  int long float complex 10 51924361l 0.0 3.14j 100 -0x19323l 15.20 45.j -786 0122l -21.9 9.322e-36j 080 0xdefabcecbdaecbfbael 32.3 + e18 .876j -0490 535633629843l -90 -.6545 + 0j -0x260 -052318172735l -32.54e100 3e + 26j 0x69 -4721885298529l 70.2-e12 4.53e-7j python allows you to use a lowercase l with long  but it is recommended that you use only an uppercase l to avoid confusion with the number 1 python displays long integers with an uppercase l a complex number consists of an ordered pair of real floating-point numbers denoted by a + bj  where a is the real part and b is the imaginary part of the complex number python strings  strings in python are identified as a contiguous set of characters in between quotation marks python allows for either pairs of single or double quotes subsets of strings can be taken using the slice operator    and     with indexes starting at 0 in the beginning of the string and working their way from -1 at the end the plus  +  sign is the string concatenation operator and the asterisk  *  is the repetition operator for example  # ! /usr/bin/python str = 'hello world ! ' print str # prints complete string print str  0  # prints first character of the string print str  2  5  # prints characters starting from 3rd to 5th print str  2   # prints string starting from 3rd character print str * 2 # prints string two times print str + " test " # prints concatenated string this will produce the following result  hello world ! h llo llo world ! hello world ! hello world ! hello world ! test python lists  lists are the most versatile of python 's compound data types a list contains items separated by commas and enclosed within square brackets      to some extent  lists are similar to arrays in c one difference between them is that all the items belonging to a list can be of different data type the values stored in a list can be accessed using the slice operator    and     with indexes starting at 0 in the beginning of the list and working their way to end -1 the plus  +  sign is the list concatenation operator  and the asterisk  *  is the repetition operator for example  # ! /usr/bin/python list =  'abcd '  786  2.23  'john '  70.2  tinylist =  123  'john '  print list # prints complete list print list  0  # prints first element of the list print list  1  3  # prints elements starting from 2nd till 3rd print list  2   # prints elements starting from 3rd element print tinylist * 2 # prints list two times print list + tinylist # prints concatenated lists this will produce the following result   'abcd '  786  2.23  'john '  70.200000000000003  abcd  786  2.23   2.23  'john '  70.200000000000003   123  'john '  123  'john '   'abcd '  786  2.23  'john '  70.200000000000003  123  'john '  python tuples  a tuple is another sequence data type that is similar to the list a tuple consists of a number of values separated by commas unlike lists  however  tuples are enclosed within parentheses the main differences between lists and tuples are  lists are enclosed in brackets     and their elements and size can be changed  while tuples are enclosed in parentheses     and can not be updated tuples can be thought of as read-only lists for example  # ! /usr/bin/python tuple =  'abcd '  786  2.23  'john '  70.2  tinytuple =  123  'john '  print tuple # prints complete list print tuple  0  # prints first element of the list print tuple  1  3  # prints elements starting from 2nd till 3rd print tuple  2   # prints elements starting from 3rd element print tinytuple * 2 # prints list two times print tuple + tinytuple # prints concatenated lists this will produce the following result   'abcd '  786  2.23  'john '  70.200000000000003  abcd  786  2.23   2.23  'john '  70.200000000000003   123  'john '  123  'john '   'abcd '  786  2.23  'john '  70.200000000000003  123  'john '  following is invalid with tuple  because we attempted to update a tuple  which is not allowed similar case is possible with lists  # ! /usr/bin/python tuple =  'abcd '  786  2.23  'john '  70.2  list =  'abcd '  786  2.23  'john '  70.2  tuple  2  = 1000 # invalid syntax with tuple list  2  = 1000 # valid syntax with list python dictionary  python 's dictionaries are kind of hash table type they work like associative arrays or hashes found in perl and consist of key-value pairs a dictionary key can be almost any python type  but are usually numbers or strings values  on the other hand  can be any arbitrary python object dictionaries are enclosed by curly braces     and values can be assigned and accessed using square braces      for example  # ! /usr/bin/python dict =   dict  'one '  = " this is one " dict  2  = " this is two " tinydict =  'name '  'john','code '  6734  'dept '  'sales '  print dict  'one '  # prints value for 'one ' key print dict  2  # prints value for 2 key print tinydict # prints complete dictionary print tinydict.keys   # prints all the keys print tinydict.values   # prints all the values this will produce the following result  this is one this is two  'dept '  'sales '  'code '  6734  'name '  'john '   'dept '  'code '  'name '   'sales '  6734  'john '  dictionaries have no concept of order among elements it is incorrect to say that the elements are " out of order " ; they are unordered data type conversion  sometimes  you may need to perform conversions between the built-in types to convert between types  you use the type name as a function there are several built-in functions to perform conversion from one data type to another these functions return a new object representing the converted value function description int  x  ,base   converts x to an integer base specifies the base if x is a string long  x  ,base   converts x to a long integer base specifies the base if x is a string float  x  converts x to a floating-point number complex  real  ,imag   creates a complex number str  x  converts object x to a string representation repr  x  converts object x to an expression string eval  str  evaluates a string and returns an object tuple  s  converts s to a tuple list  s  converts s to a list set  s  converts s to a set dict  d  creates a dictionary d must be a sequence of  key,value  tuples frozenset  s  converts s to a frozen set chr  x  converts an integer to a character unichr  x  converts an integer to a unicode character ord  x  converts a single character to its integer value hex  x  converts an integer to a hexadecimal string oct  x  converts an integer to an octal string python basic operators what is an operator simple answer can be given using expression 4 + 5 is equal to 9 here  4 and 5 are called operands and + is called operator python language supports the following types of operators arithmetic operators comparison  i.e  relational  operators assignment operators logical operators bitwise operators membership operators identity operators let 's have a look on all operators one by one python arithmetic operators  assume variable a holds 10 and variable b holds 20  then  operator description example + addition  adds values on either side of the operator a + b will give 30  subtraction  subtracts right hand operand from left hand operand a  b will give -10 * multiplication  multiplies values on either side of the operator a * b will give 200 chapter 5 / division  divides left hand operand by right hand operand b / a will give 2 % modulus  divides left hand operand by right hand operand and returns remainder b % a will give 0 * * exponent  performs exponential  power  calculation on operators a * * b will give 10 to the power 20 // floor division  the division of operands where the result is the quotient in which the digits after the decimal point are removed 9//2 is equal to 4 and 9.0//2.0 is equal to 4.0 example  try the following example to understand all the arithmetic operators available in python programming language  # ! /usr/bin/python a = 21 b = 10 c = 0 c = a + b print " line 1  value of c is "  c c = a  b print " line 2  value of c is "  c c = a * b print " line 3  value of c is "  c c = a / b print " line 4  value of c is "  c c = a % b print " line 5  value of c is "  c a = 2 b = 3 c = a * * b print " line 6  value of c is "  c a = 10 b = 5 c = a//b print " line 7  value of c is "  c when you execute the above program  it produces the following result  line 1  value of c is 31 line 2  value of c is 11 line 3  value of c is 210 line 4  value of c is 2 line 5  value of c is 1 line 6  value of c is 8 line 7  value of c is 2 python comparison operators  following table shows all the comparison operators supported by python language assume variable a holds 10 and variable b holds 20  then  operator description example = = checks if the value of two operands is equal or not  if yes then condition becomes true  a = = b  is not true ! = checks if the value of two operands is equal or not  if values are not equal then condition becomes true  a ! = b  is true < > checks if the value of two operands is equal or not  if values are not equal then condition becomes true  a < > b  is true this is similar to ! = operator > checks if the value of left operand is greater than the value of right operand  if yes then condition becomes true  a > b  is not true < checks if the value of left operand is less than the value of right operand  if yes then condition becomes true  a < b  is true > = checks if the value of left operand is greater than or equal to the value of right operand  if yes then condition becomes true  a > = b  is not true < = checks if the value of left operand is less than or equal to the value of right operand  if yes then condition becomes true  a < = b  is true example  try following example to understand all the comparison operators available in python programming language  # ! /usr/bin/python a = 21 b = 10 c = 0 if  a = = b   print " line 1  a is equal to b " else  print " line 1  a is not equal to b " if  a ! = b   print " line 2  a is not equal to b " else  print " line 2  a is equal to b " if  a < > b   print " line 3  a is not equal to b " else  print " line 3  a is equal to b " if  a < b   print " line 4  a is less than b " else  print " line 4  a is not less than b " if  a > b   print " line 5  a is greater than b " else  print " line 5  a is not greater than b " a = 5 ; b = 20 ; if  a < = b   print " line 6  a is either less than or equal to b " else  print " line 6  a is neither less than nor equal to b " if  b > = a   print " line 7  b is either greater than or equal to b " else  print " line 7  b is neither greater than nor equal to b " when you execute the above program  it produces the following result  line 1  a is not equal to b line 2  a is not equal to b line 3  a is not equal to b line 4  a is not less than b line 5  a is greater than b line 6  a is either less than or equal to b line 7  b is either greater than or equal to b python assignment operators  assume variable a holds 10 and variable b holds 20  then  operator description example = simple assignment operator  assigns values from right side operands to left side operand c = a + b will assign value of a + b into c + = add and assignment operator  it adds right operand to the left operand and assigns the result to left operand c + = a is equivalent to c = c + a  = subtract and assignment operator  it subtracts right operand from the left operand and assigns the result to left operand c  = a is equivalent to c = c  a * = multiply and assignment operator  it multiplies right operand with the left operand and assigns the result to left operand c * = a is equivalent to c = c * a / = divide and assignment operator  it divides left operand with the right operand and assigns the result to left operand c / = a is equivalent to c = c / a % = modulus and assignment operator  it takes modulus using two operands and assigns the result to left operand c % = a is equivalent to c = c % a * * = exponent and assignment operator  performs exponential  power  calculation on operators and assigns value to the left operand c * * = a is equivalent to c = c * * a // = floor dividion and assigns a value  performs floor division on operators and assigns value to the left operand c // = a is equivalent to c = c // a example  try following example to understand all the assignment operators available in python programming language  # ! /usr/bin/python a = 21 b = 10 c = 0 c = a + b print " line 1  value of c is "  c c + = a print " line 2  value of c is "  c c * = a print " line 3  value of c is "  c c / = a print " line 4  value of c is "  c c = 2 c % = a print " line 5  value of c is "  c c * * = a print " line 6  value of c is "  c c // = a print " line 7  value of c is "  c when you execute the above program  it produces the following result  line 1  value of c is 31 line 2  value of c is 52 line 3  value of c is 1092 line 4  value of c is 52 line 5  value of c is 2 line 6  value of c is 2097152 line 7  value of c is 99864 python bitwise operators  bitwise operator works on bits and perform bit-by-bit operation assume if a = 60 and b = 13  now in binary format they will be as follows  a = 0011 1100 b = 0000 1101  a&b = 0000 1100 a | b = 0011 1101 a ^ b = 0011 0001 ~ a = 1100 0011 there are following bitwise operators supported by python language  operator description example & binary and operator copies a bit to the result if it exists in both operands  a & b  will give 12 which is 0000 1100 | binary or operator copies a bit if it exists in either operand  a | b  will give 61 which is 0011 1101 ^ binary xor operator copies the bit if it is set in one operand but not both  a ^ b  will give 49 which is 0011 0001 ~ binary ones complement operator is unary and has the effect of 'flipping ' bits  ~ a  will give -60 which is 1100 0011 < < binary left shift operator the left operands value is moved left by the number of bits specified by the right operand a < < 2 will give 240 which is 1111 0000 > > binary right shift operator the left operands value is moved right by the number of bits specified by the right operand a > > 2 will give 15 which is 0000 1111 example  try following example to understand all the bitwise operators available in python programming language  # ! /usr/bin/python a = 60 # 60 = 0011 1100 b = 13 # 13 = 0000 1101 c = 0 c = a & b ; # 12 = 0000 1100 print " line 1  value of c is "  c c = a | b ; # 61 = 0011 1101 print " line 2  value of c is "  c c = a ^ b ; # 49 = 0011 0001 print " line 3  value of c is "  c c = ~ a ; # -61 = 1100 0011 print " line 4  value of c is "  c c = a < < 2 ; # 240 = 1111 0000 print " line 5  value of c is "  c c = a > > 2 ; # 15 = 0000 1111 print " line 6  value of c is "  c when you execute the above program  it produces the following result  line 1  value of c is 12 line 2  value of c is 61 line 3  value of c is 49 line 4  value of c is -61 line 5  value of c is 240 line 6  value of c is 15 python logical operators  there are following logical operators supported by python language assume variable a holds 10 and variable b holds 20  then  operator description example and called logical and operator if both the operands are true  then the condition becomes true  a and b  is true or called logical or operator if any of the two operands are non zero  then the condition becomes true  a or b  is true not called logical not operator used to reverse the logical state of its operand if a condition is true  then logical not operator will make it false not  a and b  is false example  try the following example to understand all the logical operators available in python programming language  # ! /usr/bin/python a = 10 b = 20 c = 0 if  a and b   print " line 1  a and b are true " else  print " line 1  either a is not true or b is not true " if  a or b   print " line 2  either a is true or b is true or both are true " else  print " line 2  neither a is true nor b is true " a = 0 if  a and b   print " line 3  a and b are true " else  print " line 3  either a is not true or b is not true " if  a or b   print " line 4  either a is true or b is true or both are true " else  print " line 4  neither a is true nor b is true " if not  a and b   print " line 5  either a is not true or b is not true " else  print " line 5  a and b are true " when you execute the above program  it produces the following result  line 1  a and b are true line 2  either a is true or b is true or both are true line 3  either a is not true or b is not true line 4  either a is true or b is true or both are true line 5  either a is not true or b is not true python membership operators  in addition to the operators discussed previously  python has membership operators  which test for membership in a sequence  such as strings  lists or tuples there are two membership operators explained below  operator description example in evaluates to true if it finds a variable in the specified sequence and false otherwise x in y  here in results in a 1 if x is a member of sequence y not in evaluates to true if it does not finds a variable in the specified sequence and false otherwise x not in y  here not in results in a 1 if x is not a member of sequence y example  try following example to understand all the membership operators available in python programming language  # ! /usr/bin/python a = 10 b = 20 list =  1  2  3  4  5  ; if  a in list   print " line 1  a is available in the given list " else  print " line 1  a is not available in the given list " if  b not in list   print " line 2  b is not available in the given list " else  print " line 2  b is available in the given list " a = 2 if  a in list   print " line 3  a is available in the given list " else  print " line 3  a is not available in the given list " when you execute the above program  it produces the following result  line 1  a is not available in the given list line 2  b is not available in the given list line 3  a is available in the given list python identity operators  identity operators compare the memory locations of two objects there are two identity operators explained below  operator description example is evaluates to true if the variables on either side of the operator point to the same object and false otherwise x is y  here is results in 1 if id  x  equals id  y   is not evaluates to false if the variables on either side of the operator point to the same object and true otherwise x is not y  here is not results in 1 if id  x  is not equal to id  y   example  try following example to understand all the identity operators available in python programming language  # ! /usr/bin/python a = 20 b = 20 if  a is b   print " line 1  a and b have same identity " else  print " line 1  a and b do not have same identity " if  id  a  = = id  b    print " line 2  a and b have same identity " else  print " line 2  a and b do not have same identity " b = 30 if  a is b   print " line 3  a and b have same identity " else  print " line 3  a and b do not have same identity " if  a is not b   print " line 4  a and b do not have same identity " else  print " line 4  a and b have same identity " when you execute the above program  it produces the following result  line 1  a and b have same identity line 2  a and b have same identity line 3  a and b do not have same identity line 4  a and b do not have same identity python operators precedence operator precedence determines the grouping of terms in an expression this affects how an expression is evaluated certain operators have higher precedence than others ; for example  the multiplication operator has higher precedence than the addition operator for example  x = 7 + 3 * 2 ; here  x is assigned 13  not 20 because operator * has higher precedence than +  so it first multiplies 3 * 2 and then adds into 7 here  operators with the highest precedence appear at the top of the table  those with the lowest appear at the bottom within an expression  higher precedence operators will be evaluated first the following table lists all operators from highest precedence to lowest  operator description * * exponentiation  raise to the power  ~ +  complement  unary plus and minus  method names for the last two are + @ and  @  * / % // multiply  divide  modulo and floor division +  addition and subtraction > > < < right and left bitwise shift & bitwise 'and ' ^ | bitwise exclusive ` or ' and regular ` or ' < = < > > = comparison operators < > = = ! = equality operators = % = / = // =  = + = * = * * = assignment operators is is not identity operators in not in membership operators not or and logical operators example  try following example to understand operator precedence available in python programming language  # ! /usr/bin/python a = 20 b = 10 c = 15 d = 5 e = 0 e =  a + b  * c / d #  30 * 15  / 5 print " value of  a + b  * c / d is "  e e =   a + b  * c  / d #  30 * 15  / 5 print " value of   a + b  * c  / d is "  e e =  a + b  *  c / d  ; #  30  *  15/5  print " value of  a + b  *  c / d  is "  e e = a +  b * c  / d ; # 20 +  150/5  print " value of a +  b * c  / d is "  e when you execute the above program  it produces the following result  value of  a + b  * c / d is 90 value of   a + b  * c  / d is 90 value of  a + b  *  c / d  is 90 value of a +  b * c  / d is 50 python decision making decision making structures require that the programmer specify one or more conditions to be evaluated or tested by the program  along with a statement or statements to be executed if the condition is determined to be true  and optionally  other statements to be executed if the condition is determined to be false following is the general form of a typical decision making structure found in most of the programming languages  python programming language assumes any non-zero and non-null values as true  and if it is either zero or null  then it is assumed as false value python programming language provides following types of decision making statements click the following links to check their detail statement description chapter 6 if statements an if statement consists of a boolean expression followed by one or more statements if...else statements an if statement can be followed by an optional else statement  which executes when the boolean expression is false nested if statements you can use one if or else if statement inside another if or else if statement  s   if statements the if statement of python is similar to that of other languages the if statement contains a logical expression using which data is compared and a decision is made based on the result of the comparison syntax  the syntax of an if statement in python programming language is  if expression  statement  s  if the boolean expression evaluates to true  then the block of statement  s  inside the if statement will be executed if boolean expression evaluates to false  then the first set of code after the end of the if statement  s  will be executed python programming language assumes any non-zero and non-null values as true  and if it is eitherzero or null  then it is assumed as false value flow diagram  example  # ! /usr/bin/python var1 = 100 if var1  print " 1  got a true expression value " print var1 var2 = 0 if var2  print " 2  got a true expression value " print var2 print " good bye ! " when the above code is executed  it produces the following result  1  got a true expression value 100 good bye ! if...else statements an else statement can be combined with an if statement an else statement contains the block of code that executes if the conditional expression in the if statement resolves to 0 or a false value the else statement is an optional statement and there could be at most only one else statement following if  syntax  the syntax of the if...else statement is  if expression  statement  s  else  statement  s  flow diagram  example  # ! /usr/bin/python var1 = 100 if var1  print " 1  got a true expression value " print var1 else  print " 1  got a false expression value " print var1 var2 = 0 if var2  print " 2  got a true expression value " print var2 else  print " 2  got a false expression value " print var2 print " good bye ! " when the above code is executed  it produces the following result  1  got a true expression value 100 2  got a false expression value 0 good bye ! the elif statement the elif statement allows you to check multiple expressions for truth value and execute a block of code as soon as one of the conditions evaluates to true like the else  the elif statement is optional however  unlike else  for which there can be at most one statement  there can be an arbitrary number of elif statements following an if the syntax of the if...elif statement is  if expression1  statement  s  elif expression2  statement  s  elif expression3  statement  s  else  statement  s  core python does not provide switch or case statements as in other languages  but we can use if..elif...statements to simulate switch case as follows  example  # ! /usr/bin/python var = 100 if var = = 200  print " 1  got a true expression value " print var elif var = = 150  print " 2  got a true expression value " print var2 elif var = = 100  print " 3  got a true expression value " print var else  print " 4  got a false expression value " print var print " good bye ! " when the above code is executed  it produces the following result  3  got a true expression value 100 good bye ! nested if statements there may be a situation when you want to check for another condition after a condition resolves to true in such a situation  you can use the nested if construct in a nested if construct  you can have an if...elif...else construct inside another if...elif...else construct syntax  the syntax of the nested if...elif...else construct may be  if expression1  statement  s  if expression2  statement  s  elif expression3  statement  s  else statement  s  elif expression4  statement  s  else  statement  s  example  # ! /usr/bin/python var = 100 if var < 200  print " expression value is less than 200 " if var = = 150  print " which is 150 " elif var = = 100  print " which is 100 " elif var = = 50  print " which is 50 " elif var < 50  print " expression value is less than 50 " else  print " could not find true expression " print " good bye ! " when the above code is executed  it produces the following result  expression value is less than 200 which is 100 good bye ! single statement suites  if the suite of an if clause consists only of a single line  it may go on the same line as the header statement here is an example of a one-line if clause  # ! /usr/bin/python var = 100 if  var = = 100   print " value of expression is 100 " print " good bye ! " when the above code is executed  it produces the following result  value of expression is 100 good bye ! python loops there may be a situation when you need to execute a block of code several number of times in general  statements are executed sequentially  the first statement in a function is executed first  followed by the second  and so on programming languages provide various control structures that allow for more complicated execution paths a loop statement allows us to execute a statement or group of statements multiple times and following is the general form of a loop statement in most of the programming languages  python programming language provides following types of loops to handle looping requirements click the following links to check their detail chapter 7 loop type description while loop repeats a statement or group of statements while a given condition is true it tests the condition before executing the loop body for loop executes a sequence of statements multiple times and abbreviates the code that manages the loop variable nested loops you can use one or more loop inside any another while  for or do..while loop while loop a while loop statement in python programming language repeatedly executes a target statement as long as a given condition is true syntax  the syntax of a while loop in python programming language is  while expression  statement  s  here  statement  s  may be a single statement or a block of statements the condition may be any expression  and true is any non-zero value the loop iterates while the condition is true when the condition becomes false  program control passes to the line immediately following the loop in python  all the statements indented by the same number of character spaces after a programming construct are considered to be part of a single block of code python uses indentation as its method of grouping statements flow diagram  here  key point of the while loop is that the loop might not ever run when the condition is tested and the result is false  the loop body will be skipped and the first statement after the while loop will be executed example  # ! /usr/bin/python count = 0 while  count < 9   print 'the count is  '  count count = count + 1 print " good bye ! " when the above code is executed  it produces the following result  the count is  0 the count is  1 the count is  2 the count is  3 the count is  4 the count is  5 the count is  6 the count is  7 the count is  8 good bye ! the block here  consisting of the print and increment statements  is executed repeatedly until count is no longer less than 9 with each iteration  the current value of the index count is displayed and then increased by 1 the infinite loop  a loop becomes infinite loop if a condition never becomes false you must use caution when using while loops because of the possibility that this condition never resolves to a false value this results in a loop that never ends such a loop is called an infinite loop an infinite loop might be useful in client/server programming where the server needs to run continuously so that client programs can communicate with it as and when required # ! /usr/bin/python var = 1 while var = = 1  # this constructs an infinite loop num = raw_input  " enter a number  "  print " you entered  "  num print " good bye ! " when the above code is executed  it produces the following result  enter a number  20 you entered  20 enter a number  29 you entered  29 enter a number  3 you entered  3 enter a number between  traceback  most recent call last   file " test.py "  line 5  in < module > num = raw_input  " enter a number  "  keyboardinterrupt above example will go in an infite loop and you would need to use ctrl + c to come out of the program the else statement used with loops python supports to have an else statement associated with a loop statement if the else statement is used with a for loop  the else statement is executed when the loop has exhausted iterating the list if the else statement is used with a while loop  the else statement is executed when the condition becomes false the following example illustrates the combination of an else statement with a while statement that prints a number as long as it is less than 5  otherwise else statement gets executed # ! /usr/bin/python count = 0 while count < 5  print count  " is less than 5 " count = count + 1 else  print count  " is not less than 5 " when the above code is executed  it produces the following result  0 is less than 5 1 is less than 5 2 is less than 5 3 is less than 5 4 is less than 5 5 is not less than 5 single statement suites  similar to the if statement syntax  if your while clause consists only of a single statement  it may be placed on the same line as the while header here is the syntax and example of a one-line while clause  # ! /usr/bin/python flag = 1 while  flag   print 'given flag is really true ! ' print " good bye ! " do not try above example because it will go into infinite loop and you will have to use ctrl + c keys to come out for loop the for loop in python has the ability to iterate over the items of any sequence  such as a list or a string syntax  the syntax of a for loop look is as follows  for iterating_var in sequence  statements  s  if a sequence contains an expression list  it is evaluated first then  the first item in the sequence is assigned to the iterating variable iterating_var next  the statements block is executed each item in the list is assigned to iterating_var  and the statement  s  block is executed until the entire sequence is exhausted flow diagram  example  # ! /usr/bin/python for letter in 'python '  # first example print 'current letter  '  letter fruits =  'banana '  'apple '  'mango '  for fruit in fruits  # second example print 'current fruit  '  fruit print " good bye ! " when the above code is executed  it produces the following result  current letter  p current letter  y current letter  t current letter  h current letter  o current letter  n current fruit  banana current fruit  apple current fruit  mango good bye ! iterating by sequence index  an alternative way of iterating through each item is by index offset into the sequence itself following is a simple example  # ! /usr/bin/python fruits =  'banana '  'apple '  'mango '  for index in range  len  fruits    print 'current fruit  '  fruits  index  print " good bye ! " when the above code is executed  it produces the following result  current fruit  banana current fruit  apple current fruit  mango good bye ! here  we took the assistance of the len   built-in function  which provides the total number of elements in the tuple as well as the range   built-in function to give us the actual sequence to iterate over the else statement used with loops python supports to have an else statement associated with a loop statement if the else statement is used with a for loop  the else statement is executed when the loop has exhausted iterating the list if the else statement is used with a while loop  the else statement is executed when the condition becomes false the following example illustrates the combination of an else statement with a for statement that searches for prime numbers from 10 through 20 # ! /usr/bin/python for num in range  10,20   # to iterate between 10 to 20 for i in range  2,num   # to iterate on the factors of the number if num % i = = 0  # to determine the first factor j = num/i # to calculate the second factor print ' % d equals % d * % d ' %  num,i,j  break # to move to the next number  the # first for else  # else part of the loop print num  'is a prime number ' when the above code is executed  it produces the following result  10 equals 2 * 5 11 is a prime number 12 equals 2 * 6 13 is a prime number 14 equals 2 * 7 15 equals 3 * 5 16 equals 2 * 8 17 is a prime number 18 equals 2 * 9 19 is a prime number nested loops python programming language allows to use one loop inside another loop following section shows few examples to illustrate the concept syntax  the syntax for a nested for loop statement in python is as follows  for iterating_var in sequence  for iterating_var in sequence  statements  s  statements  s  the syntax for a nested while loop statement in python programming language is as follows  while expression  while expression  statement  s  statement  s  a final note on loop nesting is that you can put any type of loop inside of any other type of loop for example  a for loop can be inside a while loop or vice versa example  the following program uses a nested for loop to find the prime numbers from 2 to 100  # ! /usr/bin/python i = 2 while  i < 100   j = 2 while  j < =  i/j    if not  i % j   break j = j + 1 if  j > i/j   print i  " is prime " i = i + 1 print " good bye ! " when the above code is executed  it produces the following result  2 is prime 3 is prime 5 is prime 7 is prime 11 is prime 13 is prime 17 is prime 19 is prime 23 is prime 29 is prime 31 is prime 37 is prime 41 is prime 43 is prime 47 is prime 53 is prime 59 is prime 61 is prime 67 is prime 71 is prime 73 is prime 79 is prime 83 is prime 89 is prime 97 is prime good bye ! loop control statements  loop control statements change execution from its normal sequence when execution leaves a scope  all automatic objects that were created in that scope are destroyed python supports the following control statements click the following links to check their detail control statement description break statement terminates the loop statement and transfers execution to the statement immediately following the loop continue statement causes the loop to skip the remainder of its body and immediately retest its condition prior to reiterating pass statement the pass statement in python is used when a statement is required syntactically but you do not want any command or code to execute break statement the break statement in python terminates the current loop and resumes execution at the next statement  just like the traditional break found in c the most common use for break is when some external condition is triggered requiring a hasty exit from a loop the break statement can be used in both while and for loops if you are using nested loops  i.e  one loop inside another loop   the break statement will stop the execution of the innermost loop and start executing the next line of code after the block syntax  the syntax for a break statement in python is as follows  break flow diagram  example  # ! /usr/bin/python for letter in 'python '  # first example if letter = = 'h '  break print 'current letter  '  letter var = 10 # second example while var > 0  print 'current variable value  '  var var = var -1 if var = = 5  break print " good bye ! " when the above code is executed  it produces the following result  current letter  p current letter  y current letter  t current variable value  10 current variable value  9 current variable value  8 current variable value  7 current variable value  6 good bye ! continue statement the continue statement in python returns the control to the beginning of the while loop the continue statement rejects all the remaining statements in the current iteration of the loop and moves the control back to the top of the loop the continue statement can be used in both while and for loops syntax  the syntax for a continue statement in python is as follows  continue flow diagram  example  # ! /usr/bin/python for letter in 'python '  # first example if letter = = 'h '  continue print 'current letter  '  letter var = 10 # second example while var > 0  var = var -1 if var = = 5  continue print 'current variable value  '  var print good bye ! when the above code is executed  it produces the following result  current letter  p current letter  y current letter  t current letter  o current letter  n current variable value  9 current variable value  8 current variable value  7 current variable value  6 current variable value  4 current variable value  3 current variable value  2 current variable value  1 current variable value  0 good bye ! pass statement the pass statement in python is used when a statement is required syntactically but you do not want any command or code to execute the pass statement is a null operation ; nothing happens when it executes the pass is also useful in places where your code will eventually go  but has not been written yet  e.g  in stubs for example   syntax  the syntax for a pass statement in python is as follows  pass example  # ! /usr/bin/python for letter in 'python '  if letter = = 'h '  pass print 'this is pass block ' print 'current letter  '  letter print " good bye ! " when the above code is executed  it produces the following result  current letter  p current letter  y current letter  t this is pass block current letter  h current letter  o current letter  n good bye ! python numbers number data types store numeric values they are immutable data types which mean that changing the value of a number data type results in a newly allocated object number objects are created when you assign a value to them for example  var1 = 1 var2 = 10 you can also delete the reference to a number object by using the del statement the syntax of the del statement is  del var1  ,var2  ,var3  ....,varn     you can delete a single object or multiple objects by using the del statement for example  del var del var_a  var_b python supports four different numerical types  int  signed integers   often called just integers or ints are positive or negative whole numbers with no decimal point long  long integers   or longs are integers of unlimited size  written like integers and followed by an uppercase or lowercase l float  floating point real values   or floats represent real numbers and are written with a decimal point dividing the integer and fractional parts floats may also be in scientific notation  with e or e indicating the power of 10  2.5e2 = 2.5 x 102 = 250   complex  complex numbers   are of the form a + bj  where a and b are floats and j  or j  represents the square root of -1  which is an imaginary number   a is the real part of the number  and b is the imaginary part complex numbers are not used much in python programming examples  here are some examples of numbers  int long float complex 10 51924361l 0.0 3.14j chapter 8 100 -0x19323l 15.20 45.j -786 0122l -21.9 9.322e-36j 080 0xdefabcecbdaecbfbael 32.3 + e18 .876j -0490 535633629843l -90 -.6545 + 0j -0x260 -052318172735l -32.54e100 3e + 26j 0x69 -4721885298529l 70.2-e12 4.53e-7j python allows you to use a lowercase l with long  but it is recommended that you use only an uppercase l to avoid confusion with the number 1 python displays long integers with an uppercase l a complex number consists of an ordered pair of real floating point numbers denoted by a + bj  where a is the real part and b is the imaginary part of the complex number number type conversion  python converts numbers internally in an expression containing mixed types to a common type for evaluation but sometimes  you 'll need to coerce a number explicitly from one type to another to satisfy the requirements of an operator or function parameter type int  x  to convert x to a plain integer type long  x  to convert x to a long integer type float  x  to convert x to a floating-point number type complex  x  to convert x to a complex number with real part x and imaginary part zero type complex  x  y  to convert x and y to a complex number with real part x and imaginary part y x and y are numeric expressions mathematical functions  python includes the following functions that perform mathematical calculations function returns  description  abs  x  the absolute value of x  the  positive  distance between x and zero ceil  x  the ceiling of x  the smallest integer not less than x cmp  x  y  -1 if x < y  0 if x = = y  or 1 if x > y exp  x  the exponential of x  ex fabs  x  the absolute value of x floor  x  the floor of x  the largest integer not greater than x log  x  the natural logarithm of x  for x > 0 log10  x  the base-10 logarithm of x for x > 0 max  x1  x2  the largest of its arguments  the value closest to positive infinity min  x1  x2  the smallest of its arguments  the value closest to negative infinity modf  x  the fractional and integer parts of x in a two-item tuple both parts have the same sign as x the integer part is returned as a float pow  x  y  the value of x * * y round  x  ,n   x rounded to n digits from the decimal point python rounds away from zero as a tiebreaker  round  0.5  is 1.0 and round  -0.5  is -1.0 sqrt  x  the square root of x for x > 0 these mathematical functions are explained here  abs  x  description the method abs   returns absolute value of x  the  positive  distance between x and zero syntax following is the syntax for abs   method  abs  x  parameters x  this is a numeric expression return value this method returns absolute value of x example the following example shows the usage of abs   method # ! /usr/bin/python print " abs  -45   "  abs  -45  print " abs  100.12   "  abs  100.12  print " abs  119l   "  abs  119l  let us compile and run the above program  this will produce the following result  abs  -45   45 abs  100.12   100.12 abs  119l   119 ceil  x  description the method ceil   returns ceiling value of x  the smallest integer not less than x syntax following is the syntax for ceil   method  import math math.ceil  x  note  this function is not accessible directly  so we need to import math module and then we need to call this function using math static object parameters x  this is a numeric expression return value this method returns smallest integer not less than x example the following example shows the usage of ceil   method # ! /usr/bin/python import math # this will import math module print " math.ceil  -45.17   "  math.ceil  -45.17  print " math.ceil  100.12   "  math.ceil  100.12  print " math.ceil  100.72   "  math.ceil  100.72  print " math.ceil  119l   "  math.ceil  119l  print " math.ceil  math.pi   "  math.ceil  math.pi  let us compile and run the above program  this will produce the following result  math.ceil  -45.17   -45.0 math.ceil  100.12   101.0 math.ceil  100.72   101.0 math.ceil  119l   119.0 math.ceil  math.pi   4.0 cmp  x  y  description the method cmp   returns the sign of the difference of two numbers  -1 if x < y  0 if x = = y  or 1 if x > y  syntax following is the syntax for cmp   method  cmp  x  y  parameters x  this is a numeric expression y  this is also a numeric expression return value this method returns -1 if x < y  returns 0 if x = = y and 1 if x > y example the following example shows the usage of cmp   method # ! /usr/bin/python print " cmp  80  100   "  cmp  80  100  print " cmp  180  100   "  cmp  180  100  print " cmp  -80  100   "  cmp  -80  100  print " cmp  80  -100   "  cmp  80  -100  let us compile and run the above program  this will produce the following result  cmp  80  100   -1 cmp  180  100   1 cmp  -80  100   -1 cmp  80  -100   1 exp  x  description the method exp   returns returns exponential of x  ex syntax following is the syntax for exp   method  import math math.exp  x  note  this function is not accessible directly  so we need to import math module and then we need to call this function using math static object parameters x  this is a numeric expression return value this method returns exponential of x  ex example the following example shows the usage of exp   method # ! /usr/bin/python import math # this will import math module print " math.exp  -45.17   "  math.exp  -45.17  print " math.exp  100.12   "  math.exp  100.12  print " math.exp  100.72   "  math.exp  100.72  print " math.exp  119l   "  math.exp  119l  print " math.exp  math.pi   "  math.exp  math.pi  let us compile and run the above program  this will produce the following result  math.exp  -45.17   2.41500621326e-20 math.exp  100.12   3.03084361407e + 43 math.exp  100.72   5.52255713025e + 43 math.exp  119l   4.7978133273e + 51 math.exp  math.pi   23.1406926328 fabs  x  description the method fabs   returns the absolute value of x syntax following is the syntax for fabs   method  import math math.fabs  x  note  this function is not accessible directly  so we need to import math module and then we need to call this function using math static object parameters x  this is a numeric value return value this method returns absolute value of x example the following example shows the usage of fabs   method # ! /usr/bin/python import math # this will import math module print " math.fabs  -45.17   "  math.fabs  -45.17  print " math.fabs  100.12   "  math.fabs  100.12  print " math.fabs  100.72   "  math.fabs  100.72  print " math.fabs  119l   "  math.fabs  119l  print " math.fabs  math.pi   "  math.fabs  math.pi  let us compile and run the above program  this will produce the following result  math.fabs  -45.17   45.17 math.fabs  100.12   100.12 math.fabs  100.72   100.72 math.fabs  119l   119.0 math.fabs  math.pi   3.14159265359 floor  x  description the method floor   returns floor of x  the largest integer not greater than x syntax following is the syntax for floor   method import math math.floor  x  note  this function is not accessible directly  so we need to import math module and then we need to call this function using math static object parameters x  this is a numeric expression return value this method returns largest integer not greater than x example the following example shows the usage of floor   method # ! /usr/bin/python import math # this will import math module print " math.floor  -45.17   "  math.floor  -45.17  print " math.floor  100.12   "  math.floor  100.12  print " math.floor  100.72   "  math.floor  100.72  print " math.floor  119l   "  math.floor  119l  print " math.floor  math.pi   "  math.floor  math.pi  let us compile and run the above program  this will produce the following result  math.floor  -45.17   -46.0 math.floor  100.12   100.0 math.floor  100.72   100.0 math.floor  119l   119.0 math.floor  math.pi   3.0 log  x  description the method log   returns natural logarithm of x  for x > 0 syntax following is the syntax for log   method  import math math.log  x  note  this function is not accessible directly  so we need to import math module and then we need to call this function using math static object parameters x  this is a numeric expression return value this method returns natural logarithm of x  for x > 0 example the following example shows the usage of log   method # ! /usr/bin/python import math # this will import math module print " math.log  100.12   "  math.log  100.12  print " math.log  100.72   "  math.log  100.72  print " math.log  119l   "  math.log  119l  print " math.log  math.pi   "  math.log  math.pi  let us compile and run the above program  this will produce the following result  math.log  100.12   4.60636946656 math.log  100.72   4.61234438974 math.log  119l   4.77912349311 math.log  math.pi   1.14472988585 log10  x  description the method log10   returns base-10 logarithm of x for x > 0 syntax following is the syntax for log10   method  import math math.log10  x  note  this function is not accessible directly  so we need to import math module and then we need to call this function using math static object parameters x  this is a numeric expression return value this method returns base-10 logarithm of x for x > 0 example the following example shows the usage of log10   method # ! /usr/bin/python import math # this will import math module print " math.log10  100.12   "  math.log10  100.12  print " math.log10  100.72   "  math.log10  100.72  print " math.log10  119l   "  math.log10  119l  print " math.log10  math.pi   "  math.log10  math.pi  let us compile and run the above program  this will produce the following result  math.log10  100.12   2.00052084094 math.log10  100.72   2.0031157171 math.log10  119l   2.07554696139 math.log10  math.pi   0.497149872694 max  x1  x2  description the method max   returns the largest of its arguments  the value closest to positive infinity syntax following is the syntax for max   method  max  x  y  z    parameters x  this is a numeric expression y  this is also a numeric expression z  this is also a numeric expression return value this method returns largest of its arguments example the following example shows the usage of max   method # ! /usr/bin/python print " max  80  100  1000   "  max  80  100  1000  print " max  -20  100  400   "  max  -20  100  400  print " max  -80  -20  -10   "  max  -80  -20  -10  print " max  0  100  -400   "  max  0  100  -400  let us compile and run the above program  this will produce the following result  max  80  100  1000   1000 max  -20  100  400   400 max  -80  -20  -10   -10 max  0  100  -400   100 min  x1  x2  description the method min   returns the smallest of its arguments  the value closest to negative infinity syntax following is the syntax for min   method  min  x  y  z    parameters x  this is a numeric expression y  this is also a numeric expression z  this is also a numeric expression return value this method returns smallest of its arguments example the following example shows the usage of min   method # ! /usr/bin/python print " min  80  100  1000   "  min  80  100  1000  print " min  -20  100  400   "  min  -20  100  400  print " min  -80  -20  -10   "  min  -80  -20  -10  print " min  0  100  -400   "  min  0  100  -400  let us compile and run the above program  this will produce the following result  min  80  100  1000   80 min  -20  100  400   -20 min  -80  -20  -10   -80 min  0  100  -400   -400 modf  x  description the method modf   returns the fractional and integer parts of x in a two-item tuple both parts have the same sign as x the integer part is returned as a float syntax following is the syntax for modf   method  import math math.modf  x  note  this function is not accessible directly  so we need to import math module and then we need to call this function using math static object parameters x  this is a numeric expression return value this method returns the fractional and integer parts of x in a two-item tuple both parts have the same sign as x the integer part is returned as a float example the following example shows the usage of modf   method # ! /usr/bin/python import math # this will import math module print " math.modf  100.12   "  math.modf  100.12  print " math.modf  100.72   "  math.modf  100.72  print " math.modf  119l   "  math.modf  119l  print " math.modf  math.pi   "  math.modf  math.pi  let us compile and run the above program  this will produce the following result  math.modf  100.12    0.12000000000000455  100.0  math.modf  100.72    0.71999999999999886  100.0  math.modf  119l    0.0  119.0  math.modf  math.pi    0.14159265358979312  3.0  pow  x  y  description the method pow   returns returns the value of xy syntax following is the syntax for pow   method  import math math.pow  x  y  note  this function is not accessible directly  so we need to import math module and then we need to call this function using math static object parameters x  this is a numeric expression y  this is also a numeric expression return value this method returns value of xy example the following example shows the usage of pow   method # ! /usr/bin/python import math # this will import math module print " math.pow  100  2   "  math.pow  100  2  print " math.pow  100  -2   "  math.pow  100  -2  print " math.pow  2  4   "  math.pow  2  4  print " math.pow  3  0   "  math.pow  3  0  let us compile and run the above program  this will produce the following result  math.pow  100  2   10000.0 math.pow  100  -2   0.0001 math.pow  2  4   16.0 math.pow  3  0   1.0 round  x  ,n   description the method round   returns x rounded to n digits from the decimal point syntax following is the syntax for round   method  round  x   n   parameters x  this is a numeric expression n  this is also a numeric expression return value this method returns x rounded to n digits from the decimal point example the following example shows the usage of round   method # ! /usr/bin/python print " round  80.23456  2   "  round  80.23456  2  print " round  100.000056  3   "  round  100.000056  3  print " round  -100.000056  3   "  round  -100.000056  3  let us compile and run the above program  this will produce the following result  round  80.23456  2   80.23 round  100.000056  3   100.0 round  -100.000056  3   -100.0 sqrt  x  description the method sqrt   returns the square root of x for x > 0 syntax following is the syntax for sqrt   method  import math math.sqrt  x  note  this function is not accessible directly  so we need to import math module and then we need to call this function using math static object parameters x  this is a numeric expression return value this method returns square root of x for x > 0 example the following example shows the usage of sqrt   method # ! /usr/bin/python import math # this will import math module print " math.sqrt  100   "  math.sqrt  100  print " math.sqrt  7   "  math.sqrt  7  print " math.sqrt  math.pi   "  math.sqrt  math.pi  let us compile and run the above program  this will produce the following result  math.sqrt  100   10.0 math.sqrt  7   2.64575131106 math.sqrt  math.pi   1.77245385091 random number functions  random numbers are used for games  simulations  testing  security and privacy applications python includes the following functions that are commonly used  function description choice  seq  a random item from a list  tuple or string randrange   start   stop  ,step   a randomly selected element from range  start  stop  step  random   a random float r  such that 0 is less than or equal to r and r is less than 1 seed   x   sets the integer starting value used in generating random numbers call this function before calling any other random module function returns none shuffle  lst  randomizes the items of a list in place returns none uniform  x  y  a random float r  such that x is less than or equal to r and r is less than y the random number functions are explained here  choice  seq  description the method choice   returns a random item from a list  tuple  or string syntax following is the syntax for choice   method  choice  seq  note  this function is not accessible directly  so we need to import random module and then we need to call this function using random static object parameters seq  this could be a list  tuple  or string return value this method returns a random item example the following example shows the usage of choice   method # ! /usr/bin/python import random print " choice   1  2  3  5  9    "  random.choice   1  2  3  5  9   print " choice  'a string '   "  random.choice  'a string '  let us compile and run the above program  this will produce the following result  choice   1  2  3  5  9    2 choice  'a string '   n randrange   start   stop  ,step   description the method randrange   returns a randomly selected element from range  start  stop  step   syntax following is the syntax for randrange   method  randrange   start   stop  ,step   note  this function is not accessible directly  so we need to import random module and then we need to call this function using random static object parameters start  start point of the range this would be included in the range  stop  stop point of the range this would be excluded from the range step  steps to be added in a number to decide a random number return value this method returns a random item from the given range example the following example shows the usage of randrange   method # ! /usr/bin/python import random # select an even number in 100 < = number < 1000 print " randrange  100  1000  2   "  random.randrange  100  1000  2  # select another number in 100 < = number < 1000 print " randrange  100  1000  3   "  random.randrange  100  1000  3  let us compile and run the above program  this will produce the following result  randrange  100  1000  2   976 randrange  100  1000  3   520 random   description the method random   returns a random float r  such that 0 is less than or equal to r and r is less than 1 syntax following is the syntax for random   method  random   note  this function is not accessible directly  so we need to import random module and then we need to call this function using random static object parameters na return value this method returns a random float r  such that 0 is less than or equal to r and r is less than 1 example the following example shows the usage of random   method # ! /usr/bin/python import random # first random number print " random    "  random.random   # second random number print " random    "  random.random   let us compile and run the above program  this will produce the following result  random    0.281954791393 random    0.309090465205 seed   x   description the method seed   sets the integer starting value used in generating random numbers call this function before calling any other random module function syntax following is the syntax for seed   method  seed   x   note  this function is not accessible directly  so we need to import seed module and then we need to call this function using random static object parameters x  this is the seed for the next random number if omitted,s then it takes system time to generate next random number return value this method does not return any value example the following example shows the usage of seed   method # ! /usr/bin/python import random random.seed  10  print " random number with seed 10  "  random.random   # it will generate same random number random.seed  10  print " random number with seed 10  "  random.random   # it will generate same random number random.seed  10  print " random number with seed 10  "  random.random   let us compile and run the above program  this will produce the following result  random number with seed 10  0.57140259469 random number with seed 10  0.57140259469 random number with seed 10  0.57140259469 shuffle  lst  description the method shuffle   randomizes the items of a list in place syntax following is the syntax for shuffle   method  shuffle  lst  note  this function is not accessible directly  so we need to import shuffle module and then we need to call this function using random static object parameters lst  this could be a list or tuple return value this method returns reshuffled list example the following example shows the usage of shuffle   method # ! /usr/bin/python import random list =  20  16  10  5  ; random.shuffle  list  print " reshuffled list  "  list random.shuffle  list  print " reshuffled list  "  list let us compile and run the above program  this will produce the following result  reshuffled list   16  5  10  20  reshuffled list   16  5  20  10  uniform  x  y  description the method uniform   returns a random float r  such that x is less than or equal to r and r is less than y syntax following is the syntax for uniform   method  uniform  x  y  note  this function is not accessible directly  so we need to import uniform module and then we need to call this function using random static object parameters x  sets the lower limit of the random float y  sets the upper limit of the random float return value this method returns a floating point number example the following example shows the usage of uniform   method # ! /usr/bin/python import random print " random float uniform  5  10   "  random.uniform  5  10  print " random float uniform  7  14   "  random.uniform  7  14  let us compile and run the above program  this will produce the following result  random float uniform  5  10   5.52615217015 random float uniform  7  14   12.5326369199 trigonometric functions  python includes the following functions that perform trigonometric calculations function description acos  x  returns the arc cosine of x  in radians asin  x  returns the arc sine of x  in radians atan  x  returns the arc tangent of x  in radians atan2  y  x  returns atan  y / x   in radians cos  x  returns the cosine of x radians hypot  x  y  returns the euclidean norm  sqrt  x * x + y * y   sin  x  returns the sine of x radians tan  x  returns the tangent of x radians degrees  x  converts angle x from radians to degrees radians  x  converts angle x from degrees to radians the trigonometric functions are explained here  acos  x  description the method acos   returns the arc cosine of x  in radians syntax following is the syntax for acos   method  acos  x  note  this function is not accessible directly  so we need to import math module and then we need to call this function using math static object parameters x  this must be a numeric value in the range -1 to 1 if x is greater than 1 then it will generate an error return value this method returns arc cosine of x  in radians example the following example shows the usage of acos   method # ! /usr/bin/python import math print " acos  0.64   "  math.acos  0.64  print " acos  0   "  math.acos  0  print " acos  -1   "  math.acos  -1  print " acos  1   "  math.acos  1  let us compile and run the above program  this will produce the following result  acos  0.64   0.876298061168 acos  0   1.57079632679 acos  -1   3.14159265359 acos  1   0.0 asin  x  description the method asin   returns the arc sine of x  in radians syntax following is the syntax for asin   method  asin  x  note  this function is not accessible directly  so we need to import math module and then we need to call this function using math static object parameters x  this must be a numeric value in the range -1 to 1 if x is greater than 1 then it will generate an error return value this method returns arc sine of x  in radians example the following example shows the usage of asin   method # ! /usr/bin/python import math print " asin  0.64   "  math.asin  0.64  print " asin  0   "  math.asin  0  print " asin  -1   "  math.asin  -1  print " asin  1   "  math.asin  1  let us compile and run the above program  this will produce the following result  asin  0.64   0.694498265627 asin  0   0.0 asin  -1   -1.57079632679 asin  1   1.57079632679 atan  x  description the method atan   returns the arc tangent of x  in radians syntax following is the syntax for atan   method  atan  x  note  this function is not accessible directly  so we need to import math module and then we need to call this function using math static object parameters x  this must be a numeric value return value this method returns arc tangent of x  in radians example the following example shows the usage of atan   method # ! /usr/bin/python import math print " atan  0.64   "  math.atan  0.64  print " atan  0   "  math.atan  0  print " atan  10   "  math.atan  10  print " atan  -1   "  math.atan  -1  print " atan  1   "  math.atan  1  let us compile and run the above program  this will produce the following result  atan  0.64   0.569313191101 atan  0   0.0 atan  10   1.4711276743 atan  -1   -0.785398163397 atan  1   0.785398163397 atan2  y  x  description the method atan2   returns atan  y / x   in radians syntax following is the syntax for atan2   method  atan2  y  x  note  this function is not accessible directly  so we need to import math module and then we need to call this function using math static object parameters y  this must be a numeric value x  this must be a numeric value return value this method returns atan  y / x   in radians example the following example shows the usage of atan2   method # ! /usr/bin/python import math print " atan2  -0.50,-0.50   "  math.atan2  -0.50,-0.50  print " atan2  0.50,0.50   "  math.atan2  0.50,0.50  print " atan2  5,5   "  math.atan2  5,5  print " atan2  -10,10   "  math.atan2  -10,10  print " atan2  10,20   "  math.atan2  10,20  let us compile and run the above program  this will produce the following result  atan2  -0.50,-0.50   -2.35619449019 atan2  0.50,0.50   0.785398163397 atan2  5,5   0.785398163397 atan2  -10,10   -0.785398163397 atan2  10,20   0.463647609001 cos  x  description the method cos   returns the cosine of x radians syntax following is the syntax for cos   method  cos  x  note  this function is not accessible directly  so we need to import math module and then we need to call this function using math static object parameters x  this must be a numeric value return value this method returns a numeric value between -1 and 1  which represents the cosine of the angle example the following example shows the usage of cos   method # ! /usr/bin/python import math print " cos  3   "  math.cos  3  print " cos  -3   "  math.cos  -3  print " cos  0   "  math.cos  0  print " cos  math.pi   "  math.cos  math.pi  print " cos  2 * math.pi   "  math.cos  2 * math.pi  let us compile and run the above program  this will produce the following result  cos  3   -0.9899924966 cos  -3   -0.9899924966 cos  0   1.0 cos  math.pi   -1.0 cos  2 * math.pi   1.0 hypot  x  y  description the method hypot   return the euclidean norm  sqrt  x * x + y * y   syntax following is the syntax for hypot   method  hypot  x  y  note  this function is not accessible directly  so we need to import math module and then we need to call this function using math static object parameters x  this must be a numeric value y  this must be a numeric value return value this method returns euclidean norm  sqrt  x * x + y * y   example the following example shows the usage of hypot   method # ! /usr/bin/python import math print " hypot  3  2   "  math.hypot  3  2  print " hypot  -3  3   "  math.hypot  -3  3  print " hypot  0  2   "  math.hypot  0  2  let us compile and run the above program  this will produce the following result  hypot  3  2   3.60555127546 hypot  -3  3   4.24264068712 hypot  0  2   2.0 sin  x  description the method sin   returns the sine of x  in radians syntax following is the syntax for sin   method  sin  x  note  this function is not accessible directly  so we need to import math module and then we need to call this function using math static object parameters x  this must be a numeric value return value this method returns a numeric value between -1 and 1  which represents the sine of the parameter x example the following example shows the usage of sin   method # ! /usr/bin/python import math print " sin  3   "  math.sin  3  print " sin  -3   "  math.sin  -3  print " sin  0   "  math.sin  0  print " sin  math.pi   "  math.sin  math.pi  print " sin  math.pi/2   "  math.sin  math.pi/2  let us compile and run the above program  this will produce the following result  sin  3   0.14112000806 sin  -3   -0.14112000806 sin  0   0.0 sin  math.pi   1.22460635382e-16 sin  math.pi/2   1.0 tan  x  description the method tan   returns the tangent of x radians syntax following is the syntax for tan   method  tan  x  note  this function is not accessible directly  so we need to import math module and then we need to call this function using math static object parameters x  this must be a numeric value return value this method returns a numeric value between -1 and 1  which represents the tangent of the parameter x example the following example shows the usage of tan   method # ! /usr/bin/python import math print " tan  3   "  math.tan  3  print " tan  -3   "  math.tan  -3  print " tan  0   "  math.tan  0  print " tan  math.pi   "  math.tan  math.pi  print " tan  math.pi/2   "  math.tan  math.pi/2  print " tan  math.pi/4   "  math.tan  math.pi/4  let us compile and run the above program  this will produce the following result  tan  3   -0.142546543074 tan  -3   0.142546543074 tan  0   0.0 tan  math.pi   -1.22460635382e-16 tan  math.pi/2   1.63317787284e + 16 tan  math.pi/4   1.0 degrees  x  description the method degrees   converts angle x from radians to degrees syntax following is the syntax for degrees   method  degrees  x  note  this function is not accessible directly  so we need to import math module and then we need to call this function using math static object parameters x  this must be a numeric value return value this method returns degree value of an angle example the following example shows the usage of degrees   method # ! /usr/bin/python import math print " degrees  3   "  math.degrees  3  print " degrees  -3   "  math.degrees  -3  print " degrees  0   "  math.degrees  0  print " degrees  math.pi   "  math.degrees  math.pi  print " degrees  math.pi/2   "  math.degrees  math.pi/2  print " degrees  math.pi/4   "  math.degrees  math.pi/4  let us compile and run the above program  this will produce the following result  degrees  3   171.887338539 degrees  -3   -171.887338539 degrees  0   0.0 degrees  math.pi   180.0 degrees  math.pi/2   90.0 degrees  math.pi/4   45.0 radians  x  description the method radians   converts angle x from degrees to radians syntax following is the syntax for radians   method  radians  x  note  this function is not accessible directly  so we need to import math module and then we need to call this function using math static object parameters x  this must be a numeric value return value this method returns radian value of an angle example the following example shows the usage of radians   method # ! /usr/bin/python import math print " radians  3   "  math.radians  3  print " radians  -3   "  math.radians  -3  print " radians  0   "  math.radians  0  print " radians  math.pi   "  math.radians  math.pi  print " radians  math.pi/2   "  math.radians  math.pi/2  print " radians  math.pi/4   "  math.radians  math.pi/4  let us compile and run the above program  this will produce the following result  radians  3   0.0523598775598 radians  -3   -0.0523598775598 radians  0   0.0 radians  math.pi   0.0548311355616 radians  math.pi/2   0.0274155677808 radians  math.pi/4   0.0137077838904 mathematical constants  the module also defines two mathematical constants  constants description pi the mathematical constant pi e the mathematical constant e python strings strings are amongst the most popular types in python we can create them by enclosing characters in quotes python treats single quotes the same as double quotes creating strings is as simple as assigning a value to a variable for example  var1 = 'hello world ! ' var2 = " python programming " accessing values in strings  python does not support a character type ; these are treated as strings of length one  thus also considered a substring to access substrings  use the square brackets for slicing along with the index or indices to obtain your substring following is a simple example  # ! /usr/bin/python var1 = 'hello world ! ' var2 = " python programming " print " var1  0   "  var1  0  print " var2  1  5   "  var2  1  5  when the above code is executed  it produces the following result  var1  0   h var2  1  5   ytho updating strings  you can " update " an existing string by  re  assigning a variable to another string the new value can be related to its previous value or to a completely different string altogether following is a simple example  # ! /usr/bin/python var1 = 'hello world ! ' chapter 9 print " updated string   "  var1   6  + 'python ' when the above code is executed  it produces the following result  updated string   hello python escape characters  following table is a list of escape or non-printable characters that can be represented with backslash notation backslash notation hexadecimal character description \ a 0x07 bell or alert \ b 0x08 backspace \ cx control-x \ c-x control-x \ e 0x1b escape \ f 0x0c formfeed \ m \ c-x meta-control-x \ n 0x0a newline \ nnn octal notation  where n is in the range 0.7 \ r 0x0d carriage return \ s 0x20 space \ t 0x09 tab \ v 0x0b vertical tab \ x character x \ xnn hexadecimal notation  where n is in the range 0.9  a.f  or a.f string special operators  assume string variable a holds 'hello ' and variable b holds 'python '  then  operator description example + concatenation  adds values on either side of the operator a + b will give hellopython * repetition  creates new strings  concatenating multiple copies of the same string a * 2 will give -hellohello   slice  gives the character from the given index a  1  will give e    range slice  gives the characters from the given range a  1  4  will give ell in membership  returns true if a character exists in the given string h in a will give 1 not in membership  returns true if a character does not exist in the given string m not in a will give 1 r/r raw string  suppresses actual meaning of escape characters the syntax for raw strings is exactly the same as for normal strings with the exception of the raw string operator  the letter " r  " which precedes the quotation marks the " r " can be lowercase  r  or uppercase  r  and must be placed immediately preceding the first quote mark print r ' \ n ' prints \ n and print r ' \ n ' prints \ n % format  performs string formatting see at next section string formatting operator  one of python 's coolest features is the string format operator %  this operator is unique to strings and makes up for the pack of having functions from c 's printf   family following is a simple example  # ! /usr/bin/python print " my name is % s and weight is % d kg ! " %  'zara '  21  when the above code is executed  it produces the following result  my name is zara and weight is 21 kg ! here is the list of complete set of symbols  which can be used along with %  format symbol conversion % c character % s string conversion via str   prior to formatting % i signed decimal integer % d signed decimal integer % u unsigned decimal integer % o octal integer % x hexadecimal integer  lowercase letters  % x hexadecimal integer  uppercase letters  % e exponential notation  with lowercase 'e '  % e exponential notation  with uppercase 'e '  % f floating point real number % g the shorter of % f and % e % g the shorter of % f and % e other supported symbols and functionality are listed in the following table  symbol functionality * argument specifies width or precision  left justification + display the sign < sp > leave a blank space before a positive number # add the octal leading zero  '0 '  or hexadecimal leading '0x ' or '0x '  depending on whether 'x ' or 'x ' were used 0 pad from left with zeros  instead of spaces  % ' % % ' leaves you with a single literal ' % '  var  mapping variable  dictionary arguments  m.n m is the minimum total width and n is the number of digits to display after the decimal point  if appl  triple quotes  python 's triple quotes comes to the rescue by allowing strings to span multiple lines  including verbatim newlines  tabs  and any other special characters the syntax for triple quotes consists of three consecutive single or double quotes # ! /usr/bin/python para_str = " " " this is a long string that is made up of several lines and non-printable characters such as tab  \ t  and they will show up that way when displayed newlines within the string  whether explicitly given like this within the brackets  \ n   or just a newline within the variable assignment will also show up " " " print para_str ; when the above code is executed  it produces the following result note how every single special character has been converted to its printed form  right down to the last newline at the end of the string between the " up " and closing triple quotes also note that newlines occur either with an explicit carriage return at the end of a line or its escape code  \ n   this is a long string that is made up of several lines and non-printable characters such as tab   and they will show up that way when displayed newlines within the string  whether explicitly given like this within the brackets    or just a newline within the variable assignment will also show up raw string  raw strings do n't treat the backslash as a special character at all every character you put into a raw string stays the way you wrote it  # ! /usr/bin/python print 'c  \ \ nowhere ' when the above code is executed  it produces the following result  c  \ nowhere now let 's make use of raw string we would put expression in r'expression ' as follows  # ! /usr/bin/python print r'c  \ \ nowhere ' when the above code is executed  it produces the following result  c  \ \ nowhere unicode string  normal strings in python are stored internally as 8-bit ascii  while unicode strings are stored as 16-bit unicode this allows for a more varied set of characters  including special characters from most languages in the world i 'll restrict my treatment of unicode strings to the following  # ! /usr/bin/python print u'hello  world ! ' when the above code is executed  it produces the following result  hello  world ! as you can see  unicode strings use the prefix u  just as raw strings use the prefix r built in string methods  python includes the following built-in methods to manipulate strings  sn methods with description 1 capitalize   capitalizes first letter of string 2 center  width  fillchar  returns a space-padded string with the original string centered to a total of width columns 3 count  str  beg = 0,end = len  string   counts how many times str occurs in string or in a substring of string if starting index beg and ending index end are given 4 decode  encoding = 'utf-8',errors = 'strict '  decodes the string using the codec registered for encoding encoding defaults to the default string encoding 5 encode  encoding = 'utf-8',errors = 'strict '  returns encoded string version of string ; on error  default is to raise a valueerror unless errors is given with 'ignore ' or 'replace' 6 endswith  suffix  beg = 0  end = len  string   determines if string or a substring of string  if starting index beg and ending index end are given  ends with suffix ; returns true if so and false otherwise 7 expandtabs  tabsize = 8  expands tabs in string to multiple spaces ; defaults to 8 spaces per tab if tabsize not provided 8 find  str  beg = 0 end = len  string   determine if str occurs in string or in a substring of string if starting index beg and ending index end are given ; returns index if found and -1 otherwise 9 index  str  beg = 0  end = len  string   same as find    but raises an exception if str not found 10 isalnum   returns true if string has at least 1 character and all characters are alphanumeric and false otherwise 11 isalpha   returns true if string has at least 1 character and all characters are alphabetic and false otherwise 12 isdigit   returns true if string contains only digits and false otherwise 13 islower   returns true if string has at least 1 cased character and all cased characters are in lowercase and false otherwise 14 isnumeric   returns true if a unicode string contains only numeric characters and false otherwise 15 isspace   returns true if string contains only whitespace characters and false otherwise 16 istitle   returns true if string is properly " titlecased " and false otherwise 17 isupper   returns true if string has at least one cased character and all cased characters are in uppercase and false otherwise 18 join  seq  merges  concatenates  the string representations of elements in sequence seq into a string  with separator string 19 len  string  returns the length of the string 20 ljust  width   fillchar   returns a space-padded string with the original string left-justified to a total of width columns 21 lower   converts all uppercase letters in string to lowercase 22 lstrip   removes all leading whitespace in string 23 maketrans   returns a translation table to be used in translate function 24 max  str  returns the max alphabetical character from the string str 25 min  str  returns the min alphabetical character from the string str 26 replace  old  new   max   replaces all occurrences of old in string with new or at most max occurrences if max given 27 rfind  str  beg = 0,end = len  string   same as find    but search backwards in string 28 rindex  str  beg = 0  end = len  string   same as index    but search backwards in string 29 rjust  width    fillchar   returns a space-padded string with the original string right-justified to a total of width columns 30 rstrip   removes all trailing whitespace of string 31 split  str = " "  num = string.count  str   splits string according to delimiter str  space if not provided  and returns list of substrings ; split into at most num substrings if given 32 splitlines  num = string.count  ' \ n '   splits string at all  or num  newlines and returns a list of each line with newlines removed 33 startswith  str  beg = 0,end = len  string   determines if string or a substring of string  if starting index beg and ending index end are given  starts with substring str ; returns true if so and false otherwise 34 strip   chars   performs both lstrip   and rstrip   on string 35 swapcase   inverts case for all letters in string 36 title   returns " titlecased " version of string  that is  all words begin with uppercase and the rest are lowercase 37 translate  table  deletechars = " "  translates string according to translation table str  256 chars   removing those in the del string 38 upper   converts lowercase letters in string to uppercase 39 zfill  width  returns original string leftpadded with zeros to a total of width characters ; intended for numbers  zfill   retains any sign given  less one zero  40 isdecimal   returns true if a unicode string contains only decimal characters and false otherwise the functions are explained below  capitalize   description the method capitalize   returns a copy of the string with only its first character capitalized for 8-bit strings  this method is locale-dependent syntax following is the syntax for capitalize   method  str.capitalize   parameters na return value this method returns a copy of the string with only its first character capitalized example the following example shows the usage of capitalize   method # ! /usr/bin/python str = " this is string example....wow ! ! ! " ; print " str.capitalize    "  str.capitalize   let us compile and run the above program  this will produce the following result  str.capitalize    this is string example....wow ! ! ! center  width  fillchar  description the method center   returns centered in a string of length width padding is done using the specifiedfillchar default filler is a space syntax following is the syntax for center   method  str.center  width   fillchar   parameters width  this is the total width of the string fillchar  this is the filler character return value this method returns centered in a string of length width example the following example shows the usage of center   method # ! /usr/bin/python str = " this is string example....wow ! ! ! " ; print " str.center  40  'a '   "  str.center  40  'a '  let us compile and run the above program  this will produce the following result  str.center  40  'a '   aaaathis is string example....wow ! ! ! aaaa count  str  beg = 0,end = len  string   description the method count   returns the number of occurrences of substring sub in the range  start  end   optional arguments start and end are interpreted as in slice notation syntax following is the syntax for count   method  str.count  sub  start = 0,end = len  string   parameters sub  this is the substring to be searched start  search starts from this index first character starts from 0 index by default search starts from 0 index end  search ends from this index first character starts from 0 index by default search ends at the last index return value this method returns centered in a string of length width example the following example shows the usage of count   method # ! /usr/bin/python str = " this is string example....wow ! ! ! " ; sub = " i " ; print " str.count  sub  4  40   "  str.count  sub  4  40  sub = " wow " ; print " str.count  sub   "  str.count  sub  let us compile and run the above program  this will produce the following result  str.count  sub  4  40   2 str.count  sub   1 decode  encoding = 'utf 8',errors = 'strict '  description the method decode   decodes the string using the codec registered for encoding it defaults to the default string encoding syntax following is the syntax for decode   method  str.decode  encoding = 'utf-8',errors = 'strict '  parameters encoding  this is the encodings to be used for a list of all encoding schemes please visit  standard encodings errors  this may be given to set a different error handling scheme the default for errors is 'strict '  meaning that encoding errors raise a unicodeerror other possible values are 'ignore '  'replace '  'xmlcharrefreplace '  'backslashreplace ' and any other name registered via codecs.register_error    return value this method returns an decoded version of the string example the following example shows the usage of decode   method # ! /usr/bin/python str = " this is string example....wow ! ! ! " ; str = str.encode  'base64','strict '  ; print " encoded string  " + str ; print " decoded string  " + str.decode  'base64','strict '  let us compile and run the above program  this will produce the following result  encoded string  dghpcybpcybzdhjpbmcgzxhhbxbszs4uli53b3chise = decoded string  this is string example....wow ! ! ! encode  encoding = 'utf 8',errors = 'strict '  description the method encode   returns an encoded version of the string default encoding is the current default string encoding errors may be given to set a different error handling scheme syntax following is the syntax for encode   method  str.encode  encoding = 'utf-8',errors = 'strict '  parameters encoding  this is the encodings to be used for a list of all encoding schemes please visitstandard encodings errors  this may be given to set a different error handling scheme the default for errors is 'strict '  meaning that encoding errors raise a unicodeerror other possible values are 'ignore '  'replace '  'xmlcharrefreplace '  'backslashreplace ' and any other name registered via codecs.register_error    return value this method returns an encoded version of the string example the following example shows the usage of encode   method # ! /usr/bin/python str = " this is string example....wow ! ! ! " ; print " encoded string  " + str.encode  'base64','strict '  let us compile and run the above program  this will produce the following result  encoded string  dghpcybpcybzdhjpbmcgzxhhbxbszs4uli53b3chise = endswith  suffix  beg = 0  end = len  string   description the method endswith   returns true if the string ends with the specified suffix  otherwise return false optionally restricting the matching with the given indices start and end syntax following is the syntax for endswith   method  str.endswith  suffix   start   end    parameters suffix  this could be a string or could also be a tuple of suffixes to look for start  the slice begins from here end  the slice ends here return value this method returns true if the string ends with the specified suffix  otherwise return false example the following example shows the usage of endswith   method # ! /usr/bin/python str = " this is string example....wow ! ! ! " ; suffix = " wow ! ! ! " ; print str.endswith  suffix  ; print str.endswith  suffix,20  ; suffix = " is " ; print str.endswith  suffix  2  4  ; print str.endswith  suffix  2  6  ; let us compile and run the above program  this will produce the following result  true true true false expandtabs  tabsize = 8  description the method expandtabs   returns a copy of the string in which tab characters ie ' \ t ' have been expanded using spaces  optionally using the given tabsize  default 8   syntax following is the syntax for expandtabs   method  str.expandtabs  tabsize = 8  parameters tabsize  this specifies the number of characters to be replaced for a tab character ' \ t' return value this method returns a copy of the string in which tab characters i.e  ' \ t ' have been expanded using spaces example the following example shows the usage of expandtabs   method # ! /usr/bin/python str = " this is \ tstring example....wow ! ! ! " ; print " original string  " + str ; print " defualt exapanded tab  " + str.expandtabs   ; print " double exapanded tab  " + str.expandtabs  16  ; let us compile and run the above program  this will produce the following result  original string  this is string example....wow ! ! ! defualt exapanded tab  this is string example....wow ! ! ! double exapanded tab  this is string example....wow ! ! ! find  str  beg = 0 end = len  string   description the method find   determines if string str occurs in string  or in a substring of string if starting indexbeg and ending index end are given syntax following is the syntax for find   method  str.find  str  beg = 0 end = len  string   parameters str  this specifies the string to be searched beg  this is the starting index  by default its 0 end  this is the ending index  by default its equal to the lenght of the string return value this method returns index if found and -1 otherwise example the following example shows the usage of find   method # ! /usr/bin/python str1 = " this is string example....wow ! ! ! " ; str2 = " exam " ; print str1.find  str2  ; print str1.find  str2  10  ; print str1.find  str2  40  ; let us compile and run the above program  this will produce the following result  15 15 -1 index  str  beg = 0  end = len  string   description the method index   determines if string str occurs in string or in a substring of string if starting indexbeg and ending index end are given this method is same as find    but raises an exception if sub is not found syntax following is the syntax for index   method  str.index  str  beg = 0 end = len  string   parameters str  this specifies the string to be searched beg  this is the starting index  by default its 0 end  this is the ending index  by default its equal to the length of the string return value this method returns index if found otherwise raises an exception if str is not found example the following example shows the usage of index   method # ! /usr/bin/python str1 = " this is string example....wow ! ! ! " ; str2 = " exam " ; print str1.index  str2  ; print str1.index  str2  10  ; print str1.index  str2  40  ; let us compile and run the above program  this will produce the following result  15 15 traceback  most recent call last   file " test.py "  line 8  in print str1.index  str2  40  ; valueerror  substring not found shell returned 1 note  we would see how to handle exceptions in subsequent chapters so for the time being leave it as it is isalnum   description the method isalnum   checks whether the string consists of alphanumeric characters syntax following is the syntax for isalnum   method  str.isa1num   parameters na return value this method returns true if all characters in the string are alphanumeric and there is at least one character  false otherwise example the following example shows the usage of isalnum   method # ! /usr/bin/python str = " this2009 " ; # no space in this string print str.isalnum   ; str = " this is string example....wow ! ! ! " ; print str.isalnum   ; let us compile and run the above program  this will produce the following result  true false isalpha   description the method isalpha   checks whether the string consists of alphabetic characters only syntax following is the syntax for islpha   method  str.isalpha   parameters na return value this method returns true if all characters in the string are alphabetic and there is at least one character  false otherwise example the following example shows the usage of isalpha   method # ! /usr/bin/python str = " this " ; # no space & digit in this string print str.isalpha   ; str = " this is string example....wow ! ! ! " ; print str.isalpha   ; let us compile and run the above program  this will produce the following result  true false isdigit   description the method isdigit   checks whether the string consists of digits only syntax following is the syntax for isdigit   method  str.isdigit   parameters na return value this method returns true if all characters in the string are digits and there is at least one character  false otherwise example the following example shows the usage of isdigit   method # ! /usr/bin/python str = " 123456 " ; # only digit in this string print str.isdigit   ; str = " this is string example....wow ! ! ! " ; print str.isdigit   ; let us compile and run the above program  this will produce the following result  true false islower   description the method islower   checks whether all the case-based characters  letters  of the string are lowercase syntax following is the syntax for islower   method  str.islower   parameters na return value this method returns true if all cased characters in the string are lowercase and there is at least one cased character  false otherwise example the following example shows the usage of islower   method # ! /usr/bin/python str = " this is string example....wow ! ! ! " ; print str.islower   ; str = " this is string example....wow ! ! ! " ; print str.islower   ; let us compile and run the above program  this will produce the following result  false true isnumeric   description the method isnumeric   checks whether the string consists of only numeric characters this method is present only on unicode objects note  to define a string as unicode  one prefixes a 'u ' to the opening quotation mark of the assignment below is the example syntax following is the syntax for isnumeric   method  str.isnumeric   parameters na return value this method returns true if all characters in the string are numeric  false otherwise example the following example shows the usage of isnumeric   method # ! /usr/bin/python str = u " this2009 " ; print str.isnumeric   ; str = u " 23443434 " ; print str.isnumeric   ; let us compile and run the above program  this will produce the following result  false true isspace   description the method isspace   checks whether the string consists of whitespace syntax following is the syntax for isspace   method  str.isspace   parameters na return value this method returns true if there are only whitespace characters in the string and there is at least one character  false otherwise example the following example shows the usage of isspace   method # ! /usr/bin/python str = " " ; print str.isspace   ; str = " this is string example....wow ! ! ! " ; print str.isspace   ; let us compile and run the above program  this will produce the following result  true false istitle   description the method istitle   checks whether all the case-based characters in the string following non-casebased letters are uppercase and all other case-based characters are lowercase syntax following is the syntax for istitle   method  str.istitle   parameters na return value this method returns true if the string is a titlecased string and there is at least one character  for example uppercase characters may only follow uncased characters and lowercase characters only cased ones it returns false otherwise example the following example shows the usage of istitle   method # ! /usr/bin/python str = " this is string example...wow ! ! ! " ; print str.istitle   ; str = " this is string example....wow ! ! ! " ; print str.istitle   ; let us compile and run the above program  this will produce the following result  true false isupper   description the method isupper   checks whether all the case-based characters  letters  of the string are uppercase syntax following is the syntax for isupper   method  str.isupper   parameters na return value this method returns true if all cased characters in the string are uppercase and there is at least one cased character  false otherwise example the following example shows the usage of isupper   method # ! /usr/bin/python str = " this is string example....wow ! ! ! " ; print str.isupper   ; str = " this is string example....wow ! ! ! " ; print str.isupper   ; let us compile and run the above program  this will produce the following result  true false join  seq  description the method join   returns a string in which the string elements of sequence have been joined by strseparator syntax following is the syntax for join   method  str.join  sequence  parameters sequence  this is a sequence of the elements to be joined return value this method returns a string  which is the concatenation of the strings in the sequence seq the separator between elements is the string providing this method example the following example shows the usage of join   method # ! /usr/bin/python str = "  " ; seq =  " a "  " b "  " c "  ; # this is sequence of strings print str.join  seq  ; let us compile and run the above program  this will produce the following result  a-b-c len  string  description the method len   returns the length of the string syntax following is the syntax for len   method  len  str  parameters na return value this method returns the length of the string example the following example shows the usage of len   method # ! /usr/bin/python str = " this is string example....wow ! ! ! " ; print " length of the string  "  len  str  ; let us compile and run the above program  this will produce the following result  length of the string  32 ljust  width   fillchar   description the method ljust   returns the string left justified in a string of length width padding is done using the specified fillchar  default is a space   the original string is returned if width is less than len  s   syntax following is the syntax for ljust   method  str.ljust  width   fillchar   parameters width  this is string length in total after padding fillchar  this is filler character  default is a space return value this method returns the string left justified in a string of length width padding is done using the specified fillchar  default is a space   the original string is returned if width is less than len  s   example the following example shows the usage of ljust   method # ! /usr/bin/python str = " this is string example....wow ! ! ! " ; print str.ljust  50  '0 '  ; let us compile and run the above program  this will produce the following result  this is string example....wow ! ! ! 000000000000000000 lower   description the method lower   returns a copy of the string in which all case-based characters have been lowercased syntax following is the syntax for lower   method  str.lower   parameters na return value this method returns a copy of the string in which all case-based characters have been lowercased example the following example shows the usage of lower   method # ! /usr/bin/python str = " this is string example....wow ! ! ! " ; print str.lower   ; let us compile and run the above program  this will produce the following result  this is string example....wow ! ! ! lstrip   description the method lstrip   returns a copy of the string in which all chars have been stripped from the beginning of the string  default whitespace characters   syntax following is the syntax for lstrip   method  str.lstrip   chars   parameters chars  you can supply what chars have to be trimmed return value this method returns a copy of the string in which all chars have been stripped from the beginning of the string  default whitespace characters   example the following example shows the usage of lstrip   method # ! /usr/bin/python str = " this is string example....wow ! ! ! " ; print str.lstrip   ; str = " 88888888this is string example....wow ! ! ! 8888888 " ; print str.lstrip  '8 '  ; let us compile and run the above program  this will produce the following result  this is string example....wow ! ! ! this is string example....wow ! ! ! 8888888 maketrans   description the method maketrans   returns a translation table that maps each character in the intab string into the character at the same position in the outtab string then this table is passed to the translate   function note  both intab and outtab must have the same length syntax following is the syntax for maketrans   method  str.maketrans  intab  outtab   ; parameters intab  this is the string having actual characters outtab  this is the string having corresponding mapping character return value this method returns a translate table to be used translate   function example the following example shows the usage of maketrans   method under this  every vowel in a string is replaced by its vowel position  # ! /usr/bin/python from string import maketrans # required to call maketrans function intab = " aeiou " outtab = " 12345 " trantab = maketrans  intab  outtab  str = " this is string example....wow ! ! ! " ; print str.translate  trantab  ; let us compile and run the above program  this will produce the following result  th3s 3s str3ng 2x1mpl2....w4w ! ! ! max  str  description the method max   returns the max alphabetical character from the string str syntax following is the syntax for max   method  max  str  parameters str  this is the string from which max alphabetical character needs to be returned return value this method returns the max alphabetical character from the string str example the following example shows the usage of max   method # ! /usr/bin/python str = " this is really a string example....wow ! ! ! " ; print " max character  " + max  str  ; str = " this is a string example....wow ! ! ! " ; print " max character  " + max  str  ; let us compile and run the above program  this will produce the following result  max character  y max character  x min  str  description the method min   returns the min alphabetical character from the string str syntax following is the syntax for min   method  min  str  parameters str  this is the string from which min alphabetical character needs to be returned return value this method returns the max alphabetical character from the string str example the following example shows the usage of min   method # ! /usr/bin/python str = " this-is-real-string-example....wow ! ! ! " ; print " min character  " + min  str  ; str = " this-is-a-string-example....wow ! ! ! " ; print " min character  " + min  str  ; let us compile and run the above program  this will produce the following result  min character  ! min character  ! replace  old  new   max   description the method replace   returns a copy of the string in which the occurrences of old have been replaced with new  optionally restricting the number of replacements to max syntax following is the syntax for replace   method  str.replace  old  new   max   parameters old  this is old substring to be replaced new  this is new substring  which would replace old substring max  if this optional argument max is given  only the first count occurrences are replaced return value this method returns a copy of the string with all occurrences of substring old replaced by new if the optional argument max is given  only the first count occurrences are replaced example the following example shows the usage of replace   method # ! /usr/bin/python str = " this is string example....wow ! ! ! this is really string " ; print str.replace  " is "  " was "  ; print str.replace  " is "  " was "  3  ; let us compile and run the above program  this will produce the following result  thwas was string example....wow ! ! ! thwas was really string thwas was string example....wow ! ! ! thwas is really string rfind  str  beg = 0,end = len  string   description the method rfind   returns the last index where the substring str is found  or -1 if no such index exists  optionally restricting the search to string  beg  end   syntax following is the syntax for rfind   method  str.rfind  str  beg = 0 end = len  string   parameters str  this specifies the string to be searched beg  this is the starting index  by default its 0 end  this is the ending index  by default its equal to the length of the string return value this method returns last index if found and -1 otherwise example the following example shows the usage of rfind   method # ! /usr/bin/python str = " this is really a string example....wow ! ! ! " ; str = " is " ; print str.rfind  str  ; print str.rfind  str  0  10  ; print str.rfind  str  10  0  ; print str.find  str  ; print str.find  str  0  10  ; print str.find  str  10  0  ; let us compile and run the above program  this will produce the following result  5 5 -1 2 2 -1 rindex  str  beg = 0  end = len  string   description the method rindex   returns the last index where the substring str is found  or raises an exception if no such index exists  optionally restricting the search to string  beg  end   syntax following is the syntax for rindex   method  str.rindex  str  beg = 0 end = len  string   parameters str  this specifies the string to be searched beg  this is the starting index  by default its 0 len  this is ending index  by default its equal to the length of the string return value this method returns last index if found otherwise raises an exception if str is not found example the following example shows the usage of rindex   method # ! /usr/bin/python str = " this is string example....wow ! ! ! " ; str = " is " ; print str.rindex  str  ; print str.index  str  ; let us compile and run the above program  this will produce the following result  5 2 rjust  width    fillchar   description the method rjust   returns the string right justified in a string of length width padding is done using the specified fillchar  default is a space   the original string is returned if width is less than len  s   syntax following is the syntax for rjust   method  str.rjust  width   fillchar   parameters width  this is the string length in total after padding fillchar  this is the filler character  default is a space return value this method returns the string right justified in a string of length width padding is done using the specified fillchar  default is a space   the original string is returned if width is less than len  s   example the following example shows the usage of rjust   method # ! /usr/bin/python str = " this is string example....wow ! ! ! " ; print str.rjust  50  '0 '  ; let us compile and run the above program  this will produce the following result  000000000000000000this is string example....wow ! ! ! rstrip   description the method rstrip   returns a copy of the string in which all chars have been stripped from the end of the string  default whitespace characters   syntax following is the syntax for rstrip   method  str.rstrip   chars   parameters chars  you can supply what chars have to be trimmed return value this method returns a copy of the string in which all chars have been stripped from the end of the string  default whitespace characters   example the following example shows the usage of rstrip   method # ! /usr/bin/python str = " this is string example....wow ! ! ! " ; print str.rstrip   ; str = " 88888888this is string example....wow ! ! ! 8888888 " ; print str.rstrip  '8 '  ; let us compile and run the above program  this will produce the following result  this is string example....wow ! ! ! 88888888this is string example....wow ! ! ! split  str = " "  num = string.count  str   description the method split   returns a list of all the words in the string  using str as the separator  splits on all whitespace if left unspecified   optionally limiting the number of splits to num syntax following is the syntax for split   method  str.split  str = " "  num = string.count  str    parameters str  this is any delimeter  by default it is space num  this is number of lines to be made return value this method returns a list of lines example the following example shows the usage of split   method # ! /usr/bin/python str = " line1-abcdef \ nline2-abc \ nline4-abcd " ; print str.split   ; print str.split  ' '  1  ; let us compile and run the above program  this will produce the following result   'line1-abcdef '  'line2-abc '  'line4-abcd '   'line1-abcdef '  ' \ nline2-abc \ nline4-abcd '  splitlines  num = string.count  ' \ n '   description the method splitlines   returns a list with all the lines in string  optionally including the line breaks  if num is supplied and is true  syntax following is the syntax for splitlines   method  str.splitlines  num = string.count  ' \ n '   parameters num  this is any number  if present then it would be assumed that line breaks need to be included in the lines return value this method returns true if found matching string otherwise false example the following example shows the usage of splitlines   method # ! /usr/bin/python str = " line1-a b c d e f \ nline2 a b c \ n \ nline4 a b c d " ; print str.splitlines   ; print str.splitlines  0  ; print str.splitlines  3  ; print str.splitlines  4  ; print str.splitlines  5  ; let us compile and run the above program  this will produce the following result   'line1-a b c d e f '  'line2 a b c '  ' '  'line4 a b c d '   'line1-a b c d e f '  'line2 a b c '  ' '  'line4 a b c d '   'line1-a b c d e f \ n '  'line2 a b c \ n '  ' \ n '  'line4 a b c d '   'line1-a b c d e f \ n '  'line2 a b c \ n '  ' \ n '  'line4 a b c d '   'line1-a b c d e f \ n '  'line2 a b c \ n '  ' \ n '  'line4 a b c d '  startswith  str  beg = 0,end = len  string   description the method startswith   checks whether string starts with str  optionally restricting the matching with the given indices start and end syntax following is the syntax for startswith   method  str.startswith  str  beg = 0,end = len  string   ; parameters str  this is the string to be checked beg  this is the optional parameter to set start index of the matching boundary end  this is the optional parameter to set start index of the matching boundary return value this method returns true if found matching string otherwise false example the following example shows the usage of startswith   method # ! /usr/bin/python str = " this is string example....wow ! ! ! " ; print str.startswith  'this '  ; print str.startswith  'is '  2  4  ; print str.startswith  'this '  2  4  ; let us compile and run the above program  this will produce the following result  true true false strip   chars   description the method strip   returns a copy of the string in which all chars have been stripped from the beginning and the end of the string  default whitespace characters   syntax following is the syntax for strip   method  str.strip   chars   ; parameters chars  the characters to be removed from beginning or end of the string return value this method returns a copy of the string in which all chars have been stripped from the beginning and the end of the string example the following example shows the usage of strip   method # ! /usr/bin/python str = " 0000000this is string example....wow ! ! ! 0000000 " ; print str.strip  '0 '  ; let us compile and run the above program  this will produce the following result  this is string example....wow ! ! ! swapcase   description the method swapcase   returns a copy of the string in which all the case-based characters have had their case swapped syntax following is the syntax for swapcase   method  str.swapcase   ; parameters na return value this method returns a copy of the string in which all the case-based characters have had their case swapped example the following example shows the usage of swapcase   method # ! /usr/bin/python str = " this is string example....wow ! ! ! " ; print str.swapcase   ; str = " this is string example....wow ! ! ! " ; print str.swapcase   ; let us compile and run the above program  this will produce the following result  this is string example....wow ! ! ! this is string example....wow ! ! ! title   description the method title   returns a copy of the string in which first characters of all the words are capitalized syntax following is the syntax for title   method  str.title   ; parameters na return value this method returns a copy of the string in which first characters of all the words are capitalized example the following example shows the usage of title   method # ! /usr/bin/python str = " this is string example....wow ! ! ! " ; print str.title   ; let us compile and run the above program  this will produce the following result  this is string example....wow ! ! ! translate  table  deletechars = " "  description the method translate   returns a copy of the string in which all characters have been translated usingtable  constructed with the maketrans   function in the string module   optionally deleting all characters found in the string deletechars syntax following is the syntax for translate   method  str.translate  table   deletechars   ; parameters table  you can use the maketrans   helper function in the string module to create a translation table deletechars  the list of characters to be removed from the source string return value this method returns a translated copy of the string example the following example shows the usage of translate   method under this  every vowel in a string is replaced by its vowel position  # ! /usr/bin/python from string import maketrans # required to call maketrans function intab = " aeiou " outtab = " 12345 " trantab = maketrans  intab  outtab  str = " this is string example....wow ! ! ! " ; print str.translate  trantab  ; let us compile and run the above program  this will produce the following result  th3s 3s str3ng 2x1mpl2....w4w ! ! ! following is the example to delete 'x ' and 'm ' characters from the string  # ! /usr/bin/python from string import maketrans # required to call maketrans function intab = " aeiou " outtab = " 12345 " trantab = maketrans  intab  outtab  str = " this is string example....wow ! ! ! " ; print str.translate  trantab  'xm '  ; this will produce following result  th3s 3s str3ng 21pl2....w4w ! ! ! upper   description the method upper   returns a copy of the string in which all case-based characters have been uppercased syntax following is the syntax for upper   method  str.upper   parameters na return value this method returns a copy of the string in which all case-based characters have been uppercased example the following example shows the usage of upper   method # ! /usr/bin/python str = " this is string example....wow ! ! ! " ; print " str.upper    "  str.upper   let us compile and run the above program  this will produce the following result  str.upper    this is string example....wow ! ! ! zfill  width  description the method zfill   pads string on the left with zeros to fill width syntax following is the syntax for zfill   method  str.zfill  width  parameters width  this is final width of the string this is the width which we would get after filling zeros return value this method returns padded string example the following example shows the usage of zfill   method # ! /usr/bin/python str = " this is string example....wow ! ! ! " ; print str.zfill  40  ; print str.zfill  50  ; let us compile and run the above program  this will produce the following result  00000000this is string example....wow ! ! ! 000000000000000000this is string example....wow ! ! ! isdecimal   the method isdecimal   checks whether the string consists of only decimal characters this method are present only on unicode objects note  to define a string as unicode  one prefixes a 'u ' to the opening quotation mark of the assignment below is the example syntax following is the syntax for isdecimal   method  str.isdecimal   parameters na return value this method returns true if all characters in the string are decimal  false otherwise example the following example shows the usage of isdecimal   method # ! /usr/bin/python str = u " this2009 " ; print str.isdecimal   ; str = u " 23443434 " ; print str.isdecimal   ; let us compile and run the above program  this will produce the following result  false true python lists the most basic data structure in python is the sequence each element of a sequence is assigned a number  its position or index the first index is zero  the second index is one  and so forth python has six built-in types of sequences  but the most common ones are lists and tuples  which we would see in this tutorial there are certain things you can do with all sequence types these operations include indexing  slicing  adding  multiplying  and checking for membership in addition  python has built-in functions for finding the length of a sequence and for finding its largest and smallest elements python lists  the list is a most versatile datatype available in python which can be written as a list of comma-separated values  items  between square brackets good thing about a list is that items in a list need not all have the same type creating a list is as simple as putting different comma-separated values between squere brackets for example  list1 =  'physics '  'chemistry '  1997  2000  ; list2 =  1  2  3  4  5  ; list3 =  " a "  " b "  " c "  " d "  ; like string indices  list indices start at 0  and lists can be sliced  concatenated and so on accessing values in lists  to access values in lists  use the square brackets for slicing along with the index or indices to obtain value available at that index following is a simple example  # ! /usr/bin/python list1 =  'physics '  'chemistry '  1997  2000  ; list2 =  1  2  3  4  5  6  7  ; print " list1  0   "  list1  0  print " list2  1  5   "  list2  1  5  when the above code is executed  it produces the following result  list1  0   physics chapter 10 list2  1  5    2  3  4  5  updating lists  you can update single or multiple elements of lists by giving the slice on the left-hand side of the assignment operator  and you can add to elements in a list with the append   method following is a simple example  # ! /usr/bin/python list =  'physics '  'chemistry '  1997  2000  ; print " value available at index 2  " print list  2  ; list  2  = 2001 ; print " new value available at index 2  " print list  2  ; note  append   method is discussed in subsequent section when the above code is executed  it produces the following result  value available at index 2  1997 new value available at index 2  2001 delete list elements  to remove a list element  you can use either the del statement if you know exactly which element  s  you are deleting or the remove   method if you do not know following is a simple example  # ! /usr/bin/python list1 =  'physics '  'chemistry '  1997  2000  ; print list1 ; del list1  2  ; print " after deleting value at index 2  " print list1 ; when the above code is executed  it produces the following result   'physics '  'chemistry '  1997  2000  after deleting value at index 2   'physics '  'chemistry '  2000  note  remove   method is discussed in subsequent section basic list operations  lists respond to the + and * operators much like strings ; they mean concatenation and repetition here too  except that the result is a new list  not a string in fact  lists respond to all of the general sequence operations we used on strings in the prior chapter python expression results description len   1  2  3   3 length  1  2  3  +  4  5  6   1  2  3  4  5  6  concatenation  'hi ! '  * 4  'hi ! '  'hi ! '  'hi ! '  'hi ! '  repetition 3 in  1  2  3  true membership for x in  1  2  3   print x  1 2 3 iteration indexing  slicing  and matrixes  because lists are sequences  indexing and slicing work the same way for lists as they do for strings assuming following input  l =  'spam '  'spam '  'spam ! '  python expression results description l  2  'spam ! ' offsets start at zero l  -2  'spam ' negative  count from the right l  1    'spam '  'spam ! '  slicing fetches sections built in list functions & methods  python includes the following list functions  sn function with description 1 cmp  list1  list2  compares elements of both lists 2 len  list  gives the total length of the list 3 max  list  returns item from the list with max value 4 min  list  returns item from the list with min value 5 list  seq  converts a tuple into list the functions are explained below  cmp  list1  list2  description the method cmp   compares elements of two lists syntax following is the syntax for cmp   method  cmp  list1  list2  parameters list1  this is the first list to be compared list2  this is the second list to be compared return value if elements are of the same type  perform the compare and return the result if elements are different types  check to see if they are numbers if numbers  perform numeric coercion if necessary and compare if either element is a number  then the other element is " larger "  numbers are " smallest "   otherwise  types are sorted alphabetically by name if we reached the end of one of the lists  the longer list is " larger " if we exhaust both lists and share the same data  the result is a tie  meaning that 0 is returned example the following example shows the usage of cmp   method # ! /usr/bin/python list1  list2 =  123  'xyz '    456  'abc '  print cmp  list1  list2  ; print cmp  list2  list1  ; list3 = list2 +  786  ; print cmp  list2  list3  let us compile and run the above program  this will produce the following result  -1 1 -1 len  list  description the method len   returns the number of elements in the list syntax following is the syntax for len   method  len  list  parameters list  this is a list for which number of elements to be counted return value this method returns the number of elements in the list example the following example shows the usage of len   method # ! /usr/bin/python list1  list2 =  123  'xyz '  'zara '    456  'abc '  print " first list length  "  len  list1  ; print " second list length  "  len  list2  ; let us compile and run the above program  this will produce the following result  first list length  3 second list length  2 max  list  description the method max returns the elements from the list with maximum value syntax following is the syntax for max   method  max  list  parameters list  this is a list from which max valued element to be returned return value this method returns the elements from the list with maximum value example the following example shows the usage of max   method # ! /usr/bin/python list1  list2 =  123  'xyz '  'zara '  'abc '    456  700  200  print " max value element  "  max  list1  ; print " max value element  "  max  list2  ; let us compile and run the above program  this will produce the following result  max value element  zara max value element  700 min  list  description the method min   returns the elements from the list with minimum value syntax following is the syntax for min   method  min  list  parameters list  this is a list from which min valued element to be returned return value this method returns the elements from the list with minimum value example the following example shows the usage of min   method # ! /usr/bin/python list1  list2 =  123  'xyz '  'zara '  'abc '    456  700  200  print " min value element  "  min  list1  ; print " min value element  "  min  list2  ; let us compile and run the above program  this will produce the following result  min value element  123 min value element  200 list  seq  description the method list   takes sequence types and converts them to lists this is used to convert a given tuple into list note  tuple are very similar to lists with only difference that element values of a tuple can not be changed and tuple elements are put between parentheses instead of square bracket syntax following is the syntax for list   method  list  seq  parameters seq  this is a tuple to be converted into list return value this method returns the list example the following example shows the usage of list   method ! /usr/bin/python atuple =  123  'xyz '  'zara '  'abc '  ; alist = list  atuple  print " list elements  "  alist let us compile and run the above program  this will produce the following result  list elements   123  'xyz '  'zara '  'abc '  python includes the following list methods  sn methods with description 1 list.append  obj  appends object obj to list 2 list.count  obj  returns count of how many times obj occurs in list 3 list.extend  seq  appends the contents of seq to list 4 list.index  obj  returns the lowest index in list that obj appears 5 list.insert  index  obj  inserts object obj into list at offset index 6 list.pop  obj = list  -1   removes and returns last object or obj from list 7 list.remove  obj  removes object obj from list 8 list.reverse   reverses objects of list in place 9 list.sort   func   sorts objects of list  use compare func if given the methods are explained below  list.append  obj  description the method append   appends a passed obj into the existing list syntax following is the syntax for append   method  list.append  obj  parameters obj  this is the object to be appended in the list return value this method does not return any value but updates existing list example the following example shows the usage of append   method # ! /usr/bin/python alist =  123  'xyz '  'zara '  'abc '  ; alist.append  2009  ; print " updated list  "  alist ; let us compile and run the above program  this will produce the following result  updated list   123  'xyz '  'zara '  'abc '  2009  list.count  obj  description the method cmp   compares elements of two lists syntax following is the syntax for cmp   method  cmp  list1  list2  parameters list1  this is the first list to be compared list2  this is the second list to be compared return value if elements are of the same type  perform the compare and return the result if elements are different types  check to see if they are numbers if numbers  perform numeric coercion if necessary and compare if either element is a number  then the other element is " larger "  numbers are " smallest "   otherwise  types are sorted alphabetically by name if we reached the end of one of the lists  the longer list is " larger " if we exhaust both lists and share the same data  the result is a tie  meaning that 0 is returned example the following example shows the usage of cmp   method # ! /usr/bin/python list1  list2 =  123  'xyz '    456  'abc '  print cmp  list1  list2  ; print cmp  list2  list1  ; list3 = list2 +  786  ; print cmp  list2  list3  let us compile and run the above program  this will produce the following result  -1 1 -1 list.extend  seq  description the method extend   appends the contents of seq to list syntax following is the syntax for extend   method  list.extend  seq  parameters seq  this is the list of elements return value this method does not return any value but add the content to existing list example the following example shows the usage of extend   method # ! /usr/bin/python alist =  123  'xyz '  'zara '  'abc '  123  ; blist =  2009  'manni '  ; alist.extend  blist  print " extended list  "  alist ; let us compile and run the above program  this will produce the following result  extended list   123  'xyz '  'zara '  'abc '  123  2009  'manni '  list.index  obj  description the method index   returns the lowest index in list that obj appears syntax following is the syntax for index   method  list.index  obj  parameters obj  this is the object to be find out return value this method returns index of the found object otherwise raise an exception indicating that value does not find example the following example shows the usage of index   method # ! /usr/bin/python alist =  123  'xyz '  'zara '  'abc '  ; print " index for xyz  "  alist.index  'xyz '  ; print " index for zara  "  alist.index  'zara '  ; let us compile and run the above program  this will produce the following result  index for xyz  1 index for xxx  2 list.insert  index  obj  description the method insert   inserts object obj into list at offset index syntax following is the syntax for insert   method  list.insert  index  obj  parameters index  this is the index where the object obj need to be inserted obj  this is the object to be inserted into the given list return value this method does not return any value but it inserts the given element at the given index example the following example shows the usage of insert   method # ! /usr/bin/python alist =  123  'xyz '  'zara '  'abc '  alist.insert  3  2009  print " final list  "  alist let us compile and run the above program  this will produce the following result  final list   123  'xyz '  'zara '  2009  'abc '  list.pop  obj = list   1   description the method pop   removes and returns last object or obj from the list syntax following is the syntax for pop   method  list.pop  obj = list  -1   parameters obj  this is an optional parameter  index of the object to be removed from the list return value this method returns the removed object from the list example the following example shows the usage of pop   method # ! /usr/bin/python alist =  123  'xyz '  'zara '  'abc '  print " a list  "  alist.pop   print " b list  "  alist.pop  2  let us compile and run the above program  this will produce the following result  a list  abc b list  zara list.remove  obj  description the method remove   removes first obj from the list syntax following is the syntax for remove   method  list.remove  obj  parameters obj  this is the object to be removed from the list return value this method does not return any value but removes the given object from the list example the following example shows the usage of remove   method # ! /usr/bin/python alist =  123  'xyz '  'zara '  'abc '  'xyz '  ; alist.remove  'xyz '  ; print " list  "  alist ; alist.remove  'abc '  ; print " list  "  alist ; let us compile and run the above program  this will produce the following result  list   123  'zara '  'abc '  'xyz '  list   123  'zara '  'xyz '  list.reverse   description the method reverse   reverses objects of list in place syntax following is the syntax for reverse   method  list.reverse   parameters na return value this method does not return any value but reverse the given object from the list example the following example shows the usage of reverse   method # ! /usr/bin/python alist =  123  'xyz '  'zara '  'abc '  'xyz '  alist.reverse   print " list  "  alist let us compile and run the above program  this will produce the following result  list   'xyz '  'abc '  'zara '  'xyz '  123  list.sort   func   description the method sort   sorts objects of list  use compare func if given syntax following is the syntax for sort   method  list.sort   func   parameters func  this is an optional parameter  if given the it would use that function to sort the objects of the list return value this method does not return any value but sort the given object from the list example the following example shows the usage of sort   method # ! /usr/bin/python alist =  123  'xyz '  'zara '  'abc '  'xyz '  alist.sort   print " list  "  alist let us compile and run the above program  this will produce the following result  list   123  'abc '  'xyz '  'xyz '  'zara '  python tuples atuple is a sequence of immutable python objects tuples are sequences  just like lists the only difference is that tuples ca n't be changed i.e  tuples are immutable and tuples use parentheses and lists use square brackets creating a tuple is as simple as putting different comma-separated values and optionally you can put these comma-separated values between parentheses also for example  tup1 =  'physics '  'chemistry '  1997  2000  ; tup2 =  1  2  3  4  5  ; tup3 = " a "  " b "  " c "  " d " ; the empty tuple is written as two parentheses containing nothing  tup1 =   ; to write a tuple containing a single value you have to include a comma  even though there is only one value  tup1 =  50   ; like string indices  tuple indices start at 0  and tuples can be sliced  concatenated and so on accessing values in tuples  to access values in tuple  use the square brackets for slicing along with the index or indices to obtain value available at that index following is a simple example  # ! /usr/bin/python tup1 =  'physics '  'chemistry '  1997  2000  ; tup2 =  1  2  3  4  5  6  7  ; print " tup1  0   "  tup1  0  print " tup2  1  5   "  tup2  1  5  when the above code is executed  it produces the following result  tup1  0   physics tup2  1  5    2  3  4  5  chapter 11 updating tuples  tuples are immutable which means you can not update them or change values of tuple elements but we able to take portions of an existing tuples to create a new tuples as follows following is a simple example  # ! /usr/bin/python tup1 =  12  34.56  ; tup2 =  'abc '  'xyz '  ; # following action is not valid for tuples # tup1  0  = 100 ; # so let 's create a new tuple as follows tup3 = tup1 + tup2 ; print tup3 ; when the above code is executed  it produces the following result   12  34.56  'abc '  'xyz '  delete tuple elements  removing individual tuple elements is not possible there is  of course  nothing wrong with putting together another tuple with the undesired elements discarded to explicitly remove an entire tuple  just use the del statement following is a simple example  # ! /usr/bin/python tup =  'physics '  'chemistry '  1997  2000  ; print tup ; del tup ; print " after deleting tup  " print tup ; this will produce following result note an exception raised  this is because after del tup tuple does not exist any more   'physics '  'chemistry '  1997  2000  after deleting tup  traceback  most recent call last   file " test.py "  line 9  in < module > print tup ; nameerror  name 'tup ' is not defined basic tuples operations  tuples respond to the + and * operators much like strings ; they mean concatenation and repetition here too  except that the result is a new tuple  not a string in fact  tuples respond to all of the general sequence operations we used on strings in the prior chapter  python expression results description len   1  2  3   3 length  1  2  3  +  4  5  6   1  2  3  4  5  6  concatenation  'hi ! '  * 4  'hi ! '  'hi ! '  'hi ! '  'hi ! '  repetition 3 in  1  2  3  true membership for x in  1  2  3   print x  1 2 3 iteration indexing  slicing  and matrixes  because tuples are sequences  indexing and slicing work the same way for tuples as they do for strings assuming following input  l =  'spam '  'spam '  'spam ! '  python expression results description l  2  'spam ! ' offsets start at zero l  -2  'spam ' negative  count from the right l  1    'spam '  'spam ! '  slicing fetches sections no enclosing delimiters  any set of multiple objects  comma-separated  written without identifying symbols  i.e  brackets for lists  parentheses for tuples  etc  default to tuples  as indicated in these short examples  # ! /usr/bin/python print 'abc '  -4.24e93  18 + 6.6j  'xyz ' ; x  y = 1  2 ; print " value of x  y  "  x,y ; when the above code is executed  it produces the following result  abc -4.24e + 93  18 + 6.6j  xyz value of x  y  1 2 built in tuple functions  python includes the following tuple functions  sn function with description 1 cmp  tuple1  tuple2  compares elements of both tuples 2 len  tuple  gives the total length of the tuple 3 max  tuple  returns item from the tuple with max value 4 min  tuple  returns item from the tuple with min value 5 tuple  seq  converts a list into tuple the functions are explained below in detail  cmp  tuple1  tuple2  description the method cmp   compares elements of two tuples syntax following is the syntax for cmp   method  cmp  tuple1  tuple2  parameters tuple1  this is the first tuple to be compared tuple2  this is the second tuple to be compared return value if elements are of the same type  perform the compare and return the result if elements are different types  check to see if they are numbers if numbers  perform numeric coercion if necessary and compare if either element is a number  then the other element is " larger "  numbers are " smallest "   otherwise  types are sorted alphabetically by name if we reached the end of one of the tuples  the longer tuple is " larger " if we exhaust both tuples and share the same data  the result is a tie  meaning that 0 is returned example the following example shows the usage of cmp   method # ! /usr/bin/python tuple1  tuple2 =  123  'xyz '    456  'abc '  print cmp  tuple1  tuple2  ; print cmp  tuple2  tuple1  ; tuple3 = tuple2 +  786   ; print cmp  tuple2  tuple3  let us compile and run the above program  this will produce the following result  -1 1 -1 len  tuple  description the method len   returns the number of elements in the tuple syntax following is the syntax for len   method  len  tuple  parameters tuple  this is a tuple for which number of elements to be counted return value this method returns the number of elements in the tuple example the following example shows the usage of len   method # ! /usr/bin/python tuple1  tuple2 =  123  'xyz '  'zara '    456  'abc '  print " first tuple length  "  len  tuple1  ; print " second tuple length  "  len  tuple2  ; let us compile and run the above program  this will produce the following result  first tuple length  3 second tuple length  2 max  tuple  description the method max   returns the elements from the tuple with maximum value syntax following is the syntax for max   method  max  tuple  parameters tuple  this is a tuple from which max valued element to be returned return value this method returns the elements from the tuple with maximum value example the following example shows the usage of max   method # ! /usr/bin/python tuple1  tuple2 =  123  'xyz '  'zara '  'abc '    456  700  200  print " max value element  "  max  tuple1  ; print " max value element  "  max  tuple2  ; let us compile and run the above program  this will produce the following result  max value element  zara max value element  700 min  tuple  description the method min   returns the elements from the tuple with minimum value syntax following is the syntax for min   method  min  tuple  parameters tuple  this is a tuple from which min valued element to be returned return value this method returns the elements from the tuple with minimum value example the following example shows the usage of min   method # ! /usr/bin/python tuple1  tuple2 =  123  'xyz '  'zara '  'abc '    456  700  200  print " min value element  "  min  tuple1  ; print " min value element  "  min  tuple2  ; let us compile and run the above program  this will produce the following result  min value element  123 min value element  200 tuple  seq  description the method tuple   compares elements of two tuples syntax following is the syntax for tuple   method  tuple  seq  parameters seq  this is a tuple to be converted into tuple return value this method returns the tuple example the following example shows the usage of tuple   method # ! /usr/bin/python alist =  123  'xyz '  'zara '  'abc '  ; atuple = tuple  alist  print " tuple elements  "  atuple let us compile and run the above program  this will produce the following result  tuple elements   123  'xyz '  'zara '  'abc '  python dictionary adictionary is mutable and is another container type that can store any number of python objects  including other container types dictionaries consist of pairs  called items  of keys and their corresponding values python dictionaries are also known as associative arrays or hash tables the general syntax of a dictionary is as follows  dict =  'alice '  '2341 '  'beth '  '9102 '  'cecil '  '3258 '  you can create dictionary in the following way as well  dict1 =  'abc '  456  ; dict2 =  'abc '  123  98.6  37  ; each key is separated from its value by a colon     the items are separated by commas  and the whole thing is enclosed in curly braces an empty dictionary without any items is written with just two curly braces  like this     keys are unique within a dictionary while values may not be the values of a dictionary can be of any type  but the keys must be of an immutable data type such as strings  numbers  or tuples accessing values in dictionary  to access dictionary elements  you can use the familiar square brackets along with the key to obtain its value following is a simple example  # ! /usr/bin/python dict =  'name '  'zara '  'age '  7  'class '  'first '  ; print " dict  'name '   "  dict  'name '  ; print " dict  'age '   "  dict  'age '  ; when the above code is executed  it produces the following result  dict  'name '   zara dict  'age '   7 if we attempt to access a data item with a key  which is not part of the dictionary  we get an error as follows  chapter 12 # ! /usr/bin/python dict =  'name '  'zara '  'age '  7  'class '  'first '  ; print " dict  'alice '   "  dict  'alice '  ; when the above code is executed  it produces the following result  dict  'alice '   traceback  most recent call last   file " test.py "  line 4  in < module > print " dict  'alice '   "  dict  'alice '  ; keyerror  'alice ' updating dictionary  you can update a dictionary by adding a new entry or item  i.e  a key-value pair   modifying an existing entry  or deleting an existing entry as shown below in the simple example  # ! /usr/bin/python dict =  'name '  'zara '  'age '  7  'class '  'first '  ; dict  'age '  = 8 ; # update existing entry dict  'school '  = " dps school " ; # add new entry print " dict  'age '   "  dict  'age '  ; print " dict  'school '   "  dict  'school '  ; when the above code is executed  it produces following result  dict  'age '   8 dict  'school '   dps school delete dictionary elements  you can either remove individual dictionary elements or clear the entire contents of a dictionary you can also delete entire dictionary in a single operation to explicitly remove an entire dictionary  just use the del statement following is a simple example  # ! /usr/bin/python dict =  'name '  'zara '  'age '  7  'class '  'first '  ; del dict  'name '  ; # remove entry with key 'name ' dict.clear   ; # remove all entries in dict del dict ; # delete entire dictionary print " dict  'age '   "  dict  'age '  ; print " dict  'school '   "  dict  'school '  ; this will produce the following result note an exception raised  this is because after del dict dictionary does not exist any more  dict  'age '   traceback  most recent call last   file " test.py "  line 8  in < module > print " dict  'age '   "  dict  'age '  ; typeerror  'type ' object is unsubscriptable note  del   method is discussed in subsequent section properties of dictionary keys  dictionary values have no restrictions they can be any arbitrary python object  either standard objects or userdefined objects however  same is not true for the keys there are two important points to remember about dictionary keys   a  more than one entry per key not allowed which means no duplicate key is allowed when duplicate keys encountered during assignment  the last assignment wins following is a simple example  # ! /usr/bin/python dict =  'name '  'zara '  'age '  7  'name '  'manni '  ; print " dict  'name '   "  dict  'name '  ; when the above code is executed  it produces following result  dict  'name '   manni  b  keys must be immutable which means you can use strings  numbers or tuples as dictionary keys but something like  'key '  is not allowed following is a simple example  # ! /usr/bin/python dict =   'name '   'zara '  'age '  7  ; print " dict  'name '   "  dict  'name '  ; when the above code is executed  it produces the following result  traceback  most recent call last   file " test.py "  line 3  in < module > dict =   'name '   'zara '  'age '  7  ; typeerror  list objects are unhashable built in dictionary functions & methods  python includes the following dictionary functions  sn function with description 1 cmp  dict1  dict2  compares elements of both dict 2 len  dict  gives the total length of the dictionary this would be equal to the number of items in the dictionary 3 str  dict  produces a printable string representation of a dictionary 4 type  variable  returns the type of the passed variable if passed variable is dictionary  then it would return a dictionary type the dictionary functions are explained below individually  cmp  dict1  dict2  description the method cmp   compares two dictionaries based on key and values syntax following is the syntax for cmp   method  cmp  dict1  dict2  parameters dict1  this is the first dictionary to be compared with dict2 dict2  this is the second dictionary to be compared with dict1 return value this method returns 0 if both dictionaries are equal  -1 if dict1 < dict2 and 1 if dict1 > dic2 example the following example shows the usage of cmp   method # ! /usr/bin/python dict1 =  'name '  'zara '  'age '  7  ; dict2 =  'name '  'mahnaz '  'age '  27  ; dict3 =  'name '  'abid '  'age '  27  ; dict4 =  'name '  'zara '  'age '  7  ; print " return value  % d " % cmp  dict1  dict2  print " return value  % d " % cmp  dict2  dict3  print " return value  % d " % cmp  dict1  dict4  let us compile and run the above program  this will produce the following result  return value  -1 return value  1 return value  0 len  dict  description the method len   gives the total length of the dictionary this would be equal to the number of items in the dictionary syntax following is the syntax for len   method  len  dict  parameters dict  this is the dictionary  whose length needs to be calculated return value this method returns the length example the following example shows the usage of len   method # ! /usr/bin/python dict =  'name '  'zara '  'age '  7  ; print " length  % d " % len  dict  let us compile and run the above program  this will produce the following result  length  2 str  dict  description the method str   produces a printable string representation of a dictionary syntax following is the syntax for str   method  str  dict  parameters dict  this is the dictionary return value this method returns string representation example the following example shows the usage of str   method # ! /usr/bin/python dict =  'name '  'zara '  'age '  7  ; print " equivalent string  % s " % str  dict  let us compile and run the above program  this will produce the following result  equivalent string   'age '  7  'name '  'zara '  type  variable  description the method type   returns the type of the passed variable if passed variable is dictionary then it would return a dictionary type syntax following is the syntax for type   method  type  dict  parameters dict  this is the dictionary return value this method returns the type of the passed variable example the following example shows the usage of type   method # ! /usr/bin/python dict =  'name '  'zara '  'age '  7  ; print " variable type  % s " % type  dict  let us compile and run the above program  this will produce the following result  variable type  < type 'dict ' > python includes the following dictionary methods  sn methods with description 1 dict.clear   removes all elements of dictionary dict 2 dict.copy   returns a shallow copy of dictionary dict 3 dict.fromkeys   create a new dictionary with keys from seq and values set to value 4 dict.get  key  default = none  for key key  returns value or default if key not in dictionary 5 dict.has_key  key  returns true if key in dictionary dict  false otherwise 6 dict.items   returns a list of dict 's  key  value  tuple pairs 7 dict.keys   returns list of dictionary dict 's keys 8 dict.setdefault  key  default = none  similar to get    but will set dict  key  = default if key is not already in dict 9 dict.update  dict2  adds dictionary dict2 's key-values pairs to dict 10 dict.values   returns list of dictionary dict 's values the methods are explained below individually  dict.clear   description the method clear   removes all items from the dictionary syntax following is the syntax for clear   method  dict.clear   parameters na return value this method does not return any value example the following example shows the usage of clear   method # ! /usr/bin/python dict =  'name '  'zara '  'age '  7  ; print " start len  % d " % len  dict  dict.clear   print " end len  % d " % len  dict  let us compile and run the above program  this will produce the following result  start len  2 end len  0 dict.copy   description the method copy   returns a shallow copy of the dictionary syntax following is the syntax for copy   method  dict.copy   parameters na return value this method returns a shallow copy of the dictionary example the following example shows the usage of copy   method # ! /usr/bin/python dict1 =  'name '  'zara '  'age '  7  ; dict2 = dict1.copy   print " new dictionary  % s " % str  dict2  let us compile and run the above program  this will produce the following result  new dictionary   'age '  7  'name '  'zara '  dict.fromkeys   description the method fromkeys   creates a new dictionary with keys from seq and values set to value syntax following is the syntax for fromkeys   method  dict.fromkeys  seq   value    parameters seq  this is the list of values which would be used for dictionary keys preparation value  this is optional  if provided then value would be set to this value return value this method returns the list example the following example shows the usage of fromkeys   method # ! /usr/bin/python seq =  'name '  'age '  'sex '  dict = dict.fromkeys  seq  print " new dictionary  % s " % str  dict  dict = dict.fromkeys  seq  10  print " new dictionary  % s " % str  dict  let us compile and run the above program  this will produce the following result  new dictionary   'age '  none  'name '  none  'sex '  none  new dictionary   'age '  10  'name '  10  'sex '  10  dict.get  key  default = none  description the method get   returns a value for the given key if key is not available then returns default value none syntax following is the syntax for get   method  dict.get  key  default = none  parameters key  this is the key to be searched in the dictionary default  this is the value to be returned in case key does not exist return value this method return a value for the given key if key is not available  then returns default value none example the following example shows the usage of get   method # ! /usr/bin/python dict =  'name '  'zara '  'age '  7  print " value  % s " % dict.get  'age '  print " value  % s " % dict.get  'sex '  " never "  let us compile and run the above program  this will produce the following result  value  7 value  never dict.has_key  key  description the method has_key   returns true if a given key is available in the dictionary  otherwise it returns a false syntax following is the syntax for has_key   method  dict.has_key  key  parameters key  this is the key to be searched in the dictionary return value this method return true if a given key is available in the dictionary  otherwise it returns a false example the following example shows the usage of has_key   method # ! /usr/bin/python dict =  'name '  'zara '  'age '  7  print " value  % s " % dict.has_key  'age '  print " value  % s " % dict.has_key  'sex '  let us compile and run the above program  this will produce the following result  value  true value  false dict.items   description the method items   returns a list of dict 's  key  value  tuple pairs syntax following is the syntax for items   method  dict.items   parameters na return value this method returns a list of tuple pairs example the following example shows the usage of items   method # ! /usr/bin/python dict =  'name '  'zara '  'age '  7  print " value  % s " % dict.items   let us compile and run the above program  this will produce the following result  value    'age '  7    'name '  'zara '   dict.keys   description the method keys   returns a list of all the available keys in the dictionary syntax following is the syntax for keys   method  dict.keys   parameters na return value this method returns a list of all the available keys in the dictionary example the following example shows the usage of keys   method # ! /usr/bin/python dict =  'name '  'zara '  'age '  7  print " value  % s " % dict.keys   let us compile and run the above program  this will produce the following result  value   'age '  'name '  dict.setdefault  key  default = none  description the method setdefault   is similar to get    but will set dict  key  = default if key is not already in dict syntax following is the syntax for setdefault   method  dict.setdefault  key  default = none  parameters key  this is the key to be searched default  this is the value to be returned in case key is not found return value this method does not return any value example the following example shows the usage of setdefault   method # ! /usr/bin/python dict =  'name '  'zara '  'age '  7  print " value  % s " % dict.setdefault  'age '  none  print " value  % s " % dict.setdefault  'sex '  none  let us compile and run the above program  this will produce the following result  value  7 value  none dict.update  dict2  description the method update   adds dictionary dict2 's key-values pairs in to dict this function does not return anything syntax following is the syntax for update   method  dict.update  dict2  parameters dict2  this is the dictionary to be added into dict return value this method does not return any value example the following example shows the usage of update   method # ! /usr/bin/python dict =  'name '  'zara '  'age '  7  dict2 =  'sex '  'female '  dict.update  dict2  print " value  % s " % dict let us compile and run the above program  this will produce the following result  value   'age '  7  'name '  'zara '  'sex '  'female '  dict.values   description the method values   returns a list of all the values available in a given dictionary syntax following is the syntax for values   method  dict.values   parameters na return value this method returns a list of all the values available in a given dictionary example the following example shows the usage of values   method # ! /usr/bin/python dict =  'name '  'zara '  'age '  7  print " value  % s " % dict.values   let us compile and run the above program  this will produce the following result  value   7  'zara '  python date & time apython program can handle date & time in several ways converting between date formats is a common chore for computers python 's time and calendar modules help track dates and times what is tick time intervals are floating-point numbers in units of seconds particular instants in time are expressed in seconds since 12  00am  january 1  1970  epoch   there is a popular time module available in python which provides functions for working with times  and for converting between representations the function time.time   returns the current system time in ticks since 12  00am  january 1  1970  epoch   example  # ! /usr/bin/python import time ; # this is required to include time module ticks = time.time   print " number of ticks since 12  00am  january 1  1970  "  ticks this would produce a result something as follows  number of ticks since 12  00am  january 1  1970  7186862.73399 date arithmetic is to do with ticks however  dates before the epoch can not be represented in this form dates in the far future also can not be represented this way  the cutoff point is sometime in 2038 for unix and windows what is timetuple many of python 's time functions handle time as a tuple of 9 numbers  as shown below  index field values 0 4-digit year 2008 1 month 1 to 12 chapter 13 2 day 1 to 31 3 hour 0 to 23 4 minute 0 to 59 5 second 0 to 61  60 or 61 are leap-seconds  6 day of week 0 to 6  0 is monday  7 day of year 1 to 366  julian day  8 daylight savings -1  0  1  -1 means library determines dst the above tuple is equivalent to struct_time structure this structure has following attributes  index attributes values 0 tm_year 2008 1 tm_mon 1 to 12 2 tm_mday 1 to 31 3 tm_hour 0 to 23 4 tm_min 0 to 59 5 tm_sec 0 to 61  60 or 61 are leap-seconds  6 tm_wday 0 to 6  0 is monday  7 tm_yday 1 to 366  julian day  8 tm_isdst -1  0  1  -1 means library determines dst getting current time   to translate a time instant from a seconds since the epoch floating-point value into a time-tuple  pass the floatingpoint value to a function  e.g  localtime  that returns a time-tuple with all nine items valid # ! /usr/bin/python import time ; localtime = time.localtime  time.time    print " local current time  "  localtime this would the produce following result  which could be formatted in any other presentable form  local current time  time.struct_time  tm_year = 2008  tm_mon = 5  tm_mday = 15  tm_hour = 12  tm_min = 55  tm_sec = 32  tm_wday = 0  tm_yday = 136  tm_isdst = 1  getting formatted time   you can format any time as per your requirement  but simple method to get time in readable format is asctime    # ! /usr/bin/python import time ; localtime = time.asctime  time.localtime  time.time     print " local current time  "  localtime this would produce the following result  local current time  tue jan 13 10  17  09 2009 getting calendar for a month   the calendar module gives a wide range of methods to play with yearly and monthly calendars here  we print a calendar for a given month  jan 2008   # ! /usr/bin/python import calendar cal = calendar.month  2008  1  print " here is the calendar  " print cal ; this would produce the following result  here is the calendar  january 2008 mo tu we th fr sa su 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 the time module  there is a popular time module available in python which provides functions for working with times and for converting between representations here is the list of all available methods  sn function with description 1 time.altzone   the offset of the local dst timezone  in seconds west of utc  if one is defined this is negative if the local dst timezone is east of utc  as in western europe  including the uk   only use this if daylight is nonzero 2 time.asctime   tupletime   accepts a time-tuple and returns a readable 24-character string such as 'tue dec 11 18  07  14 2008' 3 time.clock   returns the current cpu time as a floating-point number of seconds to measure computational costs of different approaches  the value of time.clock is more useful than that of time.time    4 time.ctime   secs   like asctime  localtime  secs   and without arguments is like asctime   5 time.gmtime   secs   accepts an instant expressed in seconds since the epoch and returns a time-tuple t with the utc time note  t.tm_isdst is always 0 6 time.localtime   secs   accepts an instant expressed in seconds since the epoch and returns a time-tuple t with the local time  t.tm_isdst is 0 or 1  depending on whether dst applies to instant secs by local rules   7 time.mktime  tupletime  accepts an instant expressed as a time-tuple in local time and returns a floating-point value with the instant expressed in seconds since the epoch 8 time.sleep  secs  suspends the calling thread for secs seconds 9 time.strftime  fmt  ,tupletime   accepts an instant expressed as a time-tuple in local time and returns a string representing the instant as specified by string fmt 10 time.strptime  str,fmt = ' % a % b % d % h  % m  % s % y '  parses str according to format string fmt and returns the instant in time-tuple format 11 time.time   returns the current time instant  a floating-point number of seconds since the epoch 12 time.tzset   resets the time conversion rules used by the library routines the environment variable tz specifies how this is done the methods are explained here individually  time.altzone   description the method altzone   is the attribute of the time module this returns the offset of the local dst timezone  in seconds west of utc  if one is defined this is negative if the local dst timezone is east of utc  as in western europe  including the uk   only use this if daylight is nonzero syntax following is the syntax for altzone   method  time.altzone parameters na return value this method returns the offset of the local dst timezone  in seconds west of utc  if one is defined example the following example shows the usage of altzone   method # ! /usr/bin/python import time print " time.altzone % d " % time.altzone let us compile and run the above program  this will produce the following result  time.altzone   25200 time.asctime   tupletime   description the method asctime   converts a tuple or struct_time representing a time as returned by gmtime   or localtime   to a 24-character string of the following form  'tue feb 17 23  21  05 2009' syntax following is the syntax for asctime   method  time.asctime   t    parameters t  this is a tuple of 9 elements or struct_time representing a time as returned by gmtime   or localtime   function return value this method returns 24-character string of the following form  'tue feb 17 23  21  05 2009' example the following example shows the usage of asctime   method # ! /usr/bin/python import time t = time.localtime   print " time.asctime  t   % s " % time.asctime  t  let us compile and run the above program  this will produce the following result on my machine  time.asctime  t   tue feb 17 09  42  58 2009 time.clock   description the method clock   returns the current processor time as a floating point number expressed in seconds on unix the precision depends on that of the c function of the same name  but in any case  this is the function to use for benchmarking python or timing algorithms on windows  this function returns wall-clock seconds elapsed since the first call to this function  as a floating point number  based on the win32 function queryperformancecounter syntax following is the syntax for clock   method  time.clock   parameters na return value this method returns the current processor time as a floating point number expressed in seconds onunix and in windows it returns wall-clock seconds elapsed since the first call to this function  as a floating point number example the following example shows the usage of clock   method # ! /usr/bin/python import time def procedure    time.sleep  2.5  # measure process time t0 = time.clock   procedure   print time.clock    t0  " seconds process time " # measure wall time t0 = time.time   procedure   print time.time    t0  " seconds wall time " let us compile and run the above program  this will produce the following result  0.0 seconds process time 2.50023603439 seconds wall time note  not all systems can measure the true process time on such systems  including windows   clock usually measures the wall time since the program was started time.ctime   secs   description the method ctime   converts a time expressed in seconds since the epoch to a string representing local time if secs is not provided or none  the current time as returned by time   is used this function is equivalent to asctime  localtime  secs    locale information is not used by ctime    syntax following is the syntax for ctime   method  time.ctime   sec   parameters sec  these are the number of seconds to be converted into string representation return value this method does not return any value example the following example shows the usage of ctime   method # ! /usr/bin/python import time print " time.ctime    % s " % time.ctime   let us compile and run the above program  this will produce the following result  time.ctime    tue feb 17 10  00  18 2009 time.gmtime   secs   description the method gmtime   converts a time expressed in seconds since the epoch to a struct_time in utc in which the dst flag is always zero if secs is not provided or none  the current time as returned by time   is used syntax following is the syntax for gmtime   method  time.gmtime   sec   parameters sec  these are the number of seconds to be converted into structure struct_time representation return value this method does not return any value example the following example shows the usage of gmtime   method # ! /usr/bin/python import time print " time.gmtime    % s " % time.gmtime   let us compile and run the above program  this will produce the following result  time.gmtime    time.struct_time  tm_year = 2013  tm_mon = 4  tm_mday = 28  tm_hour = 12  tm_min = 29  tm_sec = 48  tm_wday = 6  tm_yday = 118  tm_isdst = 0  time.localtime   secs   description the method localtime   is similar to gmtime   but it converts number of seconds to local time if secs is not provided or none  the current time as returned by time   is used the dst flag is set to 1 when dst applies to the given time syntax following is the syntax for localtime   method  time.localtime   sec   parameters sec  these are the number of seconds to be converted into structure struct_time representation return value this method does not return any value example the following example shows the usage of localtime   method # ! /usr/bin/python import time print " time.localtime    % s " % time.localtime   let us compile and run the above program  this will produce the following result  time.localtime    time.struct_time  tm_year = 2013  tm_mon = 4  tm_mday = 28  tm_hour = 5  tm_min = 28  tm_sec = 41  tm_wday = 6  tm_yday = 118  tm_isdst = 0  time.mktime  tupletime  description the method mktime   is the inverse function of localtime    its argument is the struct_time or full 9-tuple and it returns a floating point number  for compatibility with time    if the input value can not be represented as a valid time  either overflowerror or valueerror will be raised syntax following is the syntax for mktime   method  time.mktime  t  parameters t  this is the struct_time or full 9-tuple return value this method returns a floating point number  for compatibility with time    example the following example shows the usage of mktime   method # ! /usr/bin/python import time t =  2009  2  17  17  3  38  1  48  0  secs = time.mktime  t  print " time.mktime  t   % f " % secs print " asctime  localtime  secs    % s " % time.asctime  time.localtime  secs   let us compile and run the above program  this will produce the following result  time.mktime  t   1234915418.000000 asctime  localtime  secs    tue feb 17 17  03  38 2009 time.sleep  secs  description the method sleep   suspends execution for the given number of seconds the argument may be a floating point number to indicate a more precise sleep time the actual suspension time may be less than that requested because any caught signal will terminate the sleep   following execution of that signal 's catching routine syntax following is the syntax for sleep   method  time.sleep  t  parameters t  this is the number of seconds execution to be suspended return value this method does not return any value example the following example shows the usage of sleep   method # ! /usr/bin/python import time print " start  % s " % time.ctime   time.sleep  5  print " end  % s " % time.ctime   let us compile and run the above program  this will produce the following result  start  tue feb 17 10  19  18 2009 end  tue feb 17 10  19  23 2009 time.strftime  fmt  ,tupletime   description the method strftime   converts a tuple or struct_time representing a time as returned by gmtime   or localtime   to a string as specified by the format argument if t is not provided  the current time as returned by localtime   is used format must be a string an exception valueerror is raised if any field in t is outside of the allowed range syntax following is the syntax for strftime   method  time.strftime  format   t   parameters t  this is the time in number of seconds to be formatted format  this is the directive which would be used to format given time the following directives can be embedded in the format string  directive % a  abbreviated weekday name % a  full weekday name % b  abbreviated month name % b  full month name % c  preferred date and time representation % c  century number  the year divided by 100  range 00 to 99  % d  day of the month  01 to 31  % d  same as % m/ % d/ % y % e  day of the month  1 to 31  % g  like % g  but without the century % g  4-digit year corresponding to the iso week number  see % v   % h  same as % b % h  hour  using a 24-hour clock  00 to 23  % i  hour  using a 12-hour clock  01 to 12  % j  day of the year  001 to 366  % m  month  01 to 12  % m  minute % n  newline character % p  either am or pm according to the given time value % r  time in a.m and p.m notation % r  time in 24 hour notation % s  second % t  tab character % t  current time  equal to % h  % m  % s % u  weekday as a number  1 to 7   monday = 1 warning  in sun solaris sunday = 1 % u  week number of the current year  starting with the first sunday as the first day of the first week % v  the iso 8601 week number of the current year  01 to 53   where week 1 is the first week that has at least 4 days in the current year  and with monday as the first day of the week % w  week number of the current year  starting with the first monday as the first day of the first week % w  day of the week as a decimal  sunday = 0 % x  preferred date representation without the time % x  preferred time representation without the date % y  year without a century  range 00 to 99  % y  year including the century % z or % z  time zone or name or abbreviation % %  a literal % character return value this method does not return any value example the following example shows the usage of strftime   method # ! /usr/bin/python import time t =  2009  2  17  17  3  38  1  48  0  t = time.mktime  t  print time.strftime  " % b % d % y % h  % m  % s "  time.gmtime  t   let us compile and run the above program  this will produce the following result  feb 18 2009 00  03  38 time.strptime  str,fmt = ' % a % b % d % h  % m  % s % y '  description the method strptime   parses a string representing a time according to a format the return value is a struct_time as returned by gmtime   or localtime    the format parameter uses the same directives as those used by strftime   ; it defaults to " % a % b % d % h  % m  % s % y " which matches the formatting returned by ctime    if string can not be parsed according to format  or if it has excess data after parsing  valueerror is raised syntax following is the syntax for strptime   method  time.strptime  string   format   parameters string  this is the time in string format which would be parsed based on the given format format  this is the directive which would be used to parse the given string the following directives can be embedded in the format string  directive % a  abbreviated weekday name % a  full weekday name % b  abbreviated month name % b  full month name % c  preferred date and time representation % c  century number  the year divided by 100  range 00 to 99  % d  day of the month  01 to 31  % d  same as % m/ % d/ % y % e  day of the month  1 to 31  % g  like % g  but without the century % g  4-digit year corresponding to the iso week number  see % v   % h  same as % b % h  hour  using a 24-hour clock  00 to 23  % i  hour  using a 12-hour clock  01 to 12  % j  day of the year  001 to 366  % m  month  01 to 12  % m  minute % n  newline character % p  either am or pm according to the given time value % r  time in a.m and p.m notation % r  time in 24 hour notation % s  second % t  tab character % t  current time  equal to % h  % m  % s % u  weekday as a number  1 to 7   monday = 1 warning  in sun solaris sunday = 1 % u  week number of the current year  starting with the first sunday as the first day of the first week % v  the iso 8601 week number of the current year  01 to 53   where week 1 is the first week that has at least 4 days in the current year  and with monday as the first day of the week % w  week number of the current year  starting with the first monday as the first day of the first week % w  day of the week as a decimal  sunday = 0 % x  preferred date representation without the time % x  preferred time representation without the date % y  year without a century  range 00 to 99  % y  year including the century % z or % z  time zone or name or abbreviation % %  a literal % character return value this return value is struct_time as returned by gmtime   or localtime    example the following example shows the usage of strptime   method # ! /usr/bin/python import time struct_time = time.strptime  " 30 nov 00 "  " % d % b % y "  print " returned tuple  % s " % struct_time let us compile and run the above program  this will produce the following result  returned tuple   2000  11  30  0  0  0  3  335  -1  time.time   description the method time   returns the time as a floating point number expressed in seconds since the epoch  in utc note  even though the time is always returned as a floating point number  not all systems provide time with a better precision than 1 second while this function normally returns non-decreasing values  it can return a lower value than a previous call if the system clock has been set back between the two calls syntax following is the syntax for time   method  time.time   parameters na return value this method returns the time as a floating point number expressed in seconds since the epoch  in utc example the following example shows the usage of time   method # ! /usr/bin/python import time print " time.time    % f " % time.time   print time.localtime  time.time    print time.asctime  time.localtime  time.time     let us compile and run the above program  this will produce the following result  time.time    1234892919.655932 time.struct_time  tm_year = 2009  tm_mon = 2  tm_mday = 17  tm_hour = 10  tm_min = 48  tm_sec = 39  tm_wday = 1  tm_yday = 48  tm_isdst = 0  tue feb 17 10  48  39 2009 time.tzset   description the method tzset   resets the time conversion rules used by the library routines the environment variable tz specifies how this is done the standard format of the tz environment variable is  whitespace added for clarity   std offset  dst  offset  ,start  /time   end  /time     std and dst  three or more alphanumerics giving the timezone abbreviations these will be propagated into time.tzname offset  the offset has the form  .hh   mm   ss    this indicates the value added the local time to arrive at utc if preceded by a ' '  the timezone is east of the prime meridian ; otherwise  it is west if no offset follows dst  summer time is assumed to be one hour ahead of standard time start  /time   end  /time   indicates when to change to and back from dst the format of the start and end dates are one of the following  jn  the julian day n  1 < = n < = 365   leap days are not counted  so in all years february 28 is day 59 and march 1 is day 60 n  the zero-based julian day  0 < = n < = 365   leap days are counted  and it is possible to refer to february 29 mm.n.d  the d'th day  0 < = d < = 6  or week n of month m of the year  1 < = n < = 5  1 < = m < = 12  where week 5 means 'the last d day in month m ' which may occur in either the fourth or the fifth week   week 1 is the first week in which the d'th day occurs day zero is sunday time  this has the same format as offset except that no leading sign  ' ' or ' + '  is allowed the default  if time is not given  is 02  00  00 syntax following is the syntax for tzset   method  time.tzset   parameters na return value this method does not return any value example the following example shows the usage of tzset   method # ! /usr/bin/python import time import os os.environ  'tz '  = 'est + 05edt,m4.1.0,m10.5.0 ' time.tzset   print time.strftime  ' % x % x % z '  os.environ  'tz '  = 'aest-10aedt-11,m10.5.0,m3.5.0 ' time.tzset   print time.strftime  ' % x % x % z '  let us compile and run the above program  this will produce the following result  13  00  40 02/17/09 est 05  00  40 02/18/09 aedt there are following two important attributes available with time module  sn attribute with description 1 time.timezone attribute time.timezone is the offset in seconds of the local time zone  without dst  from utc  > 0 in the americas ; < = 0 in most of europe  asia  africa   2 time.tzname attribute time.tzname is a pair of locale-dependent strings  which are the names of the local time zone without and with dst  respectively the calendar module the calendar module supplies calendar-related functions  including functions to print a text calendar for a given month or year by default  calendar takes monday as the first day of the week and sunday as the last one to change this  call calendar.setfirstweekday   function here is a list of functions available with the calendar module  sn function with description 1 calendar.calendar  year,w = 2,l = 1,c = 6  returns a multiline string with a calendar for year year formatted into three columns separated by c spaces w is the width in characters of each date ; each line has length 21 * w + 18 + 2 * c l is the number of lines for each week 2 calendar.firstweekday   returns the current setting for the weekday that starts each week by default  when calendar is first imported  this is 0  meaning monday 3 calendar.isleap  year  returns true if year is a leap year ; otherwise  false 4 calendar.leapdays  y1,y2  returns the total number of leap days in the years within range  y1,y2   5 calendar.month  year,month,w = 2,l = 1  returns a multiline string with a calendar for month month of year year  one line per week plus two header lines w is the width in characters of each date ; each line has length 7 * w + 6 l is the number of lines for each week 6 calendar.monthcalendar  year,month  returns a list of lists of ints each sublist denotes a week days outside month month of year year are set to 0 ; days within the month are set to their day-of-month  1 and up 7 calendar.monthrange  year,month  returns two integers the first one is the code of the weekday for the first day of the month month in year year ; the second one is the number of days in the month weekday codes are 0  monday  to 6  sunday  ; month numbers are 1 to 12 8 calendar.prcal  year,w = 2,l = 1,c = 6  like print calendar.calendar  year,w,l,c   9 calendar.prmonth  year,month,w = 2,l = 1  like print calendar.month  year,month,w,l   10 calendar.setfirstweekday  weekday  sets the first day of each week to weekday code weekday weekday codes are 0  monday  to 6  sunday   11 calendar.timegm  tupletime  the inverse of time.gmtime  accepts a time instant in time-tuple form and returns the same instant as a floating-point number of seconds since the epoch 12 calendar.weekday  year,month,day  returns the weekday code for the given date weekday codes are 0  monday  to 6  sunday  ; month numbers are 1  january  to 12  december   other modules & functions  if you are intereste d  then here you would find a list of other important modules and functions to play with date & time in python  the datetime module the pytz module the dateutil module python function afunction is a block of organized  reusable code that is used to perform a single  related action functions provide better modularity for your application and a high degree of code reusing as you already know  python gives you many built-in functions like print    etc  but you can also create your own functions these functions are called user-defined functions defining a function you can define functions to provide the required functionality here are simple rules to define a function in python function blocks begin with the keyword def followed by the function name and parentheses      any input parameters or arguments should be placed within these parentheses you can also define parameters inside these parentheses the first statement of a function can be an optional statement  the documentation string of the function or docstring the code block within every function starts with a colon    and is indented the statement return  expression  exits a function  optionally passing back an expression to the caller a return statement with no arguments is the same as return none syntax  def functionname  parameters   " function_docstring " function_suite return  expression  by default  parameters have a positional behavior and you need to inform them in the same order that they were defined example  here is the simplest form of a python function this function takes a string as input parameter and prints it on standard screen chapter 14 def printme  str   " this prints a passed string into this function " print str return calling a function defining a function only gives it a name  specifies the parameters that are to be included in the function and structures the blocks of code once the basic structure of a function is finalized  you can execute it by calling it from another function or directly from the python prompt following is the example to call printme   function  # ! /usr/bin/python # function definition is here def printme  str   " this prints a passed string into this function " print str ; return ; # now you can call printme function printme  " i 'm first call to user defined function ! "  ; printme  " again second call to the same function "  ; when the above code is executed  it produces the following result  i 'm first call to user defined function ! again second call to the same function pass by reference vs value all parameters  arguments  in the python language are passed by reference it means if you change what a parameter refers to within a function  the change also reflects back in the calling function for example  # ! /usr/bin/python # function definition is here def changeme  mylist   " this changes a passed list into this function " mylist.append   1,2,3,4   ; print " values inside the function  "  mylist return # now you can call changeme function mylist =  10,20,30  ; changeme  mylist  ; print " values outside the function  "  mylist here  we are maintaining reference of the passed object and appending values in the same object so  this would produce the following result  values inside the function   10  20  30   1  2  3  4   values outside the function   10  20  30   1  2  3  4   there is one more example where argument is being passed by reference and the reference is being overwritten inside the called function # ! /usr/bin/python # function definition is here def changeme  mylist   " this changes a passed list into this function " mylist =  1,2,3,4  ; # this would assign new reference in mylist print " values inside the function  "  mylist return # now you can call changeme function mylist =  10,20,30  ; changeme  mylist  ; print " values outside the function  "  mylist the parameter mylist is local to the function changeme changing mylist within the function does not affect mylist the function accomplishes nothing and finally this would produce the following result  values inside the function   1  2  3  4  values outside the function   10  20  30  function arguments  you can call a function by using the following types of formal arguments  required arguments keyword arguments default arguments variable-length arguments required arguments  required arguments are the arguments passed to a function in correct positional order here  the number of arguments in the function call should match exactly with the function definition to call the function printme    you definitely need to pass one argument  otherwise it would give a syntax error as follows  # ! /usr/bin/python # function definition is here def printme  str   " this prints a passed string into this function " print str ; return ; # now you can call printme function printme   ; when the above code is executed  it produces the following result  traceback  most recent call last   file " test.py "  line 11  in < module > printme   ; typeerror  printme   takes exactly 1 argument  0 given  keyword arguments  keyword arguments are related to the function calls when you use keyword arguments in a function call  the caller identifies the arguments by the parameter name this allows you to skip arguments or place them out of order because the python interpreter is able to use the keywords provided to match the values with parameters you can also make keyword calls to the printme   function in the following ways  # ! /usr/bin/python # function definition is here def printme  str   " this prints a passed string into this function " print str ; return ; # now you can call printme function printme  str = " my string "  ; when the above code is executed  it produces the following result  my string following example gives more clear picture note  here order of the parameter does not matter # ! /usr/bin/python # function definition is here def printinfo  name  age   " this prints a passed info into this function " print " name  "  name ; print " age "  age ; return ; # now you can call printinfo function printinfo  age = 50  name = " miki "  ; when the above code is executed  it produces the following result  name  miki age 50 default arguments  a default argument is an argument that assumes a default value if a value is not provided in the function call for that argument following example gives an idea on default arguments  it would print default age if it is not passed  # ! /usr/bin/python # function definition is here def printinfo  name  age = 35   " this prints a passed info into this function " print " name  "  name ; print " age "  age ; return ; # now you can call printinfo function printinfo  age = 50  name = " miki "  ; printinfo  name = " miki "  ; when the above code is executed  it produces the following result  name  miki age 50 name  miki age 35 variable length arguments  you may need to process a function for more arguments than you specified while defining the function these arguments are called variable-length arguments and are not named in the function definition  unlike required and default arguments the general syntax for a function with non-keyword variable arguments is this  def functionname   formal_args   * var_args_tuple   " function_docstring " function_suite return  expression  an asterisk  *  is placed before the variable name that will hold the values of all nonkeyword variable arguments this tuple remains empty if no additional arguments are specified during the function call following is a simple example  # ! /usr/bin/python # function definition is here def printinfo  arg1  * vartuple   " this prints a variable passed arguments " print " output is  " print arg1 for var in vartuple  print var return ; # now you can call printinfo function printinfo  10  ; printinfo  70  60  50  ; when the above code is executed  it produces the following result  output is  10 output is  70 60 50 the anonymous functions  you can use the lambda keyword to create small anonymous functions these functions are called anonymous because they are not declared in the standard manner by using the def keyword lambda forms can take any number of arguments but return just one value in the form of an expression they can not contain commands or multiple expressions an anonymous function can not be a direct call to print because lambda requires an expression lambda functions have their own local namespace and can not access variables other than those in their parameter list and those in the global namespace although it appears that lambda 's are a one-line version of a function  they are not equivalent to inline statements in c or c + +  whose purpose is by passing function stack allocation during invocation for performance reasons syntax  the syntax of lambda functions contains only a single statement  which is as follows  lambda  arg1  ,arg2,.....argn    expression following is the example to show how lambda form of function works  # ! /usr/bin/python # function definition is here sum = lambda arg1  arg2  arg1 + arg2 ; # now you can call sum as a function print " value of total  "  sum  10  20  print " value of total  "  sum  20  20  when the above code is executed  it produces the following result  value of total  30 value of total  40 the return statement  the statement return  expression  exits a function  optionally passing back an expression to the caller a return statement with no arguments is the same as return none all the above examples are not returning any value  but if you like you can return a value from a function as follows  # ! /usr/bin/python # function definition is here def sum  arg1  arg2   # add both the parameters and return them " total = arg1 + arg2 print " inside the function  "  total return total ; # now you can call sum function total = sum  10  20  ; print " outside the function  "  total when the above code is executed  it produces the following result  inside the function  30 outside the function  30 scope of variables  all variables in a program may not be accessible at all locations in that program this depends on where you have declared a variable the scope of a variable determines the portion of the program where you can access a particular identifier there are two basic scopes of variables in python  global variables local variables global vs local variables  variables that are defined inside a function body have a local scope  and those defined outside have a global scope this means that local variables can be accessed only inside the function in which they are declared  whereas global variables can be accessed throughout the program body by all functions when you call a function  the variables declared inside it are brought into scope following is a simple example  # ! /usr/bin/python total = 0 ; # this is global variable # function definition is here def sum  arg1  arg2   # add both the parameters and return them " total = arg1 + arg2 ; # here total is local variable print " inside the function local total  "  total return total ; # now you can call sum function sum  10  20  ; print " outside the function global total  "  total when the above code is executed  it produces the following result  inside the function local total  30 outside the function global total  0 python modules amodule allows you to logically organize your python code grouping related code into a module makes the code easier to understand and use a module is a python object with arbitrarily named attributes that you can bind and reference  a module is a file consisting of python code a module can define functions  classes and variables a module can also include runnable code example  the python code for a module named aname normally resides in a file named aname.py here 's an example of a simple module  hello.py def print_func  par   print " hello  "  par return the import statement  you can use any python source file as a module by executing an import statement in some other python source file the import has the following syntax  import module1   module2   modulen  when the interpreter encounters an import statement  it imports the module if the module is present in the search path a search path is a list of directories that the interpreter searches before importing a module for example  to import the module hello.py  you need to put the following command at the top of the script  # ! /usr/bin/python # import module hello import hello # now you can call defined function that module as follows hello.print_func  " zara "  when the above code is executed  it produces the following result  hello  zara chapter 15 a module is loaded only once  regardless of the number of times it is imported this prevents the module execution from happening over and over again if multiple imports occur the from...import statement python 's from statement lets you import specific attributes from a module into the current namespace the from...import has the following syntax  from modname import name1   name2    namen   for example  to import the function fibonacci from the module fib  use the following statement  from fib import fibonacci this statement does not import the entire module fib into the current namespace ; it just introduces the item fibonacci from the module fib into the global symbol table of the importing module the from...import * statement  it is also possible to import all names from a module into the current namespace by using the following import statement  from modname import * this provides an way to import all the items from a module into the current namespace ; however  this statement should be used sparingly locating modules  when you import a module  the python interpreter searches for the module in the following sequences  the current directory if the module is n't found  python then searches each directory in the shell variable pythonpath if all else fails  python checks the default path on unix  this default path is normally /usr/local/lib/python/ the module search path is stored in the system module sys as the sys.path variable the sys.path variable contains the current directory  pythonpath  and the installation-dependent default the pythonpath variable  the pythonpath is an environment variable  consisting of a list of directories the syntax of pythonpath is the same as that of the shell variable path here is a typical pythonpath from a windows system  set pythonpath = c  \ python20 \ lib ; and here is a typical pythonpath from a unix system  set pythonpath = /usr/local/lib/python namespaces and scoping  variables are names  identifiers  that map to objects a namespace is a dictionary of variable names  keys  and their corresponding objects  values   a python statement can access variables in a local namespace and in the global namespace if a local and a global variable have the same name  the local variable shadows the global variable each function has its own local namespace class methods follow the same scoping rule as ordinary functions python makes educated guesses on whether variables are local or global it assumes that any variable assigned a value in a function is local therefore  in order to assign a value to a global variable within a function  you must first use the global statement the statement global varname tells python that varname is a global variable python stops searching the local namespace for the variable for example  we define a variable money in the global namespace within the function money  we assign money a value  therefore python assumes money as a local variable however  we accessed the value of the local variable money before setting it  so an unboundlocalerror is the result uncommenting the global statement fixes the problem # ! /usr/bin/python money = 2000 def addmoney    # uncomment the following line to fix the code  # global money money = money + 1 print money addmoney   print money the dir   function  the dir   built-in function returns a sorted list of strings containing the names defined by a module the list contains the names of all the modules  variables and functions that are defined in a module following is a simple example  # ! /usr/bin/python # import built-in module math import math content = dir  math  print content ; when the above code is executed  it produces the following result   '__doc__ '  '__file__ '  '__name__ '  'acos '  'asin '  'atan '  'atan2 '  'ceil '  'cos '  'cosh '  'degrees '  'e '  'exp '  'fabs '  'floor '  'fmod '  'frexp '  'hypot '  'ldexp '  'log '  'log10 '  'modf '  'pi '  'pow '  'radians '  'sin '  'sinh '  'sqrt '  'tan '  'tanh '  here  the special string variable __name__ is the module 's name  and __file__ is the filename from which the module was loaded the globals   and locals   functions  the globals   and locals   functions can be used to return the names in the global and local namespaces depending on the location from where they are called if locals   is called from within a function  it will return all the names that can be accessed locally from that function if globals   is called from within a function  it will return all the names that can be accessed globally from that function the return type of both these functions is dictionary therefore  names can be extracted using the keys   function the reload   function  when the module is imported into a script  the code in the top-level portion of a module is executed only once therefore  if you want to reexecute the top-level code in a module  you can use the reload   function the reload   function imports a previously imported module again the syntax of the reload   function is this  reload  module_name  here  module_name is the name of the module you want to reload and not the string containing the module name for example  to reload hello module  do the following  reload  hello  packages in python  a package is a hierarchical file directory structure that defines a single python application environment that consists of modules and subpackages and sub-subpackages  and so on consider a file pots.py available in phone directory this file has following line of source code  # ! /usr/bin/python def pots    print " i 'm pots phone " similar way  we have another two files having different functions with the same name as above  phone/isdn.py file having function isdn   phone/g3.py file having function g3   now  create one more file __init__.py in phone directory  phone/__init__.py to make all of your functions available when you 've imported phone  you need to put explicit import statements in __init__.py as follows  from pots import pots from isdn import isdn from g3 import g3 after you 've added these lines to __init__.py  you have all of these classes available when you 've imported the phone package # ! /usr/bin/python # now import your phone package import phone phone.pots   phone.isdn   phone.g3   when the above code is executed  it produces the following result  i 'm pots phone i 'm 3g phone i 'm isdn phone in the above example  we have taken example of a single functions in each file  but you can keep multiple functions in your files you can also define different python classes in those files and then you can create your packages out of those classes python files i/o this chapter will cover all the basic i/o functions available in python for more functions  please refer to standard python documentation printing to the screen  the simplest way to produce output is using the print statement where you can pass zero or more expressions separated by commas this function converts the expressions you pass into a string and writes the result to standard output as follows  # ! /usr/bin/python print " python is really a great language  "  " is n't it " ; this would produce the following result on your standard screen  python is really a great language  is n't it reading keyboard input  python provides two built-in functions to read a line of text from standard input  which by default comes from the keyboard these functions are  raw_input input the raw_input function  the raw_input   prompt   function reads one line from standard input and returns it as a string  removing the trailing newline   # ! /usr/bin/python str = raw_input  " enter your input  "  ; print " received input is  "  str this would prompt you to enter any string and it would display same string on the screen when i typed " hello python ! "  its output is like this  chapter 16 enter your input  hello python received input is  hello python the input function  the input   prompt   function is equivalent to raw_input  except that it assumes the input is a valid python expression and returns the evaluated result to you # ! /usr/bin/python str = input  " enter your input  "  ; print " received input is  "  str this would produce the following result against the entered input  enter your input   x * 5 for x in range  2,10,2   recieved input is   10  20  30  40  opening and closing files  until now  you have been reading and writing to the standard input and output now  we will see how to play with actual data files python provides basic functions and methods necessary to manipulate files by default you can do your most of the file manipulation using a file object the open function  before you can read or write a file  you have to open it using python 's built-in open   function this function creates a file object  which would be utilized to call other support methods associated with it syntax  file object = open  file_name   access_mode    buffering   here is paramters ' detail  file_name  the file_name argument is a string value that contains the name of the file that you want to access access_mode  the access_mode determines the mode in which the file has to be opened  i.e  read  write  append  etc a complete list of possible values is given below in the table this is optional parameter and the default file access mode is read  r   buffering  if the buffering value is set to 0  no buffering will take place if the buffering value is 1  line buffering will be performed while accessing a file if you specify the buffering value as an integer greater than 1  then buffering action will be performed with the indicated buffer size if negative  the buffer size is the system default  default behavior   here is a list of the different modes of opening a file  modes description r opens a file for reading only the file pointer is placed at the beginning of the file this is the default mode rb opens a file for reading only in binary format the file pointer is placed at the beginning of the file this is the default mode r + opens a file for both reading and writing the file pointer will be at the beginning of the file rb + opens a file for both reading and writing in binary format the file pointer will be at the beginning of the file w opens a file for writing only overwrites the file if the file exists if the file does not exist  creates a new file for writing wb opens a file for writing only in binary format overwrites the file if the file exists if the file does not exist  creates a new file for writing w + opens a file for both writing and reading overwrites the existing file if the file exists if the file does not exist  creates a new file for reading and writing wb + opens a file for both writing and reading in binary format overwrites the existing file if the file exists if the file does not exist  creates a new file for reading and writing a opens a file for appending the file pointer is at the end of the file if the file exists that is  the file is in the append mode if the file does not exist  it creates a new file for writing ab opens a file for appending in binary format the file pointer is at the end of the file if the file exists that is  the file is in the append mode if the file does not exist  it creates a new file for writing a + opens a file for both appending and reading the file pointer is at the end of the file if the file exists the file opens in the append mode if the file does not exist  it creates a new file for reading and writing ab + opens a file for both appending and reading in binary format the file pointer is at the end of the file if the file exists the file opens in the append mode if the file does not exist  it creates a new file for reading and writing the file object attributes  once a file is opened and you have one file object  you can get various information related to that file here is a list of all attributes related to file object  attribute description file.closed returns true if file is closed  false otherwise file.mode returns access mode with which file was opened file.name returns name of the file file.softspace returns false if space explicitly required with print  true otherwise example  # ! /usr/bin/python # open a file fo = open  " foo.txt "  " wb "  print " name of the file  "  fo.name print " closed or not  "  fo.closed print " opening mode  "  fo.mode print " softspace flag  "  fo.softspace this would produce the following result  name of the file  foo.txt closed or not  false opening mode  wb softspace flag  0 the close   method  the close   method of a file object flushes any unwritten information and closes the file object  after which no more writing can be done python automatically closes a file when the reference object of a file is reassigned to another file it is a good practice to use the close   method to close a file syntax  fileobject.close   ; example  # ! /usr/bin/python # open a file fo = open  " foo.txt "  " wb "  print " name of the file  "  fo.name # close opened file fo.close   this would produce the following result  name of the file  foo.txt reading and writing files  the file object provides a set of access methods to make our lives easier we would see how to use read   and write   methods to read and write files the write   method  the write   method writes any string to an open file it is important to note that python strings can have binary data and not just text the write   method does not add a newline character  ' \ n '  to the end of the string  syntax  fileobject.write  string  ; here  passed parameter is the content to be written into the opened file example  # ! /usr/bin/python # open a file fo = open  " foo.txt "  " wb "  fo.write  " python is a great language \ nyeah its great ! ! \ n "  ; # close opened file fo.close   the above method would create foo.txt file and would write given content in that file and finally it would close that file if you would open this file  it would have following content  python is a great language yeah its great ! ! the read   method  the read   method reads a string from an open file it is important to note that python strings can have binary data and not just text syntax  fileobject.read   count   ; here  passed parameter is the number of bytes to be read from the opened file this method starts reading from the beginning of the file and if count is missing  then it tries to read as much as possible  maybe until the end of file example  let 's take a file foo.txt  which we have created above # ! /usr/bin/python # open a file fo = open  " foo.txt "  " r + "  str = fo.read  10  ; print " read string is  "  str # close opened file fo.close   this would produce the following result  read string is  python is file positions  the tell   method tells you the current position within the file ; in other words  the next read or write will occur at that many bytes from the beginning of the file the seek  offset   from   method changes the current file position the offset argument indicates the number of bytes to be moved the from argument specifies the reference position from where the bytes are to be moved if from is set to 0  it means use the beginning of the file as the reference position and 1 means use the current position as the reference position and if it is set to 2 then the end of the file would be taken as the reference position example  let 's take a file foo.txt  which we have created above # ! /usr/bin/python # open a file fo = open  " foo.txt "  " r + "  str = fo.read  10  ; print " read string is  "  str # check current position position = fo.tell   ; print " current file position  "  position # reposition pointer at the beginning once again position = fo.seek  0  0  ; str = fo.read  10  ; print " again read string is  "  str # close opened file fo.close   this would produce the following result  read string is  python is current file position  10 again read string is  python is renaming and deleting files  python os module provides methods that help you perform file-processing operations  such as renaming and deleting files to use this module you need to import it first and then you can call any related functions the rename   method  the rename   method takes two arguments  the current filename and the new filename syntax  os.rename  current_file_name  new_file_name  example  following is the example to rename an existing file test1.txt  # ! /usr/bin/python import os # rename a file from test1.txt to test2.txt os.rename  " test1.txt "  " test2.txt "  the remove   method  you can use the remove   method to delete files by supplying the name of the file to be deleted as the argument syntax  os.remove  file_name  example  following is the example to delete an existing file test2.txt  # ! /usr/bin/python import os # delete file test2.txt os.remove  " text2.txt "  directories in python  all files are contained within various directories  and python has no problem handling these too the os module has several methods that help you create  remove and change directories the mkdir   method  you can use the mkdir   method of the os module to create directories in the current directory you need to supply an argument to this method which contains the name of the directory to be created syntax  os.mkdir  " newdir "  example  following is the example to create a directory test in the current directory  # ! /usr/bin/python import os # create a directory " test " os.mkdir  " test "  the chdir   method  you can use the chdir   method to change the current directory the chdir   method takes an argument  which is the name of the directory that you want to make the current directory syntax  os.chdir  " newdir "  example  following is the example to go into " /home/newdir " directory  # ! /usr/bin/python import os # changing a directory to " /home/newdir " os.chdir  " /home/newdir "  the getcwd   method  the getcwd   method displays the current working directory syntax  os.getcwd   example  following is the example to give current directory  # ! /usr/bin/python import os # this would give location of the current directory os.getcwd   the rmdir   method  the rmdir   method deletes the directory  which is passed as an argument in the method before removing a directory  all the contents in it should be removed syntax  os.rmdir  'dirname '  example  following is the example to remove " /tmp/test " directory it is required to give fully qualified name of the directory  otherwise it would search for that directory in the current directory # ! /usr/bin/python import os # this would remove " /tmp/test " directory os.rmdir  " /tmp/test "  file & directory related methods  there are three important sources  which provide a wide range of utility methods to handle and manipulate files & directories on windows and unix operating systems they are as follows  file object methods  the file object provides functions to manipulate files os object methods  this provides methods to process files as well as directories file object methods a file object is created using open function and here is a list of functions  which can be called on this object  sn methods with description 1 file.close   closes the file a closed file can not be read or written any more 2 file.flush   flushes the internal buffer  like stdio 's fflush this may be a no-op on some file-like objects 3 file.fileno   returns the integer file descriptor that is used by the underlying implementation to request i/o operations from the operating system 4 file.isatty   returns true if the file is connected to a tty  -like  device  else false 5 file.next   returns the next line from the file each time it is being called 6 file.read   size   reads at most size bytes from the file  less if the read hits eof before obtaining size bytes   7 file.readline   size   reads one entire line from the file a trailing newline character is kept in the string 8 file.readlines   sizehint   reads until eof using readline   and return a list containing the lines if the optional sizehint argument is present  instead of reading up to eof  whole lines totalling approximately sizehint bytes  possibly after rounding up to an internal buffer size  are read 9 file.seek  offset   whence   sets the file 's current position 10 file.tell   returns the file 's current position 11 file.truncate   size   truncates the file 's size if the optional size argument is present  the file is truncated to  at most  that size 12 file.write  str  writes a string to the file there is no return value 13 file.writelines  sequence  writes a sequence of strings to the file the sequence can be any iterable object producing strings  typically a list of strings file.close   description the method close   closes the opened file a closed file can not be read or written any more any operation  which requires that the file be opened will raise a valueerror after the file has been closed calling close   more than once is allowed python automatically closes a file when the reference object of a file is reassigned to another file it is a good practice to use the close   method to close a file syntax following is the syntax for close   method  fileobject.close   ; parameters na return value this method does not return any value example the following example shows the usage of close   method # ! /usr/bin/python # open a file fo = open  " foo.txt "  " wb "  print " name of the file  "  fo.name # close opened file fo.close   let us compile and run the above program  this will produce the following result  name of the file  foo.txt file.flush   description the method flush   flushes the internal buffer  like stdio 's fflush this may be a no-op on some file-like objects python automatically flushes the files when closing them but you may want to flush the data before closing any file syntax following is the syntax for flush   method  fileobject.flush   ; parameters na return value this method does not return any value example the following example shows the usage of flush   method # ! /usr/bin/python # open a file fo = open  " foo.txt "  " wb "  print " name of the file  "  fo.name # here it does nothing  but you can call it with read operation fo.flush   # close opened file fo.close   let us compile and run the above program  this will produce the following result  name of the file  foo.txt file.fileno   description the method fileno   returns the integer file descriptor that is used by the underlying implementation to request i/o operations from the operating system syntax following is the syntax for fileno   method  fileobject.fileno   ; parameters na return value this method returns the integer file descriptor example the following example shows the usage of fileno   method # ! /usr/bin/python # open a file fo = open  " foo.txt "  " wb "  print " name of the file  "  fo.name fid = fo.fileno   print " file descriptor  "  fid # close opened file fo.close   let us compile and run the above program  this will produce the following result  name of the file  foo.txt file descriptor  3 file.isatty   description the method isatty   returns true if the file is connected  is associated with a terminal device  to a tty  -like  device  else false syntax following is the syntax for isatty   method  fileobject.isatty   ; parameters na return value this method returns true if the file is connected  is associated with a terminal device  to a tty  -like  device  else false example the following example shows the usage of isatty   method # ! /usr/bin/python # open a file fo = open  " foo.txt "  " wb "  print " name of the file  "  fo.name ret = fo.isatty   print " return value  "  ret # close opened file fo.close   let us compile and run the above program  this will produce the following result  name of the file  foo.txt return value  false file.next   description the method next   is used when a file is used as an iterator  typically in a loop  the next   method is called repeatedly this method returns the next input line  or raises stopiteration when eof is hit combining next   method with other file methods like readline   does not work right however  usingseek   to reposition the file to an absolute position will flush the read-ahead buffer syntax following is the syntax for next   method  fileobject.next   ; parameters na return value this method returns the next input line example the following example shows the usage of next   method # ! /usr/bin/python # open a file fo = open  " foo.txt "  " r "  print " name of the file  "  fo.name # assuming file has following 5 lines # this is 1st line # this is 2nd line # this is 3rd line # this is 4th line # this is 5th line for index in range  5   line = fo.next   print " line no % d  % s " %  index  line  # close opened file fo.close   let us compile and run the above program  this will produce the following result  name of the file  foo.txt line no 0  this is 1st line line no 1  this is 2nd line line no 2  this is 3rd line line no 3  this is 4th line line no 4  this is 5th line file.read   size   description the method read   reads at most size bytes from the file if the read hits eof before obtaining size bytes  then it reads only available bytes syntax following is the syntax for read   method  fileobject.read  size  ; parameters size  this is the number of bytes to be read from the file return value this method returns the bytes read in string example the following example shows the usage of read   method # ! /usr/bin/python # open a file fo = open  " foo.txt "  " r "  print " name of the file  "  fo.name # assuming file has following 5 lines # this is 1st line # this is 2nd line # this is 3rd line # this is 4th line # this is 5th line line = fo.read  10  print " read line  % s " %  line  # close opened file fo.close   let us compile and run the above program  this will produce the following result  name of the file  foo.txt read line  this is 1s file.readline   size   description the method readline   reads one entire line from the file a trailing newline character is kept in the string if the size argument is present and non-negative  it is a maximum byte count including the trailing newline and an incomplete line may be returned an empty string is returned only when eof is encountered immediately syntax following is the syntax for readline   method  fileobject.readline  size  ; parameters size  this is the number of bytes to be read from the file return value this method returns the line read from the file example the following example shows the usage of readline   method # ! /usr/bin/python # open a file fo = open  " foo.txt "  " r "  print " name of the file  "  fo.name # assuming file has following 5 lines # this is 1st line # this is 2nd line # this is 3rd line # this is 4th line # this is 5th line line = fo.readline   print " read line  % s " %  line  line = fo.readline  5  print " read line  % s " %  line  # close opened file fo.close   let us compile and run the above program  this will produce the following result  name of the file  foo.txt read line  this is 1st line read line  this file.readlines   sizehint   description the method readlines   reads until eof using readline   and returns a list containing the lines if the optional sizehint argument is present  instead of reading up to eof  whole lines totalling approximately sizehint bytes  possibly after rounding up to an internal buffer size  are read syntax following is the syntax for readlines   method  fileobject.readlines  sizehint  ; parameters sizehint  this is the number of bytes to be read from the file return value this method returns a list containing the lines example the following example shows the usage of readlines   method # ! /usr/bin/python # open a file fo = open  " foo.txt "  " r "  print " name of the file  "  fo.name # assuming file has following 5 lines # this is 1st line # this is 2nd line # this is 3rd line # this is 4th line # this is 5th line line = fo.readlines   print " read line  % s " %  line  line = fo.readlines  2  print " read line  % s " %  line  # close opened file fo.close   let us compile and run the above program  this will produce the following result  name of the file  foo.txt read line   'this is 1st line \ n '  'this is 2nd line \ n '  'this is 3rd line \ n '  'this is 4th line \ n '  'this is 5th line \ n '  read line    file.seek  offset   whence   description the method seek   sets the file 's current position at the offset the whence argument is optional and defaults to 0  which means absolute file positioning  other values are 1 which means seek relative to the current position and 2 means seek relative to the file 's end there is no return value note that if the file is opened for appending using either 'a ' or 'a + '  any seek   operations will be undone at the next write if the file is only opened for writing in append mode using 'a '  this method is essentially a no-op  but it remains useful for files opened in append mode with reading enabled  mode 'a + '   if the file is opened in text mode using 't '  only offsets returned by tell   are legal use of other offsets causes undefined behavior note that not all file objects are seekable syntax following is the syntax for seek   method  fileobject.seek  offset   whence   parameters offset  this is the position of the read/write pointer within the file whence  this is optional and defaults to 0 which means absolute file positioning  other values are 1 which means seek relative to the current position and 2 means seek relative to the file 's end return value this method does not return any value example the following example shows the usage of seek   method # ! /usr/bin/python # open a file fo = open  " foo.txt "  " r "  print " name of the file  "  fo.name # assuming file has following 5 lines # this is 1st line # this is 2nd line # this is 3rd line # this is 4th line # this is 5th line line = fo.readline   print " read line  % s " %  line  # again set the pointer to the beginning fo.seek  0  0  line = fo.readline   print " read line  % s " %  line  # close opened file fo.close   let us compile and run the above program  this will produce the following result  name of the file  foo.txt read line  this is 1st line read line  this is 1st line file.tell   description the method tell   returns the current position of the file read/write pointer within the file syntax following is the syntax for tell   method  fileobject.tell   parameters na return value this method returns the current position of the file read/write pointer within the file example the following example shows the usage of tell   method # ! /usr/bin/python # open a file fo = open  " foo.txt "  " r "  print " name of the file  "  fo.name # assuming file has following 5 lines # this is 1st line # this is 2nd line # this is 3rd line # this is 4th line # this is 5th line line = fo.readline   print " read line  % s " %  line  # get the current position of the file pos = fo.tell   print " current position  % d " %  pos  # close opened file fo.close   let us compile and run the above program  this will produce the following result  name of the file  foo.txt read line  this is 1st line current position  17 file.truncate   size   description the method truncate   truncates the file 's size if the optional size argument is present  the file is truncated to  at most  that size the size defaults to the current position the current file position is not changed note that if a specified size exceeds the file 's current size  the result is platform-dependent note  this method would not work in case file is opened in read-only mode syntax following is the syntax for truncate   method  fileobject.truncate   size   parameters size  if this optional argument is present  the file is truncated to  at most  that size return value this method does not return any value example the following example shows the usage of truncate   method # ! /usr/bin/python # open a file fo = open  " foo.txt "  " rw + "  print " name of the file  "  fo.name # assuming file has following 5 lines # this is 1st line # this is 2nd line # this is 3rd line # this is 4th line # this is 5th line line = fo.readline   print " read line  % s " %  line  # now truncate remaining file fo.truncate   # try to read file now line = fo.readline   print " read line  % s " %  line  # close opened file fo.close   let us compile and run the above program  this will produce the following result  name of the file  foo.txt read line  this is 1st line read line  file.write  str  description the method write   writes a string str to the file there is no return value due to buffering  the string may not actually show up in the file until the flush   or close   method is called syntax following is the syntax for write   method  fileobject.write  str  parameters str  this is the string to be written in the file return value this method does not return any value example the following example shows the usage of write   method # ! /usr/bin/python # open a file fo = open  " foo.txt "  " rw + "  print " name of the file  "  fo.name # assuming file has following 5 lines # this is 1st line # this is 2nd line # this is 3rd line # this is 4th line # this is 5th line str = " this is 6th line " # write a line at the end of the file fo.seek  0  2  line = fo.write  str  # now read complete file from beginning fo.seek  0,0  for index in range  6   line = fo.next   print " line no % d  % s " %  index  line  # close opened file fo.close   let us compile and run the above program  this will produce the following result  name of the file  foo.txt line no 0  this is 1st line line no 1  this is 2nd line line no 2  this is 3rd line line no 3  this is 4th line line no 4  this is 5th line line no 5  this is 6th line file.writelines  sequence  description the method writelines   writes a sequence of strings to the file the sequence can be any iterable object producing strings  typically a list of strings there is no return value syntax following is the syntax for writelines   method  fileobject.writelines  sequence  parameters sequence  this is the sequence of the strings return value this method does not return any value example the following example shows the usage of writelines   method # ! /usr/bin/python # open a file fo = open  " foo.txt "  " rw + "  print " name of the file  "  fo.name # assuming file has following 5 lines # this is 1st line # this is 2nd line # this is 3rd line # this is 4th line # this is 5th line seq =  " this is 6th line \ n "  " this is 7th line "  # write sequence of lines at the end of the file fo.seek  0  2  line = fo.writelines  seq  # now read complete file from beginning fo.seek  0,0  for index in range  7   line = fo.next   print " line no % d  % s " %  index  line  # close opened file fo.close   let us compile and run the above program  this will produce the following result  name of the file  foo.txt line no 0  this is 1st line line no 1  this is 2nd line line no 2  this is 3rd line line no 3  this is 4th line line no 4  this is 5th line line no 5  this is 6th line line no 6  this is 7th line os object methods the os module provides a big range of useful methods to manipulate files and directories most of the useful methods are listed here  sn methods with description 1 os.access  path  mode  use the real uid/gid to test for access to path 2 os.chdir  path  change the current working directory to path 3 os.chflags  path  flags  set the flags of path to the numeric flags 4 os.chmod  path  mode  change the mode of path to the numeric mode 5 os.chown  path  uid  gid  change the owner and group id of path to the numeric uid and gid 6 os.chroot  path  change the root directory of the current process to path 7 os.close  fd  close file descriptor fd 8 os.closerange  fd_low  fd_high  close all file descriptors from fd_low  inclusive  to fd_high  exclusive   ignoring errors 9 os.dup  fd  return a duplicate of file descriptor fd 10 os.dup2  fd  fd2  duplicate file descriptor fd to fd2  closing the latter first if necessary 11 os.fchdir  fd  change the current working directory to the directory represented by the file descriptor fd 12 os.fchmod  fd  mode  change the mode of the file given by fd to the numeric mode 13 os.fchown  fd  uid  gid  change the owner and group id of the file given by fd to the numeric uid and gid 14 os.fdatasync  fd  force write of file with filedescriptor fd to disk 15 os.fdopen  fd   mode   bufsize    return an open file object connected to the file descriptor fd 16 os.fpathconf  fd  name  return system configuration information relevant to an open file name specifies the configuration value to retrieve 17 os.fstat  fd  return status for file descriptor fd  like stat    18 os.fstatvfs  fd  return information about the filesystem containing the file associated with file descriptor fd  like statvfs    19 os.fsync  fd  force write of file with filedescriptor fd to disk 20 os.ftruncate  fd  length  truncate the file corresponding to file descriptor fd  so that it is at most length bytes in size 21 os.getcwd   return a string representing the current working directory 22 os.getcwdu   return a unicode object representing the current working directory 23 os.isatty  fd  return true if the file descriptor fd is open and connected to a tty  -like  device  else false 24 os.lchflags  path  flags  set the flags of path to the numeric flags  like chflags    but do not follow symbolic links 25 os.lchmod  path  mode  change the mode of path to the numeric mode 26 os.lchown  path  uid  gid  change the owner and group id of path to the numeric uid and gid this function will not follow symbolic links 27 os.link  src  dst  create a hard link pointing to src named dst 28 os.listdir  path  return a list containing the names of the entries in the directory given by path 29 os.lseek  fd  pos  how  set the current position of file descriptor fd to position pos  modified by how 30 os.lstat  path  like stat    but do not follow symbolic links 31 os.major  device  extract the device major number from a raw device number 32 os.makedev  major  minor  compose a raw device number from the major and minor device numbers 33 os.makedirs  path   mode   recursive directory creation function 34 os.minor  device  extract the device minor number from a raw device number  35 os.mkdir  path   mode   create a directory named path with numeric mode mode 36 os.mkfifo  path   mode   create a fifo  a named pipe  named path with numeric mode mode the default mode is 0666  octal   37 os.mknod  filename   mode = 0600  device   create a filesystem node  file  device special file or named pipe  named filename 38 os.open  file  flags   mode   open the file file and set various flags according to flags and possibly its mode according to mode 39 os.openpty   open a new pseudo-terminal pair return a pair of file descriptors  master  slave  for the pty and the tty  respectively 40 os.pathconf  path  name  return system configuration information relevant to a named file 41 os.pipe   create a pipe return a pair of file descriptors  r  w  usable for reading and writing  respectively 42 os.popen  command   mode   bufsize    open a pipe to or from command 43 os.read  fd  n  read at most n bytes from file descriptor fd return a string containing the bytes read if the end of the file referred to by fd has been reached  an empty string is returned 44 os.readlink  path  return a string representing the path to which the symbolic link points 45 os.remove  path  remove the file path 46 os.removedirs  path  remove directories recursively 47 os.rename  src  dst  rename the file or directory src to dst 48 os.renames  old  new  recursive directory or file renaming function 49 os.rmdir  path  remove the directory path 50 os.stat  path  perform a stat system call on the given path 51 os.stat_float_times   newvalue   determine whether stat_result represents time stamps as float objects 52 os.statvfs  path  perform a statvfs system call on the given path 53 os.symlink  src  dst  create a symbolic link pointing to src named dst 54 os.tcgetpgrp  fd  return the process group associated with the terminal given by fd  an open file descriptor as returned by open     55 os.tcsetpgrp  fd  pg  set the process group associated with the terminal given by fd  an open file descriptor as returned by open    to pg 56 os.tempnam   dir   prefix    return a unique path name that is reasonable for creating a temporary file 57 os.tmpfile   return a new file object opened in update mode  w + b   58 os.tmpnam   return a unique path name that is reasonable for creating a temporary file 59 os.ttyname  fd  return a string which specifies the terminal device associated with file descriptor fd if fd is not associated with a terminal device  an exception is raised 60 os.unlink  path  remove the file path 61 os.utime  path  times  set the access and modified times of the file specified by path 62 os.walk  top   topdown = true   onerror = none   followlinks = false     generate the file names in a directory tree by walking the tree either top-down or bottom-up 63 os.write  fd  str  write the string str to file descriptor fd return the number of bytes actually written os.access  path  mode  description the method access   uses the real uid/gid to test for access to path most operations will use the effective uid/gid  therefore this routine can be used in a suid/sgid environment to test if the invoking user has the specified access to path.it returns true if access is allowed  false if not syntax following is the syntax for access   method  os.access  path  mode  ; parameters path  this is the path which would be tested for existence or any access mode  this should be f_ok to test the existence of path  or it can be the inclusive or of one or more of r_ok  w_ok  and x_ok to test permissions os.f_ok  value to pass as the mode parameter of access   to test the existence of path os.r_ok  value to include in the mode parameter of access   to test the readability of path os.w_ok value to include in the mode parameter of access   to test the writability of path os.x_ok value to include in the mode parameter of access   to determine if path can be executed return value this method returns true if access is allowed  false if not example the following example shows the usage of access   method # ! /usr/bin/python import os  sys # assuming /tmp/foo.txt exists and has read/write permissions ret = os.access  " /tmp/foo.txt "  os.f_ok  print " f_ok  return value % s " % ret ret = os.access  " /tmp/foo.txt "  os.r_ok  print " r_ok  return value % s " % ret ret = os.access  " /tmp/foo.txt "  os.w_ok  print " w_ok  return value % s " % ret ret = os.access  " /tmp/foo.txt "  os.x_ok  print " x_ok  return value % s " % ret let us compile and run the above program  this will produce the following result  f_ok  return value true r_ok  return value true w_ok  return value true x_ok  return value false os.chdir  path  description the method chdir   changes the current working directory to the given path.it returns none in all the cases syntax following is the syntax for chdir   method  os.chdir  path  parameters path  this is complete path of the directory to be changed to a new location return value this method does not return any value example the following example shows the usage of chdir   method # ! /usr/bin/python import os path = " /usr/tmp " # check current working directory retval = os.getcwd   print " current working directory % s " % retval # now change the directory os.chdir  path  # check current working directory retval = os.getcwd   print " directory changed successfully % s " % retval let us compile and run the above program  this will produce the following result  current working directory /usr directory changed successfully /usr/tmp os.chflags  path  flags  description the method chflags   sets the flags of path to the numeric flags the flags may take a combination  bitwise or  of the various values described below note  this method is available python version 2.6 onwards most of the flags can be changed by super-user only syntax following is the syntax for chflags   method  os.chflags  path  flags  parameters path  this is complete path of the directory to be changed to a new location flags  the flags specified are formed by or'ing the following values  so.uf_nodump  do not dump the file so.uf_immutable  the file may not be changed so.uf_append  the file may only be appended to so.uf_nounlink  the file may not be renamed or deleted so.uf_opaque  the directory is opaque when viewed through a union stack so.sf_archived  the file may be archived so.sf_immutable  the file may not be changed so.sf_append  the file may only be appended to so.sf_nounlink  the file may not be renamed or deleted so.sf_snapshot  the file is a snapshot file return value this method does not return any value example the following example shows the usage of chflags   method # ! /usr/bin/python import os path = " /tmp/foo.txt " # set a flag so that file may not be renamed or deleted flags = os.sf_nounlink retval = os.chflags  path  flags  print " return value  % s " % retval let us compile and run the above program  this will produce the following result  return value  none os.chmod  path  mode  description the method chmod   changes the mode of path to the passed numeric mode the mode may take one of the following values or bitwise ored combinations of them  stat.s_isuid  set user id on execution stat.s_isgid  set group id on execution stat.s_enfmt  record locking enforced stat.s_isvtx  save text image after execution stat.s_iread  read by owner stat.s_iwrite  write by owner stat.s_iexec  execute by owner stat.s_irwxu  read  write  and execute by owner stat.s_irusr  read by owner stat.s_iwusr  write by owner stat.s_ixusr  execute by owner stat.s_irwxg  read  write  and execute by group stat.s_irgrp  read by group stat.s_iwgrp  write by group stat.s_ixgrp  execute by group stat.s_irwxo  read  write  and execute by others stat.s_iroth  read by others stat.s_iwoth  write by others stat.s_ixoth  execute by others syntax following is the syntax for chmod   method  os.chmod  path  mode  ; parameters path  this is the path for which mode would be set mode  this may take one of the above mentioned values or bitwise ored combinations of them return value this method does not return any value example the following example shows the usage of chmod   method  # ! /usr/bin/python import os  sys  stat # assuming /tmp/foo.txt exists  set a file execute by the group os.chmod  " /tmp/foo.txt "  stat.s_ixgrp  # set a file write by others os.chmod  " /tmp/foo.txt "  stat.s_iwoth  print " changed mode successfully ! ! " let us compile and run the above program  this will produce the following result  changed mode successfully ! ! os.chown  path  uid  gid  description the method chown   changes the owner and group id of path to the numeric uid and gid to leave one of the ids unchanged  set it to -1.to set ownership  you would need super user privilege syntax following is the syntax for chown   method  os.chown  path  uid  gid  ; parameters path  this is the path for which owner id and group id need to be setup uid  this is owner id to be set for the file gid  this is group id to be set for the file return value this method does not return any value example the following example shows the usage of chown   method # ! /usr/bin/python import os  sys # assuming /tmp/foo.txt exists # to set owner id 100 following has to be done os.chown  " /tmp/foo.txt "  100  -1  print " changed ownership successfully ! ! " let us compile and run the above program  this will produce the following result  changed ownership successfully ! ! os.chroot  path  description the method chroot   changes the root directory of the current process to the given path.to use this method  you would need super user privilege syntax following is the syntax for chroot   method  os.chroot  path  ; parameters path  this is the path which would be set as root for the current process return value this method does not return any value example the following example shows the usage of chroot   method # ! /usr/bin/python import os  sys # to set the current root path to /tmp/user os.chroot  " /tmp/usr "  print " changed root path successfully ! ! " let us compile and run the above program  this will produce the following result  changed root path successfully ! ! os.close  fd  description the method close   closes the associated with file descriptor fd syntax following is the syntax for close   method  os.close  fd  ; parameters fd  this is the file descriptor of the file return value this method does not return any value example the following example shows the usage of close   method # ! /usr/bin/python import os  sys # open a file fd = os.open  " foo.txt "  os.o_rdwr | os.o_creat  # write one string os.write  fd  " this is test "  # close opened file os.close  fd  print " closed the file successfully ! ! " let us compile and run the above program  this will produce the following result  closed the file successfully ! ! os.closerange  fd_low  fd_high  description the method closerange   closes all file descriptors from fd_low  inclusive  to fd_high  exclusive   ignoring errors.this method is introduced in python version 2.6 syntax following is the syntax for closerange   method  os.closerange  fd_low  fd_high  ; parameters fd_low  this is the lowest file descriptor to be closed fd_high  this is the highest file descriptor to be closed this function is equivalent to  for fd in xrange  fd_low  fd_high   try  os.close  fd  except oserror  pass return value this method does not return any value example the following example shows the usage of closerange   method # ! /usr/bin/python import os  sys # open a file fd = os.open  " foo.txt "  os.o_rdwr | os.o_creat  # write one string os.write  fd  " this is test "  # close a single opened file os.closerange  fd  fd  print " closed the file successfully ! ! " this would create given file foo.txt and then write given content in that file.this will produce the following result  closed the file successfully ! ! os.dup  fd  description the method dup   returns a duplicate of file descriptor fd which can be used in place of original descriptor syntax following is the syntax for dup   method  os.dup  fd  ; parameters fd  this is the original file descriptor return value this method returns a duplicate of file descriptor example the following example shows the usage of dup   method # ! /usr/bin/python import os  sys # open a file fd = os.open  " foo.txt "  os.o_rdwr | os.o_creat  # get one duplicate file descriptor d_fd = os.dup  fd  # write one string using duplicate fd os.write  d_fd  " this is test "  # close a single opened file os.closerange  fd  d_fd  print " closed all the files successfully ! ! " let us compile and run the above program  this will produce the following result  closed all the files successfully ! ! os.dup2  fd  fd2  description the method dup2   duplicates file descriptor fd to fd2  closing the latter first if necessary note  new file description would be assigned only when it is available in the following example given below  1000 would be assigned as a duplicate fd in case when 1000 is available syntax following is the syntax for dup2   method  os.dup2  fd  fd2  ; parameters fd  this is file descriptor to be duplicated fd2  this is duplicate file descriptor return value this method returns a duplicate of file descriptor example the following example shows the usage of dup2   method # ! /usr/bin/python import os  sys # open a file fd = os.open  " foo.txt "  os.o_rdwr | os.o_creat  # write one string os.write  fd  " this is test "  # now duplicate this file descriptor as 1000 fd2 = 1000 os.dup2  fd  fd2  ; # now read this file from the beginning using fd2 os.lseek  fd2  0  0  str = os.read  fd2  100  print " read string is  "  str # close opened file os.close  fd  print " closed the file successfully ! ! " let us compile and run the above program  this will produce the following result  read string is  this is test closed the file successfully ! ! os.fchdir  fd  description the method fchdir   change the current working directory to the directory represented by the file descriptor fd the descriptor must refer to an opened directory  not an open file syntax following is the syntax for fchdir   method  os.fchdir  fd  ; parameters fd  this is directory descriptor return value this method does not return any value example the following example shows the usage of fchdir   method # ! /usr/bin/python import os  sys # first go to the " /var/www/html " directory os.chdir  " /var/www/html "  # print current working directory print " current working dir  % s " % os.getcwd   # now open a directory " /tmp " fd = os.open  " /tmp "  os.o_rdonly  # use os.fchdir   method to change the dir os.fchdir  fd  # print current working directory print " current working dir  % s " % os.getcwd   # close opened directory os.close  fd  let us compile and run the above program  this will produce the following result  current working dir  /var/www/html current working dir  /tmp os.fchmod  fd  mode  description the method fchmod   changes the mode of the file given by fd to the numeric mode the mode may take one of the following values or bitwise ored combinations of them  note  this method is available from python 2.6 onwards stat.s_isuid  set user id on execution stat.s_isgid  set group id on execution stat.s_enfmt  record locking enforced stat.s_isvtx  save text image after execution stat.s_iread  read by owner stat.s_iwrite  write by owner stat.s_iexec  execute by owner stat.s_irwxu  read  write  and execute by owner stat.s_irusr  read by owner stat.s_iwusr  write by owner stat.s_ixusr  execute by owner stat.s_irwxg  read  write  and execute by group stat.s_irgrp  read by group stat.s_iwgrp  write by group stat.s_ixgrp  execute by group stat.s_irwxo  read  write  and execute by others stat.s_iroth  read by others stat.s_iwoth  write by others stat.s_ixoth  execute by others syntax following is the syntax for fchmod   method  os.fchmod  fd  mode  ; parameters fd  this is the file descriptor for which mode would be set mode  this may take one of the above mentioned values or bitwise ored combinations of them return value this method does not return any value example the following example shows the usage of fchmod   method # ! /usr/bin/python import os  sys  stat # now open a file " /tmp/foo.txt " fd = os.open  " /tmp "  os.o_rdonly  # set a file execute by the group os.fchmod  fd  stat.s_ixgrp  # set a file write by others os.fchmod  fd  stat.s_iwoth  print " changed mode successfully ! ! " # close opened file os.close  fd  let us compile and run the above program  this will produce the following result  changed mode successfully ! ! os.fchown  fd  uid  gid  description the method fchown   changes the owner and group id of the file given by fd to the numeric uid and gid to leave one of the ids unchanged  set it to -1 note  this method is available python 2.6 onwards syntax following is the syntax for fchown   method  os.fchown  fd  uid  gid  ; parameters fd  this is the file descriptor for which owner id and group id need to be set up uid  this is owner id to be set for the file gid  this is group id to be set for the file return value this method does not return any value example the following example shows the usage of fchown   method # ! /usr/bin/python import os  sys  stat # now open a file " /tmp/foo.txt " fd = os.open  " /tmp "  os.o_rdonly  # set the user id to 100 for this file os.fchown  fd  100  -1  # set the group id to 50 for this file os.fchown  fd  -1  50  print " changed ownership successfully ! ! " # close opened file os.close  fd  let us compile and run the above program  this will produce the following result  changed ownership successfully ! ! os.fdatasync  fd  description the method fdatasync   forces write of file with filedescriptor fd to disk this does not force update of metadata if you want to flush your buffer then you can use this method syntax following is the syntax for fdatasync   method  os.fdatasync  fd  ; parameters fd  this is the file descriptor for which data to be written return value this method does not return any value example the following example shows the usage of fdatasync   method # ! /usr/bin/python import os  sys # open a file fd = os.open  " foo.txt "  os.o_rdwr | os.o_creat  # write one string os.write  fd  " this is test "  # now you can use fdatasync   method # infact here you would not be able to see its effect os.fdatasync  fd  # now read this file from the beginning os.lseek  fd  0  0  str = os.read  fd  100  print " read string is  "  str # close opened file os.close  fd  print " closed the file successfully ! ! " let us compile and run the above program  this will produce the following result  read string is  this is test closed the file successfully ! ! os.fdopen  fd   mode   bufsize    description the method fdopen   returns an open file object connected to the file descriptor fd then you can perform all the defined functions on file object syntax following is the syntax for fdopen   method os.fdopen  fd    mode   bufsize    ; parameters fd  this is the file descriptor for which a file object is to be returned mode  this optional argument is a string indicating how the file is to be opened the most commonly-used values of mode are 'r ' for reading  'w ' for writing  truncating the file if it already exists   and 'a ' for appending bufsize  this optional argument specifies the file 's desired buffer size  0 means unbuffered  1 means line buffered  any other positive value means use a buffer of  approximately  that size return value this method returns an open file object connected to the file descriptor example the following example shows the usage of fdopen   method # ! /usr/bin/python import os  sys # open a file fd = os.open  " foo.txt "  os.o_rdwr | os.o_creat  # now get a file object for the above file fo = os.fdopen  fd  " w + "  # tell the current position print " current i/o pointer position  % d " % fo.tell   # write one string fo.write  " python is a great language \ nyeah its great ! ! \ n "  ; # now read this file from the beginning os.lseek  fd  0  0  str = os.read  fd  100  print " read string is  "  str # tell the current position print " current i/o pointer position  % d " % fo.tell   # close opened file fo.close   print " closed the file successfully ! ! " let us compile and run the above program  this will produce the following result  current i/o pointer position  0 read string is  this is testpython is a great language yeah its great ! ! current i/o pointer position  45 closed the file successfully ! ! os.fpathconf  fd  name  description the method fpathconf   returns system configuration information relevant to an open file.this variable is very similar to unix system call fpathconf   and accept the similar arguments syntax following is the syntax for fpathconf   method  os.fpathconf  fd  name  parameters fd  this is the file descriptor for which system configuration information is to be returned name  this specifies the configuration value to retrieve ; it may be a string  which is the name of a defined system value ; these names are specified in a number of standards  posix.1  unix 95  unix 98  and others   the names known to the host operating system are given in theos.pathconf_names dictionary return value this method returns system configuration information relevant to an open file example the following example shows the usage of fpathconf   method # ! /usr/bin/python import os  sys # open a file fd = os.open  " foo.txt "  os.o_rdwr | os.o_creat  print " % s " % os.pathconf_names # now get maximum number of links to the file no = os.fpathconf  fd  'pc_link_max '  print " maximum number of links to the file  % d " % no # now get maximum length of a filename no = os.fpathconf  fd  'pc_name_max '  print " maximum length of a filename  % d " % no # close opened file os.close  fd  print " closed the file successfully ! ! " let us compile and run the above program  this will produce the following result   'pc_max_input '  2  'pc_vdisable '  8  'pc_sync_io '  9  'pc_sock_maxbuf '  12  'pc_name_max '  3  'pc_max_canon '  1  'pc_prio_io '  11  'pc_chown_restricted '  6  'pc_async_io '  10  'pc_no_trunc '  7  'pc_filesizebits '  13  'pc_link_max '  0  'pc_pipe_buf '  5  'pc_path_max '  4  maximum number of links to the file  127 maximum length of a filename  255 closed the file successfully ! ! os.fstat  fd  description the method fstat   returns information about a file associated with the fd here is the structure returned by fstat method  st_dev  id of device containing file st_ino  inode number st_mode  protection st_nlink  number of hard links st_uid  user id of owner st_gid  group id of owner st_rdev  device id  if special file  st_size  total size  in bytes st_blksize  blocksize for filesystem i/o st_blocks  number of blocks allocated st_atime  time of last access st_mtime  time of last modification st_ctime  time of last status change syntax following is the syntax for fstat   method  os.fstat  fd  parameters fd  this is the file descriptor for which system information is to be returned return value this method returns information about a file associated with the fd example the following example shows the usage of chdir   method # ! /usr/bin/python import os  sys # open a file fd = os.open  " foo.txt "  os.o_rdwr | os.o_creat  # now get the touple info = os.fstat  fd  print " file info  "  info # now get uid of the file print " uid of the file  % d " % info.st_uid # now get gid of the file print " gid of the file  % d " % info.st_gid # close opened file os.close  fd  let us compile and run the above program  this will produce the following result  file info   33261  3753776l  103l  1  0  0  102l  1238783197  1238786767  1238786767  uid of the file  0 gid of the file  0 os.fstatvfs  fd  description the method fstatvfs   returns information about the file system containing the file associated with file descriptor fd this returns the following sturcture  f_bsize  file system block size f_frsize  fragment size f_blocks  size of fs in f_frsize units f_bfree  free blocks f_bavail  free blocks for non-root f_files  inodes f_ffree  free inodes f_favail  free inodes for non-root f_fsid  file system id f_flag  mount flags f_namemax  maximum filename length syntax following is the syntax for fstatvfs   method  os.fstatvfs  fd  parameters fd  this is the file descriptor for which system information is to be returned return value this method returns information about the file system containing the file associated example the following example shows the usage of fstatvfs   method # ! /usr/bin/python import os  sys # open a file fd = os.open  " foo.txt "  os.o_rdwr | os.o_creat  # now get the touple info = os.fstatvfs  fd  print " file info  "  info # now get maximum filename length print " maximum filename length  % d " % info.f_namemax  # now get free blocks print " free blocks  % d " % info.f_bfree # close opened file os.close  fd  let us compile and run the above program  this will produce the following result  file info   4096  4096  2621440l  1113266l  1113266l  8929602l  8764252l  8764252l  0  255  maximum filename length  255 free blocks  1113266 os.fsync  fd  description the method fsync   forces write of file with file descriptor fd to disk if you 're starting with a python file object f  first do f.flush    and then do os.fsync  f.fileno     to ensure that all internal buffers associated with f are written to disk syntax following is the syntax for fsync   method  os.fsync  fd  parameters fd  this is the file descriptor for buffer sync is required return value this method does not return any value example the following example shows the usage of fsync   method # ! /usr/bin/python import os  sys # open a file fd = os.open  " foo.txt "  os.o_rdwr | os.o_creat  # write one string os.write  fd  " this is test "  # now you can use fsync   method # infact here you would not be able to see its effect os.fsync  fd  # now read this file from the beginning os.lseek  fd  0  0  str = os.read  fd  100  print " read string is  "  str # close opened file os.close  fd  print " closed the file successfully ! ! " let us compile and run the above program  this will produce the following result  read string is  this is test closed the file successfully ! ! os.ftruncate  fd  length  description the method ftruncate   truncates the file corresponding to file descriptor fd  so that it is at most length bytes in size syntax following is the syntax for ftruncate   method  os.ftruncate  fd  length  parameters fd  this is the file descriptor  which needs to be truncated length  this is the length of the file where file needs to be truncated return value this method does not return any value example the following example shows the usage of ftruncate   method # ! /usr/bin/python import os  sys # open a file fd = os.open  " foo.txt "  os.o_rdwr | os.o_creat  # write one string os.write  fd  " this is test  this is test "  # now you can use ftruncate   method os.ftruncate  fd  10  # now read this file from the beginning os.lseek  fd  0  0  str = os.read  fd  100  print " read string is  "  str # close opened file os.close  fd  print " closed the file successfully ! ! " let us compile and run the above program  this will produce the following result  read string is  this is te closed the file successfully ! ! os.getcwd   description the method getcwd   returns current working directory of a process syntax following is the syntax for getcwd   method  os.chdir  path  parameters na return value this method returns current working directory of a process example the following example shows the usage of getcwd   method # ! /usr/bin/python import os  sys # first go to the " /var/www/html " directory os.chdir  " /var/www/html "  # print current working directory print " current working dir  % s " % os.getcwd   # now open a directory " /tmp " fd = os.open  " /tmp "  os.o_rdonly  # use os.fchdir   method to change the dir os.fchdir  fd  # print current working directory print " current working dir  % s " % os.getcwd   # close opened directory os.close  fd  let us compile and run the above program  this will produce the following result  current working dir  /var/www/html current working dir  /tmp os.getcwdu   description the method getcwdu   returns a unicode object representing the current working directory syntax following is the syntax for getcwdu   method  os.getcwdu   parameters na return value this method returns a unicode object representing the current working directory example the following example shows the usage of getcwdu   method # ! /usr/bin/python import os  sys # first go to the " /var/www/html " directory os.chdir  " /var/www/html "  # print current working directory print " current working dir  % s " % os.getcwdu   # now open a directory " /tmp " fd = os.open  " /tmp "  os.o_rdonly  # use os.fchdir   method to change the dir os.fchdir  fd  # print current working directory print " current working dir  % s " % os.getcwdu   # close opened directory os.close  fd  let us compile and run the above program  this will produce the following result  current working dir  /var/www/html current working dir  /tmp os.isatty  fd  description the method isatty   returns true if the file descriptor fd is open and connected to a tty  -like  device  else false syntax following is the syntax for isatty   method  os.isatty  fd  parameters fd  this is the file descriptor for which association needs to be checked return value this method returns true if the file descriptor fd is open and connected to a tty  -like  device  else false example the following example shows the usage of isatty   method # ! /usr/bin/python import os  sys # open a file fd = os.open  " foo.txt "  os.o_rdwr | os.o_creat  # write one string os.write  fd  " this is test "  # now use isatty   to check the file ret = os.isatty  fd  print " returned value is  "  ret # close opened file os.close  fd  let us compile and run the above program  this will produce the following result  returned value is  false os.lchflags  path  flags  description the method lchflags   sets the flags of path to the numeric flags this method does not follow symbolic links unlike chflags   method here  flags may take a combination  bitwise or  of the following values  as defined in the stat module   uf_nodump  do not dump the file uf_immutable  the file may not be changed uf_append  the file may only be appended to uf_nounlink  the file may not be renamed or deleted uf_opaque  the directory is opaque when viewed through a union stack sf_archived  the file may be archived sf_immutable  the file may not be changed sf_append  the file may only be appended to sf_nounlink  the file may not be renamed or deleted sf_snapshot  the file is a snapshot file note  this method has been introduced in python 2.6 syntax following is the syntax for lchflags   method  os.lchflags  path  flags  parameters path  this is the file path for which flags to be set flags  this could be a combination  bitwise or  of the above defined flags values return value this method does not return any value example the following example shows the usage of lchflags   method # ! /usr/bin/python import os  sys # open a file path = " /var/www/html/foo.txt " fd = os.open  path  os.o_rdwr | os.o_creat  # close opened file os.close  fd  # now change the file flag ret = os.lchflags  path  os.uf_immutable  print " changed file flag successfully ! ! " let us compile and run the above program  this will produce the following result  changed file flag successfully ! ! os.lchmod  path  mode  description the method lchmod   changes the mode of path to the numeric mode if path is a symlink  this affects the symlink rather than the target the mode may take one of the following values or bitwise ored combinations of them  stat.s_isuid  set user id on execution stat.s_isgid  set group id on execution stat.s_enfmt  record locking enforced stat.s_isvtx  save text image after execution stat.s_iread  read by owner stat.s_iwrite  write by owner stat.s_iexec  execute by owner stat.s_irwxu  read  write  and execute by owner stat.s_irusr  read by owner stat.s_iwusr  write by owner stat.s_ixusr  execute by owner stat.s_irwxg  read  write  and execute by group stat.s_irgrp  read by group stat.s_iwgrp  write by group stat.s_ixgrp  execute by group stat.s_irwxo  read  write  and execute by others stat.s_iroth  read by others stat.s_iwoth  write by others stat.s_ixoth  execute by others note  this method has been introduced in python 2.6 syntax following is the syntax for lchmod   method  os.lchmod  path  mode  parameters path  this is the file path for which mode to be set mode  this may take one of the above mentioned values or bitwise ored combinations of them return value this method does not return any value example the following example shows the usage of lchmod   method # ! /usr/bin/python import os  sys # open a file path = " /var/www/html/foo.txt " fd = os.open  path  os.o_rdwr | os.o_creat  # close opened file os.close  fd  # now change the file mode # set a file execute by group os.lchmod  path  stat.s_ixgrp  # set a file write by others os.lchmod  " /tmp/foo.txt "  stat.s_iwoth  print " changed mode successfully ! ! " let us compile and run the above program  this will produce the following result  print " changed mode successfully ! ! " os.lchown  path  uid  gid  description the method lchown   changes the owner and group id of path to the numeric uid and gid this function will not follow symbolic links to leave one of the ids unchanged  set it to -1  syntax following is the syntax for lchown   method  os.lchown  path  uid  gid  parameters path  this is the file path for which ownership to be set uid  this is the owner id to be set for the file gid  this is the group id to be set for the file return value this method does not return any value example the following example shows the usage of lchown   method # ! /usr/bin/python import os  sys # open a file path = " /var/www/html/foo.txt " fd = os.open  path  os.o_rdwr | os.o_creat  # close opened file os.close  fd  # now change the file ownership # set a file owner id os.lchown  path  500  -1  # set a file group id os.lchown  path  -1  500  print " changed ownership successfully ! ! " let us compile and run the above program  this will produce the following result  print " changed ownership successfully ! ! " os.link  src  dst  description the method link   creates a hard link pointing to src named dst this method is very useful to create a copy of existing file syntax following is the syntax for link   method  os.link  src  dst  parameters src  this is the source file path for which hard link would be created dest  this is the target file path where hard link would be created return value this method does not return any value example the following example shows the usage of link   method # ! /usr/bin/python import os  sys # open a file path = " /var/www/html/foo.txt " fd = os.open  path  os.o_rdwr | os.o_creat  # close opened file os.close  fd  # now create another copy of the above file dst = " /tmp/foo.txt " os.link  path  dst  print " created hard link successfully ! ! " this would produce following result  print " created hard link successfully ! ! " os.listdir  path  description the method listdir   returns a list containing the names of the entries in the directory given by path the list is in arbitrary order it does not include the special entries ' ' and ' ' even if they are present in the directory syntax following is the syntax for listdir   method  os.listdir  path  parameters path  this is the directory  which needs to be explored return value this method returns a list containing the names of the entries in the directory given by path example the following example shows the usage of listdir   method # ! /usr/bin/python import os  sys # open a file path = " /var/www/html/ " dirs = os.listdir  path  # this would print all the files and directories for file in dirs  print file let us compile and run the above program  this will produce the following result  test.htm stamp faq.htm _vti_txt robots.txt itemlisting resumelisting writing_effective_resume.htm advertisebusiness.htm papers resume os.lseek  fd  pos  how  description the method lseek   sets the current position of file descriptor fd to the given position pos  modified byhow syntax following is the syntax for lseek   method  os.lseek  fd  pos  how  parameters fd  this is the file descriptor  which needs to be processed pos  this is the position in the file with respect to given parameter how you give os.seek_set or 0 to set the position relative to the beginning of the file  os.seek_cur or 1 to set it relative to the current position ; os.seek_end or 2 to set it relative to the end of the file how  this is the reference point with-in the file os.seek_set or 0 means beginning of the file  os.seek_cur or 1 means the current position and os.seek_end or 2 means end of the file return value this method does not return any value example the following example shows the usage of lseek   method # ! /usr/bin/python import os  sys # open a file fd = os.open  " foo.txt "  os.o_rdwr | os.o_creat  # write one string os.write  fd  " this is test "  # now you can use fsync   method # infact here you would not be able to see its effect os.fsync  fd  # now read this file from the beginning os.lseek  fd  0  0  str = os.read  fd  100  print " read string is  "  str # close opened file os.close  fd  print " closed the file successfully ! ! " let us compile and run the above program  this will produce the following result  read string is  this is test closed the file successfully ! ! os.lstat  path  description the method lstat   is very similar to fstat   and returns the information about a file  but do not follow symbolic links this is an alias for fstat   on platforms that do not support symbolic links  such as windows here is the structure returned by lstat method  st_dev  id of device containing file st_ino  inode number st_mode  protection st_nlink  number of hard links st_uid  user id of owner st_gid  group id of owner st_rdev  device id  if special file  st_size  total size  in bytes st_blksize  blocksize for filesystem i/o st_blocks  number of blocks allocated st_atime  time of last access st_mtime  time of last modification st_ctime  time of last status change syntax following is the syntax for lstat   method  os.lstat  path  parameters path  this is the file for which information would be returned return value this method returns the information about a file example the following example shows the usage of lstat   method # ! /usr/bin/python import os  sys # open a file path = " /var/www/html/foo.txt " fd = os.open  path  os.o_rdwr | os.o_creat  # close opened file os.close  fd  # now get the touple info = os.lstat  path  print " file info  "  info # now get uid of the file print " uid of the file  % d " % info.st_uid # now get gid of the file print " gid of the file  % d " % info.st_gid let us compile and run the above program  this will produce the following result  file info   33261  3450178l  103l  1  500  500  0l  1238866944  1238866944  1238948312  uid of the file  500 gid of the file  500 os.major  device  description the method major   extracts the device major number from a raw device number  usually the st_dev or st_rdev field from stat   syntax following is the syntax for major   method  os.major  device  parameters device  this is a raw device number  usually the st_dev or st_rdev field from stat   return value this method returns the device major number example the following example shows the usage of major   method # ! /usr/bin/python import os  sys path = " /var/www/html/foo.txt " # now get the touple info = os.lstat  path  # get major and minor device number major_dnum = os.major  info.st_dev  minor_dnum = os.minor  info.st_dev  print " major device number  "  major_dnum print " minor device number  "  minor_dnum let us compile and run the above program  this will produce the following result  major device number  0 minor device number  103 os.makedev  major  minor  description the method makedev   composes a raw device number from the major and minor device numbers syntax following is the syntax for makedev   method  os.makedev  major  minor  parameters major  this is major device number minor  this is minor device number return value this method returns the device number example the following example shows the usage of makedev   method # ! /usr/bin/python import os  sys path = " /var/www/html/foo.txt " # now get the touple info = os.lstat  path  # get major and minor device number major_dnum = os.major  info.st_dev  minor_dnum = os.minor  info.st_dev  print " major device number  "  major_dnum print " minor device number  "  minor_dnum # make a device number dev_num = os.makedev  major_dnum  minor_dnum  print " device number  "  dev_num let us compile and run the above program  this will produce the following result  major device number  0 minor device number  103 device number  103 os.makedirs  path   mode   description the method makedirs   is recursive directory creation function like mkdir    but makes all intermediate-level directories needed to contain the leaf directory syntax following is the syntax for makedirs   method  os.makedirs  path   mode   parameters path  this is the path  which needs to be created recursively mode  this is the mode of the directories to be given return value this method does not return any value example the following example shows the usage of makedirs   method # ! /usr/bin/python import os  sys # path to be created path = " /tmp/home/monthly/daily " os.makedirs  path  0755  ; print " path is created " let us compile and run the above program  this will produce the following result  path is created os.minor  device  description the method minor   extracts the device minor number from a raw device number  usually the st_dev or st_rdev field from stat   syntax following is the syntax for minor   method  os.minor  device  parameters device  this is a raw device number  usually the st_dev or st_rdev field from stat   return value this method returns the device minor number example the following example shows the usage of minor   method # ! /usr/bin/python import os  sys path = " /var/www/html/foo.txt " # now get the touple info = os.lstat  path  # get major and minor device number major_dnum = os.major  info.st_dev  minor_dnum = os.minor  info.st_dev  print " major device number  "  major_dnum print " minor device number  "  minor_dnum let us compile and run the above program  this will produce the following result  major device number  0 minor device number  103 os.mkdir  path   mode   description the method mkdir   create a directory named path with numeric mode mode the default mode is 0777  octal   on some systems  mode is ignored where it is used  the current umask value is first masked out syntax following is the syntax for mkdir   method  os.mkdir  path   mode   parameters path  this is the path  which needs to be created mode  this is the mode of the directories to be given return value this method does not return any value example the following example shows the usage of mkdir   method # ! /usr/bin/python import os  sys # path to be created path = " /tmp/home/monthly/daily/hourly " os.mkdir  path  0755  ; print " path is created " let us compile and run the above program  this will produce the following result  path is created os.mkfifo  path   mode   description the method mkfifo   creates a fifo named path with numeric mode the default mode is 0666  octal  .the current umask value is first masked out syntax following is the syntax for mkfifo   method  os.mkfifo  path   mode   parameters path  this is the path  which needs to be created mode  this is the mode of the named path to be given return value this method does not return any value example the following example shows the usage of mkfifo   method # ! /usr/bin/python import os  sys # path to be created path = " /tmp/hourly " os.mkfifo  path  0644  print " path is created " let us compile and run the above program  this will produce the following result  path is created os.mknod  filename   mode = 0600  device   description the method mknod   creates a filesystem node  file  device special file or named pipe  named filename syntax following is the syntax for mknod   method  os.mknod  filename   mode = 0600   device = 0    parameters filename  this is the filesystem node to be created mode  the mode specifies both the permissions to use and the type of node to be created combined  bitwise or  with one of the values stat.s_ifreg  stat.s_ifchr  stat.s_ifblk  and stat.s_ififo they can be ored base don requirement device  this is the device special file created and its optional to provide return value this method does not return any value example the following example shows the usage of mknod   method # ! /usr/bin/python import os import stat filename = '/tmp/tmpfile ' mode = 0600 | stat.s_irusr # filesystem node specified with different modes os.mknod  filename  mode  let us compile and run the above program  this will create a simple file in /tmp directory with a name tmpfile  -rw 1 root root 0 apr 30 02  38 tmpfile os.open  file  flags   mode   description the method open   opens the file file and set various flags according to flags and possibly its mode according to mode.the default mode is 0777  octal   and the current umask value is first masked out syntax following is the syntax for open   method  os.open  file  flags   mode   ; parameters file  file name to be opened flags  the following constants are options for the flags they can be combined using the bitwise or operator |  some of them are not available on all platforms os.o_rdonly  open for reading only os.o_wronly  open for writing only os.o_rdwr  open for reading and writing os.o_nonblock  do not block on open os.o_append  append on each write os.o_creat  create file if it does not exist os.o_trunc  truncate size to 0 os.o_excl  error if create and file exists os.o_shlock  atomically obtain a shared lock os.o_exlock  atomically obtain an exclusive lock os.o_direct  eliminate or reduce cache effects os.o_fsync  synchronous writes os.o_nofollow  do not follow symlinks mode  this work in similar way as it works for chmod   method return value this method returns the file descriptor for the newly opened file example the following example shows the usage of open   method # ! /usr/bin/python import os  sys # open a file fd = os.open  " foo.txt "  os.o_rdwr | os.o_creat  # write one string os.write  fd  " this is test "  # close opened file os.close  fd  print " closed the file successfully ! ! " this would create given file foo.txt and then would write given content in that file and would produce the following result  closed the file successfully ! ! os.openpty   description the method openpty   opens a pseudo-terminal pair and returns a pair of file descriptors  master,slave  for the pty & the tty respectively syntax following is the syntax for openpty   method  os.openpty   parameters na return value this method returns a pair of file descriptors i.e  master and slave example the following example shows the usage of openpty   method # ! /usr/bin/python import os # master for pty  slave for tty m,s = os.openpty   print m print s # showing terminal name s = os.ttyname  s  print m print s let us compile and run the above program  this will produce the following result  3 4 3 /dev/pty0 os.pathconf  path  name  description the method pathconf   returns system configuration information relevant to a named file syntax following is the syntax for pathconf   method  os.pathconf  path  name  parameters path  this is the file path name  this specifies the configuration value to retrieve ; it may be a string which is the name of a defined system value ; these names are specified in a number of standards  posix.1  unix 95  unix 98  and others   the names known to the host operating system are given in theos.pathconf_names dictionary return value this method returns system configuration information of a file example the following example shows the usage of pathconf   method # ! /usr/bin/python import os  sys print " % s " % os.pathconf_names # retrieve maximum length of a filename no = os.pathconf  'a2.py '  'pc_name_max '  print " maximum length of a filename  % d " % no # retrieve file size no = os.pathconf  'a2.py '  'pc_filesizebits '  print " file size in bits  % d " % no let us compile and run the above program  this will produce the following result   'pc_max_input '  2  'pc_vdisable '  8  'pc_sync_io '  9  'pc_sock_maxbuf '  12  'pc_name_max '  3  'pc_max_canon '  1  'pc_prio_io '  11  'pc_chown_restricted '  6  'pc_async_io '  10  'pc_no_trunc '  7  'pc_filesizebits '  13  'pc_link_max '  0  'pc_pipe_buf '  5  'pc_path_max '  4  maximum length of a filename  255 file size in bits  64 os.pipe   description the method pipe   creates a pipe and returns a pair of file descriptors  r  w  usable for reading and writing  respectively syntax following is the syntax for pipe   method  os.pipe   parameters na return value this method returns a pair of file descriptors example the following example shows the usage of pipe   method # ! /usr/bin/python import os  sys print " the child will write text to a pipe and " print " the parent will read the text written by child " # file descriptors r  w for reading and writing r  w = os.pipe   processid = os.fork   if processid  # this is the parent process # closes file descriptor w os.close  w  r = os.fdopen  r  print " parent reading " str = r.read   print " text = "  str sys.exit  0  else  # this is the child process os.close  r  w = os.fdopen  w  'w '  print " child writing " w.write  " text written by child "  w.close   print " child closing " sys.exit  0  let us compile and run the above program  this will produce the following result  the child will write text to a pipe and the parent will read the text written by child parent reading child writing child closing text = text written by child os.popen  command   mode   bufsize    description the method popen   opens a pipe to or from command.the return value is an open file object connected to the pipe  which can be read or written depending on whether mode is 'r '  default  or 'w'.the bufsize argument has the same meaning as in open   function syntax following is the syntax for popen   method  os.popen  command   mode   bufsize    parameters command  this is command used mode  this is the mode can be 'r '  default  or 'w' bufsize  if the buffering value is set to 0  no buffering will take place if the buffering value is 1  line buffering will be performed while accessing a file if you specify the buffering value as an integer greater than 1  then buffering action will be performed with the indicated buffer size if negative  the buffer size is the system default  default behavior   return value this method returns an open file object connected to the pipe example the following example shows the usage of popen   method # ! /usr/bin/python import os  sys # using command mkdir a = 'mkdir nwdir ' b = os.popen  a,'r',1  print b let us compile and run the above program  this will produce the following result  open file 'mkdir nwdir '  mode 'r ' at 0x81614d0 os.read  fd  n  description the method read   read at most n bytes from file desciptor fd  return a string containing the bytes read if the end of file referred to by fd has been reached  an empty string is returned syntax following is the syntax for read   method  os.read  fd,n  parameters fd  this is the file descriptor of the file n  these are n bytes from file descriptor fd return value this method returns a string containing the bytes read example the following example shows the usage of read   method # ! /usr/bin/python import os  sys # open a file fd = os.open  " f1.txt " ,os.o_rdwr  # reading text ret = os.read  fd,12  print ret # close opened file os.close  fd  print " closed the file successfully ! ! " let us compile and run the above program  this will print the contents of file f1.txt  this is test closed the file successfully ! ! os.readlink  path  description the method readlink   returns a string representing the path to which the symbolic link points it may return an absolute or relative pathname syntax following is the syntax for readlink   method  os.readlink  path  parameters path  this is the path or symblic link for which we are going to find source of the link return value this method return a string representing the path to which the symbolic link points example the following example shows the usage of readlink   method # ! /usr/bin/python import os src = '/usr/bin/python ' dst = '/tmp/python ' # this creates a symbolic link on python in tmp directory os.symlink  src  dst  # now let us use readlink to display the source of the link path = os.readlink  dst  print path let us compile and run the above program  this will create a symblic link to /usr/bin/python and later it will read the source of the symbolic link using readlink   call before running this program  make sure you do not have /tmp/python already available /usr/bin/python os.remove  path  description the method remove   removes the file path if the path is a directory  oserror is raised syntax following is the syntax for remove   method  os.remove  path  parameters path  this is the path  which is to be removed return value this method does not return any value example the following example shows the usage of remove   method # ! /usr/bin/python import os  sys # listing directories print " the dir is  % s " % os.listdir  os.getcwd    # removing os.remove  " aa.txt "  # listing directories after removing path print " the dir after removal of path  % s " % os.listdir  os.getcwd    let us compile and run the above program  this will produce the following result  the dir is   'a1.txt','aa.txt','resume.doc','a3.py','tutorialsdir','amrood.admin '  the dir after removal of path   'a1.txt','resume.doc','a3.py','tutorialsdir','amrood.admin '  os.removedirs  path  description the method removedirs   removes dirs recursively if the leaf directory is succesfully removed  removedirs tries to successively remove every parent directory displayed in path syntax following is the syntax for removedirs   method  os.removedirs  path  parameters path  this is the path of the directory  which needs to be removed return value this method does not return any value example the following example shows the usage of removedirs   method # ! /usr/bin/python import os  sys # listing directories print " the dir is  % s " % os.listdir  os.getcwd    # removing os.removedirs  " /tutorialsdir "  # listing directories after removing directory print " the dir after removal is  " % os.listdir  os.getcwd    let us compile and run the above program  this will produce the following result  the dir is   'a1.txt','resume.doc','a3.py','tutorialsdir','amrood.admin '  the dir after removal is   'a1.txt','resume.doc','a3.py','amrood.admin '  os.rename  src  dst  description the method rename   renames the file or directory src to dst.if dst is a file or directory  already present  ,oserror will be raised syntax following is the syntax for rename   method  os.rename  src  dst  parameters src  this is the actual name of the file or directory dst  this is the new name of the file or directory return value this method does not return any value example the following example shows the usage of rename   method # ! /usr/bin/python import os  sys # listing directories print " the dir is  % s " % os.listdir  os.getcwd    # renaming directory ''tutorialsdir " os.rename  " tutorialsdir "  " tutorialsdirectory "  print " successfully renamed " # listing directories after renaming " tutorialsdir " print " the dir is  % s " % os.listdir  os.getcwd    let us compile and run the above program  this will produce the following result  the dir is   'a1.txt','resume.doc','a3.py','tutorialsdir','amrood.admin '  successfully renamed the dir is   'a1.txt','resume.doc','a3.py','tutorialsdirectory','amrood.admin '  os.renames  old  new  description the method renames   is recursive directory or file renaming function it does the same functioning as os.rename    but it also moves a file to a directory  or a whole tree of directories  that do not exist syntax following is the syntax for renames   method  os.renames  old  new  parameters old  this is the actual name of the file or directory to be renamed new  this is the new name of the file or directory.it can even include a file to a directory  or a whole tree of directories  that do not exist return value this method does not return any value example the following example shows the usage of renames   method # ! /usr/bin/python import os  sys print " current directory is  % s " % os.getcwd   # listing directories print " the dir is  % s " % os.listdir  os.getcwd    # renaming file " aa1.txt " os.renames  " aa1.txt "  " newdir/aanew.txt "  print " successfully renamed " # listing directories after renaming and moving " aa1.txt " print " the dir is  % s " % os.listdir  os.getcwd    let us compile and run the above program  this will produce the following result  current directory is  /tmp the dir is   'a1.txt','resume.doc','a3.py','aa1.txt','administrator','amrood.admin '  successfully renamed the dir is   'a1.txt','resume.doc','a3.py','administrator','amrood.admin '  the file aa1.txt is not visible here  as it is been moved to newdir and renamed as aanew.txt the directory newdir and its contents are shown below   'aanew.txt '  os.rmdir  path  description the method rmdir   removes the directory path it works only when the directory is empty  else oserroris raised syntax following is the syntax for rmdir   method  os.rmdir  path  parameters path  this is the path of the directory  which needs to be removed return value this method does not return any value example the following example shows the usage of rmdir   method # ! /usr/bin/python import os  sys # listing directories print " the dir is  % s " % os.listdir  os.getcwd    # removing path os.rmdir  " mydir "  # listing directories after removing directory path print " the dir is  " % os.listdir  os.getcwd    let us compile and run the above program  this will produce the following result  the dir is   'a1.txt','resume.doc','a3.py','mydir','administrator','amrood.admin '  os.rmdir  " mydir "  oserror   errno 90  directory not empty  'mydir ' the error is coming as 'mydir ' directory is not empty if 'mydir ' is an empty directory  then this would produce following result  the dir is   'a1.txt','resume.doc','a3.py','mydir','administrator','amrood.admin '  the dir is   'a1.txt','resume.doc','a3.py','administrator','amrood.admin '  os.stat  path  description the method stat   performs a stat system call on the given path syntax following is the syntax for stat   method  os.stat  path  parameters path  this is the path  whose stat information is required return value here is the list of members of stat structure  st_mode  protection bits st_ino  inode number st_dev  device st_nlink  number of hard links st_uid  user id of owner st_gid  group id of owner st_size  size of file  in bytes st_atime  time of most recent access st_mtime  time of most recent content modification st_ctime  time of most recent metadata change example the following example shows the usage of stat   method # ! /usr/bin/python import os  sys # showing stat information of file " a2.py " statinfo = os.stat  'a2.py '  print statinfo let us compile and run the above program  this will produce the following result  posix.stat_result  st_mode = 33188  st_ino = 3940649674337682l  st_dev = 277923425l  st _nlink = 1  st_uid = 400  st_gid = 401  st_size = 335l  st_atime = 1330498089  st_mtime = 13 30498089  st_ctime = 1330498089  os.stat_float_times   newvalue   description the method stat_float_times   determines whether stat_result represents time stamps as float objects syntax following is the syntax for stat_float_times   method  os.stat_float_times   newvalue   parameters newvalue  if newvalue is true  future calls to stat   return floats  if it is false  future calls return ints if newvalue is not mentioned  it returns the current settings return value this method returns true or false example the following example shows the usage of stat_float_times   method # ! /usr/bin/python import os  sys # stat information statinfo = os.stat  'a2.py '  print statinfo statinfo = os.stat_float_times   print statinfo let us compile and run the above program  this will produce the following result  posix.stat_result  st_mode = 33188  st_ino = 3940649674337682l  st_dev = 277923425l  st_nlink = 1  st_uid = 400  st_gid = 401  st_size = 335l  st_atime = 1330498089  st_mtime = 13 30498089  st_ctime = 1330498089  true os.statvfs  path  description the method statvfs   performs a statvfs system call on the given path syntax following is the syntax for statvfs   method  os.statvfs  path  parameters path  this is the path whose statvfs information is required return value here is the list of members of statvfs structure  f_bsize  preferred file system block size f_frsize  fundamental file system block size f_blocks  total number of blocks in the filesystem f_bfree  total number of free blocks f_bavail  free blocks available to non-super user f_files  total number of file nodes f_ffree  total number of free file nodes f_favail  free nodes available to non-super user f_flag  system dependent f_namemax  maximum file name length example the following example shows the usage of statvfs   method # ! /usr/bin/python import os  sys # showing statvfs information of file " a1.py " stinfo = os.statvfs  'a1.py '  print stinfo let us compile and run the above program  this will produce the following result  posix.statvfs_result  f_bsize = 4096  f_frsize = 4096  f_blocks = 1909350l  f_bfree = 1491513l  f_bavail = 1394521l  f_files = 971520l  f_ffree = 883302l  f_fvail = 883302l  f_flag = 0  f_namemax = 255  os.symlink  src  dst  description the method symlink   creates a symbolic link dst pointing to src syntax following is the syntax for symlink   method  os.symlink  src  dst  parameters src  this is the source dest  this is the destination  which did n't exist previously return value this method does not return any value example the following example shows the usage of symlink   method # ! /usr/bin/python import os src = '/usr/bin/python ' dst = '/tmp/python ' # this creates a symbolic link on python in tmp directory os.symlink  src  dst  print " symlink created " let us compile and run the above program  this will create s symbolic link in /tmp directory which will be as follows  lrwxrwxrwx 1 root root 15 apr 30 03  00 python  > /usr/bin/python os.tcgetpgrp  fd  description the method tcgetpgrp   returns the process group associated with the terminal given by fd  an open file descriptor as returned by os.open    syntax following is the syntax for tcgetpgrp   method  os.tcgetpgrp  fd  parameters fd  this is the file descriptor return value this method returns the process group example the following example shows the usage of tcgetpgrp   method # ! /usr/bin/python import os  sys # showing current directory print " current working dir  % s " % os.getcwd   # changing dir to /dev/tty fd = os.open  " /dev/tty " ,os.o_rdonly  f = os.tcgetpgrp  fd  # showing the process group print " the process group associated is  " print f os.close  fd  print " closed the file successfully ! ! " let us compile and run the above program  this will produce the following result  current working dir is  /tmp the process group associated is  2670 closed the file successfully ! ! os.tcsetpgrp  fd  pg  description the method tcsetpgrp   sets the process group associated with the terminal given by fd  an open file descriptor as returned by os.open    to pg syntax following is the syntax for tcsetpgrp   method  os.tcsetpgrp  fd  pg  parameters fd  this is the file descriptor pg  this set the process group to pg return value this method does not return any value example the following example shows the usage of tcsetpgrp   method # ! /usr/bin/python import os  sys # showing current directory print " current working dir  % s " % os.getcwd   # changing dir to /dev/tty fd = os.open  " /dev/tty " ,os.o_rdonly  f = os.tcgetpgrp  fd  # showing the process group print " the process group associated is  " print f # setting the process group os.tcsetpgrp  fd,2672  print " done " os.close  fd  print " closed the file successfully ! ! " let us compile and run the above program  this will produce the following result  current working dir is  /tmp the process group associated is  2672 done closed the file successfully ! ! os.tempnam   dir   prefix    description the method tempnam   returns a unique path name that is reasonable for creating a temporary file syntax following is the syntax for tempnam   method  os.tempnam  dir  prefix  parameters dir  this is the dir where the temporary filename will be created prefix  this is the prefix of the generated temporary filename return value this method returns a unique path example the following example shows the usage of tempnam   method # ! /usr/bin/python import os  sys # prefix is tuts1 of the generated file tmpfn = os.tempnam  '/tmp/tutorialsdir,'tuts1 '  print " this is the unique path  " print tmpfn let us compile and run the above program  this will produce the following result  this is the unique path  /tmp/tutorialsdir/tuts1ibaco8 os.tmpfile   description the method tmpfile   returns a new temporary file object opened in update mode  w + b   the file has no directory entries associated with it and will be deleted automatically once there are no file descriptors syntax following is the syntax for tmpfile   method  os.tmpfile parameters na return value this method returns a new temporary file object example the following example shows the usage of tmpfile   method # ! /usr/bin/python import os # the file has no directory entries associated with it and will be # deleted automatically once there are no file descriptors tmpfile = os.tmpfile   tmpfile.write  'temporary newfile is here '  tmpfile.seek  0  print tmpfile.read   tmpfile.close let us compile and run the above program  this will produce the following result  temporary newfile is here os.tmpnam   description the method tmpnam   returns a unique path name that is reasonable for creating a temporary file syntax following is the syntax for tmpnam   method  os.tmpnam   parameters na return value this method returns a unique path name example the following example shows the usage of tmpnam   method # ! /usr/bin/python import os  sys # temporary file generated in current directory tmpfn = os.tmpnam   print " this is the unique path  " print tmpfn let us compile and run the above program  this will produce the following result  this is the unique path  /tmp/fileufojpd os.ttyname  fd  description the method ttyname   returns a string  which specifies the terminal device associated with fd if fd is not associated with a terminal device  an exception is raised syntax following is the syntax for ttyname   method  os.ttyname  fd  parameters fd  this is the file descriptor return value this method returns a string which specifies the terminal device example the following example shows the usage of ttyname   method # ! /usr/bin/python import os  sys # showing current directory print " current working dir  % s " % os.getcwd   # changing dir to /dev/tty fd = os.open  " /dev/tty " ,os.o_rdonly  p = os.ttyname  fd  print " the terminal device associated is  " print p print " done ! ! " os.close  fd  print " closed the file successfully ! ! " let us compile and run the above program  this will produce the following result  current working dir is  /tmp the terminal device associated is  /dev/tty done ! ! closed the file successfully ! ! os.unlink  path  description the method unlink   removes  delete  the file path if the path is a directory  oserror is raised syntax following is the syntax for unlink   method  os.unlink  path  parameters path  this is the path  which is to be removed return value this method does not return any value example the following example shows the usage of unlink   method # ! /usr/bin/python import os  sys # listing directories print " the dir is  % s " % os.listdir  os.getcwd    os.unlink  " aa.txt "  # listing directories after removing path print " the dir after removal of path  % s " % os.listdir  os.getcwd    let us compile and run the above program  this will produce the following result  the dir is   'a1.txt','aa.txt','resume.doc','a3.py','tutorialsdir','amrood.admin '  the dir after removal of path   'a1.txt','resume.doc','a3.py','tutorialsdir','amrood.admin '  os.utime  path  times  description the method utime   sets the access and modified times of the file specified by path syntax following is the syntax for utime   method  os.utime  path  times  parameters path  this is the path of the file times  this is the file access and modified time if times is none  then the file access and modified times are set to the current time the parameter times consists of row in the form of  atime  mtime  i.e   accesstime  modifiedtime   return value this method does not return any value example the following example shows the usage of utime   method # ! /usr/bin/python import os  sys # showing stat information of file stinfo = os.stat  'a2.py '  print stinfo # using os.stat to recieve atime and mtime of file print " access time of a2.py  % s " % stinfo.st_atime print " modified time of a2.py  % s " % stinfo.st_mtime # modifying atime and mtime os.utime  " a2.py "   1330712280  1330712292   print " done ! ! " let us compile and run the above program  this will produce the following result  posix.stat_result  st_mode = 33188  st_ino = 3940649674337682l  st_dev = 277923425l  st _nlink = 1  st_uid = 400  st_gid = 401  st_size = 335l  st_atime = 1330498070  st_mtime = 13 30498074  st_ctime = 1330498065  access time of a2.py  1330498070 modified time of a2.py  1330498074 done ! ! os.walk  top   topdown = true   onerror = none   followlinks = false     description the method walk   generates the file names in a directory tree by walking the tree either top-down or bottom-up syntax following is the syntax for walk   method  os.walk  top   topdown = true   onerror = none   followlinks = false     parameters top  each directory rooted at directory  yields 3-tuples  i.e   dirpath  dirnames  filenames  topdown  if optional argument topdown is true or not specified  directories are scanned from top-down if topdown is set to false  directories are scanned from bottom-up onerror  this can show error to continue with the walk  or raise the exception to abort the walk followlinks  this visits directories pointed to by symlinks  if set to true return value this method does not return any value example the following example shows the usage of walk   method # ! /usr/bin/python import os for root  dirs  files in os.walk  "  "  topdown = false   for name in files  print  os.path.join  root  name   for name in dirs  print  os.path.join  root  name   let us compile and run the above program  this will scan all the directories and subdirectories bottom-to-up ./tmp/test.py ./.bash_logout ./amrood.tar.gz ./.emacs ./httpd.conf ./www.tar.gz ./mysql.tar.gz ./test.py ./.bashrc ./.bash_history ./.bash_profile ./tmp if you will change the value of topdown to true  then it will give you the following result  ./.bash_logout ./amrood.tar.gz ./.emacs ./httpd.conf ./www.tar.gz ./mysql.tar.gz ./test.py ./.bashrc ./.bash_history ./.bash_profile ./tmp ./tmp/test.py os.write  fd  str  description the method write   writes the string str to file descriptor fd return the number of bytes actually written syntax following is the syntax for write   method  os.write  fd  str  parameters fd  this is the file descriptor str  this is the string to be written return value this method returns the number of bytes actually written example the following example shows the usage of write   method # ! /usr/bin/python import os  sys # open file fd = os.open  " f1.txt " ,os.o_rdwr | os.creat  # writing text ret = os.write  fd  " this is test "  # ret consists of number of bytes written to f1.txt print " the number of bytes written  " print ret print " written successfully " # close opened file os.close  fd  print " closed the file successfully ! ! " let us compile and run the above program  this will produce the following result  the number of bytes written  12 written successfully closed the file successfully ! ! python exceptions python provides two very important features to handle any unexpected error in your python programs and to add debugging capabilities in them  exception handling  here is a list standard exceptions available in python  exception name description exception base class for all exceptions stopiteration raised when the next   method of an iterator does not point to any object systemexit raised by the sys.exit   function standarderror base class for all built-in exceptions except stopiteration and systemexit arithmeticerror base class for all errors that occur for numeric calculation overflowerror raised when a calculation exceeds maximum limit for a numeric type floatingpointerror raised when a floating point calculation fails zerodivisonerror raised when division or modulo by zero takes place for all numeric types assertionerror raised in case of failure of the assert statement attributeerror raised in case of failure of attribute reference or assignment eoferror raised when there is no input from either the raw_input   or input   function and the end of file is reached importerror raised when an import statement fails keyboardinterrupt raised when the user interrupts program execution  usually by pressing ctrl + c lookuperror base class for all lookup errors indexerror raised when an index is not found in a sequence chapter 17 keyerror raised when the specified key is not found in the dictionary nameerror raised when an identifier is not found in the local or global namespace unboundlocalerror raised when trying to access a local variable in a function or method but no value has been assigned to it environmenterror base class for all exceptions that occur outside the python environment ioerror raised when an input/ output operation fails  such as the print statement or the open   function when trying to open a file that does not exist oserror raised for operating systemrelated errors syntaxerror raised when there is an error in python syntax indentationerror raised when indentation is not specified properly systemerror raised when the interpreter finds an internal problem  but when this error is encountered the python interpreter does not exit systemexit raised when python interpreter is quit by using the sys.exit   function if not handled in the code  causes the interpreter to exit typeerror raised when an operation or function is attempted that is invalid for the specified data type valueerror raised when the built-in function for a data type has the valid type of arguments  but the arguments have invalid values specified runtimeerror raised when a generated error does not fall into any category notimplementederror raised when an abstract method that needs to be implemented in an inherited class is not actually implemented assertions  an assertion is a sanity-check that you can turn on or turn off when you are done with your testing of the program the easiest way to think of an assertion is to liken it to a raise-if statement  or to be more accurate  a raise-if-not statement   an expression is tested  and if the result comes up false  an exception is raised assertions are carried out by the assert statement  the newest keyword to python  introduced in version 1.5 programmers often place assertions at the start of a function to check for valid input  and after a function call to check for valid output the assert statement  when it encounters an assert statement  python evaluates the accompanying expression  which is hopefully true if the expression is false  python raises an assertionerror exception the syntax for assert is  assert expression   arguments  if the assertion fails  python uses argumentexpression as the argument for the assertionerror assertionerror exceptions can be caught and handled like any other exception using the try-except statement  but if not handled  they will terminate the program and produce a traceback example  here is a function that converts a temperature from degrees kelvin to degrees fahrenheit since zero degrees kelvin is as cold as it gets  the function bails out if it sees a negative temperature  # ! /usr/bin/python def kelvintofahrenheit  temperature   assert  temperature > = 0   " colder than absolute zero ! " return   temperature-273  * 1.8  + 32 print kelvintofahrenheit  273  print int  kelvintofahrenheit  505.78   print kelvintofahrenheit  -5  when the above code is executed  it produces the following result  32.0 451 traceback  most recent call last   file " test.py "  line 9  in < module > print kelvintofahrenheit  -5  file " test.py "  line 4  in kelvintofahrenheit assert  temperature > = 0   " colder than absolute zero ! " assertionerror  colder than absolute zero ! what is exception an exception is an event  which occurs during the execution of a program  that disrupts the normal flow of the program 's instructions in general  when a python script encounters a situation that it ca n't cope with  it raises an exception an exception is a python object that represents an error when a python script raises an exception  it must either handle the exception immediately otherwise it would terminate and come out handling an exception  if you have some suspicious code that may raise an exception  you can defend your program by placing the suspicious code in a try  block after the try  block  include an except  statement  followed by a block of code which handles the problem as elegantly as possible syntax  here is simple syntax of try....except...else blocks  try  you do your operations here ;  except exceptioni  if there is exceptioni  then execute this block except exceptionii  if there is exceptionii  then execute this block  else  if there is no exception then execute this block here are few important points about the above-mentioned syntax  a single try statement can have multiple except statements this is useful when the try block contains statements that may throw different types of exceptions you can also provide a generic except clause  which handles any exception after the except clause  s   you can include an else-clause the code in the else-block executes if the code in the try  block does not raise an exception the else-block is a good place for code that does not need the try  block 's protection example  here is simple example  which opens a file and writes the content in the file and comes out gracefully because there is no problem at all  # ! /usr/bin/python try  fh = open  " testfile "  " w "  fh.write  " this is my test file for exception handling ! ! "  except ioerror  print " error  can \ 't find file or read data " else  print " written content in the file successfully " fh.close   this will produce the following result  written content in the file successfully example  here is one more simple example  which tries to open a file where you do not have permission to write in the file  so it raises an exception  # ! /usr/bin/python try  fh = open  " testfile "  " w "  fh.write  " this is my test file for exception handling ! ! "  except ioerror  print " error  can \ 't find file or read data " else  print " written content in the file successfully " this will produce the following result  error  ca n't find file or read data the except clause with no exceptions  you can also use the except statement with no exceptions defined as follows  try  you do your operations here ;  except  if there is any exception  then execute this block  else  if there is no exception then execute this block this kind of a try-except statement catches all the exceptions that occur using this kind of try-except statement is not considered a good programming practice though  because it catches all exceptions but does not make the programmer identify the root cause of the problem that may occur the except clause with multiple exceptions  you can also use the same except statement to handle multiple exceptions as follows  try  you do your operations here ;  except  exception1   exception2  ,...exceptionn      if there is any exception from the given exception list  then execute this block  else  if there is no exception then execute this block the try finally clause  you can use a finally  block along with a try  block the finally block is a place to put any code that must execute  whether the try-block raised an exception or not the syntax of the try-finally statement is this  try  you do your operations here ;  due to any exception  this may be skipped finally  this would always be executed  note that you can provide except clause  s   or a finally clause  but not both you can not use else clause as well along with a finally clause example  # ! /usr/bin/python try  fh = open  " testfile "  " w "  fh.write  " this is my test file for exception handling ! ! "  finally  print " error  can \ 't find file or read data " if you do not have permission to open the file in writing mode  then this will produce the following result  error  ca n't find file or read data same example can be written more cleanly as follows  # ! /usr/bin/python try  fh = open  " testfile "  " w "  try  fh.write  " this is my test file for exception handling ! ! "  finally  print " going to close the file " fh.close   except ioerror  print " error  can \ 't find file or read data " when an exception is thrown in the try block  the execution immediately passes to the finally block after all the statements in the finally block are executed  the exception is raised again and is handled in the except statements if present in the next higher layer of the try-except statement argument of an exception  an exception can have an argument  which is a value that gives additional information about the problem the contents of the argument vary by exception you capture an exception 's argument by supplying a variable in the except clause as follows  try  you do your operations here ;  except exceptiontype  argument  you can print value of argument here if you are writing the code to handle a single exception  you can have a variable follow the name of the exception in the except statement if you are trapping multiple exceptions  you can have a variable follow the tuple of the exception this variable will receive the value of the exception mostly containing the cause of the exception the variable can receive a single value or multiple values in the form of a tuple this tuple usually contains the error string  the error number  and an error location example  following is an example for a single exception  # ! /usr/bin/python # define a function here def temp_convert  var   try  return int  var  except valueerror  argument  print " the argument does not contain numbers \ n "  argument # call above function here temp_convert  " xyz "  ; this would produce the following result  the argument does not contain numbers invalid literal for int   with base 10  'xyz ' raising an exceptions  you can raise exceptions in several ways by using the raise statement the general syntax for the raise statement syntax  raise  exception   args   traceback    here  exception is the type of exception  for example  nameerror  and argument is a value for the exception argument the argument is optional ; if not supplied  the exception argument is none the final argument  traceback  is also optional  and rarely used in practice   and if present  is the traceback object used for the exception example  an exception can be a string  a class or an object most of the exceptions that the python core raises are classes  with an argument that is an instance of the class defining new exceptions is quite and can be done as follows  def functionname  level   if level < 1  raise " invalid level ! "  level # the code below to this would not be executed # if we raise the exception note  in order to catch an exception  an " except " clause must refer to the same exception thrown either class object or simple string for example  to capture above exception  we must write our except clause as follows  try  business logic here except " invalid level ! "  exception handling here else  rest of the code here user defined exceptions  python also allows you to create your own exceptions by deriving classes from the standard built-in exceptions here is an example related to runtimeerror here  a class is created that is subclassed from runtimeerror this is useful when you need to display more specific information when an exception is caught in the try block  the user-defined exception is raised and caught in the except block the variable e is used to create an instance of the class networkerror class networkerror  runtimeerror   def __init__  self  arg   self.args = arg so once you defined above class  you can raise your exception as follows  try  raise networkerror  " bad hostname "  except networkerror,e  print e.args python classes/objects python has been an object-oriented language from day one because of this  creating and using classes and objects are downright  this chapter helps you become an expert in using python 's object-oriented programming support if you do n't have any previous experience with object-oriented  oo  programming  you may want to consult an introductory course on it or at least a tutorial of some sort so that you have a grasp of the basic concepts however  here is small introduction of object-oriented programming  oop  to bring you at speed  overview of oop terminology class  a user-defined prototype for an object that defines a set of attributes that characterize any object of the class the attributes are data members  class variables and instance variables  and methods  accessed via dot notation class variable  a variable that is shared by all instances of a class class variables are defined within a class but outside any of the class 's methods class variables are n't used as frequently as instance variables are data member  a class variable or instance variable that holds data associated with a class and its objects function overloading  the assignment of more than one behavior to a particular function the operation performed varies by the types of objects  arguments  involved instance variable  a variable that is defined inside a method and belongs only to the current instance of a class inheritance  the transfer of the characteristics of a class to other classes that are derived from it instance  an individual object of a certain class an object obj that belongs to a class circle  for example  is an instance of the class circle instantiation  the creation of an instance of a class method  a special kind of function that is defined in a class definition object  a unique instance of a data structure that 's defined by its class an object comprises both data members  class variables and instance variables  and methods operator overloading  the assignment of more than one function to a particular operator creating classes  the class statement creates a new class definition the name of the class immediately follows the keyword class followed by a colon as follows  class classname  chapter 18 'optional class documentation string ' class_suite the class has a documentation string  which can be accessed via classname.__doc__ the class_suite consists of all the component statements defining class members  data attributes and functions example  following is the example of a simple python class  class employee  'common base class for all employees ' empcount = 0 def __init__  self  name  salary   self.name = name self.salary = salary employee.empcount + = 1 def displaycount  self   print " total employee % d " % employee.empcount def displayemployee  self   print " name  "  self.name  "  salary  "  self.salary the variable empcount is a class variable whose value would be shared among all instances of a this class this can be accessed as employee.empcount from inside the class or outside the class the first method __init__   is a special method  which is called class constructor or initialization method that python calls when you create a new instance of this class you declare other class methods like normal functions with the exception that the first argument to each method is self python adds the self argument to the list for you ; you do n't need to include it when you call the methods creating instance objects  to create instances of a class  you call the class using class name and pass in whatever arguments its __init__ method accepts " this would create first object of employee class " emp1 = employee  " zara "  2000  " this would create second object of employee class " emp2 = employee  " manni "  5000  accessing attributes  you access the object 's attributes using the dot operator with object class variable would be accessed using class name as follows  emp1.displayemployee   emp2.displayemployee   print " total employee % d " % employee.empcount now  putting all the concepts together  # ! /usr/bin/python class employee  'common base class for all employees ' empcount = 0 def __init__  self  name  salary   self.name = name self.salary = salary employee.empcount + = 1 def displaycount  self   print " total employee % d " % employee.empcount def displayemployee  self   print " name  "  self.name  "  salary  "  self.salary " this would create first object of employee class " emp1 = employee  " zara "  2000  " this would create second object of employee class " emp2 = employee  " manni "  5000  emp1.displayemployee   emp2.displayemployee   print " total employee % d " % employee.empcount when the above code is executed  it produces the following result  name  zara ,salary  2000 name  manni ,salary  5000 total employee 2 you can add  remove or modify attributes of classes and objects at any time  emp1.age = 7 # add an 'age ' attribute emp1.age = 8 # modify 'age ' attribute del emp1.age # delete 'age ' attribute instead of using the normal statements to access attributes  you can use following functions  the getattr  obj  name   default    to access the attribute of object the hasattr  obj,name   to check if an attribute exists or not the setattr  obj,name,value   to set an attribute if attribute does not exist  then it would be created the delattr  obj  name   to delete an attribute hasattr  emp1  'age '  # returns true if 'age ' attribute exists getattr  emp1  'age '  # returns value of 'age ' attribute setattr  emp1  'age '  8  # set attribute 'age ' at 8 delattr  empl  'age '  # delete attribute 'age ' built in class attributes  every python class keeps following built-in attributes and they can be accessed using dot operator like any other attribute  __dict__  dictionary containing the class 's namespace __doc__  class documentation string or none if undefined __name__  class name __module__  module name in which the class is defined this attribute is " __main__ " in interactive mode __bases__  a possibly empty tuple containing the base classes  in the order of their occurrence in the base class list for the above class let 's try to access all these attributes  print " employee.__doc__  "  employee.__doc__ print " employee.__name__  "  employee.__name__ print " employee.__module__  "  employee.__module__ print " employee.__bases__  "  employee.__bases__ print " employee.__dict__  "  employee.__dict__ when the above code is executed  it produces the following result  employee.__doc__  common base class for all employees employee.__name__  employee employee.__module__  __main__ employee.__bases__    employee.__dict__   '__module__ '  '__main__ '  'displaycount '  < function displaycount at 0xb7c84994 >  'empcount '  2  'displayemployee '  < function displayemployee at 0xb7c8441c >  '__doc__ '  'common base class for all employees '  '__init__ '  < function __init__ at 0xb7c846bc >  destroying objects  garbage collection   python deletes unneeded objects  built-in types or class instances  automatically to free memory space the process by which python periodically reclaims blocks of memory that no longer are in use is termed garbage collection python 's garbage collector runs during program execution and is triggered when an object 's reference count reaches zero an object 's reference count changes as the number of aliases that point to it changes an object 's reference count increases when it 's assigned a new name or placed in a container  list  tuple or dictionary   the object 's reference count decreases when it 's deleted with del  its reference is reassigned  or its reference goes out of scope when an object 's reference count reaches zero  python collects it automatically a = 40 # create object < 40 > b = a # increase ref count of < 40 > c =  b  # increase ref count of < 40 > del a # decrease ref count of < 40 > b = 100 # decrease ref count of < 40 > c  0  = -1 # decrease ref count of < 40 > you normally wo n't notice when the garbage collector destroys an orphaned instance and reclaims its space but a class can implement the special method __del__    called a destructor  that is invoked when the instance is about to be destroyed this method might be used to clean up any nonmemory resources used by an instance example  this __del__   destructor prints the class name of an instance that is about to be destroyed  # ! /usr/bin/python class point  def __init  self  x = 0  y = 0   self.x = x self.y = y def __del__  self   class_name = self.__class__.__name__ print class_name  " destroyed " pt1 = point   pt2 = pt1 pt3 = pt1 print id  pt1   id  pt2   id  pt3  # prints the ids of the obejcts del pt1 del pt2 del pt3 when the above code is executed  it produces the following result  3083401324 3083401324 3083401324 point destroyed note  ideally  you should define your classes in separate file  then you should import them in your main program file using import statement kindly check python  modules chapter for more details on importing modules and classes class inheritance  instead of starting from scratch  you can create a class by deriving it from a preexisting class by listing the parent class in parentheses after the new class name the child class inherits the attributes of its parent class  and you can use those attributes as if they were defined in the child class a child class can also override data members and methods from the parent syntax  derived classes are declared much like their parent class ; however  a list of base classes to inherit from are given after the class name  class subclassname  parentclass1   parentclass2      'optional class documentation string ' class_suite example  # ! /usr/bin/python class parent  # define parent class parentattr = 100 def __init__  self   print " calling parent constructor " def parentmethod  self   print 'calling parent method ' def setattr  self  attr   parent.parentattr = attr def getattr  self   print " parent attribute  "  parent.parentattr class child  parent   # define child class def __init__  self   print " calling child constructor " def childmethod  self   print 'calling child method ' c = child   # instance of child c.childmethod   # child calls its method c.parentmethod   # calls parent 's method c.setattr  200  # again call parent 's method c.getattr   # again call parent 's method when the above code is executed  it produces the following result  calling child constructor calling child method calling parent method parent attribute  200 similar way  you can drive a class from multiple parent classes as follows  class a  # define your class a  class b  # define your calss b  class c  a  b   # subclass of a and b  you can use issubclass   or isinstance   functions to check a relationships of two classes and instances the issubclass  sub  sup  boolean function returns true if the given subclass sub is indeed a subclass of the superclass sup the isinstance  obj  class  boolean function returns true if obj is an instance of class class or is an instance of a subclass of class overriding methods  you can always override your parent class methods one reason for overriding parent 's methods is because you may want special or different functionality in your subclass example  # ! /usr/bin/python class parent  # define parent class def mymethod  self   print 'calling parent method ' class child  parent   # define child class def mymethod  self   print 'calling child method ' c = child   # instance of child c.mymethod   # child calls overridden method when the above code is executed  it produces the following result  calling child method base overloading methods  following table lists some generic functionality that you can override in your own classes  sn method  description & sample call 1 __init__  self  ,args   constructor  with any optional arguments  sample call  obj = classname  args  2 __del__  self  destructor  deletes an object sample call  dell obj 3 __repr__  self  evaluatable string representation sample call  repr  obj  4 __str__  self  printable string representation sample call  str  obj  5 __cmp__  self  x  object comparison sample call  cmp  obj  x  overloading operators  suppose you 've created a vector class to represent two-dimensional vectors  what happens when you use the plus operator to add them most likely python will yell at you you could  however  define the __add__ method in your class to perform vector addition and then the plus operator would behave as per expectation  example  # ! /usr/bin/python class vector  def __init__  self  a  b   self.a = a self.b = b def __str__  self   return 'vector  % d  % d  ' %  self.a  self.b  def __add__  self,other   return vector  self.a + other.a  self.b + other.b  v1 = vector  2,10  v2 = vector  5,-2  print v1 + v2 when the above code is executed  it produces the following result  vector  7,8  data hiding  an object 's attributes may or may not be visible outside the class definition for these cases  you can name attributes with a double underscore prefix  and those attributes will not be directly visible to outsiders example  # ! /usr/bin/python class justcounter  __secretcount = 0 def count  self   self.__secretcount + = 1 print self.__secretcount counter = justcounter   counter.count   counter.count   print counter.__secretcount when the above code is executed  it produces the following result  1 2 traceback  most recent call last   file " test.py "  line 12  in < module > print counter.__secretcount attributeerror  justcounter instance has no attribute '__secretcount ' python protects those members by internally changing the name to include the class name you can access such attributes as object._classname__attrname if you would replace your last line as following  then it would work for you  print counter._justcounter__secretcount when the above code is executed  it produces the following result  1 2 2 python regular expressions aregular expression is a special sequence of characters that helps you match or find other strings or sets of strings  using a specialized syntax held in a pattern regular expressions are widely used in unix world the module re provides full support for perl-like regular expressions in python the re module raises the exception re.error if an error occurs while compiling or using a regular expression we would cover two important functions  which would be used to handle regular expressions but a small thing first  there are various characters  which would have special meaning when they are used in regular expression to avoid any confusion while dealing with regular expressions  we would use raw strings as r'expression' the match function this function attempts to match re pattern to string with optional flags here is the syntax for this function  re.match  pattern  string  flags = 0  here is the description of the parameters  parameter description pattern this is the regular expression to be matched string this is the string  which would be searched to match the pattern at the beginning of string flags you can specify different flags using bitwise or  |   these are modifiers  which are listed in the table below the re.match function returns a match object on success  none on failure we would use group  num  or groups   function of match object to get matched expression match object methods description group  num = 0  this method returns entire match  or specific subgroup num  chapter 19 groups   this method returns all matching subgroups in a tuple  empty if there were n't any  example  # ! /usr/bin/python import re line = " cats are smarter than dogs " ; matchobj = re.match  r '   *  are   *   * '  line  re.m | re.i  if matchobj  print " matchobj.group    "  matchobj.group   print " matchobj.group  1   "  matchobj.group  1  print " matchobj.group  2   "  matchobj.group  2  else  print " no match ! ! " when the above code is executed  it produces the following result  matchobj.group    cats are matchobj.group  1   cats matchobj.group  2   smarter the search function this function searches for first occurrence of re pattern within string with optional flags here is the syntax for this function  re.search  pattern  string  flags = 0  here is the description of the parameters  parameter description pattern this is the regular expression to be matched string this is the string  which would be searched to match the pattern anywhere in the string flags you can specify different flags using bitwise or  |   these are modifiers  which are listed in the table below the re.search function returns a match object on success  none on failure we would use group  num  or groups   function of match object to get matched expression match object methods description group  num = 0  this method returns entire match  or specific subgroup num  groups   this method returns all matching subgroups in a tuple  empty if there were n't any  example  # ! /usr/bin/python import re line = " cats are smarter than dogs " ; matchobj = re.search  r '   *  are   *   * '  line  re.m | re.i  if matchobj  print " matchobj.group    "  matchobj.group   print " matchobj.group  1   "  matchobj.group  1  print " matchobj.group  2   "  matchobj.group  2  else  print " no match ! ! " when the above code is executed  it produces the following result  matchobj.group    cats are matchobj.group  1   cats matchobj.group  2   smarter matching vs searching  python offers two different primitive operations based on regular expressions  match checks for a match only at the beginning of the string  while search checks for a match anywhere in the string  this is what perl does by default   example  # ! /usr/bin/python import re line = " cats are smarter than dogs " ; matchobj = re.match  r'dogs '  line  re.m | re.i  if matchobj  print " match  > matchobj.group    "  matchobj.group   else  print " no match ! ! " matchobj = re.search  r'dogs '  line  re.m | re.i  if matchobj  print " search  > matchobj.group    "  matchobj.group   else  print " no match ! ! " when the above code is executed  it produces the following result  no match ! ! search  > matchobj.group    dogs search and replace  some of the most important re methods that use regular expressions is sub syntax  re.sub  pattern  repl  string  max = 0  this method replaces all occurrences of the re pattern in string with repl  substituting all occurrences unless max provided this method would return modified string example  following is the example  # ! /usr/bin/python import re phone = " 2004-959-559 # this is phone number " # delete python-style comments num = re.sub  r ' #  * $ '  " "  phone  print " phone num  "  num # remove anything other than digits num = re.sub  r ' \ d '  " "  phone  print " phone num  "  num when the above code is executed  it produces the following result  phone num  2004-959-559 phone num  2004959559 regular expression modifiers  option flags regular expression literals may include an optional modifier to control various aspects of matching the modifiers are specified as an optional flag you can provide multiple modifiers using exclusive or  |   as shown previously and may be represented by one of these  modifier description re.i performs case-insensitive matching re.l interprets words according to the current locale this interpretation affects the alphabetic group  \ w and \ w   as well as word boundary behavior  \ b and \ b   re.m makes $ match the end of a line  not just the end of the string  and makes ^ match the start of any line  not just the start of the string   re.s makes a period  dot  match any character  including a newline re.u interprets letters according to the unicode character set this flag affects the behavior of \ w  \ w  \ b  \ b re.x permits " cuter " regular expression syntax it ignores whitespace  except inside a set   or when escaped by a backslash  and treats unescaped # as a comment marker regular expression patterns  except for control characters   +  * ^ $       | \   all characters match themselves you can escape a control character by preceding it with a backslash following table lists the regular expression syntax that is available in python  pattern description ^ matches beginning of line $ matches end of line  matches any single character except newline using m option allows it to match newline as well    matches any single character in brackets  ^   matches any single character not in brackets re * matches 0 or more occurrences of preceding expression re + matches 1 or more occurrence of preceding expression re matches 0 or 1 occurrence of preceding expression re  n  matches exactly n number of occurrences of preceding expression re  n   matches n or more occurrences of preceding expression re  n  m  matches at least n and at most m occurrences of preceding expression a | b matches either a or b  re  groups regular expressions and remembers matched text  imx  temporarily toggles on i  m  or x options within a regular expression if in parentheses  only that area is affected  -imx  temporarily toggles off i  m  or x options within a regular expression if in parentheses  only that area is affected   re  groups regular expressions without remembering matched text  imx  re  temporarily toggles on i  m  or x options within parentheses  -imx  re  temporarily toggles off i  m  or x options within parentheses  #   comment  = re  specifies position using a pattern does n't have a range  ! re  specifies position using pattern negation does n't have a range  > re  matches independent pattern without backtracking \ w matches word characters \ w matches nonword characters \ s matches whitespace equivalent to  \ t \ n \ r \ f   \ s matches nonwhitespace \ d matches digits equivalent to  0-9   \ d matches nondigits \ a matches beginning of string \ z matches end of string if a newline exists  it matches just before newline \ z matches end of string \ g matches point where last match finished \ b matches word boundaries when outside brackets matches backspace  0x08  when inside brackets \ b matches nonword boundaries \ n  \ t  etc matches newlines  carriage returns  tabs  etc \ 1 \ 9 matches nth grouped subexpression \ 10 matches nth grouped subexpression if it matched already otherwise refers to the octal representation of a character code regular expression examples literal characters  example description python match " python "  character classes  example description  pp  ython match " python " or " python " rub  ye  match " ruby " or " rube "  aeiou  match any one lowercase vowel  0-9  match any digit ; same as  0123456789   a-z  match any lowercase ascii letter  a-z  match any uppercase ascii letter  a-za-z0-9  match any of the above  ^ aeiou  match anything other than a lowercase vowel  ^ 0-9  match anything other than a digit special character classes  example description  match any character except newline \ d match a digit   0-9  \ d match a nondigit   ^ 0-9  \ s match a whitespace character   \ t \ r \ n \ f  \ s match nonwhitespace   ^ \ t \ r \ n \ f  \ w match a single word character   a-za-z0-9_  \ w match a nonword character   ^ a-za-z0-9_  repetition cases  example description ruby match " rub " or " ruby "  the y is optional ruby * match " rub " plus 0 or more ys ruby + match " rub " plus 1 or more ys \ d  3  match exactly 3 digits \ d  3   match 3 or more digits \ d  3,5  match 3  4  or 5 digits nongreedy repetition  this matches the smallest number of repetitions  example description <  * > greedy repetition  matches " < python > perl > " <  * > nongreedy  matches " < python > " in " < python > perl > " grouping with parentheses  example description \ d \ d + no group  + repeats \ d  \ d \ d  + grouped  + repeats \ d \ d pair   pp  ython     + match " python "  " python  python  python "  etc backreferences  this matches a previously matched group again  example description   pp   ython& \ 1ails match python&pails or python&pails   ' "    ^ \ 1  * \ 1 single or double-quoted string \ 1 matches whatever the 1st group matched  \ 2 matches whatever the 2nd group matched  etc alternatives  example description python | perl match " python " or " perl " rub  y | le   match " ruby " or " ruble " python  ! + | \  " python " followed by one or more ! or one anchors  this needs to specify match position example description ^ python match " python " at the start of a string or internal line python $ match " python " at the end of a string or line \ apython match " python " at the start of a string python \ z match " python " at the end of a string \ bpython \ b match " python " at a word boundary \ brub \ b \ b is nonword boundary  match " rub " in " rube " and " ruby " but not alone python  = !  match " python "  if followed by an exclamation point python  ! !  match " python "  if not followed by an exclamation point special syntax with parentheses  example description r  # comment  matches " r "  all the rest is a comment r  i  uby case-insensitive while matching " uby " r  i  uby  same as above rub   y | le   group only without creating \ 1 backreference python cgi programming what is cgi it is a set of standards which in,clude  the common gateway interface  or cgi  is a set of standards that define how information is exchanged between the web server and a custom script the cgi specs are currently maintained by the ncsa and ncsa defines cgi is as follows  the common gateway interface  or cgi  is a standard for external gateway programs to interface with information servers such as http servers the current version is cgi/1.1 and cgi/1.2 is under progress web browsing to understand the concept of cgi  lets see what happens when we click a hyper link to browse a particular web page or url your browser contacts the http web server and demands for the url i.e  filename web server will parse the url and will look for the filename in if it finds that file then sends it back to the browser  otherwise sends an error message indicating that you have requested a wrong file web browser takes response from web server and displays either the received file or error message however  it is possible to set up the http server so that whenever a file in a certain directory is requested that file is not sent back ; instead it is executed as a program  and whatever that program outputs is sent back for your browser to display this function is called the common gateway interface or cgi and the programs are called cgi scripts these cgi programs can be a python script  perl script  shell script  c or c + + program  etc chapter 20 cgi architecture diagram web server support & configuration before you proceed with cgi programming  make sure that your web server supports cgi and it is configured to handle cgi programs all the cgi programs to be executed by the http server are kept in a pre-configured directory this directory is called cgi directory and by convention it is named as /var/www/cgi-bin by convention  cgi files will have extention as .cgi,ss but you can keep your files with python extension .py as well by default  the linux server is configured to run only the scripts in the cgi-bin directory in /var/www if you want to specify any other directory to run your cgi scripts  comment the following lines in the httpd.conf file  < directory " /var/www/cgi-bin " > allowoverride none options execcgi order allow,deny allow from all < /directory > < directory " /var/www/cgi-bin " > options all < /directory > here  i assumed that you have web server up and running successfully and you are able to run any other cgi program like perl or shell  etc first cgi program here is a simple link  which is linked to a cgi script called hello.py this file is being kept in /var/www/cgi-bin directory and it has following content before running your cgi program  make sure you have change mode of file using chmod 755 hello.py unix command to make file executable # ! /usr/bin/python print " content-type  text/html \ r \ n \ r \ n " print ' < html > ' print ' < head > ' print ' < title > hello word  first cgi program < /title > ' print ' < /head > ' print ' < body > ' print ' < h2 > hello word ! this is my first cgi program < /h2 > ' print ' < /body > ' print ' < /html > ' if you click hello.py  then this produces the following output  content-type  text/html hello word ! this is my first cgi program this hello.py script is a simple python script  which is writing its output on stdout file i.e  screen there is one important and extra feature available which is first line to be printed content-type  text/html \ r \ n \ r \ n this line is sent back to the browser and specify the content type to be displayed on the browser screen now  you must have understood basic concept of cgi and you can write many complicated cgi programs using python this script can interact with any other exertnal system also to exchange information such as rdbms http header the line content-type  text/html \ r \ n \ r \ n is part of http header which is sent to the browser to understand the content all the http header will be in the following form  http field name  field content for example content-type  text/html \ r \ n \ r \ n there are few other important http headers  which you will use frequently in your cgi programming header description content-type  a mime string defining the format of the file being returned example is contenttype  text/html expires  date the date the information becomes invalid this should be used by the browser to decide when a page needs to be refreshed a valid date string should be in the format 01 jan 1998 12  00  00 gmt location  url the url that should be returned instead of the url requested you can use this field to redirect a request to any html file last-modified  date the date of last modification of the resource content-length  n the length  in bytes  of the data being returned the browser uses this value to report the estimated download time for a file set-cookie  string set the cookie passed through the string cgi environment variables all the cgi program will have access to the following environment variables these variables play an important role while writing any cgi program variable name description content_type the data type of the content used when the client is sending attached content to the server for example  file upload  etc content_length the length of the query information it 's available only for post requests http_cookie returns the set cookies in the form of key & value pair http_user_agent the user-agent request-header field contains information about the user agent originating the request its name of the web browser path_info the path for the cgi script query_string the url-encoded information that is sent with get method request remote_addr the ip address of the remote host making the request this can be useful for logging or for authentication purpose remote_host the fully qualified name of the host making the request if this information is not available then remote_addr can be used to get ir address request_method the method used to make the request the most common methods are get and post script_filename the full path to the cgi script script_name the name of the cgi script server_name the server 's hostname or ip address server_software the name and version of the software the server is running here is small cgi program to list out all the cgi variables click this link to see the result get environment # ! /usr/bin/python import os print " content-type  text/html \ r \ n \ r \ n " ; print " < font size = + 1 > environment < /font > < \ br > " ; for param in os.environ.keys    print " < b > % 20s < /b >  % s < \ br > " %  param  os.environ  param   get and post methods you must have come across many situations when you need to pass some information from your browser to web server and ultimately to your cgi program most frequently  browser uses two methods two pass this information to web server these methods are get method and post method passing information using get method  the get method sends the encoded user information appended to the page request the page and the encoded information are separated by the character as follows  http  //www.test.com/cgi-bin/hello.py key1 = value1&key2 = value2 the get method is the default method to pass information from browser to web server and it produces a long string that appears in your browser 's location  box never use get method if you have password or other sensitive information to pass to the server the get method has size limtation  only 1024 characters can be sent in a request string the get method sends information using query_string header and will be accessible in your cgi program through query_string environment variable you can pass information by concatenating key and value pairs along with any url or you can use html < form > tags to pass information using get method simple url example  get method here is a simple url  which will pass two values to hello_get.py program using get method /cgi-bin/hello_get.py first_name = zara&last_name = ali below is hello_get.py script to handle input given by web browser we are going to use cgi module  which makes it very to access passed information  # ! /usr/bin/python # import modules for cgi handling import cgi  cgitb # create instance of fieldstorage form = cgi.fieldstorage   # get data from fields first_name = form.getvalue  'first_name '  last_name = form.getvalue  'last_name '  print " content-type  text/html \ r \ n \ r \ n " print " < html > " print " < head > " print " < title > hello  second cgi program < /title > " print " < /head > " print " < body > " print " < h2 > hello % s % s < /h2 > " %  first_name  last_name  print " < /body > " print " < /html > " this would generate the following result  content-type  text/html hello zara ali simple form example  get method here is a simple example which passes two values using html form and submit button we are going to use same cgi script hello_get.py to handle this input < form action = " /cgi-bin/hello_get.py " method = " get " > first name  < input type = " text " name = " first_name " > < br / > last name  < input type = " text " name = " last_name " / > < input type = " submit " value = " submit " / > < /form > here is the actual output of the above form you enter first and last name and then click submit button to see the result first name  last name  submit passing information using post method  a generally more reliable method of passing information to a cgi program is the post method this packages the information in exactly the same way as get methods  but instead of sending it as a text string after a in the url it sends it as a separate message this message comes into the cgi script in the form of the standard input below is same hello_get.py script  which handles get as well as post method # ! /usr/bin/python # import modules for cgi handling import cgi  cgitb # create instance of fieldstorage form = cgi.fieldstorage   # get data from fields first_name = form.getvalue  'first_name '  last_name = form.getvalue  'last_name '  print " content-type  text/html \ r \ n \ r \ n " print " < html > " print " < head > " print " < title > hello  second cgi program < /title > " print " < /head > " print " < body > " print " < h2 > hello % s % s < /h2 > " %  first_name  last_name  print " < /body > " print " < /html > " let us take again same example as above which passes two values using html form and submit button we are going to use same cgi script hello_get.py to handle this input < form action = " /cgi-bin/hello_get.py " method = " post " > first name  < input type = " text " name = " first_name " > < br / > last name  < input type = " text " name = " last_name " / > < input type = " submit " value = " submit " / > < /form > here is the actual output of the above form you enter first and last name and then click submit button to see the result first name  last name  submit passing checkbox data to cgi program checkboxes are used when more than one option is required to be selected here is example html code for a form with two checkboxes  < form action = " /cgi-bin/checkbox.cgi " method = " post " target = " _blank " > < input type = " checkbox " name = " maths " value = " on " / > maths < input type = " checkbox " name = " physics " value = " on " / > physics < input type = " submit " value = " select subject " / > < /form > the result of this code is the following form  maths physics select subject below is checkbox.cgi script to handle input given by web browser for checkbox button # ! /usr/bin/python # import modules for cgi handling import cgi  cgitb # create instance of fieldstorage form = cgi.fieldstorage   # get data from fields if form.getvalue  'maths '   math_flag = " on " else  math_flag = " off " if form.getvalue  'physics '   physics_flag = " on " else  physics_flag = " off " print " content-type  text/html \ r \ n \ r \ n " print " < html > " print " < head > " print " < title > checkbox  third cgi program < /title > " print " < /head > " print " < body > " print " < h2 > checkbox maths is  % s < /h2 > " % math_flag print " < h2 > checkbox physics is  % s < /h2 > " % physics_flag print " < /body > " print " < /html > " passing radio button data to cgi program radio buttons are used when only one option is required to be selected here is example html code for a form with two radio buttons  < form action = " /cgi-bin/radiobutton.py " method = " post " target = " _blank " > < input type = " radio " name = " subject " value = " maths " / > maths < input type = " radio " name = " subject " value = " physics " / > physics < input type = " submit " value = " select subject " / > < /form > the result of this code is the following form  maths physics select subject below is radiobutton.py script to handle input given by web browser for radio button  # ! /usr/bin/python # import modules for cgi handling import cgi  cgitb # create instance of fieldstorage form = cgi.fieldstorage   # get data from fields if form.getvalue  'subject '   subject = form.getvalue  'subject '  else  subject = " not set " print " content-type  text/html \ r \ n \ r \ n " print " < html > " print " < head > " print " < title > radio  fourth cgi program < /title > " print " < /head > " print " < body > " print " < h2 > selected subject is % s < /h2 > " % subject print " < /body > " print " < /html > " passing text area data to cgi program textarea element is used when multiline text has to be passed to the cgi program here is example html code for a form with a textarea box  < form action = " /cgi-bin/textarea.py " method = " post " target = " _blank " > < textarea name = " textcontent " cols = " 40 " rows = " 4 " > type your text here < /textarea > < input type = " submit " value = " submit " / > < /form > the result of this code is the following form  submit below is textarea.cgi script to handle input given by web browser  # ! /usr/bin/python # import modules for cgi handling import cgi  cgitb # create instance of fieldstorage form = cgi.fieldstorage   # get data from fields if form.getvalue  'textcontent '   text_content = form.getvalue  'textcontent '  else  text_content = " not entered " print " content-type  text/html \ r \ n \ r \ n " print " < html > " print " < head > " ; print " < title > text area  fifth cgi program < /title > " print " < /head > " print " < body > " print " < h2 > entered text content is % s < /h2 > " % text_content print " < /body > " passing drop down box data to cgi program drop down box is used when we have many options available but only one or two will be selected here is example html code for a form with one drop down box  < form action = " /cgi-bin/dropdown.py " method = " post " target = " _blank " > < select name = " dropdown " > < option value = " maths " selected > maths < /option > < option value = " physics " > physics < /option > < /select > < input type = " submit " value = " submit " / > < /form > the result of this code is the following form  maths submit below is dropdown.py script to handle input given by web browser  # ! /usr/bin/python # import modules for cgi handling import cgi  cgitb # create instance of fieldstorage form = cgi.fieldstorage   # get data from fields if form.getvalue  'dropdown '   subject = form.getvalue  'dropdown '  else  subject = " not entered " print " content-type  text/html \ r \ n \ r \ n " print " < html > " print " < head > " print " < title > dropdown box  sixth cgi program < /title > " print " < /head > " print " < body > " print " < h2 > selected subject is % s < /h2 > " % subject print " < /body > " print " < /html > " using cookies in cgi http protocol is a stateless protocol but for a commercial website  it is required to maintain session information among different pages for example  one user registration ends after completing many pages but how to maintain user 's session information across all the web pages in many situations  using cookies is the most efficient method of remembering and tracking preferences  purchases  commissions  and other information required for better visitor experience or site statistics how it works your server sends some data to the visitor 's browser in the form of a cookie the browser may accept the cookie if it does  it is stored as a plain text record on the visitor 's hard drive now  when the visitor arrives at another page on your site  the cookie is available for retrieval once retrieved  your server knows/remembers what was stored cookies are a plain text data record of 5 variable-length fields  expires  the date the cookie will expire if this is blank  the cookie will expire when the visitor quits the browser domain  the domain name of your site path  the path to the directory or web page that sets the cookie this may be blank if you want to retrieve the cookie from any directory or page secure  if this field contains the word " secure "  then the cookie may only be retrieved with a secure server if this field is blank  no such restriction exists name = value  cookies are set and retrieved in the form of key and value pairs setting up cookies it is very to send cookies to browser these cookies will be sent along with http header before to contenttype field assuming you want to set userid and password as cookies so cookies setting will be done as follows  # ! /usr/bin/python print " set-cookie  userid = xyz ; \ r \ n " print " set-cookie  password = xyz123 ; \ r \ n " print " set-cookie  expires = tuesday  31-dec-2007 23  12  40 gmt " ; \ r \ n " print " set-cookie  domain = www.tutorialspoint.com ; \ r \ n " print " set-cookie  path = /perl ; \ n " print " content-type  text/html \ r \ n \ r \ n " ...........rest of the html content from this example  you must have understood how to set cookies we use set-cookie http header to set cookies here  it is optional to set cookies attributes like expires  domain and path it is notable that cookies are set before sending magic line " content-type  text/html \ r \ n \ r \ n retrieving cookies it is very to retrieve all the set cookies cookies are stored in cgi environment variable http_cookie and they will have following form  key1 = value1 ; key2 = value2 ; key3 = value3 here is an example of how to retrieve cookies # ! /usr/bin/python # import modules for cgi handling from os import environ import cgi  cgitb if environ.has_key  'http_cookie '   for cookie in map  strip  split  environ  'http_cookie '   ' ; '     key  value  = split  cookie  ' = '  ; if key = = " userid "  user_id = value if key = = " password "  password = value print " user id = % s " % user_id print " password = % s " % password this will produce the following result for the cookies set by above script  user id = xyz password = xyz123 file upload example  to upload a file  the html form must have the enctype attribute set to multipart/form-data the input tag with the file type will create a " browse " button < html > < body > < form enctype = " multipart/form-data " action = " save_file.py " method = " post " > < p > file  < input type = " file " name = " filename " / > < /p > < p > < input type = " submit " value = " upload " / > < /p > < /form > < /body > < /html > the result of this code is the following form  file  upload above example has been disabled intentionally to save people uploading file on our server  but you can try above code with your server here is the script save_file.py to handle file upload  # ! /usr/bin/python import cgi  os import cgitb ; cgitb.enable   form = cgi.fieldstorage   # get filename here fileitem = form  'filename '  # test if the file was uploaded if fileitem.filename  # strip leading path from file name to avoid # directory traversal attacks fn = os.path.basename  fileitem.filename  open  '/tmp/ ' + fn  'wb '  .write  fileitem.file.read    message = 'the file " ' + fn + ' " was uploaded successfully ' else  message = 'no file was uploaded ' print " " " \ content-type  text/html \ n < html > < body > < p > % s < /p > < /body > < /html > " " " %  message   if you are running above script on unix/linux  then you would have to take care of replacing file separator as follows  otherwise on your windows machine above open   statement should work fine fn = os.path.basename  fileitem.filename.replace  " \ \ "  " / "   how to raise a " file download " dialog box sometimes  it is desired that you want to give option where a user will click a link and it will pop up a " file download " dialogue box to the user instead of displaying actual content this is very and will be achieved through http header this http header will be different from the header mentioned in previous section for example,if you want make a filename file downloadable from a given link  then its syntax will be as follows  # ! /usr/bin/python # http header print " content-type  application/octet-stream ; name = \ " filename \ " \ r \ n " ; print " content-disposition  attachment ; filename = \ " filename \ " \ r \ n \ n " ; # actual file content will go hear fo = open  " foo.txt "  " rb "  str = fo.read   ; print str # close opened file fo.close   hope you enjoyed this tutorial if yes  please send me your feedback at  contact us python database access the python standard for database interfaces is the python db-api most python database interfaces adhere to this standard you can choose the right database for your application python database api supports a wide range of database servers  gadfly msql mysql postgresql microsoft sql server 2000 informix interbase oracle sybase here is the list of available python database interfaces  python database interfaces and apis .you must download a separate db api module for each database you need to access for example  if you need to access an oracle database as well as a mysql database  you must download both the oracle and the mysql database modules the db api provides a minimal standard for working with databases using python structures and syntax wherever possible this api includes the following  importing the api module acquiring a connection with the database chapter 21 issuing sql statements and stored procedures closing the connection we would learn all the concepts using mysql  so let 's talk about mysqldb module only what is mysqldb mysqldb is an interface for connecting to a mysql database server from python it implements the python database api v2.0 and is built on top of the mysql c api how do i install the mysqldb before proceeding  you make sure you have mysqldb installed on your machine just type the following in your python script and execute it  # ! /usr/bin/python import mysqldb if it produces the following result  then it means mysqldb module is not installed  traceback  most recent call last   file " test.py "  line 3  in < module > import mysqldb importerror  no module named mysqldb to install mysqldb module  download it from mysqldb download page and proceed as follows  $ gunzip mysql-python-1.2.2.tar.gz $ tar -xvf mysql-python-1.2.2.tar $ cd mysql-python-1.2.2 $ python setup.py build $ python setup.py install note  make sure you have root privilege to install above module database connection  before connecting to a mysql database  make sure of the followings  you have created a database testdb you have created a table employee in testdb this table is having fields first_name  last_name  age  sex and income user id " testuser " and password " test123 " are set to access testdb python module mysqldb is installed properly on your machine you have gone through mysql tutorial to understand mysql basics example  following is the example of connecting with mysql database " testdb "  # ! /usr/bin/python import mysqldb # open database connection db = mysqldb.connect  " localhost "  " testuser "  " test123 "  " testdb "  # prepare a cursor object using cursor   method cursor = db.cursor   # execute sql query using execute   method cursor.execute  " select version   "  # fetch a single row using fetchone   method data = cursor.fetchone   print " database version  % s " % data # disconnect from server db.close   while running this script  it is producing the following result at my linux machine  database version  5.0.45 if a connection is established with the datasource  then a connection object is returned and saved intodb for further use  otherwise db is set to none next  db object is used to create a cursor object  which in turn is used to execute sql queries finally  before coming out  it ensures that database connection is closed and resources are released creating database table  once a database connection is established  we are ready to create tables or records into the database tables using execute method of the created cursor example  first  let 's create database table employee  # ! /usr/bin/python import mysqldb # open database connection db = mysqldb.connect  " localhost "  " testuser "  " test123 "  " testdb "  # prepare a cursor object using cursor   method cursor = db.cursor   # drop table if it already exist using execute   method cursor.execute  " drop table if exists employee "  # create table as per requirement sql = " " " create table employee  first_name char  20  not null  last_name char  20   age int  sex char  1   income float  " " " cursor.execute  sql  # disconnect from server db.close   insert operation  insert operation is required when you want to create your records into a database table example  following is the example  which executes sql insert statement to create a record into employee table  # ! /usr/bin/python import mysqldb # open database connection db = mysqldb.connect  " localhost "  " testuser "  " test123 "  " testdb "  # prepare a cursor object using cursor   method cursor = db.cursor   # prepare sql query to insert a record into the database sql = " " " insert into employee  first_name  last_name  age  sex  income  values  'mac '  'mohan '  20  'm '  2000  " " " try  # execute the sql command cursor.execute  sql  # commit your changes in the database db.commit   except  # rollback in case there is any error db.rollback   # disconnect from server db.close   above example can be written as follows to create sql queries dynamically  # ! /usr/bin/python import mysqldb # open database connection db = mysqldb.connect  " localhost "  " testuser "  " test123 "  " testdb "  # prepare a cursor object using cursor   method cursor = db.cursor   # prepare sql query to insert a record into the database sql = " insert into employee  first_name  \ last_name  age  sex  income  \ values  ' % s '  ' % s '  ' % d '  ' % c '  ' % d '  " % \  'mac '  'mohan '  20  'm '  2000  try  # execute the sql command cursor.execute  sql  # commit your changes in the database db.commit   except  # rollback in case there is any error db.rollback   # disconnect from server db.close   example  following code segment is another form of execution where you can pass parameters directly   user_id = " test123 " password = " password " con.execute  'insert into login values  " % s "  " % s "  ' % \  user_id  password    read operation  read operation on any databasse means to fetch some useful information from the database once our database connection is established  we are ready to make a query into this database we can use either fetchone   method to fetch single record or fetchall   method to fetech multiple values from a database table fetchone    this method fetches the next row of a query result set a result set is an object that is returned when a cursor object is used to query a table fetchall    this method fetches all the rows in a result set if some rows have already been extracted from the result set  the fetchall   method retrieves the remaining rows from the result set rowcount  this is a read-only attribute and returns the number of rows that were affected by an execute   method example  following is the procedure to query all the records from employee table having salary more than 1000  # ! /usr/bin/python import mysqldb # open database connection db = mysqldb.connect  " localhost "  " testuser "  " test123 "  " testdb "  # prepare a cursor object using cursor   method cursor = db.cursor   # prepare sql query to insert a record into the database sql = " select * from employee \ where income > ' % d ' " %  1000  try  # execute the sql command cursor.execute  sql  # fetch all the rows in a list of lists results = cursor.fetchall   for row in results  fname = row  0  lname = row  1  age = row  2  sex = row  3  income = row  4  # now print fetched result print " fname = % s,lname = % s,age = % d,sex = % s,income = % d " % \  fname  lname  age  sex  income  except  print " error  unable to fecth data " # disconnect from server db.close   this will produce the following result  fname = mac  lname = mohan  age = 20  sex = m  income = 2000 update operation  update operation on any databasse means to update one or more records  which are already available in the database following is the procedure to update all the records having sex as 'm' here  we will increase age of all the males by one year example  # ! /usr/bin/python import mysqldb # open database connection db = mysqldb.connect  " localhost "  " testuser "  " test123 "  " testdb "  # prepare a cursor object using cursor   method cursor = db.cursor   # prepare sql query to update required records sql = " update employee set age = age + 1 where sex = ' % c ' " %  'm '  try  # execute the sql command cursor.execute  sql  # commit your changes in the database db.commit   except  # rollback in case there is any error db.rollback   # disconnect from server db.close   delete operation  delete operation is required when you want to delete some records from your database following is the procedure to delete all the records from employee where age is more than 20  example  # ! /usr/bin/python import mysqldb # open database connection db = mysqldb.connect  " localhost "  " testuser "  " test123 "  " testdb "  # prepare a cursor object using cursor   method cursor = db.cursor   # prepare sql query to delete required records sql = " delete from employee where age > ' % d ' " %  20  try  # execute the sql command cursor.execute  sql  # commit your changes in the database db.commit   except  # rollback in case there is any error db.rollback   # disconnect from server db.close   performing transactions  transactions are a mechanism that ensures data consistency transactions should have the following four properties  atomicity  either a transaction completes or nothing happens at all consistency  a transaction must start in a consistent state and leave the system in a consistent state isolation  intermediate results of a transaction are not visible outside the current transaction durability  once a transaction was committed  the effects are persistent  even after a system failure the python db api 2.0 provides two methods to either commit or rollback a transaction example  you already have seen how we have implemented transations here is again similar example  # prepare sql query to delete required records sql = " delete from employee where age > ' % d ' " %  20  try  # execute the sql command cursor.execute  sql  # commit your changes in the database db.commit   except  # rollback in case there is any error db.rollback   commit operation  commit is the operation  which gives a green signal to database to finalize the changes  and after this operation  no change can be reverted back here is a simple example to call commit method db.commit   rollback operation  if you are not satisfied with one or more of the changes and you want to revert back those changes completely  then use rollback   method here is a simple example to call rollback   method db.rollback   disconnecting database  to disconnect database connection  use close   method db.close   if the connection to a database is closed by the user with the close   method  any outstanding transactions are rolled back by the db however  instead of depending on any of db lower level implementation details  your application would be better off calling commit or rollback explicitly handling errors  there are many sources of errors a few examples are a syntax error in an executed sql statement  a connection failure  or calling the fetch method for an already canceled or finished statement handle the db api defines a number of errors that must exist in each database module the following table lists these exceptions exception description warning used for non-fatal issues must subclass standarderror error base class for errors must subclass standarderror interfaceerror used for errors in the database module  not the database itself must subclass error databaseerror used for errors in the database must subclass error dataerror subclass of databaseerror that refers to errors in the data operationalerror subclass of databaseerror that refers to errors such as the loss of a connection to the database these errors are generally outside of the control of the python scripter integrityerror subclass of databaseerror for situations that would damage the relational integrity  such as uniqueness constraints or foreign keys internalerror subclass of databaseerror that refers to errors internal to the database module  such as a cursor no longer being active programmingerror subclass of databaseerror that refers to errors such as a bad table name and other things that can safely be blamed on you notsupportederror subclass of databaseerror that refers to trying to call unsupported functionality your python scripts should handle these errors  but before using any of the above exceptions  make sure your mysqldb has support for that exception you can get more information about them by reading the db api 2.0 specification python networking python provides two levels of access to network services at a low level  you can access the basic socket support in the underlying operating system which allows you to implement clients and servers for both connectionoriented and connectionless protocols python also has libraries that provide higher-level access to specific application-level network protocols  such as ftp  http  and so on this tutorial gives you understanding on most famous concept in networking  socket programming what are sockets sockets are the endpoints of a bidirectional communications channel sockets may communicate within a process  between processes on the same machine  or between processes on different continents sockets may be implemented over a number of different channel types  unix domain sockets  tcp  udp  and so on the socket library provides specific classes for handling the common transports as well as a generic interface for handling the rest sockets have their own vocabulary  term description domain the family of protocols that will be used as the transport mechanism these values are constants such as af_inet  pf_inet  pf_unix  pf_x25  and so on type the type of communications between the two endpoints  typically sock_stream for connection-oriented protocols and sock_dgram for connectionless protocols protocol typically zero  this may be used to identify a variant of a protocol within a domain and type hostname the identifier of a network interface  a string  which can be a host name  a dotted-quad address  or an ipv6 address in colon  and possibly dot  notation a string " < broadcast > "  which specifies an inaddr_broadcast address a zero-length string  which specifies inaddr_any  or an integer  interpreted as a binary address in host byte order port each server listens for clients calling on one or more ports a port may be a fixnum port number  a string containing a port number  or the name of a service chapter 22 the socket module  to create a socket  you must use the socket.socket   function available in socket module  which has the general syntax  s = socket.socket  socket_family  socket_type  protocol = 0  here is the description of the parameters  socket_family  this is either af_unix or af_inet  as explained earlier socket_type  this is either sock_stream or sock_dgram protocol  this is usually left out  defaulting to 0 once you have socket object  then you can use required functions to create your client or server program following is the list of functions required  server socket methods  method description s.bind   this method binds address  hostname  port number pair  to socket s.listen   this method sets up and start tcp listener s.accept   this passively accepts tcp client connection  waiting until connection arrives  blocking   client socket methods  method description s.connect   this method actively initiates tcp server connection general socket methods  method description s.recv   this method receives tcp message s.send   this method transmits tcp message s.recvfrom   this method receives udp message s.sendto   this method transmits udp message s.close   this method closes socket socket.gethostname   returns the hostname a simple server  to write internet servers  we use the socket function available in socket module to create a socket object a socket object is then used to call other functions to set up a socket server now  call bind  hostname  port function to specify a port for your service on the given host next  call the accept method of the returned object this method waits until a client connects to the port you specified and then returns a connection object that represents the connection to that client # ! /usr/bin/python # this is server.py file import socket # import socket module s = socket.socket   # create a socket object host = socket.gethostname   # get local machine name port = 12345 # reserve a port for your service s.bind   host  port   # bind to the port s.listen  5  # now wait for client connection while true  c  addr = s.accept   # establish connection with client print 'got connection from '  addr c.send  'thank you for connecting '  c.close   # close the connection a simple client  now  we will write a very simple client program  which will open a connection to a given port 12345 and given host this is very simple to create a socket client using python 's socket module function the socket.connect  hosname  port  opens a tcp connection to hostname on the port once you have a socket open  you can read from it like any io object when done  remember to close it  as you would close a file the following code is a very simple client that connects to a given host and port  reads any available data from the socket  and then exits  # ! /usr/bin/python # this is client.py file import socket # import socket module s = socket.socket   # create a socket object host = socket.gethostname   # get local machine name port = 12345 # reserve a port for your service s.connect   host  port   print s.recv  1024  s.close # close the socket when done now  run this server.py in background and then run above client.py to see the result # following would start a server in background $ python server.py & # once server is started run client as follows  $ python client.py this would produce the following result  got connection from  '127.0.0.1 '  48437  thank you for connecting python internet modules a list of some important modules  which could be used in python network/internet programming protocol common function port no python module http web pages 80 httplib  urllib  xmlrpclib nntp usenet news 119 nntplib ftp file transfers 20 ftplib  urllib smtp sending email 25 smtplib pop3 fetching email 110 poplib imap4 fetching email 143 imaplib telnet command lines 23 telnetlib gopher document transfers 70 gopherlib  urllib please check all the libraries mentioned above to work with ftp  smtp  pop  and imap protocols further readings  i have given you a quick start with socket programming it 's a big subject  so its recommended to go through the following link to find more details on  unix socket programming python socket library and modules python sending email simple mail transfer protocol  smtp  is a protocol  which handles sending e-mail and routing e-mail between mail servers python provides smtplib module  which defines an smtp client session object that can be used to send mail to any internet machine with an smtp or esmtp listener daemon here is a simple syntax to create one smtp object  which can later be used to send an e-mail  import smtplib smtpobj = smtplib.smtp   host   port   local_hostname     here is the detail of the parameters  host  this is the host running your smtp server you can specify ip address of the host or a domain name like tutorialspoint.com this is optional argument port  if you are providing host argument  then you need to specify a port  where smtp server is listening usually this port would be 25 local_hostname  if your smtp server is running on your local machine  then you can specify justlocalhost as of this option an smtp object has an instance method called sendmail  which will typically be used to do the work of mailing a message it takes three parameters  the sender  a string with the address of the sender the receivers  a list of strings  one for each recipient the message  a message as a string formatted as specified in the various rfcs example  here is a simple way to send one e-mail using python script try it once  # ! /usr/bin/python import smtplib sender = 'from @ fromdomain.com ' receivers =  'to @ todomain.com '  message = " " " from  from person < from @ fromdomain.com > to  to person < to @ todomain.com > chapter 23 subject  smtp e-mail test this is a test e-mail message " " " try  smtpobj = smtplib.smtp  'localhost '  smtpobj.sendmail  sender  receivers  message  print " successfully sent email " except smtpexception  print " error  unable to send email " here  you have placed a basic e-mail in message  using a triple quote  taking care to format the headers correctly an e-mail requires a from  to  and subject header  separated from the body of the e-mail with a blank line to send the mail you use smtpobj to connect to the smtp server on the local machine and then use the sendmail method along with the message  the from address  and the destination address as parameters  even though the from and to addresses are within the e-mail itself  these are n't always used to route mail   if you 're not running an smtp server on your local machine  you can use smtplib client to communicate with a remote smtp server unless you 're using a webmail service  such as hotmail or yahoo ! mail   your e-mail provider will have provided you with outgoing mail server details that you can supply them  as follows  smtplib.smtp  'mail.your-domain.com '  25  sending an html e mail using python  when you send a text message using python  then all the content will be treated as simple text even if you will include html tags in a text message  it will be displayed as simple text and html tags will not be formatted according to html syntax but python provides option to send an html message as actual html message while sending an e-mail message  you can specify a mime version  content type and character set to send an html e-mail example  following is the example to send html content as an e-mail try it once  # ! /usr/bin/python import smtplib message = " " " from  from person < from @ fromdomain.com > to  to person < to @ todomain.com > mime-version  1.0 content-type  text/html subject  smtp html e-mail test this is an e-mail message to be sent in html format < b > this is html message < /b > < h1 > this is headline < /h1 > " " " try  smtpobj = smtplib.smtp  'localhost '  smtpobj.sendmail  sender  receivers  message  print " successfully sent email " except smtpexception  print " error  unable to send email " sending attachments as an e mail  to send an e-mail with mixed content requires to set content-type header to multipart/mixed then  text and attachment sections can be specified within boundaries a boundary is started with two hyphens followed by a unique number  which can not appear in the message part of the e-mail a final boundary denoting the e-mail 's final section must also end with two hyphens attached files should be encoded with the pack  " m "  function to have base64 encoding before transmission example  following is the example  which will send a file /tmp/test.txt as an attachment try it once  # ! /usr/bin/python import smtplib import base64 filename = " /tmp/test.txt " # read a file and encode it into base64 format fo = open  filename  " rb "  filecontent = fo.read   encodedcontent = base64.b64encode  filecontent  # base64 sender = 'webmaster @ tutorialpoint.com ' reciever = 'amrood.admin @ gmail.com ' marker = " auniquemarker " body = " " " this is a test email to send an attachement " " " # define the main headers part1 = " " " from  from person < me @ fromdomain.net > to  to person < amrood.admin @ gmail.com > subject  sending attachement mime-version  1.0 content-type  multipart/mixed ; boundary = % s  % s " " " %  marker  marker  # define the message action part2 = " " " content-type  text/plain content-transfer-encoding  8bit % s  % s " " " %  body,marker  # define the attachment section part3 = " " " content-type  multipart/mixed ; name = \ " % s \ " content-transfer-encoding  base64 content-disposition  attachment ; filename = % s % s  % s " " " %  filename  filename  encodedcontent  marker  message = part1 + part2 + part3 try  smtpobj = smtplib.smtp  'localhost '  smtpobj.sendmail  sender  reciever  message  print " successfully sent email " except exception  print " error  unable to send email " python multithreading running several threads is similar to running several different programs concurrently  but with the following benefits  multiple threads within a process share the same data space with the main thread and can therefore share information or communicate with each other more easily than if they were separate processes threads sometimes called light-weight processes and they do not require much memory overhead ; they care cheaper than processes a thread has a beginning  an execution sequence  and a conclusion it has an instruction pointer that keeps track of where within its context it is currently running it can be pre-empted  interrupted  it can temporarily be put on hold  also known as sleeping  while other threads are running  this is called yielding starting a new thread  to spawn another thread  you need to call following method available in thread module  thread.start_new_thread  function  args   kwargs   this method call enables a fast and efficient way to create new threads in both linux and windows the method call returns immediately and the child thread starts and calls function with the passed list of agrs when function returns  the thread terminates here  args is a tuple of arguments ; use an empty tuple to call function without passing any arguments kwargs is an optional dictionary of keyword arguments example  # ! /usr/bin/python import thread import time # define a function for the thread def print_time  threadname  delay   chapter 24 count = 0 while count < 5  time.sleep  delay  count + = 1 print " % s  % s " %  threadname  time.ctime  time.time     # create two threads as follows try  thread.start_new_thread  print_time   " thread-1 "  2    thread.start_new_thread  print_time   " thread-2 "  4    except  print " error  unable to start thread " while 1  pass when the above code is executed  it produces the following result  thread-1  thu jan 22 15  42  17 2009 thread-1  thu jan 22 15  42  19 2009 thread-2  thu jan 22 15  42  19 2009 thread-1  thu jan 22 15  42  21 2009 thread-2  thu jan 22 15  42  23 2009 thread-1  thu jan 22 15  42  23 2009 thread-1  thu jan 22 15  42  25 2009 thread-2  thu jan 22 15  42  27 2009 thread-2  thu jan 22 15  42  31 2009 thread-2  thu jan 22 15  42  35 2009 although it is very effective for low-level threading  but the thread module is very limited compared to the newer threading module the threading module  the newer threading module included with python 2.4 provides much more powerful  high-level support for threads than the thread module discussed in the previous section the threading module exposes all the methods of the thread module and provides some additional methods  threading.activecount    returns the number of thread objects that are active threading.currentthread    returns the number of thread objects in the caller 's thread control threading.enumerate    returns a list of all thread objects that are currently active in addition to the methods  the threading module has the thread class that implements threading the methods provided by the thread class are as follows  run    the run   method is the entry point for a thread start    the start   method starts a thread by calling the run method join   time    the join   waits for threads to terminate isalive    the isalive   method checks whether a thread is still executing getname    the getname   method returns the name of a thread setname    the setname   method sets the name of a thread creating thread using threading module  to implement a new thread using the threading module  you have to do the following  define a new subclass of the thread class override the __init__  self  ,args   method to add additional arguments then  override the run  self  ,args   method to implement what the thread should do when started once you have created the new thread subclass  you can create an instance of it and then start a new thread by invoking the start    which will in turn call run   method example  # ! /usr/bin/python import threading import time exitflag = 0 class mythread  threading.thread   def __init__  self  threadid  name  counter   threading.thread.__init__  self  self.threadid = threadid self.name = name self.counter = counter def run  self   print " starting " + self.name print_time  self.name  self.counter  5  print " exiting " + self.name def print_time  threadname  delay  counter   while counter  if exitflag  thread.exit   time.sleep  delay  print " % s  % s " %  threadname  time.ctime  time.time     counter  = 1 # create new threads thread1 = mythread  1  " thread-1 "  1  thread2 = mythread  2  " thread-2 "  2  # start new threads thread1.start   thread2.start   print " exiting main thread " when the above code is executed  it produces the following result  starting thread-1 starting thread-2 exiting main thread thread-1  thu mar 21 09  10  03 2013 thread-1  thu mar 21 09  10  04 2013 thread-2  thu mar 21 09  10  04 2013 thread-1  thu mar 21 09  10  05 2013 thread-1  thu mar 21 09  10  06 2013 thread-2  thu mar 21 09  10  06 2013 thread-1  thu mar 21 09  10  07 2013 exiting thread-1 thread-2  thu mar 21 09  10  08 2013 thread-2  thu mar 21 09  10  10 2013 thread-2  thu mar 21 09  10  12 2013 exiting thread-2 synchronizing threads  the threading module provided with python includes a simple-to-implement locking mechanism that will allow you to synchronize threads a new lock is created by calling the lock   method  which returns the new lock the acquire  blocking  method of the new lock object would be used to force threads to run synchronously the optional blocking parameter enables you to control whether the thread will wait to acquire the lock if blocking is set to 0  the thread will return immediately with a 0 value if the lock can not be acquired and with a 1 if the lock was acquired if blocking is set to 1  the thread will block and wait for the lock to be released the release   method of the the new lock object would be used to release the lock when it is no longer required example  # ! /usr/bin/python import threading import time class mythread  threading.thread   def __init__  self  threadid  name  counter   threading.thread.__init__  self  self.threadid = threadid self.name = name self.counter = counter def run  self   print " starting " + self.name # get lock to synchronize threads threadlock.acquire   print_time  self.name  self.counter  3  # free lock to release next thread threadlock.release   def print_time  threadname  delay  counter   while counter  time.sleep  delay  print " % s  % s " %  threadname  time.ctime  time.time     counter  = 1 threadlock = threading.lock   threads =   # create new threads thread1 = mythread  1  " thread-1 "  1  thread2 = mythread  2  " thread-2 "  2  # start new threads thread1.start   thread2.start   # add threads to thread list threads.append  thread1  threads.append  thread2  # wait for all threads to complete for t in threads  t.join   print " exiting main thread " when the above code is executed  it produces the following result  starting thread-1 starting thread-2 thread-1  thu mar 21 09  11  28 2013 thread-1  thu mar 21 09  11  29 2013 thread-1  thu mar 21 09  11  30 2013 thread-2  thu mar 21 09  11  32 2013 thread-2  thu mar 21 09  11  34 2013 thread-2  thu mar 21 09  11  36 2013 exiting main thread multithreaded priority queue  the queue module allows you to create a new queue object that can hold a specific number of items there are following methods to control the queue  get    the get   removes and returns an item from the queue put    the put adds item to a queue qsize    the qsize   returns the number of items that are currently in the queue empty    the empty   returns true if queue is empty ; otherwise  false full    the full   returns true if queue is full ; otherwise  false example  # ! /usr/bin/python import queue import threading import time exitflag = 0 class mythread  threading.thread   def __init__  self  threadid  name  q   threading.thread.__init__  self  self.threadid = threadid self.name = name self.q = q def run  self   print " starting " + self.name process_data  self.name  self.q  print " exiting " + self.name def process_data  threadname  q   while not exitflag  queuelock.acquire   if not workqueue.empty    data = q.get   queuelock.release   print " % s processing % s " %  threadname  data  else  queuelock.release   time.sleep  1  threadlist =  " thread-1 "  " thread-2 "  " thread-3 "  namelist =  " one "  " two "  " three "  " four "  " five "  queuelock = threading.lock   workqueue = queue.queue  10  threads =   threadid = 1 # create new threads for tname in threadlist  thread = mythread  threadid  tname  workqueue  thread.start   threads.append  thread  threadid + = 1 # fill the queue queuelock.acquire   for word in namelist  workqueue.put  word  queuelock.release   # wait for queue to empty while not workqueue.empty    pass # notify threads it 's time to exit exitflag = 1 # wait for all threads to complete for t in threads  t.join   print " exiting main thread " when the above code is executed  it produces the following result  starting thread-1 starting thread-2 starting thread-3 thread-1 processing one thread-2 processing two thread-3 processing three thread-1 processing four thread-2 processing five exiting thread-3 exiting thread-1 exiting thread-2 exiting main thread python xml processing what is xml the extensible markup language  xml  is a markup language much like html or sgml this is recommended by the world wide web consortium and available as an open standard xml is a portable  open source language that allows programmers to develop applications that can be read by other applications  regardless of operating system and/or developmental language xml is extremely useful for keeping track of small to medium amounts of data without requiring a sql-based backbone xml parser architectures and apis  the python standard library provides a minimal but useful set of interfaces to work with xml the two most basic and broadly used apis to xml data are the sax and dom interfaces simple api for xml  sax   here  you register callbacks for events of interest and then let the parser proceed through the document this is useful when your documents are large or you have memory limitations  it parses the file as it reads it from disk and the entire file is never stored in memory document object model  dom  api  this is a world wide web consortium recommendation wherein the entire file is read into memory and stored in a hierarchical  tree-based  form to represent all the features of an xml document sax obviously ca n't process information as fast as dom can when working with large files on the other hand  using dom exclusively can really kill your resources  especially if used on a lot of small files sax is read-only  while dom allows changes to the xml file since these two different apis literally complement each other  there is no reason why you ca n't use them both for large projects for all our xml code examples  let 's use a simple xml file movies.xml as an input  < collection shelf = " new arrivals " > < movie title = " enemy behind " > < type > war  thriller < /type > < format > dvd < /format > < year > 2003 < /year > < rating > pg < /rating > chapter 25 < stars > 10 < /stars > < description > talk about a us-japan war < /description > < /movie > < movie title = " transformers " > < type > anime  science fiction < /type > < format > dvd < /format > < year > 1989 < /year > < rating > r < /rating > < stars > 8 < /stars > < description > a schientific fiction < /description > < /movie > < movie title = " trigun " > < type > anime  action < /type > < format > dvd < /format > < episodes > 4 < /episodes > < rating > pg < /rating > < stars > 10 < /stars > < description > vash the stampede ! < /description > < /movie > < movie title = " ishtar " > < type > comedy < /type > < format > vhs < /format > < rating > pg < /rating > < stars > 2 < /stars > < description > viewable boredom < /description > < /movie > < /collection > parsing xml with sax apis  sax is a standard interface for event-driven xml parsing parsing xml with sax generally requires you to create your own contenthandler by subclassing xml.sax.contenthandler your contenthandler handles the particular tags and attributes of your flavor  s  of xml a contenthandler object provides methods to handle various parsing events its owning parser calls contenthandler methods as it parses the xml file the methods startdocument and enddocument are called at the start and the end of the xml file the method characters  text  is passed character data of the xml file via the parameter text the contenthandler is called at the start and end of each element if the parser is not in namespace mode  the methods startelement  tag  attributes  and endelement  tag  are called ; otherwise  the corresponding methods startelementns and endelementns are called here  tag is the element tag  and attributes is an attributes object here are other important methods to understand before proceeding  the make_parser method  following method creates a new parser object and returns it the parser object created will be of the first parser type the system finds xml.sax.make_parser   parser_list   here is the detail of the parameters  parser_list  the optional argument consisting of a list of parsers to use which must all implement the make_parser method the parse method  following method creates a sax parser and uses it to parse a document xml.sax.parse  xmlfile  contenthandler   errorhandler   here is the detail of the parameters  xmlfile  this is the name of the xml file to read from contenthandler  this must be a contenthandler object errorhandler  if specified  errorhandler must be a sax errorhandler object the parsestring method  there is one more method to create a sax parser and to parse the specified xml string xml.sax.parsestring  xmlstring  contenthandler   errorhandler   here is the detail of the parameters  xmlstring  this is the name of the xml string to read from contenthandler  this must be a contenthandler object errorhandler  if specified  errorhandler must be a sax errorhandler object example  # ! /usr/bin/python import xml.sax class moviehandler  xml.sax.contenthandler   def __init__  self   self.currentdata = " " self.type = " " self.format = " " self.year = " " self.rating = " " self.stars = " " self.description = " " # call when an element starts def startelement  self  tag  attributes   self.currentdata = tag if tag = = " movie "  print " * * * * * movie * * * * * " title = attributes  " title "  print " title  "  title # call when an elements ends def endelement  self  tag   if self.currentdata = = " type "  print " type  "  self.type elif self.currentdata = = " format "  print " format  "  self.format elif self.currentdata = = " year "  print " year  "  self.year elif self.currentdata = = " rating "  print " rating  "  self.rating elif self.currentdata = = " stars "  print " stars  "  self.stars elif self.currentdata = = " description "  print " description  "  self.description self.currentdata = " " # call when a character is read def characters  self  content   if self.currentdata = = " type "  self.type = content elif self.currentdata = = " format "  self.format = content elif self.currentdata = = " year "  self.year = content elif self.currentdata = = " rating "  self.rating = content elif self.currentdata = = " stars "  self.stars = content elif self.currentdata = = " description "  self.description = content if  __name__ = = " __main__ "   # create an xmlreader parser = xml.sax.make_parser   # turn off namepsaces parser.setfeature  xml.sax.handler.feature_namespaces  0  # override the default contexthandler handler = moviehandler   parser.setcontenthandler  handler  parser.parse  " movies.xml "  this would produce the following result  * * * * * movie * * * * * title  enemy behind type  war  thriller format  dvd year  2003 rating  pg stars  10 description  talk about a us-japan war * * * * * movie * * * * * title  transformers type  anime  science fiction format  dvd year  1989 rating  r stars  8 description  a schientific fiction * * * * * movie * * * * * title  trigun type  anime  action format  dvd rating  pg stars  10 description  vash the stampede ! * * * * * movie * * * * * title  ishtar type  comedy format  vhs rating  pg stars  2 description  viewable boredom for a complete detail on sax api documentation  please refer to standard python sax apis parsing xml with dom apis  the document object model or " dom  " is a cross-language api from the world wide web consortium  w3c  for accessing and modifying xml documents the dom is extremely useful for random-access applications sax only allows you a view of one bit of the document at a time if you are looking at one sax element  you have no access to another here is the easiest way to quickly load an xml document and to create a minidom object using the xml.dom module the minidom object provides a simple parser method that will quickly create a dom tree from the xml file the sample phrase calls the parse  file  ,parser   function of the minidom object to parse the xml file designated by file into a dom tree object # ! /usr/bin/python from xml.dom.minidom import parse import xml.dom.minidom # open xml document using minidom parser domtree = xml.dom.minidom.parse  " movies.xml "  collection = domtree.documentelement if collection.hasattribute  " shelf "   print " root element  % s " % collection.getattribute  " shelf "  # get all the movies in the collection movies = collection.getelementsbytagname  " movie "  # print detail of each movie for movie in movies  print " * * * * * movie * * * * * " if movie.hasattribute  " title "   print " title  % s " % movie.getattribute  " title "  type = movie.getelementsbytagname  'type '   0  print " type  % s " % type.childnodes  0  .data format = movie.getelementsbytagname  'format '   0  print " format  % s " % format.childnodes  0  .data rating = movie.getelementsbytagname  'rating '   0  print " rating  % s " % rating.childnodes  0  .data description = movie.getelementsbytagname  'description '   0  print " description  % s " % description.childnodes  0  .data this would produce the following result  root element  new arrivals * * * * * movie * * * * * title  enemy behind type  war  thriller format  dvd rating  pg description  talk about a us-japan war * * * * * movie * * * * * title  transformers type  anime  science fiction format  dvd rating  r description  a schientific fiction * * * * * movie * * * * * title  trigun type  anime  action format  dvd rating  pg description  vash the stampede ! * * * * * movie * * * * * title  ishtar type  comedy format  vhs rating  pg description  viewable boredom for a complete detail on dom api documentation  please refer to standard python dom apis python gui programming python provides various options for developing graphical user interfaces  guis   most important are listed below  tkinter  tkinter is the python interface to the tk gui toolkit shipped with python we would look this option in this tutorial wxpython  this is an open-source python interface for wxwindows http  //wxpython.org jpython  jpython is a python port for java which gives python scripts seamless access to java class libraries on the local machine http  //www.jython.org there are many other interfaces available which i 'm not listing here you can find them over the net tkinter programming tkinter is the standard gui library for python python when combined with tkinter provides a fast and way to create gui applications tkinter provides a powerful object-oriented interface to the tk gui toolkit creating a gui application using tkinter is an task all you need to do is perform the following steps  import the tkinter module create the gui application main window add one or more of the above-mentioned widgets to the gui application enter the main event loop to take action against each event triggered by the user example  # ! /usr/bin/python import tkinter top = tkinter.tk   # code to add widgets will go here top.mainloop   this would create a following window  chapter 26 tkinter widgets tkinter provides various controls  such as buttons  labels and text boxes used in a gui application these controls are commonly called widgets there are currently 15 types of widgets in tkinter we present these widgets as well as a brief description in the following table  operator description button the button widget is used to display buttons in your application canvas the canvas widget is used to draw shapes  such as lines  ovals  polygons and rectangles  in your application checkbutton the checkbutton widget is used to display a number of options as checkboxes the user can select multiple options at a time entry the entry widget is used to display a single-line text field for accepting values from a user frame the frame widget is used as a container widget to organize other widgets label the label widget is used to provide a single-line caption for other widgets it can also contain images listbox the listbox widget is used to provide a list of options to a user menubutton the menubutton widget is used to display menus in your application menu the menu widget is used to provide various commands to a user these commands are contained inside menubutton message the message widget is used to display multiline text fields for accepting values from a user radiobutton the radiobutton widget is used to display a number of options as radio buttons the user can select only one option at a time scale the scale widget is used to provide a slider widget scrollbar the scrollbar widget is used to add scrolling capability to various widgets  such as list boxes text the text widget is used to display text in multiple lines toplevel the toplevel widget is used to provide a separate window container spinbox the spinbox widget is a variant of the standard tkinter entry widget  which can be used to select from a fixed number of values panedwindow a panedwindow is a container widget that may contain any number of panes  arranged horizontally or vertically labelframe a labelframe is a simple container widget its primary purpose is to act as a spacer or container for complex window layouts tkmessagebox this module is used to display message boxes in your applications button the button widget is used to add buttons in a python application these buttons can display text or images that convey the purpose of the buttons you can attach a function or a method to a button which is called automatically when you click the button syntax  here is the simple syntax to create this widget  w = button  master  option = value    parameters  master  this represents the parent window options  here is the list of most commonly used options for this widget these options can be used as keyvalue pairs separated by commas option description activebackground background color when the button is under the cursor activeforeground foreground color when the button is under the cursor bd border width in pixels default is 2 bg normal background color command function or method to be called when the button is clicked fg normal foreground  text  color font text font to be used for the button 's label height height of the button in text lines  for textual buttons  or pixels  for images   highlightcolor the color of the focus highlight when the widget has focus image image to be displayed on the button  instead of text   justify how to show multiple text lines  left to left-justify each line ; center to center them ; or right to right-justify padx additional padding left and right of the text pady additional padding above and below the text relief relief specifies the type of the border some of the values are sunken  raised  groove  and ridge state set this option to disabled to gray out the button and make it unresponsive has the value active when the mouse is over it default is normal underline default is -1  meaning that no character of the text on the button will be underlined if nonnegative  the corresponding text character will be underlined width width of the button in letters  if displaying text  or pixels  if displaying an image   wraplength if this value is set to a positive number  the text lines will be wrapped to fit within this length methods  following are commonly used methods for this widget  medthod description flash   causes the button to flash several times between active and normal colors leaves the button in the state it was in originally ignored if the button is disabled invoke   calls the button 's callback  and returns what that function returns has no effect if the button is disabled or there is no callback example  try the following example yourself  import tkinter import tkmessagebox top = tkinter.tk   def hellocallback    tkmessagebox.showinfo  " hello python "  " hello world "  b = tkinter.button  top  text = " hello "  command = hellocallback  b.pack   top.mainloop   when the above code is executed  it produces the following result  canvas the canvas is a rectangular area intended for drawing pictures or other complex layouts you can place graphics  text  widgets or frames on a canvas syntax  here is the simple syntax to create this widget  w = canvas  master  option = value    parameters  master  this represents the parent window options  here is the list of most commonly used options for this widget these options can be used as keyvalue pairs separated by commas option description bd border width in pixels default is 2 bg normal background color confine if true  the default   the canvas can not be scrolled outside of the scrollregion cursor cursor used in the canvas like arrow  circle  dot etc height size of the canvas in the y dimension highlightcolor color shown in the focus highlight relief relief specifies the type of the border some of the values are sunken  raised  groove  and ridge scrollregion a tuple  w  n  e  s  that defines over how large an area the canvas can be scrolled  where w is the left side  n the top  e the right side  and s the bottom width size of the canvas in the x dimension xscrollincrement if you set this option to some positive dimension  the canvas can be positioned only on multiples of that distance  and the value will be used for scrolling by scrolling units  such as when the user clicks on the arrows at the ends of a scrollbar xscrollcommand if the canvas is scrollable  this attribute should be the .set   method of the horizontal scrollbar yscrollincrement works like xscrollincrement  but governs vertical movement yscrollcommand if the canvas is scrollable  this attribute should be the .set   method of the vertical scrollbar the canvas widget can support the following standard items  arc  creates an arc item  which can be a chord  a pieslice or a simple arc coord = 10  50  240  210 arc = canvas.create_arc  coord  start = 0  extent = 150  fill = " blue "  image  creates an image item  which can be an instance of either the bitmapimage or the photoimage classes filename = photoimage  file = " sunshine.gif "  image = canvas.create_image  50  50  anchor = ne  image = filename  line  creates a line item line = canvas.create_line  x0  y0  x1  y1    xn  yn  options  oval  creates a circle or an ellipse at the given coordinates it takes two pairs of coordinates ; the top left and bottom right corners of the bounding rectangle for the oval oval = canvas.create_oval  x0  y0  x1  y1  options  polygon  creates a polygon item that must have at least three vertices oval = canvas.create_polygon  x0  y0  x1  y1,...xn  yn  options  example  try the following example yourself  import tkinter import tkmessagebox top = tkinter.tk   c = tkinter.canvas  top  bg = " blue "  height = 250  width = 300  coord = 10  50  240  210 arc = c.create_arc  coord  start = 0  extent = 150  fill = " red "  c.pack   top.mainloop   when the above code is executed  it produces the following result  checkbutton the checkbutton widget is used to display a number of options to a user as toggle buttons the user can then select one or more options by clicking the button corresponding to each option you can also display images in place of text syntax  here is the simple syntax to create this widget  w = checkbutton  master  option    parameters  master  this represents the parent window options  here is the list of most commonly used options for this widget these options can be used as keyvalue pairs separated by commas option description activebackground background color when the checkbutton is under the cursor activeforeground foreground color when the checkbutton is under the cursor bg the normal background color displayed behind the label and indicator bitmap to display a monochrome image on a button bd the size of the border around the indicator default is 2 pixels command a procedure to be called every time the user changes the state of this checkbutton cursor if you set this option to a cursor name  arrow  dot etc   the mouse cursor will change to that pattern when it is over the checkbutton disabledforeground the foreground color used to render the text of a disabled checkbutton the default is a stippled version of the default foreground color font the font used for the text fg the color used to render the text height the number of lines of text on the checkbutton default is 1 highlightcolor the color of the focus highlight when the checkbutton has the focus image to display a graphic image on the button justify if the text contains multiple lines  this option controls how the text is justified  center  left  or right offvalue normally  a checkbutton 's associated control variable will be set to 0 when it is cleared  off   you can supply an alternate value for the off state by setting offvalue to that value onvalue normally  a checkbutton 's associated control variable will be set to 1 when it is set  on   you can supply an alternate value for the on state by setting onvalue to that value padx how much space to leave to the left and right of the checkbutton and text default is 1 pixel pady how much space to leave above and below the checkbutton and text default is 1 pixel relief with the default value  relief = flat  the checkbutton does not stand out from its background you may set this option to any of the other styles selectcolor the color of the checkbutton when it is set default is selectcolor = " red "  selectimage if you set this option to an image  that image will appear in the checkbutton when it is set state the default is state = normal  but you can use state = disabled to gray out the control and make it unresponsive if the cursor is currently over the checkbutton  the state is active text the label displayed next to the checkbutton use newlines  " \ n "  to display multiple lines of text underline with the default value of -1  none of the characters of the text label are underlined set this option to the index of a character in the text  counting from zero  to underline that character variable the control variable that tracks the current state of the checkbutton normally this variable is an intvar  and 0 means cleared and 1 means set  but see the offvalue and onvalue options above width the default width of a checkbutton is determined by the size of the displayed image or text you can set this option to a number of characters and the checkbutton will always have room for that many characters wraplength normally  lines are not wrapped you can set this option to a number of characters and all lines will be broken into pieces no longer than that number methods  following are commonly used methods for this widget  medthod description deselect   clears  turns off  the checkbutton flash   flashes the checkbutton a few times between its active and normal colors  but leaves it the way it started invoke   you can call this method to get the same actions that would occur if the user clicked on the checkbutton to change its state select   sets  turns on  the checkbutton toggle   clears the checkbutton if set  sets it if cleared example  try the following example yourself  from tkinter import * import tkmessagebox import tkinter top = tkinter.tk   checkvar1 = intvar   checkvar2 = intvar   c1 = checkbutton  top  text = " music "  variable = checkvar1  \ onvalue = 1  offvalue = 0  height = 5  \ width = 20  c2 = checkbutton  top  text = " video "  variable = checkvar2  \ onvalue = 1  offvalue = 0  height = 5  \ width = 20  c1.pack   c2.pack   top.mainloop   when the above code is executed  it produces the following result  entry the entry widget is used to accept single-line text strings from a user if you want to display multiple lines of text that can be edited  then you should use the text widget if you want to display one or more lines of text that can not be modified by the user  then you should use the label widget syntax  here is the simple syntax to create this widget  w = entry  master  option    parameters  master  this represents the parent window options  here is the list of most commonly used options for this widget these options can be used as keyvalue pairs separated by commas option description bg the normal background color displayed behind the label and indicator bd the size of the border around the indicator default is 2 pixels command a procedure to be called every time the user changes the state of this checkbutton cursor if you set this option to a cursor name  arrow  dot etc   the mouse cursor will change to that pattern when it is over the checkbutton font the font used for the text exportselection by default  if you select text within an entry widget  it is automatically exported to the clipboard to avoid this exportation  use exportselection = 0 fg the color used to render the text highlightcolor the color of the focus highlight when the checkbutton has the focus justify if the text contains multiple lines  this option controls how the text is justified  center  left  or right relief with the default value  relief = flat  the checkbutton does not stand out from its background you may set this option to any of the other styles selectbackground the background color to use displaying selected text selectborderwidth the width of the border to use around selected text the default is one pixel selectforeground the foreground  text  color of selected text show normally  the characters that the user types appear in the entry to make a .password entry that echoes each character as an asterisk  set show = " * "  state the default is state = normal  but you can use state = disabled to gray out the control and make it unresponsive if the cursor is currently over the checkbutton  the state is active textvariable in order to be able to retrieve the current text from your entry widget  you must set this option to an instance of the stringvar class width the default width of a checkbutton is determined by the size of the displayed image or text you can set this option to a number of characters and the checkbutton will always have room for that many characters xscrollcommand if you expect that users will often enter more text than the onscreen size of the widget  you can link your entry widget to a scrollbar methods  following are commonly used methods for this widget  medthod description delete  first  last = none  deletes characters from the widget  starting with the one at index first  up to but not including the character at position last if the second argument is omitted  only the single character at position first is deleted get   returns the entry 's current text as a string icursor  index  set the insertion cursor just before the character at the given index index  index  shift the contents of the entry so that the character at the given index is the leftmost visible character has no effect if the text fits entirely within the entry insert  index  s  inserts string s before the character at the given index select_adjust  index  this method is used to make sure that the selection includes the character at the specified index select_clear   clears the selection if there is n't currently a selection  has no effect select_from  index  sets the anchor index position to the character selected by index  and selects that character select_present   if there is a selection  returns true  else returns false select_range  start  end  sets the selection under program control selects the text starting at the start index  up to but not including the character at the end index the start position must be before the end position select_to  index  selects all the text from the anchor position up to but not including the character at the given index xview  index  this method is useful in linking the entry widget to a horizontal scrollbar xview_scroll  number  what  used to scroll the entry horizontally the what argument must be either units  to scroll by character widths  or pages  to scroll by chunks the size of the entry widget the number is positive to scroll left to right  negative to scroll right to left example  try the following example yourself  from tkinter import * top = tk   l1 = label  top  text = " user name "  l1.pack  side = left  e1 = entry  top  bd = 5  e1.pack  side = right  top.mainloop   when the above code is executed  it produces the following result  frame the frame widget is very important for the process of grouping and organizing other widgets in a somehow friendly way it works like a container  which is responsible for arranging the position of other widgets it uses rectangular areas in the screen to organize the layout and to provide padding of these widgets a frame can also be used as a foundation class to implement complex widgets syntax  here is the simple syntax to create this widget  w = frame  master  option    parameters  master  this represents the parent window options  here is the list of most commonly used options for this widget these options can be used as keyvalue pairs separated by commas option description bg the normal background color displayed behind the label and indicator bd the size of the border around the indicator default is 2 pixels cursor if you set this option to a cursor name  arrow  dot etc   the mouse cursor will change to that pattern when it is over the checkbutton height the vertical dimension of the new frame highlightbackground color of the focus highlight when the frame does not have focus highlightcolor color shown in the focus highlight when the frame has the focus highlightthickness thickness of the focus highlight relief with the default value  relief = flat  the checkbutton does not stand out from its background you may set this option to any of the other styles width the default width of a checkbutton is determined by the size of the displayed image or text you can set this option to a number of characters and the checkbutton will always have room for that many characters example  try the following example yourself  from tkinter import * root = tk   frame = frame  root  frame.pack   bottomframe = frame  root  bottomframe.pack  side = bottom  redbutton = button  frame  text = " red "  fg = " red "  redbutton.pack  side = left  greenbutton = button  frame  text = " brown "  fg = " brown "  greenbutton.pack  side = left  bluebutton = button  frame  text = " blue "  fg = " blue "  bluebutton.pack  side = left  blackbutton = button  bottomframe  text = " black "  fg = " black "  blackbutton.pack  side = bottom  root.mainloop   when the above code is executed  it produces the following result   label this widget implements a display box where you can place text or images the text displayed by this widget can be updated at any time you want it is also possible to underline part of the text  like to identify a keyboard shortcut  and span the text across multiple lines syntax  here is the simple syntax to create this widget  w = label  master  option    parameters  master  this represents the parent window options  here is the list of most commonly used options for this widget these options can be used as keyvalue pairs separated by commas option description anchor this options controls where the text is positioned if the widget has more space than the text needs the default is anchor = center  which centers the text in the available space bg the normal background color displayed behind the label and indicator bitmap set this option equal to a bitmap or image object and the label will display that graphic bd the size of the border around the indicator default is 2 pixels cursor if you set this option to a cursor name  arrow  dot etc   the mouse cursor will change to that pattern when it is over the checkbutton font if you are displaying text in this label  with the text or textvariable option  the font option specifies in what font that text will be displayed fg if you are displaying text or a bitmap in this label  this option specifies the color of the text if you are displaying a bitmap  this is the color that will appear at the position of the 1-bits in the bitmap height the vertical dimension of the new frame image to display a static image in the label widget  set this option to an image object justify specifies how multiple lines of text will be aligned with respect to each other  left for flush left  center for centered  the default   or right for right-justified padx extra space added to the left and right of the text within the widget default is 1 pady extra space added above and below the text within the widget default is 1 relief specifies the appearance of a decorative border around the label the default is flat ; for other values text to display one or more lines of text in a label widget  set this option to a string containing the text internal newlines  " \ n "  will force a line break textvariable to slave the text displayed in a label widget to a control variable of classstringvar  set this option to that variable underline you can display an underline  _  below the nth letter of the text  counting from 0  by setting this option to n the default is underline = -1  which means no underlining width width of the label in characters  not pixels !   if this option is not set  the label will be sized to fit its contents wraplength you can limit the number of characters in each line by setting this option to the desired number the default value  0  means that lines will be broken only at newlines example  try the following example yourself  from tkinter import * root = tk   var = stringvar   label = label  root  textvariable = var  relief = raised  var.set  " hey ! how are you doing "  label.pack   root.mainloop   when the above code is executed  it produces the following result  listbox the listbox widget is used to display a list of items from which a user can select a number of items syntax  here is the simple syntax to create this widget  w = listbox  master  option    parameters  master  this represents the parent window options  here is the list of most commonly used options for this widget these options can be used as keyvalue pairs separated by commas option description bg the normal background color displayed behind the label and indicator bd the size of the border around the indicator default is 2 pixels cursor the cursor that appears when the mouse is over the listbox font the font used for the text in the listbox fg the color used for the text in the listbox height number of lines  not pixels !  shown in the listbox default is 10 highlightcolor color shown in the focus highlight when the widget has the focus highlightthickness thickness of the focus highlight relief selects three-dimensional border shading effects the default is sunken selectbackground the background color to use displaying selected text selectmode determines how many items can be selected  and how mouse drags affect the selection  browse  normally  you can only select one line out of a listbox if you click on an item and then drag to a different line  the selection will follow the mouse this is the default single  you can only select one line  and you ca n't drag the mouse.wherever you click button 1  that line is selected multiple  you can select any number of lines at once clicking on any line toggles whether or not it is selected extended  you can select any adjacent group of lines at once by clicking on the first line and dragging to the last line width the width of the widget in characters the default is 20 xscrollcommand if you want to allow the user to scroll the listbox horizontally  you can link your listbox widget to a horizontal scrollbar yscrollcommand if you want to allow the user to scroll the listbox vertically  you can link your listbox widget to a vertical scrollbar methods  methods on listbox objects include  option description activate  index  selects the line specifies by the given index curselection   returns a tuple containing the line numbers of the selected element or elements  counting from 0 if nothing is selected  returns an empty tuple delete  first  last = none  deletes the lines whose indices are in the range  first  last   if the second argument is omitted  the single line with index first is deleted get  first  last = none  returns a tuple containing the text of the lines with indices from first to last  inclusive if the second argument is omitted  returns the text of the line closest to first index  i  if possible  positions the visible part of the listbox so that the line containing index i is at the top of the widget insert  index  * elements  insert one or more new lines into the listbox before the line specified by index use end as the first argument if you want to add new lines to the end of the listbox nearest  y  return the index of the visible line closest to the y-coordinate y relative to the listbox widget see  index  adjust the position of the listbox so that the line referred to by index is visible size   returns the number of lines in the listbox xview   to make the listbox horizontally scrollable  set the command option of the associated horizontal scrollbar to this method xview_moveto  fraction  scroll the listbox so that the leftmost fraction of the width of its longest line is outside the left side of the listbox fraction is in the range  0,1   xview_scroll  number  what  scrolls the listbox horizontally for the what argument  use either units to scroll by characters  or pages to scroll by pages  that is  by the width of the listbox the number argument tells how many to scroll yview   to make the listbox vertically scrollable  set the command option of the associated vertical scrollbar to this method yview_moveto  fraction  scroll the listbox so that the top fraction of the width of its longest line is outside the left side of the listbox fraction is in the range  0,1   yview_scroll  number  what  scrolls the listbox vertically for the what argument  use either units to scroll by lines  or pages to scroll by pages  that is  by the height of the listbox the number argument tells how many to scroll example  try the following example yourself  from tkinter import * import tkmessagebox import tkinter top = tk   lb1 = listbox  top  lb1.insert  1  " python "  lb1.insert  2  " perl "  lb1.insert  3  " c "  lb1.insert  4  " php "  lb1.insert  5  " jsp "  lb1.insert  6  " ruby "  lb1.pack   top.mainloop   when the above code is executed  it produces the following result  menubutton a menubutton is the part of a drop-down menu that stays on the screen all the time every menubutton is associated with a menu widget that can display the choices for that menubutton when the user clicks on it syntax  here is the simple syntax to create this widget  w = menubutton  master  option    parameters  master  this represents the parent window options  here is the list of most commonly used options for this widget these options can be used as keyvalue pairs separated by commas option description activebackground the background color when the mouse is over the menubutton activeforeground the foreground color when the mouse is over the menubutton anchor this options controls where the text is positioned if the widget has more space than the text needs the default is anchor = center  which centers the text bg the normal background color displayed behind the label and indicator bitmap to display a bitmap on the menubutton  set this option to a bitmap name bd the size of the border around the indicator default is 2 pixels cursor the cursor that appears when the mouse is over this menubutton direction set direction = left to display the menu to the left of the button ; use direction = right to display the menu to the right of the button ; or use direction = 'above ' to place the menu above the button disabledforeground the foreground color shown on this menubutton when it is disabled fg the foreground color when the mouse is not over the menubutton height the height of the menubutton in lines of text  not pixels !   the default is to fit the menubutton 's size to its contents highlightcolor color shown in the focus highlight when the widget has the focus image to display an image on this menubutton  justify this option controls where the text is located when the text does n't fill the menubutton  use justify = left to left-justify the text  this is the default  ; use justify = center to center it  or justify = right to right-justify menu to associate the menubutton with a set of choices  set this option to the menu object containing those choices that menu object must have been created by passing the associated menubutton to the constructor as its first argument padx how much space to leave to the left and right of the text of the menubutton default is 1 pady how much space to leave above and below the text of the menubutton default is 1 relief selects three-dimensional border shading effects the default is raised state normally  menubuttons respond to the mouse set state = disabled to gray out the menubutton and make it unresponsive text to display text on the menubutton  set this option to the string containing the desired text newlines  " \ n "  within the string will cause line breaks textvariable you can associate a control variable of class stringvar with this menubutton setting that control variable will change the displayed text underline normally  no underline appears under the text on the menubutton to underline one of the characters  set this option to the index of that character width the width of the widget in characters the default is 20 wraplength normally  lines are not wrapped you can set this option to a number of characters and all lines will be broken into pieces no longer than that number example  try the following example yourself  from tkinter import * import tkmessagebox import tkinter top = tk   mb = menubutton  top  text = " condiments "  relief = raised  mb.grid   mb.menu = menu  mb  tearoff = 0  mb  " menu "  = mb.menu mayovar = intvar   ketchvar = intvar   mb.menu.add_checkbutton  label = " mayo "  variable = mayovar  mb.menu.add_checkbutton  label = " ketchup "  variable = ketchvar  mb.pack   top.mainloop   when the above code is executed  it produces the following result  menu the goal of this widget is to allow us to create all kinds of menus that can be used by our applications the core functionality provides ways to create three menu types  pop-up  toplevel and pull-down it is also possible to use other extended widgets to implement new types of menus  such as the optionmenu widget  which implements a special type that generates a pop-up list of items within a selection syntax  here is the simple syntax to create this widget  w = menu  master  option    parameters  master  this represents the parent window options  here is the list of most commonly used options for this widget these options can be used as keyvalue pairs separated by commas option description activebackground the background color that will appear on a choice when it is under the mouse activeborderwidth specifies the width of a border drawn around a choice when it is under the mouse default is 1 pixel activeforeground the foreground color that will appear on a choice when it is under the mouse bg the background color for choices not under the mouse bd the width of the border around all the choices default is 1 cursor the cursor that appears when the mouse is over the choices  but only when the menu has been torn off disabledforeground the color of the text for items whose state is disabled font the default font for textual choices fg the foreground color used for choices not under the mouse postcommand you can set this option to a procedure  and that procedure will be called every time someone brings up this menu relief the default 3-d effect for menus is relief = raised image to display an image on this menubutton selectcolor specifies the color displayed in checkbuttons and radiobuttons when they are selected tearoff normally  a menu can be torn off  the first position  position 0  in the list of choices is occupied by the tear-off element  and the additional choices are added starting at position 1 if you set tearoff = 0  the menu will not have a tear-off feature  and choices will be added starting at position 0 title normally  the title of a tear-off menu window will be the same as the text of the menubutton or cascade that lead to this menu if you want to change the title of that window  set the title option to that string methods  these methods are available on menu objects  option description add_command  options  adds a menu item to the menu add_radiobutton  options  creates a radio button menu item add_checkbutton  options  creates a check button menu item add_cascade  options  creates a new hierarchical menu by associating a given menu to a parent menu add_separator   adds a separator line to the menu add  type  options  adds a specific type of menu item to the menu delete  startindex   endindex   deletes the menu items ranging from startindex to endindex entryconfig  index  options  allows you to modify a menu item  which is identified by the index  and change its options index  item  returns the index number of the given menu item label insert_separator  index  insert a new separator at the position specified by index invoke  index  calls the command callback associated with the choice at position index if a checkbutton  its state is toggled between set and cleared ; if a radiobutton  that choice is set type  index  returns the type of the choice specified by index  either " cascade "  " checkbutton "  " command "  " radiobutton "  " separator "  or " tearoff "  example  try the following example yourself  from tkinter import * def donothing    filewin = toplevel  root  button = button  filewin  text = " do nothing button "  button.pack   root = tk   menubar = menu  root  filemenu = menu  menubar  tearoff = 0  filemenu.add_command  label = " new "  command = donothing  filemenu.add_command  label = " open "  command = donothing  filemenu.add_command  label = " save "  command = donothing  filemenu.add_command  label = " save as "  command = donothing  filemenu.add_command  label = " close "  command = donothing  filemenu.add_separator   filemenu.add_command  label = " exit "  command = root.quit  menubar.add_cascade  label = " file "  menu = filemenu  editmenu = menu  menubar  tearoff = 0  editmenu.add_command  label = " undo "  command = donothing  editmenu.add_separator   editmenu.add_command  label = " cut "  command = donothing  editmenu.add_command  label = " copy "  command = donothing  editmenu.add_command  label = " paste "  command = donothing  editmenu.add_command  label = " delete "  command = donothing  editmenu.add_command  label = " select all "  command = donothing  menubar.add_cascade  label = " edit "  menu = editmenu  helpmenu = menu  menubar  tearoff = 0  helpmenu.add_command  label = " help index "  command = donothing  helpmenu.add_command  label = " about "  command = donothing  menubar.add_cascade  label = " help "  menu = helpmenu  root.config  menu = menubar  root.mainloop   when the above code is executed  it produces the following result  message this widget provides a multiline and noneditable object that displays texts  automatically breaking lines and justifying their contents its functionality is very similar to the one provided by the label widget  except that it can also automatically wrap the text  maintaining a given width or aspect ratio syntax  here is the simple syntax to create this widget  w = message  master  option    parameters  master  this represents the parent window options  here is the list of most commonly used options for this widget these options can be used as keyvalue pairs separated by commas option description anchor this options controls where the text is positioned if the widget has more space than the text needs the default is anchor = center  which centers the text in the available space bg the normal background color displayed behind the label and indicator bitmap set this option equal to a bitmap or image object and the label will display that graphic bd the size of the border around the indicator default is 2 pixels cursor if you set this option to a cursor name  arrow  dot etc   the mouse cursor will change to that pattern when it is over the checkbutton font if you are displaying text in this label  with the text or textvariable option  the font option specifies in what font that text will be displayed fg if you are displaying text or a bitmap in this label  this option specifies the color of the text if you are displaying a bitmap  this is the color that will appear at the position of the 1-bits in the bitmap height the vertical dimension of the new frame image to display a static image in the label widget  set this option to an image object justify specifies how multiple lines of text will be aligned with respect to each other  left for flush left  center for centered  the default   or right for right-justified padx extra space added to the left and right of the text within the widget default is 1 pady extra space added above and below the text within the widget default is 1 relief specifies the appearance of a decorative border around the label the default is flat ; for other values text to display one or more lines of text in a label widget  set this option to a string containing the text internal newlines  " \ n "  will force a line break textvariable to slave the text displayed in a label widget to a control variable of classstringvar  set this option to that variable underline you can display an underline  _  below the nth letter of the text  counting from 0  by setting this option to n the default is underline = -1  which means no underlining width width of the label in characters  not pixels !   if this option is not set  the label will be sized to fit its contents wraplength you can limit the number of characters in each line by setting this option to the desired number the default value  0  means that lines will be broken only at newlines example  try the following example yourself  from tkinter import * root = tk   var = stringvar   label = message  root  textvariable = var  relief = raised  var.set  " hey ! how are you doing "  label.pack   root.mainloop   when the above code is executed  it produces the following result  radiobutton this widget implements a multiple-choice button  which is a way to offer many possible selections to the user and lets user choose only one of them in order to implement this functionality  each group of radiobuttons must be associated to the same variable and each one of the buttons must symbolize a single value you can use the tab key to switch from one radionbutton to another syntax  here is the simple syntax to create this widget  w = radiobutton  master  option    parameters  master  this represents the parent window options  here is the list of most commonly used options for this widget these options can be used as keyvalue pairs separated by commas option description activebackground the background color when the mouse is over the radiobutton activeforeground the foreground color when the mouse is over the radiobutton anchor if the widget inhabits a space larger than it needs  this option specifies where the radiobutton will sit in that space the default is anchor = center bg the normal background color behind the indicator and label bitmap to display a monochrome image on a radiobutton  set this option to a bitmap borderwidth the size of the border around the indicator part itself default is 2 pixels command a procedure to be called every time the user changes the state of this radiobutton cursor if you set this option to a cursor name  arrow  dot etc   the mouse cursor will change to that pattern when it is over the radiobutton font the font used for the text fg the color used to render the text height the number of lines  not pixels  of text on the radiobutton default is 1 highlightbackground the color of the focus highlight when the radiobutton does not have focus highlightcolor the color of the focus highlight when the radiobutton has the focus image to display a graphic image instead of text for this radiobutton  set this option to an image object justify if the text contains multiple lines  this option controls how the text is justified  center  the default   left  or right padx how much space to leave to the left and right of the radiobutton and text default is 1 pady how much space to leave above and below the radiobutton and text default is 1 relief specifies the appearance of a decorative border around the label the default is flat ; for other values selectcolor the color of the radiobutton when it is set default is red selectimage if you are using the image option to display a graphic instead of text when the radiobutton is cleared  you can set the selectimage option to a different image that will be displayed when the radiobutton is set state the default is state = normal  but you can set state = disabled to gray out the control and make it unresponsive if the cursor is currently over the radiobutton  the state is active text the label displayed next to the radiobutton use newlines  " \ n "  to display multiple lines of text textvariable to slave the text displayed in a label widget to a control variable of classstringvar  set this option to that variable underline you can display an underline  _  below the nth letter of the text  counting from 0  by setting this option to n the default is underline = -1  which means no underlining value when a radiobutton is turned on by the user  its control variable is set to its current value option if the control variable is an intvar  give each radiobutton in the group a different integer value option if the control variable is astringvar  give each radiobutton a different string value option variable the control variable that this radiobutton shares with the other radiobuttons in the group this can be either an intvar or a stringvar width width of the label in characters  not pixels !   if this option is not set  the label will be sized to fit its contents wraplength you can limit the number of characters in each line by setting this option to the desired number the default value  0  means that lines will be broken only at newlines methods  methods description deselect   clears  turns off  the radiobutton flash   flashes the radiobutton a few times between its active and normal colors  but leaves it the way it started invoke   you can call this method to get the same actions that would occur if the user clicked on the radiobutton to change its state select   sets  turns on  the radiobutton example  try the following example yourself  from tkinter import * def sel    selection = " you selected the option " + str  var.get    label.config  text = selection  root = tk   var = intvar   r1 = radiobutton  root  text = " option 1 "  variable = var  value = 1  command = sel  r1.pack  anchor = w  r2 = radiobutton  root  text = " option 2 "  variable = var  value = 2  command = sel  r2.pack  anchor = w  r3 = radiobutton  root  text = " option 3 "  variable = var  value = 3  command = sel  r3.pack  anchor = w  label = label  root  label.pack   root.mainloop   when the above code is executed  it produces the following result  scale the scale widget provides a graphical slider object that allows you to select values from a specific scale syntax  here is the simple syntax to create this widget  w = scale  master  option    parameters  master  this represents the parent window options  here is the list of most commonly used options for this widget these options can be used as keyvalue pairs separated by commas option description activebackground the background color when the mouse is over the scale bg the background color of the parts of the widget that are outside the trough bd width of the 3-d border around the trough and slider default is 2 pixels command a procedure to be called every time the slider is moved this procedure will be passed one argument  the new scale value if the slider is moved rapidly  you may not get a callback for every possible position  but you 'll certainly get a callback when it settles cursor if you set this option to a cursor name  arrow  dot etc   the mouse cursor will change to that pattern when it is over the scale digits the way your program reads the current value shown in a scale widget is through a control variable the control variable for a scale can be an intvar  a doublevar  float   or a stringvar if it is a string variable  the digits option controls how many digits to use when the numeric scale value is converted to a string font the font used for the label and annotations fg the color of the text used for the label and annotations from_ a float or integer value that defines one end of the scale 's range highlightbackground the color of the focus highlight when the scale does not have focus highlightcolor the color of the focus highlight when the scale has the focus label you can display a label within the scale widget by setting this option to the label 's text the label appears in the top left corner if the scale is horizontal  or the top right corner if vertical the default is no label length the length of the scale widget this is the x dimension if the scale is horizontal  or the y dimension if vertical the default is 100 pixels orient set orient = horizontal if you want the scale to run along the x dimension  or orient = vertical to run parallel to the y-axis default is horizontal relief specifies the appearance of a decorative border around the label the default is flat ; for other values repeatdelay this option controls how long button 1 has to be held down in the trough before the slider starts moving in that direction repeatedly default is repeatdelay = 300  and the units are milliseconds resolution normally  the user will only be able to change the scale in whole units set this option to some other value to change the smallest increment of the scale 's value for example  if from_ = -1.0 and to = 1.0  and you set resolution = 0.5  the scale will have 5 possible values   1.0  -0.5  0.0  + 0.5  and + 1.0 showvalue normally  the current value of the scale is displayed in text form by the slider  above it for horizontal scales  to the left for vertical scales   set this option to 0 to suppress that label sliderlength normally the slider is 30 pixels along the length of the scale you can change that length by setting the sliderlength option to your desired length state normally  scale widgets respond to mouse events  and when they have the focus  also keyboard events set state = disabled to make the widget unresponsive takefocus normally  the focus will cycle through scale widgets set this option to 0 if you do n't want this behavior tickinterval to display periodic scale values  set this option to a number  and ticks will be displayed on multiples of that value for example  if from_ = 0.0  to = 1.0  and tickinterval = 0.25  labels will be displayed along the scale at values 0.0  0.25  0.50  0.75  and 1.00 these labels appear below the scale if horizontal  to its left if vertical default is 0  which suppresses display of ticks to a float or integer value that defines one end of the scale 's range ; the other end is defined by the from_ option  discussed above the to value can be either greater than or less than the from_ value for vertical scales  the to value defines the bottom of the scale ; for horizontal scales  the right end troughcolor the color of the trough variable the control variable for this scale  if any control variables may be from class intvar  doublevar  float   or stringvar in the latter case  the numerical value will be converted to a string width the width of the trough part of the widget this is the x dimension for vertical scales and the y dimension if the scale has orient = horizontal default is 15 pixels methods  scale objects have these methods  methods description get   this method returns the current value of the scale set  value  sets the scale 's value example  try the following example yourself  from tkinter import * def sel    selection = " value = " + str  var.get    label.config  text = selection  root = tk   var = doublevar   scale = scale  root  variable = var  scale.pack  anchor = center  button = button  root  text = " get scale value "  command = sel  button.pack  anchor = center  label = label  root  label.pack   root.mainloop   when the above code is executed  it produces the following result  scrollbar this widget provides a slide controller that is used to implement vertical scrolled widgets  such as listbox  text and canvas note that you can also create horizontal scrollbars on entry widgets syntax  here is the simple syntax to create this widget  w = scrollbar  master  option    parameters  master  this represents the parent window options  here is the list of most commonly used options for this widget these options can be used as keyvalue pairs separated by commas option description activebackground the color of the slider and arrowheads when the mouse is over them bg the color of the slider and arrowheads when the mouse is not over them bd the width of the 3-d borders around the entire perimeter of the trough  and also the width of the 3-d effects on the arrowheads and slider default is no border around the trough  and a 2-pixel border around the arrowheads and slider command a procedure to be called whenever the scrollbar is moved cursor the cursor that appears when the mouse is over the scrollbar elementborderwidth the width of the borders around the arrowheads and slider the default is elementborderwidth = -1  which means to use the value of the borderwidth option highlightbackground the color of the focus highlight when the scrollbar does not have focus highlightcolor the color of the focus highlight when the scrollbar has the focus highlightthickness the thickness of the focus highlight default is 1 set to 0 to suppress display of the focus highlight jump this option controls what happens when a user drags the slider normally  jump = 0   every small drag of the slider causes the command callback to be called if you set this option to 1  the callback is n't called until the user releases the mouse button orient set orient = horizontal for a horizontal scrollbar  orient = vertical for a vertical one repeatdelay this option controls how long button 1 has to be held down in the trough before the slider starts moving in that direction repeatedly default is repeatdelay = 300  and the units are milliseconds repeatinterval repeatinterval takefocus normally  you can tab the focus through a scrollbar widget set takefocus = 0 if you do n't want this behavior troughcolor the color of the trough width width of the scrollbar  its y dimension if horizontal  and its x dimension if vertical   default is 16 methods  scrollbar objects have these methods  methods description get   returns two numbers  a  b  describing the current position of the slider the a value gives the position of the left or top edge of the slider  for horizontal and vertical scrollbars respectively ; the b value gives the position of the right or bottom edge set  first  last  to connect a scrollbar to another widget w  set w 's xscrollcommand or yscrollcommand to the scrollbar 's set   method the arguments have the same meaning as the values returned by the get   method example  try the following example yourself  from tkinter import * root = tk   scrollbar = scrollbar  root  scrollbar.pack  side = right  fill = y  mylist = listbox  root  yscrollcommand = scrollbar.set  for line in range  100   mylist.insert  end  " this is line number " + str  line   mylist.pack  side = left  fill = both  scrollbar.config  command = mylist.yview  mainloop   when the above code is executed  it produces the following result  text text widgets provide advanced capabilities that allow you to edit a multiline text and format the way it has to be displayed  such as changing its color and font you can also use elegant structures like tabs and marks to locate specific sections of the text  and apply changes to those areas moreover  you can embed windows and images in the text because this widget was designed to handle both plain and formatted text syntax  here is the simple syntax to create this widget  w = text  master  option    parameters  master  this represents the parent window options  here is the list of most commonly used options for this widget these options can be used as keyvalue pairs separated by commas option description bg the default background color of the text widget bd the width of the border around the text widget default is 2 pixels cursor the cursor that will appear when the mouse is over the text widget exportselection normally  text selected within a text widget is exported to be the selection in the window manager set exportselection = 0 if you do n't want that behavior font the default font for text inserted into the widget fg the color used for text  and bitmaps  within the widget you can change the color for tagged regions ; this option is just the default height the height of the widget in lines  not pixels !   measured according to the current font size highlightbackground the color of the focus highlight when the text widget does not have focus highlightcolor the color of the focus highlight when the text widget has the focus highlightthickness the thickness of the focus highlight default is 1 set highlightthickness = 0 to suppress display of the focus highlight insertbackground the color of the insertion cursor default is black insertborderwidth size of the 3-d border around the insertion cursor default is 0 insertofftime the number of milliseconds the insertion cursor is off during its blink cycle set this option to zero to suppress blinking default is 300 insertontime the number of milliseconds the insertion cursor is on during its blink cycle default is 600 insertwidth width of the insertion cursor  its height is determined by the tallest item in its line   default is 2 pixels padx the size of the internal padding added to the left and right of the text area default is one pixel pady the size of the internal padding added above and below the text area default is one pixel relief the 3-d appearance of the text widget default is relief = sunken selectbackground the background color to use displaying selected text selectborderwidth the width of the border to use around selected text spacing1 this option specifies how much extra vertical space is put above each line of text if a line wraps  this space is added only before the first line it occupies on the display default is 0 spacing2 this option specifies how much extra vertical space to add between displayed lines of text when a logical line wraps default is 0 spacing3 this option specifies how much extra vertical space is added below each line of text if a line wraps  this space is added only after the last line it occupies on the display default is 0 state normally  text widgets respond to keyboard and mouse events ; set state = normal to get this behavior if you set state = disabled  the text widget will not respond  and you wo n't be able to modify its contents programmatically either tabs this option controls how tab characters position text width the width of the widget in characters  not pixels !   measured according to the current font size wrap this option controls the display of lines that are too wide set wrap = word and it will break the line after the last word that will fit with the default behavior  wrap = char  any line that gets too long will be broken at any character xscrollcommand to make the text widget horizontally scrollable  set this option to the set   method of the horizontal scrollbar yscrollcommand to make the text widget vertically scrollable  set this option to the set   method of the vertical scrollbar methods  text objects have these methods  methods & description delete  startindex  ,endindex   this method deletes a specific character or a range of text get  startindex  ,endindex   this method returns a specific character or a range of text index  index  returns the absolute value of an index based on the given index insert  index  ,string    this method inserts strings at the specified index location see  index  this method returns true if the text located at the index position is visible text widgets support three distinct helper structures  marks  tabs  and indexes  marks are used to bookmark positions between two characters within a given text we have the following methods available when handling marks  methods & description index  mark  returns the line and column location of a specific mark mark_gravity  mark  ,gravity   returns the gravity of the given mark if the second argument is provided  the gravity is set for the given mark mark_names   returns all marks from the text widget mark_set  mark  index  informs a new position to the given mark mark_unset  mark  removes the given mark from the text widget tags are used to associate names to regions of text which makes the task of modifying the display settings of specific text areas tags are also used to bind event callbacks to specific ranges of text following are the available methods for handling tabs  methods & description tag_add  tagname  startindex  ,endindex    this method tags either the position defined by startindex  or a range delimited by the positions startindex and endindex tag_config you can use this method to configure the tag properties  which include  justify  center  left  or right   tabs  this property has the same functionality of the text widget tabs 's property   and underline  used to underline the tagged text   tag_delete  tagname  this method is used to delete and remove a given tag tag_remove  tagname  ,startindex  .endindex     after applying this method  the given tag is removed from the provided area without deleting the actual tag definition example  try the following example yourself  from tkinter import * def onclick    pass root = tk   text = text  root  text.insert  insert  " hello "  text.insert  end  " bye bye "  text.pack   text.tag_add  " here "  " 1.0 "  " 1.4 "  text.tag_add  " start "  " 1.8 "  " 1.13 "  text.tag_config  " here "  background = " yellow "  foreground = " blue "  text.tag_config  " start "  background = " black "  foreground = " green "  root.mainloop   when the above code is executed  it produces the following result  toplevel toplevel widgets work as windows that are directly managed by the window manager they do not necessarily have a parent widget on top of them your application can use any number of top-level windows syntax  here is the simple syntax to create this widget  w = toplevel  option    parameters  options  here is the list of most commonly used options for this widget these options can be used as keyvalue pairs separated by commas option description bg the background color of the window bd border width in pixels ; default is 0 cursor the cursor that appears when the mouse is in this window class_ normally  text selected within a text widget is exported to be the selection in the window manager set exportselection = 0 if you do n't want that behavior font the default font for text inserted into the widget fg the color used for text  and bitmaps  within the widget you can change the color for tagged regions ; this option is just the default height window height relief normally  a top-level window will have no 3-d borders around it to get a shaded border  set the bd option larger that its default value of zero  and set the relief option to one of the constants width the desired width of the window methods  toplevel objects have these methods  methods & description deiconify   displays the window  after using either the iconify or the withdraw methods frame   returns a system-specific window identifier group  window  adds the window to the window group administered by the given window iconify   turns the window into an icon  without destroying it protocol  name  function  registers a function as a callback which will be called for the given protocol iconify   turns the window into an icon  without destroying it state   returns the current state of the window possible values are normal  iconic  withdrawn and icon transient   master   turns the window into a temporary  transient  window for the given master or to the window 's parent  when no argument is given withdraw   removes the window from the screen  without destroying it maxsize  width  height  defines the maximum size for this window minsize  width  height  defines the minimum size for this window positionfrom  who  defines the position controller resizable  width  height  defines the resize flags  which control whether the window can be resized sizefrom  who  defines the size controller title  string  defines the window title example  try the following example yourself  from tkinter import * root = tk   top = toplevel   top.mainloop   when the above code is executed  it produces the following result  spinbox the spinbox widget is a variant of the standard tkinter entry widget  which can be used to select from a fixed number of values syntax  here is the simple syntax to create this widget  w = spinbox  master  option    parameters  master  this represents the parent window options  here is the list of most commonly used options for this widget these options can be used as keyvalue pairs separated by commas option description activebackground the color of the slider and arrowheads when the mouse is over them bg the color of the slider and arrowheads when the mouse is not over them bd the width of the 3-d borders around the entire perimeter of the trough  and also the width of the 3-d effects on the arrowheads and slider default is no border around the trough  and a 2-pixel border around the arrowheads and slider command a procedure to be called whenever the scrollbar is moved cursor the cursor that appears when the mouse is over the scrollbar disabledbackground the background color to use when the widget is disabled disabledforeground the text color to use when the widget is disabled fg text color font the font to use in this widget format format string no default value from_ the minimum value used together with to to limit the spinbox range justify default is left relief default is sunken repeatdelay together with repeatinterval  this option controls button auto-repeat both values are given in milliseconds repeatinterval see repeatdelay state one of normal  disabled  or " readonly "  default is normal textvariable no default value to see from validate validation mode default is none validatecommand validation callback no default value values a tuple containing valid values for this widget overrides from/to/increment vcmd same as validatecommand width widget width  in character units default is 20 wrap if true  the up and down buttons will wrap around xscrollcommand used to connect a spinbox field to a horizontal scrollbar this option should be set to the set method of the corresponding scrollbar methods  spinbox objects have these methods  methods & description delete  startindex  ,endindex   this method deletes a specific character or a range of text get  startindex  ,endindex   this method returns a specific character or a range of text identify  x  y  identifies the widget element at the given location index  index  returns the absolute value of an index based on the given index insert  index  ,string    this method inserts strings at the specified index location invoke  element  invokes a spinbox button example  try the following example yourself  from tkinter import * master = tk   w = spinbox  master  from_ = 0  to = 10  w.pack   mainloop   when the above code is executed  it produces the following result  panedwindow a panedwindow is a container widget that may contain any number of panes  arranged horizontally or vertically each pane contains one widget and each pair of panes is separated by a moveable  via mouse movements  sash moving a sash causes the widgets on either side of the sash to be resized syntax  here is the simple syntax to create this widget  w = panedwindow  master  option    parameters  master  this represents the parent window options  here is the list of most commonly used options for this widget these options can be used as keyvalue pairs separated by commas option description bg the color of the slider and arrowheads when the mouse is not over them bd the width of the 3-d borders around the entire perimeter of the trough  and also the width of the 3-d effects on the arrowheads and slider default is no border around the trough  and a 2 pixel border around the arrowheads and slider borderwidth default is 2 cursor the cursor that appears when the mouse is over the window handlepad default is 8 handlesize default is 8 height no default value orient default is horizontal relief default is flat sashcursor no default value sashrelief default is raised sashwidth default is 2 showhandle no default value width no default value methods  panedwindow objects have these methods  methods & description add  child  options  adds a child window to the paned window get  startindex  ,endindex   this method returns a specific character or a range of text config  options  modifies one or more widget options if no options are given  the method returns a dictionary containing all current option values example  try the following example yourself here 's how to create a 3-pane widget  from tkinter import * m1 = panedwindow   m1.pack  fill = both  expand = 1  left = label  m1  text = " left pane "  m1.add  left  m2 = panedwindow  m1  orient = vertical  m1.add  m2  top = label  m2  text = " top pane "  m2.add  top  bottom = label  m2  text = " bottom pane "  m2.add  bottom  mainloop   when the above code is executed  it produces the following result  labelframe a labelframe is a simple container widget its primary purpose is to act as a spacer or container for complex window layouts this widget has the features of a frame plus the ability to display a label syntax  here is the simple syntax to create this widget  w = labelframe  master  option    parameters  master  this represents the parent window options  here is the list of most commonly used options for this widget these options can be used as keyvalue pairs separated by commas option description bg the normal background color displayed behind the label and indicator bd the size of the border around the indicator default is 2 pixels cursor if you set this option to a cursor name  arrow  dot etc   the mouse cursor will change to that pattern when it is over the checkbutton font the vertical dimension of the new frame height the vertical dimension of the new frame labelanchor specifies where to place the label highlightbackground color of the focus highlight when the frame does not have focus highlightcolor color shown in the focus highlight when the frame has the focus highlightthickness thickness of the focus highlight relief with the default value  relief = flat  the checkbutton does not stand out from its background you may set this option to any of the other styles text specifies a string to be displayed inside the widget width specifies the desired width for the window example  try the following example yourself here 's how to create a labelframe widget  from tkinter import * root = tk   labelframe = labelframe  root  text = " this is a labelframe "  labelframe.pack  fill = " both "  expand = " yes "  left = label  labelframe  text = " inside the labelframe "  left.pack   root.mainloop   when the above code is executed  it produces the following result  tkmessagebox the tkmessagebox module is used to display message boxes in your applications this module provides a number of functions that you can use to display an appropriate message some of these functions are showinfo  showwarning  showerror  askquestion  askokcancel  askyesno and askretryignore syntax  here is the simple syntax to create this widget  tkmessagebox.functionname  title  message   options   parameters  functionname  this is the name of the appropriate message box function title  this is the text to be displayed in the title bar of a message box message  this is the text to be displayed as a message options  options are alternative choices that you may use to tailor a standard message box some of the options that you can use are default and parent the default option is used to specify the default button  such as abort  retry  or ignore in the message box the parent option is used to specify the window on top of which the message box is to be displayed you could use one of the following functions with dialogue box  showinfo   showwarning   showerror   askquestion   askokcancel   askyesno   askretrycancel   example  try the following example yourself  import tkinter import tkmessagebox top = tkinter.tk   def hello    tkmessagebox.showinfo  " say hello "  " hello world "  b1 = tkinter.button  top  text = " say hello "  command = hello  b1.pack   top.mainloop   when the above code is executed  it produces the following result  standard attributes  let 's take a look at how some of their common attributes  such as sizes  colors and fonts are specified dimensions colors fonts anchors relief styles bitmaps cursors each attributes is explained below individually dimensions various lengths  widths  and other dimensions of widgets can be described in many different units if you set a dimension to an integer  it is assumed to be in pixels you can specify units by setting a dimension to a string containing a number followed by  character description c centimeters i inches m millimeters p printer 's points  about 1/72 "  length options  tkinter expresses a length as an integer number of pixels here is the list of common length options  borderwidth  width of the border which gives a three-dimensional look to the widget highlightthickness  width of the highlight rectangle when the widget has focus  padx pady  extra space the widget requests from its layout manager beyond the minimum the widget needs to display its contents in the x and y directions selectborderwidth  width of the three-dimentional border around selected items of the widget wraplength  maximum line length for widgets that perform word wrapping height  desired height of the widget ; must be greater than or equal to 1 underline  index of the character to underline in the widget 's text  0 is the first character  1 the second one  and so on   width  desired width of the widget colors tkinter represents colors with strings there are two general ways to specify colors in tkinter  you can use a string specifying the proportion of red  green and blue in hexadecimal digits for example  " # fff " is white  " # 000000 " is black  " # 000fff000 " is pure green  and " # 00ffff " is pure cyan  green plus blue   you can also use any locally defined standard color name the colors " white "  " black "  " red "  " green "  " blue "  " cyan "  " yellow "  and " magenta " will always be available color options  the common color options are  activebackground  background color for the widget when the widget is active activeforeground  foreground color for the widget when the widget is active background  background color for the widget this can also be represented as bg disabledforeground  foreground color for the widget when the widget is disabled foreground  foreground color for the widget this can also be represented as fg highlightbackground  background color of the highlight region when the widget has focus highlightcolor  foreground color of the highlight region when the widget has focus selectbackground  background color for the selected items of the widget selectforeground  foreground color for the selected items of the widget fonts there may be up to three ways to specify type style simple tuple fonts  as a tuple whose first element is the font family  followed by a size in points  optionally followed by a string containing one or more of the style modifiers bold  italic  underline and overstrike example   " helvetica "  " 16 "  for a 16-point helvetica regular  " times "  " 24 "  " bold italic "  for a 24-point times bold italic font object fonts  you can create a " font object " by importing the tkfont module and using its font class constructor  import tkfont font = tkfont.font  option    here is the list of options  family  the font family name as a string size  the font height as an integer in points to get a font n pixels high  use -n weight  " bold " for boldface  " normal " for regular weight slant  " italic " for italic  " roman " for unslanted underline  1 for underlined text  0 for normal overstrike  1 for overstruck text  0 for normal example  helv36 = tkfont.font  family = " helvetica " ,size = 36,weight = " bold "  x window fonts  if you are running under the x window system  you can use any of the x font names for example  the font named "  * -lucidatypewriter-medium-r *  *  * -140 *  *  *  *  *  * " is the author 's favorite fixed-width font for onscreen use use the xfontsel program to help you select pleasing fonts anchors anchors are used to define where text is positioned relative to a reference point here is list of possible constants  which can be used for anchor attribute nw n ne w center e sw s se for example  if you use center as a text anchor  the text will be centered horizontally and vertically around the reference point anchor nw will position the text so that the reference point coincides with the northwest  top left  corner of the box containing the text anchor w will center the text vertically around the reference point  with the left edge of the text box passing through that point  and so on if you create a small widget inside a large frame and use the anchor = se option  the widget will be placed in the bottom right corner of the frame if you used anchor = n instead  the widget would be centered along the top edge example  the anchor constants are shown in this diagram  relief styles the relief style of a widget refers to certain simulated 3-d effects around the outside of the widget here is a screenshot of a row of buttons exhibiting all the possible relief styles  here is list of possible constants which can be used for relief attribute flat raised sunken groove ridge example  from tkinter import * import tkinter top = tkinter.tk   b1 = tkinter.button  top  text = " flat "  relief = flat  b2 = tkinter.button  top  text = " raised "  relief = raised  b3 = tkinter.button  top  text = " sunken "  relief = sunken  b4 = tkinter.button  top  text = " groove "  relief = groove  b5 = tkinter.button  top  text = " ridge "  relief = ridge  b1.pack   b2.pack   b3.pack   b4.pack   b5.pack   top.mainloop   when the above code is executed  it produces the following result  bitmaps you would use this attribute to display a bitmap there are following type of bitmaps available  " error " " gray75 " " gray50 " " gray25 " " gray12 " " hourglass " " info " " questhead " " question " " warning " example  from tkinter import * import tkinter top = tkinter.tk   b1 = tkinter.button  top  text = " error "  relief = raised  \ bitmap = " error "  b2 = tkinter.button  top  text = " hourglass "  relief = raised  \ bitmap = " hourglass "  b3 = tkinter.button  top  text = " info "  relief = raised  \ bitmap = " info "  b4 = tkinter.button  top  text = " question "  relief = raised  \ bitmap = " question "  b5 = tkinter.button  top  text = " warning "  relief = raised  \ bitmap = " warning "  b1.pack   b2.pack   b3.pack   b4.pack   b5.pack   top.mainloop   when the above code is executed  it produces the following result  cursors python tkinter supports quite a number of different mouse cursors available the exact graphic may vary according to your operating system here is the list of interesting ones  " arrow " " circle " " clock " " cross " " dotbox " " exchange " " fleur " " heart " " heart " " man " " mouse " " pirate " " plus " " shuttle " " sizing " " spider " " spraycan " " star " " target " " tcross " " trek " " watch " example  try the following example by moving cursor on different buttons  from tkinter import * import tkinter top = tkinter.tk   b1 = tkinter.button  top  text = " circle "  relief = raised  \ cursor = " circle "  b2 = tkinter.button  top  text = " plus "  relief = raised  \ cursor = " plus "  b1.pack   b2.pack   top.mainloop   geometry management  all tkinter widgets have access to specific geometry management methods  which have the purpose of organizing widgets throughout the parent widget area tkinter exposes the following geometry manager classes  pack  grid and place the pack   method  this geometry manager organizes widgets in blocks before placing them in the parent widget the grid   method  this geometry manager organizes widgets in a table-like structure in the parent widget the place   method -this geometry manager organizes widgets by placing them in a specific position in the parent widget the pack   method this geometry manager organizes widgets in blocks before placing them in the parent widget syntax  widget.pack  pack_options  here is the list of possible options  expand  when set to true  widget expands to fill any space not otherwise used in widget 's parent fill  determines whether widget fills any extra space allocated to it by the packer  or keeps its own minimal dimensions  none  default   x  fill only horizontally   y  fill only vertically   or both  fill both horizontally and vertically   side  determines which side of the parent widget packs against  top  default   bottom  left  or right example  try the following example by moving cursor on different buttons  from tkinter import * root = tk   frame = frame  root  frame.pack   bottomframe = frame  root  bottomframe.pack  side = bottom  redbutton = button  frame  text = " red "  fg = " red "  redbutton.pack  side = left  greenbutton = button  frame  text = " brown "  fg = " brown "  greenbutton.pack  side = left  bluebutton = button  frame  text = " blue "  fg = " blue "  bluebutton.pack  side = left  blackbutton = button  bottomframe  text = " black "  fg = " black "  blackbutton.pack  side = bottom  root.mainloop   when the above code is executed  it produces the following result  the grid   method this geometry manager organizes widgets in a table-like structure in the parent widget syntax  widget.grid  grid_options  here is the list of possible options  column  the column to put widget in ; default 0  leftmost column   columnspan  how many columns widgetoccupies ; default 1 ipadx  ipady  how many pixels to pad widget  horizontally and vertically  inside widget 's borders padx  pady  how many pixels to pad widget  horizontally and vertically  outside v 's borders row  the row to put widget in ; default the first row that is still empty rowspan  how many rowswidget occupies ; default 1 sticky  what to do if the cell is larger than widget by default  with sticky = ' '  widget is centered in its cell sticky may be the string concatenation of zero or more of n  e  s  w  ne  nw  se  and sw  compass directions indicating the sides and corners of the cell to which widget sticks example  try the following example by moving cursor on different buttons  import tkinter root = tkinter.tk   for r in range  3   for c in range  4   tkinter.label  root  text = 'r % s/c % s ' %  r,c   borderwidth = 1  .grid  row = r,column = c  root.mainloop   this would produce the following result displaying 12 labels arrayed in a 3 x 4 grid  the place   method this geometry manager organizes widgets by placing them in a specific position in the parent widget syntax  widget.place  place_options  here is the list of possible options  anchor  the exact spot of widget other options refer to  may be n  e  s  w  ne  nw  se  or sw  compass directions indicating the corners and sides of widget ; default is nw  the upper left corner of widget  bordermode  inside  the default  to indicate that other options refer to the parent 's inside  ignoring the parent 's border  ; outside otherwise height  width  height and width in pixels relheight  relwidth  height and width as a float between 0.0 and 1.0  as a fraction of the height and width of the parent widget relx  rely  horizontal and vertical offset as a float between 0.0 and 1.0  as a fraction of the height and width of the parent widget x  y  horizontal and vertical offset in pixels example  try the following example by moving cursor on different buttons  from tkinter import * import tkmessagebox import tkinter top = tkinter.tk   def hellocallback    tkmessagebox.showinfo  " hello python "  " hello world "  b = tkinter.button  top  text = " hello "  command = hellocallback  b.pack   b.place  bordermode = outside  height = 100  width = 100  top.mainloop   when the above code is executed  it produces the following result  python further extensions a ny code that you write using any compiled language like c  c + + or java can be integrated or imported into another python script this code is considered as an " extension " a python extension module is nothing more than a normal c library on unix machines  these libraries usually end in .so  for shared object   on windows machines  you typically see .dll  for dynamically linked library   pre requisite  to start writing your extension  you are going to need the python header files on unix machines  this usually requires installing a developer-specific package such as python2.5-dev windows users get these headers as part of the package when they use the binary python installer additionally  it is assumed that you have good knowledge of c or c + + to write any python extension using c programming first look at a python extension  for your first look at a python extension module  you 'll be grouping your code into four parts  the header file python.h the c functions you want to expose as the interface from your module a table mapping the names of your functions as python developers will see them to c functions inside the extension module an initialization function the header file python.h start including python.h header file in your c source file  which will give you access to the internal python api used to hook your module into the interpreter be sure to include python.h before any other headers you might need you 'll follow the includes with the functions you want to call from python chapter 27 the c functions  the signatures of the c implementations of your functions will always take one of the following three forms  static pyobject * myfunction  pyobject * self  pyobject * args  ; static pyobject * myfunctionwithkeywords  pyobject * self  pyobject * args  pyobject * kw  ; static pyobject * myfunctionwithnoargs  pyobject * self  ; each one of the preceding declarations returns a python object there 's no such thing as a void function in python as there is in c if you do n't want your functions to return a value  return the c equivalent of python 's none value the python headers define a macro  py_return_none  that does this for us the names of your c functions can be whatever you like as they will never be seen outside of the extension module so they would be defined as static function your c functions usually are named by combining the python module and function names together  as shown here  static pyobject * module_func  pyobject * self  pyobject * args   / * do your stuff here * / py_return_none ;  this would be a python function called func inside of the module module you 'll be putting pointers to your c functions into the method table for the module that usually comes next in your source code the method mapping table  this method table is a simple array of pymethoddef structures that structure looks something like this  struct pymethoddef  char * ml_name ; pycfunction ml_meth ; int ml_flags ; char * ml_doc ;  ; here is the description of the members of this structure  ml_name  this is the name of the function as the python interpreter will present it when it is used in python programs ml_meth  this must be the address to a function that has any one of the signatures described in previous seection ml_flags  this tells the interpreter which of the three signatures ml_meth is using this flag will usually have a value of meth_varargs this flag can be bitwise or'ed with meth_keywords if you want to allow keyword arguments into your function this can also have a value of meth_noargs that indicates you do n't want to accept any arguments ml_doc  this is the docstring for the function  which could be null if you do n't feel like writing one this table needs to be terminated with a sentinel that consists of null and 0 values for the appropriate members example  for the above-defined function  we would have following method mapping table  static pymethoddef module_methods   =   " func "   pycfunction  module_func  meth_noargs  null    null  null  0  null   ; the initialization function  the last part of your extension module is the initialization function this function is called by the python interpreter when the module is loaded it 's required that the function be named initmodule  wheremodule is the name of the module the initialization function needs to be exported from the library you 'll be building the python headers define pymodinit_func to include the appropriate incantations for that to happen for the particular environment in which we 're compiling all you have to do is use it when defining the function your c initialization function generally has the following overall structure  pymodinit_func initmodule    py_initmodule3  func  module_methods  " docstring "  ;  here is the description of py_initmodule3 function  func  this is the function to be exported module_methods  this is the mapping table name defined above docstring  this is the comment you want to give in your extension putting this all together looks like the following  # include < python.h > static pyobject * module_func  pyobject * self  pyobject * args   / * do your stuff here * / py_return_none ;  static pymethoddef module_methods   =   " func "   pycfunction  module_func  meth_noargs  null    null  null  0  null   ; pymodinit_func initmodule    py_initmodule3  func  module_methods  " docstring "  ;  example  a simple example that makes use of all the above concepts  # include < python.h > static pyobject * helloworld  pyobject * self   return py_buildvalue  " s "  " hello  python extensions ! ! "  ;  static char helloworld_docs   = " helloworld    any message you want to put here ! ! \ n " ; static pymethoddef helloworld_funcs   =   " helloworld "   pycfunction  helloworld  meth_noargs  helloworld_docs    null   ; void inithelloworld  void   py_initmodule3  " helloworld "  helloworld_funcs  " extension module example ! "  ;  here the py_buildvalue function is used to build a python value save above code in hello.c file we would see how to compile and install this module to be called from python script building and installing extensions  the distutils package makes it very to distribute python modules  both pure python and extension modules  in a standard way modules are distributed in source form and built and installed via a setup script usually called setup.py as follows for the above module  you would have to prepare following setup.py script  from distutils.core import setup  extension setup  name = 'helloworld '  version = '1.0 '  \ ext_modules =  extension  'helloworld '   'hello.c '     now  use the following command  which would perform all needed compilation and linking steps  with the right compiler and linker commands and flags  and copies the resulting dynamic library into an appropriate directory  $ python setup.py install on unix-based systems  you 'll most likely need to run this command as root in order to have permissions to write to the site-packages directory this usually is n't a problem on windows import extensions  once you installed your extension  you would be able to import and call that extension in your python script as follows  # ! /usr/bin/python import helloworld print helloworld.helloworld   this would produce the following result  hello  python extensions ! ! passing function parameters  because you 'll most likely want to define functions that do accept arguments  you can use one of the other signatures for your c functions for example  following function  that accepts some number of parameters  would be defined like this  static pyobject * module_func  pyobject * self  pyobject * args   / * parse args and do something interesting here * / py_return_none ;  the method table containing an entry for the new function would look like this  static pymethoddef module_methods   =   " func "   pycfunction  module_func  meth_noargs  null    " func "  module_func  meth_varargs  null    null  null  0  null   ; you can use api pyarg_parsetuple function to extract the arguments from the one pyobject pointer passed into your c function the first argument to pyarg_parsetuple is the args argument this is the object you 'll be parsing the second argument is a format string describing the arguments as you expect them to appear each argument is represented by one or more characters in the format string as follows static pyobject * module_func  pyobject * self  pyobject * args   int i ; double d ; char * s ; if  ! pyarg_parsetuple  args  " ids "  &i  &d  &s    return null ;  / * do something interesting here * / py_return_none ;  compiling the new version of your module and importing it will enable you to invoke the new function with any number of arguments of any type  module.func  1  s = " three "  d = 2.0  module.func  i = 1  d = 2.0  s = " three "  module.func  s = " three "  d = 2.0  i = 1  you can probably come up with even more variations the pyarg_parsetuple function  here is the standard signature for pyarg_parsetuple function  int pyarg_parsetuple  pyobject * tuple,char * format  this function returns 0 for errors  and a value not equal to 0 for success tuple is the pyobject * that was the c function 's second argument here format is a c string that describes mandatory and optional arguments here is a list of format codes for pyarg_parsetuple function  code c type meaning c char a python string of length 1 becomes a c char d double a python float becomes a c double f float a python float becomes a c float i int a python int becomes a c int l long a python int becomes a c long l long long a python int becomes a c long long o pyobject * gets non-null borrowed reference to python argument s char * python string without embedded nulls to c char *  s # char * + int any python string to c address and length t # char * + int read-only single-segment buffer to c address and length u py_unicode * python unicode without embedded nulls to c u # py_unicode * + int any python unicode c address and length w # char * + int read/write single-segment buffer to c address and length z char * like s  also accepts none  sets c char * to null   z # char * + int like s #  also accepts none  sets c char * to null      as per  a python sequence is treated as one argument per item | the following arguments are optional  format end  followed by function name for error messages ; format end  followed by entire error message text returning values  py_buildvalue takes in a format string much like pyarg_parsetuple does instead of passing in the addresses of the values you 're building  you pass in the actual values here 's an example showing how to implement an add function  static pyobject * foo_add  pyobject * self  pyobject * args   int a ; int b ; if  ! pyarg_parsetuple  args  " ii "  &a  &b    return null ;  return py_buildvalue  " i "  a + b  ;  this is what it would look like if implemented in python  def add  a  b   return  a + b  you can return two values from your function as follows  this would be cauptured using a list in python static pyobject * foo_add_subtract  pyobject * self  pyobject * args   int a ; int b ; if  ! pyarg_parsetuple  args  " ii "  &a  &b    return null ;  return py_buildvalue  " ii "  a + b  a  b  ;  this is what it would look like if implemented in python  def add_subtract  a  b   return  a + b  a  b  the py_buildvalue function  here is the standard signature for py_buildvalue function  pyobject * py_buildvalue  char * format  here format is a c string that describes the python object to build the following arguments ofpy_buildvalue are c values from which the result is built the pyobject * result is a new reference following table lists the commonly used code strings  of which zero or more are joined into string format code c type meaning c char a c char becomes a python string of length 1 d double a c double becomes a python float f float a c float becomes a python float i int a c int becomes a python int l long a c long becomes a python int n pyobject * passes a python object and steals a reference o pyobject * passes a python object and increfs it as normal o& convert + void * arbitrary conversion s char * c 0-terminated char * to python string  or null to none s # char * + int c char * and length to python string  or null to none u py_unicode * c-wide  null-terminated string to python unicode  or null to none u # py_unicode * + int c-wide string and length to python unicode  or null to none w # char * + int read/write single-segment buffer to c address and length z char * like s  also accepts none  sets c char * to null   z # char * + int like s #  also accepts none  sets c char * to null      as per  builds python tuple from c values    as per  builds python list from c values    as per  builds python dictionary from c values  alternating keys and values code    builds dictionaries from an even number of c values  alternately keys and values for example  py_buildvalue  "  issi  " ,23  " zig "  " zag " ,42  returns a dictionary like python 's  23  'zig','zag '  42   python tools/utilities the standard library comes with a number of modules that can be used both as modules and as command-line utilities the dis module  the dis module is the python disassembler it converts byte codes to a format that is slightly more appropriate for human consumption you can run the disassembler from the command line it compiles the given script and prints the disassembled byte codes to the stdout you can also use dis as a module the dis function takes a class  method  function or code object as its single argument example  # ! /usr/bin/python import dis def sum    vara = 10 varb = 20 sum = vara + varb print " vara + varb = % d " % sum # call dis function for the function dis.dis  sum  this would produce the following result  6 0 load_const 1  10  3 store_fast 0  vara  7 6 load_const 2  20  9 store_fast 1  varb  9 12 load_fast 0  vara  15 load_fast 1  varb  18 binary_add 19 store_fast 2  sum  chapter 28 10 22 load_const 3  'vara + varb = % d '  25 load_fast 2  sum  28 binary_modulo 29 print_item 30 print_newline 31 load_const 0  none  34 return_value the pdb module the pdb module is the standard python debugger it is based on the bdb debugger framework you can run the debugger from the command line  type n  or next  to go to the next line and help to get a list of available commands   example  before you try to run pdb.py  set your path properly to python lib directory so let us try with above example sum.py  $ pdb.py sum.py > /test/sum.py  3  < module >    > import dis  pdb  n > /test/sum.py  5  < module >    > def sum     pdb  n > /test/sum.py  14  < module >    > dis.dis  sum   pdb  n 6 0 load_const 1  10  3 store_fast 0  vara  7 6 load_const 2  20  9 store_fast 1  varb  9 12 load_fast 0  vara  15 load_fast 1  varb  18 binary_add 19 store_fast 2  sum  10 22 load_const 3  'vara + varb = % d '  25 load_fast 2  sum  28 binary_modulo 29 print_item 30 print_newline 31 load_const 0  none  34 return_value --return > /test/sum.py  14  < module >    > none -v dis.dis  sum   pdb  n --return > < string >  1  < module >    > none  pdb  the profile module  the profile module is the standard python profiler you can run the profiler from the command line  example  let us try to profile the following program  # ! /usr/bin/python vara = 10 varb = 20 sum = vara + varb print " vara + varb = % d " % sum now  try running cprofile.py over this file sum.py as follows  $ cprofile.py sum.py vara + varb = 30 4 function calls in 0.000 cpu seconds ordered by  standard name ncalls tottime percall cumtime percall filename  lineno 1 0.000 0.000 0.000 0.000 < string >  1  < module >  1 0.000 0.000 0.000 0.000 sum.py  3  < module >  1 0.000 0.000 0.000 0.000  execfile  1 0.000 0.000 0.000 0.000  method   the tabnanny module the tabnanny module checks python source files for ambiguous indentation if a file mixes tabs and spaces in a way that throws off indentation  no matter what tab size you 're using  the nanny complains  example  let us try to profile the following program  # ! /usr/bin/python vara = 10 varb = 20 sum = vara + varb print " vara + varb = % d " % sum if you would try a correct file with tabnanny.py  then it wo n't complain as follows  $ tabnanny.py -v sum.py 'sum.py '  clean bill of health 