java is an object-oriented programming language developed by sun microsystems  a company best known for its high-end unix workstations modeled after c + +  the java language was designed to be small  simple  and portable across platforms and operating systems  both at the source and at the binary level  more about this later   java is often mentioned in the same breath as hotjava  a world wide web browser from sun like netscape or mosaic  see figure 1.1   what makes hotjava different from most other browsers is that  in addition to all its basic web features  it can also download and play applets on the reader s system applets appear in a web page much in the same way as images do  but unlike images  applets are dynamic and interactive applets can be used to create animations  figures  or areas that can respond to input from the reader  games  or other interactive effects on the same web pages among the text and graphics although hotjava was the first world wide web browser to be able to play java applets  java support is rapidly becoming available in other browsers netscape 2.0 provides support for java applets  and other browser developers have also announced support for java in forthcoming products new term 030-4s ch01.i 4 1 29 96  8 34 pm 5 sams.net learning center abcd 1 p2 v4sqc7 ty java in 21 days 030-4 sdv 12.22.95 ch01 lp # 4 to create an applet  you write it in the java language  compile it using a java compiler  and refer to that applet in your html web pages you put the resulting html and java files on a web site much in the same way that you make ordinary html and image files available then  when someone using the hotjava browser  or other java-aware browser  views your page with the embedded applet  that browser downloads the applet to the local system and executes it  and then the reader can view and interact with your applet in all its glory  readers using other browsers won t see anything   you ll learn more about how applets  browsers  and the world wide web work together further on in this book the important thing to understand about java is that you can do so much more with it besides create applets java was written as a full-fledged programming language in which you can accomplish the same sorts of tasks and solve the same sorts of problems that you can in other programming languages  such as c or c + +  hotjava itself  including all the networking  display  and user interface elements  is written in java figure 1.1 the hotjava browser 030-4s ch01.i 5 1 29 96  8 35 pm 6 an introduction to java programming m t w r f s s day 1 p2 v4sqc7 ty java in 21 days 030-4 sdv 12.22.95 ch01 lp # 4 java s past  present  and future the java language was developed at sun microsystems in 1991 as part of a research project to develop software for consumer electronics devices television sets  vcrs  toasters  and the other sorts of machines you can buy at any department store java s goals at that time were to be small  fast  efficient  and easily portable to a wide range of hardware devices it is those same goals that made java an ideal language for distributing executable programs via the world wide web  and also a general-purpose programming language for developing programs that are easily usable and portable across different platforms the java language was used in several projects within sun  but did not get very much commercial attention until it was paired with hotjava hotjava was written in 1994 in a matter of months  both as a vehicle for downloading and running applets and also as an example of the sort of complex application that can be written in java at the time this book is being written  sun has released the beta version of the java developer s kit  jdk   which includes tools for developing java applets and applications on sun systems running solaris 2.3 or higher for windows nt and for windows 95 by the time you read this  support for java development may have appeared on other platforms  either from sun or from third-party companies note that because the jdk is currently in beta  it is still subject to change between now and when it is officially released applets and applications you write using the jdk and using the examples in this book may require some changes to work with future versions of the jdk however  because the java language has been around for several years and has been used for several projects  the language itself is quite stable and robust and most likely will not change excessively keep this beta status in mind as you read through this book and as you develop your own java programs support for playing java programs is a little more confusing at the moment sun s hotjava is not currently included with the beta jdk ; the only available version of hotjava is an older alpha version  and  tragically  applets written for the alpha version of java do not work with the beta jdk  and vice versa by the time you read this  sun may have released a newer version of hotjava which will enable you to view applets the jdk does include an application called appletviewer that allows you to test your java applets as you write them if an applet works in the appletviewer  it should work with any java-capable browser you ll learn more about applet viewer later today what s in store for the future in addition to the final java release from sun  other companies have announced support for java in their own world wide web browsers netscape communications corporation has already incorporated java capabilities into the 2.0 version of their very popular netscape navigator web browser pages with embedded java applets can be viewed and played with netscape with support for java available in as popular a browser as netscape  030-4s ch01.i 6 1 29 96  8 35 pm 7 sams.net learning center abcd 1 p2 v4sqc7 ty java in 21 days 030-4 sdv 12.22.95 ch01 lp # 4 tools to help develop java applications  debuggers  development environments  and so on  most likely will be rapidly available as well why learn java at the moment  probably the most compelling reason to learn java and probably the reason you bought this book is that hotjava applets are written in java even if that were not the case  java as a language has significant advantages over other languages and other programming environments that make it suitable for just about any programming task this section describes some of those advantages java is platform-independent platform independence is one of the most significant advantages that java has over other programming languages  particularly for systems that need to work on many different platforms java is platform-independent at both the source and the binary level platform-independence is a program s capability of moving easily from one computer system to another at the source level  java s primitive data types have consistent sizes across all development platforms java s foundation class libraries make it easy to write code that can be moved from platform to platform without the need to rewrite it to work with that platform platform-independence doesn t stop at the source level  however java binary files are also platform-independent and can run on multiple problems without the need to recompile the source how does this work java binary files are actually in a form called bytecodes bytecodes are a set of instructions that looks a lot like some machine codes  but that is not specific to any one processor normally  when you compile a program written in c or in most other languages  the compiler translates your program into machine codes or processor instructions those instructions are specific to the processor your computer is running so  for example  if you compile your code on a pentium system  the resulting program will run only on other pentium systems if you want to use the same program on another system  you have to go back to your original source  get a compiler for that system  and recompile your code figure 1.2 shows the result of this system multiple executable programs for multiple systems things are different when you write code in java the java development environment has two parts a java compiler and a java interpreter the java compiler takes your java program and instead of generating machine codes from your source files  it generates bytecodes new term new term 030-4s ch01.i 7 1 29 96  8 35 pm 8 an introduction to java programming m t w r f s s day 1 p2 v4sqc7 ty java in 21 days 030-4 sdv 12.22.95 ch01 lp # 4 to run a java program  you run a program called a bytecode interpreter  which in turn executes your java program  see figure 1.3   you can either run the interpreter by itself  or for applets there is a bytecode interpreter built into hotjava and other java-capable browsers that runs the applet for you figure 1.2 traditional compiled programs your code compiler  pentium  binary file  pentium  binary file  powerpc  binary file  sparc  compiler  powerpc  compiler  sparc  figure 1.3 java programs java code java compiler  pentium  java bytecode  platform independent  java compiler  powerpc  java compiler  sparc  java interpreter  pentium  java interpreter  powerpc  java interpreter  sparc  window window window 030-4s ch01.i 8 1 29 96  8 35 pm 9 sams.net learning center abcd 1 p2 v4sqc7 ty java in 21 days 030-4 sdv 12.22.95 ch01 lp # 4 why go through all the trouble of adding this extra layer of the bytecode interpreter having your java programs in bytecode form means that instead of being specific to any one system  your programs can be run on any platform and any operating or window system as long as the java interpreter is available this capability of a single binary file to be executable across platforms is crucial to what enables applets to work  because the world wide web itself is also platformindependent just as html files can be read on any platform  so applets can be executed on any platform that is a java-capable browser the disadvantage of using bytecodes is in execution speed because system-specific programs run directly on the hardware for which they are compiled  they run significantly faster than java bytecodes  which must be processed by the interpreter for many java programs  the speed may not be an issue if you write programs that require more execution speed than the java interpreter can provide  you have several solutions available to you  including being able to link native code into your java program or using tools to convert your java bytecodes into native code note that by using any of these solutions  you lose the portability that java bytecodes provide you ll learn about each of these mechanisms on day 20 java is object-oriented to some  object-oriented programming  oop  technique is merely a way of organizing programs  and it can be accomplished using any language working with a real object-oriented language and programming environment  however  enables you to take full advantage of objectoriented methodology and its capabilities of creating flexible  modular programs and reusing code many of java s object-oriented concepts are inherited from c + +  the language on which it is based  but it borrows many concepts from other object-oriented languages as well like most object-oriented programming languages  java includes a set of class libraries that provide basic data types  system input and output capabilities  and other utility functions these basic classes are part of the java development kit  which also has classes to support networking  common internet protocols  and user interface toolkit functions because these class libraries are written in java  they are portable across platforms as all java applications are you ll learn more about object-oriented programming and java tomorrow java is easy to learn in addition to its portability and object-orientation  one of java s initial design goals was to be small and simple  and therefore easier to write  easier to compile  easier to debug  and  best of all  easy to learn keeping the language small also makes it more robust because there are fewer chances for programmers to make difficult-to-find mistakes despite its size and simple design  however  java still has a great deal of power and flexibility 030-4s ch01.i 9 1 29 96  8 35 pm 10 an introduction to java programming m t w r f s s day 1 p2 v4sqc7 ty java in 21 days 030-4 sdv 12.22.95 ch01 lp # 4 java is modeled after c and c + +  and much of the syntax and object-oriented structure is borrowed from the latter if you are familiar with c + +  learning java will be particularly easy for you  because you have most of the foundation already although java looks similar to c and c + +  most of the more complex parts of those languages have been excluded from java  making the language simpler without sacrificing much of its power there are no pointers in java  nor is there pointer arithmetic strings and arrays are real objects in java memory management is automatic to an experienced programmer  these omissions may be difficult to get used to  but to beginners or programmers who have worked in other languages  they make the java language far easier to learn getting started with programming in java enough background ! let s finish off this day by creating two real java programs a stand-alone java application and an applet that you can view in either in the appletviewer  part of the jdk  or in a java-capable browser although both these programs are extremely simple  they will give you an idea of what a java program looks like and how to compile and run it getting the software in order to write java programs  you will  of course  need a java development environment at the time this book is being written  sun s java development kit provides everything you need to start writing java programs the jdk is available for sun sparc systems running solaris 2.2 or higher and for windows nt and windows 95 you can get the jdk from several places the cd-rom that came with this book contains the full jdk distribution see the cd information for installation instructions the jdk can be downloaded from sun s java ftp site at ftp java.sun.com pub or from a mirror site  ftp www.blackdown.org pub java pub is one   note the java development kit is currently in beta release by the time you read this  the jdk may be available for other platforms  or other organizations may be selling java development tools as well although netscape and other java-aware browsers provide an environment for playing java applets  they do not provide a mechanism for developing java applications for that  you need separate tools merely having a browser is not enough 030-4s ch01.i 10 1 29 96  8 35 pm 11 sams.net learning center abcd 1 p2 v4sqc7 ty java in 21 days 030-4 sdv 12.22.95 ch01 lp # 4 applets and applications java applications fall into two main groups applets and applications applets  as you have learned  are java programs that are downloaded over the world wide web and executed by a web browser on the reader s machine applets depend on a java-capable browser in order to run  although they can also be viewed using a tool called the appletviewer  which you ll learn about later today   java applications are more general programs written in the java language java applications don t require a browser to run  and in fact  java can be used to create most other kinds of applications that you would normally use a more conventional programming language to create hotjava itself is a java application a single java program can be an applet or an application or both  depending on how you write that program and the capabilities that program uses throughout this first week  you ll be writing mostly hotjava applications ; then you ll apply what you ve learned to write applets in week 2 if you re eager to get started with applets  be patient everything that you learn while you re creating simple java applications will apply to creating applets  and it s easier to start with the basics before moving onto the hard stuff you ll be creating plenty of applets in week 2 creating a java application let s start by creating a simple java application the classic hello world example that all language books use to begin as with all programming languages  your java source files are created in a plain text editor  or in an editor that can save files in plain ascii without any formatting characters on unix  emacs  ped  or vi will work ; on windows  notepad or dos edit are both text editors fire up your editor of choice  and enter the java program shown in listing 1.1 type this program  as shown  in your text editor be careful that all the parentheses  braces  and quotes are there listing 1.1 your first java application 1 class helloworld  2 public static void main  string args     3 system.out.println  hello world !  ; 4  5  type 030-4s ch01.i 11 1 29 96  8 35 pm 12 an introduction to java programming m t w r f s s day 1 p2 v4sqc7 ty java in 21 days 030-4 sdv 12.22.95 ch01 lp # 4 ! ! warning the numbers before each line are part of the listing and not part of the program ; they re there so i can refer to specific line numbers when i explain what s going on in the program do not include them in your own file this program has two main parts all the program is enclosed in a class definition here  a class called helloworld the body of the program  here  just the one line  is contained in a routine called main    in java applications  as in a c or c + + program  main   is the first routine that is run when the program is executed you ll learn more about both these parts of a java application as the book progresses once you finish typing the program  save the file conventionally  java source files are named the same name as the class they define  with an extension of .java this file should therefore be called helloworld.java now  let s compile the source file using the java compiler in sun s jdk  the java compiler is called javac to compile your java program  make sure the javac program is in your execution path and type javac followed by the name of your source file javac helloworld.java note in these examples  and in all the examples throughout this book  we ll be using sun s java compiler  part of the jdk if you have a third-party development environment  check with the documentation for that program to see how to compile your java programs the compiler should compile the file without any errors if you get errors  go back and make sure that you ve typed the program exactly as it appears in listing 1.1 when the program compiles without errors  you end up with a file called helloworld.class  in the same directory as your source file this is your java bytecode file you can then run that bytecode file using the java interpreter in the jdk  the java interpreter is called simply java make sure the java program is in your path and type java followed by the name of the file without the .class extension java helloworld analysis 030-4s ch01.i 12 1 29 96  8 35 pm 13 sams.net learning center abcd 1 p2 v4sqc7 ty java in 21 days 030-4 sdv 12.22.95 ch01 lp # 4 if your program was typed and compiled correctly  you should get the string hello world ! printed to your screen as a response note remember  the java compiler and the java interpreter are different things you use the java compiler  javac  for your java source files to create .class files  and you use the java interpreter  java  to actually run your class files creating a java applet creating applets is different from creating a simple application  because java applets run and are displayed inside a web page with other page elements and as such have special rules for how they behave because of these special rules for applets in many cases  particularly the simple ones   creating an applet may be more complex than creating an application for example  to do a simple hello world applet  instead of merely being able to print a message  you have to create an applet to make space for your message and then use graphics operations to paint the message to the screen note actually  if you run the hello world application as an applet  the hello world message prints to a special window or to a log file  depending on how the browser has screen messages set up it will not appear on the screen unless you write your applet to put it there in the next example  you create that simple hello world applet  place it inside a web page  and view the result first  you set up an environment so that your java-capable browser can find your html files and your applets much of the time  you ll keep your html files and your applet code in the same directory although this isn t required  it makes it easier to keep track of each element in this example  you use a directory called html that contains all the files you ll need mkdir html now  open up that text editor and enter listing 1.2 030-4s ch01.i 13 1 29 96  8 36 pm 14 an introduction to java programming m t w r f s s day 1 p2 v4sqc7 ty java in 21 days 030-4 sdv 12.22.95 ch01 lp # 4 listing 1.2 the hello world applet 1 import java.awt.graphics ; 2 3 class helloworldapplet extends java.applet.applet  4 5 public void paint  graphics g   6 g.drawstring  hello world !  5  25  ; 7  8  save that file inside your html directory just like with java applications  give your file a name that has the same name as the class in this case  the filename would be helloworldapplet.java features to note about applets there are a couple i d like to point out the import line at the top of the file is somewhat analogous to an # include statement in c ; it enables this applet to interact with the jdk classes for creating applets and for drawing graphics on the screen the paint   method displays the content of the applet onto the screen here  the string hello world gets drawn applets use several standard methods to take the place of main    which include init   to initialize the applet  start   to start it running  and paint   to display it to the screen you ll learn about all of these in week 2 now  compile the applet just as you did the application  using javac  the java compiler javac helloworldapplet.java again  just as for applications  you should now have a file called helloworldapplet.class in your html directory to include an applet in a web page  you refer to that applet in the html code for that web page here  you create a very simple html file in the html directory  see listing 1.3   listing 1.3 the html with the applet in it 1 2 3 4 5 my java applet says 6 for this html example  your java class file is in the same directory as this html file save the file to helloagainapplet.html and fire up your java-aware browser or the java applet viewer figure 2.7 shows the result you should be getting  the hello again string is red   