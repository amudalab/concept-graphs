structures and algorithms::structures and algorithms
naveen garg department::naveen garg department
department of computer::department of computer
science and engineering::science and engineering
engineering indian institute::engineering indian institute
institute of technology::institute of technology
queues and linked::queues and linked
lecture we looked::lecture we looked
looked at stacks::looked at stacks
list and double::list and double
double ended queues::double ended queues
stack the stack::stack the stack
last-in first-out principle::last-in first-out principle
removed first queue::removed first queue
principle whoever joins::principle whoever joins
joins the queue::joins the queue
queue for instance::queue for instance
element is inserted::element is inserted
remove an element::remove an element
element from queue::element from queue
insert an element::insert an element
front is removed::front is removed
removed the queue::removed the queue
abstract data type::abstract data type
queue the methods::queue the methods
operations the method::operations the method
create a queue::create a queue
queue and enqueue::queue and enqueue
method to add::method to add
add an element::add an element
queue and dequeue::queue and dequeue
dequeue a queue::dequeue a queue
queue the front::queue the front
differ from dequeue::differ from dequeue
remove the front::remove the front
implement the queue::implement the queue
queue and isempty::queue and isempty
queue is empty::queue is empty
define similar axioms::define similar axioms
axioms for queues::axioms for queues
element or enqueue::element or enqueue
enqueue an element::enqueue an element
suppose i create::suppose i create
dequeue an element::dequeue an element
enqueued an element::enqueued an element
means i added::means i added
added an element::added an element
added another element::added another element
front of queue::front of queue
notion of front::notion of front
removed an element::removed an element
element the element::element the element
queue was empty::queue was empty
result is true::result is true
first i added::first i added
cases the queue::cases the queue
procedure if queue::procedure if queue
thing in enqueue::thing in enqueue
dequeued which means::dequeued which means
means i removed::means i removed
removed the front::removed the front
element of queue::element of queue
queue the queue::queue the queue
implement a queue::implement a queue
fashion to implement::fashion to implement
suppose someone tells::suppose someone tells
allocate an array::allocate an array
array of size::array of size
element the blue::element the blue
reach the blue::reach the blue
blue colored part::blue colored part
element i inserted::element i inserted
delete the elements::delete the elements
effect the elements::effect the elements
element has moved::element has moved
moved to right::moved to right
right this implies::right this implies
deleted f-1 elements::deleted f-1 elements
inserting the elements::inserting the elements
elements in queue::elements in queue
queue i insert::queue i insert
insert another element::insert another element
insert anymore elements::insert anymore elements
reached the end::reached the end
elements your queue::elements your queue
started the front::started the front
front was referring::front was referring
point i reach::point i reach
reach a situation::reach a situation
empty or full::empty or full
removing the elements::removing the elements
adding the elements::adding the elements
move one step::move one step
empty and full::empty and full
n-1 one elements::n-1 one elements
code for enqueue::code for enqueue
number of elements::number of elements
queue is full::queue is full
return the queue::return the queue
queue full exception::queue full exception
case then add::case then add
add the rear::add the rear
put the element::put the element
insert and increment::insert and increment
modn is required::modn is required
enclosed in brackets::enclosed in brackets
return r-f r-f::return r-f r-f
r-f is negative::r-f is negative
check this out::check this out
means the queue::means the queue
method for front::method for front
raises an exception::raises an exception
return a front::return a front
removing the front::removing the front
case of dequeue::case of dequeue
increment the front::increment the front
index and remove::index and remove
element by setting::element by setting
array to implement::array to implement
implement our queue::implement our queue
queue the disadvantage::queue the disadvantage
array is fixed::array is fixed
double the size::double the size
essentially a linked::essentially a linked
list the first::list the first
node is referred::node is referred
tail of list::tail of list
list to implement::list to implement
queue the head::queue the head
2nd second element::2nd second element
remove the torcezo::remove the torcezo
element the linked::element the linked
element from linked::element from linked
remove that element::remove that element
accessing that pointer::accessing that pointer
remove the rome::remove the rome
queue the removal::queue the removal
remove the element::remove the element
implement our methods::implement our methods
dequeue which means::dequeue which means
left head part::left head part
point the head::point the head
making the head::making the head
delete the head::delete the head
node and make::node and make
make the head::make the head
node thus inserting::node thus inserting
easy the head::easy the head
move the head::move the head
queue the pointer::queue the pointer
modified to point::modified to point
newly added element::newly added element
difficult to remove::difficult to remove
element in constant::element in constant
remove the tail::remove the tail
access the previous::access the previous
kind of list::kind of list
beginning and move::beginning and move
problem in removing::problem in removing
node the problem::node the problem
last before node::last before node
make the tail::make the tail
head and add::head and add
means the front::means the front
queue data type::queue data type
introduce another data::introduce another data
type called double-ended::type called double-ended
insert and delete::insert and delete
queue and remove::queue and remove
operations of insert::operations of insert
singly linked list::singly linked list
idea to implement::idea to implement
doubly linked list::doubly linked list
implement double-ended queues::implement double-ended queues
list has nodes::list has nodes
two sentinel nodes::two sentinel nodes
nodes each node::nodes each node
operations of double-ended::operations of double-ended
queue in constant::queue in constant
delete the node::delete the node
end the head::end the head
follow the pointer::follow the pointer
element to delete::element to delete
delete that node::delete that node
port and set::port and set
pointer to trailer::pointer to trailer
trailer and send::trailer and send
send the previous::send the previous
pointer of trailer::pointer of trailer
header and trailer::header and trailer
list these nodes::list these nodes
nodes or dummy::nodes or dummy
mark the start::mark the start
delete san francisco::delete san francisco
make the sentinel::make the sentinel
sentinel node point::sentinel node point
make that previous::make that previous
node to point::node to point
node is deleted::node is deleted
done in constant::done in constant
front or delete::front or delete
meant by constant::meant by constant
independent of number::independent of number
fairly generic data::fairly generic data
generic data type::generic data type
implement other data::implement other data
types also suppose::types also suppose
implementation of double-ended::implementation of double-ended
make a stack::make a stack
implementation to implement::implementation to implement
implement a stack::implement a stack
stack for instance::stack for instance
stack would correspond::stack would correspond
queue.thus the method::queue.thus the method
return the last::return the last
queue the method::queue the method
correspond to inserting::correspond to inserting
double ended queue::double ended queue
correspond to deleting::correspond to deleting
make the last::make the last
case the last::case the last
front and insert::front and insert
corresponds to isempty::corresponds to isempty
queue to implement::queue to implement
corresponds to last::corresponds to last
removes the first::removes the first
methods to implement::methods to implement
stack or queue::stack or queue
pattern thus adapter::pattern thus adapter
adapter patterns implements::adapter patterns implements
implements a class::implements a class
class using methods::class using methods
class in general::class in general
adapter classes specialize::adapter classes specialize
classes specialize general::classes specialize general
specialize general classes::specialize general classes
applications one application::applications one application
implement by changing::implement by changing
changing some methods::changing some methods
queue another application::queue another application
stack we define::stack we define
define an interface::define an interface
interface called stack::interface called stack
stack and implemented::stack and implemented
array that implementation::array that implementation
contents of array::contents of array
adapt arraystack implementation::adapt arraystack implementation
implementation called integerarraystack::implementation called integerarraystack
cast the type::cast the type
stack or removing::stack or removing
circularly linked list::circularly linked list
element is pointing::element is pointing
head and tail::head and tail
implement both queue::implement both queue
structure to implement::structure to implement
make the first::make the first
rear to add::rear to add
make the pointer::make the pointer
make the element::make the element
node and create::node and create
node and copy::node and copy
copy the element::copy the element
node and copying::node and copying
removing an element::removing an element
corresponds to removing::corresponds to removing
removing the first::removing the first
remove the first::remove the first
problem in doing::problem in doing
copy the contents::copy the contents
rome i copy::rome i copy
seattle to rome::seattle to rome
rome thus rome::rome thus rome
rome has seattle::rome has seattle
remove the 2nd::remove the 2nd
2nd node copying::2nd node copying
copying just means::copying just means
changing the reference::changing the reference
discusses about queues::discusses about queues
queues and double-ended::queues and double-ended
talk about vectors::talk about vectors
list and general::list and general
structures like arrays::structures like arrays
arrays and linked::arrays and linked
lists to implement::lists to implement
implement these data::implement these data
vector data type::vector data type
data type vector::data type vector
type vector data::type vector data
elements that supports::elements that supports
notion of rank::notion of rank
sequence of elements::sequence of elements
methods like elematrank::methods like elematrank
elematrank r rank::elematrank r rank
rank here corresponds::rank here corresponds
integers first element::integers first element
element at rank::element at rank
give the element::give the element
replace the element::replace the element
delete the element::delete the element
suppose the departmental::suppose the departmental
department the department::department the department
implement the data::implement the data
type using arrays::type using arrays
element with rank::element with rank
put an element::put an element
n-1 one step::n-1 one step
n-2 is moved::n-2 is moved
moved one step::moved one step
right finally element::right finally element
put at position::put at position
size is increased::size is increased
sores the size::sores the size
shifting the entire::shifting the entire
elements one step::elements one step
left all elements::left all elements
sitting at location::sitting at location
worst case order::worst case order
left this implementation::left this implementation
implementation is expensive::implementation is expensive
point of view::point of view
two operations insert::two operations insert
rank or remove::rank or remove
worst case spent::worst case spent
case spent order::case spent order
operations are faster::operations are faster
array and retrieve::array and retrieve
retrieve the elements::retrieve the elements
sitting there replaceatrank::sitting there replaceatrank
location and replace::location and replace
replace that element::replace that element
element with element::element with element
methods all methods::methods all methods
methods except inserted::methods except inserted
inserted at rank::inserted at rank
rank and remove::rank and remove
remove at rank::remove at rank
rank take constant::rank take constant
implementing this list::implementing this list
implement a vector::implement a vector
operation of inserting::operation of inserting
node and put::node and put
create the node::create the node
make a pointer::make a pointer
make the previous::make the previous
previous pointer point::previous pointer point
insert takes order::insert takes order
order n times::order n times
insert at rank::insert at rank
insert the element::insert the element
code for inserting::code for inserting
assuming the existence::assuming the existence
rank for instance::rank for instance
insert the node::insert the node
node at rank::node at rank
call the procedure::call the procedure
procedure with rank::procedure with rank
previous to rank::previous to rank
prev i create::prev i create
set its previous::set its previous
prev = next.getprev::prev = next.getprev
earlier at rank::earlier at rank
manner i create::manner i create
check the previous::check the previous
doing here next.setprev::doing here next.setprev
process of deletion::process of deletion
out the node::out the node
node and update::node and update
pointer will point::pointer will point
node and previous::node and previous
code for doing::code for doing
assuming the procedure::assuming the procedure
implement this procedure::implement this procedure
incrementing my counter::incrementing my counter
reach that rank::reach that rank
list has hundred::list has hundred
point to start::point to start
vector abstract data::vector abstract data
type is concerned::type is concerned
rank or insert::rank or insert
move the elements::move the elements
insert or delete::insert or delete
delete linked lists::delete linked lists
supporting node based::supporting node based
node based operations::node based operations
delete this node::delete this node
node in constant::node in constant
node and insert::node and insert
delete the inserted::delete the inserted
insert a node::insert a node
constant time operations::constant time operations
mentioned below removeatnode::mentioned below removeatnode
give you access::give you access
implemented my list::implemented my list
pointers and stuff::pointers and stuff
node based operation::node based operation
operation without knowing::operation without knowing
knowing the actual::knowing the actual
thing was done::thing was done
notion of positions::notion of positions
captures the place::captures the place
element is stored::element is stored
data type position::data type position
call this method::call this method
making much sense::making much sense
position as reference::position as reference
access the element::access the element
pointer to update::pointer to update
node is implemented::node is implemented
type which hides::type which hides
notion of position::notion of position
order of positions::order of positions
position is referring::position is referring
similarly 1st position::similarly 1st position
define a list::define a list
list abstract datatype::list abstract datatype
methods like size::methods like size
method which asks::method which asks
methods like first::methods like first
first will give::first will give
last would give::last would give
methods like swapelements::methods like swapelements
swaps the contents::swaps the contents
positions it swaps::positions it swaps
element at position::element at position
methods in constant::methods in constant
linked list data::linked list data
list data structure::list data structure
abstract datatype implementation::abstract datatype implementation
datatype this datatype::datatype this datatype
double linked list::double linked list
sequence abstract data::sequence abstract data
type we talked::type we talked
list data type::list data type
combines the vector::combines the vector
list abstract data::list abstract data
listed for vector::listed for vector
vector and list::vector and list
two additional methods::two additional methods
methods which helps::methods which helps
identify the rank::identify the rank
implemented p corresponds::implemented p corresponds
determine the position::determine the position
suppose you gave::suppose you gave
gave me rank::gave me rank
follow 1st reference::follow 1st reference
create new position::create new position
element would sit::element would sit
change the ranks::change the ranks
ranks and update::ranks and update
update the position::update the position
position again inserting::position again inserting
deleting an element::deleting an element
wanted to delete::wanted to delete
delete an element::delete an element
comparison of sequence::comparison of sequence
implement a sequence::implement a sequence
case of running::case of running
out the element::out the element
update the pointers::update the pointers
out the rank::out the rank
list to figure::list to figure
rank any rank::rank any rank
rank based operation::rank based operation
find the rank::find the rank
out the position::out the position
learnt about queues::learnt about queues
essentially a concretization::essentially a concretization
looked at sequence::looked at sequence
sequence data types::sequence data types
data structures::data structures
naveen garg::naveen garg
garg department::garg department
computer science::computer science
engineering indian::engineering indian
indian institute::indian institute
delhi lecture::delhi lecture
linked lists::linked lists
last lecture::last lecture
data type::data type
implement stacks::implement stacks
array today::array today
linked list::linked list
first part::first part
ended queues::ended queues
last-in first-out::last-in first-out
first-out principle::first-out principle
removed first::removed first
first queue::first queue
first-in-first-out principle::first-in-first-out principle
first element::first element
rear element::rear element
front end::front end
abstract data::abstract data
standard operations::standard operations
front element::front element
support methods::support methods
isempty size::isempty size
return false::return false
defined axioms::defined axioms
similar axioms::similar axioms
empty queue::empty queue
written front::written front
initially empty::initially empty
statement dequeue::statement dequeue
remaining queue::remaining queue
circular fashion::circular fashion
blue part::blue part
queue reach::queue reach
colored part::colored part
0th location::0th location
3rd element::3rd element
queue drift::queue drift
completely accurate::completely accurate
anymore elements::anymore elements
start inserting::start inserting
right side::right side
left side::left side
front refers::front refers
rear refers::rear refers
empty location::empty location
empty suppose::empty suppose
elements starting::elements starting
element close::element close
pseudo code::pseudo code
full exception::full exception
rear location::rear location
circular indices::circular indices
modn point::modn point
method size::method size
return r-f::return r-f
r-f r-f::r-f r-f
r-f tells::r-f tells
queue r-f::queue r-f
correct thing::correct thing
positive quantity::positive quantity
right number::right number
elements check::elements check
confused isempty::confused isempty
algorithm isempty::algorithm isempty
dequeue method::dequeue method
front index::front index
maximum size::maximum size
last class::last class
size increases::size increases
first node::first node
last node::last node
head node::head node
tail node::tail node
torcezo element::torcezo element
rome element::rome element
last place::last place
methods suppose::methods suppose
left head::left head
head part::head part
tail part::tail part
head point::head point
head element::head element
head easily::head easily
first diagram::first diagram
last element::last element
rear end::rear end
added element::added element
previous node::previous node
tail point::tail point
entire list::entire list
expensive operation::expensive operation
queue data::queue data
double-ended queue::double-ended queue
delete operations::delete operations
last operations::last operations
good idea::good idea
good solution::good solution
double-ended queues::double-ended queues
previous pointer::previous pointer
sentinel nodes::sentinel nodes
trailer nodes::trailer nodes
previous port::previous port
dummy nodes::dummy nodes
data inside::data inside
san francisco::san francisco
sentinel node::sentinel node
node point::node point
generic data::generic data
data types::data types
method top::method top
top element::top element
double-ended queue.thus::double-ended queue.thus
method push::method push
method pop::method pop
ended queue::ended queue
insert front::insert front
remove front::remove front
queue front::queue front
dequeue implementation::dequeue implementation
adapter pattern::adapter pattern
adapter patterns::adapter patterns
patterns implements::patterns implements
adapter classes::adapter classes
classes specialize::classes specialize
general classes::general classes
array stack::array stack
arbitrary objects::arbitrary objects
adapt arraystack::adapt arraystack
arraystack implementation::arraystack implementation
integer objects::integer objects
pointers head::pointers head
circular list::circular list
data structure::data structure
pointer point::pointer point
big pointer::big pointer
end make::end make
element rome::element rome
node make::node make
straight forward::straight forward
queue removing::queue removing
element corresponds::element corresponds
2nd node::2nd node
node copying::node copying
general sequences::general sequences
vector data::vector data
type vector::type vector
indicative methods::indicative methods
4th element::4th element
departmental rank::departmental rank
department rank::department rank
step right::step right
entire elements::entire elements
worst case::worst case
case order::case order
operations insert::operations insert
case spent::case spent
spent order::spent order
elements sitting::elements sitting
1st node::1st node
insert newyork::insert newyork
3rd diagram::3rd diagram
takes order::takes order
java code::java code
procedure nodeatrank::procedure nodeatrank
defining shortly::defining shortly
previous field::previous field
node dlnode::node dlnode
dlnode prev::dlnode prev
dlnode node::dlnode node
procedure dlnode::procedure dlnode
original list::original list
2nd diagram::2nd diagram
previous pointers::previous pointers
final node::final node
small improvement::small improvement
hundred elements::hundred elements
vector abstract::vector abstract
require order::require order
element correspond::element correspond
delete linked::delete linked
supporting node::supporting node
node based::node based
based operations::based operations
inserted node::inserted node
operations provided::operations provided
give access::give access
based operation::based operation
actual implementation::actual implementation
positions position::positions position
method element::method element
type position::type position
previous fields::previous fields
relative order::relative order
positions jus::positions jus
3rd node::3rd node
2nd position::2nd position
3rd position::3rd position
list abstract::list abstract
abstract datatype::abstract datatype
generic methods::generic methods
query method::query method
first position::first position
last position::last position
excessive methods::excessive methods
update methods::update methods
list data::list data
datatype implementation::datatype implementation
sequence abstract::sequence abstract
multiple inheritance::multiple inheritance
additional methods::additional methods
method atrank::method atrank
array refers::array refers
rank suppose::rank suppose
1st reference::1st reference
element stored::element stored
cross reference::cross reference
sequence suppose::sequence suppose
sequence operations::sequence operations
array implementation::array implementation
rank based::rank based
sequence data::sequence data
data::data
structures::structures
algorithms::algorithms
naveen::naveen
garg::garg
department::department
computer::computer
science::science
engineering::engineering
indian::indian
institute::institute
technology::technology
delhi::delhi
lecture::lecture
queues::queues
linked::linked
lists::lists
last::last
looked::looked
stacks::stacks
type::type
implement::implement
array::array
today::today
list::list
part::part
class::class
sequences::sequences
first::first
double::double
ended::ended
queue::queue
differ::differ
stack::stack
last-in::last-in
first-out::first-out
principle::principle
element::element
inserted::inserted
removed::removed
hand::hand
first-in-first-out::first-in-first-out
joins::joins
earlier::earlier
processed::processed
familiar::familiar
instance::instance
notion::notion
rear::rear
remove::remove
sitting::sitting
front::front
end::end
insert::insert
abstract::abstract
define::define
methods::methods
standard::standard
operations::operations
method::method
create::create
enqueue::enqueue
add::add
dequeue::dequeue
support::support
size::size
isempty::isempty
elements::elements
empty::empty
return::return
true::true
false::false
defined::defined
axioms::axioms
similar::similar
suppose::suppose
obtained::obtained
similarly::similarly
enqueued::enqueued
means::means
added::added
call::call
written::written
thing::thing
operation::operation
result::result
mentioned::mentioned
procedures::procedures
q,w::q,w
check::check
out::out
assume::assume
initially::initially
statement::statement
remaining::remaining
left::left
cases::cases
procedure::procedure
dequeued::dequeued
original::original
started::started
circular::circular
fashion::fashion
tells::tells
larger::larger
allocate::allocate
variables::variables
index::index
referring::referring
blue::blue
occupied::occupied
reach::reach
colored::colored
0th::0th
location::location
1st::1st
3rd::3rd
2nd::2nd
delete::delete
effect::effect
drift::drift
right::right
moved::moved
implies::implies
deleted::deleted
f-1::f-1
completely::completely
accurate::accurate
inserting::inserting
stage::stage
anymore::anymore
reached::reached
space::space
wrap::wrap
start::start
point::point
starting::starting
side::side
minus::minus
refers::refers
situation::situation
full::full
happen::happen
removing::removing
located::located
increment::increment
adding::adding
move::move
step::step
close::close
equals::equals
ambiguity::ambiguity
resolve::resolve
manner::manner
problem::problem
ensure::ensure
n-1::n-1
declare::declare
code::code
pseudo::pseudo
number::number
stop::stop
exception::exception
case::case
put::put
modn::modn
required::required
indices::indices
pseudo-code::pseudo-code
enclosed::enclosed
brackets::brackets
returns::returns
n-f::n-f
value::value
r-f::r-f
negative::negative
setting::setting
correct::correct
quantity::quantity
positive::positive
worst::worst
confused::confused
algorithm::algorithm
raises::raises
doing::doing
null::null
disadvantage::disadvantage
fixed::fixed
maximum::maximum
idea::idea
increases::increases
allotted::allotted
implementation::implementation
essentially::essentially
nodes::nodes
pointers::pointers
basically::basically
node::node
referred::referred
head::head
tail::tail
question::question
note::note
torcezo::torcezo
permit::permit
directly::directly
change::change
pointer::pointer
accessing::accessing
rome::rome
removal::removal
done::done
place::place
making::making
easily::easily
connect::connect
make::make
easy::easy
diagram::diagram
modified::modified
newly::newly
update::update
difficult::difficult
constant::constant
access::access
previous::previous
kind::kind
beginning::beginning
entire::entire
expensive::expensive
worth::worth
introduce::introduce
double-ended::double-ended
ends::ends
singly::singly
good::good
repeatedly::repeatedly
solution::solution
doubly::doubly
two::two
sentinel::sentinel
pointing::pointing
trailer::trailer
follow::follow
port::port
set::set
send::send
header::header
dummy::dummy
inside::inside
mark::mark
san::san
francisco::francisco
shown::shown
meant::meant
independent::independent
running::running
depended::depended
fairly::fairly
generic::generic
types::types
top::top
correspond::correspond
queue.thus::queue.thus
push::push
pop::pop
deleting::deleting
corresponds::corresponds
dependent::dependent
inserts::inserts
removes::removes
adapter::adapter
pattern::pattern
patterns::patterns
implements::implements
general::general
classes::classes
specialize::specialize
applications::applications
application::application
changing::changing
interface::interface
implemented::implemented
contents::contents
arbitrary::arbitrary
objects::objects
adapt::adapt
arraystack::arraystack
integerarraystack::integerarraystack
integer::integer
suitably::suitably
cast::cast
pushing::pushing
circularly::circularly
simple::simple
list.there::list.there
structure::structure
straight::straight
forward::forward
big::big
created::created
copy::copy
copying::copying
costly::costly
reference::reference
seattle::seattle
discusses::discusses
quickly::quickly
talk::talk
vectors::vectors
positions::positions
arrays::arrays
vector::vector
sequence::sequence
supports::supports
indicative::indicative
rank::rank
7,11,13,19::7,11,13,19
4th::4th
elematrank::elematrank
integers::integers
give::give
replace::replace
students::students
departmental::departmental
shift::shift
loop::loop
moving::moving
n-2::n-2
finally::finally
position::position
increased::increased
sores::sores
shifting::shifting
order::order
view::view
spent::spent
faster::faster
takes::takes
retrieve::retrieve
replaceatrank::replaceatrank
chart::chart
shows::shows
complexity::complexity
implementing::implementing
showing::showing
diagrams::diagrams
newyork::newyork
insertion::insertion
issues::issues
find::find
times::times
17th::17th
location.once::location.once
java::java
assuming::assuming
existence::existence
nodeatrank::nodeatrank
defining::defining
shortly::shortly
next.getprev::next.getprev
prev::prev
field::field
dlnode::dlnode
next.setprev::next.setprev
prev.setnext::prev.setnext
intimated::intimated
picture::picture
show::show
process::process
deletion::deletion
selected::selected
rid::rid
final::final
write::write
march::march
incrementing::incrementing
counter::counter
small::small
improvement::improvement
hundred::hundred
concerned::concerned
implementations::implementations
require::require
supporting::supporting
based::based
efficient::efficient
provided::provided
removeatnode::removeatnode
insertafternode::insertafternode
object::object
sense::sense
telling::telling
stuff::stuff
hide::hide
information::information
knowing::knowing
actual::actual
intuitively::intuitively
captures::captures
stored::stored
situated::situated
fields::fields
implementer::implementer
hides::hides
details::details
relative::relative
jus::jus
datatype::datatype
query::query
asks::asks
excessive::excessive
swapelements::swapelements
swaps::swaps
replaceelement::replaceelement
insertfirst::insertfirst
insertlast::insertlast
capture::capture
linear::linear
talked::talked
combines::combines
inherits::inherits
interfaces::interfaces
multiple::multiple
inheritance::inheritance
listed::listed
additional::additional
helps::helps
atrank::atrank
rankof::rankof
identify::identify
middle::middle
determine::determine
gave::gave
cross::cross
sit::sit
ranks::ranks
wanted::wanted
leave::leave
exercise::exercise
comparison::comparison
previously::previously
zap::zap
figure::figure
learnt::learnt
concretization::concretization
inheriting::inheriting
