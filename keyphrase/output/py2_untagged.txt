csc 108h  introduction to computer programming summer 2011 marek janicki may 26 2011 administration office hours held in ba 2200 at t12-2  f2-4 if this changes  will be posted on announcements twice as many people in thursday tutorials consider switching if you can class in ba1170 on june 23rd and july 14th website typo in info sheet  there is no trailing h a redirect has been added my e-mail is quellan @ cs.toronto.edu not quellan @ cdf.toronto.edu assignment 1 this is a short and simple assignment it has been posted needs to be done on your own you can write it wherever  but before you submit  make sure that it runs on the cdf machines no questions about it will be accepted after june 2nd  may 26 2011 programs can be adaptive last time we compared programs to recipes not entirely accurate programs can behave differently depending on the situation we saw a very brief snippet of this last week may 26 2011 booleans  a new type can have two values true  false have three operations  not  and  or not changes a true to a false and vice versa and returns false unless all the arguments are true or returns true unless all the arguments are false may 26 2011 truth tables a way of representing boolean expressions x y not x not y x and y x or y true true false false true true true false false true false true false true true false false true false false true true false false may 26 2011 what if we want to adapatively assign boolean values we can use relational operators <  >  < =  > =  ! =  = = these are all comparison operators that return true or false = = is the equality operator ! = is not equals may 26 2011 boolean expressions and representation can combine boolean operators  and  or  not  and relational operators  <  > ,etc  and arithmetic operators  + ,  *  etc   5 + 7 < 4 * 3 or 1-2 > 2-4 and 15 = = 4 is a legal expression arithmetic goes before relational goes before boolean false is represented as 0  and true is represented as 1 can lead to weirdness best to avoid exploiting this may 26 2011 short circuit evaluation python only evaluates a boolean expression as long as the answer is not clear it will stop as soon as the answer is clear this  combined with the nature of boolean representation can lead to strange behaviour exploiting these behaviours is bad style may 26 2011 how to use boolean variables recall that we want to make our code adaptive to use boolean variables to selectively execute blocks of code  we use if statements may 26 2011 if statement the general form of an if statement is  if condition  block example  if grade > = 50  print “ pass ” may 26 2011 if statement the general form of an if statement is  if condition  block the condition is a boolean expression recall that a block is a series of python statements if the condition evaluates to true the block is executed may 26 2011 other forms of if statement if we want to execute different lines of code based on the outcome of the boolean expression we can use  if condition  block else  block the block under the else is executed if the condition evaluates to false may 26 2011 more general if statement if condition1  block elif condition2  block elif condition3  block else  block python evalutates the conditions in order it executes the block of the first  and only the first  condition that is true the final else is optional may 26 2011 style advice for booleans if you are unsure of precedence  use parentheses will make it easier for a reader also use parentheses for complicated expressions simplify your boolean expressions get rid of double negatives  etc may 26 2011 break  the first may 26 2011 review of functions we started by looking at some of python 's native functions we saw how to call functions saw how to define our own may 26 2011 why functions allow us to reuse bits of code  which makes updating and testing much easier only need to test and update the function  rather than every place that we use it chunking ! allows us to parse information much better human mind is pretty limited in what it can do function names allow us to have a shorthand for what a function does may 26 2011 return vs print recall that functions end if they see a return statement  and return the value of the expression after the keyword return if there is no return statement  the function returns none we 've also seen snippets of the print statement print takes one or more expressions separated by a comma  and prints them to the screen this is different than a return statement  but looks identical in the shell may 26 2011 multiple function calls sometimes we want to have functions calling other functions f  g  4   in this case  we use the 'inside out ' rule  that is we apply g first  and then we apply f to the result if the functions can have local variables  this can get complicated may 26 2011 how does python choose variables python has local and global variables local variables are defined inside of functions  global variables are defined outside of functions what happens if a local variable is the same as a global variable may 26 2011 generally python will first  check local variables defined in a function then check local variables in an enclosing function that is for f  g  4   it will check g 's local variables first  and then f 's local variables then it will check global variables finally it will check built-in variables may 26 2011 how to think about scope we use namespaces a name space is an area in which a variable is defined each time we call a function  we create a local namespace we refer to that first  and go down to the enclosing functions name space or global namespace as necessary may 26 2011 style conventions for functions as we 've seen  python allows us to be somewhat careless in where we initialise and call variables exploiting this is bad style it makes code hard to read and prone to errors may 26 2011 designing functions need to choose parameters ask “ what does the function need to know ”  everything it needs to know should be passed as a parameter do not rely on global parameters need to choose whether to return or not to return functions that return information to code should return  those that show something to the user should n't  print  media.show    etc   may 26 2011 break  the second may 26 2011 function documentation recall that we can use the built-in function help   to get information on functions or modules we can do this on functions that we 've defined as well  but it does n't give much information we can add useful documentation with docstrings a docstring is surrounded by '' ' and must be the first line of a module or function may 26 2011 docstrings if the first line of a function or module is a string  we call it a docstring short for documentation string python saves the string to return if the help function is called convention  leave a blank line after but not before a docstring all functions should have docstrings may 26 2011 why docstrings if you write the docstring first  you have an instant sanity check that is  you can be sure that the function is doing what you want it to do makes portability and updating easier allows other people to know what your functions do and how to use them  without having get into the code allows for good chunking may 26 2011 writing good docstrings '''a sunset module.'' ' '''changes into a sunset.'' ' these are terrible docstrings they are vague and ambiguous the do n't tell us what the function expects or what it does how can we make it better may 26 2011 writing good docstrings describes what a function does '''changes into a sunset.'' ' '''makes a picture look like it was taken at sunset.'' ' '''makes a picture look like it was taken at sunset by decreasing the green and blue by 70 % .'' ' may 26 2011 writing good docstrings describes what a function does '''changes into a sunset.'' ' '''makes a picture look like it was taken at sunset.'' ' '''makes a picture look like it was taken at sunset by decreasing the green and blue by 70 % .'' ' may 26 2011 writing good docstrings does not describe how a function works more useful for chunking  and it 's unnecessary information if we 're using the function '''makes a picture look like it was taken at sunset.'' ' '''makes a picture look like it was taken at sunset by decreasing the green and blue by 70 % .'' ' may 26 2011 writing good docstrings does not describe how a function works more useful for chunking  and it 's unnecessary information if we 're using the function '''makes a picture look like it was taken at sunset.'' ' '''makes a picture look like it was taken at sunset by decreasing the green and blue by 70 % .'' ' may 26 2011 writing good docstrings makes the purpose of every parameter clear and refers to the parameter by name '''makes a picture look like it was taken at sunset.'' ' '''takes a given picture and makes it look like it was taken at sunset.'' ' '''takes a picture pic and makes it look like it was taken at sunset.'' ' may 26 2011 writing good docstrings makes the purpose of every parameter clear and refers to the parameter by name '''makes a picture look like it was taken at sunset.'' ' '''takes a given picture and makes it look like it was taken at sunset.'' ' '''takes a picture pic and makes it look like it was taken at sunset.'' ' may 26 2011 writing good docstrings be clear if a function returns a value  and if so  what consider average_red  pic  '''computer the average amount of red in a picture.'' ' '''returns the average amount of red  a float  in a picture pic.'' ' may 26 2011 writing good docstrings make sure to explicitly state any assumptions the function has def decrease_red  pic,percent  '''decreases the amount of red per pixel in picture pic by int percent percent must be between 0 and 100.'' ' may 26 2011 writing good docstrings be concise and grammatically correct use commands rather than descriptions '''takes a picture pic and makes it appear as it if was taken at sunset.'' ' '''take picture pic and make it appear to have been taken at sunset.'' ' may 26 2011 writing good docstrings describes what a function does does not describe how a function works makes the purpose of every parameter clear and refers to the parameter by name be clear if a function returns a value  and if so  what make sure to explicitly state any assumptions the function has be concise and grammatically correct use commands rather than descriptions may 26 2011 boolean docstrings def  is_odd  x   return  x % 2  = = 1 the docstring for this might look like '''return true if int x is odd  and false otherwise.'' ' commonly shortened to  '''return true iff int x is odd may 26 2011 iff iff stands for if and only if so in fact we wrote  '''return true if int x is odd and only iff int x is odd.'' ' we did n't specify what to do if x is not odd but for boolean functions  it is understood that we are to return false if we 're not returning true may 26 2011 writing good docstrings docstrings do not include definitions or hints the docstring for sqrt is not  '''return the sqrt of  x   the sqrt of x is a number  that when multiplied by itself evaluates to x' is it simply  return the square root of x csc 108h  introduction to computer programming summer 2011 marek janicki june 2 2011 administration questions on the assignment at the end there were some questions about the memory model from last week accordingly  there will be a file posted to the lectures page that will go through the example line by line when it is posted  will be posted on the announcements june 2 2011 assignment 1 find_factor   between 0 and 100 is exclusive  means 1 < = x < = 99 we are counting non-prime factors  so 4 is an acceptable answer 1 is not considered a factor  unless the input is 1 find intercept   do n't need to worry about lines that do n't have intercepts in general  do n't need to worry about inputs for which there is no answer june 2 2011 what if we do n't want numbers so far we 've seen ints  reals and booleans allow for number manipulation and logic manipulation but what if we want to use text then we need to use a new type – strings june 2 2011 strings sequences of characters two types str and unicode we 'll use str in this course it contains the roman alphabet  numbers a few symbols unicode is larger  contains more accented letters  chinese characters  and more strings are denoted by single or double quotes quote type must match ! june 2 2011 string operations strings can be 'added' we call this concatenation “ str ” + “ ing ” results in “ string ”  can also be multiplied  sort of you ca n't multiply a string with itself  but the multiplication operator functions as a copy so “ copy ” * 3 results in “ copycopycopy ”  can also compare strings using relational operators can check if substrings are in a string using in long strings that span multiple lines can be made using ''' june 2 2011 escape characters denoted by a backslash  they indicate to python that the next character is a special character \ n  a new line \ '  a single quote \ ”  a double quote \ \  a backslash \ t  a tab aside len  string  will return an int that is the number of characters in the string june 2 2011 converting types to strings if we have a variable that is not a string and we want to add it to a string  we need to convert it we use str  x  to convert x to a string print will display the variable  and can display mixed types they must be separated with a comma print “ string ”  x  “ “  real_num can be awkward print “ person “  name  “ has height ”  height  “ age “  age  “ weight “  weight june 2 2011 can use string formatting instead can use special characters to tell python to insert a type into a string print “ my age is % d ” % age the % d tells python to take age  and format it as an integer % s says to take a value and format it as a string % f says to take a value and format it as a float % .2f says to pad the float to 2 decimal places june 2 2011 multiple variables what if we want multiple variables in our string print “ person “  name  “ has height ”  \ height  “ age “  age  “ weight “  weight we put them in parentheses separated by commas print “ person % s has weight % .2f \ and age % d and height % d “ \ %  name  weight  age  height  june 2 2011 user input here we mean the user as the person who is using a program while it is running thus far  the only way we 've had of giving input to a program is to hardcode it in the code inefficient and not user-friendly python allows us to ask for user input using raw_input    returns a string ! so it may need to be converted june 2 2011 break  the first june 2 2011 modules sometimes we want to use other people 's code or make our own code available for use it 's convenient if we can bundle up related functions in one file modules allow us to do this a module is a group of related functions and variables june 2 2011 using modules to use a module  one needs to import it importing a module causes python to run each line of code in the module it it is just function definitions this does n't cause much trouble but it can be annoying if there is code that you do n't care about in the module to use a function in a module one uses module_name.function_name   we can also run a module then we just use function_name   june 2 2011 __name__ in addition to variables that are defined in the module  each module has a variable that is called __name__ if we import a module called module_m  then module_m.__name__ = = “ module_m ” but if we run a module  then __name__ = = “ __main__ ” recall that if we are running a module  we do n't need the module name as a prefix june 2 2011 another way to import things from module_name import fn_name1    fn_name2   will import fn_name1 and fn_name 2 can be referred to by just fn_name1   can also use * as a wildcard to import all the functions from module_name import * what if two modules have a function with the same name the most recent one stays june 2 2011 methods we 've seen that modules can have their own functions a similar thing is true of values values contain ways that you can modify them we call these methods these are called by value.fn_name   or  if we 've assigned a value to a variable we can use variable_name.fn_name   we can call help  type  to figure out what methods a type has available to it june 2 2011 string methods can find them by using help  str   useful ones include  s.replace  old  new   return a new string that is a copy of s with all instances of old replaced by new string.count  substr  – return the number of instances of substr in the string string.lower    shift to lower case letters string.upper    shift to capitalised letters june 2 2011 getting method information most direct way is to use help    but help is n't searchable can use dir   to browse sometimes you know what you want  and you think it might already exist an alternative is to check the standard library  http  //docs.python.org/library/ being able to browse this is useful skill june 2 2011 remember ! functions belong to modules methods belong to objects all of the basic types in python are objects we will learn how to make our own later this is covered in greater detail in 148 len  str  is a function str.lower   is a method subtle but important distinction june 2 2011 break  the second june 2 2011 repetition often times in programs we want to do the same thing over and over again for example  we may want to add a number to a variable until it reaches some number or we may want to execute a block of code until some condition is true ages ago  this was done with a goto statement this lead to unreadable 'spaghetti ' code python has no goto statement june 2 2011 the while loop instead python uses loops we will cover the for loop next week the while loop has the form  while condition  block the condition is checked first if it evaluates to true  the block executes  otherwise the block is skipped  and the next line of code is executed june 2 2011 why loops while loops can be used if  you want to repeat an action indefinitely you want to repeat an action until a condition is met you want to repeat an action a fixed number of times june 2 2011 assignment questions csc 108h  introduction to computer programming summer 2011 marek janicki july 7 2011 administration assignment 3 is out we 've got the assignment 2 autograder and are working on grading it july 7 2011 testing testing is key to developing good software tests should be easy to access  and easy to reuse they should be separate from the code you are testing i.e when you test code  you should test it based on the docstrings  not based on the actual code that you 're writing this means that you can test what the user will see july 7 2011 testing two main aspects of testing  figuring out what you 're going to test the tools used to run tests this first aspect is largely language independent not entirely  because some languages might allow different types of input the second less so there 's a reasonably common paradigm for how to test code  but some languages have built-in tools for it july 7 2011 test cases what do we test we ca n't test all inputs so we need to choose a subset that is representative we can have 'typical inputs' we can test things where we might suspect programmer error we can test 'boundary conditions ' that we suspect might have been overlooked july 7 2011 test cases it is useful to think 'adversarially ' when picking test cases that is  try to picture yourself as an adversary trying to break a program but do so without cheating  so if the docstring specifies some kind of input  limit yourself to those inputs but within those inputs try and choose as bad inputs as you can july 7 2011 test cases we want all of our test cases to be independent that is  we want to be certain of the source of a failure so having lots of test cases that build on eachother is not a great idea note that this is different from having test cases that test functions that build on other functions july 7 2011 what do we test ideally one tests each function individually this is called unit testing once all the smaller functions have been tested  then you test the larger functions that call the smaller ones when you make any changes  you want to run all the tests again this is called regression testing july 7 2011 when do we test it is best if you test a function right after writing it it is easiest to fix things at this point often it is useful to come up with test cases before you actually write any code this means that you think of the structure of the program and what each function does before you write the code this means that you can really write the tests in a black-box fashion  because you do n't know what the code will be yet july 7 2011 when do we test professional coders often write test cases before writing code thinking about tests cases while designing is also a useful design tool  because it can inform your design makes for more robust code july 7 2011 testing summary want individual unit tests these should be independent of eachother there should be some generic ones  and some chosen 'adversarially' want to design tests before writing code makes for more robust code and better style tests want to rerun tests when we change code how do we do all this july 7 2011 break  the first july 7 2011 testing in python so we have a lot of constraints in python testing and it 's hard to satisfy all of them thus far we 've been testing in shell  and it 's a lot of work to do regression testing that way we could store all of our old tests in a file  but then we have to write specific code for opening files and dealing with them luckily python has a module called nose that helps us with a lot of these things july 7 2011 testing with nose the context for testing with nose is that we have a module named mod we want to test some or all of the functions in it to do this we create a module called test__mod in this module we import nose and we import mod for each function func we want to test  we have a test__func   function july 7 2011 testing with nose we have  if __name__ = = '__main__ '  nose.runmodule   in the body of test__func   we have assert statements assert  boolean condition  will do nothing if the condition is true  but will throw an error if it 's false so test__func   has a bunch of statements like  assert func  input  = =  expected_output  nose runs these and produces output july 7 2011 nose output the first line of output tells us the result of the tests a dot means pass  an f means fail  an e means an error so  a failure is incorrect output  an error is an exception of some kind each failure or error produces information about that failure or error the last bit tells us the number of tests passes  the number of tests failed  and the number of errors july 7 2011 nose output the information about the errors so far is just the error information that python gives back to us if we fail a test we can an 'assertionerror' if we want to add some information to this  we can put in a string after a comma in the assert statement assert  condition   " some string " july 7 2011 testing summary want individual unit tests these should be independent of eachother there should be some generic ones  and some chosen 'adversarially' want to design tests before writing code makes for more robust code and better style tests want to rerun tests when we change code how does nose do this july 7 2011 nose and testing unit tests each test in nose is its own function  so we can write a function for each unit test we want designing tests early all we need to write test in nose is the specifiction for the function the tests treat functions as a black box regression testing nose makes it quite easy to run all the tests we have whenever we want july 7 2011 so you have an error if you find an error  you need to debug it  a process that is often painful there are a few ways to mitigate this pain test early ! test often find the first point that the code differs from what you think it would be run through the code in your head to make sure that if everything goes the way you think  the code will work read the error information  and use it to see if the code is correct at the point of the error july 7 2011 break  the second july 7 2011 assignment 2 solution conceptually is in several parts the functions to and from algebraic notation are their own parts game_summary and strip_tag_info are their own part strip_tag_info is the function that game summary calls to do it 's work july 7 2011 assignment 2 solution for the rest  the problem of recording the moves and boards state are intertwined but it 's two big of a problem to do on it 's own  so we have to break it down into component chunks chunk one  parsing the input into little moves done by get_move_lst and get_move_str july 7 2011 assignment 2 solution for each individual move text  we need to extract a bunch of possible bit of information from this done with a bunch of functions  check  mate  get_fin_sq  get_piece_type  etc for each move though  this is n't enough we also need to keep track of the board  and update it accordingly for this we have update_board    get_init_move  move_piece july 7 2011 assignment 2 solution other things  we keep the board as a nested list  in the format that we 're supposed to return it when trying to find where a piece started  rather than looking at all possible place a piece could move to ; we look at all possible pieces that could move to a place and try and find which one could do so legally this code relies very heavily on the correctness of the file july 7 2011 assignment 3 comments and questions csc 108h  introduction to computer programming summer 2011 marek janicki june 9 2011 administration just to be clear  it 's okay to ask questions about the assignment at office hours  even if it 's in the last 24 hours assignment 2 will come out over the weekend  and the deadline will be moved to the 27th  office hours will be held monday instead of tuesday that week the midterm will be held june 30th at the regular lecture time and regular lecture room june 9 2011 administration there is a request for a volunteer note-taker there is a student in this class who requires a volunteer notetaker as an accommodation for a disability by signing up and posting your notes  you can make a significant difference for this individual 's capacity to fully participate in this course go to  http  //www.studentlife.utoronto.ca/accessibility/pcourselist.aspx or come in person to accessibility services 215 huron st suite 939 many students notice the quality of their notetaking improves through volunteering you will also receive a certificate of recognition june 9 2011 immutable objects so far all we 've seen are immutable objects that is objects do n't change instead of making an old int into a new one  we make a new int  and throw the old one away june 9 2011 immutable objects what if we want to change an immutable object it 's a lot of work  we need to make a new object that is identical to the old one except for our changes this is fine for small things like ints and strings  but takes a lot of time for large things like images june 9 2011 mutable objects if we want to change a really large object without keeping the original  then making a big copy  modifying it and tossing the rest is wasteful instead  we can use a mutable object  that we 're allowed to change this also allows us to define functions that change objects  rather than return new ones june 9 2011 aliasing consider  x = 10 y = x x = 5 print x  y we know this will print 5 10 to the screen  because ints are immutable june 9 2011 aliasing let pic be an already initialised picture and consider  x = pic y = x # sets the green to 0 for pixel in x  media.set_green  pixel,0  media.show  y  pics are mutable  so this will show a picture with no green june 9 2011 aliasing and functions when one calls a function  one is effectively beginning with a bunch of assignment statements that is  the parameters are assigned to the local variables but with mutable objects  these assignment statements mean that the local variable refers to a mutable object that it can change this is why functions can change mutable objects  but not immutable ones june 9 2011 break  the first june 9 2011 lists recall from the assignment that you had to refer to each co-ordinate by a variable this is annoying  and can easily be really slow in high-dimensional spaces python has a way of grouping similar items called a list denoted by  list_name =  list_elt0  list_elt1    list_eltn  june 9 2011 lists to get to the i-th element of a list we use  list_name  i-1  we use i-1 because lists are indexed from 0 this means to refer to the elements of a 4 element list named list_name we use list_name  0   list_name  1   list_name  2   list_name  3  lists are mutable june 9 2011 lists you can also have an empty list     you can index into lists from the back list_name  -i  returns the ith element from the back lists are heterogeneous  that is  the elements in a list need not be the same type  can have ints and strings can even have lists themselves june 9 2011 lists  functions lists come with lots of useful functions and methods len  list_name   as with strings  returns the length of the list min  list_name  and max  list_name  return the min and max so long as the list is well defined sum  list_name  returns the sum of elements so long as they 're numbered not defined for lists of strings june 9 2011 lists  methods append  value  – adds the value to the end of the list sort    sorts the list so long as this is well defined  need consistent notions of > and = =  insert  index  value  – inserts the element value at the index specified remove  value  – removes the first instance of value count  value  – counts the number of instances of value in the list june 9 2011 looping over lists often we want to do a similar operation to every element of the list python allows us to do this using for loops for item in list  block this is equivalent to  item = list  0  block item = list  1  block  june 9 2011 looping over lists loops can be tricky with immutable objects for item in list  block here  item is immutable  so we ca n't alter the list elements if we want to alter the list elements  we need to refer to the indices of the list june 9 2011 looping over lists to do that  we use the range   function range  i  returns an ordered list of ints ranging from 0 to i-1 range  i,j  returns an ordered list of ints ranging from i to j-1 inclusive range  i,j,k  returns a list of ints ranging from i to j-1 with a step of at least k between ints so range  i,k  = = range  i,k,1  to modify a list element by element we use  for i in range  len  list    block june 9 2011 list slicing sometimes we want to perform operations on a sublist to refer to a sublist we use list slicing y = x  i  j  gives us a list y with the elements from i to j-1 inclusive x    makes a list that contains all the elements of the original x  i   makes a list that contains the elements from i to the end x   j  makes a list that contains the elements from the beginning to j-1 y is a new list  so that it is not aliased with x june 9 2011 break  the second june 9 2011 tuples sometimes we want our lists to be immutable can help if we 're worried about aliasing carelessness to do that we can make a tuple tuple_name =  item0,item1,item2  items are referenced by tuple_name  i  not tuple_name  i  single element tuples must be defined with a comma to avoid ambiguity –  8 + 3  vs  8 + 3   june 9 2011 strings revisted strings can be considered tuples of individual characters  since they are immutable   in particular  this means that we can use the list knowlege that we gained  an apply it to strings can reference individual characters by string  + /-i   strings are not heterogenous  they can only contain characters min   and max   defined on strings  but sum   is not you can slice strings just as you can lists june 9 2011 string methods revisted now that we know that we can index into strings  we can look at some more string methods find  substring   give the index of the first character in a matching the substring from the left or -1 if no such character exists rfind  substring   same as above  but from the right find  substring,i,j   same as find    but looks only in string  i  j   june 9 2011 nested lists because lists are heterogeneous  we can have lists of lists this is useful if we want matrices  or to represent a grid or higher dimenstional space we then reference elements by list_name  i   j  if we want the jth element of the ith list so then naturally  if we wish to loop over all the elements we need nested loops  for item in list_name  for item2 in item  block csc 108h  introduction to computer programming summer 2011 marek janicki june 9 2011 administration just to be clear  it 's okay to ask questions about the assignment at office hours  even if it 's in the last 24 hours assignment 2 will come out over the weekend  and the deadline will be moved to the 27th  office hours will be held monday instead of tuesday that week the midterm will be held june 30th at the regular lecture time and regular lecture room june 9 2011 administration there is a request for a volunteer note-taker there is a student in this class who requires a volunteer notetaker as an accommodation for a disability by signing up and posting your notes  you can make a significant difference for this individual 's capacity to fully participate in this course go to  http  //www.studentlife.utoronto.ca/accessibility/pcourselist.aspx or come in person to accessibility services 215 huron st suite 939 many students notice the quality of their notetaking improves through volunteering you will also receive a certificate of recognition june 9 2011 immutable objects so far all we 've seen are immutable objects that is objects do n't change instead of making an old int into a new one  we make a new int  and throw the old one away june 9 2011 immutable objects what if we want to change an immutable object it 's a lot of work  we need to make a new object that is identical to the old one except for our changes this is fine for small things like ints and strings  but takes a lot of time for large things like images june 9 2011 mutable objects if we want to change a really large object without keeping the original  then making a big copy  modifying it and tossing the rest is wasteful instead  we can use a mutable object  that we 're allowed to change this also allows us to define functions that change objects  rather than return new ones june 9 2011 aliasing consider  x = 10 y = x x = 5 print x  y we know this will print 5 10 to the screen  because ints are immutable june 9 2011 aliasing let pic be an already initialised picture and consider  x = pic y = x # sets the green to 0 for pixel in x  media.set_green  pixel,0  media.show  y  pics are mutable  so this will show a picture with no green june 9 2011 aliasing and functions when one calls a function  one is effectively beginning with a bunch of assignment statements that is  the parameters are assigned to the local variables but with mutable objects  these assignment statements mean that the local variable refers to a mutable object that it can change this is why functions can change mutable objects  but not immutable ones june 9 2011 break  the first june 9 2011 lists recall from the assignment that you had to refer to each co-ordinate by a variable this is annoying  and can easily be really slow in high-dimensional spaces python has a way of grouping similar items called a list denoted by  list_name =  list_elt0  list_elt1    list_eltn  june 9 2011 lists to get to the i-th element of a list we use  list_name  i-1  we use i-1 because lists are indexed from 0 this means to refer to the elements of a 4 element list named list_name we use list_name  0   list_name  1   list_name  2   list_name  3  lists are mutable june 9 2011 lists you can also have an empty list     you can index into lists from the back list_name  -i  returns the ith element from the back lists are heterogeneous  that is  the elements in a list need not be the same type  can have ints and strings can even have lists themselves june 9 2011 lists  functions lists come with lots of useful functions and methods len  list_name   as with strings  returns the length of the list min  list_name  and max  list_name  return the min and max so long as the list is well defined sum  list_name  returns the sum of elements so long as they 're numbered not defined for lists of strings june 9 2011 lists  methods append  value  – adds the value to the end of the list sort    sorts the list so long as this is well defined  need consistent notions of > and = =  insert  index  value  – inserts the element value at the index specified remove  value  – removes the first instance of value count  value  – counts the number of instances of value in the list june 9 2011 looping over lists often we want to do a similar operation to every element of the list python allows us to do this using for loops for item in list  block this is equivalent to  item = list  0  block item = list  1  block  june 9 2011 looping over lists loops can be tricky with immutable objects for item in list  block here  item is immutable  so we ca n't alter the list elements if we want to alter the list elements  we need to refer to the indices of the list june 9 2011 looping over lists to do that  we use the range   function range  i  returns an ordered list of ints ranging from 0 to i-1 range  i,j  returns an ordered list of ints ranging from i to j-1 inclusive range  i,j,k  returns a list of ints ranging from i to j-1 with a step of at least k between ints so range  i,k  = = range  i,k,1  to modify a list element by element we use  for i in range  len  list    block june 9 2011 list slicing sometimes we want to perform operations on a sublist to refer to a sublist we use list slicing y = x  i  j  gives us a list y with the elements from i to j-1 inclusive x    makes a list that contains all the elements of the original x  i   makes a list that contains the elements from i to the end x   j  makes a list that contains the elements from the beginning to j-1 y is a new list  so that it is not aliased with x june 9 2011 break  the second june 9 2011 tuples sometimes we want our lists to be immutable can help if we 're worried about aliasing carelessness to do that we can make a tuple tuple_name =  item0,item1,item2  items are referenced by tuple_name  i  not tuple_name  i  single element tuples must be defined with a comma to avoid ambiguity –  8 + 3  vs  8 + 3   june 9 2011 strings revisted strings can be considered tuples of individual characters  since they are immutable   in particular  this means that we can use the list knowlege that we gained  an apply it to strings can reference individual characters by string  + /-i   strings are not heterogenous  they can only contain characters min   and max   defined on strings  but sum   is not you can slice strings just as you can lists june 9 2011 string methods revisted now that we know that we can index into strings  we can look at some more string methods find  substring   give the index of the first character in a matching the substring from the left or -1 if no such character exists rfind  substring   same as above  but from the right find  substring,i,j   same as find    but looks only in string  i  j   june 9 2011 nested lists because lists are heterogeneous  we can have lists of lists this is useful if we want matrices  or to represent a grid or higher dimenstional space we then reference elements by list_name  i   j  if we want the jth element of the ith list so then naturally  if we wish to loop over all the elements we need nested loops  for item in list_name  for item2 in item  block 