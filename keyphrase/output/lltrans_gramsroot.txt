lecture we looked::lecture we looked
looked at stacks::looked at stacks
queues and linked::queues and linked
implement the queue::implement the queue
array to implement::array to implement
implement our queue::implement our queue
array is fixed::array is fixed
queue you knew::queue you knew
maximum size queue::maximum size queue
idea maximum size::idea maximum size
size its increases::size its increases
double the size::double the size
familiar with linked::familiar with linked
essentially blinked list::essentially blinked list
tail of list::tail of list
element some data::element some data
linked list implement::linked list implement
queue then question::queue then question
front of queue::front of queue
right the tail::right the tail
remove this element::remove this element
element the linked::element the linked
element from linked::element from linked
change this pointer::change this pointer
accessing it pointer::accessing it pointer
element no problem::element no problem
remove the element::remove the element
element the front::element the front
implement from methods::implement from methods
dequeue which means::dequeue which means
increment just making::increment just making
making the head::making the head
delete the head::delete the head
delete this element::delete this element
connected here make::connected here make
make the head::make the head
node so inserting::node so inserting
inserting the head::inserting the head
kind of move::kind of move
move the head::move the head
remove the front::remove the front
add an element::add an element
enqueue an element::enqueue an element
element recall enqueue::element recall enqueue
element this pointer::element this pointer
modified to pointer::modified to pointer
pointer this element::pointer this element
element and tail::element and tail
question we discuss::question we discuss
difficult to remove::difficult to remove
remove an element::remove an element
remove this node::remove this node
node to remove::node to remove
access the previous::access the previous
kind of list::kind of list
list to start::list to start
problem his question::problem his question
problem in removing::problem in removing
removing this node::removing this node
node the problem::node the problem
make this point::make this point
throw the entire::throw the entire
node very expensive::node very expensive
tail which means::tail which means
means the front::means the front
queue data type::queue data type
type is concern::type is concern
singly linked list::singly linked list
idea to implement::idea to implement
implement such double::implement such double
double ended queue::double ended queue
doubly linked list::doubly linked list
list to implement::list to implement
implement double double::implement double double
double double ended::double double ended
double ended queues::double ended queues
queues so first::queues so first
pointer one previous::pointer one previous
two sentinel nodes::two sentinel nodes
pointers one pointing::pointers one pointing
operations of double::operations of double
queue in constant::queue in constant
delete this node::delete this node
pointer to trail::pointer to trail
follow the pointer::follow the pointer
port and set::port and set
pointer to trailer::pointer to trailer
previous point trailer::previous point trailer
node perhaps applied::node perhaps applied
header and trailer::header and trailer
linked list header::linked list header
sentinel nodes dummy::sentinel nodes dummy
nodes dummy nodes::nodes dummy nodes
nodes they don::nodes they don
dare to mark::dare to mark
mark the start::mark the start
answering his question::answering his question
delete san franchiso::delete san franchiso
makes this pointer::makes this pointer
point to point::point to point
done in constant::done in constant
operation in constant::operation in constant
front or delete::front or delete
independent of number::independent of number
number of elements::number of elements
fairly generic data::fairly generic data
generic data type::generic data type
implement other data::implement other data
implementation of double::implementation of double
make a stack::make a stack
stack or make::stack or make
make a queue::make a queue
implementation to implement::implementation to implement
implement a stack::implement a stack
instance the method::instance the method
top would correspond::top would correspond
correspond to lets::correspond to lets
make the top::make the top
correspond to return::correspond to return
last element double::last element double
element double ended::element double ended
queue the method::queue the method
correspond to inserting::correspond to inserting
method pop correspond::method pop correspond
correspond to deleting::correspond to deleting
ended queue right::ended queue right
sacrificing about last::sacrificing about last
make this correspond::make this correspond
size just corresponds::size just corresponds
queue is empty::queue is empty
empty double ended::empty double ended
circularly linked list::circularly linked list
pointers first stack::pointers first stack
first stack head::first stack head
head and tail::head and tail
structure to implement::structure to implement
implement both queues::implement both queues
queues and stack::queues and stack
front the queue::front the queue
queue the rear::queue the rear
makes this front::makes this front
queue this right::queue this right
insert an element::insert an element
guy and make::guy and make
element your inserting::element your inserting
node and create::node and create
node and copy::node and copy
copy this element::copy this element
node right make::node right make
copying the reference::copying the reference
queue to remove::queue to remove
removing an element::removing an element
corresponds to removing::corresponds to removing
removing the first::removing the first
first one right::first one right
remove the first::remove the first
copy the contents::copy the contents
remove the rome::remove the rome
rome i copy::rome i copy
seatle to rome::seatle to rome
sequences so vectors::sequences so vectors
talk about vectors::talk about vectors
talk about positions::talk about positions
talk about list::talk about list
list and general::list and general
arrays and linked::arrays and linked
implement this data::implement this data
vector data type::vector data type
data type vector::data type vector
type vector data::type vector data
type is sequence::type is sequence
elements its support::elements its support
support these methods::support these methods
notion of rank::notion of rank
rank every element::rank every element
sequence of elements::sequence of elements
element at rank::element at rank
rank here corresponds::rank here corresponds
rank or integers::rank or integers
integers so first::integers so first
element was element::element was element
suppose i asked::suppose i asked
replaces the element::replaces the element
element e insert::element e insert
rank r insert::rank r insert
insert the element::insert the element
rank e rank::rank e rank
delete the element::delete the element
methods yeah note::methods yeah note
rank of student::rank of student
two and departmental::two and departmental
suppose departmental rank::suppose departmental rank
four does department::four does department
natural data type::natural data type
data type structure::data type structure
data structure implement::data structure implement
implement using arrays::implement using arrays
lets see lets::lets see lets
implementation using arrays::implementation using arrays
element with rank::element with rank
rank one element::rank one element
rank two element::rank two element
element as rank::element as rank
rank zero rank::rank zero rank
rank r whats::rank r whats
put an element::put an element
elements once step::elements once step
first n minus::first n minus
doing this first::doing this first
two is moved::two is moved
moved one step::moved one step
element is pushed::element is pushed
thing is increased::thing is increased
right n suppose::right n suppose
stores the size::stores the size
size of vector::size of vector
elements one step::elements one step
right all elements::right all elements
two n minus::two n minus
element at location::element at location
sitting at location::sitting at location
operations worst case::operations worst case
right this implementation::right this implementation
implementation is expensive::implementation is expensive
point of view::point of view
two operations insert::two operations insert
insert certain rank::insert certain rank
remove certain rank::remove certain rank
worst case order::worst case order
operations are faster::operations are faster
array and retrive::array and retrive
retrive theelements sitting::retrive theelements sitting
sitting there replace::sitting there replace
replace at rank::replace at rank
location and replace::location and replace
replace with element::replace with element
right chart shows::right chart shows
methods all elements::methods all elements
elements all methods::elements all methods
methods except inserted::methods except inserted
inserted at rank::inserted at rank
rank and remove::rank and remove
remove at rank::remove at rank
rank take constant::rank take constant
implementing this thing::implementing this thing
right doubly linked::right doubly linked
linked list vector::linked list vector
showing here operation::showing here operation
operation of inserting::operation of inserting
insert at rank::insert at rank
node and put::node and put
understand the process::understand the process
process of insertion::process of insertion
insertion right create::insertion right create
create this node::create this node
insert i make::insert i make
makes a previous::makes a previous
previous pointer point::previous pointer point
pointer would point::pointer would point
insert take order::insert take order
list goes seventeen::list goes seventeen
insert this location::insert this location
assuming the existence::assuming the existence
node at rank::node at rank
rank it tells::rank it tells
insert this node::insert this node
rank two first::rank two first
call this procedure::call this procedure
procedure with rank::procedure with rank
node because earlier::node because earlier
node this node::node this node
previous to rank::previous to rank
set its previous::set its previous
earlier at rank::earlier at rank
rank two right::rank two right
manner i create::manner i create
check the previous::check the previous
doing is assuming::doing is assuming
process of deletion::process of deletion
out the node::out the node
node and update::node and update
manner get rid::manner get rid
code for doing::code for doing
assuming the procedure::assuming the procedure
implement this procedure::implement this procedure
array except march::array except march
list and find::list and find
incrementing my counter::incrementing my counter
reach that rank::reach that rank
two i start::two i start
list has hundred::list has hundred
element rank nineteen::element rank nineteen
point to start::point to start
start and staring::start and staring
form the header::form the header
vector the vector::vector the vector
data type concerned::data type concerned
rank or insert::rank or insert
move the elements::move the elements
insert to delete::insert to delete
supporting node based::supporting node based
node based operation::node based operation
delete that node::delete that node
node in constant::node in constant
insert the node::insert the node
node after constant::node after constant
delete the insert::delete the insert
insert a node::insert a node
constant time operations::constant time operations
provide we give::provide we give
give it access::give it access
insert and delete::insert and delete
give you access::give you access
implemented my list::implemented my list
pointers and stuff::pointers and stuff
right without knowing::right without knowing
knowing the actual::knowing the actual
thing was done::thing was done
notion of positions::notion of positions
positions abstract data::positions abstract data
abstract data type::abstract data type
intuitively the place::intuitively the place
elements is stored::elements is stored
data structure captures::data structure captures
element is method::element is method
data type position::data type position
call this method::call this method
make much sense::make much sense
node your familiar::node your familiar
familiar with pointers::familiar with pointers
pointer which tells::pointer which tells
pointer is access::pointer is access
access the element::access the element
pointer to update::pointer to update
update or previous::update or previous
fields you don::fields you don
node is implemented::node is implemented
list we don::list we don
type which hides::type which hides
method that element::method that element
notion of position::notion of position
right the first::right the first
list second element::list second element
position is referring::position is referring
node50.53 second node::node50.53 second node
similarly first position::similarly first position
post \ ition::post \ ition
define a list::define a list
list abstract datatype::list abstract datatype
meythods like size::meythods like size
havce query method::havce query method
hacve a method::hacve a method
method whoich asks::method whoich asks
asks is first::asks is first
positionoif my list::positionoif my list
dfirst will give::dfirst will give
first position last::first position last
last would give::last would give
methods like swap::methods like swap
swaps the contents::swaps the contents
positions it wswaps::positions it wswaps
replace the element::replace the element
replace the elemtn::replace the elemtn
elemtn at position::elemtn at position
uinsert the element::uinsert the element
methods in constant::methods in constant
linked luist datastructure::linked luist datastructure
abstract datatype implementation::abstract datatype implementation
double linked luist::double linked luist
linked luist methods::linked luist methods
sequence abstract data::sequence abstract data
vector abstract data::vector abstract data
element list data::element list data
list data type::list data type
combines the vector::combines the vector
vector and list::vector and list
list abstract data::list abstract data
method that listed::method that listed
listed for vector::listed for vector
vector list abstract::vector list abstract
list abstract dat::list abstract dat
abstract dat type::abstract dat type
two additional methods::two additional methods
methods which kind::methods which kind
kind of suite::kind of suite
method at rank::method at rank
correspond this rank::correspond this rank
rank of method::rank of method
identify what rank::identify what rank
method implement rank::method implement rank
position a position::position a position
suppose you gave::suppose you gave
gave me rank::gave me rank
follow this reference::follow this reference
element certain rank::element certain rank
create new position::create new position
position the element::position the element
element would sit::element would sit
move to right::move to right
change the ranks::change the ranks
ranks will change::ranks will change
change rank move::change rank move
rank move step::rank move step
case similarly deleting::case similarly deleting
deleting an element::deleting an element
wanted to delete::wanted to delete
element that position::element that position
delete an element::delete an element
comparison of sequence::comparison of sequence
implement a sequence::implement a sequence
picture i shown::picture i shown
case of running::case of running
element ceratin rank::element ceratin rank
out the element::out the element
update the pointers::update the pointers
out the rank::out the rank
rank any rank::rank any rank
rank based operation::rank based operation
find the rank::find the rank
out the find::out the find
out the position::out the position
stop our class::stop our class
today where queues::today where queues
queues we learnt::queues we learnt
learnt about double::learnt about double
ise linked list::ise linked list
type the list::type the list
essentially a concretization::essentially a concretization
linked list data::linked list data
list data structure::list data structure
looked at sequence::looked at sequence
sequence data types::sequence data types
data types sequence::data types sequence
types sequence data::types sequence data
types basically inheriting::types basically inheriting
last lecture::last lecture
data type::data type
implement stacks::implement stacks
array today::array today
linked list::linked list
fixed size::fixed size
maximum size::maximum size
size queue::size queue
idea maximum::idea maximum
last class::last class
blinked list::blinked list
nodes list::nodes list
list implement::list implement
first element::first element
queue removal::queue removal
queue dequeue::queue dequeue
front element::front element
head point::head point
element head::element head
node connected::node connected
easy right::easy right
dequeue operation::dequeue operation
manner remove::manner remove
element recall::element recall
recall enqueue::recall enqueue
rear queue::rear queue
null right::null right
previous node::previous node
removing removing::removing removing
entire list::entire list
expensive operation::expensive operation
queue data::queue data
good idea::good idea
good solution::good solution
double double::double double
double ended::double ended
ended queues::ended queues
previous pointer::previous pointer
sentinel nodes::sentinel nodes
ended queue::ended queue
previous port::previous port
previous point::previous point
point trailer::point trailer
trailer nodes::trailer nodes
list header::list header
nodes dummy::nodes dummy
dummy nodes::dummy nodes
data inside::data inside
san franchiso::san franchiso
pointer point::pointer point
operations understand::operations understand
front insert::front insert
end delete::end delete
generic data::generic data
data types::data types
method top::method top
stack correspond::stack correspond
last element::last element
method push::method push
method pop::method pop
pop correspond::pop correspond
queue right::queue right
last year::last year
empty corresponds::empty corresponds
empty double::empty double
data structures::data structures
stack head::stack head
circular list::circular list
data structure::data structure
queue makes::queue makes
rear right::rear right
element lets::element lets
straight forward::straight forward
element removing::element removing
element corresponds::element corresponds
lets remove::lets remove
general sequence::general sequence
linked lists::linked lists
vector data::vector data
type vector::type vector
fourth element::fourth element
element rank::element rank
instance lets::instance lets
departmental rank::departmental rank
suppose departmental::suppose departmental
department change::department change
department rank::department rank
natural data::natural data
type structure::type structure
structure implement::structure implement
arrays lets::arrays lets
moving step::moving step
finally element::finally element
suppose stores::suppose stores
elements starting::elements starting
operations worst::operations worst
worst case::worst case
operations insert::operations insert
rank remove::rank remove
case order::case order
rth location::rth location
retrive theelements::retrive theelements
theelements sitting::theelements sitting
right chart::right chart
chart shows::chart shows
list vector::list vector
element insert::element insert
make point::make point
node makes::node makes
rank seventeen::rank seventeen
seventeen position::seventeen position
procedure node::procedure node
rank rank::rank rank
previous field::previous field
doing don::doing don
doing showing::doing showing
original list::original list
previous pointers::previous pointers
java code::java code
rank tells::rank tells
nodes sitting::nodes sitting
small improvement::small improvement
hundred elements::hundred elements
rank nineteen::rank nineteen
staring form::staring form
type concerned::type concerned
first case::first case
element correspond::element correspond
supporting node::supporting node
node based::node based
based operation::based operation
node delete::node delete
operations provide::operations provide
delete right::delete right
things information::things information
actual implementation::actual implementation
positions abstract::positions abstract
abstract data::abstract data
structure captures::structure captures
method element::method element
type position::type position
element sitting::element sitting
previous fields::previous fields
element element::element element
first position::first position
list abstract::list abstract
abstract datatype::abstract datatype
positions ruight::positions ruight
abtstract datatype::abtstract datatype
generic meythods::generic meythods
havce query::havce query
query method::query method
first positionoif::first positionoif
last position::last position
excessive methods::excessive methods
lsat position::lsat position
update methods::update methods
swap elemts::swap elemts
elemtsn sitting::elemtsn sitting
linked luist::linked luist
luist datastructure::luist datastructure
datatype implementation::datatype implementation
asbstract datatype::asbstract datatype
luist methods::luist methods
efficient implement::efficient implement
sequence abstract::sequence abstract
vector abstract::vector abstract
element list::element list
list data::list data
multiple inheritance::multiple inheritance
vector list::vector list
abstract dat::abstract dat
dat type::dat type
additional methods::additional methods
suite connect::suite connect
rank return::rank return
position correspond::position correspond
array refers::array refers
rank corresponds::rank corresponds
method implement::method implement
implement rank::implement rank
procedure position::procedure position
element store::element store
case newyork::case newyork
cross reference::cross reference
change rank::change rank
rank move::rank move
move step::move step
sequence operations::sequence operations
implement sequence::implement sequence
array implementation::array implementation
element ceratin::element ceratin
ceratin rank::ceratin rank
rank figure::rank figure
rank based::rank based
rank find::rank find
class today::class today
learnt today::learnt today
sequence data::sequence data
types sequence::types sequence
last::last
lecture::lecture
looked::looked
stacks::stacks
data::data
type::type
implement::implement
array::array
today::today
queues::queues
linked::linked
list::list
queue::queue
right::right
noise::noise
disadvantage::disadvantage
fixed::fixed
size::size
knew::knew
maximum::maximum
idea::idea
method::method
class::class
increases::increases
allotted::allotted
double::double
implementation::implementation
assume::assume
familiar::familiar
previous::previous
essentially::essentially
blinked::blinked
nodes::nodes
pointers::pointers
basically::basically
referring::referring
referred::referred
tail::tail
node::node
element::element
question::question
front::front
first::first
remove::remove
problem::problem
removing::removing
note::note
permit::permit
directly::directly
change::change
pointer::pointer
accessing::accessing
removal::removal
done::done
sitting::sitting
call::call
lets::lets
methods::methods
suppose::suppose
dequeue::dequeue
means::means
left::left
rear::rear
head::head
point::point
removed::removed
increment::increment
making::making
manner::manner
delete::delete
easily::easily
insert::insert
create::create
connected::connected
make::make
inserting::inserting
easy::easy
operation::operation
kind::kind
move::move
step::step
add::add
enqueue::enqueue
recall::recall
modified::modified
update::update
null::null
discuss::discuss
difficult::difficult
constant::constant
access::access
start::start
beginning::beginning
throw::throw
entire::entire
expensive::expensive
worth::worth
concern::concern
singly::singly
good::good
ended::ended
repeatedly::repeatedly
solution::solution
doubly::doubly
two::two
sentinel::sentinel
minute::minute
pointing::pointing
operations::operations
trail::trail
follow::follow
port::port
set::set
trailer::trailer
applied::applied
header::header
dummy::dummy
don::don
inside::inside
dare::dare
mark::mark
end::end
answering::answering
san::san
franchiso::franchiso
out::out
makes::makes
hindi::hindi
thing::thing
shown::shown
understand::understand
questions::questions
independent::independent
number::number
elements::elements
running::running
depend::depend
fairly::fairly
generic::generic
types::types
stack::stack
instance::instance
top::top
correspond::correspond
return::return
push::push
pop::pop
deleting::deleting
sacrificing::sacrificing
year::year
case::case
corresponds::corresponds
empty::empty
structures::structures
circularly::circularly
simple::simple
points::points
circular::circular
structure::structure
guy::guy
straight::straight
forward::forward
created::created
copy::copy
copying::copying
costly::costly
reference::reference
contents::contents
rome::rome
seatle::seatle
part::part
quickly::quickly
sequences::sequences
vectors::vectors
talk::talk
positions::positions
general::general
sequence::sequence
arrays::arrays
lists::lists
vector::vector
support::support
notion::notion
rank::rank
eleven::eleven
thirteen::thirteen
nineteen::nineteen
fourth::fourth
give::give
integers::integers
asked::asked
replaces::replaces
great::great
happen::happen
student::student
departmental::departmental
four::four
department::department
natural::natural
whats::whats
put::put
shift::shift
doing::doing
loop::loop
moving::moving
minus::minus
statement::statement
moved::moved
finally::finally
pushed::pushed
increased::increased
stores::stores
similarly::similarly
shifting::shifting
starting::starting
location::location
posi::posi
worst::worst
order::order
view::view
faster::faster
rth::rth
retrive::retrive
theelements::theelements
replace::replace
chart::chart
shows::shows
complexity::complexity
inserted::inserted
implementing::implementing
showing::showing
process::process
insertion::insertion
issues::issues
find::find
seventeen::seventeen
position::position
java::java
code::code
assuming::assuming
existence::existence
procedure::procedure
finding::finding
shortly::shortly
tells::tells
earlier::earlier
field::field
place::place
check::check
intimated::intimated
original::original
slides::slides
web::web
show::show
deletion::deletion
rid::rid
write::write
march::march
incrementing::incrementing
counter::counter
reach::reach
small::small
improvement::improvement
hundred::hundred
staring::staring
form::form
concerned::concerned
usen::usen
require::require
supporting::supporting
based::based
efficient::efficient
provide::provide
mention::mention
sense::sense
telling::telling
implemented::implemented
stuff::stuff
hide::hide
things::things
information::information
knowing::knowing
actual::actual
implementations::implementations
abstract::abstract
intuitively::intuitively
stored::stored
captures::captures
object::object
situated::situated
fields::fields
implementer::implementer
hides::hides
details::details
related::related
node50.53::node50.53
refers::refers
post::post
ition::ition
define::define
datatype::datatype
ruight::ruight
abtstract::abtstract
meythods::meythods
havce::havce
query::query
hacve::hacve
whoich::whoich
asks::asks
positionoif::positionoif
excessive::excessive
dfirst::dfirst
lsat::lsat
geive::geive
postion::postion
swap::swap
elemts::elemts
key::key
swaps::swaps
elemtsn::elemtsn
wswaps::wswaps
elemtn::elemtn
uinsert::uinsert
onya::onya
luist::luist
datastructure::datastructure
caprture::caprture
yuou::yuou
asbstract::asbstract
linear::linear
talked::talked
combines::combines
inherits::inherits
interfaces::interfaces
multiple::multiple
inheritance::inheritance
listed::listed
dat::dat
additional::additional
suite::suite
connect::connect
identify::identify
determine::determine
gave::gave
store::store
newyork::newyork
cross::cross
sit::sit
ranks::ranks
wanted::wanted
leave::leave
exercise::exercise
comparison::comparison
picture::picture
previously::previously
ceratin::ceratin
zap::zap
context::context
figure::figure
stop::stop
learnt::learnt
ise::ise
concretization::concretization
inheriting::inheriting
