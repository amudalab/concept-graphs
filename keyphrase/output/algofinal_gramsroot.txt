design and analysis::design and analysis
analysis of algorithms::analysis of algorithms
algorithms prof abhiram::algorithms prof abhiram
prof abhiram ranade::prof abhiram ranade
abhiram ranade computer::abhiram ranade computer
ranade computer science::ranade computer science
computer science engineering::computer science engineering
science engineering department::science engineering department
engineering department indian::engineering department indian
department indian institute::department indian institute
institute of technology::institute of technology
give also convey::give also convey
convey a spirit::convey a spirit
easy to design::easy to design
cleverness is needed::cleverness is needed
needed and designing::needed and designing
algorithms which give::algorithms which give
answers very quickly::answers very quickly
main course goal::main course goal
design of fast::design of fast
defined design techniques::defined design techniques
study these techniques::study these techniques
lots of exercises::lots of exercises
apply these ideas::apply these ideas
solve algorithm design::solve algorithm design
algorithm design problems::algorithm design problems
done some amount::done some amount
amount of programming::amount of programming
scheme or basic::scheme or basic
discrete mathematics background::discrete mathematics background
build the model::build the model
analytical will build::analytical will build
build a model::build a model
build a mathematical::build a mathematical
study their properties::study their properties
properties of algorithms::properties of algorithms
reason about algorithms::reason about algorithms
mathematically prove properties::mathematically prove properties
properties the emphasis::properties the emphasis
proof prove properties::proof prove properties
properties about speed::properties about speed
speed say prove::speed say prove
number of things::number of things
give an overview::give an overview
develop the basic::develop the basic
define the mathematical::define the mathematical
fairly long stretch::fairly long stretch
stretch which involves::stretch which involves
techniques for designing::techniques for designing
designing fast algorithms::designing fast algorithms
algorithms while doing::algorithms while doing
surveying many problems::surveying many problems
problems from optimization::problems from optimization
optimization graph theory::optimization graph theory
theory some problems::theory some problems
problems from geometry::problems from geometry
algorithm design techniques::algorithm design techniques
design really god::design really god
algorithms our techniques::algorithms our techniques
fairly intricate theory::fairly intricate theory
theory has developed::theory has developed
last several year::last several year
studying this theory::studying this theory
topic for today::topic for today
today the main::today the main
convey the spirit::convey the spirit
fairly simple problem::fairly simple problem
trouble in understanding::trouble in understanding
state that problem::state that problem
find their greatest::find their greatest
greatest common divisor::greatest common divisor
understands this problem::understands this problem
learnt in school::learnt in school
taught in first::taught in first
standard or fourth::standard or fourth
find the greatest::find the greatest
study another algorithm::study another algorithm
geometry yes euclid::geometry yes euclid
euclid did invent::euclid did invent
invent this algorithm::invent this algorithm
understand that euclid::understand that euclid
simple school level::simple school level
school level algorithm::school level algorithm
algorithm for factoring::algorithm for factoring
integer that divides::integer that divides
leaving a reminder::leaving a reminder
means finding primes::means finding primes
write it separately::write it separately
identify common factors::identify common factors
multiply and return::multiply and return
return the result::return the result
invent a pseudo::invent a pseudo
write down algorithms::write down algorithms
express your algorithms::express your algorithms
suitable nicest syntax::suitable nicest syntax
calculate the remainder::calculate the remainder
set n equals::set n equals
inside the loop::inside the loop
eventually this loop::eventually this loop
return the value::return the value
doing some divisions::doing some divisions
divisions and taking::divisions and taking
taking some remainders::taking some remainders
greatest common divisors::greatest common divisors
product of prime::product of prime
thing we start::thing we start
identify what factors::identify what factors
factors are common::factors are common
common the common::common the common
school level stuff::school level stuff
enter the loop::enter the loop
calculate r equals::calculate r equals
equals n mod::equals n mod
takes the value::takes the value
point the iteration::point the iteration
iteration has ended::iteration has ended
point our iteration::point our iteration
out the loop::out the loop
exit the loop::exit the loop
return the current::return the current
collect common factors::collect common factors
multiply the factors::multiply the factors
return the answer::return the answer
divided it checked::divided it checked
found that answer::found that answer
false the division::false the division
exchanged the numbers::exchanged the numbers
summarize the work::summarize the work
level very simple::level very simple
simple factoring algorithm::simple factoring algorithm
done less work::done less work
algorithm in fact::algorithm in fact
returning the correct::returning the correct
factorize these numbers::factorize these numbers
back to euclid::back to euclid
compute the reminder::compute the reminder
exchange values basically::exchange values basically
iteration of euclid::iteration of euclid
began this iteration::began this iteration
leaving the remainder::leaving the remainder
enter this iteration::enter this iteration
set n equal::set n equal
out r equals::out r equals
matter of setting::matter of setting
equal the value::equal the value
back and execute::back and execute
execute this loop::execute this loop
fact does divide::fact does divide
point the loop::point the loop
iterations what happened::iterations what happened
division per iteration::division per iteration
problem m equals::problem m equals
divisions to calculate::divisions to calculate
correct to check::correct to check
substantially many divisions::substantially many divisions
require many divisions::require many divisions
bigger and bigger::bigger and bigger
bigger numbers factoring::bigger numbers factoring
lot more work::lot more work
divisions then numbers::divisions then numbers
smaller and smaller::smaller and smaller
algorithm will terminate::algorithm will terminate
argue that euclid::argue that euclid
algorithm actually works::algorithm actually works
fairly very detail::fairly very detail
idea the main::idea the main
fact about divisibility::fact about divisibility
divisibility and remainder::divisibility and remainder
remainder and things::remainder and things
number which divides::number which divides
mention the main::mention the main
idea is suppose::idea is suppose
prime having written::prime having written
iteration the loop::iteration the loop
part of euclid::part of euclid
calculates the fact::calculates the fact
essentially n mod::essentially n mod
essentially this term::essentially this term
argument is set::argument is set
fact the proof::fact the proof
proof of euclid::proof of euclid
algorithm the correctness::algorithm the correctness
correctness of euclid::correctness of euclid
loop will exit::loop will exit
continues to remain::continues to remain
loop in fact::loop in fact
loop should terminate::loop should terminate
fairly straight forward::fairly straight forward
loop is executing::loop is executing
initially the values::initially the values
taking some values::taking some values
step is calculating::step is calculating
loop the value::loop the value
decrease how long::decrease how long
value is returned::value is returned
proves that euclid::proves that euclid
algorithm is correct::algorithm is correct
runs reasonably quick::runs reasonably quick
purpose of analysis::purpose of analysis
wrote will work::wrote will work
make this call::make this call
exchanging these values::exchanging these values
values the first::values the first
spent for exchanging::spent for exchanging
good as assume::good as assume
assume in fact::assume in fact
wills the euclid::wills the euclid
state the main::state the main
prove the main::prove the main
make a distinction::make a distinction
euclid with values::euclid with values
iteration the sum::iteration the sum
values of variables::values of variables
sum will drop::sum will drop
drop very fast::drop very fast
number of iterations::number of iterations
iterations this establishes::iterations this establishes
iterations is equal::iterations is equal
equal to log::equal to log
theorem will put::theorem will put
put a good::put a good
good upper bound::good upper bound
iterations that euclid::iterations that euclid
prove this theorem::prove this theorem
iterations euclid takes::iterations euclid takes
beginning of iteration::beginning of iteration
value p prime::value p prime
prime n takes::prime n takes
takes that value::takes that value
value q prime::value q prime
express p prime::express p prime
prime in terms::prime in terms
computes r equals::computes r equals
mod old value::mod old value
simply q mod::simply q mod
thing p prime::thing p prime
fact in addition::fact in addition
concerns p prime::concerns p prime
remainder plus divisor::remainder plus divisor
wanted p prime::wanted p prime
prime is equal::prime is equal
matter of algebra::matter of algebra
multiply this last::multiply this last
matter of simplifying::matter of simplifying
times p prime::times p prime
sum has reduced::sum has reduced
factor of two-thirds::factor of two-thirds
halves that concludes::halves that concludes
concludes the analysis::concludes the analysis
algorithm will execute::algorithm will execute
fairly small number::fairly small number
number of steps::number of steps
conclude this lecture::conclude this lecture
lecture and highlight::lecture and highlight
highlight the main::highlight the main
algorithms the school::algorithms the school
interesting deeper properties::interesting deeper properties
deeper properties deeper::deeper properties deeper
properties deeper mathematical::properties deeper mathematical
deeper mathematical properties::deeper mathematical properties
helps in designing::helps in designing
analysis counting iterations::analysis counting iterations
marks the end::marks the end
abhiram ranade department::abhiram ranade department
department of computer::department of computer
science engineering indian::science engineering indian
engineering indian institute::engineering indian institute
framework for algorithms::framework for algorithms
algorithms in today::algorithms in today
develop a framework::develop a framework
framework for algorithm::framework for algorithm
designing many algorithms::designing many algorithms
algorithms for solving::algorithms for solving
kinds of problems::kinds of problems
compare these algorithms::compare these algorithms
sound mathematical bases::sound mathematical bases
design a formal::design a formal
lectures the framework::lectures the framework
comparing the execution::comparing the execution
comparing other resources::comparing other resources
amounts of memory::amounts of memory
compare the memory::compare the memory
algorithms the basic::algorithms the basic
idea in designing::idea in designing
kind of analysis::kind of analysis
bit more formal::bit more formal
make a mathematical::make a mathematical
execute that algorithm::execute that algorithm
involved in doing::involved in doing
doing the analysis::doing the analysis
model for computer::model for computer
execute our algorithm::execute our algorithm
specific real computer::specific real computer
mentally will imagine::mentally will imagine
mentally execute algorithm::mentally execute algorithm
algorithm on computer::algorithm on computer
model and evaluate::model and evaluate
develop in order::develop in order
order to develop::order to develop
answer several questions::answer several questions
algorithm might perform::algorithm might perform
execute the algorithm::execute the algorithm
algorithms will require::algorithms will require
data some input::data some input
extremely important question::extremely important question
execution in general::execution in general
general will depend::general will depend
make mathematical models::make mathematical models
relate to real::relate to real
apply to real::apply to real
answer these questions::answer these questions
finish our development::finish our development
start by discussing::start by discussing
fairly basic terms::fairly basic terms
formally some basic::formally some basic
present our mathematical::present our mathematical
general overall analysis::general overall analysis
taking a number::taking a number
number of examples::number of examples
examples of algorithms::examples of algorithms
mathematical model relate::mathematical model relate
discuss these points::discuss these points
day to day::day to day
things in scientific::things in scientific
important to fix::important to fix
fix the meanings::fix the meanings
first very common::first very common
give a definition::give a definition
give some examples::give some examples
motivate this definition::motivate this definition
problem of computing::problem of computing
computing the gcd::computing the gcd
problem of finding::problem of finding
finding the shortest::finding the shortest
finding the meaning::finding the meaning
typically certain input::typically certain input
city say aurangabad::city say aurangabad
supply which map::supply which map
western india automobile::western india automobile
india automobile association::india automobile association
automobile association map::automobile association map
definition for finding::definition for finding
finding a word::finding a word
supply the word::supply the word
supply an actual::supply an actual
actual x ray::actual x ray
case the output::case the output
evolution for finding::evolution for finding
evolution the output::evolution the output
constitute acceptable outputs::constitute acceptable outputs
outputs ? acceptable::outputs ? acceptable
constitute valid inputs::constitute valid inputs
shortest path names::shortest path names
constitutes a valid::constitutes a valid
input and acceptable::input and acceptable
sense as input::sense as input
sense as inputs::sense as inputs
phrase input instance::phrase input instance
valid input value::valid input value
instance for problem::instance for problem
constitute an instance::constitute an instance
gcd problem mumbai::gcd problem mumbai
problem mumbai aurangabad::problem mumbai aurangabad
aurangabad and map::aurangabad and map
shortest path problem::shortest path problem
term input instance::term input instance
stick with instance::stick with instance
number of bits::number of bits
needed to represent::needed to represent
represent the input::represent the input
specific input instance::specific input instance
constitutes the input::constitutes the input
bits are needed::bits are needed
represented in binary::represented in binary
map is concerned::map is concerned
represent the map::represent the map
general a map::general a map
inconvenient for directives::inconvenient for directives
parameter which grows::parameter which grows
roughly the growth::roughly the growth
notion of size::notion of size
definition of size::definition of size
simply the sum::simply the sum
bits in fact::bits in fact
analyzed the gcd::analyzed the gcd
size the sum::size the sum
algorithm will increase::algorithm will increase
evaluate an algorithm::evaluate an algorithm
takes a long::takes a long
instance of large::instance of large
number of roads::number of roads
number of cities::number of cities
finding a shortest::finding a shortest
involves one road::involves one road
algorithm which takes::algorithm which takes
takes us takes::takes us takes
takes a small::takes a small
map which consists::map which consists
problem the size::problem the size
dictionary the number::dictionary the number
number of words::number of words
ray and convert::ray and convert
phrase problem size::phrase problem size
denote the size::denote the size
hear the phrase::hear the phrase
discuss is algorithm::discuss is algorithm
abstract computational procedure::abstract computational procedure
procedure which takes::procedure which takes
takes some value::takes some value
value or values::value or values
values as input::values as input
input and produces::input and produces
produces a value::produces a value
values as output::values as output
abstract in order::abstract in order
order to denote::order to denote
algorithm might give::algorithm might give
languages a program::languages a program
concrete and algorithms::concrete and algorithms
eve for discussing::eve for discussing
rules for syntax::rules for syntax
convey that idea::convey that idea
basic our goal::basic our goal
description of algorithms::description of algorithms
beings can understand::beings can understand
fairly great level::fairly great level
level of detail::level of detail
abbreviate our descriptions::abbreviate our descriptions
met the reason::met the reason
reason for describing::reason for describing
write the program::write the program
program will execute::program will execute
purpose another important::purpose another important
easy to analyze::easy to analyze
analyze how long::analyze how long
describe our mathematical::describe our mathematical
ram and ram::ram and ram
stands for random::stands for random
random access machine::random access machine
simplified computer model::simplified computer model
memory the memory::memory the memory
correction of locations::correction of locations
array with numbers::array with numbers
locations by assigning::locations by assigning
assigning by describing::assigning by describing
describing the number::describing the number
inconvenient in general::inconvenient in general
describe the ram::describe the ram
program the ram::program the ram
thing to notice::thing to notice
model contains locations::model contains locations
addressed by numbers::addressed by numbers
fact allow variable::fact allow variable
value is contained::value is contained
contained in variable::contained in variable
value we stored::value we stored
variety of data::variety of data
simple plain simple::simple plain simple
plain simple variables::plain simple variables
two as sort::two as sort
primitive data types::primitive data types
write down simple::write down simple
addition of course::addition of course,
things like trees::things like trees
memory is concerned::memory is concerned
store the program::store the program
program and data::program and data
number of instructions::number of instructions
assume for simplicity::assume for simplicity
groups of instructions::groups of instructions
group is arithmetic::group is arithmetic
arithmetic and logical::arithmetic and logical
locations from memory::locations from memory
add their contents::add their contents
contents and deposit::contents and deposit
friendly pleasant manner::friendly pleasant manner
taking two operands::taking two operands
put them back::put them back
jumps and conditional::jumps and conditional
allowed to write::allowed to write
defining our model::defining our model
definition reasonably simple::definition reasonably simple
make another comment::make another comment
group of instructions::group of instructions
talking about concerns::talking about concerns
structured programming presenting::structured programming presenting
presenting the algorithms::presenting the algorithms
nice readable manner::nice readable manner
talk about machines::talk about machines
basic instruction set::basic instruction set
cycles of execution::cycles of execution
call as pointer::call as pointer
style pointer notation::style pointer notation
fetch that location::fetch that location
location whose value::location whose value
contained that location::contained that location
location whose address::location whose address
address is contained::address is contained
based on pointers::based on pointers
pointers and arrays::pointers and arrays
arrays a lot::arrays a lot
machine our random::machine our random
similar consistent manner::similar consistent manner
put down array::put down array
back to arrays::back to arrays
make one comment::make one comment
arrays and structures::arrays and structures
structures will assume::structures will assume
assume the usual::assume the usual
representation of arrays::representation of arrays
array has size::array has size
array is stored::array is stored
locations in memory::locations in memory
structure which consists::structure which consists
memory so coming::memory so coming
memory a processor::memory a processor
processor whose basic::processor whose basic
memory which consists::memory which consists
collection of bits::collection of bits
matter what number::matter what number
basic algorithmic actions::basic algorithmic actions
complex algorithmic actions::complex algorithmic actions
actions more complex::actions more complex
complex algorithmic statements::complex algorithmic statements
instructions or statements::instructions or statements
times d minus::times d minus
out elementary instructions::out elementary instructions
fetch the value::fetch the value
takes one step::takes one step
fetch c equals::fetch c equals
compute z equals::compute z equals
computed their sum::computed their sum
statement well simple::statement well simple
four machine instructions::four machine instructions
steps during execution::steps during execution
multi dimensional arrays::multi dimensional arrays
two dimensional arrays::two dimensional arrays
arrays are stored::arrays are stored
arrays are built::arrays are built
built on top::built on top
two dimensional array::two dimensional array
array is indexed::array is indexed
indexed c style::indexed c style
number of elements::number of elements
stored row wise::stored row wise
wise many possibilities::wise many possibilities
accessing some element::accessing some element
array we access::array we access
access in order::access in order
order to access::order to access
element of array::element of array
row i column::row i column
prime which element::prime which element
simply i times::simply i times
number of columns::number of columns
problem of accounting::problem of accounting
equals a prime::equals a prime
plain indirect axis::plain indirect axis
structured computing statements::structured computing statements
translate these instructions::translate these instructions
write i equal::write i equal
end of loop::end of loop
write y equals::write y equals
store it back::store it back
number these statements::number these statements
out of loop::out of loop
purpose of accounting::purpose of accounting
accounting is concerned::accounting is concerned
analyze this code::analyze this code
times will statement::times will statement
executed n times::executed n times
times this loop::times this loop
needed to execute::needed to execute
steps is needed::steps is needed
number of arguments::number of arguments
equal to number::equal to number
passed by reference::passed by reference
reference which means::reference which means
passed by value::passed by value
concludes the description::concludes the description
number of issues::number of issues
relates to reality::relates to reality
reality are real::reality are real
relevant for real::relevant for real
engineering indian institution::engineering indian institution
institution of technology::institution of technology
algorithm analysis framework::algorithm analysis framework
developing algorithm analysis::developing algorithm analysis
analysis framework part::analysis framework part
framework part two::framework part two
defined an abstract::defined an abstract
abstract computer model::abstract computer model
model called ram::model called ram
stored in memory::stored in memory
memory would include::memory would include
things like variables::things like variables
arrays the usual::arrays the usual
separate program memory::separate program memory
mention which instructions::mention which instructions
instructions are important::instructions are important
basically the instruction::basically the instruction
form a equals::form a equals
kind of instructions::kind of instructions
kind of instruction::kind of instruction
instructions or jump::instructions or jump
instructions or control::instructions or control
control transfer instructions::control transfer instructions
instructions and conditional::instructions and conditional
operations or array::operations or array
array or pointer::array or pointer
equals b index::equals b index
instruction is sort::instruction is sort
standard array axis::standard array axis
instructions those algorithms::instructions those algorithms
estimate the total::estimate the total
goal for today::goal for today
outline for today::outline for today
start by comparing::start by comparing
comparing our ram::comparing our ram
model with real::model with real
make a difference::make a difference
sake of completeness::sake of completeness
define our general::define our general
strategy for algorithm::strategy for algorithm
summary as usual::summary as usual
sense this differs::sense this differs
differs from real::differs from real
unlike our random::unlike our random
single memory real::single memory real
memory real computer::memory real computer
kinds of memory::kinds of memory
call main memory::call main memory
memory called cache::memory called cache
heard of cache::heard of cache
memory most computer::memory most computer
advertisements do talk::advertisements do talk
registers register memory::registers register memory
tricky complication arises::tricky complication arises
computers these days::computers these days
stages of execution::stages of execution
essentially this means::essentially this means
fairly complicated idea::fairly complicated idea
idea and analyzing::idea and analyzing
analyzing this idea::analyzing this idea
extent these complications::extent these complications
defined an instruction::defined an instruction
machine the instruction::machine the instruction
set for real::set for real
instructions which transfer::instructions which transfer
memory to memory::memory to memory
memory instructions memory::memory instructions memory
memory or memory::memory or memory
memory to register::memory to register
register copying instructions::register copying instructions
done in registers::done in registers
ram our abstract::ram our abstract
variable in memory::variable in memory
contained in register::contained in register
main memory location::main memory location
location just stress::location just stress
main memory locations::main memory locations
directly with data::directly with data
stored in main::stored in main
differences between real::differences between real
program which consists::program which consists
translator would operate::translator would operate
extract the value::extract the value
directly on array::directly on array
loaded say temp::loaded say temp
instructions in translation::instructions in translation
statement a simple::statement a simple
simple minded translator::simple minded translator
equals or temp::equals or temp
result a high::result a high
high level language::high level language
level language statement::level language statement
sequence of high::sequence of high
number of statements::number of statements
compiler would translate::compiler would translate
translate the first::translate the first
first statement translation::first statement translation
translation would require::translation would require
require a fetching::require a fetching
require a fetch::require a fetch
transfer an intelligent::transfer an intelligent
compiler would realize::compiler would realize
algorithms an intelligent::algorithms an intelligent
compiler which sets::compiler which sets
level language algorithm::level language algorithm
level language program::level language program
idealized model applies::idealized model applies
applies to real::applies to real
make this application::make this application
general analysis strategy::general analysis strategy
strategy our measure::strategy our measure
denote the maximum::denote the maximum
instance of size::instance of size
call it algorithm::call it algorithm
solve any instance::solve any instance
sorting a data::sorting a data
set the size::set the size
number of values::number of values
algorithm is doing::algorithm is doing
instances of size::instances of size
value in principle::value in principle
determine that value::determine that value
value by executing::value by executing
executing our algorithm::executing our algorithm
measure of goodness::measure of goodness
algorithm a notice::algorithm a notice
evaluating a single::evaluating a single
good this algorithm::good this algorithm
job to find::job to find
out which algorithm::out which algorithm
definition the first::definition the first
inputs of size::inputs of size
difficult to perform::difficult to perform
primarily the reason::primarily the reason
life with equal::life with equal
taking that average::taking that average
taking an average::taking an average
introduces an extra::introduces an extra
worst case measure::worst case measure
relates to real::relates to real
earlier we pointed::earlier we pointed
out the differences::out the differences
computers and rams::computers and rams
ram might correspond::ram might correspond
arises whatever analysis::arises whatever analysis
consequence for real::consequence for real
point the important::point the important
precise the precise::precise the precise
consequence of real::consequence of real
computers and real::computers and real
function being linear::function being linear
run your algorithm::run your algorithm
interested in characterizing::interested in characterizing
characterizing the algorithm::characterizing the algorithm
pick a measure::pick a measure
measure which depends::measure which depends
give exact bounds::give exact bounds
bound and lower::bound and lower
lower bound match::lower bound match
match then great::match then great
great our analysis::great our analysis
analysis is complete::analysis is complete
live with incomplete::live with incomplete
incomplete our work::incomplete our work
work done incomplete::work done incomplete
incomplete and bridging::incomplete and bridging
bridging the difference::bridging the difference
subject of research::subject of research
solving large problems::solving large problems
problems become larger::problems become larger
larger and larger::larger and larger
larger which algorithm::larger which algorithm
answer that question::answer that question
question very quickly::question very quickly
quadratic time algorithm::quadratic time algorithm
algorithm is worse::algorithm is worse
linear time algorithm::linear time algorithm
idea is justified::idea is justified
computers to solve::computers to solve
solve large problems::solve large problems
problem is small::problem is small
fast these days::fast these days
algorithm is good::algorithm is good
algorithm is bad::algorithm is bad
examples to make::examples to make
make these ideas::make these ideas
ideas more concrete::ideas more concrete
concrete the first::concrete the first
multiplication our input::multiplication our input
usual matrix product::usual matrix product
defined as summation::defined as summation
algorithms for matrix::algorithms for matrix
size of dimension::size of dimension
matrices are represented::matrices are represented
calculate the value::calculate the value
out how long::out how long
long this takes::long this takes
access machine ram::access machine ram
thing to note::thing to note
note in analyzing::note in analyzing
analyzing this algorithm::analyzing this algorithm
typical of algorithms::typical of algorithms
chosen this algorithm::chosen this algorithm
illustrate the analysis::illustrate the analysis
analyzing more complex::analyzing more complex
takes b steps::takes b steps
remember these numbers::remember these numbers
pretty exact analysis::pretty exact analysis
exact analysis knowing::exact analysis knowing
analysis is important::analysis is important
understood the ram::understood the ram
ram model completely::ram model completely
details is important::details is important
analyze without doing::analyze without doing
doing without paying::doing without paying
stick to exact::stick to exact
needed from last::needed from last
array an element::array an element
array it takes::array it takes
ideas to analyze::ideas to analyze
analyze our program::analyze our program
program our algorithm::program our algorithm
two arithmetic operations::two arithmetic operations
single a single::single a single
statement itself forget::statement itself forget
forget the loops::forget the loops
steps no matter::steps no matter
comprises the body::comprises the body
takes an additional::takes an additional
loop the total::loop the total
formula for body::formula for body
loop in terms::loop in terms
body and number::body and number
made a mistake::made a mistake
mistake in doing::mistake in doing
doing this arithmetic::doing this arithmetic
arithmetic the expression::arithmetic the expression
times n cube::times n cube
times n square::times n square
execute this algorithm::execute this algorithm
instructions could change::instructions could change
number of basic::number of basic
change the fact::change the fact
loop must execute::loop must execute
execute n times::execute n times
compiler this fact::compiler this fact
execute the outer::execute the outer
outer most loop::outer most loop
run this program::run this program
write down sort::write down sort
form a times::form a times
precisely the level::precisely the level
level of exactness::level of exactness
analyze an algorithm::analyze an algorithm
analyze a computer::analyze a computer
make this statement::make this statement
statement which sounds::statement which sounds
sounds almost qualitative::sounds almost qualitative
cubic or quadratic::cubic or quadratic
quadratic or linear::quadratic or linear
weak looking statement::weak looking statement
kind of statement::kind of statement
computers the important::computers the important
making a weak::making a weak
pentium whatever computer::pentium whatever computer
talk about computers::talk about computers
precise computer architectures::precise computer architectures
talk about algorithms::talk about algorithms
long an algorithm::long an algorithm
illustrate this idea::illustrate this idea
idea of analysis::idea of analysis
finding the median::finding the median
median the input::median the input
out the median::out the median
element which appears::element which appears
smaller than utmost::smaller than utmost
elements and larger::elements and larger
larger than utmost::larger than utmost
program for finding::program for finding
satisfies the median::satisfies the median
number of smaller::number of smaller
elements is utmost::elements is utmost
number of larger::number of larger
element in turn::element in turn
elements is equal::elements is equal
initialize the number::initialize the number
found an element::found an element
increment the count::increment the count
count for larger::count for larger
larger that ends::larger that ends
median in fact::median in fact
repeat we repeat::repeat we repeat
exercise to show::exercise to show
executes n times::executes n times
focus our attention::focus our attention
utmost n times::utmost n times
make a simple::make a simple
assumption a simplifying::assumption a simplifying
calculate an upper::calculate an upper
business of calculating::business of calculating
calculating an upper::calculating an upper
clever in analyzing::clever in analyzing
make this assumption::make this assumption
finishes the analysis::finishes the analysis
function is smaller::function is smaller
order to complete::order to complete
complete this analysis::complete this analysis
met or met::met or met
numbers are distinct::numbers are distinct
instance it takes::instance it takes
strategy this strategy::strategy this strategy
strategy is based::strategy is based
notion of worst::notion of worst
worst case analysis::worst case analysis
equal to real::equal to real
leave it leave::leave it leave
algorithms our topic::algorithms our topic
today is asymptotic::today is asymptotic
begin by setting::begin by setting
main course goals::main course goals
first design algorithms::first design algorithms
needed in understanding::needed in understanding
order to predict::order to predict
entire detailed analysis::entire detailed analysis
analysis not applicable::analysis not applicable
interpretation our conclusions::interpretation our conclusions
computers at large::computers at large
define the notion::define the notion
notion of classes::notion of classes
classes of functions::classes of functions
lot more systematic::lot more systematic
systematic and formal::systematic and formal
goal of today::goal of today
develop the notation::develop the notation
nicely about classes::nicely about classes
notation to speak::notation to speak
speak about functions::speak about functions
functions and classify::functions and classify
classify them asymptotic::classify them asymptotic
asymptotic analysis refers::asymptotic analysis refers
question of classifying::question of classifying
functions or classifying::functions or classifying
classifying the behavior::classifying the behavior
out by writing::out by writing
kinds of features::kinds of features
nicely ignore constant::nicely ignore constant
ignore constant multipliers::ignore constant multipliers
multipliers our class::multipliers our class
give more importance::give more importance
importance to behavior::importance to behavior
out first property::out first property
property or first::property or first
notation a class::notation a class
give an outline::give an outline
outline of today::outline of today
define three main::define three main
kinds of notation::kinds of notation
define function classes::define function classes
lots of examples::lots of examples
series of examples::series of examples
non negative values::non negative values
negative values functions::negative values functions
functions of non::functions of non
non negative arguments::non negative arguments
kind of resource::kind of resource
occasion when functions::occasion when functions
non negative function::non negative function
structure we defined::structure we defined
worried about smaller::worried about smaller
draw a picture::draw a picture
plot the function::plot the function
claim our requirement::claim our requirement
occupies this region::occupies this region
inside anywhere inside::inside anywhere inside
class theta times::class theta times
essentially it behaves::essentially it behaves
belongs to theta::belongs to theta
class n cube::class n cube
developing a class::developing a class
order to classify::order to classify
classify a function::classify a function
set of functions::set of functions
find suitable constants::find suitable constants
find these suitable::find these suitable
suitable a constant::suitable a constant
properties are met::properties are met
naught having found::naught having found
satisfy the properties::satisfy the properties
connotation of cubic::connotation of cubic
form something times::form something times
write fully claim::write fully claim
functions or class::functions or class
class of functions::class of functions
ignoring constant factors::ignoring constant factors
large this term::large this term
dominate this term::dominate this term
times n log::times n log
fairly easy task::fairly easy task
slightly more complicated::slightly more complicated
asymptotic complexity class::asymptotic complexity class
belonging to theta::belonging to theta
function which returns::function which returns
two n cube::two n cube
worry about constant::worry about constant
defined the first::defined the first
goals we set::goals we set
science and mathematics::science and mathematics
funny style evolved::funny style evolved
classes is concerned::classes is concerned
suppose f belongs::suppose f belongs
common writing style::common writing style
equal to theta::equal to theta
tradition in computer::tradition in computer
equal to operator::equal to operator
english language words::english language words
rose is red::rose is red
class of red::class of red
set of red::set of red
equals to theta::equals to theta
guess in poetic::guess in poetic
red is rose::red is rose
functions as functions::functions as functions
sort of understood::sort of understood
variable the argument::variable the argument
emphasize the fact::emphasize the fact
god to write::god to write
simply the theta::simply the theta
satisfying our basic::satisfying our basic
definition of theta::definition of theta
class omega relaxes::class omega relaxes
relaxes the lower::relaxes the lower
lower bound condition::lower bound condition
condition and omega::condition and omega
relaxes the upper::relaxes the upper
upper bound condition::upper bound condition
omega the lower::omega the lower
condition is present::condition is present
count the number::count the number
satisfying this condition::satisfying this condition
make this point::make this point
point the class::point the class
put it put::put it put
put the unknown::put the unknown
expressing that upper::expressing that upper
expressing this knowledge::expressing this knowledge
belongs to omega::belongs to omega
bounds in terms::bounds in terms
function f belongs::function f belongs
guessed the class::guessed the class
simply the union::simply the union
square in fact::square in fact
bigger than theta::bigger than theta
cube similar logic::cube similar logic
class no surprise::class no surprise
lower order terms::lower order terms
main functions classes::main functions classes
defined these classes::defined these classes
plain old function::plain old function
functions could denote::functions could denote
define a general::define a general
equal to summation::equal to summation
requires some amount::requires some amount
amount of cleverness::amount of cleverness
belongs to class::belongs to class
determine the class::determine the class
right away puts::right away puts
ignore the first::ignore the first
term by term::term by term
term this series::term this series
series this sum::series this sum
sum is bigger::sum is bigger
positive real number::positive real number
require exceptional cleverness::require exceptional cleverness
evaluate a function::evaluate a function
stated in terms::stated in terms
home work prove::home work prove
cube the proof::cube the proof
make that claim::make that claim
nth fibonacci number::nth fibonacci number
proving this exact::proving this exact
takes a lot::takes a lot
omega of root::omega of root
commonly called exponential::commonly called exponential
fibonacci number grow::fibonacci number grow
number grow exponentially::number grow exponentially
involves essentially involves::involves essentially involves
essentially involves finding::essentially involves finding
out a precise::out a precise
express our knowledge::express our knowledge
knowledge or lack::knowledge or lack
notation these capture::notation these capture
capture the idea::capture the idea
ignore consider leading::ignore consider leading
estimates of algorithms::estimates of algorithms
fact this notation::fact this notation
notation on functions::notation on functions
thinking about functions::thinking about functions
functions in general::functions in general
algorithms prof sunder::algorithms prof sunder
sunder vishwanathan department::sunder vishwanathan department
basics we begin::basics we begin
begin with discussion::begin with discussion
basic design techniques::basic design techniques
techniques for algorithms::techniques for algorithms
fairly simple problems::fairly simple problems
solutions to non::solutions to non
non trivial problems::non trivial problems
finding the minimum::finding the minimum
problem is find::problem is find
min the input::min the input
scan the array::scan the array
element by element::element by element
element the first::element the first
element third element::element third element
compare the array::compare the array
element with temp::element with temp
temp and update::temp and update
solve the problem::solve the problem
first n minus::first n minus
temp is set::temp is set
loop i varies::loop i varies
write the full::write the full
code in fact::code in fact
code the idea::code the idea
variables properly etcetera::variables properly etcetera
main the techniques::main the techniques
algorithm which solves::algorithm which solves
solves the problem::solves the problem
element and update::element and update
update the current::update the current
minimum as required::minimum as required
two things couple::two things couple
couple of things::couple of things
thing this design::thing this design
induction both recursion::induction both recursion
recursion and iteration::recursion and iteration
sort of thing::sort of thing
mind is ordering::mind is ordering
solve a problem::solve a problem
problem your input::problem your input
size the array::size the array
solve this problem::solve this problem
problem for smaller::problem for smaller
values of input::values of input
solved for smaller::solved for smaller
extend these solutions::extend these solutions
extend the solution::extend the solution
input for instance::input for instance
arrays of size::arrays of size
size n minus::size n minus
array of size::array of size
step which takes::step which takes
put this step::put this step
update the solution::update the solution
algorithm design technique::algorithm design technique
crux of design::crux of design
algorithms second point::algorithms second point
make is ordering::make is ordering
ordering the input::ordering the input
order often helps::order often helps
index in fact::index in fact
cases where ordering::cases where ordering
role in solving::role in solving
solving the problem::solving the problem
store the previous::store the previous
temp the temporary::temp the temporary
induction and storing::induction and storing
storing whole values::storing whole values
order the input::order the input
design any algorithm::design any algorithm
analyze this algorithm::analyze this algorithm
analysis every algorithm::analysis every algorithm
important a part::important a part
subject as design::subject as design
pertain to worst::pertain to worst
make one comparison::make one comparison
comparison for array::comparison for array
element this leads::element this leads
make n minus::make n minus
minus one comparison::minus one comparison
subsequent we make::subsequent we make
value in temp::value in temp
number of times::number of times
equals the number::equals the number
number of comparisons::number of comparisons
worried about constants::worried about constants
bound the number::bound the number
incrementing the index::incrementing the index
array or storing::array or storing
storing the value::storing the value
find the minimum::find the minimum
sort of first::sort of first
making n minus::making n minus
argument is easy::argument is easy
made the minimum::made the minimum
array the minimum::array the minimum
compare an element::compare an element
comparisons are needed::comparisons are needed
needed the reason::needed the reason
reason every element::reason every element
element is compared::element is compared
sort of satisfy::sort of satisfy
satisfy this condition::satisfy this condition
answer n minus::answer n minus
made any comparison::made any comparison
minimum each element::minimum each element
elements are minimum::elements are minimum
make a comparison::make a comparison
elements are candidates::elements are candidates
remains a candidate::remains a candidate
remains the candidate::remains the candidate
candidates to start::candidates to start
bit hang wavy::bit hang wavy
put a circle::put a circle
draw an edge::draw an edge
draw this edge::draw this edge
compared i draw::compared i draw
drawing these edges::drawing these edges
program ends terminates::program ends terminates
surely give values::surely give values
pick the global::pick the global
finished all comparisons::finished all comparisons
component this means::component this means
add an edge::add an edge
decrease the number::decrease the number
number of connected::number of connected
sort of simple::sort of simple
wanted to find::wanted to find
find the maximum::find the maximum
maximum n minus::maximum n minus
difficult to prove::difficult to prove
small values supposing::small values supposing
found the minimum::found the minimum
maintaining the maximum::maintaining the maximum
comparisons are repeated::comparisons are repeated
two and find::two and find
minimum and maximum::minimum and maximum
left hand side::left hand side
right hand side::right hand side
parts recursively find::parts recursively find
part and min::part and min
maximum and minimum::maximum and minimum
two to find::two to find
natural i divide::natural i divide
two parts divide::two parts divide
two equal parts::two equal parts
parts two equal::parts two equal
two equal halves::two equal halves
equal halves halves::equal halves halves
equal i find::equal i find
side the left::side the left
minimums to output::minimums to output
output the minimum::output the minimum
array i compare::array i compare
write the algorithm::write the algorithm
divide into halves::divide into halves
left and right::left and right
answers are max::answers are max
put these things::put these things
compute final solution::compute final solution
written the essence::written the essence
details i hope::details i hope
details define procedures::details define procedures
procedures and write::procedures and write
write down recursive::write down recursive
comparisons and output::comparisons and output
min on arrays::min on arrays
problems of half::problems of half
half the size::half the size
size you solve::size you solve
solve two problems::solve two problems
two more comparisons::two more comparisons
call the left::call the left
ceiling and floor::ceiling and floor
open this out::open this out
difficult to guess::difficult to guess
usual geometric series::usual geometric series
satisfies the recurrence::satisfies the recurrence
refresh your memory::refresh your memory
memory the recurrence::memory the recurrence
improved the number::improved the number
divide and conquer::divide and conquer
divide the problem::divide the problem
step is recurse::step is recurse
part and solve::part and solve
step is put::step is put
put these solutions::put these solutions
solutions together put::solutions together put
blindly in fact::blindly in fact
done it blindly::done it blindly
divide that divide::divide that divide
divide this array::divide this array
arrays to size::arrays to size
two maximums find::two maximums find
array by comparing::array by comparing
comparing two minimums::comparing two minimums
problems of smaller::problems of smaller
find these small::find these small
small problems varies::small problems varies
varies from problem::varies from problem
problem to problem::problem to problem
apply this method::apply this method
minimum the minimum::minimum the minimum
minimum the usual::minimum the usual
array and find::array and find
two temporary variables::two temporary variables
temporary variables temp::temporary variables temp
store the current::store the current
minimum in temporary::minimum in temporary
current second minimum::current second minimum
element i compare::element i compare
compare this first::compare this first
max min case::max min case
apply our divide::apply our divide
array the array::array the array
paths i find::paths i find
find a minimum::find a minimum
minimum the smaller::minimum the smaller
smaller than min::smaller than min
loss of generality::loss of generality
generality this min::generality this min
minimum second minimum::minimum second minimum
side s min::side s min
sort of thrown::sort of thrown
true then compare::true then compare
two will give::two will give
minimum the left::minimum the left
hand side minimum::hand side minimum
minimum the right::minimum the right
comparing the minimum::comparing the minimum
lost the first::lost the first
two sub problems::two sub problems
suffices to find::suffices to find
set of equations::set of equations
comparisons we make::comparisons we make
half n minus::half n minus
two problems behave::two problems behave
problems behave differently::problems behave differently
differently for max::differently for max
half n comparisons::half n comparisons
sort of paradigm::sort of paradigm
understand a bit::understand a bit
unfold the recurrent::unfold the recurrent
parts we divide::parts we divide
recurse divide recurse::recurse divide recurse
divide recurse divide::divide recurse divide
avail as size::avail as size
comparisons start happening::comparisons start happening
happening the recurrence::happening the recurrence
sort of bottoms::sort of bottoms
minimum is pushed::minimum is pushed
minute the maximum::minute the maximum
works very similar::works very similar
similar you put::similar you put
put the max::put the max
mins are pushed::mins are pushed
element is pushed::element is pushed
compare the minimum::compare the minimum
familiar complete binary::familiar complete binary
complete binary tree::complete binary tree
log n levels::log n levels
sort of minimum::sort of minimum
minimum element sits::minimum element sits
sort of wins::sort of wins
traverse some root::traverse some root
minimum element resided::minimum element resided
sort of observation::sort of observation
make to speed::make to speed
two is minimum::two is minimum
elements were compared::elements were compared
element was compared::element was compared
element the length::element the length
path is log::path is log
log n elements::log n elements
array were compared::array were compared
collect all elements::collect all elements
tree in front::tree in front
tree and figure::tree and figure
initially you made::initially you made
made n comparisons::made n comparisons
minus one comparisons::minus one comparisons
comparisons to find::comparisons to find
log n minus::log n minus
problem a straight::problem a straight
straight forward application::straight forward application
application of divide::application of divide
understand a problem::understand a problem
problem a bit::problem a bit
feel nice design::feel nice design
sunder viswanathan department::sunder viswanathan department
storing old values::storing old values
first term design::first term design
term design principle::term design principle
generate a solution::generate a solution
algorithm is clear::algorithm is clear
clear you sort::clear you sort
sort of recurse::sort of recurse
smaller inputs solve::smaller inputs solve
back you put::back you put
point is ordering::point is ordering
order for instance::order for instance
order of indices::order of indices
algorithms simple algorithms::algorithms simple algorithms
algorithms for simple::algorithms for simple
absolutely anything divide::absolutely anything divide
two parts solve::two parts solve
put the solution::put the solution
divide input solve::divide input solve
solve each part::solve each part
part and put::part and put
pays to divide::pays to divide
cases for instance::cases for instance
instance max min::instance max min
min or finding::min or finding
breaking at breaking::breaking at breaking
breaking the input::breaking the input
solve the recurrence::solve the recurrence
sort of encourage::sort of encourage
sort of design::sort of design
sort of case::sort of case
array an array::array an array
sort the elements::sort the elements
elements in increasing::elements in increasing
assume that elements::assume that elements
elements are distinct::elements are distinct
mind less cluttered::mind less cluttered
put the first::put the first
first design principle::first design principle
principle into practice::principle into practice
natural smaller arrays::natural smaller arrays
problem of sorting::problem of sorting
sorting the array::sorting the array
portion is sorted::portion is sorted
search and identify::search and identify
make essentially make::make essentially make
essentially make space::essentially make space
right every element::right every element
move one step::move one step
insert the element::insert the element
sort the first::sort the first
last element sits::last element sits
learnt insertion sort::learnt insertion sort
sort there people::sort there people
people i guess::people i guess
out the number::out the number
comparisons the last::comparisons the last
comparisons is log::comparisons is log
doing a binary::doing a binary
roughly order log::roughly order log
order n log::order n log
step the last::step the last
find this place::find this place
shift the entire::shift the entire
find the place::find the place
place to move::place to move
step in insertion::step in insertion
order n steps::order n steps
order n square::order n square
sort of avoid::sort of avoid
avoid this movement::avoid this movement
insertion sort takes::insertion sort takes
sort takes order::sort takes order
paradigms into play::paradigms into play
play into practice::play into practice
divide the array::divide the array
array equally work::array equally work
array you divide::array you divide
two halves sort::two halves sort
sort each piece::sort each piece
two pieces sort::two pieces sort
pieces no sweat::pieces no sweat
sort each recursion::sort each recursion
recursion you recurse::recursion you recurse
piece you sort::piece you sort
putting two sorted::putting two sorted
two sorted arrays::two sorted arrays
principles to list::principles to list
put a list::put a list
pieces we sort::pieces we sort
put the solutions::put the solutions
algorithm is ready::algorithm is ready
big sorted array::big sorted array
sorted this piece::sorted this piece
piece is sorted::piece is sorted
two sorted pieces::two sorted pieces
big sorted piece::big sorted piece
merging two sorted::merging two sorted
arrays or lists::arrays or lists
sorted in ascending::sorted in ascending
build a bigger::build a bigger
guess the procedure::guess the procedure
list or array::list or array
element will occur::element will occur
occur will occupy::occur will occupy
occupy the first::occupy the first
compare the first::compare the first
lists or arrays::lists or arrays
arrays or sub::arrays or sub
arrays and put::arrays and put
put the smaller::put the smaller
assign the smaller::assign the smaller
move this pointer::move this pointer
merging i hope::merging i hope
pointers you sort::pointers you sort
sort of compare::sort of compare
two values put::two values put
list and increment::list and increment
increment this pointer::increment this pointer
done and arrays::done and arrays
doing this work::doing this work
create this merge::create this merge
piece of paper::piece of paper
two sorted sequences::two sorted sequences
step the divide::step the divide
step we sort::step we sort
half the array::half the array
things together good::things together good
operation is big::operation is big
times the number::times the number
moving the pointer::moving the pointer
copying one list::copying one list
bound the total::bound the total
roughly equal size::roughly equal size
worry about floors::worry about floors
floors and ceilings::floors and ceilings
ceilings for ease::ceilings for ease
ease of calculation::ease of calculation
two sub arrays::two sub arrays
lists of size::lists of size
ways of figuring::ways of figuring
figuring this out::figuring this out
design this algorithm::design this algorithm
algorithm using design::algorithm using design
step you compare::step you compare
compare two elements::compare two elements
element gets filled::element gets filled
comparison one element::comparison one element
final sorted array::final sorted array
array gets filled::array gets filled
comparison an extra::comparison an extra
elements get filled::elements get filled
comparisons you make::comparisons you make
make is utmost::make is utmost
state this analysis::state this analysis
comparison an element::comparison an element
make k comparisons::make k comparisons
fill k elements::fill k elements
comparisons i make::comparisons i make
add an element::add an element
element to call::element to call
call this array::call this array
two smaller arrays::two smaller arrays
pick an element::pick an element
element and add::element and add
write the recurrence::write the recurrence
merge a bit::merge a bit
apply our design::apply our design
merge to smaller::merge to smaller
merge larger arrays::merge larger arrays
elements the first::elements the first
input now consists::input now consists
supposing i solve::supposing i solve
solve my problem::solve my problem
size is smaller::size is smaller
smaller one element::smaller one element
two i merge::two i merge
element i put::element i put
sort of merge::sort of merge
naturally use recursion::naturally use recursion
write a recurrence::write a recurrence
comparison i make::comparison i make
make i make::make i make
make i compare::make i compare
two elements remove::two elements remove
remove the smaller::remove the smaller
equals n minus::equals n minus
merge two arrays::merge two arrays
arrays the sum::arrays the sum
write the code::write the code
unroll the recursion::unroll the recursion
iterative process back::iterative process back
back to merge::back to merge
put a constant::put a constant
make no difference::make no difference
difference these constant::difference these constant
solve this recurrence::solve this recurrence
recurrence i guess::recurrence i guess
sort of check::sort of check
sort of guess::sort of guess
times log base::times log base
business on arrays::business on arrays
arrays to sort::arrays to sort
parts somehow work::parts somehow work
rearranging the elements::rearranging the elements
previous case remember::previous case remember
left is smaller::left is smaller
array must occur::array must occur
divided this array::divided this array
two parts left::two parts left
left are smaller::left are smaller
sort the left::sort the left
separately you sort::separately you sort
sort the right::sort the right
right this left::right this left
sorted this right::sorted this right
conquer the divided::conquer the divided
parts and recursion::parts and recursion
sort these two::sort these two
two putting things::two putting things
array is sorted::array is sorted
divide the input::divide the input
sort of emphasize::sort of emphasize
sorts an array::sorts an array
array our emphasis::array our emphasis
algorithm called quick::algorithm called quick
start with divide::start with divide
put this paradigm::put this paradigm
paradigm into place::paradigm into place
split an array::split an array
array into left::array into left
pick a pivot::pick a pivot
call the pivot::call the pivot
pivot left consists::pivot left consists
array every element::array every element
element is smaller::element is smaller
sort in front::sort in front
quick sort pick::quick sort pick
two parts smaller::two parts smaller
two parts recurse::two parts recurse
recurse and put::recurse and put
unlike the difference::unlike the difference
difference between merge::difference between merge
sort and quick::sort and quick
easy in merge::easy in merge
merge sort dividing::merge sort dividing
parts is easy::parts is easy
element you pick::element you pick
supposing you pick::supposing you pick
make a definition::make a definition
sorted order remember::sorted order remember
order remember recall::order remember recall
array is distinct::array is distinct
element i elements::element i elements
elements are smaller::elements are smaller
partition the array::partition the array
compared each element::compared each element
put the lesser::put the lesser
compared every element::compared every element
comparisons we made::comparisons we made
recurrence clearly sort::recurrence clearly sort
picked the minimum::picked the minimum
minus i minus::minus i minus
minus i elements::minus i elements
side the pivot::side the pivot
side had size::side had size
chosen the minimum::chosen the minimum
picking the minimum::picking the minimum
square for quick::square for quick
reach the middle::reach the middle
roughly the middle::roughly the middle
problems of equal::problems of equal
sort of write::sort of write
initially starts falling::initially starts falling
pick the maximum::pick the maximum
similar to picking::similar to picking
minimum the array::minimum the array
array sizes split::array sizes split
manage to pick::manage to pick
pick the pivots::pick the pivots
pick the middle::pick the middle
square this implementation::square this implementation
implementation of quick::implementation of quick
element of rank::element of rank
means the recursion::means the recursion
add a constant::add a constant
give me order::give me order
find the middle::find the middle
means an element::means an element
find an element::find an element
implement quick sort::implement quick sort
pick i spend::pick i spend
pick this middle::pick this middle
element the element::element the element
array is divided::array is divided
two roughly equal::two roughly equal
roughly equal parts::roughly equal parts
takes n log::takes n log
find this element::find this element
point this fact::point this fact
kind of situations::kind of situations
split the input::split the input
recurrence these recurrences::recurrence these recurrences
pick this element::pick this element
state this problem::state this problem
find the median::find the median
sort the array::sort the array
array and pick::array and pick
element that takes::element that takes
instance use merge::instance use merge
median in linear::median in linear
first non trivial::first non trivial
non trivial algorithm::non trivial algorithm
looked at algorithms::looked at algorithms
algorithms for sorting::algorithms for sorting
quick sort worked::quick sort worked
picked a pivot::picked a pivot
pivot and split::pivot and split
split the array::split the array
parts those elements::parts those elements
pivot and elements::pivot and elements
pick the median::pick the median
make quick sort::make quick sort
quick sort work::quick sort work
set the ball::set the ball
element to find::element to find
find the rank::find the rank
simplicity that elements::simplicity that elements
array are distinct::array are distinct
distinct every element::distinct every element
element is distinct::element is distinct
distinct all algorithms::distinct all algorithms
rank and rank::rank and rank
array how fast::array how fast
output the median::output the median
done in order::done in order
array and picking::array and picking
picking the middle::picking the middle
middle element sort::middle element sort
median and sorting::median and sorting
conquer for instance::conquer for instance
kind of approximate::kind of approximate
element whose rank::element whose rank
rank is greater::rank is greater
greater than equal::greater than equal
call approximate medians::call approximate medians
middle element supposing::middle element supposing
find the exact::find the exact
right it sits::right it sits
array it sits::array it sits
parts have size::parts have size
shrunk the size::shrunk the size
find this approximate::find this approximate
finding the exact::finding the exact
find approximate median::find approximate median
part that part::part that part
part has size::part has size
fact is order::fact is order
problem the problem::problem the problem
find the element::find the element
element could sit::element could sit
median the element::median the element
depends the rank::depends the rank
supposing that rank::supposing that rank
picture and sort::picture and sort
sort of explain::sort of explain
element x sits::element x sits
procedure to find::procedure to find
pay careful attention::pay careful attention
sort of important::sort of important
important design principle::important design principle
principle we started::principle we started
find the recursive::find the recursive
encountered a problem::encountered a problem
general problem finding::general problem finding
median a special::median a special
easier to solve::easier to solve
finding the element::finding the element
write this problem::write this problem
input is array::input is array
solve the reason::solve the reason
reason this problem::reason this problem
problem we end::problem we end
find an array::find an array
array a supposing::array a supposing
median i split::median i split
greater than size::greater than size
find a approximate::find a approximate
rank till linear::rank till linear
find the approximate::find the approximate
difficult as finding::difficult as finding
present the solution::present the solution
recipe for finding::recipe for finding
algorithm that works::algorithm that works
array a split::array a split
split the elements::split the elements
elements into groups::elements into groups
elements approximate median::elements approximate median
output exact median::output exact median
group you find::group you find
number of questions::number of questions
question second question::question second question
median we ended::median we ended
median to find::median to find
initially we started::initially we started
exact of median::exact of median
size has reduced::size has reduced
smaller size remember::smaller size remember
recurse and find::recurse and find
done to find::done to find
solve an exact::solve an exact
exact median problem::exact median problem
input of smaller::input of smaller
done by recursion::done by recursion
group in descending::group in descending
increasing order upwards::increasing order upwards
upwards or decreasing::upwards or decreasing
array is divisible::array is divisible
explain this picture::explain this picture
middle elements sort::middle elements sort
sort them middle::sort them middle
lay them out::lay them out
out and lay::out and lay
out the entire::out the entire
taking that part::taking that part
arrange the elements::arrange the elements
approximate median median::approximate median median
means this entire::means this entire
entire portion consists::entire portion consists
consists of elements::consists of elements
portion again consists::portion again consists
consists of larger::consists of larger
elements this portion::elements this portion
consists of smaller::consists of smaller
4th in fact::4th in fact
array this portion::array this portion
array are smaller::array are smaller
elements are larger::elements are larger
median and recurse::median and recurse
sort of vague::sort of vague
needed to design::needed to design
algorithm to find::algorithm to find
find a median::find a median
steps together stare::steps together stare
giving you code::giving you code
call this find::call this find
finds an element::finds an element
groups of size::groups of size
group and put::group and put
return an element::return an element
left with cases::left with cases
cases the first::cases the first
rank r sits::rank r sits
sits in array::sits in array
recurse on array::recurse on array
case is size::case is size
quickly draw picture::quickly draw picture
picture to find::picture to find
find this out::find this out
distance is size::distance is size
element the rank::element the rank
ends the description::ends the description
array a partition::array a partition
medians this returns::medians this returns
returns an element::returns an element
partition with respect::partition with respect
parts that depends::parts that depends
rank of element::rank of element
rank r minus::rank r minus
analyze this procedure::analyze this procedure
procedure should run::procedure should run
run in linear::run in linear
runs in linear::runs in linear
procedure actually works::procedure actually works
works in linear::works in linear
designed an algorithm::designed an algorithm
step and figure::step and figure
times each step::times each step
step is executed::step is executed
executed the step::executed the step
written an algorithm::written an algorithm
program to analyze::program to analyze
loop are executed::loop are executed
estimate the size::estimate the size
initially the input::initially the input
totally the total::totally the total
steps each takes::steps each takes
easily done find::easily done find
sort of comparisons::sort of comparisons
group takes constant::group takes constant
takes constant times::takes constant times
spend some constant::spend some constant
find i recurse::find i recurse
problem of size::problem of size
partition this array::partition this array
implies that size::implies that size
recurse the size::recurse the size
size the maximum::size the maximum
size an array::size an array
recursion to find::recursion to find
recursion we recurse::recursion we recurse
sort of share::sort of share
find a right::find a right
utmost c minus::utmost c minus
imply the previous::imply the previous
prove by induction::prove by induction
recurrence is utmost::recurrence is utmost
sum is utmost::sum is utmost
induction in fact::induction in fact
initially we guessed::initially we guessed
utmost c times::utmost c times
induction and prove::induction and prove
follow your nose::follow your nose
helps you finish::helps you finish
finish the inductive::finish the inductive
solving recurrence relations::solving recurrence relations
guess the answer::guess the answer
out what constants::out what constants
thing by induction::thing by induction
algorithm with quick::algorithm with quick
pick the pivot::pick the pivot
iii surfing lower::iii surfing lower
surfing lower bounds::surfing lower bounds
algorithms merge sort::algorithms merge sort
algorithms n log::algorithms n log
sort of restrict::sort of restrict
kinds of things::kinds of things
things that algorithms::things that algorithms
sort for merge::sort for merge
sort these things::sort these things
merge two sorted::merge two sorted
two sorted sub::two sorted sub
sorted sub arrays::sorted sub arrays
two sorted lists::two sorted lists
move them out::move them out
move your pointers::move your pointers
comparing two elements::comparing two elements
array is comparing::array is comparing
elements and moving::elements and moving
moving them out::moving them out
property actually holds::property actually holds
quick sort term::quick sort term
compare every element::compare every element
move these elements::move these elements
array is compare::array is compare
compare these two::compare these two
sort of operation::sort of operation
operation is compared::operation is compared
change the order::change the order
popular sorting algorithms::popular sorting algorithms
log n comparisons::log n comparisons
comparisons to sort::comparisons to sort
sort an array::sort an array
minimum you needed::minimum you needed
needed n minus::needed n minus
bit of work::bit of work
written as flowcharts::written as flowcharts
block is comparison::block is comparison
build the large::build the large
large flow chart::large flow chart
two other elements::two other elements
output the sorted::output the sorted
order i output::order i output
small flow chart::small flow chart
sorts two elements::sorts two elements
elements an array::elements an array
works on arrays::works on arrays
sorts these arrays::sorts these arrays
sort of fill::sort of fill
array in sorted::array in sorted
sort of run::sort of run
run merge sort::run merge sort
branch we choose::branch we choose
sort of outputs::sort of outputs
merge the lower::merge the lower
lower things return::lower things return
two sorted orders::two sorted orders
level of recursion::level of recursion
first one returns::first one returns
two elements compared::two elements compared
lists are compared::lists are compared
compared for merge::compared for merge
draw this tree::draw this tree
output in fact::output in fact
out into two::out into two
two elements branch::two elements branch
tree in fact::tree in fact
sort of follow::sort of follow
follow this tree::follow this tree
answer this leaf::answer this leaf
merge sort tree::merge sort tree
tree for merge::tree for merge
fix the number::fix the number
order as merge::order as merge
follow the tree::follow the tree
order of comparisons::order of comparisons
made in merge::made in merge
hit a leaf::hit a leaf
input you make::input you make
left or right::left or right
comparisons branch etcetera::comparisons branch etcetera
finally you hit::finally you hit
leaf the number::leaf the number
tree the worst::tree the worst
longest root leaf::longest root leaf
root leaf path::root leaf path
ingredients in place::ingredients in place
make certain observations::make certain observations
two critical observations::two critical observations
algorithm which sorts::algorithm which sorts
sorts n numbers::sorts n numbers
node you compare::node you compare
greater at leaves::greater at leaves
leaves we output::leaves we output
thing the question::thing the question
sort of crucial::sort of crucial
chart does sort::chart does sort
order must leads::order must leads
leaf different input::leaf different input
input orders lead::input orders lead
assume that inputs::assume that inputs
input every element::input every element
order you make::order you make
make certain comparisons::make certain comparisons
trace the path::trace the path
give the right::give the right
interchange the last::interchange the last
last two elements::last two elements
elements this order::elements this order
leaf i land::leaf i land
orders must land::orders must land
tree with large::tree with large
number of leaves::number of leaves
finish the proof::finish the proof
tree of height::tree of height
done in discrete::done in discrete
leaves the number::leaves the number
sort of prove::sort of prove
give a proof::give a proof
statement is true::statement is true
trees of height::trees of height
two sub trees::two sub trees
remove the root::remove the root
apply the inductive::apply the inductive
basically the number::basically the number
leaves t equals::leaves t equals
finishes the inductive::finishes the inductive
log the number::log the number
height this means::height this means
flowcharts for sorting::flowcharts for sorting
sorting we looked::sorting we looked
omega n log::omega n log
proved some constant::proved some constant
shows that merge::shows that merge
similarly quick sort::similarly quick sort
instance or move::instance or move
algorithm for sorting::algorithm for sorting
bucket sort radix::bucket sort radix
sort radix sort::sort radix sort
sort is merge::sort is merge
array only thing::array only thing
element is compare::element is compare
compare this element::compare this element
sort of divide::sort of divide
significant bit etcetera::significant bit etcetera
sorting is concerned::sorting is concerned
discussion of algorithm::discussion of algorithm
conquer paradigm sort::conquer paradigm sort
sort of works::sort of works
tiling essentially means::tiling essentially means
number of squares::number of squares
put these dominos::put these dominos
square is covered::square is covered
square with side::square with side
case four parts::case four parts
left well supposing::left well supposing
put my fourth::put my fourth
supposing the fourth::supposing the fourth
managed to sort::managed to sort
sort of tile::sort of tile
provided this square::provided this square
tile the entire::tile the entire
region on top::region on top
leaving one squares::leaving one squares
squares that square::squares that square
sort of region::sort of region
sort of domino::sort of domino
notice a crucial::notice a crucial
carry this inductive::carry this inductive
tile a region::tile a region
left over square::left over square
left un tiled::left un tiled
tiled the entire::tiled the entire
out my initial::out my initial
apply this divide::apply this divide
kind of thing::kind of thing
tile these smaller::tile these smaller
squares and put::squares and put
tiled one piece::tiled one piece
push the induction::push the induction
induction to work::induction to work
leave this square::leave this square
square un tiled::square un tiled
entire big square::entire big square
recursively and put::recursively and put
put one domino::put one domino
domino one domino::domino one domino
sort of strategy::sort of strategy
strategy to tile::strategy to tile
algorithms or puzzles::algorithms or puzzles
sort of lesson::sort of lesson
solutions to smaller::solutions to smaller
smaller sub problems::smaller sub problems
slightly more general::slightly more general
solve the general::solve the general
technique the smaller::technique the smaller
median we wanted::median we wanted
finding an element::finding an element
found the element::found the element
problem of multiplying::problem of multiplying
find the product::find the product
formed the product::formed the product
bits with lsb::bits with lsb
multiply these digits::multiply these digits
high school multiplication::high school multiplication
school multiplication algorithm::school multiplication algorithm
left y right::left y right
compute the product::compute the product
sort of find::sort of find
find these products::find these products
order n operation::order n operation
shifting and adding::shifting and adding
two n bit::two n bit
back to spending::back to spending
number of multiplications::number of multiplications
separately that gave::separately that gave
gave over problems::gave over problems
problems of size::problems of size
two i compute::two i compute
thing i compute::thing i compute
additions the number::additions the number
recurrence is smaller::recurrence is smaller
smaller in fact::smaller in fact
show the solution::show the solution
roughly it grows::roughly it grows
multiplications one makes::multiplications one makes
guess the general::guess the general
ease of computation::ease of computation
roughly some constant::roughly some constant
writing the exact::writing the exact
times constant times::times constant times
two things cancel::two things cancel
divided by log::divided by log
increase the number::increase the number
number of additions::number of additions
expensive than additions::expensive than additions
beauty of algorithm::beauty of algorithm
sort of tackled::sort of tackled
problems which require::problems which require
design new methods::design new methods
derive new methods::derive new methods
find new methods::find new methods
rack your brain::rack your brain
brain and sort::brain and sort
multiplication is due::multiplication is due
due to euler::due to euler
multiplying complex numbers::multiplying complex numbers
applicable in multiplying::applicable in multiplying
numbers thanks design::numbers thanks design
study of algorithm::study of algorithm
looked at sorting::looked at sorting
sorting the strategy::sorting the strategy
applied to sorting::applied to sorting
sorting to give::sorting to give
give a lower::give a lower
sorting based algorithm::sorting based algorithm
algorithm we continue::algorithm we continue
meanable to divide::meanable to divide
conquer this problem::conquer this problem
basic is bit::basic is bit
algorithm design strategies::algorithm design strategies
design strategies applied::design strategies applied
input the set::input the set
set of points::set of points
pair of points::pair of points
compute the distance::compute the distance
find the closest::find the closest
find a pair::find a pair
points the distance::points the distance
distance is square::distance is square
notion of distance::notion of distance
plane of points::plane of points
pairs of points::pairs of points
pick the minimum::pick the minimum
witness this minimum::witness this minimum
pair a distance::pair a distance
pair you compute::pair you compute
choose to distances::choose to distances
takes n choosable::takes n choosable
compute all distances::compute all distances
distances to find::distances to find
discussing this problem::discussing this problem
compute all pairs::compute all pairs
bit you start::bit you start
compute every pair::compute every pair
pair of distance::pair of distance
ways of thinking::ways of thinking
remove one point::remove one point
point to compute::point to compute
compute a distance::compute a distance
adding this point::adding this point
approach finally follow::approach finally follow
reason i wanted::reason i wanted
sort of inductive::sort of inductive
problem is remove::problem is remove
remove a point::remove a point
point the recurs::point the recurs
put the point::put the point
huge big star::huge big star
find the smallest::find the smallest
compute n minus::compute n minus
lead to order::lead to order
delta the minimum::delta the minimum
recursively is delta::recursively is delta
circle of radius::circle of radius
point only points::point only points
compute these points::compute these points
times to extra::times to extra
choose to sort::choose to sort
sort of distances::sort of distances
problem some property::problem some property
sort of pushes::sort of pushes
identify these candidates::identify these candidates
check two distances::check two distances
left to right::left to right
compute these distances::compute these distances
distances and choose::distances and choose
choose the minimum::choose the minimum
minimum by scanning::minimum by scanning
scanning these points::scanning these points
sorting takes order::sorting takes order
log n sorting::log n sorting
dominates this procedure::dominates this procedure
pays to first::pays to first
log n question::log n question
question one asks::question one asks
out the answer::out the answer
proceed this fact::proceed this fact
trick that speed::trick that speed
divide the point::divide the point
two parts find::two parts find
minimums to compute::minimums to compute
sorted in founded::sorted in founded
founded the minimum::founded the minimum
divide the points::divide the points
right and recurs::right and recurs
distance between points::distance between points
left and point::left and point
right i find::right i find
left the first::left the first
find this distance::find this distance
distance and check::distance and check
find this minimum::find this minimum
check the minimum::check the minimum
return the minimum::return the minimum
find this point::find this point
find minimum distances::find minimum distances
find the last::find the last
right most point::right most point
left most point::left most point
sort of put::sort of put
splitting the input::splitting the input
median and divide::median and divide
divided and conquered::divided and conquered
form one set::form one set
set the right::set the right
points will form::points will form
recursively find minimum::recursively find minimum
find minimum distance::find minimum distance
points are points::points are points
line this blob::line this blob
find closest pair::find closest pair
closest pair points::closest pair points
delta r minimum::delta r minimum
delta be minimum::delta be minimum
minimum of delta::minimum of delta
candidates or closest::candidates or closest
right any candidate::right any candidate
recurrence in place::recurrence in place
amount of work::amount of work
pick every point::pick every point
right and sort::right and sort
find the distances::find the distances
compute n square::compute n square
usual n square::usual n square
pairs of distances::pairs of distances
bit of luck::bit of luck
intelligence and perseverance::intelligence and perseverance
small examples etcetera::small examples etcetera
pump you full::pump you full
full of ideas::full of ideas
find reasonably simple::find reasonably simple
teacher to teach::teacher to teach
problem the first::problem the first
dividing vertical line::dividing vertical line
vertical line things::vertical line things
draw a straight::draw a straight
right is greater::right is greater
greater than delta::greater than delta
distance is greater::distance is greater
points of interest::points of interest
bands as bridge::bands as bridge
problem could apply::problem could apply
left could lie::left could lie
right could lie::right could lie
back to computing::back to computing
computing n square::computing n square
roughly n square::roughly n square
thing the intuition::thing the intuition
magnify this small::magnify this small
draw a circle::draw a circle
inside this circle::inside this circle
circle the reason::circle the reason
closer than delta::closer than delta
delta these points::delta these points
number of points::number of points
sort of spread::sort of spread
draw this line::draw this line
point will lie::point will lie
square please strain::square please strain
strain your imagination::strain your imagination
imagination and imagine::imagination and imagine
point must lie::point must lie
delta in fact::delta in fact
line is greater::line is greater
precludes many points::precludes many points
points from appearing::points from appearing
appearing in region::appearing in region
region of size::region of size
intuitively one feels::intuitively one feels
inside each square::inside each square
delta by delta::delta by delta
intuitively you feel::intuitively you feel
inside the square::inside the square
square the reason::square the reason
put this intuition::put this intuition
intuition into practice::intuition into practice
practice often requires::practice often requires
requires some thought::requires some thought
thought the principle::thought the principle
pigeon hole principle::pigeon hole principle
stuff these pigeons::stuff these pigeons
pigeons and holes::pigeons and holes
pigeons into holes::pigeons into holes
pigeons very simple::pigeons very simple
understand the statement::understand the statement
difficult to figure::difficult to figure
apply really nice::apply really nice
people have figured::people have figured
square of size::square of size
put in inside::put in inside
inside this square::inside this square
maximum distance inside::maximum distance inside
inside the small::inside the small
square as side::square as side
side length delta::side length delta
root of delta::root of delta
delta by square::delta by square
distance is delta::distance is delta
two points sitting::two points sitting
points sitting inside::points sitting inside
inside this small::inside this small
point can sit::point can sit
inside this big::inside this big
points and compute::points and compute
compute at max::compute at max
ideas in place::ideas in place
implementation smaller implementation::implementation smaller implementation
smaller implementation details::smaller implementation details
points the left::points the left
size to delta::size to delta
point this window::point this window
scan them upwards::scan them upwards
scan from bottom::scan from bottom
scan this points::scan this points
points from bottom::points from bottom
bottom to top::bottom to top
scan the left::scan the left
side from bottom::side from bottom
maintain this window::maintain this window
increasing y coordinates::increasing y coordinates
maintain this band::maintain this band
sort of window::sort of window
move them window::move them window
move this window::move this window
move the window::move the window
takes is linear::takes is linear
merge sort idea::merge sort idea
idea the window::idea the window
side the window::side the window
window could move::window could move
window can move::window can move
times the pointer::times the pointer
pointer here moves::pointer here moves
moves or pointer::moves or pointer
fixed a window::fixed a window
four on top::four on top
four on bottom::four on bottom
out one thing::out one thing
sort these points::sort these points
takes n logging::takes n logging
sorting will dominate::sorting will dominate
log n square::log n square
positive in fact::positive in fact
sort the points::sort the points
cost i sort::cost i sort
make a recursive::make a recursive
order in place::order in place
analyze the algorithm::analyze the algorithm
input a set::input a set
points first step::points first step
make an assumption::make an assumption
point has distinct::point has distinct
distinct every point::distinct every point
distinct x coordinate::distinct x coordinate
distinct y coordinate::distinct y coordinate
add a small::add a small
point it sort::point it sort
sort of move::sort of move
small the minimum::small the minimum
distance to change::distance to change
change the points::change the points
line two points::line two points
algorithm i give::algorithm i give
modify this algorithm::modify this algorithm
algorithm to work::algorithm to work
arrays the first::arrays the first
array where points::array where points
points are sorted::points are sorted
actual procedure starts::actual procedure starts
input is points::input is points
co-ordinates points sorted::co-ordinates points sorted
call this step::call this step
initialization phase step::initialization phase step
halves and step::halves and step
points and find::points and find
find the left::find the left
points this sort::points this sort
sort this give::sort this give
two arrays remember::two arrays remember
out the recurrence::out the recurrence
summarize and write::summarize and write
step is initialization::step is initialization
set of input::set of input
points we form::points we form
form two lists::form two lists
arrays one array::arrays one array
store the points::store the points
points in increasing::points in increasing
array will store::array will store
procedure this initialization::procedure this initialization
initialization is done::initialization is done
start the algorithm::start the algorithm
step will pass::step will pass
median and points::median and points
arrays which sorted::arrays which sorted
business is easy::business is easy
half the element::half the element
divides the input::divides the input
input is divided::input is divided
sorted in increasing::sorted in increasing
increasing x coordinates::increasing x coordinates
shortest the distance::shortest the distance
shortest the closest::shortest the closest
pair on input::pair on input
compute the minimum::compute the minimum
band of size::band of size
left one point::left one point
putting the answers::putting the answers
thing for right::thing for right
prime is sorted::prime is sorted
coordinates our focus::coordinates our focus
points from increasing::points from increasing
prime these arrays::prime these arrays
points and increasing::points and increasing
maintain three pointers::maintain three pointers
half the diagonal::half the diagonal
supposing this point::supposing this point
prime y coordinates::prime y coordinates
range y prime::range y prime
find these points::find these points
prime y prime::prime y prime
times the size::times the size
size of number::size of number
step is supposing::step is supposing
find the points::find the points
moves one step::moves one step
step is move::step is move
move r appropriately::move r appropriately
similarly you move::similarly you move
compute the distances::compute the distances
prime r small::prime r small
found these distances::found these distances
step is compute::step is compute
min of delta::min of delta
ends the algorithm::ends the algorithm
initial so analysis::initial so analysis
initially is order::initially is order
two recursive calls::two recursive calls
number of distances::number of distances
satisfies this recurrence::satisfies this recurrence
ends our discussion::ends our discussion
discussion on divide::discussion on divide
interestingly called greedy::interestingly called greedy
algorithm or greedy::algorithm or greedy
bit the main::bit the main
main technique main::main technique main
technique main sort::technique main sort
sort of technique::sort of technique
optimum solution small::optimum solution small
solution small piece::solution small piece
piece by small::piece by small
piece by piece::piece by piece
construct the optimum::construct the optimum
first then sort::first then sort
sort of enlarging::sort of enlarging
difficult to listen::difficult to listen
output the optimum::output the optimum
clear cut guiding::clear cut guiding
cut guiding rules::cut guiding rules
sort of imagination::sort of imagination
imagination and intuition::imagination and intuition
intuition hard work::intuition hard work
ideas that build::ideas that build
build in solutions::build in solutions
sort of basic::sort of basic
idea the basic::idea the basic
step is construct::step is construct
solution or output::solution or output
constructed some part::constructed some part
optimum solution extend::optimum solution extend
crucial generic step::crucial generic step
put the generic::put the generic
amount of luck::amount of luck
sort of sort::sort of sort
point this local::point this local
local improvement trick::local improvement trick
future i encourage::future i encourage
theory of matroids::theory of matroids
linear programming duality::linear programming duality
primary dual method::primary dual method
method in linear::method in linear
sort of method::sort of method
important algorithm design::important algorithm design
hand wavy fashion::hand wavy fashion
solution some generic::solution some generic
output which satisfies::output which satisfies
respect or minimum::respect or minimum
improve the solution::improve the solution
solution by adding::solution by adding
adding or subtracting::adding or subtracting
adding one element::adding one element
subtracting one element::subtracting one element
question will sort::question will sort
sort of dictate::sort of dictate
proceeds this question::proceeds this question
sort have trigger::sort have trigger
trigger our algorithms::trigger our algorithms
sort of push::sort of push
push the algorithms::push the algorithms
theory behind greedy::theory behind greedy
business and solve::business and solve
problems the first::problems the first
define a term::define a term
set and independent::set and independent
pair of vertices::pair of vertices
complicated a graph::complicated a graph
independent for instance::independent for instance
instance each vertex::instance each vertex
collection of vertices::collection of vertices
mobile radio stations::mobile radio stations
set can transmit::set can transmit
suppose i draw::suppose i draw
roughly the motivation::roughly the motivation
motivation where independent::motivation where independent
find an independent::find an independent
independent set large::independent set large
set large size::set large size
problem in fact::problem in fact
set of maximum::set of maximum
traced this problem::traced this problem
restrict the graphs::restrict the graphs
problem in totality::problem in totality
input the tree::input the tree
connected and acyclic::connected and acyclic
acyclic the output::acyclic the output
maximum sized independent::maximum sized independent
sized independent set::sized independent set
find maximum sized::find maximum sized
sort of group::sort of group
sort of compute::sort of compute
subset or vertex::subset or vertex
independent and choose::independent and choose
number of subsets::number of subsets
pick a vertex::pick a vertex
pick this pick::pick this pick
graph again pick::graph again pick
pick any vertex::pick any vertex
vertex that remains::vertex that remains
size is maximum::size is maximum
pick the wrong::pick the wrong
pick this vertex::pick this vertex
set of size::set of size
pick the right::pick the right
greedy solution greedy::greedy solution greedy
set is large::set is large
vertex of smallest::vertex of smallest
number of neighbors::number of neighbors
throw up remember::throw up remember
out its neighbors::out its neighbors
neighbors i throw::neighbors i throw
pick a leaf::pick a leaf
out one vertex::out one vertex
vertex per leaf::vertex per leaf
case this algorithm::case this algorithm
proof to show::proof to show
produces maximum size::produces maximum size
maximum size independent::maximum size independent
size independent set::size independent set
set the algorithm::set the algorithm
out its neighbor::out its neighbor
neighbor and continue::neighbor and continue
vertex of degree::vertex of degree
proceeds just put::proceeds just put
independent set blindly::independent set blindly
algorithm proceeds pick::algorithm proceeds pick
pick any leaf::pick any leaf
leaf and put::leaf and put
set and continue::set and continue
continue this algorithm::continue this algorithm
described actually works::described actually works
start you piece::start you piece
piece you put::piece you put
solution together piece::solution together piece
piece you pick::piece you pick
pick a piece::pick a piece
sort of proceed::sort of proceed
sort of property::sort of property
build the solution::build the solution
sort of throw::sort of throw
case we sort::case we sort
pick the vertex::pick the vertex
vertex a minimum::vertex a minimum
degree it works::degree it works
examples where simple::examples where simple
bit more general::bit more general
sort of exchange::sort of exchange
trick i promised::trick i promised
tree ; tree::tree ; tree
tree in question::tree in question
pick a maximum::pick a maximum
maximum independent set::maximum independent set
process going supposing::process going supposing
sort of add::sort of add
add and subtract::add and subtract
solution to increase::solution to increase
number of vertices::number of vertices
increase the size::increase the size
leaves the sense::leaves the sense
two and remove::two and remove
question will leaves::question will leaves
leaves always fall::leaves always fall
optimum independent set::optimum independent set
put the leaf::put the leaf
set and put::set and put
change the set::change the set
set still remains::set still remains
picked one element::picked one element
put a element::put a element
proof all leaves::proof all leaves
putting all leaves::putting all leaves
remove their neighbors::remove their neighbors
thing with greedy::thing with greedy
pick a part::pick a part
input to deal::input to deal
algorithm you move::algorithm you move
problem we move::problem we move
independent set remove::independent set remove
neighbors the tree::neighbors the tree
administering a system::administering a system
lot of people::lot of people
intervals could vary::intervals could vary
give you sort::give you sort
sort of intervals::sort of intervals
intervals each person::intervals each person
spread his job::spread his job
give you intervals::give you intervals
occupy this machine::occupy this machine
intervals they wanted::intervals they wanted
pick these intervals::pick these intervals
intervals some intervals::intervals some intervals
intervals essentially schedule::intervals essentially schedule
essentially schedule people::essentially schedule people
thing is maximum::thing is maximum
number of people::number of people
slot your objective::slot your objective
objective final objective::objective final objective
objective is maximum::objective is maximum
amount of money::amount of money
give you etcetera::give you etcetera
sort of origin::sort of origin
set of intervals::set of intervals
subset of non::subset of non
non overlapping intervals::non overlapping intervals
intervals of maximum::intervals of maximum
output a subset::output a subset
intervals with maximum::intervals with maximum
overlap all kind::overlap all kind
kind of funny::kind of funny
pick a subset::pick a subset
subset of overlapping::subset of overlapping
size our maximum::size our maximum
subset of maximum::subset of maximum
subset which means::subset which means
number of intervals::number of intervals
maximum for instance::maximum for instance
goal our goal::goal our goal
numbers just numbers::numbers just numbers
technique says builds::technique says builds
builds a solution::builds a solution
build the optimum::build the optimum
optimum solution interval::optimum solution interval
interval by interval::interval by interval
first which interval::first which interval
thing that sort::thing that sort
sort of strikes::sort of strikes
intervals in small::intervals in small
span is small::span is small
pick a large::pick a large
call this algorithm::call this algorithm
pick intervals interval::pick intervals interval
interval of smallest::interval of smallest
smallest size smallest::smallest size smallest
size smallest span::size smallest span
suppose the interval::suppose the interval
pick the smallest::pick the smallest
interval with smallest::interval with smallest
intuition is faulty::intuition is faulty
easy to construct::easy to construct
intervals that intersect::intervals that intersect
algorithm says pick::algorithm says pick
form the input::form the input
input the algorithm::input the algorithm
fellows clearly optimum::fellows clearly optimum
consists of picking::consists of picking
intervals the optimum::intervals the optimum
optimum has value::optimum has value
picking the interval::picking the interval
length not fails::length not fails
thinking a bit::thinking a bit
interval is small::interval is small
small it overlaps::small it overlaps
big they overlap::big they overlap
interval that overlaps::interval that overlaps
overlaps with smallest::overlaps with smallest
pick the interval::pick the interval
overlaps the smallest::overlaps the smallest
first algorithm fails::first algorithm fails
fails you construct::fails you construct
pick an interval::pick an interval
interval which overlaps::interval which overlaps
overlaps the smaller::overlaps the smaller
pick this interval::pick this interval
interval i throw::interval i throw
intervals i pick::intervals i pick
interval every interval::interval every interval
pick vertex throw::pick vertex throw
extremely closely related::extremely closely related
related in fact::related in fact
form a graph::form a graph
problem is picking::problem is picking
picking an independent::picking an independent
vertex with smallest::vertex with smallest
interval with minimum::interval with minimum
minimum overlap minimum::minimum overlap minimum
overlap minimum number::overlap minimum number
neighbors and recurse::neighbors and recurse
problem this worked::problem this worked
bit more complicated::bit more complicated
work for work::work for work
apply more intervals::apply more intervals
intervals and interval::intervals and interval
overlaps this interval::overlaps this interval
sort of mirror::sort of mirror
image this side::image this side
overlap the smallest::overlap the smallest
overlap with smallest::overlap with smallest
overlap in fact::overlap in fact
left with imagine::left with imagine
side these intervals::side these intervals
pair wise overlap::pair wise overlap
solution i construct::solution i construct
paper a bit::paper a bit
bit more carefully::bit more carefully
hand optimum value::hand optimum value
work the algorithm::work the algorithm
kind of problem::kind of problem
examples become harder::examples become harder
harder and harder::harder and harder
kind of complicated::kind of complicated
complicated counter examples::complicated counter examples
add an interval::add an interval
supposing these spaces::supposing these spaces
spaces are filled::spaces are filled
add and remove::add and remove
supposing i add::supposing i add
adding this makes::adding this makes
makes no sense::makes no sense
exchange that sort::exchange that sort
requires a bit::requires a bit
bit of thought::bit of thought
interval that ends::interval that ends
interval and ending::interval and ending
add the interval::add the interval
first and remove::first and remove
remove the first::remove the first
increasing the size::increasing the size
first you give::first you give
ends first remove::ends first remove
remove the intervals::remove the intervals
intervals that overlap::intervals that overlap
sort the algorithm::sort the algorithm
algorithm the intervals::algorithm the intervals
intervals by ending::intervals by ending
procedure you sort::procedure you sort
sort the intervals::sort the intervals
times and pick::times and pick
pick the first::pick the first
interval the interval::interval the interval
continue the iteration::continue the iteration
trick that makes::trick that makes
makes exchange trick::makes exchange trick
makes it work::makes it work
thing to prove::thing to prove
show the interval::show the interval
back to previous::back to previous
previous figure supposing::previous figure supposing
interval that first::interval that first
add this remove::add this remove
set by induction::set by induction
induction the algorithm::induction the algorithm
algorithm will find::algorithm will find
find the optimum::find the optimum
overlap the interval::overlap the interval
first the size::first the size
added this interval::added this interval
interval to remove::interval to remove
dropped the optimum::dropped the optimum
size the algorithm::size the algorithm
discussing greedy strategies::discussing greedy strategies
strategies for algorithm::strategies for algorithm
design the main::design the main
short of revise::short of revise
revise the main::revise the main
reviewed main point::reviewed main point
construct the solution::construct the solution
things are important::things are important
answer this question::answer this question
thing we solve::thing we solve
two obvious strategies::two obvious strategies
strategy of picking::strategy of picking
picking and interval::picking and interval
interval which overlapped::interval which overlapped
field the strategy::field the strategy
strategy that worked::strategy that worked
worked before last::worked before last
first the interval::first the interval
first to pick::first to pick
intervals at overlap::intervals at overlap
set of moral::set of moral
story was obvious::story was obvious
normal human beings::normal human beings
proof of correctness::proof of correctness
correctness is important::correctness is important
giving in obvious::giving in obvious
ways of writing::ways of writing
writing a proof::writing a proof
constructing the solutions::constructing the solutions
piece you find::piece you find
find the first::find the first
works by induction::works by induction
strategy by induction::strategy by induction
works and added::works and added
bit more detail::bit more detail
write the proof::write the proof
derive a proof::derive a proof
proof by exchange::proof by exchange
review the algorithm::review the algorithm
intervals that remain::intervals that remain
ends first discard::ends first discard
first discard intervals::first discard intervals
empty set start::empty set start
intervals to deal::intervals to deal
disworks the proof::disworks the proof
written the bit::written the bit
algorithm picked intervals::algorithm picked intervals
times or finishing::times or finishing
sorted by finishing::sorted by finishing
sorted by starting::sorted by starting
intervals are disjoint::intervals are disjoint
sorting by finishing::sorting by finishing
times and starting::times and starting
picks these intervals::picks these intervals
picks an interval::picks an interval
set the rest::set the rest
optimum solution suppose::optimum solution suppose
pick the optimum::pick the optimum
number of initial::number of initial
intervals in common::intervals in common
write this term::write this term
prove this claim::prove this claim
claim by contradiction::claim by contradiction
means ; suppose::means ; suppose
suppose the statement::suppose the statement
statement is false::statement is false
pick an optimum::pick an optimum
optimum solutions pick::optimum solutions pick
optimum in fact::optimum in fact
equal to ending::equal to ending
optimum and remove::optimum and remove
pick and interval::pick and interval
reason the ending::reason the ending
smaller than equal::smaller than equal
write the term::write the term
proof by contradiction::proof by contradiction
proof by induction::proof by induction
problems the idea::problems the idea
kinds of algorithms::kinds of algorithms
algorithms are problems::algorithms are problems
problems and algorithms::problems and algorithms
follow your notes::follow your notes
slightly more non-trivial::slightly more non-trivial
feel of behinds::feel of behinds
behinds the things::behinds the things
partition this set::partition this set
number of parts::number of parts
input is similar::input is similar
intervals each interval::intervals each interval
schedule to users::schedule to users
schedule to intervals::schedule to intervals
minimize the number::minimize the number
number of machines::number of machines
interval each user::interval each user
non-overlapping or disjoint::non-overlapping or disjoint
intervals into minimum::intervals into minimum
discussing greedy techniques::discussing greedy techniques
techniques i guess::techniques i guess
partitioning these intervals::partitioning these intervals
processor that person::processor that person
looked at intervals::looked at intervals
intervals on based::intervals on based
based on ending::based on ending
times for interval::times for interval
interval at end::interval at end
looked at first::looked at first
set of greedy::set of greedy
putting these intervals::putting these intervals
processors this order::processors this order
order these processors::order these processors
sort of greedy::sort of greedy
greedy back drop::greedy back drop
intervals by finishing::intervals by finishing
sort by starting::sort by starting
intervals by starting::intervals by starting
order these groups::order these groups
top on set::top on set
increasing starting times::increasing starting times
first ; put::first ; put
group or part::group or part
part l minus::part l minus
algorithms does work::algorithms does work
run the algorithms::run the algorithms
set of inputs::set of inputs
part 2nd interval::part 2nd interval
sort of scan::sort of scan
scan your objective::scan your objective
minimizing the number::minimizing the number
parts to supposing::parts to supposing
supposing the number::supposing the number
produced k parts::produced k parts
algorithm will produce::algorithm will produce
suppose the algorithm::suppose the algorithm
partitioned a set::partitioned a set
sort of trick::sort of trick
sort of mention::sort of mention
mention in text::mention in text
trial small values::trial small values
two overlapping intervals::two overlapping intervals
part this interval::part this interval
interval was put::interval was put
interval that overlapped::interval that overlapped
optimally as usual::optimally as usual
thing and optimum::thing and optimum
remember we started::remember we started
happen this 2nd::happen this 2nd
intervals are looked::intervals are looked
tune your algorithm::tune your algorithm
order and put::order and put
intervals in increasing::intervals in increasing
order of starting::order of starting
rank to prove::rank to prove
refining your algorithm::refining your algorithm
refine this algorithm::refine this algorithm
set into minimum::set into minimum
sort in intervals::sort in intervals
order of sort::order of sort
sort in staring::sort in staring
algorithm is optimum::algorithm is optimum
supposing the algorithm::supposing the algorithm
produce k parts::produce k parts
part the first::part the first
first k minus::first k minus
part 2nd part::part 2nd part
means this interval::means this interval
hiding that last::hiding that last
produces an optimum::produces an optimum
order of ending::order of ending
increasing order sorting::increasing order sorting
order sorting times::order sorting times
intervals in decreasing::intervals in decreasing
work same proof::work same proof
thing is similar::thing is similar
similar i guess::similar i guess
intervals from left::intervals from left
right to left::right to left
things that work::things that work
strategy in greedy::strategy in greedy
set of paradigms::set of paradigms
2nd is ordering::2nd is ordering
3rd was storing::3rd was storing
reusing in greedy::reusing in greedy
two things induction::two things induction
induction and ordering::induction and ordering
lead the crucial::lead the crucial
couple of problem::couple of problem
trick usually works::trick usually works
set of elements::set of elements
elements as input::elements as input
subset as output::subset as output
subset to satisfy::subset to satisfy
satisfy some property::satisfy some property
property as output::property as output
output the first::output the first
first two problems::first two problems
set of vertex::set of vertex
set as output::set as output
maximum in size::maximum in size
property this 2nd::property this 2nd
subset with maximum::subset with maximum
wanted to partition::wanted to partition
means and intervals::means and intervals
roughly this frame::roughly this frame
candidate these things::candidate these things
design the algorithms::design the algorithms
giving you algorithm::giving you algorithm
algorithm as search::algorithm as search
telling you tips::telling you tips
candidate algorithm solution::candidate algorithm solution
design these algorithm::design these algorithm
first two cases::first two cases
put this leaf::put this leaf
solution may improve::solution may improve
put the interval::put the interval
interval that ended::interval that ended
solution and remove::solution and remove
fairly the simple::fairly the simple
set of jobs::set of jobs
jobs the input::jobs the input
input is set::input is set
jobs with processing::jobs with processing
preemption in fact::preemption in fact
stop a job::stop a job
processor the processor::processor the processor
runs to completion::runs to completion
finishing times schedule::finishing times schedule
minimize the sum::minimize the sum
schedule the schedule::schedule the schedule
order you put::order you put
put these jobs::put these jobs
supposing i put::supposing i put
processor the finishing::processor the finishing
jobs by increasing::jobs by increasing
sort of pushing::sort of pushing
greedy perspective design::greedy perspective design
algorithms ? iii::algorithms ? iii
fractional knapsack problem::fractional knapsack problem
wanted to start::wanted to start
start in algorithms::start in algorithms
enter the house::enter the house
hit the jackpot::hit the jackpot
sense that houses::sense that houses
houses all kinds::houses all kinds
kinds of stuff::kinds of stuff
sack has limited::sack has limited
cost of profit::cost of profit
profit and size::profit and size
amount of item::amount of item
sack your objective::sack your objective
fill this sack::fill this sack
sack with items::sack with items
profit is maximized::profit is maximized
items to put::items to put
put take fractions::put take fractions
fraction in knapsack::fraction in knapsack
bugling an ordinary::bugling an ordinary
bugling cake shops::bugling cake shops
kinds of cakes::kinds of cakes
fancy cakes tune::fancy cakes tune
cake and select::cake and select
cake and eat::cake and eat
sell this cakes::sell this cakes
sort of choose::sort of choose
bag and make::bag and make
define this problem::define this problem
knapsack of capacity::knapsack of capacity
size and knapsack::size and knapsack
maximize the profit::maximize the profit
profit and sizes::profit and sizes
unit of item::unit of item
solve the input::solve the input
maximize this profit::maximize this profit
real muff greedy::real muff greedy
muff greedy algorithms::muff greedy algorithms
greedy and pick::greedy and pick
pick these items::pick these items
means pick items::means pick items
items to pick::items to pick
kinds of orderings::kinds of orderings
items in decreasing::items in decreasing
profit and pick::profit and pick
profit by size::profit by size
size or profit::size or profit
squared by size::squared by size
set of approaching::set of approaching
possibilities work remember::possibilities work remember
kind of order::kind of order
sort of key::sort of key
works of fails::works of fails
defined exchange trick::defined exchange trick
act to design::act to design
put one item::put one item
exchange one item::exchange one item
design the algorithm::design the algorithm
kind of trick::kind of trick
portion of item::portion of item
out some amount::out some amount
out with solution::out with solution
solution in mind::solution in mind
bag is full::bag is full
filling in arbitrarily::filling in arbitrarily
arbitrarily some items::arbitrarily some items
bag still remains::bag still remains
sort of calculation::sort of calculation
item t picked::item t picked
assume that sigma::assume that sigma
item or high::item or high
high an increase::high an increase
increase some amount::increase some amount
replaced some portion::replaced some portion
maintain the bag::maintain the bag
epsilon prime epsilon::epsilon prime epsilon
prime epsilon prime::prime epsilon prime
epsilon prime minus::epsilon prime minus
times epsilon equal::times epsilon equal
initially i started::initially i started
bag being full::bag being full
epsilon prime equals::epsilon prime equals
guide that epsilon::guide that epsilon
prime and epsilon::prime and epsilon
times epsilon prime::times epsilon prime
fellow is greater::fellow is greater
prime is greater::prime is greater
greater than epsilon::greater than epsilon
epsilon by epsilon::epsilon by epsilon
epsilon which means::epsilon which means
put this bag::put this bag
put this equality::put this equality
increase in profit::increase in profit
favor i remember::favor i remember
remember this happen::remember this happen
part of item::part of item
algorithms will give::algorithms will give
device an algorithms::device an algorithms
divided by size::divided by size
algorithm is simple::algorithm is simple
algorithm says order::algorithm says order
order and pick::order and pick
fill the knapsack::fill the knapsack
pick the item::pick the item
picked these items::picked these items
pick the entire::pick the entire
pick a fraction::pick a fraction
first few items::first few items
pick k items::pick k items
entire item unit::entire item unit
item with maximum::item with maximum
items by decreasing::items by decreasing
output is output::output is output
output looks likes::output looks likes
works this algorithm::works this algorithm
optimum and shows::optimum and shows
set of review::set of review
review that material::review that material
order of scores::order of scores
first index exit::first index exit
exit ith index::exit ith index
index they differ::index they differ
picked one unit::picked one unit
profit goes out::profit goes out
delta total sum::delta total sum
increase this delta::increase this delta
increase the profit::increase the profit
epsilon and epsilon::epsilon and epsilon
epsilon prime properly::epsilon prime properly
epsilon the epsilon::epsilon the epsilon
items to fill::items to fill
fill enough type::fill enough type
contradiction and calculate::contradiction and calculate
calculate the profit::calculate the profit
sort of frame::sort of frame
write it properly::write it properly
modify the proof::modify the proof
sort of chose::sort of chose
respect that part::respect that part
sort of film::sort of film
finishes the proof::finishes the proof
algorithm to fill::algorithm to fill
fill up knapsack::fill up knapsack
out this exchange::out this exchange
exchange two things::exchange two things
happened and profit::happened and profit
face the problem::face the problem
problem this kind::problem this kind
exchange trick run::exchange trick run
area of information::area of information
related to codes::related to codes
sends these symbols::sends these symbols
send this codes::send this codes
sort of decoded::sort of decoded
sort of string::sort of string
left another right::left another right
sort of full::sort of full
strings as scored::strings as scored
out the frequencies::out the frequencies
frequencies that make::frequencies that make
symbols for frequencies::symbols for frequencies
times the 2nd::times the 2nd
stands to resend::stands to resend
sends many times::sends many times
send this smaller::send this smaller
decoding is easy::decoding is easy
easy the reason::easy the reason
supposing the first::supposing the first
symbols from left::symbols from left
arrive the bits::arrive the bits
arrive and decode::arrive and decode
easy this code::easy this code
suddenly not prefix::suddenly not prefix
prefix pre codes::prefix pre codes
prefix pre code::prefix pre code
easy to decode::easy to decode
write the word::write the word
construct prefix pre::construct prefix pre
minimize the average::minimize the average
message with send::message with send
length frequency times::length frequency times
frequency times length::frequency times length
connection to binary::connection to binary
things are code::things are code
words at leaves::words at leaves
code word left::code word left
word left branch::word left branch
reach a leaf::reach a leaf
traverse a binary::traverse a binary
assign a code::assign a code
tree with symbols::tree with symbols
symbols at leaves::symbols at leaves
root to leaf::root to leaf
binary string associate::binary string associate
construct the binary::construct the binary
follow your follow::follow your follow
hit a pattern::hit a pattern
set of paper::set of paper
paper and write::paper and write
write this entire::write this entire
entire problem properly::entire problem properly
input is frequencies::input is frequencies
desire prefix free::desire prefix free
prefix free codes::prefix free codes
word a binary::word a binary
things with large::things with large
height of symbol::height of symbol
input of frequencies::input of frequencies
output a binary::output a binary
frequency of symbol::frequency of symbol
assign these words::assign these words
minimize this function::minimize this function
frequency as close::frequency as close
order of height::order of height
height saying increasing::height saying increasing
order of frequencies::order of frequencies
easy the heaviest::easy the heaviest
frequency must set::frequency must set
tree the question::tree the question
number of binaries::number of binaries
threes we pick::threes we pick
pick a tree::pick a tree
sort of fit::sort of fit
fit these symbols::fit these symbols
pick these trees::pick these trees
kind of exchange::kind of exchange
construct the correct::construct the correct
bottom most points::bottom most points
frequencies will sit::frequencies will sit
compute the tree::compute the tree
part by part::part by part
remember the tree::remember the tree
exchange sub trees::exchange sub trees
pick two sub::pick two sub
trees and exchange::trees and exchange
problem from information::problem from information
recall the problem::recall the problem
frequency of occurrence::frequency of occurrence
occurrence we wanted::occurrence we wanted
wanted to construct::wanted to construct
construct the code::construct the code
set of symbols::set of symbols
symbol we read::symbol we read
read the binary::read the binary
problem to solve::problem to solve
give a shorter::give a shorter
word are repeated::word are repeated
encode this file::encode this file
means no codeword::means no codeword
file and send::file and send
file once encoded::file once encoded
encoded the size::encoded the size
word the frequency::word the frequency
put that put::put that put
set of frequencies::set of frequencies
prefix free code::prefix free code
word for symbol::word for symbol
times the word::times the word
encode the file::encode the file
code of prefix::code of prefix
free code corresponds::free code corresponds
tree and symbols::tree and symbols
construct the prefix::construct the prefix
traverse a path::traverse a path
path from root::path from root
leaf this code::leaf this code
leaf by traversing::leaf by traversing
two a leaf::two a leaf
symbols will sit::symbols will sit
sit on leafs::sit on leafs
output prefix free::output prefix free
binary trees fixed::binary trees fixed
associate these words::associate these words
two with smallest::two with smallest
sit at leafs::sit at leafs
sort of balance::sort of balance
bottom most leafs::bottom most leafs
two the frequencies::two the frequencies
quantity of minimizing::quantity of minimizing
minimizing is sigma::minimizing is sigma
put smaller frequency::put smaller frequency
smaller in frequency::smaller in frequency
larger in frequency::larger in frequency
stands to reason::stands to reason
larger the frequency::larger the frequency
sitting here call::sitting here call
exchange some part::exchange some part
twist the solutions::twist the solutions
suppose your exchange::suppose your exchange
exchange to sub::exchange to sub
times the frequency::times the frequency
root two node::root two node
length of path::length of path
compute this function::compute this function
times the length::times the length
part from root::part from root
inside this sub::inside this sub
cost old cost::cost old cost
cost of elements::cost of elements
sigma c belongs::sigma c belongs
times h prime::times h prime
sigma e belongs::sigma e belongs
cost this length::cost this length
inside the tree::inside the tree
inside the sub::inside the sub
sub tree remains::sub tree remains
tree remains fixed::tree remains fixed
add h prime::add h prime
difference in cost::difference in cost
compute old minus::compute old minus
primes c cancels::primes c cancels
subtract h minus::subtract h minus
minus h prime::minus h prime
minus h times::minus h times
assume is greater::assume is greater
done a shift::done a shift
quantity is positive::quantity is positive
quantity is negative::quantity is negative
cost as decreased::cost as decreased
cost as increased::cost as increased
cost is greater::cost is greater
decreased the cost::decreased the cost
shape this fellow::shape this fellow
greater and sigma::greater and sigma
leads to smaller::leads to smaller
frequencies of elements::frequencies of elements
smaller cost remember::smaller cost remember
tree is greater::tree is greater
exchange trick tells::exchange trick tells
tree the quantity::tree the quantity
follow greedy approach::follow greedy approach
build this sub::build this sub
initially each element::initially each element
sub trees bottom::sub trees bottom
join the last::join the last
previous exchange thing::previous exchange thing
node and join::node and join
treat each element::treat each element
element is treated::element is treated
treated as sub::treated as sub
elements in side::elements in side
sum of frequencies::sum of frequencies
symbols or words::symbols or words
two of minimum::two of minimum
minimum f prime::minimum f prime
prime and join::prime and join
tree for instance::tree for instance
number of tree::number of tree
algorithm terminates ease::algorithm terminates ease
number of sub::number of sub
sub trees decreases::sub trees decreases
write a proof::write a proof
done to write::done to write
constructs as sub::constructs as sub
algorithm for instance::algorithm for instance
algorithm had sub::algorithm had sub
prove this statement::prove this statement
write this proof::write this proof
induction on stages::induction on stages
tree the base::tree the base
out with trees::out with trees
two you join::two you join
voice are true::voice are true
branches of line::branches of line
lowest sub trees::lowest sub trees
trees i clean::trees i clean
lowest sub tree::lowest sub tree
sub tree exchange::sub tree exchange
cost actually decreased::cost actually decreased
means the height::means the height
bottom to nodes::bottom to nodes
exchange whatever sits::exchange whatever sits
merge to trees::merge to trees
weights of tree::weights of tree
tree by merging::tree by merging
algorithm and networks::algorithm and networks
done by huffman::done by huffman
summarize our discussion::summarize our discussion
discussion of greedy::discussion of greedy
piece two imagine::piece two imagine
pulling out pieces::pulling out pieces
pieces to fit::pieces to fit
put the right::put the right
piece and place::piece and place
trick essentially start::trick essentially start
solution and change::solution and change
solution to obtain::solution to obtain
solution a bit::solution a bit
theory of methorids::theory of methorids
methorids and linear::methorids and linear
books and linear::books and linear
two may give::two may give
sort of feeling::sort of feeling
feeling for greedy::feeling for greedy
strategies work good::strategies work good
work good luck::work good luck
good luck design::good luck design
problem called pattern::problem called pattern
text and pattern::text and pattern
output is find::output is find
find an occurrence::find an occurrence
find all occurrences::find all occurrences
find and occurrence::find and occurrence
intake of file::intake of file
string as input::string as input
sort of facility::sort of facility
design and algorithm::design and algorithm
character in check::character in check
occurrence of pattern::occurrence of pattern
occur that position::occur that position
scan the text::scan the text
character by character::character by character
pattern i start::pattern i start
start matching character::start matching character
shift the pattern::shift the pattern
onwards i check::onwards i check
equals the first::equals the first
character the pattern::character the pattern
shift this pattern::shift this pattern
sort of shift::sort of shift
sort of pattern::sort of pattern
character to character::character to character
found the pattern::found the pattern
output this index::output this index
pattern in text::pattern in text
sort of return::sort of return
algorithm is putted::algorithm is putted
move the pattern::move the pattern
text we search::text we search
check for starting::check for starting
make m comparisons::make m comparisons
discover a mismatch::discover a mismatch
supposing my pattern::supposing my pattern
real exact value::real exact value
pattern you sorted::pattern you sorted
algorithm have done::algorithm have done
shifted this pattern::shifted this pattern
pattern is match::pattern is match
find the pattern::find the pattern
pattern this pattern::pattern this pattern
sort of shifted::sort of shifted
position i move::position i move
pattern this algorithm::pattern this algorithm
text in pattern::text in pattern
text as match::text as match
match the pattern::match the pattern
pattern must start::pattern must start
move the text::move the text
text of tool::text of tool
supposing we follow::supposing we follow
follow this algorithm::follow this algorithm
mismatch i move::mismatch i move
text i claimed::text i claimed
positional the text::positional the text
text i make::text i make
make anymore comparisons::make anymore comparisons
match i shift::match i shift
text i start::text i start
sort of comparing::sort of comparing
starting the pattern::starting the pattern
string of size::string of size
start the pattern::start the pattern
pattern to move::pattern to move
move the string::move the string
shifting the pattern::shifting the pattern
algorithm i shifted::algorithm i shifted
started my comparisons::started my comparisons
moving the pattern::moving the pattern
text pointer remains::text pointer remains
case is clear::case is clear
hope the algorithm::hope the algorithm
positions i move::positions i move
move this point::move this point
times is compared::times is compared
text pointer moves::text pointer moves
pointer moves forward::pointer moves forward
match text pointer::match text pointer
position with text::position with text
mismatch will occur::mismatch will occur
text moves forward::text moves forward
pattern is moved::pattern is moved
mismatch text pointer::mismatch text pointer
compare this character::compare this character
pattern has moved::pattern has moved
case the text::case the text
comparisons per text::comparisons per text
faster for instance::faster for instance
information this information::information this information
portion the text::portion the text
means the information::means the information
string actually match::string actually match
match this portion::match this portion
two line highways::two line highways
pattern in fact::pattern in fact
writing this text::writing this text
pattern will miss::pattern will miss
point and moving::point and moving
portion with text::portion with text
forget the text::forget the text
point and shifting::point and shifting
pattern in general::pattern in general
miss and occurrence::miss and occurrence
portion must match::portion must match
portion this portion::portion this portion
match the suffix::match the suffix
pattern this prefix::pattern this prefix
prefix must match::prefix must match
match this suffix::match this suffix
larger prefix matching::larger prefix matching
miss that opportunity::miss that opportunity
prefix this prefix::prefix this prefix
move it forward::move it forward
matches the suffix::matches the suffix
supposing the optimum::supposing the optimum
mismatch if shift::mismatch if shift
out the shift::out the shift
minus t minus::minus t minus
means this prefix::means this prefix
missing and occurrence::missing and occurrence
supposing the mismatch::supposing the mismatch
largest such string::largest such string
pre-compute this value::pre-compute this value
find the largest::find the largest
suffix i hope::suffix i hope
string a prefix::string a prefix
initial the first::initial the first
first i portion::first i portion
largest proper prefix::largest proper prefix
make it proper::make it proper
mention the longest::mention the longest
longest proper prefix::longest proper prefix
pattern of computer::pattern of computer
mismatch at position::mismatch at position
put the term::put the term
prefix which means::prefix which means
mismatches the text::mismatches the text
right this code::right this code
pointer to text::pointer to text
initially my initialization::initially my initialization
initially i set::initially i set
remember my point::remember my point
point next character::point next character
text and comparing::text and comparing
comparing the pattern::comparing the pattern
match pattern mismatches::match pattern mismatches
move both pointers::move both pointers
pointers i move::pointers i move
increment the text::increment the text
algorithm for searching::algorithm for searching
write the main::write the main
shifted the pattern::shifted the pattern
check for success::check for success
times these statement::times these statement
statement are executed::statement are executed
number of successful::number of successful
number of matches::number of matches
matches plus number::matches plus number
number of mismatches::number of mismatches
back and check::back and check
check out merge::check out merge
out merge sort::out merge sort
comparison it increases::comparison it increases
case x drops::case x drops
case y increases::case y increases
function y minus::function y minus
match y minus::match y minus
minus x remains::minus x remains
mismatch i shift::mismatch i shift
number of unsuccessful::number of unsuccessful
shows that true::shows that true
discussing pattern matching::discussing pattern matching
lecture the problem::lecture the problem
pattern and text::pattern and text
matching the pattern::matching the pattern
pattern the worst::pattern the worst
case was algorithm::case was algorithm
algorithm the proof::algorithm the proof
comparing this position::comparing this position
find a mismatch::find a mismatch
push the pattern::push the pattern
pattern the maximum::pattern the maximum
out and occurrence::out and occurrence
text we find::text we find
search which means::search which means
means a minimum::means a minimum
mismatch that occurred::mismatch that occurred
algorithm was clear::algorithm was clear
text the pattern::text the pattern
pattern which means::pattern which means
means your pattern::means your pattern
text also shift::text also shift
pattern why remains::pattern why remains
find a prefix::find a prefix
moves the pattern::moves the pattern
loop the question::loop the question
dictate the order::dictate the order
write as number::write as number
comparisons in number::comparisons in number
close we notice::close we notice
match y moves::match y moves
text never moves::text never moves
shift the text::shift the text
text pointer remain::text pointer remain
times a pattern::times a pattern
case in fact::case in fact
increase why increase::increase why increase
case x decreases::case x decreases
follow initially starts::follow initially starts
comparisons is order::comparisons is order
wanted to show::wanted to show
matching in linear::matching in linear
computing this function::computing this function
largest prefix largest::largest prefix largest
largest or longest::largest or longest
longest maybe longest::longest maybe longest
find the longest::find the longest
means the longest::means the longest
place this length::place this length
pattern a minimum::pattern a minimum
stop the first::stop the first
find the match::find the match
minus j comparisons::minus j comparisons
sigma i minus::sigma i minus
suddenly not linear::suddenly not linear
put over algorithm::put over algorithm
algorithm design sort::algorithm design sort
design sort principles::design sort principles
problem on arrays::problem on arrays
favorite inductive kind::favorite inductive kind
kind of approach::kind of approach
approach and assuming::approach and assuming
assuming which means::assuming which means
first i minus::first i minus
means sometime thing::means sometime thing
added some point::added some point
thinks just start::thinks just start
start to click::start to click
algorithm this matches::algorithm this matches
matches this portion::matches this portion
character also matches::character also matches
big portion matches::big portion matches
portion which means::portion which means
start by shifting::start by shifting
computed by induction::computed by induction
calculated l values::calculated l values
first shift day::first shift day
shift day shift::shift day shift
comparing these two::comparing these two
match or found::match or found
patterns must match::patterns must match
pattern this index::pattern this index
pattern must match::pattern must match
timing this portion::timing this portion
put the middle::put the middle
back this portion::back this portion
middle part match::middle part match
omit the top::omit the top
initially this length::initially this length
values to shifted::values to shifted
find the mismatch::find the mismatch
sounds bit complicated::sounds bit complicated
values of previous::values of previous
previous l values::previous l values
match which case::match which case
write this algorithm::write this algorithm
note down separate::note down separate
space if pattern::space if pattern
pointers move forward::pointers move forward
recall this portion::recall this portion
first we shifted::first we shifted
first character match::first character match
match which means::match which means
loop this thing::loop this thing
match and unsuccessful::match and unsuccessful
times you execute::times you execute
out this entry::out this entry
entry you filled::entry you filled
decremented which means::decremented which means
made will small::made will small
wrote this minus::wrote this minus
correct the reason::correct the reason
written as subscripts::written as subscripts
describe this algorithm::describe this algorithm
values and array::values and array
shift by minimum::shift by minimum
means this length::means this length
compare start comparing::compare start comparing
comparing the first::comparing the first
scanning the entire::scanning the entire
pattern the total::pattern the total
compute this length::compute this length
scan any text::scan any text
algorithm is due::algorithm is due
practice an algorithm::practice an algorithm
efficient and algorithm::efficient and algorithm
efficient in practice::efficient in practice
practice is due::practice is due
due to boyer::due to boyer
boyer and moore::boyer and moore
text the difference::text the difference
difference between boyer::difference between boyer
moore is track::moore is track
boyer moore starts::boyer moore starts
moore starts comparing::moore starts comparing
upwards and boyer::upwards and boyer
windup this thing::windup this thing
looked at write::looked at write
pattern matching algorithm::pattern matching algorithm
matching algorithm works::matching algorithm works
strings first string::strings first string
case ? suppose::case ? suppose
prefix proper prefix::prefix proper prefix
two proper prefix::two proper prefix
meet the algorithm::meet the algorithm
position i shift::position i shift
times the string::times the string
back and compare::back and compare
done this earlier::done this earlier
sort of match::sort of match
shift that portion::shift that portion
examples of text::examples of text
strings take examples::strings take examples
examples of pattern::examples of pattern
pattern and takes::pattern and takes
shifting a pattern::shifting a pattern
run this algorithm::run this algorithm
search and optimization::search and optimization
today is combinatorial::today is combinatorial
optimization the general::optimization the general
find an object::find an object
set of numbers::set of numbers
discrete objects object::discrete objects object
set of number::set of number
set of integers::set of integers
object must satisfy::object must satisfy
find us find::find us find
first it satisfies::first it satisfies
satisfying those constraints::satisfying those constraints
space of objects::space of objects
objects to real::objects to real
cost so option::cost so option
object of maximum::object of maximum
maximum benefit find::maximum benefit find
benefit find object::benefit find object
addition to satisfying::addition to satisfying
numbers given note::numbers given note
distinct for simulations::distinct for simulations
set benefit equal::set benefit equal
equal to negative::equal to negative
maximizing the benefit::maximizing the benefit
minimizing the cost::minimizing the cost
usual chess board::usual chess board
queens on usual::queens on usual
row same column::row same column
diagonal we remainder::diagonal we remainder
modulate as problem::modulate as problem
problem on numbers::problem on numbers
numbers an integer::numbers an integer
queen in column::queen in column
row in column::row in column
row number value::row number value
position the queen::position the queen
giving the row::giving the row
easily taken care::easily taken care
simply the distance::simply the distance
rows the vertical::rows the vertical
distance the distance::distance the distance
finding a sequence::finding a sequence
sequence of numbers::sequence of numbers
toy or game::toy or game
exist such numbers::exist such numbers
satisfy these conditions::satisfy these conditions
tuples of number::tuples of number
value in rupees::value in rupees
object so implicit::object so implicit
addition each object::addition each object
kilos in kilo::kilos in kilo
object and imagine::object and imagine
capacity by weight::capacity by weight
weight the problem::weight the problem
exceed the capacity::exceed the capacity
picking up objects::picking up objects
objects of maximum::objects of maximum
find a subset::find a subset
value of objects::value of objects
objects the total::objects the total
value of selected::value of selected
capacity while total::capacity while total
context of objects::context of objects
objects and values::objects and values
values and weights::values and weights
decide which job::decide which job
job to select::job to select
objects or crops::objects or crops
call these objects::call these objects
function the objective::function the objective
objects of large::objects of large
travelling sales person::travelling sales person
sales person problem::sales person problem
problem the input::problem the input
graph that visits::graph that visits
visits every vertex::visits every vertex
minimize the weight::minimize the weight
tour the names::tour the names
graph as representing::graph as representing
representing a map::representing a map
world vertices represent::world vertices represent
vertices represent towns::vertices represent towns
towns and edges::towns and edges
edges represents roads::edges represents roads
roads and weight::roads and weight
represent the length::represent the length
visit every city::visit every city
selling his products::selling his products
find the tour::find the tour
tour that visits::tour that visits
visits every city::visits every city
total distance covered::total distance covered
relating to sales::relating to sales
persons and cities::persons and cities
cities and roads::cities and roads
arises in robotics::arises in robotics
arises in computation::arises in computation
computation of biology::computation of biology
fields before carrying::fields before carrying
problem makes sense::problem makes sense
man could tour::man could tour
case the pointers::case the pointers
found the tour::found the tour
minimum such cost::minimum such cost
minimum such length::minimum such length
state the topic::state the topic
today the idea::today the idea
start a study::start a study
study of strategies::study of strategies
strategies for solving::strategies for solving
solving combinatorial optimization::solving combinatorial optimization
combinatorial optimization problems::combinatorial optimization problems
optimization problems combinatorial::optimization problems combinatorial
problems combinatorial optimization::problems combinatorial optimization
optimization and search::optimization and search
drop the search::drop the search
brute force search::brute force search
force search strategy::force search strategy
strategy called branch::strategy called branch
branch and bound::branch and bound
strategy called dynamic::strategy called dynamic
requires as considerable::requires as considerable
diff level analysis::diff level analysis
strategy the backtrack::strategy the backtrack
backtrack search strategy::backtrack search strategy
bit more efficient::bit more efficient
efficient than backtrack::efficient than backtrack
backtrack search problem::backtrack search problem
search problem search::search problem search
problem search strategies::problem search strategies
search strategies dynamic::search strategies dynamic
strategies dynamic programming::strategies dynamic programming
efficient than branch::efficient than branch
lot more analytical::lot more analytical
exploit the problem::exploit the problem
case the dynamic::case the dynamic
dynamic programming ideas::dynamic programming ideas
force search strategies::force search strategies
fairly simple minded::fairly simple minded
minded to make::minded to make
correct we correctly::correct we correctly
numerate or generate::numerate or generate
satisfy the constraints::satisfy the constraints
fact the constraints::fact the constraints
constraints are satisfied::constraints are satisfied
evaluate the cost::evaluate the cost
cost or benefit::cost or benefit
function we evaluate::function we evaluate
evaluate the benefit::evaluate the benefit
function and check::function and check
check this benefit::check this benefit
benefit function found::benefit function found
benefit function founds::benefit function founds
record this benefit::record this benefit
current object record::current object record
object record cost::object record cost
satisfies the conditions::satisfies the conditions
conditions this procedure::conditions this procedure
work this procedure::work this procedure
guaranteed to give::guaranteed to give
collection of parts::collection of parts
collection of slots::collection of slots
generating each part::generating each part
filling each slot::filling each slot
initially the sort::initially the sort
slots are empty::slots are empty
make this idea::make this idea
idea very clear::idea very clear
sense this page::sense this page
page is small::page is small
smaller parts comprising::smaller parts comprising
comprising our big::comprising our big
fill in values::fill in values
interpret these numbers::interpret these numbers
draw the board::draw the board
board that corresponds::board that corresponds
filling the first::filling the first
drawing the entire::drawing the entire
four possible positions::four possible positions
four possible candidate::four possible candidate
partially built object::partially built object
built object candidate::built object candidate
object candidate object::object candidate object
four partially built::four partially built
partially built candidate::partially built candidate
built candidate objects::built candidate objects
full arrange substance::full arrange substance
ways of placing::ways of placing
queen the first::queen the first
level of construction::level of construction
construction higher level::construction higher level
higher level completion::higher level completion
internal at higher::internal at higher
level of completion::level of completion
represents the ways::represents the ways
placing the fourth::placing the fourth
square partially constructed::square partially constructed
partially constructed objects::partially constructed objects
cube partially constructed::cube partially constructed
exhaustive generation method::exhaustive generation method
extension will correspond::extension will correspond
correspond to children::correspond to children
node their extensions::node their extensions
extensions will correspond::extensions will correspond
correspond to object::correspond to object
terminate our generation::terminate our generation
queen position satisfy::queen position satisfy
satisfy our conditions::satisfy our conditions
leaf the leaf::leaf the leaf
leaf objects satisfy::leaf objects satisfy
suppose in fact::suppose in fact
find a leaf::find a leaf
represent our objects::represent our objects
four queens problem::four queens problem
four element array::four element array
array to represent::array to represent
four queen positions::four queen positions
positions in case::positions in case
travelling salesman problem::travelling salesman problem
travelling salesperson problem::travelling salesperson problem
represent the tour::represent the tour
array of length::array of length
meaning that object::meaning that object
object is replaced::object is replaced
procedure for filling::procedure for filling
sub sequential loss::sub sequential loss
prevalent to starting::prevalent to starting
recurse we filled::recurse we filled
leaves so viral::leaves so viral
procedure that checks::procedure that checks
constraints are met::constraints are met
procedure for evaluating::procedure for evaluating
back track search::back track search
procedure for removing::procedure for removing
removing the last::removing the last
last value filled::last value filled
tree and make::tree and make
procedure just give::procedure just give
return on object::return on object
evaluate the objective::evaluate the objective
function if constraints::function if constraints
return a minus::return a minus
benefit function assuming::benefit function assuming
benefit is positive::benefit is positive
object has unfiled::object has unfiled
object has unfilled::object has unfilled
ways of filling::ways of filling
filling slots filling::filling slots filling
filling next slot::filling next slot
recurse on modified::recurse on modified
recursion will give::recursion will give
give as value::give as value
node a cost::node a cost
smallest cost function::smallest cost function
cost function found::cost function found
eventually will make::eventually will make
cost gets written::cost gets written
return in smallest::return in smallest
smallest v sub::smallest v sub
sub i calculated::sub i calculated
ways of doing::ways of doing
waste of generating::waste of generating
return this cost::return this cost
return the cost::return the cost
ways of filing::ways of filing
leaf the value::leaf the value
complete at description::complete at description
procedure in fact::procedure in fact
data structures scores::data structures scores
depth first search::depth first search
search space search::search space search
space search space::space search space
set of leafs::set of leafs
putting a tree::putting a tree
tree on top::tree on top
doing a depth::doing a depth
condition with checks::condition with checks
checks our constraints::checks our constraints
queens problem suppose::queens problem suppose
queens already capture::queens already capture
check where condition::check where condition
condition where queens::condition where queens
ignore this part::ignore this part
search tree immediately::search tree immediately
checking the condition::checking the condition
valid no matter::valid no matter
change their position::change their position
possibility of early::possibility of early
early conditional checks::early conditional checks
conditional checks condition::conditional checks condition
checks condition checks::checks condition checks
checks can improve::checks can improve
give a quick::give a quick
designates this vertex::designates this vertex
back to vertex::back to vertex
tour is cyclic::tour is cyclic
cyclic but suppose::cyclic but suppose
sort of closing::sort of closing
tour has proceeded::tour has proceeded
queens problem specialized::queens problem specialized
problem specialized generalized::problem specialized generalized
power n leaves::power n leaves
implement the early::implement the early
checks will improve::checks will improve
improve the situation::improve the situation
situation some part::situation some part
simple very simple::simple very simple
simple early checks::simple early checks
omega n factorial::omega n factorial
cities well starting::cities well starting
city the first::city the first
factorial different leaves::factorial different leaves
first the vertex::first the vertex
level n minus::level n minus
generate this class::generate this class
class of objects::class of objects
typically it takes::typically it takes
takes time exp1ntial::takes time exp1ntial
defined terms likes::defined terms likes
terms likes search::terms likes search
likes search space::likes search space
space and tree::space and tree
tree that set::tree that set
end this lecture::end this lecture
lecture by mentioning::lecture by mentioning
combinatorial optimization combinatorial::combinatorial optimization combinatorial
optimization combinatorial explosion::optimization combinatorial explosion
explosion this term::explosion this term
connection the back::connection the back
search the idea::search the idea
level the tree::level the tree
number of children::number of children
level the number::level the number
children the grand::children the grand
root will grow::root will grow
enzymes your tree::enzymes your tree
tree will explore::tree will explore
commonly called combinatorial::commonly called combinatorial
improvements to backtrack::improvements to backtrack
search as mention::search as mention
study a technique::study a technique
technique called branch::technique called branch
programming and greedy::programming and greedy
important to view::important to view
simplest backtrack search::simplest backtrack search
backtrack search ideas::backtrack search ideas
ideas are present::ideas are present
strategies are present::strategies are present
general and applicable::general and applicable
combinatorial optimization problem::combinatorial optimization problem
optimization problem design::optimization problem design
design & analysis::design & analysis
start by summarizing::start by summarizing
fairly general technique::fairly general technique
technique called backtrack::technique called backtrack
problem or combinatorial::problem or combinatorial
combinatorial search problem::combinatorial search problem
out all possibilities::out all possibilities
possibilities the problem::possibilities the problem
technique typically takes::technique typically takes
improve upon backtrack::improve upon backtrack
variation called branch::variation called branch
ideas called dynamic::ideas called dynamic
solve combinatorial optimization::solve combinatorial optimization
deal with dynamic::deal with dynamic
length and today::length and today
focus on branch::focus on branch
efficient that remains::efficient that remains
remains the main::remains the main
start by reviewing::start by reviewing
reviewing what backtrack::reviewing what backtrack
expected to find::expected to find
find the combinatorial::find the combinatorial
satisfy certain constraints::satisfy certain constraints
object x star::object x star
star must satisfy::star must satisfy
minimize the cost::minimize the cost
set of possibilities::set of possibilities
consisting of slots::consisting of slots
filled the first::filled the first
partially constructed object::partially constructed object
slot will give::slot will give
constructed objects based::constructed objects based
choose to fill::choose to fill
fill that slot::fill that slot
fully constructed object::fully constructed object
complete object constructed::complete object constructed
constraints are satisfy::constraints are satisfy
pick the object::pick the object
minimum cost object::minimum cost object
tree is explored::tree is explored
depth first manner::depth first manner
fill the first::fill the first
check the constraints::check the constraints
minimum cost leaf::minimum cost leaf
cost leaf extra::cost leaf extra
organization of backtrack::organization of backtrack
drawn the tree::drawn the tree
tree in parallel::tree in parallel
drawn the entire::drawn the entire
program would execute::program would execute
execute this procedure::execute this procedure
entire search tree::entire search tree
back that path::back that path
explore the entire::explore the entire
numbers of nodes::numbers of nodes
leaves is enormous::leaves is enormous
lot of work::lot of work
prune the search::prune the search
reduce our work::reduce our work
heuristic of pruning::heuristic of pruning
found certain solution::found certain solution
evaluated its cost::evaluated its cost
suppose this cost::suppose this cost
completely defined object::completely defined object
cost of partial::cost of partial
object x bar::object x bar
construct our object::construct our object
associate a cost::associate a cost
suppose this extended::suppose this extended
extended cost function::extended cost function
bar is obtained::bar is obtained
obtained by extending::obtained by extending
bar is greater::bar is greater
equal to cost::equal to cost
cost of xij::cost of xij
suppose the cost::suppose the cost
cost function satisfy::cost function satisfy
building that object::building that object
branch and boundary::branch and boundary
implies that branch::implies that branch
found some solution::found some solution
exploring this tree::exploring this tree
avail you evaluate::avail you evaluate
interesting has happen::interesting has happen
complete this object::complete this object
extend this object::extend this object
point in searching::point in searching
idea of branch::idea of branch
explain how branch::explain how branch
edges and vertices::edges and vertices
ridiculously small problem::ridiculously small problem
explaining our ideas::explaining our ideas
find a tour::find a tour
simply a sequence::simply a sequence
sequence of vertices::sequence of vertices
search should work::search should work
extend the tour::extend the tour
object which represents::object which represents
represents a tour::represents a tour
extend it edge::extend it edge
edge by edge::edge by edge
explore little bit::explore little bit
earlier the algorithm::earlier the algorithm
algorithm will make::algorithm will make
make a choice::make a choice
edge going back::edge going back
possibility in fact::possibility in fact
back to town::back to town
straight in fact::straight in fact
explore this part::explore this part
point onwards backtrack::point onwards backtrack
onwards backtrack search::onwards backtrack search
search the rest::search the rest
bound would make::bound would make
lengths are positive::lengths are positive
lengths are non-negative::lengths are non-negative
work of exploring::work of exploring
proved in fact::proved in fact
taking the first::taking the first
edge again branch::edge again branch
bound will evaluate::bound will evaluate
partial tour is10::partial tour is10
edge has cost::edge has cost
explore anything underneath::explore anything underneath
extending this tour::extending this tour
tour of cost::tour of cost
case in backtrack::case in backtrack
explored everything underneath::explored everything underneath
comparison of backtrack::comparison of backtrack
backtrack and branch::backtrack and branch
bound needs suitable::bound needs suitable
suitable cost function::suitable cost function
defining this cost::defining this cost
tree are visited::tree are visited
overhead of evaluating::overhead of evaluating
node in general::node in general
reasonable cost function::reasonable cost function
function will work::function will work
find a reasonable::find a reasonable
head of maintaining::head of maintaining
function is concerned::function is concerned
problem we introduce::problem we introduce
introduce this problem::introduce this problem
represents the value::represents the value
represents the width::represents the width
back of capacity::back of capacity
object our goal::object our goal
overflow our bag::overflow our bag
implement the branch::implement the branch
search will work::search will work
natural objective function::natural objective function
expressed as maximize::expressed as maximize
maximize total value::maximize total value
pick up objects::pick up objects
backtrack search work::backtrack search work
define the nation::define the nation
develop this idea::develop this idea
step by step::step by step
empty candidate object::empty candidate object
selection of objects::selection of objects
essentially a subset::essentially a subset
first decision point::first decision point
make a firm::make a firm
reject the first::reject the first
write this separate::write this separate
initially our search::initially our search
characterized by writing::characterized by writing
selected no object::selected no object
set of object::set of object
made a decision::made a decision
decisions about objects::decisions about objects
reject an object::reject an object
make the decision::make the decision
pick that object::pick that object
picked any object::picked any object
set of objects::set of objects
make a decision::make a decision
remember the back::remember the back
track search involves::track search involves
include the first::include the first
building this set::building this set
first just make::first just make
ways of taking::ways of taking
evaluate our benefit::evaluate our benefit
completely generated subset::completely generated subset
order to apply::order to apply
apply a branch::apply a branch
proper cost function::proper cost function
slightly different rule::slightly different rule
definition of branch::definition of branch
vary about cost::vary about cost
express the knapsack::express the knapsack
function is maximize::function is maximize
natural cost function::natural cost function
minimizing the value::minimizing the value
value of rejected::value of rejected
objects i claim::objects i claim
two are identical::two are identical
value is fixed::value is fixed
select large value::select large value
rejecting the small::rejecting the small
key to applying::key to applying
terms of maximizing::terms of maximizing
maximizing the value::maximizing the value
terms of minimizing::terms of minimizing
minimizing the values::minimizing the values
values of rejected::values of rejected
objects in fact::objects in fact
idea completely clear::idea completely clear
consists of value::consists of value
object has value::object has value
capacity is equal::capacity is equal
make in fact::make in fact
change my idea::change my idea
idea little bit::idea little bit
left going paths::left going paths
taking those objects::taking those objects
make the check::make the check
decide to check::decide to check
first two objects::first two objects
objects then taking::objects then taking
object would make::object would make
make the weight::make the weight
question of taking::question of taking
putting an empty::putting an empty
found the solution::found the solution
found a leaf::found a leaf
found a solution::found a solution
solution with value::solution with value
focus your attention::focus your attention
report the benefit::report the benefit
evaluating the cost::evaluating the cost
reject further objects::reject further objects
reject more objects::reject more objects
include more objects::include more objects
remember that right::remember that right
leaf we reach::leaf we reach
rejected an object::rejected an object
object of cost::object of cost
makes the method::makes the method
reject the entire::reject the entire
entire sub tree::entire sub tree
fact has search::fact has search
bound will work::bound will work
give an exercise::give an exercise
ways of constructing::ways of constructing
constructing these cost::constructing these cost
constructed cost functions::constructed cost functions
case the cost::case the cost
cleaver in order::cleaver in order
order to construct::order to construct
construct the cost::construct the cost
geographical tsp problem::geographical tsp problem
euclidean tsp problem::euclidean tsp problem
vertices as towns::vertices as towns
edges as roads::edges as roads
suppose in addition::suppose in addition
addition to knowing::addition to knowing
knowing the road::knowing the road
latitudes and longitudes::latitudes and longitudes
straight line distance::straight line distance
road code wind::road code wind
road could wind::road could wind
direct straight line::direct straight line
prove a lower::prove a lower
straight line distances::straight line distances
construct a cost::construct a cost
visit these towns::visit these towns
amount of distance::amount of distance
line distance information::line distance information
needed in constructing::needed in constructing
constructing cost functions::constructing cost functions
functions are constructed::functions are constructed
back little bit::back little bit
bound and backtrack::bound and backtrack
organize the search::organize the search
heuristic of deciding::heuristic of deciding
deciding which object::deciding which object
great pay offs::great pay offs
value to weight::value to weight
weight ratio first::weight ratio first
edge to select::edge to select
first to explore::first to explore
first again coming::first again coming
included the object::included the object
include the object::include the object
explore this edge::explore this edge
object with good::object with good
lots of works::lots of works
complete different viewpoint::complete different viewpoint
doing combinatorial search::doing combinatorial search
stop here design::stop here design
today is dynamic::today is dynamic
dynamic programming dynamic::dynamic programming dynamic
programming dynamic programming::programming dynamic programming
technique for designing::technique for designing
techniques finds applications::techniques finds applications
including operations research::including operations research
technique for combinatorial::technique for combinatorial
backtrack search technique::backtrack search technique
sense are optimization::sense are optimization
optimization of backtrack::optimization of backtrack
illustrate the technique::illustrate the technique
familiar knapsack problem::familiar knapsack problem
review the backtrack::review the backtrack
backtrack search solution::backtrack search solution
dynamic programming idea::dynamic programming idea
describe some details::describe some details
knapsack problem involves::knapsack problem involves
problem involves filling::problem involves filling
filling a knapsack::filling a knapsack
knapsack with objects::knapsack with objects
value the inputs::value the inputs
object is value::object is value
first object weights::first object weights
kilograms the fourth::kilograms the fourth
fourth object weights::fourth object weights
suppose to pick::suppose to pick
objects in front::objects in front
draw that node::draw that node
made any decision::made any decision
objects and backtrack::objects and backtrack
entire search space::entire search space
space and determines::space and determines
determines the value::determines the value
objects are picked::objects are picked
picked the first::picked the first
decided to pick::decided to pick
pick up object::pick up object
object that remains::object that remains
decision about object::decision about object
explore the tree::explore the tree
generate a tree::generate a tree
tree with height::tree with height
height with total::height with total
denotes the number::denotes the number
number of objects::number of objects
backtrack search procedure::backtrack search procedure
backtrack search view::backtrack search view
partially constructed solution::partially constructed solution
made any decisions::made any decisions
decided to include::decided to include
decide to include::decide to include
object has weight::object has weight
choice of mine::choice of mine
minus the weight::minus the weight
forget our original::forget our original
weight of objects::weight of objects
maximize our value::maximize our value
value clearly solving::value clearly solving
solving this problem::solving this problem
extending the solution::extending the solution
solving this independent::solving this independent
unit of capacity::unit of capacity
sense for meet::sense for meet
meet to fill::meet to fill
set whose total::set whose total
thinking of solving::thinking of solving
solving and independent::solving and independent
solves this original::solves this original
solve this alternate::solve this alternate
simple new problem::simple new problem
introduce as simplification::introduce as simplification
sense it makes::sense it makes
makes programming easier::makes programming easier
view is simpler::view is simpler
programming gets simplified::programming gets simplified
main important benefits::main important benefits
order to solve::order to solve
solve the knapsack::solve the knapsack
thinking about extending::thinking about extending
kind and solve::kind and solve
thinking of recursion::thinking of recursion
solve this knapsack::solve this knapsack
define that procedure::define that procedure
call my procedure::call my procedure
first undecided object::first undecided object
needed to solve::needed to solve
first object onward::first object onward
similarly the value::similarly the value
write the procedure::write the procedure
first the base::first the base
asked to solve::asked to solve
choose any objects::choose any objects
concentrate on determining::concentrate on determining
filling my knapsack::filling my knapsack
object and return::object and return
interesting case appears::interesting case appears
include this object::include this object
wise to include::wise to include
include that object::include that object
cover both possibilities::cover both possibilities
ignore this current::ignore this current
two effects first::two effects first
improve that value::improve that value
form the remaining::form the remaining
finishes the recursive::finishes the recursive
mention just make::mention just make
making the first::making the first
code could execute::code could execute
state we execute::state we execute
execute this case::execute this case
searching the knapsack::searching the knapsack
make a call::make a call
idea is understood::idea is understood
thing will execute::thing will execute
executing recursive call::executing recursive call
capacity is larger::capacity is larger
side the possibility::side the possibility
picture is understood::picture is understood
popularly called recursion::popularly called recursion
call give raise::call give raise
terms give raise::terms give raise
make a procedure::make a procedure
call with parameter::call with parameter
make procedure call::make procedure call
call this side::call this side
explore this search::explore this search
search tree underneath::search tree underneath
store the value::store the value
table before embarking::table before embarking
calculate that value::calculate that value
basically the idea::basically the idea
basically the optimization::basically the optimization
view of things::view of things
out this optimization::out this optimization
returning any value::returning any value
array called table::array called table
table and table::table and table
first index correspond::first index correspond
case actually takes::case actually takes
equal to capital::equal to capital
store our values::store our values
define the rule::define the rule
denote by null::denote by null
replace this code::replace this code
make a check::make a check
slightly different position::slightly different position
done by first::done by first
checking whether case::checking whether case
return this expression::return this expression
done by checking::done by checking
check if table::check if table
equal to null::equal to null
return the maximum::return the maximum
max of table::max of table
code will replace::code will replace
replace this last::replace this last
explored several times::explored several times
precisely the work::precisely the work
work gets reduced::work gets reduced
write recursive algorithms::write recursive algorithms
write to recurrence::write to recurrence
case of dynamic::case of dynamic
stored these values::stored these values
produce an estimate::produce an estimate
doing that estimate::doing that estimate
executes each line::executes each line
writes the diary::writes the diary
call this diary::call this diary
customary to call::customary to call
diary a transcript::diary a transcript
executes a line::executes a line
idea is clear::idea is clear
number the lines::number the lines
added some lines::added some lines
numbers these lines::numbers these lines
programs starts executing::programs starts executing
making the call::making the call
write the first::write the first
things will change::things will change
number will change::number will change
first recursive call::first recursive call
number of triples::number of triples
step the computer::step the computer
make one entry::make one entry
means the computer::means the computer
computer is executing::computer is executing
two previous parameters::two previous parameters
precisely the point::precisely the point
computer actually checks::computer actually checks
execute this call::execute this call
execute the call::execute the call
computer never makes::computer never makes
definition of triples::definition of triples
number of lines::number of lines
times the maximum::times the maximum
number of entries::number of entries
case the number::case the number
times the capacity::times the capacity
allowed the program::allowed the program
program will require::program will require
steps of execution::steps of execution
times c times::times c times
summarize the main::summarize the main
sequence of decisions::sequence of decisions
solving smaller problem::solving smaller problem
important dynamic programming::important dynamic programming
dynamic programming step::dynamic programming step
first dynamic programming::first dynamic programming
table and save::table and save
repeating that calculation::repeating that calculation
ideas in dynamic::ideas in dynamic
common to backtrack::common to backtrack
two new important::two new important
analysis the fourth::analysis the fourth
relation to estimate::relation to estimate
slightly different formulation::slightly different formulation
end up eliminating::end up eliminating
eliminating the recursion::eliminating the recursion
indian institute technology::indian institute technology
longest common subsequence::longest common subsequence
lecture on design::lecture on design
programming the topic::programming the topic
start by defining::start by defining
defining the problem::defining the problem
longest common subsequent::longest common subsequent
subsequent will abbreviated::subsequent will abbreviated
abbreviated as lcs::abbreviated as lcs
lcs the input::lcs the input
matter the sequence::matter the sequence
sequence of characters::sequence of characters
string and sequence::string and sequence
longest possible subsequence::longest possible subsequence
obtained by dropping::obtained by dropping
longest common subsequences::longest common subsequences
sequences of length::sequences of length
sequence of length::sequence of length
long common subsequence::long common subsequence
subsequence in fact::subsequence in fact
lcs problem find::lcs problem find
find any longest::find any longest
speak of lcs::speak of lcs
clear by context::clear by context
problem the length::problem the length
representing the similarity::representing the similarity
longer this lcs::longer this lcs
care about strings::care about strings
similarity the answers::similarity the answers
two dna sequences::two dna sequences
measure of similarity::measure of similarity
miss pelt word::miss pelt word
algorithms we develop::algorithms we develop
develop a lcs::develop a lcs
measures of similarity::measures of similarity
brute force algorithm::brute force algorithm
algorithm for lcs::algorithm for lcs
idea before embarking::idea before embarking
discover a complicated::discover a complicated
retain the longest::retain the longest
written an answer::written an answer
large in fact::large in fact
sequence as length::sequence as length
sequences the subsequences::sequences the subsequences
apply dynamic programming::apply dynamic programming
programming will give::programming will give
express the problem::express the problem
search space consists::search space consists
consists of common::consists of common
sense is first::sense is first
determine the objective::determine the objective
generate this space::generate this space
purposes of thinking::purposes of thinking
generate the subspace::generate the subspace
write the recursive::write the recursive
recursive procedure listed::recursive procedure listed
write a recursive::write a recursive
argument the space::argument the space
typically will divide::typically will divide
optimizes our object::optimizes our object
longest subsequent belonging::longest subsequent belonging
dynamic programming stops::dynamic programming stops
characterize the calls::characterize the calls
calls the recursive::calls the recursive
define a table::define a table
store the results::store the results
write non recursive::write non recursive
non recursive procedure::non recursive procedure
assuming other entries::assuming other entries
fills say entry::fills say entry
entries are filled::entries are filled
filled the key::filled the key
small in fact::small in fact
table times filling::table times filling
small enough table::small enough table
strategy will give::strategy will give
common subsequent problem::common subsequent problem
case of lcs::case of lcs
lcs the first::lcs the first
define the search::define the search
write this procedure::write this procedure
requires just divide::requires just divide
sub a union::sub a union
union s sub::union s sub
sub b union::sub b union
consisting of common::consisting of common
common subsequences starting::common subsequences starting
starting with letter::starting with letter
programming will require::programming will require
idea of dynamic::idea of dynamic
find to write::find to write
exponential time solution::exponential time solution
define a recursive::define a recursive
procedure for searching::procedure for searching
idea to write::idea to write
equal to longest::equal to longest
consists of subsequences::consists of subsequences
case this search::case this search
search this space::search this space
adequately it helps::adequately it helps
helps some finding::helps some finding
ready to find::ready to find
claim that sense::claim that sense
longest such subsequence::longest such subsequence
defined a minute::defined a minute
inside p terms::inside p terms
claim is true::claim is true
sake of contradiction::sake of contradiction
capital l equals::capital l equals
return r equal::return r equal
constructed a procedure::constructed a procedure
find a procedure::find a procedure
tempt into claim::tempt into claim
sequence of letters::sequence of letters
longer then lcs::longer then lcs
prove it first::prove it first
first the proof::first the proof
longer than lcs::longer than lcs
define r prime::define r prime
equal to lcs::equal to lcs
generated by recursive::generated by recursive
shorter than longest::shorter than longest
procedure to determine::procedure to determine
determine the longest::determine the longest
longest the longest::longest the longest
put r prime::put r prime
substitute r prime::substitute r prime
compute r prime::compute r prime
return the longer::return the longer
ready to write::ready to write
general search procedure::general search procedure
careful about boundary::careful about boundary
index is bigger::index is bigger
index return null::index return null
longest common sequence::longest common sequence
start by doing::start by doing
equal to smallest::equal to smallest
write it jointly::write it jointly
compute r equals::compute r equals
concatenated with lcs::concatenated with lcs
explicitly will compute::explicitly will compute
compute there lengths::compute there lengths
out some technicalities::out some technicalities
call we wrote::call we wrote
moment we write::moment we write
evaluated as null::evaluated as null
passed as null::passed as null
call and null::call and null
represents null strings::represents null strings
strings or null::strings or null
basic recursive procedure::basic recursive procedure
recurrence to estimate::recurrence to estimate
stop dynamic programming::stop dynamic programming
dynamic programming require::dynamic programming require
characterize what recursive::characterize what recursive
recursive calls happen::recursive calls happen
first the recursive::first the recursive
pass for first::pass for first
recurs the key::recurs the key
recurs our calls::recurs our calls
dynamic programming strategy::dynamic programming strategy
save the solution::save the solution
two dimensional table::two dimensional table
simply to fill::simply to fill
filling the entries::filling the entries
generate the procedure::generate the procedure
filling these entries::filling these entries
order the entries::order the entries
fill the entry::fill the entry
write that term::write that term
fill is suppose::fill is suppose
suppose to written::suppose to written
written this entry::written this entry
pass this string::pass this string
string was starting::string was starting
search to happen::search to happen
happen from starting::happen from starting
null then return::null then return
interpreted in light::interpreted in light
entry not lcs::entry not lcs
return the fill::return the fill
procedure is working::procedure is working
write that out::write that out
fill this entry::fill this entry
entries already filled::entries already filled
fill these entries::fill these entries
procedure will work::procedure will work
set the bottom::set the bottom
hand side column::hand side column
column to null::column to null
equal to fill::equal to fill
backwards will make::backwards will make
find the table::find the table
long this fill::long this fill
store the subsequences::store the subsequences
computed as arrays::computed as arrays
subsequences the entire::subsequences the entire
computing the longer::computing the longer
back this last::back this last
last part fill::last part fill
dynamic programming algorithm::dynamic programming algorithm
reduce the times::reduce the times
code for fill::code for fill
prove it correctness::prove it correctness
stop this lecture::stop this lecture
give you faster::give you faster
store the result::store the result
result being calculated::result being calculated
calculated the table::calculated the table
storing the entire::storing the entire
matric chain multiplication::matric chain multiplication
today is matric::today is matric
form this product::form this product
multiply to matrices::multiply to matrices
multiplication is associative::multiplication is associative
parenthesize this product::parenthesize this product
entire to perform::entire to perform
perform the entire::perform the entire
compute c equal::compute c equal
completed the simplest::completed the simplest
algorithm for doing::algorithm for doing
definition of matrix::definition of matrix
matrix multiplication matrix::matrix multiplication matrix
multiplication matrix multiplication::multiplication matrix multiplication
multiplication is defined::multiplication is defined
computing the single::computing the single
algorithm for simplicity::algorithm for simplicity
required for multiplication::required for multiplication
issue concerns associativity::issue concerns associativity
specific example involving::specific example involving
first compute matrix::first compute matrix
require 8s scalar::require 8s scalar
number of multiplication::number of multiplication
obtained by multiplying::obtained by multiplying
speak of parenthesization::speak of parenthesization
form the product::form the product
fashion by drawing::fashion by drawing
represents there product::represents there product
early indicated earlier::early indicated earlier
matrix to mentions::matrix to mentions
multiply m matrices::multiply m matrices
ways of parenthesize::ways of parenthesize
tree is grow::tree is grow
fast in fact::fast in fact
ready to give::ready to give
give a formal::give a formal
represent the dimensions::represent the dimensions
give the number::give the number
number of rows::number of rows
rows and columns::rows and columns
columns of matrix::columns of matrix
rows of matrix::rows of matrix
supposed to represent::supposed to represent
output is suppose::output is suppose
rooted binary tree::rooted binary tree
thing should give::thing should give
computing the product::computing the product
state as state::state as state
left sub tree::left sub tree
right sub tree::right sub tree
tree the product::tree the product
call the cost::call the cost
simply the number::simply the number
computer this lost::computer this lost
simple brute force::simple brute force
calculate the cost::calculate the cost
cost to represent::cost to represent
cost as remarked::cost as remarked
number of trees::number of trees
design an efficient::design an efficient
algorithm for solving::algorithm for solving
programming the first::programming the first
cost the problem::cost the problem
clarify our thoughts::clarify our thoughts
minimized or maximized::minimized or maximized
done this step::done this step
simply the search::simply the search
simply the space::simply the space
design an algorithm::design an algorithm
partitions search space::partitions search space
partition is searched::partition is searched
searched to find::searched to find
making several recursive::making several recursive
build the table::build the table
define a procedure::define a procedure
fill the table::fill the table
entries the key::entries the key
make this work::make this work
calculate the matrix::calculate the matrix
scheme for calculating::scheme for calculating
calculating the products::calculating the products
cost we call::cost we call
minimum cost tree::minimum cost tree
require some creativity::require some creativity
doing this partitioning::doing this partitioning
define s sub::define s sub
tree of root::tree of root
call this sub::call this sub
space is place::space is place
idea to characterize::idea to characterize
characterize to design::characterize to design
design some property::design some property
property to define::property to define
define some property::define some property
tiger has strips::tiger has strips
define some properties::define some properties
fairly natural property::fairly natural property
tree the interesting::tree the interesting
tree for computing::tree for computing
standard dynamic programming::standard dynamic programming
cost strictly bigger::cost strictly bigger
construct another tree::construct another tree
place l prime::place l prime
tree t prime::tree t prime
estimate the cost::estimate the cost
bigger than cost::bigger than cost
substitute l cost::substitute l cost
prime plus cost::prime plus cost
proved the cost::proved the cost
made a claim::made a claim
optimal sub tree::optimal sub tree
ready to design::ready to design
design a recursive::design a recursive
call our recursive::call our recursive
recursive algorithm mcm::recursive algorithm mcm
algorithm mcm stands::algorithm mcm stands
stands for metrics::stands for metrics
metrics chain multiplication::metrics chain multiplication
argument then array::argument then array
return the optimal::return the optimal
leaves the matrices::leaves the matrices
leaves will serve::leaves will serve
serve as place::serve as place
performed the basics::performed the basics
basics for writing::basics for writing
writing this algorithm::writing this algorithm
first take care::first take care
suppose our array::suppose our array
array only represents::array only represents
represents a single::represents a single
written a tree::written a tree
ready to generate::ready to generate
generate the algorithm::generate the algorithm
generate our algorithm::generate our algorithm
algorithm the basic::algorithm the basic
explore each subspace::explore each subspace
code for doing::code for doing
sub tree optimal::sub tree optimal
tree optimal tree::tree optimal tree
lemma the left::lemma the left
recursively call mcm::recursively call mcm
first i leaves::first i leaves
elements will define::elements will define
define the rows::define the rows
first i matrices::first i matrices
optimal right sub::optimal right sub
remaining n minus::remaining n minus
minus i metrics::minus i metrics
metrics c sub::metrics c sub
cost of multiplying::cost of multiplying
two the results::two the results
multiply the results::multiply the results
return the tree::return the tree
extracting the cost::extracting the cost
designed the algorithm::designed the algorithm
right sub trees::right sub trees
trees and make::trees and make
make a tree::make a tree
make the root::make the root
point to align::point to align
written a cost::written a cost
attach an additional::attach an additional
simplify a matrix::simplify a matrix
compute the cost::compute the cost
written single element::written single element
written a element::written a element
written its cost::written its cost
equal to mcm::equal to mcm
cost the cost::cost the cost
dynamic programming procedure::dynamic programming procedure
calculate this expression::calculate this expression
substitute this mcmc::substitute this mcmc
step in dynamic::step in dynamic
characterize the recursive::characterize the recursive
mcmc would progress::mcmc would progress
taking our original::taking our original
taking a prefix::taking a prefix
taking the suffix::taking the suffix
necessarily a suffix::necessarily a suffix
allocate one entry::allocate one entry
store in table::store in table
define a non::define a non
recursive procedure fill::recursive procedure fill
definition of mcmc::definition of mcmc
entire sub range::entire sub range
compiler will rename::compiler will rename
rename and make::rename and make
condition n equal::condition n equal
index n appears::index n appears
return say min::return say min
return by fill::return by fill
fill in fact::fill in fact
talk about mcmc::talk about mcmc
entries are full::entries are full
pretty match ready::pretty match ready
ready to right::ready to right
right the dynamic::right the dynamic
characterize how fill::characterize how fill
step the first::step the first
statement and fill::statement and fill
entry in fact::entry in fact
side this side::side this side
row kth column::row kth column
considers the values::considers the values
simply table entries::simply table entries
needed for updating::needed for updating
put an arrow::put an arrow
defined then fill::defined then fill
fill can fill::fill can fill
start filling entries::start filling entries
fill the entries::fill the entries
filled these entries::filled these entries
fill this entries::fill this entries
thing that remains::thing that remains
fill a single::fill a single
compute this product::compute this product
finishes the entire::finishes the entire
compute the exact::compute the exact
calculate the tree::calculate the tree
giving your hint::giving your hint
store the root::store the root
update a single::update a single
construct the root::construct the root
squared the total::squared the total
concludes this lecture::concludes this lecture
scheduling with startup::scheduling with startup
startup and holding::startup and holding
nicely using dynamic::nicely using dynamic
dynamic programming today::dynamic programming today
today the problem::today the problem
solve is scheduling::solve is scheduling
capacity of producing::capacity of producing
start a machine::start a machine
machine a machine::machine a machine
pay a startup::pay a startup
startup cost today::startup cost today
start it today::start it today
warehouse to hold::warehouse to hold
produce something today::produce something today
pay some rent::pay some rent
rupees per night::rupees per night
night the main::night the main
represents the demand::represents the demand
supposed to produce::supposed to produce
produce a vector::produce a vector
machine can produce::machine can produce
unit per day::unit per day
days the machine::days the machine
produce n units::produce n units
algorithm must report::algorithm must report
illustrate this problem::illustrate this problem
delivered on day::delivered on day
units the holding::units the holding
cost of storing::cost of storing
days the demand::days the demand
case the demand::case the demand
meet this demand::meet this demand
start producing earlier::start producing earlier
producing on day::producing on day
cost on day::cost on day
day the machine::day the machine
keeping a gap::keeping a gap
gap on day::gap on day
begun the production::begun the production
begin the production::begin the production
warehouse whatever unit::warehouse whatever unit
held in addition::held in addition
yesterday the day::yesterday the day
simply the startup::simply the startup
eventually this plan::eventually this plan
question in general::question in general
plans and figure::plans and figure
suggests a brute::suggests a brute
evaluate the costs::evaluate the costs
number of days::number of days
find some kind::find some kind
cast our problem::cast our problem
important to define::important to define
design a algorithm::design a algorithm
algorithm which searches::algorithm which searches
searches the space::searches the space
typically the algorithm::typically the algorithm
partition the search::partition the search
divide the search::divide the search
space into spaces::space into spaces
space each subspace::space each subspace
search the first::search the first
solution which minimizes::solution which minimizes
minimizes the objective::minimizes the objective
maximization the solution::maximization the solution
solution which maximizes::solution which maximizes
maximizes that objective::maximizes that objective
recursive solution dynamic::recursive solution dynamic
solution dynamic programming::solution dynamic programming
point it proceeds::point it proceeds
sense the idea::sense the idea
make a table::make a table
filling table entries::filling table entries
procedure the recursive::procedure the recursive
quantity several times::quantity several times
make the table::make the table
fashion our algorithm::fashion our algorithm
solve the first::solve the first
days will depend::days will depend
recurse this information::recurse this information
day of recursion::day of recursion
pay the startup::pay the startup
means our recursion::means our recursion
include additional history::include additional history
additional history information::additional history information
generalize our problem::generalize our problem
generalized scheduling problem::generalized scheduling problem
inputs the demand::inputs the demand
demand as inputs::demand as inputs
inputs the demands::inputs the demands
days the startup::days the startup
cost the holding::cost the holding
inputs and input::inputs and input
stock on day::stock on day
units in stock::units in stock
begin the machine::begin the machine
values any integer::values any integer
integer the rest::integer the rest
rest is similar::rest is similar
defined earlier corresponds::defined earlier corresponds
range of values::range of values
values our output::values our output
produce a production::produce a production
instance under instances::instance under instances
instance is defined::instance is defined
day the objective::day the objective
minimum cost schedule::minimum cost schedule
space s sub::space s sub
put all schedules::put all schedules
machine is producing::machine is producing
space sub space::space sub space
machine is idle::machine is idle
idle on day::idle on day
search s sub::search s sub
idea in devising::idea in devising
devising recursive algorithms::devising recursive algorithms
algorithms for optimization::algorithms for optimization
solutions some smaller::solutions some smaller
optimal sub structure::optimal sub structure
sub structure idea::sub structure idea
subspace s sub::subspace s sub
smaller sub problem::smaller sub problem
show the parts::show the parts
equal to true::equal to true
set of schedules::set of schedules
vector the residual::vector the residual
demands for days::demands for days
change the holding::change the holding
inventory on day::inventory on day
day we produced::day we produced
present on day::present on day
produced on day::produced on day
day the final::day the final
schedule which satisfies::schedule which satisfies
satisfies this residual::satisfies this residual
lemma this lemma::lemma this lemma
satisfy the residual::satisfy the residual
instance the argument::instance the argument
argument in dynamic::argument in dynamic
dynamic programming arguments::dynamic programming arguments
argument by contradiction::argument by contradiction
schedule which means::schedule which means
smaller than cost::smaller than cost
original instance right::original instance right
cost for remaining::cost for remaining
day plus cost::day plus cost
remember we assume::remember we assume
showing there exists::showing there exists
exists a schedule::exists a schedule
words our lemma::words our lemma
optimal for instance::optimal for instance
instance the residual::instance the residual
search the space::search the space
similar idea works::similar idea works
component the machine::component the machine
status is false::status is false
consists of schedules::consists of schedules
accomplished the goals::accomplished the goals
ready to build::ready to build
build a recursive::build a recursive
sorting this problem::sorting this problem
call our algorithm::call our algorithm
algorithm opts schedule::algorithm opts schedule
opts schedule arguments::opts schedule arguments
arguments the entire::arguments the entire
cost the current::cost the current
find the optimal::find the optimal
recursive residual problem::recursive residual problem
residual problem assuming::residual problem assuming
schedule the cost::schedule the cost
first sub space::first sub space
bests and number::bests and number
number of details::number of details
details the remaining::details the remaining
identified what kind::identified what kind
kind of recursion::kind of recursion
step of dynamic::step of dynamic
characterizing the recursive::characterizing the recursive
initially opts schedule::initially opts schedule
pass the sub::pass the sub
sub array beginning::sub array beginning
out the first::out the first
doing the recursion::doing the recursion
words the argument::words the argument
terminal sub range::terminal sub range
true or false::true or false
argument can vary::argument can vary
store the table::store the table
construct a table::construct a table
result of optschedule::result of optschedule
point of making::point of making
making the table::making the table
make a list::make a list
dealing with schedules::dealing with schedules
simplify the problem::simplify the problem
working with entire::working with entire
cost of optschedule::cost of optschedule
planning to store::planning to store
cell the entire::cell the entire
entire optimal schedule::entire optimal schedule
similar entries similar::similar entries similar
entries similar number::entries similar number
entries with similar::entries with similar
store the cost::store the cost
dynamic programming requires::dynamic programming requires
out how entries::out how entries
assuming the remaining::assuming the remaining
derive some kind::derive some kind
kind of recurrence::kind of recurrence
wrote a minute::wrote a minute
small smaller range::small smaller range
range is passed::range is passed
simply be true::simply be true
concatenated with optschedule::concatenated with optschedule
dropping the first::dropping the first
drop the first::drop the first
false and optsched::false and optsched
concatenated with optimal::concatenated with optimal
optimal schedule false::optimal schedule false
schedule false concatenated::schedule false concatenated
understand what optimal::understand what optimal
simply the cost::simply the cost
first schedule starts::first schedule starts
starts with keeping::starts with keeping
keeping the machine::keeping the machine
machine on day::machine on day
potential for incurring::potential for incurring
incurring a startup::incurring a startup
cost is incurred::cost is incurred
false to begin::false to begin
expression mark true::expression mark true
mark true value::mark true value
true value colon::true value colon
value colon false::value colon false
colon false value::colon false value
evaluates to false::evaluates to false
words this bracket::words this bracket
represents the startup::represents the startup
inventory for day::inventory for day
case the computation::case the computation
deleted the inventory::deleted the inventory
inventory gets reduced::inventory gets reduced
considered the possibility::considered the possibility
negative number true::negative number true
number is infinite::number is infinite
taking the min::taking the min
ignoring this cost::ignoring this cost
trouble of checking::trouble of checking
checking the indices::checking the indices
infinite negative numbers::infinite negative numbers
demand is bigger::demand is bigger
fulfill that instance::fulfill that instance
day is bigger::day is bigger
problem is unsolvable::problem is unsolvable
positive number earlier::positive number earlier
case it suffices::case it suffices
equal to minus::equal to minus
words our table::words our table
large the final::large the final
last day schedule::last day schedule
single day schedule::single day schedule
satisfying the demand::satisfying the demand
left with inventory::left with inventory
constitute a valid::constitute a valid
satisfy the last::satisfy the last
value last demand::value last demand
produce anymore units::produce anymore units
hand the inventory::hand the inventory
produce to make::produce to make
run the machine::run the machine
expression which evaluates::expression which evaluates
set the cost::set the cost
show whatever table::show whatever table
case we looked::case we looked
out all right::out all right
part we filled::part we filled
filled it out::filled it out
out this part::out this part
parts are filled::parts are filled
out to begin::out to begin
column some value::column some value
fill each entry::fill each entry
filled in constant::filled in constant
fill the entire::fill the entire
table in decreasing::table in decreasing
carefully j ranges::carefully j ranges
entry our recurrence::entry our recurrence
evaluated in constant::evaluated in constant
result the total::result the total
filled this table::filled this table
cost is found::cost is found
found in entry::found in entry
cost of generating::cost of generating
generating a schedule::generating a schedule
inventory to begin::inventory to begin
find the schedule::find the schedule
costs which costs::costs which costs
note we noted::note we noted
calculate this cost::calculate this cost
involving some column::involving some column
column some element::column some element
generated by keeping::generated by keeping
term is equal::term is equal
knowing the optimal::knowing the optimal
knowing the table::knowing the table
apply this argument::apply this argument
generate the entire::generate the entire
problem in today::problem in today
quietly an important::quietly an important
important and interesting::important and interesting
device recursive algorithm::device recursive algorithm
generalize the problem::generalize the problem
problem of medium::problem of medium
device a recursive::device a recursive
algorithm for medium::algorithm for medium
algorithm for finding::algorithm for finding
finding the arc::finding the arc
issue was applicable::issue was applicable
make a comment::make a comment
comment on dynamic::comment on dynamic
simply the dynamic::simply the dynamic
recursion a basic::recursion a basic
idea the first::idea the first
first basic idea::first basic idea
idea is recursion::idea is recursion
idea is make::idea is make
compute every value::compute every value
table essentially made::table essentially made
made as focus::made as focus
calculated every value::calculated every value
draw your attention::draw your attention
attention to recursion::attention to recursion
recursion in search::recursion in search
average case analysis::average case analysis
analysis of quicksort::analysis of quicksort
today is average::today is average
analysis of quick::analysis of quick
begin by discussing::begin by discussing
discussing average case::discussing average case
set of instances::set of instances
instances of instances::instances of instances
instances for algorithm::instances for algorithm
define the average::define the average
defined as sum::defined as sum
number of instances::number of instances
reasons for doing::reasons for doing
doing this worst::doing this worst
easier to compute::easier to compute
easier to deduce::easier to deduce
case is easy::case is easy
easy to compute::easy to compute
wait those instances::wait those instances
instances more heavily::instances more heavily
happen in practice::happen in practice
case analysis worst::case analysis worst
analysis worst case::analysis worst case
give some guarantees::give some guarantees
guarantees our topic::guarantees our topic
today is quick::today is quick
case analysis turns::case analysis turns
things about quick::things about quick
quick sort quick::quick sort quick
sort quick sort::sort quick sort
popular sorting algorithm::popular sorting algorithm
method of choice::method of choice
choice the worse::choice the worse
square the average::square the average
sense the excellent::sense the excellent
performance in practice::performance in practice
algorithm quick sort::algorithm quick sort
sort is based::sort is based
based on divide::based on divide
array whose length::array whose length
goal of quick::goal of quick
end we begin::end we begin
begin quick sort::begin quick sort
case just checks::case just checks
element this array::element this array
return that array::return that array
call it splitter::call it splitter
splitter is chosen::splitter is chosen
built three lists::built three lists
lists a list::lists a list
splitter a list::splitter a list
begin by putting::begin by putting
equal just single::equal just single
construct a list::construct a list
large and large::large and large
initialized to null::initialized to null
null and small::null and small
null this loop::null this loop
first we check::first we check
smaller than splitter::smaller than splitter
add that element::add that element
element to small::element to small
equal to splitter::equal to splitter
greater than splitter::greater than splitter
simply a matter::simply a matter
matter of recursion::matter of recursion
list which contained::list which contained
contained all small::contained all small
qsort or quick::qsort or quick
list in large::list in large
appending three lists::appending three lists
turn is guaranteed::turn is guaranteed
quick sort works::quick sort works
part is trivial::part is trivial
induction on size::induction on size
prove it formally::prove it formally
wanted to analyze::wanted to analyze
size and input::size and input
input in mind::input in mind
worry about average::worry about average
establish the recurrence::establish the recurrence
matter what input::matter what input
instance we feed::instance we feed
write down first::write down first
calling quick sort::calling quick sort
sort on small::sort on small
small and calling::small and calling
sort on large::sort on large
loop which runs::loop which runs
cardinality of large::cardinality of large
evoking quick sort::evoking quick sort
invoking quick sort::invoking quick sort
draw a recursion::draw a recursion
recurrence we break::recurrence we break
break the problem::break the problem
call quick sort::call quick sort
part one side::part one side
terminates and things::terminates and things
node has size::node has size
node the number::node the number
number of keys::number of keys
start the instance::start the instance
means this height::means this height
node its children::node its children
problem our algorithm::problem our algorithm
inside the body::inside the body
total work done::total work done
size this problem::size this problem
problem size added::problem size added
level the work::level the work
bound on quick::bound on quick
construct an input::construct an input
sort actually takes::sort actually takes
tree has small::tree has small
happen quite frequently::happen quite frequently
smaller than log::smaller than log
give a hint::give a hint
height must decrease::height must decrease
case it turns::case it turns
case will happen::case will happen
splitter is equal::splitter is equal
problem size halves::problem size halves
cases one case::cases one case
middle another case::middle another case
splitter was extreme::splitter was extreme
split very unevenly::split very unevenly
pick a splitter::pick a splitter
splitter it satisfies::splitter it satisfies
satisfies a property::satisfies a property
redraw this recursion::redraw this recursion
quickly the height::quickly the height
largest problem size::largest problem size
bad that means::bad that means
force the tree::force the tree
force quick sort::force quick sort
sort of erring::sort of erring
first level problem::first level problem
largest problem level::largest problem level
problem level size::problem level size
problem will split::problem will split
largest problem drops::largest problem drops
conclude that log::conclude that log
right most branch::right most branch
branch will drop::branch will drop
number of levels::number of levels
tree the tree::tree the tree
sort should work::sort should work
work ? quick::work ? quick
derive the recurrence::derive the recurrence
derive n log::derive n log
talk about average::talk about average
inputs are distinct::inputs are distinct
numbers the elements::numbers the elements
elements the keys::elements the keys
factorial possible permutations::factorial possible permutations
terms of probabilities::terms of probabilities
constructed a set::constructed a set
instances at random::instances at random
giving equal probability::giving equal probability
estimated by grouping::estimated by grouping
grouping the instances::grouping the instances
instances into separate::instances into separate
calculating the average::calculating the average
probability of picking::probability of picking
picking that group::picking that group
case the question::case the question
taking the average::taking the average
draw this picture::draw this picture
instances which begin::instances which begin
pick a group::pick a group
groups are identical::groups are identical
group as compared::group as compared
solving a problem::solving a problem
sorting the small::sorting the small
elements of integers::elements of integers
permutation of elements::permutation of elements
splits into groups::splits into groups
sorts the first::sorts the first
takes the equal::takes the equal
sorts the last::sorts the last
addition to sorting::addition to sorting
mentioning the constant::mentioning the constant
clever data structure::clever data structure
picked the splitter::picked the splitter
constructed this group::constructed this group
numbers the order::numbers the order
equal to sum::equal to sum
case of quick::case of quick
method for solving::method for solving
elements into lists::elements into lists
key is compared::key is compared
worst case input::worst case input
describe a table::describe a table
table which shows::table which shows
table this table::table this table
keys are integers::keys are integers
rows are labeled::rows are labeled
labeled i colon::labeled i colon
left a blank::left a blank
pattern of comparison::pattern of comparison
factorial possible input::factorial possible input
factorial possible columns::factorial possible columns
column are marked::column are marked
number of cells::number of cells
fraction of cells::fraction of cells
first input instance::first input instance
suppose some element::suppose some element
element is picked::element is picked
question of comparing::question of comparing
comparing them subsequently::comparing them subsequently
picked as splitters::picked as splitters
elements get picked::elements get picked
split as splitters::split as splitters
elements are picked::elements are picked
claim that probability::claim that probability
simple it tells::simple it tells
pick a row::pick a row
row at random::row at random
words the number::words the number
columns the fraction::columns the fraction
row i colon::row i colon
out slightly differently::out slightly differently
treating this sum::treating this sum
factorial times sum::factorial times sum
entire table list::entire table list
list n factorial::list n factorial
divide this total::divide this total
represent the number::represent the number
works for selection::works for selection
select the rth::select the rth
rth smallest element::rth smallest element
bipartite maximum matching::bipartite maximum matching
maximum matching bipartite::maximum matching bipartite
matching bipartite graph::matching bipartite graph
bipartite graph matching::bipartite graph matching
candidates the idea::candidates the idea
list of jobs::list of jobs
constraint the constraint::constraint the constraint
candidate the goal::candidate the goal
obvious goal assign::obvious goal assign
goal assign candidates::goal assign candidates
candidates to jobs::candidates to jobs
number of jobs::number of jobs
jobs are filled::jobs are filled
filled the bipartite::filled the bipartite
maximum matching problem::maximum matching problem
job and candidate::job and candidate
two vertex sets::two vertex sets
set of edges::set of edges
simply the graph::simply the graph
forms this set::forms this set
set of vertices::set of vertices
edges which connect::edges which connect
connect our text::connect our text
edge is incident::edge is incident
set of blue::set of blue
matching being incident::matching being incident
require to output::require to output
required to output::required to output
output a matching::output a matching
matching of maximum::matching of maximum
maximum possible size::maximum possible size
size a size::size a size
matching is defined::matching is defined
number of edges::number of edges
matching which consists::matching which consists
maximum sized matching::maximum sized matching
maximum size matching::maximum size matching
edges maximum matchings::edges maximum matchings
candidates and jobs::candidates and jobs
jobs are represented::jobs are represented
represent the fact::represent the fact
fact that candidate::fact that candidate
fact the list::fact the list
list of candidate::list of candidate
assignment of jobs::assignment of jobs
jobs to candidates::jobs to candidates
assign to candidate::assign to candidate
maximize the number::maximize the number
algorithm design idea::algorithm design idea
ideas and refine::ideas and refine
notion of augmenting::notion of augmenting
paths this turns::paths this turns
understanding augmenting paths::understanding augmenting paths
clean simple high::clean simple high
simple high level::simple high level
high level algorithm::high level algorithm
state and prove::state and prove
prove that theorem::prove that theorem
finally we talk::finally we talk
implement this algorithm::implement this algorithm
simple winded idea::simple winded idea
largest size matching::largest size matching
moment you talk::moment you talk
talk about larger::talk about larger
edges and maintain::edges and maintain
maintain a set::maintain a set
edge and add::edge and add
produce a conflict::produce a conflict
adding this edge::adding this edge
end up adding::end up adding
exists a matching::exists a matching
matching in fact::matching in fact
call the kho::call the kho
kho kho idea::kho kho idea
played this game::played this game
game of kho::game of kho
sitting down starts::sitting down starts
running and starts::running and starts
chasing the members::chasing the members
vertex is free::vertex is free
state that idea::state that idea
throwing an edge::throwing an edge
include that edge::include that edge
include that matching::include that matching
edge will sort::edge will sort
sort of set::sort of set
increased the size::increased the size
thing to check::thing to check
matching are shown::matching are shown
shown in blue::shown in blue
start with vertex::start with vertex
candidate for inclusion::candidate for inclusion
vertices two edges::vertices two edges
two edges incident::two edges incident
conflict just means::conflict just means
remove this edge::remove this edge
green to show::green to show
started this entire::started this entire
remember that yellow::remember that yellow
started this procedure::started this procedure
matching green edges::matching green edges
remember this edge::remember this edge
removed this edge::removed this edge
edge this yellow::edge this yellow
edge has entered::edge has entered
entered our matching::entered our matching
produces a conflict::produces a conflict
eliminate that conflict::eliminate that conflict
color it green::color it green
kho kho sort::kho kho sort
adding three edges::adding three edges
edges we added::edges we added
color those edges::color those edges
stayed this edge::stayed this edge
earlier it state::earlier it state
traverse this graph::traverse this graph
executed this process::executed this process
traversed a path::traversed a path
started at vertex::started at vertex
path is green::path is green
path is yellow::path is yellow
fact the colors::fact the colors
added and removed::added and removed
edges in fact::edges in fact
path we traced::path we traced
procedure has lots::procedure has lots
lots of interest::lots of interest
interest in properties::interest in properties
path an augmenting::path an augmenting
left the set::left the set
out the construction::out the construction
construction the last::construction the last
discover an extra::discover an extra
set e minus::set e minus
minus m supposed::minus m supposed
supposed to denote::supposed to denote
remove the set::remove the set
forward again potentially::forward again potentially
follow an edge::follow an edge
operation of taking::operation of taking
taking an augmenting::taking an augmenting
circle plus operator::circle plus operator
define q circle::define q circle
edges the path::edges the path
green edges form::green edges form
form the intersection::form the intersection
augmenting paths play::augmenting paths play
play a big::play a big
matchings in fact::matchings in fact
eminent computer scientist::eminent computer scientist
sense of analysis::sense of analysis
describe an algorithm::describe an algorithm
credited to edmond::credited to edmond
idea of augmenting::idea of augmenting
finding the augmenting::finding the augmenting
perform this operation::perform this operation
operation and set::operation and set
augment our current::augment our current
matching the moment::matching the moment
attributed to berge::attributed to berge
theorem says berge::theorem says berge
graph is maximum::graph is maximum
exist a augmenting::exist a augmenting
find an augmenting::find an augmenting
hands a maximum::hands a maximum
justifies or proves::justifies or proves
proves the correctness::proves the correctness
correctness of edmond::correctness of edmond
theorem the proof::theorem the proof
theorem the first::theorem the first
required to prove::required to prove
exist an augmenting::exist an augmenting
existed an augmenting::existed an augmenting
augment that path::augment that path
compute m circle::compute m circle
case is obvious::case is obvious
obvious the interesting::obvious the interesting
prove this case::prove this case
case by contradiction::case by contradiction
assume the contrary::assume the contrary
wanted to watch::wanted to watch
composed of paths::composed of paths
paths and cycles::paths and cycles
claim is equivalent::claim is equivalent
equivalent to stating::equivalent to stating
sets of edges::sets of edges
taking some edges::taking some edges
forget the symmetric::forget the symmetric
union the degree::union the degree
consists of paths::consists of paths
two consecutive edges::two consecutive edges
defined to consist::defined to consist
consist of edges::consist of edges
incident on vertices::incident on vertices
property will stay::property will stay
inside r consist::inside r consist
consist of alternate::consist of alternate
remove the intersection::remove the intersection
minus the size::minus the size
intersection but note::intersection but note
end we subtract::end we subtract
examine the implications::examine the implications
first each cycle::first each cycle
cycles this fact::cycles this fact
exist a path::exist a path
last end points::last end points
simply the definition::simply the definition
augmenting path exists::augmenting path exists
improve your path::improve your path
find augmenting paths::find augmenting paths
augmenting path starts::augmenting path starts
starts and ends::starts and ends
vertex it starts::vertex it starts
generality or vice::generality or vice
start an augmenting::start an augmenting
exists a augmenting::exists a augmenting
growing the path::growing the path
difference the edges::difference the edges
matching e minus::matching e minus
path must grow::path must grow
backwards using edges::backwards using edges
reach a free::reach a free
grow these parts::grow these parts
discovered a path::discovered a path
package this set::package this set
set of ideas::set of ideas
breadth first search::breadth first search
slightly a graph::slightly a graph
idea will work::idea will work
vertices are free::vertices are free
vertex.2 and vertex::vertex.2 and vertex
start the paths::start the paths
direction and backward::direction and backward
make our description::make our description
nice and compact::nice and compact
direct these edges::direct these edges
kind of search::kind of search
grow the path::grow the path
enforce this constraint::enforce this constraint
grow the paths::grow the paths
put a direction::put a direction
forces the search::forces the search
path the augmented::path the augmented
path goes backwards::path goes backwards
put backward arrows::put backward arrows
forward using edges::forward using edges
path must end::path must end
put a vertex::put a vertex
directed graph notice::directed graph notice
state this algebraically::state this algebraically
define this directed::define this directed
symbol g prime::symbol g prime
consist of vertex::consist of vertex
set v prime::set v prime
minute and edge::minute and edge
union of set::union of set
define the edge::define the edge
set e prime::set e prime
supposed to end::supposed to end
left hand set::left hand set
hand side vertices::hand side vertices
vertices of capital::vertices of capital
set e sub::set e sub
defines our auxiliary::defines our auxiliary
claim our main::claim our main
claim is important::claim is important
finding augmenting paths::finding augmenting paths
graph g prime::graph g prime
claim would enable::claim would enable
find augmented paths::find augmented paths
paths very quickly::paths very quickly
transformed our original::transformed our original
prime by context::prime by context
inside g prime::inside g prime
prime or inside::prime or inside
forward and backward::forward and backward
backward several times::backward several times
times and terminates::times and terminates
edge is present::edge is present
path users edges::path users edges
matching the path::matching the path
path is moving::path is moving
forward going edges::forward going edges
reasoning will accomplish::reasoning will accomplish
defined this auxiliary::defined this auxiliary
find the path::find the path
find a path::find a path
step of finding::step of finding
finding an augmenting::finding an augmenting
augmenting path procedure::augmenting path procedure
construct g prime::construct g prime
return the augmenting::return the augmenting
path this return::path this return
augment the matching::augment the matching
denotes the cardinality::denotes the cardinality
denote the cardinality::denote the cardinality
graphs are represented::graphs are represented
adjacency list representation::adjacency list representation
representation in fact::representation in fact
purpose of simplicity::purpose of simplicity
simplicity of thinking::simplicity of thinking
constructing g prime::constructing g prime
doing the breadth::doing the breadth
construct this graph::construct this graph
oriented the edges::oriented the edges
bfs bfs breadth::bfs bfs breadth
bfs breadth first::bfs breadth first
first search takes::first search takes
step also takes::step also takes
entire procedure augmenting::entire procedure augmenting
procedure augmenting path::procedure augmenting path
done in constant::done in constant
question that remains::question that remains
compute m augmented::compute m augmented
number of augmentations::number of augmentations
completes the analysis::completes the analysis
making the small::making the small
path essentially allowed::path essentially allowed
root n algorithm::root n algorithm
problem for non::problem for non
non bipartite graphs::non bipartite graphs
non bipartite case::non bipartite case
found in non::found in non
bounds for sorting::bounds for sorting
algorithms the topic::algorithms the topic
today is lower::today is lower
designed a algorithm::designed a algorithm
solve some problem::solve some problem
naturally the question::naturally the question
proved a result::proved a result
problem lower bound::problem lower bound
equality is exact::equality is exact
equality is approximate::equality is approximate
motivation for studying::motivation for studying
problem lower bounds::problem lower bounds
question of lower::question of lower
problem being sorting::problem being sorting
sorting regarding sorting::sorting regarding sorting
introduce a model::introduce a model
model of computation::model of computation
prove problem lower::prove problem lower
bounds on decision::bounds on decision
care about decision::care about decision
good enough model::good enough model
average case lower::average case lower
case lower bounds::case lower bounds
prove average case::prove average case
defined the notion::defined the notion
notion of putting::notion of putting
putting the lower::putting the lower
bound f sub::bound f sub
worst case instance::worst case instance
stressing the worst::stressing the worst
worst case bounds::worst case bounds
worst case times::worst case times
measure the performance::measure the performance
performance of algorithms::performance of algorithms
prove lower bounds::prove lower bounds
algorithm is weak::algorithm is weak
size instance size::size instance size
construct this lower::construct this lower
lower bound function::lower bound function
bounds a problem::bounds a problem
algorithm has lower::algorithm has lower
takes the minimum::takes the minimum
minimum worst case::minimum worst case
prove such bounds::prove such bounds
construct bad instances::construct bad instances
bad instances instances::bad instances instances
instances which show::instances which show
give a construction::give a construction
matter what algorithm::matter what algorithm
algorithm you give::algorithm you give
order to prove::order to prove
trivial lower bounds::trivial lower bounds
prove most problems::prove most problems
problems have omega::problems have omega
input the input::input the input
input has length::input has length
random access machines::random access machines
access machines ram::access machines ram
proving non trivial::proving non trivial
non trivial bounds::non trivial bounds
assert a problem::assert a problem
tricky to analyze::tricky to analyze
lots and lots::lots and lots
lots of algorithms::lots of algorithms
enumerating those algorithms::enumerating those algorithms
algorithms or analyzing::algorithms or analyzing
things with ram::things with ram
control flow pattern::control flow pattern
define a simpler::define a simpler
simpler computational model::simpler computational model
control flow patterns::control flow patterns
define such computational::define such computational
models the space::models the space
space of programs::space of programs
programs or space::programs or space
space of algorithms::space of algorithms
easier to visualize::easier to visualize
context of algorithms::context of algorithms
relevant for sorting::relevant for sorting
context of sorting::context of sorting
sorting this model::sorting this model
worry about inputting::worry about inputting
inputting those numbers::inputting those numbers
model a program::model a program
node has labels::node has labels
form i colon::form i colon
describe the model::describe the model
first each edge::first each edge
relational operators leaf::relational operators leaf
operators leaf node::operators leaf node
leaf node labels::leaf node labels
wanted to give::wanted to give
program tree model::program tree model
edge is labeled::edge is labeled
labeled with greater::labeled with greater
leaf is labeled::leaf is labeled
colon j input::colon j input
compared with input::compared with input
equal to branch::equal to branch
make the comparison::make the comparison
path to follow::path to follow
leaf is output::leaf is output
root by starting::root by starting
root we compare::root we compare
follow this branch::follow this branch
perform the instruction::perform the instruction
requires to compare::requires to compare
representing our conclusion::representing our conclusion
represents a sorting::represents a sorting
sorted this input::sorted this input
input instance notice::input instance notice
complete the discussion::complete the discussion
instance the worst::instance the worst
execution you follow::execution you follow
follow that path::follow that path
end up setting::end up setting
define average case::define average case
randomly with equal::randomly with equal
leaf path length::leaf path length
nice graphical interpretation::nice graphical interpretation
decision tree model::decision tree model
model this claim::model this claim
properly this claim::properly this claim
matter what tree::matter what tree
non trivial bound::non trivial bound
ram sorting algorithm::ram sorting algorithm
operations it performs::operations it performs
performs on keys::performs on keys
keys are comparisons::keys are comparisons
comparisons and copying::comparisons and copying
based take heap::based take heap
compare to keys::compare to keys
similarly for merge::similarly for merge
similarly for insertion::similarly for insertion
comparison based algorithms::comparison based algorithms
connected to decision::connected to decision
decision tree algorithms::decision tree algorithms
comparison based ram::comparison based ram
based ram sorting::based ram sorting
exists a decision::exists a decision
decision tree sorting::decision tree sorting
tree sorting algorithm::tree sorting algorithm
instance in fact::instance in fact
class of algorithms::class of algorithms
algorithms the final::algorithms the final
comparison based sorting::comparison based sorting
based sorting algorithm::based sorting algorithm
non trivial result::non trivial result
based sorting algorithms::based sorting algorithms
algorithms for comparison::algorithms for comparison
proving this first::proving this first
prove that sorting::prove that sorting
input x remember::input x remember
apply the inverse::apply the inverse
supposed to compute::supposed to compute
compute this inverse::compute this inverse
leaf the answer::leaf the answer
essentially pi inverse::essentially pi inverse
identified this permutation::identified this permutation
leaves each node::leaves each node
accessible only passing::accessible only passing
strict inequality branches::strict inequality branches
input is permutation::input is permutation
tree whose degree::tree whose degree
out the product::out the product
times n minus::times n minus
factorial is bigger::factorial is bigger
relates comparison based::relates comparison based
tree sorting algorithms::tree sorting algorithms
construct a decision::construct a decision
insight in figuring::insight in figuring
out the main::out the main
keys are compared::keys are compared
keys and base::keys and base
keys to compare::keys to compare
inside a key::inside a key
keys it compares::keys it compares
values of keys::values of keys
determined by examining::determined by examining
examining the algorithm::examining the algorithm
find actual numbers::find actual numbers
values of key::values of key
find the labels::find the labels
examine the program::examine the program
instance i suppose::instance i suppose
fact in instance::fact in instance
first two comparisons::first two comparisons
built this part::built this part
tree the decision::tree the decision
instance i prime::instance i prime
flow can change::flow can change
comparison with keys::comparison with keys
comparisons the comparison::comparisons the comparison
outcomes have matched::outcomes have matched
constructed some super::constructed some super
constructed some path::constructed some path
extend this path::extend this path
determine the label::determine the label
construct a instance::construct a instance
satisfy this label::satisfy this label
constructed an instance::constructed an instance
algorithm and decide::algorithm and decide
fix the label::fix the label
determine the final::determine the final
final sorted order::final sorted order
back the label::back the label
make that leaf::make that leaf
constructed our decision::constructed our decision
decision tree algorithm::decision tree algorithm
finishes this claim::finishes this claim
suppose some comparison::suppose some comparison
based ram algorithm::based ram algorithm
based ram algorithms::based ram algorithms
exist a decision::exist a decision
first claim tells::first claim tells
algorithm the first::algorithm the first
proved this claim::proved this claim
proved a lower::proved a lower
variety of sorting::variety of sorting
bound will apply::bound will apply
turn to average::turn to average
average case complexity::average case complexity
put a lower::put a lower
based on structures::based on structures
properties of trees::properties of trees
root k leaves::root k leaves
complexity of sorting::complexity of sorting
imply some lower::imply some lower
complexity is concerned::complexity is concerned
leaves a distance::leaves a distance
minus square root::minus square root
prove something stronger::prove something stronger
average path length::average path length
path length average::path length average
total path length::total path length
path of length::path of length
sorting on decision::sorting on decision
leaves thus average::leaves thus average
length is bigger::length is bigger
algorithms say heap::algorithms say heap
studied average case::studied average case
complexity of quick::complexity of quick
sort we proved::sort we proved
worse case complexity::worse case complexity
complexity for quick::complexity for quick
first some implications::first some implications
mimics the ram::mimics the ram
operations besides comparisons::operations besides comparisons
fact a popular::fact a popular
algorithm called bucket::algorithm called bucket
operation it performs::operation it performs
allowed in comparison::allowed in comparison
give the algorithm::give the algorithm
build an array::build an array
array of buckets::array of buckets
compute in constant::compute in constant
insert this key::insert this key
visit each bucket::visit each bucket
bucket in turn::bucket in turn
out the contents::out the contents
contents in increasing::contents in increasing
initialize the array::initialize the array
visit every element::visit every element
visit every key::visit every key
square is slight::square is slight
model to study::model to study
things like finding::things like finding
lecture in fact::lecture in fact
extend this decision::extend this decision
study other problems::study other problems
study merging problems::study merging problems
similar to sorting::similar to sorting
putting lower bounds::putting lower bounds
calculate the intersections::calculate the intersections
two given sets::two given sets
idea of decision::idea of decision
model of decision::model of decision
lower bound model::lower bound model
made somewhat stronger::made somewhat stronger
lower bound results::lower bound results
element distinctness lower::element distinctness lower
distinctness lower bounds::distinctness lower bounds
today is element::today is element
distinctness lower bound::distinctness lower bound
sorting lower bounds::sorting lower bounds
call the entire::call the entire
supposed to output::supposed to output
distinct two numbers::distinct two numbers
talked about last::talked about last
non trivial lower::non trivial lower
trivial lower bound::trivial lower bound
examine the numbers::examine the numbers
easily be solved::easily be solved
numbers are identical::numbers are identical
compare adjacent numbers::compare adjacent numbers
numbers after sorting::numbers after sorting
subject of today::subject of today
last time last::last time last
looked at lower::looked at lower
bounds on sorting::bounds on sorting
introduced a lower::introduced a lower
lower bound technique::lower bound technique
lower bounding technique::lower bounding technique
problem of element::problem of element
prove the lower::prove the lower
extend the model::extend the model
call the algebraic::call the algebraic
algebraic decision tree::algebraic decision tree
read a program::read a program
non leaf nodes::non leaf nodes
nodes are labeled::nodes are labeled
program leaf node::program leaf node
output ? edge::output ? edge
labels are relational::labels are relational
equal to greater::equal to greater
decision tree program::decision tree program
program for sorting::program for sorting
sorting three numbers::sorting three numbers
non leaf node::non leaf node
node is labeled::node is labeled
inputs is compared::inputs is compared
branch is found::branch is found
edges are found::edges are found
found and execution::found and execution
wanted to compute::wanted to compute
program for size::program for size
size n equal::size n equal
point we noted::point we noted
access machine model::access machine model
resembles our computers::resembles our computers
applies to comparison::applies to comparison
ram model comparison::ram model comparison
model comparison based::model comparison based
compare the keys::compare the keys
keys to induct::keys to induct
sorting lower bound::sorting lower bound
bound the input::bound the input
consisting of components::consisting of components
sort these numbers::sort these numbers
numbers the key::numbers the key
thing to observe::thing to observe
lower bound argument::lower bound argument
factorial possible answers::factorial possible answers
out n factorial::out n factorial
factorial different answers::factorial different answers
print a single::print a single
out that entire::out that entire
entire permutation constitutes::entire permutation constitutes
constitutes a single::constitutes a single
capable of printing::capable of printing
printing n factorial::printing n factorial
language of information::language of information
answer has high::answer has high
high information content::high information content
content the answer::content the answer
factorial different values::factorial different values
factorial in fact::factorial in fact
information theory measures::information theory measures
theory measures information::theory measures information
number of ways::number of ways
ways in fact::ways in fact
information theoretical lower::information theoretical lower
theoretical lower bounds::theoretical lower bounds
information theoretic lower::information theoretic lower
theoretic lower bound::theoretic lower bound
element distinctness problem::element distinctness problem
means all elements::means all elements
means some duplicate::means some duplicate
height of value::height of value
giving yes answers::giving yes answers
write down things::write down things
asserts a problem::asserts a problem
interpret our input::interpret our input
tuple as representing::tuple as representing
represents the first::represents the first
represents the nth::represents the nth
entire thing represents::entire thing represents
represents a point::represents a point
call that point::call that point
restrict these instances::restrict these instances
unit n cube::unit n cube
argue that things::argue that things
end of execution::end of execution
region is connected::region is connected
coordinates are distinct::coordinates are distinct
consist of distinct::consist of distinct
alternately these coordinates::alternately these coordinates
non trivial permutation::non trivial permutation
distinct yes leaves::distinct yes leaves
two distinct leaves::two distinct leaves
argue in fact::argue in fact
leaves is bigger::leaves is bigger
restricting the points::restricting the points
points to unit::points to unit
hard to visualize::hard to visualize
visualize n dimensional::visualize n dimensional
visualize two dimensional::visualize two dimensional
two dimensional space::two dimensional space
axis our instances::axis our instances
pick a point::pick a point
continue the analogy::continue the analogy
instances which lie::instances which lie
coordinate is equal::coordinate is equal
instances the interior::instances the interior
line which divides::line which divides
divides the square::divides the square
geometric view point::geometric view point
interpreting these instances::interpreting these instances
finished this part::finished this part
part we interpreted::part we interpreted
interpreted our input::interpreted our input
restricted the instance::restricted the instance
two main claims::two main claims
claims this claim::claims this claim
instances will reach::instances will reach
defining what connected::defining what connected
exists a path::exists a path
region the interior::region the interior
define a convex::define a convex
proof a region::proof a region
region the straight::region the straight
straight line path::straight line path
making the stronger::making the stronger
case of connectivity::case of connectivity
region is convex::region is convex
worry about convexity::worry about convexity
straight line paths::straight line paths
easy to reason::easy to reason
easier to argue::easier to argue
region is easier::region is easier
easier to prove::easier to prove
worried about convex::worried about convex
examples of convex::examples of convex
examples of objects::examples of objects
joining the straight::joining the straight
straight line joining::straight line joining
kidney shaped region::kidney shaped region
cashew shaped region::cashew shaped region
describes what connected::describes what connected
reached on execution::reached on execution
wanted to argue::wanted to argue
suppose i follow::suppose i follow
follow this path::follow this path
begin by giving::begin by giving
giving some intuition::giving some intuition
equal to path::equal to path
characterize the region::characterize the region
characterization is geometric::characterization is geometric
coordinate is smaller::coordinate is smaller
putting our region::putting our region
visit the root::visit the root
root any instance::root any instance
instance will arrive::instance will arrive
entire unit cube::entire unit cube
visiting the root::visiting the root
constitute the entire::constitute the entire
visiting this node::visiting this node
node is visited::node is visited
top be smaller::top be smaller
wedge shaped region::wedge shaped region
moment i assert::moment i assert
assert a condition::assert a condition
slice my current::slice my current
shrink the set::shrink the set
slicing operation maintains::slicing operation maintains
operation maintains convexity::operation maintains convexity
roughly the idea::roughly the idea
roughly the argument::roughly the argument
execution the instance::execution the instance
reached by definition::reached by definition
finish this execution::finish this execution
reached in execution::reached in execution
execution with instance::execution with instance
instance my instance::instance my instance
curious looking manner::curious looking manner
minus lambda times::minus lambda times
case lambda equal::case lambda equal
lambda is equal::lambda is equal
midpoint of line::midpoint of line
values of lambda::values of lambda
line segment joining::line segment joining
straight line segment::straight line segment
line segment line::line segment line
segment line joining::segment line joining
prove in order::prove in order
path must lie::path must lie
analyze this execution::analyze this execution
start with root::start with root
check that out::check that out
inequality lambda times::inequality lambda times
complete this argument::complete this argument
proved that execution::proved that execution
segment i reach::segment i reach
reach distinct leaves::reach distinct leaves
reach yes leaves::reach yes leaves
fact the claim::fact the claim
consists of distinct::consists of distinct
means the answer::means the answer
prove this result::prove this result
result by contradiction::result by contradiction
exists a point::exists a point
supposed to lie::supposed to lie
claim the sub::claim the sub
proof almost immediately::proof almost immediately
define a function::define a function
simply the difference::simply the difference
path is continuous::path is continuous
exist a point::exist a point
coordinates are equal::coordinates are equal
equal that means::equal that means
proved our basic::proved our basic
prove this sub::prove this sub
define a permutation::define a permutation
defining this permutation::defining this permutation
answer will hit::answer will hit
trace it backwards::trace it backwards
prove the claim::prove the claim
supposed to find::supposed to find
reason for sorting::reason for sorting
choose i smaller::choose i smaller
property is guaranteed::property is guaranteed
sequence i change::sequence i change
found these two::found these two
number is greater::number is greater
skip the algebra::skip the algebra
property will hold::property will hold
needed to prove::needed to prove
prove our original::prove our original
two distinct permutations::two distinct permutations
number of distinct::number of distinct
finishes the claim::finishes the claim
space no instances::space no instances
partition the instance::partition the instance
similar to last::similar to last
algorithms for element::algorithms for element
case of algebraic::case of algebraic
algebraic decision trees::algebraic decision trees
consists of trees::consists of trees
trees with outgoing::trees with outgoing
longer i colon::longer i colon
input the components::input the components
evaluate the label::evaluate the label
expression is equal::expression is equal
choose the equal::choose the equal
point lies inside::point lies inside
restricting our point::restricting our point
inside this region::inside this region
expression is linear::expression is linear
results actually hold::results actually hold
expression is non-linear::expression is non-linear
intersection of constraints::intersection of constraints
constraints can produce::constraints can produce
produce disconnected regions::produce disconnected regions
happen if things::happen if things
things are linear::things are linear
problem over inputs::problem over inputs
problem whose answer::problem whose answer
element distinctness suppose::element distinctness suppose
case for simple::case for simple
simple decision trees::simple decision trees
omega of log::omega of log
inside this omega::inside this omega
constant of proportionality::constant of proportionality
complicated algebraic model::complicated algebraic model
bound for element::bound for element
distinctness in fact::distinctness in fact
degree will give::degree will give
leaf can correspond::leaf can correspond
heavy duty machinery::heavy duty machinery
machinery from algebraic::machinery from algebraic
geometry to count::geometry to count
constraints are linear::constraints are linear
constraints are high::constraints are high
high degree algebraic::high degree algebraic
degree algebraic expressions::degree algebraic expressions
quickly summarize lower::quickly summarize lower
summarize lower bound::summarize lower bound
lower bound theory::lower bound theory
last two lectures::last two lectures
done another interesting::done another interesting
deep mathematics algebraic::deep mathematics algebraic
mathematics algebraic geometry::mathematics algebraic geometry
geometry is supposed::geometry is supposed
area of mathematics::area of mathematics
find the heavier::find the heavier
lecture to formulate::lecture to formulate
formulate a decision::formulate a decision
introduction to reductions::introduction to reductions
study this notion::study this notion
effectively the first::effectively the first
sort of talk::sort of talk
land your dream::land your dream
job the company::job the company
settled in software::settled in software
deal with designing::deal with designing
give you challenging::give you challenging
projects the first::projects the first
jobs on computers::jobs on computers
sizes could vary::sizes could vary
automate your boss::automate your boss
automate this process::automate this process
write a program::write a program
input these sizes::input these sizes
schedule these jobs::schedule these jobs
jobs on processors::jobs on processors
last job finished::last job finished
finished is fastest::finished is fastest
job of size::job of size
start a job::start a job
run for completion::run for completion
jobs must finish::jobs must finish
supposing i schedule::supposing i schedule
jobs are scheduled::jobs are scheduled
last job completes::last job completes
last job finishes::last job finishes
sort of distribute::sort of distribute
distribute the jobs::distribute the jobs
jobs in order::jobs in order
loaded for instance::loaded for instance
working your boss::working your boss
boss is happy::boss is happy
day the boss::day the boss
produce the schedule::produce the schedule
produces the schedule::produces the schedule
input is smaller::input is smaller
takes is smaller::takes is smaller
boss says fix::boss says fix
produce a optimal::produce a optimal
produce the optimal::produce the optimal
back and figure::back and figure
jobs are mixed::jobs are mixed
sizes are mixed::sizes are mixed
reason the algorithm::reason the algorithm
sort the jobs::sort the jobs
jobs by size::jobs by size
jobs are increasing::jobs are increasing
order of size::order of size
put the last::put the last
finish all jobs::finish all jobs
units every job::units every job
job has finished::job has finished
repeat the algorithm::repeat the algorithm
assign these processes::assign these processes
lightly loaded processor::lightly loaded processor
processor you sum::processor you sum
choose the smaller::choose the smaller
difficult possibly impossible::difficult possibly impossible
compute the size::compute the size
bar s bar::bar s bar
two and choose::two and choose
choose the maximum::choose the maximum
subset and pick::subset and pick
compute these choose::compute these choose
ways of scheduling::ways of scheduling
give the input::give the input
list of size::list of size
running the algorithm::running the algorithm
pass an hour::pass an hour
day the algorithm::day the algorithm
boss is starting::boss is starting
input of size::input of size
years and years::years and years
brute force approaches::brute force approaches
subsets of jobs::subsets of jobs
instruction a computer::instruction a computer
computer can process::computer can process
fastest computer runs::fastest computer runs
make an estimate::make an estimate
big over estimate::big over estimate
disposal to solve::disposal to solve
hours a day::hours a day
instructions per year::instructions per year
subsets per year::subsets per year
years this takes::years this takes
world the fastest::world the fastest
number of years::number of years
number of atoms::number of atoms
universe per year::universe per year
lot of years::lot of years
algorithm to finish::algorithm to finish
fired in fact::fired in fact
studying np completeness::studying np completeness
save your job::save your job
design of algorithms::design of algorithms
find the solution::find the solution
handle other problems::handle other problems
manages to solve::manages to solve
imbibe the first::imbibe the first
concept of reduction::concept of reduction
reduction really means::reduction really means
library where large::library where large
number of problems::number of problems
invent the wheel::invent the wheel
efficiently use code::efficiently use code
algorithms to generate::algorithms to generate
generate new algorithms::generate new algorithms
thing is notion::thing is notion
graph g equals::graph g equals
set a matching::set a matching
two edges share::two edges share
ticked edges form::ticked edges form
form a matching::form a matching
share a end::share a end
point the end::point the end
share any end::share any end
point for instance::point for instance
essentially one set::essentially one set
share an environment::share an environment
matching is perfect::matching is perfect
graph are end::graph are end
points a perfect::points a perfect
vertices are end::vertices are end
note that size::note that size
edges will share::edges will share
share an end::share an end
change this graph::change this graph
two perfect matching::two perfect matching
matching it ticks::matching it ticks
form another perfect::form another perfect
problem perfect match::problem perfect match
matching the input::matching the input
graph is perfect::graph is perfect
matching a graph::matching a graph
sub routine library::sub routine library
sub routine coded::sub routine coded
problem maximum matching::problem maximum matching
size your job::size your job
construct an algorithm::construct an algorithm
hope the objective::hope the objective
objective is clear::objective is clear
sort of intermediate::sort of intermediate
find the size::find the size
algorithm for perfect::algorithm for perfect
size of maximum::size of maximum
add a vertex::add a vertex
call this graph::call this graph
things can happen::things can happen
vertex this extra::vertex this extra
draw the edges::draw the edges
remove this vertex::remove this vertex
matching of size::matching of size
size v minus::size v minus
perfect matching fellows::perfect matching fellows
write the generic::write the generic
perfect matching algorithm::perfect matching algorithm
added one vertex::added one vertex
connected every single::connected every single
added two vertices::added two vertices
encountered a graph::encountered a graph
graph with perfect::graph with perfect
vertices are matched::vertices are matched
graph in fact::graph in fact
minus and minus::minus and minus
vertices i match::vertices i match
perfect matching matching::perfect matching matching
objective the intermediate::objective the intermediate
finding the perfect::finding the perfect
graph by calling::graph by calling
times i call::times i call
call it faster::call it faster
find the perfect::find the perfect
algorithm that finds::algorithm that finds
finds the size::finds the size
call the perfect::call the perfect
algorithm n times::algorithm n times
log n calls::log n calls
matching it resembles::matching it resembles
resembles binary search::resembles binary search
essentially it shows::essentially it shows
calling this algorithm::calling this algorithm
find this perfect::find this perfect
filled this intermediate::filled this intermediate
find the edges::find the edges
pick any edge::pick any edge
remove a edge::remove a edge
graph at remains::graph at remains
put this edge::put this edge
back this edge::back this edge
edge is part::edge is part
leave this edge::leave this edge
edge i remove::edge i remove
matching the resultant::matching the resultant
size is fallen::size is fallen
back i remove::back i remove
size ? size::size ? size
point the graph::point the graph
graph that remains::graph that remains
throw this edge::throw this edge
completes our objective::completes our objective
wanted to design::wanted to design
algorithm for maximum::algorithm for maximum
algorithm for problem::algorithm for problem
exists an efficient::exists an efficient
problem we show::problem we show
design it takes::design it takes
takes as input::takes as input
input for problem::input for problem
calls this sub::calls this sub
outputs an answer::outputs an answer
solution for problem::solution for problem
looked at last::looked at last
exist a perfect::exist a perfect
modifying the inputs::modifying the inputs
reduced this problem::reduced this problem
reduced the problem::reduced the problem
efficient problem algorithm::efficient problem algorithm
find an efficient::find an efficient
construct this efficient::construct this efficient
earlier a solution::earlier a solution
algorithm an efficient::algorithm an efficient
reasonable size inputs::reasonable size inputs
size inputs finishes::size inputs finishes
finishes in reasonable::finishes in reasonable
efficient to start::efficient to start
brute force algorithms::brute force algorithms
algorithms ? brute::algorithms ? brute
algorithms are algorithms::algorithms are algorithms
size a brute::size a brute
collection of edges::collection of edges
subsets of edges::subsets of edges
out a matching::out a matching
entire solution space::entire solution space
sort of characteristics::sort of characteristics
algorithm the input::algorithm the input
subsets typical times::subsets typical times
design such algorithms::design such algorithms
algorithm is bounded::algorithm is bounded
exists a constant::exists a constant
log n times::log n times
polynomial n square::polynomial n square
conquer or dynamic::conquer or dynamic
size n square::size n square
square n cube::square n cube
cube shortest path::cube shortest path
shortest path finding::shortest path finding
path finding minimum::path finding minimum
finding minimum spanning::finding minimum spanning
minimum spanning trees::minimum spanning trees
notion of efficiency::notion of efficiency
two different things::two different things
program an algorithm::program an algorithm
minutes to complete::minutes to complete
motion of efficiency::motion of efficiency
sort of reason::sort of reason
algorithm which runs::algorithm which runs
runs an polynomial::runs an polynomial
polynomial in input::polynomial in input
bound the running::bound the running
polynomial time algorithm::polynomial time algorithm
problem which means::problem which means
means the running::means the running
polynomial is small::polynomial is small
implied an algorithm::implied an algorithm
finding the size::finding the size
finding a maximum::finding a maximum
algorithm is efficient::algorithm is efficient
true the reason::true the reason
define a couple::define a couple
couple of terms::couple of terms
concepts of hamiltonian::concepts of hamiltonian
path in hamiltonian::path in hamiltonian
length n minus::length n minus
path which spans::path which spans
spans all vertices::spans all vertices
vertices other words::vertices other words
path the hamiltonian::path the hamiltonian
cycle which spans::cycle which spans
vertices one single::vertices one single
edge this edge::edge this edge
path the reverse::path the reverse
talking of reductions::talking of reductions
right now related::right now related
finding the hamiltonian::finding the hamiltonian
confused with hewlett::confused with hewlett
put the graph::put the graph
graph as hamiltonian::graph as hamiltonian
path or cycle::path or cycle
cycle that spans::cycle that spans
vertices hamiltonian path::vertices hamiltonian path
path that spans::path that spans
hamiltonian cycle design::hamiltonian cycle design
design a efficient::design a efficient
supposing the input::supposing the input
algorithm somehow supposing::algorithm somehow supposing
supposing i feed::supposing i feed
cases this fellow::cases this fellow
added new vertex::added new vertex
vertex u connect::vertex u connect
graph i feed::graph i feed
vertex i connect::vertex i connect
correct which means::correct which means
means this graph::means this graph
prime new graph::prime new graph
output for instance::output for instance
path which runs::path which runs
add the edges::add the edges
construct a path::construct a path
path a hamiltonian::path a hamiltonian
construction is similar::construction is similar
vertex u sits::vertex u sits
path will start::path will start
statement both ways::statement both ways
algorithm for hamiltonian::algorithm for hamiltonian
hamiltonian path constructs::hamiltonian path constructs
algorithm the previous::algorithm the previous
call the hamiltonian::call the hamiltonian
hamiltonian cycle routine::hamiltonian cycle routine
graph the input::graph the input
algorithm was sufficient::algorithm was sufficient
prime to distinguish::prime to distinguish
routine for hamiltonian::routine for hamiltonian
usual trick feed::usual trick feed
feed this graph::feed this graph
cycle in fact::cycle in fact
remove any edge::remove any edge
edge the hamiltonian::edge the hamiltonian
remove every edge::remove every edge
edge e call::edge e call
edge e prime::edge e prime
prime g minus::prime g minus
minus e prime::minus e prime
removed any edge::removed any edge
correct the algorithm::correct the algorithm
path after removal::path after removal
feels that graph::feels that graph
graph any edge::graph any edge
graph becomes disconnected::graph becomes disconnected
remove this middle::remove this middle
remove any vertex::remove any vertex
vertex the resultant::vertex the resultant
fact be connected::fact be connected
draw this graph::draw this graph
supposing i remove::supposing i remove
exist a hamiltonian::exist a hamiltonian
choose this edge::choose this edge
choose that edge::choose that edge
edge that edge::edge that edge
give a hamiltonian::give a hamiltonian
graph are similar::graph are similar
instance this edge::instance this edge
edge is similar::edge is similar
right this edge::right this edge
bottom is similar::bottom is similar
two are similar::two are similar
graph is symmetric::graph is symmetric
enumerate to sort::enumerate to sort
leads the graph::leads the graph
type the algorithm::type the algorithm
described is wrong::described is wrong
wrong this fails::wrong this fails
remove the edge::remove the edge
attach two additional::attach two additional
two additional vertices::two additional vertices
vertices u prime::vertices u prime
path the question::path the question
question we wanted::question we wanted
wanted to answer::wanted to answer
supposing this graph::supposing this graph
hamiltonian circuit supposing::hamiltonian circuit supposing
hamiltonian circuit pass::hamiltonian circuit pass
order which means::order which means
means the edge::means the edge
hamiltonian cycle passing::hamiltonian cycle passing
picked an edge::picked an edge
graph g edge::graph g edge
attached u prime::attached u prime
hamiltonian path supposing::hamiltonian path supposing
vertices have degree::vertices have degree
path u prime::path u prime
points of hamiltonian::points of hamiltonian
path which means::path which means
means the hamiltonian::means the hamiltonian
graph we remove::graph we remove
remove that edge::remove that edge
prime v prime::prime v prime
prime and connect::prime and connect
connect u prime::connect u prime
lets say graph::lets say graph
graph g lets::graph g lets
two extra vertices::two extra vertices
hamiltonian path algorithm::hamiltonian path algorithm
path algorithm runs::path algorithm runs
runs time polynomial::runs time polynomial
things to check::things to check
first you call::first you call
hamiltonian path routine::hamiltonian path routine
change the input::change the input
remove one edge::remove one edge
two more edges::two more edges
two cases case::two cases case
correct second case::correct second case
exists an edge::exists an edge
removing and adding::removing and adding
adding these two::adding these two
path here remove::path here remove
edges and add::edges and add
add this edge::add this edge
back together hamiltonian::back together hamiltonian
case is done::case is done
prove the contra::prove the contra
means this statement::means this statement
written is equivalent::written is equivalent
write the equivalent::write the equivalent
cycle this implies::cycle this implies
cycle it means::cycle it means
means there exist::means there exist
exist an edge::exist an edge
two are equivalent::two are equivalent
cycle there exists::cycle there exists
exists a edge::exists a edge
edge and attach::edge and attach
vertices this resultant::vertices this resultant
wanted to prove::wanted to prove
problems we looked::problems we looked
wrote input output::wrote input output
looked at problems::looked at problems
finding a matching::finding a matching
weight of finding::weight of finding
matching with maximum::matching with maximum
input and output::input and output
output was edges::output was edges
question the input::question the input
question the answer::question the answer
problems the answer::problems the answer
problems the output::problems the output
spend many bits::spend many bits
bits as output::bits as output
hamiltonian cycle problem::hamiltonian cycle problem
output the hamiltonian::output the hamiltonian
hamiltonian cycle input::hamiltonian cycle input
graph g output::graph g output
output every edge::output every edge
choose one hamiltonian::choose one hamiltonian
cycle and output::cycle and output
output the edges::output the edges
distinguish between problems::distinguish between problems
require the output::require the output
bit and problems::bit and problems
call decision problems::call decision problems
call search problems::call search problems
decision and search::decision and search
decide whether true::decide whether true
solution and output::solution and output
output the solution::output the solution
search problem output::search problem output
output a hamiltonian::output a hamiltonian
exists the input::exists the input
hamiltonian cycle output::hamiltonian cycle output
two problems relate::two problems relate
turns out people::turns out people
graph the sub::graph the sub
sub routine outputs::sub routine outputs
outputs the hamiltonian::outputs the hamiltonian
find a algorithm::find a algorithm
feed the graph::feed the graph
forms a hamiltonian::forms a hamiltonian
trivial our job::trivial our job
talking of efficient::talking of efficient
respect to matching::respect to matching
routine which answered::routine which answered
doing this supposing::doing this supposing
remove an edge::remove an edge
edges you put::edges you put
throw these edges::throw these edges
cycle you throw::cycle you throw
edges for edges::edges for edges
remove those edges::remove those edges
present you put::present you put
remaining the claim::remaining the claim
edges which remain::edges which remain
remain must form::remain must form
form a hamiltonian::form a hamiltonian
spurious edges floating::spurious edges floating
cycle other edge::cycle other edge
graph is hamiltonian::graph is hamiltonian
cycle the answer::cycle the answer
thrown this edge::thrown this edge
present are hamiltonian::present are hamiltonian
find out edges::find out edges
cycle which means::cycle which means
means what remains::means what remains
remains are edges::remains are edges
extract the hamiltonian::extract the hamiltonian
sort of decide::sort of decide
problem is easy::problem is easy
version is easy::version is easy
version is hard::version is hard
hard then social::hard then social
social decision word::social decision word
focus on decision::focus on decision
versions of problem::versions of problem
ready to define::ready to define
define the class::define the class
sort of give::sort of give
favorite hamiltonian problem::favorite hamiltonian problem
call a prover::call a prover
call a verifier::call a verifier
prover and verifier::prover and verifier
verifier has limited::verifier has limited
trust anybody sort::trust anybody sort
trust the prover::trust the prover
sort of lets::sort of lets
graph in front::graph in front
drawn a huge::drawn a huge
figure these things::figure these things
verifier is skeptical::verifier is skeptical
graph have hamiltonian::graph have hamiltonian
convince the verifier::convince the verifier
made the right::made the right
graph has hamiltonian::graph has hamiltonian
out the edges::out the edges
graph which form::graph which form
form some edges::form some edges
edges which form::edges which form
form some hamiltonian::form some hamiltonian
out some hamiltonian::out some hamiltonian
form a make::form a make
form a cycle::form a cycle
easy to verify::easy to verify
convinced the verifier::convinced the verifier
graph the verifier::graph the verifier
prover then picks::prover then picks
edges they form::edges they form
verifier then verifies::verifier then verifies
proved that hamiltonian::proved that hamiltonian
defined the class::defined the class
proving things proving::proving things proving
proving the problems::proving the problems
prover verifier game::prover verifier game
two non trivial::two non trivial
non trivial integers::non trivial integers
composite which means::composite which means
two are non::two are non
non trivial factors::non trivial factors
checks the result::checks the result
means the prover::means the prover
prover could convince::prover could convince
verifies now supposing::verifies now supposing
question to answer::question to answer
brute force method::brute force method
prover to sort::prover to sort
sort of convince::sort of convince
prover can convince::prover can convince
sort of differently::sort of differently
pick a problem::pick a problem
problem we pick::problem we pick
discuss a game::discuss a game
call them prover::call them prover
verifier very shortly::verifier very shortly
shortly this prover::shortly this prover
cycle the verifier::cycle the verifier
cycle very easy::cycle very easy
picks any hamiltonian::picks any hamiltonian
tells he tells::tells he tells
tells the verifier::tells the verifier
sort of limited::sort of limited
limited in resources::limited in resources
write this conversation::write this conversation
cycle the prover::cycle the prover
verifier then asks::verifier then asks
prover supplies edges::prover supplies edges
form hamiltonian cycle::form hamiltonian cycle
supplement this statement::supplement this statement
supplies the edges::supplies the edges
constitutes a proof::constitutes a proof
proof that hamiltonian::proof that hamiltonian
problem the question::problem the question
string the prover::string the prover
prover will give::prover will give
input the answer::input the answer
inputs are inputs::inputs are inputs
move over definition::move over definition
prover can give::prover can give
give the verifier::give the verifier
consists of edges::consists of edges
proves that hamiltonian::proves that hamiltonian
circuit the problem::circuit the problem
problem hamiltonian circuit::problem hamiltonian circuit
sort of points::sort of points
supply a proof::supply a proof
proof this proof::proof this proof
sort of draw::sort of draw
draw this diagrammatically::draw this diagrammatically
inputs the prover::inputs the prover
shows the verifier::shows the verifier
sends the proof::sends the proof
string and sort::string and sort
sort of figures::sort of figures
prover can send::prover can send
send some proof::send some proof
verifier in polynomial::verifier in polynomial
composites this problem::composites this problem
prover to convince::prover to convince
inputs which means::inputs which means
sort of obvious::sort of obvious
number is composite::number is composite
question i guess::question i guess
sort of encounter::sort of encounter
definition is made::definition is made
sort of numbers::sort of numbers
number that divides::number that divides
number is prime::number is prime
supplied right edges::supplied right edges
edges having hamiltonian::edges having hamiltonian
supposing the prover::supposing the prover
difficult thing supposing::difficult thing supposing
extremely difficult thing::extremely difficult thing
collections of edges::collections of edges
edges and sees::edges and sees
vertices the graph::vertices the graph
edges and check::edges and check
behave very differently::behave very differently
sort of note::sort of note
proof to prove::proof to prove
verifier is convinced::verifier is convinced
fact yes inputs::fact yes inputs
hamiltonian circuit case::hamiltonian circuit case
case for instance::case for instance
sends the factorization::sends the factorization
verifier just multiplies::verifier just multiplies
checks whether equal::checks whether equal
fact now defined::fact now defined
defined a class::defined a class
examples in fact::examples in fact
define this class::define this class
occur in real::occur in real
real life fall::real life fall
problems in real::problems in real
easier in fact::easier in fact
versions of real::versions of real
encountering in real::encountering in real
sort of central::sort of central
courses in computer::courses in computer
define the problem::define the problem
make few definitions::make few definitions
takes two values::takes two values
sort of alternate::sort of alternate
alternate between true::alternate between true
bar is false::bar is false
bar is true::bar is true
negation some people::negation some people
bar a literal::bar a literal
variable or negation::variable or negation
bar are literals::bar are literals
literals a clause::literals a clause
depending on values::depending on values
evaluates to true::evaluates to true
false for instance::false for instance
true the clause::true the clause
clause is true::clause is true
false otherwise true::false otherwise true
literals are false::literals are false
formula in cnf::formula in cnf
call a boolean::call a boolean
stands for conjunctive::stands for conjunctive
conjunctive normal form::conjunctive normal form
thing this formula::thing this formula
formula is true::formula is true
write this formula::write this formula
false it means::false it means
check each clause::check each clause
value is true::value is true
check a clause::check a clause
evaluate to true::evaluate to true
special boolean formulae::special boolean formulae
form general boolean::form general boolean
general boolean formula::general boolean formula
equivalently in cnf::equivalently in cnf
ready to roll::ready to roll
exists an assignment::exists an assignment
assigns a value::assigns a value
value either true::value either true
values either true::values either true
evaluate the boolean::evaluate the boolean
call the boolean::call the boolean
boolean formula satisfied::boolean formula satisfied
satisfiable for instance::satisfiable for instance
satisfy this formula::satisfy this formula
confuse with exams::confuse with exams
stands for satisfiability::stands for satisfiability
call this boolean::call this boolean
observe that sat::observe that sat
sat is empty::sat is empty
problem and suppose::problem and suppose
suppose the answer::suppose the answer
verifier be convinced::verifier be convinced
answered this question::answered this question
variables the verifier::variables the verifier
assignment and checks::assignment and checks
true the verifier::true the verifier
checks the formula::checks the formula
easy to check::easy to check
clauses are true::clauses are true
true all clauses::true all clauses
true the formula::true the formula
formula is satisfiable::formula is satisfiable
thing that makes::thing that makes
sat very special::sat very special
theorem of cook::theorem of cook
cook is steven::cook is steven
person steven cook::person steven cook
theorems in computer::theorems in computer
efficient means polynomial::efficient means polynomial
algorithm for sat::algorithm for sat
suffices to solve::suffices to solve
solve just sat::solve just sat
includes hamiltonian cycle::includes hamiltonian cycle
sort of similar::sort of similar
notion of reduction::notion of reduction
algorithm we showed::algorithm we showed
showed this means::showed this means
efficient algorithm implies::efficient algorithm implies
implies every problem::implies every problem
means every problem::means every problem
theorem has changed::theorem has changed
changed the shape::changed the shape
shape of computer::shape of computer
ways of reading::ways of reading
reading this statement::reading this statement
attention on sat::attention on sat
solution for sat::solution for sat
make a statement::make a statement
easy and difficult::easy and difficult
prove these statements::prove these statements
fortunately with cook::fortunately with cook
theorem in hand::theorem in hand
capable of doing::capable of doing
doing such things::doing such things
sort of implication::sort of implication
sort of identify::sort of identify
identify our goal::identify our goal
call a clique::call a clique
clique the subset::clique the subset
graph every edge::graph every edge
clique of size::clique of size
find a clique::find a clique
clique of maximum::clique of maximum
find a largest::find a largest
vertices it forms::vertices it forms
forms a clique::forms a clique
graph for instance::graph for instance
define a problem::define a problem
minute the question::minute the question
sense the question::sense the question
solve the search::solve the search
algorithm to solve::algorithm to solve
solve the decision::solve the decision
problem just find::problem just find
find the clique::find the clique
clique and find::clique and find
done the graph::done the graph
feeding the graph::feeding the graph
largest clique size::largest clique size
found this size::found this size
first the hint::first the hint
hint is first::hint is first
first design algorithm::first design algorithm
find largest cliques::find largest cliques
largest cliques size::largest cliques size
size or size::size or size
throw away vertex::throw away vertex
first you feed::first you feed
remove a vertex::remove a vertex
throw the vertex::throw the vertex
retain the vertex::retain the vertex
form a clique::form a clique
similar to finding::similar to finding
finding the edges::finding the edges
throw away vertices::throw away vertices
algorithm that solves::algorithm that solves
solves the decision::solves the decision
solves the search::solves the search
solve all problems::solve all problems
problem called sat::problem called sat
sat the input::sat the input
input was sat::input was sat
sat was clauses::sat was clauses
assignment of values::assignment of values
evaluate this formula::evaluate this formula
set to true::set to true
set to false::set to false
false x bar::false x bar
assignment an assignment::assignment an assignment
literals these formula::literals these formula
cnf conjunctive normal::cnf conjunctive normal
theorem is due::theorem is due
due to cook::due to cook
theorem it states::theorem it states
exists a polynomial::exists a polynomial
identified one problem::identified one problem
problems in sat::problems in sat
sat in fact::sat in fact
call these problems::call these problems
property which means::property which means
solves this problem::solves this problem
satisfy two things::satisfy two things
require the problem::require the problem
complete we require::complete we require
states that sat::states that sat
add many problems::add many problems
set this set::set this set
begin with clique::begin with clique
define problem clique::define problem clique
prover could give::prover could give
input would check::input would check
sort of entire::sort of entire
algorithm for clique::algorithm for clique
remove this clique::remove this clique
clique will show::clique will show
construct a polynomial::construct a polynomial
input it takes::input it takes
input as graph::input as graph
collection of clause::collection of clause
routine to solve::routine to solve
problem on graph::problem on graph
graphs to construct::graphs to construct
construct to determine::construct to determine
formula is satifiable::formula is satifiable
construct a graph::construct a graph
clique into clique::clique into clique
construct some graph::construct some graph
sub routine feed::sub routine feed
output is graph::output is graph
construct the graph::construct the graph
literal clause literal::literal clause literal
clause literal pair::clause literal pair
divided the vertex::divided the vertex
bar to true::bar to true
pick by picking::pick by picking
picking one vertex::picking one vertex
pick one vertex::pick one vertex
immediately become false::immediately become false
pick the vertices::pick the vertices
clause is satisfied::clause is satisfied
roughly the intuition::roughly the intuition
vertex the clique::vertex the clique
bar in clique::bar in clique
construction is construction::construction is construction
literal l belongs::literal l belongs
belongs to clause::belongs to clause
vertices edge set::vertices edge set
matter what value::matter what value
value i set::value i set
set of clauses::set of clauses
clauses i construct::clauses i construct
construct this instance::construct this instance
instance of clique::instance of clique
clique i feed::clique i feed
routine for clique::routine for clique
supposing the formula::supposing the formula
clause some literal::clause some literal
pick these vertices::pick these vertices
picked m vertices::picked m vertices
picked one vertex::picked one vertex
vertex per clause::vertex per clause
means there exists::means there exists
exists one vertex::exists one vertex
set these literals::set these literals
literals to true::literals to true
literals which corresponds::literals which corresponds
variable x appears::variable x appears
appears x bar::appears x bar
prove that clique::prove that clique
clique is empty::clique is empty
shown that clique::shown that clique
complete for instance::complete for instance
set a subset::set a subset
clique he wanted::clique he wanted
wanted an edge::wanted an edge
prove the version::prove the version
independent set decision::independent set decision
set decision version::set decision version
version of independent::version of independent
independent set problem::independent set problem
set essentially states::set essentially states
size the decision::size the decision
similar to clique::similar to clique
set problem independent::set problem independent
problem independent set::problem independent set
set has input::set has input
proof or advice::proof or advice
out k vertices::out k vertices
graph and tells::graph and tells
vertices form independent::vertices form independent
form independent set::form independent set
set the verifier::set the verifier
verifiers he checks::verifiers he checks
input the advice::input the advice
cases is supposing::cases is supposing
supposing the question::supposing the question
answer the question::answer the question
verifier can check::verifier can check
algorithm for independent::algorithm for independent
algorithm or clique::algorithm or clique
set we construct::set we construct
algorithm for dependent::algorithm for dependent
set and clique::set and clique
sort of problems::sort of problems
problems in graphs::problems in graphs
vertices i remove::vertices i remove
vertices i add::vertices i add
sort of complement::sort of complement
complement the edge::complement the edge
independent sub routine::independent sub routine
vertices must form::vertices must form
complemented the graph::complemented the graph
essentially the complement::essentially the complement
find or decide::find or decide
decide to decide::decide to decide
complement the graph::complement the graph
routine for independent::routine for independent
independent set sub::independent set sub
set sub routine::set sub routine
case is correct::case is correct
suppose i pick::suppose i pick
cover this edge::cover this edge
covered all edges::covered all edges
edge this end::edge this end
forms a vertex::forms a vertex
monitor each link::monitor each link
pick a set::pick a set
assign a link::assign a link
links both ways::links both ways
link is covered::link is covered
chosen to monitor::chosen to monitor
pick very small::pick very small
number of computers::number of computers
covers of minimum::covers of minimum
find the vertex::find the vertex
cover of minimum::cover of minimum
problem is hard::problem is hard
solve every problem::solve every problem
pick up minimum::pick up minimum
monitored this problem::monitored this problem
mentioned the search::mentioned the search
version of vertex::version of vertex
decision version remember::decision version remember
easier to handle::easier to handle
introduce this extra::introduce this extra
extra positive integer::extra positive integer
cover of size::cover of size
cover of smaller::cover of smaller
vertex cover input::vertex cover input
problem and argue::problem and argue
finding minimum vertex::finding minimum vertex
minimum vertex cover::minimum vertex cover
direction is simple::direction is simple
find vertex cover::find vertex cover
cover of small::cover of small
cover you found::cover you found
remains a vertex::remains a vertex
form as large::form as large
large vertex cover::large vertex cover
problem you put::problem you put
complete the first::complete the first
verifier can verify::verifier can verify
edge and checks::edge and checks
checks he takes::checks he takes
takes the subset::takes the subset
subset of size::subset of size
two end points::two end points
prover is correct::prover is correct
proves that vertex::proves that vertex
show that vertex::show that vertex
algorithm for vertex::algorithm for vertex
chosen in fact::chosen in fact
choose the right::choose the right
sort of problem::sort of problem
proving becomes easier::proving becomes easier
construct the polynomial::construct the polynomial
relationship between vertex::relationship between vertex
cover and independent::cover and independent
sort to prove::sort to prove
independent set supposing::independent set supposing
supposing this portion::supposing this portion
graph is independent::graph is independent
set the complement::set the complement
set is subset::set is subset
find independent set::find independent set
call the algorithm::call the algorithm
copy the graph::copy the graph
pair i feed::pair i feed
routine for vertex::routine for vertex
spread into sub::spread into sub
prime g prime::prime g prime
feed into sub::feed into sub
added new problem::added new problem
proved that vertex::proved that vertex
started out cook::started out cook
gave us sat::gave us sat
showed that clique::showed that clique
showed that independent::showed that independent
showed that vertex::showed that vertex
similar to vertex::similar to vertex
form of vertex::form of vertex
maximum vertex degree::maximum vertex degree
cover i add::cover i add
add this additional::add this additional
degrees of vertices::degrees of vertices
graph and delta::graph and delta
focus on graphs::focus on graphs
graphs only graphs::graphs only graphs
cover in general::cover in general
problem as hard::problem as hard
easier to find::easier to find
find vertex covers::find vertex covers
covers in graphs::covers in graphs
case the problem::case the problem
vertex cover problem::vertex cover problem
cover problem vertex::cover problem vertex
problem vertex cover::problem vertex cover
cover is hard::cover is hard
complete to prove::complete to prove
vertex cover thing::vertex cover thing
guess vertex cover::guess vertex cover
efficient algorithm polynomial::efficient algorithm polynomial
construct efficient algorithm::construct efficient algorithm
write this statement::write this statement
direction is easy::direction is easy
restrict the input::restrict the input
vertices with degree::vertices with degree
minus k largest::minus k largest
largest n minus::largest n minus
decrease that decreasing::decrease that decreasing
decreasing the vertex::decreasing the vertex
degrees by creating::degrees by creating
graph i construct::graph i construct
construct u graph::construct u graph
degrees are smaller::degrees are smaller
cover the vertex::cover the vertex
reduce the degree::reduce the degree
trick is degree::trick is degree
reduction while keeping::reduction while keeping
keeping the size::keeping the size
controlling the size::controlling the size
change the degree::change the degree
degree i break::degree i break
break this vertex::break this vertex
two new vertices::two new vertices
degrees are decreasing::degrees are decreasing
two of degree::two of degree
decreased vertex degree::decreased vertex degree
degree of degree::degree of degree
graph i split::graph i split
split this vertex::split this vertex
vertex into two::vertex into two
decrease the degree::decrease the degree
vertex has degree::vertex has degree
vertex of high::vertex of high
degree i split::degree i split
split this degree::split this degree
parts and add::parts and add
add another vertex::add another vertex
make the connection::make the connection
original graph final::original graph final
graph final graph::graph final graph
graph has degree::graph has degree
degree of vertex::degree of vertex
supposing the claim::supposing the claim
means the size::means the size
split the vertex::split the vertex
vertex cover size::vertex cover size
prove both ways::prove both ways
prove this supposing::prove this supposing
call this vertex::call this vertex
vertex cover remain::vertex cover remain
edges are covered::edges are covered
edge is covered::edge is covered
four also covers::four also covers
vertex cover remove::vertex cover remove
cover and put::cover and put
graph this proves::graph this proves
proves one direction::proves one direction
cover we remember::cover we remember
remember this vertex::remember this vertex
check the rest::check the rest
form a vertex::form a vertex
edges are present::edges are present
vertex cover remains::vertex cover remains
covered the case::covered the case
remove and put::remove and put
impede our progress::impede our progress
cover may rise::cover may rise
cover will rise::cover will rise
procedure is clear::procedure is clear
clear i start::clear i start
split a vertex::split a vertex
done it reason::done it reason
split vertex cover::split vertex cover
vertex cover rises::vertex cover rises
initial graph start::initial graph start
graph start splitting::graph start splitting
graph and supposing::graph and supposing
supposing you construct::supposing you construct
procedure will run::procedure will run
run in polynomial::run in polynomial
polynomial time design::polynomial time design
sunder vishwanathan computer::sunder vishwanathan computer
vishwanathan computer science::vishwanathan computer science
cover the fact::cover the fact
fact that delta::fact that delta
suffices to prove::suffices to prove
doing the trick::doing the trick
vertices of varying::vertices of varying
degrees especially vertices::degrees especially vertices
vertices with large::vertices with large
vertex with large::vertex with large
sort of split::sort of split
neighbors are attached::neighbors are attached
effect of splitting::effect of splitting
splitting a vertex::splitting a vertex
reduced the degree::reduced the degree
construct keep splitting::construct keep splitting
done l times::done l times
vertex with degree::vertex with degree
sort of transformation::sort of transformation
runs in polynomial::runs in polynomial
entire thing runs::entire thing runs
vertex get split::vertex get split
vertex be split::vertex be split
hope this argument::hope this argument
argument is clear::argument is clear
right the maximum::right the maximum
graphs the degree::graphs the degree
times the vertex::times the vertex
vertex of degrees::vertex of degrees
times a split::times a split
occurs is summation::occurs is summation
out and sum::out and sum
times the split::times the split
split you add::split you add
equal to size::equal to size
times and final::times and final
graph that results::graph that results
polynomial in size::polynomial in size
runs on polynomial::runs on polynomial
vertex of size::vertex of size
algorithm worked out::algorithm worked out
problem is exact::problem is exact
cover xc exact::cover xc exact
collection of subsets::collection of subsets
collection are disjoined::collection are disjoined
things the union::things the union
pick some sub::pick some sub
element is present::element is present
element is covered::element is covered
covered and covered::covered and covered
covers the set::covers the set
sense that union::sense that union
complete the answer::complete the answer
problem exact cover::problem exact cover
note first thing::note first thing
prove that exact::prove that exact
clear what prove::clear what prove
prove the provers::prove the provers
supply the verifier::supply the verifier
collection in fact::collection in fact
collection the prover::collection the prover
collection the verifier::collection the verifier
takes these sets::takes these sets
sets he verifies::sets he verifies
means every element::means every element
blame will prove::blame will prove
algorithm for exact::algorithm for exact
guess the algorithm::guess the algorithm
problem on graphs::problem on graphs
solution to vertex::solution to vertex
vertices to cover::vertices to cover
cover all edges::cover all edges
sets to cover::sets to cover
cover all elements::cover all elements
elements by sets::elements by sets
edges must correspond::edges must correspond
correspond to elements::correspond to elements
edges and blind::edges and blind
convert this input::convert this input
input for exact::input for exact
subset must correspond::subset must correspond
vertices each subset::vertices each subset
sort of correspondence::sort of correspondence
correspondence for vertex::correspondence for vertex
add a set::add a set
incident on vertex::incident on vertex
cover edges corresponds::cover edges corresponds
corresponds to picking::corresponds to picking
elements of edges::elements of edges
edges are covering::edges are covering
picking a vertex::picking a vertex
picking a sub::picking a sub
problem first problem::problem first problem
vertices are picked::vertices are picked
allowed to pick::allowed to pick
pick k vertices::pick k vertices
fix this problem::fix this problem
supposing the sets::supposing the sets
change the collection::change the collection
collection of sets::collection of sets
number of collections::number of collections
supposing i pick::supposing i pick
cover here supposing::cover here supposing
occurs each set::occurs each set
elements must occur::elements must occur
right in fact::right in fact
pick an exact::pick an exact
cover this forces::cover this forces
edge gets covered::edge gets covered
pick this set::pick this set
vertex not pick::vertex not pick
pick this edge::pick this edge
pick these sets::pick these sets
pick those sets::pick those sets
sets those edges::sets those edges
remember our previous::remember our previous
subsets per vertex::subsets per vertex
degree k degree::degree k degree
vertex for vertex::vertex for vertex
subset of edges::subset of edges
edges adjacent incident::edges adjacent incident
vertex cover consist::vertex cover consist
consist of vertices::consist of vertices
put the set::put the set
pick the set::pick the set
end point choose::end point choose
smaller end point::smaller end point
end point supposing::end point supposing
case that edge::case that edge
collection which covers::collection which covers
covers every element::covers every element
occurs in set::occurs in set
vertex i right::vertex i right
cover just consists::cover just consists
vertices will form::vertices will form
shoes that exact::shoes that exact
vertex of large::vertex of large
degree some degree::degree some degree
subsets here non::subsets here non
non empty subsets::non empty subsets
subset i added::subset i added
empty subsets times::empty subsets times
graph with degree::graph with degree
degree for instance::degree for instance
instance the complete::instance the complete
graph as degree::graph as degree
degree n minus::degree n minus
work in polynomial::work in polynomial
degree is bounded::degree is bounded
reason we needed::reason we needed
shown that exact::shown that exact
complete the main::complete the main
restriction of vertex::restriction of vertex
cover then show::cover then show
show that exact::show that exact
slightly more involved::slightly more involved
problems where sizes::problems where sizes
elements each element::elements each element
elements e measure::elements e measure
put the prover::put the prover
give that verifier::give that verifier
sum and conclude::sum and conclude
conclude and convince::conclude and convince
exist a subset::exist a subset
subset whose set::subset whose set
set whose size::set whose size
verifier the verifier::verifier the verifier
takes this subset::takes this subset
subsets are measured::subsets are measured
show that subset::show that subset
algorithm for subset::algorithm for subset
input for subset::input for subset
sum somehow feed::sum somehow feed
subroutine for subset::subroutine for subset
answer for exact::answer for exact
exact cover frame::exact cover frame
cover frame model::cover frame model
frame model construct::frame model construct
cover into input::cover into input
inputs for exact::inputs for exact
side the input::side the input
sum ? subset::sum ? subset
size of total::size of total
total size equal::total size equal
picks up sets::picks up sets
correspondence between subsets::correspondence between subsets
exact cover input::exact cover input
input and elements::input and elements
subset sum input::subset sum input
side and elements::side and elements
side must correspond::side must correspond
subsets sum input::subsets sum input
sum input right::sum input right
subsets will correspond::subsets will correspond
write these subsets::write these subsets
side must translate::side must translate
pick exact cover::pick exact cover
cover this side::cover this side
subset of exact::subset of exact
cover that corresponds::cover that corresponds
pick these sizes::pick these sizes
sizes to make::sizes to make
multi set multi::multi set multi
set multi set::set multi set
size k distinct::size k distinct
times each element::times each element
give some sizes::give some sizes
fix this positive::fix this positive
pick any subset::pick any subset
subset this subset::subset this subset
remove any subset::remove any subset
dot dot dot::dot dot dot
element the size::element the size
loss of general::loss of general
replace a copy::replace a copy
guess the smallest::guess the smallest
element case supposing::element case supposing
generalize this right::generalize this right
similarly something larger::similarly something larger
squared which means::squared which means
pick l prime::pick l prime
element of size::element of size
size l squared::size l squared
elements i pick::elements i pick
pick the size::pick the size
cover the input::cover the input
times an element::times an element
collection the number::collection the number
number of ele::number of ele
ele the number::ele the number
size of size::size of size
distinct elements right::distinct elements right
number of maximum::number of maximum
fix the sizes::fix the sizes
fix the size::fix the size
size of elements::size of elements
element i pick::element i pick
input the size::input the size
first fixing sizes::first fixing sizes
sizes of elements::sizes of elements
add the size::add the size
exact cover supposing::exact cover supposing
supposing this set::supposing this set
reverse direction pick::reverse direction pick
ends a discussion::ends a discussion
sub set sum::sub set sum
calculating the input::calculating the input
input is easy::input is easy
proves that subset::proves that subset
done in fact::done in fact
partition the input::partition the input
set t sizes::set t sizes
sizes are integers::sizes are integers
integers positive integers::integers positive integers
sizes for instance::sizes for instance
things are true::things are true
element he tells::element he tells
tells which part::tells which part
part it belongs::part it belongs
takes this partition::takes this partition
partition he verifies::partition he verifies
partition exactly equals::partition exactly equals
sizes are involved::sizes are involved
algorithm for partition::algorithm for partition
partition for subset::partition for subset
sum the input::sum the input
form this asks::form this asks
solve subset sum::solve subset sum
minus b supposing::minus b supposing
sum i add::sum i add
equal parts supposing::equal parts supposing
partitions you partition::partitions you partition
subset sum problem::subset sum problem
sum problem put::sum problem put
answer for partition::answer for partition
construct an answer::construct an answer
answer for subset::answer for subset
partitions the answer::partitions the answer
side the maximum::side the maximum
sizes the sum::sizes the sum
reduction that shows::reduction that shows
shows that partition::shows that partition
written a formal::written a formal
proof that partition::proof that partition
sort of reduction::sort of reduction
complete then independence::complete then independence
set then vertex::set then vertex
show subset sum::show subset sum
joined a company::joined a company
wanted to schedule::wanted to schedule
finishes was smallest::finishes was smallest
partition the reason::partition the reason
input for partition::input for partition
input you feed::input you feed
processors the sizes::processors the sizes
exist a partition::exist a partition
sizes are equal::sizes are equal
general than partition::general than partition
sequence of reductions::sequence of reductions
constructed an algorithm::constructed an algorithm
set of arguments::set of arguments
reasonable and intelligent::reasonable and intelligent
intelligent with intelligent::intelligent with intelligent
finishes this module::finishes this module
science & engineering::science & engineering
algorithms for np::algorithms for np-
np complete problems::np- complete problems
today is approximation::today is approximation
wanted to solve::wanted to solve
real life situation::real life situation
two three lectures::two three lectures
complete problems arise::complete problems arise
talk about optimization::talk about optimization
finding an optimal::finding an optimal
complete one wonders::complete one wonders
solution in polynomial::solution in polynomial
approach of finding::approach of finding
finding fast approximation::finding fast approximation
fast approximation algorithms::fast approximation algorithms
lectures in finding::lectures in finding
finding the optimal::finding the optimal
interested in finding::interested in finding
approximately optimal solution::approximately optimal solution
real life application::real life application
real life problem::real life problem
solve has additional::solve has additional
features that make::features that make
polynomial time algorithms::polynomial time algorithms
solving such problems::solving such problems
algorithms another possibility::algorithms another possibility
run in pseudo::run in pseudo
difference the run::difference the run
input are represented::input are represented
represented in unary::represented in unary
definition of polynomial::definition of polynomial
numbers be represented::numbers be represented
unary representation system::unary representation system
interested in devising::interested in devising
lot more freedom::lot more freedom
freedom to work::freedom to work
numbers are represented::numbers are represented
napes the dynamic::napes the dynamic
weights and values::weights and values
value and capacity::value and capacity
capacity the input::capacity the input
necessarily the length::necessarily the length
bit string needed::bit string needed
represent the capacity::represent the capacity
capacity is represented::capacity is represented
bit binary number::bit binary number
notion of good::notion of good
compromise between polynomial::compromise between polynomial
difficult to analyze::difficult to analyze
lots of instances::lots of instances
instances and check::instances and check
exponential time algorithm::exponential time algorithm
size is small::size is small
small or small::small or small
takes a day::takes a day
run a computer::run a computer
solving real life::solving real life
real life problems::real life problems
problems the real::problems the real
life problems tend::life problems tend
small and today::small and today
exponential time algorithms::exponential time algorithms
algorithms can work::algorithms can work
useless our focus::useless our focus
running in polynomial::running in polynomial
give the optimal::give the optimal
give somewhat close::give somewhat close
close to optimal::close to optimal
notion of approximation::notion of approximation
describe approximation algorithms::describe approximation algorithms
metric traveling salesman::metric traveling salesman
traveling salesman problem::traveling salesman problem
precedence constrained scheduling::precedence constrained scheduling
constrained scheduling problem::constrained scheduling problem
definition of approximation::definition of approximation
denotes an optimization::denotes an optimization
minimize this objective::minimize this objective
objective function subject::objective function subject
denote the cost::denote the cost
objective function cost::objective function cost
run on instance::run on instance
instance i produces::instance i produces
produces this objective::produces this objective
objective function value::objective function value
function value suppose::function value suppose
denotes the cost::denotes the cost
reasons will assume::reasons will assume
assume that opt::assume that opt
define the approximation::define the approximation
approximation ratio rho::approximation ratio rho
rho on instance::rho on instance
worse than opt::worse than opt
cost in general::cost in general
value of rho::value of rho
case by enlarge::case by enlarge
worst case ratio::worst case ratio
small the goal::small the goal
design approximation algorithms::design approximation algorithms
algorithms or algorithms::algorithms or algorithms
small as close::small as close
algorithm is polynomial::algorithm is polynomial
polynomial the algorithm::polynomial the algorithm
algorithm must run::algorithm must run
maximize the objective::maximize the objective
define rho sub::define rho sub
small as small::small as small
device an approximation::device an approximation
metric tsp problem::metric tsp problem
first the input::first the input
denotes the distance::denotes the distance
distance between vertex::distance between vertex
form a metric::form a metric
triangle inequality constraint::triangle inequality constraint
draw the metric::draw the metric
draw the graph::draw the graph
vertices are embedded::vertices are embedded
simply the straight::simply the straight
straight euclidean distance::straight euclidean distance
constraint the triangle::constraint the triangle
calculate the distances::calculate the distances
salesman problem instance::salesman problem instance
cycle is small::cycle is small
special restrictions tsp::special restrictions tsp
restrictions tsp remains::restrictions tsp remains
remains np complete::remains np complete
two approximation algorithm::two approximation algorithm
algorithm for metric::algorithm for metric
proof in fact::proof in fact
simple the idea::simple the idea
find the lower::find the lower
out a lower::out a lower
construct a tour::construct a tour
tour of length::tour of length
hard to figure::hard to figure
out the length::out the length
find a lower::find a lower
step in turn::step in turn
claim the claim::claim the claim
minimum weight spanning::minimum weight spanning
weight spanning tree::weight spanning tree
vertex and returns::vertex and returns
minimum spanning tree::minimum spanning tree
tree whose weight::tree whose weight
weight and length::weight and length
connection with minimum::connection with minimum
trees and length::trees and length
length in connection::length in connection
connection with tours::connection with tours
length and weight::length and weight
tour is bigger::tour is bigger
tour in fact::tour in fact
contained an extra::contained an extra
tree has beat::tree has beat
established a lower::established a lower
tour and argue::tour and argue
proved our result::proved our result
tour with length::tour with length
first we find::first we find
dfs traversal depth::dfs traversal depth
depth first traversal::depth first traversal
doing the depth::doing the depth
graph the red::graph the red
starting at vertex::starting at vertex
first that appears::first that appears
repeat the previous::repeat the previous
appears several times::appears several times
vertex that appears::vertex that appears
remove these edges::remove these edges
doing this step::doing this step
times as needed::times as needed
draw another picture::draw another picture
picture to show::picture to show
claimed final answer::claimed final answer
step is done::step is done
takes time linear::takes time linear
linear in fact::linear in fact
eventually we modify::eventually we modify
out some properties::out some properties
edge our tour::edge our tour
work in general::work in general
weight and suppose::weight and suppose
edge we deleted::edge we deleted
picture to explain::picture to explain
two is bigger::two is bigger
repeating this step::repeating this step
initially every vertex::initially every vertex
tour every vertex::tour every vertex
done the final::done the final
nice simple observation::nice simple observation
done in linear::done in linear
delete the first::delete the first
post order traversal::post order traversal
simply is dominated::simply is dominated
problem is precedence::problem is precedence
precedence constraint scheduling::precedence constraint scheduling
find a polynomial::find a polynomial
polynomial time approximation::polynomial time approximation
parts the first::parts the first
directed acyclic graph::directed acyclic graph
graph g vertices::graph g vertices
unit time tasks::unit time tasks
arc directed edge::arc directed edge
restriction that vertex::restriction that vertex
execute before vertex::execute before vertex
number of tasks::number of tasks
output we require::output we require
minimize the length::minimize the length
complete for variable::complete for variable
allowed to change::allowed to change
bound i claim::bound i claim
find a schedule::find a schedule
claim the first::claim the first
first lower bound::first lower bound
path is lower::path is lower
identify a longest::identify a longest
suppose to measure::suppose to measure
measure the length::measure the length
executed at step::executed at step
executed one step::executed one step
steps are needed::steps are needed
bound is based::bound is based
schedule at step::schedule at step
scheduled at step::scheduled at step
case the upper::case the upper
bound in fact::bound in fact
describe the algorithm::describe the algorithm
vertex is set::vertex is set
ready or ready::ready or ready
describe the scheduling::describe the scheduling
algorithm it produces::algorithm it produces
produces a schedule::produces a schedule
scheduled we select::scheduled we select
repeat how long::repeat how long
identify this ready::identify this ready
efficiently by doing::efficiently by doing
doing a topological::doing a topological
sort will suffice::sort will suffice
number of processors::number of processors
restriction about precedence::restriction about precedence
picking only ready::picking only ready
produce a correct::produce a correct
schedule a valid::schedule a valid
sub i denote::sub i denote
denote the graph::denote the graph
vertices after iteration::vertices after iteration
denote the number::denote the number
graph is equal::graph is equal
sub i minus::sub i minus
lower bound decreases::lower bound decreases
find p vertices::find p vertices
step3 of iteration::step3 of iteration
vertices in iteration::vertices in iteration
finds p vertices::finds p vertices
vertices that remain::vertices that remain
case is suppose::case is suppose
idea every longest::idea every longest
ready vertices suppose::ready vertices suppose
path even longer::path even longer
contradiction the longest::contradiction the longest
path must originate::path must originate
including the longest::including the longest
path must decrease::path must decrease
sub i equal::sub i equal
bound the length::bound the length
initial lower bounds::initial lower bounds
first one drops::first one drops
iteration no bound::iteration no bound
bound can drop::bound can drop
path is negative::path is negative
vertices is negative::vertices is negative
steps must suffice::steps must suffice
suffice our schedule::suffice our schedule
replace the smaller::replace the smaller
opt the length::opt the length
today we discussed::today we discussed
discussed various strategies::discussed various strategies
strategies for coping::strategies for coping
problems the strategy::problems the strategy
strategy of devising::strategy of devising
devising approximation algorithms::devising approximation algorithms
defined as giving::defined as giving
giving nearly good::giving nearly good
designing approximation algorithms::designing approximation algorithms
find lower bounds::find lower bounds
find upper bounds::find upper bounds
target an algorithm::target an algorithm
succeed in meeting::succeed in meeting
lecture on approximation::lecture on approximation
two more examples::two more examples
complete optimization problem::complete optimization problem
solutions the solutions::solutions the solutions
gave optimal solutions::gave optimal solutions
solutions in polynomial::solutions in polynomial
prove p equals::prove p equals
people in fact::people in fact
give optimal solutions::give optimal solutions
define some notation::define some notation
cost minimization problem::cost minimization problem
minimize this cost::minimize this cost
big as optimal::big as optimal
optimal as opt::optimal as opt
factor on instance::factor on instance
defined was defined::defined was defined
defined as max::defined as max
produce a small::produce a small
small approximation factor::small approximation factor
words the cost::words the cost
reason reasonably close::reason reasonably close
close to opt::close to opt
set cover problem::set cover problem
describe these problems::describe these problems
give real life::give real life
real life examples::real life examples
problems in addition::problems in addition
idea for solving::idea for solving
solving these problems::solving these problems
greedy strategies earlier::greedy strategies earlier
greedy strategies procedure::greedy strategies procedure
procedure for solving::procedure for solving
make every decision::make every decision
change the cost::change the cost
change in cost::change in cost
increase in cost::increase in cost
subsequently in general::subsequently in general
work and today::work and today
framework in addition::framework in addition
interesting proof strategy::interesting proof strategy
optimal algorithm running::optimal algorithm running
consists of sets::consists of sets
call this collection::call this collection
collection this entire::collection this entire
sub i belongs::sub i belongs
collection c prime::collection c prime
prime a small::prime a small
set of sets::set of sets
minimize the cardinality::minimize the cardinality
version as usual::version as usual
number of sets::number of sets
prime with cardinality::prime with cardinality
complete in fact::complete in fact
find an approximation::find an approximation
arise in real::arise in real
suppose u denotes::suppose u denotes
denotes a set::denotes a set
set of villages::set of villages
hospital is built::hospital is built
determine the smallest::determine the smallest
number of locations::number of locations
exact our sets::exact our sets
constitute the collection::constitute the collection
collection as defined::collection as defined
pick a sub::pick a sub
words all villages::words all villages
correspondence is exact::correspondence is exact
algorithm is greedy::algorithm is greedy
basically the algorithm::basically the algorithm
collection our answer::collection our answer
uncovered by covering::uncovered by covering
inside a set::inside a set
uncovered elements exist::uncovered elements exist
maximum uncovered elements::maximum uncovered elements
maintain some data::maintain some data
elements are covered::elements are covered
put that set::put that set
cover those elements::cover those elements
set c prime::set c prime
elements initially uncovered::elements initially uncovered
elements get covered::elements get covered
end the loop::end the loop
return c prime::return c prime
making the decision::making the decision
include a set::include a set
cover maximum elements::cover maximum elements
nice and simple::nice and simple
simple the analysis::simple the analysis
defining some notation::defining some notation
uncovered after iteration::uncovered after iteration
opt to denote::opt to denote
needed by optimal::needed by optimal
algorithm to cover::algorithm to cover
state my main::state my main
sub i times::sub i times
algorithm has executed::algorithm has executed
sub i elements::sub i elements
covered by opt::covered by opt
equal to opt::equal to opt
sets are covering::sets are covering
covering this region::covering this region
set which covers::set which covers
covers n sub::covers n sub
point we choose::point we choose
choose a subset::choose a subset
covers the maximum::covers the maximum
means that number::means that number
words n sub::words n sub
opt by log::opt by log
log n log::log n log
log of log::log of log
log n factor::log n factor
natural the base::natural the base
opt will return::opt will return
suppose it runs::suppose it runs
runs t iterations::runs t iterations
sub t minus::sub t minus
repeating and note::repeating and note
nice little inequality::nice little inequality
conclude n sub::conclude n sub
opt upon opt::opt upon opt
equals opt times::equals opt times
prime is opt::prime is opt
set cover algorithm::set cover algorithm
find a set::find a set
cover the size::cover the size
handy for indices::handy for indices
indices and things::indices and things
describe the problem::describe the problem
problem informally first::problem informally first
number of students::number of students
question in analyzing::question in analyzing
analyzing this data::analyzing this data
region is consists::region is consists
consists of students::consists of students
build this region::build this region
choosing those representatives::choosing those representatives
choose a representative::choose a representative
representative is chosen::representative is chosen
decide to put::decide to put
put an element::put an element
two the thing::two the thing
clusters are needed::clusters are needed
pick the cluster::pick the cluster
centers and divide::centers and divide
divide the data::divide the data
data into clusters::data into clusters
mixed and finding::mixed and finding
representatives and defining::representatives and defining
defining the boundary::defining the boundary
define the boundary::define the boundary
boundary and find::boundary and find
find a center::find a center
center the representatives::center the representatives
measure the goodness::measure the goodness
number of clusters::number of clusters
describe the output::describe the output
notion of distances::notion of distances
distances and things::distances and things
differences as usual::differences as usual
define the distance::define the distance
two point sets::two point sets
general arbitrary point::general arbitrary point
arbitrary point sets::arbitrary point sets
belonging to capital::belonging to capital
centers every point::centers every point
talked about earlier::talked about earlier
pick some centers::pick some centers
taking its distance::taking its distance
minimizing this maximum::minimizing this maximum
define the radius::define the radius
define each cluster::define each cluster
point is closest::point is closest
clusters are defined::clusters are defined
supposed to select::supposed to select
select the centers::select the centers
select t centers::select t centers
strategy for solving::strategy for solving
select the first::select the first
arbitrary but note::arbitrary but note
interesting greedy idea::interesting greedy idea
first k clusters::first k clusters
first k centers::first k centers
reduce this radius::reduce this radius
idea we pick::idea we pick
points are picked::points are picked
pick the point::pick the point
point the distance::point the distance
point has reduced::point has reduced
1th clustering radius::1th clustering radius
point after picking::point after picking
centers we picked::centers we picked
first k points::first k points
radius of clustering::radius of clustering
change is related::change is related
algorithm the analysis::algorithm the analysis
centers are related::centers are related
clusters a natural::clusters a natural
center we select::center we select
select two centers::select two centers
cluster natural guesses::cluster natural guesses
select our clusters::select our clusters
clusters our centers::clusters our centers
centers are selected::centers are selected
optimal algorithm selects::optimal algorithm selects
call this optimal::call this optimal
cluster o sub::cluster o sub
case some optimal::case some optimal
detail in fact::detail in fact
free to give::free to give
happen to choose::happen to choose
point is picked::point is picked
cluster this distance::cluster this distance
point in optimal::point in optimal
times the radius::times the radius
times the max::times the max
times r sub::times r sub
point is close::point is close
necessarily the center::necessarily the center
times r opt::times r opt
established the theorem::established the theorem
quality of clustering::quality of clustering
clustering produces clusters::clustering produces clusters
clusters of radius::clusters of radius
call it capital::call it capital
center and suppose::center and suppose
taking the distance::taking the distance
allowing a large::allowing a large
happen to fall::happen to fall
two cluster centers::two cluster centers
optimal radius produced::optimal radius produced
centers actually lie::centers actually lie
single optimal cluster::single optimal cluster
inside this cluster::inside this cluster
radius of cluster::radius of cluster
times the optimal::times the optimal
optimal is greater::optimal is greater
equal to distance::equal to distance
turn is greater::turn is greater
greedy algorithm produces::greedy algorithm produces
algorithm produces clustering::algorithm produces clustering
clustering of radius::clustering of radius
times radius produced::times radius produced
produced by optimal::produced by optimal
distances i mentioned::distances i mentioned
clustering algorithm works::clustering algorithm works
satisfies the metric::satisfies the metric
essentially the triangle::essentially the triangle
facility location problem::facility location problem
cover like problems::cover like problems
problem many scheduling::problem many scheduling
problems and important::problems and important
variation on set::variation on set
style of analysis::style of analysis
optimal also appears::optimal also appears
appears quite frequently::appears quite frequently
styles of analysis::styles of analysis
optimal and compete::optimal and compete
design a fair::design a fair
number of approximation::number of approximation
problems ? iii::problems ? iii
series on approximation::series on approximation
algorithms a short::algorithms a short
two factor approximation::two factor approximation
approximation for metric::approximation for metric
matter of fact::matter of fact
hard to find::hard to find
find fast clustering::find fast clustering
fast clustering algorithms::fast clustering algorithms
approximate clustering algorithms::approximate clustering algorithms
tsp it turns::tsp it turns
depend upon epsilon::depend upon epsilon
smaller the epsilon::smaller the epsilon
epsilon the larger::epsilon the larger
larger the running::larger the running
evaluate that dependence::evaluate that dependence
range of epsilons::range of epsilons
definition an algorithm::definition an algorithm
approximation scheme abbreviated::approximation scheme abbreviated
abbreviated as ptas::abbreviated as ptas
return the problem::return the problem
addition a single::addition a single
single number epsilon::single number epsilon
close an answer::close an answer
good an answer::good an answer
return a solution::return a solution
solution with approximation::solution with approximation
approximation ratio one1::approximation ratio one1
one1 plus epsilon::one1 plus epsilon
epsilon the smaller::epsilon the smaller
depend on epsilon::depend on epsilon
polynomial we change::polynomial we change
change with epsilon::change with epsilon
function of epsilon::function of epsilon
family of algorithms::family of algorithms
values of epsilon::values of epsilon
fully polynomial approximation::fully polynomial approximation
polynomial approximation scheme::polynomial approximation scheme
abbreviated as fptas::abbreviated as fptas
increase much faster::increase much faster
describe an fptas::describe an fptas
cube upon epsilon::cube upon epsilon
denote the instance::denote the instance
epsilon is linear::epsilon is linear
satisfies this condition::satisfies this condition
designing an algorithm::designing an algorithm
studied it earlier::studied it earlier
earlier the input::earlier the input
stands for value::stands for value
denote the capacity::denote the capacity
knapsack the output::knapsack the output
select a subset::select a subset
filling this knapsack::filling this knapsack
exceed its weight::exceed its weight
knapsack will tear::knapsack will tear
subset we pick::subset we pick
devised an algorithm::devised an algorithm
based on dynamic::based on dynamic
modify the input::modify the input
good approximate answers::good approximate answers
idea the sort::idea the sort
idea of today::idea of today
instance perhaps sort::instance perhaps sort
dynamic programming formulation::dynamic programming formulation
remember the dynamic::remember the dynamic
basically the question::basically the question
question the capacity::question the capacity
capacity is fixed::capacity is fixed
largest possible value::largest possible value
question the question::question the question
smallest capacity knapsack::smallest capacity knapsack
interested in filling::interested in filling
filling all items::filling all items
needed to fill::needed to fill
kind of question::kind of question
value for fixed::value for fixed
questions essentially compute::questions essentially compute
knapsack for value::knapsack for value
non decreasing sequence::non decreasing sequence
value for capacity::value for capacity
solve this question::solve this question
mobilized to solve::mobilized to solve
algorithm we looked::algorithm we looked
answer the single::answer the single
answer more questions::answer more questions
answer different kind::answer different kind
kind of questions::kind of questions
answers as mentioned::answers as mentioned
idea to return::idea to return
value of capacity::value of capacity
value the target::value the target
target total value::target total value
logic behind designing::logic behind designing
designing the algorithm::designing the algorithm
natural looking algorithm::natural looking algorithm
series of decisions::series of decisions
decisions to make::decisions to make
search space idea::search space idea
solution contains item::solution contains item
set of solutions::set of solutions
sets with value::sets with value
sets containing item::sets containing item
lightest capacity set::lightest capacity set
lightest weight set::lightest weight set
wanted the optimal::wanted the optimal
picking the lighter::picking the lighter
pick the lightest::pick the lightest
pretty much idea::pretty much idea
original dynamic programming::original dynamic programming
expressed in terms::expressed in terms
solution of value::solution of value
left are sets::left are sets
minus the value::minus the value
originally had value::originally had value
remove that item::remove that item
space are sets::space are sets
seeking this smaller::seeking this smaller
problem instance add::problem instance add
add the item::add the item
value is negative::value is negative
generate this part::generate this part
instance is undefined::instance is undefined
put an explicit::put an explicit
expression in terms::expression in terms
define our recurrence::define our recurrence
give the value::give the value
derived and express::derived and express
simply this left::simply this left
allowing all items::allowing all items
add this item::add this item
start with items::start with items
expression is greater::expression is greater
problem is undefined::problem is undefined
represent by putting::represent by putting
compactly in terms::compactly in terms
terms of variables::terms of variables
solutions to problems::solutions to problems
skip the first::skip the first
adding an item::adding an item
weight solution value::weight solution value
keeping a table::keeping a table
out that recurrence::out that recurrence
kind of table::kind of table
out from specific::out from specific
recurrence will work::recurrence will work
table ith column::table ith column
column vth row::column vth row
row vth column::row vth column
entry would fall::entry would fall
common more interesting::common more interesting
entry in general::entry in general
minimum capacity needed::minimum capacity needed
smallest possible knapsack::smallest possible knapsack
entire yellow column::entire yellow column
open the question::open the question
fill this row::fill this row
row in general::row in general
denoting the capacity::denoting the capacity
kind of capacities::kind of capacities
kind of values::kind of values
entries ? suppose::entries ? suppose
value either bigger::value either bigger
bigger or larger::bigger or larger
infinite is needed::infinite is needed
things like min::things like min
values are infinites::values are infinites
value is impossible::value is impossible
impossible to accomplish::impossible to accomplish
express the algorithm::express the algorithm
entries to fill::entries to fill
kinds of entries::kinds of entries
done our algorithm::done our algorithm
call my algorithm::call my algorithm
knapsack it takes::knapsack it takes
takes as arguments::takes as arguments
find an answer::find an answer
filled the blue::filled the blue
knapsack capacity needed::knapsack capacity needed
fill the bottom::fill the bottom
entries were filled::entries were filled
needed to find::needed to find
earlier the largest::earlier the largest
call v star::call v star
wanted the items::wanted the items
additional data structures::additional data structures
return the set::return the set
set of items::set of items
compute the set::compute the set
compute v star::compute v star
finishes the first::finishes the first
allowed an error::allowed an error
epsilon is sort::epsilon is sort
allowed the point::allowed the point
calculate using low::calculate using low
call an approximate::call an approximate
approximate case approximate::approximate case approximate
case approximate knapsack::case approximate knapsack
knapsack or aks::knapsack or aks
argument called delta::argument called delta
reflect the precision::reflect the precision
delta and epsilon::delta and epsilon
array v prime::array v prime
divided by delta::divided by delta
delta corresponding elements::delta corresponding elements
scale down values::scale down values
return delta times::return delta times
job we scale::job we scale
scale the values::scale the values
return we scale::return we scale
produce some error::produce some error
case is proportional::case is proportional
denotes the set::denotes the set
original ks call::original ks call
actual optimal value::actual optimal value
full precision problem::full precision problem
full precision answer::full precision answer
case without multiplication::case without multiplication
multiplication by delta::multiplication by delta
low precision answer::low precision answer
value is bigger::value is bigger
choosing s prime::choosing s prime
words this value::words this value
changed the weights::changed the weights
relate x prime::relate x prime
value that aks::value that aks
aks will return::aks will return
return ? aks::return ? aks
times this value::times this value
multiplied by delta::multiplied by delta
multiply by delta::multiply by delta
explains this part::explains this part
actual value minus::actual value minus
value minus cardinality::value minus cardinality
ready to evaluate::ready to evaluate
evaluate the approximation::evaluate the approximation
approximate solution remember::approximate solution remember
define our approximation::define our approximation
collect the equality::collect the equality
cardinality s times::cardinality s times
evaluation has reduced::evaluation has reduced
choose delta carefully::choose delta carefully
choose delta equal::choose delta equal
equal to epsilon::equal to epsilon
denotes the maximum::denotes the maximum
include this largest::include this largest
times n squared::times n squared
delta i substitute::delta i substitute
matter what epsilon::matter what epsilon
epsilon you give::epsilon you give
input instance length::input instance length
concludes the main::concludes the main
device another fptas::device another fptas
expression n log::expression n log
easier np complete::easier np complete
sense knapsack problems::sense knapsack problems
values are drawn::values are drawn
uniformly at random::uniformly at random
sense the fptas::sense the fptas
easier to approximate::easier to approximate
average in fact::average in fact
problems having pseudo::problems having pseudo
subset sub problem::subset sub problem
algorithms prof::algorithms prof
prof abhiram::prof abhiram
abhiram ranade::abhiram ranade
ranade computer::ranade computer
computer science::computer science
science engineering::science engineering
engineering department::engineering department
department indian::department indian
indian institute::indian institute
bombay lecture::bombay lecture
algorithms today::algorithms today
main problems::main problems
fundamental question::fundamental question
design algorithms::design algorithms
designing algorithms::designing algorithms
give answers::give answers
major challenge::major challenge
fast design::fast design
fast algorithms::fast algorithms
defined design::defined design
design techniques::design techniques
solve algorithm::solve algorithm
algorithm design::algorithm design
design problems::design problems
common language::common language
data structures::data structures
discrete mathematics::discrete mathematics
mathematics background::mathematics background
mathematical build::mathematical build
mathematical model::mathematical model
prove properties::prove properties
proof prove::proof prove
prove facts::prove facts
basic framework::basic framework
fast algorithm::fast algorithm
long stretch::long stretch
involves techniques::involves techniques
designing fast::designing fast
optimization graph::optimization graph
graph theory::graph theory
god algorithms::god algorithms
techniques work::techniques work
intricate theory::intricate theory
main topic::main topic
simple problem::simple problem
common divisor::common divisor
simple algorithm::simple algorithm
first standard::first standard
fourth standard::fourth standard
greatest common::greatest common
simplifying fractions::simplifying fractions
earliest algorithms::earliest algorithms
mathematician euclid::mathematician euclid
plane geometry::plane geometry
simple school::simple school
school level::school level
level algorithm::level algorithm
largest integer::largest integer
finding primes::finding primes
find break::find break
common factors::common factors
state euclid::state euclid
pseudo language::pseudo language
suitable nicest::suitable nicest
nicest syntax::nicest syntax
done inside::done inside
algorithm works::algorithm works
common divisors::common divisors
prime factors::prime factors
test numbers::test numbers
prime number::prime number
level stuff::level stuff
algorithm back::algorithm back
current value::current value
work done::work done
answer euclid::answer euclid
factoring algorithm::factoring algorithm
sophisticated algorithm::sophisticated algorithm
correct answer::correct answer
work correctly::work correctly
large numbers::large numbers
first step::first step
exchange values::exchange values
values basically::values basically
first iteration::first iteration
divisions essentially::divisions essentially
complicated problem::complicated problem
first glance::first glance
bigger numbers::bigger numbers
numbers factoring::numbers factoring
main idea::main idea
largest number::largest number
loop part::loop part
first argument::first argument
partially done::partially done
original values::original values
specific value::specific value
loop executes::loop executes
correct value::correct value
straight forward::straight forward
remain positive::remain positive
loop exits::loop exits
basic idea::basic idea
cost euclid::cost euclid
analyzing calls::analyzing calls
loop wills::loop wills
main result::main result
theorem establishes::theorem establishes
good upper::good upper
upper bound::upper bound
iterations euclid::iterations euclid
euclid takes::euclid takes
thing drops::thing drops
euclid procedure::euclid procedure
dividend divisor::dividend divisor
last inequality::last inequality
original value::original value
small number::small number
main points::main points
first point::first point
definition euclid::definition euclid
interesting deeper::interesting deeper
deeper properties::deeper properties
properties deeper::properties deeper
mathematical properties::mathematical properties
study properties::study properties
analysis counting::analysis counting
counting iterations::counting iterations
precise details::precise details
subsequent lectures::subsequent lectures
lecture design::lecture design
ranade department::ranade department
engineering indian::engineering indian
algorithms analysis::algorithms analysis
algorithm analysis::algorithm analysis
plain evaluate::plain evaluate
mathematical bases::mathematical bases
formal framework::formal framework
evaluate algorithms::evaluate algorithms
varying amounts::varying amounts
memory requirements::memory requirements
discuss today::discuss today
first lecture::first lecture
algorithm takes::algorithm takes
specific real::specific real
real computer::real computer
execute algorithm::execute algorithm
computer model::computer model
basic scheme::basic scheme
first question::first question
answer questions::answer questions
interesting algorithms::interesting algorithms
require data::require data
important question::important question
input data::input data
mathematical models::mathematical models
real computers::real computers
model relate::model relate
relevant questions::relevant questions
basic terms::basic terms
analysis strategy::analysis strategy
discuss examples::discuss examples
discuss limitations::discuss limitations
day life::day life
scientific discussion::scientific discussion
common term::common term
shortest path::shortest path
x-ray determine::x-ray determine
input consists::input consists
western india::western india
india automobile::india automobile
automobile association::automobile association
association map::association map
problem definition::problem definition
word evolution::word evolution
oxford dictionary::oxford dictionary
last problem::last problem
actual picture::actual picture
actual map::actual map
actual path::actual path
actual meaning::actual meaning
good sense::good sense
simple definition::simple definition
valid inputs::valid inputs
acceptable outputs::acceptable outputs
valid input::valid input
gcd problem::gcd problem
constitute valid::constitute valid
acceptable input::acceptable input
path names::path names
map constitutes::map constitutes
acceptable output::acceptable output
make sense::make sense
dictionary problem::dictionary problem
phrase input::phrase input
input instance::input instance
input value::input value
problem mumbai::problem mumbai
mumbai aurangabad::mumbai aurangabad
map constitute::map constitute
path problem::path problem
important term::important term
term input::term input
instance instance::instance instance
problem instance::problem instance
formal sense::formal sense
bits needed::bits needed
specific input::specific input
specific size::specific size
represent numbers::represent numbers
first place::first place
array bits::array bits
represent maps::represent maps
formal definition::formal definition
bit inconvenient::bit inconvenient
informal definition::informal definition
official definition::official definition
formal notion::formal notion
gcd algorithm::gcd algorithm
large instance::large instance
large size::large size
small size::small size
good algorithm::good algorithm
small instance::small instance
great algorithm::great algorithm
small amount::small amount
god algorithm::god algorithm
comparison evaluate::comparison evaluate
good indication::good indication
ray problem::ray problem
phrase problem::phrase problem
problem size::problem size
problem directly::problem directly
computational procedure::computational procedure
term abstract::term abstract
discussing algorithms::discussing algorithms
discuss programs::discuss programs
strict language::strict language
strict rules::strict rules
discuss algorithms::discuss algorithms
clear terms::clear terms
human beings::human beings
precise syntax::precise syntax
describe algorithms::describe algorithms
great level::great level
describing algorithms::describing algorithms
model machine::model machine
important purpose::important purpose
important point::important point
ram stands::ram stands
random access::random access
access machine::access machine
simplified computer::simplified computer
executing programs::executing programs
locations start::locations start
last number::last number
writing algorithms::writing algorithms
ram model::ram model
first thing::first thing
variable names::variable names
location fifty::location fifty
data types::data types
simple plain::simple plain
plain simple::plain simple
simple variables::simple variables
primitive data::primitive data
trees lists::trees lists
instruction set::instruction set
instructions execute::instructions execute
logical operations::logical operations
memory add::memory add
write programs::write programs
friendly pleasant::friendly pleasant
pleasant manner::pleasant manner
conditions jumps::conditions jumps
conditional jumps::conditional jumps
step defining::step defining
structured programming::structured programming
programming presenting::programming presenting
nice readable::nice readable
readable manner::readable manner
extremely important::extremely important
convenient mechanism::convenient mechanism
basic instruction::basic instruction
pointer instructions::pointer instructions
simply operations::simply operations
equals star::equals star
style pointer::style pointer
pointer notation::pointer notation
store based::store based
write star::write star
single step::single step
algorithmic actions::algorithmic actions
step pointers::step pointers
mixes pointers::mixes pointers
treat pointers::treat pointers
similar consistent::similar consistent
consistent manner::consistent manner
array operations::array operations
dimensional array::dimensional array
contiguous locations::contiguous locations
fixed number::fixed number
modern computers::modern computers
basic algorithmic::basic algorithmic
complex algorithmic::complex algorithmic
algorithmic statements::algorithmic statements
complex instructions::complex instructions
elementary instructions::elementary instructions
elementary steps::elementary steps
primitive statement::primitive statement
simple statement::simple statement
machine instructions::machine instructions
entire statement::entire statement
dimensional arrays::dimensional arrays
stores elements::stores elements
first row::first row
row index::row index
column index::column index
stored row::stored row
row wise::row wise
index set::index set
simple correspondence::simple correspondence
plain indirect::plain indirect
indirect axis::indirect axis
structured computing::structured computing
computing statements::computing statements
basic constructions::basic constructions
initialization step::initialization step
loop test::loop test
statement number::statement number
loop counting::loop counting
total number::total number
final answer::final answer
big letters::big letters
steps needed::steps needed
functions calls::functions calls
function calls::function calls
arguments passed::arguments passed
calling procedure::calling procedure
machine relates::machine relates
complete analysis::complete analysis
lectures design::lectures design
indian institution::indian institution
analysis framework::analysis framework
developing algorithm::developing algorithm
framework part::framework part
part two::part two
abstract computer::abstract computer
fair detail::fair detail
model consisted::model consisted
variables structures::variables structures
separate program::separate program
program memory::program memory
performing operations::performing operations
equals operator::equals operator
first kind::first kind
control instructions::control instructions
jump instructions::jump instructions
control transfer::control transfer
transfer instructions::transfer instructions
pointer operations::pointer operations
standard array::standard array
array axis::array axis
single cycle::single cycle
real compilers::real compilers
general strategy::general strategy
single processor::single processor
single memory::single memory
complicated architecture::complicated architecture
standard memory::standard memory
main memory::main memory
cache memory::cache memory
computer advertisements::computer advertisements
register memory::register memory
tricky complication::tricky complication
complication arises::complication arises
tricky idea::tricky idea
designing computers::designing computers
superscalar execution::superscalar execution
simultaneously executed::simultaneously executed
complicated idea::complicated idea
ram machine::ram machine
transfer data::transfer data
memory instructions::memory instructions
instructions memory::instructions memory
register instructions::register instructions
register copying::register copying
copying instructions::copying instructions
drive home::drive home
ram suppose::ram suppose
add register::add register
value contained::value contained
store register::store register
memory location::memory location
memory locations::memory locations
data stored::data stored
first move::first move
real computation::real computation
idealized memory::idealized memory
idealized computation::idealized computation
intelligent compilers::intelligent compilers
simple translator::simple translator
conditional operations::conditional operations
array elements::array elements
first statement::first statement
minded translator::minded translator
similar translation::similar translation
high level::high level
level language::level language
language statement::language statement
statements depending::statements depending
compiler intelligence::compiler intelligence
simple compiler::simple compiler
statement translation::statement translation
intelligent transfer::intelligent transfer
intelligent compiler::intelligent compiler
present earlier::present earlier
write algorithms::write algorithms
algorithm executes::algorithm executes
idealized model::idealized model
language algorithm::language algorithm
language program::language program
big surprise::big surprise
model applies::model applies
general analysis::general analysis
crucial definition::crucial definition
last lecture::last lecture
data set::data set
input instances::input instances
single number::single number
functions carefully::functions carefully
first remark::first remark
conservative definition::conservative definition
input size::input size
worst case::worst case
reasonable definition::reasonable definition
actual day::actual day
equal probability::equal probability
instances taking::instances taking
average introduces::average introduces
extra complexity::extra complexity
solid guarantee::solid guarantee
case measure::case measure
ram relates::ram relates
real machines::real machines
single instruction::single instruction
vice versa::vice versa
compiler technology::compiler technology
question arises::question arises
precise value::precise value
precise numbers::precise numbers
great consequence::great consequence
real computations::real computations
functional form::functional form
linear function::linear function
quadratic function::quadratic function
complex functions::complex functions
precise values::precise values
crucial idea::crucial idea
cubic function::cubic function
exact bounds::exact bounds
lower bound::lower bound
bound match::bound match
necessarily happen::necessarily happen
done incomplete::done incomplete
good estimates::good estimates
large problems::large problems
precise constants::precise constants
computer computers::computer computers
general idea::general idea
matrices output::matrices output
usual matrix::usual matrix
matrix product::matrix product
matrix multiplication::matrix multiplication
natural algorithm::natural algorithm
machine ram::machine ram
analysis ideas::analysis ideas
simple structure::simple structure
complex structures::complex structures
basic structure::basic structure
analyze loops::analyze loops
body takes::body takes
exact analysis::exact analysis
analysis knowing::analysis knowing
model completely::model completely
small detail::small detail
arithmetic operations::arithmetic operations
array accesses::array accesses
cycles totally::cycles totally
single execution::single execution
single statement::single statement
outer loop::outer loop
entire portion::entire portion
loop requires::loop requires
loop takes::loop takes
entire program::entire program
cube term::cube term
number times::number times
individual instructions::individual instructions
basic instructions::basic instructions
first loop::first loop
major conclusion::major conclusion
main conclusion::main conclusion
precise architecture::precise architecture
weak statement::weak statement
strong statement::strong statement
specific computer::specific computer
specific pentium::specific pentium
architecture computer::architecture computer
precise computer::precise computer
computer architectures::computer architectures
making statements::making statements
median element::median element
simple program::simple program
successive elements::successive elements
median definition::median definition
smaller elements::smaller elements
larger elements::larger elements
conditions match::conditions match
equals length::equals length
increment smaller::increment smaller
abbreviated style::abbreviated style
executed utmost::executed utmost
simple assumption::simple assumption
simplifying assumption::simplifying assumption
worse case::worse case
exit early::exit early
entire algorithm::entire algorithm
extra step::extra step
exit condition::exit condition
utmost quadratic::utmost quadratic
worst instance::worst instance
case analysis::case analysis
last point::last point
average case::average case
asymptotic notation::asymptotic notation
topic today::topic today
directly applicable::directly applicable
care needed::care needed
bit imprecise::bit imprecise
entire analysis::entire analysis
entire detailed::entire detailed
detailed analysis::detailed analysis
precise number::precise number
rough statement::rough statement
put functions::put functions
entire class::entire class
formal notation::formal notation
asymptotic analysis::asymptotic analysis
analysis refers::analysis refers
classifying functions::classifying functions
constant multipliers::constant multipliers
constant multiplier::constant multiplier
class notation::class notation
cube versus::cube versus
first property::first property
first feature::first feature
class definition::class definition
main kinds::main kinds
notation today::notation today
theta notation::theta notation
omega notation::omega notation
define function::define function
function classes::function classes
non-negative functions::non-negative functions
negative values::negative values
values functions::values functions
negative arguments::negative arguments
negative function::negative function
exists constant::exists constant
big definition::big definition
class structure::class structure
give importance::give importance
smaller values::smaller values
function values::function values
class theta::class theta
theta times::theta times
sandwich region::sandwich region
constant factor::constant factor
function belongs::function belongs
classed functions::classed functions
suitable constants::suitable constants
constants satisfy::constants satisfy
cubic polynomial::cubic polynomial
polynomial term::polynomial term
naught equals::naught equals
definition holds::definition holds
good idea::good idea
good thing::good thing
classification system::classification system
prototypical function::prototypical function
detailed function::detailed function
constant factors::constant factors
grows slower::grows slower
easy task::easy task
done earlier::done earlier
largest determinate::largest determinate
asymptotic complexity::asymptotic complexity
complexity class::complexity class
previous result::previous result
cube theta::cube theta
write theta::write theta
first class::first class
funny style::funny style
style evolved::style evolved
writing style::writing style
common writing::common writing
assignment operator::assignment operator
value equality::value equality
denote inclusion::denote inclusion
english language::english language
language words::language words
rose belongs::rose belongs
red things::red things
poetic english::poetic english
writing functions::writing functions
names directly::names directly
equals theta::equals theta
unbound variable::unbound variable
nice class::nice class
basic definition::basic definition
essentially constant::essentially constant
minor perturbations::minor perturbations
naught omega::naught omega
non negative::non negative
class omega::class omega
omega relaxes::omega relaxes
bound condition::bound condition
cube iterations::cube iterations
utmost cubic::utmost cubic
first case::first case
unknown function::unknown function
lower bounds::lower bounds
square belongs::square belongs
similar logic::similar logic
ignoring constants::ignoring constants
lower order::lower order
order terms::order terms
main functions::main functions
functions classes::functions classes
general function::general function
mathematics courses::mathematics courses
precise result::precise result
exact result::exact result
weaker results::weaker results
exact expression::exact expression
analyze algorithms::analyze algorithms
real number::real number
positive real::positive real
case evaluating::case evaluating
exceptional cleverness::exceptional cleverness
giving bounds::giving bounds
home work::home work
work prove::work prove
fibonacci series::fibonacci series
real result::real result
actual result::actual result
nth fibonacci::nth fibonacci
fibonacci number::fibonacci number
exact bound::exact bound
exponential growth::exponential growth
easy logic::easy logic
easy reasoning::easy reasoning
number grow::number grow
grow exponentially::grow exponentially
complicated reasoning::complicated reasoning
precise formula::precise formula
nth term::nth term
tighter results::tighter results
compact manner::compact manner
defined theta::defined theta
leading terms::leading terms
general notation::general notation
partial information::partial information
nicely expressed::nicely expressed
prof sunder::prof sunder
vishwanathan department::vishwanathan department
basic design::basic design
simple problems::simple problems
trivial problems::trivial problems
minimum element::minimum element
input problem::input problem
find min::find min
first programming::first programming
standard solution::standard solution
temporary variable::temporary variable
current minimum::current minimum
first element::first element
array element::array element
last element::last element
update temp::update temp
simple technique::simple technique
important step::important step
crucial step::crucial step
full code::full code
main ideas::main ideas
stray cases::stray cases
initialize variables::initialize variables
properly etcetera::properly etcetera
programming details::programming details
things couple::things couple
point out::point out
design technique::design technique
store value::store value
bigger input::bigger input
bigger value::bigger value
fancier things::fancier things
right order::right order
increasing order::increasing order
array index::array index
ordering plays::ordering plays
crucial role::crucial role
previous minimum::previous minimum
variable temp::variable temp
analyze analysis::analyze analysis
analysis pertain::analysis pertain
small operations::small operations
first reaction::first reaction
absolutely trivial::absolutely trivial
fourth element::fourth element
sixth element::sixth element
right answer::right answer
candidate whichever::candidate whichever
longer remains::longer remains
complete proof::complete proof
bit hang::bit hang
hang wavy::hang wavy
make comparisons::make comparisons
program ends::program ends
ends terminates::ends terminates
connected component::connected component
connected components::connected components
give values::give values
global minimum::global minimum
discrete structure::discrete structure
simple scan::simple scan
slight variation::slight variation
max min::max min
minimum elements::minimum elements
algorithm makes::algorithm makes
previous argument::previous argument
small values::small values
values supposing::values supposing
temporary maximum::temporary maximum
unnecessary comparisons::unnecessary comparisons
first comparison::first comparison
left hand::left hand
hand side::hand side
right hand::right hand
left part::left part
right part::right part
maximum minimum::maximum minimum
parts divide::parts divide
equal parts::equal parts
equal halves::equal halves
halves halves::halves halves
left half::left half
final solution::final solution
writing details::writing details
details define::details define
define procedures::define procedures
recursive calls::recursive calls
minimum maximum::minimum maximum
recursive call::recursive call
recurrence behaves::recurrence behaves
usual geometric::usual geometric
geometric series::geometric series
comparisons made::comparisons made
last century::last century
main steps::main steps
equal sizes::equal sizes
final step::final step
original problem::original problem
left array::left array
right array::right array
array comparing::array comparing
maximums find::maximums find
solve problems::solve problems
smaller size::smaller size
big problem::big problem
small problems::small problems
problems varies::problems varies
smallest element::smallest element
temporary variables::temporary variables
variables temp::variables temp
min case::min case
conquer paradigm::conquer paradigm
min left::min left
min right::min right
entire array::entire array
compare min::compare min
supposing min::supposing min
assume min::assume min
point min::point min
side minimum::side minimum
sub problems::sub problems
comparison suffices::comparison suffices
problems behave::problems behave
behave differently::behave differently
conquer sort::conquer sort
paradigm gave::paradigm gave
divide recurse::divide recurse
recurse divide::recurse divide
comparisons start::comparisons start
start happening::start happening
recurrence sort::recurrence sort
reach arrays::reach arrays
maximum case::maximum case
max mins::max mins
bigger tree::bigger tree
familiar complete::familiar complete
complete binary::complete binary
binary tree::binary tree
element sits::element sits
root node::root node
element resided::element resided
crucial sort::crucial sort
absolutely crucial::absolutely crucial
means log::means log
previous problem::previous problem
forward application::forward application
smart answer::smart answer
feel nice::feel nice
nice design::nice design
viswanathan department::viswanathan department
smaller inputs::smaller inputs
larger inputs::larger inputs
first term::first term
term design::term design
design principle::design principle
larger input::larger input
inputs solve::inputs solve
store values::store values
simple principle::simple principle
future good::future good
algorithms simple::algorithms simple
simple algorithms::simple algorithms
parts solve::parts solve
divide input::divide input
input solve::input solve
previous cases::previous cases
instance max::instance max
unequal pieces::unequal pieces
design principles::design principles
simplest sort::simplest sort
first design::first design
practice supposing::practice supposing
smaller array::smaller array
bigger array::bigger array
natural smaller::natural smaller
smaller arrays::smaller arrays
elements supposing::elements supposing
first sort::first sort
right position::right position
binary search::binary search
easily identified::easily identified
make space::make space
point onwards::point onwards
right move::right move
elements figure::elements figure
insertion sort::insertion sort
previous courses::previous courses
learnt insertion::learnt insertion
roughly order::roughly order
order log::order log
mains step::mains step
last step::last step
move elements::move elements
expansive step::expansive step
sort takes::sort takes
takes order::takes order
design paradigms::design paradigms
array equally::array equally
equally work::equally work
halves sort::halves sort
pieces sort::pieces sort
sorted arrays::sorted arrays
step entail::step entail
step entails::step entails
big sorted::big sorted
sorted array::sorted array
sorted pieces::sorted pieces
sorted piece::sorted piece
ascending order::ascending order
bigger structure::bigger structure
fairly natural::fairly natural
first position::first position
first elements::first elements
sub arrays::sub arrays
generic step::generic step
pointer small::pointer small
big array::big array
write code::write code
values put::values put
original array::original array
temporary array::temporary array
merge list::merge list
merge step::merge step
merge sort::merge sort
scribble piece::scribble piece
sorted sequences::sorted sequences
big sequence::big sequence
divide step::divide step
recursive step::recursive step
constant times::constant times
instance moving::instance moving
pointer etcetera::pointer etcetera
comparisons needed::comparisons needed
equal size::equal size
extra element::extra element
total array::total array
merge differently::merge differently
bit differently::bit differently
larger arrays::larger arrays
smaller input::smaller input
total size::total size
smaller element::smaller element
elements remove::elements remove
apply recursion::apply recursion
iterative process::iterative process
process back::process back
writing comparisons::writing comparisons
simple reason::simple reason
log base::log base
times log::times log
conquer business::conquer business
divide part::divide part
start rearranging::start rearranging
previous case::previous case
case remember::case remember
element landing::element landing
parts left::parts left
left separately::left separately
right separately::right separately
sorted right::sorted right
left portion::left portion
right portion::right portion
largest element::largest element
divided step::divided step
two putting::two putting
putting things::putting things
quick sort::quick sort
xome element::xome element
pivot left::pivot left
left consists::left consists
sort pick::sort pick
pivot divide::pivot divide
pivot elements::pivot elements
parts recurse::parts recurse
sort dividing::sort dividing
easy putting::easy putting
sorted order::sorted order
order remember::order remember
remember recall::remember recall
distinct rank::distinct rank
maximum element::maximum element
side right::side right
pivot put::pivot put
pivot sits::pivot sits
pivot turns::pivot turns
middle element::middle element
initially falls::initially falls
starts rising::starts rising
array sizes::array sizes
sizes split::sizes split
usual recursion::usual recursion
conquer kind::conquer kind
recurrences work::recurrences work
algorithmic problem::algorithmic problem
array find::array find
first non::first non
non trivial::non trivial
trivial algorithm::trivial algorithm
smart algorithm::smart algorithm
solution design::solution design
median finding::median finding
sort worked::sort worked
median fast::median fast
sort work::sort work
ball rolling::ball rolling
element sort::element sort
rank floor::rank floor
array pick::array pick
sorting takes::sorting takes
median faster::median faster
instance supposing::instance supposing
exact median::exact median
approximate median::approximate median
approximate medians::approximate medians
element supposing::element supposing
lose focus::lose focus
median falls::median falls
smaller part::smaller part
bigger part::bigger part
size utmost::size utmost
small part::small part
find depends::find depends
minus size::minus size
first problem::first problem
careful attention::careful attention
important design::important design
recursive procedure::recursive procedure
general problem::general problem
problem finding::problem finding
special case::special case
specific problem::specific problem
approx median::approx median
conquer scheme::conquer scheme
recurrence relation::recurrence relation
approximate medium::approximate medium
real recipe::real recipe
finding algorithms::finding algorithms
general recipes::general recipes
problem dependent::problem dependent
light bulb::light bulb
elements approximate::elements approximate
size remember::size remember
median problem::median problem
descending order::descending order
small groups::small groups
order upwards::order upwards
decreasing order::decreasing order
middle elements::middle elements
last row::last row
elements sort::elements sort
20th group::20th group
15th group::15th group
first group::first group
portion remember::portion remember
median median::median median
middle portion::middle portion
find elements::find elements
middle row::middle row
portion consists::portion consists
vague disjoint::vague disjoint
ideas needed::ideas needed
step put::step put
step carefully::step carefully
find rank::find rank
find element::find element
partition array::partition array
array put::array put
cases depending::cases depending
last case::last case
draw picture::draw picture
entire distance::entire distance
right half::right half
entire procedure::entire procedure
procedure works::procedure works
procedure runs::procedure runs
algorithm write::algorithm write
algorithm call::algorithm call
steps inside::steps inside
normal structure::normal structure
step executed::step executed
easily done::easily done
done find::done find
bubble sort::bubble sort
step finding::step finding
group takes::group takes
takes constant::takes constant
whichever side::whichever side
maximum size::maximum size
recurrence equation::recurrence equation
recurrent recursion::recurrent recursion
last recursion::last recursion
previous equation::previous equation
right constant::right constant
original thing::original thing
previous statement::previous statement
inductive step::inductive step
induction substitute::induction substitute
solving recurrence::solving recurrence
recurrence relations::recurrence relations
right constants::right constants
square design::square design
iii surfing::iii surfing
algorithms merge::algorithms merge
sorting algorithms::sorting algorithms
good question::good question
large family::large family
recursively sort::recursively sort
sorted sub::sorted sub
sorted lists::sorted lists
out compare::out compare
sort term::sort term
favorite procedure::favorite procedure
basic operation::basic operation
two figure::two figure
usual sort::usual sort
crucial operation::crucial operation
popular sorting::popular sorting
absolutely obvious::absolutely obvious
comparison trees::comparison trees
comparison tree::comparison tree
basic block::basic block
building blocks::building blocks
large flow::large flow
flow chart::flow chart
flow charts::flow charts
order output::order output
small flow::small flow
array size::array size
run merge::run merge
whichever branch::whichever branch
lower things::lower things
things return::things return
sorted orders::sorted orders
top level::top level
side returns::side returns
list returned::list returned
elements compared::elements compared
smallest elements::smallest elements
internal load::internal load
internal node::internal node
elements branch::elements branch
comparisons etcetera::comparisons etcetera
output output::output output
sort tree::sort tree
written part::written part
entire tree::entire tree
comparisons branch::comparisons branch
branch etcetera::branch etcetera
longest root::longest root
root leaf::root leaf
leaf path::leaf path
critical observations::critical observations
crucial observations::crucial observations
input order::input order
input orders::input orders
orders lead::orders lead
factorial orders::factorial orders
factorial permutations::factorial permutations
factorial leaves::factorial leaves
large number::large number
invoke theorems::invoke theorems
discrete structures::discrete structures
decision tree::decision tree
maximum number::maximum number
base case::base case
binary trees::binary trees
inductive hypothesis::inductive hypothesis
statement holds::statement holds
sub trees::sub trees
apply induction::apply induction
equals number::equals number
inductive proof::inductive proof
taking logs::taking logs
sort flowcharts::sort flowcharts
close log::close log
takes maximum::takes maximum
bucket sort::bucket sort
sort radix::sort radix
radix sort::radix sort
algorithms differ::algorithms differ
significant digit::significant digit
funny things::funny things
significant bit::significant bit
bit etcetera::bit etcetera
fairly interesting::fairly interesting
paradigm sort::paradigm sort
empty square::empty square
left out::left out
side length::side length
squares put::squares put
first domino::first domino
first tile::first tile
square left::square left
entire region::entire region
top leaving::top leaving
big sort::big sort
extra sort::extra sort
crucial thing::crucial thing
inductive process::inductive process
extra square::extra square
corner square::corner square
small square::small square
big thing::big thing
initial objective::initial objective
bigger square::bigger square
smaller squares::smaller squares
induction upwards::induction upwards
big square::big square
absolutely alike::absolutely alike
entire big::entire big
domino fill::domino fill
tile squares::tile squares
computer algorithms::computer algorithms
find solutions::find solutions
smaller sub::smaller sub
larger problem::larger problem
big input::big input
tiling problem::tiling problem
positive integer::positive integer
familiar problem::familiar problem
bit integers::bit integers
square multiplications::square multiplications
high school::high school
school multiplication::school multiplication
multiplication algorithm::multiplication algorithm
applying divide::applying divide
adding adding::adding adding
bit numbers::bit numbers
takes alternately::takes alternately
started compare::started compare
done divide::done divide
spending order::spending order
square times::square times
conquer approach::conquer approach
first multiplication::first multiplication
earlier remember::earlier remember
significantly smaller::significantly smaller
usual thing::usual thing
general term::general term
exact formula::exact formula
half minus::half minus
times constant::times constant
log based::log based
things cancel::things cancel
prime times::prime times
general manipulations::general manipulations
initial thing::initial thing
real sort::real sort
methods rack::methods rack
good algorithms::good algorithms
multiplying complex::multiplying complex
complex numbers::complex numbers
closest pair::closest pair
conquer strategy::conquer strategy
sorting based::sorting based
based algorithm::based algorithm
computational geometry::computational geometry
design strategies::design strategies
strategies applied::strategies applied
square root::square root
usual notion::usual notion
choosable distances::choosable distances
minimum distance::minimum distance
big question::big question
inductive approach::inductive approach
shortest distance::shortest distance
classic sort::classic sort
point set::point set
huge big::huge big
big star::big star
smallest distance::smallest distance
obvious thing::obvious thing
compute distances::compute distances
square solution::square solution
entire set::entire set
radius delta::radius delta
good shape::good shape
chooseful distances::chooseful distances
things faster::things faster
candidate points::candidate points
sorting dominates::sorting dominates
simpler problem::simpler problem
first check::first check
problem means::problem means
parts find::parts find
compute delta::compute delta
left recursively::left recursively
right recursively::right recursively
minimum distances::minimum distances
closest set::closest set
entire thing::entire thing
done fast::done fast
points line::points line
pair points::pair points
right delta::right delta
candidate pair::candidate pair
side suppose::side suppose
speed things::speed things
small problem::small problem
small examples::small examples
examples etcetera::examples etcetera
general techniques::general techniques
good chance::good chance
passed algorithm::passed algorithm
analytical skills::analytical skills
dividing line::dividing line
vertical line::vertical line
line things::line things
straight lines::straight lines
distance delta::distance delta
middle point::middle point
point lies::point lies
small bands::small bands
middle line::middle line
bridge delta::bridge delta
first observation::first observation
fairly simple::fairly simple
square distance::square distance
smart thing::smart thing
small band::small band
centre line::centre line
point inside::point inside
points clustered::points clustered
point number::point number
points close::points close
size delta::size delta
point appears::point appears
points inside::points inside
delta square::delta square
pigeon hole::pigeon hole
hole principle::hole principle
nice problem::nice problem
solutions based::solutions based
smart people::smart people
figured out::figured out
square problem::square problem
maximum distance::maximum distance
distance inside::distance inside
length delta::length delta
small squares::small squares
points sitting::points sitting
sitting inside::sitting inside
sit inside::sit inside
delta inside::delta inside
big trick::big trick
original picture::original picture
implementation smaller::implementation smaller
smaller implementation::smaller implementation
implementation details::implementation details
fast remember::fast remember
window size::window size
window shifts::window shifts
bottom top::bottom top
things altered::things altered
points altered::points altered
left side::left side
right side::right side
last trick::last trick
detailed left::detailed left
points sorted::points sorted
narrow band::narrow band
sort idea::sort idea
window moves::window moves
pointer moves::pointer moves
solution recurrence::solution recurrence
tree sort::tree sort
point sorted::point sorted
coordinate suppose::coordinate suppose
onetime cost::onetime cost
put order::put order
horizontal line::horizontal line
point lie::point lie
big assumption::big assumption
initial set::initial set
small epsilon::small epsilon
points participate::points participate
first array::first array
actual procedure::actual procedure
procedure starts::procedure starts
co-ordinates points::co-ordinates points
initialization phase::initialization phase
phase step::phase step
arrays remember::arrays remember
coordinate splitting::coordinate splitting
input points::input points
coordinate business::coordinate business
natural rate::natural rate
median value::median value
recurse step::recurse step
input capital::input capital
find points::find points
median minus::median minus
prime sorted::prime sorted
similar thing::similar thing
proved points::proved points
prime minus::prime minus
correct range::correct range
return min::return min
pointer manipulation::pointer manipulation
greedy algorithms::greedy algorithms
greedy algorithm::greedy algorithm
greedy techniques::greedy techniques
main technique::main technique
technique main::technique main
main sort::main sort
optimum solution::optimum solution
small piece::small piece
technique works::technique works
bit difficult::bit difficult
optimum output::optimum output
clear cut::clear cut
cut guiding::cut guiding
guiding rules::guiding rules
right ideas::right ideas
basic ideas::basic ideas
greedy approach::greedy approach
basic step::basic step
output piece::output piece
solution extend::solution extend
crucial generic::crucial generic
crucial question::crucial question
local improvement::local improvement
improvement trick::improvement trick
informal idea::informal idea
small tricks::small tricks
bigger hint::bigger hint
matroids theory::matroids theory
linear programming::linear programming
programming duality::programming duality
primary dual::primary dual
dual method::dual method
geometric structure::geometric structure
future forget::future forget
important algorithm::important algorithm
exchange trick::exchange trick
hand wavy::hand wavy
wavy fashion::wavy fashion
generic output::generic output
respect optimum::respect optimum
question asked::question asked
algorithm proceeds::algorithm proceeds
algorithms forward::algorithms forward
partial solution::partial solution
solution improves::solution improves
independent set::independent set
vertex set::vertex set
edge set::edge set
radio stations::radio stations
mobile radio::mobile radio
edge showing::edge showing
independent sets::independent sets
problem tells::problem tells
maximum sized::maximum sized
find maximum::find maximum
group force::group force
wrong vertex::wrong vertex
right subset::right subset
greedy solution::greedy solution
solution greedy::solution greedy
intuition tells::intuition tells
smallest degree::smallest degree
small degree::small degree
neighbors number::neighbors number
produces maximum::produces maximum
size independent::size independent
leaf throw::leaf throw
set blindly::set blindly
vertex exist::vertex exist
proceeds pick::proceeds pick
slowly sort::slowly sort
word vertices::word vertices
back tracking::back tracking
minimum degree::minimum degree
simple things::simple things
maximum independent::maximum independent
tree supposing::tree supposing
thinking process::thinking process
optimum independent::optimum independent
recursive algorithm::recursive algorithm
move part::move part
modified input::modified input
set remove::set remove
fancy computer::fancy computer
hour sort::hour sort
shorter intervals::shorter intervals
entire duration::entire duration
schedule people::schedule people
hour slot::hour slot
final objective::final objective
abstract sort::abstract sort
closed intervals::closed intervals
non overlapping::non overlapping
overlapping intervals::overlapping intervals
people give::people give
funny ways::funny ways
means number::means number
pick numbers::pick numbers
pair wise::pair wise
greedy technique::greedy technique
solution piece::solution piece
solution interval::solution interval
pick intervals::pick intervals
intervals interval::intervals interval
smallest size::smallest size
size smallest::size smallest
smallest span::smallest span
interval suppose::interval suppose
smallest interval::smallest interval
smallest length::smallest length
reasonable algorithm::reasonable algorithm
intuition suggests::intuition suggests
construct examples::construct examples
algorithm fails::algorithm fails
small interval::small interval
large intervals::large intervals
intervals form::intervals form
optimum consists::optimum consists
big fellows::big fellows
big intervals::big intervals
right thing::right thing
pick interval::pick interval
smallest number::smallest number
smallest overlaps::smallest overlaps
first algorithm::first algorithm
pick vertex::pick vertex
vertex throw::vertex throw
interval throw::interval throw
proceed forward::proceed forward
closely related::closely related
intervals overlap::intervals overlap
minimum overlap::minimum overlap
overlap minimum::overlap minimum
minimum number::minimum number
interval overlaps::interval overlaps
mirror image::mirror image
large overlap::large overlap
smallest overlap::smallest overlap
wise overlap::wise overlap
solution size::solution size
first interval::first interval
picked interval::picked interval
algorithm produced::algorithm produced
hand optimum::hand optimum
optimum value::optimum value
constructing examples::constructing examples
complicated algorithms::complicated algorithms
complicated counter::complicated counter
counter examples::counter examples
algorithm work::algorithm work
space supposing::space supposing
case adding::case adding
optimum falls::optimum falls
interval means::interval means
ends first::ends first
interval sends::interval sends
add interval::add interval
iterative procedure::iterative procedure
ending times::ending times
makes exchange::makes exchange
previous figure::previous figure
figure supposing::figure supposing
solution remove::solution remove
smaller set::smaller set
optimum drops::optimum drops
algorithm finds::algorithm finds
algorithm output::algorithm output
greedy strategies::greedy strategies
main principle::main principle
construct solution::construct solution
problem piece::problem piece
main lessons::main lessons
reviewed main::reviewed main
main point::main point
2nd problem::2nd problem
obvious strategies::obvious strategies
problem field::problem field
natural strategies::natural strategies
normal human::normal human
greedy strategy::greedy strategy
strategy works::strategy works
write system::write system
obvious things::obvious things
obvious solution::obvious solution
first piece::first piece
induction works::induction works
optimal solution::optimal solution
call exchange::call exchange
exchange techniques::exchange techniques
proof derive::proof derive
exchange business::exchange business
exchange words::exchange words
algorithm first::algorithm first
first discard::first discard
discard intervals::discard intervals
empty set::empty set
set start::set start
exchange strict::exchange strict
2nd proof::2nd proof
correctness suppose::correctness suppose
algorithm picked::algorithm picked
picked intervals::picked intervals
finishing times::finishing times
starting times::starting times
thing suppose::thing suppose
solution suppose::solution suppose
initial intervals::initial intervals
algorithm pick::algorithm pick
initial solutions::initial solutions
optimum solutions::optimum solutions
solutions pick::solutions pick
optimum present::optimum present
kolid interval::kolid interval
1th interval::1th interval
opt solution::opt solution
smallest ending::smallest ending
algorithm constructor::algorithm constructor
input set::input set
non-overlapping intervals::non-overlapping intervals
scheduling problem::scheduling problem
times overlapped::times overlapped
intervals putting::intervals putting
intervals based::intervals based
first processor::first processor
greedy back::greedy back
back drop::back drop
sort intervals::sort intervals
real intuition::real intuition
choose intervals::choose intervals
order put::order put
first parts::first parts
first part::first part
overlapping interval::overlapping interval
2nd part::2nd part
parts working::parts working
fact optimum::fact optimum
algorithm partitioned::algorithm partitioned
ends set::ends set
text books::text books
trial small::trial small
interval put::interval put
3rd part::3rd part
situation happen::situation happen
2nd scenario::2nd scenario
ordering thing::ordering thing
proof works::proof works
algorithm develops::algorithm develops
3rd interval::3rd interval
previous algorithms::previous algorithms
right algorithm::right algorithm
rest put::rest put
kth part::kth part
algorithm put::algorithm put
last sentence::last sentence
algorithm produces::algorithm produces
order sorting::order sorting
sorting times::sorting times
crucial strategy::crucial strategy
smaller problem::smaller problem
bigger problem::bigger problem
things induction::things induction
works beautifully::works beautifully
frame work::frame work
candidate algorithm::candidate algorithm
algorithm solution::algorithm solution
solution improve::solution improve
memory effect::memory effect
2nd case::2nd case
exchange pick::exchange pick
processing times::processing times
scheduling problems::scheduling problems
processor runs::processor runs
times schedule::times schedule
schedule means::schedule means
first job::first job
3rd job::3rd job
first finishing::first finishing
modules job::modules job
max minimum::max minimum
increasing times::increasing times
complicated problems::complicated problems
greedy perspective::greedy perspective
perspective design::perspective design
fractional knapsack::fractional knapsack
knapsack problem::knapsack problem
algorithms lecture::algorithms lecture
bugler house::bugler house
word knapsack::word knapsack
limited capacity::limited capacity
total amount::total amount
total profit::total profit
fractional part::fractional part
ordinary house::ordinary house
bugling cake::bugling cake
cake shops::cake shops
fancy cakes::fancy cakes
cakes tune::cakes tune
maximize profit::maximize profit
real occasion::real occasion
problem formally::problem formally
profit work::profit work
maximize sigma::maximize sigma
profit function::profit function
real muff::real muff
muff greedy::muff greedy
fractional subset::fractional subset
real terms::real terms
pick elements::pick elements
means pick::means pick
pick items::pick items
crucial decision::crucial decision
order items::order items
decreasing profit::decreasing profit
increasing sizes::increasing sizes
put profit::put profit
size squared::size squared
profit squared::profit squared
possibilities work::possibilities work
work remember::work remember
right kind::right kind
strategy fails::strategy fails
defined exchange::defined exchange
exchange item::exchange item
start filling::start filling
remains full::remains full
epsilon prime::epsilon prime
minus epsilon::minus epsilon
prime epsilon::prime epsilon
epsilon equal::epsilon equal
prime equals::prime equals
times epsilon::times epsilon
profit minus::profit minus
profit increase::profit increase
means epsilon::means epsilon
replace part::replace part
favor item::favor item
calculation tells::calculation tells
profit divided::profit divided
decreasing scores::decreasing scores
first item::first item
top score::top score
entire item::entire item
item unit::item unit
kth item::kth item
last item::last item
maximum score::maximum score
optimum picks::optimum picks
first index::first index
index exit::index exit
optimum increase::optimum increase
lower score::lower score
previous sort::previous sort
first coordinate::first coordinate
picked exist::picked exist
delta total::delta total
total sum::total sum
initial things::initial things
choose epsilon::choose epsilon
prime properly::prime properly
type size::type size
small thing::small thing
proof slightly::proof slightly
exchange idea::exchange idea
trick run::trick run
exchange tricks::exchange tricks
information transmission::information transmission
design codes::design codes
binary codes::binary codes
binary string::binary string
binary strings::binary strings
send symbols::send symbols
huge word::huge word
huge sort::huge sort
sort strings::sort strings
make things::make things
free symbols::free symbols
average frequencies::average frequencies
good code::good code
smaller number::smaller number
lesser number::lesser number
first symbol::first symbol
decode decoding::decode decoding
prefix pre::prefix pre
pre codes::pre codes
pre code::pre code
code word::code word
construct prefix::construct prefix
length frequency::length frequency
frequency times::frequency times
times length::times length
average length::average length
close connection::close connection
crucial things::crucial things
code words::code words
word left::word left
left branch::left branch
right branch::right branch
string associate::string associate
leaf sets::leaf sets
simple fashion::simple fashion
entire problem::entire problem
problem properly::problem properly
free codes::free codes
function sigma::function sigma
large frequencies::large frequencies
sort codes::sort codes
works either1::works either1
put items::put items
largest frequency::largest frequency
heaviest item::heaviest item
good exercise::good exercise
binaries trees::binaries trees
correct tree::correct tree
longest height::longest height
largest frequencies::largest frequencies
tree part::tree part
exchange items::exchange items
tree remains::tree remains
exchange sub::exchange sub
average height::average height
tree design::tree design
variable length::variable length
shorter codeword::shorter codeword
large file::large file
codeword appears::codeword appears
free code::free code
word occurs::word occurs
curve codeword::curve codeword
code corresponds::code corresponds
code codeword::code codeword
traverse left::traverse left
output prefix::output prefix
trees fixed::trees fixed
smallest frequencies::smallest frequencies
smaller frequency::smaller frequency
means things::means things
tree things::tree things
tree sitting::tree sitting
output supposing::output supposing
constructed solution::constructed solution
change twist::change twist
exchanging part::exchanging part
constructing trees::constructing trees
height times::height times
elements remain::elements remain
cost remains::cost remains
contribution change::contribution change
length root::length root
path inside::path inside
sub tree::sub tree
similar cost::similar cost
cost sigma::cost sigma
length inside::length inside
remains fixed::remains fixed
times sigma::times sigma
minus sigma::minus sigma
exchanging leads::exchanging leads
smaller cost::smaller cost
cost remember::cost remember
frequencies inside::frequencies inside
elements inside::elements inside
trick tells::trick tells
trees bottom::trees bottom
slow increase::slow increase
build slowly::build slowly
bottom thing::bottom thing
crucial trick::crucial trick
bottom remember::bottom remember
previous exchange::previous exchange
exchange thing::exchange thing
nodes inside::nodes inside
frequencies remain::frequencies remain
intermediate stage::intermediate stage
algorithm terminates::algorithm terminates
terminates ease::terminates ease
trees decreases::trees decreases
exchange principle::exchange principle
proof statement::proof statement
optimum tree::optimum tree
algorithm constructs::algorithm constructs
means optimum::means optimum
first stage::first stage
optimum case::optimum case
lowest sub::lowest sub
tree exchange::tree exchange
cost decreased::cost decreased
minimum weights::minimum weights
huffman coding::huffman coding
main thing::main thing
solution output::solution output
right piece::right piece
out pieces::out pieces
change solution::change solution
solution puts::solution puts
objective function::objective function
study metroids::study metroids
strategies work::strategies work
good luck::good luck
luck design::luck design
pattern matching::pattern matching
pattern occurs::pattern occurs
text grep::text grep
operating system::operating system
basic sort::basic sort
pattern starting::pattern starting
character starting::character starting
character onwards::character onwards
pattern exist::pattern exist
matching character::matching character
complete match::complete match
text equals::text equals
first character::first character
pattern etcetera::pattern etcetera
patters occurs::patters occurs
match character::match character
starting point::starting point
total sort::total sort
pattern discover::pattern discover
lecture ends::lecture ends
simple pattern::simple pattern
real exact::real exact
exact value::exact value
pattern ends::pattern ends
initial shifts::initial shifts
start shifting::start shifting
start comparing::start comparing
crucial argument::crucial argument
anymore comparisons::anymore comparisons
pattern shifted::pattern shifted
text matches::text matches
good possibility::good possibility
start comparisons::start comparisons
fellow moves::fellow moves
text pointer::text pointer
pointer remains::pointer remains
moves forward::moves forward
match text::match text
match occurred::match occurred
mismatch occur::mismatch occur
mismatch occurs::mismatch occurs
text moves::text moves
mismatch text::mismatch text
text character::text character
earlier cases::earlier cases
matched information::matched information
string matches::string matches
match information::match information
shift pattern::shift pattern
line highways::line highways
text pattern::text pattern
first mismatch::first mismatch
pattern forget::pattern forget
original pattern::original pattern
text sitting::text sitting
largest prefix::largest prefix
larger prefix::larger prefix
prefix matching::prefix matching
pattern dependent::pattern dependent
optimal shift::optimal shift
optimum shift::optimum shift
text sort::text sort
thing holds::thing holds
smallest shift::smallest shift
perfect match::perfect match
longest prefix::longest prefix
proper prefix::proper prefix
defined prefix::defined prefix
initial portions::initial portions
last portion::last portion
largest proper::largest proper
compute supposing::compute supposing
longest proper::longest proper
previous step::previous step
terms out::terms out
match pattern::match pattern
pattern mismatches::pattern mismatches
main loop::main loop
count number::count number
successful comparisons::successful comparisons
out merge::out merge
successful comparison::successful comparison
smallest value::smallest value
largest value::largest value
unsuccessful comparisons::unsuccessful comparisons
discussing pattern::discussing pattern
first occurrence::first occurrence
finding linear::finding linear
algorithm shifted::algorithm shifted
position starting::position starting
match prefix::match prefix
maximum search::maximum search
minimum shift::minimum shift
maximum length::maximum length
yesterdays notes::yesterdays notes
mismatch ignore::mismatch ignore
pattern shift::pattern shift
pattern shifting::pattern shifting
crucial stack::crucial stack
mismatch onwards::mismatch onwards
pattern shifts::pattern shifts
pointer remain::pointer remain
strictly increase::strictly increase
pattern remains::pattern remains
linear timing::linear timing
defined earlier::defined earlier
sub string::sub string
proof force::proof force
design sort::design sort
sort principles::sort principles
favorite inductive::favorite inductive
inductive kind::inductive kind
means assuming::means assuming
thing added::thing added
matches algorithm::matches algorithm
matches upwards::matches upwards
portion matches::portion matches
previous character::previous character
big portion::big portion
shifting pattern::shifting pattern
values previously::values previously
first shift::first shift
shift day::shift day
day shift::day shift
timing focus::timing focus
pattern supposing::pattern supposing
correct shift::correct shift
middle part::middle part
portion correct::portion correct
part match::part match
bottom part::bottom part
top part::top part
similar phenomenon::similar phenomenon
sounds bit::sounds bit
bit complicated::bit complicated
previous values::previous values
pattern forward::pattern forward
input pattern::input pattern
initial pattern::initial pattern
shifted pattern::shifted pattern
separate things::separate things
equals pattern::equals pattern
pointers move::pointers move
move forward::move forward
crucial part::crucial part
shifted value::shifted value
exceptional case::exceptional case
character match::character match
successful match::successful match
unsuccessful comparison::unsuccessful comparison
means pattern::means pattern
maximum value::maximum value
perfectly correct::perfectly correct
bottom pattern::bottom pattern
pattern matches::pattern matches
compare start::compare start
entire pattern::entire pattern
boyer moore::boyer moore
growth moore::growth moore
moore starts::moore starts
last pattern::last pattern
last character::last character
pattern upwards::pattern upwards
matching algorithm::matching algorithm
prefix proper::prefix proper
shift value::shift value
previous things::previous things
previous thing::previous thing
text strings::text strings
patterns compute::patterns compute
values compute::values compute
algorithms runs::algorithms runs
combinatorial search::combinatorial search
discrete object::discrete object
discrete objects::discrete objects
objects object::objects object
constraints find::constraints find
objects satisfying::objects satisfying
lease cost::lease cost
function defined::function defined
real numbers::real numbers
alternate definition::alternate definition
maximum benefit::maximum benefit
benefit find::benefit find
find object::find object
constraints benefit::constraints benefit
set benefit::set benefit
abstract definition::abstract definition
examples initiately::examples initiately
cost function::cost function
benefit function::benefit function
queens problem::queens problem
usual chess::usual chess
chess board::chess board
place queens::place queens
queens capture::queens capture
row number::row number
number value::number value
first condition::first condition
vertical distance::vertical distance
absolute value::absolute value
game problem::game problem
object function::object function
input consist::input consist
kilo grams::kilo grams
total value::total value
selected objects::selected objects
total weight::total weight
combinatorial object::combinatorial object
crops call::crops call
objects items::objects items
selected items::selected items
maximization problem::maximization problem
large value::large value
travelling sales::travelling sales
sales person::sales person
person problem::person problem
weighted graph::weighted graph
map map::map map
world vertices::world vertices
vertices represent::vertices represent
represent towns::represent towns
edges represents::edges represents
represents roads::represents roads
weight represent::weight represent
total distance::total distance
distance covered::distance covered
problem relating::problem relating
sales persons::sales persons
problem arises::problem arises
complete graph::complete graph
undirected graph::undirected graph
problem makes::problem makes
makes sense::makes sense
directed case::directed case
sales man::sales man
outer tour::outer tour
similar kind::similar kind
idea today::idea today
combinatorial optimization::combinatorial optimization
optimization problems::optimization problems
search problems::search problems
imply today::imply today
basic strategies::basic strategies
backtrack search::backtrack search
brute force::brute force
force search::force search
search strategy::search strategy
dynamic programming::dynamic programming
diff level::diff level
level analysis::level analysis
start talking::start talking
strategy today::strategy today
restricted strategy::restricted strategy
search problem::search problem
problem search::problem search
search strategies::search strategies
analytical work::analytical work
programming ideas::programming ideas
simple minded::simple minded
answer correct::answer correct
record cost::record cost
function found::function found
function founds::function founds
current object::current object
object record::object record
slight amount::slight amount
empty template::empty template
first slot::first slot
smaller parts::smaller parts
parts comprising::parts comprising
big object::big object
completely empty::completely empty
first queen::first queen
fourth row::fourth row
entire board::entire board
empty board::empty board
candidate objects::candidate objects
partially built::partially built
built object::built object
object candidate::object candidate
candidate object::candidate object
built candidate::built candidate
full arrange::full arrange
arrange substance::arrange substance
previous object::previous object
fully constructed::fully constructed
higher level::higher level
level completion::level completion
fourth queen::fourth queen
square bolts::square bolts
constructed objects::constructed objects
previous level::previous level
leaf level::leaf level
exhaustive generation::exhaustive generation
generation method::generation method
empty object::empty object
parent node::parent node
generation step::generation step
queen position::queen position
position satisfy::position satisfy
fact satisfy::fact satisfy
leaf objects::leaf objects
objects satisfy::objects satisfy
cost functions::cost functions
programming idea::programming idea
objects properly::objects properly
data structure::data structure
element array::element array
travelling salesman::travelling salesman
salesman problem::salesman problem
travelling salesperson::travelling salesperson
salesperson problem::salesperson problem
array denotes::array denotes
empty slot::empty slot
sub sequential::sub sequential
sequential loss::sequential loss
object filled::object filled
checks constraints::checks constraints
evaluating cost::evaluating cost
back track::back track
track search::track search
last value::last value
value filled::value filled
last slot::last slot
search procedure::search procedure
partially filled::partially filled
slots filled::slots filled
check constraints::check constraints
constraints satisfied::constraints satisfied
leaf found::leaf found
useless leaf::useless leaf
minus infinitive::minus infinitive
function assuming::function assuming
unfiled slots::unfiled slots
branching business::branching business
unfilled slot::unfilled slot
unfilled slots::unfilled slots
filling slots::filling slots
slots filling::slots filling
modified object::modified object
leaves underneath::leaves underneath
smallest cost::smallest cost
first instance::first instance
cost values::cost values
value generated::value generated
cost leaf::cost leaf
structures scores::structures scores
first search::first search
search space::search space
space search::space search
constraints checks::constraints checks
problem suppose::problem suppose
first column::first column
first wheel::first wheel
search tree::search tree
tree immediately::tree immediately
early conditional::early conditional
conditional checks::conditional checks
checks condition::checks condition
condition checks::condition checks
quick description::quick description
empty tour::empty tour
starting vertex::starting vertex
complete tour::complete tour
problem specialized::problem specialized
early checks::early checks
previous queens::previous queens
first city::first city
factorial ways::factorial ways
first level::first level
city tour::city tour
general method::general method
defined terms::defined terms
terms likes::terms likes
likes search::likes search
combinatorial explosion::combinatorial explosion
manage level::manage level
grand children::grand children
study improvements::study improvements
grand picture::grand picture
simplest backtrack::simplest backtrack
search ideas::search ideas
sophisticated strategies::sophisticated strategies
specialized strategies::specialized strategies
optimization problem::optimization problem
problem design::problem design
gave examples::gave examples
general technique::general technique
obvious idea::obvious idea
executed systematically::executed systematically
main question::main question
object techniques::object techniques
constructed object::constructed object
objects based::objects based
complete object::complete object
object constructed::object constructed
minimum cost::minimum cost
cost object::cost object
first manner::first manner
leaf extra::leaf extra
top node::top node
entire search::entire search
natural question::natural question
huge number::huge number
leaf coming::leaf coming
nodes doubles::nodes doubles
pruning heuristic::pruning heuristic
cost turned::cost turned
defined object::defined object
partial object::partial object
important idea::important idea
defined suppose::defined suppose
extended cost::extended cost
interesting property::interesting property
extending xij::extending xij
xij suppose::xij suppose
function satisfy::function satisfy
point avail::point avail
full object::full object
object found::object found
simple graph::simple graph
edges weight::edges weight
outer edge::outer edge
edges traverse::edges traverse
first explain::first explain
first edge::first edge
horizontal edge::horizontal edge
downward edge::downward edge
tour starting::tour starting
diagonal edge::diagonal edge
thing left::thing left
doing depth::doing depth
first alternative::first alternative
towns first::towns first
search page::search page
onwards backtrack::onwards backtrack
total cost::total cost
edge length::edge length
important assumption::important assumption
edge lengths::edge lengths
bound algorithm::bound algorithm
natural assumption::natural assumption
cost tour::cost tour
point branch::point branch
return back::return back
essentially proved::essentially proved
noting underneath::noting underneath
partial tour::partial tour
tour is10::tour is10
exploring things::exploring things
bound backtrack::bound backtrack
suitable cost::suitable cost
fewer notes::fewer notes
small overhead::small overhead
general branch::general branch
reasonable cost::reasonable cost
select objects::select objects
boundary heuristics::boundary heuristics
natural cost::natural cost
natural objective::natural objective
natural function::natural function
maximize total::maximize total
search work::search work
construct solutions::construct solutions
candidate solutions::candidate solutions
step process::step process
empty candidate::empty candidate
complete solution::complete solution
empty subset::empty subset
first decision::first decision
decision point::decision point
first object::first object
firm decision::firm decision
additional number::additional number
beginning fill::beginning fill
make decisions::make decisions
object whatsoever::object whatsoever
real reason::real reason
search involves::search involves
fact interested::fact interested
taking subsets::taking subsets
generated subset::generated subset
proper cost::proper cost
benefits function::benefits function
original function::original function
maximize value::maximize value
rejected objects::rejected objects
small value::small value
applying branch::applying branch
completely clear::completely clear
bound tree::bound tree
selected set::selected set
decision consists::decision consists
acceptable leaf::acceptable leaf
server capacity::server capacity
made decisions::made decisions
search reach::search reach
execute branch::execute branch
exploration underneath::exploration underneath
reach underneath::reach underneath
total benefit::total benefit
interesting thing::interesting thing
method powerful::method powerful
entire sub::entire sub
cost subset::cost subset
keeping track::keeping track
case branch::case branch
good ways::good ways
constructed cost::constructed cost
tsp problem::tsp problem
geographical tsp::geographical tsp
euclidean tsp::euclidean tsp
roads correcting::roads correcting
road distances::road distances
straight line::straight line
line distance::line distance
crow flies::crow flies
road correcting::road correcting
road code::road code
code wind::code wind
direct straight::direct straight
distance matrix::distance matrix
line distances::line distances
constructed earlier::constructed earlier
distance added::distance added
distance information::distance information
final word::final word
cleverness needed::cleverness needed
constructing cost::constructing cost
substantial pruning::substantial pruning
first issue::first issue
great pay::great pay
pay offs::pay offs
highest value::highest value
weight ratio::weight ratio
ratio first::ratio first
explore first::explore first
good object::good object
good cost::good cost
pruning effect::pruning effect
interesting decision::interesting decision
additional heuristics::additional heuristics
internet articles::internet articles
heuristics works::heuristics works
powerful technique::powerful technique
finds applications::finds applications
techniques finds::techniques finds
including operations::including operations
operations research::operations research
signal processing::signal processing
computational biology::computational biology
search technique::search technique
familiar knapsack::familiar knapsack
search solution::search solution
problem involves::problem involves
fourth object::fourth object
object weights::object weights
object based::object based
last object::last object
last parameter::last parameter
first node::first node
first brace::first brace
first vertex::first vertex
similar manner::similar manner
convention decided::convention decided
search view::search view
include object::include object
alternate view::alternate view
minus weight::minus weight
remaining part::remaining part
view encourages::view encourages
original capacity::original capacity
independent problem::independent problem
remaining capacity::remaining capacity
valuable objects::valuable objects
substantial improvement::substantial improvement
order solves::order solves
alternate problem::alternate problem
first benefit::first benefit
main important::main important
important benefits::important benefits
additional benefit::additional benefit
surprise benefit::surprise benefit
exiting benefit::exiting benefit
procedure first::procedure first
undecided object::undecided object
first thinking::first thinking
object onward::object onward
global variable::global variable
global variables::global variables
value array::value array
weight array::weight array
fairly easy::fairly easy
remaining object::remaining object
interesting case::interesting case
case appears::case appears
value form::value form
remaining objects::remaining objects
full capacity::full capacity
bit reduced::bit reduced
minus width::minus width
capacity series::capacity series
recursive implementation::recursive implementation
first call::first call
knapsack possibilities::knapsack possibilities
recursion tree::recursion tree
reaming capacity::reaming capacity
objects starting::objects starting
first recursive::first recursive
call give::call give
give raise::give raise
terms give::terms give
interesting parts::interesting parts
procedure call::procedure call
make procedure::make procedure
tree underneath::tree underneath
default idea::default idea
extending solutions::extending solutions
optimized version::optimized version
remember value::remember value
global array::global array
index correspond::index correspond
first dimension::first dimension
returning case::returning case
first checking::first checking
return max::return max
last code::last code
original code::original code
recursive algorithms::recursive algorithms
recursive estimate::recursive estimate
sharper bounds::sharper bounds
computer executes::computer executes
code suppose::code suppose
line number::line number
give numbers::give numbers
programs starts::programs starts
computer write::computer write
first entry::first entry
execution tree::execution tree
computer takes::computer takes
big deal::big deal
estimate triples::estimate triples
computer wrote::computer wrote
entry reappears::entry reappears
previous parameters::previous parameters
total length::total length
capacity times::capacity times
first idea::first idea
extending solution::extending solution
important dynamic::important dynamic
programming step::programming step
first dynamic::first dynamic
important ideas::important ideas
fourth idea::fourth idea
transcript idea::transcript idea
institute technology::institute technology
longest common::longest common
common subsequence::common subsequence
common subsequent::common subsequent
problem consists::problem consists
means sequence::means sequence
characters typically::characters typically
sequence interchange::sequence interchange
common subsequences::common subsequences
define subsequence::define subsequence
dropping elements::dropping elements
remaining elements::remaining elements
hidden drop::hidden drop
common sequences::common sequences
common sequence::common sequence
long common::long common
lcs problem::lcs problem
strings similarity::strings similarity
dna sequences::dna sequences
common evaluation::common evaluation
miss pelt::miss pelt
pelt word::pelt word
force algorithm::force algorithm
complicated algorithm::complicated algorithm
algorithm good::algorithm good
space consists::space consists
sub space::sub space
space consisting::space consisting
space explicitly::space explicitly
procedure listed::procedure listed
search spaces::search spaces
longest subsequent::longest subsequent
subsequent belonging::subsequent belonging
programming stops::programming stops
results evaluated::results evaluated
write non::write non
call fill::call fill
fills entries::fills entries
key point::key point
table times::table times
entry requires::entry requires
subsequent problem::subsequent problem
subsequences starting::subsequences starting
first letter::first letter
previous strategy::previous strategy
recursive strategy::recursive strategy
longest element::longest element
define notation::define notation
degenerate case::degenerate case
formal plain::formal plain
minute ago::minute ago
longer sequence::longer sequence
original claim::original claim
determine smallest::determine smallest
find capital::find capital
equals lcs::equals lcs
defining property::defining property
nice conjecture::nice conjecture
single line::single line
written earlier::written earlier
original space::original space
general search::general search
call lcs::call lcs
boundary conditions::boundary conditions
index return::index return
return null::return null
null sequence::null sequence
main case::main case
short form::short form
null strings::null strings
basic recursive::basic recursive
programming require::programming require
calls happen::calls happen
nice property::nice property
argument pass::argument pass
first string::first string
terminal index::terminal index
key idea::key idea
form lcs::form lcs
important observation::important observation
important part::important part
programming strategy::programming strategy
solution answers::solution answers
store lcs::store lcs
dimensional table::dimensional table
non recursive::non recursive
define fill::define fill
entries suppose::entries suppose
original procedure::original procedure
starting element::starting element
equals smallest::equals smallest
table entry::table entry
fill procedure::fill procedure
working out::working out
1th entry::1th entry
simply done::simply done
properly set::properly set
bottom row::bottom row
side column::side column
table entries::table entries
filled properly::filled properly
takes care::takes care
simply return::simply return
entire things::entire things
longer computing::longer computing
last part::last part
part fill::part fill
times max::times max
programming algorithm::programming algorithm
simple modification::simple modification
manner analog::manner analog
faster result::faster result
linked list::linked list
entire subsequence::entire subsequence
slight trick::slight trick
matric chain::matric chain
chain multiplication::chain multiplication
informal statement::informal statement
issues involved::issues involved
algorithm repeatedly::algorithm repeatedly
problem today::problem today
clear zone::clear zone
entire product::entire product
simplest algorithm::simplest algorithm
multiplication matrix::multiplication matrix
single term::single term
faster algorithm::faster algorithm
issue concerns::issue concerns
concerns associativity::concerns associativity
compute matrix::compute matrix
scalar multiplication::scalar multiplication
scalar multiplications::scalar multiplications
multiplication required::multiplication required
first form::first form
product requires::product requires
doing things::doing things
rooted trees::rooted trees
usual fashion::usual fashion
drawing vertex::drawing vertex
vertex represents::vertex represents
compute product::compute product
grows exponential::grows exponential
formal statement::formal statement
left sub::left sub
right sub::right sub
product represented::product represented
left tree::left tree
right tree::right tree
additional term::additional term
clarify suppose::clarify suppose
lost product::lost product
term remaining::term remaining
simple brute::simple brute
leaf trees::leaf trees
efficient algorithm::efficient algorithm
quick overview::quick overview
partitions search::partitions search
entire space::entire space
unusual steps::unusual steps
key requirement::key requirement
recursive function::recursive function
leaves note::leaves note
design scheme::design scheme
place holders::place holders
cost tree::cost tree
large animal::large animal
main property::main property
natural property::natural property
main lemma::main lemma
cost trees::cost trees
interesting observation::interesting observation
standard dynamic::standard dynamic
made earlier::made earlier
entire expression::entire expression
basic statement::basic statement
optimal sub::optimal sub
algorithm mcm::algorithm mcm
mcm stands::mcm stands
metrics chain::metrics chain
optimal tree::optimal tree
adequate number::adequate number
matrix multiplications::matrix multiplications
base cases::base cases
single matrix::single matrix
single vertex::single vertex
lemma generate::lemma generate
tree optimal::tree optimal
previous lemma::previous lemma
call mcm::call mcm
optimal right::optimal right
cost required::cost required
two note::two note
expression cost::expression cost
field selector::field selector
root point::root point
additional field::additional field
previous algorithm::previous algorithm
single element::single element
programming procedure::programming procedure
substituted mcmc::substituted mcmc
entire part::entire part
minimum fit::minimum fit
resulting expression::resulting expression
procedure mcmc::procedure mcmc
original range::original range
sub range::sub range
call mcmc::call mcmc
procedure fill::procedure fill
return mcmc::return mcmc
execute mcmc::execute mcmc
basic procedure::basic procedure
last index::last index
case return::case return
compute mcmc::compute mcmc
reference mcmc::reference mcmc
mcmc fill::mcmc fill
right procedure::right procedure
entry assuming::entry assuming
fill works::fill works
table first::table first
simply entries::simply entries
row kth::row kth
kth column::kth column
main diagonal::main diagonal
extremely simple::extremely simple
simple order::simple order
filling entries::filling entries
fill entries::fill entries
entry depends::entry depends
entire range::entire range
single entry::single entry
exact tree::exact tree
holding costs::holding costs
programming today::programming today
working today::working today
startup cost::startup cost
input clarifying::input clarifying
cost today::cost today
machine working::machine working
hold units::hold units
delivered today::delivered today
holding cost::holding cost
main input::main input
daily demand::daily demand
final requirement::final requirement
total demand::total demand
demand vector::demand vector
delivered day::delivered day
production plan::production plan
tabular form::tabular form
seventh day::seventh day
producing earlier::producing earlier
days machine::days machine
previous day::previous day
inventory cost::inventory cost
produced yesterday::produced yesterday
sixth day::sixth day
first plan::first plan
quick view::quick view
repulsive solution::repulsive solution
first subspace::first subspace
recursive solution::recursive solution
filling table::filling table
direct procedure::direct procedure
filled earlier::filled earlier
recursive fashion::recursive fashion
day problem::day problem
typical steps::typical steps
first day::first day
additional history::additional history
history information::history information
generalized scheduling::generalized scheduling
additional inputs::additional inputs
initial inventory::initial inventory
earlier corresponds::earlier corresponds
wider range::wider range
production schedule::production schedule
instances characterized::instances characterized
bit vector::bit vector
bit specifies::bit specifies
startup costs::startup costs
cost schedule::cost schedule
space sub::space sub
sub spaces::sub spaces
cost element::cost element
cost solutions::cost solutions
smaller instance::smaller instance
sub structure::sub structure
structure idea::structure idea
sub problem::sub problem
residual instance::residual instance
original instance::original instance
integer vector::integer vector
problem require::problem require
instance beginning::instance beginning
final component::final component
machine status::machine status
residual influence::residual influence
key lemma::key lemma
optimal schedule::optimal schedule
typical argument::typical argument
programming arguments::programming arguments
remaining days::remaining days
valid solution::valid solution
instance right::instance right
basic assumption::basic assumption
similar idea::similar idea
idea works::idea works
last component::last component
original elementary::original elementary
remark claims::remark claims
algorithm opts::algorithm opts
opts schedule::opts schedule
schedule arguments::schedule arguments
entire demands::entire demands
additional argument::additional argument
current inventory::current inventory
main core::main core
recursive residual::recursive residual
residual problem::residual problem
problem assuming::problem assuming
optimized schedule::optimized schedule
first schedule::first schedule
first sub::first sub
remaining details::remaining details
important details::important details
key step::key step
entire input::entire input
sub array::sub array
array beginning::array beginning
demand array::demand array
terminal sub::terminal sub
largest index::largest index
machine produces::machine produces
last argument::last argument
good characterization::good characterization
bit cumbersome::bit cumbersome
entire schedules::entire schedules
entire optimal::entire optimal
similar entries::similar entries
similar number::similar number
similar indices::similar indices
programming requires::programming requires
table depend::table depend
remaining entries::remaining entries
exact computation::exact computation
lower cost::lower cost
small smaller::small smaller
smaller range::smaller range
schedule false::schedule false
false concatenated::false concatenated
cost relationship::cost relationship
schedule starts::schedule starts
incurred depends::incurred depends
expression mark::expression mark
mark true::mark true
true value::true value
value colon::value colon
colon false::colon false
false value::false value
bracket evaluates::bracket evaluates
inventory subtract::inventory subtract
residual cost::residual cost
mth entry::mth entry
recurrence connecting::recurrence connecting
nice fix::nice fix
simple fix::simple fix
negative number::negative number
entire cost::entire cost
infinite negative::infinite negative
negative numbers::negative numbers
positive number::positive number
number earlier::number earlier
final problem::final problem
base keys::base keys
relate entries::relate entries
last day::last day
day schedule::day schedule
single day::single day
legal schedule::legal schedule
main condition::main condition
valid schedule::valid schedule
last demand::last demand
anymore units::anymore units
nth day::nth day
style expression::style expression
inventory greater::inventory greater
last column::last column
days side::days side
filled out::filled out
simple ideas::simple ideas
recursion part::recursion part
days calculation::days calculation
entire table::entire table
optimal cost::optimal cost
false side::false side
entire demand::entire demand
final topic::final topic
expression involving::expression involving
residual plan::residual plan
entire schedule::entire schedule
interesting step::interesting step
device recursive::device recursive
problem formation::problem formation
medium finding::medium finding
arc smallest::arc smallest
similar issue::similar issue
first basic::first basic
usual definition::usual definition
popular definition::popular definition
usual measure::usual measure
inputs behave::inputs behave
worst input::worst input
analysis worst::analysis worst
analysis turns::analysis turns
sort quick::sort quick
sorting algorithm::sorting algorithm
excellent performance::excellent performance
algorithm quick::algorithm quick
smallest keys::smallest keys
case first::case first
first key::first key
single list::single list
call large::call large
proper lists::proper lists
small elements::small elements
call qsort::call qsort
elements sorted::elements sorted
list equal::list equal
long list::long list
sort works::sort works
division part::division part
interesting work::interesting work
conquer part::conquer part
combined part::combined part
trivial correctness::trivial correctness
easy exercise::easy exercise
average cases::average cases
worst cases::worst cases
calling quick::calling quick
evoking quick::evoking quick
list large::list large
invoking quick::invoking quick
list small::list small
basic recurrence::basic recurrence
small list::small list
large list::large list
large part::large part
thing terminates::thing terminates
list terminates::list terminates
size adds::size adds
total work::total work
size added::size added
sorted list::sorted list
key question::key question
unusual case::unusual case
real question::real question
large height::large height
small height::small height
tree height::tree height
total height::total height
turns out::turns out
simple situation::simple situation
size halves::size halves
homework exercise::homework exercise
artificial case::artificial case
node problem::node problem
key problem::key problem
uneven distribution::uneven distribution
terminate quickly::terminate quickly
tree multiplied::tree multiplied
largest problem::largest problem
level problem::level problem
problem level::problem level
level size::level size
rightmost branch::rightmost branch
largest size::largest size
problem drops::problem drops
good news::good news
middle case::middle case
first intuition::first intuition
systematic analysis::systematic analysis
allowed inputs::allowed inputs
taking averages::taking averages
factorial instances::factorial instances
separate groups::separate groups
input space::input space
entire group::entire group
inputs split::inputs split
small set::small set
sorting permutation::sorting permutation
equal elements::equal elements
equal element::equal element
last group::last group
clever data::clever data
key observation::key observation
first space::first space
recursion induction::recursion induction
alternate method::alternate method
write recurrences::write recurrences
interesting counting::interesting counting
comparisons performed::comparisons performed
important operation::important operation
added elements::added elements
comparison operation::comparison operation
case input::case input
complicated index::complicated index
input permutation::input permutation
cells blank::cells blank
average number::average number
question directly::question directly
first permutation::first permutation
first input::first input
separate lists::separate lists
picked suppose::picked suppose
current list::current list
bit slowly::bit slowly
factorial times::factorial times
comparisons happen::comparisons happen
slightly differently::slightly differently
good estimate::good estimate
times sum::times sum
table list::table list
factorial columns::factorial columns
average running::average running
natural base::natural base
natural logarithm::natural logarithm
matter log::matter log
rth smallest::rth smallest
bipartite maximum::bipartite maximum
maximum matching::maximum matching
matching bipartite::matching bipartite
bipartite graph::bipartite graph
graph matching::graph matching
obvious goal::obvious goal
goal assign::goal assign
assign candidates::assign candidates
matching problem::matching problem
mathematical terms::mathematical terms
first define::first define
candidate problem::candidate problem
vertex sets::vertex sets
vertices forms::vertices forms
blue edges::blue edges
blue edge::blue edge
blue matching::blue matching
sized matching::sized matching
red matching::red matching
size matching::size matching
edges maximum::edges maximum
maximum matchings::maximum matchings
jobs problem::jobs problem
first set::first set
jobs assigned::jobs assigned
red matchings::red matchings
design idea::design idea
augmenting paths::augmenting paths
important concept::important concept
matching area::matching area
clean simple::clean simple
correctness depends::correctness depends
winded idea::winded idea
larger size::larger size
natural thing::natural thing
greedy idea::greedy idea
adding edges::adding edges
add edges::add edges
produce conflict::produce conflict
kho kho::kho kho
kho idea::kho idea
starts running::starts running
starts chasing::starts chasing
opposing team::opposing team
free vertex::free vertex
end point::end point
idea first::idea first
free edge::free edge
edge include::edge include
bigger matching::bigger matching
free vertices::free vertices
case vertex::case vertex
edges incident::edges incident
conflict conflict::conflict conflict
color code::color code
color green::color green
show edges::show edges
removed remember::removed remember
yellow edges::yellow edges
green edges::green edges
matching earlier::matching earlier
matching attached::matching attached
longer remember::longer remember
yellow edge::yellow edge
yellow color::yellow color
kho sort::kho sort
entire process::entire process
added edge::added edge
removed edge::removed edge
interesting pattern::interesting pattern
edges alternate::edges alternate
removed edges::removed edges
augmenting path::augmenting path
last vertex::last vertex
extra edge::extra edge
intermediate vertices::intermediate vertices
backward edge::backward edge
forward edge::forward edge
symmetric difference::symmetric difference
symmetric matching::symmetric matching
edges form::edges form
paths play::paths play
big role::big role
eminent computer::eminent computer
computer scientist::computer scientist
previous century::previous century
empty matching::empty matching
current matching::current matching
theorem attributed::theorem attributed
theorem justifies::theorem justifies
rule out::rule out
hands matching::hands matching
first claim::first claim
union forget::union forget
interesting fact::interesting fact
consecutive edges::consecutive edges
cycles inside::cycles inside
alternate edges::alternate edges
bigger size::bigger size
cycles first::cycles first
cycle consists::cycle consists
equal number::equal number
last edge::last edge
additional edge::additional edge
red edge::red edge
maximal path::maximal path
black edge::black edge
last end::last end
end points::end points
path exists::path exists
proves berge::proves berge
proved berge::proved berge
path starts::path starts
path started::path started
interesting idea::interesting idea
grow backwards::grow backwards
free node::free node
grow paths::grow paths
forward direction::forward direction
backward direction::backward direction
description nice::description nice
earlier graph::earlier graph
directed graph::directed graph
augmented path::augmented path
graph notice::graph notice
putting directions::putting directions
auxiliary graph::auxiliary graph
original graph::original graph
prime consists::prime consists
forward edges::forward edges
hand set::hand set
side vertices::side vertices
backward edges::backward edges
directed backwards::directed backwards
directed forward::directed forward
put edges::put edges
main claim::main claim
directed path::directed path
important notice::important notice
finding augmenting::finding augmenting
augmented paths::augmented paths
significant claim::significant claim
specific graph::specific graph
part first::part first
previous graph::previous graph
previous picture::previous picture
analogous edge::analogous edge
prime note::prime note
path users::path users
users edges::users edges
fact present::fact present
oriented properly::oriented properly
path direction::path direction
proper orientation::proper orientation
directed edge::directed edge
path procedure::path procedure
return path::return path
adjacency list::adjacency list
list representation::list representation
bfs bfs::bfs bfs
bfs breadth::bfs breadth
search takes::search takes
procedure augmenting::procedure augmenting
part deleting::part deleting
matching size::matching size
concluding remarks::concluding remarks
iterative refinement::iterative refinement
small change::small change
fastest algorithm::fastest algorithm
non bipartite::non bipartite
bipartite graphs::bipartite graphs
similar bounds::similar bounds
bipartite case::bipartite case
basic question::basic question
designed supposed::designed supposed
valuable result::valuable result
specific algorithm::specific algorithm
proportionality constant::proportionality constant
form omega::form omega
main motivation::main motivation
general discussion::general discussion
prove problem::prove problem
decision trees::decision trees
case instance::case instance
case bounds::case bounds
case times::case times
inequality holds::inequality holds
constructing instances::constructing instances
construct instances::construct instances
good value::good value
size instance::size instance
instance size::instance size
bound function::bound function
algebraic statement::algebraic statement
additional quantification::additional quantification
minimum worst::minimum worst
bad instances::bad instances
instances instances::instances instances
problem sizes::problem sizes
trivial lower::trivial lower
large applies::large applies
interesting problems::interesting problems
non-trivial bounds::non-trivial bounds
access machines::access machines
machines ram::machines ram
proving non::proving non
trivial bounds::trivial bounds
single problem::single problem
algorithms enumerating::algorithms enumerating
structured fashion::structured fashion
tricky business::tricky business
instructions ram::instructions ram
complicated things::complicated things
trigonometric functions::trigonometric functions
ram instructions::ram instructions
control flow::control flow
flow pattern::flow pattern
ram program::ram program
pretty difficult::pretty difficult
ram programs::ram programs
typically done::typically done
computational model::computational model
flow patterns::flow patterns
computational models::computational models
fairly small::fairly small
good model::good model
worried worry::worried worry
labeled tree::labeled tree
non-leaf node::non-leaf node
label means::label means
model first::model first
relational operators::relational operators
operators leaf::operators leaf
leaf node::leaf node
node labels::node labels
program tree::program tree
tree model::tree model
execution model::execution model
model begins::model begins
node labeled::node labeled
relational label::relational label
label present::label present
outgoing edge::outgoing edge
unique path::unique path
follow outwards::follow outwards
execution arise::execution arise
execution starts::execution starts
instruction represented::instruction represented
sorting program::sorting program
instance notice::instance notice
longest path::longest path
setting likewise::setting likewise
leaf paths::leaf paths
average root::average root
path length::path length
nice graphical::nice graphical
graphical interpretation::graphical interpretation
main claims::main claims
trivial bound::trivial bound
ram sorting::ram sorting
comparison based::comparison based
heap sort::heap sort
shell sort::shell sort
based algorithms::based algorithms
tree algorithms::tree algorithms
based ram::based ram
tree sorting::tree sorting
key comparisons::key comparisons
final claim::final claim
trivial result::trivial result
inverse permutation::inverse permutation
holds good::holds good
key insight::key insight
algorithm tree::algorithm tree
outgoing edges::outgoing edges
mentioned earlier::mentioned earlier
tree node::tree node
ternary tree::ternary tree
keys number::keys number
equality edge::equality edge
strict inequality::strict inequality
inequality branches::inequality branches
relates comparison::relates comparison
ram algorithm::ram algorithm
edge labels::edge labels
key values::key values
read things::read things
control structure::control structure
key value::key value
peeps inside::peeps inside
examine first::examine first
actual numbers::actual numbers
start execution::start execution
comparison outcomes::comparison outcomes
general pattern::general pattern
super tree::super tree
path outwards::path outwards
tree algorithm::tree algorithm
ram algorithms::ram algorithms
claim tells::claim tells
single claim::single claim
case complexity::case complexity
distance log::distance log
similar arguments::similar arguments
prove bounds::prove bounds
bounds follow::bounds follow
power log::power log
larger distance::larger distance
minus square::minus square
easily proved::easily proved
average path::average path
length average::length average
total path::total path
length log::length log
factorial drop::factorial drop
result shows::result shows
important application::important application
main operation::main operation
bigger ranges::bigger ranges
slight modification::slight modification
concluding remark::concluding remark
finding duplicates::finding duplicates
study merging::study merging
merging problems::merging problems
study problems::study problems
general model::general model
allowing comparison::allowing comparison
arithmetic incident::arithmetic incident
bound model::bound model
bound results::bound results
element distinctness::element distinctness
previous lecture::previous lecture
entire sequence::entire sequence
individual numbers::individual numbers
answer means::answer means
prove today::prove today
compare adjacent::compare adjacent
adjacent numbers::adjacent numbers
bound technique::bound technique
bounding technique::bounding technique
nice technique::nice technique
powerful model::powerful model
algebraic decision::algebraic decision
input instructions::input instructions
label tree::label tree
non leaf::non leaf
leaf nodes::leaf nodes
program leaf::program leaf
tree program::tree program
relational operator::relational operator
execution begins::execution begins
machine model::machine model
model comparison::model comparison
simply algorithms::simply algorithms
make copy::make copy
sorting problem::sorting problem
key thing::key thing
bound argument::bound argument
sorted sequence::sorted sequence
single leaf::single leaf
single answer::single answer
entire permutation::entire permutation
permutation constitutes::permutation constitutes
execution arrives::execution arrives
print out::print out
rough sketch::rough sketch
factorial possibilities::factorial possibilities
information theory::information theory
high information::high information
information content::information content
information quantity::information quantity
theory measures::theory measures
measures information::measures information
theoretical lower::theoretical lower
theoretic lower::theoretic lower
distinctness problem::distinctness problem
duplicate exist::duplicate exist
silly bound::silly bound
interesting argument::interesting argument
dimensional geometry::dimensional geometry
algebraic argument::algebraic argument
claim means::claim means
claim asserts::claim asserts
input sequence::input sequence
dimensional point::dimensional point
nth coordinate::nth coordinate
thing represents::thing represents
sequence consist::sequence consist
distinct elements::distinct elements
trivial permutation::trivial permutation
pre reorder::pre reorder
key claim::key claim
entire proof::entire proof
distinct leaves::distinct leaves
dimensional space::dimensional space
unit cube::unit cube
entire interior::entire interior
size two::size two
diagonal simply::diagonal simply
dimension distinct::dimension distinct
geometric view::geometric view
view point::view point
interesting insights::interesting insights
unit square::unit square
connected means::connected means
connected region::connected region
convex region::convex region
line path::line path
path passing::path passing
stronger requirement::stronger requirement
line paths::line paths
convex regions::convex regions
convex objects::convex objects
sphere examples::sphere examples
line joining::line joining
kidney shaped::kidney shaped
shaped region::shaped region
line passes::line passes
convex means::convex means
instance belongs::instance belongs
condition satisfied::condition satisfied
entire unit::entire unit
instances visiting::instances visiting
root constitute::root constitute
entire cube::entire cube
wedge shaped::wedge shaped
current set::current set
slicing region::slicing region
convex manner::convex manner
slicing operation::slicing operation
operation maintains::operation maintains
maintains convexity::maintains convexity
first execution::first execution
interesting execution::interesting execution
lambda times::lambda times
minus lambda::minus lambda
remaining weights::remaining weights
case lambda::case lambda
line segment::line segment
segment joining::segment joining
segment line::segment line
key part::key part
definition set::definition set
restrict lambda::restrict lambda
lie inside::lie inside
root label::root label
inequality lambda::inequality lambda
first root::first root
distinct values::distinct values
permutation sigma::permutation sigma
previous claim::previous claim
sub claim::sub claim
continuous path::continuous path
continuous function::continuous function
value theorem::value theorem
basic claim::basic claim
repeated identically::repeated identically
increasing sequence::increasing sequence
non increasing::non increasing
distinct permutations::distinct permutations
distinct permutation::distinct permutation
quick summary::quick summary
instance space::instance space
instances partition::instances partition
quick definition::quick definition
model consists::model consists
outgoing branches::outgoing branches
algebraic expressions::algebraic expressions
square minus::square minus
label expression::label expression
lies inside::lies inside
previous results::previous results
disconnected regions::disconnected regions
deep result::deep result
algebraic geometry::algebraic geometry
decision problem::decision problem
distinctness suppose::distinctness suppose
algebraic expression::algebraic expression
fixed constant::fixed constant
answers partition::answers partition
connected regions::connected regions
simple decision::simple decision
appears inside::appears inside
complicated algebraic::complicated algebraic
algebraic model::algebraic model
algebraic tree::algebraic tree
fixed degree::fixed degree
proof idea::proof idea
heavy duty::heavy duty
duty machinery::duty machinery
high degree::high degree
bound theory::bound theory
start searching::start searching
interesting point::interesting point
deep mathematics::deep mathematics
deep area::deep area
simple context::simple context
equal weight::equal weight
ideas expressed::ideas expressed
motivation introduction::motivation introduction
notion effectively::notion effectively
dream job::dream job
company pays::company pays
software job::software job
designing things::designing things
challenging projects::challenging projects
first project::first project
scheduling jobs::scheduling jobs
positive integers::positive integers
takes input::takes input
last job::last job
job finished::job finished
odd jobs::odd jobs
large jobs::large jobs
job completes::job completes
process finishes::process finishes
job finishes::job finishes
first process::first process
lightly loaded::lightly loaded
greater assume::greater assume
break ties::break ties
boss shows::boss shows
boss produces::boss produces
optimal takes::optimal takes
job sizes::job sizes
schedule takes::schedule takes
loaded processor::loaded processor
previous sizes::previous sizes
subsets compute::subsets compute
maximum pick::maximum pick
boss feeds::boss feeds
minutes pass::minutes pass
hour passes::hour passes
small inputs::small inputs
force approaches::force approaches
quick calculation::quick calculation
fastest computer::fastest computer
computer runs::computer runs
overestimate computers::overestimate computers
fastest speeds::fastest speeds
boss figures::boss figures
bit intelligent::bit intelligent
hard problems::hard problems
companies handle::companies handle
good programmer::good programmer
sub routines::sub routines
edges share::edges share
ticked edges::ticked edges
perfect matching::perfect matching
graph slightly::graph slightly
crosses form::crosses form
problem perfect::problem perfect
sub routine::sub routine
routine library::routine library
routine coded::routine coded
problem maximum::problem maximum
good implementation::good implementation
max matching::max matching
maximum set::maximum set
intermediate objective::intermediate objective
vertex connected::vertex connected
added vertex::added vertex
extra vertex::extra vertex
matching fellows::matching fellows
single region::single region
minus vertices::minus vertices
vertices inside::vertices inside
matching inside::matching inside
integer right::integer right
contradiction supposing::contradiction supposing
matching matching::matching matching
portion remains::portion remains
define graphs::define graphs
first graph::first graph
edge back::edge back
resultant graph::resultant graph
size falls::size falls
designed algorithm::designed algorithm
ended design::ended design
reduction means::reduction means
solved problem::solved problem
graph output::graph output
problem solving::problem solving
solve problem::solve problem
word reduction::word reduction
essential method::essential method
efficient problem::efficient problem
problem algorithm::problem algorithm
problem find::problem find
efficient problems::efficient problems
efficient means::efficient means
inefficient algorithm::inefficient algorithm
reasonable size::reasonable size
size inputs::size inputs
inputs finishes::inputs finishes
reasonable amount::reasonable amount
force algorithms::force algorithms
solution sets::solution sets
entire solution::entire solution
solution space::solution space
typical times::typical times
instance sorting::instance sorting
square bounded::square bounded
cube shortest::cube shortest
path finding::path finding
finding minimum::finding minimum
minimum spanning::minimum spanning
spanning trees::spanning trees
running times::running times
life times::life times
cube log::cube log
lets assume::lets assume
times running::times running
algorithm runs::algorithm runs
hamiltonian path::hamiltonian path
hamiltonian cycle::hamiltonian cycle
hamiltonian paths::hamiltonian paths
hewlett packard::hewlett packard
clear notion::clear notion
cycle design::cycle design
hamiltonian circuit::hamiltonian circuit
bit smarter::bit smarter
proved statement::proved statement
path constructs::path constructs
cycle routine::cycle routine
small modification::small modification
usual trick::usual trick
trick feed::trick feed
hamiltonian part::hamiltonian part
similar problem::similar problem
input graph::input graph
remove edges::remove edges
remove edge::remove edge
edge graph::edge graph
middle vertex::middle vertex
edge supposing::edge supposing
edge choose::edge choose
lets remove::lets remove
middle edge::middle edge
graph leads::graph leads
reasonable thing::reasonable thing
additional vertices::additional vertices
circuit supposing::circuit supposing
circuit pass::circuit pass
cycle passing::cycle passing
notice supposing::notice supposing
path supposing::path supposing
edge attach::edge attach
fact correct::fact correct
add vertices::add vertices
edge add::edge add
extra vertices::extra vertices
path algorithm::path algorithm
efficient first::efficient first
path routine::path routine
original running::original running
cases case::cases case
algorithm outputs::algorithm outputs
equivalent statement::equivalent statement
edge removal::edge removal
input output::input output
input question::input question
maximum weight::maximum weight
form input::form input
single bit::single bit
output spend::output spend
instance edges::instance edges
cycle problem::cycle problem
cycle input::cycle input
call decision::call decision
decision problems::decision problems
call search::call search
write decision::write decision
problem output::problem output
cycle output::cycle output
problems relate::problems relate
out people::out people
thing output::thing output
routine outputs::routine outputs
original routine::original routine
output things::output things
efficient algorithms::efficient algorithms
edges remaining::edges remaining
spurious edges::spurious edges
edges floating::edges floating
out edges::out edges
decision version::decision version
search version::search version
social decision::social decision
decision word::decision word
decision versions::decision versions
favorite hamiltonian::favorite hamiltonian
hamiltonian problem::hamiltonian problem
limited resources::limited resources
limited resource::limited resource
verifier sort::verifier sort
lets sitting::lets sitting
huge graph::huge graph
right statement::right statement
edges make::edges make
verifier asks::verifier asks
proving things::proving things
things proving::things proving
prover verifier::prover verifier
verifier game::verifier game
output factors::output factors
trivial integers::trivial integers
find factors::find factors
search question::search question
decision question::decision question
trivial factors::trivial factors
prover sends::prover sends
guy asks::guy asks
sends edges::sends edges
guy verifies::guy verifies
difficult question::difficult question
force method::force method
behave sort::behave sort
differently design::differently design
forget algorithms::forget algorithms
verifier meet::verifier meet
graph form::graph form
prover supplies::prover supplies
supplies edges::supplies edges
verifier verifies::verifier verifies
form hamiltonian::form hamiltonian
input side::input side
proof consists::proof consists
problem hamiltonian::problem hamiltonian
verifier verify::verifier verify
helps verification::helps verification
prover means::prover means
problem composites::problem composites
give verifier::give verifier
verifier checks::verifier checks
people sort::people sort
recent research::recent research
difficult thing::difficult thing
thing supposing::thing supposing
graph takes::graph takes
exhaustive technique::exhaustive technique
input behaves::input behaves
easy proof::easy proof
verifier check::verifier check
verifier receives::verifier receives
circuit case::circuit case
composites case::composites case
real life::real life
life fall::life fall
class defined::class defined
central problem::central problem
done logic::done logic
boolean circuit::boolean circuit
boolean variable::boolean variable
takes value::takes value
takes values::takes values
true false::true false
usual logical::usual logical
clause evaluates::clause evaluates
boolean formula::boolean formula
usual symbol::usual symbol
cnf stands::cnf stands
conjunctive normal::conjunctive normal
normal form::normal form
clause remember::clause remember
logical behavior::logical behavior
true evaluates::true evaluates
formula evaluates::formula evaluates
negation evaluates::negation evaluates
literals evaluates::literals evaluates
clauses evaluate::clauses evaluate
special boolean::special boolean
boolean formulae::boolean formulae
call cnf::call cnf
general boolean::general boolean
assignment assigns::assignment assigns
assigning values::assigning values
assign values::assign values
formula satisfied::formula satisfied
sat stands::sat stands
prover give::prover give
input formula::input formula
satisfying assignment::satisfying assignment
special problem::special problem
steven cook::steven cook
person steven::person steven
important theorems::important theorems
includes factor::includes factor
class empty::class empty
proved statements::proved statements
algorithm implies::algorithm implies
efficient solution::efficient solution
hardest problems::hardest problems
hand proving::hand proving
bit simpler::bit simpler
sat supposing::sat supposing
small subset::small subset
output find::output find
subset find::subset find
largest subset::largest subset
largest clique::largest clique
identify problems::identify problems
first find::first find
clique size::clique size
design algorithm::design algorithm
largest cliques::largest cliques
cliques size::cliques size
clique problem::clique problem
quick recap::quick recap
defined problem::defined problem
formula satisfiable::formula satisfiable
value true::value true
problem sat::problem sat
words satisfiability::words satisfiability
solve sat::solve sat
state cook::state cook
complete problems::complete problems
define problem::define problem
problem clique::problem clique
state input::state input
black box::black box
algorithm clique::algorithm clique
routine feed::routine feed
literal clause::literal clause
literal pair::literal pair
literal appears::literal appears
end parts::end parts
clique remember::clique remember
literal belongs::literal belongs
vertices edge::vertices edge
edges flow::edges flow
quickly sort::quickly sort
satisfying assignments::satisfying assignments
vertices set::vertices set
instance sat::instance sat
set decision::set decision
set problem::set problem
graph find::graph find
problem independent::problem independent
vertices form::vertices form
form independent::form independent
step assuming::step assuming
dependent set::dependent set
independent sub::independent sub
graph feed::graph feed
set sub::set sub
vertex cover::vertex cover
computer network::computer network
nodes pick::nodes pick
vertex covers::vertex covers
minimum size::minimum size
version remember::version remember
extra positive::extra positive
cover input::cover input
minimum vertex::minimum vertex
find vertex::find vertex
adding vertices::adding vertices
large vertex::large vertex
usual game::usual game
subset subset::subset subset
edge checks::edge checks
chosen clique::chosen clique
chosen satisfiability::chosen satisfiability
right sort::right sort
set supposing::set supposing
form edges::form edges
assumed remember::assumed remember
out cook::out cook
sat sat::sat sat
restricted form::restricted form
maximum vertex::maximum vertex
vertex degree::vertex degree
additional constraint::additional constraint
max degree::max degree
maximum degree::maximum degree
hard problem::hard problem
problem turns::problem turns
cover problem::cover problem
problem vertex::problem vertex
cover thing::cover thing
guess vertex::guess vertex
previous construction::previous construction
easy supposing::easy supposing
vertex degrees::vertex degrees
degree greater::degree greater
main trick::main trick
degree reduction::degree reduction
decreased vertex::decreased vertex
rough idea::rough idea
final graph::final graph
cover size::cover size
cover remain::cover remain
cover remove::cover remove
cover remains::cover remains
case case::case case
split vertex::split vertex
cover rises::cover rises
initial graph::initial graph
graph start::graph start
start splitting::start splitting
vishwanathan computer::vishwanathan computer
varying degrees::varying degrees
large vertices::large vertices
large degree::large degree
split operation::split operation
splitting vertices::splitting vertices
thing runs::thing runs
maximum times::maximum times
split occurs::split occurs
graph right::graph right
edges right::edges right
results size::results size
ways supposing::ways supposing
algorithm worked::algorithm worked
worked out::worked out
exact cover::exact cover
sub collection::sub collection
null set::null set
sub sets::sub sets
covers set::covers set
problem exact::problem exact
prover tells::prover tells
verifier takes::verifier takes
blind thing::blind thing
natural sort::natural sort
correspondence right::correspondence right
picking vertices::picking vertices
cover edges::cover edges
edges corresponds::edges corresponds
picking subsets::picking subsets
covering edges::covering edges
sub set::sub set
fixed easily::fixed easily
extra elements::extra elements
trick force::trick force
edges sum::edges sum
exercise remember::exercise remember
distinct subsets::distinct subsets
typical set::typical set
edges adjacent::edges adjacent
adjacent incident::adjacent incident
cover consist::cover consist
point choose::point choose
smaller end::smaller end
point supposing::point supposing
collection edge::collection edge
empty subsets::empty subsets
non empty::non empty
subsets times::subsets times
large right::large right
polynomial type::polynomial type
extra cover::extra cover
first show::first show
installment design::installment design
subset sum::subset sum
size right::size right
subset sums::subset sums
sizes verifies::sizes verifies
algorithm construct::algorithm construct
cover frame::cover frame
frame model::frame model
model construct::model construct
convert input::convert input
pick subsets::pick subsets
cover elements::cover elements
sum input::sum input
subsets sum::subsets sum
input right::input right
side corresponds::side corresponds
small switch::small switch
multi set::multi set
set multi::set multi
element occurs::element occurs
assign sizes::assign sizes
give sizes::give sizes
dot dot::dot dot
general generality::general generality
element case::element case
case supposing::case supposing
good bound::good bound
exit exist::exit exist
size capital::size capital
straightforward generalization::straightforward generalization
set cover::set cover
elements right::elements right
collection good::collection good
fix sizes::fix sizes
size sum::size sum
first fixing::first fixing
fixing sizes::fixing sizes
fix size::fix size
cover supposing::cover supposing
sum sum::sum sum
reverse direction::reverse direction
direction pick::direction pick
set sum::set sum
small calculation::small calculation
fairly easily::fairly easily
reasonable values::reasonable values
belongs right::belongs right
first partition::first partition
equals sum::equals sum
solve subset::solve subset
parts supposing::parts supposing
sum problem::sum problem
partition right::partition right
problem put::problem put
set set::set set
land land::land land
formal proof::formal proof
cook told::cook told
direct sort::direct sort
independence set::independence set
smallest supposing::smallest supposing
solve partition::solve partition
original set::original set
boss gave::boss gave
complete design::complete design
approximation algorithms::approximation algorithms
np complete::np- complete
complete problem::complete problem
life situation::life situation
problems arise::problems arise
finding fast::finding fast
fast approximation::fast approximation
devising algorithms::devising algorithms
life application::life application
life problem::life problem
additional features::additional features
special cases::special cases
special features::special features
normal definition::normal definition
unary number::unary number
unary representation::unary representation
representation system::representation system
bit difference::bit difference
binary representation::binary representation
integer capacity::integer capacity
description applies::description applies
weight value::weight value
bit string::bit string
bits long::bits long
bit binary::bit binary
binary number::binary number
constant power::constant power
worth noting::worth noting
out lots::out lots
algorithms run::algorithms run
discover algorithms::discover algorithms
solving problems::solving problems
good heuristic::good heuristic
last idea::last idea
problem takes::problem takes
life problems::life problems
problems tend::problems tend
today computers::today computers
device algorithms::device algorithms
optimal solutions::optimal solutions
approximation ratio::approximation ratio
approximation factor::approximation factor
describe approximation::describe approximation
metric traveling::metric traveling
traveling salesman::traveling salesman
precedence constrained::precedence constrained
function subject::function subject
minimization first::minimization first
solution found::solution found
function cost::function cost
function value::function value
value suppose::value suppose
technical reasons::technical reasons
ratio rho::ratio rho
natural definition::natural definition
cost found::cost found
rho sub::rho sub
case ratio::case ratio
design approximation::design approximation
define rho::define rho
turn out::turn out
approximation algorithm::approximation algorithm
metric tsp::metric tsp
problem first::problem first
additional structure::additional structure
final thing::final thing
triangle inequality::triangle inequality
inequality constraint::inequality constraint
straight distance::straight distance
indirect distance::indirect distance
metric problem::metric problem
euclidean plane::euclidean plane
euclidean distance::euclidean distance
shorter distances::shorter distances
metric property::metric property
properties mentioned::properties mentioned
graph passing::graph passing
tour length::tour length
special instance::special instance
special restrictions::special restrictions
restrictions tsp::restrictions tsp
tsp remains::tsp remains
scheme appears::scheme appears
length opt::length opt
optimal tour::optimal tour
easily computable::easily computable
minimum weight::minimum weight
weight spanning::weight spanning
spanning tree::spanning tree
weight matrix::weight matrix
spanning path::spanning path
case weight::case weight
synonymously weight::synonymously weight
dfs traversal::dfs traversal
traversal depth::traversal depth
sequences return::sequences return
red edges::red edges
first appearance::first appearance
direct edge::direct edge
perfectly understandable::perfectly understandable
vertex appears::vertex appears
short circuit::short circuit
short cut::short cut
original tour::original tour
prims algorithm::prims algorithm
depth first::depth first
fairly straightforward::fairly straightforward
good tour::good tour
important claim::important claim
main part::main part
previous vertex::previous vertex
side essentially::side essentially
straight path::straight path
cross path::cross path
vertex appeared::vertex appeared
final issue::final issue
nice simple::nice simple
simple observation::simple observation
last appearance::last appearance
graph search::graph search
post order::post order
order traversal::order traversal
precedence constraint::precedence constraint
constraint scheduling::constraint scheduling
acyclic graph::acyclic graph
represent unit::represent unit
arc directed::arc directed
first lower::first lower
longest paths::longest paths
vertex length::vertex length
precedence constraints::precedence constraints
ready vertex::ready vertex
scheduling algorithm::scheduling algorithm
procedure sched::procedure sched
entire graph::entire graph
ready vertices::ready vertices
selected vertex::selected vertex
topological sort::topological sort
correct schedule::correct schedule
graph induced::graph induced
unscheduled vertices::unscheduled vertices
bound decreases::bound decreases
predecessors whatsoever::predecessors whatsoever
vertices suppose::vertices suppose
hand schedules::hand schedules
paths starting::paths starting
initial lower::initial lower
first bound::first bound
bound drops::bound drops
last iteration::last iteration
negative starting::negative starting
times opt::times opt
devising approximation::devising approximation
good solutions::good solutions
designing approximation::designing approximation
studied today::studied today
upper bounds::upper bounds
easily identifiable::easily identifiable
quickly today::quickly today
complete optimization::complete optimization
give optimal::give optimal
cost minimization::cost minimization
minimization problem::minimization problem
call opt::call opt
optimal algorithm::optimal algorithm
general framework::general framework
devise algorithms::devise algorithms
small approximation::small approximation
center problem::center problem
life examples::life examples
strategies earlier::strategies earlier
strategies procedure::strategies procedure
interesting proof::interesting proof
proof strategy::proof strategy
algorithm running::algorithm running
denote union::denote union
entire collection::entire collection
small collection::small collection
original connection::original connection
additional target::additional target
sets allowed::sets allowed
simple reduction::simple reduction
small application::small application
villages suppose::villages suppose
natural problem::natural problem
build hospitals::build hospitals
picking sets::picking sets
answer eventually::answer eventually
initially uncovered::initially uncovered
basic loop::basic loop
uncovered elements::uncovered elements
elements exist::elements exist
prime union::prime union
recover elements::recover elements
ground set::ground set
pick sets::pick sets
covering elements::covering elements
cover maximum::cover maximum
maximum elements::maximum elements
basic algorithm::basic algorithm
sets needed::sets needed
simple claim::simple claim
proof work::proof work
opt sets::opt sets
opt elements::opt elements
set covering::set covering
set covered::set covered
greedy property::greedy property
elements remaining::elements remaining
iteration minus::iteration minus
minutes ago::minutes ago
sets returned::sets returned
opt times::opt times
prime elements::prime elements
return opt::return opt
factor worse::factor worse
return cardinality::return cardinality
algorithm run::algorithm run
power minus::power minus
left uncovered::left uncovered
equals opt::equals opt
words cardinality::words cardinality
cover algorithm::cover algorithm
informally first::informally first
region consists::region consists
interesting statistically::interesting statistically
entire distribution::entire distribution
important thing::important thing
farthest element::farthest element
farthest distance::farthest distance
cluster centers::cluster centers
finding representatives::finding representatives
bit hard::bit hard
largest radius::largest radius
clustering problem::clustering problem
input parameter::input parameter
clusters desired::clusters desired
good notion::good notion
coordinate differences::coordinate differences
point sets::point sets
general arbitrary::general arbitrary
arbitrary point::arbitrary point
pay attention::pay attention
closest center::closest center
closest centers::closest centers
closest distance::closest distance
point belongs::point belongs
clustering algorithm::clustering algorithm
first center::first center
interesting greedy::interesting greedy
farthest point::farthest point
simple idea::simple idea
1th point::1th point
clustering radius::clustering radius
1th clustering::1th clustering
important facts::important facts
clustering change::clustering change
optimal strategy::optimal strategy
centers selected::centers selected
center selected::center selected
optimal clusters::optimal clusters
natural guesses::natural guesses
optimal cluster::optimal cluster
algorithm selects::algorithm selects
centers picked::centers picked
analyze case::analyze case
algorithm happen::algorithm happen
choose center::choose center
pick point::pick point
max radius::max radius
optimal clustering::optimal clustering
sub opt::sub opt
wanted surprising::wanted surprising
final clustering::final clustering
fact established::fact established
clustering produces::clustering produces
produces clusters::produces clusters
radius produced::radius produced
final radius::final radius
optimal radius::optimal radius
single optimal::single optimal
produces clustering::produces clustering
times radius::times radius
main theorem::main theorem
entire exercise::entire exercise
euclidean property::euclidean property
euclidean distances::euclidean distances
metric properties::metric properties
facility location::facility location
location problem::location problem
important problem::important problem
crew scheduling::crew scheduling
fair number::fair number
short review::short review
factor approximation::factor approximation
metric clustering::metric clustering
interesting kind::interesting kind
fast clustering::fast clustering
clustering algorithms::clustering algorithms
accurately cluster::accurately cluster
approximate clustering::approximate clustering
wide range::wide range
approximation schemes::approximation schemes
study today::study today
approximation scheme::approximation scheme
scheme abbreviated::scheme abbreviated
conditions hold::conditions hold
problem answer::problem answer
number epsilon::number epsilon
ratio one1::ratio one1
polynomial approximation::polynomial approximation
reduce epsilon::reduce epsilon
increase polynomial::increase polynomial
studied earlier::studied earlier
cube times::cube times
nth item::nth item
weight capacity::weight capacity
valuable subset::valuable subset
problem earlier::problem earlier
exact algorithm::exact algorithm
good approximate::good approximate
approximate answers::approximate answers
pseudo polynomial::pseudo polynomial
exact instance::exact instance
approximated instance::approximated instance
answers fast::answers fast
programming formulation::programming formulation
knapsack capacity::knapsack capacity
fixed capacity::fixed capacity
individual question::individual question
lightest knapsack::lightest knapsack
smallest capacity::smallest capacity
capacity knapsack::capacity knapsack
capacity needed::capacity needed
complementary question::complementary question
fixed value::fixed value
non decreasing::non decreasing
decreasing sequence::decreasing sequence
size required::size required
single question::single question
target value::target value
target total::target total
knapsack size::knapsack size
include item::include item
space idea::space idea
big instance::big instance
knapsack capacities::knapsack capacities
feasible solutions::feasible solutions
lightest capacity::lightest capacity
capacity set::capacity set
lightest weight::lightest weight
weight set::weight set
lightest set::lightest set
smaller weight::smaller weight
lightest solution::lightest solution
original dynamic::original dynamic
smaller value::smaller value
add item::add item
instance add::instance add
slight catch::slight catch
explicit check::explicit check
first solution::first solution
capacity solution::capacity solution
first expression::first expression
subscripted expressions::subscripted expressions
general case::general case
general expression::general expression
value required::value required
value require::value require
weight solution::weight solution
solution value::solution value
entire term::entire term
defining recurrence::defining recurrence
recurrence means::recurrence means
specific entries::specific entries
column vth::column vth
vth row::vth row
row vth::row vth
vth column::vth column
entry filled::entry filled
bottom right::bottom right
entries filled::entries filled
minimum capacity::minimum capacity
smaller knapsack::smaller knapsack
entire yellow::entire yellow
yellow column::yellow column
pick item::pick item
single item::single item
value larger::value larger
capacity infinite::capacity infinite
nice thing::nice thing
nice coding::nice coding
yellow entries::yellow entries
blue entries::blue entries
blue entry::blue entry
older algorithm::older algorithm
additional pointer::additional pointer
additional data::additional data
nested loops::nested loops
first task::first task
approximate algorithm::approximate algorithm
low precision::low precision
approximate case::approximate case
case approximate::case approximate
approximate knapsack::approximate knapsack
factor delta::factor delta
return delta::return delta
delta times::delta times
good solution::good solution
set returned::set returned
actual values::actual values
optimal set::optimal set
actual optimal::actual optimal
optimal value::optimal value
full precision::full precision
precision problem::precision problem
precision answer::precision answer
difference set::difference set
acceptable solution::acceptable solution
feasible solution::feasible solution
prime problem::prime problem
number minus::number minus
delta minus::delta minus
aks returns::aks returns
value correct::value correct
cancelled out::cancelled out
minus delta::minus delta
constant delta::constant delta
minus cardinality::minus cardinality
times delta::times delta
value returned::value returned
actual value::actual value
value minus::value minus
returned value::returned value
approximate solution::approximate solution
solution remember::solution remember
equality inequalities::equality inequalities
exact evaluation::exact evaluation
choose delta::choose delta
delta carefully::delta carefully
clever choice::clever choice
epsilon times::epsilon times
substitute delta::substitute delta
max times::max times
max denotes::max denotes
maximum item::maximum item
largest item::largest item
instance length::instance length
practical situations::practical situations
sense knapsack::sense knapsack
knapsack problems::knapsack problems
fptas result::fptas result
subset sub::subset sub
design::design
analysis::analysis
algorithms::algorithms
prof::prof
abhiram::abhiram
ranade::ranade
computer::computer
science::science
engineering::engineering
department::department
indian::indian
institute::institute
technology::technology
bombay::bombay
lecture::lecture
overview::overview
today::today
introduce::introduce
main::main
problems::problems
give::give
convey::convey
spirit::spirit
start::start
fundamental::fundamental
question::question
problem::problem
solve::solve
easy::easy
cleverness::cleverness
needed::needed
designing::designing
fast::fast
answers::answers
quickly::quickly
major::major
challenge::challenge
goal::goal
realize::realize
computers::computers
cars::cars
clothes::clothes
art::art
sense::sense
creative::creative
taught::taught
defined::defined
techniques::techniques
evolved::evolved
purpose::purpose
study::study
lots::lots
exercises::exercises
apply::apply
ideas::ideas
hope::hope
end::end
algorithm::algorithm
encounter::encounter
life::life
prerequisites::prerequisites
state::state
familiar::familiar
programming::programming
done::done
amount::amount
common::common
language::language
scheme::scheme
basic::basic
data::data
structures::structures
discrete::discrete
mathematics::mathematics
background::background
elementary::elementary
approach::approach
analytical::analytical
build::build
model::model
mathematical::mathematical
properties::properties
point::point
reason::reason
important::important
mathematically::mathematically
prove::prove
emphasis::emphasis
proof::proof
speed::speed
facts::facts
number::number
things::things
lectures::lectures
develop::develop
framework::framework
define::define
means::means
embark::embark
fairly::fairly
long::long
stretch::stretch
involves::involves
doing::doing
surveying::surveying
optimization::optimization
graph::graph
theory::theory
geometry::geometry
turn::turn
out::out
respond::respond
god::god
work::work
beautifully::beautifully
intricate::intricate
developed::developed
last::last
year::year
years::years
completeness::completeness
studying::studying
topic::topic
formal::formal
simple::simple
trouble::trouble
understanding::understanding
right::right
numbers::numbers
find::find
greatest::greatest
divisor::divisor
understands::understands
learnt::learnt
school::school
first::first
standard::standard
fourth::fourth
simplifying::simplifying
fractions::fractions
earliest::earliest
invented::invented
mathematician::mathematician
euclid::euclid
plane::plane
invent::invent
intuitively::intuitively
understand::understand
faster::faster
level::level
talking::talking
clever::clever
makes::makes
exciting::exciting
begin::begin
factoring::factoring
basically::basically
steps::steps
write::write
input::input
integers::integers
largest::largest
integer::integer
divides::divides
leaving::leaving
reminder::reminder
step::step
factorize::factorize
finding::finding
primes::primes
call::call
times::times
break::break
factors::factors
note::note
factor::factor
separately::separately
identify::identify
multiply::multiply
return::return
result::result
minute::minute
procedure::procedure
arguments::arguments
pseudo::pseudo
picky::picky
clear::clear
perfect::perfect
express::express
suitable::suitable
nicest::nicest
syntax::syntax
meaning::meaning
detail::detail
check::check
divide::divide
calculate::calculate
remainder::remainder
mod::mod
set::set
equals::equals
inside::inside
loop::loop
eventually::eventually
terminate::terminate
terminates::terminates
value::value
fact::fact
works::works
divisions::divisions
taking::taking
remainders::remainders
factorizing::factorizing
divisors::divisors
examples::examples
small::small
equal::equal
product::product
prime::prime
idea::idea
test::test
2.so::2.so
remains::remains
factorized::factorized
thing::thing
leaves::leaves
terribly::terribly
difficult::difficult
stuff::stuff
contrast::contrast
bring::bring
back::back
doe::doe
enter::enter
words::words
takes::takes
originally::originally
iteration::iteration
ended::ended
left::left
answer::answer
exit::exit
current::current
returning::returning
compare::compare
roughly::roughly
factorizations::factorizations
collect::collect
hand::hand
division::division
divided::divided
checked::checked
found::found
false::false
simply::simply
exchanged::exchanged
summarize::summarize
calculated::calculated
quick::quick
immediately::immediately
sophisticated::sophisticated
proved::proved
correct::correct
show::show
correctly::correctly
large::large
happen::happen
suppose::suppose
written::written
compute::compute
exchange::exchange
values::values
started::started
order::order
repeat::repeat
began::began
beginning::beginning
matter::matter
setting::setting
execute::execute
exited::exited
returned::returned
happened::happened
iterations::iterations
summary::summary
quitting::quitting
essentially::essentially
complicated::complicated
glance::glance
require::require
checking::checking
dividing::dividing
involve::involve
substantially::substantially
bigger::bigger
harder::harder
lot::lot
case::case
smaller::smaller
argue::argue
divisibility::divisibility
leave::leave
exercise::exercise
mention::mention
manner::manner
substitute::substitute
similar::similar
part::part
checks::checks
calculates::calculates
term::term
sets::sets
argument::argument
precisely::precisely
correctness::correctness
partially::partially
accomplished::accomplished
maintain::maintain
original::original
invariant::invariant
specific::specific
change::change
executes::executes
preserve::preserve
established::established
curiously::curiously
continues::continues
remain::remain
notice::notice
straight::straight
forward::forward
examine::examine
executing::executing
initially::initially
calculating::calculating
changed::changed
continuously::continuously
decrease::decrease
decreasing::decreasing
positive::positive
conclude::conclude
exits::exits
proves::proves
runs::runs
assume::assume
cost::cost
wrote::wrote
make::make
internally::internally
exchanging::exchanging
spent::spent
good::good
execution::execution
analyzing::analyzing
adds::adds
assumption::assumption
calls::calls
kind::kind
wills::wills
distinction::distinction
variables::variables
sum::sum
halves::halves
stay::stay
implication::implication
theorem::theorem
establishes::establishes
drop::drop
log::log
base::base
put::put
upper::upper
bound::bound
estimate::estimate
process::process
drops::drops
rime::rime
ratio::ratio
terms::terms
computes::computes
addition::addition
concerns::concerns
strictly::strictly
dividend::dividend
wanted::wanted
align::align
algebra::algebra
add::add
inequality::inequality
adjust::adjust
shown::shown
showed::showed
reduced::reduced
two-thirds::two-thirds
concludes::concludes
highlight::highlight
points::points
difference::difference
definition::definition
interesting::interesting
deeper::deeper
quantities::quantities
computing::computing
helps::helps
counting::counting
rest::rest
precise::precise
details::details
cover::cover
subsequent::subsequent
marks::marks
solving::solving
kinds::kinds
plain::plain
evaluate::evaluate
sound::sound
bases::bases
designed::designed
comparing::comparing
primarily::primarily
resources::resources
varying::varying
amounts::amounts
memory::memory
discuss::discuss
formally::formally
requirements::requirements
programs::programs
related::related
bit::bit
mentally::mentally
involved::involved
real::real
imagine::imagine
questions::questions
naturally::naturally
assign::assign
operations::operations
comprised::comprised
required::required
operation::operation
perform::perform
giving::giving
extremely::extremely
general::general
depend::depend
models::models
relate::relate
conclusions::conclusions
care::care
relevant::relevant
answered::answered
nicely::nicely
finish::finish
development::development
talk::talk
discussing::discussing
semi::semi
present::present
strategy::strategy
finally::finally
discussion::discussion
limitations::limitations
draw::draw
alternate::alternate
gist::gist
day::day
scientific::scientific
fix::fix
meanings::meanings
confuse::confuse
fallacies::fallacies
motivate::motivate
gcd::gcd
two::two
shortest::shortest
path::path
map::map
word::word
dictionary::dictionary
x-ray::x-ray
determine::determine
disease::disease
typically::typically
supplied::supplied
output::output
generated::generated
consists::consists
city::city
mumbai::mumbai
aurangabad::aurangabad
supply::supply
western::western
india::india
automobile::automobile
association::association
evolution::evolution
oxford::oxford
actual::actual
ray::ray
picture::picture
specification::specification
valid::valid
inputs::inputs
constitute::constitute
acceptable::acceptable
outputs::outputs
looked::looked
earlier::earlier
names::names
cities::cities
constitutes::constitutes
description::description
phrase::phrase
instance::instance
size::size
necessarily::necessarily
stick::stick
bits::bits
represent::represent
clarify::clarify
36x::36x
place::place
represented::represented
binary::binary
length::length
concerned::concerned
ways::ways
representation::representation
thought::thought
matrix::matrix
array::array
maps::maps
inconvenient::inconvenient
directives::directives
settle::settle
informal::informal
informally::informally
parameter::parameter
grows::grows
official::official
growth::growth
predicable::predicable
notion::notion
making::making
analyzed::analyzed
interested::interested
expect::expect
increase::increase
natural::natural
fair::fair
potentially::potentially
roads::roads
road::road
short::short
great::great
comparison::comparison
indication::indication
convert::convert
resolution::resolution
million::million
denote::denote
hear::hear
directly::directly
commonly::commonly
literature::literature
abstract::abstract
computational::computational
produces::produces
expressed::expressed
program::program
expression::expression
rise::rise
languages::languages
concrete::concrete
eve::eve
ocean::ocean
rigid::rigid
strict::strict
rules::rules
worrying::worrying
happy::happy
human::human
beings::beings
worry::worry
describe::describe
progresses::progresses
abbreviate::abbreviate
descriptions::descriptions
met::met
describing::describing
mind::mind
machine::machine
analyze::analyze
issues::issues
ram::ram
stands::stands
random::random
access::access
simplified::simplified
parts::parts
processor::processor
correction::correction
locations::locations
convenient::convenient
minus::minus
location::location
address::address
assigning::assigning
writing::writing
pleasant::pleasant
addressed::addressed
variable::variable
contained::contained
stored::stored
fifty::fifty
variety::variety
types::types
arrays::arrays
sort::sort
primitive::primitive
course::course,
trees::trees
lists::lists
built::built
store::store
separate::separate
mix::mix
instruction::instruction
instructions::instructions
simplicity::simplicity
four::four
groups::groups
group::group
arithmetic::arithmetic
logical::logical
allowed::allowed
contents::contents
deposit::deposit
friendly::friendly
operands::operands
conditions::conditions
jumps::jumps
conditional::conditional
correspondingly::correspondingly
greater::greater
defining::defining
wondering::wondering
stage::stage
comment::comment
suggest::suggest
recommend::recommend
intended::intended
read::read
structured::structured
presenting::presenting
nice::nice
readable::readable
machines::machines
mechanism::mechanism
cycles::cycles
pointer::pointer
form::form
star::star
style::style
notation::notation
fetch::fetch
based::based
pointers::pointers
executed::executed
single::single
algorithmic::algorithmic
actions::actions
mixes::mixes
treat::treat
consistent::consistent
dimensional::dimensional
declared::declared
usual::usual
contiguous::contiguous
similarly::similarly
structure::structure
components::components
coming::coming
described::described
told::told
collection::collection
fixed::fixed
modern::modern
complex::complex
statements::statements
statement::statement
rule::rule
count::count
expressions::expressions
element::element
translated::translated
computed::computed
entire::entire
multi::multi
decide::decide
top::top
rows::rows
columns::columns
stores::stores
elements::elements
row::row
indexed::indexed
index::index
column::column
simulate::simulate
wise::wise
possibilities::possibilities
picking::picking
accessing::accessing
remember::remember
correspondence::correspondence
corresponds::corresponds
reading::reading
accounting::accounting
thinking::thinking
estimating::estimating
subtraction::subtraction
subtract::subtract
multiplication::multiplication
indirect::indirect
axis::axis
translate::translate
constructions::constructions
translation::translation
initializing::initializing
initialization::initialization
fetching::fetching
discussed::discussed
jump::jump
code::code
interest::interest
body::body
total::total
extra::extra
final::final
big::big
letters::letters
functions::functions
function::function
passed::passed
pretty::pretty
reference::reference
modify::modify
modifications::modifications
calling::calling
relates::relates
reality::reality
complete::complete
features::features
institution::institution
developing::developing
remind::remind
implicitly::implicitly
understood::understood
consisted::consisted
include::include
performing::performing
operator::operator
control::control
transfer::transfer
cycle::cycle
outline::outline
compilers::compilers
sake::sake
differs::differs
unlike::unlike
architecture::architecture
cache::cache
heard::heard
advertisements::advertisements
registers::registers
register::register
tricky::tricky
complication::complication
arises::arises
days::days
pipelining::pipelining
simultaneously::simultaneously
stages::stages
superscalar::superscalar
scope::scope
extent::extent
complications::complications
memories::memories
system::system
copying::copying
computation::computation
illustrate::illustrate
drive::drive
home::home
load::load
added::added
stress::stress
deal::deal
move::move
idealized::idealized
differences::differences
intelligent::intelligent
lines::lines
translator::translator
operate::operate
extract::extract
fragment::fragment
loaded::loaded
temp::temp
compilation::compilation
minded::minded
changing::changing
noticed::noticed
high::high
sequence::sequence
depending::depending
compiler::compiler
intelligence::intelligence
modified::modified
capabilities::capabilities
surprise::surprise
applies::applies
careful::careful
application::application
measure::measure
maximum::maximum
crucial::crucial
sub::sub
noted::noted
instances::instances
sorting::sorting
principle::principle
earth::earth
goodness::goodness
evaluating::evaluating
job::job
carefully::carefully
remarks::remarks
remark::remark
conservative::conservative
significant::significant
worst::worst
average::average
reasonable::reasonable
averaging::averaging
turns::turns
enumerate::enumerate
probability::probability
introduces::introduces
complexity::complexity
solid::solid
guarantee::guarantee
pointed::pointed
rams::rams
correspond::correspond
vice::vice
versa::versa
consequence::consequence
computations::computations
functional::functional
linear::linear
quadratic::quadratic
square::square
cubic::cubic
shape::shape
independent::independent
run::run
characterizing::characterizing
pick::pick
depends::depends
exact::exact
bounds::bounds
lower::lower
match::match
live::live
incomplete::incomplete
bridging::bridging
subject::subject
research::research
customary::customary
estimates::estimates
larger::larger
worse::worse
constants::constants
1000x::1000x
justified::justified
bad::bad
matrices::matrices
summation::summation
loops::loops
entry::entry
dimension::dimension
close::close
typical::typical
chosen::chosen
concluded::concluded
knowing::knowing
feel::feel
painful::painful
completely::completely
paying::paying
attention::attention
accesses::accesses
totally::totally
forget::forget
outer::outer
reverse::reverse
additional::additional
portion::portion
comprises::comprises
assignment::assignment
formula::formula
requires::requires
plug::plug
squared::squared
cube::cube
made::made
mistake::mistake
individual::individual
storing::storing
position::position
recalculate::recalculate
conclusion::conclusion
exactness::exactness
restrict::restrict
sounds::sounds
qualitative::qualitative
weak::weak
justify::justify
claim::claim
constant::constant
strong::strong
pentium::pentium
architectures::architectures
cubical::cubical
methodology::methodology
simpler::simpler
median::median
appears::appears
middle::middle
utmost::utmost
successive::successive
satisfies::satisfies
initialize::initialize
increment::increment
ends::ends
lesser::lesser
matches::matches
abbreviated::abbreviated
focus::focus
fewer::fewer
early::early
business::business
finishes::finishes
figure::figure
condition::condition
situation::situation
distinct::distinct
importance::importance
asymptotic::asymptotic
context::context
goals::goals
results::results
applicable::applicable
interpret::interpret
predict::predict
imprecise::imprecise
throw::throw
detailed::detailed
arrived::arrived
interpretation::interpretation
rough::rough
class::class
classes::classes
systematic::systematic
speak::speak
classify::classify
refers::refers
classifying::classifying
behavior::behavior
putting::putting
belong::belong
multipliers::multipliers
multiplier::multiplier
ignore::ignore
desire::desire
versus::versus
property::property
feature::feature
theta::theta
capital::capital
omega::omega
series::series
non-negative::non-negative
non::non
negative::negative
resource::resource
occasion::occasion
exists::exists
naught::naught
true::true
requirement::requirement
bothered::bothered
worried::worried
sandwiched::sandwiched
plot::plot
occupies::occupies
region::region
caring::caring
lie::lie
sandwich::sandwich
bracketed::bracketed
multiple::multiple
behaves::behaves
belongs::belongs
reassure::reassure
enable::enable
basis::basis
concluding::concluding
member::member
classed::classed
raise::raise
cubes::cubes
keeping::keeping
satisfy::satisfy
legitimately::legitimately
illustrates::illustrates
connotation::connotation
polynomial::polynomial
funny::funny
holds::holds
fully::fully
increases::increases
negligible::negligible
compared::compared
classification::classification
representative::representative
prototypical::prototypical
ignoring::ignoring
slower::slower
dominate::dominate
exhibit::exhibit
task::task
conversant::conversant
slightly::slightly
power::power
degree::degree
difficulty::difficulty
message::message
determinate::determinate
belonging::belonging
verify::verify
returns::returns
understandable::understandable
previous::previous
surprising::surprising
nicer::nicer
intuition::intuition
badly::badly
abused::abused
tradition::tradition
equality::equality
inclusion::inclusion
english::english
rose::rose
red::red
verb::verb
guess::guess
poetic::poetic
unbound::unbound
emphasize::emphasize
satisfying::satisfying
minor::minor
perturbations::perturbations
definitions::definitions
exist::exist
refresh::refresh
relaxes::relaxes
bounded::bounded
argued::argued
imply::imply
establishing::establishing
unknown::unknown
expressing::expressing
knowledge::knowledge
guessed::guessed
union::union
intersection::intersection
logic::logic
cares::cares
surprised::surprised
serves::serves
dominated::dominated
courses::courses
weaker::weaker
grow::grow
instructive::instructive
puts::puts
implies::implies
observe::observe
starts::starts
exceptional::exceptional
stated::stated
identical::identical
persuade::persuade
fibonacci::fibonacci
root::root
nth::nth
proving::proving
exponential::exponential
reasoning::reasoning
exponentially::exponentially
tighter::tighter
lack::lack
compact::compact
capture::capture
equivalent::equivalent
leading::leading
notations::notations
partial::partial
information::information
sunder::sunder
vishwanathan::vishwanathan
basics::basics
solutions::solutions
trivial::trivial
minimum::minimum
min::min
solution::solution
temporary::temporary
updated::updated
scan::scan
update::update
technique::technique
powerful::powerful
list::list
varies::varies
full::full
stray::stray
cases::cases
properly::properly
etcetera::etcetera
solves::solves
couple::couple
induction::induction
recursion::recursion
explain::explain
ordering::ordering
supposing::supposing
solved::solved
extend::extend
recurse::recurse
mother::mother
learn::learn
fancier::fancier
crux::crux
increasing::increasing
plays::plays
role::role
future::future
combination::combination
pertain::pertain
leads::leads
comparisons::comparisons
incrementing::incrementing
reaction::reaction
people::people
logically::logically
absolutely::absolutely
easily::easily
assuming::assuming
sixth::sixth
odd::odd
ceiling::ceiling
candidates::candidates
rid::rid
previously::previously
equally::equally
whichever::whichever
candidate::candidate
longer::longer
hang::hang
wavy::wavy
rigorous::rigorous
nodes::nodes
vertices::vertices
circle::circle
edge::edge
drawing::drawing
edges::edges
connected::connected
component::component
surely::surely
global::global
finished::finished
slight::slight
variation::variation
max::max
impossible::impossible
maintaining::maintaining
repeated::repeated
roll::roll
aim::aim
unnecessary::unnecessary
trick::trick
minimums::minimums
side::side
bother::bother
applied::applied
recursively::recursively
worth::worth
half::half
maximums::maximums
explanation::explanation
essence::essence
fill::fill
procedures::procedures
recursive::recursive
maxs::maxs
floor::floor
recurrence::recurrence
easiest::easiest
open::open
pattern::pattern
1plus::1plus
geometric::geometric
method::method
mechanically::mechanically
improved::improved
drastically::drastically
conquer::conquer
british::british
century::century
sizes::sizes
blindly::blindly
smallest::smallest
paradigm::paradigm
paths::paths
loss::loss
generality::generality
thrown::thrown
lost::lost
suffices::suffices
equations::equations
asked::asked
behave::behave
differently::differently
gave::gave
unfold::unfold
recurrent::recurrent
avail::avail
happening::happening
bottoms::bottoms
reach::reach
pushed::pushed
mins::mins
tree::tree
levels::levels
portions::portions
sits::sits
wins::wins
finds::finds
traverse::traverse
node::node
leaf::leaf
resided::resided
observation::observation
win::win
follow::follow
front::front
optimum::optimum
shows::shows
hard::hard
smart::smart
viswanathan::viswanathan
generate::generate
indices::indices
vary::vary
discard::discard
considered::considered
pays::pays
breaking::breaking
unequal::unequal
pieces::pieces
encourage::encourage
principles::principles
simplest::simplest
cluttered::cluttered
practice::practice
search::search
identified::identified
sorted::sorted
insert::insert
space::space
onwards::onwards
insertion::insertion
dealt::dealt
faced::faced
mains::mains
movement::movement
shift::shift
units::units
expansive::expansive
implemented::implemented
avoid::avoid
paradigms::paradigms
play::play
piece::piece
sweat::sweat
implement::implement
entail::entail
ready::ready
leisure::leisure
entails::entails
combine::combine
merging::merging
ascending::ascending
occur::occur
occupy::occupy
places::places
pointing::pointing
generic::generic
filling::filling
create::create
merge::merge
scribble::scribble
paper::paper
sequences::sequences
moving::moving
quantity::quantity
floors::floors
ceilings::ceilings
ease::ease
calculation::calculation
figuring::figuring
filled::filled
vociferous::vociferous
shaded::shaded
removed::removed
iteratively::iteratively
decreases::decreases
remove::remove
unroll::unroll
iterative::iterative
replaced::replaced
continue::continue
choose::choose
studied::studied
rearranging::rearranging
picked::picked
arbitrarily::arbitrarily
landing::landing
sorts::sorts
split::split
pivot::pivot
xome::xome
spend::spend
rank::rank
recall::recall
partition::partition
fits::fits
wrong::wrong
center::center
expand::expand
falls::falls
falling::falling
rising::rising
manage::manage
pivots::pivots
asks::asks
implementation::implementation
efficiently::efficiently
provided::provided
desirable::desirable
proportionally::proportionally
higher::higher
situations::situations
recurrences::recurrences
beauty::beauty
worked::worked
recursed::recursed
crucially::crucially
ball::ball
rolling::rolling
objective::objective
wall::wall
approximate::approximate
medians::medians
sit::sit
lose::lose
partitioning::partitioning
shrunk::shrunk
pay::pay
encountered::encountered
special::special
easier::easier
tackle::tackle
undone::undone
approx::approx
relation::relation
medium::medium
recipe::recipe
recipes::recipes
dependent::dependent
light::light
bulb::bulb
consisting::consisting
pull::pull
convince::convince
arrange::arrange
descending::descending
bottom::bottom
upwards::upwards
divisible::divisible
lay::lay
fashion::fashion
20th::20th
15th::15th
4th::4th
purposes::purposes
vague::vague
disjoint::disjoint
stare::stare
running::running
luckily::luckily
distance::distance
respect::respect
lies::lies
reasons::reasons
expectation::expectation
normal::normal
bubble::bubble
equation::equation
portioning::portioning
share::share
sheet::sheet
plugging::plugging
cancels::cancels
inductive::inductive
plan::plan
nose::nose
relations::relations
iii::iii
surfing::surfing
family::family
reordering::reordering
favorite::favorite
switch::switch
popular::popular
swap::swap
obvious::obvious
flowcharts::flowcharts
block::block
branch::branch
building::building
blocks::blocks
flow::flow
chart::chart
charts::charts
depicted::depicted
recurs::recurs
orders::orders
clue::clue
moved::moved
internal::internal
patience::patience
hit::hit
height::height
longest::longest
ingredients::ingredients
observations::observations
critical::critical
flowchart::flowchart
tall::tall
lead::lead
firstly::firstly
copies::copies
factorial::factorial
trace::trace
permutation::permutation
permutations::permutations
interchange::interchange
land::land
incorrect::incorrect
invoke::invoke
theorems::theorems
decision::decision
hypothesis::hypothesis
logs::logs
fit::fit
covered::covered
bucket::bucket
radix::radix
differ::differ
digit::digit
tiling::tiling
squares::squares
domino::domino
fills::fills
empty::empty
cross::cross
modulo::modulo
dominos::dominos
scene::scene
tile::tile
managed::managed
corner::corner
carry::carry
completion::completion
tiled::tiled
initial::initial
push::push
alike::alike
puzzles::puzzles
lesson::lesson
occasions::occasions
multiplying::multiplying
formed::formed
lsb::lsb
multiplications::multiplications
digits::digits
applying::applying
products::products
shifting::shifting
adding::adding
alternately::alternately
conquered::conquered
spending::spending
touched::touched
additions::additions
significantly::significantly
expanding::expanding
cancel::cancel
manipulations::manipulations
promised::promised
expensive::expensive
saved::saved
tackled::tackled
methods::methods
derive::derive
rack::rack
brain::brain
kick::kick
pleasure::pleasure
due::due
euler::euler
closest::closest
pair::pair
meanable::meanable
strategies::strategies
field::field
coordinates::coordinates
coordinate::coordinate
choosable::choosable
distances::distances
pairs::pairs
witness::witness
moral::moral
story::story
face::face
classic::classic
huge::huge
dot::dot
delta::delta
contention::contention
radius::radius
reduce::reduce
cut::cut
line::line
chooseful::chooseful
pushes::pushes
adjacent::adjacent
neighbors::neighbors
scanning::scanning
dominates::dominates
morals::morals
proceed::proceed
possibly::possibly
illustrative::illustrative
founded::founded
strengthen::strengthen
splitting::splitting
blob::blob
ideally::ideally
ingenuity::ingenuity
luck::luck
teach::teach
perseverance::perseverance
formulae::formulae
pump::pump
flavor::flavor
capability::capability
person::person
chance::chance
tricks::tricks
teacher::teacher
skills::skills
vertical::vertical
bands::bands
bridge::bridge
band::band
magnify::magnify
centre::centre
closer::closer
spread::spread
clustered::clustered
strain::strain
imagination::imagination
precludes::precludes
appearing::appearing
feels::feels
pigeon::pigeon
hole::hole
pigeons::pigeons
holes::holes
figured::figured
diagonal::diagonal
sitting::sitting
located::located
neighborhood::neighborhood
window::window
shifts::shifts
altered::altered
narrow::narrow
moves::moves
fly::fly
partitioned::partitioned
logging::logging
replace::replace
effectively::effectively
onetime::onetime
horizontal::horizontal
affect::affect
pert::pert
epsilon::epsilon
participate::participate
perturbation::perturbation
co-ordinates::co-ordinates
phase::phase
broadly::broadly
leftmost::leftmost
pass::pass
rate::rate
created::created
sides::sides
review::review
range::range
pruning::pruning
appropriately::appropriately
manipulation::manipulation
incremented::incremented
greedy::greedy
interestingly::interestingly
keyword::keyword
greed::greed
construct::construct
enlarging::enlarging
listen::listen
slowly::slowly
enlarge::enlarge
guiding::guiding
constructed::constructed
identifying::identifying
extension::extension
local::local
improvement::improvement
key::key
rely::rely
hint::hint
subjects::subjects
strongly::strongly
matroids::matroids
duality::duality
primary::primary
dual::dual
devised::devised
dictated::dictated
improve::improve
subtracting::subtracting
dictate::dictate
proceeds::proceeds
trigger::trigger
improves::improves
subset::subset
vertex::vertex
labels::labels
radio::radio
stations::stations
mobile::mobile
transmitting::transmitting
transmit::transmit
interfere::interfere
showing::showing
fellows::fellows
frequency::frequency
interference::interference
motivation::motivation
motivations::motivations
traced::traced
tells::tells
graphs::graphs
totality::totality
acyclic::acyclic
sized::sized
force::force
subsets::subsets
ensure::ensure
neighbor::neighbor
forest::forest
tracking::tracking
working::working
fall::fall
lets::lets
systems::systems
administering::administering
fancy::fancy
command::command
hour::hour
slot::slot
schedule::schedule
intervals::intervals
interval::interval
shorter::shorter
duration::duration
policy::policy
money::money
origin::origin
closed::closed
overlapping::overlapping
hours::hours
overlap::overlap
separating::separating
builds::builds
strikes::strikes
span::span
suggests::suggests
faulty::faulty
fails::fails
intersect::intersect
overlaps::overlaps
closely::closely
join::join
sentence::sentence
mirror::mirror
image::image
produced::produced
constructing::constructing
counter::counter
spaces::spaces
sends::sends
starting::starting
ending::ending
recursing::recursing
dropped::dropped
revise::revise
lessons::lessons
reviewed::reviewed
2nd::2nd
overlapped::overlapped
request::request
optimal::optimal
yesterday::yesterday
mentioning::mentioning
gathered::gathered
discarded::discarded
disworks::disworks
finishing::finishing
picks::picks
contradiction::contradiction
kolid::kolid
1th::1th
opt::opt
suddenly::suddenly
replacing::replacing
constructor::constructor
notes::notes
non-trivial::non-trivial
behinds::behinds
non-overlapping::non-overlapping
scheduling::scheduling
user::user
users::users
minimize::minimize
sit-down::sit-down
schedules::schedules
processors::processors
minimizing::minimizing
broken::broken
produce::produce
text::text
books::books
trial::trial
parameters::parameters
landed::landed
3rd::3rd
scenario::scenario
claimed::claimed
intersects::intersects
optimally::optimally
progress::progress
fellow::fellow
tune::tune
develops::develops
arise::arise
refining::refining
refine::refine
staring::staring
kth::kth
ideal::ideal
hiding::hiding
reusing::reusing
embedded::embedded
fitted::fitted
frame::frame
telling::telling
tips::tips
effect::effect
jobs::jobs
processing::processing
preemption::preemption
stop::stop
lock::lock
sigma::sigma
modules::modules
pushing::pushing
perspective::perspective
fractional::fractional
knapsack::knapsack
bugler::bugler
successful::successful
house::house
bag::bag
sack::sack
jackpot::jackpot
houses::houses
limited::limited
capacity::capacity
item::item
profit::profit
sell::sell
restricted::restricted
items::items
maximized::maximized
fraction::fraction
bugling::bugling
ordinary::ordinary
cake::cake
shops::shops
cakes::cakes
select::select
eat::eat
squish::squish
maximize::maximize
unit::unit
action::action
constraints::constraints
muff::muff
greedily::greedily
orderings::orderings
approaching::approaching
hidden::hidden
hide::hide
listed::listed
mentioned::mentioned
act::act
guide::guide
limits::limits
guaranteeing::guaranteeing
hints::hints
bust::bust
transactions::transactions
favor::favor
device::device
score::score
scores::scores
likes::likes
material::material
forgotten::forgotten
thick::thick
formalize::formalize
observed::observed
type::type
increased::increased
perfectly::perfectly
chose::chose
film::film
module::module
intuitaly::intuitaly
commit::commit
area::area
transmission::transmission
codes::codes
symbols::symbols
channel::channel
send::send
string::string
strings::strings
received::received
decoded::decoded
symbol::symbol
sending::sending
decode::decode
scored::scored
frequencies::frequencies
free::free
resend::resend
transmitted::transmitted
decoding::decoding
1,depending::1,depending
arrive::arrive
prefix::prefix
pre::pre
alphabet::alphabet
connection::connection
secret::secret
transformation::transformation
associate::associate
either1::either1
leafs::leafs
tied::tied
heaviest::heaviest
binaries::binaries
threes::threes
occurrence::occurrence
codeword::codeword
coding::coding
frequently::frequently
file::file
encode::encode
encoded::encoded
occurs::occurs
curve::curve
traversing::traversing
encouraged::encouraged
balance::balance
skew::skew
closure::closure
twist::twist
contribution::contribution
shifted::shifted
attach::attach
rewriting::rewriting
achieve::achieve
decreased::decreased
mantra::mantra
slow::slow
treated::treated
intermediate::intermediate
weight::weight
constructs::constructs
voice::voice
branches::branches
lowest::lowest
clean::clean
weights::weights
networks::networks
huffman::huffman
kickshaw::kickshaw
pulling::pulling
obtain::obtain
metroids::metroids
methorids::methorids
feeling::feeling
matching::matching
occurrences::occurrences
concentrate::concentrate
grep::grep
uniques::uniques
intake::intake
operating::operating
facility::facility
extensively::extensively
characters::characters
character::character
symbolically::symbolically
mismatch::mismatch
patters::patters
putted::putted
doubtful::doubtful
discover::discover
indexes::indexes
patterns::patterns
sample::sample
searching::searching
useless::useless
tool::tool
existing::existing
positional::positional
positions::positions
anymore::anymore
intelligently::intelligently
possibility::possibility
miss::miss
gaining::gaining
occurred::occurred
matched::matched
highways::highways
stock::stock
noting::noting
suffix::suffix
opportunity::opportunity
safely::safely
missing::missing
proper::proper
pre-computed::pre-computed
pre-compute::pre-compute
mismatches::mismatches
success::success
successfully::successfully
timed::timed
texts::texts
unsuccessful::unsuccessful
determined::determined
yesterdays::yesterdays
stack::stack
head::head
timing::timing
pictorially::pictorially
thinks::thinks
click::click
omit::omit
phenomenon::phenomenon
clause::clause
decremented::decremented
subscripts::subscripts
subscript::subscript
1.now::1.now
risk::risk
efficient::efficient
boyer::boyer
moore::moore
track::track
concepts::concepts
windup::windup
meet::meet
suffixes::suffixes
lesion::lesion
learned::learned
strangely::strangely
cook::cook
combinatorial::combinatorial
object::object
objects::objects
optionally::optionally
lease::lease
option::option
benefit::benefit
initiately::initiately
simulations::simulations
maximizing::maximizing
queens::queens
chess::chess
board::board
modulate::modulate
represents::represents
queen::queen
interferic::interferic
green::green
asserting::asserting
absolute::absolute
unsigned::unsigned
formulated::formulated
toy::toy
game::game
tuples::tuples
consist::consist
rupees::rupees
implicit::implicit
kilos::kilos
kilo::kilo
grams::grams
exceed::exceed
selected::selected
profits::profits
constraint::constraint
crops::crops
maximization::maximization
travelling::travelling
sales::sales
weighted::weighted
tour::tour
visits::visits
representing::representing
country::country
world::world
towns::towns
visit::visit
selling::selling
travels::travels
relating::relating
persons::persons
contexts::contexts
robotics::robotics
biology::biology
fields::fields
carrying::carrying
meant::meant
undirected::undirected
directed::directed
man::man
occasionally::occasionally
backtrack::backtrack
brute::brute
dynamic::dynamic
considerable::considerable
diff::diff
exploit::exploit
catch::catch
systematically::systematically
numerate::numerate
satisfied::satisfied
storage::storage
record::record
founds::founds
guaranteed::guaranteed
generating::generating
slots::slots
template::template
alternatives::alternatives
page::page
wells::wells
comprising::comprising
extended::extended
substance::substance
placing::placing
construction::construction
bolts::bolts
exhaustive::exhaustive
generation::generation
extending::extending
children::children
parent::parent
extensions::extensions
fuller::fuller
report::report
print::print
salesman::salesman
salesperson::salesperson
denotes::denotes
provide::provide
sequential::sequential
prevalent::prevalent
viral::viral
removing::removing
vaguely::vaguely
disorder::disorder
infinitive::infinitive
unfiled::unfiled
branching::branching
unfilled::unfilled
underneath::underneath
visiting::visiting
waste::waste
filing::filing
depth::depth
improvements::improvements
wheel::wheel
efficiency::efficiency
designates::designates
matters::matters
cyclic::cyclic
closing::closing
proceeded::proceeded
diagonally::diagonally
specialized::specialized
generalized::generalized
tsp::tsp
tours::tours
child::child
generates::generates
exp1ntial::exp1ntial
explosion::explosion
grand::grand
believes::believes
enzymes::enzymes
explore::explore
phenomena::phenomena
view::view
summarizing::summarizing
explained::explained
specifically::specifically
reviewing::reviewing
expected::expected
organizing::organizing
explored::explored
direction::direction
organization::organization
drawn::drawn
parallel::parallel
doubles::doubles
multiplied::multiplied
enormous::enormous
saving::saving
version::version
prune::prune
heuristic::heuristic
evaluated::evaluated
turned::turned
bar::bar
xij::xij
obtained::obtained
boundary::boundary
exploring::exploring
ridiculously::ridiculously
explaining::explaining
choice::choice
downward::downward
alternative::alternative
town::town
horizontally::horizontally
lengths::lengths
beat::beat
assurance::assurance
is10::is10
visited::visited
overhead::overhead
invariably::invariably
gain::gain
vector::vector
vectors::vectors
width::width
measured::measured
overflow::overflow
heuristics::heuristics
nation::nation
selection::selection
firm::firm
reject::reject
characterized::characterized
decisions::decisions
choices::choices
whatsoever::whatsoever
exploration::exploration
benefits::benefits
insight::insight
rejected::rejected
rejecting::rejecting
numerical::numerical
adapt::adapt
server::server
violated::violated
indicating::indicating
firmly::firmly
focusing::focusing
forgive::forgive
cleaver::cleaver
geographical::geographical
euclidean::euclidean
correcting::correcting
latitudes::latitudes
longitudes::longitudes
crow::crow
flies::flies
wind::wind
direct::direct
account::account
committed::committed
substantial::substantial
talked::talked
issue::issue
organize::organize
deciding::deciding
offs::offs
highest::highest
included::included
internet::internet
articles::articles
viewpoint::viewpoint
applications::applications
areas::areas
enlightening::enlightening
obscure::obscure
including::including
signal::signal
optimize::optimize
6and::6and
juts::juts
kilograms::kilograms
kilogram::kilogram
brace::brace
determines::determines
decided::decided
examining::examining
unpicked::unpicked
undecided::undecided
convention::convention
remaining::remaining
ago::ago
moderately::moderately
mine::mine
encourages::encourages
valuable::valuable
simplification::simplification
outlook::outlook
wait::wait
agree::agree
exiting::exiting
specifications::specifications
strike::strike
onward::onward
calculations::calculations
determining::determining
overloaded::overloaded
past::past
adequate::adequate
losing::losing
options::options
effects::effects
reaming::reaming
executions::executions
decrement::decrement
popularly::popularly
routine::routine
won::won
default::default
table::table
embarking::embarking
viewing::viewing
flush::flush
color::color
optimized::optimized
capacities::capacities
plus1::plus1
null::null
1.and::1.and
sharper::sharper
writes::writes
diary::diary
transcript::transcript
triple::triple
triples::triples
cleaning::cleaning
subsequently::subsequently
reappears::reappears
entries::entries
save::save
repeating::repeating
formulation::formulation
eliminating::eliminating
simplify::simplify
subsequence::subsequence
lcs::lcs
subsequences::subsequences
dropping::dropping
underlying::underlying
generally::generally
explicitly::explicitly
similarity::similarity
dna::dna
evaluation::evaluation
pelt::pelt
measures::measures
retain::retain
subspace::subspace
subspaces::subspaces
optimizes::optimizes
stops::stops
characterize::characterize
defines::defines
letter::letter
degenerate::degenerate
adequately::adequately
concatenated::concatenated
discovered::discovered
concatenate::concatenate
2.well::2.well
tempt::tempt
conjecture::conjecture
searched::searched
undefined::undefined
jointly::jointly
technicalities::technicalities
moment::moment
passing::passing
handle::handle
terminal::terminal
ranging::ranging
serve::serve
1,1::1,1
mimic::mimic
interpreted::interpreted
nulls::nulls
arrow::arrow
backwards::backwards
proportional::proportional
concatenation::concatenation
modification::modification
analog::analog
linked::linked
matric::matric
chain::chain
repeatedly::repeatedly
associative::associative
parenthesize::parenthesize
zone::zone
completed::completed
wake::wake
associativity::associativity
involving::involving
scalar::scalar
parenthesization::parenthesization
rooted::rooted
metrics::metrics
alternatively::alternatively
superior::superior
mentions::mentions
addresses::addresses
parenthesizations::parenthesizations
dimensions::dimensions
supposed::supposed
estimated::estimated
customer::customer
remarked::remarked
thoughts::thoughts
minimized::minimized
partitions::partitions
staying::staying
unusual::unusual
characterization::characterization
lifetime::lifetime
holders::holders
creativity::creativity
tiger::tiger
strips::strips
yellow::yellow
animal::animal
lemma::lemma
connect::connect
mcm::mcm
performed::performed
modulation::modulation
likewise::likewise
accurately::accurately
selector::selector
extracting::extracting
mcmc::mcmc
substituted::substituted
resulting::resulting
allocate::allocate
rename::rename
considers::considers
ranges::ranges
updating::updating
mark::mark
intersome::intersome
startup::startup
holding::holding
costs::costs
producing::producing
clarifying::clarifying
warehouse::warehouse
hold::hold
delivered::delivered
rent::rent
night::night
daily::daily
demand::demand
manufactured::manufactured
inventory::inventory
satisfiable::satisfiable
production::production
tabular::tabular
seventh::seventh
deliver::deliver
idle::idle
held::held
incurred::incurred
gap::gap
begun::begun
infact::infact
dates::dates
startups::startups
plans::plans
repulsive::repulsive
cast::cast
searches::searches
minimizes::minimizes
maximizes::maximizes
cell::cell
switched::switched
history::history
generalize::generalize
demands::demands
generalization::generalization
wider::wider
consumed::consumed
specifies::specifies
devising::devising
residual::residual
begins::begins
status::status
influence::influence
claims::claims
opts::opts
core::core
lemmas::lemmas
bests::bests
agenda::agenda
optschedule::optschedule
dealing::dealing
cumbersome::cumbersome
minutes::minutes
planning::planning
optsched::optsched
relationship::relationship
potential::potential
incurring::incurring
colon::colon
bracket::bracket
evaluates::evaluates
mth::mth
deleted::deleted
connecting::connecting
requiring::requiring
infinite::infinite
automatically::automatically
fulfill::fulfill
unsolvable::unsolvable
keys::keys
forever::forever
doubt::doubt
legal::legal
illegal::illegal
sheets::sheets
quietly::quietly
formation::formation
arc::arc
quicksort::quicksort
deduce::deduce
preferable::preferable
heavily::heavily
guarantees::guarantees
excellent::excellent
performance::performance
trivially::trivially
splitter::splitter
initialized::initialized
qsort::qsort
append::append
appending::appending
combined::combined
establish::establish
feed::feed
cardinality::cardinality
evoking::evoking
invoking::invoking
invocation::invocation
extreme::extreme
homework::homework
unevenly::unevenly
artificial::artificial
redraw::redraw
uneven::uneven
distribution::distribution
shrink::shrink
erring::erring
rightmost::rightmost
news::news
lopsided::lopsided
balanced::balanced
elegant::elegant
averages::averages
probabilities::probabilities
grouping::grouping
splits::splits
concatenates::concatenates
biased::biased
tedious::tedious
algebraically::algebraically
label::label
labeled::labeled
blank::blank
cells::cells
marked::marked
scrambled::scrambled
splitters::splitters
treating::treating
integral::integral
converting::converting
logarithm::logarithm
rth::rth
bipartite::bipartite
motivating::motivating
assigned::assigned
composed::composed
forms::forms
incident::incident
blue::blue
conflict::conflict
matchings::matchings
unique::unique
ally::ally
augmenting::augmenting
concept::concept
berge::berge
winded::winded
conflicts::conflicts
reached::reached
kho::kho
played::played
chaser::chaser
knocks::knocks
chasing::chasing
members::members
opposing::opposing
team::team
shortly::shortly
augment::augment
throwing::throwing
succeed::succeed
succeeds::succeeds
knocked::knocked
knock::knock
attached::attached
foolish::foolish
entered::entered
eliminate::eliminate
stayed::stayed
colors::colors
traversed::traversed
drag::drag
backward::backward
enabled::enabled
symmetric::symmetric
edmonds::edmonds
eminent::eminent
scientist::scientist
founders::founders
credited::credited
edmond::edmond
ruled::ruled
attributed::attributed
hands::hands
justifies::justifies
existed::existed
contrary::contrary
watch::watch
investigate::investigate
stating::stating
consecutive::consecutive
implications::implications
black::black
continued::continued
maximal::maximal
sufficient::sufficient
knew::knew
growing::growing
package::package
breadth::breadth
derived::derived
vertex.2::vertex.2
enforce::enforce
forces::forces
augmented::augmented
arrows::arrows
directions::directions
enforced::enforced
auxiliary::auxiliary
arcs::arcs
confusion::confusion
transformed::transformed
referring::referring
analogous::analogous
oriented::oriented
coincidence::coincidence
arranged::arranged
orientation::orientation
accomplish::accomplish
brings::brings
delete::delete
adjacency::adjacency
bfs::bfs
deleting::deleting
augmentation::augmentation
augmentations::augmentations
completes::completes
refinement::refinement
fastest::fastest
proportionality::proportionality
relevance::relevance
stressing::stressing
algebraic::algebraic
quantification::quantification
indirectly::indirectly
assert::assert
enumerating::enumerating
exponentiate::exponentiate
trigonometric::trigonometric
looping::looping
visualize::visualize
introduced::introduced
inputting::inputting
non-leaf::non-leaf
relational::relational
operators::operators
printed::printed
outgoing::outgoing
deterministic::deterministic
outwards::outwards
randomly::randomly
graphical::graphical
performs::performs
heap::heap
copy::copy
shell::shell
intimately::intimately
rearrangement::rearrangement
inverse::inverse
unscrambled::unscrambled
ternary::ternary
accessible::accessible
constructive::constructive
peep::peep
peeps::peeps
compares::compares
outcomes::outcomes
super::super
gleaned::gleaned
stronger::stronger
conceivable::conceivable
limit::limit
mimics::mimics
stuck::stuck
buckets::buckets
printing::printing
inserted::inserted
duplicates::duplicates
intersections::intersections
allowing::allowing
distinctness::distinctness
continuation::continuation
continuity::continuity
bounding::bounding
outcome::outcome
resembles::resembles
induct::induct
arrives::arrives
capable::capable
sketch::sketch
content::content
theoretical::theoretical
theoretic::theoretic
duplicate::duplicate
silly::silly
fortunately::fortunately
asserts::asserts
irrespective::irrespective
tuple::tuple
insist::insist
restriction::restriction
joined::joined
reorder::reorder
restricting::restricting
visualization::visualization
interior::interior
analogy::analogy
triangle::triangle
geometrically::geometrically
insights::insights
interpreting::interpreting
surface::surface
convex::convex
passes::passes
convexity::convexity
connectivity::connectivity
regions::regions
sphere::sphere
torus::torus
joining::joining
kidney::kidney
shaped::shaped
cashew::cashew
describes::describes
assure::assure
shade::shade
slice::slice
cub::cub
wedge::wedge
facing::facing
assertion::assertion
slicing::slicing
shrinking::shrinking
maintains::maintains
curious::curious
lambda::lambda
midpoint::midpoint
segment::segment
continuous::continuous
identically::identically
rearrange::rearrange
bear::bear
rearranged::rearranged
patient::patient
permuted::permuted
skip::skip
non-linear::non-linear
disconnected::disconnected
deep::deep
heavy::heavy
duty::duty
machinery::machinery
connections::connections
coins::coins
heavier::heavier
weighings::weighings
puzzle::puzzle
formulate::formulate
introduction::introduction
reductions::reductions
deals::deals
sufficiently::sufficiently
tech::tech
interview::interview
dream::dream
company::company
settled::settled
software::software
boss::boss
challenging::challenging
projects::projects
project::project
automate::automate
reads::reads
screen::screen
scheduled::scheduled
distribute::distribute
evenly::evenly
lightly::lightly
ties::ties
mixed::mixed
attempt::attempt
processes::processes
beats::beats
threatening::threatening
dismissal::dismissal
complement::complement
feeds::feeds
week::week
lifetimes::lifetimes
approaches::approaches
overestimate::overestimate
disposal::disposal
generous::generous
speeds::speeds
particles::particles
universe::universe
atoms::atoms
figures::figures
fired::fired
companies::companies
manages::manages
fonda::fonda
notions::notions
imbibe::imbibe
reduction::reduction
library::library
coded::coded
programmer::programmer
routines::routines
ticked::ticked
environment::environment
ticks::ticks
crosses::crosses
recap::recap
smarter::smarter
resultant::resultant
fallen::fallen
np-completeness::np-completeness
modifying::modifying
essential::essential
inefficient::inefficient
exhaustively::exhaustively
characteristics::characteristics
restate::restate
spanning::spanning
motion::motion
implied::implied
hamiltonian::hamiltonian
spans::spans
confused::confused
hewlett::hewlett
packard::packard
phases::phases
surety::surety
circuit::circuit
distinguish::distinguish
blind::blind
transformations::transformations
round::round
clears::clears
removal::removal
contra::contra
spurious::spurious
floating::floating
social::social
versions::versions
players::players
prover::prover
verifier::verifier
trust::trust
room::room
skeptical::skeptical
convinced::convinced
verifies::verifies
composite::composite
vmultiplies::vmultiplies
guy::guy
np::np-
includes::includes
bid::bid
trustful::trustful
conversation::conversation
supplies::supplies
supplement::supplement
advice::advice
verified::verified
verification::verification
diagrammatically::diagrammatically
zeroes::zeroes
composites::composites
factorization::factorization
recent::recent
syllabus::syllabus
collections::collections
sees::sees
date::date
receives::receives
multiplies::multiplies
encountering::encountering
central::central
boolean::boolean
negation::negation
literal::literal
literals::literals
cnf::cnf
clauses::clauses
conjunctive::conjunctive
equivalently::equivalently
assigns::assigns
sat::sat
exams::exams
satisfiability::satisfiability
steven::steven
tire::tire
effort::effort
hardest::hardest
hook::hook
clique::clique
remembers::remembers
creeps::creeps
feeding::feeding
sequentially::sequentially
cliques::cliques
negations::negations
states::states
belonged::belonged
cooks::cooks
box::box
satifiable::satifiable
formulas::formulas
assignments::assignments
verifiers::verifiers
complemented::complemented
tick::tick
network::network
monitor::monitor
link::link
monitors::monitors
traffic::traffic
links::links
covers::covers
monitored::monitored
trip::trip
assumed::assumed
degrees::degrees
creating::creating
older::older
controlling::controlling
controlled::controlled
additionally::additionally
impede::impede
rises::rises
rights::rights
disjoined::disjoined
provers::provers
blame::blame
covering::covering
reflect::reflect
shooting::shooting
grown::grown
recalled::recalled
leap::leap
shoes::shoes
installment::installment
sums::sums
subroutine::subroutine
failing::failing
straightforward::straightforward
ele::ele
transform::transform
fixing::fixing
summing::summing
thrice::thrice
independence::independence
highly::highly
firing::firing
approximation::approximation
arose::arose
cope::cope
wonders::wonders
promising::promising
approximately::approximately
exploited::exploited
unary::unary
freedom::freedom
napes::napes
exponent::exponent
compromise::compromise
tend::tend
provably::provably
metric::metric
traveling::traveling
precedence::precedence
constrained::constrained
definiteness::definiteness
minimization::minimization
technical::technical
rho::rho
parameterized::parameterized
reciprocal::reciprocal
title::title
restrictions::restrictions
computable::computable
synonymously::synonymously
terminology::terminology
sticking::sticking
dfs::dfs
traversal::traversal
appearance::appearance
appeared::appeared
prims::prims
reducing::reducing
post::post
tasks::tasks
predecessors::predecessors
sched::sched
topological::topological
suffice::suffice
induced::induced
unscheduled::unscheduled
step3::step3
originate::originate
.because::.because
coping::coping
summarized::summarized
identifiable::identifiable
target::target
meeting::meeting
devise::devise
themes::themes
sighted::sighted
compete::compete
villages::villages
hospitals::hospitals
served::served
hospital::hospital
collected::collected
uncovered::uncovered
uncover::uncover
recover::recover
ground::ground
rescue::rescue
handy::handy
statistics::statistics
students::students
heights::heights
statistically::statistically
clusters::clusters
representatives::representatives
choosing::choosing
cluster::cluster
farthest::farthest
clustering::clustering
centers::centers
radia::radia
desired::desired
arbitrary::arbitrary
guesses::guesses
selects::selects
quality::quality
crew::crew
styles::styles
catches::catches
trade::trade
dependence::dependence
captured::captured
wide::wide
epsilons::epsilons
schemes::schemes
ptas::ptas
one1::one1
fptas::fptas
tear::tear
approximated::approximated
lightest::lightest
complementary::complementary
mobilized::mobilized
feasible::feasible
decomposed::decomposed
lighter::lighter
heading::heading
item1::item1
seeking::seeking
explicit::explicit
expecting::expecting
distilled::distilled
compactly::compactly
subscripted::subscripted
denoted::denoted
analogously::analogously
vertically::vertically
vth::vth
denoting::denoting
vale::vale
infinities::infinities
infinites::infinites
crop::crop
nested::nested
undertook::undertook
error::error
low::low
precision::precision
aks::aks
tight::tight
scaling::scaling
scale::scale
cancelled::cancelled
explains::explains
inequalities::inequalities
mere::mere
accommodatable::accommodatable
practical::practical
uniformly::uniformly
