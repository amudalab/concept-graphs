digital circuits and systems prof s srinivasan department of electrical engineering indian institute of technology madras lecture  1 introduction to digital circuits this course is on digital circuits and digital systems we have this  signals a signal is a variation in a physical parameter  temperature variation is a signal  speech as i speak now it ? s a signal  video is a signal  light intensity variation now any of these signals that you get need to be may be processed to be available to the other end may be stored so you do lot of processing of signals in real life for example  if you take a microphone the speech signal that you give into the microphone if necessary it needs to be amplified and then given out as a signal out of the speaker  the sound signal out of the speaker so it is a typical signal processing scenario  refer slide time 1  58  we are in the electrical engineering domain we talk about only electrical signals that means variation of an electrical quantity a voltage or a current as a function of time a signal is defined as a variation of electrical quantity usually a voltage or a current with time of course you can also a signal which does not change with time then it is not called a signal any more it is the dc value we say for example  if you know that the value is not going to change there is no need for processing so you know the value so you can use the value wherever you want to use it now  once you have this variation any signal that naturally occurs the speech or temperature variation or as i said the illumination changes in the television or a seismic earthquake activity any signal first you need to convert it into electrical variations some other are mechanical so other physical parameters so there is a transducer a sort of a device this device which converts non electrical quantity into an electrical quantity electrical signal known as the transducer so the output of the transducers in electrical signal is where we define the signal as the variation of the parameter of interests the voltage or current with time normally a signal can take any value of course within given limits and different instance of time a signal varies continuously for example you have a time variation of signal voltage level of a signal as a function of time  if i plot like this then any number of values this signal can take as a function of time  refer slide time 5  48  but of course there is always a limit  what is the minimum  let us call this minimum value as 0 and maximum value as vmax with two different values we define and say that signal always varies within this range  this is the range of the signal and at any instant of time it can take any value and what is the instant of time is also not defined  i can make a measurement here and immediately at very next instant of time or i can do a measurement here and measure much later here nothing is remaining here this variation of signal which can take any value between these two limits and such a signal is called analog signal analog signal or analog quantity can take any value at any instant of time within of course the limit defined within the range specified  refer slide time 6  28  and on the other one i want to process the signal only at discrete instance of time suppose i want to monitor the temperature of a system every minute or every hour or every thirty minutes or whatever you discretize the time at which you look at the value of the signal the signal will vary continuously all the time and you are looking only at the discrete instance of time at a definite instance of time only there you are looking at and such a signal suppose i put this value i will have equal intervals of time so call this t0 the starting point then t1 t2 need not be equal but just to explain it little easier i make it at equal intervals of time so i will monitor the value of the signal v  t  at instance of time t0 t1 t2 t3 t4 as long as i want or as long as i am interested in the parameter so such a signal is called as the discrete time signal the signal still continuously varies an analog signal is a signal which takes any value between the two defined limits as a function of time but even though the signal varies i am only interested in looking at specific intervals of time and such a signal is a subset of the analog signal that is called a discrete time signal the problem in these two cases whether you want to continuously monitor what is continuous finally it has to be discrete even it is a one micro second then what happens between one microseconds even one nanosecond can change in between these  refer slide time 7  39  finally we can only observe physical parameter will vary with input and output but if you become an observer the observation can only be discrete but whether it is a discrete time signal or analog time signal the variation of the signals between these two limits is a continuous variation there is no defined points by which it can vary what i am saying is supposing my initial value is 0v and vmax is 5v as an example  as an example i make this 5v i am only allowing this signal to change from 0 to 5v and within this 0 to 5v it can take any value you may have difficulty in representing because you have limitations in the digits you are having in your calculator or i can not represent any number beyond a particular number of digits to be meaningful but theoretically it can have number of levels between 0v and 5v now when you are trying to transmit a signal because after the entire signal itself as no meaning unless you use it somewhere as a change in the speech  when i speak my speech is picked up in the microphone and it gets converted into electrical signals and the electrical signal is amplified by the amplifier and then is put out on the speaker which brings it out as a speech signal so there is a processing involved in any signal and if there is no processing then we are not interested in any signal we are not interested in looking at a signal just for the variation sake we don ? t want to stare at a signal just because it ? s nice to see  it keeps changing it ? s nice to watch so i am sitting and watching it  it is like a wave in the ocean when you go to the beach and sit there and watch the waves i like to do that myself because that ? s only for fun  for relaxation but when you have a signal you have to use that signal somewhere you transmit it or you store it for later use  one of the two things i pick up the signal and process it and give it as an output to the another system another transducer which will convert this signal into the physical parameter like a sound or a light or whatever or i may even store it for later use suppose i want to know yesterday ? s temperature variation over today ? s temperature at 11 o ? clock yesterday what was the temperature and at 11 o ? clock today i want to know what is the temperature and at 11 o ? clock take the temperature reading store it  today i take the 11 o ? clock temperature and say that today is hotter than yesterday so either you store or transmit it when i do that how accurately can i represent my variations within these limits of 0v and 5v as i said i can take infinite number of values i may not be limited by the channel  how accurately can i send the signal  i can directly send it or the output i can receive which will be an analog signal but if you want to store it and reproduce it i would like to be limited by the number of digits i want to use that way i can safely say this is within that and within that limit i will define various levels the signals can take and i will say the signal is in this level tomorrow in this level sot there is a change of so many levels so if i further discretize it i discretize the time to start with originally i had a signal with continuous time and continuous amplitude variation then i let the amplitude continuously vary but discretize the time  i am going to introduce one more discretization in the amplitude i will say i will only let the signal take a specific amount of level specific number of discrete levels so 0 to 5v even though signals allow to vary i have no control over the input signal  the temperature variation and when i record it i only record it as discrete levels or when i process it i only process those discrete levels  when i transmit it i only transmit those discrete levels of course how accurately i want the reproduction depend upon how many levels i want to have  i have only two levels  it is 0 or 1  0v or 5v is the signal present or not present that is too crude or i can have four levels 0 to 1.25  1.25 to 2.5  2.5 to 3.75 and 3.75 to 5 i can say if signal is less than 1.25 then it is level 1  between 1.25 to 2.5 i will say it is level 2  2.5 to 3.75 i will say level 3 signal and 3.75 to 5 i will say level 4 signal then you know that the signal is in this range therefore more and more levels are introduced and i can introduce more and more accuracy in transmission and reproduction but still it is a discrete level so when i discretize the amplitude in addition to discretize the time i get what is known as digital signal that means i will only allow this variations let us called this level 1 or this i write as 0  i will say l0  it will be level i  l2  l3  l4 etc  refer slide time 15  07  depending on how narrow or broad these ranges are the total number of steps will be decided the total number of steps to be decided depending on the level of each of these steps i am going to take now i will say suppose i want to represent the signal value at t1 it is between l2 and l3 i can not say it is between l2 and l3 it is not possible to store between l2 and l3 or it is not possible to transmit between l2 and l3 i have to either transmit between l2 and l3  i have to make a prior understanding i will always round it of to the nearest lower level or nearest upper level  refer slide time 15  24  so for our example in this case let us always round it of to the nearest lower level i will say at t0 the signal is l2  at t1 also the signal is l2  at t2 the signal is l3 because here it has become between l3 and l4 at t2  at t3 it is l4 at t4 it may be l5 and so forth hence each of these levels can be stored or represented by a smaller number of digits than originally it had intended to be suppose i have infinite number of levels i need infinite number of digits to represent it now each of these levels is going to have discrete levels so i will have fewer digits to represent  fewer for storing and fewer levels to transmit in the case of transmission now let us say there are only a total of eight steps  between 0 and 5v i divide this range into only eight steps  i don ? t expect much variation in temperature or i am not interested to find a variation  or i am not interested to find whether it is too hot today or too cool today it is all like if know where the temperature is in this range of 0 to 5v in eight levels you tell me and if i tell you that then i will use eight levels so these eight levels can be represented by eight different values so it is easy to store eight different values and transmit eight different values rather than having to store infinite  supposing the signal can be anywhere from 0 to 5v if is 4.7392481 i should have so many digits to represent it or so many digits to transmit it  i am now removing myself from it  the accuracy that much is not required on the other had i have the flexibility of increasing the accuracy by increasing the number of levels if i am willing to store more levels and transmit more levels we improve our accuracy if you are not interested in storing more levels and transmitting more levels then your application can now decide the accuracy that you want so there is flexibility in this digital domain which is not there in the analog domain in analog domain if you make a measurement  suppose if you go to a physics lab make a measurement of current or voltage the representation is analog the needle moves  it stays somewhere between 3.2 and 3.3 but you will only interpret it is 3.2 or 3.3 or say 3.25 or 3.275 like that you will make a guess but really if you want to be very accurate i should be in a very large meter with minor sub-divisions of each of those and then keep on doing it till you can get accuracy there is an accuracy built in analog also because of our observation power and because of the limitations we are using for measurement  now i am legalizing it that ? s all i am making it official so i am now saying i am going to tell you these are the levels permitted always represent your signal within these limits but if you give an analog meter i approximate it  here i approximate it in a systematic way so now this is the digital domain we will be talking about now why do we go for digital because even though there is inaccuracy built in analog also if you want to improve the accuracy of analog what will you do you will do a more precise meter with a large range and each range subdivided into many sub regions so that you will not make a mistake supposing you know the current always have to be between 2.5 and 2.7 i will make a reading of 2.5 to 2.7 so large and between that i will divide into smaller and smaller sub-divisions this possibility improves the accuracy of the meter by any amount by putting more and more of precise instrumentation by making a precise instrument for measuring current or voltage or any other quantity you are trying to measure i can always improve the measurements of analog signals likewise i can always improve the accuracy of my digital instruments also by having more and more levels because i need to store more and more levels or to transmit more and more levels so accuracy can be decided based on the application required then what is the advantage of going digital analog also has the potential inaccuracy which can be improved depending on the need by extra hardware  i will call it hardware or extra precise instruments what i mean by hardware put more money in other words if you put more money you will get better system is it not ? anything if you put more money you may get a better system  more money you get a better car right ? that is what it is in digital also i have a potential of improving the accuracy by putting more and more levels which means more and more levels means more and more hardware then i should have some way of representing more digits more levels  earlier i had fewer levels now i have more levels so now i should have some other hardware to represent this so here also it is going to cost a little more in terms of instrument implementation  refer slide time 21  47  but now why analog why digital ? so this is the difference between the analog signal  discrete time signal and digital signal so in this particular course we will be dealing with digital only  both in time and levels it will be digital we are not talking about analog signals that is analog electronics poe principles of electronics  you will learn later on and discrete time you will learn some other time for some other specific applications this course will deal with only digital signals and digital processing of signals  digital representation of signals ; digitally you have to store it etc so this course is on digital circuits and digital systems now  one may say that signals are basically analog in nature when it is generated when it is generated most of the signals are analog  temperature variation is there  you can ? t say that temperature always jumps between one degree intervals can you say that ? today ? s temperature you want to measure can you say that my temperature will only jump from 31 to 32 in between it should not jump  can you force it ? no  you need not take cognizance of the fact 31.2  you will say either 31 or 32 but then see temperature will change  analog  there will be infinite levels  it will only take 31.2745 also it can change you don ? t know likewise all signals are analog similarly when you put the thing back and after processing or storing  transmitting and get this back on the other transducer reverse transducer in this case  in the case of microphone the reverse transducer is the loud speaker  the signal makes the sound possible the loud speaker the electrical signal is converted into sound  the light is picked up as an electrical signal it is processed and in your picture tube at home television receiver the electrical signal is converted back into light where you see the shadows of all these movements which you are addicted to  all the time watching tv so it is again a conversion of analog to digital  digital to analog and back so why do we have to go through the digital path ? why can ? t we take analog signals ? anyway inaccuracy is there  in digital also the accuracy can be defined by you  in analog also there is a provision to improve accuracy by spending more and more precise hardware and more and more money  in digital also i can do more and more hardware and then get better accuracy so when that is the case why suddenly make all of them learn this course digital ? one thing is i am going to get salary out of this course teaching you that is the minor reason but the real reason is digital signals are easy to store and manipulate without much error  i will give you an example supposing i am measuring an analog value i am storing an analog value  how do you store an analog voltage ? how do you store voltage ? capacitor  you store the value in a capacitor supposing i charge my capacitor to 1.27v today and tomorrow somebody else comes and measures it then it is equal to storing and retrieving it later or storing and transmitting it  you stored 1.27v and tomorrow somebody comes and measures 1.25v does that person know that you have stored 1.27 volts if he knows then there is no need for storing you can also tell him then there is no need for capacitor  if you are going to see that fellow tell him it is 1.27 he doesn ? t have to come and measure so when you leave a voltage of 1.27 volts on a capacitor and measure it again you don ? t know how much is the last for analog value because 1.27 is only our limitation  as i said it can be 1.27 to and in that case it can be measured as 1.27 too whatever value you put you should be able measure it accurately but there is always a leakage or i am transmitting analog signal let us say 1.72 instead of storing in a capacitor i am trying to send it across a wire to the other end as a signal so you try to send 1.72v the receiving end it is measured as 1.75v this person has no idea that you sent 1.72v and if he knows that you have sent 1.72v then there is no need for a transmission so the other end receives it as 1.75 volts he was not sure about what you have sent that was one point seven two volts there is a 0.03v noise which has been added in the transmission part which itself is 1.75v but he doesn ? t know exactly how much is the noise added now there is uncertainty about the values of storage and the transmitted signal in an analog domain take a digital example ; i have only eight levels as i said or a minimum number of levels whatever is the level but i will take eight as an example between 0 and 5v i have eight levels so when you divide 5v by 8 how much is each step ? it is 0.625 so if the voltage level that i want to transmit is between 0 and 0.625 i am going to send it as a 0 level that is what i told you  i am going to round if off to the lowest level if it is between 0.625 and one point two five if it is 0.625 and 1.25 you know it is l1 level one supposing i send 0.75 let us say there is a noise added  at the same .03 a noise was added same channel i am sending so the noise is added in it so 0.75 is going to be received as 0.78 but it will still be recorded as l1 the effect of noise on a digital transmission is much lower compared to the effect of noise on the analog transmission since i only know that predefined levels as the possible levels i know it can not be 0.75 it can not be 0.78 this guy must have send 0.625 i don ? t care whether 0.75 became point seven eight because anyway you send only 0.625 which is level 0 unless there is a marginal thing where you are trying to send 1.25v you send 1.24v which is referred to as l1 and 0.2 got added so 1.24 plus 0.2 will be i will not even say 0.2 so .01 got added so 1.24 becomes 1.25 then you are not sure whether what you sent was l1 or l2 but occasionally these type of extremities are there i am not saying it as a perfect transmission i am saying it is better than analog in noise performance that is one of the reasons why you want to go for analog it can store and reproduce values not more accurately but i will say more reliably than  why did i not say accurately ? accuracy depends on number of levels i use if i am going to truncate my 0.825 as 0.625 is not accurate by any stretch of imagination but i chose to have only eight levels if i wanted i could have had 16 levels  also if i had wanted i would have had 256 levels  if i wanted i can have 1024 levels so that case becomes more and more accurate accuracy depends on the number of levels but more reliably i can store and reproduce and more reliably i can transmit and receive  that is one reason do you think it is a valid/good reason to for digital ? no ? you are not convinced i think it is a good reason now second reason i will say is i will go back to accuracy a little bit more i said accuracy can be improved by analog or digital case in digital case it is having more number of levels and in analog it is by giving an instrument which is more accurate which can handle these lower order values better by increasing the sensitivity of the equipment for example  a meter  how does it work ? a meter works by the current carrying coil which just makes a deflection of the pointer and where it stops so if you want to make more accurate measurement i should have more sensitive coils but now the difference between having more levels and more sensitive analog is very different to improve the accuracy it is easier in digital because all i have to do is to increase the number of levels so reproduction of levels is the same effort hardware wise it is more but then the similar hardware i have more of it so if i have similar hardware more of it i can improve the accuracy of a digital system in analog system to get more accurate i need to struggle more i need to slog more analog improvement accuracy is more difficult than digital improved accuracy digital improved accuracy means more levels which are identical to the earlier levels instead of having eight of those levels whatever it is i will have sixteen of those whereas for analog i can not say for example  if i want to make a measurement of the distance from here to here if i ask you to measure and give me the feet you will very easily take your foot ruler and measure and say seven feet  eight feet and if i ask you to do in inches then you will be little more careful you need a scale with an inch  rule of an inch calibration in it and then have to be very careful and then finally if i say give me the nearest millimeter then i need an instrument with a millimeter calibration and then i have to be very careful in my measurement so  by measuring more and more accurately in analog systems is difficult than having more and more levels and improving the accuracy or precision of a digital system  that is another reason i have given for a digital so the cost of more accurate system is proportional to more accuracy in the case of digital whereas it increases the exponentially in the case of analog in analog the increase in cost for most accurate systems is not proportional to the accuracy improvement but it is much more than that for digital i spend more money i get a similar one if a i am happy with four levels be happy  if you want eight levels give me double the cost i will give you  in analog i can ? t say that so it is more difficult to make more meaningful measurements more accurate measurements in analog compared to digital or storage when i say measurement it means storage and transmission everything the quantity we may signal after all what did i say the signal has to be represented  stored  measured  transmitted  everything is part of signal that is called signal handling or signal processing the signal has to be processed  you can call it handling of the signal doesn ? t matter to me so these are the reasons why we go for digital so now the effort is to convert everything that you see in the world and why can ? t you do everything in digital ? it is not possible so i told you why digital  why do we need analog ? if you say so much about digital being so good can you not do away with analog altogether and have only a digital world and not have the principle of electronics course in your next semester ? it is a good tempting thought but unfortunately not because all real life signals are analog signals be it a temperature variation of a body or a temperature variation of a parameter or anything or a speech or a light or heart rate or whatever you think of  have you seen the ecg waveforms in monitors  in hospitals  in movies ? suddenly the heart rate will come and then follows that that is how they represent a person dying in a movie is it not ? so all are analog signals unfortunately or fortunately if you look at the analog people they will say otherwise they won ? t have jobs so analog signals are there and our job is to convert these analog signals to digital signals and because we live with digital people but today technology has improved so much it is easier to do digital as i said it is easier to do digital cost of the digital becoming lower and lower so we want to do more and more of digital so what we do is we can not do away with analog i told you  first we pick up the signal analog by a transducer as i said  sometimes the signal is so weak that you need to amplify it before you convert into digital you need to amplify it supposing you don ? t do an amplification sometimes the signal gets lost  the signal is lost completely  you get very weak signals and if the signal is not very weak you can directly convert into digital therefore take an analog signal convert it to digital preprocess if necessary that is if signal is very weak  convert to digital  by process i will put anything i am not going to put separately store measure and all that i combine all of them  manipulate do whatever you want with that signal that is called processing  just storing and reproducing is also processing and then convert it back to analog this is the flow of any processing today and because the technology advances because the digital domain being so dominant today in electronics they are trying to push as much as possible digital domain and have as little as possible in analog  refer slide time 37  44  so in any system today you design ninety to ninety five percent of the activities are digital but that five ten percent of the analog is not real  without a proper signal whatever processing you try to do that is not going to help you i am not trying to say analog is not important  i am not trying to say don ? t go to analog but more effort is put on digital more amount of work is done in digital domain than analog domain but design efforts are very difficult in analog as i said to improve the accuracy in analog is not easy but digital is easy so effort wise it may be even equal or slightly different but then i am not saying in reality in that sense please  do not misunderstand me  do not misquote me to analog professors and pick up a fight for me with analog professors who are my colleagues here  i am not saying that but digital as lot of these applications today and what we will be seeing is only this  we are going to do this process convert to digital  convert to analog and that we will learn later on in future courses but in this particular course what is this signal  how are these signals represented in digital  how are we going to use it in processing  what are the various things we can do  what are the various things we can do with this signal  this is the basic building blocks so what we will basically study in this course are building blocks of digital circuits and systems there are several other things but we will not go into the details we will have to do from the analysis point of view we have to analyze the behavior of them  how does it work  what is a building block  how do you define the input output relationship of this  how do you analyze it  how do you use it  analysis  use and design  how do you design it to build one ? that is the crux of the subject matter of this course we will go into the details of the subject matter this is further divided into combinations circuits and sequential circuits and all that we will see them as we go along so basically we will look at the basic building blocks of the digital systems and digital circuits find out their behavior how they are built and how to use them in known applications and in a reverse mode given a requirement in a digital system how do you go about designing the requirements or what are the building blocks you need and how to connect them in properly and so on  that is why we call it the design phase design is given the specifications of the circuit how are you going to choose the proper building blocks  how are you going to connect them together  how are you going to make it work to give you the satisfactory results there are two types of circuits basically ; one is called combinational and the other is sequential  both come under the same digital category i will define the difference between these two a little later on  refer slide time 42  05  so  in a nut shell you want to know the course content of this course we will be doing the analysis use and design of combinational sequential building blocks which are required for digital circuits and systems  one sentence course formulation and what are the books we will be using ? a very good book is called ? digital design ? by moris mano m m mano he is called as moris m mano this print is all book i think  it has come in cheap edition it is available  i think it is available in our book stores this moris mano has come through several iterations  it has been there for a while for the last twenty years this person has been writing books and updating and improving the contents  this one is the latest version called as the third edition  digital design edition 3 then we have roth junior c h roth ? fundamentals of logic design ? by jaico publishers  i don ? t know what it is jaico publishers 1998  there are two typical but there are so many books  refer slide time 44  13  any book which as title like digital design  logic design  digital and logic design digital circuits  good enough because these are all very basic stuff we are talking about  the basics  the first introductory material and digital there are scores of books at least about 15 to 20 good books you can see in any library and i will not be following one book strictly  i would like to teach you everything you need to know in your first level course but does not mean that we will be following the book that cover to cover it is not necessary because this is such an interesting course we have been teaching this course for a while so some books doesn ? t cover one topic very well  some book does not cover a topic at all properly so in that case i will go on  i don ? t even have to follow books because i am teaching this course so many times so i will just sort of give an essence of my experience of teaching this course over years  might as well has been a good practice i have been doing it for a while without any much complaints so that ? s what we will do but you need to have a book so that you need to follow the material and do more studies  sometimes we are not spending enough time in the classroom we want to do further studies  sometimes something is not very clearly explained in the class you want to go back and refer to a book so please have a book  i am not saying you should not have a book but do not expect me to follow a book from page to page and it always nice to have a basic digital because book because this is a first course lot of other things are done as i said today digital world is technologically a very advanced world so lots of opportunities are there for you to do digital  there may be an advanced course in digital that you may do  you may be doing some mini project  you may be doing even a major project in digital area so it is always nice to have a reference book with you instead of always having to borrow or copy somebody else ? s book and all that so if you are thinking of buying a book you can buy one of these two books  there are so many others also if you are doubtful about a particular book and if you want to know if it is good or not you can always ask me  you can browse through and that will tell you so these are the various things we need to know and as we go on we develop a material and for homework i may have to prescribe some of these books so that may be a good idea that way to have  at least there must be enough for books available so that you know what problems are there for the class this is where we will stop today and in the next lectures we will start with the detailed subject matter as i said levels and all that  we will be more specific how to present levels  what do you mean by level and what are digital signals and how do you represent digital signals and then we will start with the simple gates and then go on it is a good idea to have a book and follow the book read the book sometimes it is better to read ahead of the class if possible so that way you can understand this topic better i will prescribe homework from the book so that you can start also working out problems  okay we will stop here today digital circuits and systems prof s srinivasan department of electrical engineering indian institute of technology madras lecture  6 karnaugh maps and implicants today we will continue with the simplification of boolean functions or logic functions the last lecture we talked about boolean algebra being a set of formulae or identities to be used to simplify a given logic expression without changing the boolean relationship that is for a given set of input conditions an output is defined as true or false so when we make a simplification that should not change whatever simplifications you make the output should still be true for all the input combinations for which it is supposed to be true or it would still be false for all input combinations for which the output is supposed to be false now we will continue this and use a graphical method as i mentioned earlier it is not a new theory or anything it is a systematic procedure actually if you want to call it as a procedure at best it is a procedure  systematized for easy handling or when the function gets bigger and bigger so that it can be automate there are other automated reduction techniques other than graph method we will not see them in this course but these are all having the same type of concept identify wherever possible the combining of the terms what did you do yesterday ? in order to reduce or simplify the function if you can reduce the number of terms it is good and in each term if you can reduce the number of variables it is good so we will use the same method to see wherever possible we can combine the terms into a smaller term two terms can be combined into a smaller term then there is a saving in hardware the same concept will be applied in graph method and later on there are methods called as computerized methods  implicant methods and all that we will not see in those things because conceptually they are same  they are merely procedures if you know how to do it conceptually you can learn the procedure any time depending on your requirement so we will start with the map method of boolean simplification today it can also be called a graphical method but usually it is called a map method what we have to do is to map the truth table on a graph look at the truth table there are 1s and 0s in the output and we want to combine all these 1s together to give the minimum possible solution now we will map it on a graph and see whether there is a possibility of combining those that ? s all we are going to do we are going to repeatedly use the same concept of boolean algebra again and again there is nothing like we are going to use a different set of equations or identities  it is the same set of equations or identities we are going to use but in a systematic way so let us take the example ; what is a map ? a map is nothing but all the variables are present in a map in true form and complement form in other words we will have a value corresponding to each input combination that is possible let us take an example of 3 variables let us say the variables are a  b  c  what are the eight combinations of a b c ? they are a bar b bar c bar ; a bar b bar c etc finally abc that means there are eight possible values so we will now draw a graph with eight cells this is how it is going to look like you can draw it horizontally or vertically doesn ? t matter  refer slide time 7  18  i need eight cells in this map i call this a 3 variable map  eight cells corresponding to this a bar b bar c bar ; a bar b bar c ; a bar b c bar ; a bar b c etc will be represented here i will say on this vertical axis i will let a vary the true complement value  true value this 0 here means a bar this cell will have a value  the value of this cell a is a bar  value of a for this cell is a bar and value for this cell and for the horizontal axis we will let b and c vary there are four possibilities of b and c varying such as b bar c bar  b bar c  b c bar  bc so that can be represented by 0 0  0 1  1 0  1 1 when i say 0 0 here for bc  a0 b0 c0 correspond to a bar b bar c bar that ? s all here this will be a b bar c bar you don ? t have to write it  it is the first time i am doing so i am writing the corresponding values in the input combinations  input combination i am writing in the cell but the cell is supposed to have that combination once you are familiar with this you don ? t have to write it then the next will be 0 1 for b and c so this will be a bar b bar c  this will be a b bar c so what will be the next value for bc ? it is 1 0 or 1 1 but if we put 1 0 what will happen is i have to write a bar b c bar but i would like to have this adjacency rule remember  this type of identity i am used to  repeatedly to combine to knock of a variable for example  if we have a bar b bar c or a bar b c then i can take this as a bar c and b or b bar and knock it of and write it as a bar c that means i should only let one of these two variables change between b and c i should let only one of those variables change from cell to cell from one cell to the next cell either in the horizontal direction or in the vertical direction if you let only one variable change and the other variable keeps its value then i will be able to combine it with a previous cell  refer slide time 10  08  in this case when i say 0 1 and 1 0 b changes from 0 to 1  c changes from 1 to 0 both the variables b and c change at the same time that means it is not possible to combine them effectively so the technique is then not to write here for 1 0 for bc write here as 1 1 that means i will let b change from 0 to 1 and c remains and i let c remain as 1 that means this will be a bar bc and this will be abc and finally the only other value which you have not used is 1 0 that means b is 1  c is 0  a bar b c bar a bar a b c bar  refer slide time 11  53  the advantage of this representation is between two adjacent cells either in this direction or in this direction only one of the variables changes from 0 to 1 or 1 to 0 the other variables remains same that means i can use this formula repeatedly this formula identity a or a bar is 1 can be used if two adjacent cells are same and both of them are one i can combine them to knock of the variable which varies from this to this and retain the other two variables which do not vary from  refer slide time  11  40  this cell to this cell the same thing applies here also here a only changes  b value c value remains same in all these cases and this adjacency work also backwards round its a wrapping it is something like a circular symmetry here so between this cell and this cell a bar b b bar c bar c bar that means b only varies  b is 0 here 1 here c is 0 0  a is 0 in both cases and if i had four columns or four rows in the vertical direction then also i can apply rotational symmetry if i had two more rows this and this will be adjacent  refer slide time 12  30  so in this map i will call each of them as a cell and the cells in the map which are adjacent to each other in horizontal direction or vertical direction will differ in only one variable and all other variables will be same these are called adjacent cells  differ in the value of only one variable  refer slide time 13  16  adjacency applies from end to end also that is what i am trying to say i am trying to say that adjacency applies from end to end as if we are folding it around wrapping it around in a circular way so what does it mean now ? if i have values of output is 1 or true for this case and for this case that means the truth table will have a 1 in this cell as well as in this cell when i have a 1 and 1 in two adjacent cells of the truth table i can knock of the variable which is different from these two cells and have a simplified expression  that is what we did for example  yesterday we said we had a bar b bar c bar and a bar b bar c both of them are one in my truth table and i have written it as  refer slide time  14  32  so that is what we are going to use in a graphical method we are going to use the identity a plus a bar is equal to 1 repeatedly in the graphical method till we can identify the entire group of 1s till we can do it no more hence it is a more systematic way of doing it and you more or less certain at the end to be exhausted all the possibilities because it is a graphical representation so let us map our original function which you have been talking about in the last couple of classes this is how  refer slide time  15  15  you write the map you always write the map like this with all the cells and mark with 0s and 1s on the left hand side for this variable and 0s and 1s on the top for these variables then only the map is complete this map is also called as karnaugh map karnaugh is the guy who probably invented this  it is named after him  they simply call it k ? map you will see this k ? map mentioned in text books or karnaugh maps let us apply that function in the truth table that we had originally for f is equal to a plus b c bar which are the entries of the truth table ? it was 1 in the output you remember abc this was the truth table  this was 1 bc bar this was the original truth table  refer slide time  17  04  we have been talking about in the last few classes  the examples  refer slide time 17  25  so there is a 1 corresponding to this row and all these four rows the output and for all other rows the output is 0 so the output was 0 for the first row  second row and the fourth row  1 for third row  fifth sixth seventh and eighth rows but we don ? t call it 1 to 8 we always call from 0 to 7  the reason is very simple  with 3 variables i can have eight values but if 0 has been included as one of the values i can go only from 0 to 7 or eight values so when you have a number representation 0 is an essential thing i can ? t have a number representation where i can not represent 0 so with the binary number one with one digit or one bit of binary even though there are two values possible the one of them happens to be 0 or the other one happens to be 1 so i can only represent a maximum of 1 using a binary bit we have two binary bits or two bits i can have four values but the first value is 0 so it is 0 1 2 3 0 is 0 0  1 is 0 1  2 is 1 0  3 is 1 1  i can ? t represent four using two bits since it is going to be binary and we always have to have 0 as the one of the values in digital design or digital system or digital representation wherever digital things are involved we always start with 0 and not 1 so the first entry is always a 0 entry so that way i will call this zeroth row  first row  second row  third row  fourth row  fifth row  sixth row  seventh row and we also call these variations or combinations of the inputs each of the input combinations of a truth table are called min terms so first min term is min term 0  second min term is min term 1 so there is a symbol for the min term a small ? m ?  already there is k ? map here so this is called min term 0  min term 1  min term 2  min term 3  min term 4  min term 5 so min term 0 to 7 are the eight min terms possible for with 3 inputs and when it comes to max terms we talked about max terms also yesterday we use a capital ? m ?  a capital ? m ? for max small ? m ? for min so i don ? t even have to write this truth table of course this one is what we should get finally this is what we started with but this is the truth table which we considered and said that this is same as this we first do a circuit for this then you said that this circuit can represent a truth table of this type and then we proved yesterday using boolean algebra that this table can be represented to this function now my objective is to reduce this table again to this using karnaugh map yesterday we did it using boolean algebra today we will do it using karnaugh map so i don ? t need this any more unless at the end to verify whether the result is right or wrong this is what i should get we will see whether we get that so i have the truth table and i have to represent it in karnaugh map  map it in a graphical representation in a k ? map and you don ? t even need this truth table somebody is going to give you the truth table and then you are going to map it so why waste time because you know what the truth table is all about all possible input combinations and the combinations for the input for which the output is 1 and this information is called the truth table you list all the input combinations possibilities and also list those combinations for which the output is 1  refer slide time 22  25  therefore instead of saying all these in such a big way can i not simply say this function f has output 1 for m2 m3 m4 m5 m6 m7 because you know what is m0 for 3 variables it has to be a bar b bar c bar or p bar q bar r bar or whatever x bar y bar z bar whatever it can be x y z  p q r  alpha beta gamma  a b c  doesn ? t matter but as long as there are three variables  only these eight combinations are possible so what is the point in writing everything in a big table and say this is 1  this is 1 and this is 1 instead i am saying this f is equal to min term 1 m2 min term m4 min term m5 min term m6 min term m7 for these min terms output is true or 1 since it is a sum of product expression if you remember each of these product term i represent it by a sigma so we now say my function is i will remove this now  refer slide time  22  30  the given function is f is equal to sigma m standing min terms instead of even having to say m m m repeatedly try to minimize having to repeatedly do the same thing over and over again out of laziness or whatever you want to call it out you want to say stationery or just more or less boring just don ? t have to keep on removing the same thing over and over again so what i am saying is sigma m means the sum of the products and what are the product terms involved or the min terms ? it is 2  4  5  6  7 so if i give you the function like this f is equal to sigma m2 four five six seven you know the truth table and you know the entries in the truth table for which the outputs are 1 and the others are 0  refer slide time 24  57  so my job is to map this into the karnaugh map represent into this karnaugh map this truth table so i don ? t need to give you this so from here it should be able to directly come to this you would directly be able to get this now  in order to help you in the beginning  later on you may drop this  you can write these min term numbers in the cells this is min term number 0  1  2  3  4  5 so that you won ? t make a mistake in the beginning and then later on you know all that by experience these are the min terms my job is to map or represent on this map the min terms for which the output is 1 or true these are 2 4 5 6 7 so this is the k map of the function given as this which can also be expressed as this or can be expressed as sum of products as a bar b c bar plus a b bar c bar plus plus plus five terms we wrote yesterday so this is the karnaugh map and this is the function how do you simplify it ? deduce it so that fewer literals are used and fewer terms are used in final implementation in the final representation that is where adjacency rule comes in you know the two adjacent cells differ in only one variable so you find a one in one variable one cell and one in the adjacent variable cell  adjacency works left to right  top to bottom  end to end not diagonally adjacency does not work diagonally you have to remember that there is no adjacency diagonally so anywhere i find in a 1 top to bottom or side to side i will try to combine these two and find out which is the variable which is appearing in one cell as a complement and the next cell as a true in one cell it will appear as b bar and in the next cell it appears as b then b goes because of the a plus a bar is equal to 1 or b plus b bar is equal to 1 relationship that is easy to identify for example these two cells a appears as 0 here  1 here when you take these two cells and connect it like this  this is equal to  later on you will be read it directly from the map now the first time i am going to write it as this is a bar b c bar this corresponds to b   refer slide time  27  06  this corresponds to c bar and this corresponds to a bar so you write it as a bar b b c bar and this corresponds to a b c bar these two together can be written like this  refer slide time 28  47  what is common between these two ? b is common and c bar is common so b c bar is common so take bc bar using that distributive property say a plus a bar is 1 and since a plus a bar is 1 it is a known identity this is same as this so these two cells can be merged or combined into a single term of bc bar each of the cells have three terms three variables i have knocked of one of the variables so two 3 variable terms have been reduced to one 2 variable terms that is the simplification procedure there is nothing very great about it  all you have done is identified the adjacent cells where 1s are marked and have found out which of the variables was  constan ? .28  35  these two cells which of the variables change between these two cells and the changing variable is removed  that is all hence you don ? t need all these algebra because you know b is constant between these two  c bar is constant between these two  a goes from 0 to 1 so since a goes from 0 to 1 you can write this without a with b and c bar so you don ? t need this algebra i just wrote it for your convenience now let us extend this argument to these two and these two  refer slide time  29  15   these two will have a common  b common  c varying so i can write this as ab between these two a is common  b bar is common  c changes so these two if i write together it will be a b bar because a is common between these two b bar is common between these two and c changes from here to here which has to be knocked off and between these two a is common  b is common in these two  c changes from here to here so c gets knocked off so this is ab but again these two cells and these two cells adjacent here it is b bar  here it is b  a remains constant throughout so instead of doing it in two steps and instead of grouping two 1s each time and then combining them again with one more step i can group also four 1s at the same time these two can be combined to as the one group in which it is a b bar or ab which is equal to a i don ? t have to do it this way step by step but i just showed it to you how it works but you don ? t have to do it this way  refer slide time 31  51  all you have to do is see that a is constant throughout these four cells across the four cells a is common  b changes from 0 to 1 across  c changes from 0 to 1 1 to 0 so both these variables b and c or neither of these variables b and c remain constant throughout so they both get knocked off so it is not necessary to knock off only one variable  you can knock off two variables  you can knock off three variables and in order to knock off three variables you need eight 1s in a group therefore if you have a more number of 1s in a group adjacent cells it is better for us because we are going to simplify better  our reduction is going to be more that means without going through all these algebra all this background theory if i give you this same map now all i said was 1 1 1 1 1 i will simply do it combine this and combine this  refer slide time  32  08  this combination i will write it as a this combination i will write it as bc bar so my final function is the or combination of this or this bc bar this is the function we started with that means k ? map can also give you the simplification that the boolean algebra gives but here you know that i have exhausted all 1s  how do you know it is done ? i have exhausted grouping all 1s no individual 1 stays out of course if it stays out you have to write it separately and we have also always considered the largest possible groups of 1  refer slide time 33  12  there are four 1s possible plus here there is a group of two 1s possible so whereever possible you have taken the largest possible group in that particular group so there is no question of doing it better than this so this way you are more confident of your final output compared to boolean algebra where you might have or might not have used an identity which should have been used there lies the difference between a karnaugh map method and the boolean algebra but the boolean algebra is what we have used finally a plus a bar is 1 is boolean algebra it is not as if some new technique i will not say new theory it is a technique  the procedure may be different but not the theory and now you can extend this to four variables four variables will have sixteen cells  two variables here two variables vertically and two variables horizontally and you can do like that we will take an example of four variables simplify minimize using k ? map the function f i can now give the variables for a change we will go from abc p  q  r  s  function of four variables p  q  r  s which is true for the following min terms i am going to write arbitrarily i am not having any particular function in mind when you put sigma m that is the following min terms are having 1 as the output or true as the output and rest of the min terms are having 0 as the output that ? s what we write this is a sum of the product representation in min term form so let us say 0 2 3 7 11 13 14 15 and so on it is an arbitrary example no specific system i have in mind no specific circuit i have in mind so i have a function of pqrs four variables and if i write a truth table i will have sixteen rows and to this sixteen rows min terms min term number 0  min term number 2  3  7  11  13  14  15 i have true outputs or one output and other min terms namely 1  4  5  6  8  9  0  12 i have 0 or false as outputs for such a function i wanted to do a karnaugh map and minimize it  reading it by combining the ones as effectively as possible write the minimum possible expression minimum sum of product msp not sum of product expression sop is sum of product but this is non minimum so it is a canonical sum of products which is the standard truth table representation then the sum of product is anything which is having some product relationship and minimum sum of product is what you can not reduce further as a sum of product expression let us do the karnaugh map  we will have four variables p  q  r  s sixteen cells must be there  this is the k ? map of the 4 variable 0 0  0 1 remember 1 1 and then 1 0 because the same argument we had earlier for bc and the horizontal scale we will now apply to pq the vertical scale  refer slide time 39  46  i want only one variable to change from here to here so only one variable changes if i had put 1 0 both the variables would have changed i don ? t want that situation then they are no more adjacent two cells are defined to be adjacent only if they differ in one variable and if they differ in more than one variable then they are not adjacent according to the adjacency relationship even though physically you put them together they don ? t become adjacent so this is min term 0 1 2 3 min term 4 5 6 7 min term 8 will start here because there is 1 1 that comes later than 1 0 so 1 0 will have a min term 8 9 10 11 12 13 14 15 this is the 4 variable karnaugh map which is standard whether variables are a  b  c  d or p  q  r  s or x  y  z  w or whatever alpha  beta  gamma  delta now what are the min terms for which the output is true or 1 those have to be mapped on to this graph ? these are 0 2 3 7 11 13 14 15 later on when you start doing a few more of these exercises you will drop these min term numbers so this will become less cluttered from a clearer map now i put it purposely for you to get used to this so you can remove all these and later on you will not see those now we have to combine them try to group them as many 1s as possible a in a given group but they should all be adjacent i can straight away see a group of four 1s 1  2  3 etc you always start with the largest possible 1s largest possible group and then come down  don ? t start with the smallest number because sometimes the smaller group may get submerged into a larger group later on so start with a larger group the idea is to combine all the 1s but you can combine a 1 more than once remember the boolean algebra  yesterday when we tried to simplify the boolean algebra we used the same time twice because a and a is a  a or a is a so i can use the same term twice no problem but i should not leave out anything everything should be included but it is alright to include a particular cell which is asserted as one more than once doesn ? t harm us in fact it will help us sometime so first group of 1s is this  refer slide time  41  00   i will call this 1 because there is no space here i will write later on then we have these two 1s  these two 1s  these two 1s and so on so there are four 1s available here and all of them are to be combined i can ? t see this one being combined anyway other than this because all other adjacent cells are blank so this has to be combined this way so is the case here here though i don ? t have to combine in this way because this cell is adjacent to this cell because this is 0 0 0 0 this is 0 0 1 0  r changes from 0 to 1 between these two cells 0 and 2 r changes from 0 to 1 whereas pq and s are remaining as 0 0 0 so cell number 0 and cell number 2 are adjacent even though they are physically not adjacent that is what i am saying physical adjacency is different from logical adjacency we are talking about here we are talking about logical adjacency so that way i don ? t have to mix this here since this is going to be combined this is going to be combined   refer slide time  42  25  this is not being combined anyway so i will combine these two so i will call this 2  i will call this 3 there are four terms there are now four terms of groups of 1s and each of them i have to write a sum of product expression then my final output f is sum of all these product expressions sop minimum sum of product so what is 1 ? 1 is this  variable p and q change all over so you have to write only this r and s are 1 so rs so 1 corresponds to rs  1 is rs  2 would be  pq are 1 1 they remain as 1 1 here and here so they have to remain in the expression  here s is 1  here also s is 1 where r is 0 here r is 1 here so r changes from 0 to 1 between these two cells so r gets knocked off r gets knocked off from this cell to this cell whereas s remains as 1 so 2 is nothing but pqs for 3 it is the same argument pq r remains 1 s changes from 1 to 0 s gets knocked off r remains so 3 is pqr finally the fourth one is pqr 0 0  r is 0 here r is 1 here r is 0 here r gets knocked off here s remains 0 so it is p bar q bar s bar that means my final expression is this rs plus pqs plus pqr plus p bar q bar s bar each of these terms 1 2 3 4 which are product terms which combine to become sum of product later on is called a prime implicant  refer slide time 47  54  an implicant is any group of 1s suppose i write a term i won ? t do that  supposing i did between these two ones that means it is rs 1 1 p 1 so  if i write p rs p rs will mean these two cells cell number 11 and 15 cell number 11 and 15 if i combine together i will write it as prs i will not do it because i am covering a larger group of 1s four 1s so there is no need to do this but suppose i did it it ? s called an implicant  it ? s not a prime implicant a prime implicant is a largest possible group of 1s in that particular context for that group  you can not find a larger group an implicant gets submerged into a prime implicant a prime implicant is a largest possible group of 1s that you can find for a given group out of all the prime implicants any prime implicant which is essential for the final representation  i told you two things you have to make sure all 1s should be covered irrespective of the fact that 1s can be covered more than once for example  this one has been covered 3 times this was covered along with this  this was covered along with this  refer slide time  47  15  so that is okay but in each time we have included at least one 1 at least one cell which has not been combined earlier when i wrote this number 2 term this one has been included new  when i wrote three terms i included this one new i defined an implicant  i defined a prime implicant and now i am defining an essential prime implicant in an essential prime implicant there will be at least one 1 or one cell which has not been covered in any other prime implicant there should at least be one cell or one true value which has not been included in any other group so such a prime implicant is called essential prime implicant in this case all the four are essential prime implicants because this one and this one can not be covered and these three 1s can not be covered other than this group  this one will not be covered other than this  this one will not be covered other than  these two 1s will not be covered in any other way so here all the four prime implicants are essential prime implicants sometimes occasionally we will get non essential prime implicant  refer slide time 49  27  supposing you have different ways of combining a 1 in two groups you can combine this way or that way both of them will lead to the same result or similar results such a group is called non essential prime implicant that means there is a more than one way of combining a 1 which is not covered otherwise as a essential prime implicant but one of them is essential otherwise that 1 will be left out suppose i have two different ways of combining a particular 1 i have exhausted all 1s in a map  all entries in a cell for which the output is true i have exhausted except 1 there is a 1 hanging out which i have not covered yet in any essential prime implicant or any prime implicant now i want to combine this 1 and i can find several possibilities or at least two possibilities but one of them may be required the other may not be  if i take this the other one is not required if i take the other one this is not required so this is a non essential prime implicant prime implicant is important it has to be covered but each of those two prime implicant which i will get by combining this one with two different ways are called non essential prime implicants so it is not necessary to include all non essential prime implicants for the final output but it is only necessary to include as many non essential prime implicants as required to cover all the ones in the map whereas essential prime implicants all of them should be covered in your final output we will take an example of non essential prime implicant  how a particular one can be covered in different ways and how only one way may be required and all other ways may be redundant that will tell you more about a non essential prime implicant we will see it in the next lecture digital circuits and systems prof s srinivasan department of electrical engineering indian institute of technology  madras lecture  7 logic minimization using karnaugh maps in the last lecture we introduced you to the map method of boolean simplification we drew a karnaugh map which is a graphical representation of a truth table filled this graph with 1s corresponding to the cells for which whose min terms had a output true and 0s of course we didn ? t mark 0s to avoid cluttering of the map wherever we did not mark 1 in the map the entry was a 0 which was purposely left out so that the map doesn ? t get cluttered the objective is to identify groups of 1s as large as possible of course satisfying the adjacency rule and remove or knock off as many variables as possible so that by repeatedly doing this we can get a simpler representation of a given boolean function so we look at a few more examples today some special cases and all that we will take an example of a map like this  four variables i will call these variables abcd  want to say this map as 1s in the following cells  this is the pattern of 1s that means this is a function this expresses the sum of the following min terms  this is min term number 2 so you will have to sort out from here 0 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15  so we take  2  6  7  9  13  15  this is the map  refer slide time 5  19  now the idea is to group the adjacent ones with as large groups as possible keeping in mind the group should be as large as possible if you have a smaller group which can be totally submerged into a larger group we should not consider the smaller group and we have to make sure that all 1s are covered and we do not mind one being covered more than once these are the rules make as large groups as possible keeping in the mind the adjacency rule  make sure all 1s are covered  do not worry about combining a given 1 more than once so in this map groups of two 1s are only possible 1 2 3 4 so i can say this because this one has to be covered any way  this is standing out separately the most efficient way would probably be not covering anything more than once you can cover 1 more than once if it can result in a smaller group if something is not going to result in a smaller group then there is no point of covering 1 more than once so in this case there are only two ones this is going to be a group  this is going to be a group  this is going to be a group all groups are having two 1s so there is no point in unnecessarily doing this and doing this so this is how i will write this three groups of two 1s each and what would this be in terms of the product expression ? f would be sum of these products 1 2 3 this would be ac bard plus then this will be bcd plus  this would be a bar c d bar  refer slide time 8  26  now instead of doing this way suppose i marked it slightly differently that means suppose i did it like this it is obviously not the most efficient way you can see that because there is a small map with few 1s but in general when you have a large map with large possible groups you may miss out and may do things like this i brought this up to explain some of the definitions we gave in the last lecture i talked about implicant  the prime implicant and an essential prime implicant an implicant is any group of 1s and a prime implicant is the largest possible group of 1s in the given group of course that can not be an essential prime implicant  a prime implicant is a group which can not become part of another implicant an essential prime implicant is one which i said if you remember has at least an entry of one not covered in any other prime implicant so this way here  refer slide time  9  30  this is the essential prime implicant i will call this 1 2 3  this is 1  1 is an essential prime implicant because this one can not be covered otherwise  3 is an essential prime implicant because this can not be covered otherwise now is 2 an essential prime implicant or not is the question ? do you think 2 is an essential prime implicant or not ? the way i draw it is an essential prime implicant because these two 1s can not be covered anyway but when i draw this map there are two ways of combining these two 1s this is an essential prime implicant  this is an essential prime implicant  refer slide time  10  28   is this a prime implicant ? what is a prime implicant ? the largest group of 1s possible within that  it ? s a largest group of 1s possible in that group so all the four here i call this 1 2 3 4  here all the four are prime implicants  here all the three are prime implicants but one and three are clearly essential prime implicant  2 is not an essential prime implicant it is a non essential prime implicant for the simple reason i can cover these two 1s in two other ways so in this case again 1 is an essential prime implicant  4 is an essential prime implicant so 2 is a non epi but the reason that this one could have been combined with this i could have it small it is an essential prime implicant i could have covered this to make another prime implicant so this is the only way in which i can make prime implican otherwise that one gets left out only then it is an essential prime implicant we are not talking about the most efficient way here remember that i am only talking about definitions just because it is an essential prime implicant it does not mean that it is the most efficient way of doing it so these are non essential prime implicant  it is a non essential prime implicant because this one could have been combined with this to get another term  this is two in this case  this term could have been combined with this term to get another term 3 in this case so this is a non essential prime implicant  refer slide time  12  14  but the same argument 1 and 4 are epi ? s and 2 and 3 are non essential prime implicants having drawn in this case f is equal to 1 or 2 or 3 in this case f is 1 or 2 or 3 or 4 and all are two terms  two 1s all are two variables  a three variable term there are only three terms in this case  four terms in this case and it is very obvious that this is a less efficient simplification compared to this  refer slide time 13  39  but the fact remains that there are some non essential prime implicants that has to come to the final expression in order to complete the expression this is a very clear case of a non essential prime implicant inefficiently used in this case a non essential prime implicant has been used efficiently because it was very clear and obvious apparent just looking into this map sometimes there may be two non essential prime implicants  each of them can lead to a final solution which is correct and both of them may have the same simplicity or complexity in which case you have to choose between 1 and 2 or one or the other of the essential prime implicant in which case the choice is not unique but in this case the choice is almost unique i would not choose this against this if my aim is to reduce the logic which is again you have been proclaiming i will not go for this but i will give you another example where i could have combined in two ways both of them resulting in a same simplified expression in terms of number of variables and number of terms involving a non essential prime implicant that has been an interesting case so we will take another example for a change i will call it wxyz and this is my map  refer slide time  14  59   so what is the map now ? f is sigma m  0 2 3 5 7 8 10 11 14 15  these are the min terms for which the output is true for all the min term outputs i just wrote the map and then wrote the min term normally it is the other way normally you are given the min terms for which the output is 1 from the truth table or from the word description of the problem either a word description of the problem or a truth table is given to you which will tell you what are the min terms for which the output is 1 and automatically the other outputs are 0 but in this case just to illustrate a point in terms of implicants  prime implicant  essential prime implicants  non essential prime implicants and so on i am just taking maps to give you examples so i have to first draw the map and then tell you what are the min terms which are true in this map now what are the different ways of combining them ? we have to again efficiently do it  refer slide time 17  34  you have to make smallest possible number of prime implicants and make a combination which is the minimum possible combination so now this one  this one  this one  this one together form a map  refer slide time  16  50  group a prime implicant because they roll over top to bottom and left to right so i will call this first prime implicant i said the other day the adjacency  this cell is adjacent to this cell as well as to this cell  this cell is adjacent to this cell as well as to this cell  this is adjacent to this as well as this and so forth hence all the four cells are adjacent to each other  it is very similar to something like this or something like this and this is in essential prime implicant because this one would have been left out otherwise or this one for that matter because i could have combined this some other way but not this  i could have combine this but not this  refer slide time  17  50   so because of these two 1s we present this becomes an essential prime implicant and essential prime implicant has to necessarily find its place in the final expression the debate is only about how many non essential prime implicants to be included to keep the function minimum and at the same time not omitting any one in the table that is the only thing will have to be concerned with now this one again has to be combined there is no other way i could combine this one except this way otherwise this one gets left out completely so i will call this 2  one this is 2 now i have two options  i can combine these four into an essential prime implicant in fact i should combine this way because this one would be left out otherwise of course i can always combine these two  these two are combining is not a solution because a prime implicant is one which absorbs smaller implicants so you put this one is not a solution because when i have four larger prime implicant i can not put this one as an implicant i have to cover this so this is an essential prime omplicant for the simple fact this one would not be covered otherwise so this will be number 3 thus the only one that is left out is one in order to complete my simplification i have an uncovered one and that one has to be included so this i can do it in two ways i can do it in this way i will call this 4 and these four 1s are adjacent to each other because this is adjacent to this and so forth or i could have combine these two 1s and these two 1s so either this way or this way these two 1s  refer slide time 21  03  now this one was what was left out remember  this min term number 3 was left out i had to include it in order to include it in a largest possible group of 1s i can do it this way or i can do it this way and this one i will call 5 unlike in this case where we had an option which is obviously less efficient we now an option in which one is essential prime implicant  ii is essential prime implicant  iii is essential prime implicant because of these individual things  iv and v are non essential prime implicants because essential prime implicant is 1 in which at least one unique 1 is covered in that group no other way it should be able to cover that one that is not the case with iv and v because this one can cover this way or this way so everyone of this 1 can be covered and all these other three 1s can be already taken care off in this case all these have been taken care off except this one this has been taken care of  this has been taken care off  everything other than this has been taken care off so this one can be covered either this way or this way so when iv and v are two options of covering this min term represented by this iii then it is not an essential prime implicant  iv and v are non essential prime implicants therefore i ii iii are epi ? s and iv and v are non epis but it is enough one of iv or v is included because four and five both cover this one and this is the only one which has uncovered after considering i ii and iii the only entry in the truth table which was not covered in our simplification was this entry which will be covered either by this or this both iv and v can cover this one so where is the need for both of them to be present and the choice is not easy because both are of same complexity  this is four ones this also is four ones if i is 4 1s the other is 8 1s so the complexity is different so you know what to choose if both have equal complexity where is anything to choose from ?  refer slide time 24  41  so now i can write the final expression as i or ii or iii or iv this is one option or this or is english or not the operator or i or ii or iii or iv  this explains to you a non essential prime implicants and its role in the final simplification so i wanted to bring about the definitions of implicant  prime implicant  essential prime implicant and non essential prime implicant and the role of non essential prime implicant in simplification it is not that they are trivial they can be ignored they are essential sometimes so you may have to include but how many of them you will include and what are the non essential prime implicants you will include depends on the overall goal of minimum sum of products i don ? t want to re write this now  you know each of these we can complete this  i will have i ii iii iv but i ii iii iv are variables of or product terms with variables abcd or in this case what wxyz so i ii iii iv and v are each product terms of variables wxyz you write it and finally get the simplified minimum sum of product expression now we can have a four variable map what is meant by this ? let us do this for example we started with simple gates and we drew the simple structure using gates and wrote down the expression and then said that write a truth table for that expression and we wrote the truth table found out the truth table had many more entries than the original circuit had so we tried to see why and we saw that the simplification of the truth table resulted in a smaller circuit that we started and we said simplification is possible using either boolean algebra which you saw or by mapping method which you have seen so let us revisit that and see now we will do the reverse now this is the sum of product expression you have given a system of four variables wxyz having an output f circuit of system has the following boolean functionality as a functional relationship between input and output given by this boolean equation not identity boolean expression this boolean expression gives the relationship between f on one hand of the output and wxyz on the other hand as inputs  refer slide time 27  46  what will it look like we will see because we have simplified this ? for that i need to explain this 1 2 3 4 5 i have no reason to choose this or this so we will go with this so let us quickly write what is 1 1 is these four 1s  what are the expression terms of wxyz ? this is x bar z bar so i is x bar z bar  ii is these two w bar xz  iii is this which is wy and iv i am going to take instead of v so iv would be yz so my expression is done x bar z bar w bar xz wy yz these are gates with inputs x and z of course inverted wxz where w is inverted w and y  y and z these are four and gates  outputs of these four and gates tied together by an or gate that is  this is x again  w  z second term  third term is wy and fourth term is yz  z has to come from here which is here  refer slide time 30  53  so if you don ? t want to lose track of these inputs you can write it one more time here  yz  wy  this is zw bar x  xw bar z  this is w bar x bar z bar all of them combined in an or gate with four inputs this is the function represented by this circuit whose karnaugh map is this and whose functional description is this  refer slide time 32  56  of course i can always write the truth table the truth table is only an expansion of this  i will have to put wxyz all the four combinations 0 0 0 0 to 1 1 1 1 and then put here finally 1 0 so it requires one 3 input and gate  one 4 input or gate  three 2 input and gates and three inverters  this is inventory you have to ask for these components in order to build a circuit and you can now associate with wxyz some signals as we did in the example previously about some system which is to represent a particular condition wxyz may be four parameters we are monitoring and on these incidence of parameters in this particular way will trigger an event at the output of this system that could be an example of the use of this so you go for a definition of the word description of the truth table and the boolean relationship mapping and then simplification and then drawing the circuit and then of course you have to get the components  build it and test it now the variables xyz we have used three or four wxyz and iv or v you may have used  vi we may use  seven we may use and digital systems today are very complex a system like a micro processor  a system like a controller  a system like a automotive system or a fuel injection or even very complex systems like missiles i already told you missiles and aircrafts and things like that so i don ? t you can work with three variables four variables and three variables and four variables classroom exercises what will happen if variables are more than four ? we have already represented a two dimensional now it has to go for three dimensional for a five variables what do we do ? so let us say we have a five variables let us call these variables abcde  refer slide time 34  58  i can only represent sixteen cells in a four variable map two dimensional and five variables will have how many min terms ? it will have 32  2 power 5 so we need to have one variable the variables we start listing them in a truth table will become starting with 0 0 0 0 0 0 0 0 0 1 and finally it will become  refer slide time  34  38  this is min term 0  min term 1  min term 31 or i told you that you will have to start always with 0 min term and go on till the last min term which is 2 power n minus 1  5 is 2 power 5 is 32 minus 1 is equal to 31 so 0 to 31 will be min terms so one way to do this would be draw two maps considering only four of these five variables each you leave the a out because first sixteen entries of the truth table m15 would be 0 1 1 1 1  m16 would be 1 0 0 0 0 so these entries will have a is equal to 1  these entries will have a is equal to 0 first sixteen entries of the truth table will have a is equal to 0 and second sixteen will have a is equal to 1 so i will draw this map with variables bcde always remembering a is equal to 0 in this map likewise i will do bcde one more time always remembering a is equal to 1 in this map now the min terms would be m0 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 so whichever min term is one output you map it map in the corresponding cell either here or here if it is the min term corresponding to terms between 16 and 31 the 1 will up here so it will go in this part of the map so you can map it the way you would map the four variables map graphically but while reading you have to be careful the adjacency works between these two maps the one here and the one here are considered adjacent  refer slide time  37  54  because the only variable different from these two maps this is b is equal to 0 c is equal to 0 d is equal to 0 e is equal to 0 and this is also b is equal to 0 c is equal to 0 d is equal to 0 e is equal to 0 if i have 1 here and a 1 here the variable a is 0 here  variable a is 1 here so these two cells are adjacent  the cell number 0 and 16 are adjacent  refer slide time 38  34  therefore the corresponding cells in this map and this map are adjacent that property has to be built in while reading the map that ? s all so i map the entire variable so we will use the same arbitrary thing  you will do this 0 2 and this for a change i will put here now these four 1s which you called prime implicant one essential prime implicant one here will appear here also in both the maps so this i will call 1 including this  these two together are 1  refer slide time  39  37   now these four again i don ? t know what we called it here we called it iii but don ? t worry about it  this and this are again are common between these two maps the same cells so i will call it ii this and this now what is left out ? these four are left out i could have combined this way or this way doesn ? t matter i will combine this way but this is not common to this map 1 1 1 1 here unique to a is equal to 0 or not to a is equal to 1 so i am going to call this iii in which i will have to make a is equal to 0 in that this one is unique to this map but not to this map so this is iii and these two 1s i will call it iv because this is not here  this one is unique not to the other map so v  refer slide time 41  09  so there are five prime implicants all are essential i made sure that is simple because it is an example  with five variables i wanted to drive home the point of how to simplify a five variable map so i made them essential prime implicants so you need not worry about non essential prime implicants or proper choice of that so we have five epi ? s 1 2 3 4 and 5  actually writing the minimum sum of product expression based on this is called reading the map somehow they call this reading the map so we should be able to read the map now  they use the term reading the map after putting all these 1s and grouping them identifying them in groups you are writing the final expression and that operation is called reading the map so now i have to read the map to get 1 2 3 4 5 and then put it together as one expression of f in terms of abcd and e already we have said that i was here this is c prime e prime and since this is common between a is equal to 0 a is equal to 1 so 1 is c prime e prime or c bar e bar want to call it c prime e prime c bar e bar or not c and not e whatever  ii is again common between these two maps that would be bd then comes the third map third epi and the third epi is this between these four cells which is de but this is not available here so i will have to include the information and it is only available in the a bar part of the map i will make sure that you know it is in a bar part of the map and not a part of the map so i have to say a bar and b so iii is a bar de and iv is again only this essential prime implicant which is b bar c b bar ce but you have to add a bar to that so it is a bar b bar ce but it is found in the a bar part of the map so it is a bar and finally this fifth prime implicant this part a is equal to 1 part of the map which is bce with a  refer slide time 44  22  so now my final expression if you want we can write it as f is equal to c bar e bar bd a bar de a bar b bar ce and you can draw your gate structure or whatever it is this is how you read a five variable map identify the common cells of course some people draw it side by side  some people draw it together left and right and so on it is not a mathematical procedure or anything it is only for convenience whichever way you feel comfortable with you can do it now i can extend this to six variables if i want six variables i want four maps each of sixteen cells i will have to say six variable map a bar b bar  a bar b  a b bar  and ab so min terms 0 to 16  16 to 31  30 to 47  48 to 64 and then you have to see adjacency see the adjacency between these adjacency between these  adjacency between all the four and all that and you can go on writing the expression and have unlimited fun all these checker games you play but there is a limitation  why i am saying all these is because there is a limit beyond which after six how will you do ? of course you can always find a method of doing it and then it becomes inefficient we started with the map method because of which simplicity an efficiency then we are reaching a point where the simplicity is lost it would become an ordeal so beyond six variable  five variables is most comfortable  four is good we would like to have a problem with four in the exam may be five manage  six is okay but seven and above it becomes cumbersome after all this is a procedure what we have done is adjacency find 1s which are adjacent to each other when you represent in a graphical way so it is always possible to write a computer program to find out the adjacent 1s in a truth table and keep on repeatedly doing it the advantage or the problem whichever way you see it in the computers what you have to do is step by step combine two 1s at a time not more than two 1s at a time then it is too much to handle for computers put two 1s at a time and then two 1s at a time will become 1 1 then you say put two more so keep on giving it in steps you write a program algorithm they call it so  algorithm is a step by step program you write an algorithm for a program to systematically find out all the 1s in a truth table merge them to the best possible way and repeatedly do this  refer slide time 46  53  sometimes there may be several terms in which some redundancy may be there the essential prime implicant and non essential prime implicant that the computer can not resolve you know after all the computer is what you program computer  it can not become more intelligent than you are because you are the one who is feeding in the program in the computer in a computer the program is limited by your intelligence can not be more than your intelligence so finally we may have intervened in some place and say we will list all essential prime implicants and non essential prime implicants and make a choice of the right combination that we have to do such a method is called a tabulation method as against the map method we will not do that and i thought i should tell you so the number of variables becomes extremely large so you go for what is known as the tabulation method these are computer based methods of course you can also do it by hand to understand the algorithm like the same example of 31 cells or even 61 cells you can take for fun  64 cells 0 to 63 or even 31  0 to 31 do it the way the computer will do it combine two two at a time and do it like that just to get an understanding of this method  refer slide time 50  18  i am not going to teach this in this class but it is available in many books  many books talk about this method called tabulation method some people call it prime implicant method some books call it prime implicant method ; some books call it graphical method a tabulation method you can do that to understand the concept behind this but these are all computer programs very easy to understand once you know how it works so you can do a simple example of the same example we do in the class try to do it using this method so you will have an understanding of this program we will stop here for today digital circuits and systems prof s srinivasan department of electrical engineering indian institute of technology madras lecture  8 karnaugh map minimization using maxterms we have been taking about minimization of boolean functions first by using boolean algebra and then by map method by drawing a graphical representation of the truth table and then identifying the patterns of 1s and group them and reduce the variables in that process  number of variables as well as number of terms if you remember we also talked about min terms and max terms that is we can write an expression boolean algebra either as sum of products or product of sums that is and terms combined with an or gate and or terms combined with an and gate so one is called sum of products and the other is called product of sums because analogous to the algebra 1 looks like a series of product terms and sum them  the other looks like a series of sum terms you multiply these sum terms as a product sometimes what happens is when you draw a karnaugh map to simplify you find that there are more 1s than 0s the idea is to minimize we said the total number of terms should be as small as possible and the number of literals in each of these terms should be as few as possible so when you have large groups of 1s it results in many prime implicants and essential prime implicants if there are more 1s than 0s is it possible to use the 0s and get f bar complement of f expression a 1 in the truth table says f is true the function is true and the 0 in the truth table says the function is false so when you group 0s we can get an f bar expression just as we get f expression by grouping 1s and once i have f bar i have de morgan ? s theorem to get an f so  that is one approach some people use that also depends on the type of gates you want it all depends on whether you want a sum of product as the minimum expression or the product of sum as the minimum expression so let us today see an example where we will use 0s to simplify the logic function we will use our same familiar example from the last few classes we will be using the function f is equal to a plus bc bar this has been our example so when you do the karnaugh map for this if you remember  refer slide time  5  40  this is the k map where there is a one here one here one here one here one here if you look at a truth table you had one entry in the third row and last four rows the first row second and fourth rows had 0 in the output and all other rows have 1 in the output and if you map it this is what we got  refer slide time 6  48  what we did last time was to simplify this using 1 here and then here  of course this is a trivial example  even though there are large number of 1s if the pattern is good large groups of 1s together it will give you a very small sum of product expression because larger and larger groups give you smaller and smaller product terms  that way we had a nice example in this example we had a for this and bc bar but just to give you the concept of using 0s to simplify the expression i am going to feel these entries of the truth table which had output false with 0s i am going to use 0s to simplify my logic function so if i group these 1s and write prime implicants i will get f expression  expression for the output f if i now group these 0s and identify prime implicants or essential prime implicants i will get f bar is it not  whenever the function is not true there is a 0 entry in the truth table as well as in the karnaugh map so now i am going to group these two 0s and these two 0s so i will call this one  prime implicant one  prime implicant two  f bar is sum of prime implicant 1 and sum of prime implicant 2  a combination of prime implicant 1 and prime implicant 2 when you say sum you mean really or operation which is 1 this is a bar b bar correct and this is a bar c  refer slide time  8  32   this is only f bar but we want f because the problem definition or the truth table given to you is to implement a function f which has the output asserted as true for the given combinations but what we got is f bar output not asserted or output asserted as 0 so we do not want this but we want a complement of this and you know how to get the complement it is by applying demorgans theorem on both sides we get f which is nothing but a or b because the variable gets changed into complement where and becomes or  or becomes and  variable gets complemented and you can simplify this to the original f which is a plus bc bar because now if i do this this would become a plus ab plus ac bar plus bc bar and the view of the identity in the boolean algebra if you remember a or ab is a so this is redundant similarly a or ac bar is also a  this compared with this gives you a so these two terms get knocked off so the result is a plus bc bar and this is what this is  refer slide time 10  33  there are a couple of points i want to make really ; one is  smaller number of 1s grouping is easier only if they are randomly situated actually when 1s are nicely grouped we may find a simplified expression of a minimum form but if we had 1s and 0s spread in the random fashion as more 0s than 1s and more 1s than 0s then may be it ? s a good idea to go for simplification using 0s the second thing is this is the expression for f without this simplification this simplification i need to prove that this is same as this  i can stop here this is the minimum product of sum this is the sum of product expression  refer slide time  11  24  and this is the product of sum expression so if you wanted the solution in product of sum expression it is here  i would use this expression the minimum product of sum this is a minimum sum of product just as you get a minimum sum of product expression using karnaugh map i will also get a minimum product of sum expression using karnaugh map using 0s where will i use that situation ? i will use the situation where i want to have or gates feeding into an and gates because here each product term is an and gate and the sum term represent an or gate sum is equal to or  sum is an or operator because you put a plus we call it sum plus it is an or operation and dot is an and operation hence the sum term represents an or gate and product term represents an and gate so if you want to have fewer or gates and larger number of and gates i will use the sum of product expression or if i have fewer and gates and larger number of or gates i will use this thus depending on the topology as they call it i will have either a sum of product expression or product of sum expression even if number of 0s more or less even without considering the number of 0s and 1s in the truth table or regardless of 0s or 1s distribution in the truth table or the karnaugh map we may sometime want to write an expression as a product of sum expression in that case i will use this approach i will group 0s together and get f bar and then f but you can do one more thing  you can skip this by reading judiciously because a or b is corresponding to this you because this i can do it mentally writing a bar and b bar and taking its complement knocking of the bars here and removing this and and putting an or also can be done in my mind and i can see that whenever two 0s are together this is a bar and this is b bar i can write this as instead of a bar i will use a  i will use an or symbol using b that means i will read the map as if i would read a product term  refer slide time 14  49  i will read a sum term as i would read a product term except that i will remember to complement each variable and remember to complement each operation the and operation will be written as or operation and variables will be written as its complement so without going through these two steps which is of course necessary but i am not doing something which is wrong but i am just trying to simplify my procedure visualize the procedure such that these two things are mentally done in your mind so you directly read the map as this let us take one more example to prove this point this time we will have a four variable map sigma m number of min terms will form the sum 1  3  4  5  9  11  14  15 this is the map for f  refer slide time  15  47   i can use any variable i will call them abcd so the variable for which the min term min terms for which the output is 1 or true or 1 which is this  3 which is this  4  5  6  8  9  10  11  12  13  14  15 this is the distribution so this is prime implicant one essential prime implicant isthese two  this one can not be combined in any other way  this is the most efficient way of combining because this one has to be combined so this has to be there  this one has to be combined  i could have combined this in this way but this is not necessary because i have already taken this one into account and these four 1s form a prime implicant now this first term will be this which is b bar d or this one a bar b c bar then this one abc simple  you have done this earlier there is no ambiguity here in terms of non essential prime implicants and all that on the other hand  if i try other terms have to be put in this so you represent this as sum of product this is a product of sum so you will put a product which is pi  capital m for max terms and small m for min terms so what are the max terms that will be there ? whatever term is not here that will be a max term so there will be a 0  2  3  4  5  6  7  8  10  11  12  13  refer slide time 19  29  it so happened that i equally chose just not that  i wanted to have a large number of 1s and large number of 0s so it happened when i took this example that exactly there are eight 1s and eight 0s so you could have proceeded either way proceeded using the sum of product way or product of sum way if you had a specific reason to go for a product of sum because you wanted to use and gate fitting to or gate i will have do it using sum of products and if you are going to have or gates fitting to and gates i should go for product of sums but if you are not given a choice like that if you are not given a condition constraint like that in this case there are eight 1s and eight 0s i can go either way so i will now put the 0s here and i will draw another map here same map but in order to avoid cluttering i will redo it here 0 0 so i can group these 0s into groups of two 0s or four 0s or eight 0s as the case may be based on the case may be based on the adjacency rule and then try to read them so these four 0s form a group  these two 0s form a group  prime implicant  these two form a group so there are only three terms and i can write f bar and then take a complement of that using de morgan ? s identity or de morgan ? s theorem and then write the product of sum form bar  as i told you just now a while ago i can directly read the map for product of sum expression by treating a variable as its complement so when you read it you read it as a complement any variable is read as its complement and an and operator is read as an or operator and vice versa so these four 1s would be b bar d bar if you want to write it as a sum of product since i want to write it as a product of sum this will be b or d so this will be b or d you look at these four as you would do for 1 the only difference is this would be read as b d if you are grouping 1s when you are grouping 0s b would be read as b bar  d would be read as d bar then and would be read as an or hence instead of b bar and d bar i will read it as b or d that ? s it that is a simple trick if you want to call it it is not a trick really it is a procedure which is bypassing some of the logical steps this is not as if it is a new concept or anything or it is not a derivation  refer slide time 24  04  if these two were 1s i would read it as b i would read it as a bar b c  read it as a or b bar or c bar and finally these two 1s if it is one then it will be read as abc bar where it will be read as a bar b bar c  this is your minimum product of sum  this is min terms  this is max terms  this is 1s  this is 0s  this will use and gate fitting into an or gate for the final output and this will use or gate fitting into an and gate for the final output if both are identical your choice of using this or that or if you are given a constraint as use many and gates and only one or gate you will use this if you are asked to do many or gates and only one and gate you will use this  refer slide time  24  47   if we can use many and gates and only one or gate then we will use this sometimes these restrictions are designed because of the availability of parts because of the matching of the other part of the circuitry you are designing because you may want to have an inventory of types of parts of the same type but in different designs or different implementations there may be several reasons why you want to go for this and that i also told you the other day how to do a four variable  five variable map  six variable map at some length we have done a four variable map  and conceptually that is good enough we talked about implicants  prime implicants  essential prime implicants  non essential prime implicants  how to use a non essential prime implicant properly and all that we will have to now go to some examples of systems small 1s  we will design and think of some real examples so far i have been giving you min terms and max term lists without any physical relationship  any physical correlation or anything  it is just arbitrary sum of products  arbitrary product of sums  arbitrary 0s and 1s in the expression or arbitrary 1s and 0s in the truth table before we move on to some of the real life examples i want to give you one more concept which is a very simple concept it is called ? don ? t care condition ?  this is called ? don ? t care state ?  what is a ? don ? t care state ? ? i have a truth table here  the eight rows or a map with eight cells  a map with sixteen cells or a truth table with sixteen rows and we defined for each of these rows or cells an output to be true or false asserted to be 1 or 0  that means you are very clear what you want the output to be for each of the input combinations because based on that condition you are designing a system or a circuit on the other hand i may have a system a circuit  i will define the output to be true for certain combinations of the inputs when it has to be false for certain other combinations of the input and there may be some combination which are not covered in both the list i can give you a list of combinations in input  how many combinations are possible with three inputs ? eight combinations are possible  out of these eight combinations i will say definitely for certain combinations let us say for three combinations the output has to be true and for another three may be the output has to be false and then there are two combinations which are not defined means you may not define it for many reasons  these combinations may not occur in your system or these combinations may occur but you don ? t worry too much about that it can be 1 or 0 the output can be true or false because it is not going to effect your process in anyway  refer slide time 29  50  hence there are certain combinations in any system any circuit  certain combinations input for which you will not define the inputs  the inputs are undefined  it need not be define for practical reasons  such a combination of inputs may not occur in practice or the practical reasons could be such a combination of inputs if it occurs i really don ? t know i don ? t really care what it is because that is not going to effect my processing in anyway whatever is the reason if you want to say there are certain combinations of inputs for which i do not care that is way it is called don ? t care state  i do not care what the output is so such cases are called ? don ? t care states ?  i will give you a simple example suppose i want to count 4 using one hand where in one hand i will use only four fingers all the time and the fifth finger will not be used so i will say  supposing i show a 3 like this you know it is 3 or i put let us say how much i show like this  this is also 2 because these four are the fingers you will have to look at  i am not showing any sign or whatever but supposing i put three and this thumb also out i will always tell you to look at my four fingers and determine the condition like 3 or 2 or 1  and this finger you don ? t even look at but i am showing this thumb you don ? t even look at but i may put it like this  like this but it doesn ? t matter because this is not going to effect you because this is 1 or this is also 1  this is also 2 and like that i may have four inputs otherwise three inputs and certain combinations by four inputs is going to affect my output so i would be worried about those  if it happens i have to take some action and certain other combinations if it happens i don ? t care that thing is going to happen i don ? t have to take any action so we can always say 0 we are only interested in certain combinations of the input giving a logical output 1 when that is the case and when any other combination is coming the output can be 0 then you are very safe i don ? t want a false output whenever i have a condition for which the output is required to be 1 i need an output to be 1 if there is a mistake in that i will be worried but for all other conditions i want the output to be 0 whether they occur or not that is one way of looking at it which is fair enough i showed you eight combinations in which for three combinations the output has to be 1 i am concerned about this  and for three other combinations i say 0 the you don ? t worry  in case i can combine all these 3 plus 2 is equal to 5 and say for all other five combinations i can have them and when i don ? t care about the output what does it matter to you if the output is 0 so i can say for all other combinations other than these three i want for which i want 1 the output is 0 i can do that that means i will have more 0s and less 1s or i can say since i don ? t care about the output those three combinations for which i want the output to be 1 and those two combinations for which i don ? t care what the output is all the five combinations always produce an output of 1 and i will make sure that the three combinations for which the output should not be 1 for those combinations the output will always be 0 that is also possible it is a reasonable argument  either both are reasonable arguments but if you are doing so i fix this don ? t care condition the states for which you really do not worry about the outputs the condition for which you do not worry about the outputs you are fixing it as a 1 or a 0 and when you put a 1 and a map you have to cover it you have to enclose it write a term on the other hand if you put a 0 my number of 1s in the map gets reduced and when the number of 1s in the map gets reduced my expression becomes more difficult my expression becomes more complex fewer once is longer  each term will have more literals if the number of 1s is more so i would like to use these conditions for which i don ? t worry about the output  it is an advantage whenever i like i will use them as 1 in order to simplify the hardware but i don ? t have to produce a 1 so whenever it is not convenient to me i will ditch it and use it as a 0 the advantage of this is i can use this don ? t care condition to simplify my hardware for example  i have a group of three 1s you put an extra one and make a nice term so there is a ? don ? t care state ? and in one of those cells i will use it as a 1 to my advantage to reduce my hardware to reduce my term on the other hand if i already completed all my 1s and there are some don ? t cares strewn around i will not bother to cover them and write terms for it so use it to your advantage the don ? t care states are used to reduce the logic  it is not necessary to use every one of them  refer slide time 35  20  whichever don ? t care states are useful to introduction further either the number of terms or in a given term if you can reduce the number of variables we call them literals i said abc  ab bar  a bar b bar these are all literals  a bar b bar are all literals  each variable ? s inner term is called a literal and each is a term there are two terms with two literals each  three terms with two literals  three literals  three literals so by using don ? t care if you can reduce it further either the number of terms or a literal in any of those terms then i will use it to my advantage use it as a 1 otherwise i will not purposely go and introduce an extra term to cover a don ? t care i don ? t want to introduce a term in order to include my ? don ? t care condition ?  it is a waste so the idea is always to reduce the hardware the theme of this course as i said in the beginning is reduce hardware  hardware reduction will result in power saving  cost saving  size saving  space saving and everything that is why we want efficient hardware but reliable hardware  we can ? t knock it of arbitrarily and say reduce hardware usually fifty percent of the terms i have reduced the hardware but you will not get fifty percent of marks you will get 0 marks that is the problem i see it as a digital course so whether you get a 0 mark it is a 1 mark so it is right or wrong ? so  reduction at what cost ? it is the reduction without losing the reliability of the circuit so let us take an example of that class i can use the same thing and put some don ? t cares i will take for example the same sigma m  what is the output or 1  what are the terms for which the output is 1 ? it is 1  3  4  5  9  11  14  15 i don ? t want to change any of these but instead of making all other terms as 0s i will say may be 6  7  8  and 10 are don ? t cares how do i write it ? it is d for don ? t care some books use x  this d will be replaced in some books by x  some books by phi  some books by capital d so all the same don ? t care  refer slide time 38  11  don ? t care terms are  arbitrarily i put that why not i put these four ? it is 2  6  7  8 just to show the effect i don ? t have an idea of what it is going to look like from the list of 0s i am arbitrarily assuming these four terms need not to be really 0s they need not be 1s they need not be 0s of the output but they can be don ? t cares  you don ? t worry about whether the output is a 1 or 0 for these four conditions of input combinations so my map gets modified with don ? t care  this is the modified map modified k map with don ? t care states what are the terms for which there is 1 to start with ? these are 1s  these are 1s  these are 1s  and these are 1s now i am going to add 2  6  7  8 when i do 2  6  7  8 i don ? t mark a 1 there remember  if i mark a 1 there when i try to simplify this map reduce this map i will make an effort to include every possible 1 that will be unnecessary waste of effort so what i will do is i will have to use another symbol if i put a 0 again i may ignore them  if i put a 0 i will ignore it  if i put a 1 i will necessarily have to include it so what i will do is use another symbol i can use d or x or phi whatever is less so let me use d  this is 2  refer slide time  40  12   6  7  8 these four ds i have included to indicate the ? don ? t care conditions ? of those four combinations of the input these four combinations of input in the acquired output need not be 1 it need not be 0 they can be anything  they can be either 1 or 0 because that does not effect my circuit performance in anyway because i may not have those combinations of input at all to start with or even if it does occur doesn ? t matter to me what happens if that is the case then how do i simplify ? now i will have more options  i would probably do this plus 1  2 or need not even have it i can have these four and these four  refer slide time  41  28   so this is my 1  this is my 2  this is my 3  prime implicant 1 essential epi 1  2 and 3 essential prime implicants now remember  look at this and see that this d has not been included  this d is has not been included so it is not mandatory it is not necessary to include all ds at the same time i use d to my advantage i use these two ds because they are advantageous and i am able to make a simpler grouping of these two ds if i don ? t have these two ds i have to use this as one prime implicant which will have three literals now i have a prime implicant with has only two literals that means i am knocking one of the inputs of my gate and gate that is an advantage  it is a hardware saving so this is the concept of don ? t cares and how to use don ? t cares now let us write the expression once you have don ? t cares then combine them we don ? t have to keep them separate any more  you can just write the expression as if  you write a normal expression  refer slide time 43  44  so one would be a bar b plus two would be bc plus three would be b bar  this is b bar and d this is what we got now including don ? t care out of four don ? t cares i will really use only two and i have not used the other two because these two is an advantage  you exploit them to reduce the hardware but at the same time don ? t feel obliged to include every don ? t care it is going to be a burden to include every don ? t care because it is going to unnecessarily give you more terms which are not recommended if i want to combine this d i have to put one more term which is not necessary this one is already covered you put a d here i will have an extra term with three literals which is a waste one extra nand gate  one extra and gate with three inputs and that input has to fit into an or gate that means or gate input also has been increased by 1 so all those extra burden is not necessary  it is the same thing with these three originally we had this expression  we now have that expression b bar d is same in both  these two terms have been introduced  each by one literal these two and gates will now have the modified form with only two inputs  here we have three inputs so that is the advantage in this hardware so i am having three and gates fitting into an or gate i am not writing the values here you know that this is a bar so you have to come through a and inverter b b c d inverter so now extra two inverters have to be also included this is the story of the don ? t cares so now we have exhausted all possibilities of simplification of course i have shown you several things we saw in an arbitrary fashion what i mean is sort of arbitrary  the examples we took we didn ? t take any device except don ? t cares i tried to justify a plus b bar  a plus bc bar  i said can have a combination but justifying after we do this circuit but now we have to do it the other way we have to have a system like any system you want to design what you want from that system for that system you write the truth table that is the design you identify a physical device system that you want  how many inputs are there in the system  how many outputs are there in the system  what is the input output relationship you want and for the input output relationship you want you write the truth table and from the truth table you can either use boolean algebra to simplify it or go to karnaugh map and simplify it and you can do it the sum of products way or the product of sum way depending on the type of hardware relationship you want to gain therefore what you have to do is to take simple examples of logic functions  arithmetic functions the one interesting thing is in this course we have always been talking about logic gates logic means decision  true or false or and and or etc for example this function is true why this is called logic because this function is true if and only if both the inputs are true and for all other cases the output is false so we think of it as a logical statement  logically we can make sense or gate is a logical gate if at least one of the inputs is true the output is true or an nor gate you will say the other way nor is complement of or  only if both the inputs are 0 the output is 1 and in all other cases the output is 0 but then i said these are all digital systems  many times it is also computational intensive you remember we talked about the computers as the basic building blocks anything can be thought of as a computer so the basic thing in a computer is an arithmetic circuit logic also comes in occasionally but mostly arithmetic add  subtract  multiply  divide and so on we will see that later on in this course in subsequent lectures we can also build arithmetic using logic actually they are called logic gates but we will use arithmetic gates like add circuit  subtract circuit and things like that using these logic blocks why is logic same as arithmetic because there are only two things we are talking about binary variables a variable which has only two values 0 or 1 so it doesn ? t matter if it is arithmetic or logic because when you have two inputs we have to add these two inputs but only one output is possible  the adder will have two inputs and one output let us say we have to add two binary numbers two binary numbers you are going to add i have two inputs and one output and each of these inputs can have only two values and output can also have two values so  if both the inputs are 0 the output is 0 the sum of two 0s is 0 but if one of the input is 1 the output has to be 1  if one is a 1 and the other is 0 the output is 1 the sum is a 1 so sum is 0 if both the inputs are 0  sum is 1 if one of the input is 1 what will happen if sum is 1 in both the inputs ? then 1 1 is input both the inputs are 1 the sum of two 1s is 2 and i can ? t represent 2 but i can represent 0 or 1 so output has to be 0 and you should also remember to include another output called carry output which will know that when both the inputs are 1 output will be 0 even though the output is 0 sum is 0 it results in a carry so we will have to know how to handle the carry but that is the arithmetic part what i am trying to say is this is a logic function basically  i will have to look at the two values of the input to determine output if the two values of the input gives me the output so my logic gates can be used for my arithmetic operations so what we have done is the basic introduction to the logic gates  introduction to boolean algebra  we talked about min terms max terms  sum of products  product of sum  karnaugh map simplification  don ? t cares etc but then all of them will have to lead to the realization of things which we need therefore in the subsequent classes we will take design example from combinational logic both logically and arithmetic how we can design and build that means you have to first design and specify a circuit  specify the inputs and outputs and find what is the relationship between input and output  represent from my truth table and use the tools that you have learnt  boolean algebra or karnaugh map with or without don ? t cares  sum of products  product of sum  etc then finally come up with the simplification and that simplification will be drawn in terms of true gates and that gate circuit will work as an arithmetic circuit so the logic circuit will become an arithmetic circuit we will see in subsequent lectures digital circuits and systems prof s srinivasan department of electrical engineering indian institute of technology  madras lecture # 18  refer slide time  2  05  in the last lecture we have been seeing about the flip-flops as against the latch in the latch you store a bit 0 or 1  in flip-flop also you do that but a flip-flop has an additional control called clock when the clock is high only then the data can be stored in the flip-flop and when the clock is low whatever has been stored will be retained even when there is a change in the input we saw the basic sr flip-flop and the d flip-flop wherein a single bit data can be stored with single input d data input by connecting s and r through an inverter then we talked about the condition of 1 1 being not permitted for an sr flip-flop and see whether we can do something about it so we modified the input and gate into a three input nand gate and found that it is possible to have an operation corresponding to s is equal to 1 r is equal to 1 wherein the flip-flops output keeps changing constantly from 0 to 1 to 1 to 0 and 0 to 1 to 1 to 0 so forth as long as the clock is high when the clock is low of course it retains its content as a memory state now the very frequent change of the output with an sr flip-flop with s is equal to 1 r is equal to 1 with an input nand gate is disturbing because we don ? t want that type of behavior  it is called racing i said  racing is not a desirable behavior on the other hand it is a nice idea to have an input condition with 1 1 where the output changes from the present state to the complementary state if the state had the output of 1 you will like to have a 0 output and from 0 to 1 back and forth 1 and 0 0 to 1 provided it does only once in a clock period so we were thinking about how to prevent this racing and one way to do it is to make a clock active period much much smaller  very small  smaller than the propagation delay of the flip-flop this is not a practical solution there are couple of other ways we can do it one way is called the master slave concept  refer slide time 6  50  so what we will basically have in a master slave operation ? the input gates remember this and this went to the two nand gate combination  refer slide time  5  48  this is the basic structure we discussed in the last lecture and this came from here and this came from here instead of that what i am going to do is to extend this into one more stage of the same identical flip-flop and the output of this i will feed into the sr latch as we did earlier this is corresponding to the clock input now instead of tying the output of these two input gates what i will now do is to take this all the way from here after this second stage  refer slide time  6  58  i am duplicating this into this except that i do not need three inputs i need only two input because i am going to give external input only once these are the external inputs  this is the input from the clock  this is the feedback now output of this will be fed into this  this is the latch with part of this flip-flop now i will have an identical stage of flip-flops where the output of this will be fed into this  output of this will be fed into this and then i have this basic sr latch here this output will go into this  refer slide time  7  46   i am taking the feedback all right from the output but not immediately but after one more stage  one more similar stage i put and then take the feedback so this i will call q and q bar  these are intermediate outputs and this also will be clock but one thing i will do is i will not connect the clock as it is into this but i am going to invert my clock and then connect this so now i have more or less a condition of two flip-flops  the clock is common but one of them is fed directly and the other clock is fed through an inverter  these are the two external inputs which we call s and r earlier and the third input comes from the output stage not immediately but after one extra stage the second stage you put a second stage and take the output of the second stage and feed it back into the input now this will behave exactly like the feedback flip-flop like we discussed yesterday except that this output will change only once in a clock cycle i will tell you why now the clock has to be high for any normal operation the flip-flop that ? s what we said the function of the clock is to enable the output to change as per the inputs when the clock is high and not change the output when the clock is low whatever the input is now  if that is the case i am feeding a clock here but an invert of the clock here the clock is high for this flip-flop and it is low for this flip-flop so if we consider this as one flip-flop whose output is fed as input to the second flip-flop  i will call this second flip-flop  refer slide time  9  55  this flip-flop and this flip-flop are identical of course there is an extra input is there the feedback input so this gate is a two input gate and this gate is a three input gate that is one difference but that is because i want the feedback only once but more importantly the difference between these two flip-flops is that one has the clock which is high and the other is low and vice versa therefore  when the clock is high for this flip-flop this flip-flop will change state but this feedback is not going to happen because feedback is from here and not from here so this is constantly changing and the racing condition is not going to happen only when the output is fed back into these two gates because of the property of these nand gates the input keeps constantly changing and the output keeps constantly changing this flip-flop has a clock low when this clock is high so when this clock is high this clock is low and when this clock is low whatever is the input then  it is not going to affect the flip-flop because the output is going to stay the same in its previous state the memory state when the clock of a flip-flop is low  refer slide time  11  15  so when this flip-flop is enabled or the clock of this flip-flop is enabled the clock of this flip-flop is disabled any change that is going to occur is going to occur here  anytime it can happen but only when the clock has completely changed from high to low here which means it is low to high here whatever is the output here will now go into this so the output of this flip-flop goes to the input of this flip-flop and it will change the output of this flip-flop when the original clock is low but at that time the feedback in the changed signal can not affect this gate and the output of this gate can not change now because at this time the clock is low again so the output fed back into the input can not affect the operation of the circuit until the clock changes into 1 again that means i am preventing this continuous variation  the variation can only be once  when the clock is high any change that may happen in this flip-flop can only happen locally and that local change will be transmitted into this flip-flop only when the clock of this flip-flop changes into high at a time this is closed so any change that may happen because of this change at the output will be fed back but will not be recognized until the clock changes back to 1 again to original clock so i have a two stage flip-flop basically where the 1 stage clock being high the other stage clock being low at a given time and after some time the first stage clock becomes low and second stage clock becomes high so that way i am isolating the fluctuations from the output or output changes will not be reflected in the changes in the input stage such a combination is called a master slave combination  this flip-flop is called a master flip-flop and this flip-flop is called slave flip-flop  refer slide time  13  36   the slave can only take the master ? s output and convert into its own output but that can happen only when the clock is enabled for the slave  and if the clock slave is enabled then already the master clock is disabled so the output changes in the slave flip-flop will not affect the master output until the clock of that flip-flop becomes high which is only when at the end of that period  for this clock it is at half period that means we are now making sure that changing from q to q bar when s is equal to 1 r is equal to 1 may still happen but only once in the clock period  when the clock is high when this master clock is high  refer slide time 19  00  instead of this toggling like we saw  this is the clock  this is the master clock as a function of time  it moves from 0 to 1 master output originally it would have been like this that is because of the feedback but now the feedback is not there so  if it was 0 earlier it will become 1 and then it continues to be 1 and until again it becomes 1 at that time it will become 0 so this change over from 0 to 1 to 1 to 0 will happen but only once during a clock period so the output of the slave will be only this  this change will be reflected into the output only at the end of this clock period  refer slide time  15  37  so that will be during the positive edge  at this point the slave clock will be low  when the master clock is high slave clock is low so the change of the master can not go to the slave  at this point the slave clock becomes high so when the slave clock becomes high only then the master output would be recognized by the slave so the slave clock would be working like this i mean slave output will be delayed by this clock pulse period so the output keeps changing from 1 to 0 also here in this case just as in the case of the previous circuit like we discussed in the last lecture constant toggling is not there but it changes only once in a clock period this is a toggling mode really as i said toggling is a controlled change  racing is an uncontrolled change  toggling is useful we will see that later on how it ? s useful  racing is not useful  and racing is undesirable that means i have eliminated now s is equal to 1 r is equal to 1 problem which we had the original sr flip-flop in the original sr flip-flop 1 1 condition was not to be used because as because for certain unreliability undefined performance  uncertain performance we want to remove that but we ran into a racing problem and we solved the racing problem by putting an extra flip-flop so this is a master slave configuration  it can work for any type of flip-flop  for d flip-flop also you can have a master slave sr i have now made it like this  you can have two flip-flops with one clock connected to the master clock and slave clock with face inversion such a configuration is called a master slave configuration it doesn ? t have to be for only sr flip-flop that means this new flip-flop is tamed for s is equal to 1 r is equal to 1 condition so i will now give a new nomenclature because the sr flip-flop will always bring back the memories of 1 1 being not permitted so i don ? t want to call it a modified sr flip-flop or anything so this sr flip-flop with the feedback and an extra stage to control the operation this whole configuration is called a jk flip-flop  i don ? t know why it is called jk flip-flop jk flip-flop works like this ; so instead of calling this s input i will call it j input same as s input except for the case of s is equal to 1 r is equal to 1 sr flip-flop and jk flip-flop are identical jk flip-flop works exactly like sr flip-flop for the three cases 0 0 0 1 1 0 for 1 1 case sr flip-flop is not permitted but jk flip-flop is permitted with the toggling output its all where you stay  refer slide time  26  05  so sr flip-flop plus this additional toggling facility becomes a jk flip-flop so this is called j and this called k so j k q q bar and we will also put a clock here when the clock is 0 no matter what happens j and k  output is a memory state  when clock is 1 0 0 is memory state  0 1 is the reset state that means 1 1 0 1 0 this is the reset this is set 1 1 1 so what is q we don ? t know until we know what q was q toggle means that the previous value of q is complementary the present q is the complement of the previous q so you can write toggling mode you write q bar so you can ? t write q is equal to q bar it does not sort of looks odd so what i should write is at this clock pulse if it is nth clock pulse what is the value of q is for n minus 1th clock pulse will become the value now so i will call this n this will be the previous value qn plus 1 would be qn plus qn complementary  qn complementary becomes qn plus 1 or qn minus 1 complementary becomes qn so this is the toggling mode  this is a sort of a flip-flop in which all the conditions are made  we do not have to worry about 0 1 1 being encountered in your circuit as inputs and toggling has its own use we will see it later  you design counters toggling property has used so now to summarize we have now seen an sr flip-flop of course it is sort of a latch we can store a bit of information and keep it there and tell you change it then we want to do it in a controlled way whenever we wanted it that means introduce a clock and say when the clock is high only the inputs should be recognized so it is a clocked sr flip-flop and then we said we want to put a simple data bit 1 or 0 and thought of why we need two inputs so we converted an sr flip-flop into d flip-flop so in the d flip-flop with the clock whatever data you put in gets stored and with clock 0 whatever you put in the data does not get in but it remains the same as what it was earlier and we modified the sr flip-flop into an extra gate with the feedback extra input of the input gate with a feedback and we called it a jk flip-flop where for that condition of s is equal to 1 r is equal to 1 or in this case j is equal to 1 k is equal to 1 we had the output complementary to what was earlier in the previous clock cycle and in order to avoid racing we had to put two of this in a master slave mode or master slave configuration  so this is the jk master slave flip-flop they call it in the d flip-flop also you can have a master slave operation if we have two d flip-flops as one connected to the clock high and the other connected to the clock low at the same time and when you put one value here that value gets stored immediately when the clock is high but then that d can not transmit into the next flip-flop because the clock of that flip-flop is low as the clock becomes low for the master flip-flop so it can not take a new value hence the value stored in the flip-flop will go into the second flip-flop the slave flip-flop because the clock of that will still be high so i can have the data stored in the second flip-flop when the clock is low instead of having to store data when the clock is high it can happen only once because the master is now 0 clock and whatever change i make in the d input  if you want to make only one change in your data per clock cycle then this is the best way to do it if you want to make only one change in the data storage in one clock cycle or in one clock period you put a master slave configuration the master takes it and the slave will not be affected and whatever happens in the master will be transmitted to the slave at the end of the half period when the clock becomes low from high and at that time the slave takes the output of the master whatever be the value but any more change in the master can not happen because the clock of the master has already become low so to avoid racing this jk concept can also be applied to a d flip-flop a master slave d flip-flop is also possible i said there are two ways of making sure that the data changes only once in a clock period one is to make sure that data changes when the clock is low and when the clock is high do not put the data that is one way and the other way is to have a master slave configuration whenever the data changes the output also changes but for only once the second stage data changes when the clock goes from high to low it is the same case in a d flip-flop you put a d value the master will take it during the clock high but then it will pass it on to the slave the clock goes from high to low that is a master slave d flip-flop the master slave is a concept but it helps to avoid racing in the case of jk that means we have all the combinations in d flip-flop it is just simply storing the data  in sr flip-flop it is sometimes but most probably sr flip-flop is no use because you want to simply store data you put a d flip-flop if you want more than that the toggling action you put a jk flip-flop there is no need to have an sr flip-flop generally sr flip-flops are not used that much they use d flip-flop just for data storage purposes keep it and store it and whenever you want get it back or if you want to do some other thing with a flip-flop like a toggling action which i said which will be used in counters then use a jk flip-flop these are the two most popular flip-flops sometimes i want only this toggling action in that case what i should do is i will take a jk flip-flop  now whatever i draw here as jk is the whole thing  these two inputs and the clock is only available to me and output q and q bar at the master slave are only available  internal feedback  the internal inversion of the clock are those things that are not available to me in a block when i buy a jk flip-flop i have a single hardware where there are two inputs for j and k and one input for clock  one output for q  and output for q bar  the q and q bar outputs are from slave and jk inputs are into this master and the internal clock gets inverted for the slave of course you need to give some power supply no circuit will work without powering up  we need voltage and ground you need two terminals ; one to give the voltage called vcc or vdd depending on whether it is a bipolar transistor technology or cmos technology and then ground  refer slide time  28  29  so i am not talking about power source how are you going to power up them ? i am only talking about signals  jk or signals  output as a signal  clock is the signal you have to know the difference between the signals and the power source power source is required for any active circuit we need a power source we will not consider power source in this drawing usually we will have to put in addition to that vcc and a ground and all that so jk and clock and q and q bar if i only want toggling action  i have an input  i have a clock period and i want an output which is always toggling back and forth at the data 1 per clock period then i don ? t have to go through this sr flip-flop type of thing i can as well connect these two together and j is equal to 1 and k is equal to 1 i will call this t input t for toggle  toggle input  when t is 1 it toggles and t is 0 it is the memory state when t is 0 it is 0 0  j is equal to 0 k is equal to 0 is a memory state  j is equal to 1 k is equal to 1 is toggle state that is why the input is called toggle input  when t is 1 it toggles and t is 0 it doesn ? t toggle or it stays and of course clock is required  refer slide time 31  40  so what will be the truth table of this or characteristic table of a t flip-flop ? clock t qn plus 1 when clock is 0 output remains the same no toggling action  and if clock is 0 it is the memory state always for all flip-flops if clock is 0 it is a memory state  when clock is 1 and t is 0 again it is memory state when clock is 1 high if i don ? t give the toggle input which means it t is equal to 0 which means j is equal to 0 k is equal to 0 that means it is a memory state when clock is 1 and t is 1 then this is qn bar the previous value of qn gets complemented of the new value  the next value of qn is always the previous value complemented so this is the toggle flip-flop the t flip-flop  sometimes you get a t flip-flop these are the two inputs that means i have to assume that internally it is a jk flip-flop where they have tied t and j and k in the d flip-flop i said internally s and r are inverted if there is an inverter between s and r then it ? s called a d flip-flop  likewise this is called t flip-flop that means there are totally four types of flip-flops we have seen ; sr flip-flop with its own limitation of 1 1 condition  a d flip-flop where you can only put 0 data storage and not a toggling action and you put a jk flip-flop where it works for both the d flip-flop and a toggle flip-flop so one jk flip-flop is equal to 1 sr flip-flop or one d flip-flop plus 1 t flip-flop and a t flip-flop only toggling happens that means we can use any of these four flip-flops for the particular operation or performance of a circuit that we design this extra hardware this slave hardware almost doubling the thing effort in terms of the number of gates hardware one of our goals what is one of our goals always been saying three things high speed  low power  low cost or small size so that means we are unnecessarily putting extra hardware so  is there anyway where i can do the same changing only once in a clock period but not having to put an extra flip-flop duplicate an extra flip-flop ? that is one reason why i may not used jk flip-flop sometimes there is another reason why we may not used jk flip-flop we said what is the fastest rate at which the clock can change ? the fastest rate at which the clock can change is the time it takes for the propagation delay of the two flip-flops any flip-flop is a single flip-flop how fast can i change the data and keep storing it or sending it out ? at the rate the propagation delay is the time it takes for the data to travel of course in addition to propagation delay there are couple of things called set up time and hold time we will see this things a little later on in the course right now don ? t worry about this terms there is a set up term  there is a hold term and the propagation delay let us bunch them all together for this discussion today and there is some delay involved within the delay i can not change the input that means if i clock it faster than that period corresponding to the delay then it is not fast enough to catch up any change in the input can not catch up with the  the output can not catch up with the changes in the input faster than the total delay of the flip-flop which includes propagation delay  setup time and hold time when that is the case of course in extreme cases only this is a problem most of the times in today ? s technology the speed is so high we don ? t have enough applications there are very high speed applications where the speed is not really enough  that is the reason they go on improving the technology and inventing newer and newer circuits that is because there is always a cutting edge technology cutting edge application but in most of the applications today ? s technology is so good where we don ? t have to worry about all these things such as the propagation delay of the flip-flops but still from a theoretical point of view you should know the limitations so the limit within the change of clock the limit at which the data can change is the period and if i try to change the clock faster than that then data can not catch up with that so if we now put two of them then there is going to be a slow down further if the propagation of the flip-flop or the delay of the flip-flop that involves several things including the propagation delay then that is the limiting factor in my operation there are conditions  applications  places where the delay of the flip-flop is the limiting speed it is not going to help me if i had to put two of them it is going to reduce by factor two so i have to slow it down by factor of two and i am already worried about my cutting edge application where the speed is not enough now if i have a master slave configuration i need to have to do it at half the speed there are always some extra things coming in here and there but approximately it is half this speed at which i can work a single flip-flop because it is two flip-flops two delays that is one reason why we want to think of another scheme at the same time not allowing the racing  this is important racing is a very bad thing because you know want to have unpredictable performance so without racing and without master slave is there anyway we can do it so that only once in a period once in a clock period the output can change the second thing there is extra hardware i need so there is a technique called edge triggered technique we can make a little bit extra hardware it is not the whole lot of doubling the flip-flop type of thing but some modification in the given flip-flop can lead to a condition that once a change is made it will stay there for the entire duration of the clock and only when the next time the clock changes it will change again this is where i want to define something called edge triggering and level triggering when i said gate  it is an enabling function  gate has an enabling role to play  what did i say  when the gate is high clock is high rather clock is an enabling gate enabling function speaking about clock it is an enabling function  we said when clock is high flip-flop works normally and when the clock is low the flip-flop remains in a memory state now within when the clock is high the flip-flop can change the output any number of times i am not talking about master slave but the normal flip-flop a single flip-flop if i want to avoid that what i should to do is that  the change in the flip-flop output should not be level sensitive  sensitive to the level of the flip-flop but it should be sensitive to the transition of the gate function if the gate is high the clock is high  this is clock as the function of time  refer slide time  39  06  and this is t 0 1 and as long as the gate is high any change in the input will be reflected in the output i am talking about the single flip-flop but not the master slave remember that i am making a case for doing a non master slave flip-flop which will do only once in a clock cycle  non master slave flip-flop which will change the output only once in a clock period because i am going to save time delay as well as i am going to save some hardware so i am talking about that therefore when talking about a single flip-flop a non master slave operation when i have this  this is the period during which any change in the input will be reflected in the output i don ? t want this but i want the output to change for only once in that period based on what was the input at a given particular time this is called level sensitive or level triggering  refer slide time 41  53  on the other hand if i make my flip-flop whatever is the input at the time the input changes from 0 to 1 which is again the clock  the input can be anything here and the input can be anything here but it will recognize the input  it will monitor the input and it will sample the input this is the technical term known as sampling the flip-flop will sample the input at the time of transition from 0 to 1 and correspondingly decide the output any change occurring within that clock period whether it is high or low will not be recognized so output will not change until the next clock transition occurs such an operation is called edge triggering operation when i say once in a clock period only from 0 to 1 not from 1 to 0 or i can define from 1 to 0 as my reference point and not from 0 to 1 we should not do both the things because i want only one time a clock period i want one change in the output  the output should change once in a clock period  when that ? s what i want i have to make it either sensitive to the rising edge that is going from 0 to 1 is called rising edge and this is called falling edge either the rising edge or the falling edge i can make a reference there is no need that it has to be a rising edge some people call it as positive edge and negative edge even though all voltages are positive so we are talking about positive logic as i said 0 level is the 0v and 1 level is some volt like 5v or 3.3v when i say positive edge it means going from 0 to 1 and when i say negative edge it goes from 1 to 0 so i can make a flip-flop sensitive to my positive edge alone whatever input occurs whatever input happens to be there in the input terminals  whatever signal happens to be in the input terminals at the time of the positive edge transition that will determine the output for that clock period until the next positive edge occurs  that ? s called positive edge triggered flip-flop likewise whatever input happens to be at the input terminals whatever signal happens to be at the input terminals at the time of a negative transition from 1 to 0 only those inputs will determine the output of that flip-flop for the entire duration of that clock period until the next negative edge occurs such a flip-flop is called a negative edge triggered flip-flop therefore for example if the input keeps changing here  again here  again here this called positive edge  refer slide time  43  38  and on the other hand if the input keeps changing here clock 0 1 t all are functions of time and all these points are called negative edge points and all these points are called positive edge points so if i design my flip-flop such that input changes will change the output based on of course the condition every time there is a positive transition occurring in clock such a flip-flop is called positive edge triggered flip-flop  input changes will set the outputs every time there is a negative edge occurring in the clock such a flip-flop is called negative edge flip-flop there we have solved the problem of toggling because toggling can happen only when its level triggered as long as the clock is high it keeps racing we have solved the problem of racing because racing occurs when the clock is high and it keeps shuttling back and forth  refer slide time  44  05  since you can only change once there is no question of racing so racing can be avoided by positive edge triggered flip-flop or edge triggered flip-flops plus we don ? t have two flip-flops like a master slave that means to that extern i can make it faster the whole flip-flop operation because there is only one delay i have  ? .45  26  with but of course it doesn ? t come free that you can ? t just take a flip-flop and do it but you need to have some extra logic built into your original flip-flop the original flip-flop as i said is the t flip-flop or a d flip-flop or a jk flip-flop but generally we do it for a d flip-flop in a d flip-flop because jk flip-flop is the master slave  most of time jk flip-flop is a master slave flip-flop because there are conditions of feedback and all those extra things generally jk flip-flops are master slave flip-flops and d flip-flops are edge triggered flip-flops the reason is in jk flip-flop the toggling condition is more important they want to use it for toggling conditions and it is doing something meaningfully with toggling which has an application and such application need not to be very very fast really  it can be fast but need not be very very fast this is a data storage application d flip-flop a data flip-flop as i said  you put a 1 and it stores  you put 0 and it stores and like to do it as fast as possible as a computer or something like that  an environment where memory has to be accessed very fast  the data has to be put in at a very fast rate and retrieved at a very fast rate so they usually use edge triggered flip-flop or d flip-flops and master slave operation with jk flip-flop this is not restricted but generally you can have master slave d flip-flop no problem now the input can change any time but it will be recognized at the given edge only and the output will change correspondingly and that extra logic which is required to modify your d flip-flop  the original d flip-flop with the extra modification like some extra gates will block  what really happens is not a very great thing  it blocks the variation because of the nature in which the gates are connected once the variation occurs from 0 to 1 it remains at that time unless another transition occurs from 0 to1 so when we look at the circuit we can analyze the circuit and see how this change can occur only once during that clock period that means the circuit is designed such that only a transition from 0 to 1 in the case of positive edge or 1 to 0 in the case of negative edge can change the inputs of the flip-flop finally the input with sr latch  do you remember that back to back connected nand gate ? it is always there in d flip-flop that is the core  we started with that core  back to back nand latch  two nand gates connected back to back if the input doesn ? t change for that then nothing can happen whether the clock is high or whether the clock is low any change that occurs in the input can not affect the output as long as the input to those sr flip-flop does not change in the case of using some extra logic when we need to have some extra gates it will prevent these changes that are occurring except in the case of 0 to 1 transition in the case of positive edge and 1 to 0 transition in the case of negative edge i am leaving this as a reading exercise please go over some books standard text books in which they will tell you the configuration of edge triggered d latch edge triggered d flip-flop there is an extra logic involved  please try to understand that logic  please try to first locate that circuit and then understand the operation of that circuit and why the input changes from 0 to 1 and 1 to 0 which can only make a change  the clock changes from 0 to 1 and 1 to 0 can only change the output that is because as i said it blocks the variation within that period  it blocks the variation to the input of that final latch and the final latch is the sr back to back nand latch that latch input should remain constant for that whole clock period whatever it happens elsewhere why it happens is that the way in which the logic is designed makes it possible i leave it as a reading assignment to you  look at a standard text book in which they will tell you the concept of edge triggered flip-flops  give you a circuit diagram  look at the circuit diagram and understand the circuit diagram of how it works and also analyze why this is behaving the way it is we have now seen four types of flip-flops as i said d flip-flop  sr flip-flop  t flip-flop  jk flip-flop and using them what we can do we will see in the next lecture digital circuits and systems prof s srinivasan department of electrical engineering indian institute of technology  madras lecture # 19  refer slide time  2  05  we have been talking about different types of flip-flops namely the d flip-flop  sr flip-flop  jk flip-flop and t flip-flop we also talked about level triggering and edge triggering  we talked about master slave flip-flops so today we will look at the behavior of some of these flip-flops  different types of triggering for easy and the waveforms i am using a d flip-flop because d flip-flop has only one input but if it is sr or jk we need to have two inputs so in order to determine the output we need to consider two inputs at the same time so since i thought i would explain the difference of behavior of the output of different types of flip-flops in terms of triggering  master slave  positive edge triggered  negative edge triggered i am using d flip-flop as an example the same concept may be extended to the other types of flip-flops jk or sr or t now i am assuming a clock waveform  this  refer slide time  3  41  is the waveform of the clock 0 to 1 keeps going this is the clock period of course any flip-flop clock need not have  first of all they need not be the period of the clock from one positive edge to the next positive edge or from one negative edge to next negative edge it need not be uniform of course generally regular clock generation if you do using standard circuits you will always have uniform periods in general it doesn ? t have to be  refer slide time 4  15  likewise it doesn ? t have to be equal  the level 0 and level 1 of the clocks need not be equal again  if you want to make them equal you can you might have heard of this term duty cycle a duty cycle is the time for which the clock period is on compared to the total period the ratio of the on period of the clock or the high period for which the clock remains high to the total clock period is called duty cycle duty cycle can be half if you have positive and negative regions of the clock pulse equal in time interval otherwise it is the non fifty percent duty cycle i have assumed an arbitrary clock but my only requirement it has to go from 0 to 1 back to 0 back to 1 back to 0 back to 1 so it is an arbitrary clock i am assuming that this clock is applied to different types of flip-flops  to d flip-flop of different triggering with different triggering mechanisms such as edge level triggered  edge triggered  positive edge triggered and negative edge triggered so first i am applying it to the master slave flip-flop in the master slave flip-flop first i would like to low  the master slave flip-flop is a level triggered flip-flop it is level sensitive  when the clock is high any change in the input d will change the output but when the clock is low of course changes in the input d will not affect the output so if there are two flip-flops master and slave the master flip-flop is the simple level the sensitive flip-flop wherein when the clock is high this d is going to change the output but since you are feeding it to the slave flip-flop whose clock is low and when the master slave clock is high the changes that happen will not be immediately reflected in the output of the slave that is the concept of master slave flip-flop so what is the change in the master output ? master output is the level sensitive output when the clock is high this w is an arbitrary waveform of d  refer slide time  6  37  i said it is a good practice to change the data or any inputs of the flip-flop only when the clock is low but i have not adhered to that rule here i have given an arbitrary d which changes at random so d remains 0 to start with becomes 1 somewhere here in the middle when the clock is low again goes low when this clock is low and the second time it goes high in the middle of the clock when the clock is high it remains high for a while goes low again somewhere when the clock is low then again it goes high and this time it goes low when the clock is high so you have all types of things changing when the clock is low both from 0 to 1 and 1 to 0 changing from 0 to 1 when the clock is high changing from 1 to 0 when the clock is high i have put all the combinations possible so that we can analyze behavior of flip-flop completely so in a master slave flip-flop first i am drawing the waveform corresponding to the master output which is going to be fed to this slave so master is a level sensitive level triggered d flip-flop whose output will follow the input when the clock is high when the clock is low nothing happens  and here even though d changes to 1 nothing happens at the output because the clock is low at this point the clock becomes high and the d is 1 so output has to become 1 the output remains one through out the period of the clock on and since it continues to be 1 here the change from 1 to 0 during the clock negative or clock being 0 will not be immediately recognized will not immediately reflect the output and this change from 1 to 0 all the d input when the clock is low will be reflected at the output of the flip-flop only when the clock becomes 1 again and that is the behavior of any flip-flop when the clock is low the entire flip-flop behaved as they are in a memory state so this 0 to 1 transition shows here in the next clock edge and next time the clock becomes high but immediately thereafter when the clock continues to be high the input changes from 0 to 1 so naturally the output also has to be change from 0 to 1 so the d flip-flop output in a level triggered mode is just you have to follow the input along with the clock high if the clock is low you just stay put that is the easiest way to remember to do that so this follows this continues to be 1  clock is low continues to be 1  clock is high continues to be 1  when the clock is low it goes to 0 but it not reflect at the output until the next clock happens  during the next clock period in the next clock on period so at this point in time this 0 to 1 transition will be reflected so this 0 to 1 transition is reflected here  this 0 to 1 transition is reflected here  refer slide time  10  05   and then in between it goes  this 1 to 0 transition reflects here  this 1 to 0 transition will reflect here when the clock becomes high again and since when the clock is high the input goes from 1 to 0 and the output also will become 1 to 0 this is the master output of a master slave d flip-flop or also the output of a level triggered d flip-flop both are same master and slave are both level triggered so we can call this either a q output of a d flip-flop when the flip-flop works in the level triggered mode level sensitive level sensitive d flip-flop output or the master output of a master slave d flip-flop now in the case of master slave flip-flop this output of the master is fed to the slave as the input d at the slave and the output will change according to the clock of that slave flip-flop which is the inverse of the original clock this clock inverted is the slave clock so now again originally it is 0 actually we started with 1 to 0 again 0 output initially and this change in the input which reflects the change in the output of the master will go into the slave only when the clock becomes 0 at this point in time the clock of the master becomes 0 and the clock of the slave becomes 1  the clock of the slave becomes 0 here and 1 here so this is a 0 to 1 transition of the clock for the slave so this change will come here now again during this period this is on and once it is high s will this be seen now ? because now this is going from 1 to 0 of the output and can reflect the slave output only at this point only when the clock becomes 0 when the clock becomes 1 to 0 this change in the master output can reflect in the slave only at this point in time but before that what has happened is the master has become 1 again so this change in the d in between is completely ignored so at this point in time it was above to go to 0 but then it finds that it can not go to 0 because the output of the master has already become 1 so it has to follow the master so the output continues to be 1 and this output becomes 1 to 0 which will be reflected at the slave output at the next negative edge or when the clock goes from 1 to 0 so this gets reflected here  refer slide time  14  14   this change is ignored by the slave likewise it became 1 here when the clock was low so when the master clock became 1 the output became 1 and continued to be 1 for a while and then it got 0 but then this one could have been reflected in the slave at this point in time before which the master output has become 0 so there is nothing to follow  refer slide time  15  26  the slave follows the master output the master was one at the beginning of the clock cycle had the 1 continued at the negative edge of the clock slave would have followed it but before that master output has become 0 in between in the middle of the clock period so again this is ignored now this is interesting in one sense what we said was always change inputs when the clock is low but when the clock is high do not change inputs now automatically that is taking care of this only those inputs change which were made when the clock was low changed the output of the slave  this change happened when clock was high that is ignored by the slave  this change occurred when the clock was high ignored that means this input change and this input change which are both of the value when the clock is 0 these are the ones which are reflected so this is the slave output in which these temporary pulses these are called glitches  and momentarily the output goes from 0 to 1 back to 0 or 1 to 0 back to 1 these are called glitches which are undesirable but i want only flat waveform 0 1 0 1 like that any waveform to be of use should last for at least for one clock period if you want to use it  if you want to use any output i need to have it at least for one clock period so that it can activate whatever mechanism or output devices which needs to activate this is a narrow pulse very small portion fraction of the clock period which again is a narrow pulse these two narrow pulses or glitches would have been eliminated in the master slave flip-flops so  master slave flip-flop serves the purpose of frequent changes in the input affecting the master and not reflected in the output of the slave it only makes the change once in a clock period originally we thought of master slave for avoiding racing to avoid racing we thought of that because that is the same as this and in effect this is the same as this because there are two frequent changes within a clock period within the clock period being on there are too many changes in the output which we did not like so we avoided many changes in the output when the clock was high  and that is also the same thing here so that design which was originally made to eliminate the changes in the output of the clock output of the flip-flop too frequently also helps us to ignore glitches this is one operation  one option to have a master slave operation is to make sure that the output do not change frequently but they only change once in the clock period where any racing condition can be avoided the other possibility is to use edge triggered flip-flop which is mentioned by me in the last lecture towards the end i can have a mechanism or an extra hardware within my flip-flop which will make sure that once output transition takes place it will not happen again within the same clock period but it will only happen in the next clock period you can let the output change during the clock changing from 0 to 1 which is called a positive edge transition or when the clock changes from 1 to 0 this is called negative edge transition so one is called positive triggered flip-flop and the other is called negative edge triggered flip-flop in a positive edge triggered flip-flop all you have to do is to look at the input at the time when the clock goes from 0 to 1 and whatever will be the output based on that input will be the output for the entire clock period of that clock period you don ? t have to worry about what happened in between until the next clock edge comes it is the same thing in the case of a negative edge triggered flip-flop once there is a change the flip-flop looks at the input at the time when the clock transits from 1 to 0 and that will decide the output and that output remain same until the next negative edge comes in between you don ? t about worry about the changes that took place in the output therefore from the same clock period i have now drawn the positive edge triggered output had this been a positive edge triggered flip-flop instead of a master slave flip-flop  instead of a master slave flip-flop had it been a positive edge triggered flip-flop how will the output change ? all you have do is to look at the positive edge  this is called positive edge  refer slide time  21  29  and find out the output at the positive edge and that input will be the output for the entire clock period so at this point it is 0 so for one clock period it is 0  at this point it is 1 so for the next clock period it is 1  at this point it is 0 so this pulse is not going to be recognized so it has become 0  at this point it is 1 it is 1 here and at this point it is 0 so 0 and at this point it is 1 so 1 even though it doesn ? t fall back to 0 it continues to be 1 so once it becomes 1 it continues to be 1 until the next positive edge comes at each positive edge you look at the data and decide the output and that output remains until the next clock edge comes and again at the next clock edge look at the data and decide the output now it is not the same as this but now at least here the output remains stationary for the entire clock period and in between there is no output change in the positive edge trigger if you apply this d flip-flop it happens only like this  refer slide time  22  55   it changes for one clock period  one clock period  one clock period but change in the input of the clock even though it occurred in the middle of the d pulse middle of the clock it is recognized here so that way it is different from the behavior of this even in positive edge triggered flip-flop we have to be careful not to change the input  even though output will change now only you do not want to have this change in the input when the clock is high  you should be careful not to give input changes or not to change inputs when clock is high because it will result in affecting the output negative edge triggered flip-flop the same logic applies except that we now look at the negative edges and positive edges what is a negative edge ? the negative edge is one which goes from 1 to 0 so this is a negative edge  this is the negative edge  negative edge  negative edge  negative edge and so on in each of the negative edges you look at the input and decide the output here it is 0 so the output is 0 for one clock period   refer slide time  24  00  at this point it is 1 so 1 for one clock period and at this point it is 1 so 1 for one more clock period  at this point it is 1 so 1 for one more clock period  this point is 0 so 0 for one clock period  this point is 0 so 0 for one more clock period  this is 0 so 0 for one more clock period that is all  refer slide time  24  24  incuriously this is same as this so a master slave flip-flop works like a negative edge triggered flip-flop so i have a choice now  i can have a master slave flip-flop  i can have a positive edge triggered flip-flop or i can have a negative edge triggered flip-flop  the waveforms are given a waveform of the negative edge triggered flip-flop is identical to the slave waveform of a master slave flip-flop if you want the waveform of a master slave flip-flop identical to the positive edge triggered i can do it by giving the negative of the clock to the master and regular clock to the slave i now have a clock which i fed to the master  i inverted it and fed to the slave but instead i take the clock invert it and give to the master and then invert it again and give to the slave that means the original clock is given to slave and inverted clock is given to the master then the behavior would be opposite therefore a master slave flip-flop will behave like a positive edge triggered flip-flop  so i can have any combination of the outputs or any combination of the behavior any behavior that you want can be achieved so having talked about latch being a storage element a bit storage 1 or 0 and making sure that we need some timing or a control pulse to decide when the data will be stored we introduce the clock and we call the clocked latch a flip-flop and then we get sr flip-flop and we wanted a single input so we made d flip-flop and said we wanted to remove s is equal to 1 r is equal to 1 condition made it a jk flip-flop and we worried about racing and removed the racing by introducing master slave concept or a edge triggered concept and also had a t flip-flop where only toggling will happen and i also explained about the behavior in terms of waveforms and everything namely circuitry  symbols  characteristic tables and so on the next question is what do we do with all these flip-flops ? d flip-flop as i said is simply used for data storage so we have a data and store a bit of information you give it to d and clock it and it will store it  it is available in the output and i want to change it you put another value of d and then clock it again  refer slide time 30  20  jk i said in addition to data storage of course data storage of jk will be put to two inputs 0 1 for 0 storage and 1 0 for one storage in addition you can also use it as a toggling mode so first let us look at that feature because data storage is a simple thing  i put a data clock it so it has a storage data sr and jk i need to do the same thing except that data has to be 0 1 1 0 combination so the one in which the feature is sort of different is the toggling feature let us see whether we can use a toggling feature so let me draw a jk flip-flop  here after i will only use blocks  use a block and it is all inside  the circuitry so let us say it is an edge triggered flip-flop or a master slave flip-flop it doesn ? t matter  let me call it a negative edge triggered flip-flop or a master slave flip-flop because both are of the same behavior by the way when you write the symbol let us say jk and put clock here let us assume it is a level triggered clock level triggered flip-flop if you think it is edge triggered you have put an arrow like this a knife edge  it is a point  meets only one point in time at one instant time this is the symbol for edge triggering if you put like this it is a positive edge triggering  refer slide time  29  10  so this is level triggering you put like this it is edge triggering positive edge triggering and you put like this an arrow with a bubble where bubble is always inversion wherever you see bubble that is why in inverter you have a bubble  nand gate is a bubble  nor gate is a bubble so bubble stands for inversion it ? s a negative edge triggered flip-flop these are symbols used of course you don ? t have a separate symbol for master slave you put like this for master slave also because master slave behaves like a negative edge triggered flip-flop so let me assume it is a master slave flip-flop or a negative edge triggered flip-flop and i put j is equal to 1 k is equal to 1 when j is equal to 1 k is equal to 1 what happens to the output ? the output toggles  the present output is the complement of the past output the output during this present clock cycle is the complement of the output during the previous clock cycle or the output of the next clock cycle is the complement of the output of the present clock cycle  this mode is called toggling mode i am going to draw a clock waveform if it is a negative edge triggered or a master slave flip-flop it doesn ? t matter so i am giving this clock here to this input i am making j is equal to 1 and k is equal to 1 what is the 1 ? 1 is 5v or high level voltage  it can be 5  3.5 or whatever voltage you choose in your technology now let us assume initially q was 0 and at the negative edge the output will change  it will change to the complement of what it was so it was 0 to start with  this is time access  refer slide time  32  40  and at this point in time it will become 1 1 input and the output changes to its complement and i am giving this clock input and the clock negative edge because of the negative edge  the original q was 0 and at this point the q becomes 1 and at this point it becomes 0 and this point it becomes 1 now can you not see something in these two ? as i mentioned earlier the period of a clock has the point from which you start from one point in the waveform and reach an identical point in the next cycle so here to here is the period  from here to here is the period  here to here is the period and in this case this is the period for every two clock periods here this clock period is 1 so we have one period for every two clock period of the clock or it is positive for one whole clock period  but earlier the clock period was half positive half negative that is half 1 and half 0 now for the whole clock period it is 1  and for next whole period it is 0  and for next whole period it is 1 and so forth so i am having an increase in the clock period by a factor of 2 or reduction in the frequency by factor of 2 so if you want to divide a clock frequency by a factor of 2 i can put it through the jk flip-flop and take the output of the q so basically a jk flip-flop is with j is equal to 1 k is equal to 1 or j is equal to 1 k is equal to 1 you want a special name for this then it is called toggled flip-flop so instead of showing it as jk flip-flop you can say t is equal to 1 so when j is equal to 1 k is equal to 1 it is called t mode toggle mode a toggle flip-flop is divided by two flip-flops now if i take another flip-flop whose output is again j is equal to 1 k is equal to 1 and this clock period i am going to not give this clock but going to give this clock divide by two clock if this clock is fc and this should be fc divided by 2 that fc by 2 would be fed to the clock by the second flip-flop so the output would be fc by 4 so we will call this q1  call this q2  q2 will remain 0  here it will go 1  0  this is my q2 so every clock pulse period become half a period here so one clock period of this is equal to two clock period of this  now every clock period becomes half clock period here and i can go on dividing this further and further so if i have a two flip-flops i get the output of fc by 4 circuit so if i have n flip-flops let us say p jk flip-flops with j is equal to 1 k is equal to 1 then divide the input clock by 2 power p so here you have straight away got a use for the flip-flop i want to divide a frequency a frequency divider  i have a large frequency i want to divide it for many reasons can you think of places where frequency has to be divided just it ? s a very simple general knowledge question  just come up with some answers where will you need a frequency divider ? watches is a good example  minutes has to be divided into seconds and seconds has to be divided into minutes and minutes into hours and hours into days and days has to be divided into weeks and so forth  refer slide time  39  40  so one simple use of this flip-flop at least in the toggle mode is you keep on dividing the input clock original clock by a fraction of two every stage where p stages get divided by a factor of 2 power p now i don ? t have a space to draw this waveform supposing i have four jk flip-flops or negative edge triggered flip-flops jk all js tied to 1  all ks tied to 1 this is q  q  q  q i will call this qa qb qc qd so this will be ja ka kb jb jc kc jd qd  refer slide time  41  05  so this flip-flop is d flip-flop  c  b  and this is a there are four flip-flops a b c d all negative edge triggered jk flip-flops and connecting the outputs like this let us look at only the 0s when the first clock becomes 0 the output of this is 0 0 0 0 that is four 0s then this becomes 1 and this continues to be this  refer slide time  41  49   after this this becomes 1 0 0 0 when this 1 becomes 0 so the first flip-flop immediately the qd flip-flop for every clock period it goes from 0 to 1 1 to 0  0 1  0 1  0 1  0 1 like that qc goes like 0 0  1 1  0 0  1 1  0 0  1 1  0 0  1 1 because every two clock pulses of the qd will only make this one change now this will be again repeated and this will remain 0 for four clocks then become 1 and remain for more four clock pulses  this will remain for eight clock pulses 0 and another eight clock pulses 1  refer slide time 42  20  so if you want to draw instead of drawing waveform of course since i don ? t have space to draw waveform for sixteen clock cycles i will do it in binary so supposing this clock is qa qb qc qd this is 0 1 0 1 0 1 0 1 0 1 0 1  refer slide time  43  20  and this will be 0 0 1 1 0 0 1 1 0 0 1 1 0 0 1 1 ? ? ? ?  the value of qd during clock period let us call this clock period this is clock 0  clock 0 1  refer slide time  44  10  we will all start with binary 0 1 2 3 so during clock period 0 all the outputs are 0  during clock period 1  during clock period 2 so during clock period 15 what it tells you ? i have a circuitry to count the number of clock pulses all i have to do is to find how many clock cycles have elapsed from 0 all i have to do is to look at the waveforms of the clock a b c d  if qa is 1  qb is 0  qc is 1  qd is 0 i know it is 1 0 1 0 which is the tenth clock pulse counting 0 as 1  starting from 0 actually it is the 11th clock pulse but we have to always number from 0 to 15 because there are only four bits so this also can be used as a counter they divide by two circuits  the divide by 2 power n circuit can be used as a 2 power n counter so this is 2 power 4 counter  using p flip-flops we can have 2 power p counter and when you say 2 power p counter we count from 0 to 2 power p minus 1 the 2 power p is 1 to 2 power p but we have to start with 0 so looking at the waveforms of the four outputs a b c d you know that it goes from 0 1 0 1 0 1 0 1 ? ? ? any combination of outputs you can look at and see that it is the fifteenth clock cycle  this is thirteenth clock cycle that means including this starting from 0 fourteen clock cycles  this is the thirteenth clock cycle if 0 is counted if we start counting from 0  start the count from 1 and after that what will happen is after fifteenth it will become 0 0 0 0 so we can not count beyond fifteen  with four flip-flops i can only have a 2 power 4 counter if i try to give the sixteenth clock pulse what will happen is this will become 0 because this is 0 1 0 1 0 1 0 1 so this will be 0  0 0 1 1 0 0 1 1 so 0 0 1 1 so next will be 0  refer slide time  46  45   four 0s  four 1s  four 0s  four 1s  so this will be 0 and here it is eight 0s eight 1s so this will be 0s so sixteenth clock pulse will revert it back to 0 0 0 0 again i start counting so it is called a modulo counter modulo 16 counter that means after 16 it is 0 or modulo 2 power n counter  modulo 2 power p counter so if we have p flip-flops i can count any pulse starting from 0 to 2 power p minus 1 and if the next pulse comes 2 power pth pulse comes all of the flip-flops will become 0 0 0 0 so i will have to start all over again we have already seen two uses of these flip-flops one is that you divide this 2 factor clock division like somebody said in watches you can use it and the other thing is use at counter hence  suppose i want to count the number of people in this room all i have to do is to put this counter at the door and the clock will be the one that would be generated by the person coming in as i said the clock need not be at the same period of duration or same duty cycle so any time a person comes in the room there is a momentary going from 0 to 1 back to 0 that is your clock and i use this into my counter sequence so at any time i look at the pattern of the counters the waveform of the counters based on the combination of 0s and 1s in this counter i can say how many people have come to this room so this is the counter  basically a set of flip-flops will be used as a counter it is a binary counter because we can only count binary values  you can make it decimal later on  we will see how to do that  refer slide time  49  00  this is a two binary counter  we will also see some other uses of this now the problem is i can terminate only when the number is 1 1 1 1 suppose i want to count up to 10 and go back to 0 in a decimal counter that is i would like to count from 0 to 9 and back to 0 how do i convert this into a counter which can count from 0 to 9 and back to 0 or any other arbitrary value  suppose i want to count up to 12 i want to count dozens  i want to pack something by dozens  i have a product to be packaged i want to count 12 so how do i do it ? after 12 it becomes 0 0 0 0 is it possible ? so how do you make it count non 2 power n values and if you want to count up it is all right but when people leave this room i want to know how many people have left this room so counting down also should be possible so as people leave the room the count has to reduce by 1 so can we convert into an up counter and down counter  can we convert into a counter which is in count non 2 power n values etc we will see in the next lecture digital circuits and systems prof s srinivasan department of electrical engineering indian institute of technology madras lecture # 20 up/down counters  refer slide time  1  07  we were discussing the applications of flip-flops in addition to being a storage element a flip-flop can also be used for division of the frequency by a factor of two each flip-flop divides the clock frequency by a factor of 2 and also can be used as a counter by stacking flip-flops serially by connecting series of flip-flops we can use it as a counter we saw this in the last lecture the counting depends on the number of counts or number of distinct states the counter has we will depend on the number of flip-flops so there are n flip-flops the number of distinct states the counter can take is 2 power n so if we start the count with 0 it will go to 2 raised to n minus 1 you should also do a down counting after all down counting and up counting is not very different because we know that q and q bar always complementary in any flip-flop so when counting if you start the count with 0 0 0 0 let us say it is a three bit counter let us assume these three flip-flops have the outputs a b c as qa qb and qc so the count starts from 0 0 0 then 0 0 1 and 0 1 0  refer slide time  3  55   now if you look at the complementary outputs this would be 1 1 1  this would be 1 1 0 ? ? ? so all you have to do is to use the same counter whatever counter we had for up counting but take the flip-flop states from the q bar  refer slide time  04  43  so if you looked at q bar instead of q of the flip-flops you get a down counter so i can have a 0 to 2 power n minus 1 counter using n flip-flops and 2 power n minus 1 to 0 counter also using the same n flip-flops depending on where i take the outputs from take the output from q it becomes up counting  q outputs up count  and q bar output if you take it becomes down counting so that is a very major use of a flip-flop  use flip-flops in a chain and for counting events sometimes i may not want to count till the end of the last state that is possible within n bit counter we go from 0 to 2 n minus 1 and then go back to 0 after 2 n minus 1 count the flip-flop becomes 0 0 0 again so i need to go through a full cycle the modulo as i said modulos the total number of states the counter has is called modulos suppose i want to terminate the count at a count which is less than maximum  if you want to terminate the count at the count which is less than maximum and go back to 0 i should be able to do it  example is the four bits we can have 0 to 15 but i may want to terminate with 9 that is 0 to 9 and start again with 0  there will be a decimal counter a decimal counter will come from 0 to 9 back to .or for that matter i may want to start a count for a state which is greater than 0 i may want to start a counter for some reason 3 instead of 0 and then go out all the way up to 11 or 12 or whatever so i may be able to start at any count or end at any count within the possible range with four bits you can only go from 0 to 2 n minus 1  with four bits we can only go from 0 to 2 power 4 minus 1 which is 0 to 15 and in n flip we can only go from 0 to 2 power n minus 1 and within this range i may want to start any count and i may want to end any count and start all over again how do you do that ? by terminating the count and starting it again at any point there is some extra mechanism required in any flip-flop whether it is a d flip-flop or a jk flip-flop i am talking about  let us take the jk flip-flop because that is what we have been using for these counters  clock it as 0 and this as 0 so it becomes a negative edge triggered with an arrow and a bubble  refer slide time  8  30  q and q bar is this and this is what we have been depicting as a flip-flop until now now i want to introduce two are inputs in this flip-flop of course there are two more inputs already which is the power supply and ground  no circuit will work without power supply and ground because these are active devices like transistors either bipolar transistors or mos transistors inside this we have not gone into the circuit details but utmost we have gone into the gate level detail and not beyond that gates have active component like transistors and mos devices let us not get into that but we need to power up those devices we need vcc and ground or vdd and ground depending on the nomenclature leaving those two inputs power supply and ground apart there are two more inputs defined for many of these flip-flops these are called preset and clear this input is called pst stands for preset and clr stands for clear  refer slide time  9  52  clear input and preset input what does a preset input do ? as we see there is a bubble here that means this is an inverted input an input which activates the circuit when it is low is called active low input such inputs we draw with a bubble an input which would be affective when you make it 0 is called active low an input which will be active or which will activate the required thing when you put 1 on it ? s called active high input when you draw an input with the bubble it is called active low input so the preset input when it becomes 0 what happens is it makes q1 irrespective of the values of j and k and irrespective of the clock being positive  clock is 0 or 1 that means the preset input as called in electronic circuit parlance overrides all other inputs  pst is equal to 0 makes q is equal to 1 irrespective of the value of j  k and clock at that instant of time and as long as preset is 0 output continues to be 1 and in between a clock may come and go  you may change j and k regardless of all that such an input is called an overriding input likewise a clear input will make as the name suggests it clears the output means q will become 0 these happen irrespective of jk and clock so these two inputs are called as i said overriding inputs so i need extra logic and to do that you can get into this little bit extra logic by regard to make sure that this has an overriding property of making the output 1 or 0 as the case may be that means i can now write a table which is called preset clear table and preset clear q  preset is 0  clear is 1  output is 1 and if preset is 1  clear is 0 and output is 0 and when preset is 1 and clear is 1 only then the flip-flop functions normally taking j and k as the inputs on the clock cycle and at the clock cycle it goes past high or low all that will be determined and only when preset and clear are both made 1 they will allow influence on the normal functioning of the flip-flop so the flip-flop acts normally as defined by the inputs and the clock when you say normal the behavior depends on the values of the input j and k and the clock and if both are 0 which is predominant to the other because each of them is a pre-overriding input and when both are 0 then we won ? t know which one is overriding so one of those states is not permitted don ? t try to do both clear and preset to 0 that means there is uncertainty and i always tell you the uncertainty should be avoided on all cost in any design make sure that preset and clear are not made 0 at the same time  refer slide time  15  35  now this property is going to help me to start or count anywhere i like and end my count anywhere i like suppose i go from 0 to 2 power n minus 1 and at some intermediate point i want to terminate and make it 0 0 0 0 i can do that by detecting that point and clearing all the flip-flops at that point similarly i want to start the count other than 0 i detect the point at which i want that to happen and use my preset inputs to get the flip-flops in different values so use preset and clear inputs to get the flip-flops to different values other than the normal sequence that is where you get an arbitrarily counter  it is not going to start arbitrarily and end arbitrarily but of course defined by you and i didn ? t say it is random but it is arbitrarily that means you can decide what you want so let us take a simple example of a three bit counter and whether it is up or down it doesn ? t matter because as i said all you have to do is to take q or q bar for up and down respectively so the three bit counter will be three flip-flops all of them are jk one clock  this is q and this is q bar so i will call this a b c three counts  a is the most significant bit and c is the least significant bit of this  this would be qa this is qb this is qc or i want to call this as a b c  refer slide time  17  26  so i have a b c normally i go 0 0 0  0 0 1  0 1 0  0 1 1  1 0 0  1 0 1  1 1 0  1 1 1 or if i take the complements it will be 1 1 1  1 1 0  so forth 0 0 0 i have just drawn the up counter you can draw the down counter by taking q bars instead of qs as i said now now let us say i want after 5  0 that means i want count from 0 1 2 3 4 5 and back to 0 i don ? t want the count 6 and 7 to go through for some reason but i want only 6 states to be counted so all i have to do is to take this when 5 is reached clear all the flip-flops again by using the clear inputs so all these flip-flops have clear inputs and preset inputs so i detect the count that i want to count and until that count reaches i will have to clear them but i can not clear it as soon as 5 is reached because if i clear it as soon as 5 is reached assuming there is no delay in the clearing operation i just reached 5 and it ? s cleared that means i will go 0 1 2 3 4 completely done  4 is completely done  5 has just started but i want each count to at least last for one clock period so up to 0 1 2 3 4 as soon as 5 is reached assuming there is no delay in the process of preset clearing it will become 0 that means i will not have one full clock period for 5 so really i should start looking at 6  when 6 reaches if i want to terminate it at 5 i should wait for 6 and as soon as 6 reaches assuming there is no delay involved in the presetting process and in the clearing process as soon as count 6 is reached i clear all the flip-flops therefore it will go from 0 1 2 3 4 5 and even 5 will last for one time period of clock and the moment it becomes 6 immediately i will clear it so there will be a small glitch  i referred to glitch in one of my previous lectures  a glitch is a very narrow variation of the output a very short duration output variation from either 0 to 1 back to 0 or 1 0 back to 1 a pulse of going from 0 to 1 back to 1  0 to 1 back to 0 or 1 to 0 back to 1 it could be that there is a small glitch because of the small time delay involved in the clearing circuitry  there is a circuitry involved if you neglect that the other alternative is for me to have clock count 5 only for a very narrow period which is not correct  i don ? t want that i want full clock period for 5 also so actually if you want to terminate at count 5 you clear it as soon as 6 reaches how do you do that ? i detect state 6 and use the state 6 to clear that so state 6 is given by 1 1 0 this is count 6  count 6 is 1 1 0 if 1 1 0 is reached i should clear immediately all the three flip-flops that means i should take this into an and gate and 1 1 0 becomes 1 1 1 this is 0 when 1 1 0 is reached this is 0  refer slide time   21  42  so a three input nand gate which will give 0 output when this becomes 1 1 0 or this becomes 1 1 1 and this is what i will connect to the clear inputs of the three flip-flops  refer slide time  23  00  so the clear inputs of this flip-flop ?  and from where the a b c is coming from ? they are coming from ac  in order to not clutter the drawing i put it here  this a b c are not different signals these are the outputs of the flip-flops  a is the output of this msb flip-flop  this lsb flip-flop and this in between flip-flop so assume the flip-flops a b c take the value 1 1 0 this becomes 0 so i would have a count 0 1 2 3 4 5 and momentary  momentary  momentary short duration count 6 which can be ignored as a glitch and then start all over again if you do not want to start at 0 i connect it appropriately to preset and clear suppose i want to start with 3 so the second example is this  refer slide time  23  30  suppose i want to start at count 2 and yet end at count 6 i want counts 2 3 4 5 6 and back to 2 this is the cycle i want i don ? t want to count 0 and 1 and don ? t want to count 7  refer slide time  27  30  so again i will do the same thing i will look at 6  6 i have to complete i can not detect when the flip-flop reaches the count of 6  i have to wait for count 7 to come up because 6 has to be completely allowed so when count 7 comes up which is 1 1 1 i detect that and not clear all the flip-flops in this case i will preset this flip-flop and clear these two flip-flops  refer slide time  24  27   so i will get the count 1 1 1 this is a b c this pulse will be used to clear a and c and preset b preset will become 1 so 2 will start and after that it will be 2 3 4 5 6 back to 2 hence  by using this preset and the clear inputs i can start the count at any point and i can terminate the count at any other point  at any count we can start and if you want to down count all you have to do is to look at q bars instead of qs so i have an up count  a down count and arbitrary starting point  arbitrary ending point and number of flip-flops as i said the number of counts  total maximum number of counts possible is 2 power n when n is the number of flip-flops since 0 has to be counted as one state or first count the maximum count you can reach is 2 power n minus 1 so this is how you count as i have already said counters are used to count people  to count events  count things  clock division is used all the flip-flops are very very useful circuits  in many applications you will find the use of flip-flops we will see many more of them  do you any questions ? so in order to complete the drawing if you want to draw a b c this is my c b a q i will not show the rest of the drawing of jk etc  you know what it is all js are 1 ks are 1 now a b c when it reaches 0  1 1 1 becomes 0 we count these two  this is clear and clear  refer slide time  27  15  and preset  this is my input clock  this is the counter which counts from 2 to 6 in any circuit there is a transient state  there is not even a guarantee that it is going to start with 0 when you switch on the flip-flop the first time arbitrarily the clock is applied arbitrarily the counter can reach where the first counter may be 1  second counter may be 0  third counter may be 1 or 1 1 0 it can be anything the very first cycle of count you are not guaranteed of any starting value  it could all be 0  it could all be 1 or it could anything else but moment the second time that count reaches so there is a transient state  the circuit has to settle down  once the circuit settles down it does what you want you never take into account the initial state after you switch on the power the first time when you switch on the power there is no guarantee the flip-flop is going to start at 0 0 0  b may be 1  a and c may be 0 and so on on the other hand 1 and 2 may be 0 and the other one may be 1 this is 0 0 1 or 1 0 0 so you have to go for 1 0 0  1 0 1  1 1 0  and when 1 1 0 comes it goes to 2 so that is the cycle so the initial portion in linear circuit is called transients you don ? t talk about transient only with a steady state a stable state you analyze the circuit in this case you can call it latency digital terminology digital parlance is called latency latency is the time you have to wait for the circuit to start working after you give the inputs this is a very common word  latency is the time at which the circuit starts delivering the output after you switch on the power and after you give the inputs so there is an in-built latency in any circuit  refer slide time  31  26  now we have seen counters and we can design any counter we can and count up to 128 if you want to or 0 to 127 or anything else also for example ; think of a clock  somebody gave an example of a clock being divided by 2  example of a division of frequency we have a very high crystal frequency  these clocks run on redundant crystal the watches the watch chips  let us call it watch a watch chip an ic integrated circuit which is used in the watches it has this clock this clock is derived from a very high frequency stable source called a crystal oscillator  there is a crystal generally it is easy to build crystals of very high frequencies  it is very difficult to get a crystal of 100 hz  10 khz or something like that usually megahertz and several megahertz is the crystal frequency that is available which stable frequency what do you mean by stable the frequency ? the frequency will not drift some of the wrist watches you buy in some of the shops  bazaar you know what happens is you think it is a good watch and you buy for 25 rupees and the moment you start wearing it and the next morning you look at the watch it is already 9 o ? clock in morning when it is 5 or 6 or the other way it is going slow and showing 2 o ? clock the reason is because the frequency is not stable it counts down  but then if the original crystal is not a stable frequency it will either lose time or gain time which you do not want so this division by a factor of whatever required to make a clock so i will give this as an exercise ; assume a crystal clock of very high frequency megahertz  i want you to find out how many stages of counting is required so that i can have a count of seconds  minutes and hours not beyond that i want an hour display  a minute display and second display in my clock so the crystal frequency clock has to be brought down to the hours  brought down to the minutes i mean the other way very very high  you do several divisions to make it one cycle per second to count seconds then divide by sixty cycles per minute  divide by 24 divide by 60 minutes to make it one hour so i am not giving you a clock exact frequency because i want a whole number finally so it is the multiple of the clock because 60 times 60 so 3600 seconds make an hour so 60 minutes make an hour  60 seconds make a minute so 3600 seconds make an hour so make it 3.6 mhz i am having a 3.6 megahertz clock given to you  design a series of counters so that i can get my frequency divided at right numbers to have a count of seconds  count of minutes and count of hours this is an exercise now one disadvantage of this counter is  in these counters we feed a clock to the very first stage of the flip-flop  the output of the flip-flop is used as the clock for the second stage  the output of this flip-flop is used as the second stage for this clock and so on  the clock is passed from flip-flop to flip-flop there is an inherent delay as i said they also talked about small glitch the moment i reset it it is not going to get reset that is going to be short time duration depending on this once a one 1 0 whatever is reached here there is a small delay here and it takes its own time to become 1 1 1  it takes its own time to become 0 that 0 is applied here  here  here it has to activate the circuitry for clear to become 0 0 0 there is small amount of delay involved that is a short pulse as i said it is a glitch so you can ignore it now each of these flip-flops has also the propagation delay i told you the flip-flop have this initial stage  clocking stage and the next stage will be latching stage so there is a propagation delay involved in each of the flip-flops so i give this clock it takes a while a small amount of time though propagation delay time before the output changes that is fed into this and this is going to take its time before this is going to change  refer slide time  35  19  and this is going to be applied here  this is going to take its own time and this is going to change  refer slide time  37  40  so let us go through this supposing i have this count and i am applying the clock here the next count is this  refer slide time  35  40   this one has to become 0 first flip-flop c flip-flop has to become from 1 to 0  b flip-flop has to become from 1 to 0 and a flip-flop has to become from 0 to 1 i am feeding the clock to the c flip-flop as you can see there so it is going to take its own time for this to become 0 and after that delay only this flip-flop will go from 1 to 0 and after that delay only this 0 will go to this 1 so  from 0 1 1 to 1 0 0 to settle down it is going to take a final amount of time approximately equal to 3 into propagation delay of flip-flop we call tp t subscript p as the propagation delay of the flip-flop  i want three propagation delays approximately  of course there are other things like reset  clear etc once you have a number you can always compute but there is a concept here you should know there is a number you will have to look for once a number is given to you then you can make it approximate  after two nanoseconds by looking at the data sheet you find that it is not two nanoseconds but it is three nanoseconds but still it ? s all right you have to do a computation but you should know there is something like that we have taken into account so there is a delay in each flip-flop stage which affects the change and for more number of flip-flops there is a delay in counting so it becomes longer and longer  refer slide time  44  15  so if you have eight stages with 8 flip-flops what is the count i can reach ? flip-flop propagation delay  let us assume tp to be the propagation delay of a single flip-flop so we have 8 flip-flops 2 power 8 as an example for 8 flip-flops delay is 8tp so what is the count i can reach from 0 to 2 power n minus 1 where n is 8  2 power 8 is 256  so for a count from 0 to 255 each count takes 8tp to materialize if i am 0 after 8tp 1 comes and after 8tp 2 comes and so forth reliably of course something can happen faster than the other for example here to here  refer slide time  39  10  there is no change in this flip-flop so it is going to immediately come  there is no change  there is no question of propagation delay it is not that each count is going to change only then this i should allow for a maximum propagation delay of 8 times tp in order for a count to be reliable now talking of these clocks the watches from 3.6 mhz you have to count down to the second one second is 1 hz per one cycle per second which is one second and megahertz is 10 power 6 times 3.6 times so 3.6 million to 1 you will have to find out the number of flip-flop stages that is required when that is the number of flip-flop stages required each count is going to take that much longer to materialize now if i run it at a speed which is faster than that speed so my clock period that is starting from one point in the clock and stopping exactly in the same point in the next clock cycle if you take the positive edge of the clock then the time duration until the next positive edge comes is what is called the period if i take the negative edge from one negative edge to the next negative edge is known as the clock period so if this clock period is much much larger than 8tp then you are not worried  it is only a small amount of time  anyway it is going down to one clock period to settle down the count is not going to change for one clock period for every clock period the count is going to remain from 0 to 1 to 2 to 3 to 4 to 5  each of these counts is going to remain for one clock period what if it takes 8tp to settle down ? 8tp is the insignificant part of my whole clock period but supposing i have the number of stages more  if n becomes large clock period may approximate the value of the propagation delays of the n flip-flops each flip-flop has a propagation delay of tp and n flip-flop stages will have n time tp and n is very large so i can not run this counter at a speed faster than this ntp thus maximum clock period has to be less than ntp if i run my counter faster than this before the count settles down the next count has to come all counts are arbitrary then in that case reliability is not there this is what i have been stressing all the time you can not reliably say the count has reached from 0 to 1  1 to 2  2 to 3  3 to 4 it keeps changing constantly because the clock keeps coming and sometimes it may be right depending on the number of transition sometimes may be wrong but we don ? t know which is right and which is wrong so i have to either use very small number of flip-flops there is a limitation or use extremely low frequency clock which is not always possible as i said the crystal oscillator stable oscillators there has to be crystal and these are all only available in megahertz range you can not reduce the clock frequency for the reason of stability not always but sometimes it is possible or you want particular speed of counting  for my application i need to count this fast events keep coming the number of people i am going to count if people keep coming constantly or some small events some atomic events or something you keep counting at the rate at which it has come into account and i can not say i can only count at this rate so please slow down i can not say that wherever it is possible to slow down your event or increase the clock frequency or have less number of flip-flops there is no problem but there may be situations where the events happen fast because you are ready to use a high frequency clock and the number of flip-flops used is also large because the count has to be reached with a very large value then this counter fails so this counter which is called a ripple counter suffers in the fact when the clock has to ripple through the flip-flops each flip-flop clock is the output of the previous clock i give the clock to the original clock to the first flip-flop and the output of that flip-flop is given as the clock to the second flip-flop  and the output of second flip-flop is given as clock to third flip-flop  the clock doesn ? t directly get into the flip-flops the clock that is given to you as a circuit in the crystal oscillator whatever i said that clock doesn ? t directly go into different flip-flops it only goes to the first flip-flop and it has to ripple through like a wave in the ocean  it has go into this  into this  into this  into this and each stage it accumulates a delay because of the propagation delay of the flip-flop so the clock accumulates delay and if the number of stages is larger than the events that is if the propagation delay is longer than the frequency of the events the distance between two events the time difference between two events then you lose track of the count ripple counter  the very name suggests it is a ripple which means that the clock is not directly applied to all the flip-flops but the clock is applied to the first flip-flop which ripples through different flip-flops to different stages the ripple counter files if the number of stages are very large such that the total propagation delay is of the order of  i won ? t say mathematically it should be larger  even in a practical electronic circuit when it approaches the order of this clock frequency clock period the total propagation delay approaches the order of the propagation delay it will fail to be a reliable circuit because you can never predict exact values so i have to think of flip-flops being used as counters  usually a lot of things as i said  it can do a division by 2 you can count up count down start with any value end in any value and so on counting is one of the important things we do in many application systems but ripple counter has to be replaced by some other counter so the improvement of this ripple counter is called a synchronous counter a synchronous counter in principle is one which will take care of this problem ripple counter is suffers from the problem of too many stages in propagation delay affecting the total number of count you can use it for on the other hand a synchronous counter is more practically used in a synchronous counter all flip-flops receive the clock at the same time  there is no question of clock ripple through the clock that is given be it a crystal clock or stable clock or whatever clock you design for the circuit is given to all the flip-flops so they are all clocked all the time but the change will depend on the previous count because if all the flip-flops are given in the clock and all the flip-flops change up and down then i can only count from 1 1 1 1 to 0 0 0 0 if all are toggle flip-flops so one state is all 1 1 1 1 and other states are all 0 0 0 0 then that is something i don ? t want i will be able to get all intermediate counts also so we will see how to use flip-flops whose clocks are all tied together to the same clock that is the given clock is applied to all the flip-flops not to the first flip-flops alone but at the same time how to get a different count these are called synchronous counters we will see it in the next lecture  refer slide time  49  09  before that we can do a lot of work on these ripple counters what i have given you is a flavor exercise on ripple counters  i would like you to design an up counter for 10 and down counter for 10so these are called decimal counters it goes from 0 to 9 or 9 to 0 and any other value you can also do by using these gates i also gave you the watch example these are the assignments on this ripple counters but actually in watch we will not use a ripple counter finally we will say that because watch has so many stages you will see that it may not be worthwhile to do the ripple counter but we may have to use a synchronous counter so we will talk about synchronous counter in the next lecture digital circuits and systems prof dr s srinivasan department of electrical engineering indian institute of technology  madras lecture # 21 shift registers  refer slide time  2  00  we were discussing counters  use of flip-flops in counter design  up count and down count or counting from an arbitrary count to another arbitrary count or down from an arbitrary count to another arbitrary count in all these cases we use what is known as a ripple configuration that is the output of a flip-flop drove the input of the next one  it was used as a clock for the next flip-flop so in that we saw that the delay of the flip-flops play a role in how fast you can count that ? s not a very desirable thing because as the number of flip-flops increases or as the total count that you want to count increases the propagation delay of the repel counter increases linearly the number of flip-flops so there comes a point where the total delay of the time it takes for a count to stabilize to the next count is longer than the clock period when that is the case then you can never have a stable count we sort of wondered whether it is possible to have a counter which will be independent of the number of stages we need to count that can happen only if the clock pulse is applied to all the flip-flops uniformly at the same time because any change in the output based on the input of the flip-flop can be triggered only after the clock goes high so when the clock has to be active in order for the flip-flops to settle down in the output you need to supply the clock and if you do not want the number of stages of the flip-flops to decide the counting period the delay you need to apply the clock pulse to all the flip-flops at the same time that means you are feeding the clock to the first flip-flop we have to feed the system clock the input clock to all the flip-flops at the same time then how do you control the currents  because once you put a j equal to one the k is equal to one you give a clock all flip-flops toggle that means if all the flip-flops are 0s to start with they will become 1s after the next clock pulse so the flip-flops will go changing from 0 0 0 0 to 1 1 1 1 and so forth we do n't want that  we want to count in a binary sequence so what we have to do is to look at the circuit of a counter we call this synchronous counters the synchronous counter is the counter in which the clock is applied to all the flip-flops so let us take a 3-bit to start with easy to handle in a classroom i can have the same negative edge triggered or master slave configuration as we had earlier i will call this a b c this will be a  this will be b and this is c  q q bar so this will be a  b and c  refer slide time  6  30  i want to apply the clock input to all the flip-flops so we put a 1 1 here let me write the counts so let us say to start with we want to have 0 0 0 initial during the first clock period let us say after the first clock pulse let me now write the sequence i want  i want this sequence  refer slide time  7  49  this is my desired sequence natural binary sequence look at the flip flip-flop c this one ; 0 1 0 1 0 1 0 1 so it needs to toggle at every clock pulse so there is no problem with this jk flip-flop because once you put j is equal to 1 and k is equal to 1 and give the clock pulse it is going to toggle so i will not have any problem with this j is equal to 1 k is equal to 1 and i will get the desired sequence at the flip-flop c output here of course if i put jk 1 1 for the second flip-flop and b if i put 1 1 here this will also change so it will be 0 1 0 1 0 1 because i am giving the clock to all the flip-flops and i put a 1 1 so whenever i put a 1 1 in this toggle mode and as in the toggle mode when you give a clock the output compliments itself so from 0 0 it becomes 1 1 then 0 0 1 1 which i do n't want but i want 0 0 0 1 1 0 1 1  refer slide time  9  45  so instead of doing this what i will do is i can use this information that is when this becomes 1 when c is 1 at the next clock pulse b has to become 1 so instead of tying this c  j and k unconditionally to 1 1 we will connect it like this suppose i feed the output of c into the input of jb the second flip-flop input  and first this was 0 but even though the clock was there when this change state this would not change state because the output of c was 0 and that 0 was given here and a 0 and 0 so we will also put this character jk here both j and k i will give one value 0 0 so during the second pulse when this became 1 from 0 this does not become 1 from 0 because j and k are both 0 0 so 0 0 of the clock pulse applied remains same in the jk flip-flop now the next pulse appears after 0 0 1 by now jb and kb has been kept to 1 in the meanwhile after this pulse so when the next clock arrives at that time there will be a toggle mode here there will be a toggling operation in this flip-flop  refer slide time  10  55   this will toggle anyways because i have connected with jk 1 1 so it toggles with every clock pulse  this will toggle after this because j and k are 1 in the next clock pulse it will not toggle because this is 0 so for every other clock pulse only the j and k of the second flip-flop becomes 1 for every second pulse  for every alternate pulse j and k of the second flip-flop become 1 1 so the second flip-flop will toggle only once in two clock cycles i am going to repeat this argument now third flip-flop i want to toggle only once in four clock cycles  i want this to be connected to 1 and remain one for every four clock periods  for four clock periods j and k of the third flip-flop will remain 0 and at that time there will be no change in the output for the third flip-flop the a flip-flop and for four clock pulses it remains 0 and for another four clock pulses it becomes 1 now  when do you want the transition to happen ? at the clock pulse after the count 1 1 was reached here after the 1 1 was reached here i want this to change once but that as to remain again four times for four clock periods so what i am going to do is to take these two into an and gate so when both b and c are 1 1 at the fourth clock pulse immediately thereafter ja and ka becomes one but the clock pulses have gone we can only do it next time so after that it will now become 1 1 and when it is 1 1 at the next clock pulse this will toggle i can keep this going with this fourth position for 4-bit counter  refer slide time  14  06  it is a 3-bit counter only 3-bits three positions are there and here these three becoming 1 1 1 will make the fourth flip-flop toggle and remain the same because after that not all of them can become 1 at the same time again all of them will become 1 at the same time here then it will become 0 which is same as this so it will repeat so when all the previous flip-flops have changed into 1 you want the toggling of the next flip-flop and that has remained for several clock cycles before the next change can happen this is the concept of a synchronous counter wherein the clock is given to all the flip-flops and the change in the queue controlled by the outputs of the flip-flops earlier we tied j and k of all the flip-flops to 1 so every flip-flop toggled but then clock was delayed  the first flip-flop received the input clock and the system clock as they call it and the second flip-flop received a clock pulse which is half the frequency of the first  the third flip-flop received a clock pulse which was one fourth the frequency of the first and so forth therefore we divided the clock and by using the lower and lower frequency clocks we are able to get the toggling action slower and slower the idea is that the first flip-flop has to toggle very very fast  the second flip-flop to toggle at a relatively slower rate this slower compared to this and so forth toggling is required but need to be controlled earlier we controlled it by means of a clock but now we are controlling it by means of the output of the flip-flops what is the advantage of this over the other one  synchronous and ripple counter ? repel counter by the way is also called a non synchronous counter asynchronous something which is not synchronous is asynchronous so asynchronous counters or ripple counters are the ones where we use the clock of any given stage from the previous output in the synchronous counter clocks are supplied to all of the flip-flops at the same time  the control of the toggling action is done by the outputs of the previous flip-flops the advantage is going to take place only after the clock pulse has arrived because this would have settled down for example  take the transition from this to this  as soon as this clock has arrived this would have settled down and for the entire duration of the clock this is going to remain as 1 1 so my j and k would have been fixed as 1 1 locked before my clock is due by this flip-flop  j and k will become 1 1 long before the clock comes when the clock comes all it needs to take is the clock period delay so the delay of the flip-flop so any flip-flop will change the output after one propagation delay earlier the second flip-flop will change the output after two propagation delays  third flip-flop will change the output after three propagation delays  fourth flip-flop will change the output after four propagation delays and so forth that is why we found that it is not possible to carry on as a long chain because the total propagation delay should be less than the clock period that condition is not there anymore we have to make sure that the delay of each individual flip-flop is less than the clock period which is adequate it can be amply supported or taken care of it should not be a problem all systems use flip-flops and counting mode and most of them use this synchronous mode of counting the only disadvantage is you need extra hardware and gates actually you do n't need to have three input and gate because i have the output of this i have to take the output of this and put it in this so every time i put two input and gate i take the output from the previous and gate as 1 so if you want to continue this it will be like this i do n't have to go for three input and gate or four input and gate  two input and gates will do for each stage so we stop with the flip-flops the synchronous counters non synchronous counters asynchronous counters ripple counters basically flip-flops are used for counting starting at any counter and terminating at another counter all within that 2 power n minus 1 range for n flip-flops we can not have more than 2 power n states so if i want to start from 0 it has to be 2 power n minus 1 within that i can start at any count and end at any counters either up or down and they can be synchronous or asynchronous all that we have already seen so what is the major use of flip-flops other than counting ? counting is one thing of course what is the original intention of starting sequential circuits here ? i said we need some storage element to store a bit of information ; the latch was a storage element so now the main use of the flip-flops is in the design memory even though we talk about one bit flip-flop a flip-flop which can store one bit in practice we never have words of one bit usually a word is 4-bits 8-bits sixteen bits thirty-two bits like that for example  if you take a code ascii code i said translate your alphabets and numerals into binary code such a code is called ascii code i said we have seven bits for that and we may have an extra bit for parity so 8-bit code so i want to store that code corresponding to a particular alphabet i need 8-bit eight flip-flops so instead of building memories using single flip-flops we can also have circuits or devices sold in the market which can take several bits at the same time and store it so such a combination of flip-flops is called register you may have seen this word being used in several digital books register is nothing but a bunch of flip-flops a group of flip-flops  refer slide time  22  05  a 4-bit register for example will have four flip-flops let us say they are d flip-flops because i said mostly it is used for data storage and data storage as i said for a d flip-flop is good enough so you have put d d d and d with qs as the output normally these flip-flops can be controlled by single clock internally there is a connector of course as i said externally when we are looking at a device with 4-bits as a user you have only one clock to connect one power supply to connect so all these flip-flops need vcc and ground or vdd and ground or whatever it is the nomenclature for the supply voltage similarly when we say one clock pulse it can be edged triggered positive or negative or whatever it does not mean that these flip-flops do not require clock it ? s all internally connected  the clock is connected like this suppose i only see one clock  refer slide time  24  00  so like that internally they will be connected likewise here also i will show the clock here but do n't think that only the first flip-flop gets a clock it is connected to all flip-flops so i can put any data here or if you want to put a b c we have been using a as the most significant bit and d as the least significant bit so when you put this data a should be the most significant bit we can just use this this way now i can put this information and clock it  it will remain constant it will remain inside and also be available here when i want it i can delete it off  it is a memory in order to get the inputs into the flip-flops and the register you need to put the data that has to be stored or the inputs  when you clock it these inputs get stored and they are available but the problem with this would be i need to keep the data constantly here because the clock keeps coming you can not design a clock for every little piece of hardware in your system you are designing a sub system you are designing  a clock is a common entity suppose i have a big digital system or a huge digital circuit there are several functional units and many of them require clock pulses for operation so the clock is generated and distributed commonly to all these units this clock may be at a frequency which is much faster than the rate at which i want to put the data and remove it suppose i want to put the data and then keep it for a while even when the clock keeps coming and going i do n't want to disturb it  so only when i want to use it i will use it and then i will put another data that means i want another control independent of the clock if i do not have that independent control when i clock it the data gets in and if the data does n't remain here the data may be available for a short period and when it is available i have to store it  if it is going to be available forever then there is no need for storing it  why should i store something which is always available ?  refer slide time  29  17  you need this data but only when it comes you can store it but i do n't want the storage to be removed by the next clock pulse because the data has been removed data as been removed means it would have taken other values which are non related  the arbitrary values where it can all be 0s  1s or they can be 0s or 1s or any random combination and next clock pulse will overwrite my data  the next clock pulse will put this random junk thing into my flip-flops so my stored data gets corrupted as i call it  cleared  corrupted  erased or whatever term you want to use therefore i need another control in which i want to store the data when it is available at that time and other than that period the data will not be disturbed so i need a control called load control now i am going to make it in the internal circuit such that the clock will be applied when the load is ?  that is the data will be stored into the flip-flops only when the load is active and not immediately when the load is active but when the load is active and when the next clock pulse arrives so can do that way or i can say simply load will put the data in so i can have two more reserve operations one is called asynchronous so again we have synchronous and asynchronous synchronous load means the load has to be high and the clock should be activated for it to store the data asynchronous means as soon as the load pulse arrives whatever data that is here will be stored irrespective of the clock pulse that is similar to the reset  preset  clear conditions we talked about we can have a choice of synchronous load or asynchronous load but the advantage is when the load is removed the store data is here inside even when the clock comes at a very fast rate much faster than the rate at which i want to read from this memory  for example i have a clock of one megahertz that is the clock period is one microsecond so every one microsecond we have an edge of the clock whereas i want to put the data here and keep it for hundred microseconds if load was not there after the first microsecond the data will be there and after the second microsecond it will be removed by and rewritten by whatever is here at that time which may not be the original data  i might have removed  the data must have been there for a short period it just disappeared and a b c d has taken random values and after one microsecond my storage will be junked so when i look at the data after hundred microseconds when i really need it i will find junk inside and not what i put now with the load i have the control i can put this load at the time when this data was available and remove this load pulse and then the clock may come and go but then this data can not enter inside  the new junk value can not enter in even though you do n't have the original values they have been removed arbitrary random values that a b c d assumed do not get into the flip-flops until another load pulse comes so after reading the data after another microsecond i can put one more load pulse and capture one more set of data likewise i want to clear a flip-flop that also is possible so i can have one more control called clear clear also can be synchronous or asynchronous the same concept  clear removes the data  clear makes the data 0  0 0 0 0 thus i have this independent control and anytime i want to remove the data or make it as 0s i can use a clear input automatically irrespective of what is there on a b c d and all the flip-flops will assume 0s again that can be done with the clock pulse or independent of the clock pulse if it is done independent of the clock pulse it is called asynchronous but when it is done along with the clock pulse where the clear will work only with the clock edge and without that it will not work that ? s called synchronous clearing as soon as the clear pulse is given if the flip-flops change to 0 0 0 0 independent of the clock pulse if it ? s 0 or 1 or an edge then you call it asynchronous clear so in short i have these registers which are bunches or groups of flip-flops which has several things  i can put the data in and keep it as long as i want and take it of read it of and use it i can again use the same data i can have a data which is stored and read it of again and again that ? s also possible because as long as i do not load new data in the data is going to remain and this is not going to go once you read of  there is nothing wrong in using these values that ? s all when you read of a value it does not mean that the data is destroyed  it is not destructive or i want to change the value i put a new set of value load it and if i want the data to be 0s i will clear it these are all very convenient control inputs which will be used in your circuit when you design larger systems we will see how to use some of these things in our subsequent lectures where we will use some of those designs using these counters thus data storage is the major application of flip-flops and counting is one of the applications data storage is the major application  division by factor of 2 is another application but data storage is a major application and usually d flip-flops are used for that because you need only one input data and the data can be manipulated by use of clear and the time at which data is put and cleared which is controlled by two inputs called data and clear in addition to the clock which is universal for the whole system and that clock may not be the rate at which we want to put in the data or clear the data if it is the same of course you do n't need all this but it is generally not true because i may have different adjustments in different places in my system  not all registers get cleared at the same time as frequently as the clock arrives some of them may have to store data for a longer time  some of them may have to store data for a shorter time and none of them may be able to store the data  clear the data at a rate which the clock arrives so the clock frequency is desired by so many other factors therefore we do n't want to get into it because the speed of the system will decide the clock frequency  this is only for a short duration may be for a nanosecond or a microsecond the data will be available or useful so that is of no use as good as not being stored if you have a data which is going to be cleared immediately what is the point in storing it a variation of this register is called a shift register these are inputs which are applied to all the flip-flops at the same time  clock supplied to all the flip-flops at the same time  load applied to all the flip-flops at the same time  clear applied to all the flip-flops at the same time  and the outputs are available parallely on the other hand if i have a operation where i have a first d flip-flop and the output q is fed into the second flip-flop and the output q is fed into the third flip-flop and an output q is fed into the fourth flip-flop you can have any number of flip-flops  i am just giving you four as an example and of course i clock them synchronous  hereafter until i specifically say it is asynchronous or repel counter we will use synchronous counter where the clock is applied to all the flip-flops at the same time  refer slide time  38  05  when we need to use a repel counter specifically i will tell you it ? s an asynchronous counter or a repel counter so this is my clock  and instead of putting the data simultaneously in all these flip-flops now i am connecting the output of the first flip-flop into the input of the second flip-flop  output of the second flip-flop to the input of the third and so forth now whatever data i put after every clock pulse that data will shift to the next flip-flop suppose initially i put a data i call this initial data a b c d and because this is connected here  this is connected here  this connected here  this one will go here  refer slide time  38  33  then after first clock pulse  whatever i give as the value i will call this input value in so this in will come here it is a new value and this 0 will be bumped off gone  refer slide time  39  00    refer slide time  39  50  after the second clock pulse this would have moved here  this would become 1  this would become 0 and what we have here will be in2 second input whatever it was and after third it is in3  in2  in1 and 1 and so forth i keep shifting the data from one flip-flop to the next flip-flop  to the next flip-flop  to the next flip-flop  to the next flip-flop and so on such an arrangement of flip-flops is called a shift register because it shifts  it ? s a register in the sense it shows data but it keeps shifting the data from flip-flop to flip-flop to flip-flop to flip-flop it ? s a shift register so again i can draw this as one block even though we do n't have to show all this inside so it is a 4-bit shift register the sr stands for shift register in this case i will not show individual connections and the output of this i have put the data here  this input is called serial in the four flip-flops have outputs qa qb qc qd and four inputs called da db dc dd now qd is also the serial output i have now various combinations i can load a value of da db dc dd all of them at the same time and then start shifting shifting is always from one flip-flop to the next flip-flop but the way in which i load the flip-flops can be one at a time  serially i can put one at a time  initially i can clear all the flip-flops and i do n't have to even clear the flip-flops i start pushing in data one after the other it will go and get loaded whatever way it is or at the same time i want to put the all flip-flops at the same time of different values so i can have the option of serial load parallel load or serial input parallel input likewise i can redraw the flip-flops qa qb qc qd all at the same time or i can look for the output at serial output last output so i can have a serial out and parallel out then you have a clock which is common to all of the flip-flops as i said in the case of registers  refer slide time  42  30  so when i put parallel data in how do i get them into the flip-flops ? i get them by loading so i need a load which is common to all the flip-flops i can have a clear also which is common to all so i may have all these features in shift register i can clear all the flip-flops and make them 0 to start with i can load a new set of values by putting a b c d different values and loading it on by using load and after clearing or loading if i start the clock then during every clock pulse the clock will shift the output from one position to the next that is the main operation it will do and any point in time you can freeze what you have and read off the values parallely or you want to read serially you have to keep applying clock till you get all the bits out that means i have four different combinations of operations  i can have serial in  serial out  flip-flops  serial in serial out  serial in parallel out  parallel in serial out  parallel in parallel out these are four combinations are possible  refer slide time  44  27  i will give input serially take output serially one bit at a time this operation is a minor operation that is i will keep loading and it gets the output whatever i put here comes out here after a delay of the number of clock pulses equal to the number of flip-flops in this case four clock pulses whatever data i keep giving here that keeps coming out here after a delay of four clock pulses so  four is only an arbitrary number i do n't have a 4-bit shift registers  i can have 8-bit shift register or i can have any number usually four and eight are available as a product as an ic in the market so either use a 4-bit shift register or 8-bit shift register hence after four clock pulses or eight clock pulses as the case may be whatever you put comes out so this can be used as a delay element  that ? s all suppose you want the data to come but then the same data as to go out after a particular delay i can use this serial in serial out mode number of the delay is equal to number of flip-flops times the clock period if there are four flip-flops then it is four clock pulses delay  four clock periods  eight flip-flops eight clock periods delay serial in parallel out is when you have the serial input data or i want to take it parallely it is called serial to parallel conversion what happens is in some applications i have a serial input data coming in but i have to wait for the whole bit for example  let us assume ascii code 8-bits  i have an 8-bit shift register i get an ascii code from some other device unfortunately that device can only transmit one bit at a time  unfortunately that device which is supplying the ascii that keyboard is only a serial connection so the 8-bits of the ascii including the parity bit keep coming like one bit for every clock period but i can not process this until i know what ascii code it is  i can not process until the ascii code is completely built then i can store it or do whatever with it this is an application where serial input parallel output parallel output is required for processing whereas serial input is the limitation of the device like a telephone modem you know that in a telephone you have the dial up modem  the data comes serially because you have a pair of lines  the telephone has a pair of lines you use it in your computer  it is the limitation in your telephone line not the generation of data  i want to send a mail to you  my computer can also give you a parallel output your computer can also process in parallel but in between the medium is serial  telephone line therefore i have to convert my parallel data into serial mode data and send it to you that is what my modem does and your modem gets it back into parallel so these two things are covered ; serial input parallel output and parallel input serial output  examples are modems finally this parallel in parallel out is similar to the register wherein i want to put in the data and take it out that ? s all  i load it i take it if you disable the load it will remain as long as you require so this is same as the register operation  shift has no meaning in this if you want to put the data and take it out as it is where is the question of shifting it there is no need for shifting my shift register becomes a normal register operation in this mode it ? s a very very powerful device as i said it can be used for many things such as for storing  for delaying  for converting parallel data into serial  converting serial into parallel and i only talked about shifting to the right by a proper connection the output of this flip-flop can be connected to the input of this flip-flop  the output of this can be connected to input of this and the output of this can be connected to this  is it not possible ? the output of this i connect to this output of this connected to this and the output of this is connected to this  refer slide time  49  58   suppose you are taking output of this and connecting to this  output of this and connect it to this output of this and connect to this then this becomes a left shift flip-flop so i can have a shift left shift register and shift right shift register so a shift register can have a serial input as data input  parallel data input  serial data output  parallel data output it can shift left  shift right you can buy an appropriate shift register you can buy a shift left 4-bit shift register with serial input and serial output or you can have a register which does not need a shifting you have got all these features you do n't which one you will use  i want shift left feature  shift right feature  clearing feature  loading feature  serial in feature  serial out feature  parallel in feature and parallel out feature so all of them i want but i do n't know which one i will use either a 8-bit shift registers or 4-bit shift registers such shift registers are called universal shift registers because you can do all things that you want to but of course not all of them at the same time but you have to configure it for one particular operation either a shift left operation or a shift right operation or parallel load and serial out  serial in parallel out or whatever these are available in market commercially but you should know what is inside inside it is after all nothing so i have reduced the width of all these registers  counters and all that you have there are two chapters in your book of flip-flops  registers  counters so it is a basic storage element of a latch connected to a clock and you can use flip-flops in so many different ways to get all those different things similar to what we did with gates  in gates we had so many other applications we called them adders  you called them parity generators  parity checkers and all that digital circuits and systems prof s srinivasan department of electrical engineering indian institute of technology  madras lecture # 22 application of shift registers  refer slide time  2  03  today we will see some of the applications of shift registers we talked about flip-flops  counters and registers registers are group of flip-flops in which you can store data then we said the registers can have a shifting feature so that once you put a data you can shift that data either to the left or the right and these are called shift registers there are some other applications  of course we saw applications of flip-flops in counters  likewise an application for registers the most prominent applications of registers in the memory storage  to use them as storage elements shift registers are sometimes used for other applications i thought we will see some of those applications today  the shift register applications let us for example take a 4-bit shift register with a shift right feature  so it ? s a 4-bit shift right shift register let us assume this is serial in parallel out that means you can put the data serial in parallel out does not mean you can not put parallel data  parallel input also will be there with a load in feature otherwise normally data is put through serial so this will have the data in the clock of course clock either positive edge or negative edge doesn ? t matter  the input is called serial i si serial input and the clock will shift the bits we should also have load and clear features because we want to start with a pattern that also you can do by putting the data one at a time and shifting it that is one way of loading and the other way of loading is to give parallel inputs and then give all the bits at the same time so these are parallel output these are q all these are a b c d so it is qa qb qc qd and d so da db dc dd  refer slide time  5  53  first you put a pattern in this load it of course you want to clear it later on you can do clearing  then you clock it and as you clock it the bits get shifted as one position to the right that ? s why it ? s called shift register to the right so what i am going to do is to take the output of this and this into an exclusive or gate and feed it as the input so every time i clock it this bit goes here  this bit goes here  this bit goes here  and the exclusive or of these two gates is loaded as a fresh input so  as you clock it this will go on so let us assume that initially i am able to load a pattern of 1 0 0 0 initial pattern but you can assume anything  i am just assuming this so to start with i load 1 0 0 0 then at the next clock pulse at first clock pulse what will happen is this 1 gets here  this 0 gets here  this 0 gets here  refer slide time  7  40  and a new bit will be added to the input which will go into qa and since this is the exclusive or of c and d what will be the exclusive or of c and d ? it is 0 so that 0 will get into this position therefore again i shift it after the second clock pulse and this will become 0 1 0  this also 0  and after third clock pulse one fourth clock pulse  fifth clock pulse and what will be the new bit  it is 0 again  1 exclusive or of these two so all you have to do is to shift these three bits here and get the exclusive or of this here  refer slide time  8  43   now after this this will be 1 0 1 0 0 1 0 1 1 0 1 1 1 1 0 1 1 1 1 1 then it will be 1 1 1 0 i will write here after this it will be 0 1 1 1 0 then 0 0 1 0 1 0 0 0 which is this  refer slide time  10  05  so by just putting one initial pattern  this is only an arbitrary pattern it doesn ? t have to be 1 0 0 0  you can put any other pattern and again shifting every time the uplift clock pulse the bits get shifted one bit position to the right and a new bit is added to the left then again is shifted and so forth so what happens is how many different patterns are here ? this is the starting pattern so 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 patterns again it repeats so  after the first clock second clock third clock fourth fifth sixth seventh eighth ninth tenth eleven twelve thirteenth clock fifteenth clock and this is 0 so fifteen clock pulses so the frequency of repetition is fifteen clock pulses or fifteen clock durations after fifteenth clock pulse the original pattern is restored now there are only sixteen possibilities with four bits so i get all the four except one  i do n't get 0 0 0 0 if i get 0 0 0 0 what will happen is it will keep repeating so i should not put a 0 0 0 0 to start with because when you put 0 0 0 0 it gets shifted to 0 0 0 0 again it gets shifted to 0 0 0 0 so  if you leave 0 0 0 0 so you load anything other than 0 0 0 0 i get all the other fifteen patterns and then it gets repeated such a circuit is called a pseudo random noise generator it need not be necessarily noise but it can be pattern you can call it pseudo random generator what i mean is suppose you want to have a verification pattern you put a bit pattern which is accepted and for that bit pattern you know the sequence that has to come so you can know whether there is any error in the transmission if you agree on the initial pattern both at the sending and receiving end for this given pattern you know the sequence of these patterns i think you call it pseudo random sequence generator which can also be used for generation of noise so if you want put it this way so the advantage of this is i can check the transmission over a period of time so i agree on the initial pattern both at the receiver ? s and sender ? s side and then start sending data and as i receive data i check with this and if there is a change that means there is something happening to the transmission why it is called random is because the pattern can be also kept secret in the sense even though all the fifteen patterns will come all the fifteen words all the fifteen different patterns will arise the sequence in which they will come depends on the initial pattern  if the initial pattern is different then you will have a different sequence so again it is fifteen so it is not completely random and after fifteen it will be repeated so that way it is pseudo random pseudo random means semi-random it ? s not completely random you know that fifteen patterns are going to come and if you know the initial pattern you can guess the other patterns so that ? s why it ? s called pseudo random but if you have this pattern that is given as a test pattern i can use it for testing i can give the initial pattern and send it and test whether i am receiving the other things in the same order it is one of the important applications of a shift register  pseudo random sequence generator and i can now have different values as i said the starting value so that the patterns will be repeated but not in the same sequence or i can tap instead of here i can do here i can do here  refer slide time  14  56  i can take this  this and this and exclusive or of three inputs i can do  i can do all sorts of variations i can get different sequences and different patterns so i can have a simple test design one is for testing the system and the other is for establishing the reliability of the communication between two points if the initial test gets through the other side properly then you know that the channel is well established and you can start sending the transmission this is one of the important applications of shift register  refer slide time  16  30  we will talk about another application of shift register and just for the purpose of explanation i am going to put them as three different flip-flops let us have jk flip-flops so i will call these flip-flops a b c and these are clocked together  i will not show the clock separately because they are the same thing  i am just showing this drawing or i can show it separately also doesn ? t matter what i am going to do is to connect this j to this q bar and k so you have three jk flip-flops output of first jk goes to second jk  output of second jk goes to third jk and output of third jk goes to input of first jk with a twist q and q bar this is a shift register in the sense that the output of this gets shifted into this  for every clock pulse this output goes into this  this output goes into this  that ? s why it ? s called a shift register  refer slide time  20  20  now  after the first pulse because the c which is 0s c bar which is 1 is connected to j where j becomes 1 and k becomes 0 after the first clock pulse i put 0 0 0 i shift it  one clock pulse shifts this 0 into this  this 0 into this  this 0 not back into this but this 0 is connected here in this one so after the thing the next time the pattern will be 1 0 0 after second clock pulse it will be 1 1 0  third clock pulse it will be 1 1 1 and fourth clock pulse it will be 0 1 1  fifth clock pulse it will be 0 0 1 and for sixth clock pulse it is 0 0 0 which is the same as the original so  in six cycles of clock i get the pattern 0 0 0  1 0 0  1 1 0  1 1 1  0 1 1  0 0 1 now if you draw the waveforms for this how is it going to look like ? i will draw the waveforms here here it is clock clock clock clock  this is 0 of the first clock pulse   refer slide time  21  10  second clock pulse  third clock pulse  0 and this is clock time axis  refer slide time  21  30  now if we look at this we can see that initially it is 0 0 0 then a becomes high for three clock pulses and low for three clock pulses and high for three clock pulses and low for three clock pulses it repeats similarly for b it remains 0 for first two clock pulses then three and then next three clock pulses 0  next three clock pulses 1 and so forth it repeats c becomes 0 to start with and for first three clock pulses it remains 0  second three clock pulses 1 then again 0 then again 1 so when you draw this for a b c pattern a would be 0 then becomes 1 remains 1 for three clock pulses and then remains 0 for the rest of the period this is the output a i will not show the timing separately in the time axis b would be first two clock pulses will remain 0 then next three clock pulses will be 1  c would be 0 for first three clock pulses and 1 for the next three clock pulses  refer slide time  23  20  therefore i am dividing this clock by  what is the frequency of this compared to this ? time period of this is six times less  for example  refer slide time  23  50  this period is equal to six periods of this clock  the period of this clock is one sixth or i can put eight four flip-flops will become eight so the period of this clock is n times the period of the original clock where n is twice the number of flip-flops so i should say 2n the period of this clock is 2n times the period of the original clock where n is the number of flip-flops that you use for this that is one thing which you can always get by a division but more importantly if you want to use this as a separate clock of different phases there is always a phase difference of this much  one third of a clock period  one third of a clock period between this and this  this and this and between this and this  refer slide time  24  50   i can get a clock period it ? s called multi-phase clock or multiple phase  refer slide time  26  10  so i have the clock period which is 2n times the system clock period we will call this system clock and there is a phase difference between two successive waveforms of one original clock period between successive clocks sometimes it is useful so i want to have some lights going in a sequence suppose i turn on lights and turn off lights using this  this light will be on at this point and it will stay on for three clock periods and then it will become off  this light will be turned on  refer slide time  26  25  after a delay from this light again it will stay so before that it will go  so first this will light up then this will light up  then this will light up and this will go and this will go and this will go therefore it is some sort of an application like that where you need multiple phases  it ? s called multi phase clock  you can use it for some system this is also called a counter basically what you do in a counter ? counter will give you a clock pulse divide the clock by a factor of 2 by every flip-flop frequency is divided by 2 in every flip-flop stage so the same similar thing here this is also a counter but the only thing is the output of this counter we twist and then connect it in a counter the output of 1 goes to the next  output of second goes to the third  output of third goes to fourth and output of fourth goes back to 1 and without twisting it if i do you can take it as an assignment exercise you connect q back to j and q bar j back to k of course you put a 0 0 0 nothing will happen and anything other than 0 0 0 you put and see how it is  it ? s a shift register basically that ? s all  1 0 0  0 1 0 then 0 0 1  1 0 0 so it will only repeat it is a shift register that ? s called ring counter a counter wherein we use the output of the last flip-flop back to the input of the first flip-flop is called a ring counter or recirculating shift register they call it  you circulate again and again in the same pattern but this counter is slightly different from the ring counter it ? s called twisted pair ring counter  refer slide time  29  40  so we have recirculating shift registers  ring counter  recirculating shift register is same as the ring counter in the sense i have this flip-flops  refer slide time  29  12  serial output is fed as serial in  put a pattern and keep circulating it that ? s what will happen in a ring counter put a pattern and connect it back even if it is a d flip-flop for that matter  you do n't need to use jk if you want you can use jk too but this shift register which uses twisting of the output back into the input is called twisted ring counter what we have seen is twisted ring counter used for multiple phase clock generation and the period of the clock will be one sixth of the period of the original clock with a phase difference of one clock period between two phases this counter is also called a johnson counter again it ? s used commonly for multiple phase generation if you want to have lights turning on and turning off in a particular sequence you can do this  this is one example now  if i do n't want this phase to be of this duration one period of clock but i want only one clock period with different phases  that is i want a clock to be on  i want one pulse to be on for this period  one period another clock to be on for this period as we have six periods and suppose i want pulses like this  refer slide time  31  19   what i am saying is take the same light example  this light is on at this point in time and remains on for three clock periods and then switches off  this light is on after the next clock period but remains on for three more clock periods and so forth i have three lights turned on  this turns on  this turns on and i can have them on for half the clock period and for other half clock period it starts disappearing and then becomes like this  refer slide time  32  00  instead since i want six phases i should have six leds or six lights which will be turned on each only for one original clock period that means i want something to be on for this period alone and off for the rest of the period it can be a motor  it can be a light  it can be something which you want to just activate for this clock period  another only for this clock period  another only for this clock period  this  this  and this so from these waveforms i should be able to generate these waveforms easily because if you look at this a b c we can also write as we started with 0 0 0 then we made it 1 0 0  1 1 0  1 1 1  0 1 1  0 0 1 and back to 0  refer slide time  33  35  suppose i take the complements also at the same time so each of these flip-flops have q and q bars so i can call this a b c this as a bar b bar c bar so similar to a b c i can draw waveforms for a bar b bar c bar which will again have the same on period for three clock pulses  off period for three clock pulses but that will be complemented to the corresponding clock  a bar will be complemented to a so inverse of a  b bar will be inverse of b and c bar will be inverse of c so again on for three clock period off for three clock period total clock period being six times the original clock period now i can see the pattern such that i want something to be on only for one clock period  now you can look at this for example  if you take b bar and c bar or 1 only for the first clock pulse  let us call this the first clock period second third four five six  refer slide time  35  08   suppose i say a bar or b bar c bar  b bar c bar is 1 only for this clock period  there is a change here  you can have a bar b bar ab bar  the first clock period will be on  a bar c bar and not b so a bar c bar is on only for these two clock periods  for this clock period a and a c bar only for this clock period only for this clock period is on high  another change here a b bar  what is third one ? b c bar and fourth one will be a c will be there a c will be on only for this  this one would be a bar b and a bar b here i think it is the complement of this  this will be b bar c most probably b bar c complement operations hence  now all i have to do is to get the complement of these waveforms a b c a bar b bar c bar and then use and gates so in that case the first clock period is on a bar c bar of course i am not showing c bar  i am not showing a bar b bar c bar you can imagine that  it will be the opposite of this  refer slide time  38  32  and this will be a bar  this will be b bar  this will be c bar so these waveforms can be clubbed to form a bar c bar here a b bar  b c bar  a c  a bar b  b bar c so i have now variety of choices i can either have three phase clock with the same period of six times the original clock period so i can have a light on overlapping  three lights on  first light will be on  second light will be on after sometime  third light will be on after sometime and then the first light will be off  second light will be off  third light will be off so you can have this kind of a display  refer slide time  40  00  if i want to have only a light on for this period first light and then it will go on and second light will be on and it should go and the third light should be on so there are six lights it should be on for one clock period each of the original clock then again it will repeat thus all these applications are possible by johnson 's counter or twisted ring counter which is a basic modification of the shift register as i said because shift register basically is the output of one stage fetched into the second stage and shifted to the left or the right depending on the sequence the other two applications we started the other day was the parallel to serial converter suppose the serial data is coming i am giving examples of data coming through telephone lines in bit form and i want to assemble it as words serial to parallel conversion or you have the computer generated data which is available as parallel data bytes or words and you want transmit it through a telephone line you have to shift it serially and send it so other applications are then parallel to serial converter and serial to parallel converter so  shift register is a very very important building block of a sequential system or any digital system these are all building blocks of digital circuits  first we saw combinational building blocks  gates  adders and all that  we saw sequential building blocks flip-flops and using flip-flops we saw how to build counters and how to build registers  how to build shift registers shift register is a very frequently used component in many digital systems i have given you some applications today like the pseudo random sequence generator  the johnson 's counter and then the parallel to serial and serial to parallel and things like that as we talked about the other day so with this we are more or less completing the discussion of the basic building blocks we have to talk of some other building blocks in combinational domain  multiplexers and all that what i have to do now is to talk of systems we will use multiplexers  decoders and other combinational building blocks which are not basic building blocks like gates gates are the basic building blocks in combinational  flip-flops are the basic building blocks of sequential but i took a flip-flops application and developed counters and registers and shift registers like we did in the case of gates we took the basic building blocks of gates and developed adders  subtracters and all that so now a whole lots of things can be added  these are basically built using the basic building blocks  combinational basic building blocks are gates and sequential building blocks or basic building blocks are flip-flops so now we can use all these things to build subsystems or second order type of complexity and then using them you have to build systems so we have to get into the act of how to define a system to synthesize it  how to build it before that we will just deviate for a minute and stay here now why did i now start from gates and finished gates and then instead of doing the other things like multiplexers and decoders and other programmable arrays which are all combination of building blocks switched to sequential in order to give you all the basic building blocks in both combinational and sequential basic tiles like a lego block i told you basic tiles are there it ? s up to you to play with them and then build castles now  why did i do that is because technologically these are all of the same complexity generally we define systems as small scale ics  all these are integrated circuits that is made of silicon but then built as one single circuit  a gate  even gate is an integrated circuit in the sense gate is not a component ; the basic component of a gate is a transistor may be a field of a transistor mosfet as they call it met ? ?  semiconductor filed effect transistor or bjt bipolar junction transistor  sometimes you may use extra components like resistors occasionally capacitors so  using all these things you build a basic building block which is an integrated circuit because all these things are integrated  the circuit is integrated in a small single piece of silicon crystal in which you etch this by lots of means etching is a very crude term today  earlier it was done by chemical process but today we have so much precision required in all these things  we have lithography using lasers  using electron beam  molecular beam and all that  lithography  so that you can precisely cut even in surgery earlier people used to cut open and then do the surgery and then stitch back but today everything is done by precision beams  laser beams and so forth likewise in a building block also we have transistors and gates and things like that because the technology has grown very very precisely they are put together in different places and formed in a single circuit these are called integrated circuits now  general integrated circuits are any circuit in which several components are both active and passive active components are transistors  diodes  fets etc and passive components are resistors  capacitors  and inductors of course active     are easy to make but passive     are little more difficult  resistance is ok  capacitors are little more difficult both in terms of the size and the precision values and inductors are even more difficult but we will see all those things later on as how they build all these things but these integrated components integrated circuits are classified into small scale integrated circuits  medium scale integrated circuits  large scale integrated circuits and very large scale integrated circuits a small scale integrated circuit is a circuit in which you have about ten gates in one circuit a gate is an equivalent function and do n't think a gate has to necessarily be a gate in the sense  i told you  a gate will have a few transistors and a couple of resistors so  if you think of that as a basic building block like five transistors or two transistors or something in that order as one unit of gate you call it a gate function it is actually not a gate as per say but it ? s a gate function and up to ten gate functions in a single circuit is called integrated circuit  these are all approximately  refer slide time  47  45  any circuit which can do an equivalent function of ten gates or up to ten gates like the and gates  or gates  suppose you draw a simple combinational logic circuit system few gates here and there equivalent of that ten gates so up to that we call them as small scale integration and then from 10 to 100 approximately these are approximately thumb rules nobody defines this  these are not numbers like planck ? s constant or something or anything but it is just to give you the idea of complexity somebody gives a circuit you say how many gates are there in that circuit  you give me a circuit and ask me how many gates i say thousand gates but it does n't mean thousand gates you put  it means that this circuit will do the things which can be done by about thousand gates that ? s what we mean from 100 to 1000 it ? s called lsi and beyond 1000 it is called vlsi but of course today people use ulsi but i don ? t believe in all that ultra large scale integrated circuit but then anything big falls between vlsi and ulsi and all that somebody says beyond 100,000 it is ulsi and all that it ? s all individual ? s opinion so this is basically a structure and why i finished all these basic building blocks and combinational or sequential is because whatever you have done up to now can be generally classified as small scale circuits when you put more of this gates the functional complexity increases and they become medium scale integrated circuits and then you put more and more of them then it becomes large scale integrated circuits so we have now understood the basic building blocks bricks and we will use those bricks to build the subsystems which are medium scale like multiplexers and other things and in the case of 4-bit full adder which may be qualified to be a msi  similarly a 4-bit shift register or 8-bit shift register may qualify to become a msi then we will do msi functions and then how to use them directly instead of gate every time because if you are giving a very very large circuit like a microprocessor you can design you can not go to the gate level and design because a microprocessor may have 300,000 gates or 100,000 gates like that so i can ? t give you a circuit diagram with 100,000 gates connected to them  it is mind boggling so you have to think of higher levels of abstractions it ? s called level of abstraction  higher level of abstraction i will talk about msi being directly used  lsi being directly used to get vlsi and all that so starting from next lecture using these building blocks of both combinational and sequential we will see how to build systems which are meaningful in sense of system design we have basically smaller systems to start with and later on probably we will do one or two bigger systems just to get you some ideas we will start with small circuits digital circuits and systems prof s srinivasan department of electrical engineering indian institute of technology  madras lecture # 22 application of shift registers  refer slide time  2  03  today we will see some of the applications of shift registers we talked about flip-flops  counters and registers registers are group of flip-flops in which you can store data then we said the registers can have a shifting feature so that once you put a data you can shift that data either to the left or the right and these are called shift registers there are some other applications  of course we saw applications of flip-flops in counters  likewise an application for registers the most prominent applications of registers in the memory storage  to use them as storage elements shift registers are sometimes used for other applications i thought we will see some of those applications today  the shift register applications let us for example take a 4-bit shift register with a shift right feature  so it ? s a 4-bit shift right shift register let us assume this is serial in parallel out that means you can put the data serial in parallel out does not mean you can not put parallel data  parallel input also will be there with a load in feature otherwise normally data is put through serial so this will have the data in the clock of course clock either positive edge or negative edge doesn ? t matter  the input is called serial i si serial input and the clock will shift the bits we should also have load and clear features because we want to start with a pattern that also you can do by putting the data one at a time and shifting it that is one way of loading and the other way of loading is to give parallel inputs and then give all the bits at the same time so these are parallel output these are q all these are a b c d so it is qa qb qc qd and d so da db dc dd  refer slide time  5  53  first you put a pattern in this load it of course you want to clear it later on you can do clearing  then you clock it and as you clock it the bits get shifted as one position to the right that ? s why it ? s called shift register to the right so what i am going to do is to take the output of this and this into an exclusive or gate and feed it as the input so every time i clock it this bit goes here  this bit goes here  this bit goes here  and the exclusive or of these two gates is loaded as a fresh input so  as you clock it this will go on so let us assume that initially i am able to load a pattern of 1 0 0 0 initial pattern but you can assume anything  i am just assuming this so to start with i load 1 0 0 0 then at the next clock pulse at first clock pulse what will happen is this 1 gets here  this 0 gets here  this 0 gets here  refer slide time  7  40  and a new bit will be added to the input which will go into qa and since this is the exclusive or of c and d what will be the exclusive or of c and d ? it is 0 so that 0 will get into this position therefore again i shift it after the second clock pulse and this will become 0 1 0  this also 0  and after third clock pulse one fourth clock pulse  fifth clock pulse and what will be the new bit  it is 0 again  1 exclusive or of these two so all you have to do is to shift these three bits here and get the exclusive or of this here  refer slide time  8  43   now after this this will be 1 0 1 0 0 1 0 1 1 0 1 1 1 1 0 1 1 1 1 1 then it will be 1 1 1 0 i will write here after this it will be 0 1 1 1 0 then 0 0 1 0 1 0 0 0 which is this  refer slide time  10  05  so by just putting one initial pattern  this is only an arbitrary pattern it doesn ? t have to be 1 0 0 0  you can put any other pattern and again shifting every time the uplift clock pulse the bits get shifted one bit position to the right and a new bit is added to the left then again is shifted and so forth so what happens is how many different patterns are here ? this is the starting pattern so 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 patterns again it repeats so  after the first clock second clock third clock fourth fifth sixth seventh eighth ninth tenth eleven twelve thirteenth clock fifteenth clock and this is 0 so fifteen clock pulses so the frequency of repetition is fifteen clock pulses or fifteen clock durations after fifteenth clock pulse the original pattern is restored now there are only sixteen possibilities with four bits so i get all the four except one  i do n't get 0 0 0 0 if i get 0 0 0 0 what will happen is it will keep repeating so i should not put a 0 0 0 0 to start with because when you put 0 0 0 0 it gets shifted to 0 0 0 0 again it gets shifted to 0 0 0 0 so  if you leave 0 0 0 0 so you load anything other than 0 0 0 0 i get all the other fifteen patterns and then it gets repeated such a circuit is called a pseudo random noise generator it need not be necessarily noise but it can be pattern you can call it pseudo random generator what i mean is suppose you want to have a verification pattern you put a bit pattern which is accepted and for that bit pattern you know the sequence that has to come so you can know whether there is any error in the transmission if you agree on the initial pattern both at the sending and receiving end for this given pattern you know the sequence of these patterns i think you call it pseudo random sequence generator which can also be used for generation of noise so if you want put it this way so the advantage of this is i can check the transmission over a period of time so i agree on the initial pattern both at the receiver ? s and sender ? s side and then start sending data and as i receive data i check with this and if there is a change that means there is something happening to the transmission why it is called random is because the pattern can be also kept secret in the sense even though all the fifteen patterns will come all the fifteen words all the fifteen different patterns will arise the sequence in which they will come depends on the initial pattern  if the initial pattern is different then you will have a different sequence so again it is fifteen so it is not completely random and after fifteen it will be repeated so that way it is pseudo random pseudo random means semi-random it ? s not completely random you know that fifteen patterns are going to come and if you know the initial pattern you can guess the other patterns so that ? s why it ? s called pseudo random but if you have this pattern that is given as a test pattern i can use it for testing i can give the initial pattern and send it and test whether i am receiving the other things in the same order it is one of the important applications of a shift register  pseudo random sequence generator and i can now have different values as i said the starting value so that the patterns will be repeated but not in the same sequence or i can tap instead of here i can do here i can do here  refer slide time  14  56  i can take this  this and this and exclusive or of three inputs i can do  i can do all sorts of variations i can get different sequences and different patterns so i can have a simple test design one is for testing the system and the other is for establishing the reliability of the communication between two points if the initial test gets through the other side properly then you know that the channel is well established and you can start sending the transmission this is one of the important applications of shift register  refer slide time  16  30  we will talk about another application of shift register and just for the purpose of explanation i am going to put them as three different flip-flops let us have jk flip-flops so i will call these flip-flops a b c and these are clocked together  i will not show the clock separately because they are the same thing  i am just showing this drawing or i can show it separately also doesn ? t matter what i am going to do is to connect this j to this q bar and k so you have three jk flip-flops output of first jk goes to second jk  output of second jk goes to third jk and output of third jk goes to input of first jk with a twist q and q bar this is a shift register in the sense that the output of this gets shifted into this  for every clock pulse this output goes into this  this output goes into this  that ? s why it ? s called a shift register  refer slide time  20  20  now  after the first pulse because the c which is 0s c bar which is 1 is connected to j where j becomes 1 and k becomes 0 after the first clock pulse i put 0 0 0 i shift it  one clock pulse shifts this 0 into this  this 0 into this  this 0 not back into this but this 0 is connected here in this one so after the thing the next time the pattern will be 1 0 0 after second clock pulse it will be 1 1 0  third clock pulse it will be 1 1 1 and fourth clock pulse it will be 0 1 1  fifth clock pulse it will be 0 0 1 and for sixth clock pulse it is 0 0 0 which is the same as the original so  in six cycles of clock i get the pattern 0 0 0  1 0 0  1 1 0  1 1 1  0 1 1  0 0 1 now if you draw the waveforms for this how is it going to look like ? i will draw the waveforms here here it is clock clock clock clock  this is 0 of the first clock pulse   refer slide time  21  10  second clock pulse  third clock pulse  0 and this is clock time axis  refer slide time  21  30  now if we look at this we can see that initially it is 0 0 0 then a becomes high for three clock pulses and low for three clock pulses and high for three clock pulses and low for three clock pulses it repeats similarly for b it remains 0 for first two clock pulses then three and then next three clock pulses 0  next three clock pulses 1 and so forth it repeats c becomes 0 to start with and for first three clock pulses it remains 0  second three clock pulses 1 then again 0 then again 1 so when you draw this for a b c pattern a would be 0 then becomes 1 remains 1 for three clock pulses and then remains 0 for the rest of the period this is the output a i will not show the timing separately in the time axis b would be first two clock pulses will remain 0 then next three clock pulses will be 1  c would be 0 for first three clock pulses and 1 for the next three clock pulses  refer slide time  23  20  therefore i am dividing this clock by  what is the frequency of this compared to this ? time period of this is six times less  for example  refer slide time  23  50  this period is equal to six periods of this clock  the period of this clock is one sixth or i can put eight four flip-flops will become eight so the period of this clock is n times the period of the original clock where n is twice the number of flip-flops so i should say 2n the period of this clock is 2n times the period of the original clock where n is the number of flip-flops that you use for this that is one thing which you can always get by a division but more importantly if you want to use this as a separate clock of different phases there is always a phase difference of this much  one third of a clock period  one third of a clock period between this and this  this and this and between this and this  refer slide time  24  50   i can get a clock period it ? s called multi-phase clock or multiple phase  refer slide time  26  10  so i have the clock period which is 2n times the system clock period we will call this system clock and there is a phase difference between two successive waveforms of one original clock period between successive clocks sometimes it is useful so i want to have some lights going in a sequence suppose i turn on lights and turn off lights using this  this light will be on at this point and it will stay on for three clock periods and then it will become off  this light will be turned on  refer slide time  26  25  after a delay from this light again it will stay so before that it will go  so first this will light up then this will light up  then this will light up and this will go and this will go and this will go therefore it is some sort of an application like that where you need multiple phases  it ? s called multi phase clock  you can use it for some system this is also called a counter basically what you do in a counter ? counter will give you a clock pulse divide the clock by a factor of 2 by every flip-flop frequency is divided by 2 in every flip-flop stage so the same similar thing here this is also a counter but the only thing is the output of this counter we twist and then connect it in a counter the output of 1 goes to the next  output of second goes to the third  output of third goes to fourth and output of fourth goes back to 1 and without twisting it if i do you can take it as an assignment exercise you connect q back to j and q bar j back to k of course you put a 0 0 0 nothing will happen and anything other than 0 0 0 you put and see how it is  it ? s a shift register basically that ? s all  1 0 0  0 1 0 then 0 0 1  1 0 0 so it will only repeat it is a shift register that ? s called ring counter a counter wherein we use the output of the last flip-flop back to the input of the first flip-flop is called a ring counter or recirculating shift register they call it  you circulate again and again in the same pattern but this counter is slightly different from the ring counter it ? s called twisted pair ring counter  refer slide time  29  40  so we have recirculating shift registers  ring counter  recirculating shift register is same as the ring counter in the sense i have this flip-flops  refer slide time  29  12  serial output is fed as serial in  put a pattern and keep circulating it that ? s what will happen in a ring counter put a pattern and connect it back even if it is a d flip-flop for that matter  you do n't need to use jk if you want you can use jk too but this shift register which uses twisting of the output back into the input is called twisted ring counter what we have seen is twisted ring counter used for multiple phase clock generation and the period of the clock will be one sixth of the period of the original clock with a phase difference of one clock period between two phases this counter is also called a johnson counter again it ? s used commonly for multiple phase generation if you want to have lights turning on and turning off in a particular sequence you can do this  this is one example now  if i do n't want this phase to be of this duration one period of clock but i want only one clock period with different phases  that is i want a clock to be on  i want one pulse to be on for this period  one period another clock to be on for this period as we have six periods and suppose i want pulses like this  refer slide time  31  19   what i am saying is take the same light example  this light is on at this point in time and remains on for three clock periods and then switches off  this light is on after the next clock period but remains on for three more clock periods and so forth i have three lights turned on  this turns on  this turns on and i can have them on for half the clock period and for other half clock period it starts disappearing and then becomes like this  refer slide time  32  00  instead since i want six phases i should have six leds or six lights which will be turned on each only for one original clock period that means i want something to be on for this period alone and off for the rest of the period it can be a motor  it can be a light  it can be something which you want to just activate for this clock period  another only for this clock period  another only for this clock period  this  this  and this so from these waveforms i should be able to generate these waveforms easily because if you look at this a b c we can also write as we started with 0 0 0 then we made it 1 0 0  1 1 0  1 1 1  0 1 1  0 0 1 and back to 0  refer slide time  33  35  suppose i take the complements also at the same time so each of these flip-flops have q and q bars so i can call this a b c this as a bar b bar c bar so similar to a b c i can draw waveforms for a bar b bar c bar which will again have the same on period for three clock pulses  off period for three clock pulses but that will be complemented to the corresponding clock  a bar will be complemented to a so inverse of a  b bar will be inverse of b and c bar will be inverse of c so again on for three clock period off for three clock period total clock period being six times the original clock period now i can see the pattern such that i want something to be on only for one clock period  now you can look at this for example  if you take b bar and c bar or 1 only for the first clock pulse  let us call this the first clock period second third four five six  refer slide time  35  08   suppose i say a bar or b bar c bar  b bar c bar is 1 only for this clock period  there is a change here  you can have a bar b bar ab bar  the first clock period will be on  a bar c bar and not b so a bar c bar is on only for these two clock periods  for this clock period a and a c bar only for this clock period only for this clock period is on high  another change here a b bar  what is third one ? b c bar and fourth one will be a c will be there a c will be on only for this  this one would be a bar b and a bar b here i think it is the complement of this  this will be b bar c most probably b bar c complement operations hence  now all i have to do is to get the complement of these waveforms a b c a bar b bar c bar and then use and gates so in that case the first clock period is on a bar c bar of course i am not showing c bar  i am not showing a bar b bar c bar you can imagine that  it will be the opposite of this  refer slide time  38  32  and this will be a bar  this will be b bar  this will be c bar so these waveforms can be clubbed to form a bar c bar here a b bar  b c bar  a c  a bar b  b bar c so i have now variety of choices i can either have three phase clock with the same period of six times the original clock period so i can have a light on overlapping  three lights on  first light will be on  second light will be on after sometime  third light will be on after sometime and then the first light will be off  second light will be off  third light will be off so you can have this kind of a display  refer slide time  40  00  if i want to have only a light on for this period first light and then it will go on and second light will be on and it should go and the third light should be on so there are six lights it should be on for one clock period each of the original clock then again it will repeat thus all these applications are possible by johnson 's counter or twisted ring counter which is a basic modification of the shift register as i said because shift register basically is the output of one stage fetched into the second stage and shifted to the left or the right depending on the sequence the other two applications we started the other day was the parallel to serial converter suppose the serial data is coming i am giving examples of data coming through telephone lines in bit form and i want to assemble it as words serial to parallel conversion or you have the computer generated data which is available as parallel data bytes or words and you want transmit it through a telephone line you have to shift it serially and send it so other applications are then parallel to serial converter and serial to parallel converter so  shift register is a very very important building block of a sequential system or any digital system these are all building blocks of digital circuits  first we saw combinational building blocks  gates  adders and all that  we saw sequential building blocks flip-flops and using flip-flops we saw how to build counters and how to build registers  how to build shift registers shift register is a very frequently used component in many digital systems i have given you some applications today like the pseudo random sequence generator  the johnson 's counter and then the parallel to serial and serial to parallel and things like that as we talked about the other day so with this we are more or less completing the discussion of the basic building blocks we have to talk of some other building blocks in combinational domain  multiplexers and all that what i have to do now is to talk of systems we will use multiplexers  decoders and other combinational building blocks which are not basic building blocks like gates gates are the basic building blocks in combinational  flip-flops are the basic building blocks of sequential but i took a flip-flops application and developed counters and registers and shift registers like we did in the case of gates we took the basic building blocks of gates and developed adders  subtracters and all that so now a whole lots of things can be added  these are basically built using the basic building blocks  combinational basic building blocks are gates and sequential building blocks or basic building blocks are flip-flops so now we can use all these things to build subsystems or second order type of complexity and then using them you have to build systems so we have to get into the act of how to define a system to synthesize it  how to build it before that we will just deviate for a minute and stay here now why did i now start from gates and finished gates and then instead of doing the other things like multiplexers and decoders and other programmable arrays which are all combination of building blocks switched to sequential in order to give you all the basic building blocks in both combinational and sequential basic tiles like a lego block i told you basic tiles are there it ? s up to you to play with them and then build castles now  why did i do that is because technologically these are all of the same complexity generally we define systems as small scale ics  all these are integrated circuits that is made of silicon but then built as one single circuit  a gate  even gate is an integrated circuit in the sense gate is not a component ; the basic component of a gate is a transistor may be a field of a transistor mosfet as they call it met ? ?  semiconductor filed effect transistor or bjt bipolar junction transistor  sometimes you may use extra components like resistors occasionally capacitors so  using all these things you build a basic building block which is an integrated circuit because all these things are integrated  the circuit is integrated in a small single piece of silicon crystal in which you etch this by lots of means etching is a very crude term today  earlier it was done by chemical process but today we have so much precision required in all these things  we have lithography using lasers  using electron beam  molecular beam and all that  lithography  so that you can precisely cut even in surgery earlier people used to cut open and then do the surgery and then stitch back but today everything is done by precision beams  laser beams and so forth likewise in a building block also we have transistors and gates and things like that because the technology has grown very very precisely they are put together in different places and formed in a single circuit these are called integrated circuits now  general integrated circuits are any circuit in which several components are both active and passive active components are transistors  diodes  fets etc and passive components are resistors  capacitors  and inductors of course active     are easy to make but passive     are little more difficult  resistance is ok  capacitors are little more difficult both in terms of the size and the precision values and inductors are even more difficult but we will see all those things later on as how they build all these things but these integrated components integrated circuits are classified into small scale integrated circuits  medium scale integrated circuits  large scale integrated circuits and very large scale integrated circuits a small scale integrated circuit is a circuit in which you have about ten gates in one circuit a gate is an equivalent function and do n't think a gate has to necessarily be a gate in the sense  i told you  a gate will have a few transistors and a couple of resistors so  if you think of that as a basic building block like five transistors or two transistors or something in that order as one unit of gate you call it a gate function it is actually not a gate as per say but it ? s a gate function and up to ten gate functions in a single circuit is called integrated circuit  these are all approximately  refer slide time  47  45  any circuit which can do an equivalent function of ten gates or up to ten gates like the and gates  or gates  suppose you draw a simple combinational logic circuit system few gates here and there equivalent of that ten gates so up to that we call them as small scale integration and then from 10 to 100 approximately these are approximately thumb rules nobody defines this  these are not numbers like planck ? s constant or something or anything but it is just to give you the idea of complexity somebody gives a circuit you say how many gates are there in that circuit  you give me a circuit and ask me how many gates i say thousand gates but it does n't mean thousand gates you put  it means that this circuit will do the things which can be done by about thousand gates that ? s what we mean from 100 to 1000 it ? s called lsi and beyond 1000 it is called vlsi but of course today people use ulsi but i don ? t believe in all that ultra large scale integrated circuit but then anything big falls between vlsi and ulsi and all that somebody says beyond 100,000 it is ulsi and all that it ? s all individual ? s opinion so this is basically a structure and why i finished all these basic building blocks and combinational or sequential is because whatever you have done up to now can be generally classified as small scale circuits when you put more of this gates the functional complexity increases and they become medium scale integrated circuits and then you put more and more of them then it becomes large scale integrated circuits so we have now understood the basic building blocks bricks and we will use those bricks to build the subsystems which are medium scale like multiplexers and other things and in the case of 4-bit full adder which may be qualified to be a msi  similarly a 4-bit shift register or 8-bit shift register may qualify to become a msi then we will do msi functions and then how to use them directly instead of gate every time because if you are giving a very very large circuit like a microprocessor you can design you can not go to the gate level and design because a microprocessor may have 300,000 gates or 100,000 gates like that so i can ? t give you a circuit diagram with 100,000 gates connected to them  it is mind boggling so you have to think of higher levels of abstractions it ? s called level of abstraction  higher level of abstraction i will talk about msi being directly used  lsi being directly used to get vlsi and all that so starting from next lecture using these building blocks of both combinational and sequential we will see how to build systems which are meaningful in sense of system design we have basically smaller systems to start with and later on probably we will do one or two bigger systems just to get you some ideas we will start with small circuits digital circuits and systems prof s srinivasan department of electrical engineering indian institute of technology  madras lecture  30 encoders and decoders  refer slide time  1  45  so in the last lecture two lectures we talked about multiplexers in detail and how to use them as building blocks or functional units in designing a combinational logic today we will see another circuit which is msi which is a decoder so first we will see what an encoder is and then a decoder  encoders and decoders as the name suggests it one codes the various combinations into a smaller number of bits and the other expands it back so an encoder for example suppose i had eight inputs 8 to 3 encoder assuming only one of the inputs is active  it could be active high or active low at a given time all we have to know is which of these eight inputs is active so you need only three bits for that by combination of these three bits you can determine which is the active input and all others are inactive at that given time so this is the process of encoding encoding reduces the possibilities or the number of inputs required from 8 to 3 for example or sixteen to four so compressing the data from different possibilities into a smaller number of bits is the process of encoding in this case we will have eight inputs let us call this i0 i1 and i2 etc i7 and you will have three outputs we will call them o0 o1 o2 this is msb and this is lsb of course if more than one input can be high at the same time then what happens in which case we talk of priority ? if more than one input is active at a given time then we do n't know how to determine the output but there can be some rules we can build some rules into that we will not talk about that  i am just going to tell you about the type of msi which are available so  for example if i5 is at high and all other inputs are low the output would be 1 0 1 this process is called encoding my question is as i said if more than one input is high what will happen to the output ? we can have a procedure or a rule for this one scheme is called priority encoding i can say the input with the highest binary value could be recognized or the input of the lowest binary value is a recognizer you can say priority goes from i0 to i7 that means if i0 and i1 are both active i0 will be coded and i1 would be ignored this is one scheme you make the rule and then build the circuit accordingly or i can say lowest order i can say higher inputs have priority that means supposing i5 and i6  if along with i5 i6 is also active high i can say i6 should be recognized and not i5  then the output will not be 1 0 1 but it will be 1 1 0 anyway this is called encoding process of reducing the number of bits into smaller number of bits without any loss of data in the reverse of this the complimentary operation is called the decoding operation so this is an 8 to 3 encoder  refer slide time  6  11  so we will have a 3 to 8 decoder so i can put this here straight away so three possibilities are there and any combination of this can happen because there will be eight different outputs so the corresponding output will be high and all others should be low so i can have again i0 i1 i2 lowest order and these are the highest order bits and then i can have o0 o1 o2 o7 now this 1 0 1 goes there as 1 0 1 making o5 high and all others low this is the decoding operation this is the encoding operation and the decoding operation  refer slide time  7  12  why do we need this ? i have eight possibilities as the inputs and eight possibilities are required as the output and i do n't want to run eight lines from inputs to outputs because one of these lines will be active high at any given time and others will not be so instead of running eight lines and finding out which is active high i can send three lines with a code a coded information into that and then at the output will decode it at the receiving end we will decode that three bits to find out which input exactly was high here at the sending side this is compression data  data is compressed eight lines instead of running because of the length requirement we can do it with three bits  three lines will do the job and if there is a priority scheme here it doesn ? t really affect this here because here it is an expansion scheme so three is expanded into eight so whatever is the combination will be expanded accordingly here of course there may be problem with more than one input being high so in that case we will have a priority scheme by then in such a case it is called a priority encoder  either a normal encoder or a priority encoder the priority encoder will have a priority scheme built in saying when more than one input is high which of those inputs will be recognized and coded at the output now how is it going to help us in our combinational logic design ? it is just as multiplexers helped us to design combinational logic without going to the gate design because after all inside you can build these gates  we can draw a truth table  can you not ? can i not make a truth table out of this ? abc are the three inputs or i0 i1 i2 are the three inputs  o0 to o7 are eight outputs so i can draw a truth table and 0 0 0 combination will make o0 high and all others low so i can have a gate realization for this  likewise i can have a gate realization for this so all are gates finally basically they are all and or inverter i told you long ago that and or inverter is a sort of universal combination by which any circuit can be recognized and can be designed so the same thing applies to the encoder and decoder or if we do n't want and or combination we can have nand gates universal gates or any other combination of gates that you want to work with so what is the advantage of using this ? now we have this scheme of so many equivalent gate functions may be about ten to fifteen or twenty depending on the number of inputs number of outputs and priority schemes built or not somewhere between 10 to 20 or 10 to 30 gates will be there so when you compress it and make it as a single ic and make it available to you putting in one ic chip then it becomes a medium scale integrated circuit msi our aim in the last few lectures has been to use these medium scale integrated circuit components in the design of combinational circuits so we have to see how this hardware encoder and decoder will be used in combinational logic design let us say design a combinational logic using decoder this is a very straightforward procedure here because even in multiplexer of course the mapping procedure was very clear but it is not even that here it is a straightforward case because when you have three inputs and eight possibilities this is similar to the truth table is it not that means all possible min terms are generated the question is one of them will be high and all others will be low but in general though when you have three inputs and eight outputs it ? s equivalent to a truth table with three inputs and eight outputs and each of this output being a min term and if you know which are the min terms that are high for that particular combination of the hardware then i can combine them all together and make a circuit out of it it ? s as simple as that suppose i want to realize a function f sigma f  a  b  c  a being a  b and c you will have to be always clear with which is msb and which is lsb here i am considering this as the msb and this as lsb  refer slide time  12  10   so  when you map it i should connect a to this  b to this and c to this so that ? s why i am writing in this fashion f  a  b  c  it will be equal to sigma let us say arbitrary or whatever you want or use the full adder  1  2  4  7  is the sum of the full adder you have seen full adder so many times 1-bit full adder min terms which are high for the full adder sums are min terms  1  2  4  7  so we will realize a full adder and that ? s what we did with multiplexer to start with  we will do the same thing with decoder so all you have to do is to get my three inputs this is cin  here this is a  this is b  this will be cin in that order i am writing so the same order should be mapped and output will be m min terms and i will call this i0  i will call this m0 which is same as i0  here these are is equivalent to the min terms so i will put i0 inside and m 's outside  this is m0  this is m1 etc and this is m7  refer slide time  13  50  now in order to get a full adder i need to combine m1 m2 m4 m7 into an or gate so i take m1 m2 m4 m7 this is my f this is the sum of the full adder  a simple scheme of realizing a combinational logic using a 3 to 8 decoder this is a 3 to 8 decoder this will the only function i can realize if i have one more function using the same min terms i can also get it suppose i want a carry also in this can i use the same decoder for this ? of course i can so my carry would be i will call this f1 or fsum  f carry out of abc in or if i remember it was 3  5  6  7 sigma that is fco  a  b  cin  is equal to sigma m  3  5  6  7  these are the min terms for which the output is 1 for the carry so i can combine them this now requires m3 m5 m6 m7 so m3 would be here i3 m5 i6  m3 m5 m6 m7 so we will have to take m3 m5 m6 and m7 put it in or gate and this is my fco carry out f sum fs  refer slide time  16  28  so there is one 3 to 8 decoder and two gates and we are able to realize a full adder so that is the msi concept medium scale integrated circuit replacing the bunch of gates it may not be most efficient way as i said  it ? s a mapping process in the mapping process you have two problems one is that mapping itself may not be efficient because the hardware availability is limited and you have to get the best possible way of doing it the second limitation is that not always there will be a straight cut method for doing it as i said the other day it ? s a heuristic method sort of an intuitive method we have to identify the hardware availability and the input requirements and try to match it so there may be an error in that even if you do software for this software may not always do it the optional way so we may use some extra hardware in that process because of that or there may be also be extra hardware required because there is no one to one correspondence or everything that i want to realize i may not have an equivalent msi but still it is worth it because the number of gates is drastically reduced in terms of  the number of ics is drastically reduced saving space or whatever power  cost  size and so on the same is repeated there  the parameters we were stressing on right from beginning in this course of course i am giving you a bare bone sort of a approach in the problem there are some practical issues here we are building most of the things conceptually  we are not getting into circuit details of course as i said that is not required if you are going to use a logic design or you know what the input output specification is but even in a logic design you should know a few things for example you should know how much voltage you should apply  should you apply 250v or 10kv or 5v or 3.3v of course you will get different data sheets but you should know what order of voltage you are looking at  what are the current levels and so on suppose you buy an led to indicate your output  what type of led  what type of current is available and whether an led can go with that so these are the things you should know of course  a little bit of the gate level electrical specifications as we call them even though it ? s all logical and we are not getting to the physical design which is the next level where you replace this logic by components which are available we are not getting into that because of the background is not adequate in terms of the electronics but there are certain things one of the things is there is always an enabled class in all of these things  whether it is a decoder  encoder or a multiplexer it will always be a signal called enable signal  i will introduce it here because it ? s all same in many ics but i thought sometimes i should tell all these things to you before you get out of this course like this preset and clear there are extra signals in flip-flops for a logical design or a simple analysis understanding of the flip-flop you do n't need to know it but then i introduced it  refer slide time  19  45  likewise here i want to introduce a signal called the enable signal ? enable ? usually is a negative signal the active low whenever you put a bubble or a signal it means the signal is active when it is low and when it is high it is not active whenever you do n't put a bubble signal is active when it is high and not active when it is low there is an enable signal here and this has to be tied to ground if this circuit will work  refer slide time  20  19  and this represents ground in electronic circuits or this is 0v that means if enable is low whatever we said about this decoder encoder is true if enable is high if i do not connect the enable to ground properly then whatever you give here will not reflect in the output  the output will not behave as expected in the truth table  this is true of many ics multiplexer as an enable signal  encoders have enable signals  decoders have enable signals and sometimes more than one enable signal these are signals that are required for controlling i may have a circuit and a board and a system  i may have this ic and a circuit but i may not want that to be active at a given time  i want it to be active at some other time so how do i control that  i can not just pull it out whenever i want to put it in and whenever i do not want i pull it out  it ? s not possible to physically remove the ic and put it back suppose you want that ic not to affect the rest of your operation you do n't want an ic there at that time you have to pull it out and you want it there you put it in but it ? s the electrical equivalence of removing and putting it back when enable is low it ? s equivalent to keeping it there and when enable is high it is equivalent to removing it so that it is not there so electrically it is not there physically you may have inserted the ic in a socket but electrically it ? s not there electrically you can ignore it such things are required very much because many designs are complex designs where several ics have to co-exist and certain operations requires certain paths and at that time the other circuits should not come in the way so how do you control it is by these things and  there may be more than one enable when you say enable if you want to be very clear and if you do n't know all these and since you do n't have the circuit diagram so every time you are talking about a decoder you can not draw a circuit and show enable as a bubble so what you say is simply say enable bar so people understand when you say a circuit as an enable bar which means i should make it 0 for it to be normally active  a normal operation so enable 0 is a normal operation and enable 1 is abnormal operation it ? s an electrical open circuit i have to define a term here and since i have not defined a term here i am not able to write it it ? s called tri-state operation output tri-states again these are some compulsions as you go and i have to introduce a new term i can ? t keep postponing these things the output is tri-stated here i can say that the output impedance is very high  output high impedance  output impedance high  output high impedance state high impedance means impedance such that it is as high that you can ignore it all of you have gone through electric magnetic circuits course so you know what it is high impedance means physically if we put hundred mega ohms it is just as if it ? s equivalent to open circuit for practical reasons of course mathematicians may argue that it ? s not 0 it ? s not open but we are engineers not mathematicians so we have to be practical when you do something you will have to do the practical implementations therefore high impedance means the output is as if it ? s disconnected from the rest of the set like you sit in the class and disconnect yourself from what is happening thinking about something else so that is exactly what high impedance state is you are physically present mentally off many times it happens right ? i do it when i go to some meetings which is boring but i have to be there because i am required to be there  it happens to everybody the only thing is i wish that it doesn ? t happen too often in this course that is exactly high impedance so we have a function called tri-state gate function which is what will be put in output for these operations but there can be more than one enable so this is only one enable in a practical decoder like 3 to 8 decoder generally there are three enables g1  g2a and g2b where g2a and g2b are active low and g1 is active high so  if this circuit works normally  this is a practical 3 to 8 decoder  i can give you the ic number if you want to this is 74138  it is not necessary to remember numbers in fact i am not even sure it ? s 128 or 138 but i think it ? s 138 now this particular ic which is three inputs eight outputs has three enables that means for a circuit normal operation g1 should be high  g2a and g2b should be low only then the circuit is a normal operation why do you need three ? as i said sometimes the control signals i want to control it i may have to control it from different times of view from different ways so i can use these three combinations but only when all the three occur as required only then there is normal operation but the rest of the time otherwise outputs are tri-stated  otherwise outputs are high impedance states  outputs are in z state instead of writing every time high impedance state capitalize z and put it as z state z state means high impedance state for digital circuits  this is an accepted nomenclature  refer slide time  27  41  when you say z state it means a high impedance state  accepted nomenclature will be digital i wish i remembered whether it ? s 128  138 but it ? s ok let us assume 138 for now please check up may be 128 the outputs are not active high one other practical note on this ic is that the outputs are active low  so instead of getting o0 o1 o2 how many are there ? 1 2 3 4 5 6 7 i will probably put the enables here it doesn ? t matter  enable does not have to be at the bottom because it ? s all on in what way it is  it ? s only a representation of circuitry in the book  you can write it here also ; g1 g2a g2b  this is i0 i1 i2  refer slide time  28  57  and this is lsb  msb o2  o3  o4  o5  o6  o7 and these are active low outputs as well  refer slide time  31  00  that means if a particular combination occurs the combination occurs after enable is properly connected of course so we are assuming this is 1  this is 0 and this is 0 and i have properly connected the enables if this is my only ic and it ? s not required to be controlled by any other event in the circuitry i can directly connect it to ground and power supply these are control signals but it does not mean that it always has to be controlled whenever we need to control they are available to you if you do not want to control and you always permanently want this normal operation then there is no problem make 1 0 0 connected to high  connected to low  the power supply connected to low it will work always normally so that is possible  it ? s not an excluded operation anyway having done that suppose i give 1 0 1 or 1 1 0 o6 should be active high and all others should be active low but because we have bars on the outputs if you want you can even put a bubble on the output  the bar and bubble are redundant  bubble is only when you draw whereas when you are writing and when you are looking at the data sheet you will see these signals i0 i1 i2 and o0 o1 o2 so you need a bar for that so o6 will be low and all others will be high normally it will be the other way when i say active high outputs o6 should be high and all others should be low so this is a practical decoder which is available  there are three enables  three inputs  eight outputs are active low so if i want now to use this practical decoder in my adder circuit can i do that ? i have connected these four into or gate to get sum  connected these into another or gate to get carry  refer slide time  31  14  assuming these were active high but now i have learnt from the data sheet that these outputs are not active high but they are active low so they are active low outputs how do you change this design ? i use nand gates what we want is  sum is m1 m2 m4 m7 but what is available is only m1 bar m2 bar m6 bar and m7 bar so we will see what s bar is so s bar would be m1 bar m2 bar m4 bar m7 bar but you want inverse of that you want sum so sum is nand so connect this  refer slide time  32  40  1  2  4 and 7 into a nand gate we get sum for full adder if i connect my a b and cin of the full adder of the inputs likewise i can connect this through nand gate m5 m6 m7 another nand gate m3 m5 m6 and carry out so carry output is m3 m5 m6 etc some of these practical things you should know that ? s why i thought i will introduce this when we look at a circuit logically you may be right conceptually you may be right but then it will not work because you are assuming the outputs to be active high but they are really active low or you did not know there was an enable which has not been properly connected or you did not get the proper power supply voltage in ground  you should know which pin has to be given power supply and which pin has to be given ground so all these things you should know  refer slide time  34  18  of course you can look through the data sheet but you should know there are a few things you should look for you do n't have to remember the details but you should know to look for something without knowing that there is something to look for then how will you look for them so that is why you look for this ? coming back to the tri-stating what do you mean by tri-stating and how it will be active high suddenly we say it ? s active because we know only two things an input or output can be low or high where low means 0 high means 1 for positive logic  0v and 5v  0v and 3.3v  0v and 4.2v or whatever but now suddenly i am introducing a third concept called the output can be 0 or 1 or a high impedance state so what is a high impedance state ? these are called tri-state gate the tri-state meaning there are three states tri-state gates  refer slide time  38  36  the tri-state gates have three states the signals of tri-state gates are three states ; low  high and high impedance so this is 0  this is 1  this is z there is a third state and that is why it is called a tri-state actually this tri-state was long ago coined by national semiconductors a major semiconductor manufacturer and they patented it and the term was patented so other combinations should not use this term tri-state but they have to say three state buffers i think now it must be sufficiently long and the patent must have expired so probably can use it so you will find in text books freely tri-states whereas when you look at company literature and some other company other than national you will always be careful to write three state buffers because somebody can go to court and file a patent violation case against the user tri-state is as if the tri-status because the word was coined by national semiconductors long long ago and it is history now so what you mean by this ? i have an input and output so let us take a simple inverter  input is a and the output is a bar so this is the two state gate where a is 0 a bar is 1 so you know the truth table of this inverter f is equal to a bar  all of you know this now we are introducing a third concept where the output can be either 1 0 or z how do you know or how do you control this ? when you want output to be of high impendence how you make it high impendence so i need some other extra input for that so i have a third input called enable input that is where the enable concept came so this is true if enable is 0 so now this truth table becomes true or normal operation only when enable is 0 and if enable is 1 which is high like as i said enable is usually an active high it is not a rule  you may find a circuit in which enable is high so do n't always assume  you look at the data sheet always before you use an ic practically you have to look at the data sheet today everything is available in the web  you can go to the website of that particular manufacturer search that ic you are looking for that fellow give you the data sheet in fact there will be so much details which will confuse you so you have to look for what you want on the other hand  if enable is high so the opposite of it is disable now if a is 0 or 1 the output is ? ?  doesn ? t matter what the input is the output is always high state now this is a very important development in the digital hardware conceptually there is nothing here but hardware there is a third feature so now if i put all these inverters or any other gates this is only an inverter i gave as an example  the same thing can apply to any gate you can have an and gate with an enable in principle of course  it may or may not be there as a component so if that enable is low and gate works as and gate and if enable is high whatever inputs you give the and gate does not give the and output but it gives you a high impedance output that is what i said just now in decoder it can also be there in encoder  it can be in multiplexer  it can be anywhere what is the idea ? now in all these ics there is something present like that  some other gate and i am connecting them all to a destination these are different sources of data or control functions or whatever and this will now go to another circuit here i want this combination but at one time there will be only be one source of data so  at a given time i would like the output here to be determining this gate only and this should not interfere that means this output will be inverse of this and this should be this  refer slide time  40  25   at some other time i want this output to be inverse of this and this should be this so i may have different sources of data or different connections in a circuit all feeding to a same input  input of a same gate and i want only one of those inputs to be effective at that time so that the output will be determined accordingly in my circuit description i can do it when i want and when i do n't want it i can remove this ics as i said that ? s not a good solution  not a practical solution if i do n't do that what will happen is even though this is high or low  all of them have to be high or low  if this is high and all of them are low where low is 0v that means practically ground so i am trying to push this high voltage into this so at that time this is low and then this gets grounded  this also gets grounded so whenever i try to pull this up using the output of this because this is high these two gates will put it down to 0 these are the problems so if i have the z feature built into all of these  all are tri-state gates  now all these gates are tri-state gates  refer slide time  41  58  then i don ? t have any problem so i will control the circuit such that when the output of this has to be the input of this i will make sure these two outputs are of high impedance which has no effect practically on the operation of this circuit  refer slide time  42  36  when i want this output to be the input of this circuit i will control these two outputs to be high impedance so that these two circuits will not have any effect on the output of that circuit which means electrically you are disconnecting it but physically you are not so this is also built in many circuits the enable inputs is a very common feature in multiplexers all ics especially msi and lsis because these msi lsi will sit on what is called a bus  this is called a bus  refer slide time  43  06   we generally refer to a bus as a vehicle that transports lot of things at the same time  many people can join in the bus and then go likewise here a bus refers to something where many signals can join and go so the common bus is there all these outputs feed into a common bus but the input will be used in only one of those common signals which are useful to the input so i have to disconnect the other inputs from the bus but physically disconnecting is not possible so i electrically disconnect it the other inputs are not required at a given time therefore when you have bus operations of these ics especially msi and lsi as they go more and more complex in design we will use all of these in our design because it is very complex and all of them coexist at the same time only a few of them will have functions at a given time their roles and the rest of them will be  it is like somebody asking somebody else to shut up  lot of people are there and only one person is allowed to talk so what happens here is something similar to that now we have practically covered lot of grounds in the case of msi lsi the basic concept of msi based design as against gate based design the advantage is that there is a simple hardware which can replace the tons of gates with all the attendant advantages in terms of the cost  size  power consumption and everything  the speed of operations and performance the best match may not be possible either because of the non-availability of the hardware feature or because of the dubitation of the design procedure but still it is worth it but it ? s better than the other suggestions then we talked about mux and decoder which are two major components in msi in design of these things and we talked about how to map a given hardware  a given karnaugh map into this hardware we talked about how active low and active high outputs are possible and we talked about enable feature and how enable feature controls the operation what happens when the circuit is disabled ? it goes to the high impedance state the high z state and this is the idea behind that the next step we will take is towards lsis large scale integrated circuits and they will have to be programmable as i said because when you have larger and larger circuits it should be more and more useful i can not make a simple circuit which is mappable or non-mappable so i just throw it and get another circuit when i make a large scale integrated circuit it should be available for many operations so they become programmable we will talk about it but before that i want to mention that msi is not restricted to only combinational logic circuits  these are combinational logic building blocks  multiplexers and decoders but you think of a counter a 4-bit full adder msi  if i can make one 4-bit full adder one ic in each full adder you have about how many gates ? you have two exclusive or gates for add and four gates for the carry and all that and if you add this is what will happen is you will get something like 24 or 25 gates it qualifies for an msi so functionally small scale integrated circuits can do but then put them together it becomes an msi the same way a counter can be or a register can be a msi even though a flip-flop will be a small scale integrated circuit because it only has couple of gates or at the most four to five gates including clock when you put flip-flops together to make a 4-bit register or 4-bit counter they become an msi so we have now used msis without our knowledge  4-bit full adders we have used in our design  4-bit full adders are adder subtracters and all that type of things  we talked counters and registers  shift registers these are all msi circuits they are also msi based design of course we can also use them in some other ways we will see it later on.first let me finish the programmable aspect of combinational logics large scale integrated circuits the programmable devices called plds where pld stands for programmable logic device so in the next lecture we will start talking about plds programmable logic devices but later on we will come back to revisit the msi sequential circuits  how they can be used in roles which we are not familiar with now we know how to use it in as a counter register but you can also use it for implementing the sequential logic  we will see that later 