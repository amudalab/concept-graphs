partition or swap
swap file swap
file swap map
1---------swap area--------1 page
page i slot
structures for swapping
swapping on linux
performance on modern
memory than older
systems and tend
tend to page
linux is similar
similar to solaris
regions of memory
established a swap
regular file system
partition each swap
swap area consists
hold swapped pages
array of integer
slot is occupied
page the value
ij.l.dicates the number
number of mappings
page is mapped
page is storing
storing a region
region of memory
systems are shown
shown in figure
drives have continued
smaller and cheaper
feasible to attach
attach many disks
number of disks
system presents opportunities
opportunities for improving
improving the rate
read or written
disks are operated
operated in parallel
offers the potential
potential for improving
improving the reliability
reliability of data
stored on multiple
lead to loss
loss of data
collectively called disks
address the performance
performance and reliability
composed of small
disks were viewed
alternative to large
disks ; today
reliability and higher
higher data-transfer rate
stands for ij.l.dependent
improvement of reliability
reliability via redundancy
reliability of raids
raids the chance
disks will fail
structuring raid raid
raid raid storage
variety of ways
disks directly attached
system or system
software can implement
implement raid flmctionality
intelligent host controller
controller can control
control multiple attached
multiple attached disks
disks in hardware
standard ata scsi
controllers this common
system and software
software without raid
raid software layers
simplicity and flexibility
disk will fail
failure will result
result in loss
amount of data
rate of data
loss is unacceptable
problem of reliability
store extra information
event of failure
disk to rebuild
rebuild the lost
approach to introducing
duplicate every disk
disk this technique
logical disk consists
two physical disks
write is carried
disks the result
first failed disk
disk is replaced
mirrored volume-where failure
replace a failed
restore the data
mirrored disk system
assumption of independence
independence of disk
valid power failures
failures and natural
result in damage
batch of disks
failures as disks
probability of failure
increasing the chance
repaired in spite
n1.irrored-disk systems offer
offer much higher
source of concern
mirroring of disks
state one solution
write one copy
add a cache
array this write-back
cache is protected
protected from data
loss during power
assuming the nvram
kind of error
protection and correction
ecc or mirroring
improvement in performance
performance via parallelism
access to multiple
multiple disks improves
disks improves performance
handled is doubled
number of reads
reads per unit
improve the transfer
byte across multiple
byte to disk
disk with sectors
times the normal
times the access
read or write
number of accesses
access can read
read eight times
generalized to include
include a number
file are striped
striped across multiple
levels of striping
sector or sectors
achieved through striping
two main goals
increase the throughput
throughput of multiple
multiple small accesses
reduce the response
12.7.3 raid levels
raid levels mirroring
mirroring provides high
striping provides high
high data-transfer rates
improve reliability numerous
reliability numerous schemes
schemes to provide
redundancy at lower
disk striping combined
combined with parity
l1.ave been proposed
proposed these schemes
memory-style error-correcting codes
block-interleaved distributed parity
disks  worth
worth of data
data are stored
store redundant information
information for failure
refers to disk
arrays with striping
level of blocks
mirroring or parity
raid ievell raid
ievell raid level1
raid level1 refers
disk mirroring figure
shows a mirrored
raid level2 raid
level2 raid level2
organization memory systems
detected certain errors
bits each byte
number of bits
byte is damaged
match the stored
stored parity bit
bit is damaged
match the computed
errors are detected
error-correcting schemes store
reconstruct the data
damaged the idea
idea of ecc
directly in disk
arrays via striping
striping of bytes
bytes across disks
stored in disk
bit in disk
bit is stored
bits are stored
disks this scheme
scheme is shown
pictorially in figure
labeled p store
store the error-correction
reconstruct the damaged
damaged data note
note that raid
disks  overhead
disks of data
unlike raid level
requires four disks
improves on level
taking into account
account the fact
unlike memory systems
controllers can detect
single parity bit
detection the idea
sectors is damaged
computing the parity
bits from sectors
bits is equal
good as level
number of extra
extra disks required
practice this scheme
advantages over level
overhead is reduced
disk is needed
disk in level1
reads and writes
byte are spread
out over multiple
disks with n-way
striping of data
rate for reading
reading or writing
writing a single
times as fast
raid level3 supports
level3 supports fewer
problem with raid
levels-is the expense
expense of computing
computing and writing
writing the parity
significantly slower writes
non-parity raid arrays
arrays to moderate
moderate this performance
raid storage arrays
storage arrays include
include a hardware
controller with dedicated
dedicated parity hardware
hardware this controller
offloads the parity
array the array
store the blocks
parity is computed
buffer the writes
spindles this combination
combination can make
make parity raid
fast as non-parity
non-parity in fact
caching array doing
array doing parity
doing parity raid
raid can outperform
outperform a non-caching
non-caching non-parity raid
diagramed in figure
disks to restore
restore the blocks
block read accesses
allowing other requests
access is slowe1
multiple read accesses
accesses can proceed
proceed in parallel
rate the transfer
rates for large
reads are high
read in parallel
parallel ; large
high transfer rates
data and parity
written in parallel
small independent writes
performed in parallel
parallel an operatingsystem
write of data
block be read
back the parity
single write requires
requires four disk
four disk accesses
two to read
two old blocks
two to write
two new blocks
level allows disks
raid set seamlessly
disks are initialized
initialized with blocks
raid levels raid
levels raid levels
differs from level
disks and parity
stores the parity
block is stored
disks store actual
store actual data
block this setup
setup is shown
disks a parity
parity for blocks
failure would result
recoverable by spreading
spreading the parity
avoids potential overuse
single parity disk
occur with raid
common parity raid
parity raid system
stores extra redundant
extra redundant information
information to guard
guard against disk
bits of redundant
bits of datacompared
bit in level
5-and the system
system can tolerate
tolerate two disk
two disk failures
combination of raid
performance than raid
common in enviromnents
reliability are important
doubles the number
needed for storage
expensive in raid
set of disks
disks are striped
stripe is mirrored
single disk failure
commercially is raid
disks are mirrored
mirrored in pairs
resulti.j.l.g mirrored pairs
pairs are striped
striped this scheme
advantages over raid
single disk fails
fails in raid
stripe is inaccessible
failure in raid
disk is unavailable
disk that mirrors
basic raid schemes
raid schemes described
confusion may exist
implementation of raid
area of variation
system software layer
hardware can provide
provide a minimum
minimum of features
full raid solution
raid solution parity
solution parity raid
slow when implemented
implemented in software
disks directly connected
solution is low
low in cost
array the storage
array can create
create raid sets
slice these sets
sets into smaller
implement the file
allowing multiple hosts
array s features
san interconnect layer
layer by disk
disk virtualization devices
servers and manages
writing each block
two separate storage
separate storage devices
involves the automatic
duplication of writes
writes between separate
sites for redundancy
redundancy and disaster
disaster recovery replication
synchronous or asynchronous
asynchronous in synchronous
write is considered
writes are grouped
written periodically asynchronous
periodically asynchronous replication
replication can result
result in data
primary site fails
features differs depending
raid is implemented
out and manage
replication if replication
replication is implemented
host operating system
host s data
hot spare disk
disk or disks
replacement in case
case disk failure
failure for instance
rebuild a mirrored
repaired without human
selecting a raid
system designers choose
choose a raid
level one consideration
consideration is rebuild
needed to rebuild
rebuild its data
supply of data
data is required
high-performance or interactive
interactive database systems
rebuild performance influences
rebuild performance varies
level used rebuilding
rebuilding is easiest
easiest or raid
array to rebuild
hours for raid
rebuilds of large
large disk sets
applications where data
critical raid level1
level1 is popular
popular for applications
applications that require
require high reliability
reliability with fast
fast recovery raid
reliability are important-for
small databases due
due to raid
inserv storage array
storage array im1ovation
effort to provide
blurs the lines
lines that separated
separated previous technologies
disks be configured
specific raid level
disk is broken
256-mb chunklets ram
level a disk
participate in multiple
wafl file system
system the format
format of inserv
hosts to mount
system without needing
entire file system
copy are copy-on-write
expand or shrink
change requires copying
requires copying data
data an administrator
administrator can configure
inserv to provide
provide a host
amount of logical
amount of physical
disks are allocated
original logical level
level the host
large fixed storage
fixed storage space
create its file
added or removed
system by inserv
file systems noticing
noticing the change
change this feature
feature can reduce
reduce the number
number of drives
needed by hosts
delay the purchase
purchase of disks
high space overhead
preferred for storing
storing large volumes
volumes of data
offer better reliability
reliability than levels
raid system designers
designers and administrators
administrators of storage
rates are higher
bits are protected
space overhead due
due to parity
bits is lower
disk is repaired
repaired is greater
extensions the concepts
concepts of raid
arrays of tapes
broadcast of data
data over wireless
systems when applied
applied to arrays
array is damaged
damaged when applied
applied to broadcast
block of data
data is split
split into short
robots containing multiple
multiple tape drives
drives will stripe
drives to increase
throughput and decrease
problems with raid
assure that data
users a pointer
wrong incomplete writes
result in corrupt
system s structures
protects against physical
physical media errors
hardware and software
errors as large
landscape of software
software and hardware
perils for data
solaris zfs file
zfs file system
file system takes
takes an innovative
approach to solving
solving these problems
verify the integrity
integrity of data
data zfs maintains
zfs maintains internal
maintains internal checksums
data and metadata
metadata these checksums
inode with pointers
data are mirrored
update the bad
entry that points
inode any problem
inode is detected
directory is accessed
checksumming takes places
level of consistency
found in raid
raid disk sets
sets or standard
standard file systems
systems the extra
calculation and extra
extra block read-modify-write
block read-modify-write cycles
performance of zfs
implementations is lack
lack of flexibility
array with twenty
twenty disks divided
four separate data
checksums all metadata
metadata and data
holding a file
large to fit
five-disk raid level
disks and volumes
storage array allowed
allowed the entire
set of twenty
large raid set
set other issues
issues could arise
arise several volumes
change a volume
volume s size
issue described above-mismatched
described above-mismatched file-system
above-mismatched file-system sizes
sizes some volume
volume n lanagers
lanagers allow size
growth or shrinkage
shrinkage the volumes
volumes could change
zfs combines file-system
combines file-system management
management and volume
unit providing greater
providing greater functionality
functions allows disks
partitions of disks
storage a pool
pool can hold
zfs file systems
systems the entire
pool s free
model of malloc
malloc and free
free to allocate
allocate and release
system as blocks
limits on storage
relocate file systems
systems between volumes
volumes or resize
resize volumes zfs
zfs provides quotas
quotas to limit
limit the size
system and reservations
reservations to assure
system can grow
file system owner
depicts traditional volumes
volumes and file
shows the zfs
zfs and pooled
pool and file
introduced the write-ahead
requires the availability
availability of stable
storage by definition
residing in stable
lost to implement
implement such storage
replicate the required
information on multiple
multiple storage devices
independent failure modes
coordinate the writing
writing of updates
force all copies
consistent and correct
disk write results
completion the data
data were written
correctly on disk
failure a failure
midst of transfer
sectors were written
sector being written
failure the failure
disk write started
previous data values
disk remain intact
occurs during writing
invoke a recovery
procedure to restore
restore the block
system must maintain
maintain two physical
two physical blocks
block an output
operation is executed
write the information
first physical block
first write completes
declare the operation
pair of physical
blocks is examined
detectable error exists
replace its contents
differ in content
replace the content
recovery procedure ensures
write to stable
storage either succeeds
completely or results
extend this procedure
arbitrarily large number
number of copies
block of stable
copies further reduces
reduces the probability
reasonable to simulate
simulate stable storage
copies the data
data in stable
storage are guaranteed
waiting for disk
writes to complete
storage arrays add
arrays add nvram
memory is nonvolatile
unit s power
trusted to store
store the data
data en route
stable storage writes
buy a dvd
disk sealed inside
cost low cost
characteristic of tertiary
12.9.1 tertiary-storage devices
devices because cost
storage is built
examples are floppy
cds and dvds
kinds of tertiarystorage
including removable devices
data in flash
memory and interact
12.9.1.1 removable disks
removable disks removable
disks removable disks
kind of tertiary
tertiary storage floppy
storage floppy disks
removable magnetic disks
flexible disk coated
coated with magnetic
material and enclosed
protective plastic case
case although common
common floppy disks
disks can hold
fast as hard
kind of removable
disk it records
rigid platter coated
disk the magneto-optic
magneto-optic head flies
magnetic disk head
material is covered
thick protective layer
layer of plastic
plastic or glass
makes the disk
resistant to head
magneto-optic disk drive
coil that produces
produces a magnetic
weak to magnetize
magnetize a bit
disk to write
write a bit
disk head flashes
flashes a laser
surface the laser
laser is aimed
written the laser
heats this spot
makes the spot
weak magnetic field
field can record
record a tiny
surface to read
read the data
data by detecting
detecting the tiny
tiny magnetic fields
reads a bit
property of laser
beam is bounced
beam is rotated
clockwise or counterclockwise
field this rotation
detects to read
read a bit
category of removable
altered by laser
dark or bright
spots one exarnple
exarnple of optical-disk
state the crystalline
beam is brighter
ltlaterial and bounces
layer the phase-change
drive uses laser
power to read
power to erase
erase the disk
disk by melting
melting and refreezing
refreezing the recording
power to melt
melt the medium
state to write
cd-rw and dvd-rw
kinds of disks
disks just described
make a worm
manufacture a thin
thin aluminum film
aluminum film sandwiched
glass or plastic
platters to write
light to burn
burn a small
aluminum this burning
destroy the information
disk by burning
impossible to alter
detect such additions
additions worm disks
disks are considered
durable and reliable
platters and magnetic
damage the recording
recording a newer
newer write-once technology
write-once technology records
organic polymer dye
dye absorbs laser
absorbs laser light
light to form
marks this technology
cd-r and dvd-r
cd-rom and dvd-rom
bits are pressed
disks are slower
process is slower
12.9.1.2 tapes magnetic
tapes magnetic tape
type of removable
holds more data
optical or magnetic
magnetic disk cartridge
disk cartridge tape
cartridge tape drives
drives and disk
drives have similar
similar transfer rates
rates but random
access to tape
requires a fast-forward
fast-forward or rewind
operation that takes
tens of seconds
typical tape drive
typical disk drive
cartridge is lower
capacity of magnetic
disks so tape
medium for purposes
require fast random
fast random access
random access tapes
hold backup copies
copies of disk
large supercomputer centers
centers to hold
hold the enornwus
large commercial enterprises
large tape installations
typically use robotic
robotic tape changers
changers that move
tapes between tape
drives and storage
library these mechanisms
give the computer
computer automated access
robotic tape library
library can lower
cost of data
storage a diskresident
cost per gigabyte
gigabyte is lower
file is needed
back into disk
storage for active
performance of on-line
on-line magnetic disks
cost of off-line
off-line tapes sitting
sitting on shelves
12.9.1.3 future technology
growing in importance
common simply described
hard drive depending
volatile or nonvolatile
nonvolatile the memory
technology also affects
affects performance nonvolatile
performance nonvolatile ssds
characteristics as traditional
traditional hard disks
parts and faster
latency in addition
expensive per megabyte
megabyte than traditional
larger hard disks
life-spans than hard
arrays to hold
metadata which requires
journaling file system
file system ssds
added to notebook
computers to make
make them smaller
promising storage technology
phk uses laser
light to record
record holographic photographs
photographs on special
array of pixels
pixels each pixel
represents one bit
hologram are transferred
flash of laser
data transfer rate
high with continued
technology under active
research is based
apply the fabrication
technologies that produce
produce electronic chips
manufacture of small
small datastorage machines
machines one proposal
10,000 tiny disk
tiny disk heads
centimeter of magnetic
magnetic storage material
storage material suspended
material is moved
track of data
material the storage
slightly to enable
heads to access
provide a nonvolatile
nonvolatile data-storage technology
faster than magnetic
disk and cheaper
cheaper than semiconductor
removable magnetic disk
provide several capabilities
media for data
storage these capabilities
capabilities are discussed
discussed in section
12.9.2 operating-system support
support two major
two major jobs
manage physical devices
present a virtual
virtual machine abstraction
abstraction to applications
array of data
operating system queues
schedules the interleaved
media are removable
12.9.2.1 application interface
interface most operating
systems can handle
handle removable disks
cartridge is inserted
empty file system
system is generated
disk this file
hard disk tapes
differently the operating
system usually presents
presents a tape
raw storage medium
medium an application
open a file
exits or closes
closes the tape
device this exclusivity
exclusivity makes sense
interleaving random accesses
accesses to tapes
drive is presented
provide file-system services
services the application
application must decide
array of blocks
blocks for instance
program that backs
disk to tape
tape might store
store a list
list of file
names and sizes
copy the data
organize a tape
full of data
program that created
names and file
find it difficult
file names stored
sizes in binary
binary or ascii
tremendously long string
string of bytes
operations are read
set of basic
operation the tape
positions the tape
specific logical block
entire track locating
locating to block
rewinding the tape
kinds of tape
partly filled tape
manage their physical
place empty sectors
written most tape
variable block size
block is detern
block is written
area of defective
tape is encountered
encountered during writing
area is skipped
written area -the
area -the positions
positions and numbers
operation that returns
returns the logical
logical block number
located many tape
drives also support
support a space
operation for relative
two logical blocks
writing a block
write in practice
side effect means
updating a block
block the tape
tape drive implements
implements this appending
appending by placing
placing an end-of-tape
written the drive
refuses to locate
past the eot
start writing doing
doing so overwrites
mark and places
blocks just written
file-system data structures
structures and algorithms
property of tape
12.9.2.2 file naming
naming another question
files on removable
file name consists
molmt table enables
enables the operating
system to discover
drive the file
file is located
disk is removable
knowing what drive
contained the cartridge
find the file
two serial numbers
digits in length
remember the names
memorize a 12-digit
12-digit serial number
difficulty is knowing
knowing the contents
contents and data
machines or drives
problems can arise
drives are compatible
computers may store
encodings for binary
ascii on pcs
pcs versus ebcdic
ebcdic on mainframes
today s operating
systems generally leave
leave the name-space
name-space problem unsolved
unsolved for removable
media and depend
depend on applications
applications and users
users to figure
access and interpret
interpret the data
kinds of removable
drive data cds
operating-system device driver
programmed to handle
comn1on formats dvd
formats dvd fonnats
12.9.2.3 hierarchical storage
hierarchical storage management
enables the computer
computer to change
change the removable
tape or disk
drive without human
assistance two major
backups and hierarchical
hierarchical storage systems
jukebox for backups
backups is simple
cartridge becomes full
instructs the jukebox
jukebox to switch
cartridge some jukeboxes
jukeboxes hold tens
tens of drives
drives and thousands
thousands of cartridges
robotic arms managing
managing the movement
movement of tapes
hierarchical storage system
storage system extends
extends the storage
hierarchy beyond primary
memory and secondary
incorporate tertiary storage
tertiary storage tertiary
storage tertiary storage
jukebox of tapes
tapes or removable
disks this level
hierarchy is larger
virtual memory system
manner to tertiary
out in practice
practice the reason
delay is intolerable
intolerable for demand
forms of virtual
extend the file
frequently used files
remain on magnetic
continues to exist
file no longer
longer occupy space
space in secondary
open the file
call is suspended
operation returns control
found in installations
work in hsm
hsm includes extending
move from disk
back to disk
sites save e-mail
backup tape ilm
tape ilm centralizes
ilm centralizes knowledge
12.9.3 performance issues
aspects of tertiary-storage
performance are speed
speed the speed
speed of tertiary
bandwidth and latency
latency we measure
measure the bandwidth
bandwidth in bytes
average data rate
number of bytes
calculates the average
jukebox in essence
stream actually flows
data rate provided
drive the bandwidth
tlce bandwidth ranges
range of bandwidths
aspect of speed
faster than tapes
tapes disk storage
open a disk
access simply moves
moves the ann
cylinder and waits
milliseconds by contrast
storage is three-dimensional
tape is accessible
bits are buried
buried below hundreds
hundreds or thousands
thousands of layers
layers of tape
reel a random
access on tape
tape requires winding
winding the tape
selected block reaches
reaches the tape
tens or hundreds
hundreds of seconds
thousand times slower
slower than random
access on disk
jukebox is involved
drive must stop
arm must switch
switch the disk
drive must spin
cartridge this operation
takes several seconds-about
hundred times longer
disk so switching
high performance penalty
generally must rewind
tape is loaded
drive to calibrate
slow tape jukebox
latency of tens
latency of hundreds
seconds ; switching
tapes is expensive
expensive tape jukeboxes
jukeboxes can rewind
item of data
latency seem reasonable
focus our attention
find a terrible
first the bandwidth
bandwidth the bandwidth-to-storage-capacity
disk to read
large hard disk
hour to read
large tape library
years the situation
situation with respect
respect to access
bad to illustrate
requests are queued
hour the low
cost of tertiary
tertiary storage results
cheap cartridges share
infrequently used data
library can satisfy
good pe1jormance means
pe1jormance means high
means high speed
aspect of performance
performance is reliability
read some data
drive or media
purposes the access
important to understand
understand the reliability
reliability of removable
fixed hard disks
exposed to harmful
harmful environmental conditions
temperature and humidity
shock and bending
bending optical disks
considered very reliable
layer that stores
stores the bits
bits is protected
layer the reliability
reliability of magnetic
magnetic tape varies
kind of drive
drive some inexpensive
inexpensive drives wear
wear out tapes
drives are gentle
millions of reuses
reuses by comparison
disk head flies
tape the scrubbing
tape can wear
out the head
thousands or tens
tens of thousands
thousands of hours
removable-disk or tape
disk or tape
fixed magnetic disk
weakness a head
disk generally destroys
destroys the data
drive or optical-disk
drive often leaves
leaves the data
data cartridge unharmed
12.9.3.3 cost storage
cost storage cost
media may lower
storage cost suppose
disk that holds
platters the storage
manufacture the platters
capacity is lox
expensive to make
make a removable
gigabyte of removable
drive is averaged
show cost trends
trends per megabyte
megabyte for dram
magnetic hard disks
drives the prices
lowest prices found
found in advertisements
world wide web
year these prices
reflect the smallcomputer
prices are low
low by comparison
mainframe and minicomputer
case of tape
cost of tape
tapes are purchased
2oos year figure
price per megabyte
megabyte of dram
huge tape library
library containing thousands
cost is dominated
cost of dram
dram fluctuates widely
excess production caused
caused a glut
marketplace caused sigrtificant
caused sigrtificant price
sigrtificant price increases
case of hard
steadier tape-drive prices
prices also fell
price per gigabyte
gigabyte of inexpensive
inexpensive tape drives
drives has ceased
ceased its dramatic
price of mid-range
mid-range tape technology
continued to fall
megabyte of magnetic
magnetic hard disk
in.expensive drives tape-drive
drives tape-drive prices
shown for years
prices are targeted
cost of storage
storage has fallen
comparing the graphs
price of disk
storage has plummeted
price of dram
dram and tape
magnetic disk storage
disk storage improved
orders of magnitude
improvement for main
magnitude main memory
main memory today
expensive than disk
rapidly for disk
magnetic disk drive
drive is approaching
small and medium-sized
medium-sized tape libraries
higher storage cost
cost than disk
systems with equivalent
fall in disk
largely rendered tertiary
rendered tertiary storage
tertiary storage obsolete
tertiary storage technology
magnitude less expensive
expensive than magnetic
disk it appears
revival of tertiary
storage must await
await a revolutionary
storage will find
limited to purposes
backups of disk
drives and archival
storage in enormous
enormous tape libraries
exceed the practical
practical storage capacity
capacity of large
large disk farms
secondary-storage i devices
secondary storage devices
disks or n1.agnetic
modern disk drives
drives are structured
structured as large
large one-dimensional arrays
arrays of logical
logical disk blocks
bytes in size
local i ports
requests for disk
i are generated
system each request
specifies the address
block number disk-schedliling
number disk-schedliling algorithms
algorithms can improve
improve the effective
variance in response
response time algorithms
c-look are designed
designed to make
make such improvements
improvements through strategies
strategies for disk-queue
harmed by external
fragmentation some systems
systems have utilities
utilities that scan
scan the file
system to identify
identify fragmented files
decrease the fragmentation
badly fragmented file
fragmented file system
significantly improve performance
sophisticated file systems
unix fast file
fast file system
incorporate many strategies
strategies to control
fragmentation during space
operating system manages
manages the disk
formatted to create
create the sectors
raw hardware-new disks
disk is partitioned
systems are created
blocks are allocated
allocated to store
store the system
system s bootstrap
block is corrupted
out that block
efficient swap space
key to good
systems usually bypass
bypass the file
raw disk access
access for paging
i some systems
dedicate a raw
raw disk partition
partition to swap
user or system
administrator to make
make the decision
decision by providing
providing both options
amount of storage
required on large
frequently made redundant
redundant via raid
algorithms these algorithms
disk failure raid
failure raid algorithms
algorithms are organized
combination of reliability
reliability and high
write-ahead log scheme
log scheme requires
replicate the needed
multiple nonvolatile storage
nonvolatile storage devices
update the information
manner to ensure
recover the stable
failure during data
transfer or recovery
built from disk
disk and tape
including magnetic tape
magnetic and magneto-optic
including space management
management and requestqueue
drive this convention
convention is simpler
potentially more confusing
identifies a specific
support for jukeboxes
privileged application designed
designed for backups
aspects of performance
performance are bandwidth
reliability many bandwidths
disks and tapes
generally much greater
ratio of drives
drives to cartridges
reading a large
long time optical
protect the sensitive
generally more robust
robust than magnetic
expose the magnetic
material to physical
storage has decreased
past two decades
notably for disk
effects on cost
cost and performance
performance if tape
density as disk
number of gigabits
gigabits per square
medium in fact
fact the suitability
device for random
random access depends
term streaming transfer
streaming transfer rate
transfer rate denotes
denotes the rate
excluding the effect
effect of access
latency by contrast
effective transfer rate
ratio of total
bytes per total
megabytes per seconds
device to decrease
data are transferred
ratio of effective
rate to streaming
transfer rate calculate
calculate the utilization
four transfer sizes
compute the smallest
smallest transfer size
size for disk
device for transfers
larger than ______
device for s1naller
compute the minimum
minimum transfer sizes
sizes that give
give acceptable utilization
utilization for cache
tape a random-access
described in terms
measured in drive-hours
drive-hours per failure
1,000 disk drives
750,000 hour mtbf
failure will occur
1,000 of dying
deduce the mtbf
convert this figure
figure from hours
hours to years
model of disk
number of years
system could maintain
maintain a free-space
tape-resident file system
file system assume
marks and locate
read position commands
commands as described
described in section
holographic storage drive
invented the drive
cartridge the size
holds 40,000 images
square black-and-white picture
drive can read
write one picture
kinds of storage
term fast wide
fast wide scsi-ii
wide scsi-ii denotes
denotes a scsi
bus that operates
moves a packet
packet of bytes
wide scsi-ii disk
scsi-ii disk drive
disk drive spins
sectors per track
track a estimate
estimate the sustained
sustained transfer rate
drive in megabytes
tracks per cylinde1
information to give
give an accurate
workload that reads
reads individual sectors
disk d calculate
calculate the random-access
random-access i operations
reduce the average
average seek distance
seek distance suppose
workload is reading
reading 8-kilobyte pages
average queue length
scheduling algorithm reduces
reduces the average
milliseconds now calculate
compare the performance
performance of write
write operations achieved
raid level1 organization
serving a request
request at cylinder
queue of pending
current head position
disk arm moves
moves to satisfy
algorithms a fcfs
fcfs b sstf
c-scan f c-look
elementary physics states
object is subjected
relationship between distance
disk in exercise
accelerates the disk
decelerates the disk
disk can perform
perform a seek
number of cylinders
head moves explain
write an equation
distance this equation
distance in cylinders
calculate the total
schedules in exercise
determine which schedule
smallest total seek
schedule over fcfs
accelerating seek described
described in exercise
typical of hard-disk
drives by contrast
hard disks manufactured
fixed rate suppose
scb.edule over fcfs
average rotational latency
found or part
one-sided 5.25-inch optical-disk
5.25-inch optical-disk cartridge
gigabit per square
inch further suppose
megabits per square
1,800 feet long
feet long calculate
calculate an estimate
storage media suppose
optical tape exists
disk what volume
volume of data
optical tape hold
magnetic tape cost
write a program
program that simulates
simulates the disk-scheduling
disk-scheduling algorithms discussed
considered in disk
c-scan to include
include latency optimization
remapping bad blocks
blocks by sector
sparing or sector
slipping can influence
influence perfonnance suppose
drive in exercise
sectors at random
sector is mapped
estimate the number
random-access workload consisting
assuming a queue
choice of scheduling
sector on performance
discuss the relative
advantages and disadvantages
disadvantages of sector
sparing and sector
performance of c-scan
c-scan and scan
assuming a uniform
distribution of requests
request s service
variation in response
sizes of seek
starvation may occur
assertion is true
scan to ensure
explain why fairness
examples of circumstances
system be unfair
unfair in serving
serving i requests
comprising five disks
parity for sets
four disks stored
blocks are accessed
accessed in order
order to perform
blocks of data
system generally treats
generally treats removable
treats removable disks
disks as shared
shared file systems
systems but assigns
assigns a tape
give three reasons
explain this difference
difference in treatment
treatment of disks
describe the additional
shared file-system access
sharing the tape
files were disk-resident
explain your answer
ram disk affect
affect your selection
algorithm what factors
apply to hard-disk
file system stores
recently used blocks
cache in main
estimates to compare
compare the cost
terabyte storage system
storage system made
incorporates tertiary storage
tertiary storage suppose
magnetic disk holds
average access latency
milliseconds also suppose
tape library costs
compute the total
maximum total data
total data rate
pure disk system
describe and justify
reside on disk
percent are archived
disk system handles
mixed configuration comprising
configuration comprising disks
comprising disks organized
organized as raid
levell and raid
raid levels disks
levels disks assume
system has flexibility
flexibility in deciding
deciding which disk
file which files
disks in order
order to optimize
involved in rereading
rereading code pages
file system versus
versus using swap
space to store
expect a cylinder
fat or inodes
scheduling algorithms discussed
propose a disk-scheduling
performance by taking
systems typically fil1.d
typically fil1.d data
fil1.d data blocks
fat in dos
dos or inodes
inodes in unix
indirection to improve
improve disk performance
discuss the reasons
system might require
require accurate information
blocks are stored
operating system improve
system improve file
improve file system
file system performance
compare the throughput
raid levels organization
raid levell organization
operations on single
blocks b read
operations on multiple
multiple contiguous blocks
achieve better performance
performance for read
discussions of redundant
arrays of independent
presented by patterson
survey of chen
architectures for high-performance
computing are discussed
discussed by katz
enhancements to raid
systems are discussed
discussed in wilkes
teorey and pinkerton
present an early
early comparative analysis
analysis of disk-scheduling
simulations that model
model a disk
choice for queue
c-look is good
good for queue
ways to improve
improve the seek
moving the disk
jacobson and wilkes
describe disk-scheduling algorithms
addition to seek
seek time scheduling
optimizations that exploit
exploit disk idle
disk idle times
times are discussed
discussed in lumb
discuss disk performance
performance and show
show the negligible
negligible performance impact
impact of defect
management the placement
placement of hot
data to improve
improve seek times
considered by ruemmler
ruemmler and wilkes
akyurek and salenl
describe an accurate
accurate performance model
modern disk drive
disk drive worthington
determine low-level disk
low-level disk properties
advanced by schindler
schindler and gregory
disk power management
power management issues
issues are discussed
discussed in douglis
1994l and golding
size and randomness
influence on disk
report numerous interesting
numerous interesting workload
interesting workload characteristics
files are smalt
newly created files
files are deleted
opened for reading
reading are read
seeks are short
describe the berkeley
berkeley fast file
techniques to obtain
obtain good performance
variety of workloads
mcvoy and kleiman
discuss further improvements
basic ffs quinlan
implement a file
system on worm
magnetic disk cache
cache ; richards
discusses a file-system
approach to tertiary
tertiary storage maher
give an overview
integration of distributed
distributed file systems
systems and tertiary
years for instance
paper by mattson
describes a mathematical
approach to predicting
predicting the performance
describes the accommodation
accommodation of removable
commercial operating system
miller and katz
describe the characteristics
characteristics of tertiary-storage
supercomputing environment benjamin
massive storage requirements
project at nasa
disks and programmable
disks are discussed
discussed in gibson
1997b t gibson
1998t and lee
lee and thekkath
holographic storage technology
article by psaltis
psaltis and mok
collection of papers
assembled by sincerbox
asthana and finkelstein
describe several emerging
emerging storage technologies
including holographic storage
electron trapping toigo
description of modern
modern disk technology
potential future storage
future storage technologies
two main jobs
i and processing
incidental for instance
browse a web
page or edit
edit a file
read or enter
enter some information
compute an answer
system in computer
manage and control
control i operations
devices although related
pieces to paint
paint a complete
describe the basics
hardware interface places
interface places constraints
i services provided
application i interface
operating system bridges
bridges the gap
discuss the unix
system v streams
enables an application
application to assemble
pipelines of driver
driver code dynamically
discuss the performance
principles of operating-system
design that improve
improve i performance
explore the structure
discuss the principles
principles and complexities
explain the performance
control of devices
concern of operating-system
i devices vary
function and speed
methods are needed
needed to control
kernet which separates
separates the rest
complexities of managing
managing i devices
exhibits two conflicting
two conflicting trends
standardization of software
interfaces this trend
11s to incorporate
incorporate improved device
improved device generations
generations into existing
computers and operating
increasingly broad variety
unlike previous devices
challenge to incorporate
systems this challenge
challenge is met
combination of hardware
techniques the basic
basic i hardware
i hardware elements
accommodate a wide
devices to encapsulate
encapsulate the details
details and oddities
system is structured
modules the present
present a uniform
uniform deviceaccess interface
system calls provide
provide a standard
operate a great
great many kinds
kinds of devices
devices most fit
categories of storage
military fighter jet
human gives input
joystick and foot
computer sends output
sends output commands
motors to move
concepts to understand
devices are attached
software can control
control the hardware
system by sending
air the device
port if devices
set of wires
rigidly defined protocol
protocol that specifies
specifies a set
set of messages
messages are conveyed
conveyed by patterns
patterns of electrical
electrical voltages applied
wires with defined
timings when device
cable that plugs
plugs into device
device c plugs
chain usually operates
widely in computer
architecture and vary
methods a typical
typical pc bus
bus structure appears
appears in figure
common pc system
connects the processor-memory
connects relatively slow
keyboard and serial
serial and usb
disks are c01mected
scsi bus plugged
interconnect main parts
collection of electronics
operate a port
device a serial-port
simple device controller
computer that controls
controls the signals
port by contrast
scsi bus controller
protocol is complex
separate circuit board
memory to enable
process the scsi
scsi protocol messages
messages some devices
circuit board attached
side this board
controller it implements
implements the disk
kind of com1ection-scsi
com1ection-scsi or ata
processor give commands
commands and data
controller to accomplish
transfer the short
registers for data
data and control
signals the processor
controller by reading
reading and writing
writing bit patterns
communication can occur
special i instructions
byte or word
i instruction triggers
instruction triggers bus
triggers bus lines
lines to select
select the proper
controller can support
registers are mapped
processor the cpu
executes i requests
standard data-transfer instructions
instructions to read
read and write
write the device-control
techniques for instance
instructions to control
control some devices
devices and memory-mapped
control others figure
shows the usual
usual i port
addresses for pcs
pcs the graphics
ports for basic
basic control operations
large memory558 chapter
000-00f dma controller
controller 020-021 interrupt
020-021 interrupt controller
controller 040-043 timer
timer 200-20f game
200-20f game controller
controller 2f8-2ff serial
2f8-2ff serial port
320-32f hard-disk controller
controller 378-37f parallel
378-37f parallel port
port 3d0-3df graphics
3d0-3df graphics controller
controller 3f0-3f7 diskette-drive
3f0-3f7 diskette-drive controller
controller 3f8-3ff serial
3f8-3ff serial port
locations on pcs
region to hold
hold screen contents
contents the process
process sends output
screen by writing
region the controller
generates the screen
screen image based
memory this technique
technique is simple
millions of bytes
memory is faster
faster than issuing
ease of writing
memory-mapped i controller
controller is offset
type of software
memory-mapped device register
register is vulnerable
vulnerable to accidental
protected memory helps
helps to reduce
reduce this risk
port typically consists
host to send
host these bits
bits indicate states
command has completed
error has occurred
host to start
start a command
change the nlode
device for instance
serial port chooses
chooses between full-duplex
full-duplex and half-duplex
bit enables parity
enables parity checking
sets the word
size some controllers
controllers have fifo
hold several bytes
bytes of input
input or output
data to expand
expand the capacity
register a fifo
chip can hold
hold a small
burst of data
device or host
receive those data
polling the complete
protocol for interaction
basic handshaking notion
notion is simple
simple we explain
coordinate the producer-consumer
host the controller
set a bit
means to write
clear a bit
sets the busy
working and clears
clears the busy
ready to accept
comm.and the host
signals its wishes
register the host
sets the command-ready
controller to execute
host writes output
controller by handshaking
host repeatedly reads
reads the busy
bit becomes clear
sets the write
register and writes
writes a byte
bit is set
reads the command
register and sees
sees the write
reads the data-out
clears the command-ready
clears the error
device i succeeded
loop is repeated
reading the status
controller and device
host must service
service the device
lost for instance
data are streaming
controller will overflow
overflow and data
long before returning
returning to read
read the bytes
cycles are sufficient
sufficient to poll
poll a device
read a device
logical-and to extract
extract a status
basic polling operation
operation is efficient
efficient but polling
polling becomes inefficient
finds a device
ready for service
cpu processing remains
processing remains undone
efficient to arrange
controller to notify
notify the cpu
device becomes ready
require the cpu
cpu to poll
completion the hardware
mechanism that enables
enables a device
device to notify
cpu device driver
device driver initiates
cpu executing checks
checks for interrupts
interrupts between instructions
instructions cpu resumes
cpu resumes processing
processing of interrupted
interrupts the basic
basic interrupt mechanism
interrupt mechanism works
senses after executing
executing every instruction
controller has asserted
asserted a signal
performs a state
save and jumps
address in memory
memory the interrupt
interrupt handler determines
executes a return
return from interrupt
instruction to return
return the cpu
device controller raises
raises an interrupt
interrupt by asserting
asserting a signal
interrupt request line
catches the interrupt
interrupt and dispatches
clears the interrupt
interrupt by servicing
servicing the device
summarizes the interrupt-driven
interrupt-driven i cycle
interrupt mechanism enables
enables the cpu
cpu to respond
controller becomes ready
modern operating system
nlore sophisticated interrupthandling
sophisticated interrupthandling features
ability to defer
defer interrupt handling
handling during critical
proper interrupt handler
device without first
raised the interrupt
system can distinguish
distinguish between high
high and low-priority
degree of urgency
modern computer hardware
features are provided
two interrupt request
interrupt request lines
reserved for events
unrecoverable memory errors
execution of critical
critical instruction sequences
controllers to request
interrupt mechanism accepts
accepts an number
number that selects
selects a specific
specific interrupt-handling routine
addresses of specialized
specialized interrupt handlers
handlers the purpose
vectored interrupt mechanism
single interrupt handler
handler to search
sources of interrupts
interrupts to determine
service in practice
solve this problem
technique of interrupt
interrupt vector points
list of interrupt
il1.terrupt is raised
service the request
request this structure
huge interrupt table
inefficiency of dispatching
illustrates the design
design of theinterruptvector
intel pentium processor
processor the events
signal various error
conditions the events
mechanism also implements
implements a system
cpu to defer
defer the handling
handling of low-priority
interrupts without maskii1.g
interrupts and makes
interrupt to preempt
preempt the execution
operating system interacts
ways at boot
operating system probes
probes the hardware
buses to determine
determine what devices
devices are present
present and installs
device controllers raise
controllers raise interrupts
service these interrupts
signify that output
output has cornpleted
detected the interrupt
handle a wide
accessing a protected
protected or nonexistent
nonexistent memory address
attempting to execute
execute a privileged
instruction from user
mode the events
events that trigger
occurrences that induce
induce the cpu
cpu to execute
execute an urgent
urgent self-contained routine
mechanism that saves
saves a small
amount of processor
19-31 32-255 breakpoint
32-255 breakpoint into-detected
breakpoint into-detected overflow
into-detected overflow bound
overflow bound range
bound range exception
range exception invalid
exception invalid opcode
invalid opcode device
double fault coprocessor
fault coprocessor segment
coprocessor segment overrun
invalid task state
task state segment
state segment segment
segment not present
present stack fault
stack fault general
fault general protection
general protection page
protection page fault
floating-point error alignment
error alignment check
alignment check machine
check machine check
maskable interrupts figure
figure i3.4 intel
i3.4 intel pentium
pentium processor event-vector
processor event-vector table
calls a privileged
mechanism for virtual
virtual memory paging
paging a page
exception that raises
interrupt the interrupt
suspends the current
process and jumps
kernel this handler
saves the state
moves the process
performs page-cache management
operation to fetch
fetch the page
schedules another process
process to resume
implementation of system
program uses library
calls to issue
issue system calls
calls the library
library routines check
check the arguments
build a data
structure to convey
convey the arguments
execute a special
operand that identifies
identifies the desired
desired kernel service
executes the trap
interrupt hardware saves
switches to supervisor
routine that implements
implements the requested
service the trap
low interrupt priority
interrupt priority compared
assigned to device
interrupts-executilcg a system
call on behalf
urgent than servicing
servicing a device
fifo queue overflows
overflows and loses
manage the flow
flow of control
required to complete
complete a disk
read one step
data from kernel
buffer this copying
block other high-priority
handling another step
drive this step
step has higher
previous one completes
pair of interrupt
interrupt handlers implen
handlers implen ents
ents the kernel
code that completes
completes a disk
read the high-priority
high-priority handler records
clears the device
raises a low-priority
interrupt to complete
complete the work
occupied with high-priority
completes the userlevel
i by copying
calling the scheduler
scheduler to place
place the application
threaded kernel architecture
suited to implement
implement multiple interrupt
multiple interrupt priorities
enforce the precedence
precedence of interrupt
handling over background
processing in kernel
kernel and application
routines we illustrate
illustrate this point
kernel in solaris
handlers are executed
executed as kernel
threads a range
range of high
priorities is reserved
priorities give interrupt
give interrupt handlers
interrupt handlers precedence
precedence over application
code and kernel
housekeeping and implement
implement the priority
relationships among interrupt
handlers the priorities
solaris thread scheduler
scheduler to preempt
preempt lowpriority interrupt
lowpriority interrupt handlers
handlers in favor
favor of higher-priority
threaded implementation enables
implementation enables multiprocessor
enables multiprocessor hardware
hardware to run
run several interrupt
interrupt handlers concurrently
concurrently we describe
describe the interrupt
architecture of windows
unix in chapter
modern operating systems
systems to handle
handle asynchronous events
trap to supervisor-mode
kernel to enable
system of interrupt
interrupt priorities device
priorities device controllers
calls all raise
interrupts to trigger
trigger kernel routines
routines because interrupts
heavily for time-sensitive
efficient interrupt handling
handling is required
required for good
good system performance
13.2.3 direct memory
direct memory access
expensive general-purpose processor
processor to watch
watch status bits
register one byte
time-a process termed
termed many computers
computers avoid burdening
burdening the main
cpu with pio
pio by offloading
initiate a dma
writes a dma
dma command block
block into memory
memory this block
transferred the cpu
writes the address
work the dma
dma controller proceeds
proceeds to operate
operate the memory
bus to perform
cpu a simple
simple dma controller
component in pcs
high-speed dma hardware
controller is performed
pair of wires
wires called dma-request
dma-request and dma-acknowledge
device controller places
places a signal
word of data
transfer this signal
controller to seize
place the desired
place a signal
iia -acknowledge wire
device controller receives
receives the dma-acknowledge
signat it transfers
transfers the word
data to memory
memory and removes
removes the dma-request
transfer is finished
dma controller interrupts
interrupts the cpu
process is depicted
depicted in figure
dma controller seizes
seizes the memory
prevented from accessing
accessing main memory
access data items
primary and secondary
offloading the data-transfer
controller generally improves
improves the total
total system performance
performance some computer
architectures use physical
physical memory addresses
addresses for dma
mercwry using virtual
translation to physical
physical addresses dvma
dvma can perform
perform a transfer
two memory-mapped devices
system generally prevents
generally prevents processes
processes from issuing
issuing device commands
device commands directly
directly this discipline
discipline protects data
data from access-control
protects the system
system from erroneous
operating system exports
system exports functions
sufficiently privileged process
access low-level operations
hardware on kernels
kernels without memory
processes can access
access device controllers
device controllers directly
directly this direct
avoid kernel communication
layers of kernelsoftware
interferes with system
security and stability
stability the trend
trend in general-purpose
general-purpose operating systems
memory and devices
guard against erroneous
erroneous or malicious
dma controller transfers
controller transfers bytes
bytes to buffer
increasing memory address
address and decreasing
driver is told
told to transfer
transfer disk data
data to buffer
buffer at address
device driver tells
--  disk
controller to transfer
transfer c bytes
bytes from disk
disk to buffer
dma interrupts cpu
cpu to signal
signal transfer completion
2..c ~ li.ip
rc-c ~ .,.,---j
.,.,---j = ,._
disk controller initiates
controller initiates dma
initiates dma transfer
dma transfer cg
cg ! ,or
disk controller sends
sends each byte
byte to dma
dma controller figure
i are complex
complex when considered
level of detail
detail of electronics-hardware
described are sufficient
sufficient to enable
features of operating
review the main
bus a controller
registers the handshaking
controller the execution
interrupts the offloading
controller for large
transfers we gave
gave a basic
handshaking that takes
section in reality
poses a problem
problem for operating-system
implementers each kind
kind of device
set of capabilities
protocols for interacting
system be designed
attach new devices
computer without rewriting
rewriting the operating
operating system give
give a convenient
uniform i interface
interface to applications
applications we address
address those questions
discuss structuring techniques
techniques and interfaces
system that enable
enable i devices
application can open
disk without knowing
knowing what kind
kind of disk
cmnputer without disruption
complex software-engineering problems
approach here involves
devices by identifying
kinds each kind
kind is accessed
set of functions-an
functions-an the differences
differences are encapsulated
encapsulated in kernel
modules called device
internally are custom-tailored
custom-tailored to specific
standard interfaces figure
kernel are structured
structured in software
hide the differences
differences among device
i system calls
system calls encapsulate
encapsulate the behavior
behavior of devices
hide hardware differences
differences from applications
simplifies the job
benefits the hardware
design new devices
existing host controller
host controller interface
write device drivers
drivers to interface
hardware to popular
kernel i structure
attach new peripherals
computer without waiting
vendor to develop
develop support code
unfortm1ately for device-hardware
type of operating
device may ship
ship with multiple
multiple device drivers-for
device drivers-for instance
drivers for ms-dos
solaris devices vary
illustrated in figure
character-stream or block
block a character-stream
character-stream device transfers
device transfers bytes
block device transfers
transfers a block
block of bytes
sequential or random
access a sequential
sequential device transfers
device transfers data
fixed order determined
device can instruct
instruct the device
device to seek
data storage locations
asynchronous a synchronous
synchronous device performs
device performs data
performs data transfers
transfers with predictable
predictable response times
times an asynchronous
asynchronous device exhibits
device exhibits irregular
irregular or unpredictable
unpredictable response times
sharable or dedicated
dedicated a sharable
processes or threads
speed of operation
operation device speeds
device speeds range
perform both input
input and output
data transfer direction
access method transfer
method transfer schedule
schedule i direction
synchronous asynchronous dedicated
asynchronous dedicated sharable
dedicated sharable latency
sharable latency seek
seek time transfer
transfer rate delay
delay between operations
read only write
write only read-write
read-write tape keyboard
tape keyboard tape
keyboard tape keyboard
tape keyboard cd-rom
keyboard cd-rom figure
purpose of application
differences are hidden
devices are grouped
types the resulting
styles of device
exact system calls
calls may differ
differ across operating
standard the major
major access conventions
access conventions include
conventions include block
memory-mapped file access
network sockets operating
sockets operating systems
systems also provide
provide special system
special system calls
calls to access
operating systems provide
provide a set
set of system
calls for graphical
transparently passes arbitrary
passes arbitrary conunands
driver in unix
call is ioctl
system call enables
application to access
access any functionality
call the ioctl
arguments the first
descriptor that connects
connects the application
driver by referring
hardware device managed
integer that selects
arbitrary data structure
structure in memory
memory that enables
enables the application
application and driver
driver to communicate
information or data
block and character
devices the captures
accessing disk drives
devices the device
device is expected
expected to understand
block to transfer
applications normally access
capture the essen.tial
behaviors of block-storage
applications are insulated
prefer to access
access a block
simple linear array
blocks this mode
mode of access
unneeded buffering likewise
locking of file
blocks or regions
operating-system locking services
worst to avoid
avoid these conflicts
raw-device access passes
access passes control
letting the operating
operating system step
device a compromise
mode of operation
file that disables
buffering and locking
layered on top
top of block-device
interface provides access
access to disk
array of bytes
bytes in main
memory the system
call that maps
maps a file
file into memory
returns the virtual
virtual memory address
file the actual
actual data transfers
transfers are performed
needed to satisfy
transfers are handled
demand-paged virtual memory
virtual memory access
efficient memory mapping
convenient for programmers-access
simple as reading
writing to memory
memory operating systems
systems that offer
offer virtual memory
interface for kernel
services for instance
execute a program
operating system maps
maps the executable
executable into memory
executable the mapping
access to swap
space on disk
basic system calls
enable an application
character on top
built that offer
offer line-at-a-time access
buffering and editing
types a backspace
character is removed
style of access
access is convenient
convenient for input
modems that produce
data for input
input spontaneously -that
necessarily be predicted
application this access
good for output
printers and audio
fit the concept
stream of bytes
13.3.2 network devices
performance and addressing
characteristics of network
network i differ
provide a network
network i interface
disks one interface
unix and windows
socket for electricity
socket interface enable
create a socket
connect a local
plugs this application
application to plug
send and receive
connection to support
support the implementation
implementation of servers
function called select
manages a set
set of sockets
sockets a call
call to select
sockets have room
room to accept
accept a packet
eliminates the polling
polling and busy
i these functions
encapsulate the essential
behaviors of networks
facilitating the creation
creation of distributed
underlying network hardware
hardware and protocol
approaches to interprocess
communication and network
implemented for instance
network interface card
ground for network
find half-duplex pipes
clocks and timers
timers most computers
computers have hardware
timers that provide
provide three basic
give the current
give the elapsed
set a timer
timer to trigger
calls that implement
implement these functions
standardized across operating
hardware to measure
set to wait
generate an interrupt
repeat the process
process to generate
generate periodic interrupts
interrupts the scheduler
mechanism to generate
preempt a process
disk i subsystem
invoke the periodic
flushing of dirty
dirty cache buffers
buffers to disk
congestion or failures
failures the operating
provide an interface
interface for user
timers the operating
system can support
support more timer
number of timer
timer hardware chan11els
chan11els by simulating
simulating virtual clocks
timer device driver
maintains a list
list of interrupts
sorted in earliest-time-first
order it sets
sets the timer
signals the requester
requester and reloads
reloads the timer
interrupt rate generated
resolution is coarse
computer can execute
hundreds of millions
millions of instructions
precision of triggers
triggers is limited
overhead of maintaining
maintaining virtual clocks
maintain the system
system time-of-day clock
clock can drift
clock is constructed
case the counter
considered a highresolution
offers accurate measurements
blocking and nonblocking
system-call interface relates
choice between blocking
i and nonblocking
issues a system
application is suspended
suspended the application
application is moved
system s run
system call completes
eligible to resume
receive the values
call the physical
physical actions performed
varying or unpredictable
systems use blocking
blocking system calls
blocking application code
code is easier
easier to understand
understand than nonblocking
nonblocking application code
interface that receives
keyboard and mouse
input while processing
processing and displaying
application that reads
file on disk
decompressing and displaying
displaying the output
writer can overlap
write a multithreaded
application some threads
threads can perform
perform blocking system
executing the solaris
technique to implement
implement a user-level
library for asynchronous
freeing the application
task some operating
systems provide nonblocking
nonblocking i system
calls a nonblocking
halt the execution
extended time h1.stead
bytes were transferred
nonblocking system call
asynchronous system call
call an asynchronous
asynchronous call returns
complete the application
continues to execute
execute its code
code the completion
signal or software
linear control flow
application the difference
difference between nonblocking
nonblocking and asynchronous
asynchronous system calls
data are available-the
available-the full number
requests a transfer
two i methods
methods are shown
call for network
sockets this system
system call takes
takes an argument
argument that specifies
specifies a maximum
application can poll
poll for network
kernel user user
user user kernel
introduces extra overhead
call only checks
kind of read
fotmd in mach
blocking multiple-read call
specifies desired reads
call and returns
provide many services
i several services-scheduling
error handlil1.g-are provided
subsystem and build
hardware and devicedriver
responsible for protectil1.g
processes and malicious
scheduling to schedule
schedule a set
i requests means
means to determine
determine a good
applications issue system
scheduling can improve
improve overall system
share device access
fairly among processes
i to complete
applications issue blocking
issue blocking read
blocking read calls
requests a block
disk the operating
system can reduce
reduce the distance
disk ann travels
travels by serving
serving the applications
rearrangil1.g the order
order of service
operating-system developers implement
developers implement scheduling
scheduling by maintaining
maintaining a wait
queue of requests
issues a blocking
blocking i system
i system call
i scheduler rearranges
rearranges the order
queue to improve
response time experienced
experienced by applications
applications the operating
receives especially poor
give priority service
service for delay-sensitive
requests for instance
virtual memory subsystem
priority over application
requests several scheduling
algorithms for disk
i are detailed
detailed in section
kernel supports asynchronous
system might attach
attach the wait
manages this table
device s type
device is busy
type of request
i subsystem improves
improves the efficiency
scheduling i operations
space in main
disk via teclul.iques
teclul.iques called buffering
area that stores
data being transferred
buffering is done
reasons one reason
producer and consumer
data stream suppose
received via modem
modem for storage
disk the modem
buffer is created
created in main
mernory to accumulate
accumulate the bytes
buffer of data
data has arrived
written to disk
place to store
store additional incoming
additional incoming data
fills the first
write is requested
requested the modem
modem then starts
starts to fill
buffer is written
modem has filled
modem can switch
decouples the producer
producer of data
relaxing timing requirements
decoupling is illustrated
lists the enormous
differences in device
speeds for typical
typical computer hardware
adaptations for devices
sizes such disparities
common in computer
widely for fragmentation
reassembly of messages
message is fragmented
fragmented into small
small network packets
packets the packets
receiving side places
buffer to form
form an image
support copy semantics
semantics for application
clarify the meaning
meaning of copy
copy semantics suppose
wishes to write
write to disk
disk it calls
calls the write
providing a pointer
bytes to write
system call returns
disk is guaranteed
application system calt
system calt independent
application s buffer
buffer a simple
system can guarantee
guarantee copy semantics
call to copy
copy the application
application i system
system bus hype
pci ~ xpress
lnfi ! l.i
buffer before returning
application the disk
write is performed
copying of data
data between kernel
buffers and application
application data space
space is common
common in operating
efficiently by clever
virtual memory mapping
mapping and copy-on-write
copy-on-write page protection
region of fast
memory that holds
copies of data
efficient than access
original for instance
process are stored
stored on disk
cached ilc physical
ilc physical memory
cpu s secondary
secondary and primary
caches the difference
buffer may hold
holds a copy
copy on faster
item that resides
caching and buffering
buffering are distinct
sometinces a region
purposes for illstance
preserve copy semantics
enable efficient scheduling
scheduling of disk
system uses buffers
buffers in maill
memory to hold
hold disk data
data these buffers
efficiency for files
shared by applications
written and reread
receives a file
file i request
kernel first accesses
accesses the buffer
avoided or deferred
writes are accumulated
transfers are gathered
efficient write schedules
schedules this strategy
strategy of delayilcg
writes to improve
improve i efficiency
efficiency is discussed
context of remote
remote file access
spooling and device
buffer that holds
accept ilcterleaved data
ilcterleaved data streams
prillter can serve
print their output
operating system solves
solves this problem
problem by intercepting
intercepting all output
printer each application
application s output
output is spooled
separate disk file
application finishes printing
spooling system queues
queues the correspondilcg
correspondilcg spool file
file for output
spooling system copies
copies the queued
queued spool files
spooling is managed
system daemon process
interface that enables
users and system
administrators to display
display the queue
remove unwanted jobs
printer is serviced
drives and printers
requests of multiple
multiple concurrent applications
concurrent applications spooling
systems can coordinate
coordinate concurrent output
deal with concurrent
concurrent device access
provide explicit facilities
facilities for coordination
coordination some operating
support for exclusive
exclusive device access
access by enabling
enabling a process
process to allocate
allocate an idle
deallocate that device
needed other operating
operating systems enforce
enforce a limit
open file handle
device many operating
systems provide functions
functions that enable
processes to coordinate
coordinate exclusive access
access among thenlselves
thenlselves for instance
calls to wait
call that declares
declares the types
types of access
applications to avoid
13.4.5 error handling
handling an operating
memory can guard
kinds of hardware
hardware and application
complete system failure
minor mechanical glitch
mechanical glitch devices
transfers can fail
network becomes overloaded
controller becomes defective
defective operating systems
effectively for transient
failures for instance
protocol so specifies
important component experiences
experiences a permanent
call will return
return one bit
bit of information
signifying either success
success or failure
unix operating system
additional integer variable
integer variable named
variable named errno
return an error
values-indicating the general
out of range
file not open
provide highly detailed
highly detailed error
detailed error information
current operating systems
designed to convey
convey this information
application for instance
device is reported
levels of detail
key that identifies
identifies the general
states the category
category of failure
bad command parameter
hardware subsystem failed
failed its self-test
scsi devices maintain
devices maintain internal
maintain internal pages
pages of error-log
issue of protection
protection a user
attempt to disrupt
disrupt the normal
systern by attempting
attempting to issue
illegal i instructions
mechanisms to ensure
camlot take place
users from performing
issue i instructions
user program executes
executes a system
call to request
operating system perform
executing in monitor
request is valid
requested the operating
system then returns
trap to monitor
monitor kernel perform
return to user
user user program
user program figure
call to perform
i port memory
port memory locations
protected from user
memory-protection system note
deny all user
access most graphics
games and video
editing and playback
software need direct
access to memory-mapped
memory-mapped graphics controller
graphics controller memory
memory to speed
speed the performance
provide a locking
section of graphics
representing a window
window on screen
13.4.7 kernel data
kernel data structures
structures the kernel
variety of in-kernel
in-kernel data structures
open-file table structure
structure from section
structures to track
track network connections
unix provides file-system
variety of entities
spaces of processes
supports a read
differ for instance
read a user
probe the buffer
cache before deciding
perform a disk
i to read
read a raw
disk sector size
boundary to read
read a process
data from memory
memory unix encapsulates
encapsulates these differences
teclucique the open-file
system-wide open-file table
pointer to read
pointer to select
pointer to ioctl
ioctl function file
function file descriptor
file descriptor .,_
pointer to close
user-process memory networking
pointer to network
read and write.functions
select function pointer
ioctl function pointer
close f..un ction
kernel memory figure
table that holds
type of file
systems use object-oriented
request is converted
change the message
contents for output
written for input
buffer to receive
receive the data
data the message-passing
approach can add
comparison with procedural
shared data structures
simplifies the structure
structure and design
system and adds
kernel i subsystem
i subsystem summary
summary in summary
i subsystem coordinates
coordinates an extensive
collection of services
i subsystenc supervises
supervises these procedures
space for files
files and devices
devices access control
control to files
devices operation control
file-system space allocation
space allocation device
allocation device allocation
spooling i scheduling
i scheduling device-status
scheduling device-status monitoring
failure recovery device-driver
recovery device-driver configuration
configuration and initialization
initialization the upper
i subsystem access
subsystem access devices
uniform interface provided
described the handshaking
operating system connects
connects an application
set of network
specific disk sector
reading a file
file from disk
disk the application
file system maps
directories to obtain
obtain the space
file for instance
table entry tells
tells which disk
file in unix
hardware port address
memory-mapped controller registers
simple operating system
preceding the colon
string that identifies
specific hardware device
primary hard disk
disk the fact
represents the primary
disk is built
specific port address
device name space
space is separate
file-system name space
space this separation
makes it easy
system to associate
associate extra functionality
easy to invoke
space is incorporated
file-system name services
services are provided
system provides ownership
ownership and access
devices have owners
owners and access
control since files
files are stored
stored on devices
access the devices
access the files
unix represents device
represents device names
unlike an ms-dos
portion in fact
prefixes of path
names with specific
specific device names
names to resolve
resolve a path
table to find
find the longest
longest ncatchilcg prefix
space when unix
file-system directory structures
minor device number
number the m.ajor
m.ajor device number
device number identifies
identifies a device
device the minor
number is passed
driver to index
operating systems obtain
systems obtain significant
obtain significant flexibility
stages of lookup
physical device controller
controller the mechanisms
mechanisms that pass
requests between applications
applications and drivers
drivers are general
introduce new devices
devices and drivers
computer without recompiling
recompiling the kernel
kernel in fact
ability to load
load device drivers
drivers on demand
demand at boot
system first probes
describe the typical
typical life cycle
blocking read request
i operation requires
requires a great
great many steps
consume a tremendous
number of cpu
checks the parameters
parameters for correctness
case of input
irl the buffer
data are returned
request is completed
performed the process
process is removed
request is scheduled
i subsystem sends
sends the request
device driver depending
device driver allocates
driver allocates kernel
allocates kernel buffer
kernel buffer space
space to receive
data and schedules
driver sends commands
controller by writing
device controller operates
operates the device
hardware to perform
perform the data
driver may poll
poll for status
status and data
transfer into kernel
memory we assume
transfer is managed
generates an interrupt
correct interrupt handler
interrupt handler receives
receives the interrupt
signals the device
device driver receives
receives the signal
request has completed
determines the request
request s status
signals the kernel
kernel transfers data
data or return
process and moves
system call device-controller
call device-controller commands
device-controller commands user
commands user process
user process kernel
subsystem device driver
device driver interrupt
driver interrupt handler
interrupt handler device
handler device controller
device controller return
return from system
system call interrupt
interrupt ~ -------tim_e
moving the process
ready queue unblocks
unblocks the process
assigns the process
process resumes execution
dynamically a stream
process it consists
controls the device
stream user process
modules _j figure
pair of queues
queues -a read
write queue message
queue message passing
data between queues
queues the streams
structure is shown
provide the functionality
functionality of streams
call for examplef
examplef a process
process can open
open a serial-port
module to handle
handle input editing
editing because messages
messages are exchanged
exchanged between queues
queues in adjacent
module may overflow
overflow an adjacent
queue to prevent
queue may support
support without flow
accepts all messages
module without buffering
queue supporting flow
supporting flow control
flow control buffers
control buffers messages
messages without sufficient
sufficient buffer space
process involves exchanges
exchanges of control
messages between queues
user process writes
process writes data
call the write
system call writes
call writes raw
writes raw data
stream head copies
message and delivers
module in line
line this copying
copying of messages
message is copied
user process reads
process reads data
call if read
queue and returns
returns ordinary data
unstructured byte stream
process if getmsg
message is returned
i is asynchronous
user process communicates
stream ~ head
head when writing
process will block
queue uses flow
room to copy
copy the message
block when reading
end-like the stream
head and modules-has
modules-has a read
end must respond
respond to interrupts
frame is ready
unlike the stream
unable to copy
copy a message
queue in line
end must handle
handle all incoming
incoming data drivers
drivers must support
support flow control
device s buffer
buffer is fult
fult the device
device typically resorts
resorts to dropping
dropping incoming messages
card whose input
buffer is full
full the network
drop further messages
ample buffer space
store incoming messages
modular and incremental
approach to writing
writing device drivers
drivers and network
network protocols modules
ethernet network card
wireless network card
streams allows support
support for message
boundaries and control
information when communicating
communicating between modules
modules most unix
unix variants support
variants support streams
method for writing
protocols and device
system v unix
unix and solaris
implement the socket
mechanism using streams
factor in system
performance it places
places heavy demands
execute device-driver code
block and unblock
unblock the resulting
resulting context switches
context switches stress
stress the cpu
i also exposes
exposes any inefficiencies
kernel in addition
bus during data
copies between controllers
controllers and physical
copies between kernel
data space coping
computers can handle
handle many thousands
thousands of interrupts
task each interrupt
system to perform
perform a state
execute the interrupt
restore state programmed
efficient than internjpt-driven
number of cycles
spent in busy
completion typically unblocks
unblocks a process
high context-switch rate
character is typed
interrupt is generated
character is passed
process the user
user process issues
issues a network
network i system
call to send
send the character
machine the character
layers that construct
construct a network
network device driver
driver the network
device driver transfers
transfers the packet
sends the character
character and generates
interrupt is passed
network l system
call to complete
system s network
network hardware receives
receives the packet
generated the character
character is unpacked
daemon the network
network daemon identifies
identifies which remote
remote login session
session is involved
involved and passes
passes the packet
switches and state
echoes the character
doubles the work
eliminate the context
context switches involved
involved in moving
moving each character
character between daemons
solaris developers reimplemented
reimplemented the daemon
daemon using in-kernel
in-kernel threads sun
threads sun estimates
improvement sending system
sending system receiving
system receiving system
receiving system figure
increased the maximum
number of network
systems use separate
separate for terminal
i to reduce
reduce the interrupt
cpu for instance
multiplex the traffic
traffic from hundreds
hundreds of remote
special-purpose cpu found
found in mainframes
systems the job
offload i work
cpu the idea
main cpu remains
cpu remains free
free to process
process the data
controllers and dma
dma controllers found
found in smaller
channel can process
process more general
general and sophisticated
employ several principles
principles to improve
improve the efficiency
number of context
number of times
times that data
copied in memory
memory while passing
passing between device
device and application
reduce the frequency
frequency of interrupts
controllers or channels
channels to offload
offload simple data
simple data copying
move processing primitives
primitives into hardware
operation in device
concurrent with cpu
cpu and bus
greatly in complexity
complexity for instance
mouse is simple
simple the mouse
movements and button
clicks are converted
converted into numeric
passed from hardware
mouse device driver
application by contrast
windows nt disk
disk device driver
driver is complex
manages individual disks
implements raid arrays
converts an application
application s read
set of disk
disk i operations
implements sophisticated error-handling
error-handling and data-recovery
algorithms and takes
takes many steps
steps to optimize
optimize disk performance
functionality be implemented
-in the device
observe the progression
experimental i algorithms
code is f1exible
f1exible and application
reboot or reload
reload device drivers
code an application-level
overhead o context
advantage of internal
internal kernel data
device functionality progression
efficient in-kernel messaging
algorithm has demonstrated
demonstrated its worth
complex software system
debugged to avoid
avoid data corruption
corruption and system
implementation in hardware
controller the disadvantages
hardware implementation include
include the difficulty
difficulty and expense
expense of making
making further improvements
hardware raid controller
provide any means
kernel to influence
influence the order
order or location
location of individual
individual block reads
kernel has special
basic hardware elements
hardware elements involved
i are buses
work of moving
data between devices
devices and main
memory is perform.ed
cpu as programmed
controller the kernel
module that controls
controls a device
driver the system-call
system-call interface provided
provided to applications
applications is designed
designed to handle
handle several basic
categories of hardware
including block devices
programmed interval timers
timers the system
calls usually block
block the processes
processes that issue
sleep while waiting
operation to complete
subsystem provides num.erous
handling another service
makes the connections
connections between hardware
symbolic file names
applications it involves
involves several levels
levels of mapping
mapping that translate
translate from character-string
specific device drivers
drivers and device
ports or bus
controllers this mapping
mapping may occur
implementation and methodology
protocols through streams
bidirectionally for processing
costly in terms
terms of cpu
layers of software
application these layers
layers imply overhead
switching to cross
cross the kernel
kernel s protection
signal and interrupt
handling to service
cpu and memory
system to copy
implementation of virtual
including the queueing
queueing and management
management of timer
kernel and applications
disadvantages of supporting
i to device
device control registers
interrupt is raised
two separate pieces
pieces the first
first piece executes
completes and schedules
piece of code
design of interrupt
system use interrupt-driven
manage a single
single serial port
port and polling
i to manage
manage a front-end
kinds of performance
servicing an interrupt
coordinates the activities
kernel i components
components by manipulating
manipulating shared in-kernel
shared in-kernel data
object-oriented message passing
passing between kernel
discuss three pros
user programs access
programs access memory
memory through virtual
system uses raw
raw physical addresses
addresses to access
completion can waste
waste a large
iterates a busy-waiting
loop many times
device is ready
catching and dispatching
dispatching an interrupt
describe a hybrid
strategy that combines
i device service
describe a computing
graphical user interface
multitasking operating system
drive containing user
card with direct
direct bus connection
accessible through memory-mapped
design the operating
i or interrupt-driven
interrupt-driven i give
i give reasons
handshaking in section
implement this handshaking
describe the protocol
bit is insufficient
discuss the advantages
disadvantages of guaranteeing
guaranteeing reliable transfer
transfer of data
data between modules
dma controllers support
controllers support direct
support direct virtual
direct virtual memory
translation from virtual
virtual to physical
address is performed
complicate the design
advantages of providing
providing such functionality
important to scale
scale up system-bus
system-bus and device
speeds as cpu
cpu speed increases
determine the order
discuss what issues
considered in assigning
describe three circumstances
i and networking
networking in unix
structures and methods
employed in bsd
bsd unix milenkovic
discusses the complexity
methods and implementation
interprocesscommunication and network
protocols in unix
unix are explored
explored in stevens
documents the windows
windows nt application
sample minix operating
minix operating system
system is described
described in tanenbaum
tanenbaum and woodhull
includes detailed information
details of hardware-level
handling and memory-mapping
processor reference manuals
hennessy and patterson
describe multiprocessor systems
systems and cache-consistency
cache-consistency issues tanenbaum
hardware i design
sargent and shoemaker
provide a programmer
programmer s guide
guide to low-level
low-level pc hardware
software the ibm
ibm pc device
device i address
i address map
issue of ieee
computer is devoted
discussion of streams
part six protection
protection mechanisms control
mechanisms control access
system by limiting
limiting the types
types of file
file access permitted
permitted to users
users in addition
protection must ensure
gained proper authorization
system can operate
operate on memory
protection is provided
mechanism that controls
controls the access
access of programs
system this mechanism
mechanism must provide
provide a means
means of enforcing
ensures the authentication
authentication of system
users to protect
protect the integrity
data and code
system the security
security system prevents
system prevents unauthorized
prevents unauthorized access
alteration of data
introduction of inconsistency
chapter the processes
activities to provide
provide such protection
mechanism for controlling
controlling the access
means of enforcement
enforcement we distinguish
distinguish between protection
protection and security
measure of confidence
focus on protection
protection security assurance
discuss the goals
goals and principles
principles of protection
modern computer system
explain how protection
resources a process
process may access
capability and language-based
language-based protection systems
sophisticated and pervasive
protect their integrity
adjunct to multiprogramming
multiprogramming operating systems
share a common
logical name space
directory of files
physical name space
memory modern protection
modern protection concepts
concepts have evolved
evolved to increase
increase the reliability
system that makes
prevent the mischievous
program component active
system uses system
consistent with stated
policies this requirement
protection can improve
reliability by detecting
detecting latent errors
interfaces between component
subsystems early detection
detection of interface
unauthorized or incompetent
user a protection-oriented
system provides means
means to distinguish
distinguish between authorized
authorized and unauthorized
role of protection
provide a mechanism
policies governing resource
files and programs
programs a protection
flexibility to enforce
enforce a variety
variety of policies
policies for resource
vary by application
longer the concern
system the application
guard resources created
created and supported
subsystem against misuse
describe the protection
mechanisms the operating
system should provide
note that mechanisms
mechanisms are distinct
distinct from policies
policies mechanisms determine
done ; policies
done the separation
separation of policy
policy and mechanism
mechanism is important
important for flexibility
change from place
place to place
change in policy
policy would require
require a change
mechanism using general
general mechanisms enables
principle simplifies design
simplifies design decisions
consistent and easy
easy to understand
understand a key
time-tested guiding principle
principle for protection
dictates that programs
privileges to perform
perform their tasks
key will result
result in minimal
passkey allows access
implements its features
failure or compromise
done the overflow
process to fail
execution of code
process s stack
enable a remote
user to gain
gain maximum privileges
privileges and access
calls and services
written with fine-grained
fine-grained access controls
mechanisms to enable
needed also beneficial
creation of audit
privileged function access
access the audit
officer to trace
trace all protection
privilege entails creating
creating a separate
back up files
system has access
commands and files
needed to accomplish
accomplish the job
job some systems
systems implement role-based
implement role-based access
role-based access control
provide this functionality
limited to running
running specific services
accessing specific remote
specific remote hosts
hosts via specific
restrictions are implemented
implemented through enabling
enabling or disabling
disabling each service
access control lists
described in sections
secure computing environment
complex protection scheme
holes by comparison
solaris is considered
considered relatively secure
variant of unix
historically was designed
protection in mind
mind one reason
lines of code
services than solaris
secure and protect
protect another reason
scheme in windows
irtcomplete or protects
protects the wrong
leaving other areas
collection of processes
processes and objects
objects by objects
well-defined and meaningful
meaningful operations objects
essentially abstract data
abstract data types
execute memory segments
read and written
cd-rom or dvd-rom
read tape drives
rewound data files
deleted ; program
allowed to access
reqllires to complete
complete its task
limiting the amount
amount of damage
damage a faulty
process p invokes
formal parameters passed
variables of process
invokes a compiler
compiler to compile
file the compiler
subset of files
accounting or optimization
purposes that process
access the need-to-know
principle is similar
goals of protection
minimize the risks
14.3.1 domain structure
structure to facilitate
facilitate the scheme
scheme just described
specifies the resources
access each domain
defines a set
set of objects
types of operations
object the ability
ability to execute
execute an operation
collection of access
access right file
executing in domain
share access rights
domains can print
processes in domain
set of resources
process is fixed
process s lifetime
establishing dynamic protection
dynamic protection domains
complicated than establishing
establishing static protection
static protection domains
association between processes
processes and domains
domains is fixed
change the content
domain the reason
process may execute
two different phases
phase and write
domain is static
define the domain
domain to include
include both read
principle is violated
domain always reflects
reflects the n1inimum
n1inimum necessary access
association is dynamic
enabling the process
process to switch
effect by creating
content and switching
change the domain
user domain switching
domain switching occurs
user is changed
process domain switching
sends a message
local variables defined
call is made
discuss domain switching
switching in greater
detail in section
model of operating-system
executes in monitor
execute privileged instructions
gain complete control
system in contrast
executes in user
invoke only nonprivileged
predefined memory space
two modes protect
protect the operating
executing in user
multiprogrammed operating system
two protection domains
domains are insufficient
scheme is needed
needed we illustrate
scheme by examining
examining two influential
two influential operating
influential operating systems-unix
systems-unix and multics
implement these concepts
switching the domain
corresponds to changing
changing the user
change is accomplished
tbough the file
executes that file
user with userid
executing a file
process is set
userid is set
temporary userid change
userid change ends
domains in operating
mechanism this mechanism
general user population
users to access
access a network
network without letting
letting them write
causing the user
program was run
run the user
user with network
network access privilege
manages to create
create a file
file with user
user id root
system the setuid
mechanism is discussed
place privileged programs
directory the operating
designed to change
change the user
equivalent of root
directory this eliminates
eliminates one security
problem with setuid
create and hide
hide such programs
file or directory
change of user
access to privileged
facilities for instance
started at boot
user id users
users then run
run a separate
facility this method
tops-20 operating system
writing privileged programs
programs any oversight
oversight can result
lack of protection
attacked by people
feature we discuss
security in chapter
domains are organized
structure each ring
rings are numbered
two domain rings
subset of dj
two rings exist
scheme is equivalent
n1ode of execution
monitor mode corresponds
user mode corresponds
segmented address space
rings a segm.ent
segm.ent description includes
includes an entry
entry that identifies
identifies the ring
number in addition
includes three access
bits to control
execution the association
association between segments
segments and rings
identifying the ring
process is executing
multics ring structure
access a segment
type of access
switching in multics
calling a procedure
process could start
executing in ring
controlled domain switching
modify the ring
descriptor to include
bracket a pair
pair of integers
limit an integer
list of gates
identifies the entry
ring i calls
calls a procedure
call is allowed
current ring number
operating system occurs
situation is handled
allowed to occur
parameters are passed
segments not accessible
designated entry points
gates this scheme
scheme allows processes
processes with limited
limited access rights
rights to call
procedures in lower
carefully controlled mmmer
enforce the need-to-know
accessible in domain
multics protection system
generally more complex
systems if protection
significantly decreases system
decreases system performance
system for instance
complex protection system
university to process
students  grades
students for classwork
classwork a similar
similar protection system
prefer to separate
separate the mechanism
complex or simple
simple protection depending
users to separate
mechanism from policy
model of protection
access matrix represent
matrix represent domains
columns represent objects
objects each entry
set of access
column defines objects
omit the object
right the entry
defines the set
set of operations
invoke on object
illustrate these concepts
access matrix shown
four objects-three files
printer a process
write onto files
policies the mechanism
consists of implementing
implementing the access
read read write
read write write
write write figure
matrix and ensuring
matrix can implement
implement policy decisions
decisions concerning protection
policy decisions involve
involve which rights
decide the domain
executes this last
users normally decide
decide the contents
creator the user
user may decide
decide to enter
enter some rights
entries in cohum1
mechanism for defining
defining and implementing
implementing strict control
static and dynamic
switch a process
executing an operation
control domain switching
switching by including
performing an operation
including the access
execute these operations
switching from domain
access right switch
switch e access
switch to domain
process in domain
switch to d2
d2 allowing controlled
allowing controlled change
access-matrix entries requires
requires three additional
control we examine
examine these operations
read read switch
print switch switch
read switch write
switch write write
matrix of figure
domains as objects
execute read execute
read execute execute
execute execute read
matrix with copy
ability to copy
copy an access
right is defined
copy the read
right is copied
copied from access
removed from access
created a process
copy the right
system may select
rights and removal
rights the owner
owner right controls
controls these operations
operations if access
includes the owner
add and remove
remove any right
entry in column
add and delete
delete any valid
right in column
remove any valid
owner write execute
write execute read
execute read read
owner owner write
write execute owner
execute owner read
read owner write
owner write write
matrix with owner
copy and owner
process to change
change the entries
needed to change
row the control
right is applicable
objects if access
includes the control
remove any access
right from row
include the control
right in access
executil1.g in domain
read switch print
switch print switch
switch switch control
switch control read
control read execute
read execute write
execute write write
write write switch
write switch figure
modified access matrix
owner rights provide
mechanism to limit
limit the propagation
propagation of access
tools for preventing
preventing the propagation
information the problem
problem of guaranteeing
information initially held
object can migrate
illustrate the ability
implementation and control
control of dynamic
dynamic protection requirements
dynamically and included
basic mechanism exists
exists ; system
designers and users
users must make
make the policy
matrix be implemented
effectively in general
empty although datastructure
representing sparse matrices
describe several methods
methods of implementing
compare the methods
14.5.1 global table
table the simplest
global table consisting
set of ordered
ordered triples domain
table is searched
triple is found
operation is allowed
allowed to continue
condition is raised
drawbacks the table
i is needed
virtual memory techniques
managing this table
table in addition
advantage of special
groupings of objects
objects or domains
14.5.2 access lists
lists for objects
objects each column
discarded the resulting
consists of ordered
ordered pairs domain
define all domains
easily to define
define a list
attempted in domain
search the access
list for object
entry is found
check the default
exception condition occurs
occurs for efficiency
default set first
14.5.3 capability lists
lists for domains
associating the columns
objects as access
associate each row
domain a ltst
list of objects
allowed on tbose
objects an object
executes the operation
means that access
access is allowed
system and accessed
user only indirectly
indirectly capability-based protection
capability-based protection relies
allowed to migrate
space directly accessible
capabilities are secure
object they protect
secure against unauthorized
kind of secure
foreseen as multiprogrammed
multiprogrammed computer systems
age the idea
inherently protected pointer
fom1dation for protection
provide inherent protection
kinds of objects
higher-level programs run
programs run capabilities
capability or accessible
data the tags
application program hardware
hardware or firmware
enforce this restriction
distinguish between capabilities
hardware can distinguish
parts one part
part is accessible
program s normal
data and instructions
system a segmented
segmented memory space
support this approach
capability-based protection systems
briefly in section
mach operating system
version of capability-based
described in appendix
14.5.4 a lock-key
compromise between access
lists and capability
lists each object
list of unique
unique bit patterns
domain can access
access an object
key that matches
list of keys
system on behalf
allowed to examine
examine or modify
modify the list
choosing a technique
technique for implementing
implementing an access
access matrix involves
involves various trade-offs
table is simple
domains access lists
access lists correspond
creates an object
domains can access
access the object
operations are allowed
determining the set
domain is difficult
difficult in addition
requiring a search
system with long
long access lists
process the process
process attempting access
access must present
present a capability
capability is valid
revocation of capabilities
lists the mechanism
effective and flexible
keys the keys
freely from domain
domain to domain
domain in addition
technique of changing
combination of access
lists and capabilities
list is searched
searched if access
access is denied
capability is created
created and attached
process additional references
capability to demonstrate
swiftly that access
capability is destroyed
opens a file
structure is searched
searched to find
permission is checked
buffers are allocated
information is recorded
process the operation
returns an index
newly opened file
file all operations
file are made
made by specification
table the entry
table then points
file is closed
entry is deleted
table is maintained
carmot accidentally corrupt
user can access
access is checked
file is opened
protection is ensured
ensured this strategy
right to access
or1 each access
capability for read
attempt is made
made to write
identifies this protection
violation by com.paring
com.paring the requested
described how access
system each file
file and directory
directory are assigned
assigned an owner
possibly a list
list of users
information is assigned
assigned a similar
system a good
found in solaris
advances the protection
sun microsystems operating
microsystems operating system
adding the principle
revolves around privileges
right to execute
execute a system
opening a file
file with write
assigned to processes,limiting
perform their work
privileges and programs
assigned to users
users are assigned
based on passwords
role that enables
enables a privilege
allowing the user
user to run
run a program
program to accomplish
accomplish a specific
implementation of privileges
decreases the security
superusers and setuid
executes with role
privileges ~ figure
control in solaris
facility is similar
access matrix described
dynamic protection system
revoke access rights
rights to objects
users various questions
questions about revocation
revocation may arise
delayed does revocation
delayed if revocation
revocation is delayed
place selective versus
selective versus general
object is revoked
group of users
users whose access
revoked partial versus
partial versus total
object be revoked
revoke all access
object temporary versus
temporary versus permanent
permanent can access
access be revoked
revocation is easy
easy the access
general or selective
total or partial
permanent or temporary
howeve1 ~ present
difficult revocation problem
capabilities are distributed
revoke them schemes
schemes that implement
revocation for capabilities
capabilities are deleted
deleted the process
reacquire the capability
capability if access
back-pointers a list
list of pointers
pointers is maintained
object when revocation
revocation is required
follow these pointers
changing the capabilities
scheme was adopted
indirection the capabilities
object we implement
revocation by searching
searching the global
entry and deleting
access is attempted
capability is found
found to point
illegal table entry
table entry table
entry table entries
capabilities without difficulty
object the object
entry must match
match this scheme
keys a key
unique bit pattern
key is defined
modified nor inspected
process that owns
owns the capability
defined or replaced
capability is exercised
key is compared
raised revocation replaces
replaces the master
invalidating all previous
associate a list
group all keys
table of keys
keys a capability
matches some key
table we implement
revocation by removing
removing the matching
providing maximum flexibility
operations of defining
object to set
set the keys
object this choice
system can implement
survey two capability-based
two capability-based protection
systems these systems
types of policies
provide interesting proving
interesting proving grounds
grounds for protection
capability-based protection system
flexibility the system
implements a fixed
including such basic
forms of access
right to read
execute a memory
segment in addition
declare other rights
interpretation of user-defined
rights is performed
user s program
system provides access
rights these facilities
constitute a significant
development in protection
operations on objects
objects are defined
procedurally the procedures
procedures that implement
implement such operations
form of object
indirectly by capabilities
capabilities the names
names of user-defined
deal with objects
object is made
krtown to hydra
names of operations
type become auxiliary
process to perform
perform an operation
capability it holds
operation being invoked
rights this restriction
restriction enables discrin
enables discrin lination
lination of access
instance-by-instance and process-by-process
type on behalf
process that holds
holds a right
execute the procedure
procedure the rights
procedure are independent
allowed to act
procedures or program
amplification allows implementation
implementation procedures access
abstract data type
holds a capability
capability may include
include an auxiliary
right to invoke
invoke some operation
so-called kernel rights
segment that represents
process a means
means of indirect
invokes the operation
capability for access
amplified as control
access the storage
storage segment representing
implement the operation
type the code
allowed to read
calling process cmmot
originat unamplified state
state this case
process for access
segment must change
performed the dynamic
adjustment of rights
performed to guarantee
programmer-defined abstraction amplification
amplification of rights
hydra operating system
passes an object
modify the object
implement this restriction
readily by passing
passing an access
amplification may occur
right to modify
user may trust
performs its task
correctly this assumption
hardware or software
software errors hydra
errors hydra solves
problem by restricting
mechanism of hydra
hydra was designed
mutually suspicious subsystems
subsystems this problem
problem is defined
program is provided
invoke this service
program will malfunction
data or retain
retain some access
som.e private files
calling user program
hydra provides mechanisms
subsystem is built
built on top
components a subsystem
kernel through calls
set of kernel-defined
primitives that define
define access rights
rights to resources
subsystenl the subsystem
designer can define
resources by user
policies are enforceable
standard access protection
access protection afforded
programmers can make
system after acquainting
reference rnanual hydra
library of system-defined
user programs programmers
explicitly incorporate calls
interfaced to hydra
cambridge cap system
approach to capability-based
cap system cap
cap s capability
system is simpler
superficially less powerful
closer examination shows
provide secure protection
protection of user-defined
user-defined objects cap
kinds of capabilities
capabilities the ordinary
access to objects
individual storage segments
object data capabilities
capabilities are interpreted
interpreted by microcode
kind of capability
programmer as part
kind of rights
procedure when executing
executing the code
process temporarily acquires
acquires the right
write the contents
rights amplification corresponds
seal and unseal
primitives on capabilities
subject to type
verification to ensure
type are passed
procedure universal trust
machine s microcode
notes for references
capability is left
variety of protection
implemented although programmers
programmers can define
compromised the basic
basic protection system
protected procedure access
insecure protected procedure
procedure has responsibility
system have noted
software capabilities allowed
realize considerable economies
economies in formulating
formulating and implementing
implementing protection policies
protection policies commensurate
requirements of abstract
study a reference
case with hydra
learn the principles
principles and techniques
techniques of protection
library of procedures
degree that protection
provided in existing
existing computer systems
agent to inspect
inspect and validate
validate each attempt
attempt to access
access a protected
resource since comprehensive
comprehensive access validation
source of considerable
give it hardware
support to reduce
reduce the cost
designer to compromise
compromise the goals
goals is difficult
flexibility to implement
implement protection policies
policies is restricted
support mechanisms provided
environments are made
secure greater operational
greater operational efficiency
attempted to provide
provide higher-level user
higher-level user interfaces
refined the designers
designers of protection
systems have drawn
heavily on ideas
ideas that originated
originated in programming
concepts of abstract
types and objects
objects protection systems
newest protection systems
set of system-defined
standard file-access methods
subject to change
longer be considered
considered a matter
matter of concern
guarded against tampering
14.9.1 compiler-based enforcement
programming languages enter
enter the picture
control of access
system is making
making a declarative
resource this kind
kind of statement
facility when protection
protection is declared
requirements for protection
program is composed
stated this approach
sequence of calls
calls on procedures
means for enforcement
notation is natural
natural because access
concept of data
variety of techniques
implementation to enforce
degree of support
suppose a language
code to run
storage reference made
underlying hardware occurs
capability this restriction
prevents any process
process from accessing
accessing a resource
program may impose
impose arbitrary restrictions
implement such restrictions
readily by usin.g
usin.g the software
software capabilities provided
provided by cap
cap a language
implementation might provide
provide standard protected
standard protected procedures
procedures to interpret
interpret software capabilities
realize the protection
language this scheme
scheme puts policy
puts policy specification
implementing its enforcement
provide a protection
kernel as powerful
hydra or cap
implementing protection specifications
language the principal
system a compiler
compiler can separate
violation could occur
treat them differently
differently the security
form of protection
merits of enforcement
opposed to enforcement
compiler security enforcement
degree of security
generation of protectionchecking
rests on correctness
mechanism of storage
management that protects
protects the segments
code is executed
security of files
program is loaded
softwaresupported protection kernel
kernel may reside
reside in fixed
fixed physical storage
physical storage segments
computation is performed
immune to protection
hardware or system
system software malfunction
kernel in implementing
implementing a user-defined
supply adequate facilities
system to provide
declared and enforcem.ent
provided as needed
provide sufficient flexibility
extended or replaced
system in service
operating-system kernel efficiency
efficiency the greatest
efficiency is obtained
obtained when enforcement
enforcement of protection
protection is supported
directly by hardware
support is required
advantage that static
static access enforcement
off-line at compile
compiler can tailor
tailor the enforcement
mechanism to meet
overhead of kernel
specification of protection
description of policies
resources a language
implementation can provide
software for protection
enforcement when automatic
automatic hardware-supported checking
checking is unavailable
unavailable in addition
interpret protection specifications
specifications to generate
system is provided
object of computation
privilege of creating
creating or examining
examining these software
capabilities a capability-creating
execute a primitive
seal a data
privilege such components
components might copy
structure or pass
pass its address
contents the reason
reason for introducing
introducing such software
bring a protection
concept as proposed
unseal operations takes
takes a procedural
protection a nonprocedural
nonprocedural or declarative
dynamic access-control mechanism
mechanism for distributing
capabilities to system
resources among user
processes to contribute
efficient this requirement
requirement has led
number of language
programmer to declare
declare various restrictions
specific managed resource
constructs provide mechanisms
efficiently among customer
granted a capability
type of operations
process may invoke
read the file
set of rights
process to enlarge
enlarge its set
give two processes
processes different restrictions
invoke the operations
incorporation of protection
concepts into programming
tool for system
matter of greater
systems with distributed
increasingly stringent requirements
requirements on data
importance of suitable
suitable language notations
express protection requirements
protection in java
java because java
java was designed
designed to run
java virtual machine-or
virtual machine-or jvm-has
jvm-has many built-in
built-in protection mechanisms
protection mechanisms java
mechanisms java programs
programs are composed
collection of data
fields and functions
fields the jvm
loads a class
class in response
request to create
features ofj ava
dynamically loading untrusted
loading untrusted classes
executing mutually distrusting
mutually distrusting classes
capabilities of java
process is insufficient
request to open
class has requested
requested the open
open the operating
operating system lacks
lacks this knowledge
decisions are handled
assigns the class
class the protection
class is assigned
class was loaded
signatures are covered
covered in section
configurable policy file
policy file determines
determines the permissions
user s home
file access permissions
jvm to determine
determine what class
class is responsible
request to access
protected resource accesses
allowed to open
open network connections
call a system
library to request
request the load
url the jvm
jvm must decide
open a network
library the philosophy
adopted in java
require the library
permit a network
order to access
sequence that resulted
assert the privilege
privilege to access
access the resource
resource by doing
method takes responsibility
perform whatever checks
ensure the safety
method is allowed
allowed to assert
assert a privilege
method can assert
allowed to exercise
exercise the privilege
executes an access
dopri vileged block
block to perform
perform the access
directly or indirectly
indirectly dopri vileged
passed a class
method to invoke
block is entered
method is annotated
block are executed
method it calls
call to checkpermissions
invoke stack inspection
inspection to determine
allowed the inspection
inspection examines stack
examines stack frames
thread s stack
recently added frame
frame and working
frame is first
allowing the access
access is disallowed
method s class
throws an accesscontrolexception
stack inspection exhausts
exhausts the stack
stack without finding
finding either type
type of frame
implementations may disallow
inspection is illustrated
untrusted applet protection
applet protection domain
protection domain performs
performs two operations
url loader protection
loader protection domain
permitted to open
sessions to sites
lucent com domain
proxy server proxy
server proxy .lucent
invocation will succeed
networking library encounters
encounters the stack
performed its open
applet s open
invocation will result
finds no dopri
dopri vileged annotation
annotation before encountering
encountering the stack
inspection to work
unable to modify
modify the annotations
manipulations of stack
differences between java
directly access memory
manipulations are made
well-defined interfaces compliance
compliance is enforced
collection of load-time
load-time and run-time
manipulate its run-time
java s load-time
run-time checks enforce
enforce of java
java classes type
classes type safety
type safety ensures
ensures that classes
integers as pointers
past the end
memory in arbitrary
program can access
f01mdation of java
enables a class
protect its data
data and methods
defined as private
package type safety
protected from misuse
right is permission
permission to perform
object a domain
access rights processes
rights processes execute
execute in domains
domain to access
access and manipulate
domain or allowed
allowed to switch
mechanisnc for protection
protection without imposing
users the separation
important design property
matrix is sparse
include dynamic protection
revocation of access
dynamic protection model
easier to implement
model and tend
tend to provide
unix is representative
structure in addition
addition to file
file access hydra
mach are capability
systems that extend
protection to user-defined
user-defined software objects
software objects solaris
implements the principle
privilege via role-based
role-based access controt
controt a form
protection provides finer-grained
arbitration of requests
requests and privileges
single java jvm
jvm can run
run several threads
class it enforces
enforces the resource
requests through sophisticated
sophisticated stack inspection
played by students
computer center staff
suggest a scheme
scheme for implementing
implementing this policy
defined a tree
tree of processes
assume the set
rights is represented
defines the access
rights of process
xis a descendant
role-based access-control facility
access-control facility similar
amplification in hydra
hydra provides greater
scheme in enforcing
enforcing protection policies
scheme in multics
implement the system
typical operating system
system and store
higher-numbered ring invokes
invokes a procedure
procedure in ring
discuss the strengths
strengths and weaknesses
weaknesses of implementing
matrix using capabilities
matrix using access
process can switch
enjoy the access
privileges of domain
equivalent to including
systems that implement
implement the principle
failures that lead
lead to security
creation of protection
problems may arise
object are deleted
longer be accessed
point the object
space it occupies
suggest an efficient
systems allow module
designers to enforce
multics ring-protection scheme
scheme b hydra
hydra s capabilities
capabilities c jvm
jvm s stack-inspection
process with number
object with number
type of protection
system to adhere
efficient capability manipulation
java protection model
program were allowed
alter the annotations
burroughs b7000 mcp
b7000 mcp file
tagged as sensitive
file is deleted
area is overwritten
protection between domains
domains and objects
objects was developed
developed by lampson
saltzer and schroeder
provided excellent surveys
subject of protection
model to enable
evolved from iliffe
jodeit s codewords
rice university computer
iliffe and jodeit
capability was introduced
introduced by dennis
dennis and horn
system was described
described by wulf
described by needham
needham and walker
discussed the multics
multics ring-protection system
revocation was discussed
discussed by redell
redell and fabry
cohen and jefferson
ekanadham and bernstein
principle of separation
mechanism was advocated
designer of hydra
problem was first
discussed by lampson
examined by lipner
control was suggested
first by morris
unseal operations discussed
kieburtz and silberschatz
mcgraw and andrews
proposed various language
constructs for dealing
dealing with general
general dynamic-resource-management schemes
dynamic-resource-management schemes jones
jones and liskov
static access-control scheme
language that supports
supports abstract data
minimal operating-system support
support to enforce
protection was advocated
discussed in chapter
strictly an internal
provide controlled access
access to programs
programs and data
adequate protection system
operates a protection
system is ineffective
ineffective if user
authentication is compromised
program is run
guarded against unauthorized
destruction or alteration
resources include information
include information stored
start by examining
explore a key
key security enabler
security enabler -cryptography
mechanisms to guard
discuss security threats
threats and attacks
explain the fundamentals
fundamentals of encryption
cryptography in computing
describe various countermeasures
countermeasures to security
ensuring the security
system is worth
worth considerable effort
considerable effort large
effort large commercial
large commercial systems
systems containing payroll
data are inviting
targets to thieves
pertaining to corporate
interest to unscrupulous
accident or fraud
impair the ability
corporation to function
system can provide
data these mechanisms
accessed as intended
circumstances unfortunately total
mechanisms to make
make security breaches
breaches a rare
categorized as intentional
easier to protect
protect against accidental
part protection mechanisms
core of protection
protection from accidents
includes several forms
forms of accidental
accidental and malicious
malicious security violations
discussion of security
intruder and cracker
attempting to breach
security in addition
attempt to break
breach of confidentiality
confidentiality this type
type of violation
violation involves 1mauthorized
involves 1mauthorized reading
reading of data
theft of information
intruder capturing secret
capturing secret data
information or identity
information for identity
directly in money
breach of integrity
integrity this violation
violation involves unauthorized
involves unauthorized modification
modification of data
data such attacks
result in passing
passing of liability
party or modification
important commercial application
breach of availability
availability this violation
involves unauthorized destruction
destruction of data
data some crackers
havoc and gain
status or bragging
rights than gain
gain financially web-site
financially web-site defacement
type of security
theft of service
service this violation
install a daemon
system that acts
denial of service
violation involves preventing
involves preventing legitimate
system or attacks
accidental the original
original internet worm
internet worm turned
failed to delay
delay its rapid
spread we discuss
discuss dos attacks
attempts to breach
breach the correctness
correctness of identification
allowed or escalate
escalate their privileges-obtain
entitled another common
replay a captured
exchange of data
data a consists
malicious or fraudulent
valid data transmission
comprises the entire
normal attacker masquerading
attacker masquerading attacker
masquerading attacker man-in-the-middle
attacker man-in-the-middle attacker
man-in-the-middle attacker figure
standard security attacks
request for authentication
user s information
kind of attack
active communication session
session is intercepted
intercepted several attack
methods are depicted
system from malicious
made sufficiently high
high to deter
deter most intruders
preferable to prevent
prevent the attack
attack but sufficient
sufficient to detect
detect the attack
protect a system
physical the site
site or sites
secured against armed
armed or surreptitious
entry by intruders
terminals or workstations
carefully to assure
system even authorized
tricked into allowing
allowing one type
type of social-engineering
e-mail or web
web page misleads
misleads a user
user into entering
entering confidential information
information another teclucique
teclucique is human
authorization appropriate users
term for attempting
information in order
order to gain
gain unauthorized access
finding phone books
notes containing passwords
problems are management
management and personnel
pertaining to operating
system the system
system must protect
accidental or purposeful
purposeful security breaches
breaches a runaway
process could constitute
constitute an accidental
accidental denial-of-service attack
attack a query
service could reveal
unauthorized process list
network much computer
data in modern
modern systems travels
travels over private
private leased lines
dial-up lines intercepting
intercepting these data
harmful as breaking
communications could constitute
constitute a remote
remote denial-of-service attack
first two levels
inaintained if operating-system
ensured a weakness
circumvention of strict
link is true
true of system
countermeasures are created
created and deployed
attacks for incidents
section tools needed
needed to block
ranging from passwords
passwords for authentication
authentication through guarding
guarding against viruses
viruses to detecting
intrusions we start
exploration of security
means of accomplishing
writing a program
program that creates
creates a breach
breach of security
causing a normal
change its behavior
behavior and create
create a breach
goal of crackers
crackers in fact
nonprogram security events
causing a program
exploit is blocked
describe common methods
methods which programs
programs cause security
security breaches note
conventions of security
common or descriptive
15.2.1 horse systems
systems have mechanisms
mechanisms for allowing
allowing programs written
written by users
programs are executed
users may misuse
misuse these rights
rights a text-editor
code to search
search the file
edited for certairl
special area accessible
segment that misuses
misuses its environment
long search paths
common on unix
exacerbate the trojanhorse
trojanhorse the search
search path lists
lists the set
set of directories
directories to search
file is executed
include the current
search has set
set her current
friend s directory
normal system commanct
commanct be executed
program would run
user is allowed
user s instance
modern windows operating
windows operating systems
horse is spyware
spyware sometimes accompanies
accompanies a program
user has chosen
chosen to install
freeware or shareware
included with commercial
software the goal
goal of spyware
ads to display
user s system
sites are visited
system and return
category of attacks
surreptitious communication occurs
system could result
daemon the spyware
spyware could contact
contact a central
list of recipient
deliver the spam
machine this process
discovers the spyware
percent of spam
method this theft
considered a crime
countries ! spyware
install network daemons
daemons such daemons
daemons are installed
two mistakes first
user may run
case of human
human error-a common
error-a common security
common security weakness
default more privileges
case of poor
poor operating-system design
operating-system design decisions
decisions an operating
software in general
access and security
easy to manage
manage and understand
inconvenient or inadequate
inadequate security measures
measures are bound
designed to implement
15.2.2 trap door
door the designer
program or system
system might leave
leave a hole
movie war games
games for instance
code inight check
check a specific
circumvent normal security
normal security procedures
security procedures programmers
arrested for embezzling
embezzling from banks
banks by including
including rounding errors
occasional half-cent credited
credititrg can add
amount of money
number of transactions
large bank executes
clever trap door
compiler the compiler
compiler could generate
generate standard object
standard object code
code being compiled
compiled this activity
reveal any problems
trap doors pose
pose a difficult
systems may consist
consist of millions
millions of lines
15.2.3 logic bomb
program that initiates
initiates a security
hard to detect
set of parameters
parameters were met
created this scenario
code to detect
stack and buffer
overflow the stack
stack or buffer-overflow
network or dial-up
system an authorized
exploit for privilege
exploits a bug
program the bug
neglected to code
code bounds checking
sends more data
program was expecting
trial and error
examining the source
determines the vulnerability
vulnerability and writes
writes a program
overflow an input
daemon-wl.til it writes
overwrite the current
current return address
exploit code loaded
loaded in step
write a simple
set of code
stack that includes
includes the commands
wishes to execute-for
spawn a shell
program s execution
privileged command execution
web-page form expects
expects a user
attacker could send
send the user
characters to overflow
overflow the buffer
buffer and reach
reach the stack
address to load
code the attacker
buffer-reading subroutine returns
returns from execution
code is run
simple c program
program in fig1-1re
creates a character
character array size
array size buffer_size
buffer_size and copies
copies the contents
byte to store
store the null
program works properly
line is longer
longer than buffer_size
function will begin
copying from argv
encounters a null
copied data overflow
stdio.h # define
program with buffer-overflow
performed bounds checking
size of argv
replacing the line
good bounds checking
lack of bounds
program in figure
designed to compromise
compromise the integrity
function is invoked
typical computer architecture
exits are stored
frame the layout
typical stack frame
frame is shown
examining the stack
frame from top
top to bottom
automatic variables declared
bottom ~ frame
frame pointer grows
pointer grows top
grows top figure
exits the frame
pointer can vary
saved frame pointer
pointer allows relative
access to parameters
parameters and automatic
cracker could execute
execute a bufferoverflow
replace the return
programmer first writes
writes a short
short code segment
include stdio.h int
stdio.h int main
bin \ sh
code segment creates
creates a shell
program being attacked
runs with system-wide
newly created shell
shell will gain
gain complete access
assembly language instructions
modified the primary
remove unnecessary features
reducing the code
assembled code fragment
stack frame appears
appears as shown
programmer then finds
finds the copied
hypothetical stack frame
frame for figure
address of buffer
stack that address
attacker wants executed
executed the binary
sequence is appended
amount of no-op
fill the stack
location of buffer
added the attack
attack is complete
constructed binary sequence
sequence as input
process then copies
copies the binary
sequence from argv
returns from main
modified shell code
process ! figure
ways to exploit
exploit potential buffer-overflow
potential buffer-overflow problems
considered the possibility
attackedthe code shown
15.2-ran with system-wide
segment that runs
modified might perform
perform any type
type of malicious
opening network ports
buffer-overflow attack reveals
reveals that considerable
knowledge and programming
skill are needed
needed to recognize
recognize exploitable code
programmers to launch
launch security attacks
cracker can determine
determine the bug
write an exploit
rudimentary computer skills
skills and access
launch the attack
attack at target
run between systems
travel over allowed
allowed communication channels
channels such attacks
attacks can occur
occur within protocols
detect and prevent
bypass the security
added by firewalls
feature that disallows
section of memory
memory recent versions
versions of sun
sun s sparc
sparc chip include
include this setting
versions of solaris
code there attempts
attempts to execute
exception is generated
program is halted
versions of amd
amd and intel
intel x86 chips
x86 chips include
feature to prevent
prevent this type
type of attack
feature is supported
x86 operating systems
linux and windows
windows xp sp2
sp2 the hardware
hardware implementation involves
cpus this bit
page as nonexecutable
feature becomes prevalent
viruses another form
form of program
fragment of code
legitimate program viruses
viruses are self-replicating
designed to infect
infect other programs
system by modifying
modifying or destroying
files and causing
causing system crashes
crashes and program
specific to architectures
problem for users
multiuser operating systems
susceptible to viruses
programs are protected
protected from writing
virus does infect
system are protected
borne via e-mail
spread when users
users download viral
download viral programs
viral programs internet
programs internet file-sharing
internet file-sharing services
services or exchange
exchange infected disks
form of virus
transmission uses microsoft
microsoft office files
microsoft word documents
documents these documents
macros visual basic
visual basic programs
office suite powerpoint
macros can run
run largely unconstrained
deleting user files
user s contact
sample that shows
shows the simplicity
simplicity of writing
writing a visual
visual basic macro
format the hard
macro was opened
dim ofs set
ofs set ofs
ofs = createobject
reaches a target
inserts the virus
system the virus
reasons but installing
installing the virus
activity once installed
number of things
thousands of viruses
main categories note
file a standard
standard file virus
file virus infects
infects a system
system by appending
noticed file viruses
leave no full
leave the host
program still functional
boot a boot
boot virus infects
infects the boot
system is booted
system is loaded
loaded it watches
file system figure
boot virus works
macro most viruses
viruses are written
basic these viruses
viruses are triggered
capable of executing
executing the macro
macro is run
code a source
source code virus
code and modifies
include the virus
spread the virus
boot-sector computer virus
polymorphic a polymorphic
installed to avoid
detection by antivirus
affect the virus
virus s functionality
change the virus
virus s signature
identify a virus
typically a series
encrypted an encrypted
encrypted virus includes
virus includes decryption
includes decryption code
detection the virus
virus first decrypts
stealth this tricky
tricky virus attempts
attempts to avoid
detection by modifying
modify the read
read system call
modified is read
code is returned
tunneling this virus
attempts to bypass
anti virus scanner
scanner by installing
interrupt-handler chain similar
chain similar viruses
similar viruses install
multipartite a virus
infect nmltiple parts
including boot sectors
files this makes
makes it difficult
difficult to detect
armored an armored
virus is coded
coded to ncake
hard for antivirus
researchers to unravel
unravel and understand
compressed to avoid
detection and disinfection
disinfection in addition
hidden via file
attributes or unviewable
unviewable file names
variety of viruses
continue to grow
grow in fact
virus was detected
detected it exploited
exploited three separate
operation this virus
started by infecting
hundreds of windows
including many trusted
running microsoft internet
microsoft internet information
internet information server
vulnerable microsoft explorer
microsoft explorer web
explorer web browser
web browser visiting
visiting those sites
received a browser
download the browser
browser virus installed
installed several back-door
records all things
including and credit-card
installed a daemon
unlimited remote access
allowed an intruder
intruder to route
infected desktop computer
disruptive security attacks
spread the active
increasing the threat
caused by security
intrusions this monoculture
monoculture supposedly consists
consists of microsoft
monoculture even exists
system to attack
programs in contrast
system and network
network threats involve
involve the abuse
abuse of services
services and network
network comcections system
network threats create
create a situation
resources and user
files are inisused
launch a program
operating system is-the
is-the more services
functions it allows-the
operating systems strive
enabled by default
system was installed
services are disabled
disabled at installation
specifically be enabled
enabled system administrators
reduce the system
system s set
set of ways
discuss some examples
examples of system
important to note
note that masquerading
masquerading and replay
launched over netvvorks
netvvorks between systems
systems in fact
effective and harder
harder to counter
counter when multiple
systems are involved
determine the sender
sender and receiver
change when multiple
controlled by attackers
keys to encryption
required for authentication
authentication and encryption
secrets is easier
easier in environments
single operating system
secure sharing methods
sharing methods exist
exist these methods
methods include shared
include shared memory
memory and interprocess
interprocess comnmnications creating
comnmnications creating secure
creating secure communication
communication and authentication
authentication is discussed
discussed in sections
mechanism to ravage
ravage system performance
performance the worm
worm spawns copies
processes on computer
causing the loss
loss of system
system and system-administrator
system-administrator time worth
millions of dollars
workday on november
robert tappan morris
first-year cornell graduate
cornell graduate student
unleashed a worm
internet targeting sun
targeting sun microsystems
microsystems  sun
workstations and vax
vax computers running
computers running variants
variants of version
worm quickly spread
spread over great
consumed system resources
point of bringing
robert morris designed
designed the self-replicating
program for rapid
reproduction and distribution
unix networking environment
networking environment provided
provided the means
means to propagate
propagate the worm
chose for in.itial
infection an internet
internet host left
host left open
worm program exploited
program exploited flaws
system s security
advantage of unix
utilities that simplify
simplify resource sharing
sharing in local-area
networks to gain
access to thousands
connected sites morris
morris s methods
methods of attack
attack are outlined
worm was made
main program ll.c
grappling hook consisted
compiled and run
machine it accessed
accessed once established
system under attack
grappling hook connected
originated and uploaded
uploaded a copy
main program proceeded
proceeded to search
newly infected system
system could connect
exploited the unix
unix networking utility
networking utility rsh
rsh for easy
easy remote task
remote task execution
execution by setting
setting up special
files that list
host-login name pairs
users can omit
entering a password
access a remote
list the worm
searched these special
files for site
rsh attack finger
attack finger attack
finger attack sendmail
attack sendmail attack
sendmail attack worm
worm sent target
target system infected
system infected system
infected system figure
morris internet worm
password where remote
shells were established
program was uploaded
uploaded and began
began executing anew
attack via remote
infection methods built
two methods involved
methods involved operating-system
involved operating-system bugs
finger and sendmail
finger utility functions
electronic telephone directory
command finger user-name
finger user-name hostname
user-name hostname returns
returns a person
person s real
real and login
office and home
address and telephone
clever quotation finger
quotation finger runs
site and responds
responds to queries
internet the worm
executed a buffer-overflow
attack on finger
finger the program
program queried finger
536-byte string crafted
crafted to exceed
exceed the buffer
allocated for input
overwrite the stack
resided before morris
morris s calt
calt the finger
daemon was routed
invading 536-byte string
string now residing
gave the worm
worm a remote
machine under attack
exploited in sendmail
sendmail also involved
process for malicious
malicious entry sendmail
entry sendmail sends
routes electronic mail
utility permits testers
testers to verify
verify and display
display the state
system the debugging
left on morris
arsenal a call
call to debug
debug that -instead
normal in testing-issued
testing-issued a set
set of cornmands
cornmands that mailed
mailed and executed
executed a copy
worm systematically attempted
discover user passwords
passwords it began
password or passwords
constructed of account-user-name
favorite password choices
standard unix on-line
unix on-line dictionary
password this elaborate
elaborate and efficient
efficient three-stage password-cracking
three-stage password-cracking algorithm
password-cracking algorithm enabled
enabled the worm
worm to gain
system the wontt
wontt then searched
searched for rsh
rsh data files
newly broken accounts
previously to gain
access to user
accounts on remote
worm program searched
remained undetected allowing
allowing every seventh
duplicate to proceed
possibly to confound
efforts to stop
stop its spread
baiting with fake
created a wholesale
infestation of sun
sun and vax
unix network environment
environment that assisted
worm s propagation
propagation also helped
helped to stop
stop its advance
ease of electronic
mechanisms to copy
source and binary
files to remote
code and human
human expertise allowed
expertise allowed cooperative
allowed cooperative efforts
efforts to develop
develop solutions quickly
methods of halting
halting the invading
program were circulated
circulated to system
internet within days
specific software patches
exploited security flaws
unleash the worm
worm the action
prank gone awry
criminal offense based
worm s release
spread was unintentional
unintentional the worm
program took elaborate
steps to cover
cover its tracks
contained no code
aimed at damaging
damaging or destroying
destroying the systems
ran the author
expertise to include
include such commands
structures were present
trojan-horse or virus
programs the behavior
program may lead
lead to interesting
provide a sound
basis for inferring
open to speculation
federal court convicted
court convicted morris
morris and handed
years  probation
hours of community
10,000 fine morris
morris s legal
costs probably exceeded
security experts continue
continue to evaluate
methods to decrease
decrease or eliminate
shows that worms
fact of life
occurred during august
released by persons
fastest-spreading worm released
released to date
peak mfecting hundreds
hundreds of thousands
thousands of computers
seventeen e-mail messages
internet it clogged
clogged e-mail inboxes
number of hours
hours to clean
sobig.f was launched
stolen credit card
photo the virus
virus targeted microsoft
targeted microsoft windows
microsoft windows systems
engine to e-mail
variety of subject
making it difficult
difficult to determine
message which machine
infected source sobig.f
source sobig.f included
included an attachment
target e-mail reader
reader to click
variety of names
payload was executed
stored a program
program called winppr32.exe
default windows directory
modified the windows
attempt to connect
servers and download
download and execute
servers were disabled
downloaded the content
code was malevolent
number of machines
15.3.2 port scanning
port scanning port
scanning port scanning
cracker to detect
detect a system
system s vulnerabilities
vulnerabilities to attack
attack port scanning
typically is automated
involving a tool
tool that attempts
attempts to create
create a tcp
tcp lip connection
range of ports
sendmail a cracker
cracker could launch
launch a port
range of systems
connection was successful
attempt to communicate
service to determine
imagine a tool
operath g system
system was encoded
encoded the tool
tool could attempt
service that answered
allowing the creation
privileged command shell
cracker could install
install trojan horses
tools that perform
versatile open-source utility
utility for network
exploration and security
auditing when pointed
determine what services
services are n.1n..tling
including application names
names and versions
identify the host
information about defenses
firewalls are defending
defending the target
performs a similar
database of bugs
scan a range
determine the services
attempt to attack
bugs it generates
perform the final
step of exploiting
exploiting the found
scans are detectable
frequently are launched
serving their owners
including denial-of-service attacks
attacks and spam
spam relay zombies
relay zombies make
zombies make crackers
crackers particularly difficult
difficult to prosecute
prosecute because determining
determining the source
person that launched
reasons for securing
securing inconsequential systems
systems containing valuable
information or services
service as mentioned
attacks are aimed
information or stealing
system or facility
attacks involve systems
launching an attack
attack that prevents
easier than breaking
machine or facility
generally network based
based they fall
two categories attacks
click could download
download a java
applet that proceeds
pop up windows
category involves disrupting
disrupting the network
successful denial-of-service attacks
kind against major
major web sites
sites these attacks
result from abuse
functionality of tcp
lip for instance
sends the part
start a tcp
standard the connection
partially started tcp
started tcp sessions
sessions are launched
legitimate tcp connections
connections such attacks
hours or days
partial or full
failure of attempts
facility the attacks
updated to reduce
reduce their vulnerability
impossible to prevent
prevent denial-of-service attacks
attacks the attacks
mechanisms as normal
difficult to prevent
prevent and resolve
attacks are launched
launched from multiple
typically by zombies
zombies ddos attacks
attempts a site
offer to halt
halt the attack
attack in exchange
exchange for money
surge in system
successful advertising campaign
greatly increases traffic
considered a ddos
aspects of dos
authentication algorithm locks
locks an account
attempts to access
access the account
purposely making incorrect
making incorrect attempts
access all accounts
blocks certain kinds
kinds of traffic
induced to block
block that traffic
suggest that programmers
programmers and systems
understand the algorithms
algorithms and technologies
computer science classes
classes are notorious
sources of accidental
accidental system dos
system dos attacks
first programming exercises
learn to create
subprocesses or threads
threads a common
common bug involves
bug involves spawning
involves spawning subprocesses
spawning subprocesses infinitely
infinitely the system
system s free
memory and cpu
stand a chance
defenses against computer
running the gamut
gamut from methodology
methodology to technology
technology the broadest
users is cryptography
discuss the details
details of cryptography
sender and recipient
recipient of ali
ali interprocess communication
controls all communication
network of computers
networked computer receives
computer receives bits
determining what machine
machine or application
computer sends bits
infer the potential
senders and receivers
receivers of network
network messages network
messages network packets
network packets arrive
names the intended
applications where security
source or destination
packet reliably determines
received that packet
packet a rogue
computer can send
send a message
falsified source address
receive a packet
destination will receive
receive the packet
system to decide
grant a request
trust the named
supposed to provide
request or data
receive the response
response or message
contents it sends
generally considered infeasible
infeasible to build
build a network
source and destination
addresses of packets
trust the network
job of cryptography
constrain the potential
and or receivers
cryptography is based
based on secrets
distributed to computers
process messages cryptography
messages cryptography enables
enables a recipient
message to verify
message was created
sender can encode
encode its message
key can decode
decode the message
destination unlike network
unlike network addresses
keys are designed
feasible to derive
means of constraining
receivers of messages
note that cryptography
field of study
large and small
complexities and subtleties
parts of cryptography
cryptography that pertain
pertain to operating
solves a wide
variety of communication
communication security problems
aspects of modern
modern computing encryption
encryption a means
means for constraining
message an encryption
encryption algorithm enables
enables the sender
message to ensure
key can read
read the message
encryption of messages
back to ancient
describe important modern
important modern encryption
modern encryption principles
principles and algorithms
two users communicating
trusted third party
encryption algorithm consists
function for generating
ciphertexts from messages
efficiently computable functions
messages from ciphertexts
algorithm must provide
provide this essential
computer can compute
write ----1 rnessage
message ml figure
i5.7 a secure
computer not holding
infeasible to derive
two main types
types of encryption
symmetric and asymmetric
asymmetric we discuss
discuss both types
15.4.1.1 symmetric encryption
past several decades
commonly used symmetric
symmetric encryption algorithm
states for civilian
institute of stantechxwlogy
works by taking
taking a 64-bit
key and performing
performing a series
series of transformations
transformations these transformations
transformations are based
based on substitution
substitution and permutation
generally the case
case for symmetric
symmetric encryption transformations
algorithms are hidden
hidden in fact
s-boxes are classified
united states government
states government messages
government messages longer
bits are broken
broken into 64-bit
chunks because des
chunk of bits
encrypting an extended
anwunt of data
vulnerable to attack
block would result
key and encryption
block before encryption
searched with moderate
moderate computing resources
created a modification
algorithm is repeated
repeated three times
effective key length
bits triple des
widespread use today
replace des aes
symmetric block cipher
bits and works
works on 128-bit
blocks it works
works by performing
rounds of transformations
algorithm is compact
compact and efficient
symmetric block encryption
block encryption algorithms
today bear mentioning
mentioning the algorithm
algorithm is fast
easy to implement
variable key length
vary in key
number of transformations
basic computational operations
variety of crus
common stream cipher
designed to encrypt
encrypt and decrypt
decrypt a stream
bytes or bits
communication would make
make a block
cipher too slow
slow the key
key is input
algorithm that attempts
attempts to produce
produce random bits
bits the output
generator when fed
fed a key
set of keys
input plaintext stream
plaintext stream rc4
steams of data
wireless lan protocol
communications between web
browsers and web
amount of con1.puter
15.4.1.2 asymmetric encryption
encryption and decryption
block-cipher public-key algorithm
widely used asymmetrical
asymmetrical algorithm asymmetrical
algorithm asymmetrical algorithms
asymmetrical algorithms based
based on elliptical
curves are gaining
amount of cryptographic
write i messlge
read ~ figure
decryption using rsa
rsa asymmetric cryptography
randomly chosen prime
chosen prime numbers
icc satisfies leekd
satisfies leekd mod
values is shown
encrypting the message
public key results
asymmetric encryption begins
destination for bidirectional
publish its public
public key publication
simple as handing
complex the private
holding that key
key can decrypt
decrypt any message
matching public key
seemingly small difference
difference in key
asymmetric and symmetric
large in practice
practice asymmetric cryptography
based on mathematical
expensive to execute
computer to encode
encode and decode
usual symmetric algorithms
algorithm in truth
encryption of large
amounts of data
encryption of small
constraining the set
set of potential
complementary to encryption
encryption in fact
prove the identity
produces a valid
message must hold
hold ke authentication
sort of authentication
authentication is similar
distinct from user
discuss in section
authentication algorithm consists
authenticators from messages
messages both sand
function for verifying
authenticators on messages
algorithm must possess
computer can generate
generate an authenticator
two main varieties
varieties of authentication
algorithms the first
first in understanding
understanding these algorithms
explore hash functions
creates a small
message m hash
hash functions work
work by taking
taking a message
message in n-bit
blocks and processing
processing the blocks
blocks to produce
produce an n-bit
resistant on m-that
infeasible to find
modified common message-digest
common message-digest functions
message-digest functions include
include which produces
produces a 128-bit
outputs a 160-bit
detecting changed messages
authentication algorithm takes
takes the message
digest and encrypts
first main type
type of authentication
algorithm uses symmetric
checksum is generated
generated from message
secret key knowledge
secret a simple
cam10t be derived
message could create
mac a suitable
suitable verification algorithm
needed to compute
authenticators thus produced
computationally to derive
vis a one-way
key and lc5
rsa digital-signature algorithm
rsa encryption algorithm
reversed the digital
message is derived
derived by computing
encryption can prove
separate authentication algorithms
algorithms generally require
generally require fewer
require fewer computations
exception of h.sa
h.sa digital signatures
amounts of plaintext
efficiency can make
make a huge
difference in resource
needed to authenticate
authenticate a message
ciphertext this improves
transmission time efficiency
company could provide
provide a software
sign that patch
patch to prove
nt been modified
aspects of security
performed an action
action a typical
involves the filling
out of electronic
signing of paper
paper contracts nonrepudiation
contracts nonrepudiation assures
out an electronic
15.4.1.4 key distribution
battle between cryptographers
keys with symmetric
performed cut-or-band -say
key-management challenge suppose
suppose a user
wanted to communicate
change those keys
reasons for efforts
efforts to create
create asymmetric key
asymmetric key algorithms
keys be exchanged
exchanged in public
matter of managing
managing a public
distribution of public
public keys requires
requires some care
man-in-the-middle attack shown
receive an encrypted
encrypted message sends
out his public
attacker also sends
sends her bad
bad public key
matches her private
send the encrypted
key to encrypt
encrypt the message
message the attacker
owns a public
solve that problem
key digitally signed
party the trusted
trusted party receives
proof of identification
key kbad attacker
kbad attacker decryption
attacker decryption key
key kd __
key kbad .,......_read
attack on asymmetric
trust the certifier
public keys i.j.l.cluded
i.j.l.cluded within web
consumers of certificates
distributed the certificate
signing the public
creating a web
web of trust
trust the certificates
standard x.509 digital
x.509 digital certificate
digital certificate format
parsed by computer
computer this scheme
secure web communication
implementation of cryptography
cryptography network protocols
generates a message
message to send
hands its message
stack for delivery
packets are passed
connection ip encapsulates
encapsulates the tcp
peer then delivers
delivers the tcp
model for data
model of networking
networking in chapter
shows a diagram
iso model ssl
transport layer networklayer
layer networklayer security
defines ip packet
insertion of authenticators
encryption of packet
protocol for key
two ipsec endpoints
endpoints is encrypted
encrypted to make
make a private
public numerous protocols
coded to implement
stack in general
benefit from protections
protections placed lower
packets encapsulate tcp
encapsulate tcp packets
hides the contents
encapsulated tcp packets
detect the modification
modification of contaii1.ed
contaii1.ed tcp header
tcp header information
protection at lower
stack may give
give insufficient protection
protection to higher-layer
server that runs
runs over ipsec
authenticate the client
requests are received
authenticate a user
required to type
type a password
problem of e-mail
e-mail e-mail delivered
industry standard smtp
standard smtp protocol
protocol is stored
stored and forwarded
frequently multiple times
network for e-mail
security is independent
transports that carry
protocol that enables
enables two computers
computers to corrumjj1icate
limit the sender
commonly used cryptographic
securely with web
servers for completeness
note that ssl
ssl was designed
designed by netscape
industry standard tls
standard tls protocol
ssl and tls
simplified and abstract
server can establish
establish a secure
man-in-the-middle and replay
attacks for added
added cryptographic strength
keys are forgotten
session is completed
completed another communication
two will generation
protocol is initiated
obtained a certificate
public encryption algorithm
server the public
server a validity
validity interval interval
interval interval durirtg
valid a digital
made by theca-that
client is presumed
obtained the public
public verification algorithm
user s browser
browser is shipped
algorithms and public
authorities the user
user can add
add or delete
sends a 28-byte
28-byte random value
cert5 the client
tests are satisfied
server has proved
proved its identity
generates a random
46-byte and sends
server the server
server recovers pms
cmnpute a shared
one-way and collision-resistant
server and client
client can compute
server both compute
compute the keys
symmetric encryption key
ypt for encrypting
client a symmetric
rypt for encrypting
server a mac
recovers and accepts
enables the server
server to limit
limit the recipients
client that generated
limit the senders
messages it accepts
client can limit
messages it sends
verify the identity
field contains information
determine the identityfor
name-of the server
supports an option
client can send
send a certificate
variety of tasks
competitor in ssl
ssl vpns ipsec
ipsec is good
good for point-to-point
encryption of traffic-say
two company offices
company offices ssl
offices ssl vpns
individual employee working
discussion of authentication
authentication involves messages
messages and sessions
major security problem
problem for operating
protection system depends
ability to identify
identify the programs
programs and processes
processes currently executing
identify each user
user the system
system users identify
determine a user
authentication is based
user s possession
identifier and password
retina or signature
user a user
user-supplied password matches
matches the password
complete protection schemes
considered a special
keys or capabilities
capabilities for instance
request is made
password is correct
access is granted
granted different passwords
gain full rights
trade-off between security
security and convenience
convenience if security
makes something inconvenient
15.5.2 password vulnerabilities
password vulnerabilities passwords
two common ways
ways to guess
guess a password
human or program
people use obvious
cats or spouses
combinations of valid
valid password characters
-until the password
password is found
found short passwords
variations on average
guessing 5,000 times
times would produce
produce a correct
hit a program
password every millisecond
seconds to guess
guess a four-character
four-character password enumeration
successful where systems
systems allow longer
passwords that include
include both uppercase
uppercase and lowercase
large password space
result of visual
visual or electronic
monitoring an intruder
user is logging
learn the password
easily by watching
watching the keyboard
add a network
watch all data
network including user
including user ids
ids and passwords
encrypting the data
copied for off-system
trojan-horse program installed
system that captures
captures every keystroke
keystroke before sending
password is written
read or lost
systems force users
users to select
user to record
record the password
security than systems
select easy passwords
type of password
result of human
nature most computer
rule that forbids
users to share
accounts this rule
implemented for accounting
aimed at improving
security for instance
suppose one user
security breach occurs
user per user
user might notice
account and detect
detect the break-in
users break account-sharing
break account-sharing rules
behavior can result
accessed by unauthorized
users -possibly harmful
system or selected
difficult to remember
users may write
easy to guess
systems will check
check a proposed
password for ease
ease of guessing
guessing or cracking
cracking before accepting
administrators occasionally check
occasionally check user
check user passwords
passwords and notify
notify a user
password is easy
guess some systems
systems also age
users to change
change their passwords
passwords at regular
passwords the solution
record a password
user for instance
system could record
record the last
last n passwords
simple password schemes
changed more frequently
password is changed
changed from session
session to session
password is selected
password is misused
discovers the security
security violation steps
repair the breached
15.5.3 encrypted passwords
passwords one problem
difficulty of keeping
keeping the password
store a password
presents her password
password the unix
system uses encryption
encryption to avoid
avoid the necessity
necessity of keeping
keeping its password
password list secret
secret each user
password the system
extremely difficult-the designers
difficult-the designers hope
designers hope impossible-to
hope impossible-to invert
simple to compute
easy to compute
compute the function
impossible to compute
encode all passwords
passwords only encoded
passwords are stored
presents a password
encoded and compared
stored encoded password
cam1ot be decoded
secret the functionf
typically an encryption
designed and tested
system no longer
longer has control
passwords are encrypted
file can run
run fast encryption
fast encryption routines
routines against it-encrypting
it-encrypting each word
comparing the results
user has selected
selected a password
password is cracked
sufficiently fast computers
clusters of slow
well-known encryption algorithm
cache of passwords
versions of unix
store the encrypted
encrypted password entries
programs that compare
compare a presented
stored password run
password run setuid
setuid to root
read this file
include a salt
recorded random number
algorithm the salt
salt is added
password to ensure
two plaintext passwords
unix password methods
unix systems treat
first eight characters
characters as significant
important for users
space to avoid
avoid the dictionary
dictionary encryption method
words as passwords
passwords a good
generate your password
easily remembered phrase
upper and lower
number or punctuation
punctuation mark thrown
phrase my mother
katherine might yield
yield the password
password is hard
hard to crack
crack but easy
user to remember
15.5.4 one-time passwords
passwords to avoid
avoid the problems
problems of password
sniffing and shoulder
set of paired
system randomly selects
selects and presents
presents one part
user is challenged
selects a random
integer and presents
user the user
applies a function
function and replies
result the system
system also applies
applies the function
two results match
susceptible to reuse
user can type
intercepting that password
share a secret
secret the secret
number or alphanumeric
sequence the seed
computer the secret
function is transmitted
becallse the computer
user is authenticated
seed is generated
instance anyone capturing
capturing the password
session will fail
fail one-time passwords
ways to prevent
prevent improper authentication
improper authentication clue
clue to password
one-time password systems
systems are implemented
ways commercial implementations
calculators are shaped
include a display
user to enter
enter the shared
keypad the display
display then shows
shows the one-time
one-time password generator
two different types
types of components
components are needed
case two-factor authentication
two-factor authentication offers
protection than single-factor
variation on one-time
list of single-use
passwords each password
out or erased
code book based
source of one-time
user must protect
protect his code
biometric measures palm
palm or hand-readers
secure physical access-for
center these readers
readers match stored
match stored parameters
read from hand-reader
parameters can include
include a temperature
patterns these devices
large and expensive
normal computer authentication
accurate and cost-effective
future these devices
devices read finger
read finger ridge
finger ridge patterns
patterns and convert
sequence of numbers
store a set
set of sequences
sequences to adjust
scan a finger
pad and compare
compare its features
sequences to determine
scanner can differentiate
accurate two-factor authentication
two-factor authentication scheme
scheme can result
result from requiring
requiring a password
information is encrypted
encrypted in transit
resistant to spoofing
spoofing or replay
place her finger
pad and plug
plug the usb
normal passwords recall
sufficient to guarantee
user an authenticated
threats to system
solutions the solutions
run the gamut
gamut from improved
improved user education
software most security
security professionals subscribe
layers of defense
kind of security
resistance to threats
15.6.1 security policy
policy toward improving
improving the security
aspect of computing
include a statement
policy might state
share their passwords
policy in place
impossible for users
users and administrators
allowed the policy
map to security
people it affects
guide the policy
reviewed and updated
periodically to ensure
15.6.2 vulnerability assessment
execute a vulnerability
assessment such assessments
assessments can cover
cover broad ground
engineering through risk
assessment to port
port scans rlsl
endeavors to value
value the assets
entity in question
determine the odds
incident will affect
affect the entity
entity and decrease
decrease its value
odds of suffering
suffering a loss
secure the entity
., ~ --in
entity is scanned
book is concerned
concerned with operating
software that runs
aspects of vulnerability
typically are done
done at times
times when computer
minimize their impact
induce unhappy behavior
systems or network
system can check
check a variety
variety of aspects
short or easy-to-guess
easy-to-guess passwords unauthorized
passwords unauthorized privileged
unauthorized privileged programs
setuid programs unauthorized
programs unauthorized programs
programs in system
directories unexpectedly long-running
unexpectedly long-running processes
long-running processes improper
processes improper directory
improper directory protections
protections on user
user and system
system directories improper
directories improper protections
protections on system
system data files
kernel itself dangerous
program search path
trojan horse discussed
system programs detected
detected with checksum
checksum values unexpected
unexpected or hidden
hidden network daemons
daemons any problems
automatically or reported
susceptible to security
directly connected terminals
unknown and large
points-a potentially severe
potentially severe security
severe security problem
connected to telephone
lines via modems
u.s government considers
considers a system
connection for instance
building also considered
top-secret the system
loses its topsecret
form of communication
communication call occur
facilities take extreme
extreme security precautions
precautions the connectors
connectors that plug
plug a terminal
computer are locked
physical lock combination
administrators and computer-security
impossible to lock
lock a machine
room and disallow
disallow all remote
access for instance
network currently connects
millions of computers
companies and individuals
internet a club
club with millions
millions of members
members the bad
attempt to gain
applied to networks
networks to address
problems with network
security the scans
search a network
network for ports
ports that respond
request if services
services are enabled
disabled the scans
scans then determine
determine the details
testing those vulnerabilities
vulnerabilities can determine
system is ncisconfigured
ncisconfigured or lacks
lacks needed patches
security these tools
crackers find vulnerabilities
detect port scans
challenge to security
harm in fact
people advocate stating
written to test
approach to security
crackers could write
reasonable that security
security through obscurity
obscurity be considered
layers of security
company could publish
publish its entire
entire network configuration
keeping that information
information secret makes
makes it harder
harder for intruders
information will remain
remain a secret
sense of security
15.6.3 intrusion detection
detection and facilities
linked to intrusion
strives to detect
attempted or successful
intrusions into computer
initiate appropriate responses
intrusions intrusion detection
intrusion detection encompasses
encompasses a wide
array of techniques
techniques that vary
number of axes
detection occurs detection
detection can occur
occur in real
intrusion is occurring
types of inputs
examined to detect
detect intrusive activity
include user-shell commands
process system calls
network packet headers
headers or contents
contents some forms
forms of intrusion
range of response
response capabilities simple
capabilities simple forms
forms of response
response include alerting
alerting an administrator
potentially intrusive activity-for
killing a process
fonn of response
divert an intruder
intruder s activity
false resource exposed
attacker the resource
resource appears real
attacker and enables
enables the system
system to monitor
monitor and gain
attack these degrees
degrees of freedom
space for detecting
range of solutions
ids systems raise
raise an alarm
intrusion is detected
idp systems act
act as routers
point that traffic
traffic is blocked
constitutes an intrusion
defining a suitable
specification of intrusion
idss and idps
idps today settle
two less ambitious
input or network
traffic is examined
specific behavior patterns
attacks a simple
detection is scanning
scanning network packets
binaries or network
packets for lmown
typically called attempts
techniques to detect
detect anomalous behavior
behavior within computer
anomalous system activity
intrusions often induce
induce anomalous behavior
detection is monitoring
monitoring system calls
process to detect
system-call behavior deviates
deviates from normal
daemon to corrupt
corrupt its behavior
monitoring shell commands
commands to detect
detect anomalous commands
user or detecting
detecting an anomalous
attacker has succeeded
succeeded in gaining
user s account
signature-based detection attempts
attempts to characterize
characterize dangerous behaviors
anomaly detection attempts
approaches yield idss
detection can find
find previously unknown
previously unknown methods
methods of intrusion
so-called signature-based detection
signatures were generated
generated will evade
evade signature-based detection
detection this problem
vendors of virus-detection
release new signatures
signatures with great
viruses are detected
superior to signature-based
challenge for systems
systems that attempt
attempt anomaly detection
benchmark normal system
normal system behavior
system behavior accurately
system is benchinarked
influence from intrusive
behaviorf the benchmark
benchmark must give
fairly complete picture
picture of normal
illustrate the impact
marginally high rate
rate of false
hundred unix workstations
events are recorded
recorded for purposes
purposes of intrusion
detection a small
generate a million
million audit records
records per day
administrator s investigation
attack is reflected
reflected in ten
ten audit recordsf
compute the rate
rate of occurrence
occurrence of audit
audit records reflecting
reflecting truly intrusive
recor s mtrus10n
probability of occurrence
occurrence of intrusive
denote the raising
ids an accurate
ids should maximize
impact ofthe false-alarm
ofthe false-alarm rate
good true-alarm rate
seemingly good falsealarm
good falsealarm rate
security administrator ilwestigates
ilwestigates each alarm
alarms-called a christmas
christmas tree effect
tree effect -is
-is exceedingly wasteful
teach the admilcistrator
admilcistrator to ignore
illustrates a general
principle for idss
extremely low false-alarm
low false-alarm rate
false-alarm rate achieving
sufficiently low false-alarm
challenge for anomaly-detection
adequately benchmarking normal
benchmarking normal system
research contil ues
ues to improve
improve anomalydetection techniques
anomalydetection techniques intrusion
techniques intrusion detection
intrusion detection software
software is evolving
evolving to implement
combine the results
results to arrive
accurate anomaly-detection rate
15.6.4 virus protection
havoc on systems
protection from viruses
important security concern
security concern antivirus
concern antivirus programs
provide this protection
programs are effective
viruses they work
work by searching
pattern of instructions
remove the instructions
program antivirus programs
catalogs of thousands
viruses and antivirus
antivirus software continue
infect other software
software to avoid
avoid the basic
basic pattern-match approach
approach of antivirus
antivirus programs antivirus
programs antivirus programs
programs ill turn
families of patterns
pattern to identify
antivirus programs implement
implement a variety
variety of detection
decompress compressed viruses
viruses before checking
anomalies a process
opening an executable
file for writing
writing is suspicious
compiler another popular
controlled or emulated
tripwire file system
tool for unix
developed at purdue
purdue university tripwire
university tripwire operates
result in modification
modification of system
directories and files
attacker might modify
modify the system
copies with trojan
insert new programs
programs into directories
directories commonly found
found in user-shell
user-shell search paths
intruder might remove
remove system log
system log files
files to cover
cover his tracks
tool to monitor
monitor file systems
systems for added
alert system administrators
operation of tripwire
tripwire is controlled
tw.config that enumerates
enumerates the directories
additions each entry
configuration file includes
includes a selection
file s permissions
permissions be monitored
mask can instruct
instruct thatthe file
file be monitored
monitoring the hash
good as monitoring
monitoring the file
itselt but storing
hashes of files
room than copying
copying the files
takes as input
input the tw.config
file and computes
computes a sign.ature
attributes and hash
signatures are stored
database when run
inputs both tw.config
previously stored database
recomputes the signature
named in tw.conf
compares this signature
previously compl.j-ted database
compl.j-ted database events
database events reported
include any monitored
directory whose signature
directory no longer
class of attacks
protect the tripwire
server where logins
convenient to update
update the database
database after authorized
updates to monitored
system log files-are
log files-are supposed
supposed to change
attack that modifies
tripwire s detection
detectcertain obvious inconsistencies
shrinking log file
free and commercial
versions of tripwire
system the antivirus
antivirus software analyzes
analyzes the behavior
sandbox before letting
letting it run
unmonitored some antivirus
programs also put
search boot sectors
inbound and outbound
devices or media
protection against computer
viruses is prevention
practice of purchasing
purchasing unopened software
software from vendors
vendors and avoiding
free or pirated
copies from public
sources or disk
disk exchange offer
offer the safest
route to preventing
copies of legitimate
legitimate software applications
immune to virus
company have infected
infected the master
copies of software
company for macro
exchange microsoft word
alternative file format
format called unlike
unlike the native
native word format
word format rtf
include the capability
capability to attach
opening any e-mail
attachments from unknown
history has shown
shown that e-mail
love bug virus
widespread by traveling
traveling in e-mail
messages that pretended
opened the attached
attached visual basic
visual basic script
propagated by sending
receiver s e-mail
e-mail contact list
clogging e-mail systems
systems and users
users  inboxes
negate the defensive
strategy of opening
effective defense method
code some companies
companies now enforce
policy by removing
removing all incoming
attachments to e-mail
permit early detection
detection a user
user must begin
reformatting the hard
targeted for viral
attack only secure
software is uploaded
secure message-digest computation
computation the resulting
free from unauthorized
operating system recomputes
signature and compares
infection this technique
high-overhead antivirus scan
passes the test
logging can decrease
decrease system performance
including security logging
general or specific
specific all system-call
logged for analysis
analysis of program
events are logged
failures and authorization
lot about break-in
administrator s kit
tum can reveal
reveal security problems
early unix computer
unix computer break-ins
break-ins was detected
detected by cliff
exam5ning accounting logs
logs and spotted
network one solution
firewall to separate
trusted and unh
unh usted systems
router that sits
untrusted a network
network firewall limits
firewall limits network
limits network access
two and monitors
monitors and logs
logs all connections
limit coru1.ections based
based on source
servers use http
http to communicate
communicate with web
browsers a firewall
http to pass
firewall the morris
protocol to break
break into computers
allowed to pass
firewall can separate
separate a network
network into multiple
semitrusted and semisecure
company s computers
coru1.ections are allowed
internet or dmz
query a database
access is contained
unable to access
access the company
internet internet access
access from company
computers r---------i company
r---------i company computers
company computers access
access between dmz
dmz and company
separation via firewall
secure and attack-proof
ability to secure
travel within protocols
protocols or com1ections
connection is allowed
connection that house
house the attack
denialof service attacks
attacks can affect
machines another vulnerability
vulnerability of firewalls
unauthorized host pretends
host by meeting
meeting some authorization
host and identifies
identifies that host
host could send
common network firewalls
kinds of firewalls
pros and cons
layer either included
system or added
communication between security
host a user
user could add
add a personal
understands the protocols
protocols that applications
transfer an application
application proxy accepts
accepts a com1ection
initiates a connection
original destination smtp
destination smtp server
monitor the traffic
forwards the message
disabling illegal commands
attempts to exploit
firewalls are designed
purpose of analyzing
analyzing xml traffic
traffic and blocking
disallowed or malformed
malformed xml sit
sit between applications
monitoring system-call execution
privilege feature implements
implements a list
fifty system calls
calls that processes
allowed to make
make a process
spawn other processes
department of defense
defense trusted computer
trusted computer system
computer system evaluation
system evaluation criteria
four security classifications
classifications in systems
determine the security
model security solutions
classification is division
minimal protection division
division d includes
failed to meet
meet the requirements
ms-dos and windows
level of security
protection and accountability
accountability of users
c1-class system incorporates
incorporates some form
form of controls
protect private information
reading or destroying
destroying their data
cooperating users access
users access data
levels of sensitivity
sensitivity most versions
enforce a security
system controls access
access between users
users and files
files by allowing
sharing of objects
objects by named
individuals or defined
groups in addition
start any activities
tcb is expected
expected to mediate
mediate this identification
identification is accomplished
mechanism or password
protects the authentication
inaccessible to unauthorized
c2-class system adds
adds an individual-level
individual-level access control
individual in addition
audit the actions
based on individual
identity the tcb
tcb also protects
code or data
structures in addition
user who accesses
accesses a storage
system some speciat
speciat secure versions
division-b mandatory-protection systems
attach a sensitivity
object the bl-class
bl-class tcb maintains
maintains the security
pertaining to mandatory
mandatory access control
access a file
sensitive secret level
level the tcb
tcb also denotes
denotes the sensitivity
top and bottom
output in addition
normal user-namepassword authentication
user-namepassword authentication information
tcb also maintains
maintains the clearance
clearance and authorizations
authorizations of individual
levels of security
security these levels
user may access
access any objects
objects that carry
carry sensitivity labels
sensitivity labels equal
user could access
access controls processes
distinct address spaces
b2-class system extends
extends the sensitivity
storage objects physical
objects physical devices
devices are assigned
minimum and maximum
maximum security levels
enforce constraints imposed
devices are located
located in addition
system supports covert
supports covert channels
auditing of events
creation of access-control
lists that denote
users or groups
groups not granted
object the tcb
mechanism to monitor
violation of security
policy the mechanism
notifies the security
terminates the event
formal design specifications
specifications and verification
granting a high
degree of assurance
correctly a system
system beyond class
designed and developed
facility by trusted
tcb merely ensures
system can enforce
computing environment develops
develops a security
national computer security
computer security center
center certain computing
environments may require
require other certification
supplied by tempest
guards against electronic
system has terminals
shielded to prevent
prevent electromagnetic fields
fields from escaping
escaping this shielding
ensures that equipment
room or building
terminal is housed
housed camwt detect
detect what information
general-purpose operating system
operating system designed
designed to support
support a variety
variety of security
features and methods
features that windows
perform security functions
information and background
background on wilcdows
windows xp security
model is based
notion of windows
number of user
access to system
permitted or denied
denied as desired
users are identified
windows xp creates
includes the security
user has examples
examples of special
special privileges include
privileges include backing
backing up files
files and directories
compute1 ~ logging
changing the system
clock every process
process that windows
windows xp runs
runs on behalf
user will receive
receive a copy
token the system
token to permit
permit or deny
process on behalf
design of windows
development of custom
custom authentication packages
subject to ensure
ensure that programs
user is authorized
track and manage
user s access
acting on behalf
user since windows
windows xp operates
classes of subjects
typical application program
logs on simple
subject is assigned
assigned a based
security access token
client when acting
client s behalf
mentioned in section
common security threats
monitored examples include
examples include failure
include failure auditing
auditing for login
login and logoff
events to detect
detect random password
random password break-ins
detect login activity
activity at strange
success and failure
failure write-access auditing
auditing for executable
files to track
track a virus
auditing for file
access to detect
access to sensitive
object in windows
change the access
discretionary access-control list
list that identifies
groups are allowed
system access-control list
list that controls
controls which auditing
messages the system
system will generate
-all access group
access group cs-read-write
group cs-read-write access
cs-read-write access user
user cliff-no access
access in addition
list of audit
list is composed
composed of access-control
mask that defines
value of accessallowed
accessallowed or accessdenied
files in windows
degree of control
control over access
windows xp classifies
objects or noncontainer
objects by default
object is created
object inherits permissions
copies a file
file will inherit
inherit the permissions
destination directory inherit
permission is changed
apply to existing
files and subdirectories
administrator can prohibit
windows xp performance
spot approaching problems
problems in general
job of providing
ensure a secure
myriad security breaches
breaches on windows
windows xp systems
systems another reason
number of services
windows xp starts
starts at system
system boot tiine
number of applications
typically are installed
windows xp system
real multiuser environment
administrator should formulate
formulate a security
plan and implement
internal problem security
protected from unauthorized
protect against malicious
data absolute protection
access that information
information without proper
types of attacks
launched against programs
programs and agaitlst
agaitlst individual computers
stack and buffer-overflow
techniques allow successful
attackers to change
change their level
level of system
system access viruses
viruses and worms
worms are self-perpetuating
denial-of-service attacks prevent
attacks prevent legitimate
limits the domain
domain of receivers
receivers of data
domain of senders
confidentiality of data
data being stored
stored or transferred
transferred symmetric encryption
symmetric encryption requires
requires a shared
combined with hashing
prove that data
user authentication methods
identify legitimate users
system in addition
addition to standard
user-name and password
change from session
session to avoid
avoid replay attacks
replay attacks two-factor
attacks two-factor authentication
two-factor authentication requires
requires two forms
forms of authentication
activation pin multifactor
pin multifactor authentication
forms these methods
methods greatly decrease
decrease the chance
chance of authentication
methods of preventing
preventing or detecting
detecting security incidents
security incidents include
incidents include intrusiondetection
include intrusiondetection systems
auditing and logging
logging of system
monitoring of system
judicial sentence handed
creation and execution
internet worm discussed
discuss a means
managers of systems
internet could design
design their systems
systems to limit
limit or eliminate
eliminate the damage
done by worms
drawbacks of making
making the change
commonly used computer
programs are prone
prone to man-in-themiddle
man-in-themiddle attacks discuss
attacks discuss solutions
solutions for preventing
preventing this form
form of attack
unix program cops
program cops scans
holes and alerts
alerts the user
two potential hazards
system for security
problems be limited
limited or eliminated
make a list
bank s computer
relates to physicat
operating-system ~ security
addition to unix
user to connect
connect a program
file the watchdog
watchdog is invoked
program requests access
grants or denies
discuss two pros
watchdogs for security
asymmetric encryption algorithm
generated the message
receiver can decrypt
decrypt the message
authentication and secrecy
encryption be put
system that generates
day also assume
attacks per day
percentage of alarms
correspond to real
salt be stored
discussions concerning security
pfleeger and pfleeger
russell and gangemi
text by lobel
networking is discussed
discussed in kurose
kurose and ross
design and verification
verification of secure
discussed by rushby
microcomputer is described
described by schell
distributed secure system
described by rushby
rushby and randell
morris and thompson
discuss password security
password security morshedian
methods to fight
fight password pirates
password pirates password
pirates password authentication
communications is considered
considered by lamport
issue of password
cracking is examined
break-ins are discussed
discussed by lehmann
related to trusting
trusting computer programs
programs are discussed
discussed in thompson
discussions concerning unix
security are offered
offered by grampp
grampp and morris
filipski and hanko
bershad and pinkerton
present the watchdog
extension to bsd
unix the cops
cops security-scanning package
package for unix
unix was written
written by farmer
farmer at purdue
program from host
ftp.uu.net in directory
security i cops
presents a detailed
detailed technical discussion
worm the spafford
spafford article appears
worm in communications
suite are described
described in bellovin
prevent such attacks
attacks are discussed
discussed in cheswick
approach to protecting
networks from insider
topology or route
route discovery kent
zapata and asokan
solutions for secure
secure routing savage
examine the distributed
distributed denialof service
denialof service attack
attack and propose
propose ip trace-back
solutions to address
address the problem
proposes an approach
approach to diagnose
network contains malicious
information about viruses
found at http
sites containing up-to-date
up-to-date security information
security information include
information include http
diffie and hellman
researchers to propose
public-key encryption scheme
scheme the algorithm
presented in section
15.4.1 is based
developed by rivest
denning and demting
cryptography in computer
computer systems discussions
discussions concerning protection
protection of digital
signatures are offered
offered by akl
concerned about security
security the department
describes a set
set of security
security rating reading
good starting point
point for understanding
understanding security concerns
concerns the microsoft
windows nt workstation
workstation resource kit
describes the security
algorithm is presented
presented in rivest
information about nist
nist s aes
site more complete
coverage of ssl
slightly and presented
request for comments
section 15.6.3 illustrating
illustrating the impact
impact of false-alarm
effectiveness of idss
idss is based
based on axelsson
description of tripwire
tripwire in section
15.6.5 is based
based on kim
kim and spafford
research into system-call-based
system-call-based anomaly detection
detection is described
described in forrest
collection of processors
local-area or wide-area
networks the processors
distributed system vary
vary in size
size and function
function such systems
systems may include
include small handheld
handheld or real-time
large mainframe computer
mainframe computer systems
distributed file system
system whose users
devices are dispersed
single centralized data
centralized data repository
multiple independent storage
independent storage devices
distributed system include
system include giving
include giving users
giving users access
speeding up computation
computation and improving
improving data availability
availability and reliability
system is distributed
mechanisms for process
synchronization and communication
memory the processors
buses or telephone
discuss the general
structure of distributed
networks that interconnect
contrast the main
differences in operating-system
systems and centralized
systems in chapter
discuss distributed file
describe the methods
distributed operating systems
systems to coordinate
coordinate their actions
provide a high-level
overview of distributed
loosely coupled processors
coupled processors interconnected
point of view
resources are local
system may vary
include small microprocessors
large general-purpose cornputer
general-purpose cornputer systems
systems these processors
processors are referred
number of names
machine and host
system is shown
site a site
site c network
network communication site
site b figure
four major reasons
reasons for building
building distributed systems
16.1.1 resource sharing
user at site
laser printer located
located at site
file that resides
system provides mechanisms
mechanisms for sharing
files at remote
remote specialized hardware
specialized hardware devices
high-speed array processor
performing other operations
16.1.2 computation speedup
partitioned into subcomputations
distribute the subcomputations
provide in addition
overloaded with jobs
lightly loaded sites
sites this movement
movement of jobs
automated load sharing
distributed operating system
system automatically moves
automatically moves jobs
comnlon in commercial
sites can continue
giving the system
system better reliability
system is composed
composed of multiple
multiple large autonomous
large autonomous installations
affect the rest
composed of sncall
crucial system function
failure may halt
halt the operation
system in general
hardware and data
system can continue
sites have failed
needed to recover
failure the system
site in addition
system must ensure
transfer of function
function occurs correctly
failed site recovers
actions present difficult
present difficult problems
sites are connected
opportunity to exchange
passed between systems
messages are passed
passed between processes
single-computer message system
message system discussed
higher-level flmctionality found
found in standalone
expanded to encompass
encompass the distributed
functions include file
include file transfer
remote procedure calls
out over great
distances two people
geographically distant sites
sites can collaborate
transferring the files
systems to run
mail to coordinate
coordinate the work
minimize the limitations
inherent in longdistance
work we wrote
wrote this book
book by collaborating
advantages of distributed
systems have resulted
trend toward dovmslzing
dovmslzing many companies
companies are replacing
replacing their mainframes
mainframes with networks
networks of workstations
workstations or personal
personal computers companies
flexibility in locating
resources and expanding
two general categories
categories of network-oriented
network-oriented operating systems
network operating systems
systems and distributed
operating systems network
systems network operating
systems are simpler
simpler to implement
generally more difficult
difficult for users
access and utilize
provide more features
16.2.1 network operating
systems a operating
multiplicity of machines
access remote resources
machine or transferring
16.2.1.1 remote login
login an important
network operating system
users to log
log in remotely
remotely the internet
p1.npose to illustrate
illustrate this facility
user at westminster
westminster college wishes
wishes to compute
compute on cs.yale.edu
located at yale
machine to log
issues the command
cs.yale.edu this command
machine at westminster
networking software creates
creates a transparent
process on cs.yale.edu
user the process
remote machine asks
asks the user
16.2.1.2 remote file
remote file transfer
transfer another major
mechanism for remote
local file system
computer at yale
university of vermont
file transfer protocol
user on cs.uvm.edu
copy a java
java program server
program server java
java that resides
resides on cs.yale.edu
cs.yale.edu the user
invoke the ftp
program by executing
cs.yale.edu the program
program then asks
user must connect
file server java
server java resides
copy the file
file by executing
executing get server
user ; users
real file sharing
copy a file
file may exist
waste of space
space tn addition
copies are modified
permission on cs.yale.edu
computer to copy
copy files remotely
remotely this remote
copying is accomplished
anonymous ftp method
public to read
file a user
user who wishes
wishes to copy
user is asked
login is accomplished
system to ensure
partially authorized user
access inappropriate files
tree of user
anonymous any files
usual file-protection scheme
machine anonymous users
camlot access files
mechanism is similar
similar to telnet
remote site watches
watches for requests
requests to corulect
system s ptp
ptp port login
port login authentication
authentication is accomplished
allowed to execute
execute commands remotely
unlike the telnet
executes any command
ptp daemon responds
set of file-related
commands these include
get-transfer a file
-change the current
commands to change
change transfer modes
determine connection status
point about telnet
telnet and ptp
require the user
user to change
change paradigms ptp
paradigms ptp requires
requires the user
normal operating-system commands
operating-system commands telnet
commands telnet requires
requires a smaller
machine who tehlets
machine must switch
switch to unix
telnet session facilities
convenient for users
set of commands
commands distributed operating
systems are designed
designed to address
address this problem
16.2.2 distributed operating
users access remote
access local resources
local resources data
data and process
16.2.2.1 data migration
data migration suppose
user on site
reside at site
system can transfer
transfer the data
two basic methods
methods one approach
transfer the entire
file to site
file is local
user no longer
longer needs access
back to site
automated ftp system
system this approach
andrew file system
discuss in chapter
transfer to site
portion is required
access the file
note the similarity
similarity to demand
sun microsystems network
microsystems network file
network file system
versions of andrew
microsoft smb protocol
running on top
microsoft netbeui protocol
smb is described
approach is preferable
preferable if significant
efficient to copy
copy the entire
data migration includes
perform various data
two sites involved
representations or represent
number or order
order of bits
16.2.2.2 computation migration
transfer the computation
access various large
obtain a summary
efficient to access
reside and return
return the desired
itiated the computation
data is longer
execute the remote
suppose that process
file at site
site a access
file is carried
out at site
rpc an rpc
execute a routine
invokes a predefilced
procedure at site
returns the results
message to site
operatil g system
system at site
out the designated
task when process
process q completes
completes its execution
sends the needed
concurrently with process
access several files
rpc might result
transfer of messages
turn would create
create another process
process this process
repeat the cycle
16.2.2.3 process migration
migration a logical
extension of computation
process is submitted
submitted for execution
initiated the entire
sites this scheme
balancing the processes
number of subprocesses
total process turnaround
preference the process
characteristics that make
suitable for execution
process may require
expensive to move
move the process
computation are numerous
two complementary techniques
techniques to move
system can attempt
attempt to hide
hide the fact
process has migrated
client this scheme
code her program
explicitly to accomplish
accomplish the migration
migration this method
employed for achieving
achieving load balancing
balancing and computation
speedup among homogeneous
process should migrate
migrate this method
moved to satisfy
satisfy a hardware
migration for instance
client could trigger
trigger a database
form of process
executed a network
operating system makes
makes them seamless
accessible the result
powerful and easy-to-use
basically two types
types of networks
geographically distributed local-area
distributed local-area networks
networks are composed
composed of processors
distributed over small
number of adjacent
number of autonomous
autonomous processors distributed
differences imply major
imply major variations
speed and reliability
distributed operating-system design
16.3.1 local-area networks
local-area networks local-area
networks local-area networks
local-area networks emerged
substitute for large
number of small
single large system
complement of peripheral
disks and printers
form of data
step to connect
connect these small
designed to cover
cover a small
small geographical area
systems are close
communication links tend
speed and lower
lower error rate
cou.rjerparts in wide-area
wide-area networks high-quality
cables are needed
needed to attain
attain this higher
exclusively for data
data network traffic
traffic over longer
cable is enormous
network are twisted-pair
twisted-pair and fiberoptic
star networks communication
networks communication speeds
communication speeds range
bluetooth local radio
local radio network
ethernet ten megabits
speed of requires
requires a higher-quality
cable but runs
common also growing
optical-fiber-based fddi networking
networking the fddi
network is token-based
token-based and runs
lan may consist
mainframes to laptops
laptops or pdas
shared peripheral devices
printers and magnetic-tape
lans an ethernet
network the ethernet
protocol is defined
spectrum for designing
designing local-area networks
local-area networks wireless
networks allow constructing
constructing a network
router for transmitting
signals between hosts
wireless adapter networking
adapter networking card
systems often run
networks typically run
run at slower
workstation workstation workstation
workstation workstation printer
workstation printer laptop
printer laptop file
laptop file server
file server figure
standards for wireless
ilc practice data
practice data rates
half that amount
amount the recent
recent 802.11n standard
theoretically much higher
higher data rates
practice 802.11n networks
networks have typical
typical data rates
rates of wireless
wireless spectrum wireless
spectrum wireless networks
advantage over wired
wired ethernet networks
run to connect
connect communicatilcg hosts
networks are popular
popular in homes
libraries and internet
16.3.2 wide-area networks
wide-area networks wide-area
networks wide-area networks
wide-area networks emerged
academic research project
project to provide
provide efficient communication
communication among sites
community of users
users the first
arpanet has grown
four-site experimental network
network of networks
millions of computer
large geographical area
slow and unreliable
links are telephone
channels these communication
links are controlled
controlled by special
responsible for defilcing
defilcing the interface
netwot k host
host communication processor
communication processor figure
internet wan enables
wan enables hosts
geographically separated sites
sites to communicate
computers typically differ
generally on lans
internet via regional
networks the regional
northeast united states
form the worldwide
worldwide network connections
connections between networks
line for sites
sites requiring faster
requiring faster internet
faster internet access
tls are collected
units that work
work in parallel
parallel to provide
provide more throughput
throughput for instance
control the path
path each message
net this routing
increase commmlication efficiency
reduce security risks
wans use standard
standard telephone lines
means of communication
accept digital data
side and convert
destination site converts
converts the analog
back to digital
receives the data
data the unix
unix news network
systems to communicate
messages the messages
transferred to specific
slower than lans
transmission rates range
superseded by ppp
point-to-point protocol ppp
protocol ppp functions
functions over modem
allowing home computers
ways each configuration
configuration has advantages
compare the configurations
cost the cost
linking the sites
system communication cost
money to send
message from site
site b availability
availability the extent
links or sites
topologies are depicted
graphs whose nodes
correspond to sites
sites an edge
edge from node
node b corresponds
direct communication link
fully connected network
number of links
number of sites
huge installation cost
fully connected networks
networks are impractical
ntially direct links
direct links exist
exist between some-but
some-but not all-pairs
all-pairs of sites
configuration is lower
sequence of communication
links this requirement
higher communication cost
communication link fails
reach their destination
system is split
partially connected network
connected network types
network types include
types include tree-structured
include tree-structured networks
characteristics and installation
installation and communication
communication costs installation
network can result
links must fail
fail for partition
partition to occur
degree of availability
cost is high
cross a large
single link results
failure the star
low communication cost
network partially connected
tree-structured network star
network star network
network f ring
ring network figure
central site fails
system become disconnected
discussed the physical
aspects of networking
workings the designer
network must address
address five basic
two processes locate
communicate routing strategies
network packet strategies
strategies are packets
sequence connection strategies
two processes send
send a sequence
sequence of messages
resolve conflicting demands
network s lise
resolution the first
component of network
process at site
process identifier beca
beca use networked
networked systems share
share no memory
processes on remote
network and identifier
host a host
make it easier
easier for users
hosts named homer
easier to remember
names are convenient
convenient for humans
computers prefer numbers
numbers for speed
speed and simplicity
describes the destination
hardware this mechanism
binding that occurs
occurs during program
case of host
two possibilities exist
names and addresses
similar to binding
binding at compile
adding or removing
removing a host
network requires updati.n.g
updati.n.g the data
hosts the alternative
distribute the information
information among systems
network the network
protocol to distribute
distribute and retrieve
retrieve the information
information this scheme
binding the first
specifies the naming
name-to-address resolution hosts
addressed with multipart
addresses the parts
address progress frorn
separating the fields
fields for instance
refers to host
depattment of science
science at brown
systems the resolves
resolves in reverse
returns the address
host in host-id
host-id is returned
communicate with bob.cs.brown.edu
bob.cs.brown.edu would result
kernel of system
system a issues
issues a request
server for brown.edu
nance server returns
brown.edu name server
kernel on system
address and asks
asks about cs.brown.edu
address is returned
address for bob.cs.brown.edu
returns an host-id
server to speed
speed the process
resolve two portions
returning a pointer
cs.brown.edu name server
server is moved
optimizations have occurred
back-up name servers
servers that duplicate
duplicate the contents
service was introduced
file that contained
contained the names
periodically all hosts
copy the updated
file from sri-nic
contact new systems
systems or find
hosts whose addresses
addresses had changed
site is responsible
responsible for updating
updating the host
domain for instance
retrieve the updated
distribute the responsibility
responsibility for host-name
host-name and host-id
api to design
design a program
program that maps
maps ip names
addresses the program
host or returns
returns a message
java class representing
address the static
static method getbyname
class is passed
passed a string
program then invokes
invokes the gethostaddress
internally uses dns
system is responsible
responsible for accepting
processes a message
destined for host
transferring that message
host the kernel
responsible for transferring
transferring the message
i.e java dnslookup
java dnslookup www.wiley.com
www.wiley.com i public
public class dnslookup
public static void
static void main
hostaddress = inetaddress.getbyname
system err println
java program illustrating
illustrating a dns
16.5.2 routing strategies
star or tree-structured
multiple physical paths
routing options exist
exist each site
indicating the alternative
sites the table
table may include
speed and cost
programs that exchange
exchange routing information
common routing schemes
routing a path
hardware failure disables
path is chosen
costs are minimized
sessions involving messages
routing the path
decision is made
assigned different paths
make a decision
decision to send
send the message
decide to send
site will deliver
deliver the message
schem.es fixed routing
adapt to link
failures or load
remedy this problem
dynamic routing fixed
routing fixed routing
routing and virtual
virtual routing ensure
ensure that ncessages
messages may arrive
out of order
problem by appending
appending a sequence
complicated to set
routing in complicated
complicated environments unix
hosts within simple
networks and dynamic
routing for complicated
complicated network environments
mix the two
reach the system
system that connects
connects the local
routing to reach
reach any host
computer network responsible
responsible for routing
messages a router
computer with routing
two network cmmections
router it makes
makes this determination
determination by examining
examining the destination
destination internet address
checks its tables
tables to determine
determine the location
case of static
table is changed
file is loaded
routers to inform
update their routing
routing tables automatically
tables automatically gateways
gateways and routers
typically are dedicated
dedicated hardware devices
devices that run
out of firmware
16.5.3 packet strategies
packet strategies messages
messages generally vary
vary in length
length to simplify
simplify the system
commonly implement communication
communication with fixed-length
case the sender
reached its destination
packet is returned
long to fit
connection is established
exchange of multiple
16.5.4 connection strategies
reach their destinations
processes can institute
institute to exchange
exchange information pairs
pairs of processes
number of ways
permanent physical link
link is established
link is allocated
scheme is similar
party a calls
communication is terminated
message transfer physical
transfer physical links
links are allocated
dynamically among correspondents
correspondents as needed
periods each message
data with system
network to deliver
correctly this scheme
post-office mailing system
system each letter
address and source
address many messages
switching one logical
number of packets
packets each packet
include a source
network the packets
reassembled into messages
harmful for data
broken into packets
schemes circuit switching
circuit switching requires
switching requires substantial
requires substantial set-up
waste network bandwidth
incurs less overhead
overhead for shipping
shipping each message
message and packet
packet switching require
require less set-up
incur more overhead
overhead per message
divided into packets
reassembled packet switching
16.5.5 contention depending
link may cmmect
simultaneously this situation
ring or multiaccess
multiaccess bus network
retransmit the information
provisions are made
resulting in degraded
developed to avoid
avoid repeated collisions
including collision detection
detection and token
csma before transmitting
transmitting a message
site must listen
listen to determine
link is free
site can start
continue to listen
sites begin transmitting
transmitting each site
random time interval
collisions may occur
common local area
local area network
area network system
system one strategy
strategy for limiting
limiting the number
number of collisions
limit the number
number of hosts
hosts per ethernet
adding more hosts
network could result
result in poor
poor network throughput
throughput as systems
systems get faster
send more packets
number of systems
systems per ethernet
generally is decreasing
passing a unique
unique message type
information must wait
removes the token
ring and begins
begins to transmit
transmit its messages
completes its round
round of message
retransmits the token
token this action
site to receive
receive and remove
remove the token
start its message
token gets lost
system must detect
detect the loss
loss and generate
choose a unique
present one election
algorithm a token-passing
systems the benefit
performance is constant
adding new sites
network may lengthen
lengthen the waiting
large performance decrease
happen on ethernet
lightly loaded networks
systems can send
designing a communication
complexity of coordinating
coordinating asynchronous operations
asynchronous operations communicating
slow and error-prone
environment in addition
network must agree
set of protocols
protocols for determining
determining host names
simplify the design
partitioning the problem
problem into multiple
layers each layer
communication takes place
place between peer
environment iso environment
iso environment real
environment real systems
real systems environment
systems environment figure
two computers communicating
iso network model
protocol the protocols
implemented in hardware
software for instance
shows the logical
lowest-level layers implemented
international standards organization
layer the physical
layer is responsible
responsible for handling
systems must agree
stream of electrical
properly as binary
data this layer
layer is implemented
layer the data-link
responsible for handlingfiames
parts of packets
including any error
detection and recovery
recovery that occurs
layer the network
responsible for providing
handling the addresses
addresses of outgoing
decoding the addresses
addresses of incoming
maintaining routing information
information for proper
response to changing
changing load levels
load levels routers
levels routers work
layer the transport
responsible for low-level
messages between clients
including partitioning messages
messages into packets
maintaining packet order
generating physical addresses
layer the session
responsible for implementing
process-to-process communication protocols
communications for remote
file and mail
layer the presentation
responsible for resolving
resolving the differences
differences in formats
including character conversions
half duplex-full duplex
duplex-full duplex modes
layer the application
responsible for interacting
directly with users
users this layer
deals with file
transfe1 ~ remote-login
schemas for distributed
summarizes the set
set of cooperating
protocols-showing the physical
flow of data
data as mentioned
logically each layer
protocol stack communicates
layer and end-user
end-user application process
application process distributed
process distributed information
distributed information transfer-syntax
information transfer-syntax negotiation
transfer-syntax negotiation data-representation
negotiation data-representation transformations
data-representation transformations dialog
dialog and synchronization
control for application
application entities network-independent
entities network-independent message-interchange
network-independent message-interchange service
end-to ~ end
end message transfer
set-up and clearing
clearing application layer
application layer presentation
layer presentation layer
presentation layer session
layer session layer
session layer transport
layer transport layer
transport layer network
layer network layer
network layer data-link
layer data-link control
link layer mechanical
mechanical and electrical
electrical networkcinterface connections
networkcinterface connections physical
connections physical connection
connection to network
network termination equipment
termination equipment physical
equipment physical layer
iso protocol stack
data-link -layer header
-layer header network-layer
header network-layer header
network-layer header transport-layer
header transport-layer header
header f-------1 session-layer
f-------1 session-layer header
header f-------1 presentation
f-------1 presentation layer
layer f-------1 application
f-------1 application layer
application layer message
_____j data-link -layer
data-link -layer trailer
-layer trailer figure
iso network message
level in turn
turn each layer
layer may modify
modify the message
message and il1.clude
il1.clude message-header data
reaches the data-network
target system receives
receives these data
message is moved
stripped of headers
reaches the application
iso model formalizes
earlier work done
done in network
widely adopted protocol
adopted protocol stack
virtually all internet
sites the tcp
stack has fewer
combilles several functions
difficult to implement
efficient than iso
networking the relationship
iso and tcp
models is shown
application layer identifies
identifies several protocols
protocols ill widespread
smtp the transport
transport layer identifies
identifies the unreliable
connectionless user datagram
user datagram protocol
connection-oriented transmission control
transmission control protocol
routing ip datagrams
internet the tcp
identify a link
link or physical
laye1 ~ allowing
traffic to run
network in section
design and implementation
modern communication protocol
protocol both strong
encryption are needed
needed for secure
secure communication strong
communication strong authentication
strong authentication ensures
protects the contents
communication from eavesdropping
eavesdropping weak authentication
authentication and clear-text
variety of reasons
iso presentation session
presentation session physical
physical tcp http
ftp not defined
defined not defined
tcp-udp not defined
protocols were designed
frequently less important
important than performance
strong authentication requires
requires a multistep
multistep handshake protocol
protocol or authentication
protocol modern cpus
efficiently perform encryption
systems frequently offload
frequently offload encryption
encryption to separate
separate cryptography processors
compromised longdistance communication
secure by authenticating
authenticating the endpoints
endpoints and encrypting
encrypting the stream
stream of packets
virtual private network
15.4.2 lan communication
lan communication remains
communication remains unencrypted
includes strong native
strong native authentication
improve even lan
system may suffer
types of hardware
types to ensure
system is robust
reconfigure the system
computation can continue
link is repaired
16.7.1 failure detection
unable to differentiate
differentiate among link
failures has occurred
link and site
suppose that sites
direct physical link
m.essage if site
receive this message
predetermined time period
assume that site
period to receive
receive an j-am-up
send an are-you-up
received an j-am-up
type of failure
failure has occurred
differentiate between link
failure and site
failure by sending
sending an are-you-up
receives this message
immediately replies positively
positively this positive
positive reply tells
advance how long
message to travel
sends the are-you-up
receives the reply
sih1ations has occurred
events has occurred
16.7.2 reconfiguration suppose
initiate a procedure
system to reconfigure
continue its normal
site has failed
reached no longer
site the failure
site that serves
requires the election
site is part
camwt be reached
two sites serve
network is partitioned
initiate conflicting actions
coordinators are responsible
implementing mutual exclusion
processes are executing
recovery from failure
link or site
site is repaired
accomplish this notification
repeating the handshaking
handshaking procedure described
suppose that site
wlcen it recovers
sites to update
update its local
list of sites
messages and mail
16.7.4 fault tolerance
tolerance a distributed
system must tolerate
level of failure
failure and continue
continue to function
types of failures
making a facility
facility fault tolerant
fault tolerant starts
term fault tolerance
broad sense communication
sense communication faults
stops before performing
performing an erroneous
decays of storage
failures the degradation
failures that caused
system that grinds
difficult and expensive
expensive to implement
multiple redundant communication
redundant communication paths
paths and network
switches and routers
routers are needed
needed to avoid
avoid a cmnmunication
failure a storage
data storage units
units can include
include redundant hardware
redundant hardware components
case of failure
failure in addition
systems can ensure
ensure continued access
failure without redundancy
facility to stop
operation the inost
inost simple system
simple system failure
system failure involves
involves a system
running only stateless
applications these applications
compromising the operation
applications can run
operation can continue
systems involve running
involve running applications
applications that access
access and modify
modify shared data
data-centric computing facilities
difficult to make
make fault tolerant
tolerant they failure-monitoring
software and special
infrastructure for instance
cluster and sun
sun cluster include
set of shared
disk the running
application s node
node has exclusive
application s data
data on disk
application is monitored
camwt be restarted
entire computer fails
node s exclusive
data is terminated
cluster the application
application is restarted
node the application
loses whatever state
system s memory
state it last
user s point
service was interrupted
applications may improve
functionality by implementing
implementing lock management
clustering with lock
application can run
run on multiple
data on shared
shared disks concurrently
disks concurrently clustered
concurrently clustered databases
databases frequently implement
implement this functionality
functionality if anode
transactions can continue
notice no interruption
interruption of service
cluster any noncommitted
node are lost
designed to retry
retry noncommitted transactions
detect a failure
making the multiplicity
multiplicity of processors
processors and storage
system the user
transparent distributed system
distinguish between local
local and remote
resources were local
responsible for locating
locating the resources
aspect of transparency
transparency is user
machine a transparent
distributed system facilitates
system facilitates user
facilitates user mobility
mobility by bringiicg
user s environment
system from cmu
cmu and project
athena from mit
scale ; nfs
nfs can provide
system to adapt
adapt to increased
increased service load
service load systems
systems have bounded
saturated under increased
server s cpu
high utilization rate
accurately a scalable
scalable system reacts
gracefully to increased
reach a saturated
accommodate an ever-growing
ever-growing load adding
adding new resources
resources might solve
solve the problem
generate additional indirect
additional indirect load
system can clog
clog the network
network and increase
increase service loads
expanding the system
system can call
call for expensive
expensive design modifications
modifications a scalable
potential to grow
ability to scale
expanding the network
network by adding
adding new machines
machines or interconnecting
interconnecting two networks
networks is commonplace
commonplace in short
design should withstand
withstand high service
high service load
enable simple integration
integration of added
scalability is related
related to fault
heavily loaded component
paralyzed and behave
shifting the load
component s backup
backup can saturate
resources is essential
essential for ensuring
handling peak loads
peak loads gracefully
gracefully an inherent
potential for fault
tolerance and scalability
multiplicity of resources
design can obscure
obscure this potential
fault-tolerance and scalability
scalability considerations call
design demonstrating distribution
distribution of control
control and data
large-scale distributed systems
theoretical no magic
magic guidelines ensure
ensure the scalability
easier to point
out why current
discuss several designs
designs that pose
problems and propose
propose possible solutions
context of scalability
principle for designing
designing very large-scale
number of nodes
system any service
mechanism whose load
demand is proportional
system is destined
adding more resources
problem the capacity
mechanism simply limits
limits the growth
principle concerns centralization
concerns centralization central
centralization central control
central control schemes
schemes and central
examples of centralized
entities are central
central authentication servers
central naming servers
central file servers
file servers centralization
form of functional
asyrrunetry among machines
constituting the system
system the ideal
functionally symmetric configuration
degree of autonomy
principle for instance
incorporating diskless machines
diskless machines violates
machines violates functional
violates functional symmetry
autonomy and symmetry
symmetry are important
servers are supposed
supposed to operate
efficiently in peak
hundreds of active
simultaneously a single-process
request necessitates disk
assigning a process
expense of frequent
frequent context switches
considered a related
related problem occurs
group of lightweight
processes as multiple
threads of control
serves single requests
scheduling of threads
preemptive or nonpreemptive
nonpreemptive if threads
threads are allowed
allowed to run
run to completion
explicit locking mechanism
form of lightweight-process
scheme is essential
essential if servers
name-resolution issue raised
raised in section
16.5.1 and examine
examine its operation
operation with respect
needed to transfer
transfer a packet
packet between hosts
explained in section
describing the host
host-id is split
number the proportion
internet adrninistrators assign
assign a network
number is free
free to assign
sending system checks
checks its routing
tables to locate
locate a router
router to send
send the frame
host-id to transfer
transfer the packet
network the destination
system then receives
packet the packet
reassembled and passed
layer for transmission
move from sender
host or router
receiver ethernet device
unique byte number
addressing two devices
networking software generates
system this packet
special network address
hosts should receive
receive and process
process the packet
re-sent by gateways
local network receive
arp request responds
responds and sends
back its mac
system that initiated
initiated the query
query for efficiency
caches the ip-mac
ip-mac address pair
table the cache
forgotten for added
heavily used hosts
device has announced
announced its host-id
host-id and address
communication can begin
begin a process
communicate networking software
networking software takes
lookup the message
message is passed
detection of packet
device the data
headers that compose
compose the message
source to destination
included as data
find the ethernet
place the packet
wire the destination
destination ethernet device
device then sees
sees its address
packet and reads
source system finds
network and sends
sends the packet
packet there routers
routers then pass
pass the packet
1-mtil it reaches
reaches its bytes
address or broadcast
broadcast ethernet address
ethernet address length
length in bytes
bytes message data
message data message
long for error
error detection figure
network the router
router that connects
connects the destination
destination network checks
checks its arp
finds the ethernet
header may change
packet is received
received and processed
buses and telephone
lines the processors
large general-purpose computer
general-purpose computer systems
system are connected
ways the network
bus the communication-network
design must include
routing and com1ection
solve the problems
problems of contention
contention and security
user with access
resources the system
provided by data
network layering models
massage the message
reaches its destination
destination a naming
needed to translate
translate the network
network device address
systems are located
located on separate
needed to pass
packets from source
network to destination
detect hardware failures
failures and reconfigure
failure is repaired
devices for routers
routers and gateways
idea for gateways
gateways to pass
pass broadcast packets
packets between networks
advantages of doing
layer that senses
collisions and retransmits
immediately on detection
collision what problems
problems could arise
specifies seven layers
layers of functionality
systems use fewer
layers to implement
implement a network
layers what problems
network model provide
model provide datagram
provide datagram service
guarantees for messages
messages a transport-layer
provide reliability discuss
supporting reliable message
reliable message delivery
lowest possible layer
disadvantages of making
making the computer
computer network transparent
network more effective
differences in architectures
architectures and operating
describe a method
method for process
topologies in terms
bandwidth for concurrent
communications c installation
cost d load
balance in routing
dynamic routing strategy
routing strategy affect
strategy affect application
affect application behavior
type of applications
original http protocol
protocol used tcp
underlying network protocol
separate tcp session
session was constructed
overhead of building
building and destroying
destroying tcp lip
tcp lip connections
performance problems resulted
make to improve
improve http performance
kinds of applications
applications is circuit
switching a viable
static host tables
tables what problems
problems or complications
servers what methods
decrease the amount
amount of traffic
traffic name servers
generate to satisfy
satisfy translation requests
make each host
read each packet
packet to determine
determine that packet
packet s destination
difference between computation
migration and process
run the program
www.wiley.com www.cs.yale.edu www.apple.com
www.apple.com www.westminstercollege.edu www.ietf.org
build a robust
robust distributed system
kinds of failures
failures can occur
types of failure
explain why doubling
doubling the speed
segment may result
result in decreased
decreased network performance
servers are organized
longer than normal
recovery in distributed
distributed systems tanenbaum
provide general overviews
overviews of computer
computer networks williams
covers computer networking
protocols are described
described in comer
coverage of tcp
found in stevens
unix network programming
programming is described
discussions concerning distributed
distributed operating-system structures
offered by coulouris
tanenbaum and van
balancing and load
sharing are discussed
discussed by i-iarchol-balter
i-iarchol-balter and downey
vee and i-isu
i-iarish and owens
describes load-balancing dns
load-balancing dns servers
dns servers process
servers process migration
migration is discussed
discussed by jul
han and ghosh
distributed virtual machine
machine for distributed
systems are examined
examined in sirer
discussed network construction
low-level protocols needed
transfer between systems
multiple users share
users share files
files and storage
kind of sharing
designed and implemented
discuss common concepts
dfss are based
illustrate our concepts
concepts by examining
examining one influential
influential dfs-the andrew
dfs-the andrew file
explain the naming
transparency and independence
methods for accessing
accessing distributed files
stateful and stateless
stateless distributed file
distributed file servers
show how replication
replication of files
redundancy for improving
introduce the andrew
loosely coupled computers
coupled computers interconnected
computers can share
share physically dispersed
physically dispersed files
systems in general
commercial transarc dfs
transarc dfs product
refers to nfs
explain the structure
define the terms
software entity running
machines and providing
type of function
function to clients
service software running
invoke a service
operations that form
interface is defined
actual cross-machine interaction
system provides file
services to clients
clients a client
service is formed
set of primitive
primitive file operations
delete a file
primary hardware concponent
file server controls
set of local
local secondary-storage devices
clients  requests
system whose clients
multiple and independent
configuration and implementation
dfs may vary
vary from system
system to system
run on dedicated
client a dfs
implemented as part
layer whose task
manage the communication
communication between conventional
conventional operating systems
systems and file
systems the distinctive
multiplicity and autonomy
autonomy of clients
clients and servers
centralized file system
system the multiplicity
multiplicity and dispersion
servers and storage
dfs to locate
locate the files
data a dfs
dfs facilitates user
mobility by bringing
bringing a user
important performance measure
satisfy service requests
requests in conventional
consists of disk-access
amount of cpu-processing
additional overhead attributed
structure this overhead
deliver the request
overhead of running
running the communication
communication protocol software
software the performance
dfs s transparency
conventional file system
set of dispersed
dispersed storage devices
key distinguishing feature
storage space managed
dfs is composed
remotely located smaller
located smaller storage
smaller storage spaces
constituent storage spaces
storage spaces correspond
correspond to sets
sets of files
files a cmnpm1.c
set of files
units all files
unit must reside
mapping between logical
logical and physical
objects for instance
deal with logical
logical data objects
data objects represented
represented by file
system manipulates physical
manipulates physical blocks
lower-level numerical identifier
turn is mapped
mapped to disk
blocks this multilevel
mapping provides users
file that hides
hides the details
disk the file
file is stored
dimension is added
network the file
range is expanded
expanded to include
include the specific
concept of treating
files as abstractions
returns a set
file s replicas
existence of multiple
locations are hidden
17.2.1 naming structures
differentiate two related
two related notions
reveal any hint
file s physical
physical storage location
level of naming
user-level textual names
names and system-level
system-level numerical identifiers
location-independent naming scheme
two different times
current dfss provide
provide a static
mapping for user-level
names these systems
changing the location
automatically is impossible
notion of location
independence is irrelevant
disk blocks files
files and disks
moved between machines
file migration implies
implies an automatic
action only afs
experimental file systems
file systems support
systems support location
support location independence
independence and file
file mobility afs
mobility afs supports
supports file mobility
purposes a protocol
protocol provides migration
migration of afs
afs component units
units to satisfy
satisfy high-level user
high-level user requests
differentiate location independence
independence and static
static location transparency
divorce of data
data from location
exhibited by location
abstraction for files
files a file
denote the file
viewed as logical
logical data containers
specific storage location
transparency is supported
denotes a specific
set of physical
physical disk blocks
transparency provides users
share data users
users can share
share remote files
naming the files
files were local
sharing the storage
space is cumbersome
attached to physical
physical storage devices
storage devices location
devices location independence
location independence promotes
independence promotes sharing
objects when files
system-wide storage space
single virtual resource
ability to balance
balance the utilization
utilization of disks
location independence separates
separates the naming
structure by contrast
names are transparent
expose the correspondence
correspondence between component
units and machines
machines the machines
machines are configured
structure this configuration
configuration may restrict
restrict the architecture
um1.ecessarily and conflict
considerations a server
server in charge
hierarchy and contradicts
contradicts decentralization guidelines
clients can access
access files residing
residing on remote
remote server systems
rely on servers
servers to provide
provide all files
including the operatingsystem
operatingsystem kernel special
kernel special protocols
protocols are needed
workstation the diskless
code to retrieve
retrieve the kernel
special boot protocol
stored in read-only
invoked it enables
networking and retrieves
kernel or boot
kernel is copied
network and loaded
advantages of diskless
including lower cost
client machines require
require no disks
operating-system upgrade occurs
performance loss resulting
disks and remote
remote file servers
systems and networking
software are stored
locally ; file
systems containing user
data-and possibly applications-are
possibly applications-are stored
stored on remote
remote file systems
systems some client
systems may store
commonly used applications
processors and web
remote file server
client on demand
demand the main
reason for providing
clients with local
local file systems
pure diskless systems
increasing in capacity
capacity and decreasing
decreasing in cost
appearing every year
systems are growing
work is needed
needed to limit
limit network access
access to improve
improve system throughput
17.2.2 naming schemes
approaches to naming
file is identified
guarantees a unique
path this naming
transparent nor location
files the dfs
dfs is structured
collection of isolated
isolated component units
entire conventional file
component 1-mits remain
1-mits remain isolated
means are provided
approach was popularized
popularized by sun
sun s network
component of onc
networking package supported
unix vendors nfs
means to attach
attach remote directories
directories to local
giving the appearance
coherent directory tree
early nfs versions
nfs versions allowed
previously mmmted remote
mmmted remote directories
mounts are done
done on demand
table of mount
points and file-structure
file-structure names components
components are integrated
integrated to support
support transparent sharing
integration is limited
machine may attach
attach different remote
tree the resulting
structure is versatile
achieve total integration
component file systems
global name structure
composed file-system structure
system in practice
unix device files
files and machine-specific
machine-specific binary directories
make this goal
difficult to attain
evaluate naming structures
local directory tree
server becomes unavailable
machines becomes unavailable
separate accreditation mechanism
accreditation mechanism controls
controls which machine
machine is allowed
allowed to attach
attach which directory
remote directory tree
17.2.3 implementation techniques
implementation techniques implementation
implementation of transparent
transparent naming requires
requires a provision
files into component
units and provide
provide the mapping
basis this aggregation
aggregation serves administrative
serves administrative purposes
hierarchical directory tree
tree to provide
provide name-to-location mapping
recursively into directories
enhance the availability
crucial mapping information
location independence means
replicating the mapping
makes a simple
simple yet consistent
impossible a teclllcique
teclllcique to overcome
overcome this obstacle
low-level me textual
textual file names
names are mapped
mapped to lower-level
lower-level file identifiers
unit the file
belongs these identifiers
replicated and cached
invalidated by migration
migration of component
units the inevitable
level of mapping
maps component units
units to locations
consistent update mechanism
update mechanism implementing
implementing unix-like directory
unix-like directory trees
low-levet location-independent identifiers
location-independent identifiers makes
invariant under component-unit
component-unit location mapping
implement low-level identifiers
names these names
names are bit
parts the first
first part identifies
identifies the component
invariant of structured
times by taking
sufficiently more bits
done in apollo
view this process
taking a location-transparent
adding another level
level of abstraction
abstraction to produce
produce a location-independent
lower-level locationindependent file
locationindependent file identifiers
identifiers are techniques
exemplified in afs
user who requests
file the server
storing the file
actual data transfer
achieve this transfer
requests for accesses
accesses are delivered
server machine performs
performs the accesses
results are forwarded
ways of implementing
implementing remote service
remote procedure call
direct analogy exists
exists between disk-access
methods in conventional
conventional file systems
method is analogous
analogous to performing
performing a disk
ensure reasonable performance
form of caching
caching in conventional
rationale for caching
reduce both network
traffic and disk
describe the implementation
implementation of caching
dfs and contrast
basic remote-service paradigm
17.3.1 basic caching
basic caching scheme
scheme the concept
concept of caching
caching is simple
satisfy the access
data is brought
client system accesses
accesses are performed
copy the idea
retain recently accessed
recently accessed disk
accessed disk blocks
additional network traffic
cache size bounded
bounded no direct
direct correspondence exists
exists between accesses
accesses and traffic
master copy residing
file are scattered
copy is modified
copy to preserve
preserve the relevant
relevant consistency semantics
semantics the problem
problem of keeping
keeping the cached
cached copies consistent
section 17.3.4 dfs
17.3.4 dfs caching
sincilarly to demand-paged
remote server nfs
implement virtual memory
notwithstanding the resulting
resulting performance penalty
dfs can vary
vary from blocks
data are cached
satisfy a single
data this procedure
afs caches files
files in large
chapter support caching
caching of individual
driven by client
client demand increasing
increasing the caching
caching unit increases
increases the hit
increases the miss
requires more data
transferred it increases
increases the potential
potential for consistency
selecting the unit
unit of caching
involves considering parameters
network transfer unit
rpc protocol service
protocol service unit
units of cached
disassembled for delivery
delivery and reassembled
reassembled on reception
size and total
total cache size
importance for blockcaching
schemes in unix-like
common block sizes
large block sizes
beneficial for smaller
result in fewer
lower hit ratio
17.3.2 cache location
data be stored-on
main memory disk
memory disk caches
advantage over main-memory
modifications to cached
data are lost
volatile memory moreove1
main-memory caches permit
caches permit workstations
technology is moving
moving toward larger
memory the resulting
resulting performance speedup
speedup is predicted
predicted to outweigh
outweigh the advantages
advantages of disk
speed up disk
caches are located
build a single
single caching nl.echanism
servers and users
hybrids of caching
caching and remote
service in nfs
implementation is based
based on remote
augmented with client
client and server-side
server-side memory caching
caching for performance
performance similarly sprite
sprite s implementation
based on caching
method is adopted
evaluate the degree
method is emphasized
provide disk caching
recent solaris implementations
solaris implementations ofnfs
include a clientside
clientside disk-caching option
nfs client reads
client reads blocks
copy is flushed
cache is referenced
server to retrieve
retrieve the block
cache for client
17.3.3 cache-update policy
policy the policy
write modified data
modified data blocks
data blocks back
server s master
reliability the simplest
data to disk
information is lost
client system crashes
requires each write
access to wait
poor write performance
write performance caching
caching with write-through
write-through is equivalent
service for write
accesses and exploiting
caching for read
master copy modifications
modifications are written
advantages over write-through
writes are made
write accesses complete
delayed-write schemes introduce
schemes introduce reliability
introduce reliability problems
user machine crashes
delayed-write policy differ
blocks are flushed
server one alternative
flush a block
client s cache
cache this option
option can result
result in good
blocks can reside
cache a long
server a compromise
scan the cache
cache at regular
nfs server network
server network workstation
network workstation figure
local cache sprite
30-second interval nfs
policy for file
write is issued
durilcg a cache
write must reach
reach the server
server s disk
nfs treats meta
treats meta data
data and file-attribute
differently any metadata
loss and directory-structure
corruption are avoided
nfs with cachefs
local disk cache
disk cache area
cachefs improves performance
performance over standard
cachefs cache hit
hit but decreases
high cache hit
cache hit rate
rate to gain
gain performance figure
shows how cachefs
cachefs uses write-through
write-through and write-back
variation on delayed
case of files
open for short
significantly reduce network
reduce network traffic
traffic in addition
write-on-close policy requires
requires the closing
process to delay
file is written
reduces the performance
advantages of delayed
writes for files
policy over delayed
flushing are apparent
consistency a client
machine is faced
problem of deciding
locally cached copy
data is consistent
client machine determines
out of date
longer be served
data an up-to-date
approaches to verifying
verifying the validity
validity of cached
approach the client
initiates a validity
contacts the server
server and checks
data are consistent
copy the frequency
approach and determines
determines the resulting
resulting consistency semantics
check is delayed
initiated at fixed
fixed time intervals
check can load
approach the server
parts of files
detects a potential
react a potential
potential for inconsistency
two different clients
clients in conflicting
conflicting modes cache
cache a file
resolve the potential
play an active
role the server
open the server
simultaneously in conflicting
modes by disabling
disabling caching results
results in switching
17.3.5 a comparison
comparison of caching
choice between caching
remote service trades
potentially increased performance
performance with decreased
simplicity we evaluate
evaluate this tradeoff
tradeoff by listing
listing the advantages
cache can handle
handle a substantial
remote accesses efficiently
accesses efficiently capitalizing
capitalizing on locality
locality in file-access
file-access patterns makes
patterns makes caching
served as fast
servers are contacted
load and network
traffic are reduced
potential for scalability
scalability is enhanced
enhanced by contrast
access is handled
network the penalty
penalty in network
performance is obvious
total network overhead
overhead is lower
lower for transmitting
transmitting big chunks
chunks of data
done in caching
series of responses
responses to specific
segments of data
random disk blocks
drawback of caching
caching when access
access patterns exhibit
patterns exhibit infrequent
exhibit infrequent writes
caching is superior
writes are frequent
employed to overcome
overcome the consistency
consistency problem incur
problem incur substantial
incur substantial overhead
overhead in terms
terms of performance
caching will confer
confer a benefit
out on machines
disks or large
large main memories
main memories remote
memories remote access
access on diskless
transferred en masse
lower-level intermachine interface
upper-level user interface
interface the remote-service
local file-system interface
intermachine interface mirrors
mirrors the user
approaches for storing
storing server-side information
client accesses remote
accesses remote files
tracks each file
file being accessed
simply provides blocks
client without knowledge
provided is stateful
typical scenario involving
client must perform
perform an open
file before accessing
accessing that file
server fetches information
client a connection
fetches the inode
client a file
table of inodes
subsequent accesses ru1.til
ru1.til the session
ends a stateful
service is characterized
closing the file
server must reclaim
reclaim the main-memory
active the key
point regarding fault
stateful service approach
server keeps main-memory
stateful file service
avoids state information
information by making
making each request
identifies the file
full the server
table of open
files in main
establish and terminate
terminate a com1.ection
com1.ection through open
file operation stands
session a client
process would open
remote message reads
place as remote
local operation nfs
stateless file service
service is increased
information is cached
cached in main
saving disk accesses
accesses in addition
file is open
open for sequential
blocks stateless servers
stateless servers cmmot
client s requests
distinction between stateful
crash that occurs
activity a stateful
stateful server loses
ensuring the graceful
server involves restoring
restoring this state
recovery protocol based
dialog with clients
clients less graceful
graceful recovery requires
occurred be aborted
problem is caused
caused by client
failures the server
reclaim space allocated
allocated to record
record the state
state of crashed
crashed client processes
processes this phenomenon
stateless computer server
computer server avoids
avoids these problems
newly reincarnated server
server can respond
effects of server
failures and recovery
client s point
view the client
client keeps retransmitting
retransmitting its request
receives no response
robust stateless service
service is longer
longer request messages
messages and slower
processing of requests
i,_lformation to speed
speed the processing
processing in addition
stateless service imposes
service imposes additional
imposes additional constraints
identifies the target
low-level naming scheme
remote to local
clients retransmit requests
requests for file
effect and return
output if executed
executed several times
accesses are idempotent
absolute byte count
withilc the file
file they access
done in unix
careful when implementing
implementing destructive operations
deleting a file
make them idempotent
employs the server-initiated
method for cache
camcot provide stateless
provide stateless service
maintains a record
files are cached
descriptors and implicit
servers must mailctain
tables to map
map the file
descriptors to inodes
store the current
file this requirement
employs a stateless
include an explicit
improving availability multimachine
availability multimachine replication
replication can benefit
selecting a nearby
replica to serve
serve an access
access request results
results in shorter
reside on failure-independent
ourcov,era.geofnfs thus .far
0p1y considered version
standard is version
vious versimi.s jhe
jhe most significant
maintains the.state ofthe
the.state ofthe client
ofthe client session
file is 0pt
ned untij itis
untij itis closed
itis closed th.t1s
operations ; previous
ersions of nfs
.np such operations
preytous \ cersions
lounting remote fil
fil ~ systews
lockii1g remote files
prqtocol in patticular
protocol was elimin
elimin ; 1.ted
work with network
notorimis security hole
hole in nps
enhan edthe ability
edthe ability of.dients
of.dients jo cache
cache file data
file data local
che rgther thanh
thanh ; lvingto
request the client
maintains the loci
lea.st = expires
systems .provide advisory
.provide advisory jile
advisory jile locking
windows operatirg systen1
rylockil1g to allov
v4t1qw.p.rovides mandatory locking
locking as vvell
lockinga11d caching mec
mec ~ anisms
anisms are based
whe ~ eby
eby the server
server delegates responsibilities
file s lockand
contents to .the
.the client thatrequested
client thatrequested tnel
ckcrhat delegated client
delegated client maintains
maintains in cache
cache the .current
version of .the
client for lock
egated client reli11quishesth
reli11quishesth ~ lock
andde ~ egation
npsarebasedon the udj
udj network ptqtocol
based on .tcp,whioh
betteraclj \ lstto
lstto varying traffic
varying traffic loads
loads on thel
peleg2lting these responsibilities
responsibilities to cliel
cliel ! cts
reduces the foado11the
foado11the s.eryet and.i
and.i ~ proves.cache.coherency
obvious requirement implies
implies that replication
inherently a location-opaque
location-opaque activity provisions
provisions for placing
placing a replica
desirable to hide
hide the details
details of replication
replication from users
mapping a replicated
existence of replicas
invisible to higher
levels at lower
names another transparency
requirement is providing
providing replication control
control at higher
higher levels replication
levels replication control
replication control includes
control includes determination
degree of replication
placement of replicas
expose these details
details to users
administrators with mechanisms
mechanisms to control
control the replication
replicas is updating
relevant consistency sen1antics
preserved when accesses
accesses to replicas
replicas are viewed
viewed as virtual
replicas  logical
files if consistency
sacrificed for availability
availability and performance
area of fault
creating a potential
potential for indefinite
sake of guaranteed
guaranteed progress locus
extensively and sacrifices
case of network
sake of availability
availability of files
files for read
approach the domain
local replica exists
mapping is relative
two identical identifiers
identical identifiers ibis
identifiers ibis supports
ibis supports demand
supports demand replication
automatic replication-control policy
replication-control policy similar
similar to whole-file
caching under demand
nonprimary replica updates
updates are performed
atomic and serialized
valid to satisfy
satisfy remote write
remote write accesses
migrate the primary
distributed computing environment
computing environment designed
implemented at carnegie
carnegie mellon university
university the andrew
constitutes the underlying
underlying information-sharing mechanism
mechanism among clients
development of afs
purchased by ibm
produced several commercial
implementations of afs
result was part
ibm s transarc
transarc lab announced
announced that afs
ibm public license
dfs was canceled
commercial product openafs
linux and microsoft
support the dce
based on afs
work is ongoing
ongoing to make
dce a cross-platform
universally accepted dfs
dfs as afs
afs and transarc
dfs is named
seeks to solve
feature-rich nonexperimental dfs
dfs it features
features a uniform
uniform name space
location-independent file sharing
caching with cache
authentication via kerberos
includes server-side caching
form of replicas
availability through automatic
server is unavailable
attributes of afs
afs is scalability
system is targeted
targeted to span
workstations between afs
hundreds of implementations
17.6.1 overview afs
overview afs distinguishes
distinguishes between client
dedicated server machines
server machines servers
servers and clients
clients originally ran
systems the clients
servers are interconnected
network of lans
lans or wans
clients are presented
space of file
collectively called vice
software they run
present the shared
shared name space
location-transparent file hierarchy
local name space
root file system
space descends workstations
descends workstations run
run the virtue
protocol to communicate
communicate with vice
stores its local
collectively are responsible
storage and management
space the local
space is small
system programs essential
essential for autonomous
performance also local
local are temporary
files and files
servers are structured
structured in clusters
wan each cluster
collection of workstations
representative of vice
cluster is com1.ected
router the decomposition
decomposition into clusters
clusters is done
primarily to address
problem of scale
scale for optimal
making cross-cluster file
cross-cluster file references
references relatively infrequent
based on considerations
considerations of scale
scale the basic
light of experience
indicating that server
server cpu speed
system s bottleneck
remote file operations
feature reduces file-open
reduces file-open latency
involving the servers
design of afs
client mobility clients
access any file
workstation a client
client may notice
notice some initial
initial performance degradation
performance degradation due
caching of files
files when accessil
accessil g files
files a workstation
security the vice
interface is considered
considered the boundary
boundary of trustworthiness
executed on vice
vice machines authentication
authentication and secure-transmission
functions are provided
provided as part
connectionbased communication package
communication package based
paradigm after mutual
communicate via encrypted
encrypted messages encryption
encryption is performed
performed by hardware
information about clients
clients and groups
groups is stored
protection database replicated
unlxbits for file
protection the access
access list ncay
ncay contain information
access a directory
users not allowed
jim can access
directory afs supports
supports the access
access types read
defining a clear
interface to vice
key for integration
integration of diverse
diverse workstation hardware
hardware and operating
heterogeneity is facilitated
directory are symbolic
symbolic links pointing
pointing to machine-specific
machine-specific executable files
executable files residing
residing in vice
17.6.2 the shared
afs s shared
space is made
unusually small component
small component units
client few volumes
single disk partition
shrink in size
volumes are glued
unix m01mt mechanism
difference is significant
entire disk partition
key administrative unit
unit and play
play a vital
role in identifying
identifying and locating
locating an individual
directory is identified
afs directory entry
directory entry maps
maps a path-name
fid a fid
uniquifier the vnode
inodes of files
reuse of vnode
keeping certain data
data structures compact
structures compact fids
fids are location
movements from server
server to server
invalidate cached directory
cached directory contents
server a client
client can identify
identify the location
system by querying
querying this database
database the aggregation
aggregation of files
files into volumes
space and utilization
utilization of servers
migrated among disk
partitions and servers
volume is shipped
server is left
left with temporary
temporary forwarding information
site the volume-movement
operation is atomic
operation is aborted
volume is supported
supported for system-executable
vice name space
space the volume-location
volume-location database specifies
specifies the server
list of read-only
read-only replication sites
17.6.3 file operations
operations and consistency
semantics the fundamental
fundamental architectural principle
principle in afs
caching of entire
files from servers
client workstation interacts
interacts with vice
opening and closing
closing of files
remote-service n lethod
distinction has far-reaching
ramifications for performance
semantics of file
workstation intercepts file-system
intercepts file-system calls
calls and forwards
workstation this process
files from vice
opened and stores
stores modified copies
copies of files
venus may contact
opened or closed
closed ; reading
writing of individual
file are performed
copy and bypass
exploited for future
cached file venus
file venus assumes
assumes that cached
files or directories
valid unless notified
open to validate
validate the cached
copy the mechanism
mechanism to support
support this policy
reduces the number
number of cache-validation
cache-validation requests received
received by servers
servers it works
caches a file
updates its state
information to record
record this caching
notifies the client
client before allowing
allowing another client
client to modify
modify the file
removes the callback
client a client
file for open
closes a file
file after modifying
caching this file
lose their callbacks
readin.g and writing
file are done
kernel without venus
venus s intervention
cached copy venus
copy venus regains
venus regains control
updates the file
venus contacts vice
contacts vice servers
opens of files
locally modified files
afs implements session
implements session semantics
exceptions are file
amount of cached
cached validation traffic
replace callbacks lost
machine or network
workstation is rebooted
considers all cached
generates a cache-validation
callback mechanism forces
forces each server
server to maintain
maintain callback information
client to maintain
maintain validity information
amount of callback
server is excessive
server can break
callbacks and reclaim
reclaim some storage
unilaterally notifying clients
clients and revoking
revoking the validity
callback state maintained
maintained by venus
out of sync
inconsistency may result
venus also caches
contents of directories
directories and syncbolic
translation each component
callback is established
venus does lookups
fids no requests
requests are forwarded
cache with callbacks
future open calls
file will involve
involve no network
callback is broken
directory for reasons
reasons of integrity
integrity the vice
interface has well-defined
copy to avoid
re-fetching the directory
17.6.4 implementation client
implementation client processes
processes are interfaced
calls the kernel
kernel is modified
slightly to detect
references to vice
forward the requests
client-level venus process
carries out path-name
out path-name translation
path-name translation component
component by component
cache that associates
volumes to server
locations in order
order to avoid
avoid server interrogation
contacts any server
requests the location
enters that information
cache unless venus
connection to fetch
fetch the file
directory connection establishment
establishment is needed
needed for authentication
authentication and security
file is found
found and cached
copy is created
local disk venus
venus then returns
opens the cached
copy and returns
returns its handle
unix file system
low-level storage system
clients the client
workstation s disk
directory are files
files whose names
names are placeholders
entries both venus
venus and server
server processes access
processes access unix
access unix files
inodes to avoid
avoid the expensive
expensive path-name-to-inode translation
path-name-to-inode translation routine
internal inode interface
visible to client-level
processes are client-level
set of additional
additional system calls
calls was added
system to improve
reliability over ufs
manages two separate
two separate caches
bounded in size
file is flushed
server to remove
remove the callback
file the status
servicing of stat
calls the data
cache is resident
unix i buffering
i buffering mechanism
caching of disk
blocks in memory
transparent to venus
single client-level process
file server services
services all file
req1.1ests from clients
clients this process
package with non-preemptible
scheduling to service
service many client
client requests concurrently
concurrently the rpc
package is integrated
allowing the file
make or service
service one rpc
rpc per lightweight
process the rpc
package is built
low-level datagram abstraction
datagram abstraction whole-file
abstraction whole-file transfer
transfer is implemented
calls one rpc
rpc connection exists
exists per client
binding of lightweight
pool of lightweight
lightweight processes services
processes services client
services client requests
single multithreaded server
multithreaded server process
caching of data
data structures needed
needed to service
single server process
effect of paralyzing
data a transparent
transparent dfs facilitates
dfs facilitates client
facilitates client mobility
bringing the client
client s environment
files are named
popularized by nfs
requests to access
two complementary methods
methods with remote
client with caching
traffic a replacement
bounded the problem
approaches to server-side
file the client
stateful versus stateless
versus stateless service
stateless service paradigms
feature-rich dfs characterized
characterized by location
independence and location
imposes significant consistency
significant consistency semantics
consistency semantics caching
caching and replication
discuss whether afs
afs and nfs
discuss whether clients
systems can obtain
inconsistent or stale
afs b sprite
sprite c nfs
stateful distributed file
system what actions
performed to recover
crash in order
order to preserve
preserve the consistency
disadvantages of path-name
ships the entire
requesting a translation
prefer a locationtransparent
prefer a location-independent
location-independent dfs discuss
chapter would handle
handle a large
multiclient database application
benefits of mapping
objects into virtual
compare and contrast
contrast the teclmiques
teclmiques of caching
caching disk blocks
totally reliable network
consistency and recovery
control for replicated
files are examined
examined by davcev
davcev and burkhard
management of replicated
environncent is covered
covered by brereton
discusses the issue
issue of file
placement on distributed
distributed computer systems
systems a detailed
centralized file servers
file servers appears
appears in svobodova
described by callaghan
system is discussed
discussed by morris
information about openafs
covered in detail
including unix united
locus unix united
united is described
described by brownbridge
discussed by popek
popek and walker
systems for mobile
mobile storage devices
devices are discussed
discussed in kistler
kistler and satyanarayanan
performed on cluster-based
cluster-based distributed file
distributed storage systems
systems for large-scale
settings are presented
presented in dabek
described various mechanisms
processes to synchronize
synchronize their actions
discussed a number
number of schemes
schemes to ensure
ensure the atomicity
transaction that executes
transactions in chapter
described various methods
examine how centralized
centralized synchronization mechanisms
methods for handling
describe various methods
methods for achieving
achieving mutual exclusion
explain how atomic
concurrency-control schemes discussed
schemes for handling
handling deadlock prevention
two events occurred
single common memory
memory and clock
applications may require
aft-er the resource
granted a distributed
events occurred first
first the happened-before
events in distributed
ability to define
define a total
ordering is crucial
present a distributed
algorithm for extending
extending the happened-before
consistent total ordering
18.1.1 the happened-before
law of causality
define the happenedbefore
set of events
assuming that sending
sending and receiving
receiving a message
constitutes an event
event of sending
sending a message
event of receiving
receiving that message
a + band
irreflexive partial ordering
events were executed
illustrate the definitions
definitions of concurrency
concurrency and happened-before
happened-before the horizontal
horizontal direction represents
direction represents space
vertical direction represents
labeled vertical lines
vertical lines denote
lines denote processes
labeled dots denote
dots denote events
events a wavy
wavy line denotes
denotes a message
events are concurrent
relation il figure
two concurrent events
event can affect
processes that care
concurrent events agree
agree on son1.e
implementation to determine
event a happened
perfectly synchronized clocks
first we associate
define the requirement
pair of events
enforce the global
global ordering requirement
environment we define
lci the logical
simple counter incremented
two successive events
successive events executed
assigns a unique
event a occurs
occurs before event
event bin process
event this scheme
process the global
orderil g requirement
requirement is met
met across processes
processes to illustrate
illustrate the problem
receives the message
logical clock ticks
violates our requirement
resolve this difficulty
require a process
process to advance
advance its logical
receives a message
message whose timestamp
timestamp is greater
clock in particulm
process pi receives
tlcenit should advance
advance its clock
realize a total
process identity numbers
numbers to break
create a total
present a number
algorithms for implementing
environment we assume
processor to simplify
simplify our discussion
assume that processes
processes are numbered
one-to-one mapping exists
exists between processes
processes and processors
18.2.1 centralized approach
approach to providing
providing mutual exclusion
system is chosen
chosen to coordinate
coordinate the entry
section each process
invoke mutual exclusion
mutual exclusion sends
sends a request
enter its critical
section after exiting
exiting its critical
sends a release
coordinator and proceeds
receiving a request
coordinator immediately sends
request is queued
receives a release
sends a reply
algorithm ensures mutual
ensures mutual exclusion
exclusion in addition
coordinator is fair-such
fair-such as first-come
starvation can occur
occur this scheme
requires three messages
messages per critical-section
coordinator process fails
describe some algorithms
algorithms for electing
electing a unique
unique new coordinator
system to reconstruct
reconstruct its request
computation can resume
18.2.2 fully distributed
fully distributed approach
distribute the decision
complicated one approach
event-ordering scheme described
sends the message
send a reply
sending a reply
queueing incmning requests
requests and deferring
sends reply messages
decision whether process
process pi replies
message or defers
defers its reply
reply is based
incoming request made
made by process
reply is deferred
exclusion is obtained
freedom from deadlock
deadlock is ensured
freedom from starvation
starvation is ensured
section is scheduled
ordering the timestamp
timestamp ordering ensures
ensures that processes
processes are served
served in fcfs
number of messages
represents the minimum
number of required
entry when processes
consisting of processes
suppose that processes
enter their critical
critical sections process
process p3 sends
logical clocks described
process p2 receives
receives these request
immediately when process
process p1 receives
receives the request
request from process
message is greater
process p3 receives
message from process
reply to process
requires the participation
joins the group
group of processes
process must receive
receive the names
group the interested
reader is referred
entire scheme collapses
monitoring the state
processes are notified
longer send request
send request messages
initiate the procedure
rejoin the group
entered their critical
section must pause
frequently to assure
assure other processes
intend to enter
enter the critical
suited for small
sets of cooperating
18.2.3 token-passing approach
approach another method
method of providilcg
providilcg mutual exclusion
circulate a token
ilc the system
type of message
passed from process
process to process
entitles the holder
holder to enter
logically organized ilc
physical communication network
processes are connected
implement a logical
ring to implement
implement mutual exclusion
pass the token
receives the token
keeping the token
exits its critical
token is passed
receiving the token
passes the token
neighbor this scheme
similar to algorithm
token is substituted
ring is unidirectional
ensured the number
required to implement
exclusion may vary
message per entry
case of high
case of low
token is lost
lost an election
established in section
present an election
algorithm for reconstructing
reconstructing the ring
ring is left
introduced the concept
executed to completion
ensuring the atomicity
system this difficulty
transaction the failure
communication link connecting
connecting the sites
result in erroneous
execution of transactions
distributed system preserves
system preserves atomicity
local transaction coordinator
responsible for coordinating
coordinating the execution
coordinator is responsible
starting the execution
breaking the transaction
number of subtransactions
subtransactions and distributing
distributing these subtransactions
sites for execution
coordinating the termination
transactions being committed
sites or aborted
sites we assume
local site maintains
maintains a log
log for recovery
18.3.1 the two-phase
two-phase commit protocol
protocol for atomicity
executed must agree
sites to ensure
ensure this property
widely used commit
initiated at site
completes its execution-that
-then c starts
adds the record
log and forces
forces the record
record onto stable
sends a prepare
executed on receiving
receiving the message
commit its portion
adds a record
responds by sending
sending an abort
storage the transaction
manager then replies
committed or aborted
received a ready
log and forced
forced onto stable
receives that message
records the message
unconditionally abort tat
sending the message
coordinator the ready
site to follow
follow the coordinator
coordinator s order
order to commit
tor to abort
site can make
information is stored
stored in stable
crashes after sending
unable to make
unanimity is required
required to commit
commit a transaction
responds with abort
unilaterally to abort
executed the final
writes that verdict
commit or abort
sends an acknowledge
coordinator has received
received the acknowledge
18.3.2 failure handling
examine in detail
failure may result
result in blocking
examine its log
log to determine
determine the fate
midst of execution
failure occurred suppose
commit t record
site executes redo
abort t record
site executes undo
ready t record
site must consult
out the fate
sending a query-status
system on receiving
tted or aborted
abort nor commit
postponed until s1c
s1c can obtain
obtain the needed
resend the query-status
information the site
absence of control
control records implies
implies that s1c
failed before responding
failure of s1c
s1c must execute
protocol for transaction
sites must decide
decide the fate
sites must wait
decided to commit
draw this conclusion
decided to abort
preferable to abort
tin this case
preceding cases holds
additional control records
coordinator has failed
impossible to determine
is-until the coordinator
fate oft remains
remains in doubt
continue to hold
hold system resources
locks on data
data at active
situation is undesirable
undesirable because hours
days may pass
forced to wait
data are unavailable
amount of unavailable
unavailable data increases
grows this situation
pending the recovery
recovery of site
network may partition
exist the coordinator
participants may remain
participants may belong
coordinator are lost
reducing the case
issue of concurrency
distributed database system
database system manages
manages the execution
access data stored
manager is responsible
responsible for maintaining
maintaining a log
scheme to coordinate
coordinate the concurrent
concurrency schemes described
described in chapter
modified to accommodate
accommodate the distribution
distribution of transactions
18.4.1 locking protocols
protocols the two-phase
two-phase locking protocols
locking protocols described
needed is iil
manager is implemented
schemes the first
replication is allowed
case where data
assume the existence
18.4.1.1 nonreplicated scheme
data are replicated
locking schemes described
maintains a local
local lock manager
manager whose function
administer the lock
lock and unlock
data items stored
wishes to lock
lock data item
item qat site
manager at site
requesting a lock
request is delayed
lock n1.anager sends
advantage of simple
implementation it requires
requires two message
two message transfers
transfers for handling
handling lock requests
transfer for handling
handling unlock requests
deadlock-handling algorithms discussed
modifications are discussed
18.4.1.2 single-coordinator approach
approach several concurrency-control
maintains a single
single lock manager
manager that resides
single chosen site-say
requests are made
made at site
lock a data
sends a lock
lock manager determines
request was initiated
initiated the transaction
transaction can read
data item resides
implementation this scheme
requires two messages
messages for handling
message for handling
handling lmlock requests
simple deadlock handling
bottleneck the site
site si fails
controller is lost
lost either processing
processing must stop
function is distributed
sites each lock
lock manager administers
administers the lock
items this distribution
reduces the degree
complicates deadlock handling
18.4.1.3 majority protocol
protocol the majority
nonreplicated data scheme
data scheme presented
scheme presented earlier
earlier the system
maintains a lock
site each manager
controls the locks
data or replicas
replicas of data
send a lock
request to nlore
nlore than one-half
stored each lock
lock manager detern1.ines
response is delayed
granted the transaction
obtained a lock
deals with replicated
avoiding the drawbacks
drawbacks of central
implementation the majority
complicated to implement
schemes it requires
deadlock can occur
locked to illustrate
sites and full
suppose that transactions
exclusive mode transaction
succeed in locking
wait to acquire
deadlock has occurred
18.4.1.4 biased protocol
protocol the biased
protocol is similar
protocol the difference
requests for shared
requests for exclusive
locks the system
manages the locks
shared and exclusive
locks are handled
requests a lock
advantage of imposing
imposing less overhead
overhead on read
protocol this advantage
significant in common
frequency of reads
frequency of writes
overhead on writes
biased protocol shares
shares the majority
protocol s disadvantage
disadvantage of complexity
complexity in handling
18.4.1.5 primary copy
precisely one site
call the primary
handle concurrency control
unreplicated data implementation
method is simple
timestamping the principal
timestamping scheme discussed
decide the serialization
order our first
generalizing the centralized
develop a method
method for generating
generating unique timestamps
generation of unique
timestamps two primary
two primary methods
generate unique timestamps
site is chosen
chosen for distributing
distributing the timestamps
timestamps the site
generates a local
local unique timestamp
clock the global
global unique timestamp
timestamp is obtained
obtained by concatenation
order of concatenation
concatenation is important
position to ensure
global timestamps generated
compare this technique
technique for generating
18.1.2 for generating
generating unique na1nes
site generates local
generates local timestamps
site s logical
sites a mechanism
mechanism is needed
needed to ensure
ensure that local
timestamps are generated
accomplish the fair
generation of timestamps
generates the local
clocks are synchronized
site local unique
unique timestamp site
timestamp site identifier
global unique identifier
unique identifier figure
timestarnp x,y visits
site and xis
site si advances
advances its logical
timestamps are assigned
clock that runs
fast or slow
18.4.2.2 timestamp-ordering scheme
scheme the basic
basic timestamp scheme
timestamp scheme introduced
introduced in section
rollbacks may result
prevent a transaction
transaction from reading
reading a data
data item value
committed to eliminate
eliminate cascading rollbacks
bine the basic
scheme of section
protocol of section
obtain a protocol
protocol that ensures
rollbacks we leave
leave the development
property that conflicts
conflicts between transactions
transactions are resolved
resolved through rollbacks
waits to alleviate
alleviate this problem
place without causing
aborts a read
exists a transaction
perform a wri
requires each site
site to maintain
maintain a read
write queue consisting
delayed to preserve
preserve the property
property just described
present the scheme
deadlock-detection algorithms presented
presented in chapter
18.5.1 deadlock prevention
prevention and avoidance
avoidance the deadlock-prevention
deadlock-prevention and deadlock-avoidance
deadlock-avoidance algorithms presented
modifications are made
resource-ordering deadlock-prevention technique
defining a global
system are assigned
assigned unique numbers
process may request
request a resource
holding a resource
unique number greater
banker s algorithm
systenl by designating
process that maintains
maintains the information
out the banker
algorithm every resource
global resource-ordering deadlock-prevention
resource-ordering deadlock-prevention scheme
scheme is simple
simple to implement
environment and requires
requires little overhead
overhead the banker
banker s scheme
deadlock-prevention scheme based
approach with resource
approach can handle
handle any deadlock
control the preemption
assign a unique
unique priority number
process these numbers
back this scheme
scheme prevents deadlocks
possibility of starvation
starvation some processes
extremely low priorities
back this difficulty
timestamps each process
system is assigned
assigned a unique
created two complementary
two complementary deadlock-prevention
complementary deadlock-prevention schemes
schemes using timestamps
scheme this approach
approach is based
teclmique when process
requests a resource
resource currently held
allowed to wait
approach when process
schemes can avoid
avoid starvation provided
process is rolled
timestamp since timestamps
timestamps always increase
two schemes operate
process must wait
release its resource
older the process
wait by contrast
process never waits
process pi dies
requested a resource
held by process
sequence of requests
die several times
times before acquiring
acquiring the needed
needed resource contrast
contrast this series
series of events
wound-wait scheme process
wounded and rolled
resource it holds
restarted and requests
requests the resource
fewer rollbacks occur
rollbacks may occur
18.5.2 deadlock detection
detection the deadlock-prevention
algorithm may preempt
occurred to prevent
prevent um ecessary
algorithm we construct
construct a wait-for
wait-for graph describing
describing the resourceallocation
wait-for graph represents
represents a deadlock
system is deciding
maintain the wait-for
graph we illustrate
illustrate this problem
problem by describing
describing several common
techniques to deal
issue these schemes
require each site
local wait-for graph
graph the nodes
holding or requesting
maintaining its local
wait-for graph note
note that processes
processes have requested
local wait-for graphs
graphs are constructed
manner for local
processes and resources
graph of site
two local wait-for
global wait-for graph
graph for figure
occurred the fact
find no cycles
graph is acyclic
system to prove
graphs is acyclic
acyclic the graph
two wait-for graphs
graphs of figure
number of methods
organize the wait-for
system we describe
describe several common
18.5.2.1 centralized approach
graph is constructed
types of wait-for
graphs the real
real graph describes
describes the real
real but unknown
observer the constructed
algorithm the constructed
algorithm is invoked
results are correct
correct by correct
deadlock is reported
easy to construct
construct such correct
edge is inserted
invoke the cycledetection
searches its global
cycle is found
victim is selected
coordinator must notify
selected as victiitl
victiitl the sites
back the victim
graph-construction options listed
coordinator to notify
modification on receiving
updates its global
site can send
send a number
single message periodically
message periodically returning
process will maintain
maintain the global
graph as depicted
inserts the edge
similarly when site
deletes the edge
released a resource
false may exist
graph to illustrate
system as depicted
releases the resource
holding in site
coordinator may discover
discover the false
aborted for reasons
process has exceeded
exceeded its allocated
decides to abort
coordinator has discovered
discovered a cycle
cycle and picked
centralized deadlock-detection algorithm
algorithm using option
detects all deadlocks
detect false deadlocks
deadlocks to avoid
avoid the report
report of false
require that requests
requests coordinator figure
local and global
global wait-for graphs
sites be appended
appended with unique
message with timestamp
received the request
grant the requested
resource a request
site is handled
sends an initiating
receiving this message
sends its local
graph the graph
reflects an instantaneous
synchronized with respect
controller has received
constructs a graph
algorithm was invoked
invoked as result
18.5.2.2 fully distributed
equally the responsibility
responsibility for detecting
deadlock every site
constructs a waitfor
graph that represents
represents a part
system the idea
graphs we present
construction of partial
graph a local
add one additional
additional node pex
graph an arc
site being held
site is waiting
waiting to acquire
acquire a resource
illustrate this situation
cycle involving pex
implies the possibility
augmented local wait-for
graphs from figure
deadlock does exist
invoke a distributed
distributed deadlock -detection
deadlock -detection algorithm
cycle involving node
involving node pex
pex this cycle
acquire a data
data item located
sj on discovering
discovering this cycle
site si sends
sends to site
message containing information
site si receives
receives this deadlock-detection
updates its local
newly constructed wait-for
constructed wait-for graph
cycle not involving
deadlock is found
scheme is iiwoked
pex is discovered
transmits a deadlock-detection
repeats the procedure
number of rounds
deadlock is discovered
deadlock-detection computation halts
illustrate this procedure
discovers the cycle
item in site
deadlock-detection message describing
describing that cycle
cycle is transmitted
transmitted from site
obtaining the wait-for
graph of figure
include node pex
discovered the cycle
sites will discover
discover the cycle
two deadlock-detection messages
results in unnecessary
unnecessary message transfer
transfer and overhead
overhead in updating
graphs and searching
searching for cycles
graph in site
5.z of figure
reduce message traffic
site sk discovers
form it sends
sends a deadlock-detection
site s1c continues
continues its normal
leaving the burden
burden of initiating
initiating the deadlock-detection
illustrate this scheme
wait-for graphs maintained
maintained at sites
suppose that suppose
suppose both sites
discover these local
cycle in site
send a deadlock-detection
wait-for graph site
graph and discovers
out in section
distributed algorithms employ
employ a coordinator
process that performs
performs functions needed
systenc these functions
functions include enforcing
include enforcing mutual
enforcing mutual exclusion
maintaining a global
graph for deadlock
replacing a lost
controlling an input
process fails due
algorithms that determine
election algorithms assume
system for ease
ease of notation
number of process
assume a one-to-one
correspondence between processes
processes and sites
processes the coordinator
largest priority number
algorithm must elect
elect that active
number this number
process to identify
identify the current
examples of election
two different configurations
configurations of distributed
systems the first
first algorithm applies
applies to systems
process can send
require n2 messages
number of processes
system we assume
takes appropriate actions
actions to rejoin
rejoin the set
set of active
bully algorithm suppose
coordinator this task
task is completed
sends an election
higher priority number
priority number process
response is received
processes with numbers
failed and elects
coordinator and sends
message to inform
inform all active
processes with priority
answer is received
waiting to receive
receive a message
process is electing
electing itself coordinator
report the results
message is received
number is assumed
restart the algorithm
messages from process
records this information
started an election
sends a response
process that completes
completes its algorithm
processes with lower
failed process recovers
immediately begins execution
processes with higher
recovered process forces
forces all processes
algorithm is termed
demonstrate the operation
processes are active
fail p2 determines
failed by sending
sending a request
begins its election
algorithm by sending
sending an election
response and begins
sends the number
receive the number
recovers and notifies
sends no election
18.6.2 the ring
algorithm the assumes
links between processes
processes are unidirectional
sends its messages
right the main
main data structure
list the algorithm
detects a coordinator
right and adds
adds the number
first elect message
j-thatis,ifthe message received
-then pi adds
list and forwards
-then the active
determine the largest
list to identify
recovering process determines
determines the number
current coordinator process
process one solution
requires a recovering
process to send
send an inquiry
message this message
message is forwarded
set of processes
processes to agree
resulting in lost
lost or garbled
resultilcg lie unpredictable
lie unpredictable process
unpredictable process behavior
stopping their execution
execution without deviating
normal execution pattern
processes may send
garbled or incorrect
divisions byzantine army
surround an enemy
camp the byzantine
generals must reach
attack the enemy
enemy at dawn
divisions would result
result lie defeat
generals can communicate
messengers who run
run from camp
camp to camp
camp the generals
two major reasons
unable to deliver
deliver their messages
messages this situation
corresponds to unreliable
prevent the loyal
generals from reaching
reaching an agreement
agreement this situation
corresponds to faulty
faulty processes lie
lie a computer
18.7.1 unreliable communications
medium is unreliable
message to process
received the message
decide to compute
compute a functionfoo
received its message
compute a function
out a message
sends an acknowledgment
receives the acknowledgment
retransmit its message
message and wait
acknowledgment this procedure
system that site
compute boo note
two viable alternatives
situations has occurred
received its acknowledgment
presence of failure
accomplish this task
environment for processes
prove this claim
sequence of message
message transfers exists
agree to compute
message will arrive
sequence without affecting
affecting the decision
contradicting our assumption
assumption and showing
18.7.2 faulty processes
medium is reliable
processes can fail
fail in unpredictable
devise an algorithm
construct a vector
delay for reaching
agreement is proportionate
required for reaching
agreement is large
large no single
process is trustworthy
processes must collect
collect all information
information and make
presenting a general
present an algorithm
requires two rounds
rounds of information
sends its private
sends the information
refuse to send
process can choose
choose an arbitrary
value and pretend
rounds are completed
construct its vector
reported for process
rounds of exchange
set the value
value of ai,f
determine the exact
two events occur
occur the happened-before
distributed system timestamps
provide a consistent
consistent event ordering
making is distributed
system a distributed
applicable to ring-structured
sites or aborts
execute a commit
case of locking
case of timestamping
timestamping and validation
mechanism for generating
generating unique global
unique global timestamps
timestamps the mechanism
concatenate a local
identification or advance
advance local clocks
method for dealing
dealing with deadlocks
environment is deadlock
detection the main
problem is deciding
wait-for graph methods
methods for organizing
organizing the wait-for
wait-for graph include
include a centralized
distributed algorithms require
maintaining a backup
ready to assume
fails another approach
failed the algorithms
algorithms two algorithms
coordinator in case
case of failures
hierarchical deadlock-detection algorithm
graph is distributed
tree each non-leaf
non-leaf controller maintains
maintains a wait-for
lowest common ancestor
suppose that node
node ti appears
graph of controllers
graph of controller
exists a path
system is deadlocked
company is building
building a comp1.1ter
asked to develop
develop a scheme
scheme for dealing
explain your choice
derive an election
algorithm for bidirectional
messages are needed
building a computer
asked to write
write an algorithm
algorithm for achieving
achieving distributed mutual
distributed mutual exclusion
exclusion which scheme
model for faulty
faulty processors processors
processors processors follow
follow the prescribed
fail at unexpected
simply stop functioning
continue to participate
design an algorithm
algorithm for reaching
set of processors
discuss the conditions
wait-die scheme perform
scheme for granting
concurrently executing transactions
failure that occurs
2pc ensures transaction
ensures transaction atomicity
logical clock timestamp
clock timestamp scheme
timestamp scheme presented
order two events
two events based
timestamps the fact
timestamp of event
event c happened
happened before event
system discuss ways
extended to distinguish
distinguish concurrent events
events from events
system was developed
developed by lamport
characterize the behavior
behavior of distributed
found in fidge
babaoglu and marzullo
schwarz and mattern
first general algorithm
algorithm for implementing
lamport s scheme
ricart and agrawala
proposed a distributed
algorithm that requires
messages their algorithm
18.2.2 a squareroot
algorithm for distributed
exclusion is described
described by maekawa
algorithm for rilcg-structured
rilcg-structured systems presented
systems presented ilc
presented ilc section
18.2.3 was developed
developed by lann
carvalho and roucairol
discusses mutual exclusion
exclusion in computer
agrawal and abbadi
describes an efficient
efficient and fault-tolerant
solution of distributed
exclusion a simple
taxonomy for distributed
distributed mutual-exclusion algorithms
algorithms is presented
presented by raynal
issue of distributed
synchronization is discussed
discussed by reed
reed and kanodia
totally disjoint processes
problem is presented
presented by chang
protocol was developed
lampson and sturgis
two modified versions
commit and presume
reduce the overhead
2pc by defilling
defilling default assumptions
fate of transactions
mohan and lindsay
problems of implementillg
implementillg the transaction
database were presented
presented by gray
spector and schwarz
offer comprehensive discussions
discussions of distributed
distributed concurrency control
concurrency control rosenkrantz
timestamp distributed deadlock-prevention
distributed deadlock-prevention algorithm
fully distributed deadlock-detection
distributed deadlock-detection scheme
deadlock-detection scheme presented
presented ill section
18.5.2 was developed
developed by obermarck
hierarchical deadlock-detection scheme
scheme of exercise
appears in menasce
menasce and muntz
surveys of deadlock
detection in distributed
detected by takilcg
takilcg global snapshots
discussed ill chandy
chandy and lamport
byzantine generals problem
problem is discussed
discussed by lamport
presented by garcia-molina
system was written
written by larue
coverage of operating-system
general-purpose computing systems
systems with requirements
system that requires
results be correct
results be produced
deadline period results
period results produced
deadline has passed-even
passed-even if correct-may
traditional operating-system scheduling
operating-system scheduling algorithms
modified to meet
meet the stringent
stringent timing deadlines
multimedia data multimedia
data multimedia data
multimedia data consist
consist of continuous-media
audio and video
conventional data continuous-media
data continuous-media data-such
data-such as frames
frames of video-must
video-must be delivered
demands of handling
handling continuous-media data
continuous-media data require
data require significant
notably in memory
desktop and server
turn our attention
attention to real-time
real-time computing systems
systems the requirements
requirements of real-time
real-time systems differ
largely because real-time
systems must produce
provide an overview
overview of real-time
real-time computer systems
systems and describe
describe how real-time
real-time operating systems
constructed to meet
stringent timing requirements
explain the timing
distinguish between hard
hard and soft
soft real-time systems
discuss the defining
characteristics of real-time
describe scheduling algorithms
algorithms for hard
hard real-time systems
deadline has passedeven
passedeven if correct-may
value to illustrate
robot that delivers
vision-control system identifies
identifies a wall
robot has walked
identifying the wall
met its requirement
contrast this timing
interactive desktop computer
desktop computer system
desirable to provide
provide a quick
real-time systems executing
executing on traditional
traditional computer hardware
range of applications
applications in addition
embedded in specialized
ordinary home appliances
ovens and dishwashers
consumer digital devices
cameras and mp3
telephones and blackberry
blackberry handheld devices
present in larger
automobiles and airplanes
airplanes an embedded
system for controlling
controlling a home
options for scheduling
scheduling the operation
dishwasher-the water temperature
type of cleaning
light or heavy
dishwasher is unaware
fact a computer
embedded system controlling
system controlling antilock
controlling antilock brakes
automobile each wheel
sliding and traction
traction are occurring
sensor continually sends
sends its data
system controller taking
taking the results
tells the braking
pressure to apply
embedded computer system
systems are real-time
systems are identified
identified as safety-critical
incorrect operation-usually due
missed deadline -results
sort of catastrophe
examples of safety-critical
safety-critical systems include
systems include weapons
include weapons systems
antilock brake systems
health-related embedded systems
system must respond
respond to events
injury-or worse-might occur
majority of embedded
qualify as safety-critical
including fax machines
missing deadline requirements
deadline requirements results
soft a hard
hard real-time system
guaranteeing that critical
critical realtime tasks
tasks be completed
deadlines safety-critical systems
typically hard real-time
systems a soft
soft real-time system
critical real-time task
task will receive
retain that priority
completes many commercial
linux-provide soft real-time
soft real-time support
explore the characteristics
systems and address
address issues related
related to designing
designing both soft
soft and hard
hard real-time operating
real-time operating systencs
characteristics are typical
single purpose small
purpose small size
size inexpensively mass-produced
inexpensively mass-produced specific
mass-produced specific timing
specific timing requirements
system typically serves
brakes or delivering
real-time system controlling
controlling an airliner
airliner s navigation
real-time operating system
operating system reflects
reflects its single-purpose
real-time systems exist
exist in environments
environments where physical
space is constrained
amount of space
result of space
real-time systems lack
cpu processing power
amount of memory
standard desktop pcs
real-time systems run
gigabytes of physical
required to run
run the operating
memory is limited
found in home
appliances and consumer
consumer devices devices
thermostats are mass-produced
microprocessors for real-time
technique for reducing
reducing the cost
technique for organizing
organizing the components
organizing the computer
provide the mechanism
mechanism intercom1ectin.g individual
intercom1ectin.g individual components
embedded system controllers
memorymouse keyboard printer
keyboard printer figure
attached peripheral ports
single integrated circuit
circuit the soc
typically less expensive
organization of figure
final characteristic identified
soft real-time operating
support the timing
issue real-time operating
operating systems meet
systems meet tim.ing
meet tim.ing requirements
algorithms that give
give real-time processes
processes the highest
highest schedulil1.g priorities
schedulers must ensure
technique for addressing
addressing timing requirements
minimizing the response
discuss the features
designing an operating
system that supports
supports real-time processes
typically not needed
system we begin
begin by examining
examining several features
operatil1.g systems discussed
versions of windows
windows these systems
systems typically provide
typically provide support
variety of peripheral
dvd drives protection
security mechanisms multiple
mechanisms multiple users
multiple users supporting
supporting these features
features often results
sophisticated -and large-kernel
forty million lines
lines of source
code in contrast
typical real-time operating
written in thousands
expect these simple
systems to il1.clude
il1.clude the features
nt real-time systems
real-time systems provide
provide these features
crucial to standard
real-time systems serve
serve a single
features found il1
il1 a desktop
support a disk
drive or dvd
typical real-time system
include the notion
system simply supports
supports a small
number of tasks
input from hardware
supported by standard
standard desktop operating
desktop operating systems
systems are impossible
impossible to provide
provide without fast
processors and large
amounts of memory
unavailable in real-time
real-time systems due
due to space
earlier in addition
realtime systems lack
systems lack sufficient
lack sufficient space
space to support
support peripheral disk
peripheral disk drives
drives or graphical
systems may support
support file systems
systems using nonvolatile
supporting features common
common in standard
physical memory figure
translation in real-time
increase the cost
cost of real-time
make such systems
systems economically impractical
additional considerations arise
real-time system providing
system providing virtual
providing virtual memory
virtual memory features
features as described
include a memory-management
logical to physical
mmus typically increase
cost and power
required to translate
translate logical addresses
addresses to physical
translation look-aside buffer
miss-may be prohibitive
hard real-time environment
examine several approaches
approaches for translating
addresses in real-time
strategies for managing
managing address translation
designers of real-time
cpu generates logical
generates logical address
mapped to physical
bypass logical addresses
cpu generate physical
generate physical addresses
physical addresses directly
directly this teclmique-kn.own
teclmique-kn.own as real-addressing
mode-does not employ
employ virtual memory
problem with real-addressil1.g
absence of memory
protection between processes
processes real-addressing mode
require that programmers
programs are loaded
loaded into memory
spent on address
common in embedded
systems with hard
hard real-time constraints
constraints in fact
operating systems rum1.ing
rum1.ing on microprocessors
mmu actually disable
disable the mmu
mmu to gain
gain the performance
benefit of referencing
referencing physical addresses
strategy for translating
dynamic relocation register
relocation register shown
generated by adding
adding the contents
real-time systems configure
configure the mmu
mmu to perform
easily translate logical
system still suffers
lack of memory
provide full virtual
full virtual memory
virtual memory functionality
functionality as described
address translation takes
translation takes place
place via page
tlb in addition
addition to allowing
allowing a program
processes for systems
systems without attached
attached disk drives
paging and swapping
systems may provide
provide such features
features using nvram
nvram flash memory
memory the lynxos
systems are examples
examples of real-time
operating systems providing
systems providing full
providing full support
support for virtual
keeping in mind
identify the features
implementing a real-time
system this list
systems provide fewer
priority-based scheduling preemptive
scheduling preemptive kernel
preemptive kernel minimized
kernel minimized latency
latency one notable
feature we omit
list is networking
support networking protocols
system must provide
provide networking capabilities
system that gathers
gathers real-time data
data and transmits
include networking features
self-contained embedded system
embedded system requiring
requiring no interaction
obvious networking requirencent
examine the basic
basic requirements listed
19.4.1 priority-based scheduling
requires the cpu
system must support
support a priority-based
algorithm with preemption
recall that priority-based
priority-based scheduling algorithms
scheduling algorithms assign
assign each process
process a priority
tasks are assigned
assigned higher priorities
deemed less important
scheduler also supports
process currently running
algorithms are discussed
discussed in detail
detail in chapter
soft real-time scheduling
real-time scheduling features
linux operating systems
systems assigns real-time
assigns real-time processes
highest scheduling priority
highest levelspriority values
reserved for real-time
real-time processes solaris
solaris and linux
linux have similar
similar prioritization schemes
providing a preemptive
scheduler only guarantees
guarantees soft real-time
soft real-time functionality
real-time functionality hard
functionality hard real-time
guarantee that real-time
serviced in accord
requirem ~ ents
making such guarantees
guarantees may require
require additional scheduling
additional scheduling features
features in section
cover scheduling algorithms
19.4.2 preemptive kernels
preemptive kernels nonpreemptive
kernels nonpreemptive kernels
nonpreemptive kernels disallow
kernels disallow preemption
running in kernel
process will run
exits kernel mode
voluntarily yields control
cpu in contrast
kernel mode designing
mode designing preemptive
designing preemptive kernels
traditional user-oriented applications
require such quick
quick response times
commercial desktop operating
desktop operating systems-such
systems-such as windows
windows xp-are nonpreemptive
meet the timing
hard real-time systems-preemptive
real-time systems-preemptive kernels
kernels are mandatory
wait an arbitrarily
arbitrarily long period
task was active
strategies for making
making a kernel
preemptible one approach
insert preemption points
points in long-duration
long-duration system calls
calls a preemption
preemption point checks
context switch takes
switch takes place
high-priority process terminates
interrupted process continues
system call preemption
call preemption points
strategy for making
data being updated
updated are protected
protected from modification
19.4.3 minimizing latency
event in real
events may arise
expires-or in hardware-as
remote-controlled vehicle detects
approaching an obstruction
antilock brake system
wheel first detects
controlling the antilock
milliseconds to respond
control the situation
situation any response
response that takes
longer might result
automobile s veering
out of control
control in contrast
first occurs event
occurs event latency
event latency real-time
latency real-time system
real-time system responds
system controlling radar
airliner might tolerate
tolerate a latency
types of latencies
affect the performance
performance of real-time
interrupt latency dispatch
latency dispatch latency
dispatch latency interrupt
latency interrupt latency
interrupt latency refers
routine that services
services the interrupt
occursf the operating
complete the instruction
executing and determine
determine the type
type of interrupt
interrupt that occurred
save the state
process before servicing
servicing the interrupt
specific interrupt service
interrupt service routine
total time required
required to perform
perform these tasks
crucial for real-time
task t running
determine or interrupt
interrupt type owitocontiex
owitocontiex t interrupt
ish i figure
systems to minimize
minimize interrupt latency
latency to ensure
ensure that real-time
real-time tasks receive
receive immediate attention
important factor contributing
contributing to interrupt
disabled while kernel
updated real-time operating
operating systems require
require that interrupts
interrupts be disabled
fact be bounded
bounded to guarantee
guarantee the deterministic
deterministic behavior required
required of hard
hard real-time kernels
schedulil g dispatcher
dispatcher to stop
stop one process
process and start
dispatch latency providing
latency providing real-time
providing real-time tasks
mandates that real-time
operating systems minimize
minimize this latency
technique for keeping
keeping dispatch latency
dispatch latency low
provide preemptive kernels
diagram the makeup
makeup of dispatch
latency the conflict
phase of dispatch
release by low-priority
processes of resources
latency with preemption
milliseconds with preemption
affect dispatch latency
dispatch latency arises
read or modify
modify kernel data
beil g accessed
process-or a chain
chain of lower-priority
processes as kernel
kernel event response
response to event
event ~ --------response
process made interrupt
interrupt available processing
----1 ~ _....
real-time process execution
resource the situation
process is preempted
preempted in favor
follow the order
assume that process
process h requires
accessed by process
finish using resource
lower priority -process
priority -process m-has
-process m-has affected
affected how long
accessing resources needed
higher-priority process inherit
inherit the higher
resources in question
protocol allows process
inherit the priority
priority of process
preempting its execution
execution when process
finished using resource
relinquishes its inherited
assumes its original
priority as resource
process h -not
coverage of scheduling
primarily on soft
systems as mentioned
preference over noncritical
noncritical processes hard
processes hard real-time
systems have stricter
requirements a task
deadline ; service
deadline has expired
scheduling for hard
define certain characteristics
processes are considered
cpu at constant
fixed processing timet
acquires the cpu
period1 d period2
illustrates the execution
relationship and assign
deadline or rate
form of scheduling
announce its deadline
scheduler either admits
admits the process
process will complete
rejects the request
request as impossible
explore scheduling algorithms
algorithms that address
address the deadline
requirements of hard
19.5.1 rate-monotonic scheduling
scheduling the rate-monotonic
rate-monotonic scheduling algorithm
scheduling algorithm schedules
algorithm schedules periodic
schedules periodic tasks
static priority policy
policy with preemption
process is running
preempt the lower-priority
process upon entering
entering the system
task is assigned
assigned a priority
priority inversely based
period the shorter
shorter the period
higher the priority
longer the period
lower the priority
priority the rationale
assign a higher
priority to tasks
tasks that require
rate-monotonic scheduling assumes
complete its cpu
schedule these tasks
meets its deadlines
measure the cpu
-the cpu utilization
total cpu utilization
meet their deadlines
leave the cpu
suppose we assign
first and completes
completes its cpu
scheduler has caused
miss its deadline
scheduling of tasks
figure 19.8 rate-monotonic
19.8 rate-monotonic scheduling
processes is shown
meeting its first
deadline p2 starts
point and runs
burst p1 completes
point the scheduler
deadline the system
system is idle
scheduling is considered
algorithm that assigns
assigns static priorities
examine a set
scheduling would assign
period the total
shows the scheduling
scheduling of processes
running and n.ms
cpu burst process
process p1 n.ms
misses the deadline
deadline for completion
utilization is bounded
maximize cpu resources
resources the worst-case
worst-case cpu utilization
utilization for scheduling
scheduling n processes
percent combined cpu
combined cpu utilization
two processes scheduled
scheduled in figures
algorithm is guaranteed
guaranteed to schedule
deadlines with rate-monotonic
scheduled in figure
19.5.2 earliest-deadline-first scheduling
earliest-deadline-first scheduling earliest-deadline-first
scheduling dynamically assigns
dynamically assigns priorities
deadline the earlier
earlier the deadline
process becomes runnable
adjusted to reflect
reflect the deadline
newly rmmable process
differs from rate-monotonic
priorities are fixed
illustrate edf scheduling
schedule the processes
meet deadline requirements
requirements under rate-monotonic
rate-monotonic scheduling recall
priority is higher
process p2 process
process p2 begins
scheduling allows process
meet their first
first deadlines process
meeting its deadline
scheduled to run
unlike the rate-monotonic
require that processes
processes be periodic
require a constant
amount of cpu
a1mom1ce its deadline
runnable the appeal
appeal of edf
process can meet
meet its deadline
requirements and cpu
percent in practice
impossible to achieve
achieve this level
level of cpu
cpu utilization due
cost of context
switching between processes
processes and interrupt
19.5.3 proportional share
proportional share scheduling
share scheduling proportional
scheduling proportional share
proportional share schedulers
share schedulers operate
operate by allocating
allocating t shares
applications an application
application can receive
receive n shares
shares of timef
timef thus ensuring
shares this scheme
percent o total
schedulers must work
work in conjunction
admission control policy
policy to guarantee
receives its allocated
admit a client
number of shares
shares if sufficient
process d requested
controller would deny
deny d entry
19.5.4 pthread scheduling
scheduling the posix
extensions for real-time
posix pthread api
pthread api related
related to scheduling
scheduling real-time threads
real-time threads pthreads
threads pthreads defines
defines two scheduling
two scheduling classes
classes for real-time
sched __fifo sched_rr
__fifo sched_rr sched__fifo
sched_rr sched__fifo schedules
sched__fifo schedules threads
queue as outlined
outlined in section
slicing among threads
threads of equal
highest-priority real-time thread
granted the cpu
terminates or blocks
sincilar to sched_fifo
equal priority pthreads
class-scheddther-but its implementation
implementation is undefined
undefined and system
pthread api specifies
setting the scheduling
set of attributes
current scheduling policy
function both functions
functions return non-zero
return non-zero values
pthread.h # include
policy ; pthread_t
attributes i pthread_attr_init
set the scheduling
unable to set
create the threads
thread will begin
function i void
pthread scheduling api
illustrate a pthread
api this program
program first determines
determines the current
sets the scheduling
algorithm to scheddther
popular real-time operating
operating system providing
providing hard real-time
hard real-time support
real-time support vxworks
developed by wind
wind river systems
consumer and industrial
rovers-spirit and opportunity-that
opportunity-that began exploring
exploring the planet
organizationofvxworks is shown
vxworks is centered
wind microkernel recall
discussion in section
2.7.3 that microkernels
microkernels are designed
features ; additional
provided in libraries
kernel this approach
offers many benefits
minimizing the size
kernel-a desirable feature
requiring a small
wind microkernel supports
processes the wind
microkernel provides support
support for individual
processes and threads
similar to linux
distinguish between processes
embedded real-time application
real-time application figure
organization of vxworks
operating .systent isbe
incre ~ singlyinreai-time
enviroft ~ ments.yve
hav ~ alreadycovered
alreadycovered its softr
softr ~ fil-ti,nteschedv,ling.fe
fil-ti,nteschedv,ling.fe ~ tur
,whereby real-time tasl
real-time tasl sareassignt
sareassignt ; d.thehj.ghe
d.thehj.ghe ~ tpriorityi
release ofthe kernel
ofthe kernel makelinux
kernel makelinux even,more
makelinux even,more suitilb
suitilb le fot
fot .embedded systems
.embedded systems thes
fullr pree ptive
pree ptive kernel
tinte regardless ofthe
arc ~ itecttlresbydi
itecttlresbydi \ tlcljng
tlcljng another strategy
integrah1lg linux iftto
linux iftto reanill1e
iftto reanill1e .envirof
operat ~ s,.systt
s,.systt ; it1
vith a mallreal-.ti
mallreal-.ti ! fle
fle ~ ernet
tht ; reby
cts as botl
real-tipte ~ ystem
ystem this .is
ppt ; rat
systerrl in .rtlinux
standard lirn.tx kernel
lirn.tx kernel run
real ~ htt1eikerllelj
alliftterrupts.-,-directing each interrupt
ndarclkerrtel.or to anintef
anintef ~ rupt.randler
prevents the shtndar
shtndar \ i.linuxkernel
difft ; rent
schec1ul ~ j1g
earliest ~ deadline-first
scheduling the wind
two separate scheduling
separate scheduling models
scheduling and nonpreemptive
nonpreemptive round-robin scheduling
levels the scheduler
supports the posix
api for real-time
interrupts the wind
microkernel also manages
interrupts to support
support hard real-time
hard real-time requirements
interrupt and dispatch
dispatch latency times
times are bounded
communication the wind
wind micro kernel
memory and message
passing as mechanisms
mechanisms for communication
communication between separate
tasks to communicate
mechanism that behaves
communicate by writing
fik the pipe
protect data shared
shared by separate
vxworks provides semaphores
semaphores and mutex
priority inheritance protocol
protocol to prevent
prevent priority mversion
microkernet vxworks includes
includes several component
libraries that provide
allowing the designer
system to customize
customize the system
system this strategy
include only required
minimizing the size-or
footprint-of the operating
takes an interesting
approach to memory
supporting two levels
levels of virtual
memory the first
basis this policy
pages as non-cacheable
non-cacheable when data
separate tasks running
data can reside
reside in separate
separate caches local
local to individual
supports a cache-coherency
policy to ensure
maintain a consistent
level of virtual
virtual memory requires
requires the optional
optional virtual memory
virtual memory component
memory component vxvmi
component is loaded
task to mark
mark certain data
areas as private
private a data
data area marked
marked as private
task it belongs
vxworks allows pages
pages containing kernel
declared as read-only
distinguish between user
user and kernel
run in kernel
giving an application
entire address space
computer system requiring
requiring that results
period ; results
deadline has passed
systems are embedded
embedded in consumer
types of real-time
assigning real-time tasks
real-time tasks higher
tasks higher scheduling
higher scheduling priority
tasks hard real-time
systems must guarantee
tasks are serviced
periods in addition
addition to strict
strict timing requirements
purpose and running
running on small
meet timing requirements
systems must employ
employ various techniques
techniques the scheduler
higher-priority real-time tasks
real-time tasks real-time
tasks real-time operating
systems also address
address specific timing
specific timing issues
issues by minimizing
minimizing both interrupt
real-time scheduling algorithms
scheduling algorithms include
algorithms include rate-monotonic
rate-monotonic and earliestdeadline
earliestdeadline first scheduling
first scheduling rate-monotonic
scheduling rate-monotonic scheduling
rate-monotonic scheduling assignb
scheduling assignb tasks
priority than tasks
earliest-deadline-first scheduling assigns
scheduling assigns priority
upcoming deadlines-the earlier
technique of dividing
dividing up processor
shares and assigning
assigning each process
process a number
guaranteeing each process
process its proportional
share of cpu
features for scheduling
explain why interrupt
identify whether hard
hard or soft
household b control
nuclear power plant
plant c fuel
fuel economy system
automobile d landing
processes be scheduled
scheduled using rate-monotonic
rate-monotonic scheduling illustrate
illustrate your answer
illustrate the scheduling
processes using earliestdeadline
priority inversion problem
system also discuss
proportional share scheduler
circumstances is rate-monotonic
rate-monotonic scheduling inferior
inferior to earliest-deadline-first
scheduling in meeting
meeting the deadlines
processes the scheduling
rate monotonic scheduling
scheduling and earliest-deadline-first
presented in liu
liu and layland
algorithms and extensions
extensions to previous
algorithms are presented
presented in jensen
describes a dynamic
dynamic priority-assignment algorithm
algorithm called least-laxity-first
least-laxity-first scheduling stoica
analyze the proportional
proportional share algorithm
algorithm useful information
popular operating systems
obtained from http
directions and important
important research issues
field of embedded
article by stankovic
operating systems handle
systems handle conventional
handle conventional data
handle other kinds
kinds of data
trend in technology
incorporation of multimedia
data into computer
conventional files continuous-media
files continuous-media data
continuous-media data differ
differ from conventional
explore the demands
demands of continuous-media
affect the design
design of operating
systems that support
support the requirements
requirements of multimedia
objectives to identify
identify the characteristics
characteristics of multimedia
examine several algorithms
compress multimedia data
explore the operating
cpu and disk
scheduling and network
multimedia the term
term multimedia describes
describes a wide
popular use today
today these include
mp3 audio files
short video clips
clips of movie
previews or news
news stories downloaded
internet multimedia applications
applications also include
include live web
live web casts
speeches or sporting
viewer in manhattan
manhattan to observe
cafe in paris
paris multimedia applications
audio or video
application often includes
includes a combination
movie may consist
consist of separate
applications be delivered
desktop personal computers
directed toward smaller
including personal digital
personal digital assistants
stock quotes delivered
delivered in real
explore several characteristics
systems and examine
examine how multimedia
standards for representing
video and audio
20.1.1 media delivery
media delivery multimedia
delivery multimedia data
data the major
accessing the regular
regular file requires
requires no special
video is represented
series of images
displayed in rapid
succession the faster
faster the frames
frames are displayed
smoother the video
appears in general
smooth to human
retains the image
presentation the video
requirements as multimedia
data are delivered
delivery as examples
examples include watching
watching a dvd
computer or listening
mp3 audio file
handheld mp3 player
comprise a regular
system and played
viewed or listened
server and delivered
cellular telephone data
data from live
live continuous media
continuous media -such
-such as live
live webcams -are
-are also streamed
server to clients
types of streaming
download and real-time
file containing audio
video is downloaded
downloaded and stored
client s local
back the media
small media files
differs from progressive
file is streamed
-and not stored
-by the client
streaming is preferable
preferable to progressive
download for media
videos and internet
client to move
fast-forward and rewind
controller to move
5-minute streaming video
video or replay
clip the ability
ability to move
streaming and ondemand
deliver an event
occurring a radio
radio program broadcast
live real-time stream
stream in fact
text regularly listens
favorite radio station
station from vermont
home in utah
internet live real-time
live real-time streaming
webcams and video
video conferencing due
type of real-time
clients random access
stream in addition
live delivery means
client who wishes
wishes to view
progress will join
join the session
missing earlier portions
missed the first
deliver media streams
movies and archived
lectures the difference
difference between live
live and on-demand
event is occurring
watching a live
watching a news
watching an on-demand
viewing a movie
notion of arriving
type of on-demand
examples of well-known
well-known streaming media
streaming media products
media products include
products include realplayer
windows media player
player these products
include both servers
servers that stream
stream the media
media and client
client media players
systems the demands
demands of multimedia
systems are unlike
unlike the demands
demands of traditional
applications in general
100-minute mpeg-1 video
mpeg-1 video file
video file requires
1.125gb of storage
minutes of high-defuution
storage a server
server storing hundreds
thousands of digital
digital video files
require several terabytes
terabytes of storage
media may require
require very high
high data rates
rates consider digital
frame of color
video is displayed
bits to represent
represent the color
bits of data
bandwidth in excess
mbps is required
applications are sensitive
sensitive to timing
delays during playback
file is delivered
delivery must continue
rate during playback
listener or viewer
subjected to pauses
20.1.3 operating-system issues
system to deliver
deliver continuous-media data
guarantee the specific
rate and timing
requirements-of continuous media
providing these qos
qos guarantees affects
affects several components
system and influences
influences such operating-system
issues as cpu
network management specific
management specific examples
specific examples include
compression and decoding
decoding may require
require significant cpu
significant cpu processing
priorities to ensure
meeting the deadline
requirements of continuous
efficient to meet
meet the rate
protocols must support
support bandwidth requirements
requirements while minimizing
delay and jitter
related to qos
techniques for compressing
compressing multimedia data
data as suggested
compression makes significant
makes significant demands
size and rate
space for storage
client more quickly
content is beilcg
cormection in discussing
discussing file compression
original file size
accessed a feature
compress the file
decompression compression algorithms
algorithms are classified
file is decoded
lossless compression ensures
form in generat
generat lossy techniques
lossy techniques provide
provide much higher
higher cone pression
cone pression ratios
types of data
data can tolerate
tolerate lossy compression-namely
video lossy compression
lossy compression algorithms
algorithms often work
work by eliminating
eliminating certain data
high or low
detect some lossy
operate by storing
differences between successive
successive frames lossless
frames lossless algorithms
compressing text files
restore these compressed
lossy compression schemes
schemes for continuous-media
moving picture experts
picture experts group
set of file
formats and compression
standards for digital
video because digital
standards is divided
media file layer
player to multiplex
multiplex the audio
synchronized during playback
major mpeg standards
stream the resolution
quality slightly lower
conventional vcr videos
vcr videos mp3
videos mp3 audio
medium for storing
mpeg-1 for video
mpeg-1 can achieve
achieve a compression
practice compression ratios
require high data
download short video
compressing dvd movies
movies and digital
including high-definition television
identifies a number
number of levels
levels and profiles
profiles of video
characterizes the video
video s quality
quality in general
higher the level
level of resolution
higher the required
required data rate
data rate typical
rate typical bit
typical bit rates
mpeg-2 encoded files
mpeg-2 requires higher
requires higher rates
lmsuitable for delivery
delivery of video
two-dimensional and three-dimensional
three-dimensional animation layers
animation layers animation
layers animation makes
users to interact
file during playback
potential home buyer
buyer can download
moving from room
room to room
chooses another appealing
level of quality
slow network connections
56-i bps modems
high-speed local area
local area networks
networks with rates
providing a scalable
delivered to wireless
including handheld computers
mpeg standards discussed
discussed here perform
perform lossy compression
compression to achieve
achieve high compression
high compression ratios
ratios the fundamental
idea behind mpeg
store the differences
cover further details
mpeg performs compression
encourage the interested
reader to consult
consult the bibliographical
applications often require
levels of service
system that differ
requirements of traditional
tin1.ing and rate
issues of foremost
playback of audio
video data demands
data be delivered
fixed rate traditional
rate traditional applications
tasks that request
data at constant
video might require
require a rate
maintaining this rate
frame be delivered
context of deadlines
assume that frame
frame f1 succeeds
deadline for displaying
system is unable
unable to display
display the frame
requirements and deadlines
quality of service
makes a best-effort
attempt to satisfy
satisfy the requirements
guarantees are made
treats different types
types of traffic
giving certain traffic
traffic streams higher
streams higher priority
requirements are guaranteed
traditional operating systems-the
operating systems-the systems
provide only best-effort
amount of resources
workload would demand
demand if demand
demand exceeds resource
exceeds resource capacity
system however next-generation
next-generation multimedia systems
make such assumptions
assumptions these systems
systems must provide
provide continuous-media applications
explore various techniques
techniques that enable
enable multimedia systems
systems to provide
provide such service-level
number of parameters
parameters defining qos
qos for multimedia
amount of work
interval for multimedia
request is first
result is produced
requests a media
stream is delivered
jitter is related
related to delay
client must wait
wait to receive
receive a stream
refers to delays
delays that occur
occur during playback
stream certain multimedia
on-demand real-time streaming
tolerate this sort
sort of delay
generally considered unacceptable
unacceptable for continuous-media
long pauses-or lost
pauses-or lost frames-during
lost frames-during playback
frames-during playback clients
compensate for jitter
jitter by buffering
amount of data-say
seconds  worth-before
worth-before beginning playback
errors are handled
handled during transmission
transmission and processing
processing of continuous
continuous media errors
errors may occur
due to lost
network or processing
cpu in these-and
packets typically arrive
arrive too late
levels of quality
higher the quality
rate a client
client may negotiate
negotiate a specific
specific data rate
quality during playback
client to configure
configure the player
client s connection
client to receive
receive a streaming
data rate specific
client is negotiating
provide qos guarantees
simply the practice
practice of admitting
admitting a request
request for service
server has sufficient
resources to satisfy
satisfy the request
theater only admits
situations in everyday
life where admission
system becomes unable
unable to meet
meet its qos
discussed using semaphores
method of implementing
implementing a simple
simple admission-control policy
exist a finite
number of nonshareable
resource is requested
grant the request
semaphores to implement
implement an admission-control
policy by first
initializing a semaphore
number of resources
resource is made
resource is released
invocation of signal
implementing admission control
server may include
include the cpu
note that resources
exclusive or shared
single or multiple
client must make
make a reservation
resource il1 advance
reservation is denied
denied an admission-control
admission-control scheme assigns
type of resource
requests for resources
required data rates
resource manager determines
resource can meet
meet the qos
level of qos
request is accepted
resource manager reserves
reserves the resources
assuring the client
desired qos requirements
met in section
examine the admission-control
ensure qos guarantees
cineblitz multimedia storage
multimedia storage server
covers real-time systems
systems simply give
simply give scheduling
give scheduling priority
priority to critical
processes a soft
real-time system ensures
requirement of continuous
deadline ; data
deadline are unusable
unusable multimedia systems
systems thus require
require hard real-time
hard real-time scheduling
scheduling to ensure
withii1 a guaranteed
scheduling issue concerns
distinction first discussed
process will remain
static priority scheduling
priority scheduling algorithms
algorithms that assign
assign dynamic priorities
priorities allow priorities
priorities to change
systems use dynamic
priorities when scheduling
scheduling non-real-time tasks
intention of giving
giving higher priority
priority to interactive
scheduling real-time tasks
systems assign static
assign static priorities
real-time scheduling strategies
scheduling strategies discussed
rate and deadline
deadline qos requirements
requirements of continuous-media
first discussed disk
discussed disk scheduling
scheduling in chapter
primarily on systems
systems that handle
goals are fairness
fairness and throughput
traditional disk schedulers
disk schedulers employ
employ some form
constraints that conventional
conventional data files
deadlines and rate
satisfied to preserve
preserve qos guarantees
conflict continuous-media files
files typically require
high disk-bandwidth rates
rates to satisfy
satisfy their data-rate
low transfer rates
high latency rates
schedulers must reduce
reduce the latency
times to ensure
ensure high bandwidth
reducing latency times
times may result
explore two diskscheduling
two diskscheduling algorithms
algorithms that meet
requirements for continuous-media
20.5.1 earliest-deadline-first scheduling
presented the earliest-deadline-first
algorithm in section
queue to order
edf is similar
similar to shortest-seek-time-first
servicing the request
deadline is serviced
deadline may result
result in higher
higher seek tim.es
heads may move
suppose a disk
queue of cylinders
strict edf scheduling
head will move
passes over cylinder
serviced the request
request for cylinder
route to cylinder
preserved the deadline
requirement for cylinder
20.5.2 scan-edf scheduling
scheduling the fundamental
problem with strict
ignores the position
heads will swil
leading to unacceptable
unacceptable seek times
negatively affect disk
affect disk throughput
disk throughput recall
faced with fcfs
context of cpu
address this issue
issue by adopting
adopting scan schedulil
whereil the disk
disk arm reaches
reaches the end
direction this strategy
strategy optimizes seek
optimizes seek times
algorithm that combines
edf with scan
starts with edf
ordering but services
usil g scan
scan-edf may batch
ordering to service
techniques for batching
requests with similar
prevent a request
deadline if deadlines
organized in groups
requests per batch
requests whose deadlines
followil g requests
head is moving
moving toward cylinder
last batch requests
first service request
request d note
downward in cylinder
heads begin moving
begin moving upward
upward in cylinders
servicing requests hand
foremost qos issue
issue with multimedia
multimedia systems concerns
systems concerns preserving
concerns preserving rate
preserving rate requirements
view a video
service greatly depends
system s ability
ability to deliver
deliver the frames
coverage of issues
cpu and disk-scheduling
algorithms has focused
meet the quality-ofservice
network-perhaps the internet-issues
delivers the multimedia
affect how qos
demands are met
explore several network
network issues related
demands of continuous
noting that computer
networks in general
-and the internet
internet in particular
provide network protocols
ensure the delivery
delivery of data
data with timing
protocols-notably those running
running on cisco
prioritized to meet
meet qos requirements
data are routed
transmission will encounter
network traffic issues-issues
data for multimedia
delivering the content
protocol that addresses
addresses timing issues
standard for delivering
delivering real-time data
transporting media formats
files and video
video files compressed
compressed using mpeg
provide any qos
guarantees ; rathe1
receiver to remove
remove jitter introduced
introduced by delays
delays and congestion
two other approaches
approaches for handling
handling the unique
unicasting and multicasting
multicasting in general
methods for delivering
delivers the content
server must establish
establish a separate
,  nh
receive the content
group of receivers
unicasting and broadcasting
issue with unicast
separate unicast session
wasteful for live
server must make
make several copies
receive the stream
server to deliver
deliver a single
difficulty with multicasting
routers that relay
relay the content
client must cross
cross intermediate routers
incurred during routing
routing may result
result in violation
client is connected
unable to receive
receive the multicast
media are delivered
delivered across unicast
server and clients
connected to multicasting
reasonable physical proximity
routers the organization
deliver a presentation
chief executive officer
officer using multicasting
20.6.2 real-time streaming
real-time streaming protocol
protocol in section
described some features
features of streaming
access a media
replaying or pausing
answer this question
delivered to clients
clients one approach
standard web server
hypertext transport protocol
play media streamed
client first requests
uniform resource locatm
streaming media file
file this metafile
metafile is delivered
client s web
browser then starts
type of media
real audio stream
stream would require
require the realplayer
play back streaming
back streaming windows
streaming windows media
media the media
player then contacts
contacts the web
server and requests
requests the streaming
media the stream
conventional web server
player using standard
standard http requests
requests this process
process is outlined
outlined in figure
problem with delivering
delivering streaming media
http is considered
considered a protocol
maintain the state
client to pause
delivery of streaming
streaming media content
pausing would require
require the web
stream to begin
wished to resume
playback an alternative
specifically for streaming
media one protocol
designed for communication
communication between streaming
servers and media
significant advantage rtsp
pause or seek
seek to random
media using rtsp
rtsp is similar
similar to delivery
delivery using http
media is delivered
protocol the operation
operation of rtsp
rtsp is shown
defines several commands
commands as part
rtsp streaming server
server the commands
server allocates resources
delivers a stream
client session established
server suspends delivery
stream but maintains
maintains the resources
connection and frees
frees up resources
states are triggered
http for streaming
streaming media offers
related to networking
text we encourage
encourage interested readers
readers to consult
chapter for sources
server that supports
supports both continuous
media with rate
text and images
refers to clients
clients with rate
rate constraints cine
constraints cine blitz
cine blitz guarantees
guarantees to meet
clients by implementing
implementing an admission
admitting a client
explore the cineblitz
disk-schedulu1.g and admission-control
setup play tear
tear down pause
finite-state machine representing
machine representing rtsp
20.7.1 disk scheduling
scheduling the cineblitz
cineblitz disk scheduler
disk scheduler services
scheduler services requests
discussions of c-scan
disk heads move
reach the end
pure scan disk
scan disk scheduling
20.7.2 admission control
control the admission-control
algorithm in cil
eblitz must monitor
real-time and non-real-time
classes of clients
clients receive service
controller must provide
provide the rate
rate guarantees required
required by real-time
clients to ensure
explore the admission
controller for real-time
term client refers
controller in cineblitz
monitors various system
bandwidth and disk
space the cineblitz
cineblitz admission controller
admission controller admits
admits a client
bandwidth and buffer
space to retrieve
cineblitz queues requests
requests for continuous
continuous media files
request r requests
queue are served
served in cyclic
order in rounds
rounds of time-length
measured in seconds
buffer is allocated
retrieve the data
data from disk
process is illustrated
total buffer space
space b required
fundamental idea behil
requests for entry
request is admitted
estimated service times
exceed the duration
duration of service
bits be retrieved
clients currently active
controller must ensure
f---1 double buffer
double buffer total
buffer total buffer
buffering in cinebiitz
explore the details
number of disk
disk blocks thatcanberetrievedforrequest
blocks thatcanberetrievedforrequest r1c
thatcanberetrievedforrequest r1c duringeachcycleis
bits to span
span the last
causing two blocks
disk block involves
contailling the block
desired track arrive
head as described
c-scan disk-scheduling algorithm
blocks are retrieved
tscek and trot
seek and rotational
rotational delay times
maximum latency incurred
incurred for servicil1g
servicil1g n requests
tseek component refers
maximum disk-seek latency
disk-seek latency incurred
reflects the sum
disk blocks multiplied
worst-case rotational delay
data for request
bits for requests
sum of equation
cineblitz only admits
bits of free
free buffer space
equation is satisfied
modern computer systems
multimedia files include
files include video
delivered to systems
desktop computersf personal
computersf personal digital
personal digital assistantsf
assistantsf and cell
phones the primary
distinction between multimedia
data and conventional
data have specific
deadline requiren ents
files have specific
specific timing requirementsf
requirementsf the data
compressed before delivery
client for playback
playback multimedia data
qualityof service requirementsf
requirementsf and conventional
make quality-of-service guarantees
guarantees to provide
quality of servicef
servicef multimedia systems
provide a form
form of admission
accepts a request
meet the quality-of-service
providing quality-of-service guarantees
quality-of-service guarantees requires
guarantees requires evaluating
operating system performs
system performs cpu
performs cpu schedulingf
cpu schedulingf disk
schedulingf disk schedulingf
schedulingf and network
scheduling criterion network
criterion network management
network management requires
protocols that handle
allowing a client
pause or move
stream during playback
traditional internet protocols
protocols for transmitting
sufficient to provide
provide the quality-of-service
quality-of-service guarantees required
multimedia system discuss
required to provide
provide the qos
contrast unicastingf multicastingf
multicastingf and broadcasting
broadcasting as techniques
techniques for delivering
compress a digital
digital video file
technology the target
target bit rate
represent each colorf
ratio to achieve
achieve the desired
desired bit rate
represent each color
deliver this file
file next assuming
deliver the compressed
multimedia application consists
minutes of videof
minutes of audio
audio the compressed
videof and audio
images were compressed
audio were compressed
audio before compression
real-time streaming applications
applications can tolerate
tolerate jitter live
jitter live real-time
real-time streaming on-demand
streaming on-demand real-time
distinguish between progressive
number of requests
deadlines and cylinders
requests with deadlines
batched the disk
scan-edf disk scheduling
order of requests
cine blitz system
system in performing
performing admission control
control for requests
requests for media
illustrate the schedulil1.g
overview of multimedia
multimedia systems topics
systems topics related
delivery of multimedia
multimedia through networks
found in kurose
support for multimedia
multimedia is discussed
discussed in steinmetz
management for resources
capability and memory
buffers is discussed
discussed in mercer
druschel and peterson
reddy and wyllie
give a good
overview of issues
model for developing
developing multimedia applications
applications are presented
presented in regehr
admission control system
scheduler is considered
considered in lauzac
present a system
system for serving
serving video data
data and discuss
discuss the schedule-management
issues that arise
system the details
tutorial on mpeg-2
mpeg-2 a tutorial
tutorial on video
video compression techniques
integrate the concepts
book by describing
describing real operating
real operating systems
two such systems
systems are covered
covered in great
detaiilinux and windows
represents a full-featured
full-featured unix system
student of operating
systems an opportunity
opportunity to read-and
read-and modifyrea operating-system
modifyrea operating-system source
operating-system source code
detail this recent
recent operating system
system from microsoft
microsoft is gaining
market we chose
study a modern
highly influential operating
influential operating systems
chosen the order
order of presentation
presentation to highlight
highlight the similarities
similarities and differences
reflect the relative
provide on-line coverage
systems the freebsd
linux combines features
freebsd is based
model of unix
unix freebsd source
freebsd source code
linux source code
compatibility with bsd
bsd unix windows
microsoft for intel
compatible with ms-dos
ms-dos and microsoft
microsoft windows applications
presents an in-depth
linux operating system
exam.ining a complete
version of unix
popularity in recent
history and development
development of linux
linux and cover
cover the user
user and programmer
interfaces that linux
owe a great
discuss the internal
implements these interfaces
rapidly evolving operating
evolving operating system
chapter describes developments
released in late
explore the history
linux is derived
linux is designed
examine the linux
linux process model
model and illustrate
illustrate how linux
linux schedules processes
management in linux
explore how linux
implements file systems
systems and manages
major design goal
systems its development
wrote and christened
small but self-contained
true 32-bit processor
processor in intel
intel s range
range of pc-compatible
code was made
made available free
linux s history
implemented a small
unix system services
system has grown
grown to include
include much unix
linux development revolved
operating-system kernel-the core
executive that n1.anages
n1.anages all system
kernel to produce
produce a full
full operating systeitl
make the distinction
piece of software
developed from scratch
includes a multitude
multitude of components
written from scratch
created in collaboration
basic linux system
environment for applications
applications and user
enforce any standard
means of managing
linux has matured
layer of functionality
functionality on top
distributions a includes
set of administrative
tools to simplify
simplify the initial
installation and subsequent
upgrading of linux
installation and removal
system a modern
typically includes tools
tools for management
management of file
creation and management
management of user
administration of networks
21.1.1 the linux
kernel the first
first linux kernel
linux kernel released
public was version
80386-compatible intel processors
extremely limited device-driver
limited device-driver support
support the virtual
basic and included
included no support
support for memorymapped
early incarnation supported
incarnation supported shared
supported shared pages
pages with copy-on-write
file system supported
minix file system
file system -the
-the first linux
first linux kernels
kernels were cross-developed
kernel did implement
implement proper unix
proper unix processes
processes with protected
protected address spaces
released on march
culminated three years
years of rapid
biggest new feature
feature was networking
support for unix
unix s standard
standard tcp lip
tcp lip networking
lip networking protocols
bsd-compatible socket interface
interface for networking
networking programming device-driver
programming device-driver support
support was added
added for running
ppp or slip
lines or modems
kernel also included
enhanced file system
original minix file
system and supported
supported a range
range of scsi
controllers for high-performance
high-performance disk access
access the developers
extended the virtual
subsystem to support
paging to swap
files and memory
mapping of arbitrary
read-only memory mapping
mapping was implemented
range of extra
extra hardware support
intel pc platform
support had grown
floppy-disk and cd-rom
range of mice
international keyboards floating-point
keyboards floating-point emulation
emulation was provided
coprocessor ; system
system v unix-style
unix-style inclllding shared
inclllding shared memory
implemented simple support
loadable and unloadable
unloadable kernel modules
modules was supplied
numerous bug-fix patches
patches were released
pattern was adopted
standard numbering convention
convention for linux
linux kernels kernels
odd minor-version number
evennumbered minor-version numbers
numbers are stable
kernels are intended
kernels may include
kernel was released
released this release
improvement in functionality
variety of hardware
pci hardware bus
hardware bus architecture
bus architecture developers
architecture developers added
added another pc-specific
cpu s virtual8086
mode-to allow emulation
dos operating system
updated the networking
stack to provide
protocol and made
implementation more complete
complete by including
accounting and firewalling
final pc-only linux
pc-only linux kernel
kernel the source
distribution for linux
included partially implemented
partially implemented support
support for sparc
concentrated on wider
wider hardware support
implementations of existing
main kernel source
kernel source code
released as linux
major version-number increment
increment on account
major new capabilities
support for multiple
including a 64-bit
64-bit native alpha
native alpha port
support for multiprocessor
multiprocessor architectures linux
architectures linux distributions
linux distributions based
motorola 68000-series processors
systems a derived
version of linux
microkernel also runs
improved to provide
provide a unified
cache for file-system
file-system data independent
caching of block
offered greatly increased
greatly increased file-system
file-system and virtual
virtual memory performance
caching was extended
extended to networked
networked file systems
writable memory-mapped regions
included much improved
protocols were added
including apple talk
ax.25 anlateur radio
anlateur radio networking
support the ability
ability to mount
mount remote netware
netware and smb
volumes was added
support for internal
internal kernel threads
dependencies between loadable
loading of modules
modules on demand
demand dynamic configuration
kernel at run
standardized configuration interface
additional new features
features included file-system
included file-system quotas
quotas and posix-compatible
posix-compatible real-time process-scheduling
real-time process-scheduling classes
release of linux
port for ultrasparc
systems was added
networking was enhanced
routing and traffic
support for tcp
tcp large window
window and selective
selective acks acorn
nfs was enhanced
kernel-mode nfs daemon
nfs daemon added
daemon added signal
added signal handling
i were locked
improve symmetric multiprocessor
kernel include increased
include increased support
support for smp
journaling file systems
system the process
scheduler was modified
modified in version
providing an efficient
algorithm in addition
allowing a process
preempted while running
21.1.2 the linux
linux kernel forms
forms the core
complete linux operating
kernel is composed
software that makes
exclusive to linux
number of unix-like
unix-like operating systems
developed as part
part of berkeley
berkeley s bsd
bsd operating system
free software foundation
foundation s gnu
sharing of tools
tools has worked
directions the main
main system libraries
libraries of linux
linux were originated
community greatly improved
improved the libraries
libraries by addressing
bugs other components
sufficiently high quality
directly in linux
linux the networkingadministration
tools under linux
linux were derived
derived from code
code first developed
recent bsd derivatives
code from linux
linux in return
return examples include
include the intel
intel floating-point-emulation math
floating-point-emulation math library
sound-hardware device drivers
network of developers
groups or individuals
individuals having responsibility
responsibility for maintaining
maintaining the integrity
integrity of specific
number of public
public internet file-transfer-protocol
archive sites act
facto standard repositories
components the document
means of ensuring
standard linux file
linux file system
directory names configuration
names configuration files
run-time data files
21.1.3 linux distributions
distributions in theory
install a linux
system by fetching
fetching the latest
sites and compiling
linux s early
out as linux
individuals and groups
groups have attempted
attempted to make
make this job
job less painful
painful by providing
sets of packages
packages for easy
typically include extra
include extra system-installation
system-installation and management
precompiled and ready-to-install
common unix tools
text-processing and editing
first distributions managed
managed these packages
providing a means
means of unpacking
contributions of modem
modem dish ibutions
advanced package management
package management today
linux distributions include
include a package-tracking
days of linux
collection of linux
lacked the packagemanagement
tools now expected
expected of linux
distributions the distribution
represented a great
poor package management
widely installed distributions
commercial and noncommercial
noncommercial limlx distributions
commercial linux support
linux support company
free-software linux community
commercially supported versions
versions of linux
linux include distributions
distributions from cz,ldera
germany has resulted
dedicated german-language distributions
distributions in circulation
variety of distributions
compatibility across linux
rpm package file
package file format
majority of distributions
commercial applications distributed
installed and run
accept rpm files
21.1.4 linux licensing
licensing the linux
kernel is distributed
gnu general public
general public license
out the free
free software fmmdation
software fmmdation linux
public-domain software implies
authors have waived
waived copyright rights
rights in linux
linux is free
sense that people
people can copy
implications of linux
linux s licensing
creating a derivative
derivative of linux
make the derived
derived product proprietary
product proprietary software
proprietary software released
camwt be redistributed
software that includes
includes any components
make source code
code available alongside
alongside any binary
selling-binary-only software distributions
reasonable distribution charge
nonmicrokernel unix implementation
set of unix-compatible
unix-compatible tools linux
linux s file
file system adheres
adheres to traditional
traditional unix semantics
standard unix networking
unix networking model
model is implemented
details of linux
system s development
variety of platforms
architecture a great
development was carried
out by individual
development or research
start linux attempted
attempted to squeeze
limited resources today
linux can run
machine with hundreds
hundreds of megabytes
megabytes of main
gigabytes of disk
capable of operating
memory and hard
disks became cheaper
minimalist limix kernels
limix kernels grew
grew to implement
implement more unix
unix functionality speed
speed and efficiency
important design goals
recent and current
work on linux
linux has concentrated
diversity of unix
source code written
compile or run
calls are present
two different unix
posix standards comprise
comprise a set
set of specifications
aspects of operating-system
documents for common
common operating-system functionality
threads and real-time
real-time operations linux
relevant posix documents
two linux distributions
distributions have achieved
achieved official posix
official posix certification
presents few surprises
familiar with unix
detail these interfaces
linux by default
linux programming interface
programming interface adheres
adheres to svr4
svr4 unix semantics
behavior a separate
set of libraries
implement bsd semantics
semantics in places
two behaviors differ
certification of linux
linux with respect
slowed because certification
involved in certifying
certifying an operating
system s compliance
standards is substantial
supporting a wide
base of applications
applications is important
implementation of standards
goal for linux
certified in addition
linux currently supports
posix threading extensions-pthreads
-and a subset
real-time process control
system the linux
bodies of code
traditional unix implementations
kernel the kernel
kernel is responsible
including such things
things as virtual
memory and processes
libraries the system
system libraries define
define a standard
set of functions
applications can interact
kernel these functions
privileges of kernel
utilities the system
utilities are programs
programs that perform
specialized management tasks
tasks some system
initialize and configure
configure some aspect
system ; othersknown
othersknown as daemons
daemons in unix
terminology -may run
handling such tasks
tasks as responding
responding to incoming
incoming network connections
accepting logon requests
requests from terminals
updating log files
components that make
full linux system
kernel code executes
processor s privileged
mode with full
computer linux refers
mode as kernel
kernel under linux
code is built
kernel any operating-system-support
systems have adopted
adopted a messagepassing
kernel is created
binary the main
code and data
iil a single
single address space
calls an operating-system
interrupt is delivered
linux kernel loadable
kernel loadable kernel
loadable kernel modules
kernel modules figure
scheduling and virtual
virtual memory code
including all device
kernel components share
room for modularity
applications can load
load shared libraries
libraries at run
kernel can load
dynamically at run
advance which modules
independent loadable components
services to give
arbitrated and protected
access to hardware
resources the kernel
required to qualify
operating system provided
features of unix
unix application expects
operating-system interface visible
visible to running
applications make calls
call the operatingsystem
system libraries provide
provide many types
types of functionality
applications to make
make kernel-system service
kernel-system service requests
service requests making
making a system
system call involves
call involves transferring
involves transferring control
control from tmprivileged
tmprivileged user mode
mode to privileged
privileged kernel mode
vary from architecture
architecture to architecture
architecture the libraries
libraries take care
care of collecting
collecting the system-call
arranging those arguments
make the system
call the libraries
provide more complex
language s buffered
buffered file-handling functions
providing more advanced
control of file
basic kernel system
kernel system calls
calls the libraries
libraries also provide
correspond to system
support the running
running of unix
applications are implemented
limix system includes
includes a wide
variety of user-mode
user-mode programs-both system
programs-both system utilities
utilities and user
system utilities include
initialize the system
configure network devices
load kernel modules
modules continually running
running server programs
programs also com1.t
com1.t as system
programs handle user
handle user login
user login requests
standard utilities serve
utilities serve key
serve key system-administration
key system-administration functions
unix user environment
number of standard
simple everyday tasks
moving and deleting
displaying the contents
file more complex
utilities can perform
perform text-processing functions
sorting textual data
data and performing
performing pattern searches
searches on input
form a standard
standard tool set
set that users
users can expect
perform any operating-system
basic limix system
load and unload
unload arbitrary sections
sections of kernel
code on demand
demand these loadable
kernel modules run
run in privileged
consequence have full
run in theory
module is allowed
module might implement
implement a device
modules are convenient
code is free
wanting to write
write kernel code
compile a modified
reboot to load
reloading the entire
cycle to undertake
kernel to test
driver is written
users can benefit
rebuild their kernels
released with proprietary
proprietary components added
demand the kernel
kernel s module
parties to write
write and distribute
drivers or file
standard minimal kernet
extra device drivers
device drivers built
system at startup
startup or loaded
system on demand
demand and unloaded
mounted and unloaded
unloaded from memory
support under linux
drivers to reserve
reserve hardware resources
protect those resources
resources from accidental
21.3.1 module management
module management loading
loading a module
loading its binary
contents into kernel
references the module
makes to kernel
symbols or entry
points are updated
updated to point
kernel s address
address space linux
space linux deals
updating by splitting
splitting the job
job of module
two separate sections
management of sections
sections of module
code in kernel
handling of symbols
symbols that modules
modules are allowed
allowed to reference
maintains an internal
internal syncbol table
kernel this symbol
set of symbols
kernel the set
set of exported
exported symbols constitutes
constitutes a well-defined
module can interact
kernel function requires
requires an explicit
effort is needed
needed to import
import those symbols
module a module
standard external linking
external symbols referenced
marked as unresolved
final module binary
module binary produced
utility first scans
scans the module
references all symbols
resolved are looked
kernel s symbol
kernel are substituted
module s code
kernel for loading
resolve any references
module is rejected
module is performed
two stages first
moduleloader utility asks
asks the kernel
kernel to reserve
reserve a continuous
area of virtual
virtual kernel memory
module the kernel
address to relocate
relocate the module
module s machine
correct loading address
call then passes
passes the module
kernel the module
previously allocated space
table is updated
final module-management component
requestor the kernel
defines a communication
program can connect
kernel will inform
inform the management
requests a device
give the manager
manager the opportunity
opportunity to load
load that service
service the original
original service request
request will complete
module is loaded
loaded the manager
process regularly queries
queries the kernel
dynamically loaded module
unloads that module
longer actively needed
21.3.2 driver registration
lets the rest
kernel maintains dynamic
maintains dynamic tables
set of routines
calls a module
module s startup
loaded and calls
calls the module
module s cleanup
module is unloaded
routines are responsible
responsible for registering
registering the module
module s functionality
module may register
register many types
types of drivers
register two separate
two separate mechanisms
mechanisms for accessing
accessing the device
device registration tables
registration tables include
drivers these drivers
drivers include character
include character devices
including all disk
network interface devices
systems the file
linux s virtual-file-system
virtual-file-system calling routines
implement a format
format for storing
virtual file system
system whose contents
contents are generated
protocols a module
module may implement
implement an entire
entire networking protocot
set of packet-filtering
format this format
type of executable
addition a module
module can register
set of entries
sysctl and tables
21.3.3 conflict resolution
conflict resolution commercial
resolution commercial unix
commercial unix implementations
sold to run
hardware one advantage
number of configurations
drivers for devices
controllers and video
video display adapters
adapters the problem
problem of managing
managing the hardware
severe when modular
modular device drivers
set of devices
central conflict-resolution mechanism
resources its aims
modules from clashing
clashing over access
resources to prevent
auto-detect device configuration-from
device configuration-from interfering
interfering with existing
existing device drivers
drivers to resolve
conflicts among multiple
parallel printer driver
parallel printer port
kernel maintains lists
lists of allocated
allocated hardware resources
hardware i address
i address space
expected to reserve
reserve the resource
kernel database first
first this requirement
administrator to determine
module is expected
mechanism to reserve
reserve in advance
advance any hardware
reservation is rejected
fail its initialization
initialization and request
alternative hardware resources
activity is serviced
process model similar
unix linux operates
review the traditional
traditional unix process
unix process model
21.4.1 the fork
model the basic
principle of unix
unix process management
separate two operations
process is created
call to exec
two distinctly separate
distinctly separate functions
created with fork
program being run-the
run-the new subprocess
subprocess simply continues
process was running
process be created
process may call
program starts executing
advantage of great
call that runs
runs that program
program simply runs
parent process wishes
wishes to modify
modify the environment
running the original
make any system
calls it requires
requires to modify
modify that child
maintain to track
track the context
program under linux
number of specific
process properties fall
21.4.1.1 process identity
identity a process
process identity consists
identifier the pid
makes a system
call to signal
process additional identifiers
additional identifiers associate
associate the process
single user command
credentials each process
groups are discussed
determine the rights
process to access
access system resources
resources and files
personality process personalities
found on unix
linux each process
modify the semantics
libraries to request
request that system
calls be compatible
varieties of unix
group and session
group or session
session its credentials
security checks howeve1
process is unchangeable
identifies that process
process until termination
21.4.1.2 process environment
environment a process
process s environment
environment is inherited
two null-terminated vectors
vector the argument
vector simply lists
lists the command-line
invoke the running
pairs that associates
associates named environment
named environment variables
variables with arbitrary
arbitrary textual values
values the environment
held in kernel
user-mode address space
argument and environment
process will inherit
inherit the environment
completely new environment
environment is set
program is invoked
invoked on calling
supply the environment
program the kernel
passes these enviromnent
replacing the process
process s current
environment the kernel
kernel otherwise leaves
leaves the environment
environment and command-line
command-line vectors alone-their
vectors alone-their interpretation
interpretation is left
libraries and applications
passing of environment
process provide flexible
provide flexible ways
ways to pass
information to components
user-mode system software
software various important
important environment variables
variables have conventional
meanings to related
variable is set
type of terminal
user s login
variable to determine
user s display
moving the cursor
cursor and scrolling
scrolling a region
region of text
programs with multilingual
language to display
display system messages
messages for programs
programs that include
include multilingual support
environment-variable mechanism custom-tailors
custom-tailors the operating
users can choose
languages or select
21.4.1.3 process context
context the process
identity and environment
exits a process
process may choose
choose to change
change some aspects
alter its environment
environment in contrast
constantly process context
process context includes
scheduling context-the information
suspend and restart
restart the process
process this information
information includes saved
includes saved copies
process s registers
registers floating-point registers
registers are stored
incur the overhead
overhead of saving
saving that state
state the scheduling
context also includes
information about scheduling
outstanding signals waiting
process a key
process s kernel
area of kernel
kernel memory reserved
exclusively by kernel-mode
code both system
calls and interrupts
interrupts that occur
accounting the kernel
kernel maintains accounting
maintains accounting information
total resources consumed
table the file
array of pointers
pointers to kernel
kernel file structures
making file-i system
file table lists
lists the existing
existing open files
file-system context applies
applies to requests
requests to open
open new files
files the current
root and default
searches are stored
signal-handler table unix
table unix systems
systems can deliver
deliver asynchronous signals
process in response
events the signal-handler
signal-handler table defines
defines the routine
process s address
specific signal arrives
virtual memory context
context the virtual
memory context describes
describes the full
process s private
private address space
functionality of duplicating
duplicating a process
ability to create
threads in fact
task-rather than process
process or thread-when
program when clone
passed a set
set of flags
flags that determine
parent and child
passed the flags
tasks will share
current working directory
set of open
files using clone
fashion is equivalent
equivalent to creating
creating a thread
parent task shares
flags is set
set when clone
sharing takes place
resulting in functionality
lack of distinction
distinction between processes
hold a process
process s entire
main process data
process data structure
holds the context
context within independent
process s file-system
context are held
held in separate
separate data structures
structures the process
simply contains pointers
share a subcontext
subcontext by pointing
subcontexts to copy
create new subcontext
subcontext data struch1res
data struch1res initialized
subcontext data structures
parent the fork
case of clone
copies all subcontexts
job of allocating
running and interrupting
interrupting of processes
aspect of scheduling
important to linux
kernel tasks kernel
tasks kernel tasks
kernel tasks encompass
encompass both tasks
process and tasks
tasks that execute
internally on behalf
21.5.1 process scheduling
process scheduling linux
two separate process-scheduling
separate process-scheduling algorithms
algorithm for fair
scheduling among multiple
designed for real-time
important than fairness
routine time-sharing tasks
time-sharing tasks received
received a major
overhaul with version
kernel earlier versions
linux kernel ran
ran a variation
traditional unix scheduling
unix scheduling algorithm
provide adequate support
grows the overhaul
scheduler with version
algorithm that runs
runs in constant
including processor affin.ity
affin.ity and load
fairness and support
support for interactive
relative priority highest
priority highest lowest
lowest time quantum
relationship between priorities
priorities and time-slice
two separate priority
separate priority ranges
nice value ranging
two ranges map
global priority scheme
numerically lower values
values indicate higher
linux scheduler assigns
scheduler assigns higher-priority
assigns higher-priority tasks
higher-priority tasks longer
longer time quanta
quanta and lower-priority
shorter time quanta
length is shown
rum able task
task is considered
eligible for execution
task has exhausted
quanta the kernel
runqueue data structure
runqueue and schedules
two priority arrays-active
arrays-active and expired
expired the active
priority arrays includes
includes a list
list of tasks
chooses the task
array for execution
processor is scheduling
scheduling the highest-priority
tasks have exhausted
array is empty
two priority arrays
arrays are exchanged
array and vice-versa
assigned dynamic priorities
minus a value
ether a value
value is added
task s nice
nice value depends
task a task
task s interactivity
interactivity is determined
sleeping while waiting
typically have longer
longer sleep times
favors such interactive
tasks with shorter
shorter sleep times
task s dynamic
priority is recalculated
two active array
active array priority
expired array priority
assigned new priorities
scheduling is simpler
simpler still linux
two realtime scheduling
realtime scheduling classes
scheduling classes required
required by posix.lb
priority irt addition
scheduling class processes
priorities can compete
extent in time-sharing
scheduler always runs
runs the process
priority among processes
processes of equal
difference between fcfs
fcfs and round-robin
fcfs processes continue
exit or block
unlike routine time-sharing
assigned static priorities
linux s real-time
scheduling is soft-rather
soft-rather than hard-real
scheduler offers strict
offers strict guarantees
priorities of real-time
offer any guarantees
quickly a reahim.e
21.5.2 kernel synchronization
processes a request
request for kernel-mode
execution can occur
ways a running
program may request
request an operating-system
call or implicitly-for
page fault occurs
controller may deliver
deliver a hardware
cpu to start
executing a kernel-defined
access the sanl.e
sanl.e internal data
internal data structures
middle of accessing
accessing some data
service routine executes
access or modify
data without risking
risking data corruption
corruption this fact
idea of critical
sections-portions of code
code that access
access shared data
kernel synchronization involves
scheduling a framework
framework is required
tasks to run
run without violating
violating the integrity
integrity of shared
prior to version
nonpreernptive kernet meaning
run with version
kernel provides spinlocks
spinlocks and semaphores
kernel on smp
fundamental locking mechanism
kernel is designed
spinlock is held
durations on single-processor
spinlocks are inappropriate
replaced by enabling
enabling and disabling
disabling kernel preemption
holding a spinlock
task disables kernel
disables kernel preemption
release the spinlock
enables kernel preemption
preemption this pattern
pattern is summarized
approach to disable
disable and enable
enable kernel preemption
two simple system
simple system calls-preempldisable
disabling and enabling
enabling kernel preemption
task is holding
holding a lock
enforce this rule
structure that includes
includes the field
indicating the number
number of locks
locks being held
task the counter
counter is incremented
lock is acquired
acquired and decremented
lock is released
value of preemplcount
task currently running
running is greater
safe to preempt
preempt the kernet
task currently holds
holds a lock
safely be interrupted
calls to preempt_disable
spinlocks-along with enabling
disabling of kernel
kernel preemption -are
lock is held
held for short
held for longer
applies to critical
sections that occur
occur in interrupt
interrupt service routines
routines the basic
processor s interrupt-control
hardware by disabling
risk of concurrent
access to shared
penalty for disabling
enable and disable
instructions are expensive
long as interrupts
interrupts remain disabled
i is suspended
waiting for servicing
wait until interrupts
interrupts are reenabled
degrades the linux
long critical sections
sections to run
disabled this ability
code an interrupt
driver can signal
signal the arrival
entire network packet
deal of code
code being executed
executed to disassemble
forward that packet
kernel-system service routines
interrupt protection levels
implements this architecture
architecture by separating
separating interrupt service
normal interrupt service
routine that runs
runs with recursive
recursive interrupts disabled
disabled ; interrupts
priority may interrupt
interrupt the routine
priority are disabled
routine is run
scheduler that ensures
ensures that bottom
halves never interrupt
scheduler is invoked
service routine exits
kernel can complete
complete any complex
done in response
interrupt without worrying
half is executing
interrupt can request
bottom half execute
completes each execution
similar bottom half
architecture is completed
mechanism for disabling
disabling selected bottom
selected bottom halves
halves while executing
foreground kernel code
code the kernel
kernel can code
code critical sections
system interrupt handlers
handlers can code
code their critical
sections as bottom
enter a critical
disable any relevant
relevant bottom halves
halves to prevent
sections from interrupting
kernel can reenable
reenable the bottom
halves and run
run any bottom-half
queued by top-half
top-half interrupt service
levels of interrupt
kernel each level
interrupted by code
time-sharing scheduling interrupt
scheduling interrupt occurs
21.5.3 symmetric multiprocessing
multiprocessing the linux
first stable linux
stable linux kernel
kernel to support
allowing separate processes
processes to execute
execute in parallel
parallel on separate
implementation of smp
imposed the restriction
executing kernel-mode code
single kernel spinlock
bkl for big
big kernel lock
level of locking
granularity later releases
made the smp
implementation more scalable
scalable by splitting
splitting this single
spinlock into multiple
kernel s data
structures such spinlocks
spinlocks are described
kernel provided additional
provided additional smp
additional smp enhancements
including processor affinity
affinity and load-balancing
management under linux
components the first
deals with allocating
allocating and freeing
freeing physical memory-pages
groups of pages
blocks of memory
handles virtual memory
space of running
examine the mechanisms
program are brought
brought il lto
lto a process
process s virtual
memory in response
management of physical
physical memory due
due to specific
specific hardware characteristics
linux separates physical
separates physical memory
zone_dma zone_normal zone_highmem
zone_highmem these zones
zones are architecture
intel 80x86 architecture
industry standard architecture
access the lower
memory using dma
physical memory comprise
memory comprise zonldma
comprise zonldma zone_normal
zonldma zone_normal identifies
zone_normal identifies physical
identifies physical memory
cpu s address
space this zone
routine memory requests
requests for architectures
limit what dma
dma can access
refers to physical
kernel address space
32-bit intel architecture
4-gb address space
kernel is mapped
memory is referred
allocated from zone_highmem
zone_highmem the relationship
relationship of zones
zones and physical
architecture is shown
list of free
request for physical
physical memory arrives
satisfies the request
priinary physical-memory manager
lil lux kernel
allocator each zone
responsible for allocating
freeing all physical
capable of allocating
physically contiguous pages
pages on request
request the allocator
units of allocatable
memory are paired
allocatable memory region
two allocated partner
allocated partner regions
regions are freed
combined to form
form a larger
larger region-a buddy
region-a buddy heap
heap that larger
combine to form
larger free region
small memory request
satisfied by allocation
existing small free
small free region
partners to satisfy
request separate linked
separate linked lists
record the free
free memory regions
smallest size allocatable
single physical page
physical page figure
smallest available region
region is broken
kernel are ncade
drivers that reserve
reserve a contiguous
area of memory
memory during system
allocator to reserve
memory several specialized
specialized memory-management subsystems
underlying page allocator
allocator to manage
pools of memory
memory for kernel
caching pages belonging
belonging to files
allocate entire pages
memory are required
required the kernel
16kb 4kb figure
splitting of memory
allocator for arbitrary-sized
language s malloc
service allocates entire
allocates entire pages
pages on demand
pieces the kernel
lists of pages
service allocating memory
allocating memory involves
memory involves determining
taking the first
first free piece
list or allocating
page and splitting
memory regions clainled
system are allocated
reallocate or reclaim
reclaim these regions
regions in response
response to memory
adopted by linux
linux for allocating
allocating kernel memory
allocation a slab
pages a consists
unique kernel data
kernel data structure
data structure representing
structure representing process
representing process descriptors
cache for file
cache for semaphores
cache is populated
structure the cache
cache representing semaphores
representing semaphores stores
semaphores stores instances
instances of semaphore
cache representing process
process descriptors stores
descriptors stores instances
instances of process
process descriptor objects
objects the relationship
relationship among slabs
objects is shown
shows two kernel
two kernel objects
size these objects
objects are stored
algorithm uses caches
caches to store
store kernel objects
cache is created
number of objects
objects are allocated
cache the number
contiguous 4-kb pages
cache are marked
marked as free
structure is needed
allocator can assign
assign any free
free kernel objects
3-kb i objects
7-kb objects figure
allocator in linux
cache to satisfy
request the object
cache is marked
kernel requests memory
representing a process
descriptor in linux
type struct task_struct
linux kernel creates
struct task_struct object
cache the cache
cache will fulfill
fulfill the request
full all objects
slab are marked
empty all objects
partial the slab
allocator first attempts
attempts to satisfy
object is assigned
slab is allocated
allocated from contiguous
contiguous physical pages
pages and assigned
cache ; memory
object is allocated
two other main
subsystems in linux
system these systems
kernel s main
cache for block
devices is performed
native linux diskbased
linux diskbased file
diskbased file systems
nfs networked file
networked file system
page cache stores
cache stores entire
stores entire pages
pages of file
limited to block
cache networked data
data the virtual
memory system manages
manages the contents
virtual address space
two systems interact
reading a page
page of data
page cache requires
cache requires mapping
requires mapping pages
system in greater
21.6.2 virtual memory
memory the limn
limn virtual memory
maintaining the address
address space visible
process it creates
pages of virtual
memory on demand
demand and manages
loading those pages
pages from disk
disk and swapping
out to disk
disk as required
required under linux
virtual memory manager
memory manager maintains
maintains two separate
two separate views
set of separate
set of pages
system has received
address space consists
set of nonoverlapping
representing a continuous
space each region
region is described
single vm_area_struct structure
structure that defines
defines the properties
including the process
process s read
region the regions
space are linked
balanced binary tree
view is stored
hardware page tables
process the pagetable
pagetable entries identify
identify the exact
exact current location
page of virtual
memory the physical
view is managed
kernel s software-interrupt
access a page
tables each vm_area_struct
field that points
table of functions
functions that implement
implement the key
key page-management functions
virtual memory region
region all requests
requests to read
write an unavailable
central memorymanagement routines
details of managing
type of memory
21.6.2.1 virtual memory
virtual memory regions
memory regions linux
regions linux implements
implements several types
types of virtual
regions one property
property that characterizes
characterizes virtual memory
regions are backed
type of virtual
region represents demand-zero
represents demand-zero memory
read a page
back a page
page of memory
filled with zeros
table is filled
kernel s page
page of physical
process s page
mapped that file
space any number
processes can map
reaction to writes
writes the mapping
private or shared
privately mapped region
process in contrast
shared region result
result in updating
mapping that object
space the kernel
kernel will create
call the first
case is easy
program is executed
completely empty virtual
empty virtual address
routines for loading
loading the program
program to populate
populate the address
space with virtual
process with fork
creating a concplete
copies the parent
process s vm_area_struct
set of page
child the parent
parent s page
tables are copied
covered is incremented
pages of memory
special case occurs
copying operation reaches
reaches a virtual
privately any pages
process has written
region are private
update the page
regions are copied
marked for copy-on-write
modifies these pages
two processes share
modify a copy-on-write
page is checked
copies the page
page s contents
ensures that private
private data pages
pages are shared
shared between processes
copies are made
swapping and paging
paging an important
memory from physical
inemory is needed
needed early unix
early unix systems
unix systems performed
performed this relocation
relocation by swapping
out the contents
contents of entire
movement of individual
memory between physical
memory and disk
implement whole-process swapping
newer paging mechanism
two sections first
out the transfer
transfer and pages
pages data back
back into physical
linux s pageuut
9.4.5.2 under linux
clock the age
precisely a measure
page s youthfulness
activity the page
recently frequently accessed
frequently accessed pages
pages will attain
attain a higher
higher age value
infrequently accessed pages
pages will drop
pass this age
pager to select
pages to page
page out based
paging mechanism supports
mechanism supports paging
dedicated swap devices
devices and partitions
significantly slower due
extra overhead incurred
file system blocks
maintained in physical
times the allocator
write out pages
pages to continuous
runs of disk
blocks for improved
performance the allocator
records the fact
tables on modern
entry s page-not-present
allowing the rest
21.6.2.4 kernel virtual
kernel virtual memory
virtual memory linux
memory linux reserves
process the page-table
entries that map
pages are marked
marked as protected
visible or modifiable
processor is running
running in user
mode this kernel
virtual memory area
regions the first
translation from physical
physical to virtual
virtual addresses occurs
occurs when kernel
run the core
normal page allocator
kernel s reserved
section of address
specific purpose page-table
purpose page-table entries
kernel to point
areas of memory
memory the kernel
pair of facilities
memory the vmalloc
allocates an arbitrary
number of physical
virtually contiguous kernel
contiguous kernel memory
memory the vremap
maps a sequence
sequence of virtual
addresses to point
driver for memory-mapped
execution and loading
loading of user
programs the linux
kernel s execution
execution of user
programs is triggered
call this exec
commands the kernel
kernel to run
overwriting the current
current execution context
program the first
process has permission
file being executed
invokes a loader
routine to start
running the program
program the loader
load the contents
file into physical
program into virtual
routine in linux
linux for loadil1.g
maintains a table
function the opportunity
made the initial
format for linux
linux s binary
files was changed
changed older linux
older linux kernels
linux kernels understood
format for binary
files-a relatively simple
simple format common
common on older
older unix systems
unix systems newer
systems newer linux
newer linux systems
modern elf format
current unix implementations
unix implementations elf
number of advantages
flexibility and extensibility
extensibility new sections
add extra debugging
extra debugging information
causing the loader
confused by allowing
registration of multiple
multiple loader routines
support the elf
out binary formats
single rmming system
loading and running
running of elf-format
binaries the procedure
procedure for loading
binaries is simpler
similar in operation
mapping of programs
programs into memory
memory under linux
load a binary
file are mapped
mapped into regions
regions of virtual
page fault result
page into physical
memory using demand
kernel s binary
loader to set
initial memory mapping
mapping an elf-format
elf-format binary file
binary file consists
sections the elf
elf loader works
works by reading
reading the header
header and mapping
mapping the sections
file into separate
shows the typical
layout of memory
memory regions set
address space sits
sits the kernet
region of virtual
virtual memory inaccessible
inaccessible to normal
normal user-mode programs
programs the rest
rest of virtual
kernel s memory-mapping
functions to create
regions that map
map a portion
loader s job
program to start
start the regions
il1.clude the stack
program s text
text and data
stack is created
user-mode virtual memory
downward toward lower-numbered
addresses it includes
arguments and environment
il1 the exec
regions are created
end of virtual
memory the sections
contail1 program text
swap partition
swap file
file swap
swap map
data structures
linux systems
modern computers
physical memory
older systems
swap space
anonymous memory
memory shared
processes linux
swap areas
swap area
regular file
file system
raw-swap-space partition
area consists
swapped pages
.u1.2.p-an array
integer counters
page slot
swapped page
counter ij.l.dicates
disk drives
computer system
large number
system presents
presents opportunities
setup offers
data storage
redundant information
multiple disks
disk-organization techniques
reliability issues
raids composed
cheap disks
cost-effective alternative
expensive disks
higher reliability
higher data-transfer
data-transfer rate
economic reasons
specific single
structuring raid
raid raid
raid storage
operating system
system software
raid flmctionality
intelligent host
host controller
control multiple
attached disks
raid array
standalone unit
standard ata
ata scsi
common setup
raid functionality
raid-protected disks
raid software
software layers
fail suppose
single disk
disk failure
significant amount
high rate
data loss
extra information
lost information
disk fails
introducing redundancy
logical disk
disk consists
physical disks
mirrored volume
volume fails
failed disk
volume-where failure
data depends
individual disks
mirrored disk
disk system
disk failures
valid power
power failures
natural disasters
manufacturing defects
correlated failures
disks age
failure grows
n1.irrored-disk systems
systems offer
singledisk systems
power fails
inconsistent state
write-back cache
error protection
parallel access
disks improves
improves performance
disk mirroring
read requests
transfer rate
single-disk system
striping data
simplest form
write bit
normal size
access rate
disk participates
bit-level striping
bit level
block-level striping
main goals
small accesses
page accesses
load balancing
large accesses
raid levels
levels mirroring
high reliability
expensive striping
high data-transfer
data-transfer rates
improve reliability
numerous schemes
provide redundancy
lower cost
disk striping
parity bits
cost-performance trade-offs
error-correcting bits
raid structure
non-redundant striping
mirrored disks
memory-style error-correcting
error-correcting codes
bit-interleaved parity
block-interleaved parity
distributed parity
cases depicted
extra disks
failure recovery
raid level
disk arrays
raid ievell
ievell raid
raid level1
level1 refers
mirroring figure
mirrored organization
raid level2
level2 raid
memory-style error-correctingcode
organization memory
memory systems
memory system
parity bit
byte set
stored parity
computed parity
single-bit errors
menwry system
error-correcting schemes
schemes store
extra bits
single bit
first bit
eighth bit
error-correction bits
disks labeled
disks fails
remaining bits
damaged data
data note
unlike memory
disk controllers
single parity
error correction
missing bit
raid level3
disks required
one-disk overhead
storage overhead
parity disk
regular disks
mirror disk
n-way striping
single block
negative side
level3 supports
performance problem
overhead results
slower writes
non-parity raid
raid arrays
performance penalty
storage arrays
arrays include
hardware controller
dedicated parity
parity hardware
controller offloads
parity computation
nvram cache
make parity
parity raid
caching array
array doing
doing parity
non-caching non-parity
raid level4
parity block
separate disk
block read
read accesses
multiple read
transfer rates
large reads
large writes
high transfer
small independent
independent writes
operatingsystem write
block requires
single write
write requires
disk accesses
raid set
set seamlessly
added disks
parity value
levels raid
spreading data
storing data
disks stores
store data
nth block
nth blocks
actual data
store parity
potential overuse
common parity
raid system
stores extra
scheme shown
redundant data
disks needed
equivalent stripe
raid option
mirrored pairs
theoretical advantages
entire stripe
numerous variations
basic raid
raid schemes
schemes described
exact definitions
volume-management software
software layer
storage hardware
full raid
raid solution
solution parity
host bus-adapter
storage array
raid sets
smaller volumes
volumes arrays
multiple connections
allowing multiple
multiple hosts
san interconnect
interconnect layer
disk virtualization
virtualization devices
device sits
accepts commands
manages access
separate storage
storage devices
automatic duplication
separate sites
disaster recovery
recovery replication
synchronous replication
asynchronous replication
written periodically
primary site
site fails
distance limitations
features differs
differs depending
san intercom1ect
host operating
raid implementations
hot spare
spare disk
case disk
mirrored pair
pair fail
human intervention
system designers
designers choose
important factor
continuous supply
interactive database
database systems
rebuild performance
performance influences
performance varies
rebuild data
rebuild times
large disk
disk sets
high-performance applications
critical raid
fast recovery
recovery raid
small databases
inserv storage
array im1ovation
expensive solutions
previous technologies
specific raid
chunklets ram
chunklet level
multiple volumes
wafl file
inserv snapshots
mount copies
entire file
host makes
file systems
original size
change requires
copying data
configure inserv
large amount
logical storage
small amount
physical storage
host starts
unused disks
original logical
logical level
fixed storage
storage space
systems noticing
drives needed
high space
space overhead
large volumes
data level6
including arrays
wireless systems
raid structures
recover data
short units
parity unit
tape-drive robots
multiple tape
tape drives
stripe data
increase throughput
file structure
incomplete writes
corrupt data
raid protects
physical media
media errors
software errors
hardware bugs
potential perils
solaris zfs
system takes
innovative approach
data zfs
zfs maintains
internal checksums
including data
checksummed rathel
correct checksum
incorrect checksum
bad block
directory entry
checksumming takes
takes places
zfs structures
higher level
error detection
raid disk
standard file
extra overhead
checksum calculation
extra block
read-modify-write cycles
twenty disks
disks divided
separate data
zfs checksums
five-disk raid
properly allocated
requirements change
array allowed
entire set
large raid
volume managers
issue described
above-mismatched file-system
file-system sizes
file-system growth
change sizes
zfs combines
file-system management
volume management
unit providing
greater functionality
traditional separation
zfs file
entire pool
free space
pool zfs
memory model
release storage
artificial limits
resize volumes
volumes zfs
system owner
traditional volumes
zfs model
pooled storage
zfs pool
write-ahead log
stable storage
information residing
required information
multiple storage
independent failure
failure modes
damaged state
correct value
failure occurs
disk write
write results
successful completion
partial failure
failure occurred
total failure
write started
previous data
data values
disk remain
remain intact
recovery procedure
consistent state
physical blocks
logical block
output operation
first physical
physical block
first write
write completes
operation complete
detectable error
error exists
blocks differ
first block
procedure ensures
failure destroys
disk writes
arrays add
add nvram
considered part
storage writes
disk sealed
sealed inside
inexpensive disks
inexpensive cartridges
drive lowers
low cost
tertiary storage
tertiary-storage devices
common examples
floppy disks
rewritable cds
tertiarystorage devices
removable devices
flash memory
usb interface
removable disks
storage floppy
removable magnetic
magnetic disks
flexible disk
disk coated
magnetic material
protective plastic
plastic case
common floppy
similar technology
hard disks
recording stuface
greater risk
removable disk
records data
rigid platter
platter coated
recording technology
magnetic disk
magneto-optic head
head flies
disk surface
disk head
protective layer
arrangement makes
head crashes
magneto-optic disk
magnetic field
room temperature
head flashes
laser beam
tiny spot
laser heats
weak magnetic
tiny bit
magnetic fields
hard disk
drive reads
laser light
magnetic spot
rotated clockwise
head detects
optical disks
special materials
bright spots
amorphous state
crystalline state
reflective layer
phase-change drive
low power
read data
medium power
recording medium
high power
re-recordable cd-rw
worm disk
thin aluminum
aluminum film
film sandwiched
plastic platters
small hole
burning holes
alter data
ecc code
additions worm
worm disks
metal layer
protective glass
newer write-once
write-once technology
technology records
organic polymer
polymer dye
aluminum layer
dye absorbs
absorbs laser
form marks
recordable cd-r
data prerecorded
nonremovable counterparts
writing process
magnetic tape
removable medium
general rule
tape holds
disk cartridge
cartridge tape
similar transfer
random access
disk seek
rewind operation
takes tens
typical tape
typical disk
tape cartridge
equivalent capacity
economical medium
fast random
access tapes
backup copies
disk data
large supercomputer
supercomputer centers
enornwus volumes
scientific research
large commercial
commercial enterprises
large tape
tape installations
robotic tape
tape changers
move tapes
storage slots
tape library
mechanisms give
computer automated
automated access
tape cartridges
diskresident file
disk storage
high performance
on-line magnetic
off-line tapes
tapes sitting
storage room
future technology
storage technologies
economics change
technologies evolve
solid-state disks
hard drive
drive depending
memory technology
affects performance
performance nonvolatile
nonvolatile ssds
traditional hard
moving parts
lower capacity
larger hard
shorter life-spans
hold metadata
requires high-performance
journaling file
system ssds
notebook computers
energy efficient
promising storage
storage technology
holographic photographs
special media
three-dimensional array
pixel represents
data transfer
extremely high
continued development
holographic storage
active research
fabrication technologies
electronic chips
small datastorage
datastorage machines
proposal calls
tiny disk
disk heads
square centimeter
magnetic storage
storage material
material suspended
moved lengthwise
head accesses
linear track
shifted sideways
nonvolatile data-storage
data-storage technology
semiconductor dram
storage medium
removable media
operating-system support
major jobs
physical devices
virtual machine
machine abstraction
raw device
data blocks
system queues
interleaved requests
storage media
application interface
operating systems
fixed disks
blank cartridge
empty file
disk tapes
handled differently
raw storage
tape drive
application exits
tape device
exclusivity makes
makes sense
interleaving random
random accesses
file-system services
file names
application makes
backup tape
file sizes
file data
ascii form
files written
long string
block size
block written
disk drive
basic operations
tape locate
specific logical
entire track
track locating
filled tape
empty space
written area
physical space
fixed size
formatting process
empty sectors
final positions
variable block
defective tape
bad area
operation explains
area -the
-the positions
logical blocks
block number
tape head
relative motion
operation space
locate backward
side effect
effect means
append-only devices
drive implements
drive refuses
eot mark
start writing
writing doing
file-system data
append-only property
file naming
fixed disk
drive letter
molmt table
table enables
removable cartridge
serial number
removable device
serial numbers
12-digit serial
write data
removable drive
additional problems
store bytes
binary numbers
name-space problem
problem unsolved
music cds
universal format
drive data
data cds
operating-system device
device driver
comn1on formats
formats dvd
dvd fonnats
hierarchical storage
storage management
human assistance
storage systems
computer instructs
jukeboxes hold
hold tens
robotic arms
arms managing
storage system
system extends
storage hierarchy
primary memory
secondary storage
virtual memory
straightforward manner
long delay
demand paging
files remain
file-archiving systems
file continues
longer occupy
occupy space
system call
file contents
operation returns
returns control
disk-resident copy
current work
hsm includes
data move
sites save
hsm tape
tape ilm
ilm centralizes
centralizes knowledge
performance issues
important aspects
tertiary-storage performance
average data
data rate
bytes divided
sustained bandwidth
data stream
effective bandwidth
rate provided
tlce bandwidth
bandwidth ranges
fastest tapes
similar range
performance measure
tapes disk
disk access
selected cylinder
rotational latency
tape storage
small portion
tape wound
tape requires
tape reels
selected block
block reaches
thousand times
access latency
significantly higher
stop spinning
robotic arm
disk cartridges
operation takes
switching disks
jukebox incurs
slow tape
tape jukebox
disk jukebox
switching tapes
expensive tape
tape jukeboxes
random item
pay attention
terrible bottleneck
bandwidth-to-storage-capacity ratio
robotic library
data stored
large hard
average waiting
storage results
cheap cartridges
cartridges share
expensive drives
removable library
small number
good pe1jormance
pe1jormance means
high speed
important aspect
media failure
practical purposes
infinitely small
removable n1.ag
netic disks
harmful environmental
environmental conditions
mechanical forces
transparent plastic
glass layer
tape varies
inexpensive drives
drives wear
out tapes
magnetic-disk head
magnetic-tape drive
weak spot
close contact
scrubbing action
fixed-disk drive
optical disk
head crash
optical-disk drive
data cartridge
cost storage
storage cost
cost suppose
magnetic platters
total price
removable storage
low price
removable cartridges
show cost
cost trends
dram memory
magnetic hard
lowest prices
prices found
computer magazines
world wide
wide web
prices reflect
smallcomputer marketplace
minicomputer markets
2oos year
year figure
small fraction
huge tape
dram fluctuates
fluctuates widely
price crashes
excess production
production caused
marketplace caused
sigrtificant price
price increases
price decline
tape-drive prices
inexpensive tape
dramatic fall
mid-range tape
tape technology
in.expensive drives
tracking prices
small-computer marketplace
small computers
storage improved
main memory
magnitude main
memory today
megabyte dropped
medium-sized tape
tape libraries
higher storage
disk systems
disk prices
storage obsolete
revolutionary technology
archival storage
enormous tape
practical storage
storage capacity
disk farms
major secondary-storage
n1.agnetic tapes
modern disk
large one-dimensional
one-dimensional arrays
disk blocks
size disks
host computer
network cmmection
request specifies
disk-schedliling algorithms
average response
disk-queue ordering
external fragmentation
fragmented files
move blocks
fragmentation defragmenting
fragmented file
improve performance
reduced performance
sophisticated file
unix fast
fast file
control fragmentation
space allocation
disk reorganization
system manages
hardware-new disks
boot blocks
bootstrap program
efficient swap
good performance
raw disk
systems dedicate
disk partition
system administrator
storage required
large systems
raid algorithms
continued operation
automatic recovery
failure raid
log scheme
scheme requires
needed information
multiple nonvolatile
nonvolatile storage
controlled manner
stable data
magneto-optic disks
full services
file-system interface
including space
space management
requestqueue scheduling
specific cartridge
raw interface
built-in support
jukeboxes jukebox
privileged application
application designed
random-access latency
switching cartridges
low ratio
large fraction
optical media
sensitive layer
transparent coating
magnetic media
physical damage
areal density
square inch
sequential-access medium
random-access medium
storage device
access depends
transfer size
term streaming
streaming transfer
rate denotes
effective transfer
total bytes
total seconds
including overhead
disk described
average access
rate calculate
transfer sizes
performance figures
smallest transfer
acceptable utilization
random-access device
______ bytes
sequentialaccess device
s1naller transfers
minimum transfer
give acceptable
sequential-access device
hard-disk drive
hour mtbf
drive failure
disk farm
thousand years
mortality statistics
u.s resident
mtbf hours
expected lifetime
manufacturer guarantees
free-space list
tape-resident file
system assume
eot marks
read position
position commands
drive costs
cartridge holds
square black-and-white
black-and-white picture
pixel stores
millisecond answer
device affect
computing system
term fast
fast wide
wide scsi-ii
scsi-ii denotes
scsi bus
device suppose
scsi-ii disk
drive spins
sector size
sustained transfer
adjacent-cylinder seek
additional information
accurate estimate
huge transfer
average seek
random-access workload
individual sectors
multiple requests
scheduling algorithm
seek distance
distance suppose
8-kilobyte pages
average queue
queue length
algorithm reduces
write operations
operations achieved
level1 organization
previous request
pending requests
fifo order
current head
head position
total distance
disk arm
arm moves
disk-scheduling algorithms
elementary physics
physics states
constant acceleration
constant rate
seek assume
adjacent cylinder
full-stroke seek
head moves
moves explain
square root
total seek
smallest total
percentage speedup
fastest schedule
accelerating seek
seek described
hard-disk drives
disks manufactured
fixed rate
rate suppose
constant-rate seek
constantacceleration seek
additional cylinder
seek-time function
fastest scb.edule
average rotational
one-sided 5.25-inch
5.25-inch optical-disk
optical-disk cartridge
inch wide
feet long
long calculate
storage capacities
media suppose
optical tape
tape exists
physical size
storage density
tape hold
marketable price
tape cost
algorithms discussed
disk scheduling
modify sstf
include latency
latency optimization
bad blocks
sector sparing
sector slipping
influence perfonnance
perfonnance suppose
bad sectors
random locations
bad sector
cylinder estimate
workload consisting
kilobyte reads
relative advantages
scan scheduling
uniform distribution
performance depend
relative sizes
disk-scheduling disciplines
modify algorithms
ensure fairness
important goal
time-sharing system
organization comprising
disks stored
continuous blocks
shared file
tapes describe
additional features
applications sharing
special properties
disk-resident explain
ram disk
disk affect
disk-scheduling algorithm
hard-disk scheduling
system stores
buffer cache
simple estimates
terabyte storage
system made
storage suppose
disk holds
library costs
seconds compute
total cost
maximum total
total data
pure disk
system handles
library handles
mixed configuration
configuration comprising
comprising disks
disks organized
raid levell
levels disks
disks assume
disk organization
optimize performance
tradeoffs involved
rereading code
code pages
system versus
uniformly distributed
file-system fat
files suppose
fixed number
scheduling algorithms
case explain
taking advantage
hot spot
fil1.d data
indirection table
unix describe
improve disk
disk performance
accurate information
system improve
improve file
system performance
open files
throughput achieved
levels organization
levell organization
read operations
single blocks
contiguous blocks
organization achieve
nonredundant striping
redundant arrays
independent disks
detailed survey
disk-system architectures
high-performance computing
raid systems
early comparative
comparative analysis
cylinders crossed
good choice
queue lengths
describes ways
disk ann
idle seltzer
scheduling optimizations
exploit disk
idle times
discuss disk
negligible performance
performance impact
defect management
hot data
improve seek
seek times
accurate performance
performance model
drive worthington
low-level disk
disk properties
zone structure
disk power
power management
management issues
considerable influence
numerous interesting
interesting workload
workload characteristics
created files
short mckusick
berkeley fast
sophisticated techniques
wide variety
workloads mcvoy
basic ffs
ffs quinlan
worm storage
disk cache
file-system approach
storage maher
distributed file
thirty years
mathematical approach
commercial operating
tertiary-storage access
supercomputing environment
environment benjamin
massive storage
storage requirements
eosdis project
nasa management
network-attached disks
topic dating
emerging storage
electron trapping
trapping toigo
in-depth description
disk technology
potential future
future storage
main jobs
main job
web page
related topics
complete picture
hardware interface
interface places
places constraints
internal facilities
services provided
system bridges
unix system
streams mechanism
assemble pipelines
driver code
code dynamically
performance aspects
operating-system design
devices connected
major concern
operating-system designers
cd-rom jukebox
varied methods
methods form
technology exhibits
conflicting trends
increasing standardization
hardware interfaces
trend helps
improved device
device generations
existing computers
broad variety
previous devices
software techniques
hardware elements
device controllers
device-driver modules
uniform deviceaccess
deviceaccess interface
system calls
calls provide
standard interface
computers operate
general categories
transmission devices
network cards
human-interface devices
military fighter
fighter jet
space shuttle
flight computer
foot pedals
computer sends
sends output
output commands
move rudders
incredible variety
device communicates
sending signals
connection point
serial port
common set
defined protocol
electrical voltages
voltages applied
defined timings
daisy chain
computer architecture
signaling methods
connection methods
bus structure
structure appears
figure shows
system bus
processor-memory subsystem
fast devices
slow devices
usb ports
upper-right portion
bus plugged
scsi controller
common buses
main parts
computer include
serial-port controller
simple device
device controller
single chip
bus controller
scsi protocol
separate circuit
circuit board
private memory
protocol messages
built-in controllers
board attached
disk controller
disk side
bad-sector mapping
processor give
give commands
short answer
control signals
processor communicates
writing bit
bit patterns
port address
instruction triggers
triggers bus
bus lines
proper device
move bits
device register
device-control registers
address space
cpu executes
standard data-transfer
data-transfer instructions
port addresses
graphics controller
basic control
control operations
large memory558
memory558 chapter
dma controller
interrupt controller
game controller
hard-disk controller
parallel port
diskette-drive controller
port locations
mapped region
screen contents
process sends
writing data
memory-mapped region
controller generates
screen image
image based
writing millions
graphics memory
issuing millions
common type
software fault
incorrect pointer
unintended region
memory-mapped device
accidental modification
protected memory
memory helps
send output
current command
data-in register
device error
control register
port chooses
half-duplex communication
bit enables
enables parity
parity checking
bit sets
word length
bits select
speeds supported
data registers
fifo chips
output data
data register
fifo chip
small burst
complete protocol
basic handshaking
handshaking notion
producer-consumer relationship
busy bit
status register
bit means
controller sets
busy working
host signals
command-ready bit
command register
host sets
host writes
writes output
data-out register
controller notices
controller reads
write command
controller clears
error bit
small buffer
host waits
computer architectures
cpu-instruction cycles
status bit
basic polling
polling operation
cpu processing
processing remains
remains undone
hardware mechanism
cpu device
driver initiates
cpu executing
executing checks
instructions cpu
cpu resumes
resumes processing
interrupted task
basic interrupt
interrupt mechanism
mechanism works
cpu hardware
cpu senses
cpu detects
cpu performs
state save
fixed address
interrupt handler
handler determines
state restore
interrupt instruction
execution state
controller raises
interrupt request
request line
cpu catches
handler clears
device figure
mechanism enables
asynchronous event
modern operating
sophisticated interrupthandling
interrupthandling features
interrupt handling
critical processing
proper interrupt
first polling
multilevel interrupts
low-priority interrupts
modern computer
computer hardware
request lines
unrecoverable memory
memory errors
interrupt line
critical instruction
instruction sequences
maskable interrupt
request service
mechanism accepts
specific interrupt-handling
interrupt-handling routine
small set
memory addresses
interrupt handlers
vectored interrupt
single interrupt
address elements
interrupt vector
interrupt chaining
vector points
huge interrupt
interrupt table
intel pentium
pentium processor
error conditions
device-generated interrupts
high-priority interrupt
low-priority interrupt
system interacts
system probes
hardware buses
controllers raise
raise interrupts
interrupts signify
input data
nonexistent memory
memory address
privileged instruction
user mode
trigger interrupts
common property
self-contained routine
efficient hardware
software mechanism
processor state
into-detected overflow
overflow bound
bound range
range exception
exception invalid
invalid opcode
opcode device
double fault
fault coprocessor
coprocessor segment
segment overrun
invalid task
task state
state segment
segment segment
present stack
stack fault
fault general
general protection
protection page
page fault
intel reserved
floating-point error
error alignment
alignment check
check machine
machine check
maskable interrupts
interrupts figure
processor event-vector
event-vector table
privileged routine
memory paging
interrupt suspends
current process
page-fault handler
handler saves
wait queue
performs page-cache
page-cache management
resume execution
library calls
issue system
library routines
routines check
data structure
special instruction
desired kernel
kernel service
process executes
trap instruction
interrupt hardware
hardware saves
user code
supervisor mode
kernel routine
requested service
low interrupt
interrupt priority
priority compared
fifo queue
queue overflows
loses data
processing required
disk read
copy data
kernel space
user buffer
higher priority
handlers implen
implen ents
kernel code
high-priority handler
handler records
device interrupt
high-priority work
handler completes
kernel buffers
application space
ready queue
threaded kernel
kernel architecture
implement multiple
multiple interrupt
interrupt priorities
background processing
application routines
solaris kernel
kernel threads
high priorities
priorities give
handlers precedence
application code
kernel housekeeping
priority relationships
solaris thread
thread scheduler
preempt lowpriority
lowpriority interrupt
threaded implementation
implementation enables
enables multiprocessor
multiprocessor hardware
handlers concurrently
interrupt architecture
asynchronous events
supervisor-mode routines
urgent work
priorities device
hardware faults
trigger kernel
kernel routines
time-sensitive processing
efficient interrupt
good system
direct memory
memory access
large transfers
expensive general-purpose
general-purpose processor
watch status
status bits
feed data
controller register
time-a process
process termed
computers avoid
main cpu
special-purpose processor
dma transfer
dma command
command block
cpu writes
controller proceeds
memory bus
placing addresses
perform transfers
simple dma
standard component
high-speed dma
dma hardware
controller places
dma-request wire
desired address
memory-address wires
iia -acknowledge
-acknowledge wire
controller receives
dma-acknowledge signat
dma-request signal
entire transfer
controller interrupts
controller seizes
access data
data items
secondary caches
cpu computation
data-transfer work
total system
perform mercwry
virtual addresses
undergo translation
physical addresses
addresses dvma
memory-mapped devices
protected-mode kernels
prevents processes
issuing device
device commands
commands directly
discipline protects
protects data
access-control violations
system crash
system exports
exports functions
privileged process
access low-level
low-level operations
underlying hardware
memory protection
access device
controllers directly
direct access
avoid kernel
kernel communication
context switches
system security
general-purpose operating
protect memory
malicious applications
controller transfers
transfers bytes
increasing memory
transfer disk
driver tells
dma interrupts
interrupts cpu
signal transfer
transfer completion
.2-j rc-c
controller initiates
initiates dma
transfer cg
controller sends
controller figure
hardware summary
hardware aspects
electronics-hardware design
operating systen
main concepts
handshaking relationship
polling loop
takes place
devices poses
operating-system implementers
control-bit definitions
system give
structuring techniques
complex software-engineering
software-engineering problems
involves abstraction
software layering
detailed differences
general kinds
standardized set
kernel modules
device drivers
specific devices
standard interfaces
interfaces figure
device-driver layer
generic classes
hide hardware
hardware differences
applications making
subsystem independent
hardware simplifies
operating-system developer
hardware manufacturers
existing host
controller interface
write device
operating-system vendor
develop support
support code
device-hardware manufacturers
device-driver interface
multiple device
device drivers-for
drivers-for instance
solaris devices
character-stream device
device transfers
block device
sequential device
transfers data
fixed order
order determined
storage locations
synchronous device
device performs
performs data
data transfers
predictable response
response times
asynchronous device
device exhibits
unpredictable response
sharable device
dedicated device
operation device
device speeds
speeds range
devices perform
transfer direction
access method
method transfer
transfer schedule
synchronous asynchronous
asynchronous dedicated
dedicated sharable
sharable latency
latency seek
rate delay
operations read
read-write tape
tape keyboard
keyboard tape
keyboard cd-rom
cd-rom figure
application access
conventional types
resulting styles
device access
broadly applicable
exact system
device categories
fairly standard
major access
access conventions
conventions include
include block
memory-mapped file
file access
network sockets
sockets operating
special system
additional devices
time-of-day clock
systems provide
graphical display
audio devices
arbitrary conunands
call enables
file descriptor
hardware device
device managed
commands implemented
arbitrary data
control information
character devices
accessing disk
block-oriented devices
understand commands
essen.tial behaviors
block-storage devices
low-level differences
special applications
databasemanagement systems
simple linear
linear array
application performs
file systen1
unneeded buffering
buffering likewise
file blocks
operating-system locking
locking services
raw-device access
access passes
passes control
system step
operating-system services
unix world
block-device drivers
offering read
memory-mapped interface
memory returns
satisfy access
memory image
demand-paged virtual
efficient memory
memory mapping
memory operating
offer virtual
mapping interface
kernel services
system maps
transfers control
entry address
kernel access
basic system
interface enable
line-at-a-time access
editing services
user types
preceding character
input stream
input devices
produce data
access style
output devices
audio boards
linear stream
network devices
addressing characteristics
operating systerns
including unix
network interface
wall socket
electrical appliance
socket interface
local socket
remote address
socket created
remote application
receive packets
returns information
packet waiting
busy waiting
functions encapsulate
essential behaviors
distributed applications
underlying network
network hardware
protocol stack
interprocess communication
network communication
interface card
network protocols
long history
proving ground
network technology
half-duplex pipes
full-duplex fifos
full-duplex streams
message queues
sockets information
hardware clocks
basic functions
trigger operation
timesensitive applications
trigger operations
periodic interrupts
periodic flushing
dirty cache
cache buffers
network subsystem
cancel operations
network congestion
user processes
timer requests
timer hardware
hardware chan11els
virtual clocks
timer device
interrupts wanted
user requests
earliest-time-first order
earliest tince
timer interrupts
kernel signals
interrupt rate
rate generated
hardware clock
execute hundreds
coarse resolution
timer ticks
system time-of-day
system clock
highfrequency counter
highresolution clock
generate interrupts
accurate measurements
system-call interface
interface relates
application issues
run queue
call completes
resumes execution
values returned
physical actions
actions performed
unpredictable amount
blocking system
blocking application
nonblocking application
user-level processes
user interface
mouse input
displaying data
video application
application writer
overlap execution
multithreaded application
continue executing
solaris developers
user-level library
nonblocking call
return value
nonblocking system
asynchronous system
asynchronous call
call returns
application continues
software interrupt
call-back routine
linear control
control flow
nonblocking read
available-the full
full number
bytes requested
asynchronous read
call requests
nonblocking behavior
call takes
maximum waiting
network activity
kernel user
user user
user kernel
introduces extra
multiple-read call
desired reads
kernels provide
services related
device reservation
devicedriver infrastructure
errant processes
malicious users
requests means
good order
applications issue
choice scheduling
share device
illustrate suppose
issue blocking
blocking read
read calls
disk application
ann travels
operating-system developers
developers implement
implement scheduling
scheduler rearranges
system efficiency
device-status table
application receives
poor service
give priority
priority service
delay-sensitive requests
memory subsystem
application requests
kernel supports
kernel manages
table entry
subsystem improves
memory area
stores data
application buffering
speed mismatch
stream suppose
main mernory
bytes received
entire buffer
single operation
additional incoming
incoming data
modem fills
first buffer
relaxing timing
timing requirements
enormous differences
typical computer
provide adaptations
data-transfer sizes
computer networking
sending side
large message
small network
network packets
receiving side
side places
reassembly buffer
source data
support copy
copy semantics
semantics suppose
systemcalt providing
data written
application system
system calt
calt independent
guarantee copy
bus hype
l.i band
sun enterprise
device-transfer rates
kernel buffer
returning control
application buffer
effect copying
application data
data space
operation introduces
clean semantics
copy-on-write page
page protection
fast memory
holds copies
data access
cached copy
running process
cached ilc
primary caches
existing copy
data item
faster storage
distinct functions
preserve copy
efficient scheduling
maill memory
hold disk
reread rapidly
kernel receives
physical disk
efficient write
write schedules
delayilcg writes
remote file
holds output
ilcterleaved data
data streams
output mixed
system solves
disk file
application finishes
spooling system
correspondilcg spool
spool file
system copies
queued spool
spool files
system daemon
daemon process
in-kernel thread
control interface
enables users
system administrators
unwanted jobs
jobs print
suspend printing
multiple concurrent
concurrent applications
applications spooling
coordinate concurrent
concurrent output
concurrent device
explicit facilities
including vms
provide support
exclusive device
idle device
longer needed
systems enforce
open file
file handle
provide functions
enable processes
exclusive access
device object
concurrent threads
avoid deadlock
error handling
application errors
complete system
system failure
usual result
mechanical glitch
glitch devices
transient reasons
permanent reasons
defective operating
transient failures
failure results
network send
error results
res end
important component
component experiences
permanent failure
unix operating
additional integer
named errno
error code-one
general nature
bad pointer
detailed error
error information
current operating
scsi device
hardware error
illegal request
bad command
command parameter
self-test failure
hardware subsystem
subsystem failed
scsi devices
devices maintain
internal pages
error-log information
host-but seldom
protection errors
user process
normal operation
prevent users
user program
program executes
system perform
monitor mode
monitor kernel
kernel perform
program figure
port memory
memory locations
user access
memory-protection system
system note
graphics games
video editing
playback software
memory-mapped graphics
controller memory
case provide
locking mechanism
kernel data
state information
in-kernel data
open-file table
table structure
similar structures
track network
network connections
character-device communications
file-system access
user files
raw devices
address spaces
entities supports
semantics differ
user file
request size
disk sector
sector boundary
process image
uniform structure
object-oriented teclucique
open-file record
system-wide open-file
file-system record
inode pointer
write functions
select function
ple pointer
ioctl function
function file
descriptor .,_
close function
user-process memory
memory networking
network info
function pointer
f..un ction
kernel memory
memory figure
kernel structure
dispatch table
holds pointers
object-oriented methods
message-passing implementation
message contents
message-passing approach
procedural techniques
shared data
adds flexibility
subsystem summary
subsystem coordinates
extensive collection
subsystenc supervises
devices access
access control
devices operation
operation control
file-system space
allocation device
device allocation
device-status monitoring
recovery device-driver
device-driver configuration
upper levels
subsystem access
access devices
uniform interface
interface provided
system connects
application request
network wires
specific disk
application refers
file-system directories
file-access table
entry tells
inode number
space-allocation information
connection made
hardware port
memory-mapped controller
controller registers
simple operating
first part
ms-dos file
specific hardware
primary hard
specific port
device table
colon separator
separation makes
extra functionality
invoke spooling
regular file-system
normal file-system
provided automatically
files stored
unix represents
represents device
device names
unix path
clear separation
device portion
device unix
associates prefixes
path names
specific device
mount table
longest ncatchilcg
ncatchilcg prefix
file-system directory
directory structures
minor device
device number
m.ajor device
number identifies
device-table entry
memory-mapped address
systems obtain
significant flexibility
multiple stages
lookup tables
physical device
pass requests
load device
typical life
life cycle
read request
figure suggests
operation requires
tremendous number
cpu cycles
process issues
system-call code
kernel checks
subsystem sends
driver depending
subroutine call
in-kernel message
driver allocates
allocates kernel
buffer space
driver sends
sends commands
controller operates
device hardware
transfer completes
correct interrupt
handler receives
interruptvector table
driver receives
kernel transfers
return codes
requesting process
call device-controller
device-controller commands
commands user
process kernel
subsystem kernel
subsystem device
driver interrupt
handler device
controller return
call interrupt
queue unblocks
scheduler assigns
process resumes
interesting mechanism
full-duplex connection
user-level process
stream user
streams modules
streams structure
driver end
write queue
queue message
message passing
transfer data
modules provide
streams processing
serial-port device
handle input
input editing
adjacent modules
adjacent queue
flow control
queue accepts
adjacent module
queue supporting
supporting flow
control buffers
buffers messages
accept messages
sufficient buffer
process involves
involves exchanges
control messages
process writes
writes data
call writes
writes raw
raw data
stream head
head copies
messages continues
process reads
reads data
ordinary data
unstructured byte
byte stream
process communicates
flow controt
message likewise
driver end-like
data drivers
support flow
dropping incoming
incoming messages
network card
input buffer
ample buffer
store incoming
incremental approach
writing device
protocols modules
networking module
ethernet network
wireless network
treating character-device
message boundaries
unix variants
variants support
support streams
preferred method
writing protocols
solaris implement
socket mechanism
major factor
heavy demands
device-driver code
schedule processes
resulting context
switches stress
hardware caches
interrupt-handling mechanisms
data copies
durilcg copies
space coping
major concerns
computer architect
expensive task
state change
restore state
state programmed
cycles spent
full overhead
context switch
network traffic
high context-switch
context-switch rate
remote login
character typed
local machine
remote machine
keyboard interrupt
local kernel
network layers
network packet
network device
driver transfers
network controller
remote system
hardware receives
network daemon
daemon identifies
login session
state switches
receiver echoes
approach doubles
developers reimplemented
in-kernel threads
threads sun
sun estimates
improvement sending
sending system
system receiving
receiving system
system figure
lntercomputer communications
maximum number
network logins
large server
interrupt burden
remote terminals
large computer
special-purpose cpu
cpu found
high-end systems
data flowing
cpu remains
dma controllers
controllers found
smaller computers
sophisticated programs
smart controllers
increase concurrency
dma-knowledgeable controllers
simple data
data copying
move processing
processing primitives
bus operation
balance cpu
devices vary
mouse movements
button clicks
numeric values
mouse device
functionality provided
disk device
write request
coordinated set
data-recovery algorithms
optimize disk
application software
progression depicted
application level
application bugs
system crashes
developing code
reload device
application-level implementation
internal kernel
device code
device functionality
functionality progression
kernel functionality
efficient in-kernel
in-kernel messaging
application-level algorithm
development effort
operating-system kernel
complex software
software system
in-kernel implementation
avoid data
data corruption
highest performance
specialized implementation
hardware implementation
implementation include
fixing bugs
increased development
decreased flexibility
hardware raid
raid controller
individual block
block reads
special information
basic hardware
elements involved
moving data
kernel module
basic categories
including block
block devices
memory-mapped files
programmed interval
interval timers
asynchronous calls
num.erous services
hardware devices
symbolic file
character-string names
device addresses
bus controllers
separate device
data passing
cpu consumption
layers imply
context switching
protection boundary
applications assume
timer channels
device control
control registers
host processor
separate pieces
first piece
piece executes
remaining piece
single serial
front-end processor
termii1.al concentrator
performance overhead
manipulating shared
object-oriented message
multiprogrammed systems
user programs
programs access
access memory
access men10ry
processor iterates
busy-waiting loop
interrupt describe
hybrid strategy
device service
pure polling
pure interrupts
computing environment
graphical user
multitasking operating
device preallocation
graphics card
direct bus
bus connection
give reasons
reliable transfer
streams abstraction
controllers support
support direct
physical address
design complicate
cpu speed
speed increases
multiple interrupts
priority scheme
serviced discuss
assigning priorities
implement nonblocking
good overview
methods employed
bsd unix
sample minix
minix operating
includes detailed
detailed information
memory-mapping functionality
processor reference
reference manuals
sources hennessy
describe multiprocessor
multiprocessor systems
cache-consistency issues
issues tanenbaum
describes hardware
low level
address map
ieee computer
software raga
good discussion
protection mechanisms
mechanisms control
control access
access permitted
gained proper
proper authorization
memory segments
resources defined
security ensures
system users
information stored
physical resources
security system
system prevents
prevents unauthorized
unauthorized access
malicious destruction
accidental introduction
protection refers
protection security
security assurance
protection domains
access matrix
language-based protection
protection systems
computer systems
grown protection
multiprogramming operating
untrustworthy users
common logical
common physical
memory modern
modern protection
protection concepts
complex system
shared resources
provide protection
intentional violation
access restriction
general importance
program component
system resources
ways consistent
stated policies
reliable system
detecting latent
latent errors
component subsystems
early detection
interface errors
prevent contamination
healthy subsystem
malfunctioning subsystem
unprotected resource
incompetent user
protection-oriented system
unauthorized usage
policies governing
governing resource
individual users
protection system
application programmer
guard resources
resources created
application subsystem
application designers
protection software
policies mechanisms
mechanisms determine
policies decide
flexibility policies
worst case
underlying mechanism
general mechanisms
mechanisms enables
guiding principle
principle simplifies
simplifies design
design decisions
system consistent
time-tested guiding
security guard
public areas
minimal damage
privilege implements
minimum damage
n1inimum damage
gain maximum
maximum privileges
entire system
fine-grained access
access controls
enable privileges
audit trails
privileged function
function access
audit trail
systems administrator
law-enforcement officer
security activities
managing users
privilege entails
entails creating
separate account
mount tapes
files needed
systems implement
role-based access
computers implemented
computing facility
running specific
specific services
specific remote
remote hosts
specific times
control lists
secure computing
complex protection
protection scheme
security holes
wrong aspects
meaningful operations
operations objects
abstract data
data types
execute memory
read tape
rewound data
data files
program files
need-to-know principle
faulty process
invokes procedure
chapter14 allowed
formal parameters
parameters passed
access files
well-defined subset
source file
listing file
private files
optimization purposes
privilege discussed
security violations
domain structure
process operates
domain defines
access rights
ordered pair
process executing
share access
print object
execute object
dynamic protection
static protection
reason stems
read access
write access
vice versa
changed content
domain content
accessed depends
user domain
domain switching
switching occurs
user logs
process domain
accessed corresponds
local variables
variables defined
procedure call
discuss domain
greater detail
standard dual-mode
monitor-user mode
operating-system execution
privileged instructions
complete control
nonprivileged instructions
predefined memory
memory space
modes protect
monitor domain
multiprogrammed operating
elaborate scheme
influential operating
operating systems-unix
user switching
domain corresponds
user identification
owner identification
domain bit
setuid bit
user executes
file owned
process exits
temporary userid
userid change
change ends
change domains
user ids
domain definition
privileged facility
general user
user population
networking programs
networking program
network access
access privilege
powerful user
user manages
setuid mechanism
place privileged
privileged programs
special directory
program run
security problem
setuid programs
crackers create
obscure file
directory names
special techniques
users access
privileged facilities
special user
separate program
sends requests
tops-20 operating
great care
writing privileged
total lack
unix systems
setuid feature
discuss security
mul tics
multics system
ring structure
ring corresponds
single domain
domain rings
rings exist
monitor-user n1ode
mode corresponds
segmented address
segm.ent description
description includes
ring number
access bits
control reading
policy decision
current-ring-number counter
multics ring
cmmot access
multics occurs
process crosses
controlled mmmer
controlled domain
ring field
segment descriptor
access bracket
gates identifies
entry points
current ring
process remains
system occurs
fewer privileges
designated entry
limited access
call procedures
lower rings
main disadvantage
requirement means
multics protection
protection interferes
decreases system
process students
similar protection
number crunching
utmost importance
protection policy
simple protection
protection depending
separate mechanism
general model
matrix represent
represent domains
columns represent
represent objects
matrix consists
column defines
defines objects
access right
entry access
matrix shown
objects-three files
laser printer
read files
access-matrix scheme
mechanism consists
read read
read execute
read write
write write
write figure
semantic properties
outlined hold
access-matrix entries
implement policy
policy decisions
decisions involve
last policy
user creates
initialization entries
implementing strict
strict control
dynamic association
control domain
including domains
d2 allowing
allowing controlled
controlled change
entries requires
additional operations
read switch
print switch
switch switch
switch write
execute read
execute execute
copy rights
read operation
separate rights
limited copy
valid right
owner write
write execute
owner owner
execute owner
owner read
read owner
owner rights
domain objects
process executil1.g
modify domai11
switch print
switch control
control read
execute write
write switch
switch figure
modified access
rights provide
execution environment
general unsolvable
bibliographical notes
access-matrix model
protection requirements
basic mechanism
mechanism exists
datastructure techniques
representing sparse
sparse matrices
protection facility
global table
simplest implementation
table consisting
ordered triples
triples domain
implementation suffers
memory techniques
special groupings
separate entry
access lists
access list
empty entries
resulting list
object consists
ordered pairs
pairs domain
nonempty set
default set
exception condition
condition occurs
capability lists
operations allowed
tbose objects
execute operation
capability means
capability list
protected object
capability-based protection
protection relies
secure pointer
resource protection
multiprogrammed computer
protected pointer
applications level
inherent protection
distinguish capabilities
abstract machine
programs run
run capabilities
accessible data
application program
program hardware
firmware support
distinguish integers
floating-point numbers
uninitialized values
normal data
segmented memory
mach operating
lock-key mechanism
unique bit
domain users
expect choosing
matrix involves
domains access
lists correspond
access-rights information
large system
long access
localizing information
process attempting
attempting access
valid revocation
access privileges
simple technique
additional references
last access
cal system
strategy works
process opens
directory structure
access permission
file table
opened file
file-table entry
user carmot
checked or1
allowed operations
system identifies
protection violation
requested operation
access-control information
similar function
sun microsystems
microsystems operating
facility revolves
work privileges
assigned roles
roles based
specific task
privileges decreases
security risk
user1 executes
matrix described
revoke access
objects shared
versus delayed
revocation occur
selective versus
versus general
select group
partial versus
versus total
object temporary
temporary versus
versus permanent
revoked access
access-list scheme
list revocation
difficult revocation
revocation problem
mentioned earlier
implement revocation
capabilities include
capabilities point
capability points
unique entry
turn points
desired entry
illegal table
entry table
table entries
selective revocation
bit pattern
set-key operation
current value
master key
keys match
raised revocation
revocation replaces
previous capabilities
key matches
matching key
providing maximum
maximum flexibility
key-based schemes
defining keys
systems differ
interesting proving
proving grounds
protection theories
hydra hydra
considerable flexibility
system implements
fixed set
basic forms
memory segment
user-defined rights
access protection
system-defined rights
facilities constitute
significant development
protection technology
defined procedurally
user-defined procedures
userdefined type
auxiliary rights
typed object
restriction enables
enables discrin
discrin lination
process-by-process basis
formal parameter
rights held
trustworthy procedure
calling process
program segments
implementation procedures
procedures access
representation variables
data type
process holds
auxiliary right
so-called kernel
kernel rights
indirect access
specific purposes
process invokes
control passes
code body
storage segment
segment representing
process cmmot
originat unamplified
unamplified state
protected segment
dynamic adjustment
guarantee consistency
programmer-defined abstraction
abstraction amplification
abstract type
hydra operating
user passes
right howeve1
user-protection requirement
procedure performs
task correctly
errors hydra
hydra solves
restricting amplifications
procedure-call mechanism
direct solution
suspicious subsystems
sort routine
users invoke
service program
som.e private
accounting purposes
calling user
hydra subsystem
protection kernel
require protection
subsystem interacts
kernel-defined primitives
define access
subsystem designer
define policies
standard access
protection afforded
capability system
reference rnanual
rnanual hydra
large library
system-defined procedures
programs programmers
incorporate calls
system procedures
program code
program translator
cambridge cap
cap system
system cap
closer examination
examination shows
provide secure
secure protection
user-defined objects
objects cap
ordinary kind
provide access
rights provided
standard read
individual storage
storage segments
object data
data capabilities
cap machine
cap microcode
rights amplification
protected procedure
software capability
specific kind
amplification corresponds
unseal primitives
type verification
software capabilities
procedure universal
universal trust
protected procedures
protection policies
basic protection
procedure access
protection environment
insecure protected
protection breakdown
capabilities allowed
considerable economies
implementing protection
policies commensurate
abstract resources
subsystem designers
existing computer
security agent
protected resource
comprehensive access
access validation
considerable overhead
hardware support
system designer
implement protection
support mechanisms
mechanisms provided
protection environments
greater operational
operational efficiency
higher-level user
user interfaces
programming languages
objects protection
functional nature
newest protection
invoked extends
system-defined functions
standard file-access
file-access methods
include functions
application designe1
applications subsystem
compiler-based enforcement
languages enter
desired control
shared resource
declarative statement
typing facility
data typing
significant advantages
facilities provided
declarative notation
linguistic concept
programming-language implementation
enforce protection
underlying machine
generate code
storage reference
reference made
hardware occurs
restriction prevents
arbitrary restrictions
code segment
capabilities provided
language implementation
interpret software
scheme puts
puts policy
policy specification
protection specifications
programming language
principal distinction
operational state
separate references
security provided
protection rests
code generated
relative merits
enforcement based
enforcement provided
compiler security
security enforcement
greater degree
protectionchecking code
compiler-supported scheme
security rests
compiled code
softwaresupported protection
lesser degree
designated file
tagged-capability system
fixed microprogram
greater security
hardware-supported protection
protection violations
software malfunction
user-defined policy
adequate facilities
provide enforcement
sufficient flexibility
kernel efficiency
greatest efficiency
software support
language-based enforcement
static access
access enforcement
intelligent compiler
enforcement mechanism
fixed overhead
kernel calls
high-level description
provide software
protection enforcement
automatic hardware-supported
hardware-supported checking
interpret protection
generate calls
making protection
computation inherent
program components
capability-creating program
primitive operation
unseal privilege
gain access
protection mechanism
unseal operations
operations takes
procedural approach
make protection
dynamic access-control
access-control mechanism
distributing capabilities
language constructs
managed resource
constructs provide
provide mechanisms
customer processes
mechanisms ensure
allocated resource
practical tool
system design
infancy protection
greater concern
distributed architectures
stringent requirements
data security
suitable language
language notations
express protection
distributed environment
virtual machine-or
machine-or jvm-has
built-in protection
mechanisms java
java programs
data fields
jvm loads
create instances
features ofj
ofj ava
untrusted classes
distrusting classes
paramount concern
classes running
equally trusted
enforcing protection
jvm process
system lacks
protection decisions
protection domain
assigned depends
digital signatures
class file
configurable policy
policy file
file determines
permissions granted
classes loaded
trusted server
home directory
untrusted server
access permissions
resource accesses
system libraries
open network
system library
network connection
philosophy adopted
library class
network corucection
calling sequence
method takes
takes responsibility
implementation approach
ongoing invocations
method executes
access request
dopri vileged
vileged block
indirectly dopri
static method
accesscontroller class
stack frame
invoke stack
stack inspection
inspection examines
examines stack
stack frames
calling thread
added frame
first found
inspection exhausts
allowed depends
untrusted applet
applet protection
domain performs
url loader
loader protection
proxy server
server proxy
proxy .lucent
retrieving urls
networking library
library encounters
call finds
vileged annotation
socket permission
proxy figure
important differences
java program
directly access
reference references
well-defined interfaces
interfaces compliance
sophisticated collection
run-time checks
run-time stack
checks enforce
java classes
classes type
type safety
safety ensures
treat integers
write past
arbitrary ways
methods defined
java protection
package type
misuse objects
rights processes
processes execute
manipulate objects
important design
design property
objects revocation
protection model
real systems
providing read
execution protection
general public
file multics
access hydra
capability systems
extend protection
user-defined software
software objects
objects solaris
access controt
finer-grained arbitration
single java
java jvm
protection class
resource requests
sophisticated stack
computer games
faculty members
computer center
center staff
times suggest
process tree
arbitrary object
access-matrix facility
role-based access-control
access-control facility
practice compare
cross-ring calls
ring-protection scheme
capability-based system
greater flexibility
typical operating
values stored
higher-numbered ring
ring invokes
access-control matrix
approach equivalent
protection failures
privilege aid
protection problems
shared stack
parameter passing
system suggest
efficient implementation
module designers
multics ring-protection
stack-inspection scheme
unique number
system suppose
protection structure
hardware features
efficient capability
capability manipulation
sensitive data
storage area
random bits
provided excellent
excellent surveys
formal version
prove properties
capability evolved
rice university
university computer
term capability
hydra system
ring-protection system
confinement problem
higher-level languages
operations discussed
general dynamic-resource-management
dynamic-resource-management schemes
schemes jones
static access-control
access-control scheme
supports abstract
minimal operating-system
exokernel project
internal problem
controlled access
adequate protection
external environment
system operates
user authentication
unauthorized user
computer resources
resources include
include information
examining ways
purposely misused
key security
security enabler
enabler -cryptography
detect attacks
security threats
security attacks
worth considerable
considerable effort
commercial systems
financial data
inviting targets
thieves systems
data pertaining
corporate operations
unscrupulous competitors
discussed mechanisms
including programs
mechanisms work
users conform
total security
achieved nonetheless
make security
security breaches
rare occurrence
accidental misuse
malicious misuse
part protection
list includes
malicious security
terms intruder
breach security
security violation
break security
violation involves
1mauthorized reading
intruder capturing
capturing secret
secret data
credit-card information
identity information
identity theft
unauthorized modification
innocent party
source code
important commercial
commercial application
unauthorized destruction
wreak havoc
gain status
bragging rights
gain financially
financially web-site
web-site defacement
security breach
intrusion program
file server
preventing legitimate
original internet
internet worm
worm turned
dos attack
bug failed
rapid spread
discuss dos
dos attacks
standard methods
communication pretends
attackers breach
privileges-obtain privileges
common attack
captured exchange
fraudulent repeat
valid data
data transmission
replay comprises
entire attackfor
transfer money
escalate privileges
normal attacker
attacker masquerading
masquerading attacker
man-in-the-middle attacker
attacker figure
standard security
legitimate user
attacker sits
data flow
man-in-the-middle attack
active communication
communication session
attack methods
absolute protection
malicious abuse
denial-ofservice attack
security measures
surreptitious entry
machine rooms
social-engineering attack
legitimate-looking e-mail
page misleads
confidential information
human authorization
general term
finding phone
phone books
finding notes
security problems
personnel issues
problems pertaining
purposeful security
runaway process
accidental denial-of-service
denial-of-service attack
reveal passwords
stack overflow
unauthorized process
process list
computer data
modern systems
systems travels
leased lines
shared lines
wireless connections
dial-up lines
lines intercepting
interruption communications
remote denial-of-service
diminishing users
high security
strict low-level
weakest link
intruders countermeasures
incidents include
section tools
tools needed
detecting intrusions
accomplishing work
normal process
common goal
nonprogram security
security events
goal causing
program threat
easy access
original exploit
common methods
breaches note
considerable variation
naming conventions
descriptive terms
horse systems
allowing programs
programs written
executing user
text-editor program
include code
certairl keywords
special area
text editor
long search
search paths
search path
path lists
current directory
normal system
system commanct
control-alt-delete conlbination
modern windows
windows operating
trojan horse
shareware programs
commercial software
download ads
capture information
central site
general category
surreptitious communication
communication occurs
innocuous-seeming program
windows system
spyware daemon
recipient addresses
spam message
windows machine
process continues
user discovers
macro problem
install network
network daemons
human error-a
common security
security weakness
normal user
poor operating-system
fine-grained control
understand inconvenient
inadequate security
trap door
movie war
war games
code inight
inight check
specific user
normal security
security procedures
procedures programmers
including rounding
rounding errors
occasional half-cent
half-cent credited
account credititrg
large bank
bank executes
clever trap
standard object
object code
trap doors
doors pose
difficult problem
software systems
logic bomb
security incident
normal operations
security hole
predefined set
write code
check failed
remote access
buffer overflow
buffer-overflow attack
dial-up connection
target system
authorized user
privilege escalation
attack exploits
simple case
poor programming
programmer neglected
code bounds
bounds checking
input field
attacker sends
attacked program
attacker determines
command-line argument
network daemon-wl.til
current return
return address
exploit code
code loaded
simple set
attacker wishes
execute-for instance
attack program
root shell
privileged command
command execution
web-page form
form expects
extra characters
buffer-reading subroutine
subroutine returns
buffer-overflow exploit
program creates
character array
array size
size buffer_size
parameter provided
command line-argv
null terminator
program works
works properly
command line
begin copying
program crashes
program suffers
potential problem
copied data
data overflow
buffer array
include stdio.h
define buffer_size
int main
int argc
char argv
char buffer
buffer-overflow condition
careful programmer
performed bounds
line strcpy
good bounds
security vulnerabilities
automatic variables
control returns
function exits
typical stack
variables declared
frame pointer
return bottom
pointer grows
top figure
return control
stack pointer
function call
saved frame
relative access
standard memory
bufferoverflow attack
ter goal
attacking program
short code
stdio.h int
segment creates
shell process
attacked runs
system-wide permissions
created shell
complete access
attacked process
assembly language
language instructions
primary modification
unnecessary features
code size
assembled code
code fragment
binary sequence
program shown
frame appears
hypothetical stack
no-op instructions
constructed binary
position buffer
modified shell
shell code
potential buffer-overflow
buffer-overflow problems
code shown
malicious act
deleting files
opening network
network ports
attack reveals
considerable knowledge
programming skill
exploitable code
great programmers
launch security
rudimentary computer
computer skills
target systems
allowed communication
communication channels
target machine
security added
disallows execution
stack section
recent versions
sparc chip
chip include
overflowed routine
intel x86
x86 chips
chips include
including linux
implementation involves
page tables
bit marks
buffer-overflow attacks
code embedded
legitimate program
program viruses
destroying files
causing system
program malfunctions
penetration attacks
applications viruses
multiuser operating
executable programs
comrnon vector
users download
viral programs
programs internet
file-sharing services
exchange infected
infected disks
common form
virus transmission
microsoft office
office files
microsoft word
word documents
visual basic
basic programs
office suite
suite powerpoint
execute automatically
deleting user
contact list
code sample
basic macro
windows computer
sub autoopen
dim ofs
ofs set
set ofs
end sub
viruses work
virus reaches
virus dropper
core activity
literally thousands
main categories
categories note
viruses belong
file virus
virus infects
execution jumps
noticed file
file viruses
parasitic viruses
full files
host program
boot virus
boot sector
boatable media
memory viruses
virus works
macro viruses
high-level language
macro virus
spreadsheet file
code virus
boot-sector computer
computer virus
polymorphic virus
avoid detection
antivirus software
series make
virus code
encrypted virus
virus includes
includes decryption
decryption code
tricky virus
virus attempts
modifying parts
read system
original form
infected code
bypass detection
anti virus
virus scanner
interrupt-handler chain
similar viruses
viruses install
infect nmltiple
nmltiple parts
including boot
boot sectors
armored virus
antivirus researchers
virus droppers
virus infestation
file attributes
unviewable file
vast variety
widespread virus
separate bugs
virus started
infecting hundreds
windows servers
trusted sites
running microsoft
microsoft internet
internet information
information server
vulnerable microsoft
microsoft explorer
explorer web
web browser
browser visiting
sites received
browser virus
back-door programs
things entered
credit-card numbers
unlimited remote
route spam
infected desktop
desktop computer
disruptive security
active debates
computing community
systems run
damage caused
security intrusions
microsoft products
debate concerns
exists today
program threats
attack programs
network threats
threats involve
network comcections
comcections system
threats create
network attack
program attack
system is-the
enabled system
including worms
port scamcing
denial-of-service attacks
replay attacks
multiple systems
sharing secrets
prove identity
single operating
secure sharing
sharing methods
methods exist
methods include
shared memory
interprocess comnmnications
comnmnications creating
creating secure
secure communication
ravage system
worm spawns
spawns copies
computer networks
entire network
event occurred
worth millions
robert tappan
tappan morris
first-year cornell
cornell graduate
graduate student
worm program
internet targeting
targeting sun
vax computers
computers running
running variants
great distances
consumed system
infected machines
robert morris
morris designed
self-replicating program
rapid reproduction
unix networking
networking environment
environment provided
morris chose
in.itial infection
internet host
host left
program exploited
exploited flaws
security routines
unix utilities
simplify resource
resource sharing
local-area networks
connected sites
sites morris
main program
program ll.c
grappling hook
hook consisted
code compiled
hook connected
main worm
hooked system
program proceeded
infected system
connect easily
morris exploited
networking utility
utility rsh
easy remote
remote task
task execution
special files
remote account
paired list
worm searched
site names
rsh attack
attack finger
finger attack
attack sendmail
sendmail attack
attack worm
system infected
morris internet
remote execution
remote shells
executing anew
infection methods
methods built
methods involved
operating-system bugs
unix finger
sendmail programs
finger utility
utility functions
electronic telephone
telephone directory
command finger
finger user-name
user-name hostname
hostname returns
login names
home address
telephone number
research plan
clever quotation
quotation finger
finger runs
background process
bsd site
worm executed
program queried
536-byte string
string crafted
buffer allocated
main routine
finger daemon
procedure executed
remote shell
bug exploited
malicious entry
entry sendmail
sendmail sends
electronic mail
debugging code
utility permits
permits testers
ncail system
debugging option
morris included
user address
grappling-hook program
user passwords
simple cases
passwords constructed
account-user-name combinations
internal dictionary
favorite password
password choices
final stage
standard unix
unix on-line
on-line dictionary
efficient three-stage
three-stage password-cracking
password-cracking algorithm
algorithm enabled
user accounts
rsh data
broken accounts
remote systems
program searched
active copies
copy exited
seventh instance
worm exited
duplicate sightings
remained undetected
undetected allowing
seventh duplicate
confound efforts
spread baiting
fake worms
wholesale infestation
vax systems
unix network
network environment
advance ease
electronic communication
copy source
binary files
remote machines
human expertise
expertise allowed
cooperative efforts
develop solutions
solutions quickly
invading program
specific software
software patches
exploited security
security flaws
morris unleash
harmless prank
criminal offense
offense based
elaborate steps
repel efforts
program contained
code aimed
bootstrap code
virus programs
interesting observations
sound basis
inferring motive
legal outcome
federal court
court convicted
convicted morris
community service
legal costs
security experts
experts continue
evaluate methods
eliminate worms
recent event
internet grows
harmless worms
sobig worm
fastest-spreading worm
worm released
peak mfecting
mfecting hundreds
e-mail messages
e-mail inboxes
slowed networks
huge number
pornography newsgroup
account created
stolen credit
credit card
virus targeted
targeted microsoft
microsoft windows
windows systems
smtp engine
addresses found
subject lines
random address
infected source
source sobig.f
sobig.f included
target e-mail
e-mail reader
default windows
windows directory
text file
windows registry
code included
twenty servers
untold damage
vast number
port scanning
scanning port
attack port
tcp lip
lip connection
port scanner
answering service
nwre systems
command shell
trojan horses
perform subsets
versatile open-source
open-source utility
network exploration
security auditing
including application
application names
provide information
services running
generates reports
final step
found bugs
knowledgeable cracker
script kiddie
port scans
independent systems
nefarious purposes
including denial-of-service
spam relay
relay zombies
zombies make
make crackers
inconsequential systems
valuable information
gaming information
stealing resources
disrupting legitimate
attacks involve
involve systems
prevents legitimate
generally network
network based
categories attacks
first category
facility resources
web-site click
java applet
windows infinitely
category involves
successful denial-of-service
major web
web sites
attacks result
fundamental functionality
tcp connection
started tcp
tcp sessions
network resources
legitimate tcp
tcp connections
last hours
full failure
target facility
network level
multiple sites
common target
zombies ddos
ddos attacks
blackmail attempts
attackers offer
system slowdown
successful advertising
advertising campaign
interesting aspects
authentication algorithm
algorithm locks
incorrect attempts
making incorrect
examples suggest
systems managers
computer science
science classes
notorious sources
accidental system
system dos
first programming
programming exercises
students learn
create subprocesses
common bug
bug involves
spawning subprocesses
subprocesses infinitely
free memory
cpu resources
computer attacks
broadest tool
computer security
isolated computer
ali interprocess
networked computer
computer receives
receives bits
sends bits
network addresses
potential senders
network messages
messages network
packets arrive
source address
intended receiver
destination address
security matters
rogue computer
falsified source
numerous computers
named source
destination addresses
process messages
messages cryptography
cryptography enables
computer possessing
key-the key
unlike network
public information
trustworthy means
constraining senders
messages note
small complexities
communication security
modern computing
computing encryption
encryption algorithm
algorithm enables
message encryption
ancient practice
encryption algorithms
ancient times
important modern
modern encryption
encryption principles
users communicating
insecure channel
section note
key exchange
certificate authority
algorithm consists
generating ciphertexts
computable functions
generating messages
essential property
insecure medium
computer holding
decrypt ciphertexts
main types
symmetric encryption
united states
civilian applications
national institute
des works
64-bit value
56-bit key
permutation operations
encryption transformations
so-called s-boxes
states government
government messages
64-bit chunks
extended anwunt
source block
ciphertext block
considered insecure
computing resources
nist created
des algorithm
effective key
key length
bits triple
triple des
replace des
des aes
symmetric block
block cipher
key lengths
128-bit blocks
matrix formed
block encryption
today bear
bear mentioning
fast compact
variable key
basic computational
computational operations
common stream
stream cipher
pseudo-random-bit generator
produce random
infinite set
input plaintext
plaintext stream
stream rc4
encrypting steams
wireless lan
lan protocol
web browsers
web servers
ieee standard
reasonable amount
fact rc4
asymmetric encryption
decryption keys
rsa cipher
block-cipher public-key
public-key algorithm
asymmetrical algorithm
asymmetrical algorithms
algorithms based
elliptical curves
gaining ground
cryptographic strength
asymmetric cryptography
prime numbers
andq are512bitseach
icc satisfies
satisfies leekd
leekd mod
decryption algorithm
ckd mod
small values
kekrt mod
private key
key results
encryption begins
bidirectional communication
public key
key publication
electronic copy
message created
matching public
small difference
symmetric cryptography
mathematical functions
usual symmetric
symmetric algorithms
asymmetric algorithms
asymmetric algorithm
generalpurpose encryption
large amounts
small amounts
key distribution
encryption offers
message constraining
functions overlap
encrypted message
valid message
discuss authentication
message note
generating authenticators
verifying authenticators
critical property
generate authenticators
main varieties
authentication algorithms
explore hash
hash functions
fixed-sized block
functions work
n-bit blocks
n-bit hash
collision resistant
common message-digest
message-digest functions
functions include
128-bit hash
160-bit hash
message digests
detecting changed
changed messages
message modification
algorithm takes
message digest
first main
main type
cryptographic checksum
secret key
key knowledge
mac defines
first argument
collision resistance
hash function
suitable verification
verification algorithm
digital-signature algorithm
one-way function
rsa digital-signature
rsa encryption
digital signature
separate authentication
primary reasons
fewer computations
notable exception
huge difference
improves space
software patch
supplies proof
entity performed
nonrepudiation involves
electronic forms
paper contracts
contracts nonrepudiation
nonrepudiation assures
person filling
electronic form
good part
inventing ciphers
involves keys
symmetric key
huge challenge
paper document
key-management challenge
challenge suppose
user wanted
asymmetric key
key algorithms
public keys
simple storage
keys requires
attack shown
message sends
bad public
bad key
problem involves
digital certificates
trusted party
party receives
key kbad
kbad attacker
attacker decryption
decryption key
certificate authorities
standard x.509
x.509 digital
digital certificate
certificate format
secure web
web communication
cryptography network
layer acting
protocol generates
protocol peer
network-protocol stack
transport-layer protocol
network-layer protocol
tcp packets
tcp peer
data-link layer
destination computer
data networking
protocol layers
iso model
model ssl
transport layer
layer networklayer
networklayer security
packet formats
packet contents
key ipsec
ipsec endpoints
private network
numerous protocols
implement security
cryptographic protection
definitive answer
protocols benefit
packets encapsulate
encapsulate tcp
encapsulated tcp
packets detect
contaii1.ed tcp
tcp header
header information
lower layers
give insufficient
insufficient protection
higher-layer protocols
application server
client computers
client computer
application-level protocol-for
industry standard
standard smtp
smtp protocol
multiple times
insecure network
e-mail message
ssl ssl
cryptographic protocol
corrumjj1icate securely-that
internet today
standard protocol
web communicate
standard tls
tls protocol
complex protocol
single variation
abstract form
maintain focus
cryptographic primitives
complex dance
session keys
ssl protocol
denoted cert
certification authority
attributes attrs
unique distinguished
public encryption
validity interval
interval interval
interval durirtg
information made
public verification
verification algorithms
certification authorities
28-byte random
random value
certificate cert5
client verifies
client generates
sends cpms
server recovers
recovers pms
collision-resistant function
fresh value-that
session key
previous communication
encrypting messages
server client
mac generation
client sends
server sends
client recovers
protocol enables
generated pms
decrypt cpms
web transactions
attrs field
ssl supports
ipsec vpns
ssl vpns
vpns ipsec
point-to-point encryption
company offices
offices ssl
individual employee
employee working
corporate office
earlier discussion
authentication involves
involves messages
major security
system depends
turn depends
users identify
user identifier
attribute retina
user-supplied password
password matches
password stored
system assumes
protect objects
complete protection
protection schemes
special case
password nmst
reading files
appending files
updating files
systems require
full rights
systems tend
classic trade-off
security makes
password vulnerabilities
vulnerabilities passwords
common ways
obvious information
brute force
valid password
password characters
four-character password
correct hit
password enumeration
longer passwords
lowercase letters
punctuation characters
large password
password space
electronic monitoring
logging iil
computer resides
network monitor
network including
including user
passwords encrypting
password solves
passwords stolen
off-system analysis
trojan-horse program
program installed
severe problem
systems force
force users
long passwords
easy passwords
final type
password compromise
illegal transfer
human nature
computer installations
forbids users
share accounts
accounting reasons
improving security
breach occurs
break occurred
users break
account-sharing rules
circumvent accounting
unauthorized users
system-generated passwords
user-selected passwords
favorite car
proposed password
check user
age passwords
forcing users
regular intervals
password history
simple password
password schemes
now-invalid password
violation steps
breached security
encrypted passwords
password secret
system store
user presents
password list
list secret
difficult-the designers
designers hope
impossible-to invert
function value
encoded passwords
encoded password
password file
fast encryption
encryption routines
fast computers
slow computers
well-known encryption
unix store
encrypted password
password entries
presented password
stored password
password run
run setuid
recorded random
random number
plaintext passwords
unix password
password methods
systems treat
dictionary encryption
encryption method
systems disallow
dictionary words
good technique
first letter
remembered phrase
lower characters
punctuation mark
mark thrown
good measure
password mmn.isk
one-time passwords
password sniffing
shoulder surfing
session begins
password pair
correct answer
integer function
system selects
random integer
user applies
correct result
results match
algorithmic passwords
entity intercepting
user share
shared seed
alphanumeric sequence
authentication challenge
computer becallse
improper authentication
authentication clue
password exposure
one-time password
password systems
commercial implementations
hardware calculators
key-chain dangle
usb device
random seed
shared secret
password generator
case two-factor
two-factor authentication
authentication offers
authentication protection
single-factor authentication
single-use passwords
software calculator
code book
book based
biometric measures
measures palm
physical access-for
data center
readers match
stored parameters
hand-reader pads
temperature map
finger length
finger width
line patterns
normal computer
computer authentication
fingerprint readers
devices read
finger ridge
ridge patterns
reading pad
factors software
stored sequences
multiple users
profiles stored
accurate two-factor
authentication scheme
fingerprint scan
replay attack
strong authentication
authentication method
normal passwords
passwords recall
authenticated session
myriad threats
network security
security solutions
solutions run
improved user
user education
bug-free software
security professionals
professionals subscribe
fewer layers
theory applies
door lock
major methods
improve resistance
security policy
policies vary
outsideaccessible applications
code review
connection points
road map
vulnerability assessment
broad ground
social engineering
risk assessment
scans rlsl
management team
potential loss
vulnerability assessments
vulnerability scans
test systems
production systems
unhappy behavior
individual system
easy-to-guess passwords
passwords unauthorized
programs unauthorized
unauthorized programs
system directories
long-running processes
improper directory
directory protections
directories improper
improper protections
system data
dangerous entries
program search
horse discussed
system programs
programs detected
checksum values
values unexpected
hidden network
problems found
security scan
networked computers
standalone systems
access points
connected terminals
face attacks
large set
access points-a
severe security
lesser extent
systems connected
telephone lines
u.s government
government considers
far-reaching connection
top-secret system
considered top-secret
system loses
topsecret rating
communication call
call occur
government facilities
extreme security
security precautions
secure computer
physical lock
lock combination
authentication information
multifactor authentication
systems administrators
computer-security professionals
internet network
connects millions
indispensable resource
good members
bad members
interconnected computers
scans search
application listening
vulnerabilities testing
lacks needed
needed patches
port scanners
improve security
crackers find
find vulnerabilities
detect port
anomaly detection
general challenge
people advocate
test security
network configuration
information secret
secret makes
company assuming
false sense
intrusion detection
successful intrusions
intrusions intrusion
detection encompasses
wide array
detection occurs
occurs detection
inputs examined
intrusive activity
include user-shell
user-shell commands
process system
packet headers
correlating information
response capabilities
capabilities simple
simple forms
response include
include alerting
potential intrusion
intrusive activity-for
process engaged
sophisticated fonn
false resource
resource exposed
resource appears
gain information
design space
wide range
ids systems
systems raise
idp systems
systems act
intrusion defining
suitable specification
intrusion turns
automatic idss
idps today
today settle
ambitious approaches
system input
specific behavior
behavior patterns
signature-based detection
scanning network
unix systenl
virus-detection software
scans binaries
lmown viruses
anomalous behavior
computer systen
anomalous system
system activity
monitoring system
system-call behavior
behavior deviates
normal patterns
monitoring shell
shell commands
anomalous commands
anomalous login
gaining access
detection attempts
dangerous behaviors
behaviors occurs
approaches yield
yield idss
unknown methods
so-called signature-based
recognizable pattern
great frequency
significant challenge
system behavior
behavior accurately
normal benchmark
intrusive behaviorf
normal behavior
false alarms
orf worse
missed intrusions
installation consisting
unix workstations
security-relevant events
small installation
million audit
audit records
actual attack
ten audit
audit recordsf
records reflecting
record reflecting
intrusive behavior
accurate ids
intrusion focusil
false-alarm rate
good true-alarm
true-alarm rate
good falsealarm
falsealarm rate
real intrusion
security administrator
administrator ilwestigates
christmas tree
tree effect
effect -is
ignore alarms
general principle
low false-alarm
rate achieving
anomaly-detection systems
contil ues
improve anomalydetection
anomalydetection techniques
techniques intrusion
detection software
implement signatures
accurate anomaly-detection
anomaly-detection rate
virus protection
systems protection
important security
security concern
concern antivirus
antivirus programs
specific pattern
program antivirus
software continue
viruses modify
basic pattern-match
pattern-match approach
programs antivirus
single pattern
programs implement
detection algorithms
compressed viruses
process anomalies
process opening
executable file
popular teducique
tripwire file
anomaly-detection tool
checking tool
purdue university
university tripwire
tripwire operates
intrusions result
inserting copies
user-shell search
remove system
system log
log files
tracks tripwire
monitor file
changed files
alert system
configurationfile tw.config
configuration file
file includes
selection mask
inode attributes
file itselt
storing hashes
files requires
tripwire takes
tw.config file
directory consisting
monitored attributes
hash values
tripwire inputs
stored database
directory named
compl.j-ted database
database events
events reported
administrator include
monitored file
signature differs
changed file
monitored directory
added file
longer exists
deleted file
wide class
tripwire program
database file
tamper-proof medium
write-protected disk
secure server
tightly controlled
authorized updates
monitored directories
security-relevant files-for
log files-are
files-are supposed
unauthorized change
escape tripwire
detection capabilities
obvious inconsistencies
shrinking log
log file
commercial versions
software analyzes
run unmonitored
complete shield
scanning files
search boot
outbound e-mail
computer viruses
unopened software
pirated copies
public sources
disk exchange
exchange offer
safest route
preventing infection
legitimate software
software applications
virus infection
disgruntled employees
software company
master copies
software programs
economic harm
exchange microsoft
alternative file
file format
native word
word format
format rtf
attach macros
e-mail attachments
unknown users
e-mail vulnerabilities
love bug
bug virus
love notes
receiver opened
basic script
virus propagated
first addresses
e-mail contact
clogging e-mail
e-mail systems
defensive strategy
opening attachments
effective defense
defense method
e-mail attachment
executable code
incoming attachments
prevent infection
viral attack
secure software
message-digest computation
resulting filename
messagedigest list
system recomputes
original list
differences serve
high-overhead antivirus
antivirus scan
program passes
signatures match
logging auditing
decrease system
including security
security logging
system-call executions
program behavior
suspicious events
authentication failures
authorization failures
break-in attempts
potential tool
find performance
reveal security
early unix
unix computer
computer break-ins
cliff stoll
exam5ning accounting
accounting logs
trusted computer
untrustworthy network
separate trusted
unh usted
usted systems
network firewall
firewall limits
limits network
limit coru1.ections
coru1.ections based
destination port
web server
finger protocol
multiple domains
common implementation
untrusted domain
semisecure network
dmz computers
company computers
controlled commurucations
company computer
database server
corporate network
dmz systems
internet internet
internet access
computers access
computers figure
domain separation
secure connections
prevent attacks
http connection
attack likewise
denialof service
service attacks
affect firewalls
unauthorized host
host pretends
authorized host
authorization criterion
firewall rule
send packets
common network
network firewalls
newer kinds
limiting communication
security domains
limits communication
personal firewall
denied access
prex-y understands
applications speak
mail transfer
application proxy
proxy accepts
smtp server
original destination
destination smtp
illegal commands
exploit bugs
specific protocol
specific purpose
analyzing xml
xml traffic
malformed xml
xml sit
system-call execution
privilege feature
feature implements
fifty system
u.s department
defense trusted
system evaluation
evaluation criteria
security classifications
model security
lowest-level classification
minimal protection
protection division
security classes
discretionary protection
audit capabilities
c1-class system
system incorporates
private information
cooperating users
system controls
controls access
control sharing
named individuals
defined groups
tcb requires
protected mechanism
tcb protects
authentication data
c2-class system
system adds
individual-level access
single individual
system adrninistrator
users based
individual identity
information produced
prior user
storage object
speciat secure
secure versions
division-b mandatory-protection
mandatory-protection systems
classc2 system
sensitivity label
bl-class tcb
tcb maintains
security label
decisions pertaining
mandatory access
confidential level
sensitive secret
secret level
sensitivity level
human-readable output
normal user-namepassword
user-namepassword authentication
carry sensitivity
sensitivity labels
security clearance
secret-level user
controls processes
distinct address
b2-class system
system resource
storage objects
maximum security
security levels
enforce constraints
constraints imposed
physical environments
system supports
supports covert
covert channels
covert channel
b3-class system
access-control lists
denote users
granted access
named object
monitor events
mechanism notifies
disruptive manner
highest-level classification
class-al system
formal design
design specifications
verification techniques
high degree
implemented correctly
trusted facility
trusted personnel
enforce aspects
environment develops
security agency
national computer
security center
computing environments
electronic eavesdropping
tempest-certified system
electromagnetic fields
shielding ensures
housed camwt
camwt detect
system designed
security features
examine features
perform security
security functions
security model
manner access
system objects
desired users
unique security
security ids
special privileges
privileges include
access token
deny access
object authentication
user account
modular design
custom authentication
authentication packages
greater access
manage permissions
user runs
program acting
client-server model
simple subjects
server subjects
typical application
simple subject
security access
process implemented
protected server
security context
security technique
bl1ilt-in auditing
monitored examples
examples include
include failure
failure auditing
logoff events
detect random
random password
password break-ins
success auditing
detect login
login activity
strange hours
failure write-access
write-access auditing
executable files
virus outbreak
detect access
sensitive files
security attributes
security descriptor
group security
posix subsystem
discretionary access-control
access-control list
identifies users
system access-control
auditing messages
file foo.bar
owner avi
-all access
access group
cs-read-write access
access user
audit writes
access-control entries
access mask
action files
access types
wri teattributes
classifies objects
container objects
noncontainer objects
container object
object inherits
inherits permissions
parent object
user copies
destination directory
directory inherit
existing files
performance monitor
spot approaching
approaching problems
good job
providing features
myriad security
services windows
system boot
boot tiine
real multiuser
multiuser environment
security plan
security tools
problem security
valuable objects
accidental loss
data consistency
malicious access
data absolute
proper authority
individual computers
masses stack
buffer-overflow techniques
successful attackers
system access
access viruses
infecting thousands
attacks prevent
encryption limits
authentication limits
senders encryption
provide confidentiality
encryption requires
asymnletric encryption
authentication methods
legitimate users
password protection
avoid replay
attacks two-factor
authentication requires
hardware calculator
activation pin
pin multifactor
authentication forgery
detecting security
security incidents
include intrusiondetection
intrusiondetection systems
system events
system-call monitoring
judicial sentence
sentence handed
worm discussed
damage done
computer programs
man-in-themiddle attacks
attacks discuss
discuss solutions
unix program
program cops
cops scans
potential hazards
security concerns
concern relates
experimental addition
program requests
requests access
denies access
file discuss
provide authentication
intrusion-detection system
alarms generated
system correspond
real intrusions
user-provided password
general discussions
general interest
issues concernin
secure systems
security kernel
multiprocessor microcomputer
distributed secure
secure system
discuss password
password security
security morshedian
presents methods
fight password
password pirates
pirates password
password authentication
insecure communications
password cracking
cmnputer break-ins
issues related
trusting computer
unix security
watchdog extension
security-scanning package
ftp program
detailed technical
technical discussion
spafford article
article appears
special section
protocol suite
protecting networks
insider attacks
secure topology
route discovery
discovery kent
present solutions
secure routing
routing savage
service attack
trace-back solutions
diagnose faults
malicious routers
up-to-date security
security information
information include
include http
computer monoculture
first researchers
public-key encryption
encryption scheme
algorithm presented
systems discussions
orange book
security rating
rating reading
good starting
starting point
understanding security
workstation resource
resource kit
security inodel
rsa algorithm
aes activities
cryptographic standards
complete coverage
ietf request
distributed system
share memory
local memory
processors communicate
communication lines
wide-area networks
system vary
small handheld
real-time devices
personal computers
large mainframe
mainframe computer
file-service system
service activity
centralized data
data repository
multiple independent
independent storage
system include
include giving
giving users
resources maintained
improving data
data availability
process synchronization
deadlock problem
handling failures
centralized system
communication networks
high-speed buses
general structure
distributed systems
main differences
centralized systems
i11 chapter
high-level overview
distributed operating
coupled processors
processors interconnected
communication network
specific processor
respective resources
small microprocessors
large general-purpose
general-purpose cornputer
cornputer systems
specific system
communication site
major reasons
building distributed
computation speedup
printer located
sharing files
remote sites
processing information
distributed database
printing files
remote specialized
specialized hardware
high-speed array
array processor
loaded sites
automated load
load sharing
moves jobs
remammg sites
continue operating
large autonomous
autonomous installations
general-purpose computers
sncall machines
crucial system
system function
tenninal character
single failure
continue operation
function occurs
occurs correctly
site recovers
system smoothly
actions present
difficult problems
exchange information
single-computer message
message system
system discussed
higher-level flmctionality
flmctionality found
file transfer
remote procedure
procedure calls
distant sites
run programs
exchanging mail
users minimize
longdistance work
industry-wide trend
computers companies
bigger bang
locating resources
expanding facilities
easier maintenance
network-oriented operating
network operating
systems network
access remote
remote resources
transferring data
important function
telnet facility
lets suppose
westminster college
college wishes
yale university
valid account
user issues
command telnet
command results
socket connection
cs.yale.edu computer
networking software
software creates
bidirectional link
characters entered
machine asks
correct information
process acts
local user
major function
computer maintains
local file
file located
transfer protocol
program suppose
program server
server java
executing ftp
java resides
file location
real file
file sharing
vario-us copies
login permission
cs.yale.edu ptp
yale computer
copy files
files remotely
remote copying
anonymous ftp
ftp method
special subdirectory
protection set
ftp command
user supplies
arbitrary password
anonymous login
access inappropriate
inappropriate files
directory tree
user anonymous
anonymous users
usual file-protection
file-protection scheme
camlot access
ftp mechanism
telnet implementation
remote site
site watches
ptp port
port login
login authentication
execute commands
commands remotely
telnet daemon
ptp daemon
daemon responds
file-related commands
dir-list files
change transfer
transfer modes
ascii files
determine connection
connection status
important point
change paradigms
paradigms ptp
ptp requires
command set
normal operating-system
operating-system commands
commands telnet
telnet requires
smaller shift
unix machine
unix commands
telnet session
session facilities
commands distributed
local resources
resources data
process migration
data migration
migration suppose
basic methods
modest change
large file
automated ftp
ftp system
andrew file
microsystems network
network file
newer versions
microsoft smb
smb protocol
microsoft netbeui
netbeui protocol
network smb
small part
significant portions
migration includes
mere transfer
data translations
sites involved
character-code representations
represent integers
computation migration
large files
desired results
remote cmmnand
remote command
ways suppose
predefilced procedure
procedure executes
alternatively process
designated task
needed result
processes running
files residing
logical extension
entire process
single process
total process
process turnaround
hardware preference
specialized processor
matrix inversion
software preference
require software
process run
complementary techniques
move processes
computer network
achieving load
homogeneous systems
user input
execute programs
distributedcomputing environment
web client
database operation
java applets
system makes
easily accessible
easy-to-use facility-one
huge growth
main difference
geographically distributed
distributed local-area
processors distributed
small areas
single building
adjacent buildings
autonomous processors
large area
differences imply
major variations
communications networks
networks local-area
networks emerged
self-contained applications
single large
small computer
full complement
peripheral devices
data sharing
single enterprise
natural step
small systems
small geographical
geographical area
office environment
communication links
links tend
higher speed
lower error
error rate
networks high-quality
data network
longer distances
high-quality cable
conunon links
local-area network
fiberoptic cabling
common configurations
star networks
networks communication
communication speeds
local radio
radio network
higher-quality cable
optical-fiber-based fddi
fddi networking
fddi network
typical lan
laser printers
magnetic-tape drives
specialized processors
ethernet scheme
construct lans
central controller
multiaccess bus
ethernet protocol
significant growth
wireless spectrum
designing local-area
networks wireless
wireless router
transmitting signals
wireless adapter
adapter networking
networking card
ethernet systems
wifi networks
slower speeds
workstation workstation
workstation printer
printer laptop
laptop file
server figure
ieee standards
wireless networks
ilc practice
practice data
data rates
higher data
actual practice
typical data
spectrum wireless
physical advantage
wired ethernet
ethernet networks
connect communicatilcg
communicatilcg hosts
internet cafes
networks wide-area
academic research
research project
efficient communication
allowing hardware
wide community
first wan
arpanet begun
four-site experimental
experimental network
worldwide network
comprising millions
large geographical
typical links
dedicated data
microwave links
satellite channels
sites communicate
transferring information
communication subsystem
host communication
communication processor
processor figure
communication processors
wide-area network
internet wan
wan enables
enables hosts
separated sites
host computers
operatil1.g system
regional networks
nsfnet il1
northeast united
telephone-system service
leased line
sites requiring
faster internet
routers control
message takes
increase commmlication
commmlication efficiency
reduce security
security risks
communication charges
standard telephone
primary means
digital data
computer side
analog signals
telephone system
destination site
site converts
analog signal
digital form
destination receives
unix news
news network
predetermined times
exchange messages
nearby systems
public messages
specific destinations
private messages
transmission rates
rates range
point-to-point protocol
protocol ppp
ppp functions
modem coru1ections
allowing home
home computers
installation cost
system communication
communication cost
nodes correspond
direct communication
communication link
connected network
links grows
huge installation
connected networks
direct links
links exist
requirement results
higher communication
link fails
connection exists
unconnected subsystems
single node
network types
types include
tree-structured networks
ring networks
failure characteristics
communication costs
costs installation
treestructured network
single link
ring network
higher degree
tree-structured network
star network
link results
network partition
single site
single-site failure
low communication
site howeve1
network star
network figure
network topology
physical aspects
internal workings
basic issues
processes locate
communicate routing
routing strategies
packet strategies
sequence connection
connection strategies
processes send
conflicting demands
first component
process identifier
identifier beca
networked systems
systems share
pair host
alphanumeric identifier
hosts named
named homer
lisa bart
computers prefer
prefer numbers
destination system
networking hardware
name-to-address binding
program compilation
host names
possibilities exist
data file
network requires
execution-time binding
first method
internet rnarr-,,or
dns specifies
naming structure
name-to-address resolution
resolution hosts
multipart names
address progress
progress frorn
general part
periods separating
bob.cs.brown.edu refers
host bob
brown university
top-level domain
domains include
commercial sites
reverse order
made communicate
nance server
server returns
server resides
local caches
inform system
server crashed
addresses resolved
primary servers
domain-name service
internet needed
updated file
find hosts
name-server site
host information
dns lookups
updated information
autonomous subdomains
message indicating
java class
class representing
method getbyname
inetaddress class
string representation
designated host
message destined
destination host
process named
java dnslookup
i.e java
dnslookup www.wiley.com
public class
class dnslookup
public static
static void
void main
inetaddress hostaddress
unknownhostexception uhe
system err
err println
unknown host
program illustrating
dns lookup
physical path
multiple physical
physical paths
routing options
options exist
alternative paths
communication paths
exchange routing
routing information
common routing
routing schemes
fixed routing
hardware failure
failure disables
shortest path
virtual routing
sessions involving
involving messages
remote-login period
dynamic routing
separate messages
paths site
site sends
schem.es fixed
link failures
routing fixed
routing ensure
sequence number
manage routing
complicated environments
environments unix
simple networks
complicated network
network environments
local network
company-wide networks
individual host
static route
routing messages
routing software
special-purpose device
network cmmections
route messages
router decides
network connected
destination internet
internet address
router checks
static routing
manual update
routing tables
tables automatically
automatically gateways
dedicated hardware
strategies messages
implement communication
fixed-length messages
communication incplemented
connectionless message
packet reached
destination indicating
packet arrived
return packet
reliable exchange
multiple packets
information pairs
common schemes
circuit switching
physical link
tl1is link
communication line
calls party
parties hang
message switching
temporary link
message transfer
physical links
short periods
errorcorrection codes
destination correctly
post-office mailing
mailing system
packet switching
logical message
arrive note
destination breaking
audio signal
telephone communication
great confusion
obvious tradeoffs
schemes circuit
switching requires
substantial set-up
waste network
network bandwidth
switching require
reassembled packet
data networks
contention depending
transmit information
link simultaneously
situation occurs
bus network
transmitted information
special provisions
degraded performance
repeated collisions
including collision
collision detection
start transmitting
sites begin
stop transmitting
main problem
ethernet system
common local
local area
area network
network system
congested network
poor network
network throughput
networking performance
token passing
unique message
message type
token arrives
site completes
message transmission
unique site
election algorithm
token-passing scheme
apollo systems
token-passing network
constant adding
large performance
performance decrease
loaded networks
send messages
inherent complexity
asynchronous operations
operations communicating
error-prone environment
determining host
locating hosts
establishing connections
design problem
related implementation
multiple layers
system communicates
equivalent layer
communication takes
peer layers
iso environment
systems environment
environment figure
computers communicating
iso network
network model
logical communications
lowest-level layers
layers implemented
international standards
standards organization
physical layer
electrical details
physical transmission
bit stream
communicating systems
electrical representation
electrical signals
binary data
networking device
fixed-length parts
network layer
providing connecti01cs
routing packets
including handling
outgoing packets
incoming packets
maintaining routing
proper response
load levels
levels routers
routers work
low-level access
including partitioning
partitioning messages
maintaining packet
packet order
controlling flow
session layer
implementing sessions
process-to-process communication
communication protocols
actual communications
remote logins
mail transfers
presentation layer
including character
character conversions
duplex-full duplex
duplex modes
character echoing
application layer
layer deals
file transfe1
remote-login protocols
distributed databases
physical flow
stack communicates
message starts
end-user application
application process
process distributed
distributed information
information transfer-syntax
transfer-syntax negotiation
negotiation data-representation
data-representation transformations
transformations dialog
synchronization control
application entities
network-independent message-interchange
message-interchange service
end message
connection management
error control
network routing
call set-up
clearing application
layer presentation
layer session
layer transport
layer network
layer data-link
data-link control
data transparency
link layer
electrical networkcinterface
networkcinterface connections
physical connection
network termination
termination equipment
iso protocol
data-link -layer
-layer header
header network-layer
network-layer header
header transport-layer
transport-layer header
session-layer header
layer message
_____j data-link
-layer trailer
trailer figure
network message
lower level
il1.clude message-header
message-header data
message reaches
data-network layer
data-lil1.k layer
system receives
receiving process
model formalizes
earlier work
work done
adopted protocol
internet sites
iso networking
layer identifies
illcluding http
connectionless user
user datagram
datagram protocol
connection-oriented transmission
transmission control
control protocol
internet protocol
physical laye1
allowing tcp
physical network
model running
modern communication
communication protocol
authentication ensures
encryption protects
weak authentication
clear-text communication
iso presentation
presentation session
telnet smtp
defined figure
protocol stacks
common protocols
multistep handshake
handshake protocol
authentication devices
adding complexity
protocol modern
modern cpus
perform encryption
offload encryption
separate cryptography
cryptography processors
compromised longdistance
longdistance communication
made secure
virtual private
lan communication
communication remains
nfs version
strong native
native authentication
lan security
common types
failure detection
link failure
site failure
message loss
detect link
procedure suppose
direct physical
fixed intervals
sites send
j-am-up m.essage
j-am-up message
are-you-up message
replies positively
positive reply
reply tells
direct link
reply message
time-out occurs
alternative path
reconfiguration suppose
mechanism described
previous section
normal mode
system believes
longer attempt
failed site
central coordinator
deadlock detection
logical ring
undesirable situation
sites serve
conflicting actions
mutual exclusion
critical sections
failed link
failed wlcen
handshaking procedure
procedure described
receive information
local tables
routing-table information
mcdelivered messages
fault tolerance
failures making
facility fault
fault tolerant
tolerant starts
protocol level
term fault
broad sense
sense communication
communication faults
machine failures
machine stops
erroneous operation
storage-device crashes
degraded form
components fails
multiple redundant
redundant communication
cmnmunication failure
storage failure
storage units
redundant hardware
hardware components
continued access
entire facility
stop operation
inost simple
simple system
failure involves
system running
stateless applications
systems involve
running applications
modify shared
data-centric computing
computing facilities
make fault
failure-monitoring software
special infrastructure
veritas cluster
sun cluster
cluster include
shared disks
shared disk
running application
cluster software
entire computer
computer fails
application loses
failed system
last wrote
data missing
specific applications
implementing lock
lock management
multiple nodes
disks concurrently
concurrently clustered
clustered databases
anode fails
users notice
noncommitted transactions
failed node
client applications
retry noncommitted
database node
key challenge
transparent distributed
user mobility
specific machine
system facilitates
facilitates user
project athena
mit provide
large scale
smaller scale
-the capability
increased service
service load
load systems
bounded resources
increased load
saturation occurs
cpu runs
high utilization
utilization rate
full scalability
relative property
scalable system
system reacts
performance degrades
resources reach
saturated state
perfect design
ever-growing load
load adding
additional indirect
indirect load
adding machines
increase service
service loads
expensive design
design modifications
special importance
scalable design
high service
accommodate growth
user community
enable simple
simple integration
added resources
discussed earlier
loaded component
faulty component
spare resources
ensuring reliability
handling peak
peak loads
loads gracefully
inherent advantage
inappropriate design
potential fault-tolerance
scalability considerations
considerations call
design demonstrating
demonstrating distribution
great extent
magic guidelines
guidelines ensure
current designs
pose problems
large-scale systems
service demand
service mechanism
load demand
system grows
principle concerns
concerns centralization
central control
control schemes
central resources
systems examples
centralized entities
central authentication
authentication servers
central naming
naming servers
central file
file servers
servers centralization
functional asyrrunetry
machines constituting
ideal alternative
symmetric configuration
component machines
equal role
incorporating diskless
diskless machines
machines violates
functional symmetry
workstations depend
central disk
important goals
process structure
major problem
service servers
active clients
single-process server
request necessitates
necessitates disk
blocked assigning
frequent context
related problem
problem occurs
server processes
share information
server architecture
lightweight processes
multiple threads
lightweight process
single requests
clients scheduling
explicit locking
lightweight-process scheme
name-resolution issue
issue raised
processing needed
network number
host number
split varies
internet adrninistrators
adrninistrators assign
assign host-ids
system checks
network part
source network
destination network
complete message
packets needed
destination process
packet moves
packet move
ethernet device
unique byte
byte number
lan communicate
send data
software generates
special network
network address
maximum address
address matches
arp request
request responds
mac address
host caches
ip-mac address
address pair
internal table
cache entries
eventually forgotten
added performance
arp entries
arp cache
communicate networking
software takes
application laye1
hardware layer
ethernet address
packet damage
data section
original message
upper-level headers
ethernet packets
destination ethernet
packet passing
source system
system finds
byte pattern
data pattern
broadcast ethernet
address length
bytes message
message data
data message
detection figure
ethernet packet
network checks
ethernet number
data-link-layer header
packet remain
general-purpose computer
partially connected
communication-network design
include routing
com1ection strategies
network layering
layering models
adding information
naming system
device address
separate networks
pass packets
detect hardware
hardware failures
devices compared
bad idea
broadcast packets
senses collisions
networking specifies
model provide
provide datagram
datagram service
delivery guarantees
provide reliability
reliability discuss
reliable message
message delivery
network transparent
heterogeneous network
architectures running
network topologies
concurrent communications
load balance
routing responsibilities
routing strategy
strategy affect
affect application
application behavior
original http
http protocol
network protocol
separate tcp
tcp session
destroying tcp
lip connections
performance problems
problems resulted
implementation method
good alternative
improve http
http performance
viable strategy
static host
host tables
servers generate
satisfy translation
translation requests
address-resolution protocol
host read
protocol explain
www.wiley.com www.cs.yale.edu
www.cs.yale.edu www.apple.com
robust distributed
ethernet segment
decreased network
network performance
hierarchical manner
hierarchical organization
systems tanenbaum
general overviews
networks williams
covers computer
computer-architecture viewpoint
network programming
operating-system structures
load-balancing dns
dns servers
servers process
issues relating
previous chapter
discussed network
network construction
low-level protocols
protocols needed
distributed implementation
classical time-sharing
users share
share files
storage resources
common concepts
influential dfs-the
dfs-the andrew
naming mechanism
location transparency
distributed files
stateless distributed
improving availability
preceding chapter
coupled computers
computers interconnected
dispersed files
term dfs
commercial transarc
transarc dfs
dfs product
nfs refers
terms service
software entity
entity running
service software
software running
single machine
lower-level interface
actual cross-machine
cross-machine interaction
file services
client interface
file service
primitive file
file operations
primary hardware
hardware concponent
server controls
local secondary-storage
secondary-storage devices
concrete configuration
servers run
dedicated machines
conventional operating
distinctive features
centralized file
remote files
dfs facilitates
important performance
satisfy service
service requests
conventional systems
additional overhead
overhead attributed
distributed structure
overhead includes
cpu overhead
protocol software
ideal dfs
conventional file
dfs manages
dispersed storage
distinguishing feature
space managed
smaller storage
storage spaces
constituent storage
spaces correspond
smallest set
files belonging
component unit
physical objects
users deal
logical data
data objects
objects represented
file nances
system manipulates
disk tracks
user refers
lower-level numerical
numerical identifier
multilevel mapping
transparent dfs
naming mapping
treating files
abstractions leads
mapping returns
multiple copies
naming structures
related notions
storage location
definitions relate
user-level textual
textual names
system-level numerical
numerical identifiers
location-independent naming
naming scheme
dynamic mapping
location independence
stronger property
current dfss
dfss provide
location-transparent mapping
user-level names
specific set
blocks files
file migration
migration implies
operating-system-initiated action
experimental file
systems support
support location
file mobility
mobility afs
afs supports
administrative purposes
afs component
component units
high-level user
low-level names
differentiate location
static location
significant attributes
contents ratber
location-independent files
data containers
specific storage
share data
data users
locationtransparent manner
logical names
devices location
independence promotes
system-wide storage
single virtual
virtual resource
independence separates
naming hierarchy
storagedevices hierarchy
intercomputer structure
root directory
contradicts decentralization
decentralization guidelines
remote server
server systems
operatingsystem kernel
special protocols
boot sequence
diskless workstation
dfs code
special boot
boot protocol
read-only memory
special file
boot code
fixed location
dfs makes
operating-system files
diskless clients
client machines
machines require
greater convenience
operating-system upgrade
upgrade occurs
added complexity
boot protocols
performance loss
loss resulting
local disk
current trend
local disks
user data-and
client systems
word processors
main reason
providing clients
pure diskless
diskless systems
generations appearing
extra work
limit network
improve system
system throughput
naming schemes
main approaches
simplest approach
unique system-wide
unix-like path
location transparent
location independent
isolated component
entire conventional
first approach
component 1-mits
1-mits remain
file-system component
networking package
package supported
vendors nfs
attach remote
remote directories
local directories
coherent directory
nfs versions
versions allowed
mmmted remote
mount points
file-structure names
names components
support transparent
transparent sharing
resulting structure
total integration
component file
single global
structure spans
file-system structure
unix device
device files
machine-specific binary
binary directories
goal difficult
evaluate naming
difficult-to-maintain structure
nfs structure
rem.ote directory
local directory
resulting hierarchy
highly m1structured
arbitrary set
separate accreditation
accreditation mechanism
mechanism controls
remote directory
implementation techniques
techniques implementation
transparent naming
naming requires
file naine
mapping manageable
aggregate sets
component-unit basis
single-file basis
aggregation serves
unix-like systems
hierarchical directory
name-to-location mapping
aggregate files
crucial mapping
mapping information
local caching
independence means
consistent update
information impossible
textual file
lower-level file
file identifiers
file belongs
inevitable price
maps component
update mechanism
mechanism implementing
directory trees
low-levet location-independent
location-independent identifiers
identifiers makes
hierarchy invariant
component-unit migration
component-unit location
location mapping
low-level identifiers
structured names
bit strings
part identifies
unit variants
individual parts
obtain uniqueness
taking care
apollo domain
location-transparent system
aggregating files
lower-level locationindependent
locationindependent file
techniques exemplified
server storing
nanling scheme
server machine
machine performs
implementing remote
remote service
direct analogy
analogy exists
disk-access methods
remote-service method
reasonable performance
remote-service mechanism
reduce disk
increasing performance
basic remote-service
remote-service paradigm
basic caching
caching scheme
data needed
client system
system accesses
accessed disk
repeated accesses
additional network
replacement policy
least-recently-used algorithm
cache size
size bounded
direct correspondence
correspondence exists
server files
master copy
copy residing
relevant consistency
consistency semantics
cached copies
copies consistent
master file
dfs caching
backing store
server nfs
resulting performance
cached data
single access
afs caches
caches files
large chunks
systems discussed
chapter support
support caching
individual blocks
client demand
demand increasing
caching unit
unit increases
hit ratio
miss penalty
miss requires
consistency problems
caching involves
network transfer
transfer unit
rpc protocol
protocol service
service unit
larger units
total cache
blockcaching schemes
common block
block sizes
large caches
large block
smaller caches
fewer blocks
lower hit
cache location
stored-on disk
memory disk
disk caches
clear advantage
main-memory caches
volatile memory
memory moreove1
caches permit
permit workstations
expensive memory
performance speedup
server caches
user caches
user machine
single caching
caching nl.echanism
remote-access implementations
server-side memory
memory caching
nfs protocol
provide disk
disk caching
recent solaris
solaris implementations
implementations ofnfs
clientside disk-caching
disk-caching option
nfs client
client reads
reads blocks
memory copy
system reboots
needed block
cachefs disk
memory cache
cache-update policy
modified data
blocks back
critical effect
simplest policy
policy requires
poor write
write performance
performance caching
write accesses
exploiting caching
delay updates
copy modifications
last update
delayed-write schemes
schemes introduce
introduce reliability
reliability problems
unwritten data
machine crashes
delayed-write policy
policy differ
write-through policy
flush blocks
recent scan
server network
network workstation
workstation figure
local cache
cache sprite
30-second interval
interval nfs
server durilcg
cache flush
nfs treats
treats meta
meta data
directory data
file-attribute data
file-structure loss
directory-structure corruption
server crashes
cache area
cachefs improves
standard nfs
decreases performance
write requests
cache miss
high cache
cache hit
hit rate
gain performance
performance figure
write-back caching
reduce network
write-on-close policy
closing process
performance advantages
delayed writes
long periods
delayed write
frequent flushing
client machine
machine determines
up-to-date copy
client-initiated approach
client initiates
validity check
local data
validity checking
resulting consistency
first access
access coupled
access served
intervals depending
server-initiated approach
server records
server detects
potential inconsistency
inconsistency occurs
conflicting modes
modes cache
server play
active role
intended mode
disabling caching
caching results
remote-service mode
service trades
increased performance
decreased simplicity
substantial number
remote accesses
accesses efficiently
efficiently capitalizing
file-access patterns
patterns makes
total network
network overhead
big chunks
transmitting series
specific requests
disk-access routines
contiguous segments
random disk
cache-consistency problem
major drawback
access patterns
patterns exhibit
exhibit infrequent
infrequent writes
mechanisms employed
consistency problem
problem incur
substantial overhead
large main
main memories
memories remote
small-memory-capacity machines
file operation
lower-level intermachine
intermachine interface
upper-level user
local file-system
interface mirrors
server-side information
client accesses
accesses remote
server tracks
service provided
typical scenario
scenario involving
server fetches
fetches information
connection identifier
unix terms
in-core table
subsequent accesses
session ends
stateful service
garbage-collection mechanism
main-memory space
longer active
key point
service approach
main-memory information
clients afs
stateful file
avoids state
request self-contained
request identifies
efficiency reasons
operation stands
client process
remote message
message reads
remote messages
final close
local operation
operation nfs
stateless file
stateless service
file information
saving disk
sequential access
blocks stateless
stateless servers
servers cmmot
stateful server
server loses
volatile state
crash ensuring
graceful recovery
server involves
recovery protocol
protocol based
recovery requires
crash occurred
client failures
reclaim space
space allocated
crashed client
client processes
stateless computer
computer server
server avoids
reincarnated server
self-contained request
server failures
slow server
recovering server
robust stateless
longer request
request messages
slower processing
in-core i,_lformation
service imposes
additional constraints
target file
low-level naming
translating remote
local names
clients retransmit
retransmit requests
self-contained read
absolute byte
byte count
position withilc
incremental offset
unix read
destructive operations
server employs
server-initiated method
cache validation
provide stateless
file descriptors
implicit offsets
mailctain tables
current offset
explicit offset
availability multimachine
multimachine replication
benefit performance
nearby replica
request results
shorter service
basic requirement
replication scheme
file reside
failure-independent machines
nfsv4 ourcov,era.geofnfs
considered version
mostrecentnps standard
differs fundanrentaljy
vious versimi.s
versimi.s jhe
significant ch9nge
stqteful,meaping tha
the.state ofthe
ofthe client
client session
j1lote file
ned untij
untij itis
itis closed
closed th.t1s
thenfs protocol
.proyide .np
operations furthen
parate protocols
lounting remote
remote fil
lockii1g remote
phlgle prqtocol
network fitewalls
nj.ount protocol
notorimis security
nps implem,entations
ability of.dients
cache file
tne performapc
a.s plients
file a9cesses
che rgther
rgther thanh
tsjo req
estfile jocks
ll .if
client maintains
loci ,tmtil
ar,e als
traditiora11y1 unix
.provide advisory
advisory jile
jile locking
windows operatirg
operatirg systen1
v4t1qw.p.rovides mandatory
mandatory locking
lockinga11d caching
caching mec
server delegates
delegates responsibilities
lockand contents
.the client
client thatrequested
thatrequested tnel
delegated client
.current version
.the file
deleg21ted client
lock access
a1i.d filt
egated client
client reli11quishesth
lock andde
udj network
network ptqtocol
itto betteraclj
lstto varying
traffic loads
cts reduces
foado11the s.eryet
s.eryet and.i
obvious requirement
requirement implies
replication management
location-opaque activity
activity provisions
users mapping
replicated file
higher levels
lower levels
lower-level names
transparency requirement
providing replication
replication control
levels replication
control includes
includes determination
users locus
file denote
logical entity
consistency sen1antics
virtual accesses
logical files
primary incportance
fundamental tradeoff
preserving consistency
indefinite blocking
sacrificing consistency
guaranteed progress
progress locus
employs replication
sacrifices consistency
primary-copy approach
pair primary-replica-identifier
local replica
replica exists
special value
identical identifiers
identifiers ibis
ibis supports
supports demand
demand replication
automatic replication-control
replication-control policy
whole-file caching
nonlocal replica
nonprimary replica
replica updates
primary copy
serialized invalidation
nonprimary replicas
stale replica
satisfy remote
remote write
requesting machine
distributed computing
environment designed
carnegie mellon
mellon university
information-sharing mechanism
transarc corporation
ibm ibm
afs afs
industry coalition
osf organization
transarc lab
lab announced
open-source product
termed openafs
ibm public
public license
commercial product
product openafs
unix vendors
dce system
make dce
accepted dfs
describe afs
afs seeks
simpler dfss
feature-rich nonexperimental
nonexperimental dfs
location-independent file
client-side caching
cache consistency
secure authentication
server-side caching
high availability
automatic switchover
source server
formidable attributes
andrew system
implementations worldwide
overview afs
afs distinguishes
server machines
machines servers
partitioned space
dedicated servers
location-transparent file
file hierarchy
root file
space descends
descends workstations
workstations run
virtue protocol
space servers
autonomous operation
temporary files
workstation owner
privacy reasons
finer granularity
clusters interconnected
cluster consists
optimal performance
cross-cluster file
file references
file-system architecture
basic heuristic
offload work
experience indicating
server cpu
key mechanism
cache files
feature reduces
file-open latency
additional issues
client mobility
mobility clients
initial performance
performance degradation
vice interface
client programs
vice machines
machines authentication
secure-transmission functions
connectionbased communication
communication package
package based
rpc paradigm
mutual authentication
vice server
client communicate
encrypted messages
messages encryption
software information
protection database
database replicated
protection afs
protecting directories
regular unlxbits
file protection
list ncay
users allowed
directory afs
types read
heterogeneity defining
clear interface
diverse workstation
workstation hardware
symbolic links
links pointing
machine-specific executable
space afs
small component
single client
volumes reside
unix m01mt
m01mt mechanism
granularity difference
entire disk
mounted volumes
key administrative
administrative unit
vital role
individual file
vice file
low-level identifier
afs directory
entry maps
path-name component
equal-length components
volume number
vnode number
single volume
vnode numbers
structures compact
compact fids
file movements
cached directory
directory contents
location information
volume basis
volumes makes
location database
manageable size
disk space
disk partitions
original server
temporary forwarding
forwarding information
handle updates
recent modifications
volume-movement operation
read-only replication
entire volume
system-executable files
seldom-updated files
volume-location database
database specifies
read-write copy
replication sites
fundamental architectural
architectural principle
entire files
client workstation
workstation interacts
vice servers
writing files
remote interaction
key distinction
far-reaching ramifications
workstation intercepts
file-system calls
client-level process
stores modified
modified copies
files back
closed venus
contact vice
individual bytes
bypass venus
future opens
cached file
file venus
venus assumes
cached entries
cache-validation requests
requests received
client caches
server updates
server notifies
server removes
open purposes
client closes
clients caching
file lose
writing bytes
copy venus
venus regains
regains control
venus contacts
contacts vice
callback revoked
modified files
afs implements
implements session
session semantics
primitive read
directory level
operation completes
callback mechanism
cached validation
validation traffic
replace callbacks
callbacks lost
network failures
venus considers
cached files
directories suspect
cache-validation request
mechanism forces
maintain callback
callback information
maintain validity
validity information
information maintained
break callbacks
notifying clients
callback state
state maintained
caches contents
syncbolic links
pathname translation
fetched directories
path-name traversal
intermediate directories
future open
open calls
caching policy
well-defined operations
venus reflects
implementation client
unix kernel
usual set
detect references
vice files
relevant operations
client-level venus
venus process
venus carries
path-name translation
translation component
mapping cache
server locations
avoid server
server interrogation
volume location
directory connection
connection establishment
security purposes
disk venus
unix file
low-level storage
afs servers
client cache
processes access
access unix
unix files
expensive path-name-to-inode
path-name-to-inode translation
translation routine
internal inode
inode interface
client-level processes
additional system
added dfs
venus manages
separate caches
simple least-recently-used
venus notifies
status cache
rapid servicing
data cache
buffering mechanism
single client-level
server services
file req1.1ests
lightweight-process package
non-preemptible scheduling
client requests
requests concurrently
rpc package
low-level datagram
datagram abstraction
whole-file transfer
rpc calls
rpc connection
priori binding
processes services
services client
multithreaded server
server process
structures needed
single server
disastrous effect
made transparent
facilitates client
client logs
complementary methods
stateful versus
versus stateless
service paradigms
feature-rich dfs
dfs characterized
significant consistency
semantics caching
nfs provide
obtain inconsistent
stale data
server crash
consistency guaranteed
client ships
entire path
server requesting
client prefer
locationtransparent dfs
location-independent dfs
dfs discuss
dfss discussed
multiclient database
database application
mapping objects
caching disk
reliable network
recovery control
replicated files
unix environncent
file placement
distributed computer
servers appears
afs system
interesting dfss
unix united
locus unix
locus system
sprite system
mobile storage
considerable research
distributed storage
wide-area settings
centralized synchronization
synchronization mechanisms
discuss methods
handling deadlocks
atomic transactions
concurrency-control schemes
schemes discussed
present schemes
handling deadlock
deadlock prevention
deadlock avoidance
events occurred
single common
common memory
determine order
resource-allocation scheme
common clock
occurred first
happened-before relation
partial ordering
total ordering
distributed algorithm
consistent total
sequential processes
events executed
totally ordered
happenedbefore relation
message constitutes
bare events
band b
irreflexive partial
affect event
space-time diagram
horizontal direction
direction represents
represents space
vertical direction
vertical lines
lines denote
denote processes
labeled dots
dots denote
denote events
wavy line
line denotes
path exists
events related
concurrent events
happened first
concurrent processes
events agree
son1.e order
synchronized clocks
physical clocks
system event
global ordering
ordering requirement
logical lci
logical clock
simple counter
counter incremented
successive events
increasing value
event bin
bin process
scheme ensures
global orderil
clock ticks
situation violates
timestamp-ordering scheme
process identity
identity numbers
break ties
system consists
one-to-one mapping
mapping exists
centralized approach
critical section
exclusion sends
request message
process receives
release message
coordinator checks
coordinator receives
algorithm ensures
scheduling policy
critical-section entry
coordinator process
process fails
request queue
distributed approach
decision making
algorithm based
event-ordering scheme
scheme described
message request
queueing incmning
incmning requests
reply messages
deferred requests
request timestamp
incoming request
request made
algorithm exhibits
desirable behavior
timestamp ordering
ordering ensures
fcfs order
number represents
minimum number
required messages
processes act
algorithm functions
system consisting
sections process
logical clocks
clocks described
replies immediately
receiving replies
undesirable consequences
process joins
processes participating
mutual-exclusion algorithm
interested reader
entire scheme
scheme collapses
longer send
send request
failed process
process recovers
stable sets
cooperating processes
token-passing approach
processes ilc
special type
process possession
token entitles
single token
organized ilc
physical communication
process receiving
messages required
high contention
infinite number
low contention
atomic transaction
program unit
difficulty occurs
single transaction
link connecting
erroneous computations
system preserves
preserves atomicity
local transaction
transaction coordinator
transactions initiated
transaction breaking
execution coordinating
local site
site maintains
recovery purposes
two-phase commit
commit protocol
final outcome
commit protocols
transaction initiated
executed inform
record prepare
transaction manager
sites determines
portion oft
record ready
log records
received responses
pre-specified interval
aborted transaction
participating sites
aborted depending
record commit
record abort
coordinator sends
site receives
message ready
commit tor
site crashes
site responds
coordinator site
final verdict
coordinator writes
record complete
failure handling
major disadvantage
coordinator failure
coordinator recovers
participating site
occurred suppose
site executes
executes redo
executes undo
fate oft
corrnni tted
control records
records implies
s1c failed
s1c means
execute undo
coordinator fails
failed coordinator
active site
abort tin
preceding cases
cases holds
active sites
additional control
decision is-until
oft remains
hold system
hold locks
unavailable data
data increases
blocking problem
destinations intact
sites connected
previous schemes
links fail
concurrency control
database system
global transaction
concurrency-control scheme
concurrent execution
transactions executing
concurrency schemes
locking protocols
two-phase locking
protocols described
change needed
lock manager
first deals
data replication
general case
nonreplicated scheme
locking schemes
local lock
unlock requests
items stored
transaction wishes
lock data
lock mode
incompatible mode
lock request
lock n1.anager
n1.anager sends
initiator indicating
simple implementation
message transfers
handling lock
lock requests
ncessage transfer
handling unlock
deadlock handling
deadlock-handling algorithms
single-coordinator approach
system maintains
single lock
single chosen
chosen site-say
manager determines
item resides
write operation
handling lmlock
lmlock requests
simple deadlock
scheme include
concurrency controller
recovery scheme
lockmanager function
manager administers
distribution reduces
complicates deadlock
majority protocol
nonreplicated data
data scheme
presented earlier
manager controls
replicated inn
manager detern1.ines
scheme deals
replicated data
decentralized manner
full replication
exclusive mode
mode transaction
biased protocol
shared locks
favorable treatment
exclusive locks
manager manages
site shared
common cases
protocol shares
scheme enables
handle concurrency
unreplicated data
data implementation
principal idea
timestamping scheme
scheme discussed
unique timestamp
serialization order
first task
centralized scheme
distributed scheme
generating unique
unique timestamps
previous protocols
nonreplicated environment
primary methods
logical counter
local clock
site generates
local unique
global unique
site identifier
sign.ificant position
global timestamps
timestamps generated
site compare
unique na1nes
local timestamps
faster rate
fast site
fair generation
local timestamp
site local
timestamp site
unique identifier
identifier figure
x,y visits
generate timestamps
basic timestamp
timestamp scheme
scheme introduced
straightforward mamler
centralized case
cascading rollbacks
item value
eliminate cascading
con bine
ensures serializability
described suffers
undesirable property
causing aborts
read queue
queue consisting
deadlock-detection algorithms
algorithms presented
distributed algorithms
deadlock-avoidance algorithms
resource-ordering deadlock-prevention
deadlock-prevention technique
unique numbers
unique nl1mber
number greater
resource request
global resource-ordering
deadlock-prevention scheme
scheme based
timestampordering approach
resource preemption
deadlock situation
single instance
resource type
unique priority
priority number
scheme prevents
prevents deadlocks
wait-for graph
low priorities
complementary deadlock-prevention
deadlock-prevention schemes
wait-die scheme
nonpreemptive teclmique
smaller timestamp
resource held
wound-wait scheme
preemptive technique
wait-die approach
larger timestamp
avoid starvation
starvation provided
smallest timestamp
significant differences
schemes operate
older process
younger process
needed resource
resource contrast
scheme process
fewer rollbacks
rollbacks occur
unnecessary rollbacks
deadlock-prevention algorithm
preempt resources
ecessary preemptions
deadlockdetection algorithm
graph describing
resourceallocation state
single resource
graph represents
common techniques
schemes require
local wait-for
graph correspond
graph note
requested resources
wait-for graphs
usual manner
local processes
global wait-for
system depicted
deadlock exists
local graphs
deadlocked state
communication delay
real graph
graph describes
unknown state
ormliscient observer
constructed graph
approximation generated
detection algorithm
reported results
correct algorithms
deadlock-detection coordinator
cycledetection algorithm
deadlock-detection algorithm
coordinator searches
global graph
victim process
graph-construction options
options listed
local graph
coordinator updates
single message
message periodically
periodically returning
false cycle
deadlock recovery
reasons unrelated
rolled back1
centralized deadlock-detection
false deadlocks
requests coordinator
coordinator figure
unique identifiers
requested resource
initiating message
local information
graph reflects
instantaneous state
initiating messages
controllers share
detecting deadlock
site constructs
waitfor graph
total graph
dynamic behavior
partial graphs
involves construction
scheme differs
additional node
node pex
pex exists
arc pex
graphs results
involve node
cycle involving
involving pex
distributed deadlock
deadlock -detection
-detection algorithm
involving node
item located
deadlock-detection message
site sic
finite number
deadlock-detection computation
computation halts
message describing
include node
deadlock-detection messages
situation results
unnecessary message
reduce message
message traffic
site s1c
s1c continues
normal execution
graphs maintained
sites discover
local cycles
graph site
algorithms employ
performs functions
functions needed
lost token
output device
continue execution
election algorithms
algorithms assume
active process
one-to-one correspondence
largest priority
recovered process
current coordinator
present examples
first algorithm
algorithm applies
systems organized
algorithms require
active processes
bully algorithm
algorithm suppose
election message
number process
priority numbers
message informing
higher number
highest number
lower numbers
begins execution
higher numbers
process forces
active coordinator
lower number
election request
election requests
ring algorithm
main data
algorithm ends
process maintains
active list
algorithm works
initially empty
message elect
first elect
elect message
j-thatis,ifthe message
message received
pisnumber -then
system process
largest number
recovering process
process determines
solution requires
inquiry message
turn sends
common value
communication medium
garbled messages
resultilcg lie
unpredictable process
process behavior
processes fail
execution pattern
incorrect messages
failed processes
divisions byzantine
byzantine army
enemy camp
byzantine generals
reach agreement
generals agree
result lie
lie defeat
situation corresponds
unreliable communication
loyal generals
faulty processes
processes lie
unreliable communications
unreliable suppose
function boo
detect failures
acknowledgment message
procedure continues
first case
compute boo
boo note
viable alternatives
respective states
minimal sequence
transfers exists
processes agree
compute foo
last message
decision procedure
original sequence
unpredictable ways
faulty suppose
private value
nonfaulty process
conditions exist
nonfaulty processes
correct algorithm
worst-case delay
reaching agreement
proportionate tom
message-passing delays
general solution
algorithm requires
information exchange
first round
arbitrary value
values reported
majority value
default value-say
exact order
events occur
system timestamps
consistent event
event ordering
ring-structured networks
validation schemes
unique global
site identification
local clocks
message arrives
primary method
graph methods
graph include
backup coordinator
assume responsibility
centralized environment
hierarchical deadlock-detection
non-leaf controller
controller maintains
relevant information
lowest common
common ancestor
cycle exists
comp1.1ter network
deadlock-detection scheme
deadlockprevention scheme
bidirectional rings
achieving distributed
failure model
faulty processors
processors processors
processors follow
prescribed protocol
unexpected points
processors fail
processors discuss
scheme perform
granting resources
executing transactions
ensures transaction
transaction atomicity
clock timestamp
scheme presented
cam1.0t order
events based
system discuss
discuss ways
distinguish concurrent
first general
general algorithm
squareroot algorithm
token-passing algorithm
rilcg-structured systems
systems presented
presented ilc
ilc section
fault-tolerant solution
simple taxonomy
distributed mutual-exclusion
mutual-exclusion algorithms
distributed synchronization
shared-memory environment
disjoint processes
distributed solution
dilling-philosophers problem
modified versions
presume commit
presume abort
defilling default
default assumptions
papers dealing
transaction concept
comprehensive discussions
distributed concurrency
control rosenkrantz
timestamp distributed
distributed deadlock-prevention
distributed deadlock-detection
offer surveys
global snapshots
generals problem
ring-structured system
operating-system issues
general-purpose computing
computing systems
real-time system
computed results
deadline period
period results
results produced
real value
traditional operating-system
operating-system scheduling
stringent timing
timing deadlines
multimedia system
conventional data
text files
word-processing documents
multimedia data
data multimedia
data consist
continuous-media data
data continuous-media
handling continuous-media
data require
operatingsystem structure
network management
real-time computing
real-time systems
produce results
real-time computer
real-time operating
soft real-time
defining characteristics
describe scheduling
hard real-time
computing results
autonomous robot
delivers mail
office complex
vision-control system
requirement contrast
timing requirement
strict demands
interactive desktop
quick response
interactive user
batch-processing system-m.ay
systems executing
traditional computer
specialized devices
ordinary home
home appliances
microwave ovens
consumer digital
digital devices
mp3 players
communication devices
cellular telephones
blackberry handheld
handheld devices
larger entities
embedded system
computing device
larger system
home dishwasher
dishwasher-the water
water temperature
timer indicating
computer embedded
system controlling
controlling antilock
antilock brakes
sensor detecting
system controller
controller taking
controller tells
braking mechanism
braking pressure
embedded computer
embedded systems
home furnace
real-time requirements
safety-critical systems
safety-critical system
missed deadline
deadline -results
catastrophe examples
systems include
include weapons
weapons systems
antilock brake
brake systems
flight-management systems
worse-might occur
significant majority
including fax
fax machines
networking devices
missing deadline
deadline requirements
requirements results
unhappy user
critical realtime
realtime tasks
critical real-time
real-time task
receive priority
linux-provide soft
real-time support
address issues
operating systencs
single purpose
small size
mass-produced specific
specific timing
unlike pcs
mp3 player
navigation system
play dvds
system reflects
single-purpose nature
systems exist
microwave oven-it
space constraints
systems lack
processing power
standard desktop
desktop pcs
contemporary desktop
memory required
small footprints
consumer devices
devices devices
digital cameras
costconscious environments
embedded controller
alternative technique
structure shown
buses provide
mechanism intercom1ectin.g
individual components
system controllers
including cache
memorymouse keyboard
keyboard printer
printer figure
bus-oriented organization
attached peripheral
peripheral ports
integrated circuit
soc strategy
final characteristic
characteristic identified
primary task
real-time tasks
chapter focuses
issue real-time
systems meet
tim.ing requirements
give real-time
real-time processes
highest schedulil1.g
schedulil1.g priorities
addressing timing
features provided
operatil1.g systems
graphical displays
dvd drives
drives protection
security mechanisms
mechanisms multiple
users supporting
sophisticated -and
-and large-kernel
forty million
million lines
typical real-time
simple design
simple systems
features listed
systems serve
features found
found il1
digital wristwatch
vision identification
features supported
desktop operating
fast processors
explained earlier
realtime systems
sufficient space
peripheral disk
support file
nonvolatile memory
supporting features
relocation register
address translation
additional considerations
considerations arise
system providing
memory features
memory-management unit
power consumption
logical addresses
look-aside buffer
real-time environment
translating addresses
managing address
cpu generates
logical address
cpu generate
addresses directly
real-addressing mode-does
employ virtual
real-addressil1.g mode
processes real-addressing
real-addressing mode
physical location
real-time constraints
performance benefit
dynamic relocation
register shown
memory location
systems configure
obvious benefit
last approach
full virtual
memory functionality
translation takes
attached disk
nvram flash
core systems
systems providing
full support
means absolute
priority-based scheduling
preemptive kernel
kernel minimized
minimized latency
notable feature
networking support
support networking
networking protocols
provide networking
networking capabilities
gathers real-time
real-time data
networking features
system requiring
obvious networking
networking requirencent
basic requirements
requirements listed
important feature
real-time process
process requires
priority-based algorithm
preemption recall
algorithms assign
priority based
important tasks
higher priorities
supports preemption
higher-priority process
real-time scheduling
scheduling features
linux operating
systems assigns
scheduling priority
priority levels
highest levelspriority
levelspriority values
processes solaris
similar prioritization
prioritization schemes
priority-based scheduler
real-time functionality
functionality hard
deadline requirem
additional scheduling
preemptive kernels
nonpreemptive kernels
kernels disallow
disallow preemption
process running
kernel mode
kernel-mode process
exits kernel
yields control
task running
mode designing
traditional user-oriented
user-oriented applications
commercial desktop
xp-are nonpreemptive
real-time systems-in
real-time systems-preemptive
systems-preemptive kernels
long period
kernel preemptible
insert preemption
preemption points
long-duration system
preemption point
point checks
high-priority process
switch takes
process terminates
interrupted process
call preemption
safe locations
minimizing latency
event-driven nature
occur events
timer expires-or
remote-controlled vehicle
vehicle detects
event occurs
event latency
latency requirements
latency requirement
brake system
occurs event
system responds
controlling radar
latency period
latencies affect
interrupt latency
latency dispatch
dispatch latency
latency interrupt
latency refers
interrupt occursf
specific interrupt
interrupt service
service routine
running interrupt
interrupt type
type owitocontiex
tasks receive
factor contributing
updated real-time
deterministic behavior
behavior required
real-time kernels
latency providing
cpu mandates
systems minimize
effective technique
keeping dispatch
conflict phase
kernel release
low-priority processes
resources needed
preemption disabled
preemption enabled
affect dispatch
latency arises
modify kernel
lower-priority process-or
lower-priority processes
kernel event
event response
--------response interval
process made
process execution
lower-priority process
priorities follow
requires resource
preempting process
lower priority
priority -process
-process m-has
long process
relinquish resource
priority inversion
priority-inheritance protocol
accessing resources
process inherit
priorities revert
original values
preventing process
inherited priority
original priority
critical process
noncritical processes
processes hard
stricter requirements
individual schedulers
considered periodic
constant intervals
periodic process
fixed processing
processing timet
periodic task
assign priorities
rate requirements
admission-control algorithm
rate-monotonic scheduling
algorithm schedules
periodic tasks
static priority
priority policy
scheduling assumes
cpu burst
process acquires
processil1.g times
cpu utilization
period -ti
-the cpu
total cpu
starts execution
first deadline
milliseconds remaining
scheduler resumes
static priorities
rate-monotonic algorithm
assign process
shorter period
burst process
worst-case cpu
processes approaches
percent combined
combined cpu
processes scheduled
schedule deadlines
missing deadlines
earliest-deadline-first scheduling
dynamically assigns
assigns priorities
edf policy
system priorities
rmmable process
illustrate edf
edf scheduling
processes shown
meet deadline
scheduling recall
earliest deadline
initial priority
continue running
first deadlines
deadlines process
begins rum1ing
earlier deadline
process require
constant amount
process a1mom1ce
proportional share
share scheduling
share schedulers
schedulers operate
total processor
examplef assume
total oft
admission control
control policy
allocated shares
client requesting
sufficient shares
admission controller
pthread scheduling
posix standard
pthread api
api related
real-time threads
threads pthreads
pthreads defines
scheduling classes
sched __fifo
__fifo sched_rr
sched_rr sched__fifo
sched__fifo schedules
schedules threads
first-served policy
equal priority
real-time thread
blocks sched_rr
priority pthreads
system specific
api specifies
pthread_attr_t attr
int policy
first parameter
current scheduling
integer value
pthread_attr setsched_policy
functions return
non-zero values
error occurs
include pthread.h
define num_threads
pthread_t tid
default attributes
set policy
begin control
void runner
void param
scheduling api
pthread program
describe vxworks
popular real-time
support vxworks
wind river
river systems
industrial devices
networking equipment
routers vxworks
opportunity-that began
began exploring
planet mars
wind microkernel
microkernel recall
bare minimum
additional utilities
approach offers
including minimizing
desirable feature
small footprint
microkernel supports
basic features
individual processes
real-time application
application figure
operating .systent
.systent isbe
singlyinreai-time enviroft
,whereby real-time
real-time tasl
tasl sareassignt
kernel makelinux
even,more suitilb
.embedded systems
systems thes
fullr pree
pree ptive
ptive kernel
.efficient sched-lli11g
ofthe number
enthardlare arc
strategy jew
integrah1lg linux
linux iftto
iftto reanill1e
reanill1e .envirof
involves combini
linux operat
ernet tht
.is theappro
lil_1cux ppt
standard lirn.tx
lirn.tx kernel
kernel run
real7tirlle ketnel
itc tl1rlotac1c11atencyto.thereal-timesystem.rj
ies difft
rent schedulingpolicies
tnd earliest
deadline-first scheduling
separate scheduling
scheduling models
preemptive scheduling
nonpreemptive round-robin
round-robin scheduling
posix api
manages interrupts
latency times
wind micro
micro kernel
separate tasks
pipes-a mechanism
special fik
protect data
data shared
mutex locks
priority inheritance
inheritance protocol
prevent priority
priority mversion
microkernet vxworks
component libraries
operating-system designer
required features
size-or footprint-of
vxworks takes
interesting approach
memory management
first level
per-page basis
policy enables
tasks running
multiprocessor architecture
individual processors
architecture supports
cache-coherency policy
data residing
tasks maintain
consistent view
memory requires
optional virtual
memory component
component vxvmi
processor support
memorymanagement unit
optional component
data areas
data area
area marked
kernel modes
applications run
entire address
results arrive
results arriving
deadline periods
strict timing
inexpensive devices
meet timing
timing issues
algorithms include
earliestdeadline first
first scheduling
scheduling assignb
assignb tasks
scheduling assigns
assigns priority
control system
nuclear power
power plant
fuel economy
economy system
landing system
jet airliner
scheduling illustrate
gantt chart
inversion problem
share scheduler
scheduling inferior
monotonic scheduling
previous algorithms
dynamic priority-assignment
priority-assignment algorithm
least-laxity-first scheduling
scheduling stoica
share algorithm
popular operating
future directions
important research
research issues
research article
earlier chapters
systems handle
wordprocessing documents
recent trend
conventional files
files continuous-media
data differ
differences affect
multimedia systems
chapter objectives
compress multimedia
system requirements
including cpu
term multimedia
multimedia describes
include audio
video files
mp3 audio
audio files
dvd movies
short video
video clips
movie previews
news stories
stories downloaded
internet multimedia
multimedia applications
live web
web casts
sporting events
live webcams
observe customers
paris multimedia
multimedia application
separate audio
video tracks
smaller devices
personal digital
digital assistants
stock trader
stock quotes
quotes delivered
multimedia files
common standards
representing multimedia
media delivery
delivery multimedia
major difference
multimedia file
specific rate
file requires
special timing
rapid succession
video appears
human eyes
eye retains
choppy-looking presentation
video file
rate consistent
laptop computer
audio file
handheld mp3
data comprise
personal computer
smaller device
handheld computer
cellular telephone
telephone data
live continuous
continuous media
streaming techniques
progressive download
real-time streaming
media file
small media
media files
long videos
internet radio
rewind operations
dvd controller
dvd disc
5-minute streaming
streaming video
movie clip
media stream
live streaming
ondemand streaming
radio program
program broadcast
live real-time
real-time stream
favorite radio
radio station
internet live
video conferencing
live delivery
delivery means
live stream
earlier portions
radio broadcast
on-demand streaming
deliver media
media streams
full-length movies
archived lectures
news broadcast
on-demand stream
dvd player
convenient time-there
well-known streaming
streaming media
media products
products include
include realplayer
apple quicktime
windows media
media player
client media
media players
traditional applications
100-minute mpeg-1
mpeg-1 video
high-defuution television
storing hundreds
digital video
high data
color video
frame requires
timing delays
continuous-media file
deliver continuous-media
requirements-of continuous
qos guarantees
guarantees affects
cpu scheduling
management specific
specific examples
significant cpu
multimedia tasks
ensure meeting
support bandwidth
bandwidth requirements
minimizing delay
compressing multimedia
compression makes
significant demands
smaller form
quickly compression
network cormection
discussing file
file compression
original file
file size
compressed file
compression ratio
file affects
decompression compression
compression algorithms
lossy compression
original data
lossless compression
compression ensures
generat lossy
lossy techniques
techniques provide
higher cone
cone pression
pression ratios
lossy compression-namely
video lossy
low frequencies
human ear
video operate
successive frames
frames lossless
lossless algorithms
compressing text
compressed files
compression schemes
moving picture
picture experts
experts group
mpeg refers
file formats
compression standards
audio portion
layers layers
video portions
file layer
timing information
mpeg player
major mpeg
mpeg standards
audio stream
conventional vcr
vcr videos
videos mp3
popular medium
storing music
audio layer
practice compression
compression ratios
compressing dvd
digital television
including high-definition
high-definition television
video compression
required data
typical bit
bit rates
encoded files
higher rates
local playback
transmit audio
three-dimensional animation
animation layers
layers animation
animation makes
end users
potential home
home buyer
virtual tour
appealing feature
scalable level
allowing delivery
slow network
bps modems
high-speed local
area networks
wireless devices
including handheld
handheld computers
cell phones
standards discussed
perform lossy
high compression
fundamental idea
mpeg performs
performs compression
characteristics described
require levels
spreadsheets tin1.ing
foremost concern
video data
data demands
rate constraints
request data
constant intervals-or
playback maintaining
rate requires
succeeds frame
video playback
displaying frame
qos levels
best-effort attempt
level treats
traffic streams
best-effort service
quality-of-service requirements
traditional operating
operating systems-the
systems-the systems
total amount
worst-case workload
demand exceeds
exceeds resource
resource capacity
manual intervention
next-generation multimedia
provide continuous-media
continuous-media applications
guarantees made
hard qos
enable multimedia
service-level guarantees
parameters defining
defining qos
delay refers
desired result
jitter refers
on-demand real-time
delay jitter
pauses-or lost
frames-during playback
playback clients
worth-before beginning
beginning playback
reliability refers
lost packets
processing delays
these-and other-scenarios
specific data
streaming service
negotiating quality
content provider
provide qos
sufficient resources
everyday lives
movie theater
everyday life
admission-control policy
multimedia environment
simple admission-control
nonshareable resources
first initializing
subsequent calls
common technique
implementing admission
multiple instances
reservation request
resource il1
il1 advance
admission-control scheme
scheme assigns
resource arrives
resource manager
qos demands
manager reserves
requesting client
desired qos
qos requirements
ensure qos
cineblitz multimedia
multimedia storage
storage server
covers real-time
critical processes
system ensures
noncritical process
typical requirement
unusable multimedia
critical task
guaranteed period
scheduling issue
issue concerns
priority scheduling
dynamic priorities
non-real-time tasks
interactive processes
systems assign
scheduling strategies
strategies discussed
deadline qos
discussed disk
handle conventional
scheduling goals
traditional disk
disk schedulers
schedulers employ
continuous-media files
preserve qos
diskscheduling algorithms
conflict continuous-media
high disk-bandwidth
disk-bandwidth rates
data-rate requirements
low transfer
high latency
latency rates
high bandwidth
reducing latency
continuous-media systems
cpu-scheduling algorithm
deadlines edf
order requests
request closest
current cylinder
closest deadline
servicing requests
higher seek
seek tim.es
current position
strict edf
head passes
disk scheduler
deadline requirement
scan-edf scheduling
fundamental problem
read-write heads
unacceptable seek
affect disk
disk throughput
throughput recall
issue faced
fcfs scheduling
adopting scan
scan schedulil
arm reaches
reverse direction
strategy optimizes
optimizes seek
hybrid algorithm
combines edf
scan-edf starts
edf ordering
services requests
deadline usil
scan order
batch requests
scan ordering
batching requests
similar deadlines
reordering requests
deadlines fall
requested cylinder
batching scheme
first batch
last batch
service request
moving downward
cylinder nun1.bers
first service
heads begin
moving upward
requests hand
final batch
foremost qos
qos issue
systems concerns
concerns preserving
preserving rate
client wishes
video compressed
required rate
quality-ofservice requirements
internet-issues relating
network delivers
network issues
unique demands
worth noting
general -and
provide network
proprietary protocols-notably
meet qos
proprietary protocols
encounter congestion
traffic issues-issues
end hosts
server delivering
client playing
internet standard
including audio
transporting media
media formats
files compressed
mpeg rtf
remove jitter
jitter introduced
unique requirements
delivering content
server delivers
separate unicast
method lies
unicast delivery
unicast session
public internet
multicasting appears
reasonable compromise
single copy
clients indicating
practical standpoint
intermediate routers
originating server
support multicasting
delays incurred
intermediate router
multicast stream
unicast channels
multicasting routers
reasonable physical
physical proximity
chief executive
executive officer
streaming protocol
randomly access
standard web
hypertext transport
transport protocol
deliver documents
play media
media streamed
uniform resource
resource locatm
real audio
streaming windows
conventional web
standard http
http requests
delivering streaming
media content
client wished
resume playback
alternative strategy
protocol designed
streaming servers
significant advantage
advantage rtsp
random positions
playback delivery
streami.j.1.g media
streaming server
rtsp protocol
rtsp defines
rtsp streaming
commands i.j.1.clude
server allocates
allocates resources
session established
setup command
server suspends
suspends delivery
server breaks
resources allocated
state machine
rtsp server
server receives
rtsp commands
media offers
networking issues
interested readers
high-performance media
cineblitz refers
constraints cine
cine blitz
blitz guarantees
real-time clients
data retrieval
cineblitz disk-schedulu1.g
admission-control algorithms
setup play
play tear
pause figure
finite-state machine
machine representing
representing rtsp
cineblitz disk
scheduler services
service cycle
earlier discussions
heads move
reversing direction
pure scan
scan disk
cil eblitz
monitor requests
non-real-time clients
clients receive
receive service
rate guarantees
guarantees required
term client
client refers
real-time client
cineblitz monitors
disk bandwidth
disk latency
keeping track
cineblitz admission
controller admits
retrieve data
cineblitz queues
queues requests
cyclic order
total buffer
idea behil
bound requests
estimated service
service times
admitted requests
double buffer
buffer total
double buffering
admission policy
disk block
blocks thatcanberetrievedforrequest
thatcanberetrievedforrequest r1c
r1c duringeachcycleis
r1c bits
last portion
block involves
track contailling
rotational delay
desired track
c-scan disk-scheduling
sorted order
worst-case seek
delay times
maximum latency
latency incurred
tseek component
component refers
maximum disk-seek
disk-seek latency
component reflects
blocks multiplied
worst-case rotational
yic bits
request r1c
r11 bits
free buffer
files include
include video
audio filesf
desktop computersf
digital assistantsf
primary distinction
deadline requiren
requiren ents
timing requirementsf
playback multimedia
multimedia server
qualityof service
service requirementsf
quality-of-service guarantees
provide quality
servicef multimedia
system accepts
quality-of-service level
providing quality-of-service
guarantees requires
system performs
performs cpu
cpu schedulingf
schedulingf disk
disk schedulingf
continuous-media task
scheduling criterion
criterion network
management requires
handle delay
jitter caused
traditional internet
internet protocols
transmitting data
contrast unicastingf
unicastingf multicastingf
target bit
bit rate
desired bit
color assuming
application consists
compressed sizes
streaming applications
tolerate delay
tolerate jitter
jitter live
streaming on-demand
cylinders requests
deadlines occurring
scan-edf disk
requests batched
repeat exercise
operating principle
blitz system
performing admission
general overview
systems topics
topics related
resource management
processing capability
memory buffers
programming model
developing multimedia
rate-monotonic scheduler
serving video
schedule-management issues
compression techniques
concepts described
real operating
great detaiilinux
chose linux
full-featured unix
operating-system source
great detail
recent operating
gaining popularity
stand-alonemachine market
workgroup-server market
chose windows
relative importance
on-line coverage
freebsd system
linux combines
combines features
bsd model
unix freebsd
freebsd source
linux source
unix windows
windows applications
chapter presents
in-depth examination
real system
gained popularity
recent years
programmer interfaces
linux presents-interfaces
great deal
unix tradition
internal methods
linux implements
interfaces linux
evolving operating
chapter describes
describes developments
linux process
process model
linux schedules
schedules processes
unix compatibility
major design
design goal
linux project
development began
finnish student
linus torvalds
christened linux
self-contained kernel
first true
pc-compatible cpus
initial kernel
small subset
system services
linux system
unix functionality
early days
linux development
development revolved
central operating-system
privileged executive
full operating
operating systeitl
linux kernel
original piece
software developed
linux con1.munity
development projects
basic linux
standard environment
user programming
standard means
linux distributions
standard components
administrative tools
initial installation
subsequent upgrading
manage installation
modern distribution
includes tools
first linux
kernel released
80386-compatible intel
intel processors
device-driver support
memorymapped files
early incarnation
incarnation supported
shared pages
system supported
minix file
system -the
linux kernels
minix platform
implement proper
proper unix
unix processes
protected address
milestone version
release culminated
rapid development
limlx kernel
single biggest
included support
standard tcp
lip networking
bsd-compatible socket
networking programming
programming device-driver
slip protocols
serial lines
enhanced file
original minix
scsi controllers
high-performance disk
developers extended
support paging
swap files
arbitrary files
extra hardware
cd-rom devices
sound cards
international keyboards
floating-point emulation
math coprocessor
unix-style inclllding
implemented simple
simple support
unloadable kernel
development started
kernel stream
numerous bug-fix
bug-fix patches
standard numbering
numbering convention
kernels kernels
odd minor-version
minor-version number
evennumbered minor-version
minor-version numbers
stable updates
stable kernels
remedial versions
development kernels
untested functionality
wider variety
pci hardware
hardware bus
bus architecture
architecture developers
developers added
pc-specific feature-support
virtual8086 mode-to
dos operating
networking stack
ipx protocol
including accounting
firewalling functionality
final pc-only
pc-only linux
source distribution
implemented support
full integration
stable kernel
release concentrated
wider hardware
complete implementations
existing functionality
main kernel
kernel source
development stream
functionality added
major version-number
version-number increment
multiple architectures
64-bit native
native alpha
alpha port
multiprocessor architectures
architectures linux
distributions based
motorola 68000-series
68000-series processors
sparc systems
derived version
linux running
mach microkernel
powermac systems
memory-management code
unified cache
kernel offered
memory performance
file-system caching
networked file
writable memory-mapped
memory-mapped regions
improved tcp
including apple
apple talk
anlateur radio
radio networking
isdn support
mount remote
remote netware
microsoft lanmanager
network volumes
major improvements
handling dependencies
loadable modules
automatic loading
dynamic configuration
standardized configuration
configuration interface
features included
file-system quotas
posix-compatible real-time
real-time process-scheduling
process-scheduling classes
improvements continued
ultrasparc systems
added networking
flexible firewalling
traffic management
large window
selective acks
acks acorn
kernel-mode nfs
nfs daemon
daemon added
signal handling
finer level
symmetric multiprocessor
kernel include
include increased
increased support
smp systems
memorymanagement system
process scheduler
kernel forms
components make
complete linux
code written
supporting software
unix-like operating
tools developed
bsd operating
window system
free software
software foundation
gnu project
main system
linux community
addressing omissions
high quality
networkingadministration tools
recent bsd
bsd derivatives
borrowed code
return examples
intel floating-point-emulation
floating-point-emulation math
math library
sound-hardware device
loose network
developers collaborating
small groups
specific components
internet file-transfer-protocol
archive sites
sites act
standard repositories
ensuring compatibility
system components
standard specifies
standard linux
linux file
names configuration
configuration files
system binaries
run-time data
latest revisions
ftp sites
linux user
carry out
precompiled sets
easy installation
extra system-installation
management utilities
ready-to-install packages
common unix
unix tools
news servers
editing tools
first distributions
distributions managed
important contributions
modem dish
dish ibutions
advanced package
package management
management today
distributions include
package-tracking database
sls distribution
first collection
linux packages
complete distribution
single entity
sls lacked
packagemanagement tools
distribution represented
great improvement
poor package
installed distributions
noncommercial limlx
limlx distributions
popular distributions
commercial linux
linux support
support company
free-software linux
supported versions
linux include
include distributions
large linux
german-language distributions
including versions
prohibit compatibility
rpm package
package file
commercial applications
applications distributed
accept rpm
rpm files
linux licensing
gnu general
software fmmdation
fmmdation linux
public-domain software
software implies
waived copyright
copyright rights
linux code
authors linux
main implications
licensing terms
legitimate exercise
derived product
product proprietary
proprietary software
software released
gpl camwt
binary-only product
release software
components covered
make source
binary distributions
resh iction
prohibit ntaking-or
selling-binary-only software
software distributions
receives binaries
reasonable distribution
distribution charge
linux resembles
nonmicrokernel unix
unix implementation
multitasking system
full set
unix-compatible tools
tools linux
system adheres
traditional unix
unix semantics
networking model
internal details
linux runs
early development
individual enthusiasts
well-funded development
research facilities
start linux
linux attempted
limited resources
resources today
multiprocessor machine
minimalist limix
limix kernels
kernels grew
functionality speed
design goals
prices paid
unix implementations
posix standards
standards comprise
operating-system behavior
common operating-system
operating-system functionality
process threads
real-time operations
operations linux
relevant posix
posix documents
achieved official
official posix
posix certification
linux presents
programmer interface
linux programming
programming interface
interface adheres
svr4 unix
bsd behavior
separate set
implement bsd
bsd semantics
behaviors differ
standards exist
full certification
expense involved
wide base
major goal
formally certified
basic posix
posix threading
threading extensions-pthreads
process control
main bodies
important abstractions
libraries define
standard set
functions implement
full privileges
system utilities
perform individual
specialized management
management tasks
unix terminology
incoming network
accepting logon
logon requests
updating log
full linux
important distinction
code executes
privileged mode
full access
computer linux
linux refers
user-mode code
operating-system-support code
messagepassing architecture
kernel internals
linux retains
historical model
monolithic binary
single address
process calls
operating-system function
hardware interrupt
loadable kernel
modules figure
core scheduling
memory code
networking code
kernel components
components share
m.elting pot
user applications
shared libraries
needed piece
independent loadable
loadable components
run processes
protected access
hardware resources
kernel implements
features required
system provided
extra features
unix application
application expects
operating-system interface
applications make
make calls
turn call
operatingsystem services
libraries provide
simplest level
kernel-system service
requests making
call involves
transferring control
tmprivileged user
privileged kernel
transfer vary
system-call arguments
special form
complex versions
file-handling functions
advanced control
basic kernel
kernel system
provide routines
sorting algorithms
string-manipulation routines
limix system
system includes
user-mode programs-both
programs-both system
user utilities
utilities include
configure network
load kernel
server programs
programs handle
handle user
user login
login requests
printer queues
standard utilities
utilities serve
key system-administration
system-administration functions
unix user
user environment
simple everyday
everyday tasks
listing directories
complex utilities
text-processing functions
textual data
performing pattern
pattern searches
input text
utilities form
standard tool
tool set
important part
basic limix
arbitrary sections
modules run
hardware capabilities
networking protocol
reasons linux
write kernel
modified kernel
entire kernel
cumbersome cycle
driver-the driver
already-rmming kernel
gpl license
proprietary components
components added
module interface
standard minimal
minimal kernet
extra device
drivers built
cd-rom driver
module support
reserve hardware
module management
management loading
module requires
binary contents
module makes
kernel symbols
correct locations
space linux
linux deals
reference updating
module loading
separate sections
module code
linux maintains
internal syncbol
syncbol table
symbol table
symbols defined
exported symbols
symbols constitutes
well-defined interface
exporting symbols
kernel function
function requires
explicit request
special effort
module writer
standard external
external linking
external symbols
symbols referenced
final module
module binary
binary produced
system utility
unresolved references
correct addresses
running kernel
module passed
moduleloader utility
utility asks
continuous area
virtual kernel
kernel returns
memory allocated
loader utility
machine code
correct loading
loading address
allocated space
final module-management
module-management component
module requestor
kernel defines
communication interface
module-management program
connection established
management process
process requests
network service
original service
manager process
loaded module
driver registration
isolated region
kernel maintains
dynamic tables
kernel makes
startup routine
cleanup routine
separate mechanisms
device registration
registration tables
tables include
drivers include
include character
interface devices
implements linux
virtual-file-system calling
calling routines
storing files
virtual file
entire networking
networking protocot
packet-filtering rules
binary format
format specifies
conflict resolution
commercial unix
single-supplier solution
software vendor
good idea
hardware configurations
large numbers
video display
display adapters
hardware configuration
modular device
active set
central conflict-resolution
conflict-resolution mechanism
arbitrate access
prevent modules
prevent aui
oprobes-device-driver probes
configuration-from interfering
existing device
resolve conflicts
multiple drivers
parallel printer
printer driver
network driver
printer port
maintains lists
allocated hardware
limited number
dma channels
kernel database
database first
alternative hardware
basic context
user-requested activity
unix linux
linux operates
key places
unix process
introduce linux
threading model
basic principle
process management
separate functions
call exec
rumung program
program starts
starts executing
existing process
great simplicity
existing environment
parent process
process wishes
original program
child process
process encompasses
single execution
single program
specific sections
process properties
properties fall
identity consists
lmique identifier
additional identifiers
identifiers associate
process group
processes forked
single user
user command
group ids
user groups
access system
personality process
process personalities
personality identifier
emulation libraries
limited control
session identifiers
security checks
checks howeve1
primary pid
uniquely identifies
process environment
null-terminated vectors
argument vector
enviromnent vector
command-line arguments
running program
environment vector
value pairs
named environment
environment variables
arbitrary textual
textual values
user-mode address
first datum
environment vectors
parent possesses
calling exec
kernel passes
enviromnent variables
current environment
command-line vectors
alone-their interpretation
user-mode libraries
process provide
flexible ways
pass information
user-mode system
important environment
conventional meanings
related parts
terminal com1.ected
perform operations
text programs
multilingual support
display system
system messages
environment-variable mechanism
mechanism custom-tailors
per-process basis
process context
environment properties
constantly process
context includes
scheduling context
scheduling context-the
context-the information
information includes
saved copies
registers floating-point
floating-point registers
floating-point arithmetic
includes information
outstanding signals
signals waiting
key part
kernel stack
separate area
memory reserved
kernel-mode code
accounting information
total resources
resources consumed
entire lifetime
file structures
file-system context
table lists
context applies
current root
default directories
file searches
signal-handler table
table unix
asynchronous signals
external events
table defines
specific signal
signal arrives
memory context
context describes
full contents
private address
threads linux
traditional functionality
process linux
create threads
term task-rather
thread-when referring
child tasks
flags clone_fs
file-system information
current working
working directory
signal handlers
parent task
task shares
child task
sharing takes
entire context
main process
process data
independent subcontexts
arguments passed
subcontext data
data struch1res
struch1res initialized
allocating cpu
kernel tasks
tasks kernel
tasks encompass
process scheduling
scheduling linux
separate process-scheduling
process-scheduling algorithms
time-sharing algorithm
multiple processes
absolute priorities
time-sharing tasks
tasks received
major overhaul
earlier versions
kernel ran
unix scheduling
adequate support
linux scheduler
constant time-known
including processor
processor affin.ity
maintaining fairness
interactive tasks
numeric priority
relative priority
highest lowest
time-slice length
separate priority
priority ranges
real-time range
nice value
value ranging
ranges map
global priority
lower values
unlike schedulers
assigns higher-priority
higher-priority tasks
lower-priority tasks
unique nature
runnable tasks
runqueue data
processor maintains
active array
expired array
expired tasks
priority arrays
arrays includes
tasks indexed
scheduler chooses
highest priority
multiprocessor machines
highest-priority task
runqueue structure
value depends
longer sleep
sleep times
scheduler favors
shorter sleep
priorities lowered
dynamic priority
array priority
task lists
o-o figure
realtime scheduling
classes required
priority irt
irt addition
scheduling class
class processes
time-sharing scheduling
waiting longest
fcfs processes
processes continue
round-robill process
scheduling queue
round-robin processes
unlike routine
scheduler offers
strict guarantees
relative priorities
reahim.e process
kernel synchronization
kernel schedules
kernel-mode execution
operating-system service
fault occurs
start executing
kernel-defined handler
problem posed
sanl.e internal
internal data
kernel task
routine executes
risking data
fact relates
critical sections-portions
access shared
synchronization involves
nonpreernptive kernet
kernet meaning
higherpriority process
limix kernel
readerwriter versions
smp machines
fundamental locking
short durations
single-processor machines
disabling kernel
kernel preemption
task disables
disables kernel
enables kernel
enable kernel
-for disabling
enabling kernel
kernel-mode task
thread-info structure
field preempt_count
counter indicating
outstanding calls
longer periods
protection technique
linux applies
service routines
basic tool
interrupt-control hardware
disabling interrupts
kernel guarantees
concurrent access
hardware architectures
interrupt enable
disable instructions
interrupts remain
device waiting
synchronization architecture
entire duration
interrupts disabled
user-mode programs
interrupt protection
protection levels
separating interrupt
top half
bottom half
normal interrupt
recursive interrupts
interrupts enabled
miniature scheduler
bottom halves
bottom-half scheduler
routine exits
separation means
complex processing
interrupt occurs
half execute
running completes
similar bottom
disabling selected
selected bottom
foreground kernel
system interrupt
relevant bottom
tl1e end
bottom-half tasks
top-half interrupt
code running
scheduling interrupt
symmetric multiprocessing
first stable
stable linux
support hardware
separate processes
separate processors
smp imposed
single kernel
kernel spinlock
termed bkl
big kernel
kernel lock
kernel concurrently
bkl provided
coarse level
locking granularity
kernel made
smp implementation
multiple locks
kernel provided
additional smp
smp enhancements
processor affinity
load-balancing algorithms
physical memory-pages
small blocks
memory mapped
running processes
hardware characteristics
linux separates
zone_dma zone_normal
zone_normal zone_highmem
architecture specific
standard architecture
memory comprise
comprise zonldma
zonldma zone_normal
zone_normal identifies
routine memory
memory requests
high memory
kernel address
32-bit intel
intel architecture
remaining memory
intel80x86 architecture
free pages
memory arrives
kernel satisfies
priinary physical-memory
physical-memory manager
lil lux
lux kernel
page allocator
physical pages
allocating ranges
contiguous pages
buddy system
adjacent units
allocatable memory
memory region
adjacent partner
allocated partner
partner regions
larger region-a
region-a buddy
buddy heap
larger region
larger free
free region
small memory
memory request
small free
linked lists
memory regions
allowable size
smallest size
single physical
physical page
page figure
buddy-heap allocation
desired size
memory allocations
contiguous area
kernel functions
basic allocator
reserve memory
memory-management subsystems
underlying page
variable-length allocator
slab allocator
allocating memory
page cache
caching pages
pages belonging
entire pages
smaller blocks
additional allocator
arbitrary-sized requests
service allocates
allocates entire
smaller pieces
service allocating
memory involves
first free
free piece
memory shortages
strategy adopted
allocating kernel
slab allocation
single cache
unique kernel
representing process
process descriptors
file objects
cache represents
cache representing
representing semaphores
semaphores stores
stores instances
semaphore objects
descriptors stores
process descriptor
descriptor objects
kernel objects
respective caches
slab-allocation algorithm
store kernel
cache depends
free kernel
objects figure
object assigned
kernel requests
requests memory
object representing
type struct
struct task_struct
kernel creates
task_struct object
slab consists
free objects
free object
partial slab
empty slab
empty slabs
contiguous physical
main subsystems
main cache
main mechanism
native linux
linux diskbased
diskbased file
nfs networked
cache stores
stores entire
networked data
virtual address
systems interact
cache requires
mapping pages
creates pages
manages loading
memory manager
manager maintains
separate views
separate regions
first view
logical view
describing instructions
space consists
nonoverlapping regions
region representing
page-aligned subset
single vm_area_struct
vm_area_struct structure
execute permissions
balanced binary
binary tree
fast lookllp
physical view
hardware page
pagetable entries
entries identify
exact current
current location
virtual mernory
software-interrupt handlers
address-space description
key page-management
page-management functions
unavailable page
function table
central memorymanagement
memorymanagement routines
regions linux
region backed
simplest type
region represents
demand-zero memory
memory filled
file acts
page table
pager detects
shared region
region result
object mapped
process runs
empty virtual
concplete copy
kernel copies
vm_area_struct descriptors
reference count
page covered
child share
case occurs
copying operation
operation reaches
page-table entries
process modifies
processes share
process copies
brand-new page
mechanism ensures
private data
data pages
important task
relocate pages
systems performed
entire processes
modern versions
paging-the movement
individual pages
disk linux
whole-process swapping
paging mechanism
paging system
pages data
data back
pageuut policy
modified version
standard clock
algorithm described
multiplepass clock
accessed pages
higher age
age value
age valuing
select pages
mechanism supports
supports paging
dedicated swap
swap devices
normal files
slower due
overhead incurred
system blocks
next-fit algorithm
out pages
continuous runs
improved performance
allocator records
modern processors
page-table entry
page-not-present bit
pagetable entry
index identifying
memory linux
linux reserves
architecture-dependent region
kernel pages
kernel virtual
static area
page-table references
simple translation
addresses occurs
pages allocated
normal page
reserved section
address range
function allocates
arbitrary number
single region
contiguous kernel
function maps
call commands
current execution
execution context
initial context
first job
system service
permission rights
kernel invokes
loader routine
program file
single routine
loader functions
initial reason
loader table
standard format
changed older
older linux
kernels understood
out format
binary files-a
simple format
older unix
systems newer
newer linux
modern elf
elf format
current unix
implementations elf
including flexibility
elf binary
extra debugging
debugging information
loader routines
allowing registration
multiple loader
binary formats
single rmming
rmming system
elf-format binaries
out binaries
binary loader
binary file
fault result
initial memory
elf-format binary
file consists
page-aligned sections
elf loader
loader works
typical layout
regions set
reserved region
space sits
privileged region
normal user-mode
memory-mapping functions
create regions
data regions
user-mode virtual
lower-numbered addresses
includes copies
program il1
bottom end
program text
chapter
swap
partition
file
map
1---------swap
area--------1
page
slot
l
---_l
figure
data
structures
swapping
linux
systems
scheme
performance
modern
computers
physical
memory
older
tend
similar
solaris
space
anonymous
regions
shared
processes
areas
established
area
regular
system
raw-swap-space
consists
series
4-kb
hold
swapped
pages
.u1.2.p-an
array
integer
counters
value
counter
values
greater
occupied
ij.l.dicates
number
mappings
mapped
occur
storing
region
shown
disk
drives
continued
smaller
cheaper
economically
feasible
attach
disks
computer
large
presents
opportunities
improving
rate
read
written
operated
parallel
setup
offers
potential
reliability
storage
redundant
information
stored
multiple
failure
lead
loss
disk-organization
techniques
collectively
raids
commonly
address
issues
past
composed
small
cheap
viewed
cost-effective
alternative
expensive
today
higher
data-transfer
economic
reasons
raid
stood
stands
ij.l.dependent
12.7.1
improvement
redundancy
first
chance
out
set
fail
specific
single
structuring
structured
variety
ways
directly
attached
buses
case
operating
software
implement
flmctionality
alternatively
intelligent
host
controller
control
hardware
finally
standalone
unit
cache
standard
ata
scsi
controllers
common
functionality
raid-protected
layers
simplicity
flexibility
suppose
100,000
hours
1,000
days
long
store
copy
result
significant
amount
-and
high
unacceptable
solution
problem
introduce
extra
needed
event
rebuild
lost
fails
simplest
approach
introducing
duplicate
technique
mirroring
logical
two
write
carried
mirrored
volume
failed
replaced
volume-where
depends
factors
individual
takes
average
replace
restore
failures
connected
repair
57,000
years
aware
assumption
independence
valid
power
natural
disasters
earthquakes
fires
floods
damage
manufacturing
defects
batch
correlated
age
probability
grows
increasing
repaired
spite
considerations
n1.irrored-disk
offer
singledisk
source
concern
frequently
writes
progress
block
blocks
fully
inconsistent
state
add
write-back
protected
considered
complete
point
assuming
nvram
kind
error
protection
correction
ecc
12.7.2
parallelism
access
improves
requests
handled
doubled
pair
functionat
transfer
single-disk
reads
improve
striping
form
bits
byte
bit
treated
sectors
times
normal
size
important
organization
participates
accesses
processed
bit-level
generalized
include
divides
four
level
instance
striped
mod
levels
bytes
sector
block-level
achieved
main
goals
increase
throughput
load
balancing
reduce
response
12.7.3
rates
numerous
schemes
provide
lower
cost
combined
parity
describe
l1.ave
proposed
cost-performance
trade-offs
classified
shows
pictorially
error-correcting
structure
non-redundant
memory-style
codes
bit-interleaved
block-interleaved
distributed
cases
depicted
worth
recovery
refers
arrays
12.1l
ievell
level1
level2
error-correctingcode
detected
errors
records
odd
damaged
match
similarly
computed
single-bit
menwry
reconstruct
idea
eighth
error-correction
labeled
remaining
note
requires
overhead
unlike
taking
account
fact
detect
correctly
detection
computing
equal
missing
level3
good
required
one-disk
practice
advantages
reduced
mirror
spread
n-way
reading
writing
fast
negative
side
supports
fewer
participate
request
3-and
paritybased
levels-is
expense
results
significantly
slower
non-parity
moderate
penalty
dedicated
offloads
computation
cpu
buffer
spindles
combination
make
caching
doing
outperform
non-caching
level4
addition
separate
diagramed
allowing
slowe1
proceed
leading
i
independent
performed
operatingsystem
modified
back
updated
syti
wafl
added
seamlessly
initialized
zeros
change
correct
differs
spreading
stores
nth
actual
recoverable
avoids
overuse
guard
datacompared
5-and
tolerate
generally
enviromnents
doubles
stripe
equivalent
option
commercially
pairs
resulti.j.l.g
theoretical
entire
inaccessible
leaving
unavailable
mirrors
rest
variations
basic
described
confusion
exist
exact
definitions
implementation
variation
implemented
volume-management
kernel
layer
minimum
features
part
full
fairly
slow
typically
bus-adapter
hba
low
flexible
create
sets
slice
volumes
presented
connections
san
hosts
advantage
interconnect
virtualization
devices
device
sits
accepts
commands
servers
manages
replication
involves
automatic
duplication
sites
disaster
synchronous
asynchronous
locally
remotely
grouped
periodically
primary
site
faster
distance
limitations
depending
carry
manage
intercom1ect
replicated
aspect
implementations
hot
spare
configured
replacement
reestablished
automatically
waiting
allocating
human
intervention
12.7.4
selecting
choices
designers
choose
consideration
factor
continuous
supply
high-performance
interactive
database
influences
varies
rebuilding
easiest
copied
rebuilds
applications
critical
popular
require
important-for
databases
due
inserv
im1ovation
effort
solutions
blurs
lines
separated
previous
technologies
3par
broken
256-mb
chunklets
ram
applied
chunklet
snapshots
created
format
read-write
readonly
mount
copies
needing
makes
copy-on-write
reflected
innovation
expand
shrink
original
copying
administrator
configure
initially
occupies
starts
unused
allocated
fixed
removed
noticing
feature
delay
purchase
preferred
level6
supported
administrators
decisions
12.7.5
extensions
concepts
including
tapes
broadcast
wireless
recover
split
short
units
received
reason
reconstructed
comrnonly
tape-drive
robots
tape
decrease
backup
12.7.6
problems
assure
users
pointer
wrong
pointers
incomplete
properly
recovered
corrupt
process
accidentally
protects
media
landscape
bugs
perils
zfs
innovative
solving
verify
integrity
maintains
internal
checksums
metadata
checksummed
rathel
inode
checksum
incorrect
update
bad
directory
entry
points
accessed
checksumming
places
providing
consistency
found
calculation
read-modify-write
cycles
noticeable
issue
lack
twenty
divided
holding
fit
five-disk
requirements
allowed
arise
sizes
built
managers
left
above-mismatched
file-system
lanagers
growth
shrinkage
recreated
combines
management
traditional
separation
functions
partitions
gathered
pool
free
model
malloc
allocate
release
freed
artificial
limits
relocate
resize
quotas
limit
reservations
grow
variables
changed
owner
depicts
pooled
introduced
write-ahead
log
availability
stable
definition
residing
replicate
modes
coordinate
updates
guarantees
leave
recovering
force
consistent
occurs
section
discuss
meet
outcomes
successful
completion
partial
occurred
midst
corrupted
total
started
remain
intact
invoke
procedure
maintain
output
operation
executed
completes
successfully
injormation
declare
examined
detectable
exists
action
contents
differ
content
ensures
succeeds
completely
extend
easily
arbitrarily
reduces
reasonable
simulate
guaranteed
safe
destroys
consuming
nonvolatile
battery
trusted
route
greatly
improved
buy
dvd
player
sealed
inside
expect
inexpensive
cartridges
drive
lowers
defining
characteristic
tertiary
12.9.1
tertiary-storage
examples
floppy
read-only
write-once
rewritable
cds
dvds
kinds
tertiarystorage
removable
flash
interact
usb
interface
12.9.1.1
magnetic
made
thin
coated
material
enclosed
protective
plastic
technology
hard
recording
stuface
risk
scratches
rigid
platter
magneto-optic
head
flies
farther
surface
covered
thick
glass
arrangement
resistant
crashes
coil
produces
field
room
temperature
weak
magnetize
flashes
laser
beam
aimed
tiny
spot
heats
susceptible
record
detecting
fields
property
light
bounced
polarization
rotated
clockwise
counterclockwise
dependin
orientation
rotation
detects
category
optical
magnetism
special
materials
altered
dark
bright
spots
exarnple
optical-disk
freeze
crystalline
amorphous
transparent
brighter
passes
ltlaterial
bounces
reflective
phase-change
powers
medium
erase
melting
refreezing
melt
re-recordable
cd-rw
dvd-rw
contrast
worm
manufacture
aluminum
film
sandwiched
platters
burn
hole
burning
reversed
destroy
holes
virtually
impossible
alter
code
additions
durable
reliable
metal
safely
encapsulated
newer
organic
polymer
dye
absorbs
marks
recordable
cd-r
dvd-r
read-oniv
cd-rom
dvd-rom
factory
prerecorded
pressed
burned
nonremovable
counterparts
seek
12.9.1.2
type
general
rule
holds
cartridge
random
fast-forward
rewind
tens
seconds
minutes
typical
price
capacity
economical
purposes
supercomputer
centers
enornwus
scientific
research
commercial
enterprises
installations
robotic
changers
move
slots
library
mechanisms
give
automated
diskresident
gigabyte
future
active
on-line
off-line
sitting
shelves
12.9.1.3
economics
evolve
solid-state
growing
importance
simply
ssd
volatile
affects
ssds
characteristics
moving
parts
latency
energy
megabyte
larger
shorter
life-spans
limited
journal
journaling
notebook
efficient
promising
bologt
phk
holographic
photographs
hologram
three-dimensional
pixels
pixel
represents
black
white
transferred
extremely
development
viable
based
apply
fabrication
produce
electronic
chips
datastorage
machines
proposal
calls
10,000
heads
square
centimeter
suspended
moved
lengthwise
linear
track
shifted
sideways
slightly
enable
remains
data-storage
semiconductor
dram
capabilities
discussed
12.9.2
operating-system
support
major
jobs
present
virtual
machine
abstraction
abstractions
raw
queues
schedules
interleaved
job
12.9.2.1
application
handle
blank
inserted
mounted
formatted
empty
generated
differently
open
opens
reserved
exclusive
exits
closes
exclusivity
sense
interleaving
thrashing
services
decide
program
backs
list
names
beginning
files
order
easy
rules
organize
find
difficult
binary
ascii
concatenated
tremendously
string
variable
chosen
separately
operations
locate
precise
positions
locating
rewinding
partly
filled
formatting
place
final
detern
ined
fly
defective
encountered
skipped
explains
-the
numbers
detennined
read_position
returns
located
relative
motion
backward
effect
logically
erasing
position
means
append-only
updating
middle
effectively
erases
implements
appending
placing
end-of-tape
eot
mark
refuses
start
overwrites
end
principle
algorithms
12.9.2.2
naming
question
letter
path
unix
molmt
table
enables
discover
knowing
contained
world
serial
prefixed
ensure
digits
length
remember
memorize
12-digit
difficulty
layout
additional
compatible
orders
encodings
letters
pcs
versus
ebcdic
mainframes
name-space
unsolved
depend
interpret
fortunately
standardized
music
universal
understood
formats
usual
driver
programmed
comn1on
fonnats
12.9.2.3
hierarchical
assistance
backups
jukebox
simple
instructs
switch
jukeboxes
thousands
arms
managing
movement
extends
hierarchy
secondary
incorporate
extended
straightforward
manner
extension
rarely
retrieval
intolerable
demand
paging
forms
actively
archived
file-archiving
continues
longer
occupy
call
staged
proceeds
disk-resident
seldom
sporadically
current
work
hsm
includes
extending
deleted
schedule
policy
save
e-mail
destroyed
ilm
centralizes
knowledge
policies
locations
12.9.3
component
aspects
speed
12.9.3.1
bandwidth
measure
transfer-that
calculates
cartridge-switching
essence
sustained
stream
flows
effective
provided
tlce
ranges
megabytes
slowest
fastest
range
bandwidths
30mb
essentially
twodimensional
moves
ann
selected
cylinder
waits
rotational
milliseconds
portion
accessible
buried
hundreds
wound
reel
winding
reels
reaches
thousand
involved
stop
spinning
arm
spin
seconds-about
hundred
random-access
switching
incurs
robotic-ann
switched
ejected
loaded
calibrate
prepare
tape-switch
enormously
generalize
careful
overgeneralize
eject
item
pay
attention
focus
terrible
bottleneck
bandwidth-to-storage-capacity
ratio
favorable
hour
situation
respect
illustrate
queued
share
devoted
infrequently
satisfy
12.9.3.2
pe1jormance
unable
practical
infinitely
understand
n1.ag
netic
exposed
harmful
environmental
conditions
dust
humidity
mechanical
forces
shock
bending
widely
wear
dozen
gentle
millions
reuses
comparison
magnetic-disk
magnetic-tape
close
contact
scrubbing
summary
fixed-disk
removable-disk
weakness
crash
leaves
unharmed
12.9.3.3
concrete
amom1.t
housing
motor
lox
averaged
figures
show
trends
prices
graphs
lowest
advertisements
magazines
wide
web
year
reflect
smallcomputer
marketplace
readership
mainframe
minicomputer
markets
purchased
128mb
512mb
2gb
---c-19
,8.,.-2
98-cc4
c8
88---,19
c9
-1c
91
99-4
c19l96---,19c
-2.,-,o
oo
0l.04
2oos
fraction
huge
dominated
fluctuates
period
excess
production
caused
glut
periods
shortages
sigrtificant
increases
decline
steadier
fell
steadily
ceased
dramatic
fall
mid-range
dat
approaching
72gb
320gb
9c-c84-1
l98
-88c---cc19
90c
c19
--c-c19l94-c-c19l96,---.,-c19cc98-2,-jooc-c0--c2,-j.00,-,-2
.,j
in.expensive
prior
mentioned
tracking
targeted
small-computer
fallen
dramatically
comparing
plummeted
magnitude
dropped
rapidly
medium-sized
libraries
largely
rendered
obsolete
appears
revival
await
revolutionary
breakthrough
archival
enormous
exceed
farms
secondary-storage
n1.agnetic
one-dimensional
local
ports
network
cmmection
specifies
referenced
disk-schedliling
variance
sstf
scan
c-scan
c-look
designed
improvements
strategies
disk-queue
ordering
harmed
external
fragmentation
utilities
identify
fragmented
defragmenting
badly
systenc
defragmentation
sophisticated
allocation
reorganization
lowlevel
hardware-new
preformatted
partitioned
boot
bootstrap
lock
key
bypass
dedicate
user
decision
options
face
organized
controlled
requestqueue
scheduling
convention
simpler
potentially
confusing
identifies
built-in
privileged
protect
sensitive
coating
robust
expose
lastly
decreased
decades
notably
effects
areal
density
gigabits
inch
sequential-access
suitability
term
streaming
denotes
underway
excluding
level-2
nanoseconds
kilobytes
utilization
calculate
percent
acceptable
compute
smallest
sentence
transfers
______
sequentialaccess
s1naller
hard-disk
terms
quantity
mtbf
measured
drive-hours
750,000
describes
farm
century
decade
month
week
day
minute
mortality
statistics
u.s
resident
dying
ages
deduce
20-year-olds
convert
expected
lifetime
20-year-old
manufacturer
1-million-hour
conclude
warranty
free-space
tape-resident
assume
imagine
invented
costs
40,000
images
image
black-and-white
picture
resolution
millisecond
answer
questions
affect
invention
scsi-ii
bus
operates
packet
spins
7,200
rpm
estimate
7,000
cylinders
tracks
cylinde1
head-switch
adjacent-cylinder
accurate
workload
scattered
queue
algorithm
8-kilobyte
compare
5,000
numbered
serving
pending
fifo
86,1470,913,1774,948,1509,1022,1750,130
starting
disk-scheduling
fcfs
elementary
physics
states
object
subjected
constant
acceleration
relationship
at2
exercise
accelerates
half
decelerates
perform
adjacent
lillisecond
full-stroke
explain
proportional
root
equation
function
determine
percentage
speedup
saved
accelerating
manufactured
mid-1980s
constant-rate
constantacceleration
seek-time
scb.edule
rotates
tim.e
one-sided
5.25-inch
gigabit
megabits
1,800
feet
capacities
marketable
simulates
modify
optimization
remapping
sparing
slipping
influence
perfonnance
consisting
kilobyte
choice
disadvantages
uniform
distribution
arrival
service
disciplines
fair
starvation
assertion
true
fairness
goal
time-sharing
circumstances
unfair
comprising
treats
assigns
difference
treatment
sharing
properties
selection
recently
estimates
terabyte
incorporates
10gb
5mb
maximum
pure
assumptions
justify
reside
handles
mixed
configuration
levell
deciding
optimize
tradeoffs
rereading
uniformly
fat
inodes
propose
fil1.d
indirection
dos
contiguous
achieve
nonredundant
discussions
patterson
detailed
survey
chen
disk-system
architectures
katz
enhancements
wilkes
teorey
pinkerton
early
comparative
analysis
simulations
crossed
lengths
king
idle
seltzer
jacobson
optimizations
exploit
lumb
worthington
negligible
impact
defect
placement
ruemmler
akyurek
salenl
low-level
zone
advanced
schindler
gregory
douglis
1994l
1995l
greenawalt
golding
randomness
considerable
ousterhout
report
interesting
smalt
newly
opened
sequentially
entirety
seeks
mckusick
berkeley
ffs
obtain
workloads
mcvoy
kleiman
quinlan
richards
discusses
maher
overview
integration
concept
studied
thirty
paper
mattson
mathematical
predicting
alt
accommodation
miller
supercomputing
environment
benjamin
massive
eosdis
project
nasa
network-attached
programmable
gibson
1997b
1997at
riedel
1998t
lee
thekkath
subject
article
psaltis
mok
collection
papers
topic
dating
assembled
sincerbox
asthana
finkelstein
emerging
electron
trapping
toigo
in-depth
description
processing
incidental
browse
edit
interest
enter
role
related
topics
chapters
bring
pieces
paint
basics
nature
constraints
facilities
embodiment
bridges
gap
streams
mechanism
assemble
pipelines
dynamically
principles
design
explore
subsystem
complexities
vary
mouse
varied
methods
kernet
separates
exhibits
conflicting
hand
standardization
interfaces
trend
helps
11s
generations
existing
increasingly
broad
challenge
met
elements
accommodate
encapsulate
details
oddities
device-driver
modules
deviceaccess
operate
great
categories
transmission
cards
modems
human-interface
screen
keyboard
specialized
s11ch
steering
military
fighter
jet
shuttle
aircraft
input
flight
joystick
foot
pedals
sends
motors
rudders
flaps
thrusters
incredible
communicates
sending
signals
cable
air
connection
port
wires
rigidly
defined
protocol
messages
electronics
conveyed
patterns
electrical
voltages
timings
plugs
daisy
chain
architecture
signaling
connects
processor-memory
upper-right
c01mected
plugged
pcie
serial-port
chip
controls
complex
circuit
board
processor
microcode
private
com1ection-scsi
tasks
bad-sector
mapping
prefetching
buffering
accomplish
registers
communication
instructions
word
instruction
triggers
select
proper
register
device-control
executes
memory-mapped
addresses
graphics
memory558
000-00f
dma
020-021
interrupt
040-043
timer
200-20f
game
2f8-2ff
320-32f
378-37f
3d0-3df
3f0-3f7
diskette-drive
3f8-3ff
generates
issuing
ease
offset
disadvantage
fault
unintended
vulnerable
accidental
modification
status
data-in
data-out
send
command
completed
nlode
chooses
full-duplex
half-duplex
checking
speeds
burst
receive
13.2.1
polling
interaction
intricate
handshaking
notion
producer-consumer
busy
recall
clear
working
clears
ready
accept
comm.and
wishes
command-ready
execute
coordinating
repeatedly
notices
sees
succeeded
finished
loop
repeated
step
method
wait
task
quickly
overflow
returning
cpu-instruction
sufficient
poll
logical-and
extract
branch
inefficient
attempted
finds
undone
instances
arrange
notify
initiates
executing
checks
interrupts
resumes
interrupted
interrupt-driven
cycle
13.2.2
works
wire
senses
asserted
signal
line
performs
jumps
handler
determines
return
execution
raises
asserting
catches
dispatches
servicing
summarizes
respond
nlore
interrupthandling
ability
defer
handling
dispatch
raised
multilevel
distinguish
low-priority
degree
urgency
cpus
events
unrecoverable
turned
sequences
maskable
selects
interrupt-handling
routine
vector
handlers
purpose
vectored
search
sources
solve
chaining
element
il1.terrupt
compromise
inefficiency
dispatching
illustrates
theinterruptvector
intel
pentium
nonmaskable
device-generated
maskii1.g
high-priority
preempt
interacts
probes
installs
raise
signify
cornpleted
dividing
accessing
nonexistent
attempting
mode
trigger
occurrences
induce
urgent
self-contained
saves
19-31
32-255
breakpoint
into-detected
bound
exception
invalid
opcode
double
coprocessor
segment
overrun
stack
floating-point
alignment
check
i3.4
event-vector
suspends
page-fault
page-cache
fetch
resume
routines
arguments
build
convey
operand
desired
trap
switches
supervisor
requested
priority
compared
assigned
interrupts-executilcg
behalf
overflows
loses
flow
urgent-it
efficiently
implen
ents
dispatched
userlevel
buffers
calling
scheduler
threaded
suited
priorities
enforce
precedence
background
threads
housekeeping
relationships
thread
lowpriority
favor
higher-priority
multiprocessor
run
concurrently
windows
appendix
summa
supervisor-mode
done
faults
heavily
time-sensitive
13.2.3
direct
wasteful
general-purpose
watch
feed
time-a
termed
avoid
burdening
pio
offloading
special-purpose
initiate
destination
count
high-speed
dma-request
dma-acknowledge
seize
memory-address
iia
-acknowledge
receives
signat
removes
seizes
momentarily
prevented
items
caches
mercwry
undergo
translation
dvma
protected-mode
kernels
prevents
discipline
access-control
violations
erroneous
exports
sufficiently
underlying
context
kernelsoftware
interferes
security
stability
malicious
decreasing
told
tells
--
2..c
li.ip
.2-j
rc-c
.,.,---j
,._
cg
,or
tt_ront
steps
13.2.4
detail
electronics-hardware
systen
review
gave
earlier
reality
poses
implementers
control-bit
protocols
interacting
host-and
rewriting
convenient
cmnputer
disruption
software-engineering
encapsulation
layering
specifically
abstract
differences
identifying
functions-an
drivers
internally
custom-tailored
export
portions
hide
behavior
generic
classes
making
simplifies
developer
benefits
manufacturers
scsi-2
peripherals
vendor
develop
unfortm1ately
device-hardware
standards
ship
drivers-for
ms-dos
dimensions
illustrated
character-stream
sequential
determined
instruct
predictable
irregular
unpredictable
sharable
gigabytes
-write
direction
hidden
conventional
types
resulting
styles
broadly
applicable
conventions
sockets
time-of-day
clock
graphical
display
video
audio
transparently
arbitrary
conunands
ioctl
implernented
invent
descriptor
referring
managed
communicate
13.3.1
character
captures
block-oriented
capture
essen.tial
behaviors
block-storage
insulated
databasemanagement
prefer
systen1
unneeded
likewise
locking
contradictory
worst
conflicts
raw-device
letting
disables
layered
top
block-device
offering
maps
demand-paged
programmers-access
executable
put
line-at-a-time
editing
backspace
preceding
style
keyboards
mice
spontaneously
-that
cam1.ot
necessarily
predicted
printers
boards
naturally
13.3.2
addressing
-seek
systerns
wall
socket
electricity
appliance
analogy
connect
remote
listen
plug
packets
eliminates
essential
networks
facilitating
creation
approaches
interprocess
card
c.6
history
proving
ground
pipes
fifos
message
networking
a.9
13.3.3
clocks
timers
elapsed
timesensitive
generate
repeat
periodic
flushing
dirty
cancel
proceeding
slowly
congestion
chan11els
simulating
wanted
sorted
earliest-time-first
earliest
tince
requester
reloads
ticks
coarse
precision
maintaining
drift
constructed
highfrequency
highresolution
measurements
intervals
13.3.4
blocking
nonblocking
system-call
relates
eligible
returned
actions
asynchronous-they
varying
easier
user-level
displaying
frames
simultaneously
decompressing
writer
overlap
multithreaded
continue
developers
freeing
halt
h1.stead
immediately
communicated
setting
triggering
call-back
available-the
argument
activity
introduces
fotmd
mach
multiple-read
services-scheduling
spooling
reservation
handlil1.g-are
devicedriver
infrastructure
responsible
protectil1.g
errant
13.4.1
begilming
travels
rearrangil1.g
rearranges
efficiency
experienced
device-status
poor
delay-sensitive
functioning
parameters
teclul.iques
13.4.2
cope
mismatch
producer
consumer
modem
mernory
accumulate
arrived
instantaneous
incoming
fills
fill
decouples
consun1.er
relaxing
timing
decoupling
lists
adaptations
disparities
reassembly
receiving
semantics
clarify
meaning
systemcalt
version
calt
subsequent
guarantee
hype
ransport
32,pair
iii
pci
xpress
lnfi
l.i
band
qdr
efigure
sun
enterprise
device-transfer
logarithmic
clean
obtained
clever
13.4.3
cached
running
ilc
resides
distinct
sometinces
illstance
preserve
maill
reread
avoided
deferred
accumulated
strategy
delayilcg
13.4.4
printer
ilcterleaved
prillter
serve
print
solves
intercepting
spooled
finishes
printing
correspondilcg
spool
daemon
in-kernel
remove
unwanted
suspend
serviced
usefully
multiplex
concurrent
deal
explicit
coordination
vms
enabling
deallocate
thenlselves
parameter
declares
permitted
deadlock
13.4.5
minor
glitch
transient
overloaded
permanent
compensate
retry
res
experiences
signifying
success
named
errno
code-one
values-indicating
highly
reported
illegal
self-test
.l
error-log
host-but
13.4.6
closely
purposely
attempt
disrupt
systern
disruptions
camlot
prevent
performing
define
monitor
memory-protection
deny
games
playback
representing
window
13.4.7
components
open-file
character-device
communications
activities
entities
spaces
probe
aligned
boundary
encapsulates
object-oriented
teclucique
system-wide
ple
.,_
user-process
v.
info
write.functions
f..un
ction
extensively
message-passing
converted
manager
procedural
adds
13.4.8
coordinates
extensive
subsystenc
supervises
procedures
monitoring
initialization
upper
directories
file-access
space-allocation
colon
separator
associate
incorporated
ownership
owners
associates
prefixes
resolve
longest
ncatchilcg
prefix
m.ajor
passed
index
device-table
stages
lookup
tables
pass
recompiling
loads
life
suggests
consume
tremendous
previously
correctness
irl
scheduled
eventually
subroutine
allocates
interruptvector
requesting
device-controller
-------tim_e
unblocks
passing
pushed
examplef
push
module
exchanged
occurring
supporting
exchanges
orputmsg
putmsg
delivers
getmsg
ordinary
unstructured
controt
end-like
modules-has
triggered
frame
fult
resorts
dropping
drop
ample
benefit
framework
modular
incremental
ethernet
treating
boundaries
communicating
variants
heavy
demands
unblock
stress
exposes
inefficiencies
durilcg
coping
gracefully
concerns
architect
internjpt-driven
spent
excessive
traffic
context-switch
login
typed
transported
construct
unpacked
session
subdaemon
receiver
echoes
sender
eliminate
daemons
reimplemented
lntercomputer
increased
logins
server
terminal
burden
terminals
high-end
channel
offload
cham1.els
flowing
smoothly
programs
channels
tuned
employ
frequency
smart
minimized
concurrency
dma-knowledgeable
primitives
balance
overload
idleness
complexity
movements
button
clicks
numeric
converts
coordinated
error-handling
data-recovery
-in
observe
progression
experimental
f1exible
developing
reboot
reload
application-level
messaging
threading
demonstrated
reimplement
challenging
debugged
corruption
highest
fixing
months
location
perform.ed
offloaded
interval
sleep
num.erous
symbolic
translate
character-string
methodology
stacked
bidirectionally
costly
consumption
imply
cross
pseudocode
queueing
memorymapped
appropriately
settings
piece
front-end
termii1.al
concentrator
manipulating
pros
cons
multiprogrammed
men10ry
implications
initiation
waste
iterates
busy-waiting
catching
hybrid
sleeping
scenarios
single-user
multitasking
preallocation
combin_ation
polled
insufficient
guaranteeing
targets
complicate
scale
system-bus
assigning
busy-wait
vahalia
leffler
employed
bsd
milenkovic
programming
interprocesscommunication
explored
stevens
brain
documents
sample
minix
tanenbaum
woodhull
custer
hardware-level
memory-mapping
reference
manuals
motorola
hennessy
cache-consistency
sargent
shoemaker
programmer
guide
ibm
march
ieee
raga
discussion
limiting
gained
authorization
segments
resources
imposed
enforcing
authentication
unauthorized
destruction
alteration
introduction
inconsistency
controlling
enforcement
confidence
preserved
assurance
broader
domains
matrix
examine
capability
language-based
pervasive
grown
originally
conceived
adjunct
multiprogramming
untrustworthy
evolved
obvious
mischievous
intentional
violation
restriction
stated
requirement
absolute
latent
subsystems
contamination
healthy
malfunctioning
unprotected
resource
defend
misuse
incompetent
protection-oriented
authorized
usage
governing
formulated
solely
designer
designing
guiding
time-tested
dictates
privileges
passkey
public
guards
minimal
stolen
misused
compromised
privilege
n1inimum
gain
fine-grained
disable
beneficial
audit
trails
trail
prograrnmer
law-enforcement
officer
trace
entails
creating
operator
role-based
rbac
facility
restrictions
disabling
sections
10.6.2
secure
core
variant
historically
mind
irtcomplete
objects
semaphores
unique
differentiates
well-defined
meaningful
rewound
closed
reso1jrces
reqllires
conunonly
referred
need-to-know
faulty
invokes
chapter14
formal
compiler
compile
subset
listing
compiled
conversely
accounting
minimize
risks
14.3.1
domain
facilitate
defines
invoked
rights
ordered
object-name
rights-set
right
disjoint
implying
association
establishing
dynamic
complicated
static
adhere
stems
phases
phase
vice
versa
violated
reflects
realized
identity
-generally
logs
corresponds
dual-mode
monitor-user
nonprivileged
predefined
elaborate
examining
influential
systems-unix
multics
-to
14.3.2
changing
identification
temporarily
accomplished
tbough
setuid
userid
owned
temporary
ends
ids
population
desirable
causing
powerful
crackers
obscure
restrictive
tops-20
care
oversight
attacked
people
break
attackers
breached
14.3.3
mul
tics
hierarchically
ring
rings
dj
n1ode
segmented
segm.ent
concerned
current-ring-number
cmmot
restricted
crosses
mmmer
bracket
integers
gates
segncent
bl,b2
directed
designated
carefully
decreases
weighed
university
students
grades
classwork
crunching
utmost
abstractly
rows
represent
columns
column
explicitly
omit
i,j
objects-three
access-matrix
implementing
ensuring
semantic
outlined
row
entries
involve
included
last
decided
creates
dictated
creator
cohum1
strict
individually
d2
denoted
asterisk
appended
colurrm
propagation
lc,j
removal
delete
executil1.g
domai11
tools
preventing
disclosure
held
migrate
unsolvable
bibliographical
notes
sparse
datastructure
matrices
14.5.1
global
triples
searched
triple
condition
suffers
drawbacks
groupings
14.5.2
discarded
nonempty
default
r1c
rjc
denied
14.5.3
associating
ltst
tbose
represented
maintained
indirectly
capability-based
relies
foreseen
inherently
fom1dation
inherent
interpreted
higher-level
distinguished
denote
tags
firmware
tagged
booleans
characters
uninitialized
developed
briefly
14.5.4
lock-key
matches
locks
keys
14.5.5
choosing
correspond
access-rights
localized
determining
checked
requiring
usefut
localizing
revocation
freely
revoked
references
demonstrate
swiftly
cal
permission
recorded
specification
file-table
carmot
ensured
or1
com.paring
group
possibly
advances
microsystems
adding
revolves
opening
processes,limiting
roles
passwords
superusers
user1
notice
exercises
revoke
delayed
selective
permanently
access-list
howeve1
reacquisition
reacquire
back-pointers
pointing
follow
adopted
turn
searching
deleting
reused
pattern
inspected
owns
set-key
master
exercised
replaces
invalidating
removing
matching
key-based
inserting
grounds
theories
14.8.1
hydra
interpretation
user-defined
system-defined
constitute
procedurally
identified
userdefined
krtown
auxiliary
discrin
lination
instance-by-instance
process-by-process
basis
fnrwk
j1o
certified
act
trustworthy
regarded
universally
trustworthiness
amplification
representation
so-called
indirect
amplified
body
restored
originat
unamplified
adjustment
programmer-defined
declaration
readily
reinstated
user-protection
circumvented
generat
trust
restricting
amplifications
procedure-call
mutually
suspicious
sort
compile1
malfunction
retain
authority
som.e
dealing
kernel-defined
subsystenl
enforceable
afforded
programmers
acquainting
rnanual
translator
interfaced
14.8.2
cambridge
cap
superficially
closer
examination
acquires
seal
unseal
verification
unverified
belong
consequence
insecure
breakdown
responsibility
noted
realize
economies
formulating
commensurate
study
manual
learn
acts
agent
inspect
validate
comprehensive
validation
satisfying
environments
operational
refined
drawn
ideas
originated
languages
functional
newest
matter
tool
designe1
guarded
tampering
14.9.1
compiler-based
declarative
statement
integrated
language
typing
declared
sequence
independently
notation
linguistic
programming-language
impose
usin.g
puts
disposal
specifications
principal
distinction
rely
certify
treat
rests
merits
opposed
generation
protectionchecking
compiler-supported
ultimately
softwaresupported
lesser
tagged-capability
microprogram
hardware-supported
immune
adequate
enforcem.ent
disturbance
greatest
verified
tailor
high-level
capability-creating
primitive
rendering
nonprocedural
preferable
distributing
contribute
led
constructs
customer
granted
reader
grant
enlarge
incorporation
infancy
stringent
suitable
notations
express
recognized
14.9.2
java
machine-or
jvm-has
jvm
class
ofj
ava
loading
untrusted
distrusting
paramount
equally
granularity
intuitively
lacks
permissions
url
digital
signatures
15.4.1.3
configurable
home
philosophy
permit
corucection
resulted
assert
safety
ongoing
invocations
caller
dopri
vileged
accesscontroller
entered
annotated
subsequently
checkpermissions
inspection
examines
oldest
annotation
silently
disallowed
throws
accesscontrolexception
exhausts
finding
disallow
gui
applet
invocation
loader
sessions
lucent
proxy
.lucent
retrieving
urls
succeed
encounters
encountering
uri
addr
.lucent.com
doprivileged
proxy.lucent.com
checkpermission
annotations
manipulations
manipulate
forged
compliance
enforced
load-time
run-time
camlot
f01mdation
subclasses
package
mechanisnc
imposing
real
representative
finer-grained
arbitration
enforces
played
p.m
a.m
faculty
members
center
staff
suggest
tree
descendants
ancestors
descendant
x,y
xis
z,y
cross-ring
ring-protection
higher-numbered
strengths
weaknesses
enjoy
aid
stack-inspection
manipulation
burroughs
mcp
overwritten
lampson
popek
saltzer
schroeder
excellent
surveys
harrison
prove
mathematically
iliffe
jodeit
codewords
rice
dennis
horn
wulf
needham
walker
organick
redell
fabry
cohen
jefferson
ekanadham
bernstein
advocated
levin
confinement
lipner
suggested
morris
kieburtz
silberschatz
mcgraw
andrews
dynamic-resource-management
jones
liskov
exokernel
ganger
kaashoek
strictly
ineffective
enabler
-cryptography
attacks
threats
fundamentals
encryption
hashing
cryptography
countermeasures
payroll
financial
inviting
thieves
pertaining
corporate
unscrupulous
competitors
accident
fraud
impair
corporation
conform
intended
nonetheless
breaches
rare
occurrence
norm
categorized
accidents
intruder
cracker
breach
discovery
vulnerability
confidentiality
1mauthorized
theft
capturing
secret
credit-card
money
liability
innocent
party
wreak
havoc
bragging
financially
web-site
defacement
intrusion
install
denial
legitimate
internet
attack
bug
rapid
15.3.3
attempts
participant
pretends
person
masquerading
escalate
privileges-obtain
entitled
replay
captured
exchange
fraudulent
comprises
attackfor
attacker
man-in-the-middle
preceded
intercepted
abuse
perpetrator
deter
intruders
denial-ofservice
cmmtermeasures
measures
physically
secured
armed
surreptitious
rooms
workstations
tricked
social-engineering
legitimate-looking
misleads
entering
confidential
bribe
gather
trash
phone
books
personnel
purposeful
runaway
denial-of-service
query
reveal
launching
endless
leased
dial-up
breaking
interruption
diminishing
inaintained
circumvention
adage
chal.l
weakest
link
addressed
deployed
incidents
remainder
ranging
guarding
viruses
intrusions
exploration
accomplishing
nonprogram
threat
lot
blocked
descriptive
15.2.1
horse
text-editor
edited
certairl
keywords
text
editor
misuses
paths
exacerbate
trojanhorse
slipped
friend
enters
commanct
emulates
control-alt-delete
conlbination
trojan
spyware
accompanies
freeware
shareware
download
ads
visited
central
installation
innocuous-seeming
recipient
deliver
spam
discovers
discovered
estimated
delivered
crime
countries
micro
macro
installed
mistakes
runs
error-a
inconvenient
inadequate
weakening
15.2.2
door
capable
movie
war
inight
password
circumvent
arrested
embezzling
banks
rounding
occasional
half-cent
credited
accounts
credititrg
transactions
bank
nefarious
doors
pose
analyze
consist
15.2.3
logic
bomb
incident
circltmstances
scenario
spawned
launched
15.2.4
buffer-overflow
target
escalation
exploits
neglected
bounds
expecting
trial
command-line
buffer-for
daemon-wl.til
overwrite
execute-for
spawn
shell
web-page
expects
reach
buffer-reading
fig1-1re
buffer_size
line-argv
null
terminator
strcpy
begin
argv
stdio.h
int
argc
char
buffer,argv
strncpy
replacing
sizeof
.unfortunately
vulnerabilities
bottom
bufferoverflow
ter
attacking
execvp
bin
sh
assembly
unnecessary
reducing
fragment
heart
debugger
hypothetical
no-op
no-operation
possibility
attackedthe
15.2-ran
exploitation
reveals
skill
recognize
exploitable
launch
rudimentary
skills
exploita
pernicious
travel
firewalls
disallows
recent
versions
sparc
overflowed
halted
amd
x86
sp2
nonexecutable
prevalent
diminish
15.2.5
virus
embedded
self-replicating
infect
modifying
destroying
malfunctions
penetration
multiuser
progran
borne
comrnon
viral
file-sharing
infected
microsoft
office
macros
visual
suite
powerpoint
excel
unconstrained
sub
autoopen
dim
ofs
createobject
scripting.filesystemobject
command.com
,vbhide
inserts
dropper
installing
things
literally
infects
noticed
parasitic
booted
watches
boatable
low-levellanguage
spreadsheet
modifies
boot-sector
polymorphic
antivirus
signature
cilii
encrypted
decryption
decrypts
stealth
tricky
tunneling
anti
scanner
interrupt-handler
multipartite
nmltiple
armored
coded
ncake
researchers
unravel
compressed
disinfection
droppers
infestation
attributes
unviewable
vast
widespread
exploited
infecting
iis
explorer
browser
visiting
back-door
unlimited
desktop
disruptive
debates
community
jth-yhcn
monoculture
supposedly
products
debate
comcections
inisused
is-the
enabled
allows-the
strive
ftp
telnet
disabled
worms
scamcing
netvvorks
harder
tracing
secrets
comnmnications
15.3.1
ravage
spawns
potent
reproduce
shut
system-administrator
dollars
workday
november
robert
tappan
first-year
cornell
graduate
student
unleashed
corm.ected
targeting
vax
distances
consumed
bringing
reproduction
propagate
chose
in.itial
infection
flaws
simplify
local-area
ll.c
grappling
hook
consisted
uploaded
hooked
proceeded
utility
rsh
host-login
paired
finger
sendmail
shells
began
anew
telephone
user-name
hostname
plan
quotation
responds
queries
queried
536-byte
crafted
resided
routed
invading
routes
mail
debugging
permits
testers
ncail
arsenal
debug
-instead
testing-issued
cornmands
mailed
grappling-hook
systematically
account-user-name
combinations
comparisons
dictionary
favorite
stage
three-stage
password-cracking
wontt
exited
seventh
sightings
remained
undetected
confound
efforts
baiting
fake
wholesale
assisted
helped
advance
expertise
cooperative
evening
halting
circulated
patches
unleash
characterized
harmless
prank
awry
criminal
offense
scope
unintentional
cover
repel
damaging
ran
author
trojan-horse
observations
sound
inferring
motive
speculation
legal
outcome
federal
court
convicted
handed
probation
exceeded
experts
evaluate
august
sobig
w32.sobig.f
released
persons
unknown
fastest-spreading
date
peak
mfecting
seventeen
clogged
inboxes
slowed
sobig.f
pornography
newsgroup
credit
disguised
photo
smtp
engine
details,
approved
attachment
click
payload
winppr32.exe
registry
downloaded
malevolent
untold
15.3.2
scanning
involving
tcp
lip
answering
operath
encoded
nwre
answered
horses
subsets
nmap
http
versatile
open-source
auditing
pointed
n.1n..tling
defenses
defending
nessus
reports
exploiting
knowledgeable
script
kiddie
scans
15.6.3
relay
zombies
prosecute
securing
inconsequential
valuable
gaming
stealing
disrupting
penetrated
pop
fundamental
partially
eat
stopped
ddos
comncon
blackmail
slowdown
surge
advertising
campaign
firewall
induced
deploying
science
notorious
subprocesses
spawning
nt
stand
gamut
broadest
isolated
reliably
ali
networked
infer
senders
receivers
arrive
matters
trouble
rogue
falsified
routers
supposed
infeasible
.,-ro.rnron
constrain
selectively
possessing
key-the
encode
decode
computationally
derive
constraining
subtleties
pertain
15.4.1
ancient
securely
parties
certificate
15.4.1.4
ciphertexts
thatis
generating
computable
eachlc
ciphertext
possesses
----1
rnessage
i5.7
decrypt
plaintexts
symmetric
asymmetric
15.4.1.1
encrypt
secrecy
extent
united
civilian
national
institute
stantechxwlogy
nist
des
64-bit
56-bit
transformations
substitution
permutation
s-boxes
government
chunks
chunk
cipher
encrypting
anwunt
exclusive-ored
xored
exhaustively
giving
encryptions
plaintext
uslilg
keys-for
lc2
aes
128-bit
rounds
formed
compact
bear
mentioning
computational
crus
pseudo-random-bit
generator
fed
keystream
infinite
rc4
steams
wep
lan
browsers
breakable
con1.puter
15.4.1.2
rsa
inventors
rivest
shamir
adleman
block-cipher
public-key
asymmetrical
elliptical
curves
gaining
cryptographic
strength
disseminated
ice
messlge
isl
encryption_...
k5.91
gl
product
randomly
prime
andq
are512bitseach
theencryptionalgorithmis
icc
satisfies
leekd
ckd
p-1
yielding
kekrt
decoded
begins
publication
bidirectional
publish
handing
jealously
seemingly
inaking
truth
generalpurpose
amounts
complementary
constraint
authenticators
sand
false
verifying
possess
authenticator
varieties
understanding
hash
fixed-sized
n-bit
collision
m-that
message-digest
outputs
160-bit
digests
recompute
digest
encrypts
derived
mac
one-way
cam10t
resistance
assured
produced
digital-signature
lcv
vis
lc5
lcs
essage
computations
notable
h.sa
authenticate
company
patch
sign
supplies
proof
entity
nonrepudiation
filling
signing
contracts
assures
battle
cryptographers
inventing
ciphers
cryptanalysts
delivery
cut-or-band
-say
document
conversation
key-management
privately
happily
authentication-what
certificates
digitally
signed
__
kbad
-.u
...
.,......_read
certifies
certifier
i.j.l.cluded
consumers
authorities
vouch
x.509
parsed
15.4.3
15.4.2
acting
client
peer
hands
network-protocol
transport-layer
network-layer
data-link
transmitted
iso
diagram
ssl
transport
networklayer
insertion
ipsec
endpoints
definitive
protections
hides
contaii1.ed
header
higher-layer
protocol-for
industry
forwarded
transmissions
transports
corrumjj1icate
securely-that
completeness
netscape
tls
simplified
dance
establish
-cey
two-all
avoiding
forgotten
initiated
assumed
cert
certification
attrs
dns
validity
durirtg
theca-that
kca
presumed
shipped
28-byte
cert5
verifies
tests
satisfied
proved
46-byte
cpms
pms
recovers
possession
cmnpute
48-byte
collision-resistant
dependence
fresh
value-that
ypt
rypt
recipients
lcd
identityfor
name-of
vpns
competitor
point-to-point
traffic-say
offices
employee
authenticating
canle
authentic
identifier
attribute
retina
15.5.1
comm.on
asked
user-supplied
assumes
absence
nmst
theoretically
classic
trade-off
convenience
bypassed
15.5.2
guessed
sniffed
illegally
guess
cats
spouses
brute
enumeration-or
punctuation
-until
four-character
guessing
hit
enumeration
uppercase
lowercase
shoulder
logging
iil
watching
off-system
keystroke
exposure
severe
hard-to-remember
reuse
forbids
questioned
break-in
account-sharing
friends
-possibly
system-generated
user-selected
car
cracking
accepting
occasionally
forcing
foolproof
toggle
extren
now-invalid
15.5.3
keeping
necessity
difficult-the
hope
impossible-to
invert
cam1ot
functionf
tested
rigorously
flaw
it-encrypting
cracked
clusters
well-known
readable
salt
words
remembered
phrase
thrown
mother
katherine
yield
mmn.isk
crack
15.5.4
one-time
sniffing
surfing
challenged
applies
replies
algorithmic
seed
alphanumeric
becallse
authenticated
ensue
improper
clue
securid
calculators
shaped
key-chain
dangle
keypad
pin
jn
two-factor
single-factor
single-use
erased
calculator
book
calculations
15.5.5
biometrics
biometric
palm
hand-readers
access-for
readers
hand-reader
pads
width
fingerprint
ridge
adjust
pad
profiles
differentiate
transit
spoofing
strong
hijacked
myriad
education
bug-free
professionals
subscribe
theory
defense
house
alarm
15.6.1
outsideaccessible
permissible
road
reviewed
pertinent
15.6.2
assessment
assessments
social
engineering
rlsl
endeavors
assets
team
odds
suffering
.,
--in
scanned
concentrate
test
unhappy
easy-to-guess
unexpectedly
long-running
dangerous
unexpected
points-a
considers
far-reaching
top-secret
building
topsecret
rating
extreme
precautions
connectors
locked
computer-an
multifactor
computer-security
mission-critical
indispensable
companies
individuals
club
interconnected
listening
testing
ncisconfigured
scanners
anomaly
harm
advocate
stating
obscurity
intimately
linked
strives
responses
encompasses
axes
inputs
intrusive
user-shell
headers
correlating
alerting
activity-for
killing
engaged
fonn
divert
degrees
freedom
idp
constitutes
turns
idss
idps
settle
ambitious
signature-based
systenl
virus-detection
binaries
lmown
anomalous
presumption
deviates
indicating
sides
coin
characterize
non
codified
recognizable
contemplated
evade
vendors
manually
superior
benchmark
accurately
benchmarked
benchinarked
cleanly
behaviorf
alarms
orf
worse
missed
marginally
security-relevant
million
worthy
investigation
optimistically
ten
recordsf
roughly
reflecting
recor
mtrus10n
interpreting
1-p
raising
maximize
probabilities
focusil
moment
aii
ofthe
false-alarm
true-alarm
ail
falsealarm
yields
ilwestigates
alarms-called
christmas
-is
exceedingly
teach
admilcistrator
ignore
usability
achieving
anomaly-detection
difficulties
adequately
benchmarking
contil
ues
anomalydetection
evolving
combine
15.6.4
catalogs
pattern-match
families
decompress
anomalies
teducique
emulated
tripwire
purdue
premise
insert
alert
modifications
configurationfile
tw.config
enumerates
monitored
deletions
mask
thatthe
itselt
hashes
computes
sign.ature
recomputes
tw.conf
compares
compl.j-ted
tamper-proof
write-protected
tightly
unforhm.ately
limitation
files-for
files-are
escape
detectcertain
inconsistencies
shrinking
and.http
analyzes
sandbox
unmonitored
shield
menlory
inbound
outbound
prevention
purchasing
unopened
pirated
safest
disgruntled
employees
native
rtf
attachments
love
traveling
pretended
propagated
clogging
negate
defensive
safeguard
reformatting
filename
messagedigest
warning
high-overhead
virus-scanned
15.6.5
executions
logged
misbehavior
kit
tum
break-ins
cliff
stoll
exam5ning
spotted
unh
usted
router
monitors
coru1.ections
semitrusted
semisecure
dmz
optionally
commurucations
r---------i
attack-proof
com1ections
denialof
meeting
criterion
personal
prex-y
understands
speak
com1ection
forwards
analyzing
xml
malformed
sit
fifty
department
evaluation
criteria
classifications
lowest-level
classification
division
discretionary
accountability
c1-class
cooperating
sensitivity
tcb
groups
mediate
c2-class
individual-level
adrninistrator
speciat
division-b
mandatory-protection
classc2
label
bl-class
mandatory
human-readable
user-namepassword
clearance
authorizations
hierarchicat
labels
secret-level
b2-class
covert
b3-class
notifies
terminates
highest-level
architecturally
class-al
functionally
granting
develops
agency
supplied
tempest
eavesdropping
tempest-certified
shielded
electromagnetic
escaping
shielding
equipment
housed
camwt
displayed
wilcdows
member
backing
shutting
compute1
interactively
token
use1
custom
packages
retinal
eye
client-server
subjects
bl1ilt-in
logoff
strange
write-access
outbreak
posix
foo.bar
avi
-all
cs-read-write
cliff-no
accessallowed
accessdenied
readdata
writedata,appenddata
execute,readextendedattribute
writeextendedattribute
readattributes
wri
teattributes
classifies
container
noncontainer
inherits
parent
inherit
subdirectories
desires
prohibit
printilig
tiine
formulate
environment-people
buildings
businesses
threats-within
agaitlst
masses
self-perpetuating
asymnletric
activation
forgery
intrusiondetection
argue
judicial
prone
man-in-themiddle
cops
alerts
hazards
eliminated
physicat
watchdog
grants
denies
watchdogs
lce
intrusion-detection
user-provided
hsiao
1979l
landwehr
deru
1ing
pfleeger
russell
gangemi
lobel
kurose
ross
concernin
rushby
silverman
microcomputer
schell
randell
thompson
morshedian
fight
pirates
lamport
seely
lehmann
reid
trusting
offered
grampp
wood
kochan
farrow
1986b
1986a
filipski
hanko
hecht
kramer
garfinkel
bershad
security-scanning
farmer
ftp.uu.net
spafford
technical
acm
june
bellovin
cheswick
protecting
insider
topology
kent
zapata
asokan
perrig
routing
savage
trace-back
perlman
proposes
diagnose
ludwig
up-to-date
httpd
dangers
diffie
hellman
lempel
simmons
denning
demting
gifford
ahituv
schneier
stallings
akl
davies
dod
orange
qualify
workstation
inodel
coverage
ietf
comments
rfc
illustrating
effectiveness
axelsson
kim
system-call-based
forrest
processors
wide-area
handheld
real-time
file-service
dispersed
centralized
repository
speeding
synchronization
i11
loosely
coupled
view
respective
microprocessors
minicomputers
cornputer
nodes
16.1.1
16.1.2
subcomputations
distribute
lightly
comnlon
16.1.3
remammg
autonomous
sncall
crucial
tenninal
integrate
16.1.4
opportunity
single-computer
expanded
encompass
rpcs
geographically
distant
collaborate
transferring
exchanging
longdistance
wrote
collaborating
industry-wide
dovmslzing
bigger
bang
buck
expanding
maintenance
network-oriented
utilize
16.2.1
multiplicity
16.2.1.1
p1.npose
lets
westminster
college
cs.yale.edu
yale
formation
asks
16.2.1.2
enviromnent
cs.uvm.edu
vermont
subdirectory
vario-us
ptp
ftp
jtp
nanle
inappropriate
file-protection
corulect
file-related
get-transfer
put-transfer
dir-list
-change
paradigms
shift
tehlets
duration
16.2.2
migration
16.2.2.1
modest
thought
andrew
similarity
nfs
smb
netbeui
c.6.1
mere
translations
character-code
representations
16.2.2.2
itiated
cmmnand
rpc
udp
3.6.2
predefilced
operatil
ilwocation
duril
16.2.2.3
submitted
turnaround
preference
inversion
microprocessor
migrated
homogeneous
distributedcomputing
applets
seamless
easy-to-use
facility-one
basically
16.3.1
emerged
1970s
substitute
complement
peripheral
lans
geographical
links
cou.rjerparts
high-quality
cables
attain
exclusively
prohibitively
conunon
twisted-pair
fiberoptic
cabling
configurations
multiaccess
star
megabit
appletalk
infrared
bluetooth
radio
higher-quality
egabits
optical-fiber-based
fddi
token-based
laptops
pdas
gateways
spectrum
wifi
constructing
transmitting
adapter
join
laptop
802.11g
802.11n
influenced
interference
wired
communicatilcg
homes
cafes
16.3.2
late
1960s
academic
conveniently
wan
arpanet
begun
four-site
worldwide
unreliable
microwave
satellite
defilcing
netwot
operatil1.g
regional
nsfnet
il1
northeast
interlinked
16.5.2
telephone-system
collected
multiple-t1
net
commmlication
charges
wans
analog
news
predetermined
nearby
destinations
1,200
superseded
ppp
coru1ections
linking
topologies
edge
node
impractical
ntially
some-but
all-pairs
rerouted
unconnected
tree-structured
treestructured
single-site
disconnected
workings
contention
lise
16.5.1
beca
homer
marge
bart
lisa
humans
name-to-address
binding
compilation
possibilities
reachable
updati.n.g
retrieve
execution-time
rnarr-,,or
untenable
domain-name
multipart
frorn
separating
bob.cs.brown.edu
bob
depattment
brown
top-level
organizations
resolves
reverse
host-id
brown.edu
nance
cs.brown.edu
128.148.31.100
inform
refreshed
safeguards
happen
crashed
resolved
lmreachable
back-up
registered
sri-nic
name-server
lookups
subdomains
host-name
api
inetaddress
getbyname
belonging
gethostaddress
destined
trivial
16.5.4
dnslookup
i.e
www.wiley.com
void
args
hostaddress
inetaddress.getbyname
system.out.println
hostaddress.gethostaddress
catch
unknownhostexception
uhe
err
println
.-i
shortest
remote-login
sited
schem.es
adapt
remedy
ncessages
mix
company-wide
gateway
cmmections
decides
determination
16.5.3
fixed-length
incplemented
connectionless
reached
communicators
uuc
con1municate
tl1is
terminated
hang
correspondents
information-such
errorcorrection
post-office
mailing
reassembled
substantial
set-up
shipping
incur
16.5.5
cmmect
transmit
scrambled
notified
retransmit
provisions
degraded
collisions
-uvith
thinking
congested
continuously
circulates
arrives
round
retransmits
declaring
election
token-passing
apollo
lengthen
error-prone
agree
partitioning
international
handlingfiames
connecti01cs
outgoing
decoding
clients
process-to-process
presentation
resolving
conversions
duplex-full
duplex
echoing
deals
transfe1
schemas
protocols-showing
end-user
transfer-syntax
negotiation
data-representation
dialog
network-independent
message-interchange
end-to
clearing
framing
transparency
networkcinterface
termination
-layer
f-------1
session-layer
_____j
trailer
il1.clude
message-header
data-network
data-lil1.k
analyzed
stripped
progresses
fu1.ally
formalizes
combilles
models
illcluding
datagram
connection-oriented
datagrams
formally
laye1
clear-text
tcp-udp
stacks
multistep
handshake
unencrypted
suffer
reconfigure
16.7.1
j-am-up
m.essage
are-you-up
reply
conclusion
draw
positively
positive
time-out
sih1ations
16.7.2
reconfiguration
believes
serves
coordinator
undesirable
coordinators
mutual
exclusion
16.7.3
wlcen
notification
repeating
routing-table
mcdelivered
16.7.4
tolerance
faced
tolerant
fail-stop
stops
visible
storage-device
decays
tolerated
degradation
grinds
cmnmunication
inost
stateless
restarted
compromising
computation-centric
data-centric
failure-monitoring
veritas
cluster
clustering
18.4.1
clustered
anode
noncommitted
ideally
arranging
mobility
facilitates
bringiicg
cmu
athena
mit
bounded
saturated
saturation
scalability
scalable
reacts
nonscalable
degrades
moderately
perfect
ever-growing
clog
interconnecting
commonplace
withstand
paralyzed
behave
shifting
saturate
fault-tolerance
demonstrating
large-scale
magic
guidelines
designs
alleviate
centralization
fault-tolerant
asyrrunetry
constituting
ideal
autonomy
practically
comply
incorporating
diskless
violates
symmetry
aspire
served
single-process
necessitates
frequent
lightweight
preemptive
nonpreemptive
lightweight-process
name-resolution
tcf
strings
explained
describing
proportion
adrninistrators
assign
host-ids
re-sent
arp
ip-mac
hardwired
announced
upper-level
compose
802.3layer
1-mtil
0-1500
0-46
pt.e
n1bh
s.tartfc1ft
ccll
data-link-layer
communication-network
massage
reconfigured
rectified
heterogeneous
responsibilities
graphic
torn
complications
address-resolution
www.cs.yale.edu
www.apple.com
www.westminstercollege.edu
www.ietf.org
doubling
2000a
overviews
williams
covers
computer-architecture
viewpoint
comer
coulouris
van
steen
i-iarchol-balter
downey
vee
i-isu
i-iarish
owens
load-balancing
jul
han
ghosh
milojicic
relating
sirer
construction
classical
dfs
dfss
dfs-the
afs
stateful
transarc
lower-level
cross-machine
terminology
concponent
retrieved
distinctive
dispersion
invisible
disk-access
cpu-processing
attributed
dimension
comparable
distinguishing
constituent
cmnpm1.c
nances
manipulates
textual
numerical
hiding
leads
replicas
existence
17.2.1
notions
hint

relate
system-level
identifiers
location-independent
stronger
location-transparent
irrelevant
implies
operating-system-initiated
administrative
divorce
exhibited
ratber
containers
locationtransparent
cumbersome
statically
promotes
mobilized
storagedevices
intercomputer
correspondence
restrict
um1.ecessarily
conflict
charge
contradicts
decentralization
rom
retrieves
upgrade
data-and
applications-are
appearing
17.2.2
ibis
uniquely
local-name
unix-like
1-mits
popularized
onc
appearance
coherent
mmmted
advent
mounts
file-structure
spans
machine-specific
difficult-to-maintain
rem.ote
m1structured
accreditation
17.2.3
provision
naine
manageable
aggregate
component-unit
single-file
aggregation
name-to-location
recursively
enhance
replicating
teclllcique
overcome
obstacle
belongs
invalidated
inevitable
trees
low-levet
invariant
uniqueness
timestamp
aggregating
locationindependent
exemplified
nanling
paradigm
remote-service
analogous
rationale
17.3.1
brought
least-recently-used
relevant
17.3.4
sincilarly
notwithstanding
diskread-ahead
11.6.2
driven
miss
disassembled
reception
blockcaching
1mb
17.3.2
stored-on
main-memory
moreove1
outweigh
nl.echanism
remote-access
hybrids
augmented
server-side
sprite
emphasized
ofnfs
clientside
disk-caching
serve1
flushed
reboots
cachefs
17.3.3
cache-update
write-through
delayed-write
unwritten
flush
30-second
issued
meta
file-attribute
synchronously
directory-structure
vital
write-on-close
closing
apparent
client-initiated
contacts
crux
server-initiated
react
10.5.3
play
17.3.5
trades
tradeoff
capitalizing
locality
attractive
contacted
enhanced
big
optimized
drawback
exhibit
infrequent
confer
memories
small-memory-capacity
masse
intermachine
fetches
in-core
ru1.til
garbage-collection
reclaim
terminate
com1.ection
totally
saving
evident
graceful
restoring
aborted
phenomenon
silcce
reincarnated
unnoticeable
retransmitting
i,_lformation
imposes
translating
idempotent
consecutively
withilc
destructive
employs
camcot
descriptors
implicit
offsets
mailctain
multimachine
replica
failure-independent
nfsv4
ourcov,era.geofnfs
.far
0p1y
orv3
mostrecentnps
fundanrentaljy
vious
versimi.s
jhe
ch9nge
stqteful,meaping
tha
tthesetv
the.state
j1lote
0pt
ned
untij
itis
th.t1s
thenfs
c1o
ersions
thich
.proyide
.np
furthen
ore
preytous
cersions
parate
lounting
fil
systews
lockii1g
phlgle
prqtocol
patticular
1nrnmt
elimin
1.ted
fitewalls
nj.ount
notorimis
nps
implem,entations
.additionally
enhan
edthe
of.dients
prov
tne
performapc
disttil
a.s
plients
reso
a9cesses
loc
che
rgther
thanh
lvingto
gpjhroughthe
ver
diel
tsjo
req
estfile
jocks
rvers
ll
.if
senr
grqrct
loci
,tmtil
lea.st
expires
clier
ar,e
als
stiltg
traditiora11y1
.provide
advisory
jile
operatirg
mandat
rylockil1g
allov
towm
wellwithnon-unixsyste1fts
v4t1qw.p.rovides
vvell
lockinga11d
mec
anisms
legahon
whe
eby
delegates
lockand
.the
thatrequested
tnel
ckcrhat
delegated
.current
deleg21ted
a1i.d
filt
confentsuntifthe
del
egated
reli11quishesth
andde
egation
whereas.preyiousversionb
npsarebasedon
udj
ptqtocol
.tcp,whioh
itto
betteraclj
lstto
thel
etwork
peleg2lting
cliel
cts
foado11the
s.eryet
and.i
proves.cache.coherency
affected
location-opaque
locus
precisely
sen1antics
incportance
sacrificed
preserving
indefinite
sacrificing
sake
sacrifices
primary-copy
primary-replica-identifier
local-replica-identifier
identical
replication-control
whole-file
nonlocal
nonprimary
atomic
serialized
invalidation
stale
carnegie
mellon
information-sharing
coalition
dce
osf
lab
openafs
license
canceled
cross-platform
accepted
arguably
feature-rich
nonexperimental
client-side
kerberos
switchover
formidable
span
17.6.1
distinguishes
ported
descends
virtue
privacy
finer
com1.ected
decomposition
primarily
optimal
cross-cluster
heuristic
experience
file-open
initial
accessil
secure-transmission
connectionbased
unlxbits
ncay
jim
administer
heterogeneity
diverse
facilitated
17.6.2
unusually
quota
conceptually
glued
m01mt
fid
path-name
equal-length
vnode
uniquifier
fids
invalidate
querying
forwarding
volume-movement
system-executable
seldom-updated
volume-location
contammg
17.6.3
architectural
lethod
ramifications
intercepts
client-level
venus
callback
cache-validation
lose
callbacks
readin.g
regains
occasions
exceptions
rebooted
suspect
unilaterally
notifying
revoking
sync
syncbolic
pathname
fetched
traversal
intermediate
re-fetching
17.6.4
forward
carries
interrogation
comcection
establishes
establishment
placeholders
path-name-to-inode
namei
ufs
lru
stat
file-status-returning
req1.1ests
non-preemptible
priori
disastrous
paralyzing
ships
preferences
vlhich
multiclient
teclmiques
davcev
burkhard
environncent
brereton
purdin
wah
svobodova
callaghan
sandberg
howard
satyanarayanan
brownbridge
nelson
mobile
kistler
sobti
cluster-based
anderson
dabek
kubiatowicz
synchronize
atomicity
transaction
isolation
deadlocks
concurrency-control
avoidance
resource-allocation
aft-er
happened-before
relation
18.1.1
law
causality
happenedbefore
bare
a
b
irreflexive
causally
space-time
horizontal
vertical
dots
wavy
q3
sil
happened
son1.e
18.1.2
perfectly
synchronized
defil
converse
lci
incremented
successive
orderil
lc1
particulm
tlcenit
timestamp-ordering
timestamps
ties
tirnestamps
18.4.2
one-to-one
18.2.1
exiting
accordance
fair-such
first-come
firstserved
scheduling-no
critical-section
reques
electing
elected
18.2.2
event-ordering
incmning
deferring
defers
n-1
participation
consequences
joins
participating
mutual-exclusion
gro11p
circulating
interested
collapses
rejoin
pause
intend
18.2.3
providilcg
circulate
entitles
holder
neighbor
substituted
unidirectional
reconstructing
connecting
preserves
subtransactions
committed
18.3.1
two-phase
commit
abort
execution-that
-then
2pc
oft
pre-specified
verdict
forced
fate
unconditionally
tat
promise
tor
unanimity
acknowledge
18.3.2
postponed
18.3.2.1
alternatives
redo
undo
consult
query-status
corrnni
tted
s1c
resend
inforn1.ation
responding
18.3.2.2
tin
made-or
is-until
doubt
downtime
18.3.2.3
participants
18.4.1.1
nonreplicated
unlock
qat
incompatible
n1.anager
initiator
ncessage
deadlock-handling
18.4.1.2
single-coordinator
site-say
lmlock
lockmanager
administers
complicates
18.4.1.3
majority
inn
one-half
detern1.ines
decentralized
acquire
18.4.1.4
biased
shares
18.4.1.5
unreplicated
timestamping
serialization
generalizing
18.4.2.1
concatenation
sign.ificant
na1nes
timestarnp
visits
18.4.2.2
6.9.4.3
mamler
cascading
rollbacks
con
bine
serializability
aborts
deadlock-prevention
deadlock-avoidance
deadlock-detection
18.5.1
resource-ordering
nl1mber
banker
systenl
designating
channeled
timestampordering
preemption
rolled
wait-for
graph
wait-die
teclmique
dies
wound-wait
counterpart
younger
wounded
preempted
reissue
die
acquiring
18.5.2
ecessary
preemptions
deadlockdetection
resourceallocation
acyclic
union
deadlocked
18.5.2.1
tmion
ormliscient
observer
approximation
cycledetection
searches
victim
victiitl
roll
graph-construction
listed
deletes
situations
snapshot
releases
deletion
picked1
unrelated
picked
back1
initiating
vertex
18.5.2.2
waitfor
pex
arc
ascertain
-detection
sj
discovering
iiwoked
transmits
sic
repeats
finite
halts
obtaining
5.z
restarting
largest
elect
18.6.1
bully
elects
restarts
informing
restart
18.6.2
lisi
ifi
j-thatis,ifthe
pisnumber
j-that
inquiry
agreement
garbled
resultilcg
lie
stopping
deviating
divisions
byzantine
army
commanded
surround
enemy
camp
generals
dawn
defeat
messengers
caught
18.7.1
traitors
loyal
reaching
18.7.2
functionfoo
boo
acknowledgment
foo
agreed
presence
claim
pj
affecting
contradicting
showing
devise
nonfaulty
vi
devised
worst-case
proportionate
tom
delays
collect
presenting
refuse
pretend
ai,l
a,2
ai,3
ai,f
value-say
nil-is
ring-structured
commits
concatenate
organizing
non-leaf
subtree
ancestor
children
comp1.1ter
deadlockprevention
prescribed
cam1.0t
1978b
fidge
raynal
singhal
babaoglu
marzullo
schwarz
mattern
ricart
agrawala
squareroot
maekawa
rilcg-structured
lann
carvalho
roucairol
agrawal
abbadi
taxonomy
reed
kanodia
shared-memory
1978a
sclmeider
dilling-philosophers
chang
sturgis
gray
presume
defilling
mohan
lindsay
implementillg
traiger
spector
bernsteill
rosenkrantz
obermarck
menasce
muntz
knapp
takilcg
chandy
pease
garcia-molina
larue
focused
specialpurpose
deadline
passed-even
correct-may
deadlines
multimedia
word-processing
continuous-media
data-such
video-must
soft
passedeven
robot
vision-control
walked
quick
-such
batch-processing
system-m.ay
whatsoever
appliances
ovens
dishwashers
cameras
mp3
players
cellular
telephones
blackberry
automobiles
airplanes
dishwasher
dishwasher-the
water
cleaning
unaware
antilock
brakes
automobile
wheel
sensor
sliding
traction
continually
sensors
braking
pressure
furnace
safety-critical
operation-usually
-results
catastrophe
weapons
brake
flight-management
health-related
pacemakers
injury-or
worse-might
fax
wristwatches
realtime
systems-as
linux-provide
systencs
inexpensively
mass-produced
delivering
airliner
navigation
single-purpose
constrained
wristwatch
oven-it
considerably
contemporary
16-bit
footprint
footprints
thermostats
costconscious
intercom1ectin.g
memorymouse
bus-oriented
management-unit
mmu
soc
focuses
tim.ing
schedulil1.g
schedulers
degrade
minimizing
il1.terrupts
displays
large-kernel
forty
prominent
vision
relocation
memory-management
mmus
addresses-especially
look-aside
tlb
miss-may
prohibitive
teclmique-kn.own
real-addressing
mode-does
equals
real-addressil1.g
rum1.ing
referencing
lynxos
priority-based
gathers
requirencent
19.4.1
deemed
levelspriority
31-are
prioritization
accord
requirem
19.4.2
kernel-mode
voluntarily
user-oriented
spreadsheets
systems-such
xp-are
systems-in
systems-preemptive
preemptible
long-duration
kernel-that
19.4.3
event-driven
-as
expires-or
hardware-as
remote-controlled
vehicle
obstruction
elapses
veering
radar
latencies
occursf
isr
obviouslyf
owitocontiex
ish
contributing
amomrt
deterministic
schedulil
dispatcher
mandates
makeup
arises
beil
lower-priority
process-or
--------response
_....
finish
ordinarily
howevet
runnable
preempting
-process
m-has
relinquish
solved
priority-inheritance
revert
relinquishes
inherited
-not
-will
noncritical
stricter
expired
timet
expressed
period1
period2
period3
unusual
announce
admission-control
admits
rejects
19.5.1
rate-monotonic
inversely
respectively-that
processil1.g
meets
-ti
20j50
19.8
j80
n.ms
misses
falls
approximately
19.5.2
earliest-deadline-first
edf
adjusted
rmmable
rmming
rum1ing
finishing
a1mom1ce
appeal
optimal-theoretically
19.5.3
timef
processesf
sharesf
conjunction
admission
admit
19.5.4
pthread
computingposix
pthreads
sched
__fifo
sched_rr
sched__fifo
first-served
5.3.1
slicing
highest-priority
front
round-robin
sincilar
sched_fifo
class-scheddther-but
undefined
pthread_attr_getsched_policy
pthread_attr_t
attr
pthread_attr_setsched_policy
sched_other
pthread_attr
setsched_policy
non-zero
pthread.h
num_threads
pthread_t
tid
pthread_attr_init
&attr
pthread_attr_getschedpolicy
&policy
fprintf
stderr
printf
pthread_attr_setschedpolicy
pthread_create
&tid
,&attr,runner,null
pthread_join
runner
param
pthread_exi
scheddther
vxworks
wind
river
industrial
rovers-spirit
opportunity-that
exploring
planet
mars
organizationofvxworks
centered
microkernel
2.7.3
microkernels
kernel-a
thelinux
.systent
isbe
incre
singlyinreai-time
enviroft
ments.yve
hav
alreadycovered
softr
fil-ti,nteschedv,ling.fe
tur
secti
5.6.3
,whereby
tasl
sareassignt
d.thehj.ghe
tpriorityi
cst
additionaueatures
2,6
makelinux
even,more
suitilb
fot
.embedded
thes
i.nclud
fullr
pree
ptive
.efficient
sched-lli11g
orith
vhic
p.ll1sij
tinte
tas
ac.tive
.stero
the2.6release
enthardlare
itecttlresbydi
tlcljng
jew
integrah1lg
iftto
reanill1e
.envirof
combini
operat
s,.systt
it1
vith
mallreal-.ti
fle
ernet
tht
reby
systell1
botl
gene
s.e
tnd
real-tipte
ystem
.is
theappro
tctken1
jy.t
lil_1cux
ppt
rat
systerrl
.rtlinux
lirn.tx
sll1ctll
l-timeoperating
syste1n
htt1eikerllelj
les
alliftterrupts.-,-directing
ndarclkerrtel.or
anintef
rupt.randler
real7tirlle
ketnel
tlin
shtndar
i.linuxkernel
disablb
intefrl_lpts
tus.ens11rirtg
itc
tl1rlotac1c11atencyto.thereal-timesystem.rj
lirtux.ctls0
ies
difft
rent
schedulingpolicies
includingrate-mo1lot
schec1ul
j1g
sechonj9.5.1
deadline-first
section19
pipes-a
behaves
fik
pipe
mutex
inheritance
mversion
microkernet
optionat
customize
excluded
size-or
footprint-of
per-page
non-cacheable
cache-coherency
optional
vxvmi
memorymanagement
marked
arriving
useless
earliestdeadline
assignb
upcoming
deadlines-the
thermostat
household
nuclear
plant
fuel
economy
landing
gantt
chart
19.7-19.10
inferior
monotonic
liu
layland
jensen
lehoczky
audsley
stoica
priority-assignment
least-laxity-first
directions
stankovic
wordprocessing
streamed
objectives
compress
movies
clips
previews
stories
live
casts
speeches
sporting
webcams
viewer
manhattan
customers
cafe
paris
assistants
stock
trader
quotes
pda
20.1.1
succession
smoother
smooth
eyes
retains
choppy-looking
comprise
listened
-are
progressive
-by
videos
broadcasts
disc
5-minute
clip
ondemand
concert
lecture
authors
regularly
listens
station
utah
conferencing
poil1.ts
thing
00p.m
10p.m
on-demand
full-length
lectures
viewing
time-there
realplayer
apple
quicktime
20.1.2
100-minute
mpeg-1
1.125gb
high-defuution
television
hdtv
terabytes
color
colors
11,520
mbps
listener
pauses
20.1.3
requirements-also
qos
requirements-of
compression
jitter
compressing
beilcg
cormection
discussing
800-kb
decompressed
decompression
lossy
lossless
cone
pression
ratios
compression-namely
eliminating
frequencies
ear
mpeg
mpeg-2
mpeg-4
bitrate
quality
vcr
high-definition
characterizes
lmsuitable
two-dimensional
animation
buyer
tour
appealing
56-i
bps
cell
phones
encourage
compilers
tin1.ing
foremost
intervals-or

hundredths
omitted
best-effort
quality-of-service
systems-the
far-typically
exceeds
next-generation
service-level
pauses-or
frames-during
data-say
worth-before
these-and
other-scenarios
corrected
negotiate
agreeing
negotiating
provider
admitting
everyday
lives
theater
seats
practiced
nonshareable
initializing
semaphore
requirements-for
rejected
negotiated
reserves
assuring
20.7.2
cineblitz
unusable
withii1
unchanged
non-real-time
intention
12.4.3
12.4.4
algorithn
diskscheduling
disk-bandwidth
data-rate
prioritize
20.5.1
.5.2
cpu-scheduling
shortest-seek-time-first
12.4.2
closest
deadline-the
tim.es
regard
20.5.2
scan-edf
ignores
swil
wildly
fro
negatively
12.4.1
adopting
whereil
proximity
optimizes
usil
batching
reordering
batches
size-say
threshold-say
followil
-
kj
time0
downward
nun1.bers
fron
upward
quality-ofservice
network-perhaps
internet-issues
noting
particular
proprietary
protocols-notably
cisco
routers-that
prioritized
encounter
issues-issues
originator
playing
real-thne
rrrf
rtp
transporting
rathe1
20.6.1
unicasting
multicasting
unicast
,
nh
lies
broadcasting
suffice
standpoint
originating
incurred
multicast
country
chief
executive
20.6.2
replaying
pausing
hypertext
http-the
realplaye1
cajj.u
locatm
metafile
wished
rtsp
streami.j.1.g
i.j.1.clude
breaks
frees
transitions
cine
blitz
disk-schedulu1.g
tear
finite-state
20.7.1
inc-scan
reversing
beginr1ing
cil
eblitz
r11
cyclic
time-length
tpically
behil
admitted
sum
lett
rater
f---1
cinebiitz
thatcanberetrievedforrequest
duringeachcycleis
formula
yjc
contailling
tscek
trot
servicil1g
tseek
1-b-l
disk-seek
retrievals
multiplied
dislu
ansfer
yic
raisk
diok
filesf
computersf
assistantsf
requiren
requirementsf
qualityof
servicef
evaluating
schedulingf
unicastingf
multicastingf
colorf
480f
usedf
imagesf
videof
mbf
batched
,j,c
..ji
r10
fuhrt
steinmetz
leslie
mercer
druschel
peterson
reddy
wyllie
regehr
lauzac
bolosky
schedule-management
tudor
tutorial
detaiilinux
full-featured
read-and
popularity
stand-alonemachine
market
workgroup-server
drastically
highlight
similarities
chronological
freebsd
compatibility
exam.ining
presents-interfaces
owe
tradition
developments
feels
finnish
linus
torvalds
christened
32-bit
pc-compatible
collaboration
revolved
kernel-the
n1.anages
systeitl
scratch
con1.munity
multitude
borrowed
projects
teams
matured
arisen
distributions
upgrading
administration
21.1.1
dated
80386-compatible
incarnation
cross-developed
platform
milestone
culminated
limlx
biggest
bsd-compatible
slip
floppy-disk
emulation
math
unix-style
inclllding
loadable
unloadable
bug-fix
numbering
minor-version
and2.1
evennumbered
remedial
untested
wider
pc-specific
feature-support
virtual8086
mode-to
ipx
firewalling
pc-only
alpha
mips
concentrated
jmce
version-number
increment
68000-series
powermac
substantially
unified
writable
talk
ax.25
anlateur
isdn
netware
lanmanager
dependencies
posix-compatible
process-scheduling
january
ultrasparc
acks
acorn
smp
limix
21.1.2
foundation
gnu
worked
omissions
li1.efficiencies
networkingadministration
derivatives
floating-point-emulation
sound-hardware
loose
file-transfer-protocol
archive
facto
repositories
21.1.3
fetching
latest
revisions
compiling
painful
precompiled
collections
system-installation
ready-to-install
text-processing
unpacking
contributions
dish
ibutions
package-tracking
upgraded
painlessly
sls
lacked
packagemanagement
slackware
noncommercial
free-software
cz,ldera
germany
german-language
circulation
21.1.4
licensing
gpl
fmmdation
public-domain
waived
copyright
liimx
derivative
redistributed
binary-only
alongside
resh
iction
ntaking-or
selling-binary-only
resembles
nonmicrokernel
unix-compatible
adheres
platforms
enthusiasts
well-funded
squeeze
minimalist
grew
paid
diversity
compliant
official
surprises
familiar
a.3
a.4
svr4
fee
certifying
base
extensions-pthreads
21.2.1
bodies
initialize
othersknown
-may
logon
user-mode
operating-system-support
messagepassing
internals
historical
monolithic
m.elting
pot
modularity
san1.e
pull
unload
-they
arbitrated
kernel-system
tmprivileged
collecting
buffered
file-handling
sorting
string-manipulation
programs-both
com1.t
system-administration
wanting
relinking
reloading
undertake
driver-the
already-rmming
implication
startup
unloaded
dismounted
reserve
21.3.1
symbols
splitting
syncbol
symbol
exported
exporting
import
unresolved
looked
moduleloader
verbatim
module-management
requestor
unloads
21.3.2
registration
cleanup
registering
virtual-file-system
nfs1
protocot
ipx1
packet-filtering
sysctl
21.7.4
21.3.3
sold
single-supplier
adapters
conflict-resolution
arbitrate
aims
clashing
aui
oprobes-device-driver
auto-detect
configuration-from
interfering
hardware-for
parallel-line
pup
incidentally
user-requested
a.3.2
21.4.1
fork
exec
distinctly
run-the
subprocess
rumung
child
21.4.1.1
pid
lmique
forked
credentials
personality
personalities
traditionally
unchangeable
21.4.1.2
null-terminated
vectors
conventionally
datum
alone-their
inheriting
meanings
cursor
scrolling
multilingual
lang
environment-variable
custom-tailors
per-process
editors
21.4.1.3
constantly
context-the
arithmetic
outstanding
signal-handler
21.4.2
duplicating
clone
task-rather
thread-when
flags
clone_fs
clone_vm
clone_sighand
clone_files
fashion
subcontexts
file-descriptor
subcontext
struch1res
interrupting
21.5.1
overhaul
time-known
-regardless
affin.ity
quantum
time-slice
nice
numerically
quanta
lim.ix
rum
exhausted
runqueue
arrays-active
slices
indexed
vice-versa
minus
ether
subtracted
interactivity
adjustments
favors
cpu-bound
lowered
recalculated
o-o
o-o-o
posix.lb
5.3.4
irt
compete
exit
round-robill
time-share
soft-rather
hard-real
reahim.e
21.5.2
fundamentally
implicitly-for
posed
sanl.e
risking
sections-portions
violating
nonpreernptive
-even
higherpriority
spinlocks
readerwriter
spinlock
durations
single-processor
summarized
calls-preempldisable
preemplenable
-for
thread-info
preempt_count
acquired
decremented
preemplcount
preempt_disable
spinlocks-along
interrupt-control
reenabled
disassemble
recursive
miniature
halves
bottom-half
worrying
foreground
tl1e
reenable
top-half
21.5.3
multiprocessing
bkl
affinity
memory-pages
lto
21.6.1
zones
zone_dma
zone_normal
zone_highmem
80x86
isa
zonldma
4-gb
intel80x86
priinary
physical-memory
lil
lux
allocator
lntel80x86
buddy
9.8.1
allocatable
partner
region-a
heap
subdivided
partners
allowable
buddy-heap
ultim.ately
allocations
ncade
pools
21.6.2
kmalloc
variable-length
slab
8kb
16kb
4kb
arbitrary-sized
splits
clainled
reallocate
slabs
populated
instantiations
3-kb
7-kb
slab-allocation
12-kb
2-kb
struct
task_struct
fulfill
21.8.1
diskbased
limn
views
nonoverlapping
page-aligned
vm_area_struct
balanced
lookllp
laintains
pagetable
software-interrupt
address-space
page-management
21.6.2.1
backed
demand-zero
viewport
reaction
pager
21.6.2.2
populate
concplete
page-table
brand-new
absolutely
21.6.2.3
inemory
paging-the
whole-process
pageuut
second-chance
9.4.5.2
multiplepass
youthfulness
valuing
lfu
bitmap
next-fit
paged
page-not-present
21.6.2.4
architecture-dependent
modifiable
vmalloc
vremap
21.6.3
overwriting
loadil1.g
files-a
elf
extensibility
confused
21.6.3.1
21.6.3.2
elf-format
lower-numbered
contail1
