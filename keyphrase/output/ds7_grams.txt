class we looked
looked at definitions
definitions of trees
complete binary tree
things are today
discussion on trees
traversal or tree
visiting the nodes
two different traversals
first visit process
process each node
process it children
examples of follow
follow this clearer
process the node
examples preorder tree
preorder tree traversals
construct a tree
lets say result
result such paper
first section lets
title second section
section one section
section two section
two such sub
sub sections section
two ? section
two sub sections
reading the paper
read the paper
suppose your reading
end to end
read the abstract
start with section
section sub section
table of contents
book are listed
contents are listed
nodes of tree
node one right
ten then eleven
thirteen then fourteen
right and pseudo
code for preorder
call preorder traversal
visit the node
node so visit
doing some computations
computations that node
book as table
contents then visit
visit would correspond
correspond to print
print the title
print the heading
instance each node
nodes and repeat
repeat the process
process there repeat
sub sub sections
point one point
first first visit
node then visit
visit this node
node this correspond
correspond to visit
node this corresponds
visit its children
reading a document
document from beginning
beginning to end
postorder traversal recall
root directory courses
two sub directory
file called grades
compute the total
total space occupied
file system lets
two up add
add this node
node to obtain
obtain the total
total spaces required
sense the computation
visiting this node
node or doing
doing some computation
done the computation
two children nodes
computed the total
computed total spaces
doing this right
perform a postorder
postorder here corresponds
corresponds to finding
finding the total
total spaces occupied
space is occupied
sense the order
computation is done
disk usage command
usage command unix
command in unix
typing this command
directory it tells
type the disk
out the total
end it list
done this computation
directory its first
total space required
child second child
child third child
child fourth child
child is visited
left is leftmost
drawn your trees
preorder first visit
visit the childrens
nodes in postorder
visit the children
node then visits
visits the nodes
case of binary
first saying visit
right it depends
application so first
first say visit
child so note
work this work
work by making
making the call
doing a preorder
child the difference
difference between preorder
preorder and postorder
traversal on left
visit a node
out the contents
right so lets
thing get printed
root a right
preorder traversal left
traversal left sub
left sub tree
tree and first
print the node
node first visit
node visit corresponds
corresponds to printing
printing the content
sub tree left
tree left sub
node here means
means printing contents
tree is null
right sub tree
tree because first
visited the node
traversal of right
tree which means
means we done
entire sub tree
tree right sub
tree any questions
right answer lets
done postorder traversal
print this node
right child null
ready to operate
operate the content
tree then postorder
print this content
content so postorder
print the content
done the postorder
done with postorder
means which print
print the root
works okay good
evaluating arithmetic expression
evaluate this expression
expression this sub
corresponds to sub
right whatever values
value the entire
compute first value
compute the value
right a procedure
evaluate the expression
return the variable
value the leaf
corresponds to numbers
evaluate the left
evaluate v dot
dot left child
child this arrow
value of right
right and return
return that value
value of expression
hope you understand
essentially it corresponds
postorder traversal small
traversal small modification
small modification question
addressing that problem
problem of generating
generating this tree
incorporate the priority
evaluate the tree
tree expression correspond
inorder traversal preorder
traversal preorder traversal
traversal and postorder
kind of traversal
traversal so recall
recall that preorder
traversal we visited
visit then node
tree so pseudo
code for inorder
traversal right child
threes binary trees
understood inorder traversal
first the left
sub tree inorder
tree inorder traversal
entire inorder traversal
traversing a tree
rule right suppose
basically the drawn
drawn in blue
hit a leaf
traversal of binary
preorder traversal postorder
traversal postorder traversal
traversal that inorder
cases of eulers
basically getting visited
touching this node
times we touches
touches any node
qualify every internal
node of degree
set an arithmetic
print this arithmetic
out with parenthesis
draw the parenthesis
walk this thing
tree ill print
print an left
print the right
right this corresponds
corresponds to taking
taking this path
out the content
node was visited
right essentially print
first ill touch
touch this node
node from left
print first bracket
bracket then touch
left ill print
print other left
bracket i touch
left i print
print another left
left another bracket
bracket to begin
node for leaf
print a star
print a left
out the arithmetic
expression some kind
kind of euler
right a generic
method for tree
traversal or postorder
postorder traversal inorder
traversal inorder traversal
traverse this node
method called external
method left external
method you invoke
node you touch
touch the node
invoke this method
continue with right
create the traversal
traversal of choice
specialize this binary
binary tree traversal
traversal the generic
generic tree traversal
class which means
result in external
result external left
left below right
left unspecified right
class you left
left you leave
leave certain methods
create a sub
sub class sub
class sub class
class which specifies
specifies these methods
specializes this generic
tree traversal procedure
class for printing
printing out arithmetic
out arithmetic expressions
compute the space
left the left
left child directory
left child compute
dot left result
result r dot
dot right result
compute the sum
printing arithmetic expression
out the element
position just print
touch a node
out a left
out the left
out the right
specialized these methods
extending binary tree
invoke the traversal
class binary tree
right by specializing
specializing these methods
slightly different manner
manner so lets
continue our discussion
discussion on preorder
traversal and inorder
suppose i give
give you preorder
preorder traversal preorder
preorder traversal inorder
out the trees
necessarily the tree
put down node
inorder traversal inorder
right the green
tree and blue
traversal the first
first five elements
preorder preorder traversal
manage to identify
preorder and inorder
tree the rep
rep order inorder
order inorder traversal
nodes the right
problem recursively reduce
piece of code
require some thought
compute the postorder
compute the tree
traversal this tree
give the result
arbitrary c sequence
out an error
rep and inorder
traversal given post
tree right suppose
suppose i gave
tree so recall
recall what wee
preorder very first
postorder the last
root so first
find the root
divides the thing
number of nodes
first the first
first five nodes
right sub trees
post and inorder
question given preorder
determine the tree
right three nodes
nodes from tree
tree this preorder
right one don
examples many trees
tree some nodes
node the tree
complete every internal
tree internal node
tree every internal
node has binary
postorder to determine
whats the first
draw the root
ahs two children
visits postorder traversal
right no right
right one element
showing you showing
level in fact
right the code
idea is assignment
tree order traversal
similarly for postorder
similarly for inorder
give the inorder
trees same inorder
case two doesn
case it doesn
tree some internal
right more questions
tree binary trees
count the number
number of binary
lets say preorder
power n minus
minus one right
tree right wee
right child right
absolute minimum right
lots and lots
lots of things
compute the close
close form expression
ways of traversing
trees um inorder
traversal for binary
notion of inorder
traversal for general
right after visiting
visiting the first
notion of left
right so first
first you visit
visit the left
visit the right
last class
binary tree
complete binary
tree traversal
tree traversals
preorder traversal
postorder traversal
visit process
preorder tree
first section
section lets
abstract discuss
reference section
sub sections
sections section
right suppose
paper end
title read
section sub
sub section
first node
eleven twelve
pseudo code
call preorder
first visit
generic term
title print
heading print
node corresponds
children nodes
child nodes
section subsection
sub sub
recursive traversal
visit correspond
means visit
corresponds visit
doing visit
traversal recall
directory structure
root directory
directory courses
sub directory
total space
space occupied
file system
system lets
entire directory
total spaces
spaces required
spaces occupied
disk usage
usage command
command unix
recursive manner
space required
child hood
ordered trees
first child
fourth child
leftmost child
binary trees
general trees
childrens nodes
postorder visit
children node
nodes lets
specialized case
generic computation
left child
right child
recursive procedure
calling order
visit lets
understand lets
first thing
traversal left
left sub
sub tree
first print
node visit
visit corresponds
tree left
root node
printing contents
right sub
entire sub
right answer
answer lets
done postorder
child null
single node
procedure works
arithmetic expression
evaluate expressions
sub expression
compute value
entire thing
first value
operator sitting
leaf corresponds
internal node
first evaluate
dot left
small modification
modification question
priority rules
tree expression
expression correspond
inorder traversal
traversal preorder
order kind
understood inorder
first inorder
order traversal
tree inorder
entire inorder
traversals priority
eulers rule
generic traversal
traversal postorder
special cases
visited thrice
node lets
touch thrice
parenthesis print
euler walk
left bracket
right bracket
node understand
print bracket
first bracket
left print
generic method
traversal inorder
external node
external right
method left
leaf node
generic tree
abstract class
java details
external external
external left
unspecified right
methods unspecified
manner create
sub class
class sub
manner specializes
traversal procedure
arithmetic expressions
left result
child directory
child compute
right result
final value
value return
right print
print traversal
traversal method
parenthesis form
class binary
directories structure
lets continue
preorder preorder
rep order
order inorder
node tree
assignment put
web today
postorder inorder
first figure
first element
last element
sub trees
unique tree
child suppose
full tree
indian tree
node ahs
visits postorder
single element
high level
huge number
tree order
internal nodes
sufficient right
tree binary
child right
minimum number
absolute minimum
minimum right
finite number
close form
form expression
stop today
traversing trees
last
class
looked
definitions
trees
tree
binary
complete
height
things
today
continue
discussion
talk
traversal
traversals
visiting
nodes
order
two
first
preorder
postorder
visit
process
node
children
show
examples
follow
clearer
done
lets
clarified
doubt
problem
suppose
recall
book
paper
construct
out
organization
result
sections
section
title
abstract
discuss
end
references
books
papers
publication
reference
sub
point
right
start
reading
read
listing
table
contents
listed
chapter
referring
accessing
four
ten
eleven
twelve
thirteen
fourteen
noise
pseudo
code
begin
call
root
generic
term
doing
computations
case
correspond
print
heading
instance
corresponds
thing
repeat
child
arbitrary
subsection
kind
recursive
means
gave
document
beginning
whats
directory
structure
courses
cs252
file
grades
files
compute
total
space
occupied
system
entire
subdirectory
add
obtain
spaces
required
sense
computation
computed
perform
finding
reverse
pervious
fact
disk
usage
command
unix
typing
tells
type
list
eventually
manner
clear
question
hood
visited
ordered
notion
fourth
drawn
left
leftmost
depends
shown
general
childrens
visits
specialized
null
application
note
procedure
calling
work
making
difference
understand
printing
printed
content
guy
questions
answer
ready
operate
single
hindi
works
good
showing
evaluating
arithmetic
expression
evaluate
expressions
minus
essence
value
quantity
values
operator
sitting
division
leaf
return
variable
stored
numbers
internal
dot
arrow
direction
hope
essentially
small
modification
addressing
generating
incorporate
priority
rules
generated
worried
inorder
possibilities
threes
understood
printout
traversing
eulers
rule
tours
tour
basically
blue
hit
parent
viewed
special
cases
thrice
coming
touching
times
touches
account
touch
qualify
degree
set
parenthesis
draw
euler
walk
bracket
finish
taking
path
exact
star
multiplication
method
traverse
position
external
invoke
methods
create
choice
specialize
java
details
unspecified
leave
object
specifies
specializes
store
back
utilize
sum
final
thast
element
extending
form
directories
specializing
slightly
give
mention
figure
sir
true
necessarily
happen
find
put
search
green
elements
information
manage
identify
recursion
rep
plug
don
recursively
reduce
sees
translate
piece
require
thought
assignment
web
student
arrays
input
user
simple
sequence
flag
error
sequences
possibly
post
wee
neatly
divides
number
plugged
uniquely
determine
reason
unique
concerned
happening
full
indian
exercise
quickly
ahs
worked
picture
descends
managed
divide
high
level
algorithms
idea
learn
program
efficiently
write
line
huge
combinations
rise
knowledge
similarly
suffices
purposes
doesn
told
sufficient
count
power
make
option
minimum
absolute
lots
finite
finitely
function
close
stop
ways
applications
raise
