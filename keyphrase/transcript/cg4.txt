okay so we have been talking about clipping right so the idea there was that we have a window thats the extend of the same which we want to display and then we want to make a sort of a answer to a question whether a particular primitive is inside the window or not before we decide to displayed right we for instance we looked at the (Refer Slide time 1:25 min)



point clipping right the point is the simplest primitive so we wanted to answer the question whether the particular point is inside the window or it is outside the window right so for the purpose of simplicity if i consider a window of let say a rectangular window then the this question can easily be answered by just looking at the coordinates of the points and the extend of the window to decide whether a particular point is inside or outside right so you have P is the point which is outside the window or Q is the point which is inside the window right to a simple comparison gives as that result and then we also looked at the possibilities of extending this idea of clipping a point to a line just applying at the end points of the line right and a and we figure out that it was not always possible that we could determine whether a line is inside or outside just by looking at the two end points right and in this respect we had a clipping algorithms (Refer Slide time 2:37 min)



suggested by cohen and Sutherland right where the idea was let you given a window right which is shown here as a grey region and you want to decide things which are inside that window so what you do is you basically give a bit code to this window and the neighboring regions it this window has okay so then we actually divides the scheme by which we can decide for some trivial cases right so this this process is basically is doing that a given one boundary of the window i can decide whether the line is on this side of the window edge or the other side of the window right so in case if it is on the other side which is actually the side whether the window exist i would declare that it is possible visible right so just by looking at then the bit code which i get for the end points of the line right i can decide whether i need to trivially reject the line or except the line right so if the two end points are inside the window then the bit code for the two end points is going to be zero zero zero zero right and then i can basically follow (Refer Slide time 4:15 min)



some other some logical operation which we figure out was like an taking an add for the two end point where if i take the add of the two end point then if i obtain non zero bit right only exactly one bit on then i can say that it is rejected trivially rejected by this window right so these are the cases which we can see or the cases for trivially acceptance and rejection right so this line is trivially accepted because the two end point have zero zero zero at the bit code and here the two end points are actually on this side if you look at this edge of the window there on the one side of the window edge and if i take the logical end of the two end points i found out that it is exactly one right therefore i can trivially rejected right and however if the case is are of this kind (Refer Slide time 5:19 min)



right where this trivial rejection criteria doesnt get satisfied then i need to do some more work right so this are the cases like where you have one point on this side the one end point is actually inside the window right and i get a logical lan which is zero for all the bit then i need to find out the intersection point here with the window edge so that i actually get the segments of the line which is inside and which is outside right so i can subdivide that line again at the intersection point and again check for the trivial rejection at the trivial acceptance right that is the idea so here are also the cases which is actually not visible from this window right the two end points are here and here but they are potentially visible because of the not satisfying the trivial rejection criteria right so we need to still work on the figure out the segments of the line and therefore check for the each of the segments for trivial rejection and acceptance right so this was the cohen and sutherland algorithm (Refer Slide time 6:42 min) 



so the properties of the cohen and sutherland  is basically is very simple algorithm right just checking for the end points and it is still popular because most of the time when you do clipping it is actually primarily against a rectangular region it has a very natural choice for a window right so this limitation of rectangular region may be all right for the most of the practical applications still it is popular right it doesnt matter and the extension to three d as we saw it last time is fairly straight forward right so instead of having four bit opcode we have actually six bit opcode right and basically we are comparing it with the faces of the parallel pipe structure whether there is a line which is possible can be trivially rejected or accepted right so now let try to see some other way of doing this clipping where we can resolve certain limitation of this method one of the limitation is that we are restricting this two a rectangular region right may be still we can design certain bit code for the two end points if we have a convex region for instance if i have a triangular region may be i can still do in a very similar fashion the way i did for a rectangular region right doing some kind of a logical operation for the two end points but it might become a compression even for a general convex polygon right so this another very popular clipping algorithm which is cyrus beck line clipping algorithm (Refer Slide time 8:39 min)



and in fact there is a slight variation to it from liang and barsky so they are sort of equivalent right in terms of the way they work so this is applied with respect to any convex region as a window right you can take up any convex region and we will see later on that it could also be possible the extended for non convex regions okay what we do here is we consider a line line in question which is to be clipped right as it parametric representation of a line right so if i have a line A B so i represent this line as Lt equals to A plus B minus A times t right where t is the parameter which runs between zero and one so the range of zero and one miakes this line a finite line right between the two end points A and B right so i have the representation of the line which is to be clipped as a parametric representation fine now as for as the window i just concern (Refer Slide time 10:06 min)



right so what iam going to see it as that window basically consist of several adjust right so iam trying to answer the question of clipping with respect to the window adjust right so i represent a window edge using in a implicit representation right so implicit representation basically means that i have a line LQ which is given as Q minus p dot n right its actually giving me the answer to the question on which side of the line the point Q is given the point p is on the line and n is the normal to the line which i consider as defining for the inside of the line or a particular side of the line right something similar to what we also observed in line drawing algorithm right where we are trying to answer the question of the location of the midpoint with respect to the line right so i have this implicit representation which actually enables me to answer the questions on which side of the line the point Q lies right so this p point is actually any point on the line right so in another way sort of the side distance of the point Q from the line right and the sign of that gives me whether it is this side or that side right so now given the representation which iam going to use for the line to be clipped and for the window edge against which iam going to be check for clipping in a implicit form let see how we can go further for designing the clipping algorithms so what do we have here we basically we do an evaluation (Refer Slide time 12:26 min)





right we do an evaluation of a given point Q which is nothing but through the equation of the line itself and if we figure out that this point Q is greater than zero right then it is towards the inside half size of the line so i have this notion of designing the inside and outside right so inside is the beside where i define this normal line right so this is again a similar kind of representation for half space right so just looking at the sign what i have from this evaluation if it is greater than zero i have the point towards the inside half space of the line if it is less than zero it is on the outside of the half space of the line and it is equal to zero then the point is actually on the line itself right so now in fact if you recall the way we would design this trivial rejection and trivial acceptance similarly a in the case of a cohen and sutherland right

we can also look at certain indication for trivial acceptance and trivial rejection from him right for instance if i trigger out that the point Q turns out to be inside with respect to all the edges of the window then the point is going to be inside the window itself and right if it is so happens for the two end points of the line this is the case right then the line is inside the window right this is equivalent to the trivial acceptance of the cohen and sutherland algorithm right and similarly for the rejection right because we basically that bit code was just going to do this inside outside operations with respect to the half space define by the window edge thats preciously it was doing right so we can do it in this fashion as well right this are two basically equivalent as for as the computation goes right how do you figure out the line is inside the region just while looking at one edge of the window no basically what we will do is we have let say the with respect to one line we check right if the two end point happen to be outside that window edge right this is going to be reductive right fine okay so now let try to see more in details about what i was trying to suggest is window edge (Refer Slide time 15:38 min)



if i have given in implicit representation LQ is equal to Q minus P dot n and the line segment give in parametric representation L t is equal to A plus t B minus A then what i mean by saying trivial rejection is basically looking at the two end points of the line which are A and B right so they should satisfies the criteria of being outside that line right and which is it is negative less than zero right both of them give me this negative right similarly for the trivial acceptance right so this basically answers your question right thats right thats correct thats correct so we i want to be able to declare the line as such inside unless i have gone through the window edges right okay so now we have basically looked at the cases (Refer Slide time 7:11 min)



of this nature so we are basically right now addressing question of with respect to one window edge so this inside outside notion is actually associated to an edge right and then we can run through with respect to all the edges and then that is where we will get the algorithm design so here this case we have resolve this case also we have resolve right and obviously there will be situations like this and one requires more work to do similarly what happen in the case of  cohen and sutherland right now let try to see a with the given representation (Refer Slide time 17:55 min)



we have can we have this things in a sort of concise way so when i say that i have this line AB in a parametric representation Lt is equal to two a minus d and the window edge in the implicit form then finding this intersection right now we are talking about the more work which we need to do when a line intersects the particular window edge right which basically requires you to find out this point of intersection and that you can find out by just substituting this Lt right into the implicit equation we have right and solve for t right so it becomes very simple solution right thats what i have done basically substituted here Lt this is and then after just rearrange this terms i can figure out this equation A minus P dot n plus t and B minus A dot n equals to zero all i need to do is get this t right and of course the t has to be given the range zero and one right okay (Refer Slide time 19:32 min)



okay so just to give you the whole picture so i have it this t determine as A minus P dot n divided by A minus B dot n right which i can further right like this right so remember that a when we are trying to address the question of this right LA less than zero LA greater than zero right and now for basically looking at these A minus P dot n which is nothing but does the same computation we did see a lid greater than zero went to what substituting A into a two implicit equation of Q minus P dot n right so as for as the computational aspect is concerned it was exactly this right so what iam trying to say is that the computations which i did for deciding my trivial acceptance antitrivally rejection cases i just have to reuse them i dont have to recomputed this right i just have to reuse them so thats  thats the advantage i have right so now ones i have done this then its basically a matter of doing this with respect to all the edges right what will happen is that i can then redefine my A s and B s according to what i get as a point of intersection and give that to be succeeding edge the next stage right all i need to do is redefine this end points and go through the entire circle of my edges i have right at the end of the lambda right and clearly when you look at this this does not restrict you do the form of the window i have only condition i have is the window needs to be convex doesnt matter what shape i have right so it doesnt really restricted to rectangular shape of the window i can apply this two any convection  (Refer Slide time 22:35 min)



okay now there is a small variations what i just said that let say instead of doing this evaluation of t and then updating my end points in A and B and then give it to the next window edge let say i try to find out the point of intersection with respect to all the window edges so that where this this two are slightly different so i respect in them right so here what iam going to suggest is that given a line AB right i have possible four intersections with respect to let say i have a rectangular window with respect to each edge of the window right 

now the question which is being asked is that i find out these point of intersections right basically the t which gives me the point of intersection right then can i figure out anything from those t to be able to decide what segment of line is inside if it all the line is inside the window right understood what iam going to suggest here iam basically say that okay here is the line and you have this window edges what iam trying to do is find out the point of intersection possible point of intersection of this line with respect to the window edges which are four in this case right and just looking at the values of P which i obtain can i suggest anything for the acceptance or rejection of the segment of the line which could possible be displayed within the window right okay so basically let say if i have these four point of intersection then iam trying to answer which of the this t i need to be able to label that this portion is inside the window right okay what i do is let say i have these (Refer Slide time 24:52 min)




t s as we are computed as we have seen in this fashion right just i actually swipe this A minus P to B minus A and put a negative sign in front right it is exactly the same thing it just gives you a sort of a notion of direction if i give for A B goes to zero and for B t is equal to one right so all is sending that all it is suggesting that iam going from A to P right now lets try to evaluate this denominator term which i have here B minus A dot n which i call it as D right now just look at the sign of this right so if the sign of this D is positive means D is greater than zero then i label the t which i have computed as something like a tE so E here is referring to entering 

right so the idea here is that we know if i have a line like this going from A to B and this is my normal right then it is in some sensing that it is entering that edge or it is entering that space right so i label this t s as t which i find for D greater than zero similarly i have t for which the D is negative right less than equal less than zero then i label this t as tL and here L referring to leaving right for here is the situation which i trying to illustrate A you have this edge right so this is the inside region for this edge right and when i find out this point of intersection here so the t referring to this i label it as tL because here when i look at this line it is in some sense leaving that region right so i have this notion of entering and leaving which i use for labeling the different t s i obtain right now let say if i can exploit this notion in order to decide which t s to select right any suggestion you want to give so let say if i consider this particular line right and you know what portion of line is actually inside the window right and you now by you know what t s is will have the label E right this t s are going to have te and this two t  are going to have tL right so is there anything you can think of which can give me this as the segment to be clipped right exactly so if i take that maximum of te s and the minimum of the tL s iam okay right just this is what i said here right (Refer Slide time 29:05 min)



so this t and this t these are the t which are of interest to be able to segment this line right which is to be clipped so the t of interest is largest tE which i can call it as tE max right and smallest tL which is i which i call it as t minimum right so now in fact this can also help me further since iam doing just the evaluation of intersection point right and then i also need to decide whether the line is actually inside or outside right this can even help me doing this (Refer Slide time 30:00 min)



where this t E max is greater than t L min right if this happens then i reject the line and thus what is happening in this case right because see this is what  we will get as t max right and this is your tL max so you will just reject that right so the evaluation of this tE max and tL min can also help you for rejecting the line right so this is basically based on finding out the intersection thats all it is about right and let say the trivial rejection part comes as after the evaluation of these t s right so now clearly as we said that (Refer Slide time 31:29 min)



there is no restriction to the shape except that the shape needs to be convex right so here there is an example where i have taken a a convex window right which is got eight edges and P one P two is the line in question and i can actually in a similar fashion as i did for the rectangular region i can do the clipping of this line and get this points right now the question is that now if you give you a shape so first if all you need to answer the question whether i can perform i clipping again that shape whatever i have given here right you need to answer the question whether the particular shape is convex or not right how do you do that right okay let me just give you a simple way of doing it (Refer Slide time 32:57 min)



so what you do is actually you look at the cross product of the adjutants edges right so here in this case when i take a cross product of E one and E two and let say my convention is that the thing which is coming out of this plane is positive right then i say even cross E two is positive right and so on if i just take the cross product of all the adjutant edges pair of edges right so it turns out that in this case there are going to be positive or if i have chosen a different convention they could have been all negative right so basically what we are saying is that if i find out that the cross product of the adjutant edges has the same sign right then i declared that polygon as convex is it fine so now lets try to take a shape (Refer Slide time 34:13 min)



which is non convex and see that this gets violated right so here is a non convex shapeso clearly that whats where you find the non convexity right at this point V four so what will happen is that you observe that there is a change of sign at some point all this cross product do not give you the same sign then you say that the shape is non convex right now the question is can we still do clipping for a non convex polygon or window “[noise yah]” this is some sort of extension of the method okay no see i let say i do not want to change my algorithm as such right so the question which is being basically ask can i map the problem of solving for non convex to convex why doing something some sort of a preprocessing so the first observation could be that if i generate convex polygon out of it right that is one way to look at right and i actually i do this clipping with respect to all the decomposed convex polygon right but often what happens is that then we are given such a polygon such a non convex polygon the non convexity arise only at let say a few point may be one right may be what we can do is we can do some correction to that non convexity and still apply the algorithm which is for convex and arrive at our solution right so here is with respect to the particular polygon layer let say what we can perhaps do is something like this let say what i do is i make this polygon convex (Refer Slide time 36:59 min)



right so making convex the polygon would actually may involve is finding out the convex hull of the points right in this situation may be it is just a matter of finding out where the change of sine occur right and then i take the two end point which were adjutant to it and join by line and make that polygon as convex but this situation could not be bad symbol and you actually require to find out the convex hull right so you understand what is convex hull is okay let me just give you a notional example “[noise]” that and we are not really let say at the moment concerned for the exact algorithm of finding out a convex hull so what we have set of points right the given set of points just consider actually this set of points are nothing but nails right nails on a floor right you take a thread start from a nail right and just wrap it around right then what you see is whatever is given by that thread gives you the convex hull right

so let say in such cases where we are interested in applying this clipping we are able to figure out the convex convex equivalent without going through a elaborate algorithm of convex side right so we figure out let say i said in this case just by looking at the adjutant points to the point which had given the difference sign and i join this line and i get a convex polygon right then what iam trying to do here is for the line which was given to me as P one P two and does the line in question which was to be clipped i first find out the line which is clipped again this polygon right the new polygon including this blue line right so i basically get the points P three and P four right now what can i do is (Refer Slide time 39:53 min)



then i consider this polygon which was sort of the additional polygon for making the other polygon convex right then i do a clipping against this polygon right for the resulting line i obtain right because some P three P four and i get the point P five right so i just do a clipping of the line with respect to this polygon right and then i subtract this from what i had obtain earlier right so at the end i obtain the line P three P five which is the resulting line to my interest right so basically applying the same convex region algorithm and doing some preprocessing and post processing to get the line clipped right this is the another interesting aspect to it it is that when i say that this is the portion i had got or the  way we have seen the clipping algorithm which actually gives you the line which is clipped against the polygon which is inside the window right so i may call it as something like a interior clipping right so in fact when i did interior clipping to find out  P four P five i can do the exterior clipping that means the line which is not inside but outside that region to give me P three P four right 

so i can just have interior clipping and exterior clipping right so these are as sort of useful when you have have you seen this let say the the exterior clipping means applied some where what happen to your window management system you have a window management system right so one window overlays other window
 so and so far right and what you see is actually the exterior clipped display from the window which is in front right one can think that in terms of clipping that why iam basically suggest right so this basically a cover line clipping right with respect to a polygon which is generally a convex but even if it is non convex for simple non convexity we can still apply a 

modified version of the same algorithm right so you got to be ready for assignments thats going to be a part of your first design right now the next question which is to be asked is lets move on to a more complex primitive right we started with points then we went to line let say i want to do polygon right i have a polygon as an input primitive i want to do a clipping of this polygon against the window right so the question which is here is can i extend the line algorithm to do polygon clipping and the answer is what yes no may be see one thing which we are not talking about is that this polygon could also possible the filled right they may have shade they may have color so might be then they might be some problem 

okay that what we are going to do next time which is polygon clipping right so given a polygon as an input primitive how do we clip that against its window so ones again when we talked about the cyrus beck liang barsky algorithm line algorithm just the way we had seen the extension to three d in the case of cohen and sutherland 

right here also it is straight forward right yes or no so there in see here we have consider window edges right as the lines which we are trying to find out the clipping so there we will have window planes right so we have a volume given by this convex regions right and each of the faces of that volume is going to be a plane right but the test which we are going to have will have exactly the same computation because we are basically answering the question of inside outside or this side or that side right so instead of saying that with respect to a line you will say that with respect to the plane so again its a matter of checking the sign of that computation right so that can be applied even for three d so three d clipping is a just a straight forward extension of what we have seen as two d right non convex regions in three d could slightly be more difficult making them convex right okay thank you

Transcriptor name: Karthick.D
Proof reader name:



		 
