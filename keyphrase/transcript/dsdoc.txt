  Data Structures and Programming 
Stacks and Queues
The first data structures we will study this semester will be lists which have the property that the order in which the items are used is determined by the order they arrive.
  Stacks are data structures which maintain the order of last-in, first-out
  Queues are data structures which maintain the order of first-in, first-out
Queues might seem fairer, which is why lines at stores are organized as queues instead of stacks, but both have important applications in programs as a data structure.
Operations on Stacks
The terminology associated with stacks comes from the spring loaded plate containers common in dining halls.
When a new plate is washed it is pushed on the stack.
When someone is hungry, a clean plate is popped off the stack.
A stack is an appropriate data structure for this task since the plates don  t care about when they are used 
Maintaining Procedure Calls
Stacks are used to maintain the return points when Modula-3 procedures call other procedures which call other procedures ...
Jacob and Esau
In the biblical story, Jacob and Esau were twin brothers where Esau was born first and thus inherited Issac  s birthright. However, Jacob got Esau to give it away for a bowl of soup, and so Jacob went to become a patriarch of Israel.
But why was Jacob justified in so tricking his brother   
Rashi, a famous 11th century Jewish commentator, explained the problem by saying Jacob was conceived first, then Esau second, and Jacob could not get around the narrow tube to assume his rightful place first in line 

Abstract Operations on a Stack
  Push(x,s) and Pop(x,s) - Stack s, item x. Note that there is no search operation.
  Initialize(s), Full(s), Empty(s), - The latter two are Boolean queries.
Defining these abstract operations lets us build a stack module to use and reuse without knowing the details of the implementation.
The easiest implementation uses an array with an index variable to represent the top of the stack.
An alternative implementation, using linked lists is sometimes better, for it can  t ever overflow. Note that we can change the implementations without the rest of the program knowing 
Declarations for a stack
INTERFACE Stack                   
(  Stack of integer elements  )

  TYPE ET = INTEGER               ( element type )

  PROCEDURE Push(elem   ET)       ( adds element to top of stack )
  PROCEDURE Pop()  ET             ( removes and returns top element )
  PROCEDURE Empty()  BOOLEAN      ( returns true if stack is empty )
  PROCEDURE Full()  BOOLEAN       ( returns true if stack is full )

END Stack.
Stack Implementation
MODULE Stack                   ( 14.07.94 RM, LB )
(  Implementation of an integer stack  )

  CONST
    Max = 8                    ( maximum number of elements on stack )
    
  TYPE 
    S = RECORD
          info  ARRAY [1 .. Max] OF ET 
          top  CARDINAL  = 0   ( initialize stack to empty )
        END  ( S )

  VAR stack  S                 ( instance of stack )

  PROCEDURE Push(elem ET) =
  ( adds element to top of stack )
  BEGIN
    INC(stack.top)  stack.info[stack.top] = elem
  END Push 

  PROCEDURE Pop()  ET =
  ( removes and returns top element )
  BEGIN
    DEC(stack.top)  RETURN stack.info[stack.top + 1]
  END Pop 

  PROCEDURE Empty()  BOOLEAN =
  ( returns true if stack is empty )
  BEGIN
    RETURN stack.top = 0
  END Empty 

  PROCEDURE Full()  BOOLEAN = ( returns true if stack is full )
  BEGIN
    RETURN stack.top = Max
  END Full 

BEGIN
END Stack.
Using the Stack Type
MODULE StackUser EXPORTS Main     ( 14.02.95. LB )
(  Example client of the integer stack  )

  FROM Stack IMPORT Push, Pop, Empty, Full 
  FROM SIO IMPORT Error, GetInt, PutInt, PutText, Nl 
  <  FATAL Error  >               ( suppress warning )

BEGIN
  PutText("Stack User. Please enter numbers \n") 
  WHILE NOT Full() DO
    Push(GetInt())                ( add entered number to stack )
  END 
  WHILE NOT Empty() DO
    PutInt(Pop())                 ( remove number from stack and return it )
  END 
  Nl() 
END StackUser.
FIFO Queues
Queues are more difficult to implement than stacks, because action happens at both ends.
The easiest implementation uses an array, adds elements at one end, and moves all elements when something is taken off the queue.
It is very wasteful moving all the elements on each DEQUEUE. Can we do better 
More Efficient Queues
Suppose that we maintaining pointers to the first (head) and last (tail) elements in the array/queue 
Note that there is no reason to explicitly clear previously unused cells.
Now both ENQUEUE and DEQUEUE are fast, but they are wasteful of space. We need a array bigger than the total number of ENQUEUEs, instead of the maximum number of items stored at a particular time.
Circular Queues
Circular queues let us reuse empty space 
Note that the pointer to the front of the list is now behind the back pointer 
When the queue is full, the two pointers point to neighboring elements.
There are lots of possible ways to adjust the pointers for circular queues. All are tricky 
How do you distinguish full from empty queues, since their pointer positions might be identical  The easiest way to distinguish full from empty is with a counter of how many elements are in the queue.
FIFO Queue Interface
INTERFACE Fifo                  ( 14.07.94 RM, LB )
(  A queue of text elements  )
 
  TYPE ET = TEXT                ( element type )
 
  PROCEDURE Enqueue(elem ET)    ( adds element to end )
  PROCEDURE Dequeue()  ET       ( removes and returns first element )
  PROCEDURE Empty()  BOOLEAN    ( returns true if queue is empty )
  PROCEDURE Full()  BOOLEAN     ( returns true if queue is full )
 
END Fifo.
Priority Queue Implementation
MODULE Fifo                       ( 14.07.94 RM, LB )
(  Implementation of a fifo queue of text elements  )
 
  CONST 
    Max = 8                       ( Maximum number of elements in FIFO queue )
    
  TYPE     
    Fifo = RECORD
            info  ARRAY [0 .. Max - 1] OF ET 
            in, out, n  CARDINAL  = 0 
          END  ( Fifo )
 
  VAR w  Fifo                     ( contains a FIFO queue )
 
  PROCEDURE Enqueue(elem ET) =
  ( adds element to end )
  BEGIN
    w.info[w.in] = elem           ( stores new element )
    w.in = (w.in + 1) MOD Max     ( increments in-pointer in ring )
    INC(w.n)                      ( increments number of stored elements )
  END Enqueue 
 
  PROCEDURE Dequeue()  ET =
  ( removes and returns first element )
  VAR e  ET 
  BEGIN
    e = w.info[w.out]              ( removes oldest element )
    w.out = (w.out + 1) MOD Max    ( increments out-pointer in ring )
    DEC(w.n)                       ( decrements number of stored elements )
    RETURN e                       ( returns the read element )
  END Dequeue 
Utility Routines
 
  PROCEDURE Empty()  BOOLEAN =
  ( returns true if queue is empty )
  BEGIN
    RETURN w.n = 0 
  END Empty 
 
  PROCEDURE Full()  BOOLEAN =
  ( returns true if queue is full )
  BEGIN
    RETURN w.n = Max
  END Full 
 
BEGIN
END Fifo.
User Module
MODULE FifoUser EXPORTS Main           ( 14.07.94. LB )
(  Example client of the text queue.  )
 
  FROM Fifo IMPORT Enqueue, Dequeue, Empty, Full  (  operations of the queue  )
  FROM SIO IMPORT Error, GetText, PutText, Nl 
  <  FATAL Error  >                               ( supress warning )
 
BEGIN
  PutText("FIFO User. Please enter texts \n") 
  WHILE NOT Full() DO
    Enqueue(GetText())
  END 
  WHILE NOT Empty() DO
    PutText(Dequeue() & "  ")
  END 
  Nl() 
END FifoUser.
Other Queues
Double-ended queues - These are data structures which support both push and pop and enqueue/dequeue operations.
Priority Queues(heaps) - Supports insertions and     remove minimum     operations which useful in simulations to maintain a queue of time events.
In this lecture we introduce another commonly used data structure called a stack. We practice again writing an interface, and then implementing the interface using linked lists as for queues. We also discuss how to check whether a linked list is circular or not. 2 Stack Interface Stacks are similar to queues in that we can insert and remove items. But we remove them from the same end that we add them, which makes stacks a LIFO (Last In First Out) data structure. Here is our interface   type elem must be defined typedef struct stack   stack   bool is_empty(stack S)   /   O(1)   / stack s_new()   /   O(1)   / void push(elem x, stack S)   /   O(1)   / elem pop(stack S)   /   O(1)   / We want the creation of a new (empty) stack as well as pushing and popping an item all to be constant-time operations. We are being slightly more abstract here than in the case of queues in that we do not write, in this file, what type the elements of the stack have to be. Instead we assume that before the file is read, we have already defined a LECTURE NOTES SEPTEMBER 16, 2010 Stacks L8.2 type elem for the type of stack elements. We say that the implementation is generic or polymorphic in the type of the elements. Unfortunately, neither C nor C0 provide a good way to enforce this in the language and we have to rely on programmer discipline. 3 Stack Implementation The idea is to reuse linked lists. But since all operations work on one end of the list, we do not need two pointers but just one which we call top. A typical stack then has the following form  3  2  1  top  data  next  Note that the end of the linked list is marked with the special NULL pointer that cannot be dereferenced. We define  struct list { elem data   struct list   next   }   typedef struct list   list   struct stack { list top   }   To test if some structure is a valid stack, we only need to check that the list starting at top ends in NULL, which is the same as checking that this is a list segment (as introduced in the last lecture). bool is_stack (stack S) { return is_segment(S->top, NULL)   } LECTURE NOTES SEPTEMBER 16, 2010 Stacks L8.3 To check if the stack is empty, we only need to verify that top is NULL. bool is_empty(stack S)  @requires is_stack(S)   { return S->top == NULL   } Creating a new stack is very simple, since we only need to set top to NULL after allocating it. stack s_new()  @ensures is_stack(\result)    @ensures is_empty(\result)   { stack S = alloc(struct stack)   S->top = NULL   return S   } To push an element onto the stack, we create a new list item, set its data field and then its next field to the current top of the stack. Finally, we need to update the top field of the stack to point to the new list item. While this is simple, it is still a good idea to draw a diagram. We go from 3  2  1  top  data  next  LECTURE NOTES SEPTEMBER 16, 2010 Stacks L8.4 to 3  2  1  top  data  next  4  In code  void push(elem x, stack S)  @requires is_stack(S)    @ensures  is_empty(S)   { list first = alloc(struct list)   first->data = x   first->next = S->top   S->top = first   } Finally, to pop an element from the stack we just have to move the top pointer to follow the next pointer from the top of the stack. As in the case of dequeuing an element from the previous lecture, the list item that previously constituted the top of the stack will no longer be accessible and be garbage collected as needed by the runtime system. We go from 3  2  1  top  data  next  LECTURE NOTES SEPTEMBER 16, 2010 Stacks L8.5 to 3  2  1  top  data  next  In code  elem pop(stack S)  @requires is_stack(S)    @ensures is_stack(S)   { assert(S->top  = NULL, "cannot pop empty stack")   { elem x = S->top->data   S->top = S->top->next   return x   } } This completes the implementation of stacks, which are a very simple and pervasive data structure. We will exercise them in the next lecture when we implement a virtual machine. 4 Detecting Circularity Checking whether a stack or a queue satisify their data structure invariant raises an interesting question  what if, somehow, we created a list that LECTURE NOTES SEPTEMBER 16, 2010 Stacks L8.6 contains a cycle, such as 1  2  3  4  start  data  next  6  5  In that case, following next pointers until we reach NULL actually never terminates. The program for checking a segment will get into an infinite loop. In general, contracts should terminate and have no effects. It is marginally acceptable if a contract diverges, because it will not incorrectly claim that the contract it satisfied, but it would clearly be better if it explicitly rejected a circular list. But how do we check that  Before you read on, you should seriously think about the problem, like our class did in lecture. LECTURE NOTES SEPTEMBER 16, 2010 Stacks L8.7 Here is the original is_segment predicate. bool is_segment(list start, list end) { list p = start   while (p  = end) { if (p == NULL) return false   p = p->next   } return true   } One the simplest solutions proposed in class keeps a copy of the start pointer. Then when we advance p we run through an auxiliary loop to check if the next element is already in the list. The code would be something like bool is_segment(list start, list end) { list p = start   while (p  = end) { if (p == NULL) return false   { list q = start   while (q  = p) { if (q == p->next) return false     circular q = q->next   } } p = p->next   } return true   } Unfortunately this solution requires O(n 2 ) time for a list with n elements, whether it is circular or not. Again, consider if you can find a better solution before reading on. LECTURE NOTES SEPTEMBER 16, 2010 Stacks L8.8 The idea for a more efficient solution is to create two pointers, let s name them t and h. t traverses the list like the pointer p before, in single steps. h, on the other hand, skips two elements ahead for every step taken by p. If the slower one t ever gets into a loop, the other pointer h will overtake it from behind. And this is the only way that this is possible. Let s try it on our list. We show the state of t and h on every iteration. 1  2  3  4  data  next  6  5  t h 1  2  3  4  data  next  6  5  t h 1  2  3  4  data  next  6  5  t h LECTURE NOTES SEPTEMBER 16, 2010 Stacks L8.9 1  2  3  4  data  next  6  5  t h In code  bool is_circular(list l) { if (l == NULL) return false   { list t = l     tortoise list h = l->next     hare while (t  = h)  @loop_invariant is_segment(t, h)   { if (h == NULL      h->next == NULL) return false   t = t->next   h = h->next->next   } return true   } } A few points about this code  in the condition inside the loop we exploit the short-circuiting evaluation of the logical or        so we only follow the next pointer for h when we know it is not NULL. Guarding against trying to dereference a NULL pointer is an extremely important consideration when writing pointer manipulation code such as this. This algorithm has been called the tortoise and the hare and is due to Floyd. We have chosen t to stand for tortoise and h to stand for hare. This algorithm has complexity O(n). An easy way to see this was suggested by a student in class  when there is no loop, the hare will stumble over NULL after O(n) steps. If there is a loop, then consider the point when the tortoise enters the loop. At this point, the hare must already be somewhere in the loop. Now for every step the tortoise takes in the loop the hare takes two, so on every iteration it comes one closer. The hare will catch the tortoise after at most half the size of the loop. Therefore the overall complexity of O(n)  the tortoise will not complete a full trip around the loop.
