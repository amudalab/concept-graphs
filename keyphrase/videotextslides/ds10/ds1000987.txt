Row 2::Height 1::average case scenario (2)
Row 3::Height 1::how can we make sure that we are usually
Row 4::Height 1::lucky
Row 5::Height 1::partition around the middle (n/2th) element?
Row 6::Height 1::partition around a random element(works well in
Row 7::Height 1::practise)
Row 8::Height 1::randomized algorithm
Row 9::Height 1::running time is independent of the input ordering
Row 10::Height 1::no specific input triggers worst-case behavior
Row 11::Height 1::the worst-case is only determined by the output of the
Row 12::Height 1::random-number generator
