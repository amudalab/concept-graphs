
NoSQL
 /firstHeading 
 bodyContent 

 tagline 
From Wikipedia, the free encyclopedia
 /tagline 
 subtitle 

 /subtitle 
 jumpto 

					Jump to:					navigation, 					search

 /jumpto 
 bodycontent 





This article may need to be rewritten entirely to comply with Wikipedia's quality standards. You can help. The discussion page may contain suggestions. (May 2012) 


In computing, NoSQL (commonly interpreted as "not only SQL"[1]) is a broad class of database management systems identified by non-adherence to the widely used relational database management system model. NoSQL databases are not built primarily on tables, and generally do not use SQL for data manipulation.
NoSQL database systems are often highly optimized for retrieval and appending operations and often offer little functionality beyond record storage (e.g. keyvalue stores). The reduced run-time flexibility compared to full SQL systems is compensated by marked gains in scalability and performance for certain data models.
In short, NoSQL database management systems are useful when working with a huge quantity of data when the data's nature does not require a relational model. The data can be structured, but NoSQL is used when what really matters is the ability to store and retrieve great quantities of data, not the relationships between the elements. Usage examples might be to store millions of keyvalue pairs in one or a few associative arrays or to store millions of data records. This organization is particularly useful for statistical or real-time analyses of growing lists of elements (such as Twitter posts or the Internet server logs from a large group of users).




Contents


1 Characteristics
2 History
3 Taxonomy

3.1 Document store
3.2 Graph
3.3 Keyvalue store

3.3.1 Eventuallyconsistent keyvalue store
3.3.2 Hierarchical keyvalue store
3.3.3 Hosted services
3.3.4 Keyvalue cache in RAM
3.3.5 Keyvalue stores on solid state or rotating disk
3.3.6 Ordered keyvalue stores


3.4 Multivalue databases
3.5 Object database
3.6 RDF database
3.7 Tabular
3.8 Tuple store


4 See also
5 References
6 Further reading
7 External links




[edit] Characteristics



This section needs additional citations for verification. (November 2012)


NoSQL databases have a number of distinctive characteristics relative to traditional SQL-based relational databases.[citation needed]
NoSQL does not use SQL as its query language. NoSQL database systems arose alongside major Internet companies, such as Google, Amazon, and Facebook, which had challenges in dealing with huge quantities of data with which conventional RDBMS solutions could not cope. Note that both the Facebook and Twitter infrastructures are largely based on MySQL databases.[2][3] NoSQL database systems are developed to manage large volumes of data that do not necessarily follow a fixed schema. Data is partitioned among different machines (for performance reasons and size limitations) so that traditional JOIN operations cannot be used.[citation needed]
NoSQL cannot necessarily give full ACID guarantees. Usually only eventual consistency is guaranteed or transactions limited to single data items. This means that given a sufficiently long period of time over which no changes are sent, all updates can be expected to propagate eventually through the system.[citation needed]
NoSQL has a distributed, fault-tolerant architecture. Several NoSQL systems employ a distributed architecture, with the data held in a redundant manner on several servers. In this way, the system can easily scale out by adding more servers, and failure of a server can be tolerated. This type of database typically scales horizontally and is used for managing large amounts of data, when the performance and real-time nature is more important than consistency (as in indexing a large number of documents, serving pages on high-traffic web sites, and delivering streaming media).[citation needed]
[edit] History
Carlo Strozzi used the term NoSQL in 1998 to name his lightweight, open-source relational database that did not expose the standard SQL interface.[4] Strozzi suggests that, as the current NoSQL movement "departs from the relational model altogether; it should therefore have been called more appropriately 'NoREL'.[5]
Eric Evans, a Rackspace employee, reintroduced the term NoSQL in early 2009 when Johan Oskarsson of Last.fm wanted to organize an event to discuss open-source distributed databases.[6] The name attempted to label the emergence of a growing number of non-relational, distributed data stores that often did not attempt to provide atomicity, consistency, isolation and durability guarantees that are key attributes of classic relational database systems.[7]
In 2011, work began on UnQL (Unstructured Query Language), a specification for a query language for NoSQL databases. Like XQuery it is designed to query collections (versus tables) of documents (versus rows) with loosely defined fields (versus columns). UnQL is claimed[by whom?] to be a superset of SQL within which SQL is a very constrained type of UnQL for which the queries always return the same fields (same number, names and types). However, UnQL does not cover the data definition language (DDL) SQL statements like CREATE TABLE or CREATE INDEX.[8]
[edit] Taxonomy





It has been suggested that this article or section be merged into Comparison of structured storage software. (Discuss) Proposed since March 2011. 







This section may require cleanup to meet Wikipedia's quality standards. No cleanup reason has been specified. Please help improve this section if you can. (March 2010) 


See also: Comparison of structured storage software
Often, NoSQL databases are categorized according to the way they store the data and fall under categories such as keyvalue stores, BigTable implementations, document store databases, and graph databases. With the rise of the real-time web, there was a need to provide information out of large volumes of data which more or less followed similar horizontal structures. As such, NoSQL databases are often highly optimized for retrieve and append operations and often offer little functionality beyond record storage (e.g. keyvalue stores). The reduced run time flexibility compared to full SQL systems is compensated by large gains in scalability and performance for certain data models.[citation needed]
NoSQL implementations can be categorized by their manner of implementation:
[edit] Document store
The central concept of a document store is the notion of a "document". While each document-oriented database implementation differs on the details of this definition, in general, they all assume that documents encapsulate and encode data (or information) in some standard formats or encodings. Encodings in use include XML, YAML, JSON, and BSON, as well as binary forms like PDF and Microsoft Office documents (MS Word, Excel, and so on).
Different implementations offer different ways of organizing and/or grouping documents:

Collections
Tags
Non-visible Metadata
Directory hierarchies

Compared to relational databases, for example, collections could be considered as tables as well as documents could be considered as records. But they are different: every record in a table has the same sequence of fields, while documents in a collection may have fields that are completely different.
Documents are addressed in the database via a unique key that represents that document. One of the other defining characteristics of a document-oriented database is that, beyond the simple key-document (or keyvalue) lookup that you can use to retrieve a document, the database will offer an API or query language that will allow retrieval of documents based on their contents.
Main articles: Document-oriented database and XML database


Name
Language
Notes


ArangoDB
C, C++ & Javascript
Multi model JSON document store


BaseX
Java, XQuery
XML database


Clusterpoint
C++
geared for Full text search


Couchbase Server
Erlang, C++
Support for JSON and binary documents


Apache CouchDB
Erlang
JSON store


eXist
Java, XQuery
XML database


Jackrabbit
Java



Lotus Notes and IBM Lotus Domino
LotusScript, Java, IBM X Pages, others
MultiValue


MarkLogic Server
XQuery, Java, REST
XML database with support for JSON, text, and binaries


MongoDB
C++, C#
BSON store (binary format JSON)


OpenLink Virtuoso
C++, C#, Java, SPARQL
middleware and database engine hybrid


OrientDB
Java



Sedna
XQuery, C++
XML database


SimpleDB
Erlang



Oracle NoSQL Database
Java



[edit] Graph
This kind of database is designed for data whose relations are well represented as a graph (elements interconnected with an undetermined number of relations between them). The kind of data could be social relations, public transport links, road maps or network topologies, for example.
Main article: Graph database


Name
Language
Notes


AllegroGraph
SPARQL
RDF GraphStore


ArangoDB
C, C++ & Javascript
Multi model JSON document store with graph support


IBM DB2
SPARQL
RDF GraphStore added in DB2 10


DEX
Java, C++
High-performance Graph Database


FlockDB
Scala



InfiniteGraph
Java
High-performance, scalable, distributed Graph Database


Neo4j
Java



OpenLink Virtuoso
C++, C#, Java, SPARQL
middleware and database engine hybrid


OrientDB
Java



Pregel




Sones GraphDB
C#



OWLIM
Java, SPARQL 1.1
RDF graph store with reasoning


[edit] Keyvalue store
Keyvalue stores allow the application to store its data in a schema-less way. The data could be stored in a datatype of a programming language or an object. Because of this, there is no need for a fixed data model.[9][10] The following types exist:
[edit] Eventuallyconsistent keyvalue store

Apache Cassandra
Dynamo
Hibari
OpenLink Virtuoso
Project Voldemort
Riak[11]

[edit] Hierarchical keyvalue store

GT.M[12]
InterSystems Cach

[edit] Hosted services

Freebase
OpenLink Virtuoso
Datastore on Google Appengine
Amazon DynamoDB
Cloudant Data Layer (CouchDB)

[edit] Keyvalue cache in RAM

memcached
OpenLink Virtuoso
Oracle Coherence
Redis
Hazelcast
Tuple space
Velocity

[edit] Keyvalue stores on solid state or rotating disk

ArangoDB
BigTable
CDB
Ceph
Couchbase Server
Keyspace
LevelDB
MemcacheDB
MongoDB
OpenLink Virtuoso
Tarantool
Tokyo Cabinet
Tuple space
Oracle NoSQL Database

[edit] Ordered keyvalue stores

Berkeley DB
IBM Informix C-ISAM
InfinityDB
MemcacheDB
NDBM

[edit] Multivalue databases

Northgate Information Solutions Reality, the original Pick/MV Database
Extensible Storage Engine (ESE/NT)
jBASE
OpenQM
Revelation Software's OpenInsight
Rocket U2
D3 Pick database
InterSystems Cach
InfinityDB

[edit] Object database
Main article: Object database

db4o
Eloquera
GemStone/S
InterSystems Cach
JADE
NeoDatis ODB
ObjectDB
Objectivity/DB
ObjectStore
OpenLink Virtuoso
Versant Object Database
Wakanda
ZODB

[edit] RDF database

Meronymy SPARQL Database Server

[edit] Tabular

Apache Accumulo
BigTable
Apache Hbase
Hypertable
Mnesia
OpenLink Virtuoso

[edit] Tuple store

Apache River
OpenLink Virtuoso
Tarantool

[edit] See also

CAP theorem
Comparison of object database management systems
Comparison of structured storage software
Faceted search
List of object database management systems
Triplestore
RDF Database
Distributed cache

[edit] References


^ "NoSQL Definition". http://nosql-database.org/.
^ Callaghan, Mark. "MySQL and Database Engineering". https://www.facebook.com/notes/facebook-engineering/mysql-and-database-engineering-mark-callaghan/10150599729938920. Retrieved 2012-03-07.
^ Cole, Jeremy. "MySQL at Twitter". http://engineering.twitter.com/2012/04/mysql-at-twitter.html. Retrieved 2012-04-16.
^ Lith, Adam; Jakob Mattson (2010). "Investigating storage solutions for large data: A comparison of well performing and scalable data storage solutions for real time extraction and batch insertion of data" (PDF). Gteborg: Department of Computer Science and Engineering, Chalmers University of Technology. p.70. http://publications.lib.chalmers.se/records/fulltext/123839.pdf. Retrieved 12 May 2011. "Carlo Strozzi first used the term NoSQL in 1998 as a name for his open source relational database that did not offer a SQL interface[...]"
^ "NoSQL Relational Database Management System: Home Page". Strozzi.it. 2 October 2007. http://www.strozzi.it/cgi-bin/CSA/tw7/I/en_US/nosql/Home%20Page. Retrieved 29 March 2010.
^ "NoSQL 2009". Blog.sym-link.com. 12 May 2009. http://blog.sym-link.com/2009/05/12/nosql_2009.html. Retrieved 29 March 2010.
^ Mike Chapple. "The ACID Model". http://databases.about.com/od/specificproducts/a/acid.htm.
^ Avram, Abel (04). "Interview: Richard Hipp on UnQL, a New Query Language for Document Databases". http://www.infoq.com. http://www.infoq.com/news/2011/08/UnQL. Retrieved 7 September 2011.
^ Sandy (14 January 2011). "Key Value stores and the NoSQL movement". http://dba.stackexchange.com/questions/607/what-is-a-key-value-store-database: Stackexchange. http://dba.stackexchange.com/a/619. Retrieved 1 January 2012. "Keyvalue stores allow the application developer to store schema-less data. This data usually consists of a string that represents the key, and the actual data that is considered to be the value in the "keyvalue" relationship. The data itself is usually some kind of primitive of the programming language (a string, an integer, or an array) or an object that is being marshaled by the programming language's bindings to the keyvalue store. This structure replaces the need for a fixed data model and allows proper formatting."
^ Marc Seeger (21 September 2009). "Key-Value Stores: a practical overview". http://blog.marc-seeger.de/2009/09/21/key-value-stores-a-practical-overview/: Marc Seeger. http://blog.marc-seeger.de/assets/papers/Ultra_Large_Sites_SS09-Seeger_Key_Value_Stores.pdf. Retrieved 1 January 2012. "Keyvalue stores provide a high-performance alternative to relational database systems with respect to storing and accessing data. This paper provides a short overview of some of the currently available keyvalue stores and their interface to the Ruby programming language."
^ "Riak: An Open Source Scalable Data Store". 28 November 2010. https://wiki.basho.com. Retrieved 28 November 2010.
^ Tweed, Rob; George James (2010). "A Universal NoSQL Engine, Using a Tried and Tested Technology" (PDF). p.25. http://www.mgateway.com/docs/universalNoSQL.pdf. "Without exception, the most successful and well-known of the NoSQL databases have been developed from scratch, all within just the last few years. Strangely, it seems that nobody looked around to see whether there were any existing, successfully implemented database technologies that could have provided a sound foundation for meeting Web-scale demands. Had they done so, they might have discovered two products, GT.M and Cach..."


[edit] Further reading

Pramod Sadalage and Martin Fowler (2012). NoSQL Distilled: A Brief Guide to the Emerging World of Polyglot Persistence. Addison-Wesley. ISBN0-321-82662-0.

[edit] External links

NoSQL whitepaper
NoSQL general introduction article









v
t
e


Database management systems









Database models
Database normalization
Database storage
Distributed DBMS
Federated database system
Referential integrity
Relational algebra
Relational calculus
Relational database
Relational DBMS
Relational model
Object-relational database
Transaction processing








Concepts



Database
ACID
CRUD
Null
Candidate key
Foreign key
Primary key
Superkey
Surrogate key
Armstrong's axioms
NoSQL








Objects



Relation

table
column
row


View
Transaction
Log
Trigger
Index
Stored procedure
Cursor
Partition








Components



Concurrency control
Data dictionary
JDBC
XQJ
ODBC
Query language
Query optimizer
Query plan








Functions



Administration and automation
Query optimization
Replication











Database products
Object-oriented

comparison


Relational

comparison


Document-oriented
NewSQL








 
NewPP limit report
Preprocessor visited node count: 11702/1000000
Preprocessor generated node count: 38338/1500000
Post-expand include size: 84240/2048000 bytes
Template argument size: 43272/2048000 bytes
Highest expansion depth: 21/40
Expensive parser function count: 14/500

 Saved in parser cache with key enwiki:pcache:idhash:23968131-0!*!0!!en!4!* and timestamp 20121219020051 
  /bodycontent 
 printfooter 

				Retrieved from "http://en.wikipedia.org/w/index.php?title=NoSQL&oldid=528061213"				
 /printfooter 
 catlinks 
Categories: Database management systemsData managementDistributed data storesNoSQLHidden categories: Wikipedia articles needing rewrite from May 2012Articles needing additional references from November 2012All articles needing additional referencesAll articles with unsourced statementsArticles with unsourced statements from November 2012Articles with specifically marked weasel-worded phrases from May 2012Articles to be merged from March 2011All articles to be mergedArticles needing cleanup from March 2010All articles needing cleanupCleanup tagged articles without a reason field from March 2010Wikipedia pages needing cleanup from March 2010Articles with unsourced statements from February 2012Use dmy dates from February 2012  /catlinks 

 debughtml 
 /debughtml 

 /bodyContent 

 