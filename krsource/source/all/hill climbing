
Hill climbing
 /firstHeading 
 bodyContent 

 tagline 
From Wikipedia, the free encyclopedia
 /tagline 
 subtitle 

 /subtitle 
 jumpto 

					Jump to:					navigation, 					search

 /jumpto 
 bodycontent 
This article is about the mathematical algorithm.  For other meanings such as the branch of motorsport, see Hillclimbing (disambiguation).


Graph and tree
search algorithms





A*
B*
Beam
BellmanFord
Best-first
Bidirectional
Borvka
Branch & bound
BFS
British Museum
D*
DFS
Depth-limited
Dijkstra
Edmonds
FloydWarshall
Hill climbing
Iterative deepening
Kruskal
Johnson
Lexicographic BFS
Prim
Uniform-cost




Listings




Graph algorithms
Search algorithms
List of graph algorithms




Related topics




Dynamic programming
Graph traversal
Tree traversal
Search games







v
t
e





In computer science, hill climbing is a mathematical optimization technique which belongs to the family of local search. It is an iterative algorithm that starts with an arbitrary solution to a problem, then attempts to find a better solution by incrementally changing a single element of the solution. If the change produces a better solution, an incremental change is made to the new solution, repeating until no further improvements can be found.
For example, hill climbing can be applied to the travelling salesman problem. It is easy to find an initial solution that visits all the cities but will be very poor compared to the optimal solution. The algorithm starts with such a solution and makes small improvements to it, such as switching the order in which two cities are visited. Eventually, a much shorter route is likely to be obtained.
Hill climbing is good for finding a local optimum (a solution that cannot be improved by considering a neighbouring configuration) but it is not guaranteed to find the best possible solution (the global optimum) out of all possible solutions (the search space). The characteristic that only local optima are guaranteed can be cured by using restarts (repeated local search), or more complex schemes based on iterations, like iterated local search, on memory, like reactive search optimization and tabu search, on memory-less stochastic modifications, like simulated annealing.
The relative simplicity of the algorithm makes it a popular first choice amongst optimizing algorithms. It is used widely in artificial intelligence, for reaching a goal state from a starting node. Choice of next node and starting node can be varied to give a list of related algorithms. Although more advanced algorithms such as simulated annealing or tabu search may give better results, in some situations hill climbing works just as well. Hill climbing can often produce a better result than other algorithms when the amount of time available to perform a search is limited, such as with real-time systems. It is an anytime algorithm: it can return a valid solution even if it's interrupted at any time before it ends.




Contents


1 Mathematical description
2 Variants
3 Problems

3.1 Local maxima
3.2 Ridges and alleys
3.3 Plateau


4 Pseudocode
5 See also
6 References
7 External links




[edit] Mathematical description
Hill climbing attempts to maximize (or minimize) a target function , where  is a vector of continuous and/or discrete values. At each iteration, hill climbing will adjust a single element in  and determine whether the change improves the value of . (Note that this differs from gradient descent methods, which adjust all of the values in  at each iteration according to the gradient of the hill.) With hill climbing, any change that improves  is accepted, and the process continues until no change can be found to improve the value of .  is then said to be "locally optimal".
In discrete vector spaces, each possible value for  may be visualized as a vertex in a graph. Hill climbing will follow the graph from vertex to vertex, always locally increasing (or decreasing) the value of , until a local maximum (or local minimum)  is reached.




A convex surface. Hill-climbers are well-suited for optimizing over such surfaces, and will converge to the global maximum.


[edit] Variants
In simple hill climbing, the first closer node is chosen, whereas in steepest ascent hill climbing all successors are compared and the closest to the solution is chosen. Both forms fail if there is no closer node, which may happen if there are local maxima in the search space which are not solutions. Steepest ascent hill climbing is similar to best-first search, which tries all possible extensions of the current path instead of only one.
Stochastic hill climbing does not examine all neighbors before deciding how to move. Rather, it selects a neighbor at random, and decides (based on the amount of improvement in that neighbor) whether to move to that neighbor or to examine another.
Coordinate descent does a line search along one coordinate direction at the current point in each iteration. Some versions of coordinate descent randomly pick a different coordinate direction each iteration.
Random-restart hill climbing is a meta-algorithm built on top of the hill climbing algorithm. It is also known as Shotgun hill climbing. It iteratively does hill-climbing, each time with a random initial condition . The best  is kept: if a new run of hill climbing produces a better  than the stored state, it replaces the stored state.
Random-restart hill climbing is a surprisingly effective algorithm in many cases. It turns out that it is often better to spend CPU time exploring the space, than carefully optimizing from an initial condition.[original research?]
[edit] Problems
[edit] Local maxima




A surface with two local maxima. (Only one of them is the global maximum.) If a hill-climber begins in a poor location, it may converge to the lower maximum.


A problem with hill climbing is that it will find only local maxima. Unless the heuristic is convex, it may not reach a global maximum. Other local search algorithms try to overcome this problem such as stochastic hill climbing, random walks and simulated annealing.
[edit] Ridges and alleys




A ridge


Ridges are a challenging problem for hill climbers that optimize in continuous spaces. Because hill climbers only adjust one element in the vector at a time, each step will move in an axis-aligned direction. If the target function creates a narrow ridge that ascends in a non-axis-aligned direction (or if the goal is to minimize, a narrow alley that descends in a non-axis-aligned direction), then the hill climber can only ascend the ridge (or descend the alley) by zig-zagging. If the sides of the ridge (or alley) are very steep, then the hill climber may be forced to take very tiny steps as it zig-zags toward a better position. Thus, it may take an unreasonable length of time for it to ascend the ridge (or descend the alley).
By contrast, gradient descent methods can move in any direction that the ridge or alley may ascend or descend. Hence, gradient descent or conjugate gradient method is generally preferred over hill climbing when the target function is differentiable. Hill climbers, however, have the advantage of not requiring the target function to be differentiable, so hill climbers may be preferred when the target function is complex.
[edit] Plateau
Another problem that sometimes occurs with hill climbing is that of a plateau. A plateau is encountered when the search space is flat, or sufficiently flat that the value returned by the target function is indistinguishable from the value returned for nearby regions due to the precision used by the machine to represent its value. In such cases, the hill climber may not be able to determine in which direction it should step, and may wander in a direction that never leads to improvement.
[edit] Pseudocode

Discrete Space Hill Climbing Algorithm
   currentNode = startNode;
   loop do
      L = NEIGHBORS(currentNode);
      nextEval = -INF;
      nextNode = NULL;
      for all x in L 
         if (EVAL(x) > nextEval)
              nextNode = x;
              nextEval = EVAL(x);
      if nextEval <= EVAL(currentNode)
         //Return current node since no better neighbors exist
         return currentNode;
      currentNode = nextNode;


Continuous Space Hill Climbing Algorithm
   currentPoint = initialPoint;    // the zero-magnitude vector is common
   stepSize = initialStepSizes;    // a vector of all 1's is common
   acceleration = someAcceleration; // a value such as 1.2 is common
   candidate[0] = -acceleration;
   candidate[1] = -1 / acceleration;
   candidate[2] = 0;
   candidate[3] = 1 / acceleration;
   candidate[4] = acceleration;
   loop do
      before = EVAL(currentPoint);
      for each element i in currentPoint do
         best = -1;
         bestScore = -INF;
         for j from 0 to 4         // try each of 5 candidate locations
            currentPoint[i] = currentPoint[i] + stepSize[i] * candidate[j];
            temp = EVAL(currentPoint);
            currentPoint[i] = currentPoint[i] - stepSize[i] * candidate[j];
            if(temp > bestScore)
                 bestScore = temp;
                 best = j;
         if candidate[best] is not 0
            currentPoint[i] = currentPoint[i] + stepSize[i] * candidate[best];
            stepSize[i] = stepSize[i] * candidate[best]; // accelerate
      if (EVAL(currentPoint) - before) < epsilon 
         return currentPoint;

Contrast genetic algorithm; random optimization.
[edit] See also

Gradient descent
Greedy algorithm
Ttonnement
Mean-shift

[edit] References

Russell, Stuart J.; Norvig, Peter (2003), Artificial Intelligence: A Modern Approach (2nd ed.), Upper Saddle River, New Jersey: Prentice Hall, pp.111114, ISBN0-13-790395-2, http://aima.cs.berkeley.edu/

This article is based on material taken from the Free On-line Dictionary of Computing prior to 1 November 2008 and incorporated under the "relicensing" terms of the GFDL, version 1.3 or later.
[edit] External links



Wikibooks has more on the topic of: Hill climbing



Hill Climbing visualization A visualization of a hill-climbing (greedy) solution to the N-Queens puzzle by Yuval Baror.









v
t
e


Optimization: Algorithms, methods, and heuristics











Unconstrained nonlinear: Methods calling ...










... functions



Golden section search
Interpolation methods
Line search
Successive parabolic interpolation








... and gradients




Convergence



Trust region
Wolfe conditions








QuasiNewton



BFGS and L-BFGS
DFP
Symmetric rank-one (SR1)








Other methods



GaussNewton
Gradient
LevenbergMarquardt
Conjugate gradient











... and Hessians



Newton's method
























Constrained nonlinear










General



Barrier methods
Penalty methods








Differentiable



Augmented Lagrangian methods
Sequential quadratic programming
Successive linear programming



















Convex optimization










Convex minimization



Cutting-plane method
Reduced gradient (FrankWolfe)
Subgradient method








Linear and
quadratic




Interior point



Ellipsoid algorithm of Khachiyan
Projective algorithm of Karmarkar








Basis-Exchange



Simplex algorithm of Dantzig
Criss-cross algorithm
Principal pivoting algorithm of Lemke






















Combinatorial










Paradigms



Approximation algorithm
Dynamic programming
Greedy algorithm
Integer programming

Branch & bound or cut










Graph algorithms




Minimum spanning tree



BellmanFord
Borvka
Dijkstra
FloydWarshall
Johnson
Kruskal











Network flows



Dinic
EdmondsKarp
FordFulkerson
Push-relabel maximum flow



















Metaheuristics









Evolutionary algorithm
Hill climbing
Local search
Simulated annealing
Tabu search














Categories

Algorithms and methods
Heuristics


Software








 
NewPP limit report
Preprocessor visited node count: 4777/1000000
Preprocessor generated node count: 38463/1500000
Post-expand include size: 125219/2048000 bytes
Template argument size: 87822/2048000 bytes
Highest expansion depth: 22/40
Expensive parser function count: 1/500

 Saved in parser cache with key enwiki:pcache:idhash:364002-0!0!0!!en!4!* and timestamp 20130115063240 
  /bodycontent 
 printfooter 

				Retrieved from "http://en.wikipedia.org/w/index.php?title=Hill_climbing&oldid=512164147"				
 /printfooter 
 catlinks 
Categories: Optimization algorithms and methodsSearch algorithmsHidden categories: All articles that may contain original researchArticles that may contain original research from September 2007  /catlinks 

 debughtml 
 /debughtml 

 /bodyContent 

 