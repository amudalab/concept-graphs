
Tree traversal
 /firstHeading 
 bodyContent 

 tagline 
From Wikipedia, the free encyclopedia
 /tagline 
 subtitle 
(Redirected from In-order traversal)
 /subtitle 
 jumpto 

					Jump to:					navigation, 					search

 /jumpto 
 bodycontent 





This article needs additional citations for verification. Please help improve this article by adding citations to reliable sources. Unsourced material may be challenged and removed. (May 2009) 




Graph and tree
search algorithms





A*
B*
Beam
BellmanFord
Best-first
Bidirectional
Borvka
Branch & bound
BFS
British Museum
D*
DFS
Depth-limited
Dijkstra
Edmonds
FloydWarshall
Hill climbing
Iterative deepening
Kruskal
Johnson
Lexicographic BFS
Prim
Uniform-cost




Listings




Graph algorithms
Search algorithms
List of graph algorithms




Related topics




Dynamic programming
Graph traversal
Tree traversal
Search games







v
t
e





In computer science, tree traversal refers to the process of visiting (examining and/or updating) each node in a tree data structure, exactly once, in a systematic way. Such traversals are classified by the order in which the nodes are visited. The following algorithms are described for a binary tree, but they may be generalized to other trees as well.




Contents


1 Types

1.1 Depth-first
1.2 Breadth-first
1.3 Uses


2 Example
3 Implementations

3.1 Depth-first

3.1.1 Pre-order
3.1.2 In-order
3.1.3 Post-order
3.1.4 Morris in-order traversal using threading


3.2 Breadth-first


4 Infinite trees
5 References
6 External links




[edit] Types
Compared to linear data structures like linked lists and one dimensional arrays, which have a canonical method of traversal (namely in linear order), tree structures can be traversed in many different ways. Starting at the root of a binary tree, there are three main steps that can be performed and the order in which they are performed defines the traversal type. These steps (in no particular order) are: performing an action on the current node (referred to as "visiting" the node), traversing to the left child node, and traversing to the right child node.
Traversing a tree involves iterating (looping) over all nodes in some manner. Because from a given node there is more than one possible next node (it is not a linear data structure), then, assuming sequential computation (not parallel), some nodes must be deferred  stored in some way for later visiting. This is often done via a stack (LIFO) or queue (FIFO). As a tree is a self-referential (recursively defined) data structure, traversal can naturally be described by recursion or, more subtly, corecursion, in which case the deferred nodes are stored implicitly  in the case of recursion, in the call stack.
The name given to a particular style of traversal comes from the order in which nodes are visited. Most simply, does one go down first (depth-first: first child, then grandchild before second child) or across first (breadth-first: first child, then second child before grandchildren)? Depth-first traversal is further classified by position of the root element with regard to the left and right nodes. Imagine that the left and right nodes are constant in space, then the root node could be placed to the left of the left node (pre-order), between the left and right node (in-order), or to the right of the right node (post-order). There is no equivalent variation in breadth-first traversal  given an ordering of children, "breadth-first" is unambiguous.
For the purpose of illustration, it is assumed that left nodes always have priority over right nodes. This ordering can be reversed as long as the same ordering is assumed for all traversal methods.
Depth-first traversal is easily implemented via a stack, including recursively (via the call stack), while breadth-first traversal is easily implemented via a queue, including corecursively.
Beyond these basic traversals, various more complex or hybrid schemes are possible, such as depth-limited searchs such as iterative deepening depth-first search.
[edit] Depth-first
See also: Depth-first search
There are three types of depth-first traversal: pre-order, in-order and post-order. For a binary tree, they are defined as operations recursively at each node, starting with the root node follows:
Pre-order:[1]:

Visit the root.
Traverse the left subtree.
Traverse the right subtree.

In-order (symmetric):[1]

Traverse the left subtree.
Visit the root.
Traverse the right subtree.

Post-order:[1]:

Traverse the left subtree.
Traverse the right subtree.
Visit the root.

The trace of a traversal is called a sequentialization of the tree. No one sequentialisation according to pre-, in- or post-order describes the underlying tree uniquely, but any combination of two types of sequentialisation does.[2]

Generic tree

To traverse any tree in depth-first order, perform the following operations recursively at each node:

Perform pre-order operation
for i=1 to n-1 do

Visit child[i], if present
Perform in-order operation


Visit child[n], if present
Perform post-order operation

where n is the number of child nodes. Depending on the problem at hand, the pre-order, in-order or post-order operations may be void, or you may only want to visit a specific child node, so these operations are optional. Also, in practice more than one of pre-order, in-order and post-order operations may be required. For example, when inserting into a ternary tree, a pre-order operation is performed by comparing items. A post-order operation may be needed afterwards to re-balance the tree.
[edit] Breadth-first
See also: Breadth-first search
Trees can also be traversed in level-order, where we visit every node on a level before going to a lower level.

[edit] Uses
Pre-order traversal while duplicating nodes and values can make a complete duplicate of a binary tree. It can also be used to make a prefix expression (Polish notation) from expression trees: traverse the expression tree pre-orderly.
In-order traversal is very commonly used on binary search trees because it returns values from the underlying set in order, according to the comparator that set up the binary search tree (hence the name).
Post-order traversal while deleting or freeing nodes and values can delete or free an entire binary tree. It can also generate a postfix representation of a binary tree.
[edit] Example
Binary tree: 

Depth-first


Pre-order traversal sequence: F, B, A, D, C, E, G, I, H (root, left, right)
In-order traversal sequence: A, B, C, D, E, F, G, H ,I (left, root, right)
Post-order traversal sequence: A, C, E, D, B, H, I, G, F (left, right, root)


Breadth-first


Level-order traversal sequence: F, B, G, A, D, I, C, E, H

[edit] Implementations
[edit] Depth-first
[edit] Pre-order

preorder(node)
  if node == null then return
  visit(node)
  preorder(node.left) 
  preorder(node.right)


iterativePreorder(node)
  parentStack = empty stack
  while not parentStack.isEmpty() or node != null
    if node != null then
      parentStack.push(node)
      visit(node)
      node = node.left
    else
      node = parentStack.pop()
      node = node.right

[edit] In-order

inorder(node)
  if node == null then return
  inorder(node.left)
  visit(node)
  inorder(node.right)


iterativeInorder(node)
  parentStack = empty stack
  while not parentStack.isEmpty() or node != null
    if node != null then
      parentStack.push(node)
      node = node.left
    else
      node = parentStack.pop()
      visit(node)
      node = node.right

[edit] Post-order

postorder(node)
  if node == null then return
  postorder(node.left)
  postorder(node.right)
  visit(node)


iterativePostorder(node)
  if node == null then return
  nodeStack.push(node)
  prevNode = null
  while not nodeStack.isEmpty()
    currNode = nodeStack.peek()
    if prevNode == null or prevNode.left == currNode or prevNode.right == currNode
      if currNode.left != null
        nodeStack.push(currNode.left)
      else if currNode.right != null
        nodeStack.push(currNode.right)
    else if currNode.left == prevNode
      if currNode.right != null
        nodeStack.push(currNode.right)
    else
      visit(currNode)
      nodeStack.pop()
    prevNode = currNode

All the above implementations require call stack space proportional to the height of the tree. In a poorly balanced tree, this can be considerable. We can remove the stack requirement by maintaining parent pointers in each node, or by threading the tree (next section).
[edit] Morris in-order traversal using threading
A binary tree is threaded by making every left child pointer point to the in-order predecessor of the node and every right child pointer point to the in-order successor of the node.
Advantages:

Avoids recursion, which uses a call stack and consumes memory and time.
The node keeps a record of its parent.

Disadvantages:

The tree is more complex.
It is more prone to errors when both the children are not present and both values of nodes point to their ancestors.

Morris traversal is an implementation of in-order traversal that uses threading:

Create links to the in-order successor
Print the data using these links
Revert the changes to restore original tree.

[edit] Breadth-first
Also, listed below is pseudocode for a simple queue based level order traversal, and will require space proportional to the maximum number of nodes at a given depth. This can be as much as the total number of nodes / 2. A more space-efficient approach for this type of traversal can be implemented using an iterative deepening depth-first search.

levelorder(root)
  q = empty queue
  q.enqueue(root)
  while not q.empty do
    node := q.dequeue()
    visit(node)
    if node.left  null
      q.enqueue(node.left)
    if node.right  null
      q.enqueue(node.right)

[edit] Infinite trees
While traversal is usually done for trees with a finite number of nodes (and hence finite depth and finite branching factor) it can also be done for infinite trees. This is of particular interest in functional programming (particularly with lazy evaluation), as infinite data structures can often be easily defined and worked with, though they are not (strictly) evaluated, as this would take infinite time. Some finite trees are too large to represent explicitly, such as the game tree for chess or go, and so it is useful to analyze them as if they were infinite.
A basic requirement for traversal is to visit every node. For infinite trees, simple algorithms often fail this. For example, given a binary tree of infinite depth, a depth-first traversal will go down one side (by convention the left side) of the tree, never visiting the rest, and indeed if in-order or post-order will never visit any nodes, as it has not reached a leaf (and in fact never will). By contrast, a breadth-first (level-order) traversal will traverse a binary tree of infinite depth without problem, and indeed will traverse any tree with bounded branching factor.
On the other hand, given a tree of depth 2, where the root node has infinitely many children, and each of these children has two children, a depth-first traversal will visit all nodes, as once it exhausts the grandchildren (children of children of one node), it will move on to the next (assuming it is not post-order, in which case it never reaches the root). By contrast, a breadth-first traversal will never reach the grandchildren, as it seeks to exhaust the children first.
A more sophisticated analysis of running time can be given via infinite ordinal numbers; for example, the breadth-first traversal of the depth 2 tree above will take?2 steps:? for the first level, and then another? for the second level.
Thus, simple depth-first or breadth-first searches do not traverse every infinite tree, and are not efficient on very large trees. However, hybrid methods can traverse any (countably) infinite tree, essentially via a diagonal argument ("diagonal"  a combination of vertical and horizontal  corresponds to a combination of depth and breadth).

Concretely, given the infinitely branching tree of infinite depth, label the root node  the children of the root node  the grandchildren  and so on. The nodes are thus in a one-to-one correspondence with finite (possibly empty) sequences of positive numbers, which are countable and can be placed in order first by sum of entries, and then by lexicographic order within a given sum (only finitely many sequences sum to a given value, so all entries are reached  formally there are a finite number of compositions of a given natural number, specifically 2n-1compositions of n=1;), which gives a traversal. Explicitly:

0: ()
1: (1)
2: (1,1) (2)
3: (1,1,1) (1,2) (2,1) (3)
4: (1,1,1,1) (1,1,2) (1,2,1) (1,3) (2,1,1) (2,2) (3,1) (4)

etc.
This can be interpreted as mapping the infinite depth binary tree onto this tree and then applying breadth-first traversal: replace the "down" edges connecting a parent node to its second and later children with "right" edges from the 1st child to the 2nd child, 2nd child to third child, etc. Thus at each step one can either go down (append a (,1) to the end) or go right (add 1 to the last number) (except the root, which is extra and can only go down), which shows the correspondence between the infinite binary tree and the above numbering; the sum of the entries (minus 1) corresponds to the distance from the root, which agrees with the 2n-1 nodes at depth n-1 in the infinite binary tree (2 corresponds to binary).
[edit] References

^ a b c http://webdocs.cs.ualberta.ca/~holte/T26/tree-traversal.html
^ Which combinations of pre-, post- and in-order sequentialisation are unique?


Dale, Nell. Lilly, Susan D. "Pascal Plus Data Structures". D. C. Heath and Company. Lexington, MA. 1995. Fourth Edition.
Drozdek, Adam. "Data Structures and Algorithms in C++". Brook/Cole. Pacific Grove, CA. 2001. Second edition.
http://www.math.northwestern.edu/~mlerma/courses/cs310-05s/notes/dm-treetran

[edit] External links

Animation Applet of Binary Tree Traversal
The Adjacency List Model for Processing Trees with SQL
Storing Hierarchical Data in a Database with traversal examples in PHP
Managing Hierarchical Data in MySQL
Working with Graphs in MySQL
Non-recursive traversal of DOM trees in JavaScript
Sample code for recursive and iterative tree traversal implemented in C.
Sample code for recursive tree traversal in C#.
See tree traversal implemented in various programming language on Rosetta Code
Tree traversal without recursion

 
NewPP limit report
Preprocessor visited node count: 1040/1000000
Preprocessor generated node count: 11535/1500000
Post-expand include size: 13173/2048000 bytes
Template argument size: 4992/2048000 bytes
Highest expansion depth: 17/40
Expensive parser function count: 1/500

 Saved in parser cache with key enwiki:pcache:idhash:597584-0!0!0!!en!4!* and timestamp 20130125132446 
  /bodycontent 
 printfooter 

				Retrieved from "http://en.wikipedia.org/w/index.php?title=Tree_traversal&oldid=533659477"				
 /printfooter 
 catlinks 
Categories: Trees (data structures)Graph algorithmsRecursionHidden categories: Articles needing additional references from May 2009All articles needing additional referencesArticles with example Haskell codeArticles with example Java codeArticles with example pseudocode  /catlinks 

 debughtml 
 /debughtml 

 /bodyContent 

 