
Comparison sort
 /firstHeading 
 bodyContent 

 tagline 
From Wikipedia, the free encyclopedia
 /tagline 
 subtitle 

 /subtitle 
 jumpto 

					Jump to:					navigation, 					search

 /jumpto 
 bodycontent 




Sorting a set of unlabelled weights by weight using only a balance scale requires a comparison sort algorithm


A comparison sort is a type of sorting algorithm that only reads the list elements through a single abstract comparison operation (often a "less than or equal to" operator) that determines which of two elements should occur first in the final sorted list. The only requirement is that the operator obey two of the properties of a total order:

if a  b and b  c then a  c (transitivity)
for all a and b, either a  b or b  a (totalness or trichotomy).

It is possible that both a  b and b  a; in this case either may come first in the sorted list. In a stable sort, the input order determines the sorted order in this case.
A metaphor for thinking about comparison sorts is that someone has a set of unlabelled weights and a balance scale. Their goal is to line up the weights in order by their weight without any information except that obtained by placing two weights on the scale and seeing which one is heavier (or if they weigh the same).




Contents


1 Examples
2 Performance limits and advantages of different sorting techniques
3 Number of comparisons required to sort a list

3.1 Lower bound for the average number of comparisons


4 Notes
5 References




[edit] Examples




Quicksort in action on a list of numbers. The horizontal lines are pivot values.


Some of the most well-known comparison sorts include:

Quick sort
Heap sort
Merge sort
Intro sort
Insertion sort
Selection sort
Bubble sort
Odd-even sort
Cocktail sort
Cycle sort
Merge insertion (Ford-Johnson) sort
Smoothsort
Timsort

There are many integer sorting algorithms that are not comparison sorts; they include:

Radix sort (examines individual bits of keys)
Counting sort (indexes using key values)
Bucket sort (examines bits of keys)

[edit] Performance limits and advantages of different sorting techniques
There are fundamental limits on the performance of comparison sorts. A comparison sort must have a lower bound of (n log n) comparison operations.[1] This is a consequence of the limited information available through comparisons alone  or, to put it differently, of the vague algebraic structure of totally ordered sets. In this sense, mergesort, heapsort, and introsort are asymptotically optimal in terms of the number of comparisons they must perform, although this metric neglects other operations. The three non-comparison sorts above achieve O(n) performance by using operations other than comparisons, allowing them to sidestep this lower bound (assuming elements are constant-sized).
Nevertheless, comparison sorts offer the notable advantage that control over the comparison function allows sorting of many different datatypes and fine control over how the list is sorted. For example, reversing the result of the comparison function allows the list to be sorted in reverse; and one can sort a list of tuples in lexicographic order by just creating a comparison function that compares each part in sequence:

function tupleCompare((lefta, leftb, leftc), (righta, rightb, rightc))
    if lefta  righta
        return compare(lefta, righta)
    else if leftb  rightb
        return compare(leftb, rightb)
    else
        return compare(leftc, rightc)

Balanced ternary notation allows comparisons to be made in one step, whose result will be one of "less than", "greater than" or "equal to".
Comparison sorts generally adapt more easily to complex orders such as the order of floating-point numbers. Additionally, once a comparison function is written, any comparison sort can be used without modification; non-comparison sorts typically require specialized versions for each datatype.
This flexibility, together with the efficiency of the above comparison sorting algorithms on modern computers, has led to widespread preference for comparison sorts in most practical work.
[edit] Number of comparisons required to sort a list
The number of comparisons that a comparison sort algorithm requires increases at least in proportion to , where  is the number of elements to sort. This bound is asymptotically tight.
Given a list of distinct numbers (we can assume this because this is a worst-case analysis), there are n factorial permutations exactly one of which is the list in sorted order. The sort algorithm must gain enough information from the comparisons to identify the correct permutation. If the algorithm always completes after at most f(n) steps, it cannot distinguish more than 2f(n) cases because the keys are distinct and each comparison has only two possible outcomes. Therefore,

, or equivalently 

From Stirling's approximation we know that  is . This provides the lower-bound part of the claim.
An identical upper bound follows from the existence of the algorithms that attain this bound in the worst case.
The above argument provides an absolute, rather than only asymptotic lower bound on the number of comparisons, namely  comparisons. This lower bound is fairly good (it can be approached within a linear tolerance by a simple merge sort), but it is known to be inexact. For example, , but the minimal number of comparisons to sort 13 elements has been proved to be 34 .[2]
Determining the exact number of comparisons needed to sort a given number of entries is a computationally hard problem even for small n, and no simple formula for the solution is known. For some of the few concrete values that have been computed, see A036604.
[edit] Lower bound for the average number of comparisons
A similar bound applies to the average number of comparisons. Assuming that

all keys are distinct, i.e. every comparison will give either a>b or a<b, and
the input is a random permutation, chosen uniformly from the set of all possible permutations of n elements,

it is impossible to determine which order the input is in with fewer than log2(n!) comparisons on average.
This can be most easily seen using concepts from information theory. The Shannon entropy of such a random permutation is log2(n!) bits. Since a comparison can give only two results, the maximum amount of information it provides is 1 bit. Therefore after k comparisons the remaining entropy of the permutation, given the results of those comparisons, is at least log2(n!)-k bits on average. To perform the sort, complete information is needed, so the remaining entropy must be 0. It follows that k must be at least log2(n!).
Note that this differs from the worst case argument given above, in that it does not allow rounding up to the nearest integer. For example, for n=3, the lower bound for the worst case is 3, the lower bound for the average case as shown above is approximately 2.58, while the highest lower bound for the average case is 8/3, approximately 2.67.
In the case that multiple items may have the same key, there is no obvious statistical interpretation for the term "average case", so an argument like the above cannot be applied without making specific assumptions about the distribution of keys.
[edit] Notes

^ http://planetmath.org/encyclopedia/LowerBoundForSorting.html
^ Marcin Peczarski: The Ford-Johnson algorithm is still unbeaten for less than 47 elements. Inf. Process. Lett. 101(3): 126-128 (2007) doi:10.1016/j.ipl.2006.09.001

[edit] References

Donald Knuth. The Art of Computer Programming, Volume 3: Sorting and Searching, Second Edition. Addison-Wesley, 1997. ISBN 0-201-89685-0. Section 5.3.1: Minimum-Comparison Sorting, pp.180197.
Thomas H. Cormen, Charles E. Leiserson, Ronald L. Rivest, and Clifford Stein. Introduction to Algorithms, Second Edition. MIT Press and McGraw-Hill, 2001. ISBN 0-262-03293-7. Section 8.1: Lower bounds for sorting, pp.165168.









v
t
e


Sorting algorithms






Theory



Computational complexity theory
Big O notation
Total order
Lists
Stability
Comparison sort
Adaptive sort
Sorting network
Integer sorting








Exchange sorts



Bubble sort
Cocktail sort
Oddeven sort
Comb sort
Gnome sort
Quicksort
Stooge sort
Bogosort








Selection sorts



Selection sort
Heapsort
Smoothsort
Cartesian tree sort
Tournament sort
Cycle sort








Insertion sorts



Insertion sort
Shellsort
Tree sort
Library sort
Patience sorting








Merge sorts



Merge sort
Cascade merge sort
Oscillating merge sort
Polyphase merge sort
Strand sort








Distribution sorts



American flag sort
Bead sort
Bucket sort
Burstsort
Counting sort
Pigeonhole sort
Proxmap sort
Radix sort
Flashsort








Concurrent sorts



Bitonic sorter
Batcher oddeven mergesort
Pairwise sorting network








Hybrid sorts



Timsort
Introsort
Spreadsort
UnShuffle sort
JSort








Other



Topological sorting
Pancake sorting
Spaghetti sort








 
NewPP limit report
Preprocessor visited node count: 770/1000000
Preprocessor generated node count: 8407/1500000
Post-expand include size: 18367/2048000 bytes
Template argument size: 3775/2048000 bytes
Highest expansion depth: 13/40
Expensive parser function count: 0/500

 Saved in parser cache with key enwiki:pcache:idhash:3189304-0!0!0!!en!4!* and timestamp 20121211151359 
  /bodycontent 
 printfooter 

				Retrieved from "http://en.wikipedia.org/w/index.php?title=Comparison_sort&oldid=518109308"				
 /printfooter 
 catlinks 
Categories: Sorting algorithms  /catlinks 

 debughtml 
 /debughtml 

 /bodyContent 

 