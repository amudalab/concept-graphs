
Gap buffer
 /firstHeading 
 bodyContent 

 tagline 
From Wikipedia, the free encyclopedia
 /tagline 
 subtitle 

 /subtitle 
 jumpto 

					Jump to:					navigation, 					search

 /jumpto 
 bodycontent 





This article does not cite any references or sources. Please help improve this article by adding citations to reliable sources. Unsourced material may be challenged and removed. (April 2012) 


A gap buffer in computer science is a dynamic array that allows efficient insertion and deletion operations clustered near the same location. Gap buffers are especially common in text editors, where most changes to the text occur at or near the current location of the cursor. The text is stored in a large buffer in two contiguous segments, with a gap between them for inserting new text. Moving the cursor involves copying text from one side of the gap to the other (sometimes copying is delayed until the next operation that changes the text). Insertion adds new text at the end of the first segment. Deletion increases the size of the gap.
Text in a gap buffer is represented as two literal strings, which take very little extra space and which can be searched and displayed very quickly, compared to more sophisticated data structures such as linked lists. However, operations at different locations in the text and ones that fill the gap (requiring a new gap to be created) may require copying most of the text, which is especially inefficient for large files. The use of gap buffers is based on the assumption that such recopying occurs rarely enough that its cost can be amortized over the more common cheap operations.
[edit] Example
Below are some examples of operations with buffer gaps. The gap is represented pictorially by the empty space between the square brackets. This representation is a bit misleading: in a typical implementation, the endpoints of the gap are tracked using pointers or array indices, and the contents of the gap are ignored; this allows, for example, deletions to be done by adjusting a pointer without changing the text in the buffer. It is a common programming practice to use a semi-open interval for the gap pointers, i.e. the start-of-gap points to the invalid character following the last character in the first buffer, and the end-of-gap points to the first valid character in the second buffer (or equivalently, the pointers are considered to point "between" characters).
Initial state:

This is the way [                    ]out.

User inserts some new text:

This is the way the world started [   ]out.

User moves the cursor before "started"; system moves "started " from the first buffer to the second buffer.

This is the way the world [   ]started out.

User adds text filling the gap; system creates new gap:

This is the way the world as we know it [                   ]started out.

[edit] See also

Dynamic array, the special case of a gap buffer where the gap is always at the end
Zipper (data structure), conceptually a generalization of the gap buffer.
Linked list
Circular buffer
Rope (computer science)

[edit] External links

Overview and implementation in .NET/C#
Brief overview and sample C++ code
Implementation of a cyclic sorted gap buffer in .NET/C#
Use of gap buffer in early editor. (First written somewhere between 1969 and 1971)
emacs gap buffer info(Emacs gap buffer reference)
Text Editing

 
NewPP limit report
Preprocessor visited node count: 383/1000000
Preprocessor generated node count: 4393/1500000
Post-expand include size: 5812/2048000 bytes
Template argument size: 2614/2048000 bytes
Highest expansion depth: 20/40
Expensive parser function count: 1/500

 Saved in parser cache with key enwiki:pcache:idhash:378974-0!*!0!!*!4!* and timestamp 20130122172643 
  /bodycontent 
 printfooter 

				Retrieved from "http://en.wikipedia.org/w/index.php?title=Gap_buffer&oldid=486860006"				
 /printfooter 
 catlinks 
Categories: ArraysHidden categories: Articles lacking sources from April 2012All articles lacking sources  /catlinks 

 debughtml 
 /debughtml 

 /bodyContent 

 