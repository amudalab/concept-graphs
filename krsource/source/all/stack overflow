
Stack overflow
 /firstHeading 
 bodyContent 

 tagline 
From Wikipedia, the free encyclopedia
 /tagline 
 subtitle 

 /subtitle 
 jumpto 

					Jump to:					navigation, 					search

 /jumpto 
 bodycontent 
For other uses, see Stack overflow (disambiguation).
In software, a stack overflow occurs when too much memory is used on the call stack. The call stack contains a limited amount of memory, often determined at the start of the program. The size of the call stack depends on many factors, including the programming language, machine architecture, multi-threading, and amount of available memory. When a program attempts to use more space than is available on the call stack (that is, when it attempts to access memory beyond the call stack's bounds, which is essentially a buffer overflow), the stack is said to overflow, typically resulting in a program crash.[1]




Contents


1 Very deep or infinite recursion
2 Very deep recursion
3 Very large stack variables
4 See also
5 References
6 External links




[edit] Very deep or infinite recursion
Main article: Infinite recursion
The most common cause of stack overflow is excessively deep or infinite recursion. Languages like Scheme, which implement tail-call optimization, allow infinite recursion of a specific sorttail recursionto occur without stack overflow. This works because tail-recursion calls do not take up additional stack space.[2]
An example of infinite recursion in C.



int foo() {
     return foo();
}


The function foo, when it is invoked, continues to invoke itself, using additional space on the stack each time, until the stack overflows resulting in a segmentation fault.[3]
[edit] Very deep recursion
A recursive function that terminates in theory but causes a call stack buffer overflow in practice can be fixed by transforming the recursion into a loop and storing the function arguments in a stack. This is always possible, because the class of primitive recursive functions is equivalent to the class of LOOP computable functions. Consider the following example in C++-like pseudocode:
A primitive recursive function like the one on the left side can always be transformed into a loop like on the right side.










void function (argument) {
  if (condition)
    function (argument.next);
 
 
}







stack.push(argument);
while (!stack.empty()) {
  argument = stack.pop();
  if (condition)
    stack.push(argument.next);
}





[edit] Very large stack variables
The other major cause of a stack overflow results from an attempt to allocate more memory on the stack than will fit, for example by creating local array variables that are too large. For this reason some authors recommend that arrays larger than a few kilobytes should be allocated dynamically instead of as a local variable.[4]
An example of a very large stack variable in C:



int foo() {
     double x[1000000];
}


The declared array consumes 8 megabytes of data (assuming each double is 8 bytes); if this is more memory than is available on the stack (as set by thread creation parameters or operating system limits), a stack overflow will occur.
Stack overflows are made worse by anything that reduces the effective stack size of a given program. For example, the same program being run without multiple threads might work fine, but as soon as multi-threading is enabled the program will crash. This is because most programs with threads have less stack space per thread than a program with no threading support. Similarly, people new to kernel development are usually discouraged from using recursive algorithms or large stack buffers.[5][6]
[edit] See also




Computer Science  portal




Buffer overflow
Call stack
Heap overflow
Stack buffer overflow

[edit] References


^ Burley, James Craig (1991-06-01). "Using and Porting GNU Fortran". http://sunsite.ualberta.ca/Documentation/Gnu/gcc-2.95.2/html_node/g77_597.html.
^ "An Introduction to Scheme and its Implementation". 1997-02-19. http://www.federated.com/~jim/schintro-v14/schintro_73.html.
^ What is the difference between a segmentation fault and a stack overflow? at StackOverflow
^ Feldman, Howard (2005-11-23). "Modern Memory Management, Part 2". http://www.onlamp.com/pub/a/onlamp/2005/11/23/memory-management-2.html.
^ "Kernel Programming Guide: Performance and Stability Tips". Apple Inc.. 2006-11-07. http://developer.apple.com/DOCUMENTATION/Darwin/Conceptual/KernelProgramming/style/chapter_5_section_5.html.
^ Dunlap, Randy (2005-05-19). "Linux Kernel Development: Getting Started". http://www.xenotime.net/linux/mentor/linux-mentoring.pdf.


[edit] External links

The reasons why 64-bit programs require more stack memory









v
t
e


Memory management






Manual memory management



delete (C++)
C dynamic memory allocation
new (C++)
Static memory allocation








Virtual memory



Demand paging
Page table
Paging








Hardware



Memory management unit
Translation lookaside buffer








Garbage collection



Boehm garbage collector
Finalizer
Garbage
Mark-compact algorithm
Reference counting
Strong reference
Weak reference








Memory segmentation



Protected mode
Real mode
Virtual 8086 mode
x86 memory segmentation








Memory safety



Buffer overflow
Dangling pointer
Stack overflow








Issues



Fragmentation
Memory leak
Unreachable memory








Other



Automatic variable
International Symposium on Memory Management
Region-based memory management








 
NewPP limit report
Preprocessor visited node count: 3194/1000000
Preprocessor generated node count: 21837/1500000
Post-expand include size: 26158/2048000 bytes
Template argument size: 7620/2048000 bytes
Highest expansion depth: 13/40
Expensive parser function count: 1/500

 Saved in parser cache with key enwiki:pcache:idhash:1436888-0!*!0!!en!4!* and timestamp 20130122094700 
  /bodycontent 
 printfooter 

				Retrieved from "http://en.wikipedia.org/w/index.php?title=Stack_overflow&oldid=531602073"				
 /printfooter 
 catlinks 
Categories: Software bugsComputer errors  /catlinks 

 debughtml 
 /debughtml 

 /bodyContent 

 