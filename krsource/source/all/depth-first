
Depth-first search
 /firstHeading 
 bodyContent 

 tagline 
From Wikipedia, the free encyclopedia
 /tagline 
 subtitle 

 /subtitle 
 jumpto 

					Jump to:					navigation, 					search

 /jumpto 
 bodycontent 





This article needs additional citations for verification. Please help improve this article by adding citations to reliable sources. Unsourced material may be challenged and removed. (July 2010) 



Depth-first search



Order in which the nodes are visited


Class
Search algorithm


Data structure
Graph


Worst case performance
 for explicit graphs traversed without repetition,  for implicit graphs with branching factor b searched to depth d


Worst case space complexity
 if entire graph is traversed without repetition, O(longest path length searched) for implicit graphs without elimination of duplicate nodes




Graph and tree
search algorithms





A*
B*
Beam
BellmanFord
Best-first
Bidirectional
Borvka
Branch & bound
BFS
British Museum
D*
DFS
Depth-limited
Dijkstra
Edmonds
FloydWarshall
Hill climbing
Iterative deepening
Kruskal
Johnson
Lexicographic BFS
Prim
Uniform-cost




Listings




Graph algorithms
Search algorithms
List of graph algorithms




Related topics




Dynamic programming
Graph traversal
Tree traversal
Search games







v
t
e





Depth-first search (DFS) is an algorithm for traversing or searching a tree, tree structure, or graph. One starts at the root (selecting some node as the root in the graph case) and explores as far as possible along each branch before backtracking.
A version of depth-first search was investigated in the 19th century by French mathematician Charles Pierre Trmaux[1] as a strategy for solving mazes.[2][3]




Contents


1 Formal definition
2 Properties
3 Example
4 Output of a depth-first search

4.1 Vertex orderings


5 Pseudocode
6 Applications
7 See also
8 Notes
9 References
10 External links




[edit] Formal definition
Formally, DFS is an uninformed search that progresses by expanding the first child node of the search tree that appears and thus going deeper and deeper until a goal node is found, or until it hits a node that has no children. Then the search backtracks, returning to the most recent node it hasn't finished exploring. In a non-recursive implementation, all freshly expanded nodes are added to a stack for exploration.
[edit] Properties
The time and space analysis of DFS differs according to its application area. In theoretical computer science, DFS is typically used to traverse an entire graph, and takes time O(|E|), linear in the size of the graph. In these applications it also uses space O(|V|) in the worst case to store the stack of vertices on the current search path as well as the set of already-visited vertices. Thus, in this setting, the time and space bounds are the same as for breadth-first search and the choice of which of these two algorithms to use depends less on their complexity and more on the different properties of the vertex orderings the two algorithms produce.
For applications of DFS to search problems in artificial intelligence, however, the graph to be searched is often either too large to visit in its entirety or even infinite, and DFS may suffer from non-termination when the length of a path in the search tree is infinite. Therefore, the search is only performed to a limited depth, and due to limited memory availability one typically does not use data structures that keep track of the set of all previously visited vertices. In this case, the time is still linear in the number of expanded vertices and edges (although this number is not the same as the size of the entire graph because some vertices may be searched more than once and others not at all) but the space complexity of this variant of DFS is only proportional to the depth limit, much smaller than the space needed for searching to the same depth using breadth-first search. For such applications, DFS also lends itself much better to heuristic methods of choosing a likely-looking branch. When an appropriate depth limit is not known a priori, iterative deepening depth-first search applies DFS repeatedly with a sequence of increasing limits; in the artificial intelligence mode of analysis, with a branching factor greater than one, iterative deepening increases the running time by only a constant factor over the case in which the correct depth limit is known due to the geometric growth of the number of nodes per level.
DFS may be also used to collect a sample of graph nodes. However, incomplete DFS, similarly to incomplete BFS, is biased towards nodes of high degree.
[edit] Example
For the following graph:

a depth-first search starting at A, assuming that the left edges in the shown graph are chosen before right edges, and assuming the search remembers previously visited nodes and will not repeat them (since this is a small graph), will visit the nodes in the following order: A, B, D, F, E, C, G. The edges traversed in this search form a Trmaux tree, a structure with important applications in graph theory.
Performing the same search without remembering previously visited nodes results in visiting nodes in the order A, B, D, F, E, A, B, D, F, E, etc. forever, caught in the A, B, D, F, E cycle and never reaching C or G.
Iterative deepening is one technique to avoid this infinite loop and would reach all nodes.
[edit] Output of a depth-first search




The four types of edges defined by a spanning tree


A convenient description of a depth first search of a graph is in terms of a spanning tree of the vertices reached during the search. Based on this spanning tree, the edges of the original graph can be divided into three classes: forward edges, which point from a node of the tree to one of its descendants, back edges, which point from a node to one of its ancestors, and cross edges, which do neither. Sometimes tree edges, edges which belong to the spanning tree itself, are classified separately from forward edges. If the original graph is undirected then all of its edges are tree edges or back edges.
[edit] Vertex orderings
It is also possible to use the depth-first search to linearly order the vertices of the original graph (or tree). There are three common ways of doing this:

A preordering is a list of the vertices in the order that they were first visited by the depth-first search algorithm. This is a compact and natural way of describing the progress of the search, as was done earlier in this article. A preordering of an expression tree is the expression in Polish notation.


A postordering is a list of the vertices in the order that they were last visited by the algorithm. A postordering of an expression tree is the expression in reverse Polish notation.


A reverse postordering is the reverse of a postordering, i.e. a list of the vertices in the opposite order of their last visit. Reverse postordering is not the same as preordering. For example, when searching the directed graph





beginning at node A, one visits the nodes in sequence, to produce lists either A B D B A C A, or A C D C A B A (depending upon whether the algorithm chooses to visit B or C first). Note that repeat visits in the form of backtracking to a node, to check if it has still unvisited neighbours, are included here (even if it is found to have none). Thus the possible preorderings are A B D C and A C D B (order by node's leftmost occurrence in above list), while the possible reverse postorderings are A C B D and A B C D (order by node's rightmost occurrence in above list). Reverse postordering produces a topological sorting of any directed acyclic graph. This ordering is also useful in control flow analysis as it often represents a natural linearization of the control flow. The graph above might represent the flow of control in a code fragment like


     if (A) then {
       B
     } else {
       C
     }
     D


and it is natural to consider this code in the order A B C D or A C B D, but not natural to use the order A B D C or A C D B.

[edit] Pseudocode
Input: A graph G and a vertex v of G
Output: A labeling of the edges in the connected component of v as discovery edges and back edges

1  procedure DFS(G,v):
2      label v as explored
3      for all edges e in G.adjacentEdges(v) do
4          if edge e is unexplored then
5              w  G.adjacentVertex(v,e)
6              if vertex w is unexplored then
7                  label e as a discovery edge
8                  recursively call DFS(G,w)
9              else
10                 label e as a back edge

[edit] Applications


Sorry, your browser either has JavaScript disabled or does not have any supported player.
You can download the clip or download a player to play the clip in your browser.


Randomized algorithm similar to depth-first search used in generating a maze.


Algorithms that use depth-first search as a building block include:

Finding connected components.
Topological sorting.
Finding 2-(edge or vertex)-connected components.
Finding 3-(edge or vertex)-connected components.
Finding the bridges of a graph.
Finding strongly connected components.
Planarity testing[4][5]
Solving puzzles with only one solution, such as mazes. (DFS can be adapted to find all solutions to a maze by only including nodes on the current path in the visited set.)
Maze generation may use a randomized depth-first search.
Finding biconnectivity in graphs.

[edit] See also

Breadth-first search
Search games

[edit] Notes


^ Charles Pierre Trmaux (18591882) cole Polytechnique of Paris (X:1876), French engineer of the telegraph
in Public conference, December 2, 2010  by professor Jean Pelletier-Thibert in Acadmie de Macon (Burgundy  France)  (Abstract published in the Annals academic, March 2011  ISSN: 0980-6032)
^ Even, Shimon (2011), Graph Algorithms (2nd ed.), Cambridge University Press, pp.4648, ISBN978-0-521-73653-4, http://books.google.com/books?id=m3QTSMYm5rkC&pg=PA46.
^ Sedgewick, Robert (2002), Algorithms in C++: Graph Algorithms (3rd ed.), Pearson Education, ISBN978-0-201-36118-6.
^ Hopcroft, John; Tarjan, Robert E. (1974), "Efficient planarity testing", Journal of the Association for Computing Machinery 21 (4): 549568, doi:10.1145/321850.321852.
^ de Fraysseix, H.; Ossona de Mendez, P.; Rosenstiehl, P. (2006), "Trmaux Trees and Planarity", International Journal of Foundations of Computer Science 17 (5): 10171030, doi:10.1142/S0129054106004248.


[edit] References


Thomas H. Cormen, Charles E. Leiserson, Ronald L. Rivest, and Clifford Stein. Introduction to Algorithms, Second Edition. MIT Press and McGraw-Hill, 2001. ISBN 0-262-03293-7. Section 22.3: Depth-first search, pp.540549.
Knuth, Donald E. (1997), The Art Of Computer Programming Vol 1. 3rd ed, Boston: Addison-Wesley, ISBN0-201-89683-4, OCLC155842391, http://www-cs-faculty.stanford.edu/~knuth/taocp.html
Goodrich, Michael T. (2001), Algorithm Design: Foundations, Analysis, and Internet Examples, Wiley, ISBN0-471-38365-1


[edit] External links



Wikimedia Commons has media related to: Depth-first search



Depth-First Explanation and Example
C++ Boost Graph Library: Depth-First Search
Depth-First Search Animation (for a directed graph)
Depth First and Breadth First Search: Explanation and Code
QuickGraph, depth first search example for .Net
Depth-first search algorithm illustrated explanation (Java and C++ implementations)
YAGSBPL  A template-based C++ library for graph search and planning

 
NewPP limit report
Preprocessor visited node count: 6890/1000000
Preprocessor generated node count: 39254/1500000
Post-expand include size: 42854/2048000 bytes
Template argument size: 14706/2048000 bytes
Highest expansion depth: 17/40
Expensive parser function count: 1/500

 Saved in parser cache with key enwiki:pcache:idhash:97034-0!0!0!!en!4!* and timestamp 20130115063456 
  /bodycontent 
 printfooter 

				Retrieved from "http://en.wikipedia.org/w/index.php?title=Depth-first_search&oldid=526828888"				
 /printfooter 
 catlinks 
Categories: Graph algorithmsSearch algorithmsHidden categories: Articles needing additional references from July 2010All articles needing additional referencesArticles with example pseudocode  /catlinks 

 debughtml 
 /debughtml 

 /bodyContent 

 