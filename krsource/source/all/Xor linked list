
XOR linked list
 /firstHeading 
 bodyContent 

 tagline 
From Wikipedia, the free encyclopedia
 /tagline 
 subtitle 
(Redirected from Xor linked list)
 /subtitle 
 jumpto 

					Jump to:					navigation, 					search

 /jumpto 
 bodycontent 





This article needs additional citations for verification. Please help improve this article by adding citations to reliable sources. Unsourced material may be challenged and removed. (October 2009) 


An XOR linked list is a data structure used in computer programming. It takes advantage of the bitwise XOR operation, here denoted by , to decrease storage requirements for doubly linked lists. An ordinary doubly linked list stores addresses of the previous and next list items in each list node, requiring two address fields:

 ...  A       B         C         D         E  ...
          >  next >  next  >  next  >
          <  prev <  prev  <  prev  <

An XOR linked list compresses the same information into one address field by storing the bitwise XOR of the address for previous and the address for next in one field:

 ...  A        B         C         D         E  ...
         <>  AC  <->  BD  <->  CE  <->

When you traverse the list from left to right: supposing you are at C, you can take the address of the previous item, B, and XOR it with the value in the link field (BD). You will then have the address for D and you can continue traversing the list. The same pattern applies in the other direction.
To start traversing the list in either direction from some point, you need the address of two consecutive items, not just one. If the addresses of the two consecutive items are reversed, you will end up traversing the list in the opposite direction.
This form of linked list may be inadvisable:

General-purpose debugging tools cannot follow the XOR chain, making debugging more difficult; [1]
The price for the decrease in memory usage is an increase in code complexity, making maintenance more expensive;
Most garbage collection schemes do not work with data structures that do not contain literal pointers;
XOR of pointers is not defined in some contexts (e.g., the C language), although many languages provide some kind of type conversion between pointers and integers;
The pointers will be unreadable if one isn't traversing the list  for example, if the pointer to a list item was contained in another data structure;
While traversing the list you need to remember the address of the previously accessed node in order to calculate the next node's address.

Computer systems have increasingly cheap and plentiful memory, and storage overhead is not generally an overriding issue outside specialized embedded systems. Where it is still desirable to reduce the overhead of a linked list, unrolling provides a more practical approach (as well as other advantages, such as increasing cache performance and speeding random access).




Contents


1 Features
2 Why does it work?
3 Variations

3.1 Addition linked list
3.2 Subtraction linked list


4 See also
5 References
6 External links




[edit] Features

Given only one list item, one cannot immediately obtain the addresses of the other elements of the list.
Two XOR operations suffice to do the traversal from one item to the next, the same instructions sufficing in both cases. Consider a list with items {B C D} and with R1 and R2 being registers containing, respectively, the address of the current (say C) list item and a work register containing the XOR of the current address with the previous address (say CD). Cast as System/360 instructions:


X  R2,Link    R2 <- CD  BD (i.e. BC, "Link" being the link field
                                  in the current record, containing BD)
XR R1,R2      R1 <- C  BC    (i.e. B, voil: the next record)


End of list is signified by imagining a list item at address zero placed adjacent to an end point, as in {0 A B C}. The link field at A would be 0B. An additional instruction is needed in the above sequence after the two XOR operations to detect a zero result in developing the address of the current item,
A list end point can be made reflective by making the link pointer be zero. A zero pointer is a mirror. (The XOR of the left and right neighbor addresses, being the same, is zero.)

[edit] Why does it work?
The key is the first operation, and the properties of XOR:

XX=0
X0=X
XY=YX
(XY)Z=X(YZ)

The R2 register always contains the XOR of the address of current item C with the address of the predecessor item P: CP. The Link fields in the records contain the XOR of the left and right successor addresses, say LR. XOR of R2 (CP) with the current link field (LR) yields CPLR.

If the predecessor was L, the P(=L) and L cancel out leaving CR.
If the predecessor had been R, the P(=R) and R cancel, leaving CL.

In each case, the result is the XOR of the current address with the next address. XOR of this with the current address in R1 leaves the next address. R2 is left with the requisite XOR pair of the (now) current address and the predecessor.
[edit] Variations
The underlying principle of the XOR linked list can be applied to any reversible binary operation. Replacing XOR by addition or subtraction gives slightly different, but largely equivalent, formulations:
[edit] Addition linked list

 ...  A        B         C         D         E  ...
         <>  A+C  <->  B+D  <->  C+E  <->

This kind of list has exactly the same properties as the XOR linked list, except that a zero link field is not a "mirror". The address of the next node in the list is given by subtracting the previous node's address from the current node's link field.
[edit] Subtraction linked list

 ...  A        B         C         D         E  ...
         <>  C-A  <->  D-B  <->  E-C  <->

This kind of list differs from the "traditional" XOR linked list in that the instruction sequences needed to traverse the list forwards is different from the sequence needed to traverse the list in reverse. The address of the next node, going forwards, is given by adding the link field to the previous node's address; the address of the preceding node is given by subtracting the link field from the next node's address.
The subtraction linked list is also special in that the entire list can be relocated in memory without needing any patching of pointer values, since adding a constant offset to each address in the list will not require any changes to the values stored in the link fields. (See also Serialization.) This is an advantage over both XOR linked lists and traditional linked lists.
Note about implementations in C:
The subtraction linked list also does not require casting C pointers to integers, provided the whole list structure is inside a single contiguous block of memory. In that case the subtraction of two C pointers yields an integer. Note that on most platforms the maximum size of a contiguous block of memory will be considerably smaller than the total available memory, so large lists will typically not fit into a single contiguous block of memory. This is not a problem as long as the platform provides the C99 type uintptr_t, because then pointers can be portably cast to uintptr_t and back again.
[edit] See also

XOR swap algorithm

[edit] References

^ http://www.iecc.com/gclist/GC-faq.html#GC,%20C,%20and%20C++

[edit] External links

Example implementation in C++.

 
NewPP limit report
Preprocessor visited node count: 454/1000000
Preprocessor generated node count: 4621/1500000
Post-expand include size: 4485/2048000 bytes
Template argument size: 2023/2048000 bytes
Highest expansion depth: 17/40
Expensive parser function count: 1/500

 Saved in parser cache with key enwiki:pcache:idhash:291683-0!*!0!!en!4!* and timestamp 20130122175511 
  /bodycontent 
 printfooter 

				Retrieved from "http://en.wikipedia.org/w/index.php?title=XOR_linked_list&oldid=527103638"				
 /printfooter 
 catlinks 
Categories: Binary arithmeticLinked listsHidden categories: Articles needing additional references from October 2009All articles needing additional references  /catlinks 

 debughtml 
 /debughtml 

 /bodyContent 

 