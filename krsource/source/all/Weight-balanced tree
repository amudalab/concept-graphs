
Weight-balanced tree
 /firstHeading 
 bodyContent 

 tagline 
From Wikipedia, the free encyclopedia
 /tagline 
 subtitle 

 /subtitle 
 jumpto 

					Jump to:					navigation, 					search

 /jumpto 
 bodycontent 
A weight-balanced binary tree is a binary tree which is balanced based on knowledge of the probabilities of searching for each individual node. Within each subtree, the node with the highest weight appears at the root. This can result in more efficient searching performance.
Construction of such a tree is similar to that of a Treap, but node weights are chosen randomly in the latter.


Example of weight balanced tree






Contents


1 The diagram
2 Timing analysis
3 See also
4 References




[edit] The diagram
In the diagram to the right, the letters represent node values and the numbers represent node weights. Values are used to order the tree, as in a general binary search tree. The weight may be thought of as a probability or activity count associated with the node. In the diagram, the root is G because its weight is the greatest in the tree. The left subtree begins with A because, out of all nodes with values that come before G, A has the highest weight. Similarly, N is the highest-weighted node that comes after G.
[edit] Timing analysis
A weight balanced tree gives close to optimal values for the expected length of successful search calculations. From the above example we get
ELOSS = depth(node A)*probability(node A) + depth(node C)*probability(node C) + ...
ELOSS = 2*0.17 + 5*0.03 + 4*0.09 + 3*0.12 + 1*0.20 + 3*0.11 + 3*0.10 + 2*0.18
ELOSS = 2.4
This is the expected number of nodes that will be examined before finding the desired node.
[edit] See also

Binary tree
AVL tree
B-tree
Binary space partitioning
Red-black tree
Treap

[edit] References

Jean-Paul Tremblay and Grant A. Cheston. Data Structures and Software Development in an object-oriented domain, Eiffel Edition. Prentice Hall, 2001. ISBN 0-13-787946-6.

 
NewPP limit report
Preprocessor visited node count: 15/1000000
Preprocessor generated node count: 20/1500000
Post-expand include size: 0/2048000 bytes
Template argument size: 0/2048000 bytes
Highest expansion depth: 2/40
Expensive parser function count: 0/500

 Saved in parser cache with key enwiki:pcache:idhash:4849574-0!*!0!!en!4!* and timestamp 20130122175514 
  /bodycontent 
 printfooter 

				Retrieved from "http://en.wikipedia.org/w/index.php?title=Weight-balanced_tree&oldid=435813754"				
 /printfooter 
 catlinks 
Categories: Binary trees  /catlinks 

 debughtml 
 /debughtml 

 /bodyContent 

 